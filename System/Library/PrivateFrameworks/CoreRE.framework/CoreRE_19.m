uint64_t *re::allocInfo_GeomBuildBoxOptions(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254117820);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254117820))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254117D30, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254117D40 = 0;
    qword_254117D50 = 0;
    qword_254117D58 = 0xFFFFFFFFLL;
    qword_254117D30 = (uint64_t)&off_24ED7DAA8;
    qword_254117D60 = (uint64_t)"GeomBuildBoxOptions";
    dword_254117D68 = 0;
    xmmword_254117D70 = 0u;
    xmmword_254117D80 = 0u;
    xmmword_254117D90 = 0u;
    qword_254117DA0 = 0;
    __cxa_guard_release(&qword_254117820);
  }
  return &qword_254117D30;
}

void re::initInfo_GeomBuildBoxOptions(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  const re::IntrospectionBase *v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  const re::IntrospectionBase *v39;
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  const re::IntrospectionBase *v43;
  void *v44;
  uint64_t v45;
  __int128 v46;
  _QWORD v47[2];
  __int128 v48;

  v47[0] = 0x8A7565098DA98CALL;
  v47[1] = "GeomBuildBoxOptions";
  re::StringID::destroyString((re::StringID *)v47);
  *((_OWORD *)this + 2) = v48;
  v4 = atomic_load((unsigned __int8 *)&qword_254117828);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254117828);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_uint16_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "widthSegmentCount";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254117C78 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_uint16_t((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "heightSegmentCount";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x200000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254117C80 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_uint16_t((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "depthSegmentCount";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x400000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254117C88 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_uint16_t((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "cornerSegmentCount";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x600000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254117C90 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_float((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "radius";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x800000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_254117C98 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_float((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "width";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0xC00000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_254117CA0 = v29;
      v30 = re::introspectionAllocator((re *)v29);
      v32 = re::introspect_float((re *)1, v31);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "height";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x1000000007;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_254117CA8 = v33;
      v34 = re::introspectionAllocator((re *)v33);
      v36 = re::introspect_float((re *)1, v35);
      v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 72, 8);
      *(_DWORD *)v37 = 1;
      *(_QWORD *)(v37 + 8) = "depth";
      *(_QWORD *)(v37 + 16) = v36;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = 0x1400000008;
      *(_DWORD *)(v37 + 40) = 0;
      *(_QWORD *)(v37 + 48) = 0;
      *(_QWORD *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_254117CB0 = v37;
      v38 = re::introspectionAllocator((re *)v37);
      v40 = re::introspect_BOOL((re *)1, v39);
      v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 72, 8);
      *(_DWORD *)v41 = 1;
      *(_QWORD *)(v41 + 8) = "addUVs";
      *(_QWORD *)(v41 + 16) = v40;
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0x1800000009;
      *(_DWORD *)(v41 + 40) = 0;
      *(_QWORD *)(v41 + 48) = 0;
      *(_QWORD *)(v41 + 56) = 0;
      *(_DWORD *)(v41 + 64) = 0;
      qword_254117CB8 = v41;
      v42 = re::introspectionAllocator((re *)v41);
      v44 = re::introspect_BOOL((re *)1, v43);
      v45 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 72, 8);
      *(_DWORD *)v45 = 1;
      *(_QWORD *)(v45 + 8) = "addNormals";
      *(_QWORD *)(v45 + 16) = v44;
      *(_QWORD *)(v45 + 24) = 0;
      *(_QWORD *)(v45 + 32) = 0x190000000ALL;
      *(_DWORD *)(v45 + 40) = 0;
      *(_QWORD *)(v45 + 48) = 0;
      *(_QWORD *)(v45 + 56) = 0;
      *(_DWORD *)(v45 + 64) = 0;
      qword_254117CC0 = v45;
      __cxa_guard_release(&qword_254117828);
    }
  }
  *((_QWORD *)this + 2) = 0x1C00000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 10;
  *((_QWORD *)this + 8) = &qword_254117C78;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::GeomBuildBoxOptions>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::GeomBuildBoxOptions>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildBoxOptions>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildBoxOptions>;
  re::IntrospectionRegistry::add(this, v3);
  v46 = v48;
}

double re::internal::defaultConstruct<re::GeomBuildBoxOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0x1000100010001;
  result = 0.0078125;
  *(_OWORD *)(a3 + 8) = xmmword_2260F8390;
  *(_WORD *)(a3 + 24) = 257;
  *(_BYTE *)(a3 + 26) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::GeomBuildBoxOptions>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0x1000100010001;
  result = 0.0078125;
  *(_OWORD *)(a1 + 8) = xmmword_2260F8390;
  *(_WORD *)(a1 + 24) = 257;
  *(_BYTE *)(a1 + 26) = 0;
  return result;
}

uint64_t re::introspect_GeomBuildBoxOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildBoxOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildBoxOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildBoxOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildBoxOptions>, this);
}

uint64_t *re::allocInfo_GeomBuildBoxWithRoundedCornersOptions(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254117830);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254117830))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254117DA8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254117DB8 = 0;
    qword_254117DC8 = 0;
    qword_254117DD0 = 0xFFFFFFFFLL;
    qword_254117DA8 = (uint64_t)&off_24ED7DAA8;
    qword_254117DD8 = (uint64_t)"GeomBuildBoxWithRoundedCornersOptions";
    dword_254117DE0 = 0;
    xmmword_254117DE8 = 0u;
    xmmword_254117DF8 = 0u;
    xmmword_254117E08 = 0u;
    qword_254117E18 = 0;
    __cxa_guard_release(&qword_254117830);
  }
  return &qword_254117DA8;
}

void re::initInfo_GeomBuildBoxWithRoundedCornersOptions(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  const re::IntrospectionBase *v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  const re::IntrospectionBase *v39;
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  const re::IntrospectionBase *v43;
  void *v44;
  uint64_t v45;
  uint64_t *v46;
  const re::IntrospectionBase *v47;
  void *v48;
  uint64_t v49;
  uint64_t *v50;
  const re::IntrospectionBase *v51;
  void *v52;
  uint64_t v53;
  uint64_t *v54;
  const re::IntrospectionBase *v55;
  void *v56;
  uint64_t v57;
  uint64_t *v58;
  const re::IntrospectionBase *v59;
  void *v60;
  uint64_t v61;
  uint64_t *v62;
  const re::IntrospectionBase *v63;
  void *v64;
  uint64_t v65;
  uint64_t *v66;
  const re::IntrospectionBase *v67;
  void *v68;
  uint64_t v69;
  __int128 v70;
  _QWORD v71[2];
  __int128 v72;

  v71[0] = 0x38926F5D37C171DCLL;
  v71[1] = "GeomBuildBoxWithRoundedCornersOptions";
  re::StringID::destroyString((re::StringID *)v71);
  *((_OWORD *)this + 2) = v72;
  v4 = atomic_load((unsigned __int8 *)&qword_254117838);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254117838);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_uint16_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "widthSegmentCount";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254118258 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_uint16_t((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "heightSegmentCount";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x200000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254118260 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_uint16_t((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "depthSegmentCount";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x400000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254118268 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_uint16_t((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "majorSegmentCount";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x600000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254118270 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_uint16_t((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "minorSegmentCount";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x800000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_254118278 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_float((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "majorRadius";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0xC00000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_254118280 = v29;
      v30 = re::introspectionAllocator((re *)v29);
      v32 = re::introspect_float((re *)1, v31);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "minorRadius";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x1000000007;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_254118288 = v33;
      v34 = re::introspectionAllocator((re *)v33);
      v36 = re::introspect_float((re *)1, v35);
      v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 72, 8);
      *(_DWORD *)v37 = 1;
      *(_QWORD *)(v37 + 8) = "width";
      *(_QWORD *)(v37 + 16) = v36;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = 0x1400000008;
      *(_DWORD *)(v37 + 40) = 0;
      *(_QWORD *)(v37 + 48) = 0;
      *(_QWORD *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_254118290 = v37;
      v38 = re::introspectionAllocator((re *)v37);
      v40 = re::introspect_float((re *)1, v39);
      v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 72, 8);
      *(_DWORD *)v41 = 1;
      *(_QWORD *)(v41 + 8) = "height";
      *(_QWORD *)(v41 + 16) = v40;
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0x1800000009;
      *(_DWORD *)(v41 + 40) = 0;
      *(_QWORD *)(v41 + 48) = 0;
      *(_QWORD *)(v41 + 56) = 0;
      *(_DWORD *)(v41 + 64) = 0;
      qword_254118298 = v41;
      v42 = re::introspectionAllocator((re *)v41);
      v44 = re::introspect_float((re *)1, v43);
      v45 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 72, 8);
      *(_DWORD *)v45 = 1;
      *(_QWORD *)(v45 + 8) = "depth";
      *(_QWORD *)(v45 + 16) = v44;
      *(_QWORD *)(v45 + 24) = 0;
      *(_QWORD *)(v45 + 32) = 0x1C0000000ALL;
      *(_DWORD *)(v45 + 40) = 0;
      *(_QWORD *)(v45 + 48) = 0;
      *(_QWORD *)(v45 + 56) = 0;
      *(_DWORD *)(v45 + 64) = 0;
      qword_2541182A0 = v45;
      v46 = re::introspectionAllocator((re *)v45);
      v48 = re::introspect_BOOL((re *)1, v47);
      v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 72, 8);
      *(_DWORD *)v49 = 1;
      *(_QWORD *)(v49 + 8) = "addUVs";
      *(_QWORD *)(v49 + 16) = v48;
      *(_QWORD *)(v49 + 24) = 0;
      *(_QWORD *)(v49 + 32) = 0x200000000BLL;
      *(_DWORD *)(v49 + 40) = 0;
      *(_QWORD *)(v49 + 48) = 0;
      *(_QWORD *)(v49 + 56) = 0;
      *(_DWORD *)(v49 + 64) = 0;
      qword_2541182A8 = v49;
      v50 = re::introspectionAllocator((re *)v49);
      v52 = re::introspect_BOOL((re *)1, v51);
      v53 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 72, 8);
      *(_DWORD *)v53 = 1;
      *(_QWORD *)(v53 + 8) = "addNormals";
      *(_QWORD *)(v53 + 16) = v52;
      *(_QWORD *)(v53 + 24) = 0;
      *(_QWORD *)(v53 + 32) = 0x210000000CLL;
      *(_DWORD *)(v53 + 40) = 0;
      *(_QWORD *)(v53 + 48) = 0;
      *(_QWORD *)(v53 + 56) = 0;
      *(_DWORD *)(v53 + 64) = 0;
      qword_2541182B0 = v53;
      v54 = re::introspectionAllocator((re *)v53);
      v56 = re::introspect_BOOL((re *)1, v55);
      v57 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 72, 8);
      *(_DWORD *)v57 = 1;
      *(_QWORD *)(v57 + 8) = "continuousCorners";
      *(_QWORD *)(v57 + 16) = v56;
      *(_QWORD *)(v57 + 24) = 0;
      *(_QWORD *)(v57 + 32) = 0x230000000DLL;
      *(_DWORD *)(v57 + 40) = 0;
      *(_QWORD *)(v57 + 48) = 0;
      *(_QWORD *)(v57 + 56) = 0;
      *(_DWORD *)(v57 + 64) = 0;
      qword_2541182B8 = v57;
      v58 = re::introspectionAllocator((re *)v57);
      v60 = re::introspect_BOOL((re *)1, v59);
      v61 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v58 + 32))(v58, 72, 8);
      *(_DWORD *)v61 = 1;
      *(_QWORD *)(v61 + 8) = "clampContinuousCorners";
      *(_QWORD *)(v61 + 16) = v60;
      *(_QWORD *)(v61 + 24) = 0;
      *(_QWORD *)(v61 + 32) = 0x240000000ELL;
      *(_DWORD *)(v61 + 40) = 0;
      *(_QWORD *)(v61 + 48) = 0;
      *(_QWORD *)(v61 + 56) = 0;
      *(_DWORD *)(v61 + 64) = 0;
      qword_2541182C0 = v61;
      v62 = re::introspectionAllocator((re *)v61);
      v64 = re::introspect_BOOL((re *)1, v63);
      v65 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v62 + 32))(v62, 72, 8);
      *(_DWORD *)v65 = 1;
      *(_QWORD *)(v65 + 8) = "normalizeUVs";
      *(_QWORD *)(v65 + 16) = v64;
      *(_QWORD *)(v65 + 24) = 0;
      *(_QWORD *)(v65 + 32) = 0x250000000FLL;
      *(_DWORD *)(v65 + 40) = 0;
      *(_QWORD *)(v65 + 48) = 0;
      *(_QWORD *)(v65 + 56) = 0;
      *(_DWORD *)(v65 + 64) = 0;
      qword_2541182C8 = v65;
      v66 = re::introspectionAllocator((re *)v65);
      v68 = re::introspect_BOOL((re *)1, v67);
      v69 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v66 + 32))(v66, 72, 8);
      *(_DWORD *)v69 = 1;
      *(_QWORD *)(v69 + 8) = "reflectUVs";
      *(_QWORD *)(v69 + 16) = v68;
      *(_QWORD *)(v69 + 24) = 0;
      *(_QWORD *)(v69 + 32) = 0x2600000010;
      *(_DWORD *)(v69 + 40) = 0;
      *(_QWORD *)(v69 + 48) = 0;
      *(_QWORD *)(v69 + 56) = 0;
      *(_DWORD *)(v69 + 64) = 0;
      qword_2541182D0 = v69;
      __cxa_guard_release(&qword_254117838);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 16;
  *((_QWORD *)this + 8) = &qword_254118258;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::GeomBuildBoxWithRoundedCornersOptions>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::GeomBuildBoxWithRoundedCornersOptions>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildBoxWithRoundedCornersOptions>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildBoxWithRoundedCornersOptions>;
  re::IntrospectionRegistry::add(this, v3);
  v70 = v72;
}

double re::internal::defaultConstruct<re::GeomBuildBoxWithRoundedCornersOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0x3000100010001;
  *(_WORD *)(a3 + 8) = 4;
  *(_OWORD *)(a3 + 12) = xmmword_2260F83A0;
  *(_DWORD *)(a3 + 28) = 1065353216;
  *(_QWORD *)&result = 16777473;
  *(_DWORD *)(a3 + 32) = 16777473;
  *(_WORD *)(a3 + 36) = 1;
  *(_BYTE *)(a3 + 38) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::GeomBuildBoxWithRoundedCornersOptions>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0x3000100010001;
  *(_WORD *)(a1 + 8) = 4;
  *(_OWORD *)(a1 + 12) = xmmword_2260F83A0;
  *(_DWORD *)(a1 + 28) = 1065353216;
  *(_QWORD *)&result = 16777473;
  *(_DWORD *)(a1 + 32) = 16777473;
  *(_WORD *)(a1 + 36) = 1;
  *(_BYTE *)(a1 + 38) = 0;
  return result;
}

uint64_t re::introspect_GeomBuildBoxWithRoundedCornersOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildBoxWithRoundedCornersOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildBoxWithRoundedCornersOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildBoxWithRoundedCornersOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildBoxWithRoundedCornersOptions>, this);
}

uint64_t *re::allocInfo_GeomBuildCapsuleOptions(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254117840);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254117840))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254117E20, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254117E30 = 0;
    qword_254117E40 = 0;
    qword_254117E48 = 0xFFFFFFFFLL;
    qword_254117E20 = (uint64_t)&off_24ED7DAA8;
    qword_254117E50 = (uint64_t)"GeomBuildCapsuleOptions";
    dword_254117E58 = 0;
    xmmword_254117E60 = 0u;
    xmmword_254117E70 = 0u;
    xmmword_254117E80 = 0u;
    qword_254117E90 = 0;
    __cxa_guard_release(&qword_254117840);
  }
  return &qword_254117E20;
}

void re::initInfo_GeomBuildCapsuleOptions(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  __int128 v34;
  _QWORD v35[2];
  __int128 v36;

  v35[0] = 0x8C51E8B3ECDD9986;
  v35[1] = "GeomBuildCapsuleOptions";
  re::StringID::destroyString((re::StringID *)v35);
  *((_OWORD *)this + 2) = v36;
  v4 = atomic_load((unsigned __int8 *)&qword_254117848);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254117848);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_uint16_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "radialSegmentCount";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254117A20 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_uint16_t((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "heightSegmentCount";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x200000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254117A28 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_uint16_t((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "capSegmentCount";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x400000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254117A30 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_float((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "capRadius";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x800000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254117A38 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_float((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "height";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0xC00000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_254117A40 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_BOOL((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "addUVs";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x1000000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_254117A48 = v29;
      v30 = re::introspectionAllocator((re *)v29);
      v32 = re::introspect_BOOL((re *)1, v31);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "addNormals";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x1100000007;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_254117A50 = v33;
      __cxa_guard_release(&qword_254117848);
    }
  }
  *((_QWORD *)this + 2) = 0x1400000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_254117A20;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::GeomBuildCapsuleOptions>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::GeomBuildCapsuleOptions>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildCapsuleOptions>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildCapsuleOptions>;
  re::IntrospectionRegistry::add(this, v3);
  v34 = v36;
}

double re::internal::defaultConstruct<re::GeomBuildCapsuleOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_DWORD *)a3 = 65544;
  *(_WORD *)(a3 + 4) = 4;
  result = 2.00000047;
  *(_QWORD *)(a3 + 8) = 0x400000003F000000;
  *(_WORD *)(a3 + 16) = 257;
  *(_BYTE *)(a3 + 18) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::GeomBuildCapsuleOptions>(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = 65544;
  *(_WORD *)(a1 + 4) = 4;
  result = 2.00000047;
  *(_QWORD *)(a1 + 8) = 0x400000003F000000;
  *(_WORD *)(a1 + 16) = 257;
  *(_BYTE *)(a1 + 18) = 0;
  return result;
}

uint64_t re::introspect_GeomBuildCapsuleOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildCapsuleOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildCapsuleOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildCapsuleOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildCapsuleOptions>, this);
}

uint64_t *re::allocInfo_GeomBuildConeOptions(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254117850);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254117850))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254117E98, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254117EA8 = 0;
    qword_254117EB8 = 0;
    qword_254117EC0 = 0xFFFFFFFFLL;
    qword_254117E98 = (uint64_t)&off_24ED7DAA8;
    qword_254117EC8 = (uint64_t)"GeomBuildConeOptions";
    dword_254117ED0 = 0;
    xmmword_254117ED8 = 0u;
    xmmword_254117EE8 = 0u;
    xmmword_254117EF8 = 0u;
    qword_254117F08 = 0;
    __cxa_guard_release(&qword_254117850);
  }
  return &qword_254117E98;
}

void re::initInfo_GeomBuildConeOptions(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  __int128 v34;
  _QWORD v35[2];
  __int128 v36;

  v35[0] = 0xC49383041CB7C52;
  v35[1] = "GeomBuildConeOptions";
  re::StringID::destroyString((re::StringID *)v35);
  *((_OWORD *)this + 2) = v36;
  v4 = atomic_load((unsigned __int8 *)&qword_254117858);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254117858);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_uint16_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "radialSegmentCount";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254117A58 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_uint16_t((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "heightSegmentCount";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x200000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254117A60 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_float((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "height";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x400000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254117A68 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_float((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "radius";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x800000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254117A70 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_BOOL((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "cap";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0xC00000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_254117A78 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_BOOL((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "addUVs";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0xD00000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_254117A80 = v29;
      v30 = re::introspectionAllocator((re *)v29);
      v32 = re::introspect_BOOL((re *)1, v31);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "addNormals";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0xE00000007;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_254117A88 = v33;
      __cxa_guard_release(&qword_254117858);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_254117A58;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::GeomBuildConeOptions>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::GeomBuildConeOptions>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildConeOptions>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildConeOptions>;
  re::IntrospectionRegistry::add(this, v3);
  v34 = v36;
}

double re::internal::defaultConstruct<re::GeomBuildConeOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_DWORD *)a3 = 65544;
  *(_QWORD *)(a3 + 4) = 0x3F0000003F800000;
  *(_QWORD *)&result = 65793;
  *(_DWORD *)(a3 + 12) = 65793;
  return result;
}

double re::internal::defaultConstructV2<re::GeomBuildConeOptions>(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = 65544;
  *(_QWORD *)(a1 + 4) = 0x3F0000003F800000;
  *(_QWORD *)&result = 65793;
  *(_DWORD *)(a1 + 12) = 65793;
  return result;
}

uint64_t re::introspect_GeomBuildConeOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildConeOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildConeOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildConeOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildConeOptions>, this);
}

uint64_t *re::allocInfo_GeomBuildCylinderOptions(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254117860);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254117860))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254117F10, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254117F20 = 0;
    qword_254117F30 = 0;
    qword_254117F38 = 0xFFFFFFFFLL;
    qword_254117F10 = (uint64_t)&off_24ED7DAA8;
    qword_254117F40 = (uint64_t)"GeomBuildCylinderOptions";
    dword_254117F48 = 0;
    xmmword_254117F50 = 0u;
    xmmword_254117F60 = 0u;
    xmmword_254117F70 = 0u;
    qword_254117F80 = 0;
    __cxa_guard_release(&qword_254117860);
  }
  return &qword_254117F10;
}

void re::initInfo_GeomBuildCylinderOptions(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  const re::IntrospectionBase *v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  const re::IntrospectionBase *v39;
  void *v40;
  uint64_t v41;
  __int128 v42;
  _QWORD v43[2];
  __int128 v44;

  v43[0] = 0x289B3F5B491A3E2CLL;
  v43[1] = "GeomBuildCylinderOptions";
  re::StringID::destroyString((re::StringID *)v43);
  *((_OWORD *)this + 2) = v44;
  v4 = atomic_load((unsigned __int8 *)&qword_254117868);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254117868);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_uint16_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "radialSegmentCount";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254117AC8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_uint16_t((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "heightSegmentCount";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x200000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254117AD0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_float((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "height";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x400000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254117AD8 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_float((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "topRadius";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x800000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254117AE0 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_float((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "bottomRadius";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0xC00000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_254117AE8 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_BOOL((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "capTop";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x1000000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_254117AF0 = v29;
      v30 = re::introspectionAllocator((re *)v29);
      v32 = re::introspect_BOOL((re *)1, v31);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "capBottom";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x1100000007;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_254117AF8 = v33;
      v34 = re::introspectionAllocator((re *)v33);
      v36 = re::introspect_BOOL((re *)1, v35);
      v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 72, 8);
      *(_DWORD *)v37 = 1;
      *(_QWORD *)(v37 + 8) = "addUVs";
      *(_QWORD *)(v37 + 16) = v36;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = 0x1200000008;
      *(_DWORD *)(v37 + 40) = 0;
      *(_QWORD *)(v37 + 48) = 0;
      *(_QWORD *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_254117B00 = v37;
      v38 = re::introspectionAllocator((re *)v37);
      v40 = re::introspect_BOOL((re *)1, v39);
      v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 72, 8);
      *(_DWORD *)v41 = 1;
      *(_QWORD *)(v41 + 8) = "addNormals";
      *(_QWORD *)(v41 + 16) = v40;
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0x1300000009;
      *(_DWORD *)(v41 + 40) = 0;
      *(_QWORD *)(v41 + 48) = 0;
      *(_QWORD *)(v41 + 56) = 0;
      *(_DWORD *)(v41 + 64) = 0;
      qword_254117B08 = v41;
      __cxa_guard_release(&qword_254117868);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 9;
  *((_QWORD *)this + 8) = &qword_254117AC8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::GeomBuildCylinderOptions>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::GeomBuildCylinderOptions>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildCylinderOptions>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildCylinderOptions>;
  re::IntrospectionRegistry::add(this, v3);
  v42 = v44;
}

double re::internal::defaultConstruct<re::GeomBuildCylinderOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_DWORD *)a3 = 65544;
  result = 0.0000305175853;
  *(_QWORD *)(a3 + 4) = 0x3F0000003F800000;
  *(_QWORD *)(a3 + 12) = 0x10101013F000000;
  *(_BYTE *)(a3 + 20) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::GeomBuildCylinderOptions>(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = 65544;
  result = 0.0000305175853;
  *(_QWORD *)(a1 + 4) = 0x3F0000003F800000;
  *(_QWORD *)(a1 + 12) = 0x10101013F000000;
  *(_BYTE *)(a1 + 20) = 0;
  return result;
}

uint64_t re::introspect_GeomBuildCylinderOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildCylinderOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildCylinderOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildCylinderOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildCylinderOptions>, this);
}

void re::introspect_GeomBuildPlaneOrientation(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  StringID v42;
  _QWORD v43[2];
  _QWORD v44[61];

  v2 = atomic_load((unsigned __int8 *)&qword_254117870);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_254117870);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 2;
      *((_QWORD *)v28 + 2) = "PositiveY";
      qword_254117990 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 3;
      *((_QWORD *)v30 + 2) = "NegativeY";
      qword_254117998 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = "PositiveX";
      qword_2541179A0 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *((_QWORD *)v34 + 1) = 1;
      *((_QWORD *)v34 + 2) = "NegativeX";
      qword_2541179A8 = (uint64_t)v34;
      v35 = re::introspectionAllocator(v34);
      v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
      *(_DWORD *)v36 = 1;
      *((_QWORD *)v36 + 1) = 4;
      *((_QWORD *)v36 + 2) = "PositiveZ";
      qword_2541179B0 = (uint64_t)v36;
      v37 = re::introspectionAllocator(v36);
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = 5;
      *(_QWORD *)(v38 + 16) = "NegativeZ";
      qword_2541179B8 = v38;
      __cxa_guard_release(&qword_254117870);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254117878);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254117878))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254117B10, "GeomBuildPlaneOrientation", 4, 4, 1, 1);
    qword_254117B10 = (uint64_t)&off_24ED7D9E8;
    qword_254117B50 = (uint64_t)&re::introspect_GeomBuildPlaneOrientation(BOOL)::enumTable;
    dword_254117B20 = 9;
    __cxa_guard_release(&qword_254117878);
  }
  if ((_MergedGlobals_363 & 1) == 0)
  {
    _MergedGlobals_363 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254117B10, a2);
    v40 = 0xBA0BF2EDFBA4A4CCLL;
    v41 = "GeomBuildPlaneOrientation";
    v44[0] = 208862;
    v44[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v44);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v44);
      v6 = (unsigned int *)qword_254117B50;
      v43[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v44, &v40, 1, 1, (uint64_t)v43);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v42.var0 = 2 * v12;
            v42.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v44, v16, &v42);
            re::StringID::destroyString((re::StringID *)&v42);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v42.var0 = 2 * v20;
              v42.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v44, v24, &v42);
              re::StringID::destroyString((re::StringID *)&v42);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v44, v25);
      xmmword_254117B30 = (__int128)v42;
      re::StringID::destroyString((re::StringID *)&v40);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v44);
      re::internal::assertLog((re::internal *)5, v39, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "GeomBuildPlaneOrientation", v40, v41);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::allocInfo_GeomBuildPlaneOptions(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254117880);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254117880))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254117F88, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254117F98 = 0;
    qword_254117FA8 = 0;
    qword_254117FB0 = 0xFFFFFFFFLL;
    qword_254117F88 = (uint64_t)&off_24ED7DAA8;
    qword_254117FB8 = (uint64_t)"GeomBuildPlaneOptions";
    dword_254117FC0 = 0;
    xmmword_254117FC8 = 0u;
    xmmword_254117FD8 = 0u;
    xmmword_254117FE8 = 0u;
    qword_254117FF8 = 0;
    __cxa_guard_release(&qword_254117880);
  }
  return &qword_254117F88;
}

void re::initInfo_GeomBuildPlaneOptions(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  const re::IntrospectionBase *v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  const re::IntrospectionBase *v39;
  uint64_t v40;
  __int128 v41;
  _QWORD v42[2];
  __int128 v43;

  v42[0] = 0x85F4F1B50A8F3C68;
  v42[1] = "GeomBuildPlaneOptions";
  re::StringID::destroyString((re::StringID *)v42);
  *((_OWORD *)this + 2) = v43;
  v4 = atomic_load((unsigned __int8 *)&qword_254117888);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254117888);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_uint16_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "widthSegmentCount";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254117B58 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_uint16_t((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "depthSegmentCount";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x200000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254117B60 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_uint16_t((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "cornerSegmentCount";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x400000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254117B68 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_float((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "width";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x800000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254117B70 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_float((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "depth";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0xC00000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_254117B78 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_float((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "cornerRadius";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x1000000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_254117B80 = v29;
      v30 = re::introspectionAllocator((re *)v29);
      v32 = re::introspect_BOOL((re *)1, v31);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "addUVs";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x1400000007;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_254117B88 = v33;
      v34 = re::introspectionAllocator((re *)v33);
      v36 = re::introspect_BOOL((re *)1, v35);
      v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 72, 8);
      *(_DWORD *)v37 = 1;
      *(_QWORD *)(v37 + 8) = "addNormals";
      *(_QWORD *)(v37 + 16) = v36;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = 0x1500000008;
      *(_DWORD *)(v37 + 40) = 0;
      *(_QWORD *)(v37 + 48) = 0;
      *(_QWORD *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_254117B90 = v37;
      v38 = re::introspectionAllocator((re *)v37);
      re::introspect_GeomBuildPlaneOrientation((re *)v38, v39);
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 72, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = "orientation";
      *(_QWORD *)(v40 + 16) = &qword_254117B10;
      *(_QWORD *)(v40 + 24) = 0;
      *(_QWORD *)(v40 + 32) = 0x1800000009;
      *(_DWORD *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_254117B98 = v40;
      __cxa_guard_release(&qword_254117888);
    }
  }
  *((_QWORD *)this + 2) = 0x1C00000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 9;
  *((_QWORD *)this + 8) = &qword_254117B58;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::GeomBuildPlaneOptions>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::GeomBuildPlaneOptions>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildPlaneOptions>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildPlaneOptions>;
  re::IntrospectionRegistry::add(this, v3);
  v41 = v43;
}

double re::internal::defaultConstruct<re::GeomBuildPlaneOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_DWORD *)a3 = 65537;
  *(_WORD *)(a3 + 4) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a3 + 8) = result;
  *(_DWORD *)(a3 + 16) = 0;
  *(_WORD *)(a3 + 20) = 257;
  *(_DWORD *)(a3 + 24) = 2;
  return result;
}

double re::internal::defaultConstructV2<re::GeomBuildPlaneOptions>(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = 65537;
  *(_WORD *)(a1 + 4) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 20) = 257;
  *(_DWORD *)(a1 + 24) = 2;
  return result;
}

uint64_t re::introspect_GeomBuildPlaneOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildPlaneOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildPlaneOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildPlaneOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildPlaneOptions>, this);
}

uint64_t *re::allocInfo_GeomBuildPyramidOptions(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254117890);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254117890))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254118000, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254118010 = 0;
    qword_254118020 = 0;
    qword_254118028 = 0xFFFFFFFFLL;
    qword_254118000 = (uint64_t)&off_24ED7DAA8;
    qword_254118030 = (uint64_t)"GeomBuildPyramidOptions";
    dword_254118038 = 0;
    xmmword_254118040 = 0u;
    xmmword_254118050 = 0u;
    xmmword_254118060 = 0u;
    qword_254118070 = 0;
    __cxa_guard_release(&qword_254117890);
  }
  return &qword_254118000;
}

void re::initInfo_GeomBuildPyramidOptions(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD v31[2];
  __int128 v32;

  v31[0] = 0x4674A7F369EB880;
  v31[1] = "GeomBuildPyramidOptions";
  re::StringID::destroyString((re::StringID *)v31);
  *((_OWORD *)this + 2) = v32;
  v4 = atomic_load((unsigned __int8 *)&qword_254117898);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254117898);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_uint16_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "segmentCount";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2541179C0 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_float((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "width";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x400000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2541179C8 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_float((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "height";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2541179D0 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_float((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "depth";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0xC00000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2541179D8 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_BOOL((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "addUVs";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x1000000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_2541179E0 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_BOOL((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "addNormals";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x1100000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_2541179E8 = v29;
      __cxa_guard_release(&qword_254117898);
    }
  }
  *((_QWORD *)this + 2) = 0x1400000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_2541179C0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::GeomBuildPyramidOptions>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::GeomBuildPyramidOptions>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildPyramidOptions>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildPyramidOptions>;
  re::IntrospectionRegistry::add(this, v3);
  v30 = v32;
}

double re::internal::defaultConstruct<re::GeomBuildPyramidOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_WORD *)a3 = 1;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a3 + 4) = result;
  *(_DWORD *)(a3 + 12) = 1065353216;
  *(_WORD *)(a3 + 16) = 257;
  *(_BYTE *)(a3 + 18) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::GeomBuildPyramidOptions>(uint64_t a1)
{
  double result;

  *(_WORD *)a1 = 1;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 4) = result;
  *(_DWORD *)(a1 + 12) = 1065353216;
  *(_WORD *)(a1 + 16) = 257;
  *(_BYTE *)(a1 + 18) = 0;
  return result;
}

uint64_t re::introspect_GeomBuildPyramidOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildPyramidOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildPyramidOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildPyramidOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildPyramidOptions>, this);
}

uint64_t *re::allocInfo_GeomBuildSphereOptions(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541178A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541178A0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254118078, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254118088 = 0;
    qword_254118098 = 0;
    qword_2541180A0 = 0xFFFFFFFFLL;
    qword_254118078 = (uint64_t)&off_24ED7DAA8;
    qword_2541180A8 = (uint64_t)"GeomBuildSphereOptions";
    dword_2541180B0 = 0;
    xmmword_2541180B8 = 0u;
    xmmword_2541180C8 = 0u;
    xmmword_2541180D8 = 0u;
    qword_2541180E8 = 0;
    __cxa_guard_release(&qword_2541178A0);
  }
  return &qword_254118078;
}

void re::initInfo_GeomBuildSphereOptions(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  __int128 v24;

  v23[0] = 0x7D389F564D24FD7ELL;
  v23[1] = "GeomBuildSphereOptions";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  v4 = atomic_load((unsigned __int8 *)&qword_2541178A8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541178A8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_uint16_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "segmentCount";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254117928 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_float((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "radius";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x400000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254117930 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_BOOL((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "addUVs";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254117938 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_BOOL((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "addNormals";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x900000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254117940 = v21;
      __cxa_guard_release(&qword_2541178A8);
    }
  }
  *((_QWORD *)this + 2) = 0xC00000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254117928;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::GeomBuildSphereOptions>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::GeomBuildSphereOptions>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildSphereOptions>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildSphereOptions>;
  re::IntrospectionRegistry::add(this, v3);
  v22 = v24;
}

void re::internal::defaultConstruct<re::GeomBuildSphereOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a3 = 8;
  *(_DWORD *)(a3 + 4) = 1056964608;
  *(_WORD *)(a3 + 8) = 257;
  *(_BYTE *)(a3 + 10) = 0;
}

uint64_t re::internal::defaultConstructV2<re::GeomBuildSphereOptions>(uint64_t result)
{
  *(_WORD *)result = 8;
  *(_DWORD *)(result + 4) = 1056964608;
  *(_WORD *)(result + 8) = 257;
  *(_BYTE *)(result + 10) = 0;
  return result;
}

uint64_t re::introspect_GeomBuildSphereOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildSphereOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildSphereOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildSphereOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildSphereOptions>, this);
}

uint64_t *re::allocInfo_GeomBuildTetrahedronOptions(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541178B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541178B0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541180F0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254118100 = 0;
    qword_254118110 = 0;
    qword_254118118 = 0xFFFFFFFFLL;
    qword_2541180F0 = (uint64_t)&off_24ED7DAA8;
    qword_254118120 = (uint64_t)"GeomBuildTetrahedronOptions";
    dword_254118128 = 0;
    xmmword_254118130 = 0u;
    xmmword_254118140 = 0u;
    xmmword_254118150 = 0u;
    qword_254118160 = 0;
    __cxa_guard_release(&qword_2541178B0);
  }
  return &qword_2541180F0;
}

void re::initInfo_GeomBuildTetrahedronOptions(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  __int128 v24;

  v23[0] = 0xE0F66382351EDB28;
  v23[1] = "GeomBuildTetrahedronOptions";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  v4 = atomic_load((unsigned __int8 *)&qword_2541178B8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541178B8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_uint16_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "segmentCount";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254117948 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_float((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "length";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x400000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254117950 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_BOOL((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "addUVs";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254117958 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_BOOL((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "addNormals";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x900000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254117960 = v21;
      __cxa_guard_release(&qword_2541178B8);
    }
  }
  *((_QWORD *)this + 2) = 0xC00000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254117948;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::GeomBuildTetrahedronOptions>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::GeomBuildTetrahedronOptions>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildTetrahedronOptions>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildTetrahedronOptions>;
  re::IntrospectionRegistry::add(this, v3);
  v22 = v24;
}

void re::internal::defaultConstruct<re::GeomBuildTetrahedronOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a3 = 1;
  *(_DWORD *)(a3 + 4) = 1065353216;
  *(_WORD *)(a3 + 8) = 257;
  *(_BYTE *)(a3 + 10) = 0;
}

uint64_t re::internal::defaultConstructV2<re::GeomBuildTetrahedronOptions>(uint64_t result)
{
  *(_WORD *)result = 1;
  *(_DWORD *)(result + 4) = 1065353216;
  *(_WORD *)(result + 8) = 257;
  *(_BYTE *)(result + 10) = 0;
  return result;
}

uint64_t re::introspect_GeomBuildTetrahedronOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildTetrahedronOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildTetrahedronOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildTetrahedronOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildTetrahedronOptions>, this);
}

uint64_t *re::allocInfo_GeomBuildTubeOptions(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541178C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541178C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254118168, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254118178 = 0;
    qword_254118188 = 0;
    qword_254118190 = 0xFFFFFFFFLL;
    qword_254118168 = (uint64_t)&off_24ED7DAA8;
    qword_254118198 = (uint64_t)"GeomBuildTubeOptions";
    dword_2541181A0 = 0;
    xmmword_2541181A8 = 0u;
    xmmword_2541181B8 = 0u;
    xmmword_2541181C8 = 0u;
    qword_2541181D8 = 0;
    __cxa_guard_release(&qword_2541178C0);
  }
  return &qword_254118168;
}

void re::initInfo_GeomBuildTubeOptions(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  __int128 v34;
  _QWORD v35[2];
  __int128 v36;

  v35[0] = 0xCAD475995321F50;
  v35[1] = "GeomBuildTubeOptions";
  re::StringID::destroyString((re::StringID *)v35);
  *((_OWORD *)this + 2) = v36;
  v4 = atomic_load((unsigned __int8 *)&qword_2541178C8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541178C8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_uint16_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "radialSegmentCount";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254117A90 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_uint16_t((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "heightSegmentCount";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x200000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254117A98 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_float((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "height";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x400000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254117AA0 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_float((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "innerRadius";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x800000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254117AA8 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_float((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "outerRadius";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0xC00000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_254117AB0 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_BOOL((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "addUVs";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x1000000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_254117AB8 = v29;
      v30 = re::introspectionAllocator((re *)v29);
      v32 = re::introspect_BOOL((re *)1, v31);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "addNormals";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x1100000007;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_254117AC0 = v33;
      __cxa_guard_release(&qword_2541178C8);
    }
  }
  *((_QWORD *)this + 2) = 0x1400000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_254117A90;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::GeomBuildTubeOptions>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::GeomBuildTubeOptions>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildTubeOptions>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildTubeOptions>;
  re::IntrospectionRegistry::add(this, v3);
  v34 = v36;
}

double re::internal::defaultConstruct<re::GeomBuildTubeOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_DWORD *)a3 = 65544;
  result = 0.00000190734908;
  *(_QWORD *)(a3 + 4) = 0x3EC000003F800000;
  *(_DWORD *)(a3 + 12) = 1056964608;
  *(_WORD *)(a3 + 16) = 257;
  *(_BYTE *)(a3 + 18) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::GeomBuildTubeOptions>(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = 65544;
  result = 0.00000190734908;
  *(_QWORD *)(a1 + 4) = 0x3EC000003F800000;
  *(_DWORD *)(a1 + 12) = 1056964608;
  *(_WORD *)(a1 + 16) = 257;
  *(_BYTE *)(a1 + 18) = 0;
  return result;
}

uint64_t re::introspect_GeomBuildTubeOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildTubeOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildTubeOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildTubeOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildTubeOptions>, this);
}

void re::introspect_GeomBuildExtrudedTextHorizontalAlignment(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  re *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  StringID v40;
  _QWORD v41[2];
  _QWORD v42[61];

  v2 = atomic_load((unsigned __int8 *)&qword_2541178D0);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_2541178D0);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Left";
      qword_254117968 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Right";
      qword_254117970 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "Center";
      qword_254117978 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *((_QWORD *)v34 + 1) = 3;
      *((_QWORD *)v34 + 2) = "Justified";
      qword_254117980 = (uint64_t)v34;
      v35 = re::introspectionAllocator(v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = 4;
      *(_QWORD *)(v36 + 16) = "Natural";
      qword_254117988 = v36;
      __cxa_guard_release(&qword_2541178D0);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2541178D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2541178D8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254117BA0, "GeomBuildExtrudedTextHorizontalAlignment", 1, 1, 1, 1);
    qword_254117BA0 = (uint64_t)&off_24ED7D9E8;
    qword_254117BE0 = (uint64_t)&re::introspect_GeomBuildExtrudedTextHorizontalAlignment(BOOL)::enumTable;
    dword_254117BB0 = 9;
    __cxa_guard_release(&qword_2541178D8);
  }
  if ((byte_254117819 & 1) == 0)
  {
    byte_254117819 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254117BA0, a2);
    v38 = 0xF15D7D52F69102;
    v39 = "GeomBuildExtrudedTextHorizontalAlignment";
    v42[0] = 0x31CD534126;
    v42[1] = "uint8_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v42);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v42);
      v6 = (unsigned int *)qword_254117BE0;
      v41[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v42, &v38, 1, 1, (uint64_t)v41);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v40.var0 = 2 * v12;
            v40.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v42, v16, &v40);
            re::StringID::destroyString((re::StringID *)&v40);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v40.var0 = 2 * v20;
              v40.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v42, v24, &v40);
              re::StringID::destroyString((re::StringID *)&v40);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v42, v25);
      xmmword_254117BC0 = (__int128)v40;
      re::StringID::destroyString((re::StringID *)&v38);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v42);
      re::internal::assertLog((re::internal *)5, v37, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "GeomBuildExtrudedTextHorizontalAlignment", v38, v39);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspect_GeomBuildExtrudedTextVerticalAlignment(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  StringID v36;
  _QWORD v37[2];
  _QWORD v38[61];

  v2 = atomic_load((unsigned __int8 *)&qword_2541178E0);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_2541178E0);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Top";
      qword_254117910 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Bottom";
      qword_254117918 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 2;
      *(_QWORD *)(v32 + 16) = "Center";
      qword_254117920 = v32;
      __cxa_guard_release(&qword_2541178E0);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2541178E8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2541178E8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254117BE8, "GeomBuildExtrudedTextVerticalAlignment", 1, 1, 1, 1);
    qword_254117BE8 = (uint64_t)&off_24ED7D9E8;
    qword_254117C28 = (uint64_t)&re::introspect_GeomBuildExtrudedTextVerticalAlignment(BOOL)::enumTable;
    dword_254117BF8 = 9;
    __cxa_guard_release(&qword_2541178E8);
  }
  if ((byte_25411781A & 1) == 0)
  {
    byte_25411781A = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254117BE8, a2);
    v34 = 0xC42D07F67E9873DELL;
    v35 = "GeomBuildExtrudedTextVerticalAlignment";
    v38[0] = 0x31CD534126;
    v38[1] = "uint8_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v38);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v38);
      v6 = (unsigned int *)qword_254117C28;
      v37[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v36.var0 = 2 * v12;
            v36.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v16, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v36.var0 = 2 * v20;
              v36.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v24, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v25);
      xmmword_254117C08 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "GeomBuildExtrudedTextVerticalAlignment", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspect_GeomBuildExtrudedTextLineBreakMode(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  StringID v42;
  _QWORD v43[2];
  _QWORD v44[61];

  v2 = atomic_load((unsigned __int8 *)&qword_2541178F0);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_2541178F0);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "WordWrapping";
      qword_2541179F0 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "CharWrapping";
      qword_2541179F8 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "Clipping";
      qword_254117A00 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *((_QWORD *)v34 + 1) = 3;
      *((_QWORD *)v34 + 2) = "TruncatingHead";
      qword_254117A08 = (uint64_t)v34;
      v35 = re::introspectionAllocator(v34);
      v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
      *(_DWORD *)v36 = 1;
      *((_QWORD *)v36 + 1) = 4;
      *((_QWORD *)v36 + 2) = "TruncatingTail";
      qword_254117A10 = (uint64_t)v36;
      v37 = re::introspectionAllocator(v36);
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = 5;
      *(_QWORD *)(v38 + 16) = "TruncatingMiddle";
      qword_254117A18 = v38;
      __cxa_guard_release(&qword_2541178F0);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2541178F8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2541178F8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254117C30, "GeomBuildExtrudedTextLineBreakMode", 1, 1, 1, 1);
    qword_254117C30 = (uint64_t)&off_24ED7D9E8;
    qword_254117C70 = (uint64_t)&re::introspect_GeomBuildExtrudedTextLineBreakMode(BOOL)::enumTable;
    dword_254117C40 = 9;
    __cxa_guard_release(&qword_2541178F8);
  }
  if ((byte_25411781B & 1) == 0)
  {
    byte_25411781B = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254117C30, a2);
    v40 = 0x54FFABE001BC5B20;
    v41 = "GeomBuildExtrudedTextLineBreakMode";
    v44[0] = 0x31CD534126;
    v44[1] = "uint8_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v44);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v44);
      v6 = (unsigned int *)qword_254117C70;
      v43[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v44, &v40, 1, 1, (uint64_t)v43);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v42.var0 = 2 * v12;
            v42.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v44, v16, &v42);
            re::StringID::destroyString((re::StringID *)&v42);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v42.var0 = 2 * v20;
              v42.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v44, v24, &v42);
              re::StringID::destroyString((re::StringID *)&v42);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v44, v25);
      xmmword_254117C50 = (__int128)v42;
      re::StringID::destroyString((re::StringID *)&v40);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v44);
      re::internal::assertLog((re::internal *)5, v39, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "GeomBuildExtrudedTextLineBreakMode", v40, v41);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::allocInfo_GeomBuildExtrudedTextOptions(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254117900);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254117900))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541181E0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541181F0 = 0;
    qword_254118200 = 0;
    qword_254118208 = 0xFFFFFFFFLL;
    qword_2541181E0 = (uint64_t)&off_24ED7DAA8;
    qword_254118210 = (uint64_t)"GeomBuildExtrudedTextOptions";
    dword_254118218 = 0;
    xmmword_254118220 = 0u;
    xmmword_254118230 = 0u;
    xmmword_254118240 = 0u;
    qword_254118250 = 0;
    __cxa_guard_release(&qword_254117900);
  }
  return &qword_2541181E0;
}

void re::initInfo_GeomBuildExtrudedTextOptions(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  uint64_t v34;
  uint64_t *v35;
  const re::IntrospectionBase *v36;
  uint64_t v37;
  uint64_t *v38;
  const re::IntrospectionBase *v39;
  uint64_t v40;
  uint64_t *v41;
  const re::IntrospectionBase *v42;
  void *v43;
  uint64_t v44;
  uint64_t *v45;
  const re::IntrospectionBase *v46;
  void *v47;
  uint64_t v48;
  uint64_t *v49;
  const re::IntrospectionBase *v50;
  void *v51;
  uint64_t v52;
  __int128 v53;
  _QWORD v54[2];
  __int128 v55;

  v54[0] = 0x69AC04806F0E6800;
  v54[1] = "GeomBuildExtrudedTextOptions";
  re::StringID::destroyString((re::StringID *)v54);
  *((_OWORD *)this + 2) = v55;
  v4 = atomic_load((unsigned __int8 *)&qword_254117908);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254117908);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicString>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "textString";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254117CC8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::DynamicString>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "fontName";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254117CD0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_float((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "fontSize";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x4000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254117CD8 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_float((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "extrusionDepth";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x4400000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254117CE0 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_uint8_t((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "segmentCountPerCurve";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x4800000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_254117CE8 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v27 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "textFrameOrigin";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x5000000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_254117CF0 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v30 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = "textFrameSize";
      *(_QWORD *)(v31 + 16) = v30;
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0x5800000007;
      *(_DWORD *)(v31 + 40) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_QWORD *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_254117CF8 = v31;
      v32 = re::introspectionAllocator((re *)v31);
      re::introspect_GeomBuildExtrudedTextLineBreakMode((re *)v32, v33);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = "lineBreakMode";
      *(_QWORD *)(v34 + 16) = &qword_254117C30;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(v34 + 32) = 0x6000000008;
      *(_DWORD *)(v34 + 40) = 0;
      *(_QWORD *)(v34 + 48) = 0;
      *(_QWORD *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_254117D00 = v34;
      v35 = re::introspectionAllocator((re *)v34);
      re::introspect_GeomBuildExtrudedTextHorizontalAlignment((re *)v35, v36);
      v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 72, 8);
      *(_DWORD *)v37 = 1;
      *(_QWORD *)(v37 + 8) = "horizontalAlignment";
      *(_QWORD *)(v37 + 16) = &qword_254117BA0;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = 0x6100000009;
      *(_DWORD *)(v37 + 40) = 0;
      *(_QWORD *)(v37 + 48) = 0;
      *(_QWORD *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_254117D08 = v37;
      v38 = re::introspectionAllocator((re *)v37);
      re::introspect_GeomBuildExtrudedTextVerticalAlignment((re *)v38, v39);
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 72, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = "verticalAlignment";
      *(_QWORD *)(v40 + 16) = &qword_254117BE8;
      *(_QWORD *)(v40 + 24) = 0;
      *(_QWORD *)(v40 + 32) = 0x620000000ALL;
      *(_DWORD *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_254117D10 = v40;
      v41 = re::introspectionAllocator((re *)v40);
      v43 = re::introspect_BOOL((re *)1, v42);
      v44 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 72, 8);
      *(_DWORD *)v44 = 1;
      *(_QWORD *)(v44 + 8) = "generateSides";
      *(_QWORD *)(v44 + 16) = v43;
      *(_QWORD *)(v44 + 24) = 0;
      *(_QWORD *)(v44 + 32) = 0x630000000BLL;
      *(_DWORD *)(v44 + 40) = 0;
      *(_QWORD *)(v44 + 48) = 0;
      *(_QWORD *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_254117D18 = v44;
      v45 = re::introspectionAllocator((re *)v44);
      v47 = re::introspect_BOOL((re *)1, v46);
      v48 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 72, 8);
      *(_DWORD *)v48 = 1;
      *(_QWORD *)(v48 + 8) = "generateBack";
      *(_QWORD *)(v48 + 16) = v47;
      *(_QWORD *)(v48 + 24) = 0;
      *(_QWORD *)(v48 + 32) = 0x640000000CLL;
      *(_DWORD *)(v48 + 40) = 0;
      *(_QWORD *)(v48 + 48) = 0;
      *(_QWORD *)(v48 + 56) = 0;
      *(_DWORD *)(v48 + 64) = 0;
      qword_254117D20 = v48;
      v49 = re::introspectionAllocator((re *)v48);
      v51 = re::introspect_BOOL((re *)1, v50);
      v52 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v49 + 32))(v49, 72, 8);
      *(_DWORD *)v52 = 1;
      *(_QWORD *)(v52 + 8) = "instanceGlyphs";
      *(_QWORD *)(v52 + 16) = v51;
      *(_QWORD *)(v52 + 24) = 0;
      *(_QWORD *)(v52 + 32) = 0x670000000DLL;
      *(_DWORD *)(v52 + 40) = 0;
      *(_QWORD *)(v52 + 48) = 0;
      *(_QWORD *)(v52 + 56) = 0;
      *(_DWORD *)(v52 + 64) = 0;
      qword_254117D28 = v52;
      __cxa_guard_release(&qword_254117908);
    }
  }
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 13;
  *((_QWORD *)this + 8) = &qword_254117CC8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::GeomBuildExtrudedTextOptions>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::GeomBuildExtrudedTextOptions>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildExtrudedTextOptions>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildExtrudedTextOptions>;
  re::IntrospectionRegistry::add(this, v3);
  v53 = v55;
}

double re::internal::defaultConstruct<re::GeomBuildExtrudedTextOptions>(_anonymous_namespace_ *a1, uint64_t a2, _OWORD *a3)
{
  _OWORD *v3;
  _anonymous_namespace_ *v4;
  double result;

  v3 = a3;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  v3[2] = 0u;
  v3[3] = 0u;
  v3 += 2;
  re::DynamicString::setCapacity(v3, 0);
  __asm { FMOV            V0.2S, #1.0 }
  *((double *)v3 + 4) = result;
  *((_BYTE *)v3 + 40) = 5;
  *((_QWORD *)v3 + 6) = 0;
  *((_QWORD *)v3 + 7) = 0;
  *((_BYTE *)v3 + 64) = 0;
  *(_WORD *)((char *)v3 + 65) = 4;
  *(_DWORD *)((char *)v3 + 67) = 16843009;
  *((_BYTE *)v3 + 71) = 0;
  return result;
}

double re::internal::defaultDestruct<re::GeomBuildExtrudedTextOptions>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _OWORD *v5;
  double result;

  v5 = a3 + 4;
  v4 = a3[4];
  if (v4)
  {
    if ((a3[5] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[6]);
    result = 0.0;
    *v5 = 0u;
    v5[1] = 0u;
  }
  if (*a3)
  {
    if ((a3[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

double re::internal::defaultConstructV2<re::GeomBuildExtrudedTextOptions>(_anonymous_namespace_ *a1)
{
  _anonymous_namespace_ *v1;
  _anonymous_namespace_ *v2;
  double result;

  v1 = a1;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v1, 0);
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  v1 = (_anonymous_namespace_ *)((char *)v1 + 32);
  re::DynamicString::setCapacity(v1, 0);
  __asm { FMOV            V0.2S, #1.0 }
  *((double *)v1 + 4) = result;
  *((_BYTE *)v1 + 40) = 5;
  *((_QWORD *)v1 + 6) = 0;
  *((_QWORD *)v1 + 7) = 0;
  *((_BYTE *)v1 + 64) = 0;
  *(_WORD *)((char *)v1 + 65) = 4;
  *(_DWORD *)((char *)v1 + 67) = 16843009;
  *((_BYTE *)v1 + 71) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::GeomBuildExtrudedTextOptions>(_QWORD *a1)
{
  uint64_t v2;
  _OWORD *v3;
  double result;

  v3 = a1 + 4;
  v2 = a1[4];
  if (v2)
  {
    if ((a1[5] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[6]);
    result = 0.0;
    *v3 = 0u;
    v3[1] = 0u;
  }
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

uint64_t re::introspect_GeomBuildExtrudedTextOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildExtrudedTextOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildExtrudedTextOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildExtrudedTextOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildExtrudedTextOptions>, this);
}

uint64_t re::computeManhattanDistanceToVertex(uint64_t a1, unsigned int a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  unint64_t i;
  unint64_t v6;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _anonymous_namespace_ *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  __int128 *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  _BYTE v54[28];
  __int16 v55;
  _BYTE v56[10];
  _BYTE v57[28];
  __int16 v58;
  _BYTE v59[18];
  __int128 v60;
  int v61;
  uint64_t v62;
  _BYTE v63[12];
  __int16 v64;
  int v65;
  __int16 v66;
  unint64_t v67;
  __int16 v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v11 = (uint64_t)v57;
  v75 = *MEMORY[0x24BDAC8D0];
  v52 = 2139095040;
  *(_QWORD *)(a5 + 16) = 0;
  ++*(_DWORD *)(a5 + 24);
  re::DynamicArray<float>::resize((_QWORD *)a5, *(unsigned int *)(a1 + 16), &v52);
  v12 = a2;
  v13 = *(_QWORD *)(a5 + 16);
  if (v13 <= a2)
    goto LABEL_122;
  v50 = a5;
  *(_DWORD *)(*(_QWORD *)(a5 + 32) + 4 * a2) = 0;
  v13 = *(unsigned int *)(a1 + 16);
  memset(v57, 0, sizeof(v57));
  v62 = 0;
  *(_OWORD *)&v59[2] = 0u;
  v60 = 0u;
  v61 = 0;
  if ((_DWORD)v13)
    re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v57, v13);
  v14 = (_anonymous_namespace_ *)re::DynamicArray<unsigned int>::resize(&v59[10], v13, re::kInvalidMeshIndex);
  if (*(_DWORD *)(a1 + 16))
  {
    v15 = 0;
    v11 = 2139095040;
    i = 8;
    while (1)
    {
      v16 = *(_QWORD *)&v57[16] + 1;
      if (*(_QWORD *)&v57[16] >= *(_QWORD *)&v57[8] && *(_QWORD *)&v57[8] < v16)
      {
        if (*(_QWORD *)v57)
        {
          if (*(_QWORD *)&v57[8])
            v24 = 2 * *(_QWORD *)&v57[8];
          else
            v24 = 8;
          if (v24 <= v16)
            v25 = *(_QWORD *)&v57[16] + 1;
          else
            v25 = v24;
          v14 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v57, v25);
        }
        else
        {
          v14 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v57, v16);
          ++*(_DWORD *)&v57[24];
        }
      }
      v18 = *(_QWORD *)&v57[16];
      v19 = (_DWORD *)(*(_QWORD *)&v59[2] + 8 * *(_QWORD *)&v57[16]);
      if (v15 == v12)
        v20 = 0;
      else
        v20 = 2139095040;
      *v19 = v15;
      v19[1] = v20;
      *(_QWORD *)&v57[16] = v18 + 1;
      ++*(_DWORD *)&v57[24];
      v13 = *((_QWORD *)&v60 + 1);
      if (*((_QWORD *)&v60 + 1) <= v15)
        goto LABEL_113;
      v21 = v18;
      *(_DWORD *)(v62 + 4 * v15) = v18;
      if ((_DWORD)v18)
        break;
LABEL_20:
      if (++v15 >= *(unsigned int *)(a1 + 16))
        goto LABEL_31;
    }
    while (1)
    {
      v22 = v21 - 1;
      v13 = (v21 - 1) >> 1;
      v23 = *(__int128 **)&v57[16];
      if (*(_QWORD *)&v57[16] <= v13)
        goto LABEL_101;
      v6 = v21;
      if (*(_QWORD *)&v57[16] <= (unint64_t)v21)
        break;
      if (*(float *)(*(_QWORD *)&v59[2] + 8 * v13 + 4) > *(float *)(*(_QWORD *)&v59[2] + 8 * v21 + 4))
      {
        v21 = v22 >> 1;
        if (v22 > 1)
          continue;
      }
      goto LABEL_20;
    }
LABEL_102:
    v27 = (unint64_t)v57;
    *(_QWORD *)v63 = 0;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v54 = 136315906;
    *(_QWORD *)&v54[4] = "operator[]";
    *(_WORD *)&v54[12] = 1024;
    *(_DWORD *)&v54[14] = 789;
    *(_WORD *)&v54[18] = 2048;
    *(_QWORD *)&v54[20] = v6;
    v55 = 2048;
    *(_QWORD *)v56 = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_103:
    re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, i, v36);
    _os_crash();
    __break(1u);
LABEL_104:
    v53 = 0;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    v64 = 1024;
    v65 = 797;
    v66 = 2048;
    v67 = v27;
    v68 = 2048;
    v69 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_105:
    v53 = 0;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    v64 = 1024;
    v65 = 601;
    v66 = 2048;
    v67 = i;
    v68 = 2048;
    v69 = v51;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    v53 = 0;
    v31 = (unint64_t)v57;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    v64 = 1024;
    v65 = 789;
    v66 = 2048;
    v67 = i;
    v68 = 2048;
    v69 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    v53 = 0;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    v64 = 1024;
    v65 = 789;
    v66 = 2048;
    v67 = v31;
    v68 = 2048;
    v69 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    v53 = 0;
    v32 = (unint64_t)v57;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    v64 = 1024;
    v65 = 789;
    v66 = 2048;
    v67 = v13;
    v68 = 2048;
    v69 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    v53 = 0;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    v64 = 1024;
    v65 = 789;
    v66 = 2048;
    v67 = v32;
    v68 = 2048;
    v69 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    v53 = 0;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    v64 = 1024;
    v65 = 789;
    v66 = 2048;
    v67 = v13;
    v68 = 2048;
    v69 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v53 = 0;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    v64 = 1024;
    v65 = 789;
    v66 = 2048;
    v67 = i;
    v68 = 2048;
    v69 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v53 = 0;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    v64 = 1024;
    v65 = 789;
    v66 = 2048;
    v67 = i;
    v68 = 2048;
    v69 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v27 = (unint64_t)v57;
    *(_QWORD *)v63 = 0;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v54 = 136315906;
    *(_QWORD *)&v54[4] = "operator[]";
    *(_WORD *)&v54[12] = 1024;
    *(_DWORD *)&v54[14] = 789;
    *(_WORD *)&v54[18] = 2048;
    *(_QWORD *)&v54[20] = v15;
    v55 = 2048;
    *(_QWORD *)v56 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v15, v35);
    _os_crash();
    __break(1u);
LABEL_115:
    re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v33, v35);
    _os_crash();
    __break(1u);
LABEL_116:
    v15 = v29;
    v13 = (unint64_t)v57;
LABEL_117:
    v53 = 0;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    v64 = 1024;
    v65 = 789;
    v66 = 2048;
    v67 = v15;
    v68 = 2048;
    v69 = v27;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_118:
    v53 = 0;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    v64 = 1024;
    v65 = 789;
    v66 = 2048;
    v67 = i;
    v68 = 2048;
    v69 = v27;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_119:
    v53 = 0;
    v30 = (unint64_t)v57;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    v64 = 1024;
    v65 = 789;
    v66 = 2048;
    v67 = 0;
    v68 = 2048;
    v69 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_120:
    v53 = 0;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    v64 = 1024;
    v65 = 789;
    v66 = 2048;
    v67 = v30;
    v68 = 2048;
    v69 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_121;
  }
LABEL_31:
  v49 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)a1);
  v51 = v26;
  *(_QWORD *)&v56[2] = 0;
  memset(v54, 0, sizeof(v54));
  v27 = *(_QWORD *)&v57[16];
  if (!*(_DWORD *)&v57[16])
    goto LABEL_92;
  v23 = &v70;
  do
  {
    v15 = **(_DWORD **)&v59[2];
    v28 = *(float *)(*(_QWORD *)&v59[2] + 4);
    if ((_DWORD)v27 == 1)
    {
      v29 = **(_DWORD **)&v59[2];
      *(_QWORD *)&v57[16] = 0;
      ++*(_DWORD *)&v57[24];
      v27 = *((_QWORD *)&v60 + 1);
      if (*((_QWORD *)&v60 + 1) <= v29)
        goto LABEL_116;
      goto LABEL_58;
    }
    i = v27 - 1;
    if (v27 <= i)
      goto LABEL_118;
    **(_QWORD **)&v59[2] = *(_QWORD *)(*(_QWORD *)&v59[2] + 8 * i);
    v6 = *(_QWORD *)&v57[16];
    if (!*(_QWORD *)&v57[16])
      goto LABEL_119;
    v13 = *((_QWORD *)&v60 + 1);
    v30 = **(_DWORD **)&v59[2];
    if (*((_QWORD *)&v60 + 1) <= v30)
      goto LABEL_120;
    *(_DWORD *)(v62 + 4 * v30) = 0;
    if (v6 < i)
    {
      if (*(_QWORD *)&v57[8] < i)
        re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v57, i);
LABEL_43:
      *(_QWORD *)&v57[16] = i;
      ++*(_DWORD *)&v57[24];
      v6 = i;
      goto LABEL_44;
    }
    if (v6 > i)
      goto LABEL_43;
LABEL_44:
    v26 = 0;
    for (i = 0; ; v26 = i)
    {
      v31 = (2 * (_DWORD)v26) | 1u;
      if (v31 < v6)
      {
        if (v6 <= v31)
          goto LABEL_107;
        v13 = v26;
        if (v6 <= v26)
          goto LABEL_108;
        i = v26;
        if (*(float *)(*(_QWORD *)&v59[2] + 8 * v31 + 4) < *(float *)(*(_QWORD *)&v59[2] + 8 * v26 + 4))
          i = (2 * (_DWORD)v26) | 1u;
      }
      v32 = (2 * v26 + 2);
      if (v32 < v6)
      {
        if (v6 <= v32)
          goto LABEL_109;
        v13 = i;
        if (v6 <= i)
          goto LABEL_110;
        if (*(float *)(*(_QWORD *)&v59[2] + 8 * v32 + 4) < *(float *)(*(_QWORD *)&v59[2] + 8 * i + 4))
          i = (2 * v26 + 2);
      }
      if ((_DWORD)i == (_DWORD)v26)
        break;
      v6 = *(_QWORD *)&v57[16];
    }
    v27 = *((_QWORD *)&v60 + 1);
    v29 = v15;
    v13 = (unint64_t)v57;
    if (*((_QWORD *)&v60 + 1) <= v15)
      goto LABEL_117;
LABEL_58:
    *(_DWORD *)(v62 + 4 * v29) = -1;
    *(_QWORD *)&v54[16] = 0;
    ++*(_DWORD *)&v54[24];
    if ((_DWORD)v15)
    {
      v33 = (v15 - 1);
      v34 = a4;
      v35 = a4[1];
      if (v35 <= v33)
        goto LABEL_115;
      i = *(unsigned int *)(*a4 + 4 * v33);
    }
    else
    {
      i = 0;
      v34 = a4;
      v35 = a4[1];
    }
    if (v35 <= v15)
      goto LABEL_114;
    v13 = *(unsigned int *)(*v34 + 4 * v15);
    if (i < v13)
    {
      do
      {
        v36 = a3[1];
        if (v36 <= i)
          goto LABEL_103;
        v27 = *(unsigned int *)(*a3 + 4 * i);
        v6 = *(_QWORD *)(a1 + 40);
        if (v6 <= v27)
          goto LABEL_104;
        v37 = 0;
        v38 = *(_QWORD *)(a1 + 56) + 16 * v27;
        do
        {
          *(_DWORD *)((char *)&v70 + v37) = *(_DWORD *)(v38 + v37);
          v37 += 4;
        }
        while (v37 != 16);
        v39 = 0;
        v40 = 3;
        if (HIDWORD(v70) != -1)
          v40 = 4;
        while (*((_DWORD *)&v70 + v39) != (_DWORD)v15)
        {
          if (v40 == ++v39)
            goto LABEL_74;
        }
        v27 = v40;
        re::DynamicArray<int>::add(v54, (_DWORD *)&v70 + (v39 + 1) % v40);
        re::DynamicArray<int>::add(v54, (_DWORD *)&v70 + (unsigned __int16)(v27 + v39 - 1) % v27);
LABEL_74:
        ++i;
      }
      while (i != v13);
      if (*(_QWORD *)&v54[16])
      {
        if (v15 < v51)
        {
          v13 = *(_QWORD *)&v56[2];
          v41 = *(_QWORD *)&v56[2] + 4 * *(_QWORD *)&v54[16];
          while (1)
          {
            i = *(unsigned int *)v13;
            if (i >= v51)
              goto LABEL_105;
            v6 = *(_QWORD *)(v50 + 16);
            if (v6 <= i)
              goto LABEL_106;
            v42 = vsubq_f32(*(float32x4_t *)(v49 + 16 * v15), *(float32x4_t *)(v49 + 16 * i));
            v43 = vmulq_f32(v42, v42);
            v44 = v28
                + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0]);
            v45 = *(_QWORD *)(v50 + 32);
            if (v44 < *(float *)(v45 + 4 * i))
            {
              *(float *)(v45 + 4 * i) = v44;
              v6 = *((_QWORD *)&v60 + 1);
              if (*((_QWORD *)&v60 + 1) <= i)
                goto LABEL_111;
              i = *(unsigned int *)(v62 + 4 * i);
              v6 = *(_QWORD *)&v57[16];
              if (*(_QWORD *)&v57[16] <= i)
                goto LABEL_112;
              *(float *)(*(_QWORD *)&v59[2] + 8 * i + 4) = v44;
              if ((_DWORD)i)
                break;
            }
LABEL_87:
            v13 += 4;
            if (v13 == v41)
              goto LABEL_88;
          }
          while (1)
          {
            v11 = (i - 1);
            v6 = v11 >> 1;
            v46 = *(_QWORD *)&v57[16];
            if (*(_QWORD *)&v57[16] <= v6)
              break;
            if (*(float *)(*(_QWORD *)&v59[2] + 8 * v6 + 4) > v44)
            {
              i = v11 >> 1;
              if (v11 > 1)
                continue;
            }
            goto LABEL_87;
          }
          v53 = 0;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          v70 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v63 = 136315906;
          *(_QWORD *)&v63[4] = "operator[]";
          v64 = 1024;
          v65 = 789;
          v66 = 2048;
          v67 = v11 >> 1;
          v68 = 2048;
          v69 = v46;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_101:
          *(_QWORD *)v63 = 0;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          v70 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v54 = 136315906;
          *(_QWORD *)&v54[4] = "operator[]";
          *(_WORD *)&v54[12] = 1024;
          *(_DWORD *)&v54[14] = 789;
          *(_WORD *)&v54[18] = 2048;
          *(_QWORD *)&v54[20] = v13;
          v55 = 2048;
          *(_QWORD *)v56 = v23;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_102;
        }
LABEL_121:
        v53 = 0;
        v12 = (unint64_t)v57;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v70 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v63 = 136315906;
        *(_QWORD *)&v63[4] = "operator[]";
        v64 = 1024;
        v65 = 601;
        v66 = 2048;
        v67 = v15;
        v68 = 2048;
        v69 = v51;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_122:
        *(_QWORD *)v54 = 0;
        *(_OWORD *)(v11 + 176) = 0u;
        *(_OWORD *)(v11 + 192) = 0u;
        *(_OWORD *)(v11 + 144) = 0u;
        *(_OWORD *)(v11 + 160) = 0u;
        *(_OWORD *)(v11 + 128) = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v57 = 136315906;
        *(_QWORD *)&v57[4] = "operator[]";
        *(_WORD *)&v57[12] = 1024;
        *(_DWORD *)&v57[14] = 789;
        *(_WORD *)&v57[18] = 2048;
        *(_QWORD *)&v57[20] = v12;
        v58 = 2048;
        *(_QWORD *)v59 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
LABEL_88:
    v27 = *(_QWORD *)&v57[16];
  }
  while (*(_DWORD *)&v57[16]);
  if (*(_QWORD *)v54 && *(_QWORD *)&v56[2])
    (*(void (**)(void))(**(_QWORD **)v54 + 40))();
LABEL_92:
  if (*(_QWORD *)&v59[10])
  {
    if (v62)
      (*(void (**)(void))(**(_QWORD **)&v59[10] + 40))();
    v62 = 0;
    v60 = 0uLL;
    *(_QWORD *)&v59[10] = 0;
    ++v61;
  }
  result = *(_QWORD *)v57;
  if (*(_QWORD *)v57)
  {
    if (*(_QWORD *)&v59[2])
      return (*(uint64_t (**)(void))(**(_QWORD **)v57 + 40))();
  }
  return result;
}

_QWORD *re::`anonymous namespace'::PriorityQueue::swap(_QWORD *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = this[2];
  if (v3 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  if (v3 <= a3)
  {
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  v4 = this[4];
  v5 = *(_QWORD *)(v4 + 8 * a2);
  *(_QWORD *)(v4 + 8 * a2) = *(_QWORD *)(v4 + 8 * a3);
  *(_QWORD *)(v4 + 8 * a3) = v5;
  v6 = this[2];
  if (v6 <= a2)
  {
LABEL_10:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  v7 = this[4];
  v8 = *(unsigned int *)(v7 + 8 * a2);
  v9 = this[7];
  if (v9 <= v8)
  {
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  v10 = this[9];
  *(_DWORD *)(v10 + 4 * v8) = a2;
  if (v6 <= a3)
  {
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v11 = *(unsigned int *)(v7 + 8 * a3);
  if (v9 <= v11)
    goto LABEL_13;
  *(_DWORD *)(v10 + 4 * v11) = a3;
  return this;
}

unint64_t re::mergeVertices(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  float v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  double v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  int v23;
  BOOL v24;
  float v25;
  unint64_t v26;
  _anonymous_namespace_ *v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  _anonymous_namespace_ *v35;
  unsigned int v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x4_t v43;
  int32x2_t *v44;
  float32x4_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  unsigned int *v51;
  float v52;
  unsigned int *v53;
  float *v55;
  uint64_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int v59;
  unsigned int *v60;
  uint64_t v61;
  int *v62;
  int v63;
  int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t i;
  unsigned int v76;
  uint64_t *v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  unsigned int *v85;
  float32x4_t v86;
  unint64_t v87;
  float32x4_t v88;
  uint64_t v89;
  float32x4_t v90;
  unsigned int *v91;
  float32x4_t v92;
  uint64_t v93;
  unsigned int *v94;
  float32x4_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  char v116[8];
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  float32x4_t v134;
  float32x4_t v135;
  _BYTE v136[16];
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  _BYTE v141[48];
  uint64_t **v142;
  _BYTE v143[28];
  __int16 v144;
  _BYTE v145[10];
  _BYTE v146[12];
  __int16 v147;
  int v148;
  __int16 v149;
  unsigned int *v150;
  __int16 v151;
  unint64_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)(a1 + 16))
    return 0;
  v9 = a1;
  v10 = (unint64_t)v141;
  if (*(_BYTE *)a3)
  {
    v11 = *(float *)(a3 + 8);
    v142 = 0;
    memset(v141, 0, 44);
    v12 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)v9);
    if (v13)
    {
      re::internal::GeomKDTree<re::Vector3<float>>::build((uint64_t)v141, *(unsigned int *)(v9 + 16), v12);
      v3 = *(unsigned int *)(v9 + 16);
      re::DynamicArray<float>::resize(a2, v3);
      if ((_DWORD)v3)
      {
        v14 = 0;
        v15 = *(unsigned int **)(a2 + 16);
        v16 = *(_QWORD *)(a2 + 32);
        while (v15 != v14)
        {
          *(_DWORD *)(v16 + 4 * (_QWORD)v14) = (_DWORD)v14;
          v14 = (unsigned int *)((char *)v14 + 1);
          if ((unsigned int *)v3 == v14)
            goto LABEL_8;
        }
        goto LABEL_171;
      }
LABEL_8:
      v17 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)v9);
      *(_QWORD *)&v145[2] = 0;
      memset(v143, 0, sizeof(v143));
      if ((_DWORD)v3)
      {
        v4 = v17;
        v15 = 0;
        v10 = 0;
        v19 = v11;
        v9 = v18;
        do
        {
          v5 = *(_QWORD *)(a2 + 16);
          if (v5 <= (unint64_t)v15)
            goto LABEL_172;
          if (v15 == (unsigned int *)*(unsigned int *)(*(_QWORD *)(a2 + 32) + 4 * (_QWORD)v15))
          {
            if ((unint64_t)v15 >= v9)
              goto LABEL_173;
            *(_QWORD *)&v143[16] = 0;
            ++*(_DWORD *)&v143[24];
            if (*(_QWORD *)&v141[32])
            {
              re::internal::GeomKDTree<re::Vector3<float>>::findWithinRadiusHelper((uint64_t)v141, v142, (float32x4_t *)(v4 + 16 * (_QWORD)v15), v143, v19);
              v5 = *(_QWORD *)&v143[16];
              if (*(_QWORD *)&v143[16])
              {
                v20 = 0;
                v21 = 1;
                do
                {
                  v22 = (unsigned int *)*(unsigned int *)(*(_QWORD *)&v145[2] + 4 * v20);
                  if (v15 != v22)
                  {
                    v5 = *(_QWORD *)&v143[16];
                    if (v23)
                    {
                      if (*(_QWORD *)&v143[16] <= v20)
                        goto LABEL_165;
                      v20 = *(unsigned int *)(*(_QWORD *)&v145[2] + 4 * v20);
                      v6 = *(_QWORD *)(a2 + 16);
                      if (v6 <= v20)
                        goto LABEL_166;
                      *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4 * v20) = (_DWORD)v15;
                      v10 = (v10 + 1);
                    }
                  }
                  v20 = v21;
                  v24 = v5 > v21++;
                }
                while (v24);
              }
            }
          }
          v15 = (unsigned int *)((char *)v15 + 1);
        }
        while (v15 != (unsigned int *)v3);
        if (*(_QWORD *)v143 && *(_QWORD *)&v145[2])
          (*(void (**)(void))(**(_QWORD **)v143 + 40))();
      }
      else
      {
        v10 = 0;
      }
      v65 = *(_QWORD *)&v141[16];
      if (!*(_QWORD *)&v141[16] || !v142)
        goto LABEL_127;
      goto LABEL_71;
    }
LABEL_181:
    *(_QWORD *)v146 = 0;
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v153 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v143 = 136315906;
    *(_QWORD *)(v10 + 68) = "operator[]";
    *(_WORD *)&v143[12] = 1024;
    *(_DWORD *)(v10 + 78) = 601;
    *(_WORD *)&v143[18] = 2048;
    *(_QWORD *)(v10 + 84) = 0;
    v144 = 2048;
    *(_QWORD *)(v10 + 94) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v25 = *(float *)(a3 + 8);
  re::computeAABB((re *)v9, &v134);
  v26 = *(unsigned int *)(v9 + 16);
  v27 = (_anonymous_namespace_ *)re::DynamicArray<unsigned int>::resize((_QWORD *)a2, v26, &re::kInvalidMeshIndex);
  v28 = vsubq_f32(v135, v134);
  v29 = vmulq_f32(v28, v28);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0] <= 0.0)
  {
    if (!v98)
    {
      v83 = *(_QWORD *)(a2 + 16);
      if (v83 >= 1)
        bzero(*(void **)(a2 + 32), 4 * (v83 - ((v83 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
      if ((_DWORD)v26)
        v10 = (v26 - 1);
      else
        v10 = 0;
      goto LABEL_127;
    }
    if (!(_DWORD)v26)
    {
      v10 = 0;
      goto LABEL_127;
    }
    v66 = 0;
    v15 = *(unsigned int **)(a2 + 16);
    v67 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v15 == v66)
        goto LABEL_176;
      *(_DWORD *)(v67 + 4 * (_QWORD)v66) = (_DWORD)v66;
      v66 = (unsigned int *)((char *)v66 + 1);
    }
    while ((unsigned int *)v26 != v66);
    v3 = 0;
    v10 = 0;
    v15 = (unsigned int *)1;
    while (1)
    {
      v4 = *(_QWORD *)(a2 + 16);
      if (v4 <= v3)
        goto LABEL_177;
      v9 = v3 + 1;
      if (v3 + 1 < v26 && v3 == *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4 * v3))
      {
        v4 = (unint64_t)v15;
        do
        {
          {
            v5 = *(_QWORD *)(a2 + 16);
            if (v5 <= v4)
              goto LABEL_167;
            *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4 * v4) = v3;
            v10 = (v10 + 1);
          }
          ++v4;
        }
        while ((_DWORD)v26 != (_DWORD)v4);
      }
      v15 = (unsigned int *)((char *)v15 + 1);
      ++v3;
      if (v9 == v26)
        goto LABEL_127;
    }
  }
  *(_QWORD *)&v145[2] = 0;
  memset(&v143[8], 0, 20);
  re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(v143, v26);
  ++*(_DWORD *)&v143[24];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v136, 4518, *(unsigned int *)(v9 + 16));
  v30 = 0;
  *(_OWORD *)v141 = xmmword_226132830;
  *(_OWORD *)&v141[16] = xmmword_2260E5F20;
  *(_OWORD *)&v141[32] = xmmword_226132840;
  do
  {
    *(float32x4_t *)((char *)&v153 + v30) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2260E5F10, COERCE_FLOAT(*(_OWORD *)&v141[v30])), (float32x4_t)xmmword_226132850, *(float32x2_t *)&v141[v30], 1), (float32x4_t)xmmword_226132860, *(float32x4_t *)&v141[v30], 2);
    v30 += 16;
  }
  while (v30 != 48);
  v31 = 0;
  v32 = v153;
  v33 = v154;
  v34 = v155;
  *(_OWORD *)v141 = xmmword_226132870;
  *(_OWORD *)&v141[16] = xmmword_226132880;
  *(_OWORD *)&v141[32] = xmmword_2260E5F40;
  do
  {
    *(float32x4_t *)((char *)&v153 + v31) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, COERCE_FLOAT(*(_OWORD *)&v141[v31])), v33, *(float32x2_t *)&v141[v31], 1), v34, *(float32x4_t *)&v141[v31], 2);
    v31 += 16;
  }
  while (v31 != 48);
  v88 = v153;
  v90 = v154;
  v92 = v155;
  v95 = v134;
  v86 = v135;
  v4 = *(unsigned int *)(v9 + 16);
  re::DynamicArray<re::MeshLodLevelInfo>::resize((uint64_t)v143, v4);
  v35 = (_anonymous_namespace_ *)re::GeomMesh::accessVertexPositions((re::GeomMesh *)v9);
  v3 = *(_QWORD *)&v143[16];
  if ((_DWORD)v4)
  {
    v37 = 0;
    v38 = vsubq_f32(v86, v95);
    v39 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v88, v38.f32[0]), v90, *(float32x2_t *)v38.f32, 1), v92, v38, 2);
    v40 = (int32x4_t)vmulq_f32(v39, v39);
    v40.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v40, 2), vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1))).u32[0];
    v41 = vrsqrte_f32((float32x2_t)v40.u32[0]);
    v42 = vmul_f32(v41, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v41, v41)));
    v43 = vmulq_n_f32(v39, vmul_f32(v42, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v42, v42))).f32[0]);
    v15 = (unsigned int *)v36;
    v44 = (int32x2_t *)(*(_QWORD *)&v145[2] + 8);
    while (1)
    {
      if (v3 == v37)
        goto LABEL_174;
      v44[-1] = vdup_n_s32(v37);
      if (v36 == v37)
        break;
      v45 = vmulq_f32(v43, vsubq_f32(*((float32x4_t *)v35 + v37), v95));
      v44->i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).u32[0];
      v44 = (int32x2_t *)((char *)v44 + 12);
      if (v4 == ++v37)
        goto LABEL_37;
    }
LABEL_175:
    *(_QWORD *)v146 = 0;
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v153 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v141 = 136315906;
    *(_QWORD *)&v141[4] = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)&v141[14] = 601;
    *(_WORD *)&v141[18] = 2048;
    *(_QWORD *)&v141[20] = v15;
    *(_WORD *)&v141[28] = 2048;
    *(_QWORD *)&v141[30] = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_176:
    *(_QWORD *)v143 = 0;
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v153 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v141 = 136315906;
    *(_QWORD *)(v10 + 4) = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)(v10 + 14) = 789;
    *(_WORD *)&v141[18] = 2048;
    *(_QWORD *)(v10 + 20) = v15;
    *(_WORD *)&v141[28] = 2048;
    *(_QWORD *)(v10 + 30) = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_177:
    *(_QWORD *)v143 = 0;
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v153 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v141 = 136315906;
    *(_QWORD *)&v141[4] = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)&v141[14] = 789;
    *(_WORD *)&v141[18] = 2048;
    *(_QWORD *)&v141[20] = v3;
    *(_WORD *)&v141[28] = 2048;
    *(_QWORD *)&v141[30] = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_178:
    *(_QWORD *)v146 = 0;
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v153 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v141 = 136315906;
    *(_QWORD *)&v141[4] = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)&v141[14] = 789;
    *(_WORD *)&v141[18] = 2048;
    *(_QWORD *)&v141[20] = v15;
    *(_WORD *)&v141[28] = 2048;
    *(_QWORD *)&v141[30] = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_179:
    *(_QWORD *)v146 = 0;
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v153 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v141 = 136315906;
    *(_QWORD *)&v141[4] = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)&v141[14] = 789;
    *(_WORD *)&v141[18] = 2048;
    *(_QWORD *)&v141[20] = v4;
    *(_WORD *)&v141[28] = 2048;
    *(_QWORD *)&v141[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_180:
    v137 = 0;
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v153 = 0u;
    v85 = v53;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v141 = 136315906;
    *(_QWORD *)&v141[4] = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)&v141[14] = 789;
    *(_WORD *)&v141[18] = 2048;
    *(_QWORD *)&v141[20] = v85;
    *(_WORD *)&v141[28] = 2048;
    *(_QWORD *)&v141[30] = v85;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_181;
  }
LABEL_37:
  v87 = v26;
  if (v3 < 0x100)
  {
    v46 = 126 - 2 * __clz(v3);
    if (v3)
      v47 = v46;
    else
      v47 = 0;
    goto LABEL_42;
  }
  v94 = (unsigned int *)v9;
  v138 = 0;
  v137 = 0;
  v139 = 0;
  *(_QWORD *)&v141[32] = 0;
  memset(v141, 0, 28);
  re::DynamicArray<re::MeshLodLevelInfo>::resize((uint64_t)v141, v3);
  v68 = 0;
  v9 = *(_QWORD *)&v141[32];
  v5 = 12;
  v4 = *(_QWORD *)&v141[16];
  v97 = *(_QWORD *)v141;
  do
  {
    v20 = (unint64_t)v139;
    v6 = v138;
    v69 = v138 - 1;
    if (v138 >= 1)
    {
      v70 = v68;
      bzero(v139, 4 * (v138 - ((v138 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
      v68 = v70;
    }
    v71 = 0;
    v10 = *(_QWORD *)&v143[16];
    v72 = *(_QWORD *)&v145[2];
    v73 = 8 * v68;
    v74 = 1;
    do
    {
      if (v10 <= v71)
      {
        v140 = 0;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v146 = 136315906;
        *(_QWORD *)&v146[4] = "operator[]";
        v147 = 1024;
        v148 = 789;
        v149 = 2048;
        v150 = (unsigned int *)v71;
        v151 = 2048;
        v152 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_159:
        v140 = 0;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v146 = 136315906;
        *(_QWORD *)&v146[4] = "operator[]";
        v147 = 1024;
        v148 = 468;
        v149 = 2048;
        v150 = (unsigned int *)v71;
        v151 = 2048;
        v152 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_160:
        v140 = 0;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v146 = 136315906;
        *(_QWORD *)&v146[4] = "operator[]";
        v147 = 1024;
        v148 = 468;
        v149 = 2048;
        v150 = (unsigned int *)v6;
        v151 = 2048;
        v152 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_161:
        v140 = 0;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v146 = 136315906;
        *(_QWORD *)&v146[4] = "operator[]";
        v147 = 1024;
        v148 = 789;
        v149 = 2048;
        v150 = (unsigned int *)v69;
        v151 = 2048;
        v152 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_162:
        v140 = 0;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v146 = 136315906;
        *(_QWORD *)&v146[4] = "operator[]";
        v147 = 1024;
        v148 = 468;
        v149 = 2048;
        v150 = (unsigned int *)v71;
        v151 = 2048;
        v152 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_163:
        v140 = 0;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v146 = 136315906;
        *(_QWORD *)&v146[4] = "operator[]";
        v147 = 1024;
        v148 = 789;
        v149 = 2048;
        v150 = (unsigned int *)v69;
        v151 = 2048;
        v152 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_164:
        v140 = 0;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v146 = 136315906;
        *(_QWORD *)&v146[4] = "operator[]";
        v147 = 1024;
        v148 = 468;
        v149 = 2048;
        v150 = (unsigned int *)v71;
        v151 = 2048;
        v152 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_165:
        v134.i64[0] = 0;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v146 = 136315906;
        *(_QWORD *)&v146[4] = "operator[]";
        v147 = 1024;
        v148 = 789;
        v149 = 2048;
        v150 = (unsigned int *)v20;
        v151 = 2048;
        v152 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_166:
        v134.i64[0] = 0;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v146 = 136315906;
        *(_QWORD *)&v146[4] = "operator[]";
        v147 = 1024;
        v148 = 789;
        v149 = 2048;
        v150 = (unsigned int *)v20;
        v151 = 2048;
        v152 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_167:
        *(_QWORD *)v143 = 0;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v141 = 136315906;
        *(_QWORD *)&v141[4] = "operator[]";
        *(_WORD *)&v141[12] = 1024;
        *(_DWORD *)&v141[14] = 789;
        *(_WORD *)&v141[18] = 2048;
        *(_QWORD *)&v141[20] = v4;
        *(_WORD *)&v141[28] = 2048;
        *(_QWORD *)&v141[30] = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_168;
      }
      v71 = (*(_DWORD *)(v72 + 12 * v71 + 8) >> v73) + 1;
      if (v6 <= v71)
        goto LABEL_159;
      ++*(_DWORD *)(v20 + 4 * v71);
      v71 = v74;
      v24 = v3 > v74++;
    }
    while (v24);
    for (i = 0; i != 255; ++i)
    {
      if (v69 == i)
        goto LABEL_160;
      *(_DWORD *)(v20 + 4 * i + 4) += *(_DWORD *)(v20 + 4 * i);
    }
    v69 = 0;
    v76 = 1;
    do
    {
      if (v10 <= v69)
        goto LABEL_161;
      v77 = (uint64_t *)(v72 + 12 * v69);
      v71 = (*((_DWORD *)v77 + 2) >> v73);
      if (v6 <= v71)
        goto LABEL_162;
      v69 = *(unsigned int *)(v20 + 4 * v71);
      if (v4 <= v69)
        goto LABEL_163;
      v78 = (unsigned int *)(v9 + 12 * v69);
      v79 = *v77;
      v78[2] = *((_DWORD *)v77 + 2);
      *(_QWORD *)v78 = v79;
      v6 = v138;
      if (v138 <= v71)
        goto LABEL_164;
      v20 = (unint64_t)v139;
      ++*((_DWORD *)v139 + v71);
      v69 = v76;
      v24 = v3 > v76++;
    }
    while (v24);
    if (*(_QWORD *)v143)
    {
      v80 = v97;
      if (v97)
      {
        v81 = v68;
        re::DynamicArray<re::MeshLodLevelInfo>::copy((void **)v143, (uint64_t)v141);
        v68 = v81;
      }
      else
      {
        *(_QWORD *)&v143[16] = 0;
      }
      ++*(_DWORD *)&v143[24];
    }
    else
    {
      v80 = v97;
      if (v97)
      {
        *(_QWORD *)v143 = v97;
        v82 = v68;
        re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(v143, v4);
        ++*(_DWORD *)&v143[24];
        re::DynamicArray<re::MeshLodLevelInfo>::copy((void **)v143, (uint64_t)v141);
        v68 = v82;
      }
    }
    ++v68;
  }
  while (v68 != 4);
  if (v80)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v80 + 40))(v80, v9);
  if (v137 && v138)
    (*(void (**)(void))(*(_QWORD *)v137 + 40))();
  v9 = (uint64_t)v94;
LABEL_42:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v136);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v146, 4520, *(unsigned int *)(v9 + 16));
  v48 = *(unsigned int *)(v9 + 16);
  v49 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)v9);
  if ((_DWORD)v48)
  {
    v3 = v49;
    v10 = (unint64_t)v50;
    v51 = 0;
    v52 = v25 * v25;
    v53 = *(unsigned int **)&v143[16];
    v89 = *(_QWORD *)&v145[2];
    v96 = *(_QWORD *)&v145[2] + 20;
    v93 = 1;
    while (1)
    {
      if (v51 == v53)
        goto LABEL_180;
      v15 = (unsigned int *)(v89 + 12 * (_QWORD)v51);
      v91 = (unsigned int *)((char *)v51 + 1);
      if (*v15 == v15[1] && (unint64_t)v51 + 1 < v48)
        break;
LABEL_58:
      ++v93;
      v96 += 12;
      v51 = v91;
      if (v91 == (unsigned int *)v48)
        goto LABEL_59;
    }
    v5 = v89 + 12 * (_QWORD)v51 + 8;
    v55 = (float *)v96;
    v56 = v93;
    while (v53 != (unsigned int *)v56)
    {
      if ((float)((float)(*v55 - *(float *)v5) * (float)(*v55 - *(float *)v5)) > v52)
        goto LABEL_58;
      v4 = *v15;
      if (v4 >= v10)
        goto LABEL_169;
      v9 = *((unsigned int *)v55 - 2);
      if (v9 >= v10)
        goto LABEL_170;
      v57 = vsubq_f32(*(float32x4_t *)(v3 + 16 * v4), *(float32x4_t *)(v3 + 16 * v9));
      v58 = vmulq_f32(v57, v57);
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0] <= v52)
      {
        v9 = (uint64_t)v53;
        v53 = (unsigned int *)v9;
        if (v59)
          *((_DWORD *)v55 - 1) = v4;
      }
      ++v56;
      v55 += 3;
      if (v48 == v56)
        goto LABEL_58;
    }
LABEL_168:
    v137 = 0;
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v153 = 0u;
    v15 = v53;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v141 = 136315906;
    *(_QWORD *)&v141[4] = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)&v141[14] = 789;
    *(_WORD *)&v141[18] = 2048;
    *(_QWORD *)&v141[20] = v15;
    *(_WORD *)&v141[28] = 2048;
    *(_QWORD *)&v141[30] = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_169:
    v137 = 0;
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v153 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v141 = 136315906;
    *(_QWORD *)&v141[4] = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)&v141[14] = 601;
    *(_WORD *)&v141[18] = 2048;
    *(_QWORD *)&v141[20] = v4;
    *(_WORD *)&v141[28] = 2048;
    *(_QWORD *)&v141[30] = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_170:
    v137 = 0;
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v153 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v141 = 136315906;
    *(_QWORD *)&v141[4] = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)&v141[14] = 601;
    *(_WORD *)&v141[18] = 2048;
    *(_QWORD *)&v141[20] = v9;
    *(_WORD *)&v141[28] = 2048;
    *(_QWORD *)&v141[30] = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_171:
    *(_QWORD *)v146 = 0;
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v153 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v143 = 136315906;
    *(_QWORD *)&v143[4] = "operator[]";
    *(_WORD *)&v143[12] = 1024;
    *(_DWORD *)&v143[14] = 789;
    *(_WORD *)&v143[18] = 2048;
    *(_QWORD *)&v143[20] = v15;
    v144 = 2048;
    *(_QWORD *)v145 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_172:
    v134.i64[0] = 0;
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v153 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v146 = 136315906;
    *(_QWORD *)&v146[4] = "operator[]";
    v147 = 1024;
    v148 = 789;
    v149 = 2048;
    v150 = v15;
    v151 = 2048;
    v152 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_173:
    v134.i64[0] = 0;
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v153 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v146 = 136315906;
    *(_QWORD *)&v146[4] = "operator[]";
    v147 = 1024;
    v148 = 601;
    v149 = 2048;
    v150 = v15;
    v151 = 2048;
    v152 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_174:
    *(_QWORD *)v146 = 0;
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v153 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v141 = 136315906;
    *(_QWORD *)&v141[4] = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)&v141[14] = 789;
    *(_WORD *)&v141[18] = 2048;
    *(_QWORD *)&v141[20] = v3;
    *(_WORD *)&v141[28] = 2048;
    *(_QWORD *)&v141[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_175;
  }
LABEL_59:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v146);
  if ((_DWORD)v87)
  {
    v60 = 0;
    v10 = 0;
    v15 = *(unsigned int **)&v143[16];
    v3 = *(_QWORD *)(a2 + 16);
    v61 = *(_QWORD *)(a2 + 32);
    v62 = (int *)(*(_QWORD *)&v145[2] + 4);
    while (v15 != v60)
    {
      v4 = *(v62 - 1);
      if (v3 <= v4)
        goto LABEL_179;
      v64 = *v62;
      v62 += 3;
      v63 = v64;
      if ((_DWORD)v4 == v64)
        v10 = v10;
      else
        v10 = (v10 + 1);
      *(_DWORD *)(v61 + 4 * v4) = v63;
      v60 = (unsigned int *)((char *)v60 + 1);
      if ((unsigned int *)v87 == v60)
        goto LABEL_125;
    }
    goto LABEL_178;
  }
  v10 = 0;
LABEL_125:
  v65 = *(_QWORD *)v143;
  if (*(_QWORD *)v143 && *(_QWORD *)&v145[2])
LABEL_71:
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 40))(v65);
LABEL_127:
  if (v111)
  {
    if (v115)
      (*(void (**)(void))(*(_QWORD *)v111 + 40))();
    v115 = 0;
    v112 = 0;
    v113 = 0;
    v111 = 0;
    ++v114;
  }
  if (v106)
  {
    if (v110)
      (*(void (**)(void))(*(_QWORD *)v106 + 40))();
    v110 = 0;
    v107 = 0;
    v108 = 0;
    v106 = 0;
    ++v109;
  }
  if (v101)
  {
    if (v105)
      (*(void (**)(void))(*(_QWORD *)v101 + 40))();
    v105 = 0;
    v102 = 0;
    v103 = 0;
    v101 = 0;
    ++v104;
  }
  if (v99 && v100)
    (*(void (**)(void))(*(_QWORD *)v99 + 40))();
  if (v129)
  {
    if (v133)
      (*(void (**)(void))(*(_QWORD *)v129 + 40))();
    v133 = 0;
    v130 = 0;
    v131 = 0;
    v129 = 0;
    ++v132;
  }
  if (v124)
  {
    if (v128)
      (*(void (**)(void))(*(_QWORD *)v124 + 40))();
    v128 = 0;
    v125 = 0;
    v126 = 0;
    v124 = 0;
    ++v127;
  }
  if (v119)
  {
    if (v123)
      (*(void (**)(void))(*(_QWORD *)v119 + 40))();
    v123 = 0;
    v120 = 0;
    v121 = 0;
    v119 = 0;
    ++v122;
  }
  if (v117 && v118)
    (*(void (**)(void))(*(_QWORD *)v117 + 40))();
  return v10;
}

uint64_t re::`anonymous namespace'::CompareAttributes::CompareAttributes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const re::GeomMesh *v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42[3];
  unsigned int v43;
  uint64_t v44;
  _QWORD v45[2];
  __int128 v46;
  int v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = 0x101010100000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)(a1 + 72) = 0;
  v7 = a1 + 72;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v8 = a1 + 136;
  *(_DWORD *)(a1 + 120) = -1;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v9 = a1 + 200;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = -1;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = -1;
  *(_QWORD *)(a1 + 264) = 0;
  if (!*(_BYTE *)(a3 + 1))
    goto LABEL_30;
  v10 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a2 + 64), "vertexUV");
  if (!v10)
    goto LABEL_30;
  v12 = v10;
  v13 = *(unsigned __int8 *)(v10 + 16);
  if ((v13 & 0xFFFFFFFD) != 1)
    goto LABEL_30;
  *(_BYTE *)(a1 + 4) = 0;
  ++*(_DWORD *)a1;
  if (v13 == 1)
  {
    *(_QWORD *)(a1 + 48) = re::accessVertexUVs((re *)a2, v11);
    *(_DWORD *)(a1 + 56) = v14;
    *(float *)(a1 + 64) = *(float *)(a3 + 12) * *(float *)(a3 + 12);
    goto LABEL_30;
  }
  v41 = v8;
  v43 = *(_DWORD *)(a2 + 16);
  v15 = v43;
  *(_QWORD *)(a1 + 24) = 0;
  ++*(_DWORD *)(a1 + 32);
  re::DynamicArray<unsigned int>::resize(v6, v15, &v43);
  re::GeomAttributeFaceVaryingLayout<re::Vector2<float>>::GeomAttributeFaceVaryingLayout(v42, v12);
  v17 = *(_QWORD *)(a2 + 40);
  if ((_DWORD)v17)
  {
    v18 = 0;
    while (1)
    {
      v19 = v42[0];
      LODWORD(v55) = v18;
      v20 = *(unsigned __int8 *)(v42[0] + 204);
      if (v20 == 2)
        break;
      if (v20 == 1)
      {
        if (*(_QWORD *)(v42[0] + 224) <= v18)
          goto LABEL_28;
        v22 = (_DWORD *)(*(_QWORD *)(v42[0] + 240) + 4 * v18);
LABEL_17:
        if (*v22 != -1)
        {
          v17 = *(_QWORD *)(a2 + 40);
LABEL_19:
          v45[0] = -1;
          v45[1] = -1;
          if (v17 <= v18)
            goto LABEL_52;
          v46 = *(_OWORD *)(*(_QWORD *)(a2 + 56) + 16 * v18);
          v23 = HIDWORD(v46);
          re::GeomAttributeFaceVaryingLayout<re::Vector2<float>>::faceVertexValueIndices(v42, v18, (uint64_t)v45);
          v24 = 0;
          v17 = *(_QWORD *)(a1 + 24);
          v25 = *(_QWORD *)(a1 + 40);
          v26 = 3;
          if (v23 != -1)
            v26 = 4;
          while (2)
          {
            v27 = *((unsigned int *)&v46 + v24);
            if (v17 <= v27)
            {
              v44 = 0;
              v58 = 0u;
              v59 = 0u;
              v56 = 0u;
              v57 = 0u;
              v55 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v47 = 136315906;
              v48 = "operator[]";
              v49 = 1024;
              v50 = 789;
              v51 = 2048;
              v52 = v27;
              v53 = 2048;
              v54 = v17;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_52:
              *(_QWORD *)&v46 = 0;
              v58 = 0u;
              v59 = 0u;
              v56 = 0u;
              v57 = 0u;
              v55 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v47 = 136315906;
              v48 = "operator[]";
              v49 = 1024;
              v50 = 797;
              v51 = 2048;
              v52 = v18;
              v53 = 2048;
              v54 = v17;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            v28 = *((_DWORD *)v45 + v24);
            v29 = *(_DWORD *)(v25 + 4 * v27);
            if (v29 == v43)
            {
LABEL_26:
              *(_DWORD *)(v25 + 4 * v27) = v28;
            }
            else if (v29 != v28)
            {
              v28 = -1;
              goto LABEL_26;
            }
            if (v26 == ++v24)
              goto LABEL_28;
            continue;
          }
        }
        goto LABEL_28;
      }
      if (*(_BYTE *)(v42[0] + 204))
      {
        re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
        result = _os_crash();
        __break(1u);
        return result;
      }
      if (v18 < *(unsigned int *)(v42[0] + 208))
        goto LABEL_19;
LABEL_28:
      ++v18;
      v17 = *(_QWORD *)(a2 + 40);
      if (v18 >= v17)
        goto LABEL_29;
    }
    v21 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v42[0] + 208), (unsigned int *)&v55);
    if (v21 == -1)
      goto LABEL_28;
    v22 = (_DWORD *)(*(_QWORD *)(v19 + 216) + 8 * v21 + 4);
    goto LABEL_17;
  }
LABEL_29:
  v8 = v41;
LABEL_30:
  if (*(_BYTE *)(a3 + 2))
  {
    v30 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a2 + 64), "vertexNormal");
    if (v30)
    {
      v31 = *(unsigned __int8 *)(v30 + 16);
      if ((v31 & 0xFFFFFFFD) == 1)
      {
        *(_BYTE *)(a1 + 5) = 0;
        ++*(_DWORD *)a1;
        if (v31 == 1)
        {
          *(_DWORD *)(a1 + 120) = v32;
          *(float *)(a1 + 128) = cosf(*(float *)(a3 + 16));
        }
        else
        {
        }
      }
    }
  }
  if (*(_BYTE *)(a3 + 3))
  {
    v33 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a2 + 64), "vertexTangent");
    if (v33)
    {
      v34 = *(unsigned __int8 *)(v33 + 16);
      if ((v34 & 0xFFFFFFFD) == 1)
      {
        *(_BYTE *)(a1 + 6) = 0;
        ++*(_DWORD *)a1;
        if (v34 == 1)
        {
          *(_DWORD *)(a1 + 184) = v35;
          *(float *)(a1 + 192) = *(float *)(a3 + 20) * *(float *)(a3 + 20);
        }
        else
        {
        }
      }
    }
  }
  if (*(_BYTE *)(a3 + 4))
  {
    v36 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a2 + 64), "vertexBitangent");
    if (v36)
    {
      v37 = *(unsigned __int8 *)(v36 + 16);
      if ((v37 & 0xFFFFFFFD) == 1)
      {
        *(_BYTE *)(a1 + 7) = 0;
        ++*(_DWORD *)a1;
        if (v37 == 1)
        {
          *(_DWORD *)(a1 + 248) = v38;
          *(float *)(a1 + 256) = *(float *)(a3 + 24) * *(float *)(a3 + 24);
        }
        else
        {
        }
      }
    }
  }
  v39 = *(_QWORD *)(a3 + 32);
  if (v39)
    *(_QWORD *)(a1 + 264) = v39;
  return a1;
}

uint64_t re::mergeVertices(unint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  re::GeomAttribute *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  int v46;
  int v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  const char *v60;
  re *v61;
  uint64_t v62;
  unsigned int v63;
  _QWORD v64[2];
  _BYTE *v65;
  int v66;
  uint64_t v67;
  _QWORD v68[2];
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  _BYTE v74[23];
  _BYTE v75[16];
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t *v88;
  _BYTE v89[28];
  __int16 v90;
  _BYTE v91[10];
  _BYTE v92[12];
  __int16 v93;
  int v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  unint64_t v98;
  _QWORD v99[6];
  __int128 v100;
  __int128 v101;
  uint64_t v102;

  v8 = a1;
  v102 = *MEMORY[0x24BDAC8D0];
  v67 = 0;
  v64[0] = 0;
  v64[1] = 0;
  v10 = (unsigned int *)(a1 + 16);
  v9 = *(unsigned int *)(a1 + 16);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v75, 4516, v9);
  v65 = 0;
  v66 = 1;
  v11 = (_anonymous_namespace_ *)re::mergeVertices(v8, (uint64_t)v64, a4);
  v12 = v11;
  if ((_DWORD)v11)
  {
    v61 = (re *)a2;
    v62 = a3;
    v63 = v11;
    v60 = *(const char **)v8;
    if (*(_QWORD *)v8)
      v13 = *(const char **)v8;
    else
      v13 = "";
    v14 = *(unsigned int *)(v8 + 16);
    *(_QWORD *)&v91[2] = 0;
    memset(v89, 0, sizeof(v89));
    v71 = 0;
    v68[1] = 0;
    v69 = 0;
    v68[0] = 0;
    v70 = 0;
    re::DynamicArray<float>::resize((uint64_t)v89, v14);
    re::DynamicArray<unsigned int>::resize(v68, v14, &re::kInvalidMeshIndex);
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = 0;
      v17 = v65;
      v18 = v67;
      v19 = v69;
      v20 = v71;
      v4 = *(_QWORD *)&v89[16];
      v21 = *(_QWORD *)&v91[2];
      while (v17 != (_BYTE *)v15)
      {
        v22 = *(unsigned int *)(v18 + 4 * v15);
        if (v19 <= v22)
          goto LABEL_103;
        v23 = *(_DWORD *)(v20 + 4 * v22);
        if (v23 == -1)
        {
          *(_DWORD *)(v20 + 4 * v22) = v16;
          v23 = v16++;
        }
        *(_DWORD *)(v18 + 4 * v15) = v23;
        if (v4 == v15)
          goto LABEL_104;
        *(_DWORD *)(v21 + 4 * v15) = v15;
        if (v14 == ++v15)
          goto LABEL_20;
      }
      *(_QWORD *)v92 = 0;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      v22 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v99[0]) = 136315906;
      *(_QWORD *)((char *)v99 + 4) = "operator[]";
      WORD2(v99[1]) = 1024;
      *(_DWORD *)((char *)&v99[1] + 6) = 789;
      WORD1(v99[2]) = 2048;
      *(_QWORD *)((char *)&v99[2] + 4) = v17;
      WORD2(v99[3]) = 2048;
      *(_QWORD *)((char *)&v99[3] + 6) = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_103:
      *(_QWORD *)v92 = 0;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      v17 = (_BYTE *)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v99[0]) = 136315906;
      *(_QWORD *)((char *)v99 + 4) = "operator[]";
      WORD2(v99[1]) = 1024;
      *(_DWORD *)((char *)&v99[1] + 6) = 789;
      WORD1(v99[2]) = 2048;
      *(_QWORD *)((char *)&v99[2] + 4) = v22;
      WORD2(v99[3]) = 2048;
      *(_QWORD *)((char *)&v99[3] + 6) = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_104:
      *(_QWORD *)v92 = 0;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v99[0]) = 136315906;
      *(_QWORD *)((char *)v99 + 4) = "operator[]";
      WORD2(v99[1]) = 1024;
      *(_DWORD *)((char *)&v99[1] + 6) = 789;
      WORD1(v99[2]) = 2048;
      *(_QWORD *)((char *)&v99[2] + 4) = v4;
      WORD2(v99[3]) = 2048;
      *(_QWORD *)((char *)&v99[3] + 6) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_105;
    }
    v16 = 0;
LABEL_20:
    re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v78);
    LODWORD(v78) = v16;
    v83 = v16;
    if (v84)
    {
      v28 = v85;
      v29 = 8 * v84;
      do
      {
        v30 = *v28++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 72))(v30, v83);
        v29 -= 8;
      }
      while (v29);
    }
    if (*(_DWORD *)(v8 + 640))
    {
      LODWORD(v4) = 0;
      do
      {
        v31 = re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(v8 + 64), v4);
        if (*(_BYTE *)(v31 + 16) == 1)
        {
          v32 = v31;
          v33 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v81, *(char **)(v31 + 8), 1, *(unsigned __int8 *)(v31 + 17));
          if (!*(_QWORD *)&v89[16])
            goto LABEL_110;
          if (!v65)
            goto LABEL_111;
          (*(void (**)(uint64_t, re::GeomAttribute *, unint64_t, _QWORD, uint64_t))(*(_QWORD *)v32 + 40))(v32, v33, v14, *(_QWORD *)&v91[2], v67);
        }
        v4 = (v4 + 1);
      }
      while (v4 < *(_DWORD *)(v8 + 640));
    }
    v34 = *(_QWORD *)(v8 + 40);
    re::DynamicArray<re::GeomCell4>::resize((_QWORD *)&v78 + 1, v34);
    v86 = v34;
    if (v87)
    {
      v35 = v88;
      v4 = 8 * v87;
      do
      {
        v36 = *v35++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 72))(v36, v86);
        v4 -= 8;
      }
      while (v4);
    }
    if ((_DWORD)v34)
    {
      v37 = 0;
      v17 = *(_BYTE **)(v8 + 40);
      v38 = *(_QWORD *)(v8 + 56);
      v8 = (unint64_t)v65;
      v4 = *((_QWORD *)&v79 + 1);
      v39 = *((_QWORD *)&v80 + 1);
LABEL_35:
      if ((_BYTE *)v37 == v17)
        goto LABEL_107;
      v40 = 0;
      v77 = *(_OWORD *)(v38 + 16 * v37);
      v41 = HIDWORD(v77);
      if (HIDWORD(v77) == -1)
        v42 = 3;
      else
        v42 = 4;
      v43 = v67;
      while (1)
      {
        v44 = *((unsigned int *)&v77 + v40);
        if (v8 <= v44)
          break;
        *((_DWORD *)&v77 + v40++) = *(_DWORD *)(v43 + 4 * v44);
        if (v42 == v40)
        {
          if (v37 == v4)
            goto LABEL_108;
          v45 = v41 == -1;
          v47 = DWORD2(v77);
          v46 = HIDWORD(v77);
          if (v45)
            v46 = -1;
          v48 = v39 + 16 * v37;
          *(_QWORD *)v48 = v77;
          *(_DWORD *)(v48 + 8) = v47;
          *(_DWORD *)(v48 + 12) = v46;
          if (++v37 == v34)
            goto LABEL_47;
          goto LABEL_35;
        }
      }
      v76 = 0;
      v100 = 0u;
      v101 = 0u;
      memset(v99, 0, sizeof(v99));
      v12 = (_anonymous_namespace_ *)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v92 = 136315906;
      *(_QWORD *)&v92[4] = "operator[]";
      v93 = 1024;
      v94 = 789;
      v95 = 2048;
      v96 = v44;
      v97 = 2048;
      v98 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_97;
    }
LABEL_47:
    re::internal::addAndCopyAttributeValues((uint64_t)v10, (_anonymous_namespace_ *)&v78, 0);
    re::internal::addAndCopyAttributeValues((uint64_t)v10, (_anonymous_namespace_ *)&v78, 2);
    re::internal::addAndCopyAttributeValues((uint64_t)v10, (_anonymous_namespace_ *)&v78, 3);
    re::internal::addAndCopyAttributeValues((uint64_t)v10, (_anonymous_namespace_ *)&v78, 4);
    a2 = (unsigned int *)v61;
    re::GeomMesh::operator=((uint64_t)v61, &v78);
    if (v60)
    {
      if ((v73 & 1) != 0)
        v49 = *(const char **)&v74[7];
      else
        v49 = v74;
      re::GeomMesh::setName(v61, v49);
    }
    re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)&v81);
    if (*((_QWORD *)&v78 + 1) && *((_QWORD *)&v80 + 1))
      (*(void (**)(void))(**((_QWORD **)&v78 + 1) + 40))();
    v12 = (_anonymous_namespace_ *)v63;
    a3 = v62;
    if (v68[0] && v71)
      (*(void (**)(void))(*(_QWORD *)v68[0] + 40))();
    if (*(_QWORD *)v89 && *(_QWORD *)&v91[2])
      (*(void (**)(void))(**(_QWORD **)v89 + 40))();
    if (v72 && (v73 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v72 + 40))();
  }
  else
  {
    v24 = *v10;
    re::DynamicArray<float>::resize((uint64_t)v64, v24);
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = v65;
      v27 = v67;
      while (v26 != v25)
      {
        *(_DWORD *)(v27 + 4 * (_QWORD)v25) = (_DWORD)v25;
        if ((_BYTE *)v24 == ++v25)
          goto LABEL_18;
      }
LABEL_109:
      *(_QWORD *)v89 = 0;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v99[0]) = 136315906;
      *(_QWORD *)((char *)v99 + 4) = "operator[]";
      WORD2(v99[1]) = 1024;
      *(_DWORD *)((char *)&v99[1] + 6) = 789;
      WORD1(v99[2]) = 2048;
      *(_QWORD *)((char *)&v99[2] + 4) = v26;
      WORD2(v99[3]) = 2048;
      *(_QWORD *)((char *)&v99[3] + 6) = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_110:
      *(_QWORD *)&v77 = 0;
      v100 = 0u;
      v101 = 0u;
      memset(v99, 0, sizeof(v99));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v92 = 136315906;
      *(_QWORD *)&v92[4] = "operator[]";
      v93 = 1024;
      v94 = 789;
      v95 = 2048;
      v96 = 0;
      v97 = 2048;
      v98 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_111:
      *(_QWORD *)&v77 = 0;
      v100 = 0u;
      v101 = 0u;
      memset(v99, 0, sizeof(v99));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v92 = 136315906;
      *(_QWORD *)&v92[4] = "operator[]";
      v93 = 1024;
      v94 = 789;
      v95 = 2048;
      v96 = 0;
      v97 = 2048;
      v98 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_18:
    re::GeomMesh::copy((re::GeomMesh *)v8, (re::GeomMesh *)a2);
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v75);
  if ((_DWORD)v12)
  {
    v99[4] = 0;
    memset(v99, 0, 28);
    re::DynamicArray<unsigned int>::resize(v99, a2[4], &re::kInvalidMeshIndex);
    if ((_DWORD)v9)
    {
      v50 = 0;
      v17 = v65;
      v51 = v67;
      v10 = (unsigned int *)v99[2];
      v52 = v99[4];
      while (v17 != (_BYTE *)v50)
      {
        v8 = *(unsigned int *)(v51 + 4 * v50);
        if ((unint64_t)v10 <= v8)
          goto LABEL_106;
        *(_DWORD *)(v52 + 4 * v8) = v50++;
        if (v9 == v50)
          goto LABEL_70;
      }
LABEL_105:
      v68[0] = 0;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v89 = 136315906;
      *(_QWORD *)&v89[4] = "operator[]";
      *(_WORD *)&v89[12] = 1024;
      *(_DWORD *)&v89[14] = 789;
      *(_WORD *)&v89[18] = 2048;
      *(_QWORD *)&v89[20] = v17;
      v90 = 2048;
      *(_QWORD *)v91 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_106:
      v68[0] = 0;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v89 = 136315906;
      *(_QWORD *)&v89[4] = "operator[]";
      *(_WORD *)&v89[12] = 1024;
      *(_DWORD *)&v89[14] = 789;
      *(_WORD *)&v89[18] = 2048;
      *(_QWORD *)&v89[20] = v8;
      v90 = 2048;
      *(_QWORD *)v91 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_107:
      *(_QWORD *)&v77 = 0;
      v100 = 0u;
      v101 = 0u;
      memset(v99, 0, sizeof(v99));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v92 = 136315906;
      *(_QWORD *)&v92[4] = "operator[]";
      v93 = 1024;
      v94 = 797;
      v95 = 2048;
      v96 = (uint64_t)v17;
      v97 = 2048;
      v98 = (unint64_t)v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_108:
      v76 = 0;
      v26 = v89;
      v100 = 0u;
      v101 = 0u;
      memset(v99, 0, sizeof(v99));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v92 = 136315906;
      *(_QWORD *)&v92[4] = "operator[]";
      v93 = 1024;
      v94 = 789;
      v95 = 2048;
      v96 = v4;
      v97 = 2048;
      v98 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_109;
    }
LABEL_70:
    re::GeomIndexMap::GeomIndexMap((uint64_t)&v78, (uint64_t)v99);
    re::GeomIndexMap::operator=(a3, (uint64_t)&v78);
    if (BYTE12(v78))
    {
      if (BYTE12(v78) != 2)
      {
        if (BYTE12(v78) == 1)
        {
          v54 = v79;
          if (!(_QWORD)v79 || !(_QWORD)v81)
            goto LABEL_89;
LABEL_88:
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 40))(v54);
          goto LABEL_89;
        }
        re::internal::assertLog((re::internal *)4, v53, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
        _os_crash();
        __break(1u);
LABEL_113:
        re::internal::assertLog((re::internal *)4, v57, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
        result = _os_crash();
        __break(1u);
        return result;
      }
      v54 = *((_QWORD *)&v82 + 1);
      if (*((_QWORD *)&v82 + 1))
      {
        if (*((_QWORD *)&v79 + 1))
          *((_QWORD *)&v79 + 1) = 0;
        if ((_QWORD)v79)
          goto LABEL_88;
      }
    }
LABEL_89:
    v58 = v99[0];
    if (!v99[0] || !v99[4])
      goto LABEL_92;
    goto LABEL_91;
  }
  v55 = 0;
  v56 = a2[4];
  *(_QWORD *)&v78 = 0xFFFFFFFF00000000;
  DWORD2(v78) = -1;
  BYTE12(v78) = 0;
  if (v56 - 1 <= 0xFFFFFFFD)
  {
    DWORD2(v78) = v56 - 1;
    v55 = v56;
    *(_QWORD *)&v78 = v56;
  }
  LODWORD(v79) = v55;
  re::GeomIndexMap::operator=(a3, (uint64_t)&v78);
  if (!BYTE12(v78))
    goto LABEL_92;
  if (BYTE12(v78) != 2)
  {
    if (BYTE12(v78) == 1)
    {
      v58 = v79;
      if (!(_QWORD)v79 || !(_QWORD)v81)
        goto LABEL_92;
      goto LABEL_91;
    }
    goto LABEL_113;
  }
LABEL_97:
  v58 = *((_QWORD *)&v82 + 1);
  if (!*((_QWORD *)&v82 + 1))
    goto LABEL_92;
  if (*((_QWORD *)&v79 + 1))
    *((_QWORD *)&v79 + 1) = 0;
  if (!(_QWORD)v79)
    goto LABEL_92;
LABEL_91:
  (*(void (**)(uint64_t))(*(_QWORD *)v58 + 40))(v58);
LABEL_92:
  if (v64[0])
  {
    if (v67)
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v64[0] + 40))(v64[0], v67);
  }
  return (uint64_t)v12;
}

uint64_t re::`anonymous namespace'::CompareAttributes::buildVertexToAttributeValueIndexMap<re::Vector3<float>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21[3];
  unsigned int v22;
  uint64_t v23;
  _QWORD v24[2];
  __int128 v25;
  int v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  unint64_t v31;
  __int16 v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v22 = *(_DWORD *)(a1 + 16);
  v6 = v22;
  *(_QWORD *)(a3 + 16) = 0;
  ++*(_DWORD *)(a3 + 24);
  re::DynamicArray<unsigned int>::resize((_QWORD *)a3, v6, &v22);
  result = (uint64_t)re::GeomAttributeFaceVaryingLayout<re::Vector3<float>>::GeomAttributeFaceVaryingLayout(v21, a2);
  v9 = *(_QWORD *)(a1 + 40);
  if ((_DWORD)v9)
  {
    for (i = 0; i < v9; ++i)
    {
      v11 = v21[0];
      LODWORD(v34) = i;
      v12 = *(unsigned __int8 *)(v21[0] + 204);
      if (v12 == 2)
      {
        result = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v21[0] + 208), (unsigned int *)&v34);
        if (result == -1)
          goto LABEL_24;
        v13 = (_DWORD *)(*(_QWORD *)(v11 + 216) + 8 * result + 4);
      }
      else
      {
        if (v12 != 1)
        {
          if (*(_BYTE *)(v21[0] + 204))
            goto LABEL_28;
          if (i < *(unsigned int *)(v21[0] + 208))
            goto LABEL_14;
          goto LABEL_24;
        }
        if (*(_QWORD *)(v21[0] + 224) <= i)
          goto LABEL_24;
        v13 = (_DWORD *)(*(_QWORD *)(v21[0] + 240) + 4 * i);
      }
      if (*v13 != -1)
      {
        v9 = *(_QWORD *)(a1 + 40);
LABEL_14:
        v24[0] = -1;
        v24[1] = -1;
        if (v9 <= i)
          goto LABEL_27;
        v25 = *(_OWORD *)(*(_QWORD *)(a1 + 56) + 16 * i);
        v14 = HIDWORD(v25);
        result = re::GeomAttributeFaceVaryingLayout<re::Vector2<float>>::faceVertexValueIndices(v21, i, (uint64_t)v24);
        v15 = 0;
        v9 = *(_QWORD *)(a3 + 16);
        v16 = *(_QWORD *)(a3 + 32);
        if (v14 == -1)
          v17 = 3;
        else
          v17 = 4;
        while (2)
        {
          v18 = *((unsigned int *)&v25 + v15);
          if (v9 <= v18)
          {
            v23 = 0;
            v37 = 0u;
            v38 = 0u;
            v35 = 0u;
            v36 = 0u;
            v34 = 0u;
            i = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v26 = 136315906;
            v27 = "operator[]";
            v28 = 1024;
            v29 = 789;
            v30 = 2048;
            v31 = v18;
            v32 = 2048;
            v33 = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_27:
            *(_QWORD *)&v25 = 0;
            v37 = 0u;
            v38 = 0u;
            v35 = 0u;
            v36 = 0u;
            v34 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v26 = 136315906;
            v27 = "operator[]";
            v28 = 1024;
            v29 = 797;
            v30 = 2048;
            v31 = i;
            v32 = 2048;
            v33 = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_28:
            re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
          }
          v19 = *((_DWORD *)v24 + v15);
          v20 = *(_DWORD *)(v16 + 4 * v18);
          if (v20 == v22)
          {
LABEL_22:
            *(_DWORD *)(v16 + 4 * v18) = v19;
          }
          else if (v20 != v19)
          {
            v19 = -1;
            goto LABEL_22;
          }
          if (v17 == ++v15)
            break;
          continue;
        }
      }
LABEL_24:
      v9 = *(_QWORD *)(a1 + 40);
    }
  }
  return result;
}

uint64_t re::GeomAttributeFaceVaryingLayout<re::Vector2<float>>::faceVertexValueIndices(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _OWORD v13[5];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  LODWORD(v13[0]) = a2;
  v6 = *(unsigned __int8 *)(v5 + 204);
  if (v6 == 2)
  {
    v7 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v5 + 208), (unsigned int *)v13);
    if (v7 == -1)
      return 0;
    v8 = (_DWORD *)(*(_QWORD *)(v5 + 216) + 8 * v7 + 4);
LABEL_10:
    LODWORD(a2) = *v8;
    if (*v8 != -1)
    {
      v5 = *a1;
      goto LABEL_12;
    }
    return 0;
  }
  if (v6 == 1)
  {
    if (*(_QWORD *)(v5 + 224) <= (unint64_t)a2)
      return 0;
    v8 = (_DWORD *)(*(_QWORD *)(v5 + 240) + 4 * a2);
    goto LABEL_10;
  }
  if (!*(_BYTE *)(v5 + 204))
  {
    if (*(_DWORD *)(v5 + 208) <= a2)
      return 0;
LABEL_12:
    if (*(_QWORD *)(v5 + 88) <= (unint64_t)a2)
    {
      memset(v13, 0, sizeof(v13));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v9 = 0;
    v10 = *(_QWORD *)(v5 + 104) + 16 * a2;
    do
    {
      *(_DWORD *)(a3 + v9) = *(_DWORD *)(v10 + v9);
      v9 += 4;
    }
    while (v9 != 16);
    if (*(_DWORD *)(a3 + 12) == -1)
      return 3;
    else
      return 4;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t *re::GeomAttributeFaceVaryingLayout<re::Vector2<float>>::GeomAttributeFaceVaryingLayout(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
  {
    v4 = re::internal::GeomTypedAttribute<double>::operator[](a2, 0);
    v5 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *re::GeomAttributeFaceVaryingLayout<re::Vector3<float>>::GeomAttributeFaceVaryingLayout(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
  {
    v4 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a2, 0);
    v5 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t re::`anonymous namespace'::CompareAttributes::operator()(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float32x2_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  re::_anonymous_namespace_::CompareAttributes::TangentData *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v3 = a3;
  LODWORD(v4) = a2;
  v39 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 4))
    goto LABEL_2;
  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
  {
    if (v9 <= a2)
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v34 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v26 = 136315906;
      v27 = "operator[]";
      v28 = 1024;
      v29 = 797;
      v30 = 2048;
      v31 = v4;
      v32 = 2048;
      v33 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      v10 = a3;
      if (v9 > a3)
      {
        v11 = *(_QWORD *)(a1 + 40);
        v12 = *(_DWORD *)(v11 + 4 * a2);
        if (v12 == -1 || v12 != *(_DWORD *)(v11 + 4 * a3))
          return 0;
        goto LABEL_2;
      }
    }
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    v21 = v10;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v26 = 136315906;
    v27 = "operator[]";
    v28 = 1024;
    v29 = 797;
    v30 = 2048;
    v31 = v21;
    v32 = 2048;
    v33 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_38;
  }
  v9 = *(unsigned int *)(a1 + 56);
  if (v9 <= a2)
  {
LABEL_40:
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    v3 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v26 = 136315906;
    v27 = "operator[]";
    v28 = 1024;
    v29 = 601;
    v30 = 2048;
    v31 = v4;
    v32 = 2048;
    v33 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_41;
  }
  if (v9 <= a3)
  {
LABEL_41:
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    LODWORD(v4) = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v26 = 136315906;
    v27 = "operator[]";
    v28 = 1024;
    v29 = 601;
    v30 = 2048;
    v31 = v3;
    v32 = 2048;
    v33 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_42;
  }
  v19 = vsub_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 48) + 8 * a2), *(float32x2_t *)(*(_QWORD *)(a1 + 48) + 8 * a3));
  if (vaddv_f32(vmul_f32(v19, v19)) > *(float *)(a1 + 64))
    return 0;
LABEL_2:
  if (*(_BYTE *)(a1 + 5))
    goto LABEL_3;
  v9 = *(_QWORD *)(a1 + 88);
  if (!v9)
  {
    v9 = *(unsigned int *)(a1 + 120);
    if (v9 <= a2)
    {
LABEL_42:
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v34 = 0u;
      v3 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v26 = 136315906;
      v27 = "operator[]";
      v28 = 1024;
      v29 = 601;
      v30 = 2048;
      v31 = v4;
      v32 = 2048;
      v33 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_43:
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v34 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v26 = 136315906;
      v27 = "operator[]";
      v28 = 1024;
      v29 = 601;
      v30 = 2048;
      v31 = v3;
      v32 = 2048;
      v33 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v9 <= a3)
      goto LABEL_43;
    v20 = vmulq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 112) + 16 * a2), *(float32x4_t *)(*(_QWORD *)(a1 + 112) + 16 * a3));
    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0] >= *(float *)(a1 + 128))goto LABEL_3;
    return 0;
  }
  v14 = a2;
  if (v9 <= a2)
  {
LABEL_38:
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    v22 = v14;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v26 = 136315906;
    v27 = "operator[]";
    v28 = 1024;
    v29 = 797;
    v30 = 2048;
    v31 = v22;
    v32 = 2048;
    v33 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_39;
  }
  v15 = a3;
  if (v9 <= a3)
  {
LABEL_39:
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    v4 = v15;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v26 = 136315906;
    v27 = "operator[]";
    v28 = 1024;
    v29 = 797;
    v30 = 2048;
    v31 = v4;
    v32 = 2048;
    v33 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_40;
  }
  v16 = *(_QWORD *)(a1 + 104);
  v17 = *(_DWORD *)(v16 + 4 * a2);
  if (v17 == -1 || v17 != *(_DWORD *)(v16 + 4 * a3))
    return 0;
LABEL_3:
  if (*(_BYTE *)(a1 + 6)
  {
    if (*(_BYTE *)(a1 + 7)
    {
      v7 = *(_QWORD *)(a1 + 264);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 24);
        LODWORD(v34) = v4;
        v26 = v3;
        if (v8)
        {
          return (*(uint64_t (**)(uint64_t, __int128 *, int *))(*(_QWORD *)v8 + 48))(v8, &v34, &v26);
        }
        else
        {
          v23 = (re::_anonymous_namespace_::CompareAttributes::TangentData *)std::__throw_bad_function_call[abi:nn180100]();
        }
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

BOOL re::`anonymous namespace'::CompareAttributes::TangentData::compare(re::_anonymous_namespace_::CompareAttributes::TangentData *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v9;
  float32x4_t v10;
  float32x4_t v11;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
  {
    v9 = *((_DWORD *)this + 12);
    if (v9 > a2)
    {
      if (v9 > a3)
      {
        v10 = vsubq_f32(*(float32x4_t *)(*((_QWORD *)this + 5) + 16 * a2), *(float32x4_t *)(*((_QWORD *)this + 5) + 16 * a3));
        v11 = vmulq_f32(v10, v10);
        return vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0] <= *((float *)this + 14);
      }
LABEL_17:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_16:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  if (v3 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  if (v3 <= a3)
  {
LABEL_15:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  v4 = *((_QWORD *)this + 4);
  v5 = *(_DWORD *)(v4 + 4 * a2);
  v6 = *(_DWORD *)(v4 + 4 * a3);
  return v5 != -1 && v5 == v6;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,re::`anonymous namespace'::PointProjection *,false>(uint64_t result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  float *i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float *v13;
  uint64_t v14;
  float *v15;
  float *v16;
  int v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  int v22;
  float v23;
  unint64_t v24;
  float v25;
  float *v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  unint64_t v34;
  float v35;
  uint64_t v36;
  BOOL v37;
  _DWORD *v38;
  float v40;
  float v41;
  float v42;
  float v43;
  float *v44;
  float v45;
  int v46;
  float *v47;
  float *j;
  float v49;
  uint64_t v50;
  float v51;
  float *v52;
  float v53;
  float v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  float v62;
  float v63;
  uint64_t v64;
  int v65;
  int v66;
  float v67;
  float v68;
  int v69;
  uint64_t v70;
  float v71;
  float v72;
  int v73;
  uint64_t v74;
  float v75;
  float v76;
  float *v77;
  BOOL v79;
  uint64_t v80;
  float *v81;
  float *v82;
  float v83;
  float v84;
  float v85;
  int v86;
  float *v87;
  uint64_t v88;
  float *v89;
  _DWORD *v90;
  float v91;
  int64_t v92;
  int64_t v93;
  int64_t v94;
  uint64_t v95;
  float *v96;
  float v97;
  float v98;
  float v99;
  float v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  float *v104;
  uint64_t v105;
  float v106;
  float v107;
  float v108;
  int64_t v109;
  uint64_t v110;
  float *v111;
  float *v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  float v116;
  float v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  float *v123;
  float v124;
  float v125;
  unsigned int v126;
  int v127;
  uint64_t v128;
  float *v129;
  unint64_t v130;
  float v131;
  uint64_t v132;
  float *v134;
  float v135;
  float v136;
  float v137;
  int v138;
  float *v139;
  float v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;

  v7 = (float *)result;
LABEL_2:
  v8 = a2 - 3;
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = 0xAAAAAAAAAAAAAAABLL * (a2 - i);
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v56 = *(a2 - 1);
        v57 = i[2];
        if (v56 < v57 || v56 <= v57 && *(_DWORD *)v8 < *(_DWORD *)i)
        {
          v150 = *((_DWORD *)i + 2);
          v144 = *(_QWORD *)i;
          v58 = *(_QWORD *)v8;
          i[2] = *(a2 - 1);
          *(_QWORD *)i = v58;
          *((_DWORD *)a2 - 1) = v150;
          *(_QWORD *)v8 = v144;
        }
        return result;
      case 3:
      case 4:
      case 5:
        v59 = (uint64_t *)(i + 3);
        v60 = (uint64_t *)(i + 6);
        v61 = (uint64_t *)(i + 9);
        v62 = *(a2 - 1);
        v63 = i[11];
        if (v62 < v63 || v62 <= v63 && *(_DWORD *)v8 < *(_DWORD *)v61)
        {
          v64 = *v61;
          v65 = *((_DWORD *)i + 11);
          v66 = *((_DWORD *)a2 - 1);
          *v61 = *(_QWORD *)v8;
          *((_DWORD *)i + 11) = v66;
          *((_DWORD *)a2 - 1) = v65;
          *(_QWORD *)v8 = v64;
          v67 = i[11];
          v68 = i[8];
          if (v67 < v68 || v67 <= v68 && *(_DWORD *)v61 < *(_DWORD *)v60)
          {
            v69 = *((_DWORD *)i + 8);
            v70 = *v60;
            *v60 = *v61;
            i[8] = i[11];
            *v61 = v70;
            *((_DWORD *)i + 11) = v69;
            v71 = i[8];
            v72 = i[5];
            if (v71 < v72 || v71 <= v72 && *(_DWORD *)v60 < *(_DWORD *)v59)
            {
              v73 = *((_DWORD *)i + 5);
              v74 = *v59;
              *v59 = *v60;
              i[5] = i[8];
              *v60 = v74;
              *((_DWORD *)i + 8) = v73;
              v75 = i[5];
              v76 = i[2];
              if (v75 < v76 || v75 <= v76 && *((_DWORD *)i + 3) < *(_DWORD *)i)
              {
                v151 = *((_DWORD *)i + 2);
                v145 = *(_QWORD *)i;
                *(_QWORD *)i = *v59;
                i[2] = i[5];
                *v59 = v145;
                *((_DWORD *)i + 5) = v151;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 287)
        {
          v77 = i + 3;
          v79 = i == a2 || v77 == a2;
          if ((a4 & 1) != 0)
          {
            if (v79)
              return result;
            v80 = 0;
            v81 = i;
            while (1)
            {
              v82 = v81;
              v81 = v77;
              v83 = v82[5];
              v84 = v82[2];
              if (v83 < v84)
                break;
              if (v83 <= v84)
              {
                v85 = *v77;
                if (LODWORD(v85) < *(_DWORD *)v82)
                  goto LABEL_119;
              }
LABEL_132:
              v77 = v81 + 3;
              v80 += 12;
              if (v81 + 3 == a2)
                return result;
            }
            v85 = *v77;
LABEL_119:
            v86 = *((_DWORD *)v82 + 4);
            *(_QWORD *)v81 = *(_QWORD *)v82;
            v81[2] = v82[2];
            v87 = i;
            if (v82 != i)
            {
              v88 = v80;
              while (1)
              {
                v89 = (float *)((char *)i + v88);
                v90 = (_DWORD *)((char *)i + v88 - 12);
                v91 = *(float *)((char *)i + v88 - 4);
                if (v83 >= v91)
                {
                  if (v83 > v91)
                  {
                    v87 = v82;
                    goto LABEL_131;
                  }
                  if (LODWORD(v85) >= *v90)
                    break;
                }
                v82 -= 3;
                *(_QWORD *)v89 = *(_QWORD *)v90;
                v89[2] = *(float *)((char *)i + v88 - 4);
                v88 -= 12;
                if (!v88)
                {
                  v87 = i;
                  goto LABEL_131;
                }
              }
              v87 = (float *)((char *)i + v88);
            }
LABEL_131:
            *v87 = v85;
            *((_DWORD *)v87 + 1) = v86;
            v87[2] = v83;
            goto LABEL_132;
          }
          if (v79)
            return result;
          while (1)
          {
            v134 = v7;
            v7 = v77;
            v135 = v134[5];
            v136 = v134[2];
            if (v135 < v136)
              break;
            if (v135 <= v136)
            {
              v137 = *v77;
              if (*(_DWORD *)v77 < *(_DWORD *)v134)
                goto LABEL_193;
            }
LABEL_200:
            v77 = v7 + 3;
            if (v7 + 3 == a2)
              return result;
          }
          v137 = *v77;
LABEL_193:
          v138 = *((_DWORD *)v134 + 4);
          do
          {
            do
            {
              v139 = v134;
              *(_QWORD *)(v134 + 3) = *(_QWORD *)v134;
              v134[5] = v134[2];
              v134 -= 3;
              v140 = *(v139 - 1);
            }
            while (v135 < v140);
          }
          while (v135 <= v140 && LODWORD(v137) < *((_DWORD *)v139 - 3));
          *v139 = v137;
          *((_DWORD *)v139 + 1) = v138;
          v139[2] = v135;
          goto LABEL_200;
        }
        if (!a3)
        {
          if (i == a2)
            return result;
          v92 = (unint64_t)(v11 - 2) >> 1;
          v93 = v92;
          do
          {
            v94 = v93;
            if (v92 >= v93)
            {
              v95 = (2 * v93) | 1;
              v96 = &i[3 * v95];
              if (2 * v94 + 2 < v11)
              {
                v97 = i[3 * v95 + 2];
                v98 = v96[5];
                if (v97 < v98 || v97 <= v98 && *(_DWORD *)v96 < *((_DWORD *)v96 + 3))
                {
                  v96 += 3;
                  v95 = 2 * v94 + 2;
                }
              }
              v99 = v96[2];
              v100 = i[3 * v94 + 2];
              if (v99 >= v100)
              {
                v101 = (unsigned int *)&i[3 * v94];
                v102 = *v101;
                if (v99 > v100 || *(_DWORD *)v96 >= v102)
                {
                  v103 = v101[1];
                  result = *(_QWORD *)v96;
                  v101[2] = *((_DWORD *)v96 + 2);
                  *(_QWORD *)v101 = result;
                  if (v92 >= v95)
                  {
                    while (1)
                    {
                      v105 = 2 * v95;
                      v95 = (2 * v95) | 1;
                      v104 = &i[3 * v95];
                      result = v105 + 2;
                      if (result < v11)
                      {
                        v106 = i[3 * v95 + 2];
                        v107 = v104[5];
                        if (v106 < v107 || v106 <= v107 && *(_DWORD *)v104 < *((_DWORD *)v104 + 3))
                        {
                          v104 += 3;
                          v95 = result;
                        }
                      }
                      v108 = v104[2];
                      if (v108 < v100)
                        break;
                      if (v108 <= v100)
                      {
                        result = *(unsigned int *)v104;
                        if (result < v102)
                          break;
                      }
                      result = *(_QWORD *)v104;
                      v96[2] = v104[2];
                      *(_QWORD *)v96 = result;
                      v96 = v104;
                      if (v92 < v95)
                        goto LABEL_147;
                    }
                  }
                  v104 = v96;
LABEL_147:
                  *(_DWORD *)v104 = v102;
                  *((_DWORD *)v104 + 1) = v103;
                  v104[2] = v100;
                }
              }
            }
            v93 = v94 - 1;
          }
          while (v94);
          v109 = v10 / 0xCuLL;
          while (1)
          {
            v110 = 0;
            v152 = *((_DWORD *)i + 2);
            v146 = *(_QWORD *)i;
            v111 = i;
            do
            {
              v112 = v111;
              v113 = v110 + 1;
              v111 += 3 * v110 + 3;
              v114 = 2 * v110;
              v110 = (2 * v110) | 1;
              v115 = v114 + 2;
              if (v115 < v109)
              {
                v116 = v112[3 * v113 + 2];
                v117 = v111[5];
                if (v116 < v117 || v116 <= v117 && *(_DWORD *)v111 < *((_DWORD *)v111 + 3))
                {
                  v111 += 3;
                  v110 = v115;
                }
              }
              v118 = *(_QWORD *)v111;
              v112[2] = v111[2];
              *(_QWORD *)v112 = v118;
            }
            while (v110 <= (uint64_t)((unint64_t)(v109 - 2) >> 1));
            a2 -= 3;
            if (v111 == a2)
            {
              *((_DWORD *)v111 + 2) = v152;
              *(_QWORD *)v111 = v146;
            }
            else
            {
              v119 = *(_QWORD *)a2;
              v111[2] = a2[2];
              *(_QWORD *)v111 = v119;
              *((_DWORD *)a2 + 2) = v152;
              *(_QWORD *)a2 = v146;
              v120 = (char *)v111 - (char *)i + 12;
              if (v120 >= 13)
              {
                v121 = v120 / 0xCuLL - 2;
                v122 = v121 >> 1;
                v123 = &i[3 * (v121 >> 1)];
                v124 = v123[2];
                v125 = v111[2];
                if (v124 < v125)
                {
                  v126 = *(_DWORD *)v111;
LABEL_174:
                  v127 = *((_DWORD *)v111 + 1);
                  v128 = *(_QWORD *)v123;
                  result = *((unsigned int *)v123 + 2);
                  *((_DWORD *)v111 + 2) = result;
                  *(_QWORD *)v111 = v128;
                  if (v121 >= 2)
                  {
                    while (1)
                    {
                      v130 = v122 - 1;
                      v122 = (v122 - 1) >> 1;
                      v129 = &i[3 * v122];
                      v131 = v129[2];
                      if (v131 >= v125 && (v131 > v125 || *(_DWORD *)v129 >= v126))
                        break;
                      v132 = *(_QWORD *)v129;
                      result = *((unsigned int *)v129 + 2);
                      *((_DWORD *)v123 + 2) = result;
                      *(_QWORD *)v123 = v132;
                      v123 = &i[3 * v122];
                      if (v130 <= 1)
                        goto LABEL_180;
                    }
                  }
                  v129 = v123;
LABEL_180:
                  *(_DWORD *)v129 = v126;
                  *((_DWORD *)v129 + 1) = v127;
                  v129[2] = v125;
                  goto LABEL_181;
                }
                if (v124 <= v125)
                {
                  v126 = *(_DWORD *)v111;
                  if (*(_DWORD *)v123 < *(_DWORD *)v111)
                    goto LABEL_174;
                }
              }
            }
LABEL_181:
            if (v109-- <= 2)
              return result;
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &i[3 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 < 0x601)
        {
        }
        else
        {
          v14 = 3 * v12;
          v15 = &v7[3 * v12 - 3];
          v16 = &v7[v14 + 3];
          v147 = *((_DWORD *)v7 + 2);
          v141 = *(_QWORD *)v7;
          v17 = *((_DWORD *)v13 + 2);
          *(_QWORD *)v7 = *(_QWORD *)v13;
          *((_DWORD *)v7 + 2) = v17;
          *((_DWORD *)v13 + 2) = v147;
          *(_QWORD *)v13 = v141;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v20 = *(v7 - 1);
          v19 = v7[2];
          v18 = *v7;
          if (v20 < v19 || v20 <= v19 && *((_DWORD *)v7 - 3) < LODWORD(v18))
            goto LABEL_14;
          v41 = *(a2 - 1);
          if (v19 >= v41 && (v19 > v41 || LODWORD(v18) >= *(_DWORD *)v8))
          {
            for (i = v7 + 3; i < a2; i += 3)
            {
              v43 = i[2];
              if (v19 < v43 || v19 <= v43 && LODWORD(v18) < *(_DWORD *)i)
                break;
            }
          }
          else
          {
            v42 = v7[5];
            if (v19 >= v42)
            {
              v44 = v7 + 8;
              do
              {
                if (v19 <= v42 && LODWORD(v18) < *((_DWORD *)v44 - 5))
                  break;
                v45 = *v44;
                v44 += 3;
                v42 = v45;
              }
              while (v19 >= v45);
              i = v44 - 5;
            }
            else
            {
              i = v7 + 3;
            }
          }
          v46 = *((_DWORD *)v7 + 1);
          v47 = a2;
          if (i < a2)
          {
            for (j = a2 - 4; v19 < v41 || v19 <= v41 && LODWORD(v18) < *((_DWORD *)j + 1); j -= 3)
            {
              v49 = *j;
              v41 = v49;
            }
            v47 = j + 1;
          }
          while (i < v47)
          {
            v149 = *((_DWORD *)i + 2);
            v143 = *(_QWORD *)i;
            v50 = *(_QWORD *)v47;
            i[2] = v47[2];
            *(_QWORD *)i = v50;
            *((_DWORD *)v47 + 2) = v149;
            *(_QWORD *)v47 = v143;
            v51 = i[5];
            if (v19 >= v51)
            {
              v52 = i + 8;
              do
              {
                if (v19 <= v51 && LODWORD(v18) < *((_DWORD *)v52 - 5))
                  break;
                v53 = *v52;
                v52 += 3;
                v51 = v53;
              }
              while (v19 >= v53);
              i = v52 - 5;
            }
            else
            {
              i += 3;
            }
            do
            {
              do
              {
                v47 -= 3;
                v54 = v47[2];
              }
              while (v19 < v54);
            }
            while (v19 <= v54 && LODWORD(v18) < *(_DWORD *)v47);
          }
          if (i - 3 != v7)
          {
            v55 = *(_QWORD *)(i - 3);
            v7[2] = *(i - 1);
            *(_QWORD *)v7 = v55;
          }
          a4 = 0;
          *(i - 3) = v18;
          *((_DWORD *)i - 2) = v46;
          *(i - 1) = v19;
          continue;
        }
        v18 = *v7;
        v19 = v7[2];
LABEL_14:
        v21 = 0;
        v22 = *((_DWORD *)v7 + 1);
        while (1)
        {
          v23 = v7[v21 + 5];
          if (v23 >= v19 && (v23 > v19 || LODWORD(v7[v21 + 3]) >= LODWORD(v18)))
            break;
          v21 += 3;
        }
        v24 = (unint64_t)&v7[v21 + 3];
        if (v21 * 4)
        {
          v25 = *(a2 - 1);
          v26 = a2 - 4;
          v27 = (unint64_t)(a2 - 3);
          if (v25 >= v19)
          {
            do
            {
              if (v25 <= v19 && *((_DWORD *)v26 + 1) < LODWORD(v18))
                break;
              v28 = *v26;
              v26 -= 3;
              v25 = v28;
            }
            while (v28 >= v19);
LABEL_24:
            v27 = (unint64_t)(v26 + 1);
          }
        }
        else
        {
          v27 = (unint64_t)a2;
          if (v24 < (unint64_t)a2)
          {
            v29 = *(a2 - 1);
            v27 = (unint64_t)(a2 - 3);
            if (v29 >= v19)
            {
              v26 = a2 - 4;
              v27 = (unint64_t)(a2 - 3);
              while (1)
              {
                v38 = v26 + 1;
                if (v29 <= v19)
                {
                  if (*v38 < LODWORD(v18) || v24 >= (unint64_t)v38)
                    goto LABEL_24;
                }
                else if (v24 >= (unint64_t)v38)
                {
                  break;
                }
                v27 -= 12;
                v40 = *v26;
                v26 -= 3;
                v29 = v40;
                if (v40 < v19)
                  goto LABEL_24;
              }
            }
          }
        }
        i = (float *)v24;
        if (v24 < v27)
        {
          v30 = v27;
          do
          {
            v148 = *((_DWORD *)i + 2);
            v142 = *(_QWORD *)i;
            v31 = *(_QWORD *)v30;
            i[2] = *(float *)(v30 + 8);
            *(_QWORD *)i = v31;
            *(_DWORD *)(v30 + 8) = v148;
            *(_QWORD *)v30 = v142;
            do
            {
              do
              {
                i += 3;
                v32 = i[2];
              }
              while (v32 < v19);
            }
            while (v32 <= v19 && *(_DWORD *)i < LODWORD(v18));
            v33 = *(float *)(v30 - 4);
            if (v33 >= v19)
            {
              v34 = v30 - 16;
              do
              {
                if (v33 <= v19 && *(_DWORD *)(v34 + 4) < LODWORD(v18))
                  break;
                v35 = *(float *)v34;
                v34 -= 12;
                v33 = v35;
              }
              while (v35 >= v19);
              v30 = v34 + 4;
            }
            else
            {
              v30 -= 12;
            }
          }
          while ((unint64_t)i < v30);
        }
        if (i - 3 != v7)
        {
          v36 = *(_QWORD *)(i - 3);
          v7[2] = *(i - 1);
          *(_QWORD *)v7 = v36;
        }
        *(i - 3) = v18;
        *((_DWORD *)i - 2) = v22;
        *(i - 1) = v19;
        if (v24 < v27)
        {
LABEL_46:
          a4 = 0;
          continue;
        }
        if (!(_DWORD)result)
        {
          if (v37)
            continue;
          goto LABEL_46;
        }
        a2 = i - 3;
        if (!v37)
          goto LABEL_2;
        return result;
    }
  }
}

float *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::`anonymous namespace'::PointProjection *>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  int v6;
  uint64_t v7;
  int v8;
  float v9;
  int v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  float v21;
  float v22;
  int v23;

  v3 = a2[2];
  v4 = result[2];
  if (v3 >= v4 && (v3 > v4 || *(_DWORD *)a2 >= *(_DWORD *)result))
  {
    v9 = a3[2];
    if (v9 < v3 || v9 <= v3 && *(_DWORD *)a3 < *(_DWORD *)a2)
    {
      v10 = *((_DWORD *)a2 + 2);
      v11 = *(_QWORD *)a2;
      v12 = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v12;
      *(_QWORD *)a3 = v11;
      *((_DWORD *)a3 + 2) = v10;
      v13 = a2[2];
      v14 = result[2];
      if (v13 < v14 || v13 <= v14 && *(_DWORD *)a2 < *(_DWORD *)result)
      {
        v15 = *((_DWORD *)result + 2);
        v16 = *(_QWORD *)result;
        v17 = *((_DWORD *)a2 + 2);
        *(_QWORD *)result = *(_QWORD *)a2;
        *((_DWORD *)result + 2) = v17;
        *(_QWORD *)a2 = v16;
        *((_DWORD *)a2 + 2) = v15;
      }
    }
  }
  else
  {
    v5 = a3[2];
    if (v5 < v3 || v5 <= v3 && *(_DWORD *)a3 < *(_DWORD *)a2)
    {
      v6 = *((_DWORD *)result + 2);
      v7 = *(_QWORD *)result;
      v8 = *((_DWORD *)a3 + 2);
      *(_QWORD *)result = *(_QWORD *)a3;
      *((_DWORD *)result + 2) = v8;
LABEL_17:
      *(_QWORD *)a3 = v7;
      *((_DWORD *)a3 + 2) = v6;
      return result;
    }
    v18 = *((_DWORD *)result + 2);
    v19 = *(_QWORD *)result;
    v20 = *((_DWORD *)a2 + 2);
    *(_QWORD *)result = *(_QWORD *)a2;
    *((_DWORD *)result + 2) = v20;
    *(_QWORD *)a2 = v19;
    *((_DWORD *)a2 + 2) = v18;
    v21 = a3[2];
    v22 = a2[2];
    if (v21 < v22 || v21 <= v22 && *(_DWORD *)a3 < *(_DWORD *)a2)
    {
      v6 = *((_DWORD *)a2 + 2);
      v7 = *(_QWORD *)a2;
      v23 = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v23;
      goto LABEL_17;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::`anonymous namespace'::PointProjection *>(float *a1, float *a2)
{
  unint64_t v4;
  _BOOL8 result;
  float *v6;
  float v7;
  float v8;
  int v9;
  uint64_t v10;
  int v11;
  float *v12;
  float *v13;
  uint64_t v14;
  int v15;
  float v16;
  float v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned int *v23;
  float v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  float *v28;
  float v29;
  float v30;
  int v31;
  uint64_t v32;
  int v33;
  float v34;
  float v35;
  int v36;
  uint64_t v37;
  float v38;
  float v39;
  int v40;
  uint64_t v41;
  float v42;
  float v43;
  int v44;
  uint64_t v45;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 3;
      v7 = *(a2 - 1);
      v8 = a1[2];
      if (v7 < v8 || v7 <= v8 && *(_DWORD *)v6 < *(_DWORD *)a1)
      {
        v9 = *((_DWORD *)a1 + 2);
        v10 = *(_QWORD *)a1;
        v11 = *((_DWORD *)a2 - 1);
        *(_QWORD *)a1 = *(_QWORD *)v6;
        *((_DWORD *)a1 + 2) = v11;
        *(_QWORD *)v6 = v10;
        *((_DWORD *)a2 - 1) = v9;
      }
      return result;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      v25 = (uint64_t *)(a1 + 3);
      v26 = (uint64_t *)(a1 + 6);
      v27 = (uint64_t *)(a1 + 9);
      v28 = a2 - 3;
      v29 = *(a2 - 1);
      v30 = a1[11];
      if (v29 < v30 || v29 <= v30 && *(_DWORD *)v28 < *(_DWORD *)v27)
      {
        v31 = *((_DWORD *)a1 + 11);
        v32 = *v27;
        v33 = *((_DWORD *)a2 - 1);
        *v27 = *(_QWORD *)v28;
        *((_DWORD *)a1 + 11) = v33;
        *(_QWORD *)v28 = v32;
        *((_DWORD *)a2 - 1) = v31;
        v34 = a1[11];
        v35 = a1[8];
        if (v34 < v35 || v34 <= v35 && *(_DWORD *)v27 < *(_DWORD *)v26)
        {
          v36 = *((_DWORD *)a1 + 8);
          v37 = *v26;
          *v26 = *v27;
          a1[8] = a1[11];
          *v27 = v37;
          *((_DWORD *)a1 + 11) = v36;
          v38 = a1[8];
          v39 = a1[5];
          if (v38 < v39 || v38 <= v39 && *(_DWORD *)v26 < *(_DWORD *)v25)
          {
            v40 = *((_DWORD *)a1 + 5);
            v41 = *v25;
            *v25 = *v26;
            a1[5] = a1[8];
            *v26 = v41;
            *((_DWORD *)a1 + 8) = v40;
            v42 = a1[5];
            v43 = a1[2];
            if (v42 < v43 || v42 <= v43 && *((_DWORD *)a1 + 3) < *(_DWORD *)a1)
            {
              v44 = *((_DWORD *)a1 + 2);
              v45 = *(_QWORD *)a1;
              *(_QWORD *)a1 = *v25;
              a1[2] = a1[5];
              *v25 = v45;
              *((_DWORD *)a1 + 5) = v44;
            }
          }
        }
      }
      return 1;
    default:
      v12 = a1 + 6;
      v13 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = v13[2];
    v17 = v12[2];
    if (v16 < v17)
      break;
    if (v16 <= v17)
    {
      v18 = *(_DWORD *)v13;
      if (*(_DWORD *)v13 < *(_DWORD *)v12)
        goto LABEL_10;
    }
LABEL_20:
    v12 = v13;
    v14 += 12;
    v13 += 3;
    if (v13 == a2)
      return 1;
  }
  v18 = *(_DWORD *)v13;
LABEL_10:
  v19 = *((_DWORD *)v13 + 1);
  *(_QWORD *)v13 = *(_QWORD *)v12;
  v13[2] = v12[2];
  v20 = (uint64_t)a1;
  if (v12 != a1)
  {
    v21 = v14;
    while (1)
    {
      v22 = (char *)a1 + v21;
      v23 = (unsigned int *)((char *)a1 + v21 + 12);
      v24 = *(float *)((char *)a1 + v21 + 20);
      if (v16 >= v24)
      {
        if (v16 > v24)
        {
          v20 = (uint64_t)a1 + v21 + 24;
          goto LABEL_19;
        }
        if (v18 >= *v23)
          break;
      }
      v12 -= 3;
      *((_QWORD *)v22 + 3) = *(_QWORD *)v23;
      *((float *)v22 + 8) = *(float *)((char *)a1 + v21 + 20);
      v21 -= 12;
      if (v21 == -24)
      {
        v20 = (uint64_t)a1;
        goto LABEL_19;
      }
    }
    v20 = (uint64_t)v12;
  }
LABEL_19:
  *(_DWORD *)v20 = v18;
  *(_DWORD *)(v20 + 4) = v19;
  *(float *)(v20 + 8) = v16;
  if (++v15 != 8)
    goto LABEL_20;
  return v13 + 3 == a2;
}

float *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::`anonymous namespace'::PointProjection *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  float *result;
  float v9;
  float v10;
  int v11;
  uint64_t v12;
  int v13;
  float v14;
  float v15;
  int v16;
  uint64_t v17;
  int v18;
  float v19;
  float v20;
  int v21;
  uint64_t v22;
  int v23;

  v9 = *(float *)(a4 + 8);
  v10 = a3[2];
  if (v9 < v10 || v9 <= v10 && *(_DWORD *)a4 < *(_DWORD *)a3)
  {
    v11 = *((_DWORD *)a3 + 2);
    v12 = *(_QWORD *)a3;
    v13 = *(_DWORD *)(a4 + 8);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *((_DWORD *)a3 + 2) = v13;
    *(_QWORD *)a4 = v12;
    *(_DWORD *)(a4 + 8) = v11;
    v14 = a3[2];
    v15 = a2[2];
    if (v14 < v15 || v14 <= v15 && *(_DWORD *)a3 < *(_DWORD *)a2)
    {
      v16 = *((_DWORD *)a2 + 2);
      v17 = *(_QWORD *)a2;
      v18 = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v18;
      *(_QWORD *)a3 = v17;
      *((_DWORD *)a3 + 2) = v16;
      v19 = a2[2];
      v20 = a1[2];
      if (v19 < v20 || v19 <= v20 && *(_DWORD *)a2 < *(_DWORD *)a1)
      {
        v21 = *((_DWORD *)a1 + 2);
        v22 = *(_QWORD *)a1;
        v23 = *((_DWORD *)a2 + 2);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_DWORD *)a1 + 2) = v23;
        *(_QWORD *)a2 = v22;
        *((_DWORD *)a2 + 2) = v21;
      }
    }
  }
  return result;
}

uint64_t re::internal::addAndCopyVertexAttributes(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  re::internal::GeomAttributeContainer *v12;
  re::internal::GeomAttributeManager *v13;
  uint64_t v14;
  re::GeomAttribute *v15;
  uint64_t result;
  _QWORD v17[2];
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v17[1] = 0;
  v18 = 0;
  v17[0] = 0;
  v19 = 0;
  v6 = *a3;
  re::DynamicArray<float>::resize((uint64_t)v17, v6);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = v18;
    v9 = v20;
    do
    {
      if (v8 == v7)
      {
        v21 = 0;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v22 = 136315906;
        v23 = "operator[]";
        v24 = 1024;
        v25 = 789;
        v26 = 2048;
        v27 = v8;
        v28 = 2048;
        v29 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(v9 + 4 * v7) = v7;
      ++v7;
    }
    while (v6 != v7);
  }
  v10 = *(_DWORD *)(a1 + 184);
  if (v10)
  {
    v11 = 0;
    v12 = (re::internal::GeomAttributeContainer *)(a1 + 160);
    v13 = (re::internal::GeomAttributeManager *)(a3 + 12);
    do
    {
      v14 = re::internal::GeomAttributeContainer::attributeByIndex(v12, v11);
      v15 = re::internal::GeomAttributeManager::addAttribute(v13, *(char **)(v14 + 8), 1, *(unsigned __int8 *)(v14 + 17));
      if ((_DWORD)v6 && v15)
        (*(void (**)(uint64_t, re::GeomAttribute *, unint64_t, _QWORD, uint64_t))(*(_QWORD *)v14 + 40))(v14, v15, v6, *a2, v20);
      ++v11;
    }
    while (v10 != v11);
  }
  result = v17[0];
  if (v17[0])
  {
    if (v20)
      return (*(uint64_t (**)(void))(*(_QWORD *)v17[0] + 40))();
  }
  return result;
}

uint64_t re::internal::addAndCopyFaceAttributes(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  re::internal::GeomAttributeContainer *v12;
  re::internal::GeomAttributeManager *v13;
  uint64_t v14;
  re::GeomAttribute *v15;
  uint64_t result;
  _QWORD v17[2];
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v17[1] = 0;
  v18 = 0;
  v17[0] = 0;
  v19 = 0;
  v6 = *(_QWORD *)(a3 + 24);
  re::DynamicArray<float>::resize((uint64_t)v17, v6);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = v18;
    v9 = v20;
    do
    {
      if (v8 == v7)
      {
        v21 = 0;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v22 = 136315906;
        v23 = "operator[]";
        v24 = 1024;
        v25 = 789;
        v26 = 2048;
        v27 = v8;
        v28 = 2048;
        v29 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(v9 + 4 * v7) = v7;
      ++v7;
    }
    while (v6 != v7);
  }
  v10 = *(_DWORD *)(a1 + 296);
  if (v10)
  {
    v11 = 0;
    v12 = (re::internal::GeomAttributeContainer *)(a1 + 272);
    v13 = (re::internal::GeomAttributeManager *)(a3 + 48);
    do
    {
      v14 = re::internal::GeomAttributeContainer::attributeByIndex(v12, v11);
      v15 = re::internal::GeomAttributeManager::addAttribute(v13, *(char **)(v14 + 8), 2, *(unsigned __int8 *)(v14 + 17));
      if ((_DWORD)v6 && v15)
        (*(void (**)(uint64_t, re::GeomAttribute *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v14 + 40))(v14, v15, v6, *a2, v20);
      ++v11;
    }
    while (v10 != v11);
  }
  result = v17[0];
  if (v17[0])
  {
    if (v20)
      return (*(uint64_t (**)(void))(*(_QWORD *)v17[0] + 40))();
  }
  return result;
}

uint64_t re::internal::addAndCopyFaceVaryingAttributes(uint64_t result, _QWORD *a2, _anonymous_namespace_ *a3)
{
  unint64_t v3;
  unsigned int v5;
  unsigned int v6;
  re::internal *v7;
  unint64_t v8;
  const re::GeomAttribute *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _anonymous_namespace_ *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  re::internal::GeomAttributeContainer *v40;
  unsigned int v42;
  re::internal *v43;
  __int128 v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  _QWORD v53[3];
  int v54;
  uint64_t v55;
  _QWORD v56[2];
  unint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  _BYTE v66[24];
  __int16 v67;
  unint64_t v68;
  uint64_t v69;
  _BYTE v70[12];
  __int16 v71;
  int v72;
  __int16 v73;
  re::internal *v74;
  __int16 v75;
  unint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v39 = *(_DWORD *)(result + 408);
  if (!v39)
    return result;
  v5 = 0;
  v40 = (re::internal::GeomAttributeContainer *)(result + 384);
  v6 = *((_DWORD *)a3 + 6);
  do
  {
    v42 = v5;
    v7 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex(v40, v5);
    v8 = (*(uint64_t (**)(re::internal *))(*(_QWORD *)v7 + 16))(v7);
    v43 = v7;
    v10 = re::internal::accessFaceVaryingAttributeSubmesh(v7, v9);
    v59 = 0;
    v56[1] = 0;
    v57 = 0;
    v56[0] = 0;
    v11 = v8;
    v58 = 0;
    re::DynamicArray<unsigned int>::resize(v56, v8, &re::kInvalidMeshIndex);
    v55 = 0;
    v52 = 0;
    memset(v53, 0, sizeof(v53));
    v54 = 0;
    v49 = 0;
    v50 = 0;
    v48 = 0;
    v51 = 0;
    LODWORD(v60) = 0;
    v13 = 0;
    if (!v6)
      goto LABEL_50;
    v14 = 0;
    v7 = (re::internal *)(v10 + 144);
    do
    {
      v15 = v14;
      v16 = a2[1];
      if (v16 <= v14)
        goto LABEL_83;
      v17 = *(unsigned int *)(*a2 + 4 * v14);
      LODWORD(v77) = v17;
      v18 = *(unsigned __int8 *)(v10 + 140);
      if (v18 == 2)
      {
        v19 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v10 + 144), (unsigned int *)&v77);
        if (v19 == -1)
          goto LABEL_49;
        v20 = (_DWORD *)(*(_QWORD *)(v10 + 152) + 8 * v19 + 4);
LABEL_15:
        if (*v20 == -1)
          goto LABEL_49;
        v15 = v60;
        v16 = a2[1];
        goto LABEL_17;
      }
      if (v18 == 1)
      {
        if (*(_QWORD *)(v10 + 160) <= v17)
          goto LABEL_49;
        v20 = (_DWORD *)(*(_QWORD *)(v10 + 176) + 4 * v17);
        goto LABEL_15;
      }
      if (*(_BYTE *)(v10 + 140))
        goto LABEL_89;
      if (*(_DWORD *)v7 <= v17)
        goto LABEL_49;
LABEL_17:
      if (v16 <= v15)
        goto LABEL_85;
      v21 = *(unsigned int *)(*a2 + 4 * v15);
      LODWORD(v77) = v21;
      v22 = *(unsigned __int8 *)(v10 + 140);
      if (v22 == 2)
      {
        v23 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v10 + 144), (unsigned int *)&v77);
        if (v23 == -1)
          goto LABEL_28;
        v8 = *(unsigned int *)(*(_QWORD *)(v10 + 152) + 8 * v23 + 4);
      }
      else
      {
        if (v22 != 1)
        {
          if (*(_BYTE *)(v10 + 140))
            goto LABEL_90;
          if (*(unsigned int *)v7 <= v21)
            v8 = 0xFFFFFFFFLL;
          else
            v8 = v21;
          goto LABEL_29;
        }
        if (*(_QWORD *)(v10 + 160) <= v21)
        {
LABEL_28:
          v8 = 0xFFFFFFFFLL;
          goto LABEL_29;
        }
        v8 = *(unsigned int *)(*(_QWORD *)(v10 + 176) + 4 * v21);
      }
LABEL_29:
      *(_QWORD *)&v44 = -1;
      *((_QWORD *)&v44 + 1) = -1;
      v3 = *(_QWORD *)(v10 + 24);
      if (v3 <= v8)
        goto LABEL_86;
      v24 = 0;
      v61 = *(_OWORD *)(*(_QWORD *)(v10 + 40) + 16 * v8);
      v25 = 3;
      if (HIDWORD(v61) != -1)
        v25 = 4;
      v8 = v57;
      v26 = v59;
      do
      {
        v3 = *((unsigned int *)&v61 + v24);
        if (v8 <= v3)
        {
          *(_QWORD *)v70 = 0;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v77 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v65 = 136315906;
          *(_QWORD *)v66 = "operator[]";
          *(_WORD *)&v66[8] = 1024;
          *(_DWORD *)&v66[10] = 789;
          *(_WORD *)&v66[14] = 2048;
          *(_QWORD *)&v66[16] = v3;
          v67 = 2048;
          v68 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_83:
          re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v15, v16);
          _os_crash();
          __break(1u);
          goto LABEL_84;
        }
        v27 = *(_DWORD *)(v26 + 4 * v3);
        if (v27 == -1)
        {
          *(_DWORD *)(v26 + 4 * v3) = v13;
          v27 = v13;
          v13 = (v13 + 1);
        }
        *((_DWORD *)&v44 + v24++) = v27;
      }
      while (v25 != v24);
      v28 = (_anonymous_namespace_ *)re::DynamicArray<int>::add(v53, &v60);
      v29 = v50;
      if (v50 >= v49)
      {
        v8 = v50 + 1;
        if (v49 < v50 + 1)
        {
          if (v48)
          {
            v30 = 8;
            if (v49)
              v30 = 2 * v49;
            if (v30 <= v8)
              v31 = v50 + 1;
            else
              v31 = v30;
            re::DynamicArray<re::BlendNode>::setCapacity(&v48, v31);
          }
          else
          {
            re::DynamicArray<re::BlendNode>::setCapacity(&v48, v8);
            ++v51;
          }
        }
        v29 = v50;
      }
      *(_OWORD *)(v52 + 16 * v29) = v44;
      ++v50;
      ++v51;
LABEL_49:
      v14 = v60 + 1;
      LODWORD(v60) = v14;
    }
    while (v14 < v6);
LABEL_50:
    v65 = v13;
    re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v66[4], (uint64_t *)&v48);
    if (!*(_QWORD *)&v66[12])
      re::DynamicArray<re::BlendNode>::setCapacity(&v66[4], 1uLL);
    v32 = re::internal::GeomBaseMesh::addFaceVaryingAttribute(a3, *((const char **)v43 + 1), *((unsigned __int8 *)v43 + 17), (uint64_t)&v65, (uint64_t)v53);
    if (v32 && (_DWORD)v13)
    {
      v38 = v32;
      v64 = 0;
      v62 = 0;
      v61 = 0uLL;
      v63 = 0;
      v47 = 0;
      v45 = 0;
      v44 = 0uLL;
      v46 = 0;
      re::DynamicArray<float>::resize((uint64_t)&v61, v13);
      re::DynamicArray<float>::resize((uint64_t)&v44, v13);
      v33 = v64;
      v34 = v47;
      if ((_DWORD)v11)
      {
        v35 = 0;
        v36 = 0;
        v8 = v57;
        v37 = v59;
        v10 = v62;
        v3 = v45;
        while (v8 != v35)
        {
          if (*(_DWORD *)(v37 + 4 * v35) != -1)
          {
            v7 = (re::internal *)v36;
            if (v10 <= v36)
              goto LABEL_87;
            *(_DWORD *)(v33 + 4 * v36) = v35;
            if (v3 <= v36)
              goto LABEL_88;
            *(_DWORD *)(v34 + 4 * v36++) = *(_DWORD *)(v37 + 4 * v35);
          }
          if (v11 == ++v35)
            goto LABEL_62;
        }
LABEL_84:
        v60 = 0;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v77 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v70 = 136315906;
        *(_QWORD *)&v70[4] = "operator[]";
        v71 = 1024;
        v72 = 789;
        v73 = 2048;
        v74 = (re::internal *)v8;
        v75 = 2048;
        v76 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_85:
        re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v15, v16);
        _os_crash();
        __break(1u);
LABEL_86:
        *(_QWORD *)&v61 = 0;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v77 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v65 = 136315906;
        *(_QWORD *)v66 = "operator[]";
        *(_WORD *)&v66[8] = 1024;
        *(_DWORD *)&v66[10] = 797;
        *(_WORD *)&v66[14] = 2048;
        *(_QWORD *)&v66[16] = v8;
        v67 = 2048;
        v68 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_87:
        v60 = 0;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v77 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v70 = 136315906;
        *(_QWORD *)&v70[4] = "operator[]";
        v71 = 1024;
        v72 = 789;
        v73 = 2048;
        v74 = v7;
        v75 = 2048;
        v76 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_88:
        v60 = 0;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v77 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v70 = 136315906;
        *(_QWORD *)&v70[4] = "operator[]";
        v71 = 1024;
        v72 = 789;
        v73 = 2048;
        v74 = v7;
        v75 = 2048;
        v76 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_89:
        re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
        _os_crash();
        __break(1u);
LABEL_90:
        re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
        _os_crash();
        __break(1u);
      }
LABEL_62:
      (*(void (**)(re::internal *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v43 + 40))(v43, v38, v13, v33, v34);
      if ((_QWORD)v44 && v47)
        (*(void (**)(void))(*(_QWORD *)v44 + 40))();
      if ((_QWORD)v61 && v64)
        (*(void (**)(void))(*(_QWORD *)v61 + 40))();
    }
    if (*(_QWORD *)&v66[4] && v69)
      (*(void (**)(void))(**(_QWORD **)&v66[4] + 40))();
    if (v48 && v52)
      (*(void (**)(void))(*v48 + 40))();
    if (v53[0] && v55)
      (*(void (**)(void))(*(_QWORD *)v53[0] + 40))();
    result = v56[0];
    if (v56[0])
    {
      if (v59)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v56[0] + 40))();
    }
    v5 = v42 + 1;
  }
  while (v42 + 1 != v39);
  return result;
}

uint64_t re::internal::addAndCopyAttributeValues(uint64_t a1, _anonymous_namespace_ *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  re::internal::GeomAttributeContainer *v11;
  int v12;
  uint64_t v13;
  re::internal::GeomAttributeManager *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  _OWORD v32[5];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)a3 == 3)
  {
    v22 = 0;
    v19[1] = 0;
    v20 = 0;
    v19[0] = 0;
    v21 = 0;
    re::DynamicArray<float>::resize((uint64_t)v19, *(unsigned int *)(a1 + 24));
    v5 = *(unsigned int *)(a1 + 24);
    v6 = v20;
    if (*(_DWORD *)(a1 + 24))
    {
      v7 = 0;
      v8 = v22;
      do
      {
        if (v6 == v7)
        {
          v23 = 0;
          memset(v32, 0, sizeof(v32));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v24 = 136315906;
          v25 = "operator[]";
          v26 = 1024;
          v27 = 789;
          v28 = 2048;
          v29 = v6;
          v30 = 2048;
          v31 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_DWORD *)(v8 + 4 * v7) = v7;
        ++v7;
      }
      while (v5 != v7);
    }
    *(_QWORD *)&v32[0] = v22;
    *((_QWORD *)&v32[0] + 1) = v6;
    re::internal::addAndCopyFaceVaryingAttributes(a1, v32, a2);
    result = v19[0];
    if (v19[0])
    {
      if (v22)
        return (*(uint64_t (**)(void))(*(_QWORD *)v19[0] + 40))();
    }
  }
  else
  {
    v10 = a3;
    v11 = (re::internal::GeomAttributeContainer *)(a1 + 48);
    result = re::internal::GeomAttributeManager::attributeCount(a1 + 48, a3);
    if ((_DWORD)result)
    {
      v12 = result;
      v13 = 0;
      v14 = (_anonymous_namespace_ *)((char *)a2 + 48);
      do
      {
        v15 = re::internal::GeomAttributeManager::attributeByIndex(v11, v13, v10);
        result = (uint64_t)re::internal::GeomAttributeManager::addAttribute(v14, *(char **)(v15 + 8), v10, *(unsigned __int8 *)(v15 + 17));
        if (result)
        {
          v16 = result;
          v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 72))(v16, v17);
          v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 40))(v15, v16, v18, 0, 0);
        }
        v13 = (v13 + 1);
      }
      while (v12 != (_DWORD)v13);
    }
  }
  return result;
}

void re::internal::computeVertexCacheCoherentFaceOrdering(re::internal *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  int *v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int64x2_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64x2_t v22;
  int64x2_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  uint64_t v53;
  float v54;
  float v55;
  unint64_t v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int *v63;
  unsigned int *v64;
  float v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  unint64_t v70;
  float v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  _QWORD v75[2];
  unint64_t v76;
  int v77;
  uint64_t v78;
  _QWORD v79[2];
  _DWORD *v80;
  int v81;
  unint64_t v82;
  _QWORD v83[2];
  unint64_t v84;
  int v85;
  uint64_t v86;
  _QWORD v87[2];
  _DWORD *v88;
  int v89;
  uint64_t v90;
  _QWORD v91[2];
  _DWORD *v92;
  int v93;
  uint64_t v94;
  _QWORD v95[2];
  _DWORD *v96;
  int v97;
  uint64_t v98;
  _QWORD v99[2];
  _DWORD *v100;
  int v101;
  uint64_t v102;
  _QWORD v103[2];
  _DWORD *v104;
  int v105;
  uint64_t v106;
  char v107;
  _BYTE v108[16];
  uint64_t v109;
  __int128 v110;
  _BYTE v111[8];
  _QWORD *v112;
  _QWORD v113[108];
  _BYTE *v114;
  unsigned int *v115;
  _BYTE v116[8];
  _QWORD v117[34];
  unsigned __int8 v118;
  uint64_t v119;
  int v120;
  const char *v121;
  __int16 v122;
  int v123;
  __int16 v124;
  unint64_t v125;
  __int16 v126;
  unint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;

  v8 = (unint64_t)&v120;
  v9 = (unint64_t)&v110;
  v133 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v108, 4514, *((unsigned int *)this + 4));
  v107 = -1;
  v10 = *((unsigned int *)this + 10);
  v11 = *((unsigned int *)this + 4);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  v106 = 0;
  v103[1] = 0;
  v104 = 0;
  v102 = 0;
  v103[0] = 0;
  v105 = 0;
  v99[1] = 0;
  v100 = 0;
  v98 = 0;
  v99[0] = 0;
  v101 = 0;
  v95[1] = 0;
  v96 = 0;
  v95[0] = 0;
  v97 = 0;
  re::computeVertexFaceConnectivity((unint64_t)this, (uint64_t)v103, (unint64_t)v99);
  re::DynamicArray<float>::resize((uint64_t)v95, v11);
  v73 = a2;
  re::DynamicArray<unsigned int>::resize((_QWORD *)a2, v10, &re::kInvalidMeshIndex);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = (unint64_t)v96;
    v15 = v98;
    v3 = (unint64_t)v100;
    v16 = v102;
    while (1)
    {
      if ((_DWORD *)v14 == v12)
        goto LABEL_150;
      *(_DWORD *)(v15 + 4 * (_QWORD)v12) = v13;
      if ((_DWORD *)v3 == v12)
        break;
      v13 = *(_DWORD *)(v16 + 4 * (_QWORD)v12);
      v12 = (_DWORD *)((char *)v12 + 1);
      if ((_DWORD *)v11 == v12)
        goto LABEL_6;
    }
LABEL_151:
    v91[0] = 0;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)(v9 + 80) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v128) = 136315906;
    *(_QWORD *)(v8 + 52) = "operator[]";
    WORD6(v128) = 1024;
    *(_DWORD *)(v8 + 62) = 789;
    WORD1(v129) = 2048;
    *(_QWORD *)(v8 + 68) = v3;
    WORD6(v129) = 2048;
    *(_QWORD *)(v8 + 78) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_152:
    v109 = 0;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v128 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v120 = 136315906;
    v121 = "operator[]";
    v122 = 1024;
    v123 = 789;
    v124 = 2048;
    v125 = v14;
    v126 = 2048;
    v127 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_153;
  }
LABEL_6:
  v94 = 0;
  v91[1] = 0;
  v92 = 0;
  v90 = 0;
  v91[0] = 0;
  v93 = 0;
  v87[1] = 0;
  v88 = 0;
  v86 = 0;
  v87[0] = 0;
  v89 = 0;
  v83[1] = 0;
  v84 = 0;
  v82 = 0;
  v83[0] = 0;
  v85 = 0;
  v79[1] = 0;
  v80 = 0;
  v78 = 0;
  v79[0] = 0;
  v81 = 0;
  v75[1] = 0;
  v76 = 0;
  v75[0] = 0;
  v17 = 8;
  v77 = 0;
  do
  {
    v18 = &v111[v17];
    *v18 = 0;
    v18[1] = 0;
    v17 += 24;
  }
  while (v17 != 896);
  v114 = v111;
  v115 = (unsigned int *)v113;
  v112 = v113;
  v113[2] = v111;
  v19 = (int64x2_t)xmmword_2260E7EE0;
  v20 = v117;
  v21 = 0x1FFFFFFFFFFFFF94;
  v22 = (uint64x2_t)vdupq_n_s64(0x23uLL);
  v23 = vdupq_n_s64(2uLL);
  do
  {
    if ((vmovn_s64((int64x2_t)vcgtq_u64(v22, (uint64x2_t)v19)).u8[0] & 1) != 0)
      *(v20 - 1) = &v116[v21 * 8 + 8];
    if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x23uLL), *(uint64x2_t *)&v19)).i32[1] & 1) != 0)
      *v20 = &v117[v21 + 3];
    v19 = vaddq_s64(v19, v23);
    v20 += 2;
    v21 += 6;
  }
  while (v21 * 8);
  v118 = 0;
  v119 = 0;
  LODWORD(v128) = -1082130432;
  re::DynamicArray<float>::resize(v91, v11, &v128);
  re::DynamicArray<unsigned char>::resize(v83, v11, &v107);
  LOBYTE(v128) = 0;
  re::DynamicArray<unsigned char>::resize(v79, v11, &v128);
  LODWORD(v128) = 0;
  re::DynamicArray<float>::resize(v87, v10, &v128);
  LOBYTE(v128) = 0;
  re::DynamicArray<unsigned char>::resize(v75, v10, &v128);
  if (v10)
  {
    v14 = 0;
    do
    {
      v3 = *((_QWORD *)this + 5);
      if (v3 <= v14)
        goto LABEL_155;
      v25 = 0;
      v110 = *(_OWORD *)(*((_QWORD *)this + 7) + 16 * v14);
      if (HIDWORD(v110) == -1)
        v26 = 3;
      else
        v26 = 4;
      do
      {
        v3 = *(unsigned int *)&v111[4 * v25 - 16];
        v27 = (unint64_t)v80;
        if ((unint64_t)v80 <= v3)
        {
          v109 = 0;
          v131 = 0u;
          v132 = 0u;
          v129 = 0u;
          v130 = 0u;
          v128 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v120 = 136315906;
          v121 = "operator[]";
          v122 = 1024;
          v123 = 789;
          v124 = 2048;
          v125 = v3;
          v126 = 2048;
          v127 = v27;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_143:
          v109 = 0;
          *((_OWORD *)v5 + 6) = 0u;
          *((_OWORD *)v5 + 7) = 0u;
          *((_OWORD *)v5 + 4) = 0u;
          *((_OWORD *)v5 + 5) = 0u;
          *((_OWORD *)v5 + 3) = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v120 = 136315906;
          *(_QWORD *)(v5 + 1) = "operator[]";
          v122 = 1024;
          *(int *)((char *)v5 + 14) = 789;
          v124 = 2048;
          *(_QWORD *)(v5 + 5) = v27;
          v126 = 2048;
          *(_QWORD *)((char *)v5 + 30) = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_144:
          v109 = 0;
          *((_OWORD *)v5 + 6) = 0u;
          *((_OWORD *)v5 + 7) = 0u;
          *((_OWORD *)v5 + 4) = 0u;
          *((_OWORD *)v5 + 5) = 0u;
          *((_OWORD *)v5 + 3) = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v120 = 136315906;
          *(_QWORD *)(v5 + 1) = "operator[]";
          v122 = 1024;
          *(int *)((char *)v5 + 14) = 789;
          v124 = 2048;
          *(_QWORD *)(v5 + 5) = v4;
          v126 = 2048;
          *(_QWORD *)((char *)v5 + 30) = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_145;
        }
        ++*(_BYTE *)(v82 + v3);
        ++v25;
      }
      while (v26 != v25);
    }
    while (++v14 != v10);
  }
  if ((_DWORD)v11)
  {
    v28 = 0;
    v14 = (unint64_t)v80;
    v9 = v82;
    v3 = (unint64_t)v92;
    v29 = v94;
    while ((_DWORD *)v14 != v28)
    {
      if (*((_BYTE *)v28 + v9))
        v30 = (float)(powf((float)*((unsigned __int8 *)v28 + v9), -0.5) * 2.0) + 0.0;
      else
        v30 = -1.0;
      if ((_DWORD *)v3 == v28)
        goto LABEL_154;
      *(float *)(v29 + 4 * (_QWORD)v28) = v30;
      v28 = (_DWORD *)((char *)v28 + 1);
      if ((_DWORD *)v11 == v28)
        goto LABEL_31;
    }
LABEL_153:
    *(_QWORD *)&v110 = 0;
    *(_OWORD *)(v8 + 96) = 0u;
    *(_OWORD *)(v8 + 112) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 80) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v120 = 136315906;
    *(_QWORD *)(v8 + 4) = "operator[]";
    v122 = 1024;
    *(_DWORD *)(v8 + 14) = 789;
    v124 = 2048;
    *(_QWORD *)(v8 + 20) = v14;
    v126 = 2048;
    *(_QWORD *)(v8 + 30) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_154:
    *(_QWORD *)&v110 = 0;
    *(_OWORD *)(v8 + 96) = 0u;
    *(_OWORD *)(v8 + 112) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 80) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v120 = 136315906;
    *(_QWORD *)(v8 + 4) = "operator[]";
    v122 = 1024;
    *(_DWORD *)(v8 + 14) = 789;
    v124 = 2048;
    *(_QWORD *)(v8 + 20) = v3;
    v126 = 2048;
    *(_QWORD *)(v8 + 30) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_155:
    *(_QWORD *)&v110 = 0;
    *(_OWORD *)(v8 + 96) = 0u;
    *(_OWORD *)(v8 + 112) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 80) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v120 = 136315906;
    *(_QWORD *)(v8 + 4) = "operator[]";
    v122 = 1024;
    *(_DWORD *)(v8 + 14) = 797;
    v124 = 2048;
    *(_QWORD *)(v8 + 20) = v14;
    v126 = 2048;
    *(_QWORD *)(v8 + 30) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_156:
    v109 = 0;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v128 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v120 = 136315906;
    v121 = "operator[]";
    v122 = 1024;
    v123 = 789;
    v124 = 2048;
    v125 = v14;
    v126 = 2048;
    v127 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_157:
    *(_QWORD *)&v110 = 0;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v120 = 136315906;
    *(_QWORD *)(v5 + 1) = "operator[]";
    v122 = 1024;
    *(int *)((char *)v5 + 14) = 797;
    v124 = 2048;
    *(_QWORD *)(v5 + 5) = v11;
    v126 = 2048;
    *(_QWORD *)((char *)v5 + 30) = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_158:
    v109 = 0;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v128 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v120 = 136315906;
    v121 = "operator[]";
    v122 = 1024;
    v123 = 789;
    v124 = 2048;
    v125 = v14;
    v126 = 2048;
    v127 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_159:
    v109 = 0;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v128 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v120 = 136315906;
    v121 = "operator[]";
    v122 = 1024;
    v123 = 789;
    v124 = 2048;
    v125 = v9;
    v126 = 2048;
    v127 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_160:
    v109 = 0;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v128 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v120 = 136315906;
    v121 = "operator[]";
    v122 = 1024;
    v123 = 789;
    v124 = 2048;
    v125 = v9;
    v126 = 2048;
    v127 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_161:
    v109 = 0;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v128 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v120 = 136315906;
    v121 = "operator[]";
    v122 = 1024;
    v123 = 789;
    v124 = 2048;
    v125 = v9;
    v126 = 2048;
    v127 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_162:
    v109 = 0;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v128 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v120 = 136315906;
    v121 = "operator[]";
    v122 = 1024;
    v123 = 789;
    v124 = 2048;
    v125 = v9;
    v126 = 2048;
    v127 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_163:
    v109 = 0;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v120 = 136315906;
    *(_QWORD *)(v5 + 1) = "operator[]";
    v122 = 1024;
    *(int *)((char *)v5 + 14) = 789;
    v124 = 2048;
    *(_QWORD *)(v5 + 5) = v14;
    v126 = 2048;
    *(_QWORD *)((char *)v5 + 30) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_164:
    v109 = 0;
    v39 = (unint64_t)&v120;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v128 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v120 = 136315906;
    v121 = "operator[]";
    v122 = 1024;
    v123 = 789;
    v124 = 2048;
    v125 = v11;
    v126 = 2048;
    v127 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_165:
    v109 = 0;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v128 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v120 = 136315906;
    v121 = "operator[]";
    v122 = 1024;
    v123 = 789;
    v124 = 2048;
    v125 = v39;
    v126 = 2048;
    v127 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_166:
    v109 = 0;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v128 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v120 = 136315906;
    v121 = "operator[]";
    v122 = 1024;
    v123 = 789;
    v124 = 2048;
    v125 = v39;
    v126 = 2048;
    v127 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_167:
    *(_QWORD *)&v110 = 0;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v128 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v120 = 136315906;
    v121 = "operator[]";
    v122 = 1024;
    v123 = 789;
    v124 = 2048;
    v125 = v11;
    v126 = 2048;
    v127 = v39;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_168:
    *(_QWORD *)&v110 = 0;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v128 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v120 = 136315906;
    v121 = "operator[]";
    v122 = 1024;
    v123 = 789;
    v124 = 2048;
    v125 = v39;
    v126 = 2048;
    v127 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_169:
    *(_QWORD *)&v110 = 0;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v128 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v120 = 136315906;
    v121 = "operator[]";
    v122 = 1024;
    v123 = 797;
    v124 = 2048;
    v125 = v39;
    v126 = 2048;
    v127 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_31:
  if (!v10)
    goto LABEL_117;
  v4 = 0;
  v11 = *((_QWORD *)this + 5);
  v31 = *((_QWORD *)this + 7);
  v8 = (unint64_t)v92;
  v9 = 0xFFFFFFFFLL;
  v32 = -INFINITY;
  v14 = (unint64_t)v88;
  v33 = v90;
  v5 = &v120;
  do
  {
    if (v4 == v11)
      goto LABEL_157;
    v34 = 0;
    v110 = *(_OWORD *)(v31 + 16 * v4);
    v35 = v94;
    v3 = (unint64_t)v88;
    v36 = v90;
    if (HIDWORD(v110) == -1)
      v37 = 3;
    else
      v37 = 4;
    do
    {
      v27 = *(unsigned int *)&v111[4 * v34 - 16];
      if (v8 <= v27)
        goto LABEL_143;
      if (v3 <= v4)
        goto LABEL_144;
      *(float *)(v36 + 4 * v4) = *(float *)(v35 + 4 * v27) + *(float *)(v36 + 4 * v4);
      ++v34;
    }
    while (v37 != v34);
    if (v4 == v14)
      goto LABEL_163;
    v38 = *(float *)(v33 + 4 * v4);
    if (v38 <= v32)
      v9 = v9;
    else
      v9 = v4;
    if (v38 > v32)
      v32 = *(float *)(v33 + 4 * v4);
    ++v4;
  }
  while (v4 != v10);
  v11 = 0;
  v5 = (int *)&v110;
  do
  {
    v39 = *(_QWORD *)(v73 + 16);
    if (v39 <= v11)
      goto LABEL_167;
    v72 = v11;
    *(_DWORD *)(*(_QWORD *)(v73 + 32) + 4 * v11) = v9;
    v39 = v9;
    v11 = v76;
    if (v76 <= v9)
      goto LABEL_168;
    *(_BYTE *)(v78 + v9) = 1;
    v11 = *((_QWORD *)this + 5);
    if (v11 <= v9)
      goto LABEL_169;
    v9 = 0;
    v110 = *(_OWORD *)(*((_QWORD *)this + 7) + 16 * v39);
    if (HIDWORD(v110) == -1)
      v40 = 3;
    else
      v40 = 4;
    do
    {
      ++HIDWORD(v119);
      v41 = (unsigned int *)*((_QWORD *)v114 + 1);
      *(_QWORD *)&v128 = v41;
      v42 = v115;
      if (v41 == v115)
        goto LABEL_61;
      v43 = *(_DWORD *)&v111[4 * v9 - 16];
      while (*v41 != v43)
      {
        v41 = (unsigned int *)v128;
        if ((unsigned int *)v128 == v42)
        {
          v41 = v42;
          break;
        }
      }
      if (v41 == v115)
      {
LABEL_61:
        LODWORD(v119) = v119 + 1;
        if (v118 == 35)
        {
          v41 = (unsigned int *)*((_QWORD *)v41 + 2);
          v48 = *((_QWORD *)v41 + 1);
          v47 = *((_QWORD *)v41 + 2);
          *(_QWORD *)(v47 + 8) = v48;
          *(_QWORD *)(v48 + 16) = v47;
          v117[33] = v41;
          v46 = 35;
        }
        else
        {
          v41 = *(unsigned int **)&v116[8 * v118];
          v46 = v118 + 1;
        }
      }
      else
      {
        v45 = *((_QWORD *)v41 + 1);
        v44 = *((_QWORD *)v41 + 2);
        *(_QWORD *)(v44 + 8) = v45;
        *(_QWORD *)(v45 + 16) = v44;
        v46 = v118;
        *(_QWORD *)&v116[8 * (v118 - 1)] = v41;
      }
      v49 = v114;
      v50 = *((_QWORD *)v114 + 1);
      v118 = v46;
      *v41 = *(_DWORD *)&v111[4 * v9 - 16];
      *((_QWORD *)v41 + 1) = v50;
      *((_QWORD *)v41 + 2) = v49;
      *(_QWORD *)(v50 + 16) = v41;
      *((_QWORD *)v49 + 1) = v41;
      v14 = *(unsigned int *)&v111[4 * v9 - 16];
      v11 = (unint64_t)v80;
      if ((unint64_t)v80 <= v14)
        goto LABEL_152;
      --*(_BYTE *)(v82 + v14);
      ++v9;
    }
    while (v9 != v40);
    v51 = (unsigned int *)*((_QWORD *)v114 + 1);
    v74 = v51;
    v52 = v115;
    while (v51 != v52)
    {
      v14 = *v51;
      v11 = v84;
      if (v84 <= v14)
        goto LABEL_158;
      *(_BYTE *)(v86 + v14) = 0;
      v9 = *v51;
      v14 = (unint64_t)v92;
      if ((unint64_t)v92 <= v9)
        goto LABEL_159;
      v14 = (unint64_t)v80;
      if ((unint64_t)v80 <= v9)
        goto LABEL_160;
      v53 = v94;
      v54 = *(float *)(v94 + 4 * v9);
      if (*(_BYTE *)(v82 + v9))
        v55 = (float)(powf((float)*(unsigned __int8 *)(v82 + v9), -0.5) * 2.0) + 0.75;
      else
        v55 = -1.0;
      *(float *)(v53 + 4 * v9) = v55;
      v14 = (unint64_t)v96;
      if ((unint64_t)v96 <= v9)
        goto LABEL_161;
      v14 = (unint64_t)v100;
      if ((unint64_t)v100 <= v9)
        goto LABEL_162;
      v56 = *(unsigned int *)(v98 + 4 * v9);
      v57 = *(unsigned int *)(v102 + 4 * v9);
      if (v56 < v57)
      {
        v58 = v55 - v54;
        v14 = (unint64_t)v104;
        v11 = (unint64_t)v88;
        v59 = v90;
        if ((unint64_t)v104 <= v56)
          v3 = *(unsigned int *)(v98 + 4 * v9);
        else
          v3 = (unint64_t)v104;
        v60 = (unsigned int *)(v106 + 4 * v56);
        v61 = v57 - v56;
        v62 = v3 - v56;
        while (v62)
        {
          v27 = *v60;
          if (v11 <= v27)
            goto LABEL_146;
          *(float *)(v59 + 4 * v27) = v58 + *(float *)(v59 + 4 * v27);
          ++v60;
          --v62;
          if (!--v61)
            goto LABEL_84;
        }
LABEL_145:
        v109 = 0;
        v131 = 0u;
        v132 = 0u;
        v129 = 0u;
        v130 = 0u;
        v128 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v120 = 136315906;
        v121 = "operator[]";
        v122 = 1024;
        v123 = 789;
        v124 = 2048;
        v125 = v3;
        v126 = 2048;
        v127 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_146:
        v109 = 0;
        v131 = 0u;
        v132 = 0u;
        v129 = 0u;
        v130 = 0u;
        v128 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v120 = 136315906;
        v121 = "operator[]";
        v122 = 1024;
        v123 = 789;
        v124 = 2048;
        v125 = v27;
        v126 = 2048;
        v127 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_147:
        v109 = 0;
        v131 = 0u;
        v132 = 0u;
        v129 = 0u;
        v130 = 0u;
        v128 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v120 = 136315906;
        v121 = "operator[]";
        v122 = 1024;
        v123 = 789;
        v124 = 2048;
        v125 = v27;
        v126 = 2048;
        v127 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_148:
        v109 = 0;
        v14 = (unint64_t)&v120;
        v131 = 0u;
        v132 = 0u;
        v129 = 0u;
        v130 = 0u;
        v128 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v120 = 136315906;
        v121 = "operator[]";
        v122 = 1024;
        v123 = 789;
        v124 = 2048;
        v125 = v8;
        v126 = 2048;
        v127 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_149:
        v109 = 0;
        v131 = 0u;
        v132 = 0u;
        v129 = 0u;
        v130 = 0u;
        v128 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v120 = 136315906;
        v121 = "operator[]";
        v122 = 1024;
        v123 = 789;
        v124 = 2048;
        v125 = v8;
        v126 = 2048;
        v127 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_150:
        v91[0] = 0;
        *(_OWORD *)(v9 + 64) = 0u;
        *(_OWORD *)(v9 + 80) = 0u;
        *(_OWORD *)(v9 + 32) = 0u;
        *(_OWORD *)(v9 + 48) = 0u;
        *(_OWORD *)(v9 + 16) = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v128) = 136315906;
        *(_QWORD *)(v8 + 52) = "operator[]";
        WORD6(v128) = 1024;
        *(_DWORD *)(v8 + 62) = 789;
        WORD1(v129) = 2048;
        *(_QWORD *)(v8 + 68) = v14;
        WORD6(v129) = 2048;
        *(_QWORD *)(v8 + 78) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_151;
      }
LABEL_84:
      v51 = v74;
    }
    if (!v118 || (v63 = (unsigned int *)*((_QWORD *)v114 + 1), v74 = v63, v64 = v115, v63 == v115))
    {
      v65 = -INFINITY;
LABEL_109:
      v11 = 0;
      v14 = v76;
      v9 = 0xFFFFFFFFLL;
      v3 = (unint64_t)v88;
      while (v76 != v11)
      {
        if (!*(_BYTE *)(v78 + v11))
        {
          if ((unint64_t)v88 <= v11)
            goto LABEL_164;
          if (*(float *)(v90 + 4 * v11) > v65)
          {
            v9 = v11;
            v65 = *(float *)(v90 + 4 * v11);
          }
        }
        if (v10 == ++v11)
          goto LABEL_116;
      }
      goto LABEL_156;
    }
    v9 = 0xFFFFFFFFLL;
    v65 = -INFINITY;
    do
    {
      v39 = *v63;
      v11 = (unint64_t)v96;
      if ((unint64_t)v96 <= v39)
        goto LABEL_165;
      v11 = (unint64_t)v100;
      if ((unint64_t)v100 <= v39)
        goto LABEL_166;
      v66 = *(unsigned int *)(v98 + 4 * v39);
      v67 = *(unsigned int *)(v102 + 4 * v39);
      if (v66 < v67)
      {
        v3 = (unint64_t)v104;
        v11 = v76;
        v14 = (unint64_t)v88;
        if ((unint64_t)v104 <= v66)
          v27 = v66;
        else
          v27 = (unint64_t)v104;
        v68 = (unsigned int *)(v106 + 4 * v66);
        v69 = v67 - v66;
        v70 = v27 - v66;
        while (v70)
        {
          v8 = *v68;
          if (v76 <= v8)
            goto LABEL_148;
          if (!*(_BYTE *)(v78 + v8))
          {
            if ((unint64_t)v88 <= v8)
              goto LABEL_149;
            v71 = *(float *)(v90 + 4 * v8);
            if (v71 <= v65)
              v9 = v9;
            else
              v9 = v8;
            if (v71 > v65)
              v65 = *(float *)(v90 + 4 * v8);
          }
          ++v68;
          --v70;
          if (!--v69)
            goto LABEL_105;
        }
        goto LABEL_147;
      }
LABEL_105:
      v63 = v74;
    }
    while (v74 != v64);
    if ((_DWORD)v9 == -1)
      goto LABEL_109;
LABEL_116:
    v11 = v72 + 1;
  }
  while (v72 + 1 != v10);
LABEL_117:
  if (v75[0] && v78)
    (*(void (**)(void))(*(_QWORD *)v75[0] + 40))();
  if (v79[0] && v82)
    (*(void (**)(void))(*(_QWORD *)v79[0] + 40))();
  if (v83[0] && v86)
    (*(void (**)(void))(*(_QWORD *)v83[0] + 40))();
  if (v87[0] && v90)
    (*(void (**)(void))(*(_QWORD *)v87[0] + 40))();
  if (v91[0] && v94)
    (*(void (**)(void))(*(_QWORD *)v91[0] + 40))();
  if (v95[0] && v98)
    (*(void (**)(void))(*(_QWORD *)v95[0] + 40))();
  if (v99[0] && v102)
    (*(void (**)(void))(*(_QWORD *)v99[0] + 40))();
  if (v103[0] && v106)
    (*(void (**)(void))(*(_QWORD *)v103[0] + 40))();
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v108);
}

uint64_t re::internal::`anonymous namespace'::FixedPoolLinkedList<unsigned int,(unsigned char)35>::NodeIterator::operator++(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)result + 8);
  if (v2)
  {
    *(_QWORD *)result = v2;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Incrementing past the end.", "!\"Unreachable code\"", "operator++", 45);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

void re::internal::makeVertexCacheCoherentMesh(const char **a1@<X0>, uint64_t *a2@<X1>, re::GeomMesh *a3@<X8>)
{
  const re::internal::GeomBaseMesh *v6;
  re::GeomMesh *v7;
  re *v8;
  re *v9;
  char *v10;
  uint64_t *v11;
  _QWORD v12[5];
  char *__s;
  _DWORD v14[12];
  uint64_t v15;
  _BYTE v16[16];

  v6 = (const re::internal::GeomBaseMesh *)(a1 + 2);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v16, 4512, *((unsigned int *)a1 + 4));
  __s = 0;
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)v14, v6);
  re::GeomMesh::setName((re *)&__s, *a1);
  re::internal::computeVertexCacheCoherentFaceOrdering((re::internal *)a1, (uint64_t)v12);
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)a2, (uint64_t)v12);
  if (v12[0] && v12[4])
    (*(void (**)(void))(*(_QWORD *)v12[0] + 40))();
  re::internal::GeomBaseTopology::reorderFaces((uint64_t)v14, a2);
  re::internal::GeomAttributeManager::reorderFaces((uint64_t)&v15, a2);
  v7 = re::GeomMesh::GeomMesh(a3, 0);
  v8 = (re *)re::GeomMesh::operator=((uint64_t)v7, v14);
  v9 = re::GeomMesh::setName(v8, __s);
  v10 = __s;
  if (__s)
  {
    v11 = re::globalAllocators(v9);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v11[2] + 40))(v11[2], v10);
    __s = 0;
  }
  re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)&__s);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v16);
}

uint64_t re::internal::makeVertexCacheCoherentMesh@<X0>(const char **this@<X0>, const re::GeomMesh *a2@<X1>, re::GeomMesh *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[12];
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[3];
  int v15;
  uint64_t v16;

  v16 = 0;
  memset(v14, 0, sizeof(v14));
  v15 = 0;
  re::internal::makeVertexCacheCoherentMesh(this, v14, a3);
  re::GeomIndexMap::GeomIndexMap((uint64_t)v8, (uint64_t)v14);
  re::GeomIndexMap::operator=((uint64_t)a2, (uint64_t)v8);
  if (!v9)
    goto LABEL_12;
  if (v9 == 2)
  {
    v6 = v13;
    if (!v13)
      goto LABEL_12;
    if (v11)
      v11 = 0;
    if (!v10)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (v9 != 1)
  {
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = v10;
  if (v10 && v12)
LABEL_11:
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
LABEL_12:
  result = v14[0];
  if (v14[0])
  {
    if (v16)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14[0] + 40))(v14[0]);
  }
  return result;
}

uint64_t re::internal::GeomConnectivityNonManifold::computeIncidenceRelations(_anonymous_namespace_ *a1, unsigned int *a2)
{
  unsigned int *v2;
  _anonymous_namespace_ *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  size_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unsigned int *v33;
  int v34;
  int v35;
  size_t v36;
  unint64_t v37;
  __int32 *v38;
  __int32 *v39;
  uint64_t v40;
  unint64_t v41;
  unsigned __int16 v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  __int32 *v58;
  __int32 *v59;
  size_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t result;
  uint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  size_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  _anonymous_namespace_ *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  _OWORD v88[2];
  __int32 v89[3];
  int v90;
  __int32 __s[2];
  uint64_t v92;
  size_t v93;
  int v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  _BYTE v99[28];
  __int16 v100;
  _BYTE v101[10];
  _BYTE v102[12];
  __int16 v103;
  int v104;
  __int16 v105;
  size_t v106;
  __int16 v107;
  size_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;

  v2 = a2;
  v3 = a1;
  v114 = *MEMORY[0x24BDAC8D0];
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v4 = *((_QWORD *)a2 + 3);
  v5 = *a2;
  v6 = 0;
  v7 = v4;
  if ((_DWORD)v4)
  {
    v8 = *((_QWORD *)a2 + 5);
    v9 = (_DWORD *)(v8 + 8);
    v10 = *((_QWORD *)a2 + 3);
    do
    {
      if (*(v9 - 2) != -1 && *(v9 - 1) != -1 && *v9 != -1 && v9[1] != -1)
        ++v6;
      v9 += 4;
      --v10;
    }
    while (v10);
    v11 = 0;
    v12 = (_DWORD *)(v8 + 8);
    v13 = *((_QWORD *)a2 + 3);
    do
    {
      if (*(v12 - 2) != -1 && *(v12 - 1) != -1 && *v12 != -1 && v12[1] == -1)
        ++v11;
      v12 += 4;
      --v13;
    }
    while (v13);
  }
  else
  {
    v11 = 0;
  }
  v14 = (6 * v11 + 8 * v6);
  *((_QWORD *)v3 + 8) = 0;
  ++*((_DWORD *)v3 + 18);
  v15 = (size_t)v3 + 88;
  *((_QWORD *)v3 + 13) = 0;
  ++*((_DWORD *)v3 + 28);
  *((_QWORD *)v3 + 18) = 0;
  ++*((_DWORD *)v3 + 38);
  *((_QWORD *)v3 + 23) = 0;
  ++*((_DWORD *)v3 + 48);
  *((_QWORD *)v3 + 28) = 0;
  ++*((_DWORD *)v3 + 58);
  *((_QWORD *)v3 + 33) = 0;
  ++*((_DWORD *)v3 + 68);
  *((_QWORD *)v3 + 38) = 0;
  ++*((_DWORD *)v3 + 78);
  *((_QWORD *)v3 + 43) = 0;
  ++*((_DWORD *)v3 + 88);
  *((_QWORD *)v3 + 48) = 0;
  ++*((_DWORD *)v3 + 98);
  v16 = (size_t)v3 + 408;
  *((_QWORD *)v3 + 53) = 0;
  v17 = (4 * v4);
  ++*((_DWORD *)v3 + 108);
  re::DynamicArray<unsigned int>::resize((_QWORD *)v3 + 46, v17, &re::kInvalidMeshIndex);
  re::DynamicArray<unsigned int>::resize((_QWORD *)v3 + 51, v17, &re::kInvalidMeshIndex);
  LODWORD(v109) = 0;
  v74 = (uint64_t)v3 + 88;
  re::DynamicArray<unsigned int>::resize((_QWORD *)v3 + 11, v5, &v109);
  LODWORD(v109) = 0;
  v73 = (uint64_t)v3 + 128;
  re::DynamicArray<unsigned int>::resize((_QWORD *)v3 + 16, v5, &v109);
  v82 = v3;
  v75 = v2;
  v76 = v4;
  if (!(_DWORD)v4)
  {
    v79 = 0;
    goto LABEL_56;
  }
  v18 = 0;
  v15 = 0;
  v79 = 0;
  do
  {
    v19 = 0uLL;
    v96 = 0u;
    v97 = 0u;
    v20 = *((_QWORD *)v2 + 3);
    if (v20 <= v15)
      goto LABEL_143;
    v21 = 0;
    v77 = v18;
    v22 = *((_QWORD *)v2 + 5) + v18;
    do
    {
      __s[v21] = *(_DWORD *)(v22 + v21 * 4);
      ++v21;
    }
    while (v21 != 4);
    v7 = 0;
    v16 = 0;
    if (HIDWORD(v92) == -1)
      v23 = 3;
    else
      v23 = 4;
    v78 = v15;
    v24 = 4 * v15;
    v80 = v23;
    do
    {
      v15 = (size_t)&__s[v16];
      v5 = *(unsigned int *)v15;
      v20 = v16 + 1;
      v25 = (v16 + 1);
      if (v16 + 1 == v23)
        v25 = 0;
      v26 = __s[v25];
      if (v5 >= v26)
        v27 = v26;
      else
        v27 = *(_DWORD *)v15;
      if (v5 <= v26)
        v28 = v26;
      else
        v28 = *(_DWORD *)v15;
      if (v29 == -1)
      {
        *(_QWORD *)&v109 = __PAIR64__(v28, v27);
        *(_DWORD *)v99 = v79;
        *(_DWORD *)&v99[4] = 1;
        v34 = v79++;
        v3 = v82;
      }
      else
      {
        v30 = v29;
        v31 = (char *)&v96;
        v32 = *((_QWORD *)&v83 + 1) + 16 * v29;
        v35 = *(_DWORD *)(v32 + 8);
        v33 = (unsigned int *)(v32 + 8);
        v34 = v35;
        if (v16)
        {
          v31 = (char *)&v96;
          v36 = v7;
          while (*(unsigned int **)v31 != v33)
          {
            v31 += 8;
            v36 -= 8;
            if (!v36)
            {
              v31 = (char *)&v96 + 8 * v16;
              break;
            }
          }
        }
        if (v16 == (v31 - (char *)&v96) >> 3)
          ++*(_DWORD *)(*((_QWORD *)&v83 + 1) + 16 * v30 + 12);
      }
      *((_QWORD *)&v96 + v16) = v33;
      v17 = (v24 + v16);
      v37 = *((_QWORD *)v3 + 48);
      if (v37 <= v17)
      {
        *(_QWORD *)v102 = 0;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v109 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v99 = 136315906;
        *(_QWORD *)&v99[4] = "operator[]";
        *(_WORD *)&v99[12] = 1024;
        *(_DWORD *)&v99[14] = 789;
        *(_WORD *)&v99[18] = 2048;
        *(_QWORD *)&v99[20] = (v24 + v16);
        v100 = 2048;
        *(_QWORD *)v101 = v37;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_137:
        *(_QWORD *)v102 = 0;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v109 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v99 = 136315906;
        *(_QWORD *)&v99[4] = "operator[]";
        *(_WORD *)&v99[12] = 1024;
        *(_DWORD *)&v99[14] = 789;
        *(_WORD *)&v99[18] = 2048;
        *(_QWORD *)&v99[20] = (v24 + v16);
        v100 = 2048;
        *(_QWORD *)v101 = v37;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_138:
        *(_QWORD *)v102 = 0;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v109 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v99 = 136315906;
        *(_QWORD *)&v99[4] = "operator[]";
        *(_WORD *)&v99[12] = 1024;
        *(_DWORD *)&v99[14] = 789;
        *(_WORD *)&v99[18] = 2048;
        *(_QWORD *)&v99[20] = v5;
        v100 = 2048;
        *(_QWORD *)v101 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_139:
        v87 = 0;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v109 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v102 = 136315906;
        *(_QWORD *)&v102[4] = "operator[]";
        v103 = 1024;
        v104 = 789;
        v105 = 2048;
        v106 = v7;
        v107 = 2048;
        v108 = v16;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_140:
        v87 = 0;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v109 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v102 = 136315906;
        *(_QWORD *)&v102[4] = "operator[]";
        v103 = 1024;
        v104 = 789;
        v105 = 2048;
        v106 = v16;
        v107 = 2048;
        v108 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_141:
        v87 = 0;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v109 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v102 = 136315906;
        *(_QWORD *)&v102[4] = "operator[]";
        v103 = 1024;
        v104 = 789;
        v105 = 2048;
        v106 = v20;
        v107 = 2048;
        v108 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_142:
        v87 = 0;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v109 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v102 = 136315906;
        *(_QWORD *)&v102[4] = "operator[]";
        v103 = 1024;
        v104 = 789;
        v105 = 2048;
        v106 = v15;
        v107 = 2048;
        v108 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_143:
        *(_QWORD *)__s = 0;
        v112 = v19;
        v113 = v19;
        v110 = v19;
        v111 = v19;
        v109 = v19;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v99 = 136315906;
        *(_QWORD *)&v99[4] = "operator[]";
        *(_WORD *)&v99[12] = 1024;
        *(_DWORD *)&v99[14] = 797;
        *(_WORD *)&v99[18] = 2048;
        *(_QWORD *)&v99[20] = v15;
        v100 = 2048;
        *(_QWORD *)v101 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_144:
        *(_QWORD *)&v88[0] = 0;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v109 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v102 = 136315906;
        *(_QWORD *)&v102[4] = "operator[]";
        v103 = 1024;
        v104 = 789;
        v105 = 2048;
        v106 = v5;
        v107 = 2048;
        v108 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_145:
        *(_QWORD *)&v88[0] = 0;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v109 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v102 = 136315906;
        *(_QWORD *)&v102[4] = "operator[]";
        v103 = 1024;
        v104 = 789;
        v105 = 2048;
        v106 = v7;
        v107 = 2048;
        v108 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_146:
        *(_QWORD *)&v88[0] = 0;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v109 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v102 = 136315906;
        *(_QWORD *)&v102[4] = "operator[]";
        v103 = 1024;
        v104 = 789;
        v105 = 2048;
        v106 = v16;
        v107 = 2048;
        v108 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_147:
        *(_QWORD *)&v88[0] = 0;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v109 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v102 = 136315906;
        *(_QWORD *)&v102[4] = "operator[]";
        v103 = 1024;
        v104 = 789;
        v105 = 2048;
        v106 = v17;
        v107 = 2048;
        v108 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_148:
        *(_QWORD *)v89 = 0;
        v112 = v48;
        v113 = v48;
        v110 = v48;
        v111 = v48;
        v109 = v48;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v102 = 136315906;
        *(_QWORD *)&v102[4] = "operator[]";
        v103 = 1024;
        v104 = 797;
        v105 = 2048;
        v106 = v16;
        v107 = 2048;
        v108 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_149:
        *(_QWORD *)&v88[0] = 0;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v109 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v102 = 136315906;
        *(_QWORD *)&v102[4] = "operator[]";
        v103 = 1024;
        v104 = 789;
        v105 = 2048;
        v106 = v5;
        v107 = 2048;
        v108 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_150:
        *(_QWORD *)&v88[0] = 0;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v109 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v102 = 136315906;
        *(_QWORD *)&v102[4] = "operator[]";
        v103 = 1024;
        v104 = 789;
        v105 = 2048;
        v106 = v16;
        v107 = 2048;
        v108 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_151;
      }
      *(_DWORD *)(*((_QWORD *)v3 + 50) + 4 * v17) = v5;
      v37 = *((_QWORD *)v3 + 53);
      if (v37 <= v17)
        goto LABEL_137;
      *(_DWORD *)(*((_QWORD *)v3 + 55) + 4 * v17) = v34;
      v38 = wmemchr(__s, v5, v16);
      if (v38)
        v39 = v38;
      else
        v39 = &__s[v16];
      if (v16 == v39 - __s)
      {
        v15 = *((_QWORD *)v3 + 18);
        if (v15 <= v5)
          goto LABEL_138;
        ++*(_DWORD *)(*((_QWORD *)v3 + 20) + 4 * v5);
      }
      v7 += 8;
      ++v16;
      v23 = v80;
    }
    while (v20 != v80);
    v15 = v78 + 1;
    v18 = v77 + 16;
    v2 = v75;
  }
  while (v78 + 1 != v76);
LABEL_56:
  v16 = (size_t)v3 + 288;
  re::DynamicArray<float>::resize((uint64_t)v3 + 288, v79);
  re::DynamicArray<float>::resize((uint64_t)v3 + 248, 2 * v79);
  *(_QWORD *)&v96 = &v83;
  if ((unint64_t)v84 < 0x10)
  {
LABEL_60:
    v17 = *((_QWORD *)v3 + 38);
  }
  else
  {
    v40 = 0;
    v41 = (unint64_t)v84 >> 4;
    while (1)
    {
      v42 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v83 + v40)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      if (v42 != 0xFFFF)
        break;
      v40 += 16;
      if (!--v41)
        goto LABEL_60;
    }
    v69 = __clz(__rbit64((unsigned __int16)~v42)) + v40;
    *((_QWORD *)&v96 + 1) = (unsigned __int16)~v42;
    *(_QWORD *)&v97 = v69;
    v17 = *((_QWORD *)v3 + 38);
    if (v69 != -1)
    {
      v43 = v76;
      while (1)
      {
        v70 = (unsigned int *)(*(_QWORD *)(v96 + 8) + 16 * v69);
        v20 = v70[2];
        if (v17 <= v20)
          break;
        v7 = *v70;
        v15 = v70[1];
        *(_DWORD *)(*((_QWORD *)v3 + 40) + 4 * v20) = v70[3];
        v5 = (2 * v20);
        v20 = *((_QWORD *)v3 + 33);
        if (v20 <= v5)
          goto LABEL_152;
        v71 = *((_QWORD *)v3 + 35);
        *(_DWORD *)(v71 + 4 * v5) = v7;
        v5 = v5 | 1;
        if (v20 <= v5)
          goto LABEL_153;
        *(_DWORD *)(v71 + 4 * v5) = v15;
        v20 = *((_QWORD *)v3 + 13);
        if (v20 <= v7)
          goto LABEL_154;
        v72 = *((_QWORD *)v3 + 15);
        ++*(_DWORD *)(v72 + 4 * v7);
        if ((_DWORD)v7 != (_DWORD)v15)
        {
          if (v20 <= v15)
            goto LABEL_155;
          ++*(_DWORD *)(v72 + 4 * v15);
        }
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v96);
        v69 = v97;
        if ((_QWORD)v97 == -1)
          goto LABEL_62;
      }
LABEL_151:
      *(_QWORD *)__s = 0;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v109 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v99 = 136315906;
      *(_QWORD *)&v99[4] = "operator[]";
      *(_WORD *)&v99[12] = 1024;
      *(_DWORD *)&v99[14] = 789;
      *(_WORD *)&v99[18] = 2048;
      *(_QWORD *)&v99[20] = v20;
      v100 = 2048;
      *(_QWORD *)v101 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_152:
      *(_QWORD *)__s = 0;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v109 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v99 = 136315906;
      *(_QWORD *)&v99[4] = "operator[]";
      *(_WORD *)&v99[12] = 1024;
      *(_DWORD *)&v99[14] = 789;
      *(_WORD *)&v99[18] = 2048;
      *(_QWORD *)&v99[20] = v5;
      v100 = 2048;
      *(_QWORD *)v101 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_153:
      *(_QWORD *)__s = 0;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v109 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v99 = 136315906;
      *(_QWORD *)&v99[4] = "operator[]";
      *(_WORD *)&v99[12] = 1024;
      *(_DWORD *)&v99[14] = 789;
      *(_WORD *)&v99[18] = 2048;
      *(_QWORD *)&v99[20] = v5;
      v100 = 2048;
      *(_QWORD *)v101 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_154:
      *(_QWORD *)__s = 0;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v109 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v99 = 136315906;
      *(_QWORD *)&v99[4] = "operator[]";
      *(_WORD *)&v99[12] = 1024;
      *(_DWORD *)&v99[14] = 789;
      *(_WORD *)&v99[18] = 2048;
      *(_QWORD *)&v99[20] = v7;
      v100 = 2048;
      *(_QWORD *)v101 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_155:
      *(_QWORD *)__s = 0;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v109 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v99 = 136315906;
      *(_QWORD *)&v99[4] = "operator[]";
      *(_WORD *)&v99[12] = 1024;
      *(_DWORD *)&v99[14] = 789;
      *(_WORD *)&v99[18] = 2048;
      *(_QWORD *)&v99[20] = v15;
      v100 = 2048;
      *(_QWORD *)v101 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  v43 = v76;
LABEL_62:
  re::DynamicArray<float>::resize((uint64_t)v3 + 328, v44);
  re::DynamicArray<float>::resize((uint64_t)v3 + 168, v45);
  v17 = (unint64_t)v3 + 208;
  re::DynamicArray<float>::resize((uint64_t)v3 + 208, v46);
  *(_QWORD *)&v101[2] = 0;
  memset(v99, 0, sizeof(v99));
  v98 = 0;
  *(_QWORD *)&v97 = 0;
  v95 = 0;
  v96 = 0uLL;
  DWORD2(v97) = 0;
  v92 = 0;
  v93 = 0;
  *(_QWORD *)__s = 0;
  v94 = 0;
  if (v43)
  {
    v47 = 0;
    v16 = 0;
    v17 = (unint64_t)v89;
    do
    {
      v48 = 0uLL;
      memset(v88, 0, sizeof(v88));
      v20 = *((_QWORD *)v2 + 3);
      if (v20 <= v16)
        goto LABEL_148;
      v49 = 0;
      v81 = v47;
      v50 = *((_QWORD *)v2 + 5) + v47;
      do
      {
        v89[v49] = *(_DWORD *)(v50 + v49 * 4);
        ++v49;
      }
      while (v49 != 4);
      v51 = 0;
      v15 = 0;
      if (v90 == -1)
        v52 = 3;
      else
        v52 = 4;
      do
      {
        v7 = v89[v15];
        v5 = v15 + 1;
        v53 = (v15 + 1);
        if (v15 + 1 == v52)
          v53 = 0;
        v54 = v89[v53];
        if (v7 >= v54)
          v55 = v54;
        else
          v55 = v89[v15];
        if (v7 <= v54)
          v56 = v54;
        else
          v56 = v89[v15];
        if (v57 == -1)
          v20 = 0;
        else
          v20 = *((_QWORD *)&v83 + 1) + 16 * v57 + 8;
        *((_QWORD *)v88 + v15) = v20;
        v58 = wmemchr(v89, v7, v15);
        if (v58)
          v59 = v58;
        else
          v59 = &v89[v15];
        v3 = v82;
        if (v15 == v59 - v89)
        {
          v60 = v16;
          v16 = *(_QWORD *)&v99[16];
          if (*(_QWORD *)&v99[16] <= v7)
            goto LABEL_139;
          v16 = *(unsigned int *)(*(_QWORD *)&v101[2] + 4 * v7);
          *(_DWORD *)(*(_QWORD *)&v101[2] + 4 * v7) = v16 + 1;
          v7 = *((_QWORD *)v82 + 28);
          if (v7 <= v16)
            goto LABEL_140;
          *(_DWORD *)(*((_QWORD *)v82 + 30) + 4 * v16) = v60;
          v16 = v60;
        }
        v61 = (char *)v88;
        if (v15)
        {
          v62 = v51;
          while (*(_QWORD *)v61 != v20)
          {
            v61 += 8;
            v62 -= 8;
            if (!v62)
            {
              v61 = (char *)v88 + 8 * v15;
              break;
            }
          }
        }
        if (v15 == (v61 - (char *)v88) >> 3)
        {
          v20 = *(unsigned int *)v20;
          v15 = v93;
          if (v93 <= v20)
            goto LABEL_141;
          v15 = *(unsigned int *)(v95 + 4 * v20);
          *(_DWORD *)(v95 + 4 * v20) = v15 + 1;
          v20 = *((_QWORD *)v82 + 43);
          if (v20 <= v15)
            goto LABEL_142;
          *(_DWORD *)(*((_QWORD *)v82 + 45) + 4 * v15) = v16;
        }
        v51 += 8;
        v15 = v5;
      }
      while (v5 != v52);
      ++v16;
      v47 = v81 + 16;
      v2 = v75;
    }
    while (v16 != v76);
  }
  if (v79)
  {
    v63 = 0;
    v20 = *((_QWORD *)v3 + 33);
    v64 = 1;
    v15 = v97;
    v65 = v98;
    do
    {
      v5 = v64 - 1;
      if (v20 <= v5)
        goto LABEL_144;
      v7 = v64;
      if (v20 <= v64)
        goto LABEL_145;
      v66 = *((_QWORD *)v3 + 35);
      v16 = *(unsigned int *)(v66 + 4 * v5);
      if (v15 <= v16)
        goto LABEL_146;
      v5 = *(unsigned int *)(v66 + 4 * v64);
      v17 = *(unsigned int *)(v65 + 4 * v16);
      *(_DWORD *)(v65 + 4 * v16) = v17 + 1;
      v7 = *((_QWORD *)v3 + 23);
      if (v7 <= v17)
        goto LABEL_147;
      v67 = *((_QWORD *)v3 + 25);
      *(_DWORD *)(v67 + 4 * v17) = v63;
      if ((_DWORD)v16 != (_DWORD)v5)
      {
        if (v15 <= v5)
          goto LABEL_149;
        v16 = *(unsigned int *)(v65 + 4 * v5);
        *(_DWORD *)(v65 + 4 * v5) = v16 + 1;
        if (v7 <= v16)
          goto LABEL_150;
        *(_DWORD *)(v67 + 4 * v16) = v63;
      }
      ++v63;
      v64 += 2;
    }
    while (v79 != v63);
  }
  if (*(_QWORD *)__s && v95)
    (*(void (**)(void))(**(_QWORD **)__s + 40))();
  if ((_QWORD)v96 && v98)
    (*(void (**)(void))(*(_QWORD *)v96 + 40))();
  if (*(_QWORD *)v99 && *(_QWORD *)&v101[2])
    (*(void (**)(void))(**(_QWORD **)v99 + 40))();
  result = *((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    if (*((_QWORD *)&v83 + 1))
      *((_QWORD *)&v83 + 1) = 0;
    if ((_QWORD)v83)
      return (*(uint64_t (**)(void))(**((_QWORD **)&v86 + 1) + 40))();
  }
  return result;
}

uint64_t re::internal::`anonymous namespace'::computeAccumulatedCounts(unint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t i;
  unint64_t v4;

  if (a1 < 2)
  {
    if (!a1)
      return 0;
  }
  else
  {
    v2 = 2;
    for (i = 1; i < a1; i = v2++)
    {
      v4 = v2 - 2;
      if (v4 >= a1)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(a2 + 4 * i) += *(_DWORD *)(a2 + 4 * v4);
    }
  }
  return *(unsigned int *)(a2 + 4 * a1 - 4);
}

_QWORD *re::internal::`anonymous namespace'::createIndexOffsetsFromAccumulatedCounts(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 16) = 0;
  ++*(_DWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a1 + 16);
  LODWORD(v14) = 0;
  result = re::DynamicArray<unsigned int>::resize((_QWORD *)a2, v4, &v14);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 >= 2)
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = 2;
    v10 = 1;
    v11 = *(_QWORD *)(a2 + 32);
    do
    {
      v12 = v9 - 2;
      if (v6 <= v12)
      {
        v17 = 0u;
        v18 = 0u;
        v15 = 0u;
        v16 = 0u;
        v14 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        v17 = 0u;
        v18 = 0u;
        v15 = 0u;
        v16 = 0u;
        v14 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (v7 <= v10)
        goto LABEL_8;
      *(_DWORD *)(v11 + 4 * v10) = *(_DWORD *)(v8 + 4 * v12);
      v10 = v9;
    }
    while (v6 > v9++);
  }
  return result;
}

uint64_t re::internal::GeomConnectivityNonManifold::edgeFaceCount(re::internal::GeomConnectivityNonManifold *this, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;

  if (a2)
  {
    v2 = a2 - 1;
    v3 = *((_QWORD *)this + 38);
    if (v3 <= v2)
      goto LABEL_8;
    v4 = *(_DWORD *)(*((_QWORD *)this + 40) + 4 * v2);
  }
  else
  {
    v4 = 0;
    v3 = *((_QWORD *)this + 38);
  }
  if (v3 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return (*(_DWORD *)(*((_QWORD *)this + 40) + 4 * a2) - v4);
}

uint64_t re::internal::GeomConnectivityNonManifold::vertexFaceCount(re::internal::GeomConnectivityNonManifold *this, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;

  if (a2)
  {
    v2 = a2 - 1;
    v3 = *((_QWORD *)this + 18);
    if (v3 <= v2)
      goto LABEL_8;
    v4 = *(_DWORD *)(*((_QWORD *)this + 20) + 4 * v2);
  }
  else
  {
    v4 = 0;
    v3 = *((_QWORD *)this + 18);
  }
  if (v3 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return (*(_DWORD *)(*((_QWORD *)this + 20) + 4 * a2) - v4);
}

re::internal::GeomConnectivityNonManifold *re::internal::GeomConnectivityNonManifold::classifyEdges(re::internal::GeomConnectivityNonManifold *this)
{
  unint64_t v1;
  re::internal::GeomConnectivityNonManifold *v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _BYTE v29[28];
  __int16 v30;
  _BYTE v31[10];
  unsigned int v32;
  int v33;
  _BYTE v34[12];
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  unint64_t v40;
  unsigned int v41[4];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 33);
  if ((v1 & 0x1FFFFFFFELL) == 0)
    return this;
  v2 = this;
  v3 = 0;
  v4 = (v1 >> 1);
  do
  {
    v5 = re::internal::GeomConnectivityNonManifold::edgeFaceCount(v2, v3);
    this = (re::internal::GeomConnectivityNonManifold *)re::internal::GeomConnectivityNonManifold::edgeVertices((uint64_t)v2, v3, &v27);
    v6 = v27;
    if (v27 == (unint64_t)v28)
      goto LABEL_4;
    if (v5 == 1)
    {
      v7 = *((_QWORD *)v2 + 8);
      if (v7 <= v27)
        goto LABEL_57;
      *(_BYTE *)(*((_QWORD *)v2 + 10) + v27) |= 1u;
      v7 = v28;
      v6 = *((_QWORD *)v2 + 8);
      if (v6 <= v28)
        goto LABEL_58;
      *(_BYTE *)(*((_QWORD *)v2 + 10) + v28) |= 1u;
      v7 = *((_QWORD *)v2 + 8);
      if (v7 <= v3)
        goto LABEL_59;
      v8 = 4;
LABEL_13:
      *(_BYTE *)(*((_QWORD *)v2 + 10) + v3) |= v8;
      goto LABEL_14;
    }
    this = (re::internal::GeomConnectivityNonManifold *)re::internal::GeomConnectivityNonManifold::edgeFaceCount(v2, v3);
    if ((_DWORD)this == 1)
      goto LABEL_14;
    if (this > 2)
      goto LABEL_52;
    re::internal::GeomConnectivityNonManifold::edgeVertices((uint64_t)v2, v3, &v32);
    *(_QWORD *)&v31[2] = 0;
    memset(v29, 0, sizeof(v29));
    re::internal::GeomConnectivityNonManifold::edgeIncidentFaces(v2, v3, (uint64_t)v29);
    if (!*(_QWORD *)&v29[16])
      goto LABEL_60;
    v9 = v32;
    v10 = v33;
    v11 = re::internal::GeomConnectivityNonManifold::faceVertices(v2, **(_DWORD **)&v31[2], v41);
    v12 = 0;
    v13 = 0;
    v14 = v11 - 1;
    v15 = v41[v14];
    while (1)
    {
      if (v14 == v12)
        v16 = 0;
      else
        v16 = v12 + 1;
      v17 = v41[v12];
      if (v17 != v9)
        goto LABEL_30;
      if (v15 != v10)
        break;
      if (v13)
        goto LABEL_32;
      v13 = 1;
LABEL_30:
      ++v12;
      v15 = v17;
      if (v11 == v12)
        goto LABEL_33;
    }
    if (v41[v16] != v10)
      goto LABEL_30;
    if (!v13)
    {
      v13 = -1;
      goto LABEL_30;
    }
LABEL_32:
    v13 = 0;
LABEL_33:
    v6 = *(_QWORD *)&v29[16];
    if (*(_QWORD *)&v29[16] <= 1uLL)
      goto LABEL_61;
    v18 = v32;
    v19 = v33;
    v20 = re::internal::GeomConnectivityNonManifold::faceVertices(v2, *(_DWORD *)(*(_QWORD *)&v31[2] + 4), v41);
    v21 = 0;
    v22 = 0;
    v23 = v20 - 1;
    v24 = v41[v23];
    while (2)
    {
      if (v23 == v21)
        v25 = 0;
      else
        v25 = v21 + 1;
      v26 = v41[v21];
      if (v26 != v18)
        goto LABEL_45;
      if (v24 == v19)
      {
        if (v22)
          goto LABEL_47;
        v22 = 1;
        goto LABEL_45;
      }
      if (v41[v25] != v19)
      {
LABEL_45:
        ++v21;
        v24 = v26;
        if (v20 == v21)
          goto LABEL_48;
        continue;
      }
      break;
    }
    if (!v22)
    {
      v22 = -1;
      goto LABEL_45;
    }
LABEL_47:
    v22 = 0;
LABEL_48:
    this = *(re::internal::GeomConnectivityNonManifold **)v29;
    if (*(_QWORD *)v29)
    {
      if (*(_QWORD *)&v31[2])
        this = (re::internal::GeomConnectivityNonManifold *)(*(uint64_t (**)(void))(**(_QWORD **)v29 + 40))();
    }
    if (((v22 * v13) & 0x80000000) == 0)
    {
LABEL_52:
      v6 = v27;
LABEL_4:
      v7 = *((_QWORD *)v2 + 8);
      if (v7 <= v6)
      {
        *(_QWORD *)v34 = 0;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        *(_OWORD *)v41 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v29 = 136315906;
        *(_QWORD *)&v29[4] = "operator[]";
        *(_WORD *)&v29[12] = 1024;
        *(_DWORD *)&v29[14] = 789;
        *(_WORD *)&v29[18] = 2048;
        *(_QWORD *)&v29[20] = v6;
        v30 = 2048;
        *(_QWORD *)v31 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      else
      {
        *(_BYTE *)(*((_QWORD *)v2 + 10) + v6) |= 2u;
        v7 = v28;
        v6 = *((_QWORD *)v2 + 8);
        if (v6 > v28)
        {
          *(_BYTE *)(*((_QWORD *)v2 + 10) + v28) |= 2u;
          v7 = *((_QWORD *)v2 + 8);
          if (v7 > v3)
          {
            v8 = 8;
            goto LABEL_13;
          }
LABEL_56:
          *(_QWORD *)v34 = 0;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          *(_OWORD *)v41 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v29 = 136315906;
          *(_QWORD *)&v29[4] = "operator[]";
          *(_WORD *)&v29[12] = 1024;
          *(_DWORD *)&v29[14] = 789;
          *(_WORD *)&v29[18] = 2048;
          *(_QWORD *)&v29[20] = v3;
          v30 = 2048;
          *(_QWORD *)v31 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_57:
          *(_QWORD *)v34 = 0;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          *(_OWORD *)v41 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v29 = 136315906;
          *(_QWORD *)&v29[4] = "operator[]";
          *(_WORD *)&v29[12] = 1024;
          *(_DWORD *)&v29[14] = 789;
          *(_WORD *)&v29[18] = 2048;
          *(_QWORD *)&v29[20] = v6;
          v30 = 2048;
          *(_QWORD *)v31 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_58:
          *(_QWORD *)v34 = 0;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          *(_OWORD *)v41 = 0u;
          v3 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v29 = 136315906;
          *(_QWORD *)&v29[4] = "operator[]";
          *(_WORD *)&v29[12] = 1024;
          *(_DWORD *)&v29[14] = 789;
          *(_WORD *)&v29[18] = 2048;
          *(_QWORD *)&v29[20] = v7;
          v30 = 2048;
          *(_QWORD *)v31 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_59:
          *(_QWORD *)v34 = 0;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          *(_OWORD *)v41 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v29 = 136315906;
          *(_QWORD *)&v29[4] = "operator[]";
          *(_WORD *)&v29[12] = 1024;
          *(_DWORD *)&v29[14] = 789;
          *(_WORD *)&v29[18] = 2048;
          *(_QWORD *)&v29[20] = v3;
          v30 = 2048;
          *(_QWORD *)v31 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_60:
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          *(_OWORD *)v41 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v34 = 136315906;
          *(_QWORD *)&v34[4] = "operator[]";
          v35 = 1024;
          v36 = 789;
          v37 = 2048;
          v38 = 0;
          v39 = 2048;
          v40 = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_61:
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          *(_OWORD *)v41 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v34 = 136315906;
          *(_QWORD *)&v34[4] = "operator[]";
          v35 = 1024;
          v36 = 789;
          v37 = 2048;
          v38 = 1;
          v39 = 2048;
          v40 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
      }
      *(_QWORD *)v34 = 0;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      *(_OWORD *)v41 = 0u;
      v3 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v29 = 136315906;
      *(_QWORD *)&v29[4] = "operator[]";
      *(_WORD *)&v29[12] = 1024;
      *(_DWORD *)&v29[14] = 789;
      *(_WORD *)&v29[18] = 2048;
      *(_QWORD *)&v29[20] = v7;
      v30 = 2048;
      *(_QWORD *)v31 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_56;
    }
LABEL_14:
    ++v3;
  }
  while (v3 != v4);
  return this;
}

uint64_t re::internal::GeomConnectivityNonManifold::fetchReachableFacesFromFaceVertex(re::internal::GeomConnectivityNonManifold *a1, unsigned __int32 a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  __int32 *v8;
  size_t v9;
  uint64_t result;
  __int32 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20[2];
  unsigned int v21[4];
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  v8 = (__int32 *)a4[4];
  v9 = a4[2];
  result = (uint64_t)wmemchr(v8, a2, v9);
  if (result)
    v11 = (__int32 *)result;
  else
    v11 = &v8[v9];
  if (v9 == v11 - v8)
  {
    re::DynamicArray<int>::add(a4, &v18);
    result = re::internal::GeomConnectivityNonManifold::faceIncidentEdges(a1, v18, v21);
    v12 = result;
    if ((_BYTE)result)
    {
      v13 = 0;
      while (1)
      {
        v14 = v21[v13];
        v15 = *((_QWORD *)a1 + 8);
        if (v15 <= v14)
          goto LABEL_27;
        if ((*(_BYTE *)(*((_QWORD *)a1 + 10) + v14) & 8) == 0)
        {
          result = re::internal::GeomConnectivityNonManifold::edgeVertices((uint64_t)a1, v21[v13], v20);
          if (v20[0] == (_DWORD)a3 || v20[1] == (_DWORD)a3)
          {
            v15 = *((_QWORD *)a1 + 38);
            if ((_DWORD)v14)
            {
              v4 = (v14 - 1);
              if (v15 <= v4)
                goto LABEL_29;
              v4 = *(unsigned int *)(*((_QWORD *)a1 + 40) + 4 * v4);
            }
            else
            {
              v4 = 0;
            }
            if (v15 <= v14)
              goto LABEL_28;
            v15 = *(unsigned int *)(*((_QWORD *)a1 + 40) + 4 * v14);
            if (v4 < v15)
              break;
          }
        }
LABEL_24:
        if (++v13 == v12)
          return result;
      }
      while (1)
      {
        v14 = *((_QWORD *)a1 + 43);
        if (v14 <= v4)
          break;
        v17 = *(unsigned int *)(*((_QWORD *)a1 + 45) + 4 * v4);
        if ((_DWORD)v17 != v18)
          result = re::internal::GeomConnectivityNonManifold::fetchReachableFacesFromFaceVertex(a1, v17, a3, a4);
        if (v15 == ++v4)
          goto LABEL_24;
      }
      v19 = 0;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v30 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v22 = 136315906;
      v23 = "operator[]";
      v24 = 1024;
      v25 = 797;
      v26 = 2048;
      v27 = v4;
      v28 = 2048;
      v29 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_27:
      v19 = 0;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v30 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v22 = 136315906;
      v23 = "operator[]";
      v24 = 1024;
      v25 = 797;
      v26 = 2048;
      v27 = v14;
      v28 = 2048;
      v29 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_28:
      v19 = 0;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v30 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v22 = 136315906;
      v23 = "operator[]";
      v24 = 1024;
      v25 = 797;
      v26 = 2048;
      v27 = v14;
      v28 = 2048;
      v29 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_29:
      v19 = 0;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v30 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v22 = 136315906;
      v23 = "operator[]";
      v24 = 1024;
      v25 = 797;
      v26 = 2048;
      v27 = v4;
      v28 = 2048;
      v29 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

unsigned int *re::internal::GeomConnectivityNonManifold::classifyVertices(unsigned int *this)
{
  uint64_t v1;
  re::internal::GeomConnectivityNonManifold *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  unsigned __int32 *v8;
  unsigned __int32 v9;
  uint64_t v10;
  _BYTE v11[28];
  __int16 v12;
  _BYTE v13[10];
  _BYTE v14[12];
  __int16 v15;
  int v16;
  __int16 v17;
  unint64_t v18;
  __int16 v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v1 = this[26];
  if (this[26])
  {
    v2 = (re::internal::GeomConnectivityNonManifold *)this;
    v3 = 0;
    do
    {
      if ((_DWORD)v3)
      {
        v4 = (v3 - 1);
        v5 = *((_QWORD *)v2 + 13);
        if (v5 <= v4)
          goto LABEL_33;
        v6 = *(_DWORD *)(*((_QWORD *)v2 + 15) + 4 * v4);
      }
      else
      {
        v6 = 0;
        v5 = *((_QWORD *)v2 + 13);
      }
      v4 = v3;
      if (v5 <= v3)
      {
        *(_QWORD *)v14 = 0;
        v24 = 0u;
        v25 = 0u;
        v23 = 0u;
        v21 = 0u;
        v22 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v11 = 136315906;
        *(_QWORD *)&v11[4] = "operator[]";
        *(_WORD *)&v11[12] = 1024;
        *(_DWORD *)&v11[14] = 797;
        *(_WORD *)&v11[18] = 2048;
        *(_QWORD *)&v11[20] = v3;
        v12 = 2048;
        *(_QWORD *)v13 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_31:
        v24 = 0u;
        v25 = 0u;
        v23 = 0u;
        v21 = 0u;
        v22 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v14 = 136315906;
        *(_QWORD *)&v14[4] = "operator[]";
        v15 = 1024;
        v16 = 797;
        v17 = 2048;
        v18 = v3;
        v19 = 2048;
        v20 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_32:
        *(_QWORD *)v14 = 0;
        v24 = 0u;
        v25 = 0u;
        v23 = 0u;
        v21 = 0u;
        v22 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v11 = 136315906;
        *(_QWORD *)&v11[4] = "operator[]";
        *(_WORD *)&v11[12] = 1024;
        *(_DWORD *)&v11[14] = 789;
        *(_WORD *)&v11[18] = 2048;
        *(_QWORD *)&v11[20] = v3;
        v12 = 2048;
        *(_QWORD *)v13 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_33:
        *(_QWORD *)v14 = 0;
        v24 = 0u;
        v25 = 0u;
        v23 = 0u;
        v21 = 0u;
        v22 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v11 = 136315906;
        *(_QWORD *)&v11[4] = "operator[]";
        *(_WORD *)&v11[12] = 1024;
        *(_DWORD *)&v11[14] = 797;
        *(_WORD *)&v11[18] = 2048;
        *(_QWORD *)&v11[20] = v4;
        v12 = 2048;
        *(_QWORD *)v13 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_34:
        v24 = 0u;
        v25 = 0u;
        v23 = 0u;
        v21 = 0u;
        v22 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v14 = 136315906;
        *(_QWORD *)&v14[4] = "operator[]";
        v15 = 1024;
        v16 = 789;
        v17 = 2048;
        v18 = v4;
        v19 = 2048;
        v20 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_35:
        v24 = 0u;
        v25 = 0u;
        v23 = 0u;
        v21 = 0u;
        v22 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v14 = 136315906;
        *(_QWORD *)&v14[4] = "operator[]";
        v15 = 1024;
        v16 = 789;
        v17 = 2048;
        v18 = v5;
        v19 = 2048;
        v20 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_36:
        v24 = 0u;
        v25 = 0u;
        v23 = 0u;
        v21 = 0u;
        v22 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v14 = 136315906;
        *(_QWORD *)&v14[4] = "operator[]";
        v15 = 1024;
        v16 = 789;
        v17 = 2048;
        v18 = v3;
        v19 = 2048;
        v20 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_37:
        v24 = 0u;
        v25 = 0u;
        v23 = 0u;
        v21 = 0u;
        v22 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v14 = 136315906;
        *(_QWORD *)&v14[4] = "operator[]";
        v15 = 1024;
        v16 = 789;
        v17 = 2048;
        v18 = 0;
        v19 = 2048;
        v20 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v7 = *(_DWORD *)(*((_QWORD *)v2 + 15) + 4 * v3);
      if (v7 == v6 || v7 - v6 > re::internal::GeomConnectivityNonManifold::vertexFaceCount(v2, v3) + 1)
      {
        v5 = *((_QWORD *)v2 + 8);
        if (v5 <= v3)
          goto LABEL_32;
        *(_BYTE *)(*((_QWORD *)v2 + 10) + v3) |= 2u;
      }
      ++v3;
    }
    while (v1 != v3);
    v3 = 0;
    *(_QWORD *)&v13[2] = 0;
    memset(v11, 0, sizeof(v11));
    do
    {
      v5 = *((_QWORD *)v2 + 8);
      if (v5 <= v3)
        goto LABEL_31;
      if ((*(_BYTE *)(*((_QWORD *)v2 + 10) + v3) & 2) == 0)
      {
        if (v3)
        {
          v4 = v3 - 1;
          v5 = *((_QWORD *)v2 + 18);
          if (v5 <= v3 - 1)
            goto LABEL_34;
          v5 = *(unsigned int *)(*((_QWORD *)v2 + 20) + 4 * v3 - 4);
          v4 = *((_QWORD *)v2 + 28);
          if (v4 <= v5)
            goto LABEL_35;
          v8 = (unsigned __int32 *)(*((_QWORD *)v2 + 30) + 4 * v5);
        }
        else
        {
          if (!*((_QWORD *)v2 + 28))
            goto LABEL_37;
          v8 = (unsigned __int32 *)*((_QWORD *)v2 + 30);
        }
        v9 = *v8;
        *(_QWORD *)&v11[16] = 0;
        ++*(_DWORD *)&v11[24];
        re::internal::GeomConnectivityNonManifold::fetchReachableFacesFromFaceVertex(v2, v9, v3, v11);
        v10 = *(_QWORD *)&v11[16];
        if (v10 != re::internal::GeomConnectivityNonManifold::vertexFaceCount(v2, v3))
        {
          v5 = *((_QWORD *)v2 + 8);
          if (v5 <= v3)
            goto LABEL_36;
          *(_BYTE *)(*((_QWORD *)v2 + 10) + v3) |= 2u;
        }
      }
      ++v3;
    }
    while (v1 != v3);
    this = *(unsigned int **)v11;
    if (*(_QWORD *)v11)
    {
      if (*(_QWORD *)&v13[2])
        return (unsigned int *)(*(uint64_t (**)(void))(**(_QWORD **)v11 + 40))();
    }
  }
  return this;
}

uint64_t re::internal::GeomConnectivityNonManifold::classifyFaces(re::internal::GeomConnectivityNonManifold *this)
{
  uint64_t v2;
  unint64_t i;
  unsigned int *v4;
  char v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  unsigned int *v9;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int j;
  int v21;
  unsigned int *v22;
  uint64_t result;
  _QWORD v24[2];
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29[4];
  int v30;
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  unsigned int *v35;
  __int16 v36;
  unsigned int *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v2 = *((unsigned int *)this + 26);
  v27 = 0;
  v24[1] = 0;
  v25 = 0;
  v24[0] = 0;
  v26 = 0;
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (unsigned int *)*((_QWORD *)this + 8);
      if ((unint64_t)v4 <= i)
        goto LABEL_29;
      v5 = *(_BYTE *)(*((_QWORD *)this + 10) + i);
      if ((v5 & 1) != 0)
      {
        re::internal::GeomConnectivityNonManifold::fetchVertexIncidentFaces(this, i, (uint64_t)v24);
        if (v25)
        {
          v6 = 0;
          v7 = 16 * (v5 & 1);
          v8 = 1;
          do
          {
            v4 = (unsigned int *)*(unsigned int *)(v27 + 4 * v6);
            v9 = (unsigned int *)*((_QWORD *)this + 8);
            if (v9 <= v4)
              goto LABEL_28;
            *((_BYTE *)v4 + *((_QWORD *)this + 10)) |= v7;
            v6 = v8;
          }
          while (v25 > v8++);
        }
      }
    }
  }
  v11 = *((_QWORD *)this + 48);
  if ((v11 & 0x3FFFFFFFCLL) != 0)
  {
    i = 0;
    v12 = (v11 >> 2);
    v4 = v29;
    v9 = &v29[1];
    do
    {
      v13 = re::internal::GeomConnectivityNonManifold::faceVertices(this, i, v29);
      v14 = 0;
      v15 = &v29[1];
      v16 = v13 - 1;
      do
      {
        v17 = v14 + 1;
        if (v14 + 1 < (unint64_t)v13)
        {
          v18 = (unsigned int *)v29[v14];
          v19 = v15;
          for (j = v16; j; --j)
          {
            v21 = *v19++;
            if ((_DWORD)v18 == v21)
            {
              v22 = (unsigned int *)*((_QWORD *)this + 8);
              if (v22 <= v18)
              {
                v28 = 0;
                v41 = 0u;
                v42 = 0u;
                v39 = 0u;
                v40 = 0u;
                v38 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                v30 = 136315906;
                v31 = "operator[]";
                v32 = 1024;
                v33 = 789;
                v34 = 2048;
                v35 = v18;
                v36 = 2048;
                v37 = v22;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_27:
                v28 = 0;
                v41 = 0u;
                v42 = 0u;
                v39 = 0u;
                v40 = 0u;
                v38 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                v30 = 136315906;
                v31 = "operator[]";
                v32 = 1024;
                v33 = 789;
                v34 = 2048;
                v35 = (unsigned int *)i;
                v36 = 2048;
                v37 = v22;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_28:
                *(_QWORD *)v29 = 0;
                v41 = 0u;
                v42 = 0u;
                v39 = 0u;
                v40 = 0u;
                v38 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                v30 = 136315906;
                v31 = "operator[]";
                v32 = 1024;
                v33 = 789;
                v34 = 2048;
                v35 = v4;
                v36 = 2048;
                v37 = v9;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_29:
                *(_QWORD *)v29 = 0;
                v41 = 0u;
                v42 = 0u;
                v39 = 0u;
                v40 = 0u;
                v38 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                v30 = 136315906;
                v31 = "operator[]";
                v32 = 1024;
                v33 = 797;
                v34 = 2048;
                v35 = (unsigned int *)i;
                v36 = 2048;
                v37 = v4;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
              }
              *((_BYTE *)v18 + *((_QWORD *)this + 10)) |= 2u;
              v22 = (unsigned int *)*((_QWORD *)this + 8);
              if ((unint64_t)v22 <= i)
                goto LABEL_27;
              *(_BYTE *)(*((_QWORD *)this + 10) + i) |= 0x20u;
            }
          }
        }
        --v16;
        ++v15;
        v14 = v17;
      }
      while (v17 != v13 - 1);
      ++i;
    }
    while (i != v12);
  }
  result = v24[0];
  if (v24[0])
  {
    if (v27)
      return (*(uint64_t (**)(void))(*(_QWORD *)v24[0] + 40))();
  }
  return result;
}

uint64_t re::internal::GeomConnectivityNonManifold::faceVertices(re::internal::GeomConnectivityNonManifold *this, int a2, unsigned int *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;

  v3 = (4 * a2);
  v4 = *((_QWORD *)this + 48);
  if (v4 <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  v5 = *((_QWORD *)this + 50);
  *a3 = *(_DWORD *)(v5 + 4 * v3);
  v6 = v3 | 1;
  if (v4 <= v6)
  {
LABEL_10:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  a3[1] = *(_DWORD *)(v5 + 4 * v6);
  v7 = v3 | 2;
  if (v4 <= v7)
  {
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  a3[2] = *(_DWORD *)(v5 + 4 * v7);
  v8 = v3 | 3;
  if (v4 <= v8)
    goto LABEL_12;
  v9 = *(_DWORD *)(v5 + 4 * v8);
  a3[3] = v9;
  if (v9 == -1)
    return 3;
  else
    return 4;
}

uint64_t re::internal::GeomConnectivityNonManifold::build(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  char v8;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  re::DynamicArray<re::GeomCell4>::operator=(a2 + 8, (uint64_t *)(a1 + 8));
  if (!*(_QWORD *)(a2 + 16))
    re::DynamicArray<re::BlendNode>::setCapacity((_QWORD *)(a2 + 8), 1uLL);
  re::internal::GeomConnectivityNonManifold::computeIncidenceRelations((_anonymous_namespace_ *)a2, (unsigned int *)a1);
  *(_QWORD *)(a2 + 64) = 0;
  ++*(_DWORD *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 264) >> 1;
  v5 = *(_DWORD *)(a2 + 104);
  if (v5 <= (*(_QWORD *)(a2 + 384) >> 2))
    v5 = *(_QWORD *)(a2 + 384) >> 2;
  if (v5 <= v4)
    v6 = v4;
  else
    v6 = v5;
  v8 = 0;
  re::DynamicArray<unsigned char>::resize((_QWORD *)(a2 + 48), v6, &v8);
  re::internal::GeomConnectivityNonManifold::classifyEdges((re::internal::GeomConnectivityNonManifold *)a2);
  re::internal::GeomConnectivityNonManifold::classifyVertices((unsigned int *)a2);
  re::internal::GeomConnectivityNonManifold::classifyFaces((re::internal::GeomConnectivityNonManifold *)a2);
  return 1;
}

_QWORD *re::HashBrown<re::internal::`anonymous namespace'::VertexPair,re::internal::`anonymous namespace'::EdgeData,re::internal::`anonymous namespace'::HashEdge,re::internal::`anonymous namespace'::HashEdge,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v6 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 17 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v6];
    v9 = v3[2];
    if (v9)
    {
      v10 = 0;
      for (i = 0; i < v9; ++i)
      {
        *(_QWORD *)(v3[1] + v10) = 0;
        v9 = v3[2];
        v10 += 16;
      }
    }
  }
  else
  {
    v9 = 0;
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v9;
  return result;
}

uint64_t re::HashBrown<re::internal::`anonymous namespace'::VertexPair,re::internal::`anonymous namespace'::EdgeData,re::internal::`anonymous namespace'::HashEdge,re::internal::`anonymous namespace'::HashEdge,void,false>::find(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int *v23;
  int v24;
  int v25;
  unint64_t v27;
  int8x16_t v28;
  int8x16_t v29;

  if (!a1[7])
    return -1;
  v4 = a1[2];
  if (v4 < 0x10 || !a1[3])
    return -1;
  v7 = v4 >> 4;
  v8 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (a3 ^ ((unint64_t)a3 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                        * (a3 ^ ((unint64_t)a3 >> 30))) >> 27));
  v11 = v10 ^ (v10 >> 31);
  if (v9 == v11)
    v11 = 0;
  v12 = v11 ^ v9;
  v13 = v12 % v7;
  v14 = *a1;
  v15 = vdupq_n_s8(v12 & 0x7F);
  v16 = (int8x16_t)xmmword_2260EE390;
  v17.i64[0] = -1;
  for (v17.i64[1] = -1; ; v17.i64[1] = -1)
  {
    v18 = *(int8x16_t *)(v14 + 16 * v13);
    v19 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v15, v18), v16)))), (int8x8_t)0x3830282018100800);
    v20 = __clz(__rbit64(v19));
    if (v20 <= 0x3F)
      break;
LABEL_15:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v18, v17), v16)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    v28 = v16;
    v29 = v15;
    if (++v13 == v7)
      v13 = 0;
    result = -1;
    v16 = v28;
    v15 = v29;
    v17.i64[0] = -1;
    if (v13 == v27)
      return result;
  }
  v21 = 16 * v13;
  while (1)
  {
    result = v20 + v21;
    v23 = (int *)(a1[1] + 16 * (v20 + v21));
    v25 = *v23;
    v24 = v23[1];
    if (v25 == a2 && v24 == a3)
      return result;
    if (v20 <= 0x3E)
    {
      v20 = __clz(__rbit64((-2 << v20) & v19));
      if (v20 < 0x40)
        continue;
    }
    goto LABEL_15;
  }
}

unsigned int *re::HashBrown<re::internal::`anonymous namespace'::VertexPair,re::internal::`anonymous namespace'::EdgeData,re::internal::`anonymous namespace'::HashEdge,re::internal::`anonymous namespace'::HashEdge,void,false>::internalAdd(_anonymous_namespace_ *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  _BOOL8 v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = 0xBF58476D1CE4E5B9 * (a2[1] ^ ((unint64_t)a2[1] >> 30));
  v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
  if (v9 == v11)
    v11 = 0;
  v12 = v11 ^ v9;
  v13 = v7 >> 4;
  v14 = v12 % (v7 >> 4);
  v15 = *(_QWORD *)a1;
  v16 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v14)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v16 >= 0x40)
  {
    do
    {
      if (v14 + 1 == v13)
        v14 = 0;
      else
        ++v14;
      v16 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v15 + 16 * v14)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v16 > 0x3F);
  }
  v17 = v15 + 16 * v14;
  v18 = *(unsigned __int8 *)(v17 + v16);
  *(_BYTE *)(v17 + v16) = v12 & 0x7F;
  v19 = v18 == 255;
  v20 = v16 + 16 * v14;
  v21 = *a3;
  v22 = (_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v20);
  *v22 = *(_QWORD *)a2;
  v22[1] = v21;
  v23 = *((_QWORD *)a1 + 4);
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v23 - v19;
  v24 = (unsigned int *)(*((_QWORD *)a1 + 1) + 16 * v20);
  v25 = 0xBF58476D1CE4E5B9 * (*v24 ^ ((unint64_t)*v24 >> 30));
  v26 = (0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) ^ ((0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) >> 31);
  v27 = v24[1] ^ ((unint64_t)v24[1] >> 30);
  v28 = (0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v27) ^ ((0xBF58476D1CE4E5B9 * v27) >> 27))) ^ ((0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v27) ^ ((0xBF58476D1CE4E5B9 * v27) >> 27))) >> 31);
  if (v26 == v28)
    v28 = 0;
  *((_QWORD *)a1 + 5) ^= v26 ^ v28;
  return v24 + 2;
}

uint64_t re::HashBrown<re::internal::`anonymous namespace'::VertexPair,re::internal::`anonymous namespace'::EdgeData,re::internal::`anonymous namespace'::HashEdge,re::internal::`anonymous namespace'::HashEdge,void,false>::resize(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __n128 v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[2];
  uint64_t v26;
  __int128 v27;
  _BYTE v28[48];

  v3 = a1[2];
  v2 = a1[3];
  v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7)
    v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = (v5 << 7) / 0x97;
  v7 = a1[7];
  v27 = 0u;
  *(_OWORD *)v28 = 0u;
  if (v4 <= v3)
    v8 = v2 + 1;
  else
    v8 = v6;
  memset(&v28[16], 0, 32);
  v25[0] = a1;
  v10 = a1[2];
  if (v10 >= 0x10)
  {
    v11 = 0;
    v12 = v10 >> 4;
    v13 = (__n128)xmmword_2260EE390;
    v9.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v14 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      if (v14 != 0xFFFF)
        break;
      v11 += 16;
      if (!--v12)
        goto LABEL_14;
    }
    v15 = __clz(__rbit64((unsigned __int16)~v14)) + v11;
    v25[1] = (unsigned __int16)~v14;
    v26 = v15;
    if (v15 != -1)
    {
      do
      {
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v25);
        v15 = v26;
      }
      while (v26 != -1);
      v10 = a1[2];
    }
  }
LABEL_14:
  v17 = *(_QWORD *)&v28[40];
  *(_QWORD *)&v28[40] = a1[7];
  result = *(_QWORD *)&v28[40];
  v18 = v27;
  v19 = *(_OWORD *)v28;
  *(_QWORD *)v28 = v10;
  v20 = *a1;
  v21 = a1[1];
  *(_QWORD *)&v27 = *a1;
  *((_QWORD *)&v27 + 1) = v21;
  v22 = *(_OWORD *)&v28[16];
  v23 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v28[32];
  a1[7] = v17;
  *(_OWORD *)&v28[24] = v23;
  v24 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v18;
  *((_OWORD *)a1 + 1) = v19;
  *((_OWORD *)a1 + 2) = v22;
  *(_OWORD *)&v28[8] = v24;
  if (result)
  {
    if (v21)
      *((_QWORD *)&v27 + 1) = 0;
    if (v20)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

re *re::GeomMesh::setName(re *this, const char *__s)
{
  uint64_t v2;
  re *v4;
  uint64_t *v5;
  re *v6;
  char *v7;
  uint64_t *v8;
  char *v9;

  v2 = *(_QWORD *)this;
  if (*(const char **)this != __s)
  {
    v4 = this;
    if (v2)
    {
      v5 = re::globalAllocators(this);
      this = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5[2] + 40))(v5[2], v2);
      *(_QWORD *)v4 = 0;
    }
    if (__s)
    {
      v6 = (re *)strlen(__s);
      v7 = (char *)v6 + 1;
      v8 = re::globalAllocators(v6);
      v9 = (char *)(*(uint64_t (**)(uint64_t, char *, _QWORD))(*(_QWORD *)v8[2] + 32))(v8[2], v7, 0);
      *(_QWORD *)v4 = v9;
      return (re *)strcpy(v9, __s);
    }
    else
    {
      *(_QWORD *)v4 = 0;
    }
  }
  return this;
}

_QWORD *re::GeomMesh::clearComponents(re::GeomMesh *this, re::GeomAttribute *a2)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = re::globalAllocators(this);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4[2] + 40))(v4[2], v3);
    *(_QWORD *)this = 0;
  }
  *((_QWORD *)this + 91) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  ++*((_DWORD *)this + 12);
  return re::internal::GeomAttributeManager::clear((re::GeomMesh *)((char *)this + 64), a2);
}

re::GeomMesh *re::GeomMesh::GeomMesh(re::GeomMesh *this, const char *a2)
{
  re::internal::GeomBaseMesh *v4;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  v4 = (re::GeomMesh *)((char *)this + 16);
  bzero((char *)this + 16, 0x2C8uLL);
  re::internal::GeomBaseMesh::GeomBaseMesh(v4);
  re::GeomMesh::setName(this, a2);
  *((_QWORD *)this + 91) = re::internal::GeomAttributeManager::addAttribute((re::GeomMesh *)((char *)this + 64), "vertexPosition", 1, 7);
  return this;
}

re::GeomMesh *re::GeomMesh::copy(re::GeomMesh *this, re::GeomMesh *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (this != a2)
  {
    v3 = (uint64_t)this;
    re::GeomMesh::clearComponents(a2, a2);
    *((_QWORD *)a2 + 91) = re::internal::GeomAttributeManager::addAttribute((re::GeomMesh *)((char *)a2 + 64), "vertexPosition", 1, 7);
    re::GeomMesh::setName(a2, *(const char **)v3);
    this = (re::GeomMesh *)re::internal::GeomBaseMesh::operator=((uint64_t)a2 + 16, v3 + 16);
    *((_DWORD *)a2 + 2) = *(_DWORD *)(v3 + 8);
    v4 = *(_QWORD *)(v3 + 728);
    if (v4)
    {
      this = (re::GeomMesh *)re::internal::GeomAttributeManager::attributeByName((re::GeomMesh *)((char *)a2 + 64), *(const char **)(v4 + 8));
      *((_QWORD *)a2 + 91) = this;
    }
  }
  return this;
}

void re::GeomMesh::~GeomMesh(re::GeomMesh *this, re::GeomAttribute *a2)
{
  uint64_t v3;

  re::GeomMesh::clearComponents(this, a2);
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::GeomMesh *)((char *)this + 64));
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    if (*((_QWORD *)this + 7))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 3) = 0;
    ++*((_DWORD *)this + 12);
  }
}

uint64_t re::internal::GeomBaseMesh::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = (_QWORD *)(a1 + 8);
  re::DynamicArray<re::GeomCell4>::operator=(a1 + 8, (uint64_t *)(a2 + 8));
  if (!*(_QWORD *)(a1 + 16))
    re::DynamicArray<re::BlendNode>::setCapacity(v4, 1uLL);
  re::internal::GeomAttributeManager::copy((re::internal::GeomAttributeContainer *)(a2 + 48), (re::internal::GeomAttributeManager *)(a1 + 48));
  return a1;
}

re::GeomAttribute *re::GeomMesh::addAttribute(uint64_t a1, char *a2, int a3, int a4)
{
  re::GeomAttribute *v4;

  if (a3 == 3)
    return 0;
  v4 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)(a1 + 64), a2, a3, a4);
  if (v4 && !strcmp(a2, "vertexPosition"))
    *(_QWORD *)(a1 + 728) = v4;
  return v4;
}

uint64_t re::GeomMesh::addFaceVaryingAttribute(uint64_t a1, const char *a2, uint64_t a3, int a4, uint64_t *a5)
{
  _QWORD *v8;
  uint64_t v9;
  int v11;
  _QWORD v12[5];

  v11 = a4;
  v8 = (_QWORD *)re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)v12, a5);
  if (!v12[1])
    re::DynamicArray<re::BlendNode>::setCapacity(v8, 1uLL);
  v9 = re::internal::GeomBaseMesh::addFaceVaryingAttribute(a1 + 16, a2, a3, (uint64_t)&v11);
  if (v12[0] && v12[4])
    (*(void (**)(_QWORD))(*(_QWORD *)v12[0] + 40))(v12[0]);
  return v9;
}

uint64_t re::GeomMesh::addFaceVaryingAttribute(uint64_t a1, const char *a2, uint64_t a3, int a4, uint64_t *a5, uint64_t *a6)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[5];
  int v14;
  _QWORD v15[5];

  v14 = a4;
  v10 = (_QWORD *)re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)v15, a5);
  if (!v15[1])
    re::DynamicArray<re::BlendNode>::setCapacity(v10, 1uLL);
  re::DynamicArray<float>::DynamicArray((uint64_t)v13, a6);
  v11 = re::internal::GeomBaseMesh::addFaceVaryingAttribute((_anonymous_namespace_ *)(a1 + 16), a2, a3, (uint64_t)&v14, (uint64_t)v13);
  if (v13[0] && v13[4])
    (*(void (**)(void))(*(_QWORD *)v13[0] + 40))();
  if (v15[0] && v15[4])
    (*(void (**)(void))(*(_QWORD *)v15[0] + 40))();
  return v11;
}

re::GeomAttribute *re::internal::GeomBaseMesh::replaceVertexAttributeWithFaceVaryingAttribute(re::internal::GeomBaseMesh *this, char *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  re::GeomAttribute *v15;
  uint64_t v16;
  re::GeomAttribute *result;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  int v37;
  const char *v38;
  __int16 v39;
  _BYTE v40[24];
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD v48[12];

  v48[11] = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned int *)this + 6);
  v32 = *(_DWORD *)this;
  v5 = (_QWORD *)re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v33, (uint64_t *)this + 1);
  if (!(_QWORD)v34)
    re::DynamicArray<re::BlendNode>::setCapacity(v5, 1uLL);
  v31 = 0;
  v28[1] = 0;
  v29 = 0;
  v27 = 0;
  v28[0] = 0;
  v30 = 0;
  v24[1] = 0;
  v25 = 0;
  v24[0] = 0;
  v26 = 0;
  re::DynamicArray<unsigned int>::resize(v28, v4, &re::kInvalidMeshIndex);
  re::DynamicArray<unsigned int>::resize(v24, v4, &re::kInvalidMeshIndex);
  if (v4)
  {
    v6 = 0;
    v7 = v25;
    v8 = v27;
    v9 = v29;
    v10 = v31;
    do
    {
      if (v7 == v6)
      {
        v18 = 0;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v43 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v37 = 136315906;
        v38 = "operator[]";
        v39 = 1024;
        *(_DWORD *)v40 = 789;
        *(_WORD *)&v40[4] = 2048;
        *(_QWORD *)&v40[6] = v7;
        *(_WORD *)&v40[14] = 2048;
        *(_QWORD *)&v40[16] = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_43:
        v18 = 0;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v43 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v37 = 136315906;
        v38 = "operator[]";
        v39 = 1024;
        *(_DWORD *)v40 = 789;
        *(_WORD *)&v40[4] = 2048;
        *(_QWORD *)&v40[6] = v9;
        *(_WORD *)&v40[14] = 2048;
        *(_QWORD *)&v40[16] = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(v8 + 4 * v6) = v6;
      if (v9 == v6)
        goto LABEL_43;
      *(_DWORD *)(v10 + 4 * v6) = v6;
      ++v6;
    }
    while (v4 != v6);
  }
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v37, (uint64_t)v28);
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v18, (uint64_t)v24);
  LODWORD(v43) = v32;
  *((_QWORD *)&v43 + 1) = v33;
  v44 = v34;
  *((_QWORD *)&v45 + 1) = v36;
  v36 = 0;
  LODWORD(v45) = 1;
  v32 = 0;
  v33 = 0;
  v34 = 0uLL;
  v35 += 2;
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v46, (uint64_t)&v37);
  re::GeomIndexMap::GeomIndexMap((uint64_t)v48, (uint64_t)&v18);
  if (!v19)
    goto LABEL_19;
  if (v19 == 2)
  {
    v12 = v23;
    if (!v23)
      goto LABEL_19;
    if (v21)
      v21 = 0;
    v11 = v20;
    if (!v20)
      goto LABEL_19;
LABEL_18:
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    goto LABEL_19;
  }
  if (v19 != 1)
  {
    re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
    goto LABEL_45;
  }
  v12 = v20;
  if (v20)
  {
    v11 = v22;
    if (v22)
      goto LABEL_18;
  }
LABEL_19:
  if (!(_BYTE)v39)
    goto LABEL_32;
  if (v39 == 2)
  {
    v13 = v42;
    if (!v42)
      goto LABEL_32;
    if (*(_QWORD *)&v40[10])
      *(_QWORD *)&v40[10] = 0;
    if (!*(_QWORD *)&v40[2])
      goto LABEL_32;
    v14 = (uint64_t *)&v40[2];
LABEL_30:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    goto LABEL_31;
  }
  if (v39 != 1)
  {
LABEL_45:
    re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    result = (re::GeomAttribute *)_os_crash();
    __break(1u);
    return result;
  }
  v13 = *(_QWORD *)&v40[2];
  if (!*(_QWORD *)&v40[2])
    goto LABEL_32;
  v14 = &v41;
  if (v41)
    goto LABEL_30;
LABEL_31:
  *v14 = 0;
LABEL_32:
  v15 = re::internal::GeomAttributeManager::replaceVertexWithFaceVaryingAttribute((uint64_t *)this + 6, a2, (re *)&v43);
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v43, v16);
  if (v24[0] && v27)
    (*(void (**)(void))(*(_QWORD *)v24[0] + 40))();
  if (v28[0] && v31)
    (*(void (**)(void))(*(_QWORD *)v28[0] + 40))();
  if (v33)
  {
    if (v36)
      (*(void (**)(void))(*(_QWORD *)v33 + 40))();
  }
  return v15;
}

re::GeomAttribute *re::internal::GeomBaseMesh::replaceFaceAttributeWithFaceVaryingAttribute(re::internal::GeomBaseMesh *this, char *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  re::GeomAttribute *v21;
  uint64_t v22;
  re::GeomAttribute *result;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  int v43;
  const char *v44;
  __int16 v45;
  _BYTE v46[24];
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD v54[14];

  v54[11] = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)this + 3);
  v6 = v5;
  v42 = 0;
  v40 = 0uLL;
  v41 = 0;
  re::DynamicArray<re::BlendNode>::setCapacity(&v39, 1uLL);
  v37 = 0;
  v34[1] = 0;
  v35 = 0;
  v33 = 0;
  v34[0] = 0;
  v36 = 0;
  v30[1] = 0;
  v31 = 0;
  v30[0] = 0;
  v32 = 0;
  ++v41;
  v38 = v5;
  re::DynamicArray<re::GeomCell4>::resize(&v39, v5);
  re::DynamicArray<unsigned int>::resize(v34, v5, &re::kInvalidMeshIndex);
  re::DynamicArray<unsigned int>::resize(v30, v5, &re::kInvalidMeshIndex);
  if ((_DWORD)v5)
  {
    v7 = 0;
    v8 = v31;
    v9 = v33;
    v10 = v35;
    v11 = v37;
    v12 = 12;
    v13 = *((_QWORD *)&v40 + 1);
    v14 = v42;
    do
    {
      if (v8 == v7)
      {
        v24 = 0;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v49 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v43 = 136315906;
        v44 = "operator[]";
        v45 = 1024;
        *(_DWORD *)v46 = 789;
        *(_WORD *)&v46[4] = 2048;
        *(_QWORD *)&v46[6] = v8;
        *(_WORD *)&v46[14] = 2048;
        *(_QWORD *)&v46[16] = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_46:
        v24 = 0;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v49 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v43 = 136315906;
        v44 = "operator[]";
        v45 = 1024;
        *(_DWORD *)v46 = 789;
        *(_WORD *)&v46[4] = 2048;
        *(_QWORD *)&v46[6] = v10;
        *(_WORD *)&v46[14] = 2048;
        *(_QWORD *)&v46[16] = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_47:
        v24 = 0;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v49 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v43 = 136315906;
        v44 = "operator[]";
        v45 = 1024;
        *(_DWORD *)v46 = 797;
        *(_WORD *)&v46[4] = 2048;
        *(_QWORD *)&v46[6] = v7;
        *(_WORD *)&v46[14] = 2048;
        *(_QWORD *)&v46[16] = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_48:
        v24 = 0;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v49 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v43 = 136315906;
        v44 = "operator[]";
        v45 = 1024;
        *(_DWORD *)v46 = 789;
        *(_WORD *)&v46[4] = 2048;
        *(_QWORD *)&v46[6] = v13;
        *(_WORD *)&v46[14] = 2048;
        *(_QWORD *)&v46[16] = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(v9 + 4 * v7) = v7;
      if (v10 == v7)
        goto LABEL_46;
      *(_DWORD *)(v11 + 4 * v7) = v7;
      v2 = *((_QWORD *)this + 3);
      if (v2 <= v7)
        goto LABEL_47;
      if (v13 == v7)
        goto LABEL_48;
      if (*(_DWORD *)(*((_QWORD *)this + 5) + v12) == -1)
        v15 = -1;
      else
        v15 = v7;
      v16 = (int *)(v14 + v12);
      *(v16 - 3) = v7;
      *(v16 - 2) = v7;
      *(v16 - 1) = v7;
      *v16 = v15;
      ++v7;
      v12 += 16;
    }
    while (v6 != v7);
  }
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v43, (uint64_t)v34);
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v24, (uint64_t)v30);
  LODWORD(v49) = v38;
  *((_QWORD *)&v49 + 1) = v39;
  v50 = v40;
  *((_QWORD *)&v51 + 1) = v42;
  v42 = 0;
  LODWORD(v51) = 1;
  v38 = 0;
  v39 = 0;
  v40 = 0uLL;
  v41 += 2;
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v52, (uint64_t)&v43);
  re::GeomIndexMap::GeomIndexMap((uint64_t)v54, (uint64_t)&v24);
  if (!v25)
    goto LABEL_22;
  if (v25 == 2)
  {
    v18 = v29;
    if (!v29)
      goto LABEL_22;
    if (v27)
      v27 = 0;
    v17 = v26;
    if (!v26)
      goto LABEL_22;
LABEL_21:
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    goto LABEL_22;
  }
  if (v25 != 1)
  {
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
    goto LABEL_50;
  }
  v18 = v26;
  if (v26)
  {
    v17 = v28;
    if (v28)
      goto LABEL_21;
  }
LABEL_22:
  if (!(_BYTE)v45)
    goto LABEL_35;
  if (v45 == 2)
  {
    v19 = v48;
    if (!v48)
      goto LABEL_35;
    if (*(_QWORD *)&v46[10])
      *(_QWORD *)&v46[10] = 0;
    if (!*(_QWORD *)&v46[2])
      goto LABEL_35;
    v20 = (uint64_t *)&v46[2];
LABEL_33:
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    goto LABEL_34;
  }
  if (v45 != 1)
  {
LABEL_50:
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    result = (re::GeomAttribute *)_os_crash();
    __break(1u);
    return result;
  }
  v19 = *(_QWORD *)&v46[2];
  if (!*(_QWORD *)&v46[2])
    goto LABEL_35;
  v20 = &v47;
  if (v47)
    goto LABEL_33;
LABEL_34:
  *v20 = 0;
LABEL_35:
  v21 = re::internal::GeomAttributeManager::replaceFaceWithFaceVaryingAttribute((uint64_t *)this + 6, a2, (re *)&v49);
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v49, v22);
  if (v30[0] && v33)
    (*(void (**)(void))(*(_QWORD *)v30[0] + 40))();
  if (v34[0] && v37)
    (*(void (**)(void))(*(_QWORD *)v34[0] + 40))();
  if (v39)
  {
    if (v42)
      (*(void (**)(void))(*v39 + 40))();
  }
  return v21;
}

uint64_t re::GeomMesh::accessVertexPositions(re::GeomMesh *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 91);
  if (!v1)
    return 0;
  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v1 + 16))(*((_QWORD *)this + 91)))
    return 0;
  v2 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v1, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return v2;
}

uint64_t re::GeomMesh::modifyVertexPositions(re::GeomMesh *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 91);
  if (!v1)
    return 0;
  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v1 + 16))(*((_QWORD *)this + 91)))
    return 0;
  v2 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v1, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return v2;
}

uint64_t re::GeomMesh::GeomMesh(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  re::internal::GeomBaseMesh::GeomBaseMesh(a1 + 16, a2 + 16);
  *(_QWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 728) = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), "vertexPosition");
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 728) = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)(a2 + 64), "vertexPosition", 1, 7);
  return a1;
}

{
  uint64_t v3;
  int v4;
  _DWORD *v5;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  re::internal::GeomBaseMesh::GeomBaseMesh(a1 + 16, a2);
  *(_QWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 728) = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), "vertexPosition");
  v3 = *(unsigned int *)(a1 + 40);
  if (*(_DWORD *)(a1 + 40))
  {
    v4 = 0;
    v5 = (_DWORD *)(*(_QWORD *)(a1 + 56) + 8);
    do
    {
      if (*(v5 - 2) != -1 && *(v5 - 1) != -1 && *v5 != -1 && v5[1] == -1)
        ++v4;
      v5 += 4;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  *(_DWORD *)(a1 + 8) = v4;
  return a1;
}

uint64_t *re::GeomMesh::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  re::internal::GeomAttributeManager *v6;
  re::GeomAttribute *v7;

  if (a1 != a2)
  {
    v4 = *a1;
    if (*a1)
    {
      v5 = re::globalAllocators((re *)a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5[2] + 40))(v5[2], v4);
      *a1 = 0;
    }
    *a1 = *a2;
    *a2 = 0;
    *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    re::DynamicArray<re::GeomConnectivityManifold::HalfEdge>::operator=((uint64_t)(a1 + 3), (uint64_t)(a2 + 3));
    v6 = re::internal::GeomAttributeManager::operator=((re::internal::GeomAttributeContainer *)(a1 + 8), (uint64_t)(a2 + 8));
    a1[91] = re::internal::GeomAttributeManager::attributeByName(v6, "vertexPosition");
    re::GeomMesh::clearComponents((re::GeomMesh *)a2, v7);
    a2[91] = (uint64_t)re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)(a2 + 8), "vertexPosition", 1, 7);
  }
  return a1;
}

uint64_t re::GeomMesh::operator=(uint64_t a1, _DWORD *a2)
{
  re::internal::GeomAttributeManager *v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;

  if ((_DWORD *)(a1 + 16) != a2)
  {
    *(_DWORD *)(a1 + 16) = *a2;
    re::DynamicArray<re::GeomConnectivityManifold::HalfEdge>::operator=(a1 + 24, (uint64_t)(a2 + 2));
    v4 = re::internal::GeomAttributeManager::operator=((re::internal::GeomAttributeContainer *)(a1 + 64), (uint64_t)(a2 + 12));
    *(_QWORD *)(a1 + 728) = re::internal::GeomAttributeManager::attributeByName(v4, "vertexPosition");
    v5 = *(unsigned int *)(a1 + 40);
    if (*(_DWORD *)(a1 + 40))
    {
      v6 = 0;
      v7 = (_DWORD *)(*(_QWORD *)(a1 + 56) + 8);
      do
      {
        if (*(v7 - 2) != -1 && *(v7 - 1) != -1 && *v7 != -1 && v7[1] == -1)
          ++v6;
        v7 += 4;
        --v5;
      }
      while (v5);
    }
    else
    {
      v6 = 0;
    }
    *(_DWORD *)(a1 + 8) = v6;
  }
  return a1;
}

uint64_t re::GeomMesh::updateFaceVaryingAttribute(uint64_t a1, char *a2, int a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9;
  _QWORD *v10;
  _anonymous_namespace_ *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD v29[2];
  unint64_t v30;
  uint64_t v31;
  _OWORD v32[3];
  __int128 v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  int v39;
  const char *v40;
  __int16 v41;
  _BYTE v42[24];
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[5];
  _QWORD v49[12];

  v49[11] = *MEMORY[0x24BDAC8D0];
  v9 = a5[2];
  v10 = (_QWORD *)(a1 + 64);
  re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), a2);
  v34 = a3;
  v11 = (_anonymous_namespace_ *)re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v35, a4);
  if (!(_QWORD)v36)
    v11 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendNode>::setCapacity(v11, 1uLL);
  v33 = 0u;
  memset(v32, 0, sizeof(v32));
  re::DynamicArray<float>::DynamicArray((uint64_t)v29, a5);
  v28 = 0;
  if ((_DWORD)v9)
  {
    v12 = 0;
    do
    {
      v27 = 0;
      v13 = v12;
      v14 = v30;
      if (v30 <= v12)
      {
        v21 = 0;
        memset(v48, 0, 32);
        v46 = 0u;
        v47 = 0u;
        v45 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v39 = 136315906;
        v40 = "operator[]";
        v41 = 1024;
        *(_DWORD *)v42 = 789;
        *(_WORD *)&v42[4] = 2048;
        *(_QWORD *)&v42[6] = v13;
        *(_WORD *)&v42[14] = 2048;
        *(_QWORD *)&v42[16] = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v27 = *(_DWORD *)(v31 + 4 * v12);
      re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::addOrReplace((_anonymous_namespace_ *)v32, &v27, &v28);
      v12 = v28 + 1;
      v28 = v12;
    }
    while (v12 < v9);
  }
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v39, (uint64_t)v29);
  re::GeomIndexMap::GeomIndexMap((unsigned int *)&v21, (uint64_t *)v32);
  LODWORD(v45) = v34;
  *((_QWORD *)&v45 + 1) = v35;
  v46 = v36;
  *((_QWORD *)&v47 + 1) = v38;
  v38 = 0;
  LODWORD(v47) = 1;
  v34 = 0;
  v35 = 0;
  v36 = 0uLL;
  v37 += 2;
  re::GeomIndexMap::GeomIndexMap((uint64_t)v48, (uint64_t)&v39);
  re::GeomIndexMap::GeomIndexMap((uint64_t)v49, (uint64_t)&v21);
  if (!v22)
    goto LABEL_18;
  if (v22 == 2)
  {
    v16 = v26;
    if (!v26)
      goto LABEL_18;
    if (v24)
      v24 = 0;
    v15 = v23;
    if (!v23)
      goto LABEL_18;
LABEL_17:
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    goto LABEL_18;
  }
  if (v22 != 1)
  {
    re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
    goto LABEL_45;
  }
  v16 = v23;
  if (v23)
  {
    v15 = v25;
    if (v25)
      goto LABEL_17;
  }
LABEL_18:
  if (!(_BYTE)v41)
    goto LABEL_31;
  if (v41 == 2)
  {
    v17 = v44;
    if (!v44)
      goto LABEL_31;
    if (*(_QWORD *)&v42[10])
      *(_QWORD *)&v42[10] = 0;
    if (!*(_QWORD *)&v42[2])
      goto LABEL_31;
    v18 = (uint64_t *)&v42[2];
LABEL_29:
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
    goto LABEL_30;
  }
  if (v41 != 1)
  {
LABEL_45:
    re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v17 = *(_QWORD *)&v42[2];
  if (!*(_QWORD *)&v42[2])
    goto LABEL_31;
  v18 = &v43;
  if (v43)
    goto LABEL_29;
LABEL_30:
  *v18 = 0;
LABEL_31:
  re::internal::GeomAttributeManager::updateFaceVaryingAttributeSubmesh(v10, a2, (uint64_t)&v45);
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v45, v19);
  if (v29[0] && v31)
    (*(void (**)(void))(*(_QWORD *)v29[0] + 40))();
  if (*((_QWORD *)&v33 + 1))
  {
    if (*((_QWORD *)&v32[0] + 1))
      *((_QWORD *)&v32[0] + 1) = 0;
    if (*(_QWORD *)&v32[0])
      (*(void (**)(void))(**((_QWORD **)&v33 + 1) + 40))();
  }
  result = v35;
  if (v35)
  {
    if (v38)
      return (*(uint64_t (**)(void))(*(_QWORD *)v35 + 40))();
  }
  return result;
}

uint64_t re::GeomMesh::updateFaceVaryingAttribute(uint64_t a1, char *a2, int a3, uint64_t a4)
{
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  uint64_t v42;

  v7 = *(_DWORD *)(a4 + 16);
  v8 = (_QWORD *)(a1 + 64);
  re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), a2);
  v38 = a3;
  v9 = (_QWORD *)re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v39, (uint64_t *)a4);
  if (!(_QWORD)v40)
    re::DynamicArray<re::BlendNode>::setCapacity(v9, 1uLL);
  v10 = 0xFFFFFFFF00000000;
  v30 = 0xFFFFFFFF00000000;
  v31 = -1;
  v32 = 0;
  v11 = v7 - 1;
  if (v7 - 1 >= 0xFFFFFFFE)
  {
    LODWORD(v33) = 0;
    v11 = -1;
  }
  else
  {
    v30 = v7;
    v31 = v7 - 1;
    LODWORD(v33) = v7;
    v10 = v7;
  }
  v25 = 0;
  v24 = v11;
  v23 = v10;
  LODWORD(v26) = v10;
  LODWORD(v16) = v38;
  v17 = v39;
  v18 = v40;
  v20 = v42;
  v42 = 0;
  LODWORD(v19) = 1;
  v38 = 0;
  v39 = 0;
  v40 = 0uLL;
  v41 += 2;
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v21, (uint64_t)&v30);
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v22, (uint64_t)&v23);
  re::internal::GeomAttributeManager::updateFaceVaryingAttributeSubmesh(v8, a2, (uint64_t)&v16);
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v16, v12);
  if (!v25)
    goto LABEL_17;
  if (v25 == 2)
  {
    v14 = v29;
    if (!v29)
      goto LABEL_17;
    if (v27)
      v27 = 0;
    v13 = v26;
    if (!v26)
      goto LABEL_17;
LABEL_16:
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    goto LABEL_17;
  }
  if (v25 != 1)
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625, v16, v17, v18, v19, v20);
    _os_crash();
    __break(1u);
    goto LABEL_35;
  }
  v14 = v26;
  if (v26)
  {
    v13 = v28;
    if (v28)
      goto LABEL_16;
  }
LABEL_17:
  if (v32 == 2)
  {
    if (v37)
    {
      if (v34)
        v34 = 0;
      if (v33)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
        v33 = 0;
      }
    }
    goto LABEL_30;
  }
  if (v32 == 1)
  {
    if (v33)
    {
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33);
      v33 = 0;
      v34 = 0;
      v35 = 0;
    }
    goto LABEL_30;
  }
  if (v32)
  {
LABEL_35:
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    result = _os_crash();
    __break(1u);
    return result;
  }
  LODWORD(v33) = 0;
LABEL_30:
  result = v39;
  if (v39)
  {
    if (v42)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
  }
  return result;
}

uint64_t re::internal::GeomBaseMesh::GeomBaseMesh(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v4;
  ++*(_DWORD *)(a2 + 32);
  ++*(_DWORD *)(a1 + 32);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 24) = 0;
  ++*(_DWORD *)(a2 + 32);
  re::internal::GeomAttributeManager::GeomAttributeManager(a1 + 48, a2 + 48);
  return a1;
}

uint64_t re::computeGradientField(unint64_t *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float v36;
  unint64_t v37;
  _QWORD *v38;

  re::DynamicArray<re::Vector3<float>>::resize(a3, *((unsigned int *)a1 + 10));
  result = re::GeomMesh::accessVertexPositions((re::GeomMesh *)a1);
  v11 = a1[5];
  if ((_DWORD)v11)
  {
    v12 = 0;
    do
    {
      if (v11 <= v12)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_25:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_26:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_27:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_28:
        re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v14);
        _os_crash();
        __break(1u);
LABEL_29:
        re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, v14);
        _os_crash();
        __break(1u);
LABEL_30:
        re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v4, v14);
        _os_crash();
        __break(1u);
LABEL_31:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_32:
        re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v5, v14);
        _os_crash();
        __break(1u);
LABEL_33:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_34:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_35:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_36:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v13 = (unsigned int *)(a1[7] + 16 * v12);
      v11 = *v13;
      if (v11 >= v10)
        goto LABEL_25;
      v3 = v13[1];
      if (v3 >= v10)
        goto LABEL_26;
      v4 = v13[2];
      if (v4 >= v10)
        goto LABEL_27;
      v14 = a2[1];
      if (v14 <= v11)
        goto LABEL_28;
      if (v14 <= v3)
        goto LABEL_29;
      if (v14 <= v4)
        goto LABEL_30;
      v15 = *(float *)(*a2 + 4 * v11);
      v5 = v13[3];
      v16 = *(float *)(*a2 + 4 * v3);
      v17 = *(float *)(*a2 + 4 * v4);
      if ((_DWORD)v5 == -1)
      {
        v5 = *(_QWORD *)(a3 + 16);
        if (v5 <= v12)
          goto LABEL_36;
        v28 = *(float32x4_t *)(result + 16 * v3);
        v29 = *(float32x4_t *)(result + 16 * v11);
        v30 = vsubq_f32(v28, v29);
        v31 = *(float32x4_t *)(result + 16 * v4);
        v32 = vsubq_f32(v31, v29);
        v33 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32), (int8x16_t)v32, 0xCuLL), vnegq_f32(v30)), v32, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL));
        v25 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), v33, 0xCuLL);
        v34 = vaddq_f32(vmulq_n_f32(v30, v17), vaddq_f32(vmulq_n_f32(vsubq_f32(v31, v28), v15), vmulq_n_f32(vsubq_f32(v29, v31), v16)));
        v27 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL), vnegq_f32(v25)), v34, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL));
      }
      else
      {
        if (v5 >= v10)
          goto LABEL_31;
        if (v14 <= v5)
          goto LABEL_32;
        if (*(_QWORD *)(a3 + 16) <= v12)
          goto LABEL_33;
        v18 = *(float32x4_t *)(result + 16 * v4);
        v19 = *(float32x4_t *)(result + 16 * v11);
        v20 = vsubq_f32(v18, v19);
        v21 = *(float32x4_t *)(result + 16 * v5);
        v22 = *(float32x4_t *)(result + 16 * v3);
        v23 = vsubq_f32(v21, v22);
        v24 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL), vnegq_f32(v20)), v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL));
        v25 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), v24, 0xCuLL);
        v26 = vaddq_f32(vmulq_n_f32(v20, *(float *)(*a2 + 4 * v5)), vaddq_f32(vmulq_n_f32(vsubq_f32(v19, v18), v16), vaddq_f32(vmulq_n_f32(v23, v15), vmulq_n_f32(vsubq_f32(v22, v21), v17))));
        v27 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL), vnegq_f32(v25)), v26, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL));
      }
      *(int8x16_t *)(*(_QWORD *)(a3 + 32) + 16 * v12) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), v27, 0xCuLL);
      v35 = vmulq_f32(v25, v25);
      v36 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0];
      v37 = *(_QWORD *)(a3 + 16);
      if (v36 <= 0.0)
      {
        if (v37 <= v12)
          goto LABEL_35;
        v38 = (_QWORD *)(*(_QWORD *)(a3 + 32) + 16 * v12);
        *v38 = 0;
        v38[1] = 0;
      }
      else
      {
        if (v37 <= v12)
          goto LABEL_34;
        *(float32x4_t *)(*(_QWORD *)(a3 + 32) + 16 * v12) = vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)(a3 + 32) + 16 * v12), 1.0 / v36);
      }
      ++v12;
      v11 = a1[5];
    }
    while (v12 < v11);
  }
  return result;
}

re *re::GeomMeshBuilder::GeomMeshBuilder(re *a1, uint64_t a2)
{
  re::GeomAttribute *v4;

  *(_QWORD *)a1 = 0;
  re::internal::GeomBaseMesh::GeomBaseMesh((uint64_t)a1 + 8, a2 + 16);
  re::GeomMesh::setName(a1, *(const char **)a2);
  *(_QWORD *)(a2 + 728) = 0;
  re::GeomMesh::clearComponents((re::GeomMesh *)a2, v4);
  *(_QWORD *)(a2 + 728) = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)(a2 + 64), "vertexPosition", 1, 7);
  return a1;
}

void re::GeomMeshBuilder::~GeomMeshBuilder(re::GeomMeshBuilder *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = re::globalAllocators(this);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3[2] + 40))(v3[2], v2);
    *(_QWORD *)this = 0;
  }
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::GeomMeshBuilder *)((char *)this + 56));
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    if (*((_QWORD *)this + 6))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 2) = 0;
    ++*((_DWORD *)this + 10);
  }
}

uint64_t re::GeomMeshBuilder::appendMesh(re::GeomMeshBuilder *this, const re::GeomMesh *a2)
{
  unint64_t v2;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  re::GeomAttribute *v16;
  uint64_t v17;
  uint64_t v18;
  int32x2_t v19;
  _DWORD *v20;
  int v21;
  int v22;
  int32x2_t *v23;
  re::internal::GeomAttributeManager *v24;
  int v25;
  unsigned int i;
  uint64_t v27;
  re::GeomAttribute *v28;
  uint64_t v29;
  uint64_t v30;
  re::GeomAttribute *v31;
  re::GeomMeshBuilder *v32;
  uint64_t v33;
  uint64_t v34;
  re::GeomMeshBuilder *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  re::GeomMeshBuilder *v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  const re::GeomAttribute *v55;
  re::internal *v56;
  const re::GeomAttribute *v57;
  unsigned int *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _anonymous_namespace_ *v62;
  re::GeomMeshBuilder *v63;
  uint64_t v64;
  int32x2_t v65;
  _DWORD *v66;
  int v67;
  int v68;
  int32x2_t *v69;
  _anonymous_namespace_ *v70;
  uint64_t v71;
  unsigned int *v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int *v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int *v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t updated;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  re::GeomMeshBuilder *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  char *v118;
  uint64_t v119;
  unsigned int v120;
  re::internal *v121;
  uint64_t v122;
  unsigned int v123;
  const re::GeomMesh *v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  __int128 v134;
  int v135;
  uint64_t v136;
  _BYTE v137[40];
  uint64_t v138;
  uint64_t v139;
  _BYTE v140[40];
  _QWORD v141[3];
  uint64_t v142;
  _OWORD v143[3];
  __int128 v144;
  __int128 v145;
  _BYTE v146[80];
  _OWORD v147[3];
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  unint64_t v154;
  int v155;
  char v156;
  int v157;
  uint64_t v158;

  v4 = (unint64_t)this;
  v158 = *MEMORY[0x24BDAC8D0];
  v5 = *((_DWORD *)this + 2);
  v6 = *((_QWORD *)this + 4);
  v7 = *((unsigned int *)a2 + 4);
  v122 = *((_QWORD *)a2 + 5);
  v8 = (v122 + v6);
  *((_DWORD *)this + 2) = v7 + v5;
  *((_DWORD *)this + 42) = v7 + v5;
  v118 = (char *)this + 8;
  v9 = *((_QWORD *)this + 24);
  if (v9)
  {
    v10 = (uint64_t *)*((_QWORD *)this + 26);
    v2 = 8 * v9;
    do
    {
      v11 = *v10++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 72))(v11, *(unsigned int *)(v4 + 168));
      v2 -= 8;
    }
    while (v2);
  }
  v124 = a2;
  re::DynamicArray<re::GeomCell4>::resize((_QWORD *)(v4 + 16), v8);
  *(_DWORD *)(v4 + 280) = v8;
  v12 = *(_QWORD *)(v4 + 304);
  if (v12)
  {
    v13 = *(uint64_t **)(v4 + 320);
    v8 = 8 * v12;
    do
    {
      v14 = *v13++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 72))(v14, *(unsigned int *)(v4 + 280));
      v8 -= 8;
    }
    while (v8);
  }
  v15 = v122;
  v16 = (re::GeomAttribute *)v140;
  if ((_DWORD)v122)
  {
    v17 = 0;
    v18 = *((_QWORD *)v124 + 5);
    v19 = vdup_n_s32(v5);
    v20 = (_DWORD *)(*((_QWORD *)v124 + 7) + 12);
    while (v18 != v17)
    {
      v8 = (v6 + v17);
      v2 = *(_QWORD *)(v4 + 32);
      if (v2 <= v8)
        goto LABEL_267;
      v21 = *(v20 - 1);
      if (*v20 == -1)
        v22 = -1;
      else
        v22 = *v20 + v5;
      v23 = (int32x2_t *)(*(_QWORD *)(v4 + 48) + 16 * v8);
      *v23 = vadd_s32(*(int32x2_t *)(v20 - 3), v19);
      v23[1].i32[0] = v21 + v5;
      v23[1].i32[1] = v22;
      ++v17;
      v20 += 4;
      if (v122 == v17)
        goto LABEL_15;
    }
    goto LABEL_266;
  }
LABEL_15:
  v24 = (re::internal::GeomAttributeManager *)(v118 + 48);
  v25 = *((_DWORD *)v124 + 22);
  if (v25)
  {
    for (i = 0; i != v25; ++i)
    {
      v27 = re::internal::GeomAttributeContainer::attributeByIndex((const re::GeomMesh *)((char *)v124 + 64), i);
      if (!re::internal::GeomAttributeManager::attributeByName(v24, *(const char **)(v27 + 8)))
      {
        v28 = re::internal::GeomAttributeManager::addAttribute(v24, *(char **)(v27 + 8), *(unsigned __int8 *)(v27 + 16), *(unsigned __int8 *)(v27 + 17));
        v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        (*(void (**)(re::GeomAttribute *, uint64_t))(*(_QWORD *)v28 + 72))(v28, v29);
        v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v31 = v28;
        v15 = v122;
        (*(void (**)(uint64_t, re::GeomAttribute *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v27 + 40))(v27, v31, v30, 0, 0);
      }
    }
  }
  *(_QWORD *)&v143[2] = 0;
  memset(v143, 0, 28);
  *(_QWORD *)&v140[32] = 0;
  memset(v140, 0, 28);
  re::DynamicArray<float>::resize((uint64_t)v143, v7);
  re::DynamicArray<float>::resize((uint64_t)v140, v7);
  if ((_DWORD)v7)
  {
    v32 = 0;
    v18 = *(_QWORD *)&v143[1];
    v33 = *(_QWORD *)&v143[2];
    v4 = *(_QWORD *)&v140[16];
    v34 = *(_QWORD *)&v140[32];
    while ((re::GeomMeshBuilder *)v18 != v32)
    {
      *(_DWORD *)(v33 + 4 * (_QWORD)v32) = (_DWORD)v32;
      if ((re::GeomMeshBuilder *)v4 == v32)
        goto LABEL_269;
      *(_DWORD *)(v34 + 4 * (_QWORD)v32) = v5 + (_DWORD)v32;
      v32 = (re::GeomMeshBuilder *)((char *)v32 + 1);
      if ((re::GeomMeshBuilder *)v7 == v32)
        goto LABEL_25;
    }
LABEL_268:
    *(_QWORD *)&v147[0] = 0;
    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    v149 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v137 = 136315906;
    *(_QWORD *)&v137[4] = "operator[]";
    *(_WORD *)&v137[12] = 1024;
    *(_DWORD *)&v137[14] = 789;
    *(_WORD *)&v137[18] = 2048;
    *(_QWORD *)&v137[20] = v18;
    *(_WORD *)&v137[28] = 2048;
    *(_QWORD *)&v137[30] = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_269:
    *(_QWORD *)&v147[0] = 0;
    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    v149 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v137 = 136315906;
    *(_QWORD *)&v137[4] = "operator[]";
    *(_WORD *)&v137[12] = 1024;
    *(_DWORD *)&v137[14] = 789;
    *(_WORD *)&v137[18] = 2048;
    *(_QWORD *)&v137[20] = v4;
    *(_WORD *)&v137[28] = 2048;
    *(_QWORD *)&v137[30] = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_270:
    *(_QWORD *)&v147[0] = 0;
    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    v149 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v137 = 136315906;
    *(_QWORD *)&v137[4] = "operator[]";
    *(_WORD *)&v137[12] = 1024;
    *(_DWORD *)&v137[14] = 789;
    *(_WORD *)&v137[18] = 2048;
    *(_QWORD *)&v137[20] = v18;
    *(_WORD *)&v137[28] = 2048;
    *(_QWORD *)&v137[30] = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_271:
    *(_QWORD *)&v147[0] = 0;
    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    v149 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v137 = 136315906;
    *(_QWORD *)&v137[4] = "operator[]";
    *(_WORD *)&v137[12] = 1024;
    *(_DWORD *)&v137[14] = 789;
    *(_WORD *)&v137[18] = 2048;
    *(_QWORD *)&v137[20] = v4;
    *(_WORD *)&v137[28] = 2048;
    *(_QWORD *)&v137[30] = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_272:
    re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) ", "dstAttribute->type() == srcAttribute->type()", "appendMesh", 175);
    _os_crash();
    __break(1u);
LABEL_273:
    re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) ", "dstAttribute->rate() == srcAttribute->rate()", "appendMesh", 176);
    _os_crash();
    __break(1u);
LABEL_274:
    re::internal::assertLog((re::internal *)4, v46, "assertion failure: '%s' (%s:line %i) ", "dstAttribute->size() == newValueCount", "appendMesh", 195);
    _os_crash();
    __break(1u);
LABEL_275:
    re::internal::assertLog((re::internal *)4, (uint64_t)v55, "assertion failure: '%s' (%s:line %i) ", "dstAttribute->type() == srcAttribute->type()", "appendMesh", 215);
    _os_crash();
    __break(1u);
LABEL_276:
    re::internal::assertLog((re::internal *)4, (uint64_t)v55, "assertion failure: '%s' (%s:line %i) ", "dstAttribute->rate() == srcAttribute->rate()", "appendMesh", 216);
    _os_crash();
    __break(1u);
LABEL_277:
    re::internal::assertLog((re::internal *)4, v113, "assertion failure: '%s' (%s:line %i) ", "dstAttribute->size() == mergedAttrVertexCount", "appendMesh", 328);
    _os_crash();
    __break(1u);
LABEL_278:
    re::internal::assertLog((re::internal *)4, (uint64_t)v55, "assertion failure: '%s' (%s:line %i) ", "dstAttribute != nullptr", "appendMesh", 223);
    _os_crash();
    __break(1u);
LABEL_279:
    re::internal::assertLog((re::internal *)4, v84, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_280:
    re::internal::assertLog((re::internal *)4, v84, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_281:
    re::internal::assertLog((re::internal *)4, v71, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_282:
    re::internal::assertLog((re::internal *)4, v71, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_283:
    re::internal::assertLog((re::internal *)4, v71, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_284:
    re::internal::assertLog((re::internal *)4, v84, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_285:
    re::internal::assertLog((re::internal *)4, v82, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
LABEL_286:
    re::internal::assertLog((re::internal *)4, v102, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
LABEL_287:
    re::internal::assertLog((re::internal *)4, v102, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
LABEL_288:
    re::internal::assertLog((re::internal *)4, v82, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
  }
LABEL_25:
  if (*(_QWORD *)v140 && *(_QWORD *)&v140[32])
    (*(void (**)(void))(**(_QWORD **)v140 + 40))();
  if (*(_QWORD *)&v143[0] && *(_QWORD *)&v143[2])
    (*(void (**)(void))(**(_QWORD **)&v143[0] + 40))();
  *(_QWORD *)&v143[2] = 0;
  memset(v143, 0, 28);
  *(_QWORD *)&v140[32] = 0;
  memset(v140, 0, 28);
  re::DynamicArray<float>::resize((uint64_t)v143, v15);
  re::DynamicArray<float>::resize((uint64_t)v140, v15);
  if ((_DWORD)v122)
  {
    v35 = 0;
    v18 = *(_QWORD *)&v143[1];
    v36 = *(_QWORD *)&v143[2];
    v4 = *(_QWORD *)&v140[16];
    v37 = *(_QWORD *)&v140[32];
    while ((re::GeomMeshBuilder *)v18 != v35)
    {
      *(_DWORD *)(v36 + 4 * (_QWORD)v35) = (_DWORD)v35;
      if ((re::GeomMeshBuilder *)v4 == v35)
        goto LABEL_271;
      *(_DWORD *)(v37 + 4 * (_QWORD)v35) = v6 + (_DWORD)v35;
      v35 = (re::GeomMeshBuilder *)((char *)v35 + 1);
      if ((re::GeomMeshBuilder *)v15 == v35)
        goto LABEL_36;
    }
    goto LABEL_270;
  }
LABEL_36:
  if (*(_QWORD *)v140 && *(_QWORD *)&v140[32])
    (*(void (**)(void))(**(_QWORD **)v140 + 40))();
  result = *(_QWORD *)&v143[0];
  if (*(_QWORD *)&v143[0] && *(_QWORD *)&v143[2])
    result = (*(uint64_t (**)(void))(**(_QWORD **)&v143[0] + 40))();
  v18 = *((unsigned int *)v124 + 134);
  if (!(_DWORD)v18)
    goto LABEL_64;
  v39 = 0;
  v8 = (unint64_t)v124 + 512;
  do
  {
    v2 = re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)v8, v39);
    v40 = re::internal::GeomAttributeManager::attributeByName(v24, *(const char **)(v2 + 8));
    if (v40)
    {
      v16 = (re::GeomAttribute *)v40;
      if (*(unsigned __int8 *)(v40 + 17) != *(unsigned __int8 *)(v2 + 17))
        goto LABEL_272;
      if (*(unsigned __int8 *)(v40 + 16) != *(unsigned __int8 *)(v2 + 16))
        goto LABEL_273;
    }
    else
    {
      v42 = *(unsigned __int8 *)(v2 + 16);
      if (v42 == 3)
        v16 = 0;
      else
        v16 = re::internal::GeomAttributeManager::addAttribute(v24, *(char **)(v2 + 8), v42, *(unsigned __int8 *)(v2 + 17));
    }
    result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 16))(v2);
    if (!(_DWORD)result)
      goto LABEL_63;
    v43 = result;
    *(_QWORD *)&v143[2] = 0;
    memset(v143, 0, 28);
    *(_QWORD *)&v140[32] = 0;
    memset(v140, 0, 28);
    v44 = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)v16 + 16))(v16);
    v45 = (v44 + v43);
    (*(void (**)(re::GeomAttribute *, uint64_t))(*(_QWORD *)v16 + 24))(v16, v45);
    re::DynamicArray<float>::resize((uint64_t)v143, v43);
    re::DynamicArray<float>::resize((uint64_t)v140, v43);
    if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v16 + 16))(v16) != (_DWORD)v45)
      goto LABEL_274;
    v47 = 0;
    v4 = *(_QWORD *)&v143[1];
    v48 = *(_QWORD *)&v143[2];
    v49 = v44;
    v50 = *(_QWORD *)&v140[16];
    v51 = *(_QWORD *)&v140[32];
    v24 = (re::internal::GeomAttributeManager *)(v118 + 48);
    do
    {
      if ((re::GeomMeshBuilder *)v4 == v47)
      {
        *(_QWORD *)&v147[0] = 0;
        v152 = 0u;
        v153 = 0u;
        v150 = 0u;
        v151 = 0u;
        v149 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v137 = 136315906;
        *(_QWORD *)&v137[4] = "operator[]";
        *(_WORD *)&v137[12] = 1024;
        *(_DWORD *)&v137[14] = 789;
        *(_WORD *)&v137[18] = 2048;
        *(_QWORD *)&v137[20] = v4;
        *(_WORD *)&v137[28] = 2048;
        *(_QWORD *)&v137[30] = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_255:
        *(_QWORD *)&v147[0] = 0;
        v152 = 0u;
        v153 = 0u;
        v150 = 0u;
        v151 = 0u;
        v149 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v137 = 136315906;
        *(_QWORD *)&v137[4] = "operator[]";
        *(_WORD *)&v137[12] = 1024;
        *(_DWORD *)&v137[14] = 789;
        *(_WORD *)&v137[18] = 2048;
        *(_QWORD *)&v137[20] = v50;
        *(_WORD *)&v137[28] = 2048;
        *(_QWORD *)&v137[30] = v50;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_256;
      }
      *(_DWORD *)(v48 + 4 * (_QWORD)v47) = (_DWORD)v47;
      if ((re::GeomMeshBuilder *)v50 == v47)
        goto LABEL_255;
      *(_DWORD *)(v51 + 4 * (_QWORD)v47) = v49 + (_DWORD)v47;
      v47 = (re::GeomMeshBuilder *)((char *)v47 + 1);
    }
    while ((re::GeomMeshBuilder *)v43 != v47);
    (*(void (**)(unint64_t, re::GeomAttribute *, unint64_t))(*(_QWORD *)v2 + 40))(v2, v16, v43);
    if (*(_QWORD *)v140 && *(_QWORD *)&v140[32])
      (*(void (**)(void))(**(_QWORD **)v140 + 40))();
    result = *(_QWORD *)&v143[0];
    if (*(_QWORD *)&v143[0] && *(_QWORD *)&v143[2])
      result = (*(uint64_t (**)(void))(**(_QWORD **)&v143[0] + 40))();
LABEL_63:
    ++v39;
  }
  while (v39 != (_DWORD)v18);
LABEL_64:
  v117 = *((_DWORD *)v124 + 106);
  if (v117)
  {
    v52 = 0;
    v2 = (unint64_t)&v133;
    do
    {
      v53 = re::internal::GeomAttributeContainer::attributeByIndex((const re::GeomMesh *)((char *)v124 + 400), v52);
      v54 = re::internal::GeomAttributeManager::attributeByName(v24, *(const char **)(v53 + 8));
      if (v54)
      {
        v56 = (re::internal *)v54;
        if (*(unsigned __int8 *)(v54 + 17) != *(unsigned __int8 *)(v53 + 17))
          goto LABEL_275;
        if (*(unsigned __int8 *)(v54 + 16) != *(unsigned __int8 *)(v53 + 16))
          goto LABEL_276;
      }
      else
      {
        LODWORD(v149) = 0;
        *((_QWORD *)&v151 + 1) = 0;
        v150 = 0uLL;
        *((_QWORD *)&v149 + 1) = 0;
        LODWORD(v151) = 0;
        re::DynamicArray<re::BlendNode>::setCapacity((_QWORD *)&v149 + 1, 1uLL);
        LODWORD(v151) = v151 + 1;
        v104 = re::internal::GeomBaseMesh::addFaceVaryingAttribute((uint64_t)v118, *(const char **)(v53 + 8), *(unsigned __int8 *)(v53 + 17), (uint64_t)&v149);
        if (!v104)
          goto LABEL_278;
        v56 = (re::internal *)v104;
        if (*((_QWORD *)&v149 + 1))
        {
          v55 = (const re::GeomAttribute *)*((_QWORD *)&v151 + 1);
          if (*((_QWORD *)&v151 + 1))
            (*(void (**)(void))(**((_QWORD **)&v149 + 1) + 40))();
        }
      }
      v120 = v52;
      v119 = v53;
      v18 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v53, v55);
      v121 = v56;
      v58 = (unsigned int *)re::internal::accessFaceVaryingAttributeSubmesh(v56, v57);
      v59 = *(unsigned int *)v18;
      v60 = *(_QWORD *)(v18 + 24);
      v16 = (re::GeomAttribute *)*v58;
      v8 = *((_QWORD *)v58 + 3);
      v132 = *v58;
      re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v133, (uint64_t *)v58 + 1);
      if (!(_QWORD)v134)
        re::DynamicArray<re::BlendNode>::setCapacity(&v133, 1uLL);
      v132 = (_DWORD)v16 + v59;
      v61 = (v8 + v60);
      v62 = (_anonymous_namespace_ *)re::DynamicArray<re::GeomCell4>::resize(&v133, v61);
      v123 = v60;
      if ((_DWORD)v60)
      {
        v63 = 0;
        v4 = *(_QWORD *)(v18 + 24);
        v50 = *((_QWORD *)&v134 + 1);
        v64 = v136;
        v65 = vdup_n_s32(v16);
        v66 = (_DWORD *)(*(_QWORD *)(v18 + 40) + 12);
        while ((re::GeomMeshBuilder *)v4 != v63)
        {
          v2 = (v8 + (_DWORD)v63);
          if (v50 <= v2)
            goto LABEL_257;
          v67 = *(v66 - 1);
          if (*v66 == -1)
            v68 = -1;
          else
            v68 = *v66 + (_DWORD)v16;
          v69 = (int32x2_t *)(v64 + 16 * v2);
          *v69 = vadd_s32(*(int32x2_t *)(v66 - 3), v65);
          v69[1].i32[0] = v67 + (_DWORD)v16;
          v69[1].i32[1] = v68;
          v63 = (re::GeomMeshBuilder *)((char *)v63 + 1);
          v66 += 4;
          if ((re::GeomMeshBuilder *)v123 == v63)
            goto LABEL_79;
        }
LABEL_256:
        *(_QWORD *)v140 = 0;
        v152 = 0u;
        v153 = 0u;
        v150 = 0u;
        v151 = 0u;
        v149 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v143[0]) = 136315906;
        *(_QWORD *)((char *)v143 + 4) = "operator[]";
        WORD6(v143[0]) = 1024;
        *(_DWORD *)((char *)v143 + 14) = 797;
        WORD1(v143[1]) = 2048;
        *(_QWORD *)((char *)&v143[1] + 4) = v4;
        WORD6(v143[1]) = 2048;
        *(_QWORD *)((char *)&v143[1] + 14) = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_257:
        *(_QWORD *)v140 = 0;
        v152 = 0u;
        v153 = 0u;
        v150 = 0u;
        v151 = 0u;
        v149 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v143[0]) = 136315906;
        *(_QWORD *)((char *)v143 + 4) = "operator[]";
        WORD6(v143[0]) = 1024;
        *(_DWORD *)((char *)v143 + 14) = 789;
        WORD1(v143[1]) = 2048;
        *(_QWORD *)((char *)&v143[1] + 4) = v2;
        WORD6(v143[1]) = 2048;
        *(_QWORD *)((char *)&v143[1] + 14) = v50;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_258:
        v127 = 0;
        v144 = 0u;
        v145 = 0u;
        memset(v143, 0, sizeof(v143));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v147[0]) = 136315906;
        *(_QWORD *)((char *)v147 + 4) = "operator[]";
        WORD6(v147[0]) = 1024;
        *(_DWORD *)((char *)v147 + 14) = 789;
        WORD1(v147[1]) = 2048;
        *(_QWORD *)((char *)&v147[1] + 4) = v18;
        WORD6(v147[1]) = 2048;
        *(_QWORD *)((char *)&v147[1] + 14) = v18;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_259:
        v127 = 0;
        v144 = 0u;
        v145 = 0u;
        memset(v143, 0, sizeof(v143));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v147[0]) = 136315906;
        *(_QWORD *)((char *)v147 + 4) = "operator[]";
        WORD6(v147[0]) = 1024;
        *(_DWORD *)((char *)v147 + 14) = 789;
        WORD1(v147[1]) = 2048;
        *(_QWORD *)((char *)&v147[1] + 4) = v4;
        WORD6(v147[1]) = 2048;
        *(_QWORD *)((char *)&v147[1] + 14) = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_260:
        *(_QWORD *)v137 = 0;
        v144 = 0u;
        v145 = 0u;
        memset(v143, 0, sizeof(v143));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v140 = 136315906;
        *(_QWORD *)&v140[4] = "operator[]";
        *(_WORD *)&v140[12] = 1024;
        *(_DWORD *)&v140[14] = 789;
        *(_WORD *)&v140[18] = 2048;
        *(_QWORD *)&v140[20] = v4;
        *(_WORD *)&v140[28] = 2048;
        *(_QWORD *)&v140[30] = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_261:
        *(_QWORD *)v137 = 0;
        v144 = 0u;
        v145 = 0u;
        memset(v143, 0, sizeof(v143));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v140 = 136315906;
        *(_QWORD *)&v140[4] = "operator[]";
        *(_WORD *)&v140[12] = 1024;
        *(_DWORD *)&v140[14] = 789;
        *(_WORD *)&v140[18] = 2048;
        *(_QWORD *)&v140[20] = v4;
        *(_WORD *)&v140[28] = 2048;
        *(_QWORD *)&v140[30] = v50;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_262:
        *(_QWORD *)v137 = 0;
        v144 = 0u;
        v145 = 0u;
        memset(v143, 0, sizeof(v143));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v140 = 136315906;
        *(_QWORD *)&v140[4] = "operator[]";
        *(_WORD *)&v140[12] = 1024;
        *(_DWORD *)&v140[14] = 789;
        *(_WORD *)&v140[18] = 2048;
        *(_QWORD *)&v140[20] = v8;
        *(_WORD *)&v140[28] = 2048;
        *(_QWORD *)&v140[30] = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_263:
        *(_QWORD *)v137 = 0;
        v144 = 0u;
        v145 = 0u;
        memset(v143, 0, sizeof(v143));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v140 = 136315906;
        *(_QWORD *)&v140[4] = "operator[]";
        *(_WORD *)&v140[12] = 1024;
        *(_DWORD *)&v140[14] = 789;
        *(_WORD *)&v140[18] = 2048;
        *(_QWORD *)&v140[20] = v4;
        *(_WORD *)&v140[28] = 2048;
        *(_QWORD *)&v140[30] = v50;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_264:
        *(_QWORD *)v137 = 0;
        v144 = 0u;
        v145 = 0u;
        memset(v143, 0, sizeof(v143));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v140 = 136315906;
        *(_QWORD *)&v140[4] = "operator[]";
        *(_WORD *)&v140[12] = 1024;
        *(_DWORD *)&v140[14] = 789;
        *(_WORD *)&v140[18] = 2048;
        *(_QWORD *)&v140[20] = v2;
        *(_WORD *)&v140[28] = 2048;
        *(_QWORD *)&v140[30] = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_265:
        *(_QWORD *)v137 = 0;
        v144 = 0u;
        v145 = 0u;
        memset(v143, 0, sizeof(v143));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v140 = 136315906;
        *(_QWORD *)&v140[4] = "operator[]";
        *(_WORD *)&v140[12] = 1024;
        *(_DWORD *)&v140[14] = 789;
        *(_WORD *)&v140[18] = 2048;
        *(_QWORD *)&v140[20] = v4;
        *(_WORD *)&v140[28] = 2048;
        *(_QWORD *)&v140[30] = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_266:
        *(_QWORD *)v140 = 0;
        v152 = 0u;
        v153 = 0u;
        v150 = 0u;
        v151 = 0u;
        v149 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v143[0]) = 136315906;
        *(_QWORD *)((char *)v16 + 84) = "operator[]";
        WORD6(v143[0]) = 1024;
        *(_DWORD *)((char *)v16 + 94) = 797;
        WORD1(v143[1]) = 2048;
        *(_QWORD *)((char *)v16 + 100) = v18;
        WORD6(v143[1]) = 2048;
        *(_QWORD *)((char *)v16 + 110) = v18;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_267:
        *(_QWORD *)v140 = 0;
        v152 = 0u;
        v153 = 0u;
        v150 = 0u;
        v151 = 0u;
        v149 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v143[0]) = 136315906;
        *(_QWORD *)((char *)v16 + 84) = "operator[]";
        WORD6(v143[0]) = 1024;
        *(_DWORD *)((char *)v16 + 94) = 789;
        WORD1(v143[1]) = 2048;
        *(_QWORD *)((char *)v16 + 100) = v8;
        WORD6(v143[1]) = 2048;
        *(_QWORD *)((char *)v16 + 110) = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_268;
      }
LABEL_79:
      LODWORD(v149) = 0;
      *((_QWORD *)&v151 + 1) = 0;
      v150 = 0uLL;
      *((_QWORD *)&v149 + 1) = 0;
      LODWORD(v151) = 0;
      v70 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendNode>::setCapacity((_QWORD *)&v149 + 1, 1uLL);
      LODWORD(v151) = v151 + 1;
      *(_QWORD *)&v152 = 0xFFFFFFFF00000000;
      DWORD2(v152) = -1;
      BYTE12(v152) = 0;
      LODWORD(v153) = 0;
      v154 = 0xFFFFFFFF00000000;
      v50 = 0xFFFFFFFFLL;
      v155 = -1;
      v156 = 0;
      v157 = 0;
      if ((_DWORD)v8 == (_DWORD)v6 && v123 == (_DWORD)v122)
      {
        *(_QWORD *)&v147[2] = 0;
        memset(v147, 0, 28);
        v131 = 0;
        v128 = 0;
        v129 = 0;
        v127 = 0;
        v130 = 0;
        re::DynamicArray<float>::resize((uint64_t)v147, v61);
        re::DynamicArray<float>::resize((uint64_t)&v127, v61);
        if ((_DWORD)v6)
        {
          v8 = 0;
          v72 = v58 + 16;
          do
          {
            LODWORD(v143[0]) = v8;
            v73 = *((unsigned __int8 *)v58 + 60);
            if (v73 == 2)
            {
              v74 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)v58 + 8, (unsigned int *)v143);
              if (v74 == -1)
                v2 = 0xFFFFFFFFLL;
              else
                v2 = *(unsigned int *)(*((_QWORD *)v58 + 9) + 8 * v74 + 4);
            }
            else if (v73 == 1)
            {
              v75 = *((_QWORD *)v58 + 10);
              if (v75 <= v8)
              {
                LODWORD(v143[0]) = v8;
                v2 = 0xFFFFFFFFLL;
LABEL_99:
                if (v75 > v8)
                {
                  v77 = *(_DWORD *)(*((_QWORD *)v58 + 12) + 4 * v8);
                  goto LABEL_107;
                }
                goto LABEL_106;
              }
              v2 = *(unsigned int *)(*((_QWORD *)v58 + 12) + 4 * v8);
            }
            else
            {
              if (*((_BYTE *)v58 + 60))
                goto LABEL_281;
              if (v8 >= *v72)
                v2 = 0xFFFFFFFFLL;
              else
                v2 = v8;
            }
            v76 = *((unsigned __int8 *)v58 + 60);
            LODWORD(v143[0]) = v8;
            if (v76)
            {
              if (v76 != 2)
              {
                if (v76 != 1)
                  goto LABEL_283;
                v75 = *((_QWORD *)v58 + 10);
                goto LABEL_99;
              }
              v78 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)v58 + 8, (unsigned int *)v143);
              if (v78 != -1)
              {
                v77 = *(_DWORD *)(*((_QWORD *)v58 + 9) + 8 * v78 + 4);
                goto LABEL_107;
              }
LABEL_106:
              v77 = -1;
              goto LABEL_107;
            }
            if (v8 >= *v72)
              v77 = -1;
            else
              v77 = v8;
LABEL_107:
            v4 = *(_QWORD *)&v147[1];
            if (*(_QWORD *)&v147[1] <= v8)
              goto LABEL_262;
            *(_DWORD *)(*(_QWORD *)&v147[2] + 4 * v8) = v77;
            v4 = v2;
            v50 = v129;
            if (v129 <= v2)
              goto LABEL_263;
            *(_DWORD *)(v131 + 4 * v2) = v8++;
          }
          while (v6 != v8);
        }
        if ((_DWORD)v122)
        {
          v8 = 0;
          while (1)
          {
            LODWORD(v143[0]) = v8;
            v79 = *(unsigned __int8 *)(v18 + 60);
            if (v79 == 2)
              break;
            if (v79 == 1)
            {
              if (*(_QWORD *)(v18 + 80) > v8)
              {
                v80 = *(_DWORD *)(*(_QWORD *)(v18 + 96) + 4 * v8);
                goto LABEL_123;
              }
              goto LABEL_122;
            }
            if (*(_BYTE *)(v18 + 60))
              goto LABEL_282;
            if (v8 >= *(unsigned int *)(v18 + 64))
              v80 = -1;
            else
              v80 = v8;
LABEL_123:
            v2 = (v6 + v8);
            v4 = *(_QWORD *)&v147[1];
            if (*(_QWORD *)&v147[1] <= v2)
              goto LABEL_264;
            v4 = (v80 + v6);
            *(_DWORD *)(*(_QWORD *)&v147[2] + 4 * v2) = v4;
            v2 = v129;
            if (v129 <= v4)
              goto LABEL_265;
            *(_DWORD *)(v131 + 4 * v4) = v6 + v8++;
            if (v122 == v8)
              goto LABEL_126;
          }
          v81 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v18 + 64), (unsigned int *)v143);
          if (v81 != -1)
          {
            v80 = *(_DWORD *)(*(_QWORD *)(v18 + 72) + 8 * v81 + 4);
            goto LABEL_123;
          }
LABEL_122:
          v80 = -1;
          goto LABEL_123;
        }
LABEL_126:
        re::GeomIndexMap::GeomIndexMap((uint64_t)v140, (uint64_t)v147);
        re::GeomIndexMap::GeomIndexMap((uint64_t)v137, (uint64_t)&v127);
        LODWORD(v143[0]) = v132;
        *((_QWORD *)&v143[0] + 1) = v133;
        v143[1] = v134;
        *((_QWORD *)&v143[2] + 1) = v136;
        v136 = 0;
        LODWORD(v143[2]) = 1;
        v132 = 0;
        v133 = 0;
        v134 = 0uLL;
        v135 += 2;
        re::GeomIndexMap::GeomIndexMap((uint64_t)&v144, (uint64_t)v140);
        re::GeomIndexMap::GeomIndexMap((uint64_t)v146, (uint64_t)v137);
        v2 = (unint64_t)&v133;
        if (v137[12])
        {
          if (v137[12] == 2)
          {
            v83 = v139;
            if (!v139)
              goto LABEL_219;
            if (*(_QWORD *)&v137[24])
              *(_QWORD *)&v137[24] = 0;
            v82 = *(_QWORD *)&v137[16];
            if (!*(_QWORD *)&v137[16])
              goto LABEL_219;
          }
          else
          {
            if (v137[12] != 1)
              goto LABEL_285;
            v83 = *(_QWORD *)&v137[16];
            if (!*(_QWORD *)&v137[16])
              goto LABEL_219;
            v82 = v138;
            if (!v138)
              goto LABEL_219;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v83 + 40))(v83);
        }
LABEL_219:
        if (v140[12])
        {
          if (v140[12] == 2)
          {
            if (v142)
            {
              if (*(_QWORD *)&v140[24])
                *(_QWORD *)&v140[24] = 0;
              if (*(_QWORD *)&v140[16])
              {
                (*(void (**)(void))(*(_QWORD *)v142 + 40))();
                v108 = &v140[16];
LABEL_230:
                *v108 = 0;
              }
            }
          }
          else
          {
            if (v140[12] != 1)
              goto LABEL_288;
            if (*(_QWORD *)&v140[16])
            {
              v108 = v141;
              if (v141[0])
              {
                (*(void (**)(void))(**(_QWORD **)&v140[16] + 40))();
                v108 = v141;
              }
              goto LABEL_230;
            }
          }
        }
        re::internal::GeomAttributeFaceVaryingSubmesh::operator=(&v149, v143);
        re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)v143, v109);
        if (v127 && v131)
          (*(void (**)(void))(*(_QWORD *)v127 + 40))();
        v107 = *(_QWORD *)&v147[0];
        if (!*(_QWORD *)&v147[0] || !*(_QWORD *)&v147[2])
          goto LABEL_237;
        goto LABEL_236;
      }
      v131 = 0;
      v128 = 0;
      v129 = 0;
      v127 = 0;
      v130 = 0;
      v148 = 0u;
      memset(v147, 0, sizeof(v147));
      re::DynamicArray<float>::resize((uint64_t)&v127, v61);
      v126 = 0;
      if ((_DWORD)v8)
      {
        v85 = 0;
        v86 = v58 + 16;
        do
        {
          v125 = 0;
          LODWORD(v143[0]) = v85;
          v87 = *((unsigned __int8 *)v58 + 60);
          if (v87 == 2)
          {
            v93 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)v58 + 8, (unsigned int *)v143);
            if (v93 == -1)
            {
              v94 = -1;
              goto LABEL_148;
            }
            v92 = (unsigned int *)(*((_QWORD *)v58 + 9) + 8 * v93 + 4);
          }
          else
          {
            if (v87 != 1)
            {
              if (*((_BYTE *)v58 + 60))
                goto LABEL_279;
              v88 = *v86;
              if (*v86 <= v85)
                v89 = -1;
              else
                v89 = v85;
              v125 = v89;
LABEL_152:
              if (v88 <= v85)
                v85 = -1;
              goto LABEL_160;
            }
            v90 = v85;
            v91 = *((_QWORD *)v58 + 10);
            if (v91 <= v85)
            {
              v125 = -1;
              LODWORD(v143[0]) = v85;
              goto LABEL_157;
            }
            v92 = (unsigned int *)(*((_QWORD *)v58 + 12) + 4 * v85);
          }
          v94 = *v92;
LABEL_148:
          v95 = *((unsigned __int8 *)v58 + 60);
          v125 = v94;
          v85 = v126;
          LODWORD(v143[0]) = v126;
          if (v95 == 2)
          {
            v96 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)v58 + 8, (unsigned int *)v143);
            if (v96 == -1)
              goto LABEL_159;
            v85 = *(_DWORD *)(*((_QWORD *)v58 + 9) + 8 * v96 + 4);
            goto LABEL_160;
          }
          if (v95 != 1)
          {
            if (v95)
              goto LABEL_284;
            v88 = *v86;
            goto LABEL_152;
          }
          v91 = *((_QWORD *)v58 + 10);
          v90 = v126;
LABEL_157:
          if (v91 <= v90)
          {
LABEL_159:
            v85 = -1;
            goto LABEL_160;
          }
          v85 = *(_DWORD *)(*((_QWORD *)v58 + 12) + 4 * v90);
LABEL_160:
          v4 = v126;
          v2 = v129;
          if (v129 <= v126)
            goto LABEL_260;
          *(_DWORD *)(v131 + 4 * v126) = v85;
          if (re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v147, &v125) == -1)re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::internalAdd((_anonymous_namespace_ *)v147, &v125, &v126);
          v85 = v126 + 1;
          v126 = v85;
        }
        while (v85 < v8);
      }
      if (v123)
      {
        v97 = 0;
        v2 = v123;
        do
        {
          v126 = 0;
          LODWORD(v143[0]) = v97;
          v98 = *(unsigned __int8 *)(v18 + 60);
          if (v98 == 2)
          {
            v100 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v18 + 64), (unsigned int *)v143);
            if (v100 == -1)
              goto LABEL_176;
            v99 = *(_DWORD *)(*(_QWORD *)(v18 + 72) + 8 * v100 + 4);
          }
          else
          {
            if (v98 != 1)
            {
              if (*(_BYTE *)(v18 + 60))
                goto LABEL_280;
              if (v97 >= *(unsigned int *)(v18 + 64))
                v99 = -1;
              else
                v99 = v97;
              goto LABEL_177;
            }
            if (*(_QWORD *)(v18 + 80) <= v97)
            {
LABEL_176:
              v99 = -1;
              goto LABEL_177;
            }
            v99 = *(_DWORD *)(*(_QWORD *)(v18 + 96) + 4 * v97);
          }
LABEL_177:
          v101 = v99 + v6;
          v126 = v101;
          v4 = (v8 + v97);
          v50 = v129;
          if (v129 <= v4)
            goto LABEL_261;
          *(_DWORD *)(v131 + 4 * v4) = v101;
          LODWORD(v143[0]) = v8 + v97;
          re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::addNew((_anonymous_namespace_ *)v147, &v126, (unsigned int *)v143);
          ++v97;
        }
        while (v123 != v97);
      }
      re::GeomIndexMap::GeomIndexMap((uint64_t)v140, (uint64_t)&v127);
      re::GeomIndexMap::GeomIndexMap((unsigned int *)v137, (uint64_t *)v147);
      LODWORD(v143[0]) = v132;
      *((_QWORD *)&v143[0] + 1) = v133;
      v143[1] = v134;
      *((_QWORD *)&v143[2] + 1) = v136;
      v136 = 0;
      LODWORD(v143[2]) = 1;
      v132 = 0;
      v133 = 0;
      v134 = 0uLL;
      v135 += 2;
      re::GeomIndexMap::GeomIndexMap((uint64_t)&v144, (uint64_t)v140);
      re::GeomIndexMap::GeomIndexMap((uint64_t)v146, (uint64_t)v137);
      v2 = (unint64_t)&v133;
      if (v137[12])
      {
        if (v137[12] == 2)
        {
          v103 = v139;
          if (v139)
          {
            if (*(_QWORD *)&v137[24])
              *(_QWORD *)&v137[24] = 0;
            v102 = *(_QWORD *)&v137[16];
            if (*(_QWORD *)&v137[16])
              goto LABEL_193;
          }
        }
        else
        {
          if (v137[12] != 1)
            goto LABEL_286;
          v103 = *(_QWORD *)&v137[16];
          if (*(_QWORD *)&v137[16])
          {
            v102 = v138;
            if (v138)
LABEL_193:
              (*(void (**)(uint64_t))(*(_QWORD *)v103 + 40))(v103);
          }
        }
      }
      switch(v140[12])
      {
        case 0:
          break;
        case 2:
          if (v142)
          {
            if (*(_QWORD *)&v140[24])
              *(_QWORD *)&v140[24] = 0;
            if (*(_QWORD *)&v140[16])
            {
              (*(void (**)(void))(*(_QWORD *)v142 + 40))();
              v105 = &v140[16];
LABEL_205:
              *v105 = 0;
            }
          }
          break;
        case 1:
          if (*(_QWORD *)&v140[16])
          {
            v105 = v141;
            if (v141[0])
            {
              (*(void (**)(void))(**(_QWORD **)&v140[16] + 40))();
              v105 = v141;
            }
            goto LABEL_205;
          }
          break;
        default:
          goto LABEL_287;
      }
      re::internal::GeomAttributeFaceVaryingSubmesh::operator=(&v149, v143);
      re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)v143, v106);
      if (*((_QWORD *)&v148 + 1))
      {
        if (*((_QWORD *)&v147[0] + 1))
          *((_QWORD *)&v147[0] + 1) = 0;
        if (*(_QWORD *)&v147[0])
          (*(void (**)(void))(**((_QWORD **)&v148 + 1) + 40))();
      }
      v107 = v127;
      if (!v127 || !v131)
        goto LABEL_237;
LABEL_236:
      (*(void (**)(uint64_t))(*(_QWORD *)v107 + 40))(v107);
LABEL_237:
      updated = re::internal::GeomAttributeManager::updateFaceVaryingAttributeSubmesh((_QWORD *)v118 + 6, *((char **)v121 + 1), (uint64_t)&v149);
      if ((_DWORD)v59)
      {
        v112 = updated;
        *(_QWORD *)&v140[32] = 0;
        memset(v140, 0, 28);
        *(_QWORD *)&v137[32] = 0;
        memset(v137, 0, 28);
        re::DynamicArray<float>::resize((uint64_t)v140, v59);
        re::DynamicArray<float>::resize((uint64_t)v137, v59);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v112 + 16))(v112) != (_DWORD)v16 + (_DWORD)v59)
          goto LABEL_277;
        v114 = 0;
        v18 = *(_QWORD *)&v140[16];
        v115 = *(_QWORD *)&v140[32];
        v4 = *(_QWORD *)&v137[16];
        v116 = *(_QWORD *)&v137[32];
        do
        {
          if ((re::GeomMeshBuilder *)v18 == v114)
            goto LABEL_258;
          *(_DWORD *)(v115 + 4 * (_QWORD)v114) = (_DWORD)v114;
          if ((re::GeomMeshBuilder *)v4 == v114)
            goto LABEL_259;
          *(_DWORD *)(v116 + 4 * (_QWORD)v114) = (_DWORD)v16 + (_DWORD)v114;
          v114 = (re::GeomMeshBuilder *)((char *)v114 + 1);
        }
        while ((re::GeomMeshBuilder *)v59 != v114);
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v119 + 40))(v119, v112, v59);
        if (*(_QWORD *)v137)
        {
          v111 = *(_QWORD *)&v137[32];
          if (*(_QWORD *)&v137[32])
            (*(void (**)(void))(**(_QWORD **)v137 + 40))();
        }
        if (*(_QWORD *)v140)
        {
          v111 = *(_QWORD *)&v140[32];
          if (*(_QWORD *)&v140[32])
            (*(void (**)(void))(**(_QWORD **)v140 + 40))();
        }
      }
      re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v149, v111);
      result = v133;
      if (v133)
      {
        if (v136)
          result = (*(uint64_t (**)(void))(*(_QWORD *)v133 + 40))();
      }
      v52 = v120 + 1;
      v24 = (re::internal::GeomAttributeManager *)(v118 + 48);
    }
    while (v120 + 1 != v117);
  }
  return result;
}

uint64_t re::`anonymous namespace'::addAttributeAndCopyValuesHelper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9;
  re::internal::GeomAttributeContainer *v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  re::internal::GeomAttributeManager *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v9 = a3;
  v11 = (re::internal::GeomAttributeContainer *)(a1 + 64);
  result = re::internal::GeomAttributeManager::attributeCount(a1 + 64, a3);
  if (!(_DWORD)result)
    return result;
  v13 = result;
  v14 = 0;
  v15 = (re::internal::GeomAttributeManager *)(a2 + 48);
  while (1)
  {
    v16 = re::internal::GeomAttributeManager::attributeByIndex(v11, v14, v9);
    result = re::internal::GeomAttributeManager::attributeByName(v15, *(const char **)(v16 + 8));
    if (!result)
    {
      v18 = *(unsigned __int8 *)(v16 + 16);
      if (v18 == 3)
        goto LABEL_15;
      result = (uint64_t)re::internal::GeomAttributeManager::addAttribute(v15, *(char **)(v16 + 8), v18, *(unsigned __int8 *)(v16 + 17));
      v17 = result;
      if (!result)
        goto LABEL_15;
      goto LABEL_9;
    }
    v17 = result;
    if (*(unsigned __int8 *)(result + 17) != *(unsigned __int8 *)(v16 + 17))
      break;
    if (*(unsigned __int8 *)(result + 16) != *(unsigned __int8 *)(v16 + 16))
      goto LABEL_14;
LABEL_9:
    if ((_DWORD)a4)
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 40))(v16, v17, a4, a5, a6);
    v14 = (v14 + 1);
    if (v13 == (_DWORD)v14)
      return result;
  }
  re::internal::assertLog((re::internal *)4, result, "assertion failure: '%s' (%s:line %i) ", "dstAttribute->type() == srcAttribute->type()", "addAttributeAndCopyValuesHelper", 32);
  _os_crash();
  __break(1u);
LABEL_14:
  re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) ", "dstAttribute->rate() == srcAttribute->rate()", "addAttributeAndCopyValuesHelper", 33);
  _os_crash();
  __break(1u);
LABEL_15:
  re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) ", "dstAttribute != nullptr", "addAttributeAndCopyValuesHelper", 36);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::internal::compareMeshes(re::internal *this@<X0>, const re::GeomMesh *a2@<X1>, const re::GeomMesh *a3@<X2>, float a4@<S0>, uint64_t a5@<X8>)
{
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  BOOL v15;
  char **p_s;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  int v23;
  re::GeomAttribute *v24;
  re::GeomAttribute *v25;
  re::GeomAttribute *v26;
  re::GeomAttribute *v27;
  re::GeomAttribute *v28;
  re::GeomAttribute *v29;
  re::GeomAttribute *v30;
  re::GeomAttribute *v31;
  re *v32;
  re *v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36[92];
  uint64_t v37[92];
  _QWORD v38[2];
  unint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD v42[2];
  unint64_t v43;
  int v44;
  uint64_t v45;
  _QWORD v46[2];
  unint64_t v47;
  int v48;
  uint64_t v49;
  _QWORD v50[2];
  unint64_t v51;
  int v52;
  uint64_t v53;
  _QWORD v54[2];
  unint64_t v55;
  int v56;
  uint64_t v57;
  _QWORD v58[2];
  unint64_t v59;
  int v60;
  uint64_t v61;
  char *__s;
  _DWORD v63[12];
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  int v71;
  const char *v72;
  __int16 v73;
  int v74;
  __int16 v75;
  unint64_t v76;
  __int16 v77;
  char **v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v11 = re::internal::GeomAttributeManager::attributeByName((re::internal *)((char *)this + 64), (const char *)a3);
    v12 = re::internal::GeomAttributeManager::attributeByName((const re::GeomMesh *)((char *)a2 + 64), (const char *)a3);
    if ((v11 != 0) != (v12 != 0))
    {
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      bzero((void *)(a5 + 16), 0x2C8uLL);
      re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)(a5 + 16));
      *(_QWORD *)(a5 + 728) = 0;
      re::GeomMesh::copy(a2, (re::GeomMesh *)a5);
      return;
    }
    v14 = v12;
    if (v11)
      v15 = v12 == 0;
    else
      v15 = 1;
    v13 = !v15;
  }
  else
  {
    v13 = 0;
    v11 = 0;
    v14 = 0;
  }
  re::GeomMesh::GeomMesh((re::GeomMesh *)a5, 0);
  p_s = &__s;
  bzero(&__s, 0x2D0uLL);
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)v63);
  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v64, "vertexPosition", 1, 7);
  if (v13)
  {
    v61 = 0;
    v59 = 0;
    v58[0] = 0;
    v58[1] = 0;
    v60 = 0;
    v57 = 0;
    v55 = 0;
    v54[0] = 0;
    v54[1] = 0;
    v56 = 0;
    v53 = 0;
    v51 = 0;
    v50[0] = 0;
    v50[1] = 0;
    v52 = 0;
    v49 = 0;
    v47 = 0;
    v46[0] = 0;
    v46[1] = 0;
    v48 = 0;
    v45 = 0;
    v43 = 0;
    v42[0] = 0;
    v42[1] = 0;
    v44 = 0;
    v41 = 0;
    v39 = 0;
    v38[0] = 0;
    v38[1] = 0;
    v40 = 0;
    v17 = v59;
    v18 = v47;
    if (v59 | v47)
    {
      v19 = 0;
      v20 = 0;
      while (1)
      {
        re::GeomMesh::GeomMesh((re::GeomMesh *)v37, 0);
        re::GeomMesh::GeomMesh((re::GeomMesh *)v36, 0);
        if (v20 == v17)
          break;
        v21 = v43;
        if (v43 <= v19)
        {
          v65 = 0;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v66 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v71 = 136315906;
          v72 = "operator[]";
          v73 = 1024;
          v74 = 789;
          v75 = 2048;
          v76 = v19;
          v77 = 2048;
          v78 = (char **)v21;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_50:
          v65 = 0;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v66 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v71 = 136315906;
          v72 = "operator[]";
          v73 = 1024;
          v74 = 789;
          v75 = 2048;
          v76 = v21;
          v77 = 2048;
          v78 = p_s;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v21 = v20;
        p_s = (char **)v55;
        if (v55 <= v20)
          goto LABEL_50;
        v22 = *(_DWORD *)(v45 + 4 * v19);
        v23 = *(_DWORD *)(v57 + 4 * v20);
        if (v22 < v23)
          break;
        if (v19 != v18 && v23 >= v22)
        {
          re::GeomMesh::operator=(v37, (uint64_t *)&v66);
          re::GeomMesh::~GeomMesh((re::GeomMesh *)&v66, v28);
          re::GeomMesh::operator=(v36, (uint64_t *)&v66);
          re::GeomMesh::~GeomMesh((re::GeomMesh *)&v66, v29);
          ++v20;
          goto LABEL_19;
        }
        re::GeomMesh::operator=(v37, (uint64_t *)&v66);
        re::GeomMesh::~GeomMesh((re::GeomMesh *)&v66, v30);
        ++v20;
LABEL_20:
        re::GeomMeshBuilder::appendMesh((re::GeomMeshBuilder *)&__s, (const re::GeomMesh *)&v66);
        re::GeomMesh::~GeomMesh((re::GeomMesh *)&v66, v25);
        re::GeomMesh::~GeomMesh((re::GeomMesh *)v36, v26);
        re::GeomMesh::~GeomMesh((re::GeomMesh *)v37, v27);
        if (v20 >= v17 && v19 >= v18)
          goto LABEL_28;
      }
      re::GeomMesh::operator=(v36, (uint64_t *)&v66);
      re::GeomMesh::~GeomMesh((re::GeomMesh *)&v66, v24);
LABEL_19:
      ++v19;
      goto LABEL_20;
    }
LABEL_28:
    if (v38[0] && v41)
      (*(void (**)(void))(*(_QWORD *)v38[0] + 40))();
    if (v42[0] && v45)
      (*(void (**)(void))(*(_QWORD *)v42[0] + 40))();
    if (v46[0] && v49)
      (*(void (**)(void))(*(_QWORD *)v46[0] + 40))();
    if (v50[0] && v53)
      (*(void (**)(void))(*(_QWORD *)v50[0] + 40))();
    if (v54[0] && v57)
      (*(void (**)(void))(*(_QWORD *)v54[0] + 40))();
    if (v58[0] && v61)
      (*(void (**)(void))(*(_QWORD *)v58[0] + 40))();
  }
  else
  {
    re::GeomMeshBuilder::appendMesh((re::GeomMeshBuilder *)&__s, (const re::GeomMesh *)v37);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)v37, v31);
  }
  v32 = (re *)re::GeomMesh::operator=(a5, v63);
  v33 = re::GeomMesh::setName(v32, __s);
  v34 = __s;
  if (__s)
  {
    v35 = re::globalAllocators(v33);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v35[2] + 40))(v35[2], v34);
    __s = 0;
  }
  re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)&__s);
}

void re::`anonymous namespace'::sortFacesByMaterial(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v9;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  unint64_t v32;
  __int16 v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (a2 && (v9 = a2, *(_DWORD *)(a1 + 40)))
  {
    re::DynamicArray<float>::resize(a5, *(unsigned int *)(a1 + 40));
    v12 = *(unsigned int *)(a1 + 40);
    if (*(_DWORD *)(a1 + 40))
    {
      v13 = 0;
      v14 = *(_QWORD *)(a5 + 16);
      v15 = *(_QWORD *)(a5 + 32);
      while (v14 != v13)
      {
        *(_DWORD *)(v15 + 4 * v13) = v13;
        if (v12 == ++v13)
          goto LABEL_7;
      }
      v24 = 0;
      v39 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v27 = 136315906;
      v28 = "operator[]";
      v29 = 1024;
      v30 = 789;
      v31 = 2048;
      v32 = v14;
      v33 = 2048;
      v34 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_24:
      v26 = 0;
      v39 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v27 = 136315906;
      v28 = "operator[]";
      v29 = 1024;
      v30 = 601;
      v31 = 2048;
      v32 = v5;
      v33 = 2048;
      v34 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_25:
      v26 = 0;
      v39 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v27 = 136315906;
      v28 = "operator[]";
      v29 = 1024;
      v30 = 601;
      v31 = 2048;
      v32 = v14;
      v33 = 2048;
      v34 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_7:
    if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v9 + 16))(v9))
    {
      v16 = re::internal::GeomTypedAttribute<int>::operator[](v9, 0);
      v17 = (*(unsigned int (**)(unint64_t))(*(_QWORD *)v9 + 16))(v9);
    }
    else
    {
      v17 = 0;
      v16 = 0;
    }
    v24 = v16;
    v25 = v17;
    v18 = *(_QWORD *)(a5 + 32);
    v19 = *(_QWORD *)(a5 + 16);
    *(_QWORD *)&v35 = &v24;
    v20 = 126 - 2 * __clz(v19);
    if (v19)
      v21 = v20;
    else
      v21 = 0;
    *(_QWORD *)(a3 + 16) = 0;
    ++*(_DWORD *)(a3 + 24);
    *(_QWORD *)(a4 + 16) = 0;
    ++*(_DWORD *)(a4 + 24);
    v22 = *(_QWORD *)(a5 + 16);
    if (v22)
    {
      v14 = **(unsigned int **)(a5 + 32);
      v9 = v25;
      if (v25 <= v14)
        goto LABEL_25;
      v9 = 0;
      v14 = *(unsigned int *)(v24 + 4 * v14);
      do
      {
        v5 = *(unsigned int *)(*(_QWORD *)(a5 + 32) + 4 * v9);
        v6 = v25;
        if (v25 <= v5)
          goto LABEL_24;
        v23 = *(unsigned int *)(v24 + 4 * v5);
        if ((_DWORD)v23 != (_DWORD)v14)
        {
          LODWORD(v35) = v9;
          re::DynamicArray<int>::add((_QWORD *)a4, &v35);
          LODWORD(v35) = v14;
          re::DynamicArray<int>::add((_QWORD *)a3, &v35);
          v22 = *(_QWORD *)(a5 + 16);
          v14 = v23;
        }
        ++v9;
      }
      while (v9 < v22);
      LODWORD(v35) = v22;
      re::DynamicArray<int>::add((_QWORD *)a4, &v35);
      LODWORD(v35) = v14;
      re::DynamicArray<int>::add((_QWORD *)a3, &v35);
    }
  }
  else
  {
    re::DynamicArray<float>::resize(a4, 0);
    *(_QWORD *)(a5 + 16) = 0;
    ++*(_DWORD *)(a5 + 24);
  }
}

uint64_t re::`anonymous namespace'::makeMeshFromMaterial(unint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD v26[3];
  int v27;
  uint64_t v28;
  _QWORD v29[3];
  int v30;
  uint64_t v31;

  v31 = 0;
  memset(v29, 0, sizeof(v29));
  v30 = 0;
  v28 = 0;
  v25 = 0;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v22[1] = 0;
  v23 = 0;
  v22[0] = 0;
  v24 = 0;
  if (a3)
  {
    v11 = a3 - 1;
    if (a5 <= v11)
    {
LABEL_27:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, a5);
      result = _os_crash();
      __break(1u);
      return result;
    }
    v12 = *(_DWORD *)(a4 + 4 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = a3;
  if (a5 <= a3)
  {
LABEL_26:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v13, a5);
    _os_crash();
    __break(1u);
    goto LABEL_27;
  }
  v14 = *(unsigned int *)(a4 + 4 * a3);
  if ((_DWORD)v14 != v12)
    re::DynamicArray<int>::setCapacity(v22, v14 - v12);
  if (v14 > v12)
  {
    if (a7 <= v12)
      v15 = v12;
    else
      v15 = a7;
    v16 = (_DWORD *)(a6 + 4 * v12);
    v17 = v14 - v12;
    v18 = v15 - v12;
    while (v18)
    {
      re::DynamicArray<int>::add(v22, v16++);
      --v18;
      if (!--v17)
        goto LABEL_15;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v15, a7);
    _os_crash();
    __break(1u);
    goto LABEL_26;
  }
LABEL_15:
  v21[0] = v25;
  v21[1] = v23;
  v20[0] = 0;
  v20[1] = 0;
  re::makeMeshFromFaces(a2, v21, v20, (uint64_t)v29, (uint64_t)v26, a1);
  if (v22[0] && v25)
    (*(void (**)(void))(*(_QWORD *)v22[0] + 40))();
  if (v26[0] && v28)
    (*(void (**)(void))(*(_QWORD *)v26[0] + 40))();
  result = v29[0];
  if (v29[0])
  {
    if (v31)
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v29[0] + 40))(v29[0]);
  }
  return result;
}

re::GeomMesh *re::`anonymous namespace'::computeErrorMesh(re::_anonymous_namespace_ *this, const re::GeomMesh *a2, const re::GeomMesh *a3, float a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  float32x4_t *v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  re::internal *v24;
  const re::GeomAttribute *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  re::GeomMesh *result;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  re *v36;
  re *v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD v46[2];
  unint64_t v47;
  int v48;
  uint64_t v49;
  _QWORD v50[2];
  unint64_t v51;
  int v52;
  uint64_t v53;
  _QWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *__s[2];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  int v75;
  const char *v76;
  __int16 v77;
  int v78;
  __int16 v79;
  unint64_t v80;
  __int16 v81;
  unint64_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  __int128 v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  if (!*((_DWORD *)a2 + 10) || !*((_DWORD *)a3 + 10))
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    bzero((char *)this + 16, 0x2C8uLL);
    re::internal::GeomBaseMesh::GeomBaseMesh((re::_anonymous_namespace_ *)((char *)this + 16));
    *((_QWORD *)this + 91) = 0;
    return re::GeomMesh::copy(a3, this);
  }
  v59 = 0;
  v54[0] = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  re::GeomMeshBVHTree::init((uint64_t)v54, a2);
  v7 = re::GeomMesh::accessVertexPositions(a3);
  v53 = 0;
  v50[1] = 0;
  v51 = 0;
  v49 = 0;
  v50[0] = 0;
  v52 = 0;
  v46[1] = 0;
  v47 = 0;
  v46[0] = 0;
  v48 = 0;
  v9 = *((_QWORD *)a3 + 5);
  if (!(_DWORD)v9)
    goto LABEL_16;
  v10 = v7;
  v11 = v8;
  v12 = 0;
  do
  {
    v13 = 0uLL;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    if (v9 <= v12)
      goto LABEL_64;
    v14 = 0;
    v74 = *(_OWORD *)(*((_QWORD *)a3 + 7) + 16 * v12);
    v15 = HIDWORD(v74);
    if (HIDWORD(v74) == -1)
      v16 = 3;
    else
      v16 = 4;
    v17 = &v83;
    do
    {
      v9 = *((unsigned int *)&v74 + v14);
      if (v9 >= v11)
      {
        v60 = 0;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        *(_OWORD *)__s = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v75 = 136315906;
        v76 = "operator[]";
        v77 = 1024;
        v78 = 601;
        v79 = 2048;
        v80 = v9;
        v81 = 2048;
        v82 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_64:
        *(_QWORD *)&v74 = 0;
        v64 = v13;
        v65 = v13;
        v62 = v13;
        v63 = v13;
        *(_OWORD *)__s = v13;
        v43 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v75 = 136315906;
        v76 = "operator[]";
        v77 = 1024;
        v78 = 797;
        v79 = 2048;
        v80 = v12;
        v81 = 2048;
        v82 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_65;
      }
      *v17++ = *(float32x4_t *)(v10 + 16 * v9);
      ++v14;
    }
    while (v16 != v14);
    if (v15 == -1)
    else
    ++v12;
    v9 = *((_QWORD *)a3 + 5);
  }
  while (v12 < v9);
LABEL_16:
  re::GeomMesh::GeomMesh(this, 0);
  v18 = v51;
  v19 = v47;
  if (v51 | v47)
  {
    v20 = v51 / 3;
    v21 = v47 >> 2;
    bzero(__s, 0x2D0uLL);
    re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&__s[1]);
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)((char *)&v64 + 8), "vertexPosition", 1, 7);
    if ((int)v21 + (int)v20 < v63)
    {
      v22 = v73;
      if (v73)
      {
        v23 = 0;
        do
        {
          v24 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)&v72, v23);
          re::internal::accessFaceVaryingAttributeSubmesh(v24, v25);
          ++v23;
        }
        while (v22 != v23);
      }
    }
    re::DynamicArray<re::GeomCell4>::resize(&v62, (v21 + v20));
    v69 = v21 + v20;
    if (v70)
    {
      v26 = v71;
      v27 = 8 * v70;
      do
      {
        v28 = *v26++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 72))(v28, v69);
        v27 -= 8;
      }
      while (v27);
    }
    if (LODWORD(__s[1]) > (v47 + v51) && (_DWORD)v63 && (v63 - 1) > (unint64_t)v63)
    {
      while (1)
        ;
    }
    LODWORD(__s[1]) = v47 + v51;
    v66 = v47 + v51;
    if (v67)
    {
      v30 = v68;
      v31 = 8 * v67;
      do
      {
        v32 = *v30++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 72))(v32, v66);
        v31 -= 8;
      }
      while (v31);
    }
    if ((_DWORD)v20)
    {
      v33 = 0;
      v34 = 0;
      do
      {
        re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v34++, v33, v33 + 1, v33 + 2);
        v33 += 3;
      }
      while ((_DWORD)v20 != v34);
    }
    if ((_DWORD)v21)
    {
      v35 = v18;
      do
      {
        re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v20, v35, v35 + 1, v35 + 2, v35 + 3);
        LODWORD(v20) = v20 + 1;
        v35 += 4;
        LODWORD(v21) = v21 - 1;
      }
      while ((_DWORD)v21);
    }
    v36 = (re *)re::GeomMesh::operator=((uint64_t)this, &__s[1]);
    v37 = re::GeomMesh::setName(v36, __s[0]);
    v38 = __s[0];
    if (__s[0])
    {
      v39 = re::globalAllocators(v37);
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v39[2] + 40))(v39[2], v38);
      __s[0] = 0;
    }
    v40 = re::GeomMesh::modifyVertexPositions(this);
    v42 = v41;
    if (v18)
    {
      v11 = 0;
      v43 = v41;
      while (1)
      {
        v10 = v51;
        if (v51 <= v11)
          break;
        if (v11 == v41)
          goto LABEL_66;
        *(_OWORD *)(v40 + 16 * v11) = *(_OWORD *)(v53 + 16 * v11);
        if (++v11 == v18)
          goto LABEL_45;
      }
LABEL_65:
      *(_QWORD *)&v74 = 0;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v83 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v75 = 136315906;
      v76 = "operator[]";
      v77 = 1024;
      v78 = 789;
      v79 = 2048;
      v80 = v11;
      v81 = 2048;
      v82 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_66:
      *(_QWORD *)&v74 = 0;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v83 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v75 = 136315906;
      v76 = "operator[]";
      v77 = 1024;
      v78 = 609;
      v79 = 2048;
      v80 = v43;
      v81 = 2048;
      v82 = v43;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_67:
      *(_QWORD *)&v74 = 0;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v83 = 0u;
      v42 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v75 = 136315906;
      v76 = "operator[]";
      v77 = 1024;
      v78 = 789;
      v79 = 2048;
      v80 = v43;
      v81 = 2048;
      v82 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_68:
      *(_QWORD *)&v74 = 0;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v83 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v75 = 136315906;
      v76 = "operator[]";
      v77 = 1024;
      v78 = 609;
      v79 = 2048;
      v80 = v11;
      v81 = 2048;
      v82 = v42;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_45:
    if (v19)
    {
      v43 = 0;
      LODWORD(v44) = v41 - v18;
      if (v41 >= v18)
        v44 = v44;
      else
        v44 = 0;
      do
      {
        v11 = v47;
        if (v47 <= v43)
          goto LABEL_67;
        v11 = v43 + v18;
        if (v43 == v44)
          goto LABEL_68;
        *(_OWORD *)(v40 + 16 * v11) = *(_OWORD *)(v49 + 16 * v43++);
      }
      while (v43 != v19);
    }
    re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)__s);
  }
  if (v46[0] && v49)
    (*(void (**)(void))(*(_QWORD *)v46[0] + 40))();
  if (v50[0] && v53)
    (*(void (**)(void))(*(_QWORD *)v50[0] + 40))();
  result = (re::GeomMesh *)v55;
  if (v55 && v59)
    return (re::GeomMesh *)(*(uint64_t (**)(void))(*(_QWORD *)v55 + 40))();
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,re::`anonymous namespace'::sortFacesByMaterial(re::GeomMesh const&,re::GeomAttribute const*,re::DynamicArray<int> &,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned int> &)::$_0 &,unsigned int *,false>(uint64_t result, int32x2_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int32x2_t *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  int32x2_t *v20;
  int32x2_t *v21;
  unsigned int v22;
  unsigned int v23;
  int32x2_t *v24;
  int32x2_t *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int32x2_t *v29;
  BOOL v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  int32x2_t *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  __int32 v47;
  unsigned int v48;
  int32x2_t *v49;
  BOOL v50;
  char v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  int32x2_t *v58;
  int64_t v59;
  int64_t v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  int32x2_t *v68;
  uint64_t v69;
  int32x2_t *v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int *v76;
  int32x2_t *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  int32x2_t *v84;
  int32x2_t *v85;
  __int32 v86;
  unsigned int *v87;
  int64_t v88;
  int32x2_t *v89;
  unsigned int *v90;
  int64_t v91;
  unsigned int v92;

  v9 = (int32x2_t *)result;
LABEL_2:
  v10 = (unsigned int *)&a2[-1] + 1;
  v89 = a2;
  v90 = (unsigned int *)&a2[-1];
  v87 = (unsigned int *)&a2[-2] + 1;
  v11 = (unsigned int *)v9;
  while (2)
  {
    v9 = (int32x2_t *)v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = ((char *)a2 - (char *)v11) >> 2;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if ((_DWORD)result)
        {
          v40 = v9->i32[0];
          v9->i32[0] = a2[-1].i32[1];
          a2[-1].i32[1] = v40;
        }
        return result;
      case 3:
      case 4:
      case 5:
        v41 = (unsigned int *)&v9[1];
        v42 = (unsigned int *)&v9[1] + 1;
        if ((_DWORD)result)
        {
          v43 = *v42;
          *v42 = a2[-1].u32[1];
          a2[-1].i32[1] = v43;
          if ((_DWORD)result)
          {
            v44 = *v41;
            v45 = *v42;
            *v41 = *v42;
            *v42 = v44;
            if ((_DWORD)result)
            {
              v47 = v9->i32[1];
              v46 = v9[1].u32[0];
              v48 = v9->i32[0];
              v9->i32[1] = v46;
              v9[1].i32[0] = v47;
              if ((_DWORD)result)
                *v9 = vrev64_s32(*v9);
            }
          }
        }
        return result;
      default:
        if (v12 <= 95)
        {
          v49 = (int32x2_t *)((char *)v9 + 4);
          v50 = v9 == a2 || v49 == a2;
          v51 = v50;
          if ((a5 & 1) != 0)
          {
            if ((v51 & 1) == 0)
            {
              v52 = 0;
              v53 = (unsigned int *)v9;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = (unsigned int *)v49;
                if ((_DWORD)result)
                {
                  v56 = *v53;
                  v57 = v52;
                  while (1)
                  {
                    *(__int32 *)((char *)&v9->i32[1] + v57) = *(__int32 *)((char *)v9->i32 + v57);
                    if (!v57)
                      break;
                    v57 -= 4;
                    if ((result & 1) == 0)
                    {
                      v58 = (int32x2_t *)((char *)v9 + v57 + 4);
                      goto LABEL_78;
                    }
                  }
                  v58 = v9;
LABEL_78:
                  v58->i32[0] = v56;
                }
                v49 = (int32x2_t *)(v53 + 1);
                v52 += 4;
              }
              while (v53 + 1 != (unsigned int *)a2);
            }
          }
          else if ((v51 & 1) == 0)
          {
            do
            {
              v82 = v9->i32[0];
              v81 = v9->u32[1];
              v9 = v49;
              if ((_DWORD)result)
              {
                v83 = v9->i32[0];
                v84 = v9;
                do
                {
                  v85 = v84;
                  v86 = v84[-1].i32[1];
                  v84 = (int32x2_t *)((char *)v84 - 4);
                  v85->i32[0] = v86;
                }
                while ((result & 1) != 0);
                v84->i32[0] = v83;
              }
              v49 = (int32x2_t *)((char *)v9 + 4);
            }
            while (&v9->u8[4] != (unsigned __int8 *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v59 = (unint64_t)(v13 - 2) >> 1;
            v91 = v59;
            do
            {
              v60 = v59;
              if (v91 >= v59)
              {
                v61 = (2 * v59) | 1;
                v62 = (unsigned int *)v9 + v61;
                if (2 * v59 + 2 < v13
                {
                  ++v62;
                  v61 = 2 * v60 + 2;
                }
                v63 = (unsigned int *)v9 + v60;
                if ((result & 1) == 0)
                {
                  v88 = v60;
                  v64 = *v63;
                  do
                  {
                    v65 = v62;
                    *v63 = *v62;
                    if (v91 < v61)
                      break;
                    v66 = (2 * v61) | 1;
                    v62 = (unsigned int *)v9 + v66;
                    if (2 * v61 + 2 < v13
                    {
                      ++v62;
                      v66 = 2 * v61 + 2;
                    }
                    v63 = v65;
                    v61 = v66;
                  }
                  while (!(_DWORD)result);
                  *v65 = v64;
                  v60 = v88;
                  a2 = v89;
                }
              }
              v59 = v60 - 1;
            }
            while (v60);
            v67 = (unint64_t)v12 >> 2;
            do
            {
              v68 = a2;
              v69 = 0;
              v92 = v9->i32[0];
              v70 = v9;
              do
              {
                v71 = (unsigned int *)v70 + v69 + 1;
                v72 = (2 * v69) | 1;
                v73 = 2 * v69 + 2;
                if (v73 < v67)
                {
                  if ((_DWORD)result)
                  {
                    ++v71;
                    v72 = v73;
                  }
                }
                v70->i32[0] = *v71;
                v70 = (int32x2_t *)v71;
                v69 = v72;
              }
              while (v72 <= (uint64_t)((unint64_t)(v67 - 2) >> 1));
              a2 = (int32x2_t *)((char *)v68 - 4);
              if (v71 == (unsigned int *)&v68[-1].u8[4])
              {
                *v71 = v92;
              }
              else
              {
                *v71 = a2->i32[0];
                a2->i32[0] = v92;
                v74 = (char *)v71 - (char *)v9 + 4;
                if (v74 >= 5)
                {
                  v75 = (((unint64_t)v74 >> 2) - 2) >> 1;
                  v76 = (unsigned int *)v9 + v75;
                  if ((_DWORD)result)
                  {
                    v77 = (int32x2_t *)((char *)v68 - 4);
                    v78 = *v71;
                    do
                    {
                      v79 = v76;
                      *v71 = *v76;
                      if (!v75)
                        break;
                      v75 = (v75 - 1) >> 1;
                      v76 = (unsigned int *)v9 + v75;
                      v71 = v79;
                    }
                    while ((result & 1) != 0);
                    *v79 = v78;
                    a2 = v77;
                  }
                }
              }
            }
            while (v67-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = (unsigned int *)v9 + ((unint64_t)v13 >> 1);
        if ((unint64_t)v12 < 0x201)
        {
        }
        else
        {
          v16 = v9->i32[0];
          v9->i32[0] = *v15;
          *v15 = v16;
        }
        --a4;
        if ((a5 & 1) == 0
        {
          v31 = v9->i32[0];
          if ((result & 1) != 0)
          {
            v11 = (unsigned int *)v9;
            do
            {
              v32 = v11[1];
              ++v11;
            }
            while ((result & 1) == 0);
          }
          else
          {
            v33 = (unsigned int *)v9 + 1;
            do
            {
              v11 = v33;
              if (v33 >= (unsigned int *)a2)
                break;
              ++v33;
            }
            while (!(_DWORD)result);
          }
          v34 = a2;
          if (v11 < (unsigned int *)a2)
          {
            v34 = a2;
            do
            {
              v35 = v34[-1].u32[1];
              v34 = (int32x2_t *)((char *)v34 - 4);
            }
            while ((result & 1) != 0);
          }
          while (v11 < (unsigned int *)v34)
          {
            v36 = *v11;
            *v11 = v34->i32[0];
            v34->i32[0] = v36;
            do
            {
              v37 = v11[1];
              ++v11;
            }
            do
            {
              v38 = v34[-1].u32[1];
              v34 = (int32x2_t *)((char *)v34 - 4);
            }
            while ((result & 1) != 0);
          }
          v39 = v11 - 1;
          if (v11 - 1 != (unsigned int *)v9)
            v9->i32[0] = *v39;
          a5 = 0;
          *v39 = v31;
          continue;
        }
        v17 = 0;
        v18 = v9->i32[0];
        v20 = (int32x2_t *)((char *)v9 + v17 * 4);
        v21 = v89;
        v50 = v17 == 1;
        a2 = v89;
        if (v50)
        {
          v21 = v89;
          do
          {
            if (v20 >= v21)
              break;
            v23 = v21[-1].u32[1];
            v21 = (int32x2_t *)((char *)v21 - 4);
          }
        }
        else
        {
          do
          {
            v22 = v21[-1].u32[1];
            v21 = (int32x2_t *)((char *)v21 - 4);
          }
        }
        if (v20 >= v21)
        {
          v29 = (int32x2_t *)((char *)v20 - 4);
        }
        else
        {
          v24 = v20;
          v25 = v21;
          do
          {
            v26 = v24->i32[0];
            v24->i32[0] = v25->i32[0];
            v25->i32[0] = v26;
            do
            {
              v27 = v24->u32[1];
              v24 = (int32x2_t *)((char *)v24 + 4);
            }
            do
            {
              v28 = v25[-1].u32[1];
              v25 = (int32x2_t *)((char *)v25 - 4);
            }
          }
          while (v24 < v25);
          v29 = (int32x2_t *)((char *)v24 - 4);
          a2 = v89;
        }
        if (v29 != v9)
          v9->i32[0] = v29->i32[0];
        v29->i32[0] = v18;
        if (v20 < v21)
        {
LABEL_32:
          a5 = 0;
          v11 = (unsigned int *)v29 + 1;
          continue;
        }
        v11 = (unsigned int *)v29 + 1;
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_32;
        }
        a2 = v29;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL re::`anonymous namespace'::sortFacesByMaterial(re::GeomMesh const&,re::GeomAttribute const*,re::DynamicArray<int> &,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned int> &)::$_0::operator()(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v3 <= a3)
    goto LABEL_5;
  return *(_DWORD *)(*(_QWORD *)a1 + 4 * a2) < *(_DWORD *)(*(_QWORD *)a1 + 4 * a3);
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::`anonymous namespace'::sortFacesByMaterial(re::GeomMesh const&,re::GeomAttribute const*,re::DynamicArray<int> &,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned int> &)::$_0 &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t *a4)
{
  BOOL v8;
  _BOOL8 result;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  if (v8)
  {
    v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      if (result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::`anonymous namespace'::sortFacesByMaterial(re::GeomMesh const&,re::GeomAttribute const*,re::DynamicArray<int> &,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned int> &)::$_0 &,unsigned int *>(int32x2_t *a1, int32x2_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  int32x2_t *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  __int32 v23;
  unsigned int v24;

  v6 = ((char *)a2 - (char *)a1) >> 2;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      {
        v8 = a1->i32[0];
        a1->i32[0] = a2[-1].i32[1];
        a2[-1].i32[1] = v8;
      }
      return 1;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      v17 = (unsigned int *)&a1[1];
      v18 = (unsigned int *)&a1[1] + 1;
      {
        v19 = *v18;
        *v18 = a2[-1].u32[1];
        a2[-1].i32[1] = v19;
        {
          v20 = *v17;
          v21 = *v18;
          *v17 = *v18;
          *v18 = v20;
          {
            v23 = a1->i32[1];
            v22 = a1[1].u32[0];
            v24 = a1->i32[0];
            a1->i32[1] = v22;
            a1[1].i32[0] = v23;
            {
              *a1 = vrev64_s32(*a1);
            }
          }
        }
      }
      return 1;
    default:
      v9 = (unsigned int *)&a1[1];
      v10 = (unsigned int *)&a1[1] + 1;
      if (&a1[1].u8[4] == (unsigned __int8 *)a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(__int32 *)((char *)&a1[1].i32[1] + v14) = *(__int32 *)((char *)a1[1].i32 + v14);
        if (v14 == -8)
          break;
        v14 -= 4;
        {
          v16 = (int32x2_t *)((char *)a1 + v14 + 12);
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      v16->i32[0] = v13;
      if (++v12 == 8)
        return v10 + 1 == (unsigned int *)a2;
    }
    v9 = v10;
    v11 += 4;
    if (++v10 == (unsigned int *)a2)
      return 1;
  }
}

BOOL std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::`anonymous namespace'::sortFacesByMaterial(re::GeomMesh const&,re::GeomAttribute const*,re::DynamicArray<int> &,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned int> &)::$_0 &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t *a5)
{
  _BOOL8 result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  if (result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      if (result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

void re::`anonymous namespace'::computeErrorTriangle(re::GeomMeshBVHTree *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, int a5, _anonymous_namespace_ *a6, float a7)
{
  float v14;
  int v15;
  int v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float32x4_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  __int128 v39;
  __int128 v40;

  v14 = a7 * a7;
  v39 = 0u;
  v40 = 0u;
  v15 = re::GeomMeshBVHTree::computeClosestPoint(a1, a2, &v38) > (float)(a7 * a7);
  v39 = 0u;
  v40 = 0u;
  if (re::GeomMeshBVHTree::computeClosestPoint(a1, a3, &v38) > v14)
    ++v15;
  v39 = 0u;
  v40 = 0u;
  if (re::GeomMeshBVHTree::computeClosestPoint(a1, a4, &v38) > v14)
    ++v15;
  __asm { FMOV            V1.4S, #3.0 }
  v37 = vdivq_f32(vaddq_f32(vaddq_f32(*a2, *a3), *a4), _Q1);
  v39 = 0u;
  v40 = 0u;
  if (re::GeomMeshBVHTree::computeClosestPoint(a1, &v37, &v38) <= v14)
    v21 = v15;
  else
    v21 = v15 + 1;
  if (v21)
  {
    if (!a5 || v21 == 4)
      goto LABEL_17;
    v22 = *a3;
    v23 = *a4;
    v24 = vsubq_f32(*a4, *a3);
    v25 = vmulq_f32(v24, v24);
    v26 = *a2;
    v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1)));
    v28 = vsubq_f32(*a4, *a2);
    v29 = vmulq_f32(v28, v28);
    v30 = vsubq_f32(*a3, *a2);
    v31 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1)));
    v32 = vmulq_f32(v30, v30);
    LODWORD(v33) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).u32[0];
    if ((vmovn_s32(vcgtq_f32(v31, v27)).u8[0] & 1) != 0)
      v27.f32[0] = v31.f32[0];
    if (v33 >= v27.f32[0])
      v27.f32[0] = v33;
    if (v27.f32[0] <= v14)
    {
LABEL_17:
      re::DynamicArray<re::Vector3<float>>::add(a6, (__n128 *)a2);
      re::DynamicArray<re::Vector3<float>>::add(a6, (__n128 *)a3);
      re::DynamicArray<re::Vector3<float>>::add(a6, (__n128 *)a4);
    }
    else
    {
      v34.i64[0] = 0x3F0000003F000000;
      v34.i64[1] = 0x3F0000003F000000;
      v37 = vmulq_f32(vaddq_f32(v22, v23), v34);
      v38 = vmulq_f32(vaddq_f32(v22, v26), v34);
      v36 = vmulq_f32(vaddq_f32(v26, v23), v34);
      v35 = (a5 - 1);
    }
  }
}

void re::`anonymous namespace'::computeErrorQuad(re::GeomMeshBVHTree *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, int a6, _anonymous_namespace_ *a7, float a8)
{
  float v16;
  int v17;
  int v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  __int128 v43;
  __int128 v44;

  v16 = a8 * a8;
  v43 = 0u;
  v44 = 0u;
  v17 = re::GeomMeshBVHTree::computeClosestPoint(a1, a2, &v42) > (float)(a8 * a8);
  v43 = 0u;
  v44 = 0u;
  if (re::GeomMeshBVHTree::computeClosestPoint(a1, a3, &v42) > v16)
    ++v17;
  v43 = 0u;
  v44 = 0u;
  if (re::GeomMeshBVHTree::computeClosestPoint(a1, a4, &v42) > v16)
    ++v17;
  v43 = 0u;
  v44 = 0u;
  if (re::GeomMeshBVHTree::computeClosestPoint(a1, a5, &v42) > v16)
    ++v17;
  __asm { FMOV            V1.4S, #0.25 }
  v41 = vmulq_f32(vaddq_f32(vaddq_f32(vaddq_f32(*a2, *a3), *a4), *a5), _Q1);
  v43 = 0u;
  v44 = 0u;
  if (re::GeomMeshBVHTree::computeClosestPoint(a1, &v41, &v42) <= v16)
    v23 = v17;
  else
    v23 = v17 + 1;
  if (v23)
  {
    if (!a6 || v23 == 5)
      goto LABEL_17;
    v24 = *a4;
    v25 = *a2;
    v26 = vsubq_f32(*a4, *a2);
    v27 = vmulq_f32(v26, v26);
    v28 = vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1));
    v29 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2);
    v30 = *a5;
    v31 = *a3;
    v32 = vsubq_f32(*a5, *a3);
    v33 = vmulq_f32(v32, v32);
    v34 = vaddq_f32(v29, v28);
    v35 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1)));
    if ((vmovn_s32(vcgtq_f32(v35, v34)).u8[0] & 1) != 0)
      v34.f32[0] = v35.f32[0];
    if (v34.f32[0] <= v16)
    {
LABEL_17:
      re::DynamicArray<re::Vector3<float>>::add(a7, (__n128 *)a2);
      re::DynamicArray<re::Vector3<float>>::add(a7, (__n128 *)a3);
      re::DynamicArray<re::Vector3<float>>::add(a7, (__n128 *)a4);
      re::DynamicArray<re::Vector3<float>>::add(a7, (__n128 *)a5);
    }
    else
    {
      v36.i64[0] = 0x3F0000003F000000;
      v36.i64[1] = 0x3F0000003F000000;
      v42 = vmulq_f32(vaddq_f32(v25, v31), v36);
      v39 = vmulq_f32(vaddq_f32(v24, v30), v36);
      v40 = vmulq_f32(vaddq_f32(v24, v31), v36);
      v38 = vmulq_f32(vaddq_f32(v25, v30), v36);
      v37 = (a6 - 1);
    }
  }
}

uint64_t re::buildPlatterWithRoundedCorners(unsigned int *a1, unsigned __int16 *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  _BOOL4 v34;
  _BOOL4 v36;
  _BOOL4 v38;
  __int16 v39;
  int v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  uint64_t result;
  re::GeomMesh *v45;
  int v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t *v49;
  re::GeomMesh *v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  float32x2_t v54;
  float32x2_t v59;
  uint64_t v60;
  float32x2_t v61;
  __int128 v62;
  float32x2_t v63;
  uint64_t v64;
  int v65;
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  LODWORD(v73) = 0;
  WORD2(v73) = 0;
  LOWORD(v77) = 0;
  LOBYTE(v73) = *((_BYTE *)a2 + 36);
  BYTE3(v73) = *((_BYTE *)a2 + 37);
  *((_QWORD *)&v77 + 1) = *((_QWORD *)a2 + 7);
  BYTE4(v73) = *((_BYTE *)a2 + 38);
  BYTE5(v73) = 1;
  v5 = *((float *)a2 + 10);
  v4 = *((float *)a2 + 11);
  *((_QWORD *)&v73 + 1) = __PAIR64__(LODWORD(v4), LODWORD(v5));
  v6 = *((float *)a2 + 12);
  *(float *)&v74 = v6;
  v7 = 1.5287;
  v8 = 1.5287;
  if (v5 < 1.0)
  {
    v8 = 1.0;
    if (v5 > 0.0)
      v8 = (float)(v5 * 0.52866) + 1.0;
  }
  v9 = 1.5287;
  if (v4 < 1.0)
  {
    v9 = 1.0;
    if (v4 > 0.0)
      v9 = (float)(v4 * 0.52866) + 1.0;
  }
  if (v6 < 1.0)
  {
    v7 = 1.0;
    if (v6 > 0.0)
      v7 = (float)(v6 * 0.52866) + 1.0;
  }
  v11 = *((float *)a2 + 7);
  v10 = *((float *)a2 + 8);
  if (v11 >= v10)
    v12 = v9;
  else
    v12 = v8;
  if (v11 >= v10)
    v13 = *((float *)a2 + 8);
  else
    v13 = *((float *)a2 + 7);
  v14 = v13 / (float)(v12 + v12);
  v15 = *((float *)a2 + 4);
  if (v14 >= *((float *)a2 + 3))
    v14 = *((float *)a2 + 3);
  *((float *)&v74 + 1) = v14;
  v16 = 0.0;
  v17 = 0.0;
  if (v15 >= 0.0)
  {
    v16 = (float)(v15 / v7) >= v14 ? v14 : v15 / v7;
    v17 = *((float *)a2 + 5) / v7;
    if (v17 >= v14)
      v17 = v14;
  }
  *((_QWORD *)&v74 + 1) = __PAIR64__(LODWORD(v17), LODWORD(v16));
  v18 = v11 + (float)((float)(v8 * -2.0) * v14);
  if (v18 < 0.0)
    v18 = 0.0;
  v19 = v10 + (float)((float)(v9 * -2.0) * v14);
  if (v19 < 0.0)
    v19 = 0.0;
  *(_QWORD *)&v75 = __PAIR64__(LODWORD(v19), LODWORD(v18));
  v20 = *((float *)a2 + 6);
  *((float *)&v75 + 2) = v20;
  v21 = a2[3];
  if (v21 <= 2)
    v22 = 2;
  else
    v22 = a2[3];
  v23 = v22 + 1;
  v24 = a2[4];
  if (v24 <= 1)
    v25 = 1;
  else
    v25 = a2[4];
  DWORD2(v76) = v23;
  HIDWORD(v76) = v25 + 1;
  v26 = *a2;
  if (v26 <= 1)
    v27 = 1;
  else
    v27 = *a2;
  v28 = a2[1];
  if (v28 <= 1)
    v29 = 1;
  else
    v29 = a2[1];
  HIDWORD(v75) = v27;
  LODWORD(v76) = v29;
  v30 = a2[2];
  if (v30 <= 1)
    v31 = 1;
  else
    v31 = a2[2];
  DWORD1(v76) = v31;
  v32 = v24 * v21;
  v34 = v18 == 0.0 || v26 == 0;
  v36 = v19 == 0.0 || v28 == 0;
  v38 = v20 == 0.0 || v30 == 0;
  if (v14 == 0.0)
  {
    v39 = 316;
    goto LABEL_72;
  }
  if (v16 == 0.0)
  {
    v39 = 4;
LABEL_67:
    LOWORD(v77) = v39;
    goto LABEL_68;
  }
  if (v14 == v16)
  {
    v39 = 8;
    goto LABEL_67;
  }
  v39 = 0;
LABEL_68:
  if (v17 == 0.0)
  {
    v39 |= 0x10u;
  }
  else
  {
    if (v14 != v17)
      goto LABEL_73;
    v39 |= 0x20u;
  }
LABEL_72:
  LOWORD(v77) = v39;
LABEL_73:
  if (v32)
    v40 = v34;
  else
    v40 = 1;
  if ((v40 | (v36 || v38)) == 1)
  {
    if (v32)
      v41 = v39;
    else
      v41 = v39 | 0x3C;
    if (v34)
      v42 = v41 | 0x41;
    else
      v42 = v41;
    if (v36)
      v43 = v42 | 0x81;
    else
      v43 = v42;
    if (v38)
      v43 |= 2u;
    LOWORD(v77) = v43;
  }
  v46 = *((unsigned __int8 *)a2 + 36);
  if (*((_BYTE *)a2 + 36) || *((_BYTE *)a2 + 37))
  {
    if (*((_BYTE *)a2 + 37))
    {
      v46 = *((unsigned __int8 *)a2 + 36);
    }
    if (v46)
    {
      re::addVertexUVs((re *)a1, v45);
      re::computeAABB((re *)a1, &v62);
      v47 = v63;
      v48 = (float32x2_t)v62;
      v49 = (float32x2_t *)re::GeomMesh::accessVertexPositions((re::GeomMesh *)a1);
      v51 = v50;
      result = re::modifyVertexUVs((re *)a1, v50);
      if (a1[4])
      {
        v53 = 0;
        v54 = vsub_f32(v47, v48);
        __asm { FMOV            V2.2S, #1.0 }
        v59 = (float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v54), (int8x8_t)v54, _D2);
        v60 = v52;
        do
        {
          if (v51 == v53)
          {
            v64 = 0;
            v76 = 0u;
            v77 = 0u;
            v74 = 0u;
            v75 = 0u;
            v73 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v65 = 136315906;
            v66 = "operator[]";
            v67 = 1024;
            v68 = 601;
            v69 = 2048;
            v70 = v51;
            v71 = 2048;
            v72 = v51;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_103:
            v64 = 0;
            v76 = 0u;
            v77 = 0u;
            v74 = 0u;
            v75 = 0u;
            v73 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v65 = 136315906;
            v66 = "operator[]";
            v67 = 1024;
            v68 = 609;
            v69 = 2048;
            v70 = v60;
            v71 = 2048;
            v72 = v60;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (v52 == v53)
            goto LABEL_103;
          v61 = *v49;
          v49 += 2;
          *(float32x2_t *)(result + 8 * v53++) = vdiv_f32(vsub_f32(v61, v48), v59);
        }
        while (v53 < a1[4]);
      }
    }
    else
    {
      return re::internal::GeomAttributeManager::deleteAttribute((re::internal::GeomAttributeManager *)(a1 + 16), "vertexUV");
    }
  }
  return result;
}

uint64_t re::`anonymous namespace'::buildRoundedBoxOrPlatter(re *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  re::GeomAttribute *v17;
  uint64_t v18;
  int v19;
  int32x4_t *v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t result;
  uint64_t v29[2];
  _QWORD v30[2];
  _QWORD v31[2];
  unint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD v35[2];
  unint64_t v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[28];
  __int16 v45;
  _BYTE v46[10];
  _BYTE v47[28];
  __int16 v48;
  _BYTE v49[10];
  _BYTE v50[28];
  __int16 v51;
  _BYTE v52[10];
  uint64_t v53;

  v7 = (unint64_t)a1;
  v53 = *MEMORY[0x24BDAC8D0];
  v38 = 0;
  v35[1] = 0;
  v36 = 0;
  v35[0] = 0;
  v37 = 0;
  v9 = v8;
  v34 = 0;
  v31[1] = 0;
  v32 = 0;
  v31[0] = 0;
  v33 = 0;
  if (*(_BYTE *)(a2 + 2))
  {
    re::DynamicArray<re::Vector3<float>>::resize((uint64_t)v31, *(_DWORD *)(v7 + 16) - v8);
    if (v9 < *(_DWORD *)(v7 + 16))
    {
      v12 = v11;
      v13 = 0;
      v14 = 0;
      if (v9 <= v11)
        v2 = v11;
      else
        v2 = v9;
      while (v9 - v2 + v14)
      {
        v3 = v32;
        if (v32 <= v14)
          goto LABEL_56;
        *(_OWORD *)(v34 + v13) = *(_OWORD *)(v10 + 16 * v9 + v13);
        ++v14;
        v13 += 16;
        if (v9 + v14 >= *(unsigned int *)(v7 + 16))
          goto LABEL_9;
      }
      *(_QWORD *)v47 = 0;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v39 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v50 = 136315906;
      *(_QWORD *)&v50[4] = "operator[]";
      *(_WORD *)&v50[12] = 1024;
      *(_DWORD *)&v50[14] = 601;
      *(_WORD *)&v50[18] = 2048;
      *(_QWORD *)&v50[20] = v2;
      v51 = 2048;
      *(_QWORD *)v52 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_56:
      *(_QWORD *)v47 = 0;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v39 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v50 = 136315906;
      *(_QWORD *)&v50[4] = "operator[]";
      *(_WORD *)&v50[12] = 1024;
      *(_DWORD *)&v50[14] = 789;
      *(_WORD *)&v50[18] = 2048;
      *(_QWORD *)&v50[20] = v14;
      v51 = 2048;
      *(_QWORD *)v52 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_57;
    }
  }
LABEL_9:
  *(_QWORD *)&v52[2] = 0;
  memset(v50, 0, sizeof(v50));
  if (*(_WORD *)(a2 + 64))
  {
    *(_QWORD *)&v49[2] = 0;
    memset(v47, 0, sizeof(v47));
    if (*(_DWORD *)(v7 + 40))
    {
      re::DynamicArray<int>::setCapacity(v47, *(unsigned int *)(v7 + 40));
      v15 = *(unsigned int *)(v7 + 40);
      LODWORD(v29[0]) = 0;
      if (v15)
      {
        v16 = 0;
        while (1)
        {
          v12 = v16;
          v14 = v36;
          if (v36 <= v16)
            break;
          if ((*(_WORD *)(a2 + 64) & *(_WORD *)(v38 + 2 * v16)) == 0)
          {
            re::DynamicArray<int>::add(v47, v29);
            v16 = v29[0];
            v15 = *(_QWORD *)(v7 + 40);
          }
          LODWORD(v29[0]) = ++v16;
          if (v16 >= v15)
            goto LABEL_17;
        }
LABEL_57:
        v30[0] = 0;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v44 = 136315906;
        *(_QWORD *)&v44[4] = "operator[]";
        *(_WORD *)&v44[12] = 1024;
        *(_DWORD *)&v44[14] = 789;
        *(_WORD *)&v44[18] = 2048;
        *(_QWORD *)&v44[20] = v12;
        v45 = 2048;
        *(_QWORD *)v46 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_58:
        *(_QWORD *)v44 = 0;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v47 = 136315906;
        *(_QWORD *)&v47[4] = "operator[]";
        *(_WORD *)&v47[12] = 1024;
        *(_DWORD *)&v47[14] = 789;
        *(_WORD *)&v47[18] = 2048;
        *(_QWORD *)&v47[20] = v7;
        v48 = 2048;
        *(_QWORD *)v49 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_59:
        *(_QWORD *)v44 = 0;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v47 = 136315906;
        *(_QWORD *)&v47[4] = "operator[]";
        *(_WORD *)&v47[12] = 1024;
        *(_DWORD *)&v47[14] = 789;
        *(_WORD *)&v47[18] = 2048;
        *(_QWORD *)&v47[20] = v4;
        v48 = 2048;
        *(_QWORD *)v49 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_60:
        *(_QWORD *)v44 = 0;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v47 = 136315906;
        *(_QWORD *)&v47[4] = "operator[]";
        *(_WORD *)&v47[12] = 1024;
        *(_DWORD *)&v47[14] = 609;
        *(_WORD *)&v47[18] = 2048;
        *(_QWORD *)&v47[20] = v7;
        v48 = 2048;
        *(_QWORD *)v49 = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_61:
        *(_QWORD *)v44 = 0;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v47 = 136315906;
        *(_QWORD *)&v47[4] = "operator[]";
        *(_WORD *)&v47[12] = 1024;
        *(_DWORD *)&v47[14] = 601;
        *(_WORD *)&v47[18] = 2048;
        *(_QWORD *)&v47[20] = v7;
        v48 = 2048;
        *(_QWORD *)v49 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_62:
        *(_QWORD *)v44 = 0;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v47 = 136315906;
        *(_QWORD *)&v47[4] = "operator[]";
        *(_WORD *)&v47[12] = 1024;
        *(_DWORD *)&v47[14] = 609;
        *(_WORD *)&v47[18] = 2048;
        *(_QWORD *)&v47[20] = v7;
        v48 = 2048;
        *(_QWORD *)v49 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_63:
        *(_QWORD *)v44 = 0;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v47 = 136315906;
        *(_QWORD *)&v47[4] = "operator[]";
        *(_WORD *)&v47[12] = 1024;
        *(_DWORD *)&v47[14] = 789;
        *(_WORD *)&v47[18] = 2048;
        *(_QWORD *)&v47[20] = v4;
        v48 = 2048;
        *(_QWORD *)v49 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_64:
        *(_QWORD *)v44 = 0;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v47 = 136315906;
        *(_QWORD *)&v47[4] = "operator[]";
        *(_WORD *)&v47[12] = 1024;
        *(_DWORD *)&v47[14] = 609;
        *(_WORD *)&v47[18] = 2048;
        *(_QWORD *)&v47[20] = v7;
        v48 = 2048;
        *(_QWORD *)v49 = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_65:
        *(_QWORD *)v44 = 0;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v47 = 136315906;
        *(_QWORD *)&v47[4] = "operator[]";
        *(_WORD *)&v47[12] = 1024;
        *(_DWORD *)&v47[14] = 601;
        *(_WORD *)&v47[18] = 2048;
        *(_QWORD *)&v47[20] = v7;
        v48 = 2048;
        *(_QWORD *)v49 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_66:
        *(_QWORD *)v44 = 0;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v47 = 136315906;
        *(_QWORD *)&v47[4] = "operator[]";
        *(_WORD *)&v47[12] = 1024;
        *(_DWORD *)&v47[14] = 609;
        *(_WORD *)&v47[18] = 2048;
        *(_QWORD *)&v47[20] = v7;
        v48 = 2048;
        *(_QWORD *)v49 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
LABEL_17:
    *(_QWORD *)&v46[2] = 0;
    memset(v44, 0, sizeof(v44));
    v30[0] = *(_QWORD *)&v49[2];
    v30[1] = *(_QWORD *)&v47[16];
    v29[0] = 0;
    v29[1] = 0;
    re::makeMeshFromFaces(v7, v30, v29, (uint64_t)v50, (uint64_t)v44, (unint64_t)&v39);
    re::GeomMesh::operator=((uint64_t *)v7, (uint64_t *)&v39);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)&v39, v17);
    if (*(_QWORD *)v44 && *(_QWORD *)&v46[2])
      (*(void (**)(void))(**(_QWORD **)v44 + 40))();
    if (*(_QWORD *)v47 && *(_QWORD *)&v49[2])
      (*(void (**)(void))(**(_QWORD **)v47 + 40))();
  }
  if (*(_BYTE *)(a2 + 2))
  {
    LODWORD(v14) = v19;
    LODWORD(v2) = v21;
    v24 = *(unsigned int *)(v7 + 16);
    if (*(_QWORD *)&v50[16])
    {
      if ((_DWORD)v24)
      {
        v7 = 0;
        v3 = v23;
        v14 = v14;
        v2 = v2;
        do
        {
          v4 = *(_QWORD *)&v50[16];
          if (*(_QWORD *)&v50[16] <= v7)
            goto LABEL_58;
          v25 = *(_DWORD *)(*(_QWORD *)&v52[2] + 4 * v7);
          v4 = v25 - v9;
          if (v25 >= v9)
          {
            v5 = v32;
            if (v32 <= v4)
              goto LABEL_59;
            if (v7 >= v2)
              goto LABEL_60;
            *v20 = *(int32x4_t *)(v34 + 16 * v4);
            if (v7 >= v14)
              goto LABEL_61;
            if (v7 >= v23)
              goto LABEL_62;
            v26 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*v20, *v20), *(int8x16_t *)v20, 0xCuLL), vnegq_f32(*(float32x4_t *)(v18 + 16 * v7))), *(float32x4_t *)v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v18 + 16 * v7), *(int32x4_t *)(v18 + 16 * v7)), *(int8x16_t *)(v18 + 16 * v7), 0xCuLL));
            *(int8x16_t *)(v22 + 16 * v7) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), v26, 0xCuLL);
          }
          ++v7;
          ++v20;
        }
        while (v24 != v7);
      }
    }
    else if ((_DWORD)v24)
    {
      v7 = 0;
      v3 = v23;
      v14 = v14;
      v2 = v2;
      do
      {
        if (v7 >= v9)
        {
          v4 = v7 - v9;
          v5 = v32;
          if (v32 <= v4)
            goto LABEL_63;
          if (v7 >= v2)
            goto LABEL_64;
          *v20 = *(int32x4_t *)(v34 + 16 * v4);
          if (v7 >= v14)
            goto LABEL_65;
          if (v7 >= v23)
            goto LABEL_66;
          v27 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*v20, *v20), *(int8x16_t *)v20, 0xCuLL), vnegq_f32(*(float32x4_t *)(v18 + 16 * v7))), *(float32x4_t *)v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v18 + 16 * v7), *(int32x4_t *)(v18 + 16 * v7)), *(int8x16_t *)(v18 + 16 * v7), 0xCuLL));
          *(int8x16_t *)(v22 + 16 * v7) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), v27, 0xCuLL);
        }
        ++v7;
        ++v20;
      }
      while (v24 != v7);
    }
  }
  if (*(_QWORD *)v50 && *(_QWORD *)&v52[2])
    (*(void (**)(void))(**(_QWORD **)v50 + 40))();
  if (v31[0] && v34)
    (*(void (**)(void))(*(_QWORD *)v31[0] + 40))();
  result = v35[0];
  if (v35[0])
  {
    if (v38)
      return (*(uint64_t (**)(void))(*(_QWORD *)v35[0] + 40))();
  }
  return result;
}

uint64_t re::`anonymous namespace'::computeOrthonormalizedTangentsAndBitangents(re::_anonymous_namespace_ *this, re::GeomMesh *a2, char a3)
{
  re::internal::GeomAttributeManager *v4;
  uint64_t result;
  int v7;
  char v8;

  v4 = (re::_anonymous_namespace_ *)((char *)this + 64);
  if (!(_DWORD)a2)
  {
    re::internal::GeomAttributeManager::deleteAttribute((re::_anonymous_namespace_ *)((char *)this + 64), "vertexNormal");
    result = re::internal::GeomAttributeManager::deleteAttribute(v4, "vertexTangent");
    if ((a3 & 1) != 0)
      return result;
    return re::internal::GeomAttributeManager::deleteAttribute(v4, "vertexUV");
  }
  re::internal::GeomAttributeManager::deleteAttribute((re::_anonymous_namespace_ *)((char *)this + 64), "vertexTangent");
  re::internal::GeomAttributeManager::deleteAttribute(v4, "vertexBitangent");
  v8 = 1;
  v7 = 2;
  result = re::computeTangentsAndBitangents((unsigned int *)this, "vertexUV", "vertexTangent", "vertexBitangent", "vertexNormal", (unint64_t)&v7);
  if ((a3 & 1) == 0)
    return re::internal::GeomAttributeManager::deleteAttribute(v4, "vertexUV");
  return result;
}

uint64_t re::`anonymous namespace'::InternalBoxRoundedCornersOptions::InternalBoxRoundedCornersOptions(uint64_t result, unsigned __int16 *a2)
{
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  _BOOL4 v23;
  float v24;
  _BOOL4 v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  _BOOL4 v39;
  _BOOL4 v41;
  _BOOL4 v43;
  _BOOL4 v45;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;

  *(_WORD *)(result + 4) = 0;
  *(_DWORD *)result = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(result + 8) = _D0;
  *(_DWORD *)(result + 16) = 1065353216;
  *(_OWORD *)(result + 20) = 0u;
  v6 = (float *)(result + 20);
  *(_QWORD *)(result + 72) = 0;
  *(_OWORD *)(result + 36) = 0u;
  *(_OWORD *)(result + 50) = 0u;
  *(_BYTE *)result = *((_BYTE *)a2 + 32);
  *(_WORD *)(result + 1) = *(unsigned __int16 *)((char *)a2 + 37);
  *(_BYTE *)(result + 3) = *((_BYTE *)a2 + 33);
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 34);
  if (*((_BYTE *)a2 + 35))
  {
    v8 = *((float *)a2 + 5);
    v7 = *((float *)a2 + 6);
    if (v7 >= v8)
      v9 = *((float *)a2 + 5);
    else
      v9 = *((float *)a2 + 6);
    v10 = v9 / 3.0573;
    v11 = *((float *)a2 + 3);
    if (v11 <= (float)(v9 / 3.0573) || *((_BYTE *)a2 + 36) != 0)
    {
      if (v11 <= v10)
        v13 = *((float *)a2 + 3);
      else
        v13 = v9 / 3.0573;
      *v6 = v13;
      v14 = *((float *)a2 + 4);
      if (v14 >= 0.0)
      {
        if (v14 < v13)
          v6 = (float *)(a2 + 8);
        v15 = *((float *)a2 + 7);
        v16 = v15 / 3.0573;
        if ((float)(v15 / 3.0573) >= *v6)
          v16 = *v6;
      }
      else
      {
        v15 = *((float *)a2 + 7);
        v16 = 0.0;
      }
      *(float *)(result + 24) = v16;
      v23 = v8 > v7;
      v24 = v8 - (float)(v13 * 3.0573);
      if (v24 < 0.0)
        v24 = 0.0;
      v25 = v7 > v8;
      if (v10 > v11)
      {
        v23 = 1;
        v25 = 1;
      }
      if (v23)
        v19 = v24;
      else
        v19 = 0.0;
      v20 = v7 - (float)(v13 * 3.0573);
      if (v20 < 0.0)
        v20 = 0.0;
      if (!v25)
        v20 = 0.0;
      *(float *)(result + 32) = v19;
      *(float *)(result + 36) = v20;
      v21 = v15 + (float)(v16 * -3.0573);
      if (v21 < 0.0)
        v21 = 0.0;
      v22 = 1.0;
      goto LABEL_43;
    }
  }
  else
  {
    v8 = *((float *)a2 + 5);
    v7 = *((float *)a2 + 6);
    v11 = *((float *)a2 + 3);
  }
  if (v7 >= v8)
    v17 = v8;
  else
    v17 = v7;
  v13 = v17 * 0.5;
  if (v13 >= v11)
    v13 = v11;
  *(float *)(result + 20) = v13;
  v18 = *((float *)a2 + 7);
  v16 = v18 * 0.5;
  if ((float)(v18 * 0.5) >= *((float *)a2 + 4))
    v16 = *((float *)a2 + 4);
  if (v16 >= v13)
    v16 = v13;
  *(float *)(result + 24) = v16;
  v19 = v8 + (float)(v13 * -2.0);
  v20 = v7 + (float)(v13 * -2.0);
  *(float *)(result + 32) = v19;
  *(float *)(result + 36) = v20;
  v21 = v18 + (float)(v16 * -2.0);
  v22 = 0.0;
LABEL_43:
  *(float *)(result + 40) = v21;
  *(float *)(result + 8) = v22;
  *(float *)(result + 12) = v22;
  *(float *)(result + 16) = v22;
  *(float *)(result + 28) = v16;
  v26 = a2[3];
  if (v26 <= 2)
    v27 = 2;
  else
    v27 = a2[3];
  v28 = v27 + 1;
  v29 = a2[4];
  if (v29 <= 1)
    v30 = 1;
  else
    v30 = a2[4];
  *(_DWORD *)(result + 60) = v30 + 1;
  v31 = *a2;
  if (v31 <= 1)
    v32 = 1;
  else
    v32 = *a2;
  v33 = a2[1];
  if (v33 <= 1)
    v34 = 1;
  else
    v34 = a2[1];
  *(_DWORD *)(result + 44) = v32;
  *(_DWORD *)(result + 48) = v34;
  v35 = a2[2];
  if (v35 <= 1)
    v36 = 1;
  else
    v36 = a2[2];
  *(_DWORD *)(result + 52) = v36;
  *(_DWORD *)(result + 56) = v28;
  v37 = v29 * v26;
  v39 = *((float *)a2 + 7) == 0.0 || v37 == 0;
  v41 = v19 == 0.0 || v31 == 0;
  v43 = v20 == 0.0 || v33 == 0;
  v45 = v21 == 0.0 || v35 == 0;
  if (v16 == 0.0 && v13 == 0.0)
    v47 = 316;
  else
    v47 = 20;
  *(_WORD *)(result + 64) = 0;
  if (v16 == 0.0)
    goto LABEL_91;
  if (v13 == v16)
  {
    v47 = 40;
LABEL_91:
    *(_WORD *)(result + 64) = v47;
    goto LABEL_92;
  }
  v47 = 0;
LABEL_92:
  if (v45 || v43 || v41 || v39)
  {
    if (v37)
      v48 = v47;
    else
      v48 = v47 | 0x28;
    if (v39)
      v48 |= 0x14u;
    if (v41)
      v49 = v48 | 0x41;
    else
      v49 = v48;
    if (v43)
      v50 = v49 | 0x81;
    else
      v50 = v49;
    if (v45)
      v50 |= 2u;
    *(_WORD *)(result + 64) = v50;
  }
  return result;
}

uint64_t re::buildBoxWithRoundedCorners(re::GeomMesh *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v6;
  uint64_t result;
  re::GeomAttribute *v8;
  unint64_t i;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  re::GeomAttribute *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  re::GeomAttribute *v22;
  unint64_t v23;
  int8x16_t v24;
  _QWORD v25[2];
  uint64_t v26;
  int v27;
  re::GeomAttribute *v28;
  unsigned __int8 v29[64];
  unsigned __int16 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39[2];
  _QWORD v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[28];
  __int16 v47;
  _BYTE v48[10];
  _QWORD v49[6];
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 34))
  {
    v33 = *((_QWORD *)a2 + 4);
    v6 = a2[1];
    v31 = *a2;
    v32 = v6;
    BYTE2(v33) = 0;
    return re::buildBoxWithRoundedCorners(a1, &v31);
  }
  else
  {
    v38 = 0;
    v36 = 0;
    v35[0] = 0;
    v35[1] = 0;
    v37 = 0;
    re::GeomMesh::GeomMesh((re::GeomMesh *)&v31, 0);
    re::DynamicArray<re::GeomMesh>::clear(a1, v8);
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)a1, 3uLL);
    v28 = 0;
    v25[1] = 0;
    v26 = 0;
    v25[0] = 0;
    v27 = 0;
    if ((_DWORD)v34)
      re::DynamicArray<int>::setCapacity(v25, v34);
    for (i = 0; i != 3; ++i)
    {
      v26 = 0;
      ++v27;
      v10 = word_226132910[i];
      LODWORD(v40[0]) = 0;
      v11 = v34;
      if (!(_DWORD)v34)
        goto LABEL_22;
      v12 = 0;
      v13 = v10 | v30;
      do
      {
        v14 = v12;
        v15 = v36;
        if (v36 <= v12)
        {
          *(_QWORD *)v46 = 0;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v41 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v49[0]) = 136315906;
          *(_QWORD *)((char *)v49 + 4) = "operator[]";
          WORD2(v49[1]) = 1024;
          *(_DWORD *)((char *)&v49[1] + 6) = 789;
          WORD1(v49[2]) = 2048;
          *(_QWORD *)((char *)&v49[2] + 4) = v14;
          WORD2(v49[3]) = 2048;
          *(_QWORD *)((char *)&v49[3] + 6) = v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_40:
          *(_QWORD *)v46 = 0;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v41 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v49[0]) = 136315906;
          *(_QWORD *)((char *)v49 + 4) = "operator[]";
          WORD2(v49[1]) = 1024;
          *(_DWORD *)((char *)&v49[1] + 6) = 601;
          WORD1(v49[2]) = 2048;
          *(_QWORD *)((char *)&v49[2] + 4) = v2;
          WORD2(v49[3]) = 2048;
          *(_QWORD *)((char *)&v49[3] + 6) = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_41:
          *(_QWORD *)v46 = 0;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v41 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v49[0]) = 136315906;
          *(_QWORD *)((char *)v49 + 4) = "operator[]";
          WORD2(v49[1]) = 1024;
          *(_DWORD *)((char *)&v49[1] + 6) = 601;
          WORD1(v49[2]) = 2048;
          *(_QWORD *)((char *)&v49[2] + 4) = v3;
          WORD2(v49[3]) = 2048;
          *(_QWORD *)((char *)&v49[3] + 6) = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_42:
          *(_QWORD *)v46 = 0;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v41 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v49[0]) = 136315906;
          *(_QWORD *)((char *)v49 + 4) = "operator[]";
          WORD2(v49[1]) = 1024;
          *(_DWORD *)((char *)&v49[1] + 6) = 609;
          WORD1(v49[2]) = 2048;
          *(_QWORD *)((char *)&v49[2] + 4) = v13;
          WORD2(v49[3]) = 2048;
          *(_QWORD *)((char *)&v49[3] + 6) = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_43;
        }
        if ((*(_WORD *)(v38 + 2 * v12) & (unsigned __int16)v13) == 0)
        {
          re::DynamicArray<int>::add(v25, v40);
          v12 = v40[0];
          v11 = v34;
        }
        LODWORD(v40[0]) = ++v12;
      }
      while (v12 < v11);
      if (v26)
      {
        v40[0] = v28;
        v40[1] = v26;
        v49[4] = 0;
        memset(v49, 0, 28);
        *(_QWORD *)&v48[2] = 0;
        memset(v46, 0, sizeof(v46));
        v39[1] = 0;
        v39[0] = 0;
        re::makeMeshFromFaces((unint64_t)&v31, v40, v39, (uint64_t)v49, (uint64_t)v46, (unint64_t)&v41);
        if (*(_QWORD *)v46 && *(_QWORD *)&v48[2])
          (*(void (**)(void))(**(_QWORD **)v46 + 40))();
        if (v49[0] && v49[4])
          (*(void (**)(void))(*(_QWORD *)v49[0] + 40))();
        v13 = *((_QWORD *)a1 + 2);
        if (v13 > i)
        {
          re::GeomMesh::operator=((uint64_t *)(*((_QWORD *)a1 + 4) + 736 * i), (uint64_t *)&v41);
          re::GeomMesh::~GeomMesh((re::GeomMesh *)&v41, v16);
          goto LABEL_22;
        }
LABEL_43:
        v40[0] = 0;
        v50 = 0u;
        v51 = 0u;
        memset(v49, 0, sizeof(v49));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v46 = 136315906;
        *(_QWORD *)&v46[4] = "operator[]";
        *(_WORD *)&v46[12] = 1024;
        *(_DWORD *)&v46[14] = 789;
        *(_WORD *)&v46[18] = 2048;
        *(_QWORD *)&v46[20] = i;
        v47 = 2048;
        *(_QWORD *)v48 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_22:
      if (i >= 2 && v29[2])
      {
        v2 = v18;
        v3 = v20;
        if ((_DWORD)v32)
        {
          v23 = 0;
          v2 = v2;
          v3 = v3;
          v13 = v22;
          while (v2 != v23)
          {
            if (v3 == v23)
              goto LABEL_41;
            if (v22 == v23)
              goto LABEL_42;
            v24 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v19 + 16 * v23), *(int32x4_t *)(v19 + 16 * v23)), *(int8x16_t *)(v19 + 16 * v23), 0xCuLL), vnegq_f32(*(float32x4_t *)(v17 + 16 * v23))), *(float32x4_t *)(v19 + 16 * v23), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v17 + 16 * v23), *(int32x4_t *)(v17 + 16 * v23)), *(int8x16_t *)(v17 + 16 * v23), 0xCuLL));
            *(int8x16_t *)(v21 + 16 * v23++) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), v24, 0xCuLL);
            if (v23 >= v32)
              goto LABEL_32;
          }
          goto LABEL_40;
        }
      }
      else
      {
      }
LABEL_32:
      ;
    }
    if (v25[0])
    {
      v22 = v28;
      if (v28)
        (*(void (**)(void))(*(_QWORD *)v25[0] + 40))();
    }
    re::GeomMesh::~GeomMesh((re::GeomMesh *)&v31, v22);
    result = v35[0];
    if (v35[0])
    {
      if (v38)
        return (*(uint64_t (**)(void))(*(_QWORD *)v35[0] + 40))();
    }
  }
  return result;
}

uint64_t re::`anonymous namespace'::buildRoundedBoxWithStandardUVs(re *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  unint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  uint64_t v58;
  int v59;
  int v60;
  _DWORD *v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  unsigned int v75;
  int v76;
  int v77;
  unsigned int v78;
  unint64_t v79;
  unsigned int v80;
  uint64_t v81;
  _DWORD *v82;
  _DWORD *v83;
  unint64_t v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  _DWORD *v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  _DWORD *v92;
  unint64_t v93;
  int v94;
  unsigned int v95;
  _DWORD *v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  _DWORD *v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  unint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  unsigned int v119;
  unsigned int v120;
  _DWORD *v121;
  _DWORD *v122;
  unint64_t v123;
  unsigned int v124;
  _DWORD *v125;
  uint64_t v126;
  int v127;
  int v128;
  _DWORD *v129;
  unint64_t v130;
  unsigned int v131;
  int v132;
  int v133;
  _DWORD *v134;
  uint64_t v135;
  unsigned int v136;
  int v137;
  unsigned int v138;
  re::internal *v139;
  const re::GeomAttribute *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  unsigned int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  unint64_t v167;
  unsigned int v168;
  unint64_t v169;
  int v170;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  int i;
  re *v176;
  re *v177;
  re::GeomMesh *v178;
  char *v179;
  uint64_t *v180;
  int32x2_t *v181;
  char *v182;
  re::GeomAttribute *v183;
  float v184;
  int32x2_t v185;
  float v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  int32x4_t v193;
  float32x4_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  unsigned int v207;
  uint64_t v208;
  unsigned int v209;
  float32x4_t v210;
  float32x4_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  unsigned int v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  int v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unsigned int v244;
  unint64_t v245;
  unsigned int v246;
  int32x4_t v247;
  float32x4_t v248;
  int32x4_t v249;
  int32x4_t v250;
  unint64_t v251;
  float v252;
  float v253;
  float32x4_t v254;
  uint64_t v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  unsigned int v261;
  unsigned int v262;
  unint64_t v263;
  unint64_t v264;
  float v265;
  unint64_t v266;
  unint64_t v267;
  int32x4_t v268;
  unsigned int v269;
  int32x4_t v270;
  unsigned int v271;
  unsigned int v272;
  uint64_t v273;
  float v274;
  float32x4_t v275;
  uint64_t v276;
  int32x4_t v277;
  uint64_t v278;
  float32x4_t v279;
  float32x4_t v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  float32x2_t v289;
  float v290;
  float32x2_t v291;
  float32x2_t v292;
  float32x2_t v293;
  unint64_t v294;
  unint64_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float v304;
  unint64_t v305;
  int v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  float v311;
  float32x2_t *v312;
  float32x2_t *v313;
  float32x2_t v314;
  float32x2_t v315;
  int8x8_t v316;
  float32x2_t v317;
  float32x2_t v318;
  int8x8_t v319;
  unsigned int v320;
  uint64_t v321;
  uint64_t v322;
  uint64x2_t v323;
  unint64_t v324;
  uint64_t v325;
  BOOL v326;
  unsigned __int8 *v327;
  float v328;
  unint64_t v329;
  unsigned int v330;
  unint64_t v331;
  unsigned int v332;
  re::GeomMesh *v333;
  unsigned int v334;
  unint64_t v335;
  float v336;
  float v337;
  float v338;
  unint64_t v339;
  int v340;
  int v341;
  int v342;
  int v343;
  unint64_t v344;
  unint64_t v345;
  unsigned int v346;
  uint64_t v347;
  uint64x2_t v348;
  int8x16_t v349;
  int8x16_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  unint64_t v355;
  unint64_t v356;
  float v357;
  float v358;
  float v359;
  unsigned int v360;
  unint64_t v361;
  float32x4_t *v362;
  float32x4_t v363;
  int32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t *v375;
  float v376;
  float v377;
  float v378;
  float v380;
  int v381;
  uint64_t v382;
  re::GeomMesh *v383;
  unsigned __int8 *v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  _QWORD *v388;
  float32x2_t v389;
  float32x2_t v390;
  int v396;
  float32x2_t *v397;
  unint64_t v398;
  int v399;
  uint64_t v400;
  float32x2_t v401;
  float32x2_t v402;
  float32x2_t v403;
  float32x2_t v404;
  int v405;
  unsigned int v406;
  unsigned int v407;
  int32x4_t v408;
  int32x4_t v409;
  int v410;
  int v411;
  unsigned int v412;
  int v413;
  int32x4_t v414;
  int32x4_t v415;
  float32x2_t *v416;
  float32x2_t v417;
  float v418;
  float32x2_t v419;
  float32x2_t v420;
  float32x2_t v421;
  float v422;
  float32x2_t v423;
  float32x2_t v424;
  int32x4_t v425;
  float32x2_t v426;
  float32x2_t *v427;
  float32x2_t *v428;
  float32x2_t *v429;
  float32x2_t *v430;
  uint64_t v431;
  int v432;
  int v433;
  int v434;
  int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  unsigned int v440;
  float32x2_t *v441;
  float32x2_t v442;
  float v443;
  float32x2_t v444;
  float32x2_t v445;
  float32x2_t v446;
  float v447;
  float32x2_t v448;
  float32x2_t v449;
  float32x2_t v450;
  float32x2_t *v451;
  float32x2_t *v452;
  float32x2_t *v453;
  float32x2_t *v454;
  float32x2_t v455;
  re *v456;
  uint64_t v457;
  float32x2_t *v458;
  float32x2_t v459;
  float32x2_t v460;
  float32x2_t v461;
  unsigned int v462;
  float v463;
  int v464;
  unint64_t v465;
  uint64_t v466;
  float32x4_t v467;
  float32x4_t v468;
  float32x4_t v469;
  float32x4_t v470;
  float v471;
  float32x4_t v472;
  float32x4_t v473;
  uint64_t v474;
  unint64_t v475;
  float32x4_t v476;
  float32x4_t v477;
  int32x4_t v478;
  float32x4_t v479;
  float32x4_t v480;
  float32x2_t v481;
  float v482;
  int v483;
  float32x4_t v484;
  float32x4_t v485;
  unint64_t v486;
  uint64_t v487;
  float32x2_t v488;
  unint64_t v489;
  re::GeomMesh *v490;
  uint64_t v491;
  int v492;
  uint64_t v493;
  unsigned int v494;
  int v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  float v499;
  float v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  unsigned int v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  float v508;
  int v509;
  float32x4_t v510;
  float32x4_t v511;
  float32x4_t v512;
  float32x4_t v513;
  float v514;
  float32x4_t v515;
  float32x4_t v516;
  uint64_t v517;
  float32x4_t v518;
  float32x4_t v519;
  int32x4_t v520;
  float32x4_t v521;
  float32x4_t v522;
  float32x2_t v523;
  float v524;
  int v525;
  float32x4_t v526;
  float32x4_t v527;
  int v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  double v533;
  int v534;
  unsigned int v535;
  int v536;
  unsigned int v537;
  float v538;
  int v539;
  int v540;
  uint64_t v541;
  float32x2_t v542;
  float32x4_t v543;
  float32x4_t v544;
  float v545;
  float32x2_t v546;
  uint64_t v547;
  float v548;
  unsigned int v549;
  float32x2_t v550;
  float32x2_t v551;
  unsigned int v552;
  uint64_t v553;
  uint64_t v554;
  float *v555;
  float v556;
  float v557;
  float v558;
  float v559;
  float v560;
  unsigned __int8 *v561;
  uint64_t v562;
  float v563;
  unsigned int v564;
  uint64_t v565;
  int v566;
  unsigned int v567;
  unsigned int v568;
  unsigned int v569;
  uint64_t v570;
  unsigned int v571;
  unsigned int v572;
  unsigned int v573;
  unsigned int v574;
  unsigned int v575;
  unsigned int v576;
  unsigned int v577;
  unsigned int v578;
  unint64_t v579;
  unint64_t v580;
  unint64_t v581;
  unint64_t v582;
  unint64_t v583;
  unsigned int v584;
  unsigned int v585;
  unsigned int v586;
  unsigned int v587;
  unsigned int v588;
  unsigned int v589;
  unsigned int v590;
  unsigned int v591;
  unsigned int v592;
  unsigned int v593;
  unsigned int v594;
  int v595;
  int v596;
  int v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  unint64_t v601;
  uint64_t v602;
  unint64_t v603;
  unsigned int v604;
  int v605;
  unsigned int v606;
  int v607;
  int v608;
  unsigned int v609[2];
  unsigned int v610;
  int v611;
  unsigned int v612[2];
  unint64_t v614;
  uint64_t v615;
  int v617;
  unint64_t v618;
  unint64_t v619;
  int v620;
  int v621;
  unint64_t v622;
  int v623;
  unsigned int v624;
  unint64_t v625;
  uint64_t v626;
  uint64_t v627;
  unsigned int v628;
  re::GeomMesh *v629;
  uint64_t v630;
  int v631;
  uint64_t v632;
  unint64_t v633;
  uint64_t v634;
  unint64_t v635;
  uint64_t v636;
  int v637;
  unint64_t v638;
  uint64_t v639;
  float v640;
  _QWORD v641[2];
  unint64_t v642;
  int v643;
  _DWORD *v644;
  _QWORD v645[2];
  unint64_t v646;
  int v647;
  _DWORD *v648;
  _QWORD v649[2];
  unint64_t v650;
  int v651;
  _DWORD *v652;
  _QWORD v653[2];
  unint64_t v654;
  int v655;
  _DWORD *v656;
  _QWORD v657[2];
  unint64_t v658;
  int v659;
  _DWORD *v660;
  _QWORD v661[2];
  unint64_t v662;
  int v663;
  _DWORD *v664;
  int *v665[4];
  float v666;
  unsigned int v667;
  int v668;
  uint64_t v669;
  uint64_t v670;
  unsigned int v671;
  uint64_t v672;
  _OWORD v673[3];
  __int128 v674;
  __int128 v675;
  float v676;
  float v677;
  int32x2_t v678;
  unsigned int v679[12];
  __int128 v680;
  __int128 v681;
  float v682;
  float v683;
  int32x2_t v684;
  char *__s[2];
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  unsigned int v690;
  uint64_t v691;
  uint64_t *v692;
  unsigned int v693;
  uint64_t v694;
  uint64_t *v695;
  uint64_t v696;
  int v697;
  _OWORD v698[3];
  __int128 v699;
  __int128 v700;
  _BYTE v701[38];
  uint64_t v702;

  v3 = a3;
  v702 = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned int *)a2 + 11);
  v5 = *((unsigned int *)a2 + 12);
  v6 = *((float *)a2 + 5);
  v8 = *((float *)a2 + 8);
  v7 = *((float *)a2 + 9);
  v9 = *((float *)a2 + 10);
  v10 = *((_DWORD *)a2 + 13);
  v11 = *((unsigned int *)a2 + 14);
  v12 = *((_DWORD *)a2 + 15);
  v13 = (v11 - 1);
  v14 = (v12 - 1) * v13;
  if ((v11 & 1) != 0)
    v15 = *((_DWORD *)a2 + 14);
  else
    v15 = v11 - 1;
  v16 = (v14 + v15 + 3);
  v17 = (v5 + v4);
  v618 = *((unsigned int *)a2 + 15);
  LODWORD(v627) = 4 * v11;
  v623 = v17 - 2;
  v18 = (8 * v16);
  v19 = (2 * v4);
  v20 = v18 + 4 * v17 * v12;
  LODWORD(v657[0]) = (v12 - 1) * v13;
  v624 = v10;
  v631 = 4 * v11 + 2 * (v17 - 2);
  LODWORD(v629) = v20 + v19 * v5;
  LODWORD(v653[0]) = v14 + v15 + 3;
  v634 = (v12 - 1);
  LODWORD(v649[0]) = v12 - 1;
  LODWORD(v645[0]) = 0;
  v625 = v629 + v631 * v10;
  re::DynamicArray<unsigned short>::resize(a3, v625);
  *(_QWORD *)&v673[0] = v657;
  *((_QWORD *)&v673[0] + 1) = v3;
  *(_QWORD *)&v673[1] = v645;
  *((_QWORD *)&v673[1] + 1) = v653;
  *(_QWORD *)&v698[0] = v649;
  *((_QWORD *)&v698[0] + 1) = v3;
  *(_QWORD *)&v698[1] = v645;
  v636 = v5;
  v21 = v5 * v4;
  v638 = v4;
  if (!((_DWORD)v5 * (_DWORD)v4))
    goto LABEL_12;
  v4 = *(_QWORD *)(v3 + 16);
  v22 = v645[0];
  v23 = v21;
  v24 = *(_QWORD *)(v3 + 32);
  do
  {
    v25 = v22;
    if (v4 <= v22)
    {
      LODWORD(v645[0]) = v22 + 1;
      v661[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v25;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_556:
      LODWORD(v645[0]) = v25 + 1;
      v661[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v25;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_557:
      LODWORD(v645[0]) = v25 + 1;
      v661[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v25;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_558:
      LODWORD(v645[0]) = v25 + 1;
      v661[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v25;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_559:
      LODWORD(v645[0]) = v25 + 1;
      v661[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v25;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_560:
      LODWORD(v645[0]) = v25 + 1;
      v661[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v25;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_561:
      LODWORD(v645[0]) = v25 + 1;
      v661[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v25;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_562:
      LODWORD(v645[0]) = v25 + 1;
      v661[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v25;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_563:
      LODWORD(v645[0]) = v25 + 1;
      v661[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v25;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_564:
      LODWORD(v645[0]) = v25 + 1;
      v661[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v25;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_565;
    }
    *(_WORD *)(v24 + 2 * v22++) = 513;
    --v23;
  }
  while (v23);
  v26 = 0;
  v27 = *(_QWORD *)(v3 + 32);
  do
  {
    v25 = v22 + v26;
    if (v4 <= v25)
      goto LABEL_556;
    *(_WORD *)(v27 + 2 * v25) = 1025;
    ++v26;
  }
  while (v21 != v26);
  LODWORD(v645[0]) = v22 + v26;
  v4 = v638;
LABEL_12:
  v28 = v624;
  v29 = v13 * v624;
  if ((_DWORD)v13 * v624)
  {
    v4 = *(_QWORD *)(v3 + 16);
    v30 = v645[0];
    v31 = v13 * v624;
    v32 = *(_QWORD *)(v3 + 32);
    do
    {
      v25 = v30;
      if (v4 <= v30)
        goto LABEL_557;
      *(_WORD *)(v32 + 2 * v30++) = 2306;
      --v31;
    }
    while (v31);
    LODWORD(v645[0]) = v30;
    v4 = v638;
    v28 = v624;
  }
  v33 = v28 * v4;
  if (v28 * (_DWORD)v4)
  {
    v4 = *(_QWORD *)(v3 + 16);
    v34 = v645[0];
    v35 = v33;
    v36 = *(_QWORD *)(v3 + 32);
    do
    {
      v25 = v34;
      if (v4 <= v34)
        goto LABEL_558;
      *(_WORD *)(v36 + 2 * v34++) = 2114;
      --v35;
    }
    while (v35);
    LODWORD(v645[0]) = v34;
    v28 = v624;
  }
  if (v29)
  {
    v4 = *(_QWORD *)(v3 + 16);
    v37 = v645[0];
    v38 = v13 * v624;
    v39 = *(_QWORD *)(v3 + 32);
    do
    {
      v25 = v37;
      if (v4 <= v37)
        goto LABEL_559;
      *(_WORD *)(v39 + 2 * v37++) = 2306;
      --v38;
    }
    while (v38);
    LODWORD(v645[0]) = v37;
    v28 = v624;
  }
  v40 = v28 * v636;
  if (v28 * (_DWORD)v636)
  {
    v4 = *(_QWORD *)(v3 + 16);
    v41 = v645[0];
    v42 = v28 * v636;
    v43 = *(_QWORD *)(v3 + 32);
    do
    {
      v25 = v41;
      if (v4 <= v41)
        goto LABEL_560;
      *(_WORD *)(v43 + 2 * v41++) = 2178;
      --v42;
    }
    while (v42);
    LODWORD(v645[0]) = v41;
  }
  if (v29)
  {
    v4 = *(_QWORD *)(v3 + 16);
    v44 = v645[0];
    v45 = v13 * v624;
    v46 = *(_QWORD *)(v3 + 32);
    do
    {
      v25 = v44;
      if (v4 <= v44)
        goto LABEL_561;
      *(_WORD *)(v46 + 2 * v44++) = 2306;
      --v45;
    }
    while (v45);
    LODWORD(v645[0]) = v44;
  }
  if (v33)
  {
    v4 = *(_QWORD *)(v3 + 16);
    v47 = v645[0];
    v48 = *(_QWORD *)(v3 + 32);
    do
    {
      v25 = v47;
      if (v4 <= v47)
        goto LABEL_562;
      *(_WORD *)(v48 + 2 * v47++) = 2114;
      --v33;
    }
    while (v33);
    LODWORD(v645[0]) = v47;
  }
  if (v29)
  {
    v4 = *(_QWORD *)(v3 + 16);
    v49 = v645[0];
    v50 = *(_QWORD *)(v3 + 32);
    do
    {
      v25 = v49;
      if (v4 <= v49)
        goto LABEL_563;
      *(_WORD *)(v50 + 2 * v49++) = 2306;
      --v29;
    }
    while (v29);
    LODWORD(v645[0]) = v49;
  }
  if (v40)
  {
    v4 = *(_QWORD *)(v3 + 16);
    v51 = v645[0];
    v52 = *(_QWORD *)(v3 + 32);
    do
    {
      v25 = v51;
      if (v4 <= v51)
        goto LABEL_564;
      *(_WORD *)(v52 + 2 * v51++) = 2178;
    }
    while (--v40);
  }
  v630 = (v11 - 1);
  v604 = v21;
  v664 = 0;
  v662 = 0;
  v661[0] = 0;
  v661[1] = 0;
  v663 = 0;
  v660 = 0;
  v658 = 0;
  v657[0] = 0;
  v657[1] = 0;
  v13 = (v618 + 1);
  v659 = 0;
  re::DynamicArray<float>::resize((uint64_t)v661, v13);
  re::DynamicArray<float>::resize((uint64_t)v657, v13);
  v25 = v662;
  if (!v662)
    goto LABEL_757;
  v53 = v664;
  *v664 = 0;
  v4 = v658;
  if (!v658)
  {
LABEL_758:
    *(_QWORD *)&v673[0] = 0;
    v688 = 0u;
    v689 = 0u;
    v686 = 0u;
    v687 = 0u;
    *(_OWORD *)__s = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v679[0] = 136315906;
    *(_QWORD *)&v679[1] = "operator[]";
    LOWORD(v679[3]) = 1024;
    *(unsigned int *)((char *)&v679[3] + 2) = 789;
    HIWORD(v679[4]) = 2048;
    *(_QWORD *)&v679[5] = 0;
    LOWORD(v679[7]) = 2048;
    *(_QWORD *)((char *)&v679[7] + 2) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_759;
  }
  v54 = v660;
  *v660 = v630;
  v55 = v618;
  if (v618 < 2)
  {
LABEL_58:
    if (v25 <= v618)
    {
LABEL_759:
      *(_QWORD *)&v673[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      v579 = v55;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v579;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v25;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_760;
    }
    v639 = v11;
    v18 = (v618 * v11);
    v53[v618] = v18;
    if (v4 <= v618)
    {
LABEL_760:
      *(_QWORD *)&v673[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      v580 = v55;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v580;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_761;
    }
    v54[v618] = v18;
    v656 = 0;
    v653[1] = 0;
    v654 = 0;
    v652 = 0;
    v653[0] = 0;
    v655 = 0;
    v649[1] = 0;
    v650 = 0;
    v648 = 0;
    v649[0] = 0;
    v651 = 0;
    v645[1] = 0;
    v646 = 0;
    v644 = 0;
    v645[0] = 0;
    v647 = 0;
    v641[1] = 0;
    v642 = 0;
    v4 = v638;
    v641[0] = 0;
    v637 = v638 + 1;
    v643 = 0;
    v11 = v618;
    re::DynamicArray<unsigned int>::resize(v653, (v637 + v637 * v636), re::kInvalidMeshIndex);
    re::DynamicArray<float>::resize((uint64_t)v645, (v627 + 2 * v17 - 3));
    re::DynamicArray<float>::resize((uint64_t)v649, v654);
    re::DynamicArray<float>::resize((uint64_t)v641, v646);
    v25 = v654;
    if (!v654)
    {
LABEL_761:
      *(_QWORD *)&v673[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = 0;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_762:
      *(_QWORD *)v701 = 0;
      v674 = 0u;
      v675 = 0u;
      memset(v673, 0, sizeof(v673));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v698[0]) = 136315906;
      *(_QWORD *)((char *)v698 + 4) = "operator[]";
      WORD6(v698[0]) = 1024;
      *(_DWORD *)((char *)v698 + 14) = 601;
      WORD1(v698[1]) = 2048;
      *(_QWORD *)((char *)&v698[1] + 4) = v25;
      WORD6(v698[1]) = 2048;
      *(_QWORD *)((char *)&v698[1] + 14) = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_763:
      *(_QWORD *)v701 = 0;
      v674 = 0u;
      v675 = 0u;
      memset(v673, 0, sizeof(v673));
      LODWORD(v251) = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v698[0]) = 136315906;
      *(_QWORD *)((char *)v698 + 4) = "operator[]";
      WORD6(v698[0]) = 1024;
      *(_DWORD *)((char *)v698 + 14) = 601;
      WORD1(v698[1]) = 2048;
      *(_QWORD *)((char *)&v698[1] + 4) = v19;
      WORD6(v698[1]) = 2048;
      *(_QWORD *)((char *)&v698[1] + 14) = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_764:
      *(_QWORD *)v701 = 0;
      v674 = 0u;
      v675 = 0u;
      memset(v673, 0, sizeof(v673));
      v3 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v698[0]) = 136315906;
      *(_QWORD *)((char *)v698 + 4) = "operator[]";
      WORD6(v698[0]) = 1024;
      *(_DWORD *)((char *)v698 + 14) = 609;
      WORD1(v698[1]) = 2048;
      *(_QWORD *)((char *)&v698[1] + 4) = v4;
      WORD6(v698[1]) = 2048;
      *(_QWORD *)((char *)&v698[1] + 14) = v251;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_765:
      *(_QWORD *)&v673[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v4;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v25;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_766:
      *(_QWORD *)&v673[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v17;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v25;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_767:
      *(_QWORD *)&v673[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v4;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v25;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_768:
      *(_QWORD *)v701 = 0;
      v674 = 0u;
      v675 = 0u;
      memset(v673, 0, sizeof(v673));
      v494 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v698[0]) = 136315906;
      *(_QWORD *)((char *)v698 + 4) = "operator[]";
      WORD6(v698[0]) = 1024;
      *(_DWORD *)((char *)v698 + 14) = 797;
      WORD1(v698[1]) = 2048;
      *(_QWORD *)((char *)&v698[1] + 4) = v3;
      WORD6(v698[1]) = 2048;
      *(_QWORD *)((char *)&v698[1] + 14) = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_769:
      *(_QWORD *)v701 = 0;
      v674 = 0u;
      v675 = 0u;
      memset(v673, 0, sizeof(v673));
      v3 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v698[0]) = 136315906;
      *(_QWORD *)((char *)v698 + 4) = "operator[]";
      WORD6(v698[0]) = 1024;
      *(_DWORD *)((char *)v698 + 14) = 609;
      WORD1(v698[1]) = 2048;
      *(_QWORD *)((char *)&v698[1] + 4) = v11;
      WORD6(v698[1]) = 2048;
      *(_QWORD *)((char *)&v698[1] + 14) = v494;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_770:
      *(_QWORD *)v701 = 0;
      v674 = 0u;
      v675 = 0u;
      memset(v673, 0, sizeof(v673));
      v494 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v698[0]) = 136315906;
      *(_QWORD *)((char *)v698 + 4) = "operator[]";
      WORD6(v698[0]) = 1024;
      *(_DWORD *)((char *)v698 + 14) = 797;
      WORD1(v698[1]) = 2048;
      *(_QWORD *)((char *)&v698[1] + 4) = v3;
      WORD6(v698[1]) = 2048;
      *(_QWORD *)((char *)&v698[1] + 14) = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_771:
      *(_QWORD *)v701 = 0;
      v674 = 0u;
      v675 = 0u;
      memset(v673, 0, sizeof(v673));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v698[0]) = 136315906;
      *(_QWORD *)((char *)v698 + 4) = "operator[]";
      WORD6(v698[0]) = 1024;
      *(_DWORD *)((char *)v698 + 14) = 609;
      WORD1(v698[1]) = 2048;
      *(_QWORD *)((char *)&v698[1] + 4) = v11;
      WORD6(v698[1]) = 2048;
      *(_QWORD *)((char *)&v698[1] + 14) = v494;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_772;
    }
    v59 = ~(_DWORD)v618;
    v635 = (v18 + 3);
    v60 = 2 * v635;
    v633 = v18;
    v61 = v656;
    *v656 = 2 * v635 + v18;
    v18 = v639;
    if (v638 > 1)
    {
      v62 = 1;
      v63 = v618 * ((8 * v639) | 1) + (v636 + v19 - 4) * v13 + 24;
      while (v25 != v62)
      {
        v61[v62++] = v63;
        v63 += v59;
        if (v638 == v62)
          goto LABEL_65;
      }
      goto LABEL_609;
    }
LABEL_65:
    if (v25 <= v638)
      goto LABEL_765;
    v617 = 8 * v635;
    v64 = v13 * (v638 - 1);
    v65 = v13 * (v636 - 2);
    v61[v638] = 3 * v635 + v633;
    if (v636 >= 2)
    {
      v66 = v65 + v618 + v617 + v13 * (v636 - 1) + v64 + v64;
      v67 = v636 - 1;
      v68 = 1;
      v69 = v64 + v618 * ((8 * v639) | 1) + 24;
      do
      {
        v4 = (v4 + v68);
        if (v25 <= v4)
          goto LABEL_610;
        v61[v4] = v69;
        v4 = (v19 + v68);
        if (v25 <= v4)
          goto LABEL_611;
        v61[v4] = v66;
        v66 += v59;
        v69 += v13;
        v68 += v637;
        --v67;
        v4 = v638;
      }
      while (v67);
    }
    v620 = v13 * (v636 - 1);
    v17 = (v637 * v636);
    if (v25 <= v17)
      goto LABEL_766;
    v61[v17] = v635 + v633;
    if (v4 >= 2)
    {
      v70 = v638 - 1;
      v71 = v618 * ((8 * v639) | 1) + 24;
      v72 = v17 + 1;
      do
      {
        v4 = v72;
        if (v25 <= v72)
          goto LABEL_612;
        v61[v72] = v71;
        v71 += v13;
        ++v72;
      }
      while (--v70);
    }
    v73 = v638;
    v4 = (v17 + v638);
    if (v25 <= v4)
      goto LABEL_767;
    LODWORD(v614) = (4 * v618 + 4) * v623;
    v74 = (v17 + v638);
    v61[v4] = v633;
    if (v636 >= 2)
    {
      v75 = v638 + 2;
      v76 = 1;
      v77 = v614 + 8 * v635;
      while (1)
      {
        v78 = v75;
        v79 = v638 - 1;
        if (v73 >= 2)
          break;
LABEL_82:
        ++v76;
        v73 = v638;
        v75 += v637;
        if (v76 == (_DWORD)v636)
          goto LABEL_85;
      }
      while (1)
      {
        v4 = v78;
        if (v25 <= v78)
          break;
        v61[v78++] = v77++;
        if (!--v79)
          goto LABEL_82;
      }
LABEL_244:
      *(_QWORD *)&v673[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v4;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v25;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_245;
    }
    v77 = v614 + 8 * v635;
LABEL_85:
    v80 = v630 + v73;
    if ((_DWORD)v639)
    {
      v81 = 0;
      v4 = v646;
      v82 = v648;
      while (v4 != v81)
      {
        v82[v81] = v81;
        v25 = v80 + v81;
        if (v4 <= v25)
          goto LABEL_566;
        v82[v25] = v635 + v81;
        v25 = (v638 + v636 + 2 * v639 - 2 + v81);
        if (v4 <= v25)
          goto LABEL_567;
        v82[v25] = v60 + v81;
        v25 = (v636 + v19 + 3 * v639 - 3 + v81);
        if (v4 <= v25)
          goto LABEL_568;
        v82[v25] = 3 * v635 + v81++;
        if (v639 == v81)
          goto LABEL_92;
      }
LABEL_565:
      *(_QWORD *)&v673[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v4;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_566:
      *(_QWORD *)&v673[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v25;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_567:
      *(_QWORD *)&v673[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v25;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_568:
      *(_QWORD *)&v673[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      LODWORD(v251) = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v25;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      v397 = (float32x2_t *)_os_crash_msg();
      __break(1u);
LABEL_569:
      v461 = v455;
      v459 = v455;
      v456 = a1;
      goto LABEL_570;
    }
LABEL_92:
    if (v638 >= 2)
    {
      v4 = v646;
      v83 = v648;
      v84 = v638 - 1;
      v85 = v13 * (v638 - 2) + 8 * v633 + 24;
      v86 = v639;
      do
      {
        v25 = v86;
        if (v4 <= v86)
          goto LABEL_617;
        v83[v86] = v85;
        v85 += v59;
        ++v86;
      }
      while (--v84);
    }
    v87 = v80 + v639;
    if (v636 >= 2)
    {
      v4 = v646;
      v88 = v648;
      v89 = v636 - 1;
      v90 = (v638 + v636 - 3) * v13 + 8 * v633 + 24;
      v91 = v80 + v639;
      do
      {
        v25 = v91;
        if (v4 <= v91)
          goto LABEL_618;
        v88[v91] = v90;
        v90 += v59;
        ++v91;
      }
      while (--v89);
    }
    if (v638 >= 2)
    {
      v4 = v646;
      v92 = v648;
      v93 = v638 - 1;
      v94 = (v636 + v19 - 4) * v13 + 8 * v633 + 24;
      v95 = v638 + v636 + 3 * v639 - 2;
      do
      {
        v25 = v95;
        if (v4 <= v95)
          goto LABEL_619;
        v92[v95] = v94;
        v94 += v59;
        ++v95;
      }
      while (--v93);
    }
    if (v636 >= 2)
    {
      v4 = v646;
      v96 = v648;
      v97 = v636 - 1;
      v98 = (v19 + 2 * v636 - 5) * v13 + 8 * v633 + 24;
      v99 = v636 + v627 + v19 - 3;
      do
      {
        v25 = v99;
        if (v4 <= v99)
          goto LABEL_620;
        v96[v99] = v98;
        v98 += v59;
        ++v99;
      }
      while (--v97);
    }
    v25 = v650;
    if (!v650)
      goto LABEL_775;
    v615 = (4 * v635);
    v100 = v652;
    *v652 = v615 + v633;
    v4 = v638;
    if (v638 < 2)
    {
LABEL_113:
      if (v25 <= v638)
        goto LABEL_776;
      v608 = 3 * v635;
      v103 = v13 * 2 * v623;
      v104 = v617 + v103;
      v105 = v617 + v103 + v64;
      v607 = 5 * v635;
      v100[v638] = 5 * v635 + v633;
      if (v636 < 2)
      {
LABEL_119:
        if (v25 <= v17)
          goto LABEL_777;
        v606 = 7 * v635;
        v100[v17] = 7 * v635 + v633;
        if (v4 < 2)
        {
LABEL_124:
          v4 = (v17 + v638);
          if (v25 <= v74)
            goto LABEL_778;
          v17 = (3 * v635);
          v100[v74] = v633 + 6 * v635;
          if (v636 >= 2)
          {
            v113 = v638 + 2;
            v114 = 1;
            while (1)
            {
              v115 = v113;
              v116 = v638 - 1;
              if (v638 >= 2)
                break;
LABEL_130:
              ++v114;
              v113 += v637;
              if (v114 == (_DWORD)v636)
                goto LABEL_131;
            }
            while (1)
            {
              v4 = v115;
              if (v25 <= v115)
                break;
              v100[v115++] = v77++;
              if (!--v116)
                goto LABEL_130;
            }
LABEL_245:
            *(_QWORD *)&v673[0] = 0;
            v688 = 0u;
            v689 = 0u;
            v686 = 0u;
            v687 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v679[0] = 136315906;
            *(_QWORD *)&v679[1] = "operator[]";
            LOWORD(v679[3]) = 1024;
            *(unsigned int *)((char *)&v679[3] + 2) = 789;
            HIWORD(v679[4]) = 2048;
            *(_QWORD *)&v679[5] = v4;
            LOWORD(v679[7]) = 2048;
            *(_QWORD *)((char *)&v679[7] + 2) = v25;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_246;
          }
LABEL_131:
          if ((_DWORD)v639)
          {
            v117 = 0;
            v4 = v642;
            v118 = v644;
            v119 = v636 + v19 + 3 * v639 - 3;
            v120 = v638 + v636 + 2 * v639 - 2;
            v121 = v644;
            while (v4 + v117)
            {
              *v121 = v639 - v633 + 8 * v633 + 20 + v117;
              v25 = v80;
              if (v4 <= v80)
                goto LABEL_614;
              v11 = v639 * ((6 * (_DWORD)v618) | 1) + 17 + v117;
              v118[v80] = v11;
              v25 = v120;
              if (v4 <= v120)
                goto LABEL_615;
              v11 = (v639 + 5 * v633 + 14 + v117);
              v118[v120] = v11;
              v25 = v119;
              if (v4 <= v119)
                goto LABEL_616;
              v11 = (v639 + v639 * 4 * v618 + 11 + v117);
              v118[v119] = v11;
              ++v121;
              --v117;
              ++v119;
              ++v120;
              ++v80;
              if (-v639 == v117)
                goto LABEL_138;
            }
            goto LABEL_613;
          }
LABEL_138:
          v11 = v625;
          if (v638 < 2)
          {
LABEL_142:
            if (v636 < 2)
            {
LABEL_146:
              v128 = v105 + v620;
              if (v638 < 2)
              {
LABEL_150:
                if (v636 < 2)
                {
LABEL_154:
                  if (!v646)
                    goto LABEL_780;
                  v648[v646 - 1] = *v648;
                  if (!v642)
                  {
LABEL_781:
                    *(_QWORD *)&v673[0] = 0;
                    v688 = 0u;
                    v689 = 0u;
                    v686 = 0u;
                    v687 = 0u;
                    *(_OWORD *)__s = 0u;
                    LODWORD(v251) = MEMORY[0x24BDACB70];
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v679[0] = 136315906;
                    *(_QWORD *)&v679[1] = "operator[]";
                    LOWORD(v679[3]) = 1024;
                    *(unsigned int *)((char *)&v679[3] + 2) = 789;
                    HIWORD(v679[4]) = 2048;
                    *(_QWORD *)&v679[5] = 0;
                    LOWORD(v679[7]) = 2048;
                    *(_QWORD *)((char *)&v679[7] + 2) = 0;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_782:
                    v665[0] = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 609;
                    LODWORD(v698[0]) = 136315906;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = (v13 + v4 - 1);
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_783:
                    v665[0] = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    LODWORD(v698[0]) = 136315906;
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 609;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = (v11 - v25 + v4 - 1);
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_784:
                    v665[0] = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    v19 = v431;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 609;
                    LODWORD(v698[0]) = 136315906;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = (v19 + v4 - 1);
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_785:
                    v665[0] = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    LODWORD(v698[0]) = 136315906;
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 609;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = (v17 - v25 + v4 - 1);
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_786:
                    v665[0] = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 609;
                    LODWORD(v698[0]) = 136315906;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = (v639 + v4 - 1);
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_787:
                    v665[0] = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    LODWORD(v698[0]) = 136315906;
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 609;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = (v18 - v25 + v4 - 1);
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_788:
                    v665[0] = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 609;
                    LODWORD(v698[0]) = 136315906;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = (v16 + v4 - 1);
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_789:
                    v665[0] = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    LODWORD(v698[0]) = 136315906;
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 609;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = (v19 - v25 + v4 - 1);
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_790:
                    *(_QWORD *)v701 = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    v347 = MEMORY[0x24BDACB70];
                    v581 = v339;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v698[0]) = 136315906;
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 797;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = v581;
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v19;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_791:
                    *(_QWORD *)v701 = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v698[0]) = 136315906;
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 609;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = v347;
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v4;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_792:
                    *(_QWORD *)v701 = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    v582 = v339;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v698[0]) = 136315906;
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 797;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = v582;
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v19;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_793:
                    *(_QWORD *)v701 = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v698[0]) = 136315906;
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 609;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = v19;
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v4;
                    _os_log_send_and_compose_impl();
                    v361 = _os_crash_msg();
                    __break(1u);
LABEL_794:
                    *(_QWORD *)v701 = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    v583 = v361;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v698[0]) = 136315906;
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 797;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = v583;
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v25;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_795:
                    *(_QWORD *)v701 = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v698[0]) = 136315906;
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 609;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = v16;
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v4;
                    _os_log_send_and_compose_impl();
                    v361 = _os_crash_msg();
                    __break(1u);
LABEL_796:
                    *(_QWORD *)v701 = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    v3 = v361;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v698[0]) = 136315906;
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 797;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = v3;
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v25;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_797:
                    *(_QWORD *)v701 = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v698[0]) = 136315906;
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 609;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = v17;
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v4;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_798:
                    *(_QWORD *)v701 = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v698[0]) = 136315906;
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 609;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = v16;
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v19;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_799;
                  }
                  v605 = 2 * v635;
                  v627 = v624 + 1;
                  v621 = (v19 - 2) * (v636 - 1);
                  v610 = v614 + 8 * v635 + v621;
                  v644[v642 - 1] = *v644;
                  bzero(__s, 0x2D0uLL);
                  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&__s[1]);
                  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)((char *)&v688 + 8), "vertexPosition", 1, 7);
                  if (v625 < v687)
                  {
                    v137 = v697;
                    if (v697)
                    {
                      v138 = 0;
                      do
                      {
                        v139 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)&v696, v138);
                        re::internal::accessFaceVaryingAttributeSubmesh(v139, v140);
                        ++v138;
                      }
                      while (v137 != v138);
                    }
                  }
                  re::DynamicArray<re::GeomCell4>::resize(&v686, v625);
                  v693 = v625;
                  if (v694)
                  {
                    v141 = v695;
                    v142 = 8 * v694;
                    do
                    {
                      v143 = *v141++;
                      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v143 + 72))(v143, v693);
                      v142 -= 8;
                    }
                    while (v142);
                  }
                  v144 = v630;
                  if (LODWORD(__s[1]) > v610 + (v631 | 1) * (_DWORD)v627
                    && (_DWORD)v687
                    && (v687 - 1) > (unint64_t)v687)
                  {
                    while (1)
                      ;
                  }
                  LODWORD(__s[1]) = v610 + (v631 | 1) * v627;
                  v690 = __s[1];
                  if (v691)
                  {
                    v145 = v692;
                    v146 = 8 * v691;
                    do
                    {
                      v147 = *v145++;
                      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v147 + 72))(v147, v690);
                      v146 -= 8;
                    }
                    while (v146);
                  }
                  if (*(_QWORD *)(v3 + 8) < v625)
                    re::DynamicArray<unsigned short>::setCapacity((_QWORD *)v3, v625);
                  if ((_DWORD)v634)
                  {
                    v148 = 0;
                    v149 = 0;
                    do
                    {
                      v150 = v148;
                      if (v144)
                      {
                        v151 = v149 * v639;
                        v150 = v148 + v144;
                        v152 = 1;
                        do
                        {
                          v153 = v151 + 1;
                          re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v148 + v152++ - 1, v151, v151 + 1, v639 + v151 + 1, v639 + v151);
                          v151 = v153;
                        }
                        while ((_DWORD)v639 != v152);
                        v144 = v630;
                      }
                      ++v149;
                      v148 += v144;
                    }
                    while (v149 != (_DWORD)v634);
                  }
                  else
                  {
                    v150 = 0;
                  }
                  v154 = v634 * v639;
                  re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v150, v633, v634 * v639, v633 + 1);
                  *(_QWORD *)v609 = (v633 + 1);
                  re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v150 + 1, v633, v609[0], v633 + 2);
                  *(_QWORD *)v612 = (v633 + 2);
                  v601 = (v633 - 1);
                  re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v150 + 2, v633, v633 + 2, v633 - 1);
                  v155 = v150 + 3;
                  v156 = (v639 | 0xFFFFFFFE) + v639;
                  v157 = v156 >> 1;
                  v603 = (v634 * v639);
                  if (v156 >= 2)
                  {
                    if (v157 <= 1)
                      v158 = 1;
                    else
                      v158 = v156 >> 1;
                    v159 = v634 * v639;
                    do
                    {
                      v154 = v159 + 1;
                      re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v155++, v609[0], v159, v159 + 1);
                      v159 = v154;
                      --v158;
                    }
                    while (v158);
                  }
                  if ((v639 & 1) != 0)
                  {
                    re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v155, v609[0], v154, v612[0]);
                  }
                  else
                  {
                    re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v155, v609[0], v154, v154 + 1, v612[0]);
                    ++v154;
                  }
                  v611 = 6 * v635;
                  if (v156 >= 2)
                  {
                    if (v157 <= 1)
                      v157 = 1;
                    v160 = v155 + 1;
                    do
                    {
                      re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v160++, v612[0], v154, v154 + 1);
                      ++v154;
                      --v157;
                    }
                    while (v157);
                  }
                  v161 = 1;
                  v25 = (unint64_t)v679;
                  v17 = 3;
                  v13 = v635;
                  v3 = v16;
                  do
                  {
                    if ((_DWORD)v16)
                    {
                      v18 = 0;
                      v4 = 0;
                      while (1)
                      {
                        v11 = v687;
                        if ((unint64_t)v687 <= v4)
                          break;
                        v162 = 0;
                        v163 = v688 + v18;
                        do
                        {
                          v679[v162] = *(_DWORD *)(v163 + v162 * 4);
                          ++v162;
                        }
                        while (v162 != 4);
                        v164 = 0;
                        if (v679[3] == -1)
                          v165 = 3;
                        else
                          v165 = 4;
                        do
                          v679[v164++] += v13;
                        while (v165 != v164);
                        re::GeomMeshBuilder::setFaceVertices((re::GeomMeshBuilder *)__s, v3, v165, (double *)v679);
                        v3 = (v3 + 1);
                        ++v4;
                        v18 += 16;
                        if (v4 == v16)
                          goto LABEL_206;
                      }
                      *(_QWORD *)&v698[0] = 0;
                      v680 = 0u;
                      v681 = 0u;
                      memset(v679, 0, sizeof(v679));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v673[0]) = 136315906;
                      *(_QWORD *)((char *)v673 + 4) = "operator[]";
                      WORD6(v673[0]) = 1024;
                      *(_DWORD *)((char *)v673 + 14) = 797;
                      WORD1(v673[1]) = 2048;
                      *(_QWORD *)((char *)&v673[1] + 4) = v4;
                      WORD6(v673[1]) = 2048;
                      *(_QWORD *)((char *)&v673[1] + 14) = v11;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                      goto LABEL_244;
                    }
LABEL_206:
                    v13 = (v13 + v635);
                    ++v161;
                  }
                  while (v161 != 8);
                  *(_QWORD *)v679 = v664;
                  *(_QWORD *)&v679[2] = v662;
                  *(_QWORD *)&v673[0] = v660;
                  *((_QWORD *)&v673[0] + 1) = v658;
                  LODWORD(v698[0]) = 8 * v635;
                  *(_DWORD *)v701 = 8 * v16;
                  v11 = v639;
                  v166 = v624;
                  v167 = v629;
                  if ((_DWORD)v636)
                  {
                    LODWORD(v4) = 0;
                    while (1)
                    {
                      v13 = v638;
                      if ((_DWORD)v638)
                        break;
                      LODWORD(v4) = v4 + 1;
LABEL_218:
                      if ((_DWORD)v4 == (_DWORD)v636)
                      {
                        v170 = 0;
                        while (1)
                        {
                          v13 = v638;
                          if ((_DWORD)v638)
                            break;
                          ++v170;
LABEL_229:
                          if (v170 == (_DWORD)v636)
                            goto LABEL_230;
                        }
                        v171 = v170 * v637;
                        v25 = (++v170 * v637);
                        while (1)
                        {
                          v19 = v171;
                          v3 = v650;
                          if (v650 <= v171)
                            break;
                          v16 = v171 + 1;
                          if (v650 <= v16)
                            goto LABEL_350;
                          v17 = (v25 + 1);
                          if (v650 <= v17)
                            goto LABEL_351;
                          v18 = v25;
                          if (v650 <= v25)
                            goto LABEL_352;
                          re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v20++, v652[v171], v652[v16], v652[v17], v652[v25]);
                          v25 = (v25 + 1);
                          v171 = v19 + 1;
                          --v13;
                          v11 = v639;
                          if (!v13)
                          {
                            v166 = v624;
                            v167 = v629;
                            goto LABEL_229;
                          }
                        }
                        *(_QWORD *)&v698[0] = 0;
                        v680 = 0u;
                        v681 = 0u;
                        memset(v679, 0, sizeof(v679));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        LODWORD(v673[0]) = 136315906;
                        *(_QWORD *)((char *)v673 + 4) = "operator[]";
                        WORD6(v673[0]) = 1024;
                        *(_DWORD *)((char *)v673 + 14) = 797;
                        WORD1(v673[1]) = 2048;
                        *(_QWORD *)((char *)&v673[1] + 4) = v19;
                        WORD6(v673[1]) = 2048;
                        *(_QWORD *)((char *)&v673[1] + 14) = v3;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_350:
                        *(_QWORD *)&v698[0] = 0;
                        v680 = 0u;
                        v681 = 0u;
                        memset(v679, 0, sizeof(v679));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        LODWORD(v673[0]) = 136315906;
                        *(_QWORD *)((char *)v673 + 4) = "operator[]";
                        WORD6(v673[0]) = 1024;
                        *(_DWORD *)((char *)v673 + 14) = 797;
                        WORD1(v673[1]) = 2048;
                        *(_QWORD *)((char *)&v673[1] + 4) = v16;
                        WORD6(v673[1]) = 2048;
                        *(_QWORD *)((char *)&v673[1] + 14) = v3;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_351:
                        *(_QWORD *)&v698[0] = 0;
                        v680 = 0u;
                        v681 = 0u;
                        memset(v679, 0, sizeof(v679));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        LODWORD(v673[0]) = 136315906;
                        *(_QWORD *)((char *)v673 + 4) = "operator[]";
                        WORD6(v673[0]) = 1024;
                        *(_DWORD *)((char *)v673 + 14) = 797;
                        WORD1(v673[1]) = 2048;
                        *(_QWORD *)((char *)&v673[1] + 4) = v17;
                        WORD6(v673[1]) = 2048;
                        *(_QWORD *)((char *)&v673[1] + 14) = v3;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_352:
                        *(_QWORD *)&v698[0] = 0;
                        v680 = 0u;
                        v681 = 0u;
                        memset(v679, 0, sizeof(v679));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        LODWORD(v673[0]) = 136315906;
                        *(_QWORD *)((char *)v673 + 4) = "operator[]";
                        WORD6(v673[0]) = 1024;
                        *(_DWORD *)((char *)v673 + 14) = 797;
                        WORD1(v673[1]) = 2048;
                        *(_QWORD *)((char *)&v673[1] + 4) = v18;
                        WORD6(v673[1]) = 2048;
                        *(_QWORD *)((char *)&v673[1] + 14) = v3;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_353:
                        v287 = 0;
                        v286 = 0;
LABEL_354:
                        v294 = v19;
                        v295 = v13;
                        if (v654)
                        {
                          v285 = v3;
                          v3 = *v656;
                          if (v287 > v3)
                          {
                            if (v3 < v19)
                            {
                              v288 = v286;
                              v4 = v656[v654 - 1];
                              if (v4 < v19)
                              {
                                if (v650)
                                {
                                  v19 = *v652;
                                  if (v19 < v294)
                                  {
                                    v13 = v652[v650 - 1];
                                    if (v13 < v294)
                                    {
                                      v290 = *(float *)(v288 + 4 * v3);
                                      v296 = *(float32x4_t *)(v25 + 16 * v3);
                                      v296.i32[3] = 0;
                                      v297 = vmaxnmq_f32(v296, (float32x4_t)xmmword_226108900);
                                      v298 = vminnmq_f32(v296, (float32x4_t)xmmword_2261088F0);
                                      v299 = *(float32x4_t *)(v25 + 16 * v4);
                                      v298.i32[3] = 0;
                                      v299.i32[3] = 0;
                                      v297.i32[3] = 0;
                                      v289 = (float32x2_t)vminnmq_f32(v298, v299).u64[0];
                                      v291 = (float32x2_t)vmaxnmq_f32(v297, v299).u64[0];
                                      v300 = *(float32x4_t *)(v25 + 16 * v19);
                                      v300.i32[3] = 0;
                                      v301 = vmaxnmq_f32(v300, (float32x4_t)xmmword_226108900);
                                      v302 = vminnmq_f32(v300, (float32x4_t)xmmword_2261088F0);
                                      v303 = *(float32x4_t *)(v25 + 16 * v13);
                                      v302.i32[3] = 0;
                                      v303.i32[3] = 0;
                                      v293 = (float32x2_t)vminnmq_f32(v302, v303).u64[0];
                                      v301.i32[3] = 0;
                                      v292 = (float32x2_t)vmaxnmq_f32(v301, v303).u64[0];
                                      v4 = (v638 + 1);
                                      v281 = v638;
                                      goto LABEL_362;
                                    }
LABEL_849:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    LODWORD(v251) = MEMORY[0x24BDACB70];
                                    v594 = v294;
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 609;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v13;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v594;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_850:
                                    re::internal::assertLog((re::internal *)6, (uint64_t)v333, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v19, v19);
                                    _os_crash();
                                    __break(1u);
LABEL_851:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 609;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v4;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_852:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 609;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v4;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_853:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    v4 = v385;
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 609;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v4;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_854:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 609;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v19;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_855:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 609;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v11;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_856:
                                    v665[0] = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 609;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v4;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_857:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 609;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v4;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_858:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 601;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v4;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v13;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_859:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 601;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v633;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v13;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_860:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 601;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v4;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v13;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_861:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    LODWORD(v251) = MEMORY[0x24BDACB70];
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 601;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v603;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v13;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_862:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 609;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v13;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_863:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 609;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v11;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_864:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 601;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v13;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v4;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_865:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    LODWORD(v251) = MEMORY[0x24BDACB70];
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 601;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v11;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v4;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_866:
                                    re::internal::assertLog((re::internal *)6, (uint64_t)v333, v327, v533, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
                                    _os_crash();
                                    __break(1u);
LABEL_867:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 609;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v4;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_868:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 609;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v13;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_869:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 609;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v19;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_870:
                                    *(_QWORD *)v701 = 0;
                                    v674 = 0u;
                                    v675 = 0u;
                                    memset(v673, 0, sizeof(v673));
                                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    LODWORD(v698[0]) = 136315906;
                                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                    WORD6(v698[0]) = 1024;
                                    *(_DWORD *)((char *)v698 + 14) = 609;
                                    WORD1(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 4) = v4;
                                    WORD6(v698[1]) = 2048;
                                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
                                  }
LABEL_848:
                                  *(_QWORD *)v701 = 0;
                                  v674 = 0u;
                                  v675 = 0u;
                                  memset(v673, 0, sizeof(v673));
                                  v593 = v294;
                                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                  LODWORD(v698[0]) = 136315906;
                                  *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                  WORD6(v698[0]) = 1024;
                                  *(_DWORD *)((char *)v698 + 14) = 609;
                                  WORD1(v698[1]) = 2048;
                                  *(_QWORD *)((char *)&v698[1] + 4) = v19;
                                  WORD6(v698[1]) = 2048;
                                  *(_QWORD *)((char *)&v698[1] + 14) = v593;
                                  _os_log_send_and_compose_impl();
                                  _os_crash_msg();
                                  __break(1u);
                                  goto LABEL_849;
                                }
LABEL_847:
                                *(_QWORD *)v701 = 0;
                                v674 = 0u;
                                v675 = 0u;
                                memset(v673, 0, sizeof(v673));
                                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                LODWORD(v698[0]) = 136315906;
                                *(_QWORD *)((char *)v698 + 4) = "operator[]";
                                WORD6(v698[0]) = 1024;
                                *(_DWORD *)((char *)v698 + 14) = 797;
                                WORD1(v698[1]) = 2048;
                                *(_QWORD *)((char *)&v698[1] + 4) = 0;
                                WORD6(v698[1]) = 2048;
                                *(_QWORD *)((char *)&v698[1] + 14) = 0;
                                _os_log_send_and_compose_impl();
                                _os_crash_msg();
                                __break(1u);
                                goto LABEL_848;
                              }
LABEL_846:
                              *(_QWORD *)v701 = 0;
                              v674 = 0u;
                              v675 = 0u;
                              memset(v673, 0, sizeof(v673));
                              v592 = v294;
                              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              LODWORD(v698[0]) = 136315906;
                              *(_QWORD *)((char *)v698 + 4) = "operator[]";
                              WORD6(v698[0]) = 1024;
                              *(_DWORD *)((char *)v698 + 14) = 609;
                              WORD1(v698[1]) = 2048;
                              *(_QWORD *)((char *)&v698[1] + 4) = v4;
                              WORD6(v698[1]) = 2048;
                              *(_QWORD *)((char *)&v698[1] + 14) = v592;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
                              goto LABEL_847;
                            }
LABEL_845:
                            *(_QWORD *)v701 = 0;
                            v674 = 0u;
                            v675 = 0u;
                            memset(v673, 0, sizeof(v673));
                            v4 = v294;
                            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                            LODWORD(v698[0]) = 136315906;
                            *(_QWORD *)((char *)v698 + 4) = "operator[]";
                            WORD6(v698[0]) = 1024;
                            *(_DWORD *)((char *)v698 + 14) = 609;
                            WORD1(v698[1]) = 2048;
                            *(_QWORD *)((char *)&v698[1] + 4) = v3;
                            WORD6(v698[1]) = 2048;
                            *(_QWORD *)((char *)&v698[1] + 14) = v4;
                            _os_log_send_and_compose_impl();
                            _os_crash_msg();
                            __break(1u);
                            goto LABEL_846;
                          }
LABEL_844:
                          *(_QWORD *)v701 = 0;
                          v674 = 0u;
                          v675 = 0u;
                          memset(v673, 0, sizeof(v673));
                          v591 = v287;
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          LODWORD(v698[0]) = 136315906;
                          *(_QWORD *)((char *)v698 + 4) = "operator[]";
                          WORD6(v698[0]) = 1024;
                          *(_DWORD *)((char *)v698 + 14) = 609;
                          WORD1(v698[1]) = 2048;
                          *(_QWORD *)((char *)&v698[1] + 4) = v3;
                          WORD6(v698[1]) = 2048;
                          *(_QWORD *)((char *)&v698[1] + 14) = v591;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
                          goto LABEL_845;
                        }
LABEL_843:
                        *(_QWORD *)v701 = 0;
                        v674 = 0u;
                        v675 = 0u;
                        memset(v673, 0, sizeof(v673));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        LODWORD(v698[0]) = 136315906;
                        *(_QWORD *)((char *)v698 + 4) = "operator[]";
                        WORD6(v698[0]) = 1024;
                        *(_DWORD *)((char *)v698 + 14) = 797;
                        WORD1(v698[1]) = 2048;
                        *(_QWORD *)((char *)&v698[1] + 4) = 0;
                        WORD6(v698[1]) = 2048;
                        *(_QWORD *)((char *)&v698[1] + 14) = 0;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
                        goto LABEL_844;
                      }
                    }
                    v168 = v4 * v637;
                    v4 = (v4 + 1);
                    v25 = (v4 * v637);
                    while (1)
                    {
                      v19 = v168;
                      v169 = v654;
                      if (v654 <= v168)
                        break;
                      v16 = v168 + 1;
                      if (v654 <= v16)
                        goto LABEL_270;
                      v17 = (v25 + 1);
                      if (v654 <= v17)
                        goto LABEL_271;
                      v18 = v25;
                      if (v654 <= v25)
                        goto LABEL_272;
                      re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v20++, v656[v168], v656[v16], v656[v17], v656[v25]);
                      v25 = (v25 + 1);
                      v168 = v19 + 1;
                      --v13;
                      v11 = v639;
                      if (!v13)
                      {
                        v166 = v624;
                        v167 = v629;
                        goto LABEL_218;
                      }
                    }
                    *(_QWORD *)&v698[0] = 0;
                    v680 = 0u;
                    v681 = 0u;
                    memset(v679, 0, sizeof(v679));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v673[0]) = 136315906;
                    *(_QWORD *)((char *)v673 + 4) = "operator[]";
                    WORD6(v673[0]) = 1024;
                    *(_DWORD *)((char *)v673 + 14) = 797;
                    WORD1(v673[1]) = 2048;
                    *(_QWORD *)((char *)&v673[1] + 4) = v19;
                    WORD6(v673[1]) = 2048;
                    *(_QWORD *)((char *)&v673[1] + 14) = v169;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_270:
                    *(_QWORD *)&v698[0] = 0;
                    v680 = 0u;
                    v681 = 0u;
                    memset(v679, 0, sizeof(v679));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v673[0]) = 136315906;
                    *(_QWORD *)((char *)v673 + 4) = "operator[]";
                    WORD6(v673[0]) = 1024;
                    *(_DWORD *)((char *)v673 + 14) = 797;
                    WORD1(v673[1]) = 2048;
                    *(_QWORD *)((char *)&v673[1] + 4) = v16;
                    WORD6(v673[1]) = 2048;
                    *(_QWORD *)((char *)&v673[1] + 14) = v169;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_271:
                    *(_QWORD *)&v698[0] = 0;
                    v680 = 0u;
                    v681 = 0u;
                    memset(v679, 0, sizeof(v679));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v673[0]) = 136315906;
                    *(_QWORD *)((char *)v673 + 4) = "operator[]";
                    WORD6(v673[0]) = 1024;
                    *(_DWORD *)((char *)v673 + 14) = 797;
                    WORD1(v673[1]) = 2048;
                    *(_QWORD *)((char *)&v673[1] + 4) = v17;
                    WORD6(v673[1]) = 2048;
                    *(_QWORD *)((char *)&v673[1] + 14) = v169;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_272:
                    *(_QWORD *)&v698[0] = 0;
                    v680 = 0u;
                    v681 = 0u;
                    memset(v679, 0, sizeof(v679));
                    v196 = MEMORY[0x24BDACB70];
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v673[0]) = 136315906;
                    *(_QWORD *)((char *)v673 + 4) = "operator[]";
                    WORD6(v673[0]) = 1024;
                    *(_DWORD *)((char *)v673 + 14) = 797;
                    WORD1(v673[1]) = 2048;
                    *(_QWORD *)((char *)&v673[1] + 4) = v18;
                    WORD6(v673[1]) = 2048;
                    *(_QWORD *)((char *)&v673[1] + 14) = v169;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_273:
                    v198 = 0;
                    v199 = 0;
LABEL_274:
                    v195 = v169;
                    goto LABEL_275;
                  }
LABEL_230:
                  v13 = v635;
                  if (v631)
                  {
                    v172 = 0;
                    v173 = v621 + 8 * v633 + v614;
                    v174 = v173 + v166;
                    do
                    {
                      if (v166)
                      {
                        for (i = 0; i != v166; ++i)
                        {
                          v16 = v167;
                          re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v167 + i, v173 + i + 24, v173 + i + 25, v174 + i + 26, v174 + i + 25);
                          v167 = v16;
                        }
                        v167 = (v16 + i);
                      }
                      ++v172;
                      v173 += v627;
                      v174 += v627;
                    }
                    while (v172 != v631);
                  }
                  v3 = (unint64_t)a1;
                  v176 = (re *)re::GeomMesh::operator=((uint64_t)a1, &__s[1]);
                  v177 = re::GeomMesh::setName(v176, __s[0]);
                  v179 = __s[0];
                  if (__s[0])
                  {
                    v180 = re::globalAllocators(v177);
                    (*(void (**)(uint64_t, char *))(*(_QWORD *)v180[2] + 40))(v180[2], v179);
                    __s[0] = 0;
                  }
                  if (*a2)
                    re::addVertexUVs(a1, v178);
                  v181 = (int32x2_t *)a2;
                  v182 = (char *)*((_QWORD *)a2 + 9);
                  if (v182)
                  {
                    v183 = re::GeomMesh::addAttribute((uint64_t)a1, v182, 1, 4);
                    v181 = (int32x2_t *)a2;
                    v4 = (unint64_t)v183;
                    goto LABEL_247;
                  }
LABEL_246:
                  v4 = 0;
LABEL_247:
                  v184 = *(float *)v181[3].i32;
                  v185 = v181[1];
                  v682 = v6;
                  v683 = v184;
                  v684 = v185;
                  v629 = (re::GeomMesh *)v4;
                  if (a2[5])
                  {
                    v186 = *((float *)a2 + 7);
                    v676 = v6;
                    v677 = v186;
                    v678 = v185;
                    v25 = re::GeomMesh::modifyVertexPositions((re::GeomMesh *)v3);
                    v614 = v187;
                    v11 = v188;
                    v16 = v189;
                    v195 = v4;
                    if (v4)
                    {
                      v169 = v4;
                      v196 = v633;
                      if (!(*(unsigned int (**)(unint64_t, unint64_t))(*(_QWORD *)v4 + 16))(v4, v189))goto LABEL_273;
                      v4 = re::internal::GeomTypedAttribute<float>::operator[](v4, 0);
                      v197 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v169 + 16))(v169);
                      v198 = v4;
                      v199 = v197;
                      goto LABEL_274;
                    }
                    v198 = 0;
                    v199 = 0xFFFFFFFFLL;
                    v196 = v633;
LABEL_275:
                    v223 = v618;
                    v224 = v11;
                    if ((_DWORD)v618)
                    {
                      v225 = 0;
                      v226 = v16;
                      v16 = (float)((float)((float)v13 + -3.0) / (float)v618);
                      v13 = v614;
                      v600 = v614;
                      v227 = v226;
                      v598 = v226;
                      v599 = v11;
                      v632 = v199;
                      v596 = 7 * v196 + 20;
                      v597 = 5 * v196 + 14;
                      do
                      {
                        if ((_DWORD)v16)
                        {
                          v228 = 0;
                          v18 = 0;
                          v229 = (v225 * v16 + v615);
                          v595 = v225;
                          v230 = (v225 * v16 + v611);
                          v619 = v198 + 4 * v230;
                          v602 = v225 + 1;
                          v231 = (v225 + 1) * v16;
                          v626 = v19 + 16 * v230;
                          if (v614 >= v229)
                            v232 = v614 - v229;
                          else
                            v232 = 0;
                          v233 = v17 + 16 * v230;
                          if (v614 >= v230)
                            v234 = v614 - v230;
                          else
                            v234 = 0;
                          v235 = v25 + 16 * v230;
                          if (v11 >= v229)
                            v236 = v11 - v229;
                          else
                            v236 = 0;
                          v237 = v198;
                          v238 = v198 + 4 * v229;
                          if (v11 >= v230)
                            v239 = v11 - v230;
                          else
                            v239 = 0;
                          v240 = v19 + 16 * v229;
                          if (v598 >= v229)
                            v241 = v598 - v229;
                          else
                            v241 = 0;
                          v622 = v230;
                          if (v598 >= v230)
                            v242 = v598 - v230;
                          else
                            v242 = 0;
                          v243 = v17 + 16 * v229;
                          v244 = v597 + v231;
                          v245 = v25 + 16 * v229;
                          v246 = v596 + v231;
                          do
                          {
                            if (v232 == v18)
                              goto LABEL_685;
                            v190.i32[0] = *(_DWORD *)(v245 + v228);
                            v191.i64[0] = *(_QWORD *)(v245 + v228 + 4);
                            v247 = (int32x4_t)vnegq_f32(v191);
                            v248 = v190;
                            *(uint64_t *)((char *)v248.i64 + 4) = v247.i64[0];
                            *(float32x4_t *)(v245 + v228) = v248;
                            v4 = v244;
                            if (v244 >= v614)
                              goto LABEL_686;
                            *(float *)v193.i32 = -v190.f32[0];
                            v249 = vzip1q_s32(v193, v247);
                            v250 = v249;
                            v250.i32[2] = v247.i32[1];
                            *(int32x4_t *)(v25 + 16 * v244) = v250;
                            if (v234 == v18)
                              goto LABEL_687;
                            v193.i32[1] = v191.i32[0];
                            v193.i32[2] = v247.i32[1];
                            *(int32x4_t *)(v235 + 16 * v18) = v193;
                            v251 = v246;
                            if (v246 >= v614)
                              goto LABEL_688;
                            v190.i32[1] = v191.i32[0];
                            v190.i32[2] = v247.i32[1];
                            *(float32x4_t *)(v25 + 16 * v246) = v190;
                            if (v236 == v18)
                              goto LABEL_689;
                            v191.i32[0] = *(_DWORD *)(v243 + v228);
                            v252 = *(float *)(v243 + v228 + 4);
                            v253 = -*(float *)(v243 + v228 + 8);
                            v254 = v191;
                            v254.f32[1] = v252;
                            v254.f32[2] = v253;
                            *(float32x4_t *)(v243 + v228) = v254;
                            if (v244 >= v11)
                              goto LABEL_690;
                            v254.f32[0] = -v191.f32[0];
                            v254.f32[1] = v252;
                            v254.f32[2] = v253;
                            *(float32x4_t *)(v17 + 16 * v244) = v254;
                            if (v239 == v18)
                              goto LABEL_691;
                            v191.f32[1] = -v252;
                            v191.f32[2] = v253;
                            *(float32x4_t *)(v233 + 16 * v18) = v191;
                            if (v246 >= v11)
                              goto LABEL_692;
                            *(float *)&v249.i32[2] = v253;
                            *(int32x4_t *)(v17 + 16 * v246) = v249;
                            if (v241 == v18)
                              goto LABEL_693;
                            v249.i32[0] = *(_DWORD *)(v240 + v228);
                            v190.i64[0] = *(_QWORD *)(v240 + v228 + 4);
                            v191 = vnegq_f32(v190);
                            v192 = (float32x4_t)v249;
                            *(uint64_t *)((char *)v192.i64 + 4) = v191.i64[0];
                            *(float32x4_t *)(v240 + v228) = v192;
                            if (v244 >= v227)
                              goto LABEL_694;
                            v192.f32[0] = -*(float *)v249.i32;
                            v193 = (int32x4_t)v192;
                            *(uint64_t *)((char *)v193.i64 + 4) = v191.i64[0];
                            *(int32x4_t *)(v19 + 16 * v244) = v193;
                            if (v242 == v18)
                              goto LABEL_695;
                            v192.i32[1] = v190.i32[0];
                            v192.i32[2] = v191.i32[1];
                            *(float32x4_t *)(v626 + 16 * v18) = v192;
                            if (v246 >= v227)
                              goto LABEL_696;
                            v249.i32[1] = v190.i32[0];
                            v249.i32[2] = v191.i32[1];
                            *(int32x4_t *)(v19 + 16 * v246) = v249;
                            if (v629)
                            {
                              if (v229 + v18 >= v199)
                                goto LABEL_701;
                              if (v199 <= v244)
                                goto LABEL_702;
                              *(_DWORD *)(v237 + 4 * v244) = *(_DWORD *)(v238 + 4 * v18);
                              if (v622 + v18 >= v199)
                                goto LABEL_703;
                              *(_DWORD *)(v619 + 4 * v18) = *(_DWORD *)(v238 + 4 * v18);
                              if (v199 <= v246)
                                goto LABEL_704;
                              *(_DWORD *)(v237 + 4 * v246) = *(_DWORD *)(v238 + 4 * v18);
                            }
                            ++v18;
                            v228 += 16;
                            --v244;
                            --v246;
                          }
                          while (v16 != v18);
                          v223 = v618;
                          v196 = v633;
                          v195 = (unint64_t)v629;
                          v224 = v11;
                          v198 = v237;
                          v255 = v602;
                        }
                        else
                        {
                          v255 = v225 + 1;
                        }
                        v225 = v255;
                      }
                      while (v255 != v223);
                      v16 = v227;
                    }
                    v4 = 0;
                    v256 = 7 * v196 + 20;
                    v257 = (8 * v196 + 16) | 7;
                    v258 = (6 * v196 + 16) | 1;
                    v259 = 5 * v196 + 14;
                    v260 = 1;
                    v11 = v627;
                    do
                    {
                      if (v4)
                        v261 = (int)(float)((float)v260 + -3.0);
                      else
                        v261 = 1;
                      v262 = v259 + v4;
                      v13 = v614;
                      if (v259 + (int)v4 >= v614)
                        goto LABEL_735;
                      v18 = (v259 + v4);
                      if (v262 >= v224)
                        goto LABEL_736;
                      if (v262 >= v16)
                        goto LABEL_737;
                      v263 = v25 + 16 * v262;
                      v193.i32[0] = *(_DWORD *)v263;
                      v194.i64[0] = *(_QWORD *)(v263 + 4);
                      v264 = v17 + 16 * v18;
                      v192.i64[0] = *(_QWORD *)v264;
                      v265 = *(float *)(v264 + 8);
                      v266 = v19 + 16 * v18;
                      v190.i32[0] = *(_DWORD *)v266;
                      v267 = vnegq_f32(v194).u64[0];
                      v268 = v193;
                      *(uint64_t *)((char *)v268.i64 + 4) = v267;
                      v191.i64[0] = *(_QWORD *)(v266 + 4);
                      *(int32x4_t *)v263 = v268;
                      v269 = v258 + v4 - v261;
                      if (v269 >= v614)
                        goto LABEL_738;
                      *(float *)v268.i32 = -*(float *)v193.i32;
                      v270 = v268;
                      *(uint64_t *)((char *)v270.i64 + 4) = v267;
                      *(int32x4_t *)(v25 + 16 * v269) = v270;
                      v271 = v256 + v4;
                      if (v256 + (int)v4 >= v614)
                        goto LABEL_739;
                      v268.i32[1] = v194.i32[0];
                      v268.i32[2] = HIDWORD(v267);
                      *(int32x4_t *)(v25 + 16 * v271) = v268;
                      v272 = v257 + v4 - v261;
                      if (v272 >= v614)
                        goto LABEL_740;
                      v273 = v258 + (_DWORD)v4 - v261;
                      v193.i32[1] = v194.i32[0];
                      v193.i32[2] = HIDWORD(v267);
                      *(int32x4_t *)(v25 + 16 * v272) = v193;
                      v274 = -v265;
                      v275 = v192;
                      v275.f32[2] = v274;
                      *(float32x4_t *)v264 = v275;
                      if (v269 >= v224)
                        goto LABEL_741;
                      v275.f32[0] = -v192.f32[0];
                      v194 = v275;
                      v194.i32[1] = v192.i32[1];
                      v13 = (v256 + v4);
                      v194.f32[2] = v274;
                      *(float32x4_t *)(v17 + 16 * v273) = v194;
                      if (v271 >= v224)
                        goto LABEL_742;
                      v276 = v257 + (_DWORD)v4 - v261;
                      *(float32x4_t *)(v17 + 16 * v13) = v194;
                      if (v272 >= v224)
                        goto LABEL_743;
                      v275.f32[1] = -v192.f32[1];
                      v275.f32[2] = v274;
                      *(float32x4_t *)(v17 + 16 * v276) = v275;
                      v192 = vnegq_f32(v191);
                      v193 = (int32x4_t)v190;
                      *(uint64_t *)((char *)v193.i64 + 4) = v192.i64[0];
                      *(int32x4_t *)v266 = v193;
                      if (v269 >= v16)
                        goto LABEL_744;
                      *(float *)v193.i32 = -v190.f32[0];
                      v277 = v193;
                      *(uint64_t *)((char *)v277.i64 + 4) = v192.i64[0];
                      *(int32x4_t *)(v19 + 16 * v273) = v277;
                      if (v271 >= v16)
                        goto LABEL_745;
                      v193.i32[1] = v191.i32[0];
                      v193.i32[2] = v192.i32[1];
                      *(int32x4_t *)(v19 + 16 * v13) = v193;
                      if (v272 >= v16)
                        goto LABEL_746;
                      v190.i32[1] = v191.i32[0];
                      v190.i32[2] = v192.i32[1];
                      *(float32x4_t *)(v19 + 16 * v276) = v190;
                      if (v195)
                      {
                        if (v199 <= v262)
                          goto LABEL_753;
                        if (v199 <= v269)
                          goto LABEL_754;
                        *(_DWORD *)(v198 + 4 * v273) = *(_DWORD *)(v198 + 4 * v18);
                        if (v199 <= v271)
                          goto LABEL_755;
                        *(_DWORD *)(v198 + 4 * v13) = *(_DWORD *)(v198 + 4 * v18);
                        if (v199 <= v272)
                          goto LABEL_756;
                        *(_DWORD *)(v198 + 4 * v276) = *(_DWORD *)(v198 + 4 * v18);
                      }
                      --v4;
                      ++v260;
                      v196 = v633;
                      v221 = v635;
                    }
                    while (v4 != -3);
                    v222 = (uint64_t)a1;
                    *(_QWORD *)&v698[0] = re::GeomMesh::modifyVertexPositions(a1);
                    *((_QWORD *)&v698[0] + 1) = v278;
                    v279.f32[0] = v8;
                  }
                  else
                  {
                    v200 = re::GeomMesh::modifyVertexPositions((re::GeomMesh *)v3);
                    v202 = v201;
                    *(_QWORD *)v701 = v200;
                    *(_QWORD *)&v701[8] = v201;
                    v204 = v3;
                    v205 = v203;
                    v207 = v206;
                    v11 = v627;
                    if ((_DWORD)v615)
                    {
                      v212 = 0;
                      v4 = v202;
                      v213 = 16 * v202;
                      v214 = v202 - v615;
                      if (v202 < v615)
                        v214 = 0;
                      v215 = 16 * v214;
                      if (v207 >= v615)
                        v216 = v207 - v615;
                      else
                        v216 = 0;
                      v217 = v209 - v615;
                      if (v209 < v615)
                        v217 = 0;
                      v218 = 16 * v217;
                      v25 = v209;
                      v219 = 16 * v216;
                      v13 = v207;
                      v220 = 16 * v207;
                      v19 = v615;
                      while (v213 != v212)
                      {
                        if (v215 == v212)
                          goto LABEL_748;
                        v210.i32[0] = *(_DWORD *)(v200 + v212);
                        v210.f32[1] = -*(float *)(v200 + v212 + 4);
                        v210.f32[2] = -*(float *)(v200 + v212 + 8);
                        *(float32x4_t *)(v200 + 16 * v615 + v212) = v210;
                        if (v220 == v212)
                          goto LABEL_749;
                        if (v219 == v212)
                          goto LABEL_750;
                        v210.i32[0] = *(_DWORD *)(v205 + v212);
                        v210.f32[1] = -*(float *)(v205 + v212 + 4);
                        v210.f32[2] = -*(float *)(v205 + v212 + 8);
                        *(float32x4_t *)(v205 + 16 * v615 + v212) = v210;
                        if (16 * v209 == v212)
                          goto LABEL_751;
                        if (v218 == v212)
                          goto LABEL_752;
                        v210.i32[0] = *(_DWORD *)(v208 + v212);
                        v210.f32[1] = -*(float *)(v208 + v212 + 4);
                        v210.f32[2] = -*(float *)(v208 + v212 + 8);
                        *(float32x4_t *)(v208 + 16 * v615 + v212) = v210;
                        v212 += 16;
                        ++v19;
                        if (16 * v615 == v212)
                          goto LABEL_267;
                      }
LABEL_747:
                      v665[0] = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v4;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v4;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_748:
                      v665[0] = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v19;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v4;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_749:
                      v665[0] = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v13;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v13;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_750:
                      v665[0] = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v19;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v13;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_751:
                      v665[0] = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v25;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v25;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_752:
                      v665[0] = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v19;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v25;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_753:
                      v665[0] = 0;
                      v700 = 0u;
                      v699 = 0u;
                      memset(v698, 0, sizeof(v698));
                      v273 = MEMORY[0x24BDACB70];
                      v577 = v199;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v701 = 136315906;
                      *(_QWORD *)&v701[4] = "operator[]";
                      *(_WORD *)&v701[12] = 1024;
                      *(_DWORD *)&v701[14] = 609;
                      *(_WORD *)&v701[18] = 2048;
                      *(_QWORD *)&v701[20] = v18;
                      *(_WORD *)&v701[28] = 2048;
                      *(_QWORD *)&v701[30] = v577;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_754:
                      v665[0] = 0;
                      v700 = 0u;
                      v699 = 0u;
                      memset(v698, 0, sizeof(v698));
                      v578 = v199;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v701 = 136315906;
                      *(_QWORD *)&v701[4] = "operator[]";
                      *(_WORD *)&v701[12] = 1024;
                      *(_DWORD *)&v701[14] = 609;
                      *(_WORD *)&v701[18] = 2048;
                      *(_QWORD *)&v701[20] = v273;
                      *(_WORD *)&v701[28] = 2048;
                      *(_QWORD *)&v701[30] = v578;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_755:
                      v665[0] = 0;
                      v700 = 0u;
                      v699 = 0u;
                      memset(v698, 0, sizeof(v698));
                      v276 = v199;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v701 = 136315906;
                      *(_QWORD *)&v701[4] = "operator[]";
                      *(_WORD *)&v701[12] = 1024;
                      *(_DWORD *)&v701[14] = 609;
                      *(_WORD *)&v701[18] = 2048;
                      *(_QWORD *)&v701[20] = v13;
                      *(_WORD *)&v701[28] = 2048;
                      *(_QWORD *)&v701[30] = v276;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_756:
                      v665[0] = 0;
                      v700 = 0u;
                      v699 = 0u;
                      memset(v698, 0, sizeof(v698));
                      v4 = v199;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v701 = 136315906;
                      *(_QWORD *)&v701[4] = "operator[]";
                      *(_WORD *)&v701[12] = 1024;
                      *(_DWORD *)&v701[14] = 609;
                      *(_WORD *)&v701[18] = 2048;
                      *(_QWORD *)&v701[20] = v276;
                      *(_WORD *)&v701[28] = 2048;
                      *(_QWORD *)&v701[30] = v4;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_757:
                      *(_QWORD *)&v673[0] = 0;
                      v688 = 0u;
                      v689 = 0u;
                      v686 = 0u;
                      v687 = 0u;
                      *(_OWORD *)__s = 0u;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      v679[0] = 136315906;
                      *(_QWORD *)&v679[1] = "operator[]";
                      LOWORD(v679[3]) = 1024;
                      *(unsigned int *)((char *)&v679[3] + 2) = 789;
                      HIWORD(v679[4]) = 2048;
                      *(_QWORD *)&v679[5] = 0;
                      LOWORD(v679[7]) = 2048;
                      *(_QWORD *)((char *)&v679[7] + 2) = 0;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                      goto LABEL_758;
                    }
LABEL_267:
                    v221 = v635;
                    v210.f32[0] = v8;
                    v222 = (uint64_t)a1;
                  }
                  *(_QWORD *)&v673[0] = v664;
                  *((_QWORD *)&v673[0] + 1) = v662;
                  *(_QWORD *)&v698[0] = v660;
                  *((_QWORD *)&v698[0] + 1) = v658;
                  *(_DWORD *)v701 = 8 * v635;
                  v16 = (unint64_t)v629;
                  v281 = v638;
                  v4 = (v638 + 1);
                  if (v604 >= 2)
                  {
                    v25 = re::GeomMesh::modifyVertexPositions(a1);
                    v19 = v282;
                    v13 = v283;
                    v285 = v284;
                    if (v629)
                    {
                      v3 = v284;
                      if (!(*(unsigned int (**)(re::GeomMesh *))(*(_QWORD *)v629 + 16))(v629))
                        goto LABEL_353;
                      v286 = re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v629, 0);
                      v287 = (*(uint64_t (**)(re::GeomMesh *))(*(_QWORD *)v629 + 16))(v629);
                      goto LABEL_354;
                    }
                    v288 = 0;
                    v289 = (float32x2_t)vdupq_n_s32(0x7F800000u).u64[0];
                    v290 = 0.0;
                    v287 = 0xFFFFFFFFLL;
                    v291 = (float32x2_t)0x7F0000007FLL;
                    v292 = (float32x2_t)0x7F0000007FLL;
                    v293 = v289;
                    v294 = v19;
                    v295 = v13;
LABEL_362:
                    if (v636 >= 2)
                    {
                      v304 = 1.0 / (float)v281;
                      v305 = v281 - 1;
                      v306 = v281 + 2;
                      v307 = 1;
                      while (1)
                      {
                        v3 = (v4 * v307);
                        v19 = v654;
                        if (v654 <= v3)
                          goto LABEL_800;
                        v4 = v656[v3];
                        if (v4 >= v294)
                          goto LABEL_801;
                        v18 = (v3 + v638);
                        if (v654 <= v18)
                          goto LABEL_802;
                        v13 = v656[v18];
                        if (v13 >= v294)
                          goto LABEL_803;
                        if (v4 >= v295)
                          goto LABEL_804;
                        if (v4 >= v285)
                          goto LABEL_805;
                        v308 = v650;
                        if (v650 <= v3)
                          goto LABEL_806;
                        v19 = v652[v3];
                        if (v19 >= v294)
                          goto LABEL_807;
                        if (v650 <= v18)
                          goto LABEL_808;
                        v309 = v652[v18];
                        if (v309 >= v294)
                          goto LABEL_809;
                        if (v19 >= v295)
                          goto LABEL_810;
                        if (v19 >= v285)
                          goto LABEL_811;
                        if (v638 >= 2)
                          break;
LABEL_395:
                        ++v307;
                        v4 = (v638 + 1);
                        v306 += v637;
                        if (v307 == v636)
                          goto LABEL_396;
                      }
                      v310 = 0;
                      while (1)
                      {
                        v18 = (v306 + v310);
                        v11 = v654;
                        if (v654 <= v18)
                          break;
                        v11 = v650;
                        if (v650 <= v18)
                          goto LABEL_717;
                        v251 = v656[v18];
                        if (v251 >= v294)
                          goto LABEL_718;
                        v18 = v652[v18];
                        v311 = v304 * (float)(v310 + 1);
                        v312 = (float32x2_t *)(v25 + 16 * v251);
                        *(float32x4_t *)v312->f32 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v25 + 16 * v4), 1.0 - v311), vmulq_n_f32(*(float32x4_t *)(v25 + 16 * v13), v311));
                        if (v18 >= v294)
                          goto LABEL_719;
                        v313 = (float32x2_t *)(v25 + 16 * v18);
                        *(float32x4_t *)v313->f32 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v25 + 16 * v19), 1.0 - v311), vmulq_n_f32(*(float32x4_t *)(v25 + 16 * v309), v311));
                        if (v251 >= v295)
                          goto LABEL_720;
                        *(_OWORD *)(v16 + 16 * v251) = *(_OWORD *)(v16 + 16 * v4);
                        if (v18 >= v295)
                          goto LABEL_721;
                        *(_OWORD *)(v16 + 16 * v18) = *(_OWORD *)(v16 + 16 * v19);
                        if (v251 >= v285)
                          goto LABEL_722;
                        *(_OWORD *)(v17 + 16 * v251) = *(_OWORD *)(v17 + 16 * v4);
                        if (v18 >= v285)
                          goto LABEL_723;
                        *(_OWORD *)(v17 + 16 * v18) = *(_OWORD *)(v17 + 16 * v19);
                        v11 = v627;
                        if (v629)
                        {
                          if (v287 <= v251)
                            goto LABEL_732;
                          v314 = vsub_f32(*v312, v289);
                          v315 = vsub_f32(v291, *v312);
                          v316 = vbsl_s8((int8x8_t)vcgt_f32(v314, v315), (int8x8_t)v315, (int8x8_t)v314);
                          if (*(float *)v316.i32 > *(float *)&v316.i32[1])
                            v316.i32[0] = v316.i32[1];
                          *(float *)(v288 + 4 * v251) = v290 + *(float *)v316.i32;
                          if (v287 <= v18)
                            goto LABEL_733;
                          v317 = vsub_f32(*v313, v293);
                          v318 = vsub_f32(v292, *v313);
                          v319 = vbsl_s8((int8x8_t)vcgt_f32(v317, v318), (int8x8_t)v318, (int8x8_t)v317);
                          if (*(float *)v319.i32 > *(float *)&v319.i32[1])
                            v319.i32[0] = v319.i32[1];
                          *(float *)(v288 + 4 * v18) = v290 + *(float *)v319.i32;
                        }
                        if (v305 == ++v310)
                          goto LABEL_395;
                      }
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 797;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v18;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v11;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_717:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      v251 = MEMORY[0x24BDACB70];
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 797;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v18;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v11;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_718:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      v571 = v294;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v251;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v571;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_719:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      v251 = MEMORY[0x24BDACB70];
                      v572 = v294;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v18;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v572;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_720:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      v573 = v295;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v251;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v573;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_721:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      v251 = v295;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v18;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v251;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_722:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      v4 = MEMORY[0x24BDACB70];
                      v574 = v285;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v251;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v574;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_723:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      v251 = MEMORY[0x24BDACB70];
                      v575 = v285;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v18;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v575;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_724:
                      v665[0] = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v4;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v251;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_725:
                      v665[0] = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v4;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v251;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_726:
                      v665[0] = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v4;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v251;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_727:
                      v665[0] = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v4;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v251;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_728:
                      v665[0] = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v4;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v251;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_729:
                      v665[0] = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v4;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v251;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_730:
                      v665[0] = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v4;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v251;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_731:
                      v665[0] = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v4;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v251;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_732:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      LODWORD(v4) = v287;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v251;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v4;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_733:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      v3 = v287;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v18;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v3;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_734:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      LODWORD(v196) = MEMORY[0x24BDACB70];
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v13;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v3;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_735:
                      v665[0] = 0;
                      v700 = 0u;
                      v699 = 0u;
                      memset(v698, 0, sizeof(v698));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_QWORD *)&v701[4] = "operator[]";
                      *(_WORD *)&v701[12] = 1024;
                      *(_DWORD *)&v701[14] = 609;
                      *(_DWORD *)v701 = 136315906;
                      *(_WORD *)&v701[18] = 2048;
                      *(_QWORD *)&v701[20] = (5 * v196 + v4 + 14);
                      *(_WORD *)&v701[28] = 2048;
                      *(_QWORD *)&v701[30] = v13;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_736:
                      v665[0] = 0;
                      v700 = 0u;
                      v699 = 0u;
                      memset(v698, 0, sizeof(v698));
                      v261 = v224;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v701 = 136315906;
                      *(_QWORD *)&v701[4] = "operator[]";
                      *(_WORD *)&v701[12] = 1024;
                      *(_DWORD *)&v701[14] = 609;
                      *(_WORD *)&v701[18] = 2048;
                      *(_QWORD *)&v701[20] = v18;
                      *(_WORD *)&v701[28] = 2048;
                      *(_QWORD *)&v701[30] = v261;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_737:
                      v665[0] = 0;
                      v700 = 0u;
                      v699 = 0u;
                      memset(v698, 0, sizeof(v698));
                      v196 = MEMORY[0x24BDACB70];
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v701 = 136315906;
                      *(_QWORD *)&v701[4] = "operator[]";
                      *(_WORD *)&v701[12] = 1024;
                      *(_DWORD *)&v701[14] = 609;
                      *(_WORD *)&v701[18] = 2048;
                      *(_QWORD *)&v701[20] = v18;
                      *(_WORD *)&v701[28] = 2048;
                      *(_QWORD *)&v701[30] = v16;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_738:
                      v665[0] = 0;
                      v700 = 0u;
                      v699 = 0u;
                      memset(v698, 0, sizeof(v698));
                      v19 = v196;
                      LODWORD(v196) = MEMORY[0x24BDACB70];
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v701 = 136315906;
                      *(_QWORD *)&v701[4] = "operator[]";
                      *(_WORD *)&v701[12] = 1024;
                      *(_DWORD *)&v701[14] = 609;
                      *(_WORD *)&v701[18] = 2048;
                      *(_QWORD *)&v701[20] = 6 * (_DWORD)v19 - v261 + v4 + 17;
                      *(_WORD *)&v701[28] = 2048;
                      *(_QWORD *)&v701[30] = v13;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_739:
                      v665[0] = 0;
                      v700 = 0u;
                      v699 = 0u;
                      memset(v698, 0, sizeof(v698));
                      v261 = v196;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_QWORD *)&v701[4] = "operator[]";
                      *(_WORD *)&v701[12] = 1024;
                      *(_DWORD *)&v701[14] = 609;
                      *(_DWORD *)v701 = 136315906;
                      *(_WORD *)&v701[18] = 2048;
                      *(_QWORD *)&v701[20] = (_DWORD)v4 - v261 + 8 * v261 + 20;
                      *(_WORD *)&v701[28] = 2048;
                      *(_QWORD *)&v701[30] = v13;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_740:
                      v665[0] = 0;
                      v700 = 0u;
                      v699 = 0u;
                      memset(v698, 0, sizeof(v698));
                      v273 = MEMORY[0x24BDACB70];
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v701 = 136315906;
                      *(_QWORD *)&v701[4] = "operator[]";
                      *(_WORD *)&v701[12] = 1024;
                      *(_DWORD *)&v701[14] = 609;
                      *(_WORD *)&v701[18] = 2048;
                      *(_QWORD *)&v701[20] = v4 - v261 + 8 * (_DWORD)v633 + 23;
                      *(_WORD *)&v701[28] = 2048;
                      *(_QWORD *)&v701[30] = v13;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_741:
                      v665[0] = 0;
                      v700 = 0u;
                      v699 = 0u;
                      memset(v698, 0, sizeof(v698));
                      v576 = v224;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v701 = 136315906;
                      *(_QWORD *)&v701[4] = "operator[]";
                      *(_WORD *)&v701[12] = 1024;
                      *(_DWORD *)&v701[14] = 609;
                      *(_WORD *)&v701[18] = 2048;
                      *(_QWORD *)&v701[20] = v273;
                      *(_WORD *)&v701[28] = 2048;
                      *(_QWORD *)&v701[30] = v576;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_742:
                      v665[0] = 0;
                      v700 = 0u;
                      v699 = 0u;
                      memset(v698, 0, sizeof(v698));
                      v276 = v224;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v701 = 136315906;
                      *(_QWORD *)&v701[4] = "operator[]";
                      *(_WORD *)&v701[12] = 1024;
                      *(_DWORD *)&v701[14] = 609;
                      *(_WORD *)&v701[18] = 2048;
                      *(_QWORD *)&v701[20] = v13;
                      *(_WORD *)&v701[28] = 2048;
                      *(_QWORD *)&v701[30] = v276;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_743:
                      v665[0] = 0;
                      v700 = 0u;
                      v699 = 0u;
                      memset(v698, 0, sizeof(v698));
                      v273 = MEMORY[0x24BDACB70];
                      v4 = v224;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v701 = 136315906;
                      *(_QWORD *)&v701[4] = "operator[]";
                      *(_WORD *)&v701[12] = 1024;
                      *(_DWORD *)&v701[14] = 609;
                      *(_WORD *)&v701[18] = 2048;
                      *(_QWORD *)&v701[20] = v276;
                      *(_WORD *)&v701[28] = 2048;
                      *(_QWORD *)&v701[30] = v4;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_744:
                      v665[0] = 0;
                      v700 = 0u;
                      v699 = 0u;
                      memset(v698, 0, sizeof(v698));
                      v276 = MEMORY[0x24BDACB70];
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v701 = 136315906;
                      *(_QWORD *)&v701[4] = "operator[]";
                      *(_WORD *)&v701[12] = 1024;
                      *(_DWORD *)&v701[14] = 609;
                      *(_WORD *)&v701[18] = 2048;
                      *(_QWORD *)&v701[20] = v273;
                      *(_WORD *)&v701[28] = 2048;
                      *(_QWORD *)&v701[30] = v16;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_745:
                      v665[0] = 0;
                      v700 = 0u;
                      v699 = 0u;
                      memset(v698, 0, sizeof(v698));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v701 = 136315906;
                      *(_QWORD *)&v701[4] = "operator[]";
                      *(_WORD *)&v701[12] = 1024;
                      *(_DWORD *)&v701[14] = 609;
                      *(_WORD *)&v701[18] = 2048;
                      *(_QWORD *)&v701[20] = v13;
                      *(_WORD *)&v701[28] = 2048;
                      *(_QWORD *)&v701[30] = v16;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_746:
                      v665[0] = 0;
                      v700 = 0u;
                      v699 = 0u;
                      memset(v698, 0, sizeof(v698));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v701 = 136315906;
                      *(_QWORD *)&v701[4] = "operator[]";
                      *(_WORD *)&v701[12] = 1024;
                      *(_DWORD *)&v701[14] = 609;
                      *(_WORD *)&v701[18] = 2048;
                      *(_QWORD *)&v701[20] = v276;
                      *(_WORD *)&v701[28] = 2048;
                      *(_QWORD *)&v701[30] = v16;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                      goto LABEL_747;
                    }
                  }
LABEL_396:
                  v3 = re::GeomMesh::modifyVertexPositions(a1);
                  v628 = v320;
                  v19 = v321;
                  v324 = v322;
                  v632 = v325;
                  v326 = 0;
                  v327 = a2;
                  v328 = *((float *)a2 + 6);
                  if (*((float *)a2 + 5) == 0.0)
                  {
                    v25 = v624;
                    v4 = (unint64_t)v629;
                    if (v328 == 0.0)
                      v326 = *((float *)a2 + 7) == 0.0;
                  }
                  else
                  {
                    v25 = v624;
                    v4 = (unint64_t)v629;
                  }
                  v329 = v646;
                  if (v4)
                  {
                    v17 = v646;
                    v16 = v322;
                    v330 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v4 + 16))(v4);
                    if (v330)
                    {
                      v18 = re::internal::GeomTypedAttribute<float>::operator[](v4, 0);
                      v330 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v4 + 16))(v4);
                      v331 = v18;
                    }
                    else
                    {
                      v331 = 0;
                    }
                    v327 = a2;
                    v324 = v16;
                    v329 = v17;
                  }
                  else
                  {
                    v331 = 0;
                    v330 = -1;
                  }
                  v332 = v628;
                  if (!v646)
                    goto LABEL_824;
                  v4 = *v648;
                  v333 = v629;
                  if (v4 >= v628)
                  {
LABEL_825:
                    *(_QWORD *)v701 = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    v590 = v332;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v698[0]) = 136315906;
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 609;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = v4;
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v590;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                  }
                  else if (v642)
                  {
                    v334 = v19;
                    v19 = *v644;
                    if (v19 < v628)
                    {
                      v335 = v13;
                      v336 = 1.0 / (float)v25;
                      v337 = *(float *)(v3 + 16 * v4 + 8);
                      v338 = *(float *)(v3 + 16 * v19 + 8);
                      if (v326)
                      {
                        if (v329)
                        {
                          v339 = 0;
                          v340 = *((_DWORD *)v327 + 14);
                          v341 = *((_DWORD *)v327 + 11);
                          v342 = *((_DWORD *)v327 + 12) + v340 - 1;
                          v343 = v340 - 1 + v341;
                          v344 = (v341 + v340);
                          v345 = (v342 + v344);
                          v4 = v628;
                          v16 = v334;
                          v17 = v632;
                          v18 = v330;
                          v323.i64[0] = (v343 + v345);
                          v346 = v610;
                          while (1)
                          {
                            v19 = v646;
                            if (v646 <= v339)
                              goto LABEL_790;
                            v347 = v648[v339];
                            if (v347 >= v628)
                              goto LABEL_791;
                            v19 = v642;
                            if (v642 <= v339)
                              goto LABEL_792;
                            v19 = v644[v339];
                            if (v19 >= v628)
                              goto LABEL_793;
                            v348 = (uint64x2_t)xmmword_2261027D0;
                            v349 = (int8x16_t)xmmword_2260E5F20;
                            if (v339 >= v344)
                            {
                              v348 = (uint64x2_t)xmmword_2261027B0;
                              v349 = (int8x16_t)xmmword_2261027D0;
                              if (v339 >= v345)
                              {
                                v348.i64[0] = v339;
                                v350 = (int8x16_t)vdupq_lane_s64(vcgtq_u64(v323, v348).i64[0], 0);
                                v348 = (uint64x2_t)vbslq_s8(v350, (int8x16_t)xmmword_2260E5F10, (int8x16_t)xmmword_2260E5F20);
                                v349 = vbslq_s8(v350, (int8x16_t)xmmword_2261027B0, (int8x16_t)xmmword_2260E5F10);
                              }
                            }
                            v25 = v346;
                            if ((_DWORD)v11)
                              break;
LABEL_431:
                            ++v339;
                            v346 = v25 + v11;
                            if (v339 == v329)
                              goto LABEL_457;
                          }
                          v13 = 0;
                          v351 = v331 + 4 * v346;
                          v352 = v324 + 16 * v346;
                          v353 = v335 + 16 * v346;
                          v354 = 8;
                          v355 = v3 + 16 * v346;
                          while (1)
                          {
                            v356 = v25 + v13;
                            if (v25 + v13 >= v628)
                              break;
                            *(float32x4_t *)(v355 + 16 * v13) = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v3 + 16 * v347), 1.0 - (float)(v336 * (float)v13)), vmulq_n_f32(*(float32x4_t *)(v3 + 16 * v19), v336 * (float)v13));
                            if (v356 >= v334)
                              goto LABEL_683;
                            *(uint64x2_t *)(v353 + 16 * v13) = v348;
                            if (v356 >= v632)
                              goto LABEL_684;
                            *(int8x16_t *)(v352 + 16 * v13) = v349;
                            if (v629)
                            {
                              if (v356 >= v330)
                                goto LABEL_700;
                              v357 = *(float *)(v355 + v354);
                              v358 = v337 - v357;
                              v359 = v357 - v338;
                              if (v358 <= v359)
                                v359 = v358;
                              *(float *)(v351 + 4 * v13) = v359;
                            }
                            ++v13;
                            v354 += 16;
                            if (v11 == v13)
                              goto LABEL_431;
                          }
                          *(_QWORD *)v701 = 0;
                          v674 = 0u;
                          v675 = 0u;
                          memset(v673, 0, sizeof(v673));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_QWORD *)((char *)v698 + 4) = "operator[]";
                          WORD6(v698[0]) = 1024;
                          *(_DWORD *)((char *)v698 + 14) = 609;
                          LODWORD(v698[0]) = 136315906;
                          WORD1(v698[1]) = 2048;
                          *(_QWORD *)((char *)&v698[1] + 4) = (v25 + v13);
                          WORD6(v698[1]) = 2048;
                          *(_QWORD *)((char *)&v698[1] + 14) = v628;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_683:
                          *(_QWORD *)v701 = 0;
                          v674 = 0u;
                          v675 = 0u;
                          memset(v673, 0, sizeof(v673));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          LODWORD(v698[0]) = 136315906;
                          *(_QWORD *)((char *)v698 + 4) = "operator[]";
                          WORD6(v698[0]) = 1024;
                          *(_DWORD *)((char *)v698 + 14) = 609;
                          WORD1(v698[1]) = 2048;
                          *(_QWORD *)((char *)&v698[1] + 4) = v25 + v13;
                          WORD6(v698[1]) = 2048;
                          *(_QWORD *)((char *)&v698[1] + 14) = v334;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_684:
                          *(_QWORD *)v701 = 0;
                          v674 = 0u;
                          v675 = 0u;
                          memset(v673, 0, sizeof(v673));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          LODWORD(v698[0]) = 136315906;
                          *(_QWORD *)((char *)v698 + 4) = "operator[]";
                          WORD6(v698[0]) = 1024;
                          *(_DWORD *)((char *)v698 + 14) = 609;
                          WORD1(v698[1]) = 2048;
                          *(_QWORD *)((char *)&v698[1] + 4) = v25 + v13;
                          WORD6(v698[1]) = 2048;
                          *(_QWORD *)((char *)&v698[1] + 14) = v632;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_685:
                          v665[0] = 0;
                          v700 = 0u;
                          v699 = 0u;
                          memset(v698, 0, sizeof(v698));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v701 = 136315906;
                          *(_QWORD *)&v701[4] = "operator[]";
                          *(_WORD *)&v701[12] = 1024;
                          *(_DWORD *)&v701[14] = 609;
                          *(_WORD *)&v701[18] = 2048;
                          *(_QWORD *)&v701[20] = (v16 * v595 + 4 * v633 + v18 + 12);
                          *(_WORD *)&v701[28] = 2048;
                          *(_QWORD *)&v701[30] = v600;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_686:
                          v665[0] = 0;
                          v700 = 0u;
                          v699 = 0u;
                          memset(v698, 0, sizeof(v698));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v701 = 136315906;
                          *(_QWORD *)&v701[4] = "operator[]";
                          *(_WORD *)&v701[12] = 1024;
                          *(_DWORD *)&v701[14] = 609;
                          *(_WORD *)&v701[18] = 2048;
                          *(_QWORD *)&v701[20] = v4;
                          *(_WORD *)&v701[28] = 2048;
                          *(_QWORD *)&v701[30] = v600;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_687:
                          v665[0] = 0;
                          v700 = 0u;
                          v699 = 0u;
                          memset(v698, 0, sizeof(v698));
                          v251 = MEMORY[0x24BDACB70];
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v701 = 136315906;
                          *(_QWORD *)&v701[4] = "operator[]";
                          *(_WORD *)&v701[12] = 1024;
                          *(_DWORD *)&v701[14] = 609;
                          *(_WORD *)&v701[18] = 2048;
                          *(_QWORD *)&v701[20] = (v16 * v595 + 6 * v633 + v18 + 18);
                          *(_WORD *)&v701[28] = 2048;
                          *(_QWORD *)&v701[30] = v600;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_688:
                          v665[0] = 0;
                          v700 = 0u;
                          v699 = 0u;
                          memset(v698, 0, sizeof(v698));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v701 = 136315906;
                          *(_QWORD *)&v701[4] = "operator[]";
                          *(_WORD *)&v701[12] = 1024;
                          *(_DWORD *)&v701[14] = 609;
                          *(_WORD *)&v701[18] = 2048;
                          *(_QWORD *)&v701[20] = v251;
                          *(_WORD *)&v701[28] = 2048;
                          *(_QWORD *)&v701[30] = v600;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_689:
                          v665[0] = 0;
                          v700 = 0u;
                          v699 = 0u;
                          memset(v698, 0, sizeof(v698));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v701 = 136315906;
                          *(_QWORD *)&v701[4] = "operator[]";
                          *(_WORD *)&v701[12] = 1024;
                          *(_DWORD *)&v701[14] = 609;
                          *(_WORD *)&v701[18] = 2048;
                          *(_QWORD *)&v701[20] = (v16 * v595 + 4 * v633 + 12) + v18;
                          *(_WORD *)&v701[28] = 2048;
                          *(_QWORD *)&v701[30] = v599;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_690:
                          v665[0] = 0;
                          v700 = 0u;
                          v699 = 0u;
                          memset(v698, 0, sizeof(v698));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v701 = 136315906;
                          *(_QWORD *)&v701[4] = "operator[]";
                          *(_WORD *)&v701[12] = 1024;
                          *(_DWORD *)&v701[14] = 609;
                          *(_WORD *)&v701[18] = 2048;
                          *(_QWORD *)&v701[20] = v4;
                          *(_WORD *)&v701[28] = 2048;
                          *(_QWORD *)&v701[30] = v599;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_691:
                          v665[0] = 0;
                          v700 = 0u;
                          v699 = 0u;
                          memset(v698, 0, sizeof(v698));
                          v251 = MEMORY[0x24BDACB70];
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v701 = 136315906;
                          *(_QWORD *)&v701[4] = "operator[]";
                          *(_WORD *)&v701[12] = 1024;
                          *(_DWORD *)&v701[14] = 609;
                          *(_WORD *)&v701[18] = 2048;
                          *(_QWORD *)&v701[20] = (v16 * v595 + 6 * v633 + 18) + v18;
                          *(_WORD *)&v701[28] = 2048;
                          *(_QWORD *)&v701[30] = v599;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_692:
                          v665[0] = 0;
                          v700 = 0u;
                          v699 = 0u;
                          memset(v698, 0, sizeof(v698));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v701 = 136315906;
                          *(_QWORD *)&v701[4] = "operator[]";
                          *(_WORD *)&v701[12] = 1024;
                          *(_DWORD *)&v701[14] = 609;
                          *(_WORD *)&v701[18] = 2048;
                          *(_QWORD *)&v701[20] = v251;
                          *(_WORD *)&v701[28] = 2048;
                          *(_QWORD *)&v701[30] = v599;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_693:
                          v665[0] = 0;
                          v700 = 0u;
                          v699 = 0u;
                          memset(v698, 0, sizeof(v698));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v701 = 136315906;
                          *(_QWORD *)&v701[4] = "operator[]";
                          *(_WORD *)&v701[12] = 1024;
                          *(_DWORD *)&v701[14] = 609;
                          *(_WORD *)&v701[18] = 2048;
                          *(_QWORD *)&v701[20] = (v16 * v595 + 4 * v633 + 12) + v18;
                          *(_WORD *)&v701[28] = 2048;
                          *(_QWORD *)&v701[30] = v598;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_694:
                          v665[0] = 0;
                          v700 = 0u;
                          v699 = 0u;
                          memset(v698, 0, sizeof(v698));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v701 = 136315906;
                          *(_QWORD *)&v701[4] = "operator[]";
                          *(_WORD *)&v701[12] = 1024;
                          *(_DWORD *)&v701[14] = 609;
                          *(_WORD *)&v701[18] = 2048;
                          *(_QWORD *)&v701[20] = v4;
                          *(_WORD *)&v701[28] = 2048;
                          *(_QWORD *)&v701[30] = v598;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_695:
                          v665[0] = 0;
                          v700 = 0u;
                          v699 = 0u;
                          memset(v698, 0, sizeof(v698));
                          v251 = MEMORY[0x24BDACB70];
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v701 = 136315906;
                          *(_QWORD *)&v701[4] = "operator[]";
                          *(_WORD *)&v701[12] = 1024;
                          *(_DWORD *)&v701[14] = 609;
                          *(_WORD *)&v701[18] = 2048;
                          *(_QWORD *)&v701[20] = (v16 * v595 + 6 * v633 + 18) + v18;
                          *(_WORD *)&v701[28] = 2048;
                          *(_QWORD *)&v701[30] = v598;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_696:
                          v665[0] = 0;
                          v700 = 0u;
                          v699 = 0u;
                          memset(v698, 0, sizeof(v698));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v701 = 136315906;
                          *(_QWORD *)&v701[4] = "operator[]";
                          *(_WORD *)&v701[12] = 1024;
                          *(_DWORD *)&v701[14] = 609;
                          *(_WORD *)&v701[18] = 2048;
                          *(_QWORD *)&v701[20] = v251;
                          *(_WORD *)&v701[28] = 2048;
                          *(_QWORD *)&v701[30] = v598;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
                          goto LABEL_697;
                        }
                      }
                      else if (v329)
                      {
                        v4 = v628;
                        v19 = v334;
                        v13 = v632;
                        v360 = v610;
                        v18 = v330;
                        v361 = 0;
                        while (1)
                        {
                          v25 = v646;
                          if (v646 <= v361)
                            goto LABEL_794;
                          v16 = v648[v361];
                          if (v16 >= v628)
                            goto LABEL_795;
                          v25 = v642;
                          if (v642 <= v361)
                            goto LABEL_796;
                          v17 = v644[v361];
                          if (v17 >= v628)
                            goto LABEL_797;
                          if (v16 >= v334)
                            goto LABEL_798;
                          v362 = (float32x4_t *)(v335 + 16 * v16);
                          if (v328 == 0.0)
                          {
                            if (v16 >= v632)
                              goto LABEL_813;
                            v363 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v324 + 16 * v16), *(int32x4_t *)(v324 + 16 * v16)), *(int8x16_t *)(v324 + 16 * v16), 0xCuLL), vnegq_f32(*v362)), *(float32x4_t *)(v324 + 16 * v16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v362, *(int32x4_t *)v362), *(int8x16_t *)v362, 0xCuLL));
                            v364 = (int32x4_t)vmulq_f32(v363, v363);
                            v364.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v364.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v364, 2), *(float32x2_t *)v364.i8)).u32[0];
                            v365 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v363, (int32x4_t)v363), (int8x16_t)v363, 0xCuLL);
                            *(float32x2_t *)v363.f32 = vrsqrte_f32((float32x2_t)v364.u32[0]);
                            *(float32x2_t *)v363.f32 = vmul_f32(*(float32x2_t *)v363.f32, vrsqrts_f32((float32x2_t)v364.u32[0], vmul_f32(*(float32x2_t *)v363.f32, *(float32x2_t *)v363.f32)));
                            v366 = vmulq_n_f32(v365, vmul_f32(*(float32x2_t *)v363.f32, vrsqrts_f32((float32x2_t)v364.u32[0], vmul_f32(*(float32x2_t *)v363.f32, *(float32x2_t *)v363.f32))).f32[0]);
                            v367 = v366.i64[1];
                            v368 = v366.i64[0];
                          }
                          else
                          {
                            if (v16 >= v632)
                              goto LABEL_814;
                            v368 = *(_QWORD *)(v324 + 16 * v16);
                            v367 = *(_QWORD *)(v324 + 16 * v16 + 8);
                          }
                          v25 = v360;
                          if ((_DWORD)v11)
                            break;
LABEL_456:
                          ++v361;
                          v360 = v25 + v11;
                          if (v361 == v329)
                            goto LABEL_457;
                        }
                        v369 = 0;
                        v251 = 0;
                        v370 = v331 + 4 * v360;
                        v371 = v324 + 16 * v360;
                        v372 = v335 + 16 * v360;
                        v373 = v3 + 16 * v360;
                        while (1)
                        {
                          v374 = v25 + v251;
                          if (v25 + v251 >= v628)
                            break;
                          *(float32x4_t *)(v373 + 16 * v251) = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v3 + 16 * v16), 1.0 - (float)(v336 * (float)v251)), vmulq_n_f32(*(float32x4_t *)(v3 + 16 * v17), v336 * (float)v251));
                          if (v374 >= v334)
                            goto LABEL_698;
                          *(float32x4_t *)(v372 + v369) = *v362;
                          if (v374 >= v632)
                            goto LABEL_699;
                          v375 = (uint64_t *)(v371 + 16 * v251);
                          *v375 = v368;
                          v375[1] = v367;
                          if (v629)
                          {
                            if (v374 >= v18)
                              goto LABEL_705;
                            v376 = *(float *)(v373 + v369 + 8);
                            v377 = v337 - v376;
                            v378 = v376 - v338;
                            if (v377 <= v378)
                              v378 = v377;
                            *(float *)(v370 + 4 * v251) = v378;
                          }
                          ++v251;
                          v369 += 16;
                          if (v11 == v251)
                            goto LABEL_456;
                        }
LABEL_697:
                        *(_QWORD *)v701 = 0;
                        v674 = 0u;
                        v675 = 0u;
                        memset(v673, 0, sizeof(v673));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_QWORD *)((char *)v698 + 4) = "operator[]";
                        WORD6(v698[0]) = 1024;
                        *(_DWORD *)((char *)v698 + 14) = 609;
                        LODWORD(v698[0]) = 136315906;
                        WORD1(v698[1]) = 2048;
                        *(_QWORD *)((char *)&v698[1] + 4) = (v25 + v251);
                        WORD6(v698[1]) = 2048;
                        *(_QWORD *)((char *)&v698[1] + 14) = v4;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_698:
                        *(_QWORD *)v701 = 0;
                        v674 = 0u;
                        v675 = 0u;
                        memset(v673, 0, sizeof(v673));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        LODWORD(v698[0]) = 136315906;
                        *(_QWORD *)((char *)v698 + 4) = "operator[]";
                        WORD6(v698[0]) = 1024;
                        *(_DWORD *)((char *)v698 + 14) = 609;
                        WORD1(v698[1]) = 2048;
                        *(_QWORD *)((char *)&v698[1] + 4) = v25 + v251;
                        WORD6(v698[1]) = 2048;
                        *(_QWORD *)((char *)&v698[1] + 14) = v19;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_699:
                        *(_QWORD *)v701 = 0;
                        v674 = 0u;
                        v675 = 0u;
                        memset(v673, 0, sizeof(v673));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        LODWORD(v698[0]) = 136315906;
                        *(_QWORD *)((char *)v698 + 4) = "operator[]";
                        WORD6(v698[0]) = 1024;
                        *(_DWORD *)((char *)v698 + 14) = 609;
                        WORD1(v698[1]) = 2048;
                        *(_QWORD *)((char *)&v698[1] + 4) = v25 + v251;
                        WORD6(v698[1]) = 2048;
                        *(_QWORD *)((char *)&v698[1] + 14) = v13;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_700:
                        *(_QWORD *)v701 = 0;
                        v674 = 0u;
                        v675 = 0u;
                        memset(v673, 0, sizeof(v673));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        LODWORD(v698[0]) = 136315906;
                        *(_QWORD *)((char *)v698 + 4) = "operator[]";
                        WORD6(v698[0]) = 1024;
                        *(_DWORD *)((char *)v698 + 14) = 609;
                        WORD1(v698[1]) = 2048;
                        *(_QWORD *)((char *)&v698[1] + 4) = v25 + v13;
                        WORD6(v698[1]) = 2048;
                        *(_QWORD *)((char *)&v698[1] + 14) = v18;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_701:
                        v665[0] = 0;
                        v700 = 0u;
                        v699 = 0u;
                        memset(v698, 0, sizeof(v698));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v701 = 136315906;
                        *(_QWORD *)&v701[4] = "operator[]";
                        *(_WORD *)&v701[12] = 1024;
                        *(_DWORD *)&v701[14] = 609;
                        *(_WORD *)&v701[18] = 2048;
                        *(_QWORD *)&v701[20] = (v16 * v595 + 4 * v633 + 12) + v18;
                        *(_WORD *)&v701[28] = 2048;
                        *(_QWORD *)&v701[30] = v632;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_702:
                        v665[0] = 0;
                        v700 = 0u;
                        v699 = 0u;
                        memset(v698, 0, sizeof(v698));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v701 = 136315906;
                        *(_QWORD *)&v701[4] = "operator[]";
                        *(_WORD *)&v701[12] = 1024;
                        *(_DWORD *)&v701[14] = 609;
                        *(_WORD *)&v701[18] = 2048;
                        *(_QWORD *)&v701[20] = v4;
                        *(_WORD *)&v701[28] = 2048;
                        *(_QWORD *)&v701[30] = v632;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_703:
                        v665[0] = 0;
                        v700 = 0u;
                        v699 = 0u;
                        memset(v698, 0, sizeof(v698));
                        v251 = MEMORY[0x24BDACB70];
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v701 = 136315906;
                        *(_QWORD *)&v701[4] = "operator[]";
                        *(_WORD *)&v701[12] = 1024;
                        *(_DWORD *)&v701[14] = 609;
                        *(_WORD *)&v701[18] = 2048;
                        *(_QWORD *)&v701[20] = (v16 * v595 + 6 * v633 + 18) + v18;
                        *(_WORD *)&v701[28] = 2048;
                        *(_QWORD *)&v701[30] = v632;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_704:
                        v665[0] = 0;
                        v700 = 0u;
                        v699 = 0u;
                        memset(v698, 0, sizeof(v698));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v701 = 136315906;
                        *(_QWORD *)&v701[4] = "operator[]";
                        *(_WORD *)&v701[12] = 1024;
                        *(_DWORD *)&v701[14] = 609;
                        *(_WORD *)&v701[18] = 2048;
                        *(_QWORD *)&v701[20] = v251;
                        *(_WORD *)&v701[28] = 2048;
                        *(_QWORD *)&v701[30] = v632;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_705:
                        *(_QWORD *)v701 = 0;
                        v674 = 0u;
                        v675 = 0u;
                        memset(v673, 0, sizeof(v673));
                        v530 = MEMORY[0x24BDACB70];
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        LODWORD(v698[0]) = 136315906;
                        *(_QWORD *)((char *)v698 + 4) = "operator[]";
                        WORD6(v698[0]) = 1024;
                        *(_DWORD *)((char *)v698 + 14) = 609;
                        WORD1(v698[1]) = 2048;
                        *(_QWORD *)((char *)&v698[1] + 4) = v25 + v251;
                        WORD6(v698[1]) = 2048;
                        *(_QWORD *)((char *)&v698[1] + 14) = v18;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_706:
                        if (v13 >= v251)
                          goto LABEL_868;
                        v19 = v537 + v13;
                        if (v19 >= v251)
                          goto LABEL_869;
                        v4 = v19 + v537;
                        if (v4 >= v251)
                          goto LABEL_870;
                        v555 = (float *)(v530 + 8 * v19);
                        v556 = *(float *)(v530 + 8 * v13) - *v555;
                        v557 = v555[1] - *(float *)(v530 + 8 * v4 + 4);
                        v666 = (float)(*(float *)&v533 * (float)(v556 / *((float *)v327 + 8))) / (float)v535;
                        v558 = v556 + 0.0;
                        v559 = (float)(v556 + 0.0) + v557;
                        v560 = v556 + v559;
                        *(_QWORD *)&v698[0] = &v668;
                        *((_QWORD *)&v698[0] + 1) = &v667;
                        *(_QWORD *)&v698[1] = &v669;
                        *((_QWORD *)&v698[1] + 1) = &v671;
                        *(_QWORD *)&v698[2] = &v666;
                        v665[0] = (int *)&v667;
                        v665[1] = (int *)&v669;
                        v640 = v557 + (float)(v556 + v559);
                        v665[2] = (int *)&v671;
                        v665[3] = (int *)&v666;
                        v561 = v327;
                        if (v667 != -1)
                        {
                          v562 = 0;
                          v3 = v671;
                          v563 = v666;
                          v564 = v667 + 1;
                          do
                          {
                            v4 = v670;
                            if (v3 >= v670)
                              goto LABEL_842;
                            *(float *)&v565 = v563 * (float)v562;
                            *((float *)&v565 + 1) = v640;
                            *(_QWORD *)(v669 + 8 * v3++) = v565;
                            v671 = v3;
                          }
                          while (v564 != (_DWORD)++v562);
                        }
                        v327 = a2;
                        goto LABEL_714;
                      }
LABEL_457:
                      if (!(*v327 | v327[3]))
                        goto LABEL_458;
                      v380 = *((float *)v327 + 6);
                      v3 = re::modifyVertexUVs(a1, v629);
                      LODWORD(v251) = v381;
                      v382 = re::GeomMesh::accessVertexPositions(a1);
                      if (v6 != 0.0)
                      {
                        v13 = (unint64_t)v383;
                        v462 = v618;
                        v11 = *(_QWORD *)v612;
                        if (v6 <= v380)
                          goto LABEL_621;
                        v4 = v633;
                        v384 = a2;
                        if (v633 >= v251)
                          goto LABEL_857;
                        *(_QWORD *)(v3 + 8 * v633) = 0;
                        if ((_DWORD)v618)
                        {
                          v463 = 0.0;
                          v464 = v618;
                          v465 = v603;
                          v19 = v633;
                          while (v19 < v383)
                          {
                            v466 = v465;
                            v4 = v465;
                            if (v465 >= v383)
                              goto LABEL_819;
                            if (v465 >= v251)
                              goto LABEL_820;
                            v467 = vsubq_f32(*(float32x4_t *)(v382 + 16 * v19), *(float32x4_t *)(v382 + 16 * v465));
                            v468 = vmulq_f32(v467, v467);
                            v463 = v463
                                 + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v468, 2), vaddq_f32(v468, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v468.f32, 1))).f32[0]);
                            *(_QWORD *)(v3 + 8 * v465) = LODWORD(v463);
                            v465 = (v465 - v639);
                            v19 = v466;
                            if (!--v464)
                              goto LABEL_537;
                          }
                          goto LABEL_818;
                        }
LABEL_537:
                        v4 = v603;
                        if (v383 <= v603)
                          goto LABEL_858;
                        if (v633 >= v383)
                          goto LABEL_859;
                        if (v630 < 2)
                        {
LABEL_549:
                          v13 = v635;
                          v385 = v601;
                          if ((_DWORD)v618)
                          {
                            v4 = 0;
                            v486 = v618;
                            while (1)
                            {
                              v19 = (v603 + v4);
                              if (v19 >= v251)
                                goto LABEL_830;
                              if ((int)v601 + (int)v4 >= v251)
                                goto LABEL_831;
                              LODWORD(v487) = 0;
                              HIDWORD(v487) = *(_DWORD *)(v3 + 8 * v19);
                              *(_QWORD *)(v3 + 8 * (v601 + v4)) = v487;
                              v4 = (v4 - v639);
                              if (!--v486)
                                goto LABEL_484;
                            }
                          }
                          goto LABEL_484;
                        }
                        v469 = vsubq_f32(*(float32x4_t *)(v382 + 16 * v603), *(float32x4_t *)(v382 + 16 * v633));
                        v470 = vmulq_f32(v469, v469);
                        v471 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v470, 2), vaddq_f32(v470, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v470.f32, 1))).f32[0]);
                        v472 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v469, (int32x4_t)v469), (int8x16_t)v469, 0xCuLL);
                        v473 = vnegq_f32(v469);
                        v474 = 1;
                        while (1)
                        {
                          v475 = v4;
                          v4 += v474;
                          if (v474 == (_DWORD)v383 - (_DWORD)v603)
                            goto LABEL_841;
                          if ((_DWORD)v618)
                            break;
LABEL_548:
                          ++v474;
                          v4 = v475;
                          if (v474 == v630)
                            goto LABEL_549;
                        }
                        v476 = vsubq_f32(*(float32x4_t *)(v382 + 16 * v4), *(float32x4_t *)(v382 + 16 * v633));
                        v477 = vmulq_f32(v476, v476);
                        v478 = (int32x4_t)vmulq_f32(v469, v476);
                        v479 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v476, (int32x4_t)v476), (int8x16_t)v476, 0xCuLL), v473), v476, v472);
                        v480 = vmulq_f32(v479, v479);
                        v478.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v478, 2), vadd_f32(*(float32x2_t *)v478.i8, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v478.i8, 1))).u32[0];
                        v478.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v480.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v480, 2), v480)).f32[0]);
                        v481 = vmul_n_f32(*(float32x2_t *)v478.i8, 1.0/ (float)(v471* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v477, 2), vaddq_f32(v477, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v477.f32, 1))).f32[0])));
                        v482 = 0.0;
                        v483 = v618;
                        v25 = v633;
                        while (v25 < v383)
                        {
                          v19 = v4;
                          if (v4 >= v383)
                            goto LABEL_763;
                          v4 = v4;
                          if (v19 >= v251)
                            goto LABEL_764;
                          v484 = vsubq_f32(*(float32x4_t *)(v382 + 16 * v25), *(float32x4_t *)(v382 + 16 * v19));
                          v485 = vmulq_f32(v484, v484);
                          v482 = v482
                               + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v485, 2), vaddq_f32(v485, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v485.f32, 1))).f32[0]);
                          *(float32x2_t *)(v3 + 8 * v19) = vmul_n_f32(v481, v482);
                          v4 = (v19 - v639);
                          v25 = v19;
                          if (!--v483)
                            goto LABEL_548;
                        }
                        goto LABEL_762;
                      }
                      v384 = a2;
                      v13 = v635;
                      v385 = v601;
                      v11 = *(_QWORD *)v612;
                      if (!(_DWORD)v635)
                        goto LABEL_484;
                      v4 = v251;
                      v386 = v251;
                      v387 = v635;
                      v388 = (_QWORD *)v3;
                      while (v386)
                      {
                        *v388++ = 0;
                        --v386;
                        if (!--v387)
                          goto LABEL_484;
                      }
LABEL_799:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v4;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v4;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_800:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 797;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v3;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v19;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_801:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      v584 = v294;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v4;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v584;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_802:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 797;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v18;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v19;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_803:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      v585 = v294;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v13;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v585;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_804:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      v586 = v295;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v4;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v586;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_805:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      v308 = MEMORY[0x24BDACB70];
                      v3 = v285;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v4;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v3;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_806:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 797;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v3;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v308;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_807:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      v308 = MEMORY[0x24BDACB70];
                      v587 = v294;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v19;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v587;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_808:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      v309 = MEMORY[0x24BDACB70];
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 797;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v18;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v308;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_809:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      v4 = v294;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v309;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v4;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_810:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      v588 = v295;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v19;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v588;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_811:
                      *(_QWORD *)v701 = 0;
                      v674 = 0u;
                      v675 = 0u;
                      memset(v673, 0, sizeof(v673));
                      LODWORD(v251) = MEMORY[0x24BDACB70];
                      v589 = v285;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v698[0]) = 136315906;
                      *(_QWORD *)((char *)v698 + 4) = "operator[]";
                      WORD6(v698[0]) = 1024;
                      *(_DWORD *)((char *)v698 + 14) = 609;
                      WORD1(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 4) = v19;
                      WORD6(v698[1]) = 2048;
                      *(_QWORD *)((char *)&v698[1] + 14) = v589;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                      goto LABEL_812;
                    }
LABEL_827:
                    *(_QWORD *)v701 = 0;
                    v674 = 0u;
                    v675 = 0u;
                    memset(v673, 0, sizeof(v673));
                    LODWORD(v251) = v332;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v698[0]) = 136315906;
                    *(_QWORD *)((char *)v698 + 4) = "operator[]";
                    WORD6(v698[0]) = 1024;
                    *(_DWORD *)((char *)v698 + 14) = 609;
                    WORD1(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 4) = v19;
                    WORD6(v698[1]) = 2048;
                    *(_QWORD *)((char *)&v698[1] + 14) = v251;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_828;
                  }
                  *(_QWORD *)v701 = 0;
                  v674 = 0u;
                  v675 = 0u;
                  memset(v673, 0, sizeof(v673));
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  LODWORD(v698[0]) = 136315906;
                  *(_QWORD *)((char *)v698 + 4) = "operator[]";
                  WORD6(v698[0]) = 1024;
                  *(_DWORD *)((char *)v698 + 14) = 797;
                  WORD1(v698[1]) = 2048;
                  *(_QWORD *)((char *)&v698[1] + 4) = 0;
                  WORD6(v698[1]) = 2048;
                  *(_QWORD *)((char *)&v698[1] + 14) = 0;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                  goto LABEL_827;
                }
                v133 = v128 + v64;
                v4 = v642;
                v134 = v644;
                v135 = v636 - 1;
                v136 = v636 + v627 + v19 - 3;
                while (1)
                {
                  v25 = v136;
                  if (v4 <= v136)
                    break;
                  v134[v136] = v133;
                  v133 += v13;
                  ++v136;
                  if (!--v135)
                    goto LABEL_154;
                }
LABEL_658:
                *(_QWORD *)&v673[0] = 0;
                v688 = 0u;
                v689 = 0u;
                v686 = 0u;
                v687 = 0u;
                *(_OWORD *)__s = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                v679[0] = 136315906;
                *(_QWORD *)&v679[1] = "operator[]";
                LOWORD(v679[3]) = 1024;
                *(unsigned int *)((char *)&v679[3] + 2) = 789;
                HIWORD(v679[4]) = 2048;
                *(_QWORD *)&v679[5] = v25;
                LOWORD(v679[7]) = 2048;
                *(_QWORD *)((char *)&v679[7] + 2) = v4;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_659;
              }
              v4 = v642;
              v129 = v644;
              v130 = v638 - 1;
              v131 = v638 + v636 + 3 * v639 - 2;
              v132 = v105 + v620;
              while (1)
              {
                v25 = v131;
                if (v4 <= v131)
                  break;
                v129[v131] = v132;
                v132 += v13;
                ++v131;
                if (!--v130)
                  goto LABEL_150;
              }
LABEL_657:
              *(_QWORD *)&v673[0] = 0;
              v688 = 0u;
              v689 = 0u;
              v686 = 0u;
              v687 = 0u;
              *(_OWORD *)__s = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v679[0] = 136315906;
              *(_QWORD *)&v679[1] = "operator[]";
              LOWORD(v679[3]) = 1024;
              *(unsigned int *)((char *)&v679[3] + 2) = 789;
              HIWORD(v679[4]) = 2048;
              *(_QWORD *)&v679[5] = v25;
              LOWORD(v679[7]) = 2048;
              *(_QWORD *)((char *)&v679[7] + 2) = v4;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_658;
            }
            v4 = v642;
            v125 = v644;
            v126 = v636 - 1;
            v127 = v105;
            while (1)
            {
              v25 = v87;
              if (v4 <= v87)
                break;
              v125[v87] = v127;
              v127 += v13;
              ++v87;
              if (!--v126)
                goto LABEL_146;
            }
LABEL_656:
            *(_QWORD *)&v673[0] = 0;
            v688 = 0u;
            v689 = 0u;
            v686 = 0u;
            v687 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v679[0] = 136315906;
            *(_QWORD *)&v679[1] = "operator[]";
            LOWORD(v679[3]) = 1024;
            *(unsigned int *)((char *)&v679[3] + 2) = 789;
            HIWORD(v679[4]) = 2048;
            *(_QWORD *)&v679[5] = v25;
            LOWORD(v679[7]) = 2048;
            *(_QWORD *)((char *)&v679[7] + 2) = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_657;
          }
          v4 = v642;
          v122 = v644;
          v123 = v638 - 1;
          v124 = v639;
          while (1)
          {
            v25 = v124;
            if (v4 <= v124)
              break;
            v122[v124] = v104;
            v104 += v13;
            ++v124;
            if (!--v123)
              goto LABEL_142;
          }
LABEL_655:
          *(_QWORD *)&v673[0] = 0;
          v688 = 0u;
          v689 = 0u;
          v686 = 0u;
          v687 = 0u;
          *(_OWORD *)__s = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v679[0] = 136315906;
          *(_QWORD *)&v679[1] = "operator[]";
          LOWORD(v679[3]) = 1024;
          *(unsigned int *)((char *)&v679[3] + 2) = 789;
          HIWORD(v679[4]) = 2048;
          *(_QWORD *)&v679[5] = v25;
          LOWORD(v679[7]) = 2048;
          *(_QWORD *)((char *)&v679[7] + 2) = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_656;
        }
        v110 = v638 - 1;
        v111 = v103 + v618 * ((8 * v639) | 1) + 24;
        v112 = v17 + 1;
        while (1)
        {
          v4 = v112;
          if (v25 <= v112)
            break;
          v100[v112] = v111;
          v111 += v13;
          ++v112;
          if (!--v110)
            goto LABEL_124;
        }
LABEL_654:
        *(_QWORD *)&v673[0] = 0;
        v688 = 0u;
        v689 = 0u;
        v686 = 0u;
        v687 = 0u;
        *(_OWORD *)__s = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v679[0] = 136315906;
        *(_QWORD *)&v679[1] = "operator[]";
        LOWORD(v679[3]) = 1024;
        *(unsigned int *)((char *)&v679[3] + 2) = 789;
        HIWORD(v679[4]) = 2048;
        *(_QWORD *)&v679[5] = v4;
        LOWORD(v679[7]) = 2048;
        *(_QWORD *)((char *)&v679[7] + 2) = v25;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_655;
      }
      v106 = v65 + v618 + v105;
      v107 = v636 - 1;
      v108 = 1;
      v109 = v618 * ((8 * v639) | 1) + (3 * v636 + 4 * v638 - 7) * v13 + 24;
      while (1)
      {
        v4 = (v4 + v108);
        if (v25 <= v4)
          break;
        v100[v4] = v109;
        v4 = (v19 + v108);
        if (v25 <= v4)
          goto LABEL_653;
        v100[v4] = v106;
        v106 += ~(_DWORD)v618;
        v109 += v13;
        v108 += v637;
        --v107;
        v4 = v638;
        if (!v107)
          goto LABEL_119;
      }
    }
    else
    {
      v101 = 1;
      v102 = v618 * ((8 * v639) | 1) + (3 * v636 + 4 * v638 - 8) * v13 + 24;
      while (v25 != v101)
      {
        v100[v101++] = v102;
        v102 += v59;
        if (v638 == v101)
          goto LABEL_113;
      }
      *(_QWORD *)&v673[0] = 0;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v679[0] = 136315906;
      *(_QWORD *)&v679[1] = "operator[]";
      LOWORD(v679[3]) = 1024;
      *(unsigned int *)((char *)&v679[3] + 2) = 789;
      HIWORD(v679[4]) = 2048;
      *(_QWORD *)&v679[5] = v25;
      LOWORD(v679[7]) = 2048;
      *(_QWORD *)((char *)&v679[7] + 2) = v25;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_QWORD *)&v673[0] = 0;
    v688 = 0u;
    v689 = 0u;
    v686 = 0u;
    v687 = 0u;
    *(_OWORD *)__s = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v679[0] = 136315906;
    *(_QWORD *)&v679[1] = "operator[]";
    LOWORD(v679[3]) = 1024;
    *(unsigned int *)((char *)&v679[3] + 2) = 789;
    HIWORD(v679[4]) = 2048;
    *(_QWORD *)&v679[5] = v4;
    LOWORD(v679[7]) = 2048;
    *(_QWORD *)((char *)&v679[7] + 2) = v25;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_653:
    *(_QWORD *)&v673[0] = 0;
    v688 = 0u;
    v689 = 0u;
    v686 = 0u;
    v687 = 0u;
    *(_OWORD *)__s = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v679[0] = 136315906;
    *(_QWORD *)&v679[1] = "operator[]";
    LOWORD(v679[3]) = 1024;
    *(unsigned int *)((char *)&v679[3] + 2) = 789;
    HIWORD(v679[4]) = 2048;
    *(_QWORD *)&v679[5] = v4;
    LOWORD(v679[7]) = 2048;
    *(_QWORD *)((char *)&v679[7] + 2) = v25;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_654;
  }
  v56 = v54 + 1;
  v57 = v53 + 1;
  v58 = 1;
  while (v25 != v58)
  {
    *v57 = *(v57 - 1) + v11;
    if (v4 == v58)
      goto LABEL_608;
    *v56 = *(v56 - 1) + v11;
    ++v56;
    ++v58;
    ++v57;
    if (v618 == v58)
      goto LABEL_58;
  }
  *(_QWORD *)&v673[0] = 0;
  v688 = 0u;
  v689 = 0u;
  v686 = 0u;
  v687 = 0u;
  *(_OWORD *)__s = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v679[0] = 136315906;
  *(_QWORD *)&v679[1] = "operator[]";
  LOWORD(v679[3]) = 1024;
  *(unsigned int *)((char *)&v679[3] + 2) = 789;
  HIWORD(v679[4]) = 2048;
  *(_QWORD *)&v679[5] = v25;
  LOWORD(v679[7]) = 2048;
  *(_QWORD *)((char *)&v679[7] + 2) = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_608:
  *(_QWORD *)&v673[0] = 0;
  v688 = 0u;
  v689 = 0u;
  v686 = 0u;
  v687 = 0u;
  *(_OWORD *)__s = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v679[0] = 136315906;
  *(_QWORD *)&v679[1] = "operator[]";
  LOWORD(v679[3]) = 1024;
  *(unsigned int *)((char *)&v679[3] + 2) = 789;
  HIWORD(v679[4]) = 2048;
  *(_QWORD *)&v679[5] = v4;
  LOWORD(v679[7]) = 2048;
  *(_QWORD *)((char *)&v679[7] + 2) = v4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_609:
  *(_QWORD *)&v673[0] = 0;
  v688 = 0u;
  v689 = 0u;
  v686 = 0u;
  v687 = 0u;
  *(_OWORD *)__s = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v679[0] = 136315906;
  *(_QWORD *)&v679[1] = "operator[]";
  LOWORD(v679[3]) = 1024;
  *(unsigned int *)((char *)&v679[3] + 2) = 789;
  HIWORD(v679[4]) = 2048;
  *(_QWORD *)&v679[5] = v25;
  LOWORD(v679[7]) = 2048;
  *(_QWORD *)((char *)&v679[7] + 2) = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_610:
  *(_QWORD *)&v673[0] = 0;
  v688 = 0u;
  v689 = 0u;
  v686 = 0u;
  v687 = 0u;
  *(_OWORD *)__s = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v679[0] = 136315906;
  *(_QWORD *)&v679[1] = "operator[]";
  LOWORD(v679[3]) = 1024;
  *(unsigned int *)((char *)&v679[3] + 2) = 789;
  HIWORD(v679[4]) = 2048;
  *(_QWORD *)&v679[5] = v4;
  LOWORD(v679[7]) = 2048;
  *(_QWORD *)((char *)&v679[7] + 2) = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_611:
  *(_QWORD *)&v673[0] = 0;
  v688 = 0u;
  v689 = 0u;
  v686 = 0u;
  v687 = 0u;
  *(_OWORD *)__s = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v679[0] = 136315906;
  *(_QWORD *)&v679[1] = "operator[]";
  LOWORD(v679[3]) = 1024;
  *(unsigned int *)((char *)&v679[3] + 2) = 789;
  HIWORD(v679[4]) = 2048;
  *(_QWORD *)&v679[5] = v4;
  LOWORD(v679[7]) = 2048;
  *(_QWORD *)((char *)&v679[7] + 2) = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_612:
  *(_QWORD *)&v673[0] = 0;
  v688 = 0u;
  v689 = 0u;
  v686 = 0u;
  v687 = 0u;
  *(_OWORD *)__s = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v679[0] = 136315906;
  *(_QWORD *)&v679[1] = "operator[]";
  LOWORD(v679[3]) = 1024;
  *(unsigned int *)((char *)&v679[3] + 2) = 789;
  HIWORD(v679[4]) = 2048;
  *(_QWORD *)&v679[5] = v4;
  LOWORD(v679[7]) = 2048;
  *(_QWORD *)((char *)&v679[7] + 2) = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_613:
  *(_QWORD *)&v673[0] = 0;
  v688 = 0u;
  v689 = 0u;
  v686 = 0u;
  v687 = 0u;
  *(_OWORD *)__s = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v679[0] = 136315906;
  *(_QWORD *)&v679[1] = "operator[]";
  LOWORD(v679[3]) = 1024;
  *(unsigned int *)((char *)&v679[3] + 2) = 789;
  HIWORD(v679[4]) = 2048;
  *(_QWORD *)&v679[5] = v4;
  LOWORD(v679[7]) = 2048;
  *(_QWORD *)((char *)&v679[7] + 2) = v4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_614:
  *(_QWORD *)&v673[0] = 0;
  v688 = 0u;
  v689 = 0u;
  v686 = 0u;
  v687 = 0u;
  *(_OWORD *)__s = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v679[0] = 136315906;
  *(_QWORD *)&v679[1] = "operator[]";
  LOWORD(v679[3]) = 1024;
  *(unsigned int *)((char *)&v679[3] + 2) = 789;
  HIWORD(v679[4]) = 2048;
  *(_QWORD *)&v679[5] = v25;
  LOWORD(v679[7]) = 2048;
  *(_QWORD *)((char *)&v679[7] + 2) = v4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_615:
  *(_QWORD *)&v673[0] = 0;
  v688 = 0u;
  v689 = 0u;
  v686 = 0u;
  v687 = 0u;
  *(_OWORD *)__s = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v679[0] = 136315906;
  *(_QWORD *)&v679[1] = "operator[]";
  LOWORD(v679[3]) = 1024;
  *(unsigned int *)((char *)&v679[3] + 2) = 789;
  HIWORD(v679[4]) = 2048;
  *(_QWORD *)&v679[5] = v25;
  LOWORD(v679[7]) = 2048;
  *(_QWORD *)((char *)&v679[7] + 2) = v4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_616:
  *(_QWORD *)&v673[0] = 0;
  v688 = 0u;
  v689 = 0u;
  v686 = 0u;
  v687 = 0u;
  *(_OWORD *)__s = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v679[0] = 136315906;
  *(_QWORD *)&v679[1] = "operator[]";
  LOWORD(v679[3]) = 1024;
  *(unsigned int *)((char *)&v679[3] + 2) = 789;
  HIWORD(v679[4]) = 2048;
  *(_QWORD *)&v679[5] = v25;
  LOWORD(v679[7]) = 2048;
  *(_QWORD *)((char *)&v679[7] + 2) = v4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_617:
  *(_QWORD *)&v673[0] = 0;
  v688 = 0u;
  v689 = 0u;
  v686 = 0u;
  v687 = 0u;
  *(_OWORD *)__s = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v679[0] = 136315906;
  *(_QWORD *)&v679[1] = "operator[]";
  LOWORD(v679[3]) = 1024;
  *(unsigned int *)((char *)&v679[3] + 2) = 789;
  HIWORD(v679[4]) = 2048;
  *(_QWORD *)&v679[5] = v25;
  LOWORD(v679[7]) = 2048;
  *(_QWORD *)((char *)&v679[7] + 2) = v4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_618:
  *(_QWORD *)&v673[0] = 0;
  v688 = 0u;
  v689 = 0u;
  v686 = 0u;
  v687 = 0u;
  *(_OWORD *)__s = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v679[0] = 136315906;
  *(_QWORD *)&v679[1] = "operator[]";
  LOWORD(v679[3]) = 1024;
  *(unsigned int *)((char *)&v679[3] + 2) = 789;
  HIWORD(v679[4]) = 2048;
  *(_QWORD *)&v679[5] = v25;
  LOWORD(v679[7]) = 2048;
  *(_QWORD *)((char *)&v679[7] + 2) = v4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_619:
  *(_QWORD *)&v673[0] = 0;
  v688 = 0u;
  v689 = 0u;
  v686 = 0u;
  v687 = 0u;
  *(_OWORD *)__s = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v679[0] = 136315906;
  *(_QWORD *)&v679[1] = "operator[]";
  LOWORD(v679[3]) = 1024;
  *(unsigned int *)((char *)&v679[3] + 2) = 789;
  HIWORD(v679[4]) = 2048;
  *(_QWORD *)&v679[5] = v25;
  LOWORD(v679[7]) = 2048;
  *(_QWORD *)((char *)&v679[7] + 2) = v4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_620:
  *(_QWORD *)&v673[0] = 0;
  v688 = 0u;
  v689 = 0u;
  v686 = 0u;
  v687 = 0u;
  *(_OWORD *)__s = 0u;
  LODWORD(v251) = MEMORY[0x24BDACB70];
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v679[0] = 136315906;
  *(_QWORD *)&v679[1] = "operator[]";
  LOWORD(v679[3]) = 1024;
  *(unsigned int *)((char *)&v679[3] + 2) = 789;
  HIWORD(v679[4]) = 2048;
  *(_QWORD *)&v679[5] = v25;
  LOWORD(v679[7]) = 2048;
  *(_QWORD *)((char *)&v679[7] + 2) = v4;
  _os_log_send_and_compose_impl();
  v382 = _os_crash_msg();
  __break(1u);
LABEL_621:
  v384 = a2;
  if ((_DWORD)v639)
  {
    v4 = v251;
    v19 = v603;
    v506 = v251 - (unint64_t)v603;
    if (v251 < (unint64_t)v603)
      v506 = 0;
    v507 = v639;
    while (v506)
    {
      *(_QWORD *)(v3 + 8 * v19) = 0;
      --v506;
      ++v19;
      if (!--v507)
        goto LABEL_627;
    }
    goto LABEL_817;
  }
LABEL_627:
  v4 = (v603 - v639);
  if ((_DWORD)v634)
  {
    v19 = 0;
    v508 = 0.0;
    v509 = v634;
    while (1)
    {
      v16 = (v603 + v19);
      if (v16 >= v13)
        break;
      v25 = (v4 + v19);
      if (v25 >= v13)
        goto LABEL_822;
      if (v25 >= v251)
        goto LABEL_823;
      v510 = vsubq_f32(*(float32x4_t *)(v382 + 16 * v16), *(float32x4_t *)(v382 + 16 * v25));
      v511 = vmulq_f32(v510, v510);
      v508 = v508
           + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v511, 2), vaddq_f32(v511, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v511.f32, 1))).f32[0]);
      *(_QWORD *)(v3 + 8 * v25) = LODWORD(v508);
      v19 = (v19 - v639);
      if (!--v509)
        goto LABEL_633;
    }
LABEL_821:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 601;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v16;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_822:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    LODWORD(v251) = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 601;
    LODWORD(v698[0]) = 136315906;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = (v4 + v19);
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_823:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 609;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v25;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v251;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_824:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 797;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = 0;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_825;
  }
LABEL_633:
  if (v4 >= v13)
    goto LABEL_860;
  if (v603 >= v13)
    goto LABEL_861;
  if (v630 >= 2)
  {
    v512 = vsubq_f32(*(float32x4_t *)(v382 + 16 * v4), *(float32x4_t *)(v382 + 16 * v603));
    v513 = vmulq_f32(v512, v512);
    v514 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v513, 2), vaddq_f32(v513, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v513.f32, 1))).f32[0]);
    v515 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v512, (int32x4_t)v512), (int8x16_t)v512, 0xCuLL);
    v516 = vnegq_f32(v512);
    v19 = v13;
    v517 = 1;
    while (1)
    {
      v25 = v517 + v4;
      if (v517 == v13 - v4)
        goto LABEL_840;
      if (v462 >= 2)
        break;
LABEL_644:
      if (++v517 == v630)
        goto LABEL_645;
    }
    v518 = vsubq_f32(*(float32x4_t *)(v382 + 16 * v25), *(float32x4_t *)(v382 + 16 * v603));
    v519 = vmulq_f32(v518, v518);
    v520 = (int32x4_t)vmulq_f32(v512, v518);
    v521 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v518, (int32x4_t)v518), (int8x16_t)v518, 0xCuLL), v516), v518, v515);
    v522 = vmulq_f32(v521, v521);
    v520.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v520, 2), vadd_f32(*(float32x2_t *)v520.i8, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v520.i8, 1))).u32[0];
    v520.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v522.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v522, 2), v522)).f32[0]);
    v523 = vmul_n_f32(*(float32x2_t *)v520.i8, 1.0/ (float)(v514* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v519, 2), vaddq_f32(v519, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v519.f32, 1))).f32[0])));
    v524 = 0.0;
    v525 = v634;
    v17 = v603;
    while (v17 < v13)
    {
      v16 = v25;
      if (v25 >= v13)
        goto LABEL_773;
      if (v25 >= v251)
        goto LABEL_774;
      v526 = vsubq_f32(*(float32x4_t *)(v382 + 16 * v17), *(float32x4_t *)(v382 + 16 * v25));
      v527 = vmulq_f32(v526, v526);
      v524 = v524
           + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v527, 2), vaddq_f32(v527, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v527.f32, 1))).f32[0]);
      *(float32x2_t *)(v3 + 8 * v25) = vmul_n_f32(v523, v524);
      v17 = v25;
      v25 = (v25 - v639);
      if (!--v525)
        goto LABEL_644;
    }
LABEL_772:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 601;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v17;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_773:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    LODWORD(v251) = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 601;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v16;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_774:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 609;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v16;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v251;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_775:
    *(_QWORD *)&v673[0] = 0;
    v688 = 0u;
    v689 = 0u;
    v686 = 0u;
    v687 = 0u;
    *(_OWORD *)__s = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v679[0] = 136315906;
    *(_QWORD *)&v679[1] = "operator[]";
    LOWORD(v679[3]) = 1024;
    *(unsigned int *)((char *)&v679[3] + 2) = 789;
    HIWORD(v679[4]) = 2048;
    *(_QWORD *)&v679[5] = 0;
    LOWORD(v679[7]) = 2048;
    *(_QWORD *)((char *)&v679[7] + 2) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_776:
    *(_QWORD *)&v673[0] = 0;
    v688 = 0u;
    v689 = 0u;
    v686 = 0u;
    v687 = 0u;
    *(_OWORD *)__s = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v679[0] = 136315906;
    *(_QWORD *)&v679[1] = "operator[]";
    LOWORD(v679[3]) = 1024;
    *(unsigned int *)((char *)&v679[3] + 2) = 789;
    HIWORD(v679[4]) = 2048;
    *(_QWORD *)&v679[5] = v4;
    LOWORD(v679[7]) = 2048;
    *(_QWORD *)((char *)&v679[7] + 2) = v25;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_777:
    *(_QWORD *)&v673[0] = 0;
    v688 = 0u;
    v689 = 0u;
    v686 = 0u;
    v687 = 0u;
    *(_OWORD *)__s = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v679[0] = 136315906;
    *(_QWORD *)&v679[1] = "operator[]";
    LOWORD(v679[3]) = 1024;
    *(unsigned int *)((char *)&v679[3] + 2) = 789;
    HIWORD(v679[4]) = 2048;
    *(_QWORD *)&v679[5] = v17;
    LOWORD(v679[7]) = 2048;
    *(_QWORD *)((char *)&v679[7] + 2) = v25;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_778:
    *(_QWORD *)&v673[0] = 0;
    v688 = 0u;
    v689 = 0u;
    v686 = 0u;
    v687 = 0u;
    *(_OWORD *)__s = 0u;
    LODWORD(v251) = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v679[0] = 136315906;
    *(_QWORD *)&v679[1] = "operator[]";
    LOWORD(v679[3]) = 1024;
    *(unsigned int *)((char *)&v679[3] + 2) = 789;
    HIWORD(v679[4]) = 2048;
    *(_QWORD *)&v679[5] = v4;
    LOWORD(v679[7]) = 2048;
    *(_QWORD *)((char *)&v679[7] + 2) = v25;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_779:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 609;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v4;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v251;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_780:
    *(_QWORD *)&v673[0] = 0;
    v688 = 0u;
    v689 = 0u;
    v686 = 0u;
    v687 = 0u;
    *(_OWORD *)__s = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v679[0] = 136315906;
    *(_QWORD *)&v679[1] = "operator[]";
    LOWORD(v679[3]) = 1024;
    *(unsigned int *)((char *)&v679[3] + 2) = 789;
    HIWORD(v679[4]) = 2048;
    *(_QWORD *)&v679[5] = 0;
    LOWORD(v679[7]) = 2048;
    *(_QWORD *)((char *)&v679[7] + 2) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_781;
  }
LABEL_645:
  v13 = v635;
  v385 = v601;
  v11 = *(_QWORD *)v612;
  if ((_DWORD)v634)
  {
    v19 = 0;
    v528 = v603 - 1;
    while (1)
    {
      v25 = (v4 + v19);
      if (v25 >= v251)
        break;
      if (v528 + (int)v19 >= v251)
        goto LABEL_829;
      LODWORD(v529) = 0;
      HIDWORD(v529) = *(_DWORD *)(v3 + 8 * v25);
      *(_QWORD *)(v3 + 8 * (v528 + v19)) = v529;
      v19 = (v19 - v639);
      if (!--v634)
        goto LABEL_484;
    }
LABEL_828:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 609;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v25;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v251;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_829:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 609;
    LODWORD(v698[0]) = 136315906;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = (v603 + v19 - 1);
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v251;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_830:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 609;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v19;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v251;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_831:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    v497 = MEMORY[0x24BDACB70];
    v19 = v385;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 609;
    LODWORD(v698[0]) = 136315906;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = (v19 + v4);
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v251;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_832:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    v494 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 797;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v497;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_833:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 609;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v4;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v494;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_834:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    v494 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 797;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v13;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_835:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    v497 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 609;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v19;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v494;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_836:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    v494 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 797;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v497;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_837:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 609;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v25;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v494;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_838:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    v494 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 797;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v13;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_839:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    v3 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 609;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v13;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v494;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_840:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 601;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v25;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_841:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 601;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v4;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_842:
    v672 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v701 = 136315906;
    *(_QWORD *)&v701[4] = "operator[]";
    *(_WORD *)&v701[12] = 1024;
    *(_DWORD *)&v701[14] = 609;
    *(_WORD *)&v701[18] = 2048;
    *(_QWORD *)&v701[20] = v3;
    *(_WORD *)&v701[28] = 2048;
    *(_QWORD *)&v701[30] = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_843;
  }
LABEL_484:
  v4 = v603;
  if (v603 >= v251)
    goto LABEL_852;
  v19 = *(_QWORD *)v609;
  if (v385 >= v251)
    goto LABEL_853;
  if (v609[0] >= v251)
    goto LABEL_854;
  v389 = *(float32x2_t *)(v3 + 8 * v603);
  v390 = *(float32x2_t *)(v3 + 8 * v385);
  __asm { FMOV            V2.2S, #3.0 }
  *(float32x2_t *)(v3 + 8 * v609[0]) = vdiv_f32(vadd_f32(vadd_f32(v389, v389), v390), _D2);
  if (v11 >= v251)
    goto LABEL_855;
  *(float32x2_t *)(v3 + 8 * v11) = vdiv_f32(vadd_f32(v389, vadd_f32(v390, v390)), _D2);
  v396 = v384[2];
  v397 = (float32x2_t *)re::modifyVertexUVs(a1, v383);
  v251 = v398;
  v399 = 0;
  v400 = 0;
  v401.f32[0] = v8 * 0.5;
  v402.f32[0] = -(float)(v8 * 0.5);
  do
  {
    *(_DWORD *)&v701[v400] = v399;
    v400 += 4;
    v399 += v13;
  }
  while (v400 != 36);
  v403.f32[0] = -(float)(v8 * 0.5);
  v403.f32[1] = -(float)(v7 * 0.5);
  v404.f32[0] = v8 * 0.5;
  v404.f32[1] = v7 * 0.5;
  v402.f32[1] = v7 * 0.5;
  v401.f32[1] = v403.f32[1];
  if ((_DWORD)v618)
  {
    v405 = 0;
    v406 = v633 / v618;
    if (v633 / v618 <= 1)
      v407 = 1;
    else
      v407 = v633 / v618;
    v408 = *(int32x4_t *)v701;
    v409 = *(int32x4_t *)&v701[16];
    while (1)
    {
      v410 = v405 + 1;
      if (v618 <= v633)
        break;
LABEL_508:
      v405 = v410;
      if (v410 == (_DWORD)v618)
        goto LABEL_509;
    }
    v411 = 0;
    v412 = v407;
    v413 = v405 * v406;
    while (1)
    {
      v414 = vtrn2q_s32(vrev64q_s32(vdupq_n_s32(v411 + v413)), vdupq_n_s32(v410 * v406 + ~v411));
      v415 = vaddq_s32(v414, v408);
      v4 = v415.u32[0];
      if (v415.i32[0] >= v251)
        goto LABEL_724;
      v416 = &v397[v415.u32[0]];
      v417.i32[0] = v416->i32[0];
      v418 = v416->f32[1];
      v419 = vadd_f32(v404, *v416);
      *v416 = v419;
      v4 = v415.u32[1];
      if (v415.i32[1] >= v251)
        goto LABEL_725;
      v420.f32[0] = -v417.f32[0];
      v420.f32[1] = v418;
      v421 = vadd_f32(v402, v420);
      v397[v415.u32[1]] = v421;
      v4 = v415.u32[2];
      if (v415.i32[2] >= v251)
        goto LABEL_726;
      v422 = -v418;
      v423.f32[1] = -v418;
      v423.f32[0] = -v417.f32[0];
      v424 = vadd_f32(v403, v423);
      v397[v415.u32[2]] = v424;
      v4 = v415.u32[3];
      if (v415.i32[3] >= v251)
        goto LABEL_727;
      v417.f32[1] = v422;
      v425 = vaddq_s32(v414, v409);
      v426 = vadd_f32(v401, v417);
      v397[v415.u32[3]] = v426;
      v4 = v425.u32[0];
      if (v425.i32[0] >= v251)
        goto LABEL_728;
      v427 = &v397[v425.u32[0]];
      *v427 = v424;
      v4 = v425.u32[1];
      if (v425.i32[1] >= v251)
        goto LABEL_729;
      v428 = &v397[v425.u32[1]];
      *v428 = v426;
      v4 = v425.u32[2];
      if (v425.i32[2] >= v251)
        goto LABEL_730;
      v429 = &v397[v425.u32[2]];
      *v429 = v419;
      v4 = v425.u32[3];
      if (v425.i32[3] >= v251)
        goto LABEL_731;
      v430 = &v397[v425.u32[3]];
      *v430 = v421;
      if (v396)
      {
        v427->f32[0] = -v427->f32[0];
        v428->f32[0] = -v428->f32[0];
        v429->f32[0] = -v429->f32[0];
        v430->f32[0] = -v430->f32[0];
      }
      ++v411;
      if (!--v412)
        goto LABEL_508;
    }
  }
LABEL_509:
  v4 = 0;
  v431 = *(unsigned int *)&v701[12];
  v17 = *(unsigned int *)&v701[16];
  v18 = *(unsigned int *)&v701[24];
  v16 = *(unsigned int *)&v701[28];
  v19 = *(unsigned int *)&v701[32];
  v432 = *(_DWORD *)&v701[28] - 1;
  LODWORD(v639) = *(_DWORD *)&v701[20];
  v433 = *(_DWORD *)&v701[20] - 1;
  v434 = *(_DWORD *)&v701[12] - 1;
  v435 = *(_DWORD *)&v701[32] - 1;
  v436 = *(_DWORD *)&v701[24] - 1;
  v13 = *(unsigned int *)&v701[4];
  v11 = *(unsigned int *)&v701[8];
  v437 = *(_DWORD *)&v701[16] - 1;
  v438 = *(_DWORD *)&v701[8] - 1;
  v439 = *(_DWORD *)&v701[4] - 1;
  v440 = -2;
  do
  {
    if (v439 + (int)v4 >= v251)
      goto LABEL_782;
    if (v4)
      v25 = v440;
    else
      v25 = 1;
    v441 = &v397[(v439 + v4)];
    v442.i32[0] = v441->i32[0];
    v443 = v441->f32[1];
    v444 = vadd_f32(v404, *v441);
    *v441 = v444;
    if (v438 + (int)v4 - (int)v25 >= v251)
      goto LABEL_783;
    v445.f32[0] = -v442.f32[0];
    v445.f32[1] = v443;
    v446 = vadd_f32(v402, v445);
    v397[(v438 + v4 - v25)] = v446;
    if (v434 + (int)v4 >= v251)
      goto LABEL_784;
    v447 = -v443;
    v448.f32[1] = -v443;
    v448.f32[0] = -v442.f32[0];
    v449 = vadd_f32(v403, v448);
    v397[(v434 + v4)] = v449;
    if (v437 + (int)v4 - (int)v25 >= v251)
      goto LABEL_785;
    v442.f32[1] = v447;
    v450 = vadd_f32(v401, v442);
    v397[(v437 + v4 - v25)] = v450;
    if (v433 + (int)v4 >= v251)
      goto LABEL_786;
    v451 = &v397[(v433 + v4)];
    *v451 = v449;
    if (v436 + (int)v4 - (int)v25 >= v251)
      goto LABEL_787;
    v452 = &v397[(v436 + v4 - v25)];
    *v452 = v450;
    if (v432 + (int)v4 >= v251)
      goto LABEL_788;
    v453 = &v397[(v432 + v4)];
    *v453 = v444;
    if (v435 + (int)v4 - (int)v25 >= v251)
      goto LABEL_789;
    v454 = &v397[(v435 + v4 - v25)];
    *v454 = v446;
    if (v396)
    {
      v451->f32[0] = -v451->f32[0];
      v452->f32[0] = -v452->f32[0];
      v453->f32[0] = -v453->f32[0];
      v454->f32[0] = -v454->f32[0];
    }
    --v4;
    ++v440;
  }
  while (v4 != -3);
  v455 = *v397;
  v4 = v251;
  v25 = v635;
  if (v19 < 2)
    goto LABEL_569;
  v456 = a1;
  if ((unint64_t)v251 - 1 <= v19 - 2)
    goto LABEL_856;
  v457 = v19 - 1;
  v458 = v397 + 1;
  v459 = *v397;
  do
  {
    v460 = *v458++;
    v461.i32[0] = vbsl_s8((int8x8_t)vcgt_f32(v455, v460), (int8x8_t)v460, (int8x8_t)v455).u32[0];
    v461.i32[1] = v455.i32[1];
    v461.i32[1] = vbsl_s8((int8x8_t)vcgt_f32(v461, v460), *(int8x8_t *)&v460, *(int8x8_t *)&v455).i32[1];
    v459 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v460, v459), (int8x8_t)v460, (int8x8_t)v459);
    v455 = v461;
    --v457;
  }
  while (v457);
LABEL_570:
  if ((_DWORD)v19)
  {
    v488 = vsub_f32(v459, v461);
    if (v488.f32[1] >= v488.f32[0])
      v488.f32[0] = v488.f32[1];
    if (v488.f32[0] > 0.0)
      v488.f32[0] = 1.0 / v488.f32[0];
    v489 = v4;
    while (v489)
    {
      *v397 = vmul_n_f32(vsub_f32(*v397, v461), v488.f32[0]);
      ++v397;
      --v489;
      if (!--v19)
        goto LABEL_578;
    }
LABEL_812:
    v665[0] = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    v3 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 609;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v4;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v251;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_813:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 609;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v16;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_814:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 609;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v16;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_815:
    re::internal::assertLog((re::internal *)6, (uint64_t)v333, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v19, v19);
    _os_crash();
    __break(1u);
LABEL_816:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 609;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v4;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_817:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 609;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v19;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_818:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 601;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v19;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_819:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    LODWORD(v251) = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 601;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v4;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_820:
    *(_QWORD *)v701 = 0;
    v674 = 0u;
    v675 = 0u;
    memset(v673, 0, sizeof(v673));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v698[0]) = 136315906;
    *(_QWORD *)((char *)v698 + 4) = "operator[]";
    WORD6(v698[0]) = 1024;
    *(_DWORD *)((char *)v698 + 14) = 609;
    WORD1(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 4) = v4;
    WORD6(v698[1]) = 2048;
    *(_QWORD *)((char *)&v698[1] + 14) = v251;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_821;
  }
LABEL_578:
  *(_QWORD *)&v673[0] = v664;
  *((_QWORD *)&v673[0] + 1) = v662;
  *(_QWORD *)&v698[0] = v660;
  *((_QWORD *)&v698[0] + 1) = v658;
  *(_DWORD *)v701 = v617;
  v4 = v636;
  v25 = v606;
  v491 = (uint64_t)a2;
  v492 = v637;
  if (v604 >= 2)
  {
    v493 = re::modifyVertexUVs(a1, v490);
    v491 = (uint64_t)a2;
    if (v636 >= 2)
    {
      v494 = v490;
      v495 = v638 + 2;
      v496 = 1;
      while (1)
      {
        v497 = (v492 * v496);
        v19 = v654;
        if (v654 <= v497)
          goto LABEL_832;
        v4 = v656[v497];
        if (v4 >= v490)
          goto LABEL_833;
        v13 = (v497 + v638);
        if (v654 <= v13)
          goto LABEL_834;
        v19 = v656[v13];
        if (v19 >= v490)
          goto LABEL_835;
        v11 = v650;
        if (v650 <= v497)
          goto LABEL_836;
        v25 = v652[v497];
        if (v25 >= v490)
          goto LABEL_837;
        if (v650 <= v13)
          goto LABEL_838;
        v13 = v652[v13];
        if (v13 >= v490)
          goto LABEL_839;
        if (v638 >= 2)
          break;
LABEL_596:
        ++v496;
        v492 = v637;
        v495 += v637;
        if (v496 == v636)
          goto LABEL_597;
      }
      v498 = 0;
      while (1)
      {
        v499 = (float)(1.0 / (float)v638) * (float)(v498 + 1);
        v500 = 1.0 - v499;
        v3 = (v495 + v498);
        v11 = v654;
        if (v654 <= v3)
          goto LABEL_768;
        v11 = v656[v3];
        if (v11 >= v490)
          goto LABEL_769;
        *(float32x2_t *)(v493 + 8 * v11) = vadd_f32(vmul_n_f32(*(float32x2_t *)(v493 + 8 * v19), v499), vmul_n_f32(*(float32x2_t *)(v493 + 8 * v4), v500));
        v11 = v650;
        if (v650 <= v3)
          goto LABEL_770;
        v11 = v652[v3];
        if (v11 >= v490)
          goto LABEL_771;
        *(float32x2_t *)(v493 + 8 * v11) = vadd_f32(vmul_n_f32(*(float32x2_t *)(v493 + 8 * v25), v500), vmul_n_f32(*(float32x2_t *)(v493 + 8 * v13), v499));
        if (v638 - 1 == ++v498)
          goto LABEL_596;
      }
    }
  }
LABEL_597:
  v25 = (unint64_t)v648;
  v19 = v646;
  v11 = v491;
  if (!*(_BYTE *)(v491 + 2))
  {
LABEL_659:
    v671 = v610;
    v4 = (unint64_t)a1;
    v530 = re::modifyVertexUVs(a1, v490);
    LODWORD(v251) = v531;
    v669 = v530;
    v670 = v531;
    v532 = re::GeomMesh::accessVertexPositions(a1);
    LODWORD(v533) = *(_DWORD *)(v11 + 40);
    v535 = *(_DWORD *)(v11 + 52);
    v534 = *(_DWORD *)(v11 + 56);
    v668 = v534;
    v667 = v535;
    v536 = *(_DWORD *)(v11 + 60);
    v13 = (v536 * v534);
    v537 = v13 + 1;
    v327 = (unsigned __int8 *)v11;
    if (*(float *)(v11 + 20) > 0.0)
    {
      v538 = *(float *)(v11 + 24);
      v539 = v536 - 1;
      if (v538 <= 0.0)
        v13 = v537;
      else
        v13 = 0;
      if (v538 > 0.0)
        v540 = 1;
      else
        v540 = v539;
      if (v13 >= v251)
        goto LABEL_862;
      v11 = (v540 * v534);
      if (v11 >= v251)
        goto LABEL_863;
      v4 = (unint64_t)v333;
      if (v13 >= v333)
        goto LABEL_864;
      if (v11 >= v333)
        goto LABEL_865;
      if (!v19)
        goto LABEL_866;
      v4 = *(unsigned int *)v25;
      if (v4 >= v251)
        goto LABEL_867;
      if ((_DWORD)v19)
      {
        v541 = 0;
        v542 = vsub_f32(*(float32x2_t *)(v530 + 8 * v13), *(float32x2_t *)(v530 + 8 * v11));
        v543 = vsubq_f32(*(float32x4_t *)(v532 + 16 * v13), *(float32x4_t *)(v532 + 16 * v11));
        v544 = vmulq_f32(v543, v543);
        v545 = (float)(*(float *)&v533
                     * (float)(sqrtf(vaddv_f32(vmul_f32(v542, v542)))
                             / sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v544, 2), vaddq_f32(v544, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v544.f32, 1))).f32[0])))/ (float)v535;
        v546 = *(float32x2_t *)(v530 + 8 * v4);
        v547 = v535 + 1;
        v548 = 0.0;
        v549 = v610;
        while (1)
        {
          if (v541 == v19)
            goto LABEL_850;
          v4 = *(unsigned int *)(v25 + 4 * v541);
          if (v4 >= v251)
            goto LABEL_851;
          v550 = *(float32x2_t *)(v530 + 8 * v4);
          v551 = vsub_f32(v550, v546);
          v548 = v548 + sqrtf(vaddv_f32(vmul_f32(v551, v551)));
          if ((_DWORD)v547)
            break;
LABEL_680:
          ++v541;
          v549 += v547;
          v546 = v550;
          if (v541 == v19)
            goto LABEL_714;
        }
        v552 = 0;
        v4 = v549;
        v553 = v547;
        while (v4 < v251)
        {
          *(float *)&v554 = v545 * (float)v552;
          *((float *)&v554 + 1) = v548;
          *(_QWORD *)(v530 + 8 * v4) = v554;
          ++v552;
          ++v4;
          if (!--v553)
            goto LABEL_680;
        }
        goto LABEL_779;
      }
      goto LABEL_714;
    }
    goto LABEL_706;
  }
  v501 = re::modifyVertexUVs(a1, v490);
  v327 = (unsigned __int8 *)v11;
  if ((_DWORD)v19)
  {
    v502 = 0;
    v503 = (*(_DWORD *)(v11 + 52) + 1);
    v3 = v333;
    v504 = v610;
    while (1)
    {
      if (v502 == v19)
        goto LABEL_815;
      v4 = *(unsigned int *)(v25 + 4 * v502);
      if (v4 >= v333)
        goto LABEL_816;
      v13 = v504;
      v505 = v503;
      if ((_DWORD)v503)
        break;
LABEL_605:
      ++v502;
      v504 += v503;
      if (v502 == v19)
        goto LABEL_714;
    }
    while (v13 < v333)
    {
      *(_QWORD *)(v501 + 8 * v13++) = *(_QWORD *)(v501 + 8 * v4);
      if (!--v505)
        goto LABEL_605;
    }
    goto LABEL_734;
  }
LABEL_714:
  if (v327[1])
  {
    v566 = ~(2 * (*((_DWORD *)v327 + 12) + *((_DWORD *)v327 + 11)) + 4 * *((_DWORD *)v327 + 14) - 4);
    v567 = *((_DWORD *)a1 + 4);
    v568 = v566 + v566 * *((_DWORD *)v327 + 13) + v567;
    v569 = v568 >> 1;
    *(_QWORD *)&v673[0] = re::modifyVertexUVs(a1, v333);
    *((_QWORD *)&v673[0] + 1) = v570;
    v568 &= ~1u;
    v327 = a2;
  }
LABEL_458:
  if (v327[4])
    re::internal::mergeVertexPositions(a1, v333);
  re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)__s);
  if (v641[0] && v644)
    (*(void (**)(_QWORD, _DWORD *))(*(_QWORD *)v641[0] + 40))(v641[0], v644);
  if (v645[0] && v648)
    (*(void (**)(_QWORD, _DWORD *))(*(_QWORD *)v645[0] + 40))(v645[0], v648);
  if (v649[0] && v652)
    (*(void (**)(_QWORD, _DWORD *))(*(_QWORD *)v649[0] + 40))(v649[0], v652);
  if (v653[0] && v656)
    (*(void (**)(_QWORD, _DWORD *))(*(_QWORD *)v653[0] + 40))(v653[0], v656);
  if (v657[0] && v660)
    (*(void (**)(_QWORD, _DWORD *))(*(_QWORD *)v657[0] + 40))(v657[0], v660);
  if (v661[0] && v664)
    (*(void (**)(_QWORD, _DWORD *))(*(_QWORD *)v661[0] + 40))(v661[0], v664);
  return v610;
}

void re::`anonymous namespace'::computeGeometryForCanonicalCorner(re::GeomMesh *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  unint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float v36;
  float v37;
  __int128 v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  float32x2_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  uint64_t v47;
  uint64_t v48;
  int8x16_t v49;
  uint64_t *v50;
  unsigned int v51;
  __int128 v52;
  float32x4_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  float v68;
  unsigned int v69;
  uint64_t v70;
  float32x4_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  float v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  unsigned int v79;
  float32x4_t v80;
  float32x4_t v81;
  unint64_t v82;
  _OWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  float v93;
  unsigned int v94;
  float v95;
  float32x4_t v96;
  __int128 v97;
  __int128 v98;
  unsigned int v99;
  float32x4_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  _BYTE v110[40];
  uint64_t *v111;
  _BYTE v112[18];
  __int16 v113;
  unint64_t v114;
  __int16 v115;
  unint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v122 = *MEMORY[0x24BDAC8D0];
  v104 = a5;
  v105 = a4;
  v103 = a6;
  v13 = re::GeomMesh::modifyVertexPositions(a1);
  v15 = v14;
  v101 = v13;
  v102 = v14;
  v17 = v16;
  v19 = v18;
  v88 = v17;
  if ((_DWORD)v9)
  {
    v20 = 0;
    v21 = 1.0 / (float)((float)v10 + -1.0);
    v86 = v18;
    v19 = v18;
    v6 = v17;
    v22 = 1.0 / (float)((float)v9 + -1.0);
    while (1)
    {
      v23 = v20 == (_DWORD)v9 - 1 ? 1.0 : v22 * (float)v20;
      if ((_DWORD)v10)
        break;
LABEL_32:
      if (++v20 >= v9)
      {
        v15 = v102;
        v19 = v86;
        goto LABEL_34;
      }
    }
    v94 = v20;
    v15 = 0;
    v9 = 16 * v8;
    v24 = v90;
    v7 = v92;
    LODWORD(v89) = v8;
    while (1)
    {
      v25 = v8 + v15;
      *(_OWORD *)v112 = 0u;
      v100 = 0u;
      v26 = v21 * (float)v15;
      if ((_DWORD)v15 == (_DWORD)v10 - 1)
        v26 = 1.0;
      v10 = v102;
      if (v25 >= v102)
      {
        *(_QWORD *)&v98 = 0;
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v117 = 0u;
        v69 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_QWORD *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_DWORD *)v110 = 136315906;
        *(_WORD *)&v110[18] = 2048;
        *(_QWORD *)&v110[20] = v8 + v15;
        *(_WORD *)&v110[28] = 2048;
        *(_QWORD *)&v110[30] = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_81:
        v96.i64[0] = 0;
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v117 = 0u;
        v24 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v112 = 136315906;
        *(_QWORD *)&v112[4] = "operator[]";
        *(_WORD *)&v112[12] = 1024;
        *(_DWORD *)&v112[14] = 609;
        v113 = 2048;
        v114 = v8 + v19;
        v115 = 2048;
        v116 = v69;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_82:
        *(_QWORD *)&v98 = 0;
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v117 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v110 = 136315906;
        *(_QWORD *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_WORD *)&v110[18] = 2048;
        *(_QWORD *)&v110[20] = v15 + v89;
        *(_WORD *)&v110[28] = 2048;
        *(_QWORD *)&v110[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_83:
        *(_QWORD *)&v98 = 0;
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v117 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v110 = 136315906;
        *(_QWORD *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_WORD *)&v110[18] = 2048;
        *(_QWORD *)&v110[20] = v15 + v89;
        *(_WORD *)&v110[28] = 2048;
        *(_QWORD *)&v110[30] = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_84:
        *(_QWORD *)&v98 = 0;
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v117 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v110 = 136315906;
        *(_QWORD *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_WORD *)&v110[18] = 2048;
        *(_QWORD *)&v110[20] = v15 + v89;
        *(_WORD *)&v110[28] = 2048;
        *(_QWORD *)&v110[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_85:
        *(_QWORD *)&v98 = 0;
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v117 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v110 = 136315906;
        *(_QWORD *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_WORD *)&v110[18] = 2048;
        *(_QWORD *)&v110[20] = v15 + v89;
        *(_WORD *)&v110[28] = 2048;
        *(_QWORD *)&v110[30] = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_86:
        *(_QWORD *)&v98 = 0;
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v117 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v110 = 136315906;
        *(_QWORD *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_WORD *)&v110[18] = 2048;
        *(_QWORD *)&v110[20] = v15 + v89;
        *(_WORD *)&v110[28] = 2048;
        *(_QWORD *)&v110[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_87:
        *(_QWORD *)&v98 = 0;
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v117 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v110 = 136315906;
        *(_QWORD *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_WORD *)&v110[18] = 2048;
        *(_QWORD *)&v110[20] = v15 + v89;
        *(_WORD *)&v110[28] = 2048;
        *(_QWORD *)&v110[30] = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_88:
        *(_QWORD *)&v98 = 0;
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v117 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v110 = 136315906;
        *(_QWORD *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_WORD *)&v110[18] = 2048;
        *(_QWORD *)&v110[20] = v15 + v89;
        *(_WORD *)&v110[28] = 2048;
        *(_QWORD *)&v110[30] = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_89:
        *(_QWORD *)&v98 = 0;
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v117 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v110 = 136315906;
        *(_QWORD *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_WORD *)&v110[18] = 2048;
        *(_QWORD *)&v110[20] = v15 + v89;
        *(_WORD *)&v110[28] = 2048;
        *(_QWORD *)&v110[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_90:
        v96.i64[0] = 0;
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v117 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v112 = 136315906;
        *(_QWORD *)&v112[4] = "operator[]";
        *(_WORD *)&v112[12] = 1024;
        *(_DWORD *)&v112[14] = 609;
        v113 = 2048;
        v114 = v19;
        v115 = 2048;
        v116 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_91:
        *(_QWORD *)v112 = 0;
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v117 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v110 = 136315906;
        *(_QWORD *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_WORD *)&v110[18] = 2048;
        *(_QWORD *)&v110[20] = v24;
        *(_WORD *)&v110[28] = 2048;
        *(_QWORD *)&v110[30] = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_92;
      }
      v29 = (_QWORD *)(v101 + v9 + 16 * v15);
      *v29 = v27;
      v29[1] = v28;
      v30 = *(float32x4_t *)v112;
      v31 = vmulq_f32(v30, v30);
      v32 = vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1));
      v33 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2);
      v34 = v100;
      v35 = vmulq_f32(v34, v34);
      v36 = vaddq_f32(v33, v32).f32[0];
      LODWORD(v37) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).u32[0];
      if (v36 == 0.0 && v37 == 0.0)
      {
        v38 = xmmword_2260E5F40;
        if (v25 >= v6)
          goto LABEL_82;
        *(_OWORD *)(v7 + 16 * v8) = xmmword_2260E5F20;
        if (v25 >= v19)
          goto LABEL_83;
      }
      else
      {
        v38 = xmmword_2260E5F40;
        if (v37 != 0.0)
        {
          if (v36 == 0.0)
          {
            if (v25 >= v19)
              goto LABEL_88;
            *(_OWORD *)(v24 + 16 * v8) = xmmword_2260E5F40;
            if (v25 >= v6)
              goto LABEL_89;
            v49 = (int8x16_t)vmlaq_f32(vmulq_f32(v34, (float32x4_t)xmmword_2261027D0), (float32x4_t)xmmword_2260E5F40, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL));
            *(int8x16_t *)(v7 + 16 * v8) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), v49, 0xCuLL);
          }
          else
          {
            if (v25 >= v6)
              goto LABEL_84;
            *(_OWORD *)(v7 + 16 * v8) = *(_OWORD *)v112;
            v39 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL), vnegq_f32(v30)), v34, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL));
            v40 = vmulq_f32(v39, v39);
            v41 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), v40)).f32[0];
            if (v41 <= 0.0)
            {
              v48 = 0;
              v47 = 0;
            }
            else
            {
              v42 = (float32x2_t)LODWORD(v41);
              v43 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39), (int8x16_t)v39, 0xCuLL);
              v44 = vrsqrte_f32(v42);
              v45 = vmul_f32(v44, vrsqrts_f32(v42, vmul_f32(v44, v44)));
              v46 = vmulq_n_f32(v43, vmul_f32(v45, vrsqrts_f32(v42, vmul_f32(v45, v45))).f32[0]);
              v47 = v46.i64[1];
              v48 = v46.i64[0];
            }
            if (v25 >= v19)
              goto LABEL_85;
            v50 = (uint64_t *)(v24 + v9);
            *v50 = v48;
            v50[1] = v47;
          }
          goto LABEL_30;
        }
        if (v25 >= v6)
          goto LABEL_86;
        *(_OWORD *)(v7 + 16 * v8) = *(_OWORD *)v112;
        if (v25 >= v19)
          goto LABEL_87;
      }
      *(_OWORD *)(v24 + 16 * v8) = v38;
LABEL_30:
      v10 = v105;
      ++v15;
      v24 += 16;
      v7 += 16;
      if (v15 >= v105)
      {
        v8 += v15;
        v9 = v104;
        v20 = v94;
        goto LABEL_32;
      }
    }
  }
LABEL_34:
  v24 = v8 - 1;
  v51 = v88;
  if (v15 <= v24)
    goto LABEL_91;
  v52 = 0uLL;
  v53.i64[0] = 0;
  v53.i64[1] = *(unsigned int *)(v101 + 16 * v24 + 8);
  v100 = v53;
  v6 = v8;
  if (v15 <= v8)
  {
LABEL_92:
    *(_QWORD *)v112 = 0;
    v120 = v52;
    v121 = v52;
    v118 = v52;
    v119 = v52;
    v117 = v52;
    v51 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v110 = 136315906;
    *(_QWORD *)&v110[4] = "operator[]";
    *(_WORD *)&v110[12] = 1024;
    *(_DWORD *)&v110[14] = 609;
    *(_WORD *)&v110[18] = 2048;
    *(_QWORD *)&v110[20] = v6;
    *(_WORD *)&v110[28] = 2048;
    *(_QWORD *)&v110[30] = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_93;
  }
  *(float32x4_t *)(v101 + 16 * v8) = v100;
  if (v8 >= v88)
  {
LABEL_93:
    *(_QWORD *)v112 = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v110 = 136315906;
    *(_QWORD *)&v110[4] = "operator[]";
    *(_WORD *)&v110[12] = 1024;
    *(_DWORD *)&v110[14] = 609;
    *(_WORD *)&v110[18] = 2048;
    *(_QWORD *)&v110[20] = v6;
    *(_WORD *)&v110[28] = 2048;
    *(_QWORD *)&v110[30] = v51;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_94;
  }
  *(_OWORD *)(v92 + 16 * v8) = xmmword_2260E5F20;
  if (v8 >= v19)
  {
LABEL_94:
    *(_QWORD *)v112 = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    v58 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v110 = 136315906;
    *(_QWORD *)&v110[4] = "operator[]";
    *(_WORD *)&v110[12] = 1024;
    *(_DWORD *)&v110[14] = 609;
    *(_WORD *)&v110[18] = 2048;
    *(_QWORD *)&v110[20] = v6;
    *(_WORD *)&v110[28] = 2048;
    *(_QWORD *)&v110[30] = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_95;
  }
  v7 = v19;
  v6 = v90 + 16 * v8;
  *(_OWORD *)v6 = xmmword_2260E5F40;
  v99 = v8;
  *(_QWORD *)v110 = &v100;
  *(_QWORD *)&v110[8] = &v103;
  *(_QWORD *)&v110[16] = &v105;
  *(_QWORD *)&v110[24] = &v104;
  *(_QWORD *)&v110[32] = &v99;
  v111 = &v101;
  v97 = 0u;
  v98 = 0u;
  v15 = v54;
  v10 = v55;
  v58 = v8 + 1;
  v19 = v102;
  if (v102 <= v58)
  {
LABEL_95:
    v108 = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    v62 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v58;
    v115 = 2048;
    v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_96;
  }
  v59.i64[0] = v15;
  v59.i64[1] = v10;
  v60.i64[0] = v56;
  v60.i64[1] = v57;
  v61 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
  *(float32x4_t *)(v101 + 16 * v58) = vmulq_f32(vaddq_f32(vaddq_f32(v59, v59), v60), v61);
  v62 = v8 + 2;
  v19 = v102;
  if (v102 <= v62)
  {
LABEL_96:
    v108 = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    v58 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v62;
    v115 = 2048;
    v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_97;
  }
  *(float32x4_t *)(v101 + 16 * v62) = vmulq_f32(vaddq_f32(vaddq_f32(v60, v60), v59), v61);
  v19 = v102;
  if (v102 <= v58)
  {
LABEL_97:
    v108 = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    v62 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v58;
    v115 = 2048;
    v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_98;
  }
  v19 = v102;
  if (v102 <= v62)
  {
LABEL_98:
    v106 = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v62;
    v115 = 2048;
    v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_99;
  }
  v63 = v108;
  LODWORD(v19) = v88;
  if (v108 >= v88)
  {
LABEL_99:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    v84 = v63;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v84;
    v115 = 2048;
    v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_100;
  }
  v64 = HIDWORD(v108);
  if (HIDWORD(v108) >= v88)
  {
LABEL_100:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    v58 = v64;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v58;
    v115 = 2048;
    v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_101;
  }
  a3 = v109;
  if (v109 >= v88)
  {
LABEL_101:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = a3;
    v115 = 2048;
    v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_102;
  }
  if (v58 >= v88)
  {
LABEL_102:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v58;
    v115 = 2048;
    v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_103;
  }
  v65 = v98;
  v66 = *((float *)&v98 + 2);
  *(float32x4_t *)(v92 + 16 * v58) = vaddq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v92 + 16 * v108), *(float *)&v98), vmulq_n_f32(*(float32x4_t *)(v92 + 16 * HIDWORD(v108)), *((float *)&v98 + 1))), vmulq_n_f32(*(float32x4_t *)(v92 + 16 * v109), *((float *)&v98 + 2)));
  v10 = v106;
  if (v106 >= v88)
  {
LABEL_103:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v10;
    v115 = 2048;
    v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_104;
  }
  v15 = HIDWORD(v106);
  if (HIDWORD(v106) >= v88)
  {
LABEL_104:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v15;
    v115 = 2048;
    v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_105;
  }
  v9 = v107;
  if (v107 >= v88)
  {
LABEL_105:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    v62 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v9;
    v115 = 2048;
    v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_106;
  }
  if (v62 >= v88)
  {
LABEL_106:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    v6 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v62;
    v115 = 2048;
    v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_107;
  }
  v67 = v97;
  v68 = *((float *)&v97 + 2);
  *(float32x4_t *)(v92 + 16 * v62) = vaddq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v92 + 16 * v106), *(float *)&v97), vmulq_n_f32(*(float32x4_t *)(v92 + 16 * HIDWORD(v106)), *((float *)&v97 + 1))), vmulq_n_f32(*(float32x4_t *)(v92 + 16 * v107), *((float *)&v97 + 2)));
  if (v62 >= v7)
  {
LABEL_107:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v62;
    v115 = 2048;
    v116 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v6;
    v115 = 2048;
    v116 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    v69 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v8;
    v115 = 2048;
    v116 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_110;
  }
  *(_OWORD *)(v90 + 16 * v62) = *(_OWORD *)v6;
  *(_OWORD *)(v90 + 16 * v58) = *(_OWORD *)v6;
  if (!a2)
    return;
  v93 = v68;
  v95 = v66;
  v89 = v64;
  v91 = v63;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
  {
    v24 = re::internal::GeomTypedAttribute<float>::operator[](a2, 0);
    v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  }
  else
  {
    v69 = 0;
    v24 = 0;
  }
  v6 = v103;
  v7 = v102;
  if (v102 <= v103)
    goto LABEL_108;
  v70 = v101;
  v71 = *(float32x4_t *)(v101 + 16 * v103);
  v72 = v104;
  if (v104)
  {
    v73 = 0;
    v74 = v105;
    v75 = 0.0;
    v8 = v103;
    while (1)
    {
      v19 = v6 + v74 * (_DWORD)v73;
      if (v7 <= v19)
        goto LABEL_90;
      v76 = *(float32x4_t *)(v70 + 16 * v19);
      v77 = vsubq_f32(v76, v71);
      v78 = vmulq_f32(v77, v77);
      v75 = v75
          + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1))).f32[0]);
      if (v74)
      {
        v19 = 0;
        v79 = v69 - v8;
        if (v69 < v8)
          v79 = 0;
        do
        {
          if (v79 == (_DWORD)v19)
            goto LABEL_81;
          *(float *)(v24 + 4 * v8 + 4 * v19++) = v75;
        }
        while (v74 != (_DWORD)v19);
        v8 += v19;
      }
      ++v73;
      v71 = v76;
      if (v73 == v72)
        goto LABEL_68;
    }
  }
  v76 = *(float32x4_t *)(v101 + 16 * v103);
  v8 = v103;
LABEL_68:
  if (v7 <= v8)
    goto LABEL_109;
  v6 = v8;
  if (v69 <= v8)
  {
LABEL_110:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v6;
    v115 = 2048;
    v116 = v69;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_111;
  }
  v80 = vsubq_f32(*(float32x4_t *)(v70 + 16 * v8), v76);
  v81 = vmulq_f32(v80, v80);
  *(float *)(v24 + 4 * v8) = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2), vaddq_f32(v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1))).f32[0]);
  v82 = v91;
  if (v69 <= v91)
  {
LABEL_111:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    v85 = v82;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v85;
    v115 = 2048;
    v116 = v69;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_112;
  }
  v83 = (_OWORD *)v89;
  if (v69 <= v89)
  {
LABEL_112:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    v6 = (unint64_t)v83;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v6;
    v115 = 2048;
    v116 = v69;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_113;
  }
  if (v69 <= a3)
  {
LABEL_113:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = a3;
    v115 = 2048;
    v116 = v69;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_114;
  }
  v6 = v8 + 1;
  if (v69 <= v6)
  {
LABEL_114:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v6;
    v115 = 2048;
    v116 = v69;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_115;
  }
  *(float *)(v24 + 4 * v6) = (float)((float)(*((float *)&v65 + 1) * *(float *)(v24 + 4 * v89))
                                                   + (float)(*(float *)&v65 * *(float *)(v24 + 4 * v91)))
                                           + (float)(v95 * *(float *)(v24 + 4 * a3));
  if (v69 <= v10)
  {
LABEL_115:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v10;
    v115 = 2048;
    v116 = v69;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_116;
  }
  if (v69 <= v15)
  {
LABEL_116:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v15;
    v115 = 2048;
    v116 = v69;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
  if (v69 <= v9)
  {
LABEL_117:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v9;
    v115 = 2048;
    v116 = v69;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_118:
    v96.i64[0] = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v112 = 136315906;
    *(_QWORD *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    v113 = 2048;
    v114 = v6;
    v115 = 2048;
    v116 = v69;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = v8 + 2;
  if (v69 <= v6)
    goto LABEL_118;
  *(float *)(v24 + 4 * v6) = (float)((float)(*((float *)&v67 + 1) * *(float *)(v24 + 4 * v15))
                                                   + (float)(*(float *)&v67 * *(float *)(v24 + 4 * v10)))
                                           + (float)(v93 * *(float *)(v24 + 4 * v9));
}

unsigned int **re::`anonymous namespace'::classifyFaceType(re::`anonymous namespace'::InternalBoxRoundedCornersOptions const&,unsigned int,unsigned int,unsigned int,re::DynamicArray<unsigned short> &)::$_0::operator()(unsigned int **result, __int16 a2, __int16 a3, __int16 a4)
{
  int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  int *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unint64_t v16;
  unsigned int v17;

  v4 = 0;
  v5 = *result;
  do
  {
    v6 = *v5;
    if (*v5)
    {
      v7 = 0;
      v8 = result[1];
      v9 = (int *)result[2];
      v10 = *((_QWORD *)v8 + 2);
      v11 = *v9;
      while (1)
      {
        v12 = v11 + v7;
        *v9 = v12 + 1;
        if (v10 <= v12)
          break;
        *(_WORD *)(*((_QWORD *)v8 + 4) + 2 * v12) = a4 | a2;
        ++v7;
        v6 = *v5;
        if (v7 >= *v5)
          goto LABEL_6;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_13:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_6:
    v13 = result[3];
    if (v6 < *v13)
    {
      v14 = result[1];
      v15 = result[2];
      v16 = *((_QWORD *)v14 + 2);
      v17 = *v15;
      do
      {
        *v15 = v17 + 1;
        if (v16 <= v17)
          goto LABEL_13;
        *(_WORD *)(*((_QWORD *)v14 + 4) + 2 * v17) = a4 | a3;
        ++v6;
        ++v17;
      }
      while (v6 < *v13);
    }
    ++v4;
  }
  while (v4 != 4);
  return result;
}

uint64_t re::`anonymous namespace'::classifyFaceType(re::`anonymous namespace'::InternalBoxRoundedCornersOptions const&,unsigned int,unsigned int,unsigned int,re::DynamicArray<unsigned short> &)::$_1::operator()(uint64_t result, int a2, __int16 a3, __int16 a4, __int16 a5)
{
  int v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;

  if (a2)
  {
    v5 = 0;
    v6 = *(unsigned int **)result;
    v7 = *(_QWORD *)(result + 8);
    v8 = *(unsigned int **)(result + 16);
    v9 = *v8;
    v10 = *(_QWORD *)(v7 + 16);
    do
    {
      if (!*v6)
        goto LABEL_8;
      v11 = 0;
      do
      {
        v12 = v9 + v11;
        *v8 = v12 + 1;
        if (v10 <= v12)
        {
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_12:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_WORD *)(*(_QWORD *)(v7 + 32) + 2 * v12) = a5 | a3;
        ++v11;
      }
      while (v11 < *v6);
      v9 += v11;
LABEL_8:
      *v8 = v9 + 1;
      if (v10 <= v9)
        goto LABEL_12;
      *(_WORD *)(*(_QWORD *)(v7 + 32) + 2 * v9) = a5 | a4;
      ++v5;
      ++v9;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::`anonymous namespace'::stitchTwoRows(uint64_t this, uint64_t a2, uint64_t a3, int a4, _QWORD *a5, int a6, int *a7, unsigned int *a8)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  _QWORD *v30;
  unint64_t v31;

  v14 = (_QWORD *)a3;
  v15 = this;
  v16 = (*(_DWORD *)(a3 + 8) - 1);
  if (a2 >= 2)
  {
    v21 = a2;
    if (*(_DWORD *)(a3 + 8) != 1)
    {
      v22 = 0;
      while (1)
      {
        v23 = v14[1];
        if (v23 <= v22)
          goto LABEL_32;
        v9 = (_QWORD *)(v22 + 1);
        if (v23 <= v22 + 1)
          goto LABEL_33;
        this = re::GeomMeshBuilder::setFaceVertices(v15, *a8, *(_DWORD *)(*v14 + 4 * v22) + a4, *(_DWORD *)(*v14 + 4 * v22 + 4) + a4, *a7 + 1, *a7);
        ++*a7;
        ++*a8;
        v22 = (unint64_t)v9;
        if ((_QWORD *)v16 == v9)
        {
          v24 = *((_DWORD *)v14 + 2);
          goto LABEL_16;
        }
      }
    }
    v24 = 1;
LABEL_16:
    v25 = *a7 + 1;
    *a7 = v25;
    v26 = v21 - 2;
    if (v21 != 2)
    {
      v27 = 0;
      do
      {
        if ((_DWORD)v16)
        {
          LODWORD(a2) = *a8;
          v28 = v16;
          do
          {
            this = re::GeomMeshBuilder::setFaceVertices(v15, a2, *a7 - v24, *a7 + 1 - v24, *a7 + 1, *a7);
            ++*a7;
            a2 = *a8 + 1;
            *a8 = a2;
            --v28;
          }
          while (v28);
          v25 = *a7;
        }
        *a7 = ++v25;
        ++v27;
      }
      while (v27 != v26);
    }
    v29 = v25 - v24;
    *a7 = v25 - v24;
    if ((_DWORD)v16)
    {
      v30 = 0;
      while (1)
      {
        v14 = (_QWORD *)((char *)v30 + 1);
        v31 = a5[1];
        if (v31 <= (unint64_t)v30 + 1)
          break;
        this = re::GeomMeshBuilder::setFaceVertices(v15, *a8, v29, v29 + 1, *(_DWORD *)(*a5 + 4 * (_QWORD)v30 + 4) + a6, *(_DWORD *)(*a5 + 4 * (_QWORD)v30) + a6);
        ++*a8;
        v29 = *a7 + 1;
        *a7 = v29;
        v30 = v14;
        if ((_QWORD *)v16 == v14)
          goto LABEL_27;
      }
LABEL_34:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v31);
      this = _os_crash();
      __break(1u);
      return this;
    }
LABEL_27:
    *a7 = v29 + 1;
  }
  else if (*(_DWORD *)(a3 + 8) != 1)
  {
    v17 = 0;
    while (1)
    {
      v18 = v14[1];
      if (v18 <= v17)
        break;
      v8 = (_QWORD *)(v17 + 1);
      if (v18 <= v17 + 1)
        goto LABEL_30;
      v19 = a5[1];
      if (v19 <= (unint64_t)v8)
        goto LABEL_31;
      this = re::GeomMeshBuilder::setFaceVertices(v15, *a8, *(_DWORD *)(*v14 + 4 * v17) + a4, *(_DWORD *)(*v14 + 4 * v17 + 4) + a4, *(_DWORD *)(*a5 + 4 * v17 + 4) + a6, *(_DWORD *)(*a5 + 4 * v17) + a6);
      ++*a8;
      v17 = (unint64_t)v8;
      if ((_QWORD *)v16 == v8)
        return this;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v17, v18);
    _os_crash();
    __break(1u);
LABEL_30:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v8, v18);
    _os_crash();
    __break(1u);
LABEL_31:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v17 + 1, v19);
    _os_crash();
    __break(1u);
LABEL_32:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v22, v23);
    _os_crash();
    __break(1u);
LABEL_33:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, v23);
    _os_crash();
    __break(1u);
    goto LABEL_34;
  }
  return this;
}

uint64_t re::`anonymous namespace'::BezierArc::BezierArc(uint64_t result, uint64_t a2, float a3)
{
  uint64_t v3;
  float32x2_t v9;
  int32x2_t *v10;
  float32x2_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float *v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float *v28;
  float v29;
  uint64_t v30;
  float v31[9];
  _BYTE v32[20];
  _QWORD v33[4];

  v3 = 0;
  v33[3] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)result = a2;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  v9 = (float32x2_t)vdup_n_s32(0x3FC3AB4Bu);
  do
  {
    v10 = (int32x2_t *)((char *)&_MergedGlobals_364 + v3 * 8);
    v10[10] = vrev64_s32((int32x2_t)vsub_f32(v9, v11));
    ++v3;
  }
  while (v3 != 10);
  v12 = 0;
  v13 = fminf(fmaxf(*(float *)&a2, 0.0), 1.0);
  v14 = fminf(fmaxf(*((float *)&a2 + 1), 0.0), 1.0);
  v15 = (float *)&dword_2541182DC;
  do
  {
    v16 = v15[20];
    *(float *)&v32[v12 * 4 + 4] = (float)(v13 * v15[19]) + (float)((float)(1.0 - v13) * *(v15 - 1));
    v17 = *v15;
    v15 += 2;
    v31[v12++] = (float)(v14 * v16) + (float)((float)(1.0 - v14) * v17);
  }
  while (v12 != 10);
  v18 = 1.5287;
  v19 = 1.5287;
  if (*(float *)&a2 < 1.0)
  {
    v19 = 1.0;
    if (*(float *)&a2 > 0.0)
      v19 = (float)(*(float *)&a2 * 0.52866) + 1.0;
  }
  if (*((float *)&a2 + 1) < 1.0)
  {
    v18 = 1.0;
    if (*((float *)&a2 + 1) > 0.0)
      v18 = (float)(*((float *)&a2 + 1) * 0.52866) + 1.0;
  }
  v20 = 0;
  v21 = v19 * a3;
  v22 = v18 * a3;
  v23 = -a3;
  v24 = (float *)v32;
  do
  {
    *(float *)&v25 = v21 + (float)(v23 * v31[v20]);
    v26 = *v24--;
    *((float *)&v25 + 1) = v22 + (float)(v23 * v26);
    *(_QWORD *)(result + 8 + 8 * v20++) = v25;
  }
  while (v20 != 5);
  v27 = 0;
  v28 = (float *)v33;
  do
  {
    v29 = *v28--;
    *(float *)&v30 = v21 + (float)(v23 * v29);
    *((float *)&v30 + 1) = v22 + (float)(v23 * *((float *)v33 + v27 + 1));
    *(_QWORD *)(result + 48 + 8 * v27++) = v30;
  }
  while (v27 != 5);
  return result;
}

float re::`anonymous namespace'::RoundedPatch::evalTangents(uint64_t a1, float32x4_t *a2, uint64_t a3, float a4, float a5)
{
  float v9;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float32x2_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x4_t v24;
  unsigned __int32 v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  int32x4_t v29;
  float32x2_t v30;
  float32x2_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x4_t v34;
  float v35;
  float32x4_t v37;
  float32x4_t v38;
  _QWORD v39[11];
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v9 = *(float *)(a1 + 92);
  if (v9 <= 0.0)
    a5 = 0.0;
  v13 = v12;
  v14 = *(float *)a1;
  v15 = 1.0;
  if (*(float *)a1 >= 1.0)
  {
    v15 = 1.5287;
  }
  else if (v14 > 0.0)
  {
    v15 = (float)(v14 * 0.52866) + 1.0;
  }
  v17 = 0uLL;
  if (sqrtf(vaddv_f32(vmul_f32(v16, v16))) > 0.0)
  {
    *(float32x2_t *)v17.f32 = v16;
    v18 = (int32x4_t)vmulq_f32(v17, v17);
    v18.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
    v19 = vrsqrte_f32((float32x2_t)v18.u32[0]);
    v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
    v17 = vmulq_n_f32(v17, vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]);
  }
  v21 = 0;
  v38 = v17;
  *a2 = v17;
  v40 = xmmword_226132900;
  v22 = 0uLL;
  do
  {
    *(float32x2_t *)v22.f32 = vadd_f32(*(float32x2_t *)v22.f32, vmul_n_f32((float32x2_t)v39[v21 + 1], *((float *)&v40 + v21)));
    ++v21;
  }
  while (v21 != 4);
  v23 = vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32);
  v24 = 0uLL;
  if (sqrtf(vaddv_f32(v23)) > 0.0)
  {
    v25 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)vmulq_f32(v22, v22), 2), vadd_f32(v23, (float32x2_t)vdup_lane_s32((int32x2_t)v23, 1))).u32[0];
    v26 = vrsqrte_f32((float32x2_t)v25);
    v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25, vmul_f32(v26, v26)));
    v24 = vmulq_n_f32(v22, vmul_f32(v27, vrsqrts_f32((float32x2_t)v25, vmul_f32(v27, v27))).f32[0]);
  }
  v37 = v24;
  if (sqrtf(vaddv_f32(vmul_f32(v28, v28))) <= 0.0)
  {
    v33 = 0;
    v32.i32[0] = 0;
  }
  else
  {
    v29 = (int32x4_t)vmulq_f32((float32x4_t)(unint64_t)v28, (float32x4_t)(unint64_t)v28);
    v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v29, 2), vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1))).u32[0];
    v30 = vrsqrte_f32((float32x2_t)v29.u32[0]);
    v31 = vmul_f32(v30, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v30, v30)));
    v32 = (int8x16_t)vmulq_n_f32((float32x4_t)(unint64_t)v28, vmul_f32(v31, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v31, v31))).f32[0]);
    v33 = (float32x2_t)vextq_s8(v32, v32, 4uLL).u64[0];
  }
  v34 = vmulq_f32(v38, v37);
  v34.f32[0] = fmaxf(fminf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0], 1.0), -1.0);
  v35 = sqrtf(1.0 - (float)(v34.f32[0] * v34.f32[0]));
  *(float *)a3 = vmuls_lane_f32(-v35, v33, 1) + (float)(v34.f32[0] * *(float *)v32.i32);
  *(float *)(a3 + 4) = vmuls_lane_f32(v34.f32[0], v33, 1) + (float)(v35 * *(float *)v32.i32);
  *(_DWORD *)(a3 + 8) = v33.i32[0];
  return v13;
}

float32_t re::`anonymous namespace'::computeGeometryForCanonicalCorner(re::GeomMesh &,re::GeomAttribute *,re::`anonymous namespace'::RoundedPatch const&,unsigned int,unsigned int,unsigned int)::$_0::operator()(uint64_t a1, _DWORD *a2, uint64_t a3, float32x4_t a4)
{
  float32x4_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;

  v4 = *(float32x4_t *)*(_QWORD *)a1;
  v5 = **(_DWORD **)(a1 + 16);
  v6 = (**(_DWORD **)(a1 + 8) + (**(_DWORD **)(a1 + 24) - 1) * v5);
  v7 = (v5 + v6 - 1);
  v8 = *(_DWORD **)(a1 + 32);
  *a2 = *v8;
  a2[1] = *v8;
  a2[2] = *v8;
  *(_OWORD *)a3 = xmmword_2260E5F10;
  if (v6 < v7)
  {
    a4 = vsubq_f32(a4, v4);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(unsigned int *)(v9 + 8);
    v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a4, (int32x4_t)a4), (int8x16_t)a4, 0xCuLL);
    v12 = vnegq_f32(a4);
    if (v10 <= v6)
      v13 = v6;
    else
      v13 = *(unsigned int *)(v9 + 8);
    v14 = 16 * v6 + 16;
    for (i = v6; ; ++i)
    {
      if (v13 == i)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_15:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v16 = i + 1;
      if (i + 1 >= v10)
        goto LABEL_15;
      v17 = *(float32x4_t *)*(_QWORD *)a1;
      v18 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)v9 + v14 - 16), v17);
      v19 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)v9 + v14), v17);
      v20 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL);
      v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL);
      v22 = vmulq_f32(vmlaq_f32(vmulq_f32(v20, v12), v18, v11), vmlaq_f32(vmulq_f32(v21, v12), v19, v11));
      if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), v22)).f32[0] < 0.0)
      {
        v23 = vmlaq_f32(vmulq_f32(v21, vnegq_f32(v18)), v19, v20);
        if (v23.f32[1] > 0.0)
          break;
      }
      v14 += 16;
      if (v7 == v16)
        return a4.f32[0];
    }
    *a2 = **(_DWORD **)(a1 + 32);
    a2[1] = i;
    a2[2] = i + 1;
    v24 = vsubq_f32(v18, a4);
    v25 = vsubq_f32(v19, a4);
    v26 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL);
    v24.i64[0] = vdivq_f32(vmlaq_f32(vmulq_f32(v26, vnegq_f32(v24)), v25, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL)), v23).u64[0];
    a4.i64[0] = vdivq_f32(vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), vnegq_f32(v25)), v26, a4), v23).u64[0];
    *(int32x2_t *)a3 = vzip2_s32(*(int32x2_t *)v24.f32, *(int32x2_t *)a4.f32);
    a4.f32[0] = (float)(1.0 - v24.f32[1]) - a4.f32[1];
    *(_DWORD *)(a3 + 8) = a4.i32[0];
  }
  return a4.f32[0];
}

float32x2_t re::`anonymous namespace'::BezierArc::eval(re::_anonymous_namespace_::BezierArc *this, float a2)
{
  double v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  char *v7;
  float32x2_t result;
  float v9[4];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = a2;
  if (a2 >= 0.333333333)
  {
    if (v2 >= 0.666666667)
    {
      v4 = (v2 + -0.666666667) * 3.0;
      v3 = 6;
    }
    else
    {
      v4 = (v2 + -0.333333333) * 3.0;
      v3 = 3;
    }
  }
  else
  {
    v3 = 0;
    v4 = a2 * 3.0;
  }
  v5 = 0;
  v6 = 1.0 - v4;
  v9[0] = v6 * (float)(v6 * v6);
  v9[1] = v4 * (float)((float)(v6 * v6) * 3.0);
  v9[2] = (float)(v4 * v4) * (float)((float)(1.0 - v4) * 3.0);
  v9[3] = v4 * (float)(v4 * v4);
  v7 = (char *)this + 8 * v3 + 8;
  result = 0;
  do
  {
    result = vadd_f32(result, vmul_n_f32(*(float32x2_t *)&v7[8 * v5], v9[v5]));
    ++v5;
  }
  while (v5 != 4);
  return result;
}

float32x2_t re::`anonymous namespace'::BezierArc::evalFirstDerivative(re::_anonymous_namespace_::BezierArc *this, float a2)
{
  double v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  char *v7;
  float32x2_t result;
  float v9[4];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = a2;
  if (a2 >= 0.333333333)
  {
    if (v2 >= 0.666666667)
    {
      v4 = (v2 + -0.666666667) * 3.0;
      v3 = 6;
    }
    else
    {
      v4 = (v2 + -0.333333333) * 3.0;
      v3 = 3;
    }
  }
  else
  {
    v3 = 0;
    v4 = a2 * 3.0;
  }
  v5 = 0;
  v6 = 1.0 - v4;
  v9[0] = (float)(v6 * v6) * -3.0;
  v9[1] = (float)((float)(v6 * v6) * 3.0) + (float)((float)((float)(1.0 - v4) * -6.0) * v4);
  v9[2] = (float)(v4 * (float)((float)(1.0 - v4) * 6.0)) + (float)((float)(v4 * v4) * -3.0);
  v9[3] = (float)(v4 * v4) * 3.0;
  v7 = (char *)this + 8 * v3 + 8;
  result = 0;
  do
  {
    result = vadd_f32(result, vmul_n_f32(*(float32x2_t *)&v7[8 * v5], v9[v5]));
    ++v5;
  }
  while (v5 != 4);
  return result;
}

uint64_t re::`anonymous namespace'::computeGeometryForInstancedFrontCorners(re::_anonymous_namespace_ *this, re::GeomMesh *a2, re::GeomAttribute *a3, unsigned int a4)
{
  unsigned int v5;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  unsigned int v23;
  re::GeomMesh *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  __int128 v53;
  int v54;
  float v55;
  int v56;
  float v57;
  __int128 v58;
  __int128 v59;
  float v60;
  int v61;
  float v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  int v73;
  uint64_t v74;
  float v75;
  int v76;
  uint64_t v77;
  float v78;
  __int128 v79;
  int v80;
  float v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  float v86;
  int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  re::GeomMesh *v97;
  unsigned int v98;

  v5 = a3;
  v8 = re::GeomMesh::modifyVertexPositions(this);
  v10 = v9;
  v98 = v12;
  v23 = v22;
  v24 = a2;
  if (a2)
  {
    result = (*(uint64_t (**)(re::GeomMesh *))(*(_QWORD *)a2 + 16))(a2);
    if ((_DWORD)result)
    {
      v26 = re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)a2, 0);
      result = (*(uint64_t (**)(re::GeomMesh *))(*(_QWORD *)a2 + 16))(a2);
      v27 = v26;
    }
    else
    {
      v27 = 0;
    }
    v28 = v98;
    v24 = a2;
  }
  else
  {
    v27 = 0;
    result = 0xFFFFFFFFLL;
    v28 = v98;
  }
  v93 = 2 * v5;
  v29 = 3 * v5;
  if (a4)
  {
    v30 = 0;
    v92 = v28;
    v97 = v24;
    v94 = a4;
    v31 = (float)((float)((float)v5 + -3.0) / (float)a4);
    v88 = 3 * v5;
    v89 = v5;
    v91 = v5 - 1;
    v90 = v29 - 1;
    do
    {
      if ((_DWORD)v31)
      {
        v32 = 0;
        v33 = 0;
        v34 = (v30 * v31);
        v35 = (v34 + v93);
        v95 = v30 + 1;
        v96 = v27 + 4 * v35;
        v36 = (v30 + 1) * v31;
        v37 = v13 + 16 * v35;
        if (v10 >= v34)
          v38 = v10 - v34;
        else
          v38 = 0;
        v39 = v11 + 16 * v35;
        if (v10 >= v35)
          v40 = v10 - v35;
        else
          v40 = 0;
        v41 = v8 + 16 * v35;
        if (v92 >= v34)
          v42 = v92 - v34;
        else
          v42 = 0;
        v43 = v27 + 4 * v34;
        if (v92 >= v35)
          v44 = v92 - v35;
        else
          v44 = 0;
        v45 = v23 - v34;
        v46 = v13 + 16 * v34;
        if (v23 < v34)
          v45 = 0;
        v47 = v23 - v35;
        if (v23 < v35)
          v47 = 0;
        v48 = v91 + v36;
        v49 = v90 + v36;
        v50 = v8 + 4 + 16 * v34;
        v51 = v11 + 4 + 16 * v34;
        do
        {
          if (v38 == v33)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_75:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_76:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_77:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_78:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_79:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_80:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_81:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_82:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_83:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_84:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_85:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_86:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_87:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_88:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_89:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_90:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_91:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_92:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_93:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_94:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_95:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_96:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_97:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_98:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_99:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_100:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_101:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_102:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_103:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_104:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_105:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (v48 >= v10)
            goto LABEL_75;
          LODWORD(v14) = *(_DWORD *)(v8 + 16 * v34 + v32);
          *(float *)&v16 = -*(float *)&v14;
          v52 = *(float *)(v50 + v32);
          v53 = v16;
          *((float *)&v53 + 1) = v52;
          v54 = *(_DWORD *)(v50 + v32 + 4);
          DWORD2(v53) = v54;
          *(_OWORD *)(v8 + 16 * v48) = v53;
          if (v40 == v33)
            goto LABEL_76;
          v55 = -v52;
          *((float *)&v16 + 1) = v55;
          DWORD2(v16) = v54;
          *(_OWORD *)(v41 + 16 * v33) = v16;
          if (v49 >= v10)
            goto LABEL_77;
          *((float *)&v14 + 1) = v55;
          DWORD2(v14) = v54;
          *(_OWORD *)(v8 + 16 * v49) = v14;
          if (v42 == v33)
            goto LABEL_78;
          if (v48 >= v28)
            goto LABEL_79;
          v57 = *(float *)(v51 + v32);
          v56 = *(_DWORD *)(v51 + v32 + 4);
          LODWORD(v17) = *(_DWORD *)(v11 + 16 * v34 + v32);
          v58 = v17;
          *((float *)&v58 + 1) = -v57;
          DWORD2(v58) = v56;
          *(_OWORD *)(v11 + 16 * v48) = v58;
          if (v44 == v33)
            goto LABEL_80;
          *(float *)&v17 = -*(float *)&v17;
          v59 = v17;
          *((float *)&v59 + 1) = -v57;
          DWORD2(v59) = v56;
          *(_OWORD *)(v39 + 16 * v33) = v59;
          if (v49 >= v28)
            goto LABEL_81;
          *((float *)&v17 + 1) = v57;
          DWORD2(v17) = v56;
          *(_OWORD *)(v11 + 16 * v49) = v17;
          if (v45 == v33)
            goto LABEL_82;
          if (v48 >= v23)
            goto LABEL_83;
          LODWORD(v14) = *(_DWORD *)(v46 + v32);
          v60 = *(float *)(v46 + v32 + 4);
          *(float *)&v16 = -*(float *)&v14;
          v18 = v16;
          *((float *)&v18 + 1) = v60;
          v61 = *(_DWORD *)(v46 + v32 + 8);
          DWORD2(v18) = v61;
          *(_OWORD *)(v13 + 16 * v48) = v18;
          if (v47 == v33)
            goto LABEL_84;
          v62 = -v60;
          *((float *)&v16 + 1) = v62;
          DWORD2(v16) = v61;
          *(_OWORD *)(v37 + 16 * v33) = v16;
          if (v49 >= v23)
            goto LABEL_85;
          *((float *)&v14 + 1) = v62;
          DWORD2(v14) = v61;
          *(_OWORD *)(v13 + 16 * v49) = v14;
          if (v97)
          {
            if (v34 + v33 >= result)
              goto LABEL_86;
            if (result <= v48)
              goto LABEL_87;
            *(_DWORD *)(v27 + 4 * v48) = *(_DWORD *)(v43 + 4 * v33);
            if ((unint64_t)(v34 + v93) + v33 >= result)
              goto LABEL_88;
            *(_DWORD *)(v96 + 4 * v33) = *(_DWORD *)(v43 + 4 * v33);
            if (result <= v49)
              goto LABEL_89;
            *(_DWORD *)(v27 + 4 * v49) = *(_DWORD *)(v43 + 4 * v33);
          }
          ++v33;
          --v48;
          --v49;
          v32 += 16;
          v28 = v98;
        }
        while (v31 != v33);
        v24 = v97;
        v63 = v95;
      }
      else
      {
        v63 = v30 + 1;
      }
      v30 = v63;
    }
    while (v63 != v94);
    v29 = v88;
    v5 = v89;
  }
  v64 = v29 - 1;
  v65 = 4 * v5 - 1;
  v66 = v93 - 1;
  v67 = v5 - 1;
  v68 = -3;
  do
  {
    v69 = (int)(float)((float)(v68 + 4) + -3.0);
    if (v68 == -3)
      v69 = 1;
    if (v67 >= v10)
      goto LABEL_90;
    if (v67 >= v98)
      goto LABEL_91;
    if (v67 >= v23)
      goto LABEL_92;
    v70 = (v66 - v69);
    if (v70 >= v10)
      goto LABEL_93;
    v71 = v8 + 16 * v67;
    LODWORD(v20) = *(_DWORD *)v71;
    v72 = *(float *)(v71 + 4);
    v73 = *(_DWORD *)(v71 + 8);
    v74 = v11 + 16 * v67;
    LODWORD(v19) = *(_DWORD *)v74;
    v75 = *(float *)(v74 + 4);
    v76 = *(_DWORD *)(v74 + 8);
    v77 = v13 + 16 * v67;
    LODWORD(v15) = *(_DWORD *)v77;
    v78 = *(float *)(v77 + 4);
    *(float *)&v21 = -*(float *)&v20;
    v79 = v21;
    *((float *)&v79 + 1) = v72;
    v80 = *(_DWORD *)(v77 + 8);
    DWORD2(v79) = v73;
    *(_OWORD *)(v8 + 16 * v70) = v79;
    if (v64 >= v10)
      goto LABEL_94;
    v81 = -v72;
    *((float *)&v21 + 1) = v81;
    DWORD2(v21) = v73;
    *(_OWORD *)(v8 + 16 * v64) = v21;
    v82 = (v65 - v69);
    if (v82 >= v10)
      goto LABEL_95;
    *((float *)&v20 + 1) = v81;
    DWORD2(v20) = v73;
    *(_OWORD *)(v8 + 16 * v82) = v20;
    if (v70 >= v98)
      goto LABEL_96;
    v83 = v19;
    *((float *)&v83 + 1) = -v75;
    DWORD2(v83) = v76;
    *(_OWORD *)(v11 + 16 * v70) = v83;
    if (v64 >= v98)
      goto LABEL_97;
    *(float *)&v19 = -*(float *)&v19;
    v84 = v19;
    *((float *)&v84 + 1) = -v75;
    DWORD2(v84) = v76;
    *(_OWORD *)(v11 + 16 * v64) = v84;
    if (v82 >= v98)
      goto LABEL_98;
    *((float *)&v19 + 1) = v75;
    DWORD2(v19) = v76;
    *(_OWORD *)(v11 + 16 * v82) = v19;
    if (v70 >= v23)
      goto LABEL_99;
    *(float *)&v18 = -*(float *)&v15;
    v85 = v18;
    *((float *)&v85 + 1) = v78;
    DWORD2(v85) = v80;
    *(_OWORD *)(v13 + 16 * v70) = v85;
    if (v64 >= v23)
      goto LABEL_100;
    v86 = -v78;
    *((float *)&v18 + 1) = v86;
    DWORD2(v18) = v80;
    *(_OWORD *)(v13 + 16 * v64) = v18;
    if (v82 >= v23)
      goto LABEL_101;
    *((float *)&v15 + 1) = v86;
    DWORD2(v15) = v80;
    *(_OWORD *)(v13 + 16 * v82) = v15;
    if (v24)
    {
      if (result <= v67)
        goto LABEL_102;
      if (result <= v70)
        goto LABEL_103;
      *(_DWORD *)(v27 + 4 * v70) = *(_DWORD *)(v27 + 4 * v67);
      if (result <= v64)
        goto LABEL_104;
      *(_DWORD *)(v27 + 4 * v64) = *(_DWORD *)(v27 + 4 * v67);
      if (result <= v82)
        goto LABEL_105;
      *(_DWORD *)(v27 + 4 * v82) = *(_DWORD *)(v27 + 4 * v67);
    }
    --v64;
    --v65;
    --v66;
    --v67;
  }
  while (!__CFADD__(v68++, 1));
  return result;
}

uint64_t re::`anonymous namespace'::translateCornerVertexPositions(uint64_t result, unsigned int a2, float32x4_t a3, float a4, float a5, float32x4_t a6)
{
  unint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v6 = 0;
    a6.f32[0] = a3.f32[0] * 0.5;
    v7 = a6;
    v7.f32[1] = a4 * 0.5;
    v8 = v7;
    a3.f32[0] = -(float)(a3.f32[0] * 0.5);
    v9 = a3;
    v9.f32[1] = a4 * 0.5;
    v10 = v9;
    a3.f32[1] = -(float)(a4 * 0.5);
    v11 = a3;
    a6.i32[1] = a3.i32[1];
    v12 = a6;
    do
    {
      if (v6 >= *(unsigned int *)(result + 8))
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_15:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_16:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_17:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_18:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_19:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_20:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v8.f32[2] = a5 * 0.5;
      *(float32x4_t *)(*(_QWORD *)result + 16 * v6) = vaddq_f32(v8, *(float32x4_t *)(*(_QWORD *)result + 16 * v6));
      if (a2 + v6 >= *(unsigned int *)(result + 8))
        goto LABEL_14;
      v10.f32[2] = a5 * 0.5;
      *(float32x4_t *)(*(_QWORD *)result + 16 * a2 + 16 * v6) = vaddq_f32(v10, *(float32x4_t *)(*(_QWORD *)result+ 16 * a2+ 16 * v6));
      if (2 * a2 + v6 >= *(unsigned int *)(result + 8))
        goto LABEL_15;
      v13 = *(_QWORD *)result + 32 * a2;
      v11.f32[2] = a5 * 0.5;
      *(float32x4_t *)(v13 + 16 * v6) = vaddq_f32(v11, *(float32x4_t *)(v13 + 16 * v6));
      if (3 * a2 + v6 >= *(unsigned int *)(result + 8))
        goto LABEL_16;
      v14 = *(_QWORD *)result + 48 * a2;
      v12.f32[2] = a5 * 0.5;
      *(float32x4_t *)(v14 + 16 * v6) = vaddq_f32(v12, *(float32x4_t *)(v14 + 16 * v6));
      if (4 * a2 + v6 >= *(unsigned int *)(result + 8))
        goto LABEL_17;
      v15 = *(_QWORD *)result + 64 * a2;
      a6.f32[2] = -(float)(a5 * 0.5);
      *(float32x4_t *)(v15 + 16 * v6) = vaddq_f32(a6, *(float32x4_t *)(v15 + 16 * v6));
      if (5 * a2 + v6 >= *(unsigned int *)(result + 8))
        goto LABEL_18;
      v16 = *(_QWORD *)result + 80 * a2;
      a3.f32[2] = -(float)(a5 * 0.5);
      *(float32x4_t *)(v16 + 16 * v6) = vaddq_f32(a3, *(float32x4_t *)(v16 + 16 * v6));
      if (6 * a2 + v6 >= *(unsigned int *)(result + 8))
        goto LABEL_19;
      v17 = *(_QWORD *)result + 96 * a2;
      v9.f32[2] = -(float)(a5 * 0.5);
      *(float32x4_t *)(v17 + 16 * v6) = vaddq_f32(v9, *(float32x4_t *)(v17 + 16 * v6));
      if (7 * a2 + v6 >= *(unsigned int *)(result + 8))
        goto LABEL_20;
      v18 = *(_QWORD *)result + 112 * a2;
      v7.f32[2] = -(float)(a5 * 0.5);
      *(float32x4_t *)(v18 + 16 * v6) = vaddq_f32(v7, *(float32x4_t *)(v18 + 16 * v6));
      ++v6;
    }
    while (a2 != v6);
  }
  return result;
}

uint64_t re::`anonymous namespace'::computeGeometryToStitchTwoRows(uint64_t result, uint64_t a2, unsigned int a3, _QWORD *a4, int a5, _QWORD *a6, int a7, _DWORD *a8)
{
  re::GeomMesh *v10;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  float v24;
  int v25;
  _DWORD *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v45;
  __int128 v46;
  __int128 v47;

  if (a3 >= 2)
  {
    v10 = (re::GeomMesh *)result;
    if (a2)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
      {
        v13 = re::internal::GeomTypedAttribute<float>::operator[](a2, 0);
        v14 = a2;
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      }
      else
      {
        v14 = a2;
        v13 = 0;
        v15 = 0;
      }
    }
    else
    {
      v14 = 0;
      v13 = 0;
      v15 = -1;
    }
    v16 = re::GeomMesh::modifyVertexPositions(v10);
    v45 = v17;
    v20 = v19;
    v22 = v21;
    v23 = 0;
    v24 = 1.0 / (float)a3;
    v25 = *((_DWORD *)a4 + 2);
    v26 = a8;
    v27 = *a8;
    v28 = a3 - 1;
    v29 = (uint64_t)a6;
    v30 = v14;
    while (1)
    {
      v31 = v23;
      v32 = a4[1];
      if (v32 <= v23)
        goto LABEL_33;
      v33 = *(_DWORD *)(*a4 + 4 * v23) + a5;
      if (v33 >= v45)
        goto LABEL_34;
      v34 = a6[1];
      if (v34 <= v31)
        goto LABEL_35;
      v35 = (*(_DWORD *)(*a6 + 4 * v31) + a7);
      if (v35 >= v45)
        goto LABEL_36;
      if (v35 >= v20)
        goto LABEL_37;
      v36 = *(float32x4_t *)(v16 + 16 * v33);
      v37 = *(float32x4_t *)(v16 + 16 * v35);
      v47 = *(_OWORD *)(v18 + 16 * v35);
      if (v35 >= v22)
        goto LABEL_38;
      v38 = 0;
      v46 = *(_OWORD *)(result + 16 * v35);
      v39 = v27;
      do
      {
        if (v39 >= v45)
        {
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_28:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_29:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_30:
          re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v31, v40);
          _os_crash();
          __break(1u);
LABEL_31:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_32:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_33:
          re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v31, v32);
          _os_crash();
          __break(1u);
LABEL_34:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_35:
          re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v31, v34);
          _os_crash();
          __break(1u);
LABEL_36:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_37:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_38:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(float32x4_t *)(v16 + 16 * v39) = vaddq_f32(vmulq_n_f32(v37, v24 * (float)(v38 + 1)), vmulq_n_f32(v36, 1.0 - (float)(v24 * (float)(v38 + 1))));
        if (v39 >= v20)
          goto LABEL_28;
        *(_OWORD *)(v18 + 16 * v39) = v47;
        if (v39 >= v22)
          goto LABEL_29;
        *(_OWORD *)(result + 16 * v39) = v46;
        if (v30)
        {
          v40 = a4[1];
          if (v40 <= v31)
            goto LABEL_30;
          v41 = *(_DWORD *)(*a4 + 4 * v31) + a5;
          if (v15 <= v41)
            goto LABEL_31;
          if (v15 <= v39)
            goto LABEL_32;
          *(_DWORD *)(v13 + 4 * v39) = *(_DWORD *)(v13 + 4 * v41);
        }
        ++v38;
        v39 += v25;
      }
      while (v28 != v38);
      ++v27;
      v23 = v31 + 1;
      if ((int)v31 + 1 > (v25 - 1))
      {
        *v26 += v28 * v25;
        return result;
      }
    }
  }
  return result;
}

re *re::`anonymous namespace'::computeUVsToStitchTwoRows(re *result, re::GeomMesh *a2, _QWORD *a3, int a4, _QWORD *a5, int a6, unsigned int *a7)
{
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  float v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  float32x2_t v25;
  float32x2_t v26;
  unsigned int v27;

  if (a2 >= 2)
  {
    v12 = a2;
    result = (re *)re::modifyVertexUVs(result, a2);
    v14 = 0;
    v15 = 1.0 / (float)v12;
    v16 = *((_DWORD *)a3 + 2);
    v17 = *a7;
    v18 = v12 - 1;
    while (1)
    {
      v19 = v14;
      v20 = a3[1];
      if (v20 <= v14)
        goto LABEL_14;
      v21 = *(_DWORD *)(*a3 + 4 * v14) + a4;
      if (v21 >= v13)
        goto LABEL_15;
      v22 = a5[1];
      if (v22 <= v19)
        goto LABEL_16;
      v23 = *(_DWORD *)(*a5 + 4 * v19) + a6;
      if (v23 >= v13)
        goto LABEL_17;
      v24 = 0;
      v25 = *(float32x2_t *)((char *)result + 8 * v21);
      v26 = *(float32x2_t *)((char *)result + 8 * v23);
      v27 = v17;
      do
      {
        if (v27 >= v13)
        {
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_14:
          re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v19, v20);
          _os_crash();
          __break(1u);
LABEL_15:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_16:
          re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v19, v22);
          _os_crash();
          __break(1u);
LABEL_17:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        ++v24;
        *((float32x2_t *)result + v27) = vadd_f32(vmul_n_f32(v26, v15 * (float)v24), vmul_n_f32(v25, 1.0 - (float)(v15 * (float)v24)));
        v27 += v16;
      }
      while (v18 != v24);
      ++v17;
      v14 = v19 + 1;
      if ((int)v19 + 1 > (v16 - 1))
      {
        *a7 += v18 * v16;
        return result;
      }
    }
  }
  return result;
}

unsigned int **re::`anonymous namespace'::computeUVsForSides(re::GeomMesh &,re::`anonymous namespace'::InternalBoxRoundedCornersOptions const&,unsigned int,re::Slice<unsigned int>,re::Slice<unsigned int>)::$_0::operator()(unsigned int **result, float a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int *v7;
  uint64_t v8;
  unsigned int *v9;

  v2 = **result;
  if (v2)
  {
    v3 = 0;
    v4 = *result[1];
    do
    {
      if (v4 != -1)
      {
        v5 = 0;
        v6 = *result[3];
        do
        {
          v7 = (int *)result[2];
          if (v7[2] <= v6)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(float *)&v8 = *(float *)result[4] * (float)v5;
          *((float *)&v8 + 1) = a2;
          *(_QWORD *)(*(_QWORD *)v7 + 8 * v6) = v8;
          v9 = result[3];
          v6 = *v9 + 1;
          *v9 = v6;
          ++v5;
          v4 = *result[1];
        }
        while (v5 < v4 + 1);
        v2 = **result;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

int **re::`anonymous namespace'::computeUVsForSides(re::GeomMesh &,re::`anonymous namespace'::InternalBoxRoundedCornersOptions const&,unsigned int,re::Slice<unsigned int>,re::Slice<unsigned int>)::$_1::operator()(int **result, unsigned int a2, float a3, float a4)
{
  float v4;
  int v5;
  unsigned int i;
  unsigned int v7;
  unsigned int v8;
  int *v9;
  uint64_t v10;
  unsigned int *v11;

  if (a2)
  {
    v4 = (float)(a4 - a3) / (float)((float)a2 + 1.0);
    v5 = **result;
    for (i = 1; i <= a2; ++i)
    {
      if (v5 != -1)
      {
        v7 = 0;
        v8 = *result[2];
        do
        {
          v9 = result[1];
          if (v9[2] <= v8)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(float *)&v10 = *(float *)result[3] * (float)v7;
          *((float *)&v10 + 1) = a3 + (float)((float)i * v4);
          *(_QWORD *)(*(_QWORD *)v9 + 8 * v8) = v10;
          v11 = (unsigned int *)result[2];
          v8 = *v11 + 1;
          *v11 = v8;
          ++v7;
          v5 = **result;
        }
        while (v7 < v5 + 1);
      }
    }
  }
  return result;
}

uint64_t re::`anonymous namespace'::normalizeUVs(re::GeomMesh &,re::`anonymous namespace'::InternalBoxRoundedCornersOptions const&)::$_0::operator()(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  float32x2_t v6;
  float32x2_t *v7;
  unsigned int v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v17;

  v3 = a3 - a2;
  if (a3 > a2)
  {
    v4 = *(unsigned int *)(result + 8);
    if (v4 > a2)
    {
      v5 = a2;
      v6 = *(float32x2_t *)(*(_QWORD *)result + 8 * a2);
      if (a2 + 1 >= a3)
      {
        v9 = *(float32x2_t *)(*(_QWORD *)result + 8 * a2);
LABEL_9:
        v11 = vsub_f32(v9, v6);
        __asm { FMOV            V3.2S, #1.0 }
        v17 = (float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v11), (int8x8_t)v11, _D3);
        while (v5 < *(unsigned int *)(result + 8))
        {
          *(float32x2_t *)(*(_QWORD *)result + 8 * v5) = vdiv_f32(vsub_f32(*(float32x2_t *)(*(_QWORD *)result + 8 * v5), v6), v17);
          ++v5;
          if (!--v3)
            return result;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      else
      {
        v7 = (float32x2_t *)(*(_QWORD *)result + 8 * a2 + 8);
        v8 = ~a2 + a3;
        v9 = *(float32x2_t *)(*(_QWORD *)result + 8 * a2);
        while (~(unint64_t)a2 + v4 > v3 - 2)
        {
          v10 = *v7++;
          v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v10, v6), (int8x8_t)v6, (int8x8_t)v10);
          v9 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v9, v10), (int8x8_t)v9, (int8x8_t)v10);
          if (!--v8)
            goto LABEL_9;
        }
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

void re::computeConvexHull2d(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *collection_u;
  char *v5;
  uint64_t v6;

  collection_u = (void *)geom_create_collection_u();
  geom_convex_hull_2f();
  *(_QWORD *)(a3 + 16) = 0;
  ++*(_DWORD *)(a3 + 24);
  v5 = (char *)geom_collection_data_u();
  v6 = geom_collection_size_u();
  re::DynamicArray<float>::copy((_QWORD *)a3, 0, v5, v6);
  os_release(collection_u);
}

_QWORD *re::computeSignedAreaOf2DPolygon(_QWORD *result, uint64_t a2, double a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v3 = result[1];
  LODWORD(a3) = 0;
  if (v3 >= 3)
  {
    v4 = (v3 - 1);
    if (v3 >= v3 - 1)
      v5 = v3 - 1;
    else
      v5 = result[1];
    if (v5 >= v4 - 1)
      v5 = v4 - 1;
    v6 = -v4;
    v7 = (float *)(*result + 8);
    v8 = 1;
    while (v3 != v5)
    {
      if (v3 == v8)
        goto LABEL_13;
      v9 = *(v7 - 2);
      v10 = *(v7 - 1);
      v12 = *v7;
      v11 = v7[1];
      v7 += 2;
      *(float *)&a3 = *(float *)&a3 + (float)((float)(v9 * v11) - (float)(v10 * v12));
      ++v8;
      if (v6 + v8 == 1)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, a3, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, result[1], v3);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v8, v3);
    result = (_QWORD *)_os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::GeomConnectivityManifold::e2eIndexFromHalfEdgeIndex(re::GeomConnectivityManifold *this, unsigned int a2)
{
  unsigned int v2;

  if (*((_QWORD *)this + 8) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * a2);
  return (v2 >> 28) & 3 | (4 * (v2 & 0xFFFFFFF));
}

uint64_t re::GeomConnectivityManifold::faceVertexDualHalfEdgeIndex(re::GeomConnectivityManifold *this, int a2, int a3)
{
  unint64_t v3;

  v3 = (a3 + 4 * a2);
  if (*((_QWORD *)this + 13) <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((_QWORD *)this + 15) + 4 * v3);
}

uint64_t re::GeomConnectivityManifold::faceVertexDualHalfEdge(re::GeomConnectivityManifold *this, int a2, int a3)
{
  unsigned int v4;

  v4 = re::GeomConnectivityManifold::faceVertexDualHalfEdgeIndex(this, a2, a3);
  if (*((_QWORD *)this + 8) <= (unint64_t)v4)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((_QWORD *)this + 10) + 4 * v4);
}

uint64_t re::GeomConnectivityManifold::halfEdgePreviousDual(re::GeomConnectivityManifold *a1, unsigned int a2, unsigned int *a3)
{
  unsigned int v5;
  unsigned int v6;

  if (*((_QWORD *)a1 + 3) <= (unint64_t)(a2 & 0xFFFFFFF))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(*((_QWORD *)a1 + 5) + 16 * (a2 & 0xFFFFFFF) + 12) == -1)
    v5 = 3;
  else
    v5 = 4;
  v6 = re::GeomConnectivityManifold::faceVertexDualHalfEdgeIndex(a1, a2 & 0xFFFFFFF, (v5 + ((a2 >> 28) & 3) - 1) % v5);
  *a3 = v6;
  if (*((_QWORD *)a1 + 8) <= (unint64_t)v6)
  {
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((_QWORD *)a1 + 10) + 4 * v6);
}

uint64_t re::GeomConnectivityManifold::halfEdgeStartVertex(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 24) <= (a2 & 0xFFFFFFF))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 16 * (a2 & 0xFFFFFFF) + 4 * ((a2 >> 28) & 3));
}

uint64_t re::GeomConnectivityManifold::halfEdgeEndVertex(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;

  if (*(_QWORD *)(a1 + 24) <= (unint64_t)(a2 & 0xFFFFFFF))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = ((a2 >> 28) & 3) + 1;
  v3 = *(_QWORD *)(a1 + 40) + 16 * (a2 & 0xFFFFFFF);
  if (*(_DWORD *)(v3 + 12) == -1)
    v4 = 3;
  else
    v4 = 4;
  if (v2 < v4)
    v4 = 0;
  return *(unsigned int *)(v3 + 4 * (v2 - v4));
}

uint64_t re::GeomConnectivityManifold::halfEdgeNextIndex(re::GeomConnectivityManifold *this, unsigned int a2)
{
  unsigned int v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  unsigned int v8;

  if (*((_QWORD *)this + 8) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  v3 = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * a2);
  v4 = v3 & 0xFFFFFFF;
  if (*((_QWORD *)this + 3) <= v4)
  {
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  v5 = ((v3 >> 28) & 3) + 1;
  if (*(_DWORD *)(*((_QWORD *)this + 5) + 16 * v4 + 12) == -1)
    v6 = 3;
  else
    v6 = 4;
  if (v5 < v6)
    v6 = 0;
  LODWORD(result) = re::GeomConnectivityManifold::faceVertexDualHalfEdgeIndex(this, v4, v5 - v6);
  if (*((_QWORD *)this + 8) <= (unint64_t)result)
  {
LABEL_14:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v8 = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * result);
  if ((v8 & 0x40000000) != 0)
    return result;
  else
    return re::GeomConnectivityManifold::faceVertexDualHalfEdgeIndex(this, v8 & 0xFFFFFFF, (v8 >> 28) & 3);
}

uint64_t re::GeomConnectivityManifold::halfEdgePreviousIndex(re::GeomConnectivityManifold *this, unsigned int a2)
{
  unsigned int v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t result;
  unsigned int v7;

  if (*((_QWORD *)this + 8) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  v3 = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * a2);
  v4 = v3 & 0xFFFFFFF;
  if (*((_QWORD *)this + 3) <= v4)
  {
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  if (*(_DWORD *)(*((_QWORD *)this + 5) + 16 * v4 + 12) == -1)
    v5 = 3;
  else
    v5 = 4;
  LODWORD(result) = re::GeomConnectivityManifold::faceVertexDualHalfEdgeIndex(this, v4, (v5 + ((v3 >> 28) & 3) - 1) % v5);
  if (*((_QWORD *)this + 8) <= (unint64_t)result)
  {
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * result);
  if ((v7 & 0x40000000) != 0)
    return result;
  else
    return re::GeomConnectivityManifold::faceVertexDualHalfEdgeIndex(this, v7 & 0xFFFFFFF, (v7 >> 28) & 3);
}

uint64_t re::GeomConnectivityManifold::halfEdgeDualIndex(re::GeomConnectivityManifold *this, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;

  if (*((_QWORD *)this + 8) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_7;
  }
  v2 = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * a2);
  if ((v2 & 0x40000000) == 0)
  {
    v3 = (v2 >> 28) & 3 | (4 * (v2 & 0xFFFFFFF));
    if (*((_QWORD *)this + 13) > v3)
      return *(unsigned int *)(*((_QWORD *)this + 15) + 4 * v3);
LABEL_7:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return a2;
}

uint64_t re::GeomConnectivityManifold::edgeVertices(re::GeomConnectivityManifold *this, unsigned int a2, unsigned int *a3)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t result;

  if (*((_QWORD *)this + 28) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *(unsigned int *)(*((_QWORD *)this + 30) + 4 * a2);
  if (*((_QWORD *)this + 8) <= v4)
    goto LABEL_5;
  v6 = *(unsigned int *)(*((_QWORD *)this + 10) + 4 * v4);
  *a3 = re::GeomConnectivityManifold::halfEdgeStartVertex((uint64_t)this, v6);
  result = re::GeomConnectivityManifold::halfEdgeEndVertex((uint64_t)this, v6);
  a3[1] = result;
  return result;
}

uint64_t re::GeomConnectivityManifold::fetchVertexOneRing(re::GeomConnectivityManifold *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int v6;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a3 + 16) = 0;
  ++*(_DWORD *)(a3 + 24);
  if (*((_QWORD *)a1 + 18) <= (unint64_t)a2)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_14:
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *(unsigned int *)(*((_QWORD *)a1 + 20) + 4 * a2);
  if (*((_QWORD *)a1 + 8) <= v4)
    goto LABEL_14;
  v6 = *(_DWORD *)(*((_QWORD *)a1 + 10) + 4 * v4);
  if ((v6 & 0x80000000) != 0)
  {
    if ((v6 & 0x40000000) != 0)
    {
      while (1)
      {
        LODWORD(v11) = re::GeomConnectivityManifold::halfEdgeEndVertex((uint64_t)a1, v6);
        re::DynamicArray<int>::add((_QWORD *)a3, &v11);
        v10 = re::GeomConnectivityManifold::halfEdgePreviousDual(a1, v6, (unsigned int *)&v11);
        if ((v10 & 0x80000000) == 0)
          break;
        v6 = v10;
        if ((v10 & 0x40000000) != 0)
        {
          LODWORD(v11) = re::GeomConnectivityManifold::halfEdgeStartVertex((uint64_t)a1, v10);
          re::DynamicArray<int>::add((_QWORD *)a3, &v11);
          return *(unsigned int *)(a3 + 16);
        }
      }
    }
    else
    {
      v8 = v6;
      do
      {
        if ((v8 & 0x80000000) == 0)
          break;
        v9 = v8;
        LODWORD(v11) = re::GeomConnectivityManifold::halfEdgeEndVertex((uint64_t)a1, v8);
        re::DynamicArray<int>::add((_QWORD *)a3, &v11);
        v8 = re::GeomConnectivityManifold::halfEdgePreviousDual(a1, v9, (unsigned int *)&v11);
      }
      while (v6 != v8);
    }
  }
  return *(unsigned int *)(a3 + 16);
}

uint64_t re::GeomConnectivityManifold::fetchVertexIncidentEdges(re::GeomConnectivityManifold *a1, unsigned int a2, _anonymous_namespace_ *this)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 2) = 0;
  ++*((_DWORD *)this + 6);
  v4 = a2;
  v5 = *((_QWORD *)a1 + 18);
  if (v5 <= a2)
  {
LABEL_15:
    v13 = 0;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 797;
    v18 = 2048;
    v19 = v4;
    v20 = 2048;
    v21 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  v12 = *(_DWORD *)(*((_QWORD *)a1 + 20) + 4 * a2);
  v5 = v12;
  v4 = *((_QWORD *)a1 + 8);
  if (v4 <= v12)
  {
LABEL_16:
    v13 = 0;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 797;
    v18 = 2048;
    v19 = v5;
    v20 = 2048;
    v21 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    v13 = 0;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 797;
    v18 = 2048;
    v19 = v5;
    v20 = 2048;
    v21 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v8 = *((_QWORD *)a1 + 10);
  v4 = *(unsigned int *)(v8 + 4 * v12);
  if ((v4 & 0x40000000) == 0)
  {
    v5 = *(unsigned int *)(v8 + 4 * v12);
    while (1)
    {
      v3 = v12;
      v9 = *((_QWORD *)a1 + 23);
      if (v9 <= v12)
        break;
      re::DynamicArray<int>::add(this, (_DWORD *)(*((_QWORD *)a1 + 25) + 4 * v12));
      v5 = re::GeomConnectivityManifold::halfEdgePreviousDual(a1, v5, &v12);
      if ((_DWORD)v4 == (_DWORD)v5)
        return *((unsigned int *)this + 4);
    }
    v13 = 0;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 797;
    v18 = 2048;
    v19 = v3;
    v20 = 2048;
    v21 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_14:
    v13 = 0;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 797;
    v18 = 2048;
    v19 = v5;
    v20 = 2048;
    v21 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v3 = *((_QWORD *)a1 + 23);
  if (v3 <= v12)
    goto LABEL_17;
  re::DynamicArray<int>::add(this, (_DWORD *)(*((_QWORD *)a1 + 25) + 4 * v12));
  do
  {
    v10 = re::GeomConnectivityManifold::halfEdgePreviousDual(a1, v4, &v12);
    v5 = v12;
    v3 = *((_QWORD *)a1 + 23);
    if (v3 <= v12)
      goto LABEL_14;
    v4 = v10;
    re::DynamicArray<int>::add(this, (_DWORD *)(*((_QWORD *)a1 + 25) + 4 * v12));
  }
  while ((v4 & 0x40000000) == 0);
  return *((unsigned int *)this + 4);
}

uint64_t re::GeomConnectivityManifold::fetchVertexIncidentFaces(re::GeomConnectivityManifold *a1, unsigned int a2, _anonymous_namespace_ *this)
{
  unint64_t v4;
  unsigned int v6;
  unsigned int v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 2) = 0;
  ++*((_DWORD *)this + 6);
  if (*((_QWORD *)a1 + 18) <= (unint64_t)a2)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_10:
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *(unsigned int *)(*((_QWORD *)a1 + 20) + 4 * a2);
  if (*((_QWORD *)a1 + 8) <= v4)
    goto LABEL_10;
  v6 = *(_DWORD *)(*((_QWORD *)a1 + 10) + 4 * v4);
  if ((v6 & 0x40000000) != 0)
  {
    do
    {
      LODWORD(v9) = v6 & 0xFFFFFFF;
      re::DynamicArray<int>::add(this, &v9);
      v6 = re::GeomConnectivityManifold::halfEdgePreviousDual(a1, v6, (unsigned int *)&v9);
    }
    while ((v6 & 0x40000000) == 0);
  }
  else
  {
    v7 = v6;
    do
    {
      LODWORD(v9) = v7 & 0xFFFFFFF;
      re::DynamicArray<int>::add(this, &v9);
      v7 = re::GeomConnectivityManifold::halfEdgePreviousDual(a1, v7, (unsigned int *)&v9);
    }
    while (v6 != v7);
  }
  return *((unsigned int *)this + 4);
}

uint64_t re::GeomConnectivityManifold::faceIncidentEdges(re::GeomConnectivityManifold *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (*((_QWORD *)this + 3) <= (unint64_t)a2)
  {
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = 0;
  if (*(_DWORD *)(*((_QWORD *)this + 5) + 16 * a2 + 12) == -1)
    v7 = 3;
  else
    v7 = 4;
  do
  {
    v8 = re::GeomConnectivityManifold::faceVertexDualHalfEdgeIndex(this, a2, v6);
    if (*((_QWORD *)this + 23) <= (unint64_t)v8)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_9;
    }
    a3[v6++] = *(_DWORD *)(*((_QWORD *)this + 25) + 4 * v8);
  }
  while (v7 != v6);
  return v7;
}

BOOL re::GeomConnectivityManifold::isBoundaryFace(re::GeomConnectivityManifold *this, unsigned int a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;

  if (*((_QWORD *)this + 3) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_DWORD *)(*((_QWORD *)this + 5) + 16 * a2 + 12) == -1)
    v4 = 3;
  else
    v4 = 4;
  if ((re::GeomConnectivityManifold::faceVertexDualHalfEdge(this, a2, 0) & 0x40000000) != 0)
    return 1;
  v5 = 1;
  do
  {
    v6 = v5;
    if (v4 == v5)
      break;
    v7 = re::GeomConnectivityManifold::faceVertexDualHalfEdge(this, a2, v5);
    v5 = v6 + 1;
  }
  while ((v7 & 0x40000000) == 0);
  return v6 < v4;
}

BOOL re::GeomConnectivityManifold::isCollapseEdgeSafe(re::GeomConnectivityManifold *this, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unsigned int v9;
  int v10;
  char isBoundaryVertex;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  char *v29;
  uint64_t v30;
  char *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int started;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int *v43;
  int v44;
  int v45;
  BOOL v47;
  BOOL v48;
  _BYTE v49[28];
  __int16 v50;
  _BYTE v51[10];
  _BYTE v52[12];
  __int16 v53;
  int v54;
  __int16 v55;
  unint64_t v56;
  __int16 v57;
  unint64_t v58;
  unsigned int v59[4];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = *((_QWORD *)this + 28);
  if (v6 <= a2)
  {
    *(_QWORD *)v52 = 0;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    *(_OWORD *)v59 = 0u;
    v60 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v49 = 136315906;
    *(_QWORD *)&v49[4] = "operator[]";
    *(_WORD *)&v49[12] = 1024;
    *(_DWORD *)&v49[14] = 797;
    *(_WORD *)&v49[18] = 2048;
    *(_QWORD *)&v49[20] = v5;
    v50 = 2048;
    *(_QWORD *)v51 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_102;
  }
  v6 = *(unsigned int *)(*((_QWORD *)this + 30) + 4 * a2);
  v2 = *((_QWORD *)this + 8);
  if (v2 <= v6)
  {
LABEL_102:
    *(_QWORD *)v52 = 0;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    *(_OWORD *)v59 = 0u;
    v60 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v49 = 136315906;
    *(_QWORD *)&v49[4] = "operator[]";
    *(_WORD *)&v49[12] = 1024;
    *(_DWORD *)&v49[14] = 797;
    *(_WORD *)&v49[18] = 2048;
    *(_QWORD *)&v49[20] = v6;
    v50 = 2048;
    *(_QWORD *)v51 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_103:
    *(_QWORD *)v52 = 0;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    *(_OWORD *)v59 = 0u;
    v60 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v49 = 136315906;
    *(_QWORD *)&v49[4] = "operator[]";
    *(_WORD *)&v49[12] = 1024;
    *(_DWORD *)&v49[14] = 797;
    *(_WORD *)&v49[18] = 2048;
    *(_QWORD *)&v49[20] = v5;
    v50 = 2048;
    *(_QWORD *)v51 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_104;
  }
  if ((*(_DWORD *)(*((_QWORD *)this + 10) + 4 * v6) & 0x80000000) == 0)
    return 0;
  re::GeomConnectivityManifold::edgeVertices(this, a2, v59);
  v6 = *((_QWORD *)this + 28);
  if (v6 <= v5)
    goto LABEL_103;
  v6 = *(unsigned int *)(*((_QWORD *)this + 30) + 4 * v5);
  v5 = *((_QWORD *)this + 8);
  if (v5 <= v6)
  {
LABEL_104:
    *(_QWORD *)v52 = 0;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    *(_OWORD *)v59 = 0u;
    v60 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v49 = 136315906;
    *(_QWORD *)&v49[4] = "operator[]";
    *(_WORD *)&v49[12] = 1024;
    *(_DWORD *)&v49[14] = 797;
    *(_WORD *)&v49[18] = 2048;
    *(_QWORD *)&v49[20] = v6;
    v50 = 2048;
    *(_QWORD *)v51 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_105:
    *(_QWORD *)v52 = 0;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    *(_OWORD *)v59 = 0u;
    v60 = 0u;
    v8 = v12;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v49 = 136315906;
    *(_QWORD *)&v49[4] = "operator[]";
    *(_WORD *)&v49[12] = 1024;
    *(_DWORD *)&v49[14] = 797;
    *(_WORD *)&v49[18] = 2048;
    *(_QWORD *)&v49[20] = v8;
    v50 = 2048;
    *(_QWORD *)v51 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    *(_OWORD *)v59 = 0u;
    v60 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v52 = 136315906;
    *(_QWORD *)&v52[4] = "operator[]";
    v53 = 1024;
    v54 = 789;
    v55 = 2048;
    v56 = v2;
    v57 = 2048;
    v58 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_107;
  }
  v2 = v59[0];
  v8 = v59[1];
  v4 = *(unsigned int *)(*((_QWORD *)this + 10) + 4 * v6);
  if ((v4 & 0x40000000) != 0)
  {
    v9 = -1;
    v10 = v4;
  }
  else
  {
    v9 = v4 & 0xFFFFFFF;
    v10 = re::GeomConnectivityManifold::faceVertexDualHalfEdge(this, v4 & 0xFFFFFFF, (v4 >> 28) & 3);
  }
  if (re::GeomConnectivityManifold::isBoundaryVertex(this, v2))
  {
    isBoundaryVertex = re::GeomConnectivityManifold::isBoundaryVertex(this, v8);
    if ((v4 & 0x40000000) == 0 && (isBoundaryVertex & 1) != 0)
      return 0;
  }
  v12 = v10 & 0xFFFFFFF;
  v3 = *((_QWORD *)this + 3);
  if (v3 <= v12)
    goto LABEL_105;
  v13 = *((_QWORD *)this + 5);
  if (*(_DWORD *)(v13 + 16 * v12 + 12) != -1)
    return 0;
  v16 = 0;
  *(_OWORD *)v59 = *(_OWORD *)(v13 + 16 * v12);
  while (1)
  {
    v17 = v59[v16];
    v18 = v17 == (_DWORD)v2 || v17 == (_DWORD)v8;
    if (!v18)
      break;
    if (++v16 == 3)
    {
      v17 = -1;
      break;
    }
  }
  if ((v4 & 0x40000000) != 0)
  {
    v4 = 0xFFFFFFFFLL;
  }
  else
  {
    v4 = v9;
    if (v3 <= v9)
      goto LABEL_110;
    if (*(_DWORD *)(v13 + 16 * v9 + 12) != -1)
      return 0;
    v19 = 0;
    *(_OWORD *)v59 = *(_OWORD *)(v13 + 16 * v9);
    while (1)
    {
      v4 = v59[v19];
      if ((_DWORD)v4 != (_DWORD)v2 && (_DWORD)v4 != (_DWORD)v8)
        break;
      if (++v19 == 3)
      {
        v4 = 0xFFFFFFFFLL;
        break;
      }
    }
    if (re::GeomConnectivityManifold::isCollapseEdgeSafe::$_0::operator()(this, v12) == 2
      || re::GeomConnectivityManifold::isCollapseEdgeSafe::$_0::operator()(this, v9) == 2)
    {
      return 0;
    }
  }
  *(_QWORD *)&v51[2] = 0;
  *(_QWORD *)v49 = 0;
  *(_QWORD *)&v49[8] = 0;
  v21 = *(unsigned int *)this;
  v22 = *((_QWORD *)this + 37);
  if ((v21 & 0x3F) != 0)
    v23 = (v21 >> 6) + 1;
  else
    v23 = v21 >> 6;
  *((_QWORD *)this + 37) = v21;
  *(_QWORD *)v59 = 0;
  re::DynamicOverflowArray<unsigned long long,3ul>::resize((re::GeomConnectivityManifold *)((char *)this + 248), v23, v59);
  if ((_DWORD)v21 && v22 > v21)
  {
    v24 = 63;
    v25 = *((_QWORD *)this + 37) & 0x3FLL;
    if (v25)
    {
      v18 = v25 == 63;
      v26 = -1 << v25;
      if (!v18)
        v24 = ~v26;
    }
    if ((*((_BYTE *)this + 264) & 1) != 0)
      v27 = (char *)this + 272;
    else
      v27 = (char *)*((_QWORD *)this + 35);
    *(_QWORD *)&v27[8 * *((_QWORD *)this + 32) - 8] &= v24;
  }
  v28 = *((_DWORD *)this + 66);
  if ((v28 & 1) != 0)
    v29 = (char *)this + 272;
  else
    v29 = (char *)*((_QWORD *)this + 35);
  v30 = *((_QWORD *)this + 32);
  while (1)
  {
    v31 = (char *)this + 272;
    if ((v28 & 1) == 0)
      v31 = (char *)*((_QWORD *)this + 35);
    if (v29 == &v31[8 * v30])
      break;
    *(_QWORD *)v29 = 0;
    v29 += 8;
    v28 = *((_DWORD *)this + 66);
  }
  *(_QWORD *)&v49[16] = 0;
  *(_DWORD *)&v49[24] = 1;
  v3 = *((_QWORD *)this + 18);
  if (v3 <= v2)
    goto LABEL_106;
  v2 = *(unsigned int *)(*((_QWORD *)this + 20) + 4 * v2);
  v3 = *((_QWORD *)this + 8);
  if (v3 <= v2)
  {
LABEL_107:
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    *(_OWORD *)v59 = 0u;
    v60 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v52 = 136315906;
    *(_QWORD *)&v52[4] = "operator[]";
    v53 = 1024;
    v54 = 789;
    v55 = 2048;
    v56 = v2;
    v57 = 2048;
    v58 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    *(_OWORD *)v59 = 0u;
    v60 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v52 = 136315906;
    *(_QWORD *)&v52[4] = "operator[]";
    v53 = 1024;
    v54 = 789;
    v55 = 2048;
    v56 = v8;
    v57 = 2048;
    v58 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_109;
  }
  v32 = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v2);
  if ((v32 & 0x40000000) != 0)
  {
    do
    {
      v35 = re::GeomConnectivityManifold::halfEdgeEndVertex((uint64_t)this, v32);
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 248, v35);
      v36 = re::GeomConnectivityManifold::halfEdgePreviousDual(this, v32, v59);
      v32 = v36;
    }
    while ((v36 & 0x40000000) == 0);
    started = re::GeomConnectivityManifold::halfEdgeStartVertex((uint64_t)this, v36);
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 248, started);
  }
  else
  {
    v33 = v32;
    do
    {
      v3 = v33;
      v34 = re::GeomConnectivityManifold::halfEdgeEndVertex((uint64_t)this, v33);
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 248, v34);
      v33 = re::GeomConnectivityManifold::halfEdgePreviousDual(this, v3, v59);
    }
    while (v32 != v33);
  }
  v2 = *((_QWORD *)this + 18);
  if (v2 <= v8)
    goto LABEL_108;
  v8 = *(unsigned int *)(*((_QWORD *)this + 20) + 4 * v8);
  v2 = *((_QWORD *)this + 8);
  if (v2 <= v8)
  {
LABEL_109:
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    *(_OWORD *)v59 = 0u;
    v60 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v52 = 136315906;
    *(_QWORD *)&v52[4] = "operator[]";
    v53 = 1024;
    v54 = 789;
    v55 = 2048;
    v56 = v8;
    v57 = 2048;
    v58 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    *(_QWORD *)v52 = 0;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    *(_OWORD *)v59 = 0u;
    v60 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v49 = 136315906;
    *(_QWORD *)&v49[4] = "operator[]";
    *(_WORD *)&v49[12] = 1024;
    *(_DWORD *)&v49[14] = 797;
    *(_WORD *)&v49[18] = 2048;
    *(_QWORD *)&v49[20] = v4;
    v50 = 2048;
    *(_QWORD *)v51 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v38 = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v8);
  *(_DWORD *)v52 = -1;
  if ((v38 & 0x40000000) != 0)
  {
    while (1)
    {
      *(_DWORD *)v52 = re::GeomConnectivityManifold::halfEdgeEndVertex((uint64_t)this, v38);
      if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 248, *(unsigned int *)v52))
        re::DynamicArray<int>::add(v49, v52);
      v41 = re::GeomConnectivityManifold::halfEdgePreviousDual(this, v38, v59);
      if ((v41 & 0x40000000) != 0)
        break;
      v38 = v41;
    }
    *(_DWORD *)v52 = re::GeomConnectivityManifold::halfEdgeStartVertex((uint64_t)this, v41);
    if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 248, *(unsigned int *)v52))
      re::DynamicArray<int>::add(v49, v52);
  }
  else
  {
    v39 = v38;
    do
    {
      v40 = v39;
      *(_DWORD *)v52 = re::GeomConnectivityManifold::halfEdgeEndVertex((uint64_t)this, v39);
      if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 248, *(unsigned int *)v52))
        re::DynamicArray<int>::add(v49, v52);
      v39 = re::GeomConnectivityManifold::halfEdgePreviousDual(this, v40, v59);
    }
    while (v38 != v39);
  }
  if (*(_QWORD *)&v49[16])
  {
    v42 = 4 * *(_QWORD *)&v49[16] - 4;
    v43 = *(int **)&v51[2];
    do
    {
      v45 = *v43++;
      v44 = v45;
      v14 = v45 == v17 || v44 == (_DWORD)v4;
      v47 = !v14 || v42 == 0;
      v42 -= 4;
    }
    while (!v47);
  }
  else
  {
    v14 = 1;
  }
  if (*(_QWORD *)v49)
    v48 = *(_QWORD *)&v51[2] == 0;
  else
    v48 = 1;
  if (!v48)
    (*(void (**)(void))(**(_QWORD **)v49 + 40))();
  return v14;
}

uint64_t re::GeomConnectivityManifold::isCollapseEdgeSafe(unsigned int)::$_0::operator()(_QWORD *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = (4 * a2);
  v3 = a1[13];
  if (v3 <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  v4 = a1[15];
  v5 = *(unsigned int *)(v4 + 4 * v2);
  v6 = a1[8];
  if (v6 <= v5)
  {
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  v7 = v2 | 1;
  if (v3 <= v7)
  {
LABEL_10:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  v8 = *(unsigned int *)(v4 + 4 * v7);
  if (v6 <= v8)
  {
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  v9 = v2 | 2;
  if (v3 <= v9)
  {
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v10 = *(unsigned int *)(v4 + 4 * v9);
  if (v6 <= v10)
    goto LABEL_13;
  return ((*(_DWORD *)(a1[10] + 4 * v8) >> 30) & 1)
       + ((*(_DWORD *)(a1[10] + 4 * v5) >> 30) & 1)
       + ((*(_DWORD *)(a1[10] + 4 * v10) >> 30) & 1u);
}

uint64_t re::GeomConnectivityManifold::glueHalfEdges(re::GeomConnectivityManifold *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t result;
  uint64_t v30;
  char v31;
  unsigned int v32;
  unint64_t v33;

  v3 = a2;
  v4 = *((_QWORD *)this + 8);
  if (v4 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_47:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_48;
  }
  if ((*(_DWORD *)(*((_QWORD *)this + 10) + 4 * a2) & 0x40000000) != 0)
  {
    v9 = -1;
  }
  else
  {
    v8 = re::GeomConnectivityManifold::e2eIndexFromHalfEdgeIndex(this, a2);
    if (*((_QWORD *)this + 13) <= (unint64_t)v8)
    {
LABEL_50:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_51;
    }
    v9 = *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v8);
    v4 = *((_QWORD *)this + 8);
  }
  if (v4 <= a3)
    goto LABEL_47;
  if ((*(_DWORD *)(*((_QWORD *)this + 10) + 4 * a3) & 0x40000000) != 0)
  {
    if (v9 != -1)
      goto LABEL_27;
  }
  else
  {
    v10 = re::GeomConnectivityManifold::e2eIndexFromHalfEdgeIndex(this, a3);
    if (*((_QWORD *)this + 13) <= (unint64_t)v10)
    {
LABEL_51:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_52;
    }
    v11 = *(unsigned int *)(*((_QWORD *)this + 15) + 4 * v10);
    if (v9 != -1 && (_DWORD)v11 != -1)
    {
      v12 = re::GeomConnectivityManifold::e2eIndexFromHalfEdgeIndex(this, v11);
      if (*((_QWORD *)this + 13) <= (unint64_t)v12)
      {
LABEL_56:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_57;
      }
      *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v12) = v9;
      v13 = re::GeomConnectivityManifold::e2eIndexFromHalfEdgeIndex(this, v9);
      if (*((_QWORD *)this + 13) <= (unint64_t)v13)
      {
LABEL_57:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_58;
      }
      *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v13) = v11;
      v14 = *((_QWORD *)this + 23);
      if (v14 <= a3)
      {
LABEL_58:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_59;
      }
      if (v14 <= v3)
      {
LABEL_59:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_60;
      }
      v15 = *((_QWORD *)this + 25);
      v16 = *(unsigned int *)(v15 + 4 * v3);
      v17 = *((_QWORD *)this + 28);
      if (v17 <= v16)
      {
LABEL_60:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_61;
      }
      v18 = *(unsigned int *)(v15 + 4 * a3);
      v19 = *((_QWORD *)this + 30);
      *(_DWORD *)(v19 + 4 * v16) = a2;
      if (v17 <= v18)
      {
LABEL_61:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_62;
      }
      *(_DWORD *)(v19 + 4 * v18) = v9;
      if (v14 <= v9)
      {
LABEL_62:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_63;
      }
      *(_DWORD *)(v15 + 4 * v9) = v18;
      if (v14 <= v11)
      {
LABEL_63:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_64;
      }
      *(_DWORD *)(v15 + 4 * v11) = v18;
LABEL_32:
      v26 = 1;
      goto LABEL_33;
    }
    if (v9 != -1)
    {
LABEL_27:
      v27 = re::GeomConnectivityManifold::e2eIndexFromHalfEdgeIndex(this, v9);
      if (*((_QWORD *)this + 13) <= (unint64_t)v27)
      {
LABEL_52:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_53;
      }
      *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v27) = v9;
      if (*((_QWORD *)this + 23) <= v3)
      {
LABEL_53:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_54;
      }
      v28 = *(unsigned int *)(*((_QWORD *)this + 25) + 4 * v3);
      if (*((_QWORD *)this + 28) <= v28)
      {
LABEL_54:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_55;
      }
      *(_DWORD *)(*((_QWORD *)this + 30) + 4 * v28) = v9;
      if (*((_QWORD *)this + 8) <= (unint64_t)v9)
      {
LABEL_55:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_56;
      }
      *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v9) |= 0x40000000u;
      goto LABEL_32;
    }
    if ((_DWORD)v11 != -1)
    {
      v32 = re::GeomConnectivityManifold::e2eIndexFromHalfEdgeIndex(this, v11);
      if (*((_QWORD *)this + 13) <= (unint64_t)v32)
      {
LABEL_68:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_69;
      }
      *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v32) = v11;
      if (*((_QWORD *)this + 23) <= (unint64_t)a3)
      {
LABEL_69:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_70;
      }
      v33 = *(unsigned int *)(*((_QWORD *)this + 25) + 4 * a3);
      if (*((_QWORD *)this + 28) <= v33)
      {
LABEL_70:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_71:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(*((_QWORD *)this + 30) + 4 * v33) = v11;
      if (*((_QWORD *)this + 8) <= v11)
        goto LABEL_71;
      v26 = 0;
      *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v11) |= 0x40000000u;
      goto LABEL_33;
    }
  }
  v20 = *((_QWORD *)this + 23);
  if (v20 <= v3)
  {
LABEL_64:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_65;
  }
  v21 = *((_QWORD *)this + 25);
  v22 = *(unsigned int *)(v21 + 4 * v3);
  v23 = *((_QWORD *)this + 28);
  if (v23 <= v22)
  {
LABEL_65:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_66;
  }
  v24 = *((_QWORD *)this + 30);
  *(_DWORD *)(v24 + 4 * v22) = a2;
  if (v20 <= a3)
  {
LABEL_66:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_67;
  }
  v25 = *(unsigned int *)(v21 + 4 * a3);
  if (v23 <= v25)
  {
LABEL_67:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_68;
  }
  v26 = 0;
  *(_DWORD *)(v24 + 4 * v25) = a2;
LABEL_33:
  if (*((_QWORD *)this + 8) <= (unint64_t)a3)
  {
LABEL_48:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_49;
  }
  result = re::GeomConnectivityManifold::halfEdgeStartVertex((uint64_t)this, *(unsigned int *)(*((_QWORD *)this + 10) + 4 * a3));
  if (*((_QWORD *)this + 18) <= (unint64_t)result)
  {
LABEL_49:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_50;
  }
  v30 = *((_QWORD *)this + 20);
  v31 = v26 ^ 1;
  if (*(_DWORD *)(v30 + 4 * result) != a3)
    v31 = 1;
  if ((v31 & 1) == 0)
    *(_DWORD *)(v30 + 4 * result) = v9;
  return result;
}

double re::GeomConnectivityManifold::replaceVertexInIncidentFaces(unsigned int,unsigned int,unsigned int,unsigned int,unsigned int)::$_0::operator()(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  int v9;
  double result;
  _OWORD v11[5];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = a2 & 0xFFFFFFF;
  if ((_DWORD)v2 != **(_DWORD **)a1 && (_DWORD)v2 != **(_DWORD **)(a1 + 8))
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v3 + 24) <= (unint64_t)v2)
    {
      memset(v11, 0, sizeof(v11));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v4 = *(_QWORD *)(v3 + 40) + 16 * v2;
    v11[0] = *(_OWORD *)v4;
    v5 = (a2 >> 28) & 3;
    if (HIDWORD(v11[0]) == -1)
      v6 = 3;
    else
      v6 = 4;
    if (v5 < v6)
      v6 = 0;
    v7 = HIDWORD(v11[0]) == -1;
    *((_DWORD *)v11 + v5 - v6) = **(_DWORD **)(a1 + 32);
    v8 = DWORD2(v11[0]);
    v9 = HIDWORD(v11[0]);
    if (v7)
      v9 = -1;
    result = *(double *)v11;
    *(_QWORD *)v4 = *(_QWORD *)&v11[0];
    *(_DWORD *)(v4 + 8) = v8;
    *(_DWORD *)(v4 + 12) = v9;
  }
  return result;
}

uint64_t re::GeomConnectivityManifold::collapseEdgeWithoutSafetyCheck(re::GeomConnectivityManifold *this, unsigned int a2, unsigned int *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __int128 *isBoundaryVertex;
  unint64_t v7;
  unint64_t v8;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  re::GeomConnectivityManifold *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t result;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int Index;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  _BYTE v40[40];
  _BYTE v41[12];
  __int16 v42;
  int v43;
  __int16 v44;
  unint64_t v45;
  __int16 v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  isBoundaryVertex = &v48;
  v53 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = *((_QWORD *)this + 28);
  if (v8 <= a2)
  {
    *(_QWORD *)v41 = 0;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    v12 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v40 = 136315906;
    *(_QWORD *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(_QWORD *)&v40[20] = v7;
    *(_WORD *)&v40[28] = 2048;
    *(_QWORD *)&v40[30] = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_62;
  }
  v11 = *((_QWORD *)this + 30);
  v12 = *(unsigned int *)(v11 + 4 * a2);
  Index = re::GeomConnectivityManifold::halfEdgeNextIndex(this, *(_DWORD *)(v11 + 4 * a2));
  v13 = re::GeomConnectivityManifold::halfEdgePreviousIndex(this, v12);
  v3 = *((_QWORD *)this + 8);
  if (v3 <= v12)
  {
LABEL_62:
    *(_QWORD *)v41 = 0;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    v15 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v40 = 136315906;
    *(_QWORD *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(_QWORD *)&v40[20] = v12;
    *(_WORD *)&v40[28] = 2048;
    *(_QWORD *)&v40[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_63:
    *(_QWORD *)v41 = 0;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v40 = 136315906;
    *(_QWORD *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 797;
    *(_WORD *)&v40[18] = 2048;
    *(_QWORD *)&v40[20] = v5;
    *(_WORD *)&v40[28] = 2048;
    *(_QWORD *)&v40[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_64:
    *(_QWORD *)v41 = 0;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v40 = 136315906;
    *(_QWORD *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(_QWORD *)&v40[20] = v3;
    *(_WORD *)&v40[28] = 2048;
    *(_QWORD *)&v40[30] = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_65;
  }
  v33 = v13;
  v32 = v7;
  v14 = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v12);
  v5 = v14 & 0xFFFFFFF;
  v15 = (v14 >> 28) & 3;
  if ((v14 & 0x40000000) != 0)
  {
    v7 = 0;
    v16 = -1;
    v4 = 0xFFFFFFFFLL;
    v30 = -1;
  }
  else
  {
    v4 = re::GeomConnectivityManifold::faceVertexDualHalfEdgeIndex(this, v14 & 0xFFFFFFF, (v14 >> 28) & 3);
    v30 = re::GeomConnectivityManifold::halfEdgeNextIndex(this, v4);
    v16 = re::GeomConnectivityManifold::halfEdgePreviousIndex(this, v4);
    v3 = v4;
    v7 = *((_QWORD *)this + 8);
    if (v7 <= v4)
    {
LABEL_74:
      *(_QWORD *)v41 = 0;
      isBoundaryVertex[3] = 0u;
      isBoundaryVertex[4] = 0u;
      isBoundaryVertex[1] = 0u;
      isBoundaryVertex[2] = 0u;
      v48 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v40 = 136315906;
      *(_QWORD *)&v40[4] = "operator[]";
      *(_WORD *)&v40[12] = 1024;
      *(_DWORD *)&v40[14] = 789;
      *(_WORD *)&v40[18] = 2048;
      *(_QWORD *)&v40[20] = v3;
      *(_WORD *)&v40[28] = 2048;
      *(_QWORD *)&v40[30] = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_75;
    }
    v7 = *(unsigned int *)(*((_QWORD *)this + 10) + 4 * v4);
  }
  v3 = *((_QWORD *)this + 3);
  if (v3 <= v5)
    goto LABEL_63;
  v48 = *(_OWORD *)(*((_QWORD *)this + 5) + 16 * v5);
  v3 = *(unsigned int *)((unint64_t)&v48 | (4 * v15));
  v17 = v15 + 1;
  if (HIDWORD(v48) == -1)
    v18 = 3;
  else
    v18 = 4;
  if (v17 < v18)
    v18 = 0;
  v15 = *((_QWORD *)this + 18);
  if (v15 <= v3)
    goto LABEL_64;
  v29 = v16;
  v31 = a3;
  v15 = *((unsigned int *)&v48 + v17 - v18);
  v19 = *(_DWORD *)(*((_QWORD *)this + 20) + 4 * v3);
  isBoundaryVertex = (__int128 *)re::GeomConnectivityManifold::isBoundaryVertex(this, v3);
  v20 = re::GeomConnectivityManifold::isBoundaryVertex(this, v15);
  v28 = v7;
  if ((v14 & 0x40000000) == 0)
  {
    if ((isBoundaryVertex & v20) == 1)
    {
      v7 = *((_QWORD *)this + 18);
      if (v7 <= v3)
      {
LABEL_81:
        *(_QWORD *)v41 = 0;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v48 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v40 = 136315906;
        *(_QWORD *)&v40[4] = "operator[]";
        *(_WORD *)&v40[12] = 1024;
        *(_DWORD *)&v40[14] = 789;
        *(_WORD *)&v40[18] = 2048;
        *(_QWORD *)&v40[20] = v3;
        *(_WORD *)&v40[28] = 2048;
        *(_QWORD *)&v40[30] = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_82;
      }
      v21 = *((_QWORD *)this + 20);
      if (*(_DWORD *)(v21 + 4 * v3) != v30)
        goto LABEL_38;
      if (v7 <= v15)
      {
LABEL_82:
        *(_QWORD *)v41 = 0;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v48 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v40 = 136315906;
        *(_QWORD *)&v40[4] = "operator[]";
        *(_WORD *)&v40[12] = 1024;
        *(_DWORD *)&v40[14] = 789;
        *(_WORD *)&v40[18] = 2048;
        *(_QWORD *)&v40[20] = v15;
        *(_WORD *)&v40[28] = 2048;
        *(_QWORD *)&v40[30] = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_83;
      }
      v19 = *(_DWORD *)(v21 + 4 * v15);
      if (v19 != Index)
        goto LABEL_38;
      v7 = v33;
      isBoundaryVertex = (__int128 *)*((_QWORD *)this + 8);
      if ((unint64_t)isBoundaryVertex <= v33)
      {
LABEL_84:
        *(_QWORD *)v41 = 0;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v48 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v40 = 136315906;
        *(_QWORD *)&v40[4] = "operator[]";
        *(_WORD *)&v40[12] = 1024;
        *(_DWORD *)&v40[14] = 789;
        *(_WORD *)&v40[18] = 2048;
        *(_QWORD *)&v40[20] = v7;
        *(_WORD *)&v40[28] = 2048;
        *(_QWORD *)&v40[30] = isBoundaryVertex;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_85;
      }
      if ((*(_DWORD *)(*((_QWORD *)this + 10) + 4 * v33) & 0x40000000) == 0)
      {
LABEL_36:
        v23 = this;
        v24 = v33;
        goto LABEL_37;
      }
    }
    else
    {
      if (!(_DWORD)isBoundaryVertex)
      {
        if (v20)
        {
          v7 = Index;
          isBoundaryVertex = (__int128 *)*((_QWORD *)this + 8);
          if ((unint64_t)isBoundaryVertex <= Index)
          {
LABEL_85:
            *(_QWORD *)v41 = 0;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v48 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v40 = 136315906;
            *(_QWORD *)&v40[4] = "operator[]";
            *(_WORD *)&v40[12] = 1024;
            *(_DWORD *)&v40[14] = 789;
            *(_WORD *)&v40[18] = 2048;
            *(_QWORD *)&v40[20] = v7;
            *(_WORD *)&v40[28] = 2048;
            *(_QWORD *)&v40[30] = isBoundaryVertex;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_86:
            *(_QWORD *)v41 = 0;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v48 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v40 = 136315906;
            *(_QWORD *)&v40[4] = "operator[]";
            *(_WORD *)&v40[12] = 1024;
            *(_DWORD *)&v40[14] = 789;
            *(_WORD *)&v40[18] = 2048;
            *(_QWORD *)&v40[20] = v15;
            *(_WORD *)&v40[28] = 2048;
            *(_QWORD *)&v40[30] = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if ((*(_DWORD *)(*((_QWORD *)this + 10) + 4 * Index) & 0x40000000) == 0)
          {
            v7 = *((_QWORD *)this + 18);
            if (v7 <= v15)
              goto LABEL_86;
            v19 = *(_DWORD *)(*((_QWORD *)this + 20) + 4 * v15);
            goto LABEL_38;
          }
        }
        goto LABEL_36;
      }
      v7 = *((_QWORD *)this + 18);
      if (v7 <= v3)
      {
LABEL_83:
        *(_QWORD *)v41 = 0;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v48 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v40 = 136315906;
        *(_QWORD *)&v40[4] = "operator[]";
        *(_WORD *)&v40[12] = 1024;
        *(_DWORD *)&v40[14] = 789;
        *(_WORD *)&v40[18] = 2048;
        *(_QWORD *)&v40[20] = v3;
        *(_WORD *)&v40[28] = 2048;
        *(_QWORD *)&v40[30] = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_84;
      }
      if (*(_DWORD *)(*((_QWORD *)this + 20) + 4 * v3) != v30)
        goto LABEL_38;
    }
    v23 = this;
    v24 = v29;
LABEL_37:
    v19 = re::GeomConnectivityManifold::halfEdgeDualIndex(v23, v24);
LABEL_38:
    v7 = v4;
    isBoundaryVertex = (__int128 *)*((_QWORD *)this + 8);
    if ((unint64_t)isBoundaryVertex <= v4)
    {
LABEL_76:
      *(_QWORD *)v41 = 0;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v40 = 136315906;
      *(_QWORD *)&v40[4] = "operator[]";
      *(_WORD *)&v40[12] = 1024;
      *(_DWORD *)&v40[14] = 789;
      *(_WORD *)&v40[18] = 2048;
      *(_QWORD *)&v40[20] = v7;
      *(_WORD *)&v40[28] = 2048;
      *(_QWORD *)&v40[30] = isBoundaryVertex;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_77;
    }
    v22 = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v4) & 0xFFFFFFF;
    goto LABEL_40;
  }
  v7 = *((_QWORD *)this + 18);
  if (v7 <= v15)
  {
LABEL_75:
    *(_QWORD *)v41 = 0;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v40 = 136315906;
    *(_QWORD *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(_QWORD *)&v40[20] = v15;
    *(_WORD *)&v40[28] = 2048;
    *(_QWORD *)&v40[30] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_76;
  }
  v19 = *(_DWORD *)(*((_QWORD *)this + 20) + 4 * v15);
  if (v19 == Index)
    v19 = re::GeomConnectivityManifold::halfEdgeDualIndex(this, v33);
  v22 = -1;
LABEL_40:
  v37 = v3;
  v38 = v15;
  v35 = v22;
  v36 = v14 & 0xFFFFFFF;
  *(_QWORD *)v40 = &v36;
  *(_QWORD *)&v40[8] = &v35;
  *(_QWORD *)&v40[16] = this;
  *(_QWORD *)&v40[24] = &v38;
  *(_QWORD *)&v40[32] = &v37;
  v7 = *((_QWORD *)this + 18);
  if (v7 <= v15)
  {
LABEL_65:
    v39 = 0;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v41 = 136315906;
    *(_QWORD *)&v41[4] = "operator[]";
    v42 = 1024;
    v43 = 789;
    v44 = 2048;
    v45 = v15;
    v46 = 2048;
    v47 = (_OWORD *)v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_66;
  }
  v7 = *(unsigned int *)(*((_QWORD *)this + 20) + 4 * v15);
  isBoundaryVertex = (__int128 *)*((_QWORD *)this + 8);
  if ((unint64_t)isBoundaryVertex <= v7)
  {
LABEL_66:
    v39 = 0;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    v12 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v41 = 136315906;
    *(_QWORD *)&v41[4] = "operator[]";
    v42 = 1024;
    v43 = 789;
    v44 = 2048;
    v45 = v7;
    v46 = 2048;
    v47 = isBoundaryVertex;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_67:
    *(_QWORD *)v41 = 0;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    v15 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v40 = 136315906;
    *(_QWORD *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(_QWORD *)&v40[20] = v12;
    *(_WORD *)&v40[28] = 2048;
    *(_QWORD *)&v40[30] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_68;
  }
  v25 = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v7);
  if ((v25 & 0x40000000) != 0)
  {
    do
    {
      re::GeomConnectivityManifold::replaceVertexInIncidentFaces(unsigned int,unsigned int,unsigned int,unsigned int,unsigned int)::$_0::operator()((uint64_t)v40, v25);
      v25 = re::GeomConnectivityManifold::halfEdgePreviousDual(this, v25, (unsigned int *)&v48);
    }
    while ((v25 & 0x40000000) == 0);
  }
  else
  {
    LODWORD(isBoundaryVertex) = v25;
    do
    {
      re::GeomConnectivityManifold::replaceVertexInIncidentFaces(unsigned int,unsigned int,unsigned int,unsigned int,unsigned int)::$_0::operator()((uint64_t)v40, isBoundaryVertex);
      isBoundaryVertex = (__int128 *)re::GeomConnectivityManifold::halfEdgePreviousDual(this, isBoundaryVertex, (unsigned int *)&v48);
    }
    while (v25 != (_DWORD)isBoundaryVertex);
  }
  v7 = *((_QWORD *)this + 8);
  if (v7 <= v12)
    goto LABEL_67;
  *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v12) &= ~0x80000000;
  v7 = Index;
  isBoundaryVertex = (__int128 *)*((_QWORD *)this + 8);
  if ((unint64_t)isBoundaryVertex <= Index)
  {
LABEL_68:
    *(_QWORD *)v41 = 0;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v40 = 136315906;
    *(_QWORD *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(_QWORD *)&v40[20] = v7;
    *(_WORD *)&v40[28] = 2048;
    *(_QWORD *)&v40[30] = isBoundaryVertex;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  *(_DWORD *)(*((_QWORD *)this + 10) + 4 * Index) &= ~0x80000000;
  v7 = v33;
  isBoundaryVertex = (__int128 *)*((_QWORD *)this + 8);
  if ((unint64_t)isBoundaryVertex <= v33)
  {
LABEL_69:
    *(_QWORD *)v41 = 0;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v40 = 136315906;
    *(_QWORD *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(_QWORD *)&v40[20] = v7;
    *(_WORD *)&v40[28] = 2048;
    *(_QWORD *)&v40[30] = isBoundaryVertex;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_70;
  }
  *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v33) &= ~0x80000000;
  result = re::GeomConnectivityManifold::glueHalfEdges(this, Index, v33);
  v7 = (4 * v5);
  v5 = *((_QWORD *)this + 13);
  if (v5 <= v7)
  {
LABEL_70:
    *(_QWORD *)v41 = 0;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v40 = 136315906;
    *(_QWORD *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(_QWORD *)&v40[20] = v7;
    *(_WORD *)&v40[28] = 2048;
    *(_QWORD *)&v40[30] = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_71:
    *(_QWORD *)v41 = 0;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v40 = 136315906;
    *(_QWORD *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(_QWORD *)&v40[20] = v15;
    *(_WORD *)&v40[28] = 2048;
    *(_QWORD *)&v40[30] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_72;
  }
  *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v7) = v12;
  if ((v14 & 0x40000000) == 0)
  {
    v7 = v4;
    v5 = *((_QWORD *)this + 8);
    if (v5 <= v4)
    {
LABEL_77:
      *(_QWORD *)v41 = 0;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v40 = 136315906;
      *(_QWORD *)&v40[4] = "operator[]";
      *(_WORD *)&v40[12] = 1024;
      *(_DWORD *)&v40[14] = 789;
      *(_WORD *)&v40[18] = 2048;
      *(_QWORD *)&v40[20] = v7;
      *(_WORD *)&v40[28] = 2048;
      *(_QWORD *)&v40[30] = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_78;
    }
    *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v4) &= ~0x80000000;
    v7 = v30;
    v5 = *((_QWORD *)this + 8);
    if (v5 <= v30)
    {
LABEL_78:
      *(_QWORD *)v41 = 0;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v40 = 136315906;
      *(_QWORD *)&v40[4] = "operator[]";
      *(_WORD *)&v40[12] = 1024;
      *(_DWORD *)&v40[14] = 789;
      *(_WORD *)&v40[18] = 2048;
      *(_QWORD *)&v40[20] = v7;
      *(_WORD *)&v40[28] = 2048;
      *(_QWORD *)&v40[30] = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_79;
    }
    *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v30) &= ~0x80000000;
    v7 = v29;
    v5 = *((_QWORD *)this + 8);
    if (v5 <= v29)
    {
LABEL_79:
      *(_QWORD *)v41 = 0;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v40 = 136315906;
      *(_QWORD *)&v40[4] = "operator[]";
      *(_WORD *)&v40[12] = 1024;
      *(_DWORD *)&v40[14] = 789;
      *(_WORD *)&v40[18] = 2048;
      *(_QWORD *)&v40[20] = v7;
      *(_WORD *)&v40[28] = 2048;
      *(_QWORD *)&v40[30] = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_80;
    }
    *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v29) &= ~0x80000000;
    result = re::GeomConnectivityManifold::glueHalfEdges(this, v30, v29);
    v7 = 4 * (v28 & 0xFFFFFFFu);
    v5 = *((_QWORD *)this + 13);
    if (v5 <= v7)
    {
LABEL_80:
      *(_QWORD *)v41 = 0;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v40 = 136315906;
      *(_QWORD *)&v40[4] = "operator[]";
      *(_WORD *)&v40[12] = 1024;
      *(_DWORD *)&v40[14] = 789;
      *(_WORD *)&v40[18] = 2048;
      *(_QWORD *)&v40[20] = v7;
      *(_WORD *)&v40[28] = 2048;
      *(_QWORD *)&v40[30] = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_81;
    }
    *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v7) = v4;
  }
  v7 = *((_QWORD *)this + 18);
  if (v7 <= v15)
    goto LABEL_71;
  v27 = *((_QWORD *)this + 20);
  *(_DWORD *)(v27 + 4 * v15) = v12;
  v15 = *((_QWORD *)this + 28);
  v4 = v32;
  if (v15 <= v32)
  {
LABEL_72:
    *(_QWORD *)v41 = 0;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v40 = 136315906;
    *(_QWORD *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(_QWORD *)&v40[20] = v4;
    *(_WORD *)&v40[28] = 2048;
    *(_QWORD *)&v40[30] = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_73;
  }
  *(_DWORD *)(*((_QWORD *)this + 30) + 4 * v32) = v12;
  *v31 = v3;
  if (v7 <= v3)
  {
LABEL_73:
    *(_QWORD *)v41 = 0;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v40 = 136315906;
    *(_QWORD *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(_QWORD *)&v40[20] = v3;
    *(_WORD *)&v40[28] = 2048;
    *(_QWORD *)&v40[30] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_74;
  }
  *(_DWORD *)(v27 + 4 * v3) = v19;
  return result;
}

re::GeomAttribute *re::addVertexUVs(re *this, re::GeomMesh *a2)
{
  re::GeomAttribute *result;

  result = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), "vertexUV");
  if (!result)
    return re::GeomMesh::addAttribute((uint64_t)this, "vertexUV", 1, 6);
  return result;
}

uint64_t re::accessVertexUVs(re *this, const re::GeomMesh *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), "vertexUV");
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2))
    return 0;
  v3 = re::internal::GeomTypedAttribute<double>::operator[](v2, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return v3;
}

uint64_t re::modifyVertexUVs(re *this, re::GeomMesh *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), "vertexUV");
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2))
    return 0;
  v3 = re::internal::GeomTypedAttribute<double>::operator[](v2, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return v3;
}

uint64_t re::buildExtrudedText(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::GeomMesh *v3;
  re::GeomAttribute *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  re::GeomAttribute *v11;
  _QWORD v13[2];
  unint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  int v18;
  re::GeomAttribute *v19;
  uint64_t v20;
  __int128 v21;
  _OWORD v22[44];
  uint64_t v23;
  _BYTE v24[12];
  __int16 v25;
  int v26;
  __int16 v27;
  re::GeomMesh *v28;
  __int16 v29;
  unint64_t v30;
  _DWORD v31[12];
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v13[0] = 0;
  v13[1] = 0;
  v15 = 0;
  v14 = 0;
  v19 = 0;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  v6 = DWORD2(v17);
  if (DWORD2(v17))
  {
    v7 = 0;
    v8 = 64;
    do
    {
      v9 = *((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1) <= v7)
      {
        *(_QWORD *)v24 = 0;
        memset(v22, 0, 64);
        v21 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v31[0] = 136315906;
        *(_QWORD *)&v31[1] = "operator[]";
        LOWORD(v31[3]) = 1024;
        *(_DWORD *)((char *)&v31[3] + 2) = 789;
        HIWORD(v31[4]) = 2048;
        *(_QWORD *)&v31[5] = v7;
        LOWORD(v31[7]) = 2048;
        *(_QWORD *)((char *)&v31[7] + 2) = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_12:
        v20 = 0;
        v32 = 0u;
        v33 = 0u;
        memset(v31, 0, sizeof(v31));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v24 = 136315906;
        *(_QWORD *)&v24[4] = "operator[]";
        v25 = 1024;
        v26 = 789;
        v27 = 2048;
        v28 = v3;
        v29 = 2048;
        v30 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v9 = v14;
      v3 = (re::GeomMesh *)*(unsigned int *)((char *)v19 + v8);
      if (v14 <= (unint64_t)v3)
        goto LABEL_12;
      v10 = (float32x4_t *)((char *)v19 + v8 - 64);
      v3 = (re::GeomMesh *)(v16 + 736 * v3);
      *(_QWORD *)&v21 = 0;
      DWORD2(v21) = 0;
      bzero(v22, 0x2C8uLL);
      re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)v22);
      v23 = 0;
      re::GeomMesh::copy(v3, (re::GeomMesh *)&v21);
      re::transform((re::GeomMesh *)&v21, v10);
      re::DynamicArray<re::GeomMesh>::add(a1, (re::GeomMesh *)&v21);
      re::GeomMesh::~GeomMesh((re::GeomMesh *)&v21, v11);
      ++v7;
      v8 += 80;
    }
    while (v6 != v7);
  }
  if (*((_QWORD *)&v16 + 1))
  {
    v5 = v19;
    if (v19)
      (*(void (**)(void))(**((_QWORD **)&v16 + 1) + 40))();
    v19 = 0;
    v17 = 0uLL;
    *((_QWORD *)&v16 + 1) = 0;
    ++v18;
  }
  return re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v13, v5);
}

void re::`anonymous namespace'::buildExtrudedText(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  re::GeomAttribute *v5;
  uint64_t (**v6)(re::_anonymous_namespace_::GlyphCache *__hidden, CFTypeRef, unint64_t);
  __int16 v7;
  CFTypeRef cf[2];
  _BYTE v9[44];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a3)
  {
  }
  else
  {
    v11 = v3;
    v12 = v4;
    v6 = &off_24ED72DD0;
    v7 = 0;
    *(_OWORD *)cf = 0u;
    memset(v9, 0, sizeof(v9));
    v10 = 0x7FFFFFFFLL;
    v6 = &off_24ED72DD0;
    if (cf[0])
      CFRelease(cf[0]);
  }
}

uint64_t re::buildExtrudedText(re *this, re::GeomMesh *a2, const re::GeomBuildExtrudedTextOptions *a3, re::GeomBuildExtrudedTextSupport *a4)
{
  unint64_t v4;
  re::GeomMesh *v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  re::GeomMesh *v11;
  uint64_t v12;
  re::GeomMesh *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t *v21;
  re::GeomAttribute *v22;
  re *v23;
  uint64_t v24;
  uint64_t *v25;
  re::GeomAttribute *v26;
  re::GeomAttribute *v27;
  _QWORD v29[2];
  re::GeomMesh *v30;
  int v31;
  __int128 v32;
  __int128 v33;
  int v34;
  unsigned int *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _BYTE __s[12];
  __int16 v44;
  int v45;
  __int16 v46;
  _BYTE v47[18];
  uint64_t v48;
  uint64_t v49;
  re::GeomMesh *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;
  __int16 v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v6 = (re::GeomMesh *)__s;
  v29[0] = 0;
  v29[1] = 0;
  v7 = &v37;
  v31 = 0;
  v30 = 0;
  v35 = 0;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v8 = *((_QWORD *)&v33 + 1);
  v9 = (__int128 *)DWORD2(v33);
  if (DWORD2(v33))
  {
    v10 = 0;
    v11 = 0;
    LODWORD(v12) = 0;
    v13 = v30;
    v14 = v35 + 16;
    while (*((_QWORD *)&v33 + 1) != v10)
    {
      v4 = *v14;
      if ((unint64_t)v30 <= v4)
        goto LABEL_29;
      v15 = v32 + 736 * v4;
      v11 = (re::GeomMesh *)(*(_DWORD *)(v15 + 16) + (_DWORD)v11);
      v12 = (v12 + *(_DWORD *)(v15 + 40));
      ++v10;
      v14 += 20;
      if (DWORD2(v33) == v10)
        goto LABEL_8;
    }
    v57 = 0;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__s = 136315906;
    *(_QWORD *)&__s[4] = "operator[]";
    v44 = 1024;
    v45 = 789;
    v46 = 2048;
    *(_QWORD *)v47 = v8;
    *(_WORD *)&v47[8] = 2048;
    *(_QWORD *)&v47[10] = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_29:
    v57 = 0;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__s = 136315906;
    *(_QWORD *)&__s[4] = "operator[]";
    v44 = 1024;
    v45 = 789;
    v46 = 2048;
    *(_QWORD *)v47 = v4;
    *(_WORD *)&v47[8] = 2048;
    *(_QWORD *)&v47[10] = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_30:
    v53 = 0;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v57) = 136315906;
    *(_QWORD *)((char *)v13 + 52) = "operator[]";
    v58 = 1024;
    *(_DWORD *)((char *)v13 + 62) = 789;
    v59 = 2048;
    *(_QWORD *)((char *)v13 + 68) = v7;
    v60 = 2048;
    *(_QWORD *)((char *)v13 + 78) = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_31:
    v36 = 0;
    *((_OWORD *)v13 + 6) = 0u;
    *((_OWORD *)v13 + 7) = 0u;
    *((_OWORD *)v13 + 4) = 0u;
    *((_OWORD *)v13 + 5) = 0u;
    *((_OWORD *)v13 + 3) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v53) = 136315906;
    *(_QWORD *)((char *)v13 + 4) = "operator[]";
    v54 = 1024;
    *(_DWORD *)((char *)v13 + 14) = 789;
    v55 = 2048;
    *(_QWORD *)((char *)v13 + 20) = v6;
    v56 = 2048;
    *(_QWORD *)((char *)v13 + 30) = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v12 = 0;
  v11 = 0;
LABEL_8:
  bzero(__s, 0x2D0uLL);
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&__s[8]);
  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v48, "vertexPosition", 1, 7);
  if (v49)
  {
    v6 = v50;
    v16 = 8 * v49;
    do
    {
      v17 = *(_QWORD *)v6;
      v6 = (re::GeomMesh *)((char *)v6 + 8);
      (*(void (**)(uint64_t, re::GeomMesh *))(*(_QWORD *)v17 + 80))(v17, v11);
      v16 -= 8;
    }
    while (v16);
  }
  if (*(_QWORD *)&v47[4] < (unint64_t)v12)
    re::DynamicArray<re::BlendNode>::setCapacity((int *)((char *)&v45 + 2), v12);
  if (v51)
  {
    v18 = v52;
    v6 = (re::GeomMesh *)(8 * v51);
    do
    {
      v19 = *v18++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 80))(v19, v12);
      v6 = (re::GeomMesh *)((char *)v6 - 8);
    }
    while (v6);
  }
  if (v9)
  {
    v7 = 0;
    v13 = (re::GeomMesh *)&v53;
    v20 = 16;
    do
    {
      v11 = (re::GeomMesh *)*((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1) <= (unint64_t)v7)
        goto LABEL_30;
      v11 = v30;
      v6 = (re::GeomMesh *)v35[v20];
      if (v30 <= v6)
        goto LABEL_31;
      v21 = (float32x4_t *)&v35[v20 - 16];
      v6 = (re::GeomMesh *)(v32 + 736 * v6);
      *(_QWORD *)&v37 = 0;
      DWORD2(v37) = 0;
      bzero(&v38, 0x2C8uLL);
      re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v38);
      v42 = 0;
      re::GeomMesh::copy(v6, (re::GeomMesh *)&v37);
      re::transform((re::GeomMesh *)&v37, v21);
      re::GeomMeshBuilder::appendMesh((re::GeomMeshBuilder *)__s, (const re::GeomMesh *)&v37);
      re::GeomMesh::~GeomMesh((re::GeomMesh *)&v37, v22);
      v7 = (__int128 *)((char *)v7 + 1);
      v20 += 20;
    }
    while (v9 != v7);
  }
  re::GeomMesh::GeomMesh((re::GeomMesh *)&v37, 0);
  re::GeomMesh::operator=((uint64_t)&v37, &__s[8]);
  v23 = re::GeomMesh::setName((re *)&v37, *(const char **)__s);
  v24 = *(_QWORD *)__s;
  if (*(_QWORD *)__s)
  {
    v25 = re::globalAllocators(v23);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25[2] + 40))(v25[2], v24);
    *(_QWORD *)__s = 0;
  }
  re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)__s);
  re::GeomMesh::operator=((uint64_t *)this, (uint64_t *)&v37);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)&v37, v26);
  if (*((_QWORD *)&v32 + 1))
  {
    v27 = (re::GeomAttribute *)v35;
    if (v35)
      (*(void (**)(void))(**((_QWORD **)&v32 + 1) + 40))();
    v35 = 0;
    v33 = 0uLL;
    *((_QWORD *)&v32 + 1) = 0;
    ++v34;
  }
  return re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v29, v27);
}

uint64_t re::buildExtrudedText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  re::GeomAttribute *v6;
  _QWORD v8[3];
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  re::GeomAttribute *v13;

  memset(v8, 0, sizeof(v8));
  v9 = 0;
  v13 = 0;
  v10 = 0u;
  v11 = 0u;
  v12 = 0;
  re::DynamicArray<re::GeomMesh>::operator=(a1, (uint64_t)v8);
  re::DynamicArray<re::GeomMesh>::operator=(a2, (uint64_t)&v10 + 8);
  if (*((_QWORD *)&v10 + 1))
  {
    v6 = v13;
    if (v13)
      (*(void (**)(void))(**((_QWORD **)&v10 + 1) + 40))();
    v13 = 0;
    v11 = 0uLL;
    *((_QWORD *)&v10 + 1) = 0;
    ++v12;
  }
  return re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v8, v6);
}

uint64_t re::DynamicArray<re::GeomMesh>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result != a2)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)a2;
    if (*(_QWORD *)result)
      v4 = v3 == 0;
    else
      v4 = 1;
    if (v4 || v2 == v3)
    {
      v6 = *(_QWORD *)(result + 8);
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)result = v3;
      *(_QWORD *)(result + 8) = v7;
      *(_QWORD *)a2 = v2;
      *(_QWORD *)(a2 + 8) = v6;
      v8 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v8;
      v9 = *(_QWORD *)(result + 32);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::`anonymous namespace'::computeFrameSizeHelper(const char *a1, const char *a2, char a3, float a4, float a5)
{
  const __CFString *v9;
  const __CFString *v10;
  CTFontRef v11;
  CTFontRef v12;
  re::_anonymous_namespace_ *AttributeString;
  const __CFAttributedString *v14;
  re::_anonymous_namespace_ *v15;
  float v16;
  float32x2_t v17;
  float32x2_t v18;
  float v20;

  v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, 0x8000100u);
  if (!v9)
    return 0;
  v10 = v9;
  v11 = CTFontCreateWithName(v9, 1.0, 0);
  if (v11)
  {
    v12 = v11;
    if (AttributeString)
    {
      v15 = AttributeString;
      v16 = 12.0;
      if (a4 > 0.0)
        v16 = a4;
      v20 = v16;
      v18 = vmul_n_f32(v17, v20);
      CFRelease(v15);
    }
    else
    {
      v18 = 0;
    }
    CFRelease(v12);
  }
  else
  {
    v18 = 0;
  }
  CFRelease(v10);
  return (uint64_t)v18;
}

double re::GeomBuildExtrudedTextOptions::getFontMetrics(re::GeomBuildExtrudedTextOptions *this, const char *a2, float a3)
{
  const __CFString *v4;
  const __CFString *v5;
  const __CTFont *v6;
  const __CTFont *v7;
  CGFloat Descent;
  float64x2_t v9;
  float64x2_t v10;
  float32x4_t v11;
  float v12;
  CGFloat XHeight;
  CGFloat CapHeight;
  CGFloat Ascent;
  double v17;

  v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)this, 0x8000100u);
  if (!v4)
    return 0.0;
  v5 = v4;
  v6 = CTFontCreateWithName(v4, 1.0, 0);
  if (v6)
  {
    v7 = v6;
    Ascent = CTFontGetAscent(v6);
    CapHeight = CTFontGetCapHeight(v7);
    XHeight = CTFontGetXHeight(v7);
    Descent = CTFontGetDescent(v7);
    v9.f64[0] = XHeight;
    v9.f64[1] = Descent;
    v10.f64[0] = Ascent;
    v10.f64[1] = CapHeight;
    v11 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v10), v9);
    v12 = 12.0;
    if (a3 > 0.0)
      v12 = a3;
    *(_QWORD *)&v17 = vmulq_n_f32(v11, v12).u64[0];
    CFRelease(v7);
  }
  else
  {
    v17 = 0.0;
  }
  CFRelease(v5);
  return v17;
}

uint64_t re::`anonymous namespace'::buildScene(unint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v4;
  float32x4_t v5;
  float v6;
  float v7;
  const char *v8;
  const __CFString *v9;
  CTFontRef v10;
  uint8x8_t v11;
  CTFontRef v12;
  int32x2_t v13;
  int v14;
  int16x8_t v15;
  const char *v16;
  re::_anonymous_namespace_ *AttributeString;
  const __CFAttributedString *v18;
  const __CFAttributedString *v19;
  float32x2_t v20;
  CGPathRef v21;
  const CGPath *v22;
  CFIndex Length;
  CTFramesetterRef v24;
  const __CTFramesetter *v25;
  const __CFDictionary *v26;
  const __CTFrame *Frame;
  unint64_t v28;
  float32x4_t v29;
  unint64_t v30;
  float32x4_t v31;
  unint64_t Count;
  BOOL v33;
  CGPoint *v34;
  unint64_t v35;
  CGPoint *v36;
  CFIndex v37;
  unsigned int v38;
  unint64_t v39;
  const __CTLine *ValueAtIndex;
  const __CFArray *GlyphRuns;
  uint64_t v42;
  CFIndex i;
  const __CTRun *v44;
  double v45;
  CFIndex v46;
  uint64_t v47;
  CGFloat *p_y;
  float v49;
  const __CTLine *v50;
  double v51;
  float v52;
  int v53;
  unint64_t v54;
  float v55;
  float v56;
  float v57;
  uint64_t result;
  CFIndex v59;
  const __CTLine *v60;
  CFIndex v61;
  const __CTRun *v62;
  const __CFDictionary *Attributes;
  const __CTFont *Value;
  unint64_t GlyphCount;
  CFHashCode v66;
  unint64_t v67;
  CGPoint *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _anonymous_namespace_ *v75;
  CGGlyph v76;
  re::GeomMesh *v77;
  float32x4_t v78;
  unint64_t v79;
  re::GeomAttribute *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float32x4_t v85;
  float32x4_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  CFTypeRef v93;
  CFHashCode v94;
  unint64_t v95;
  CGPoint *v96;
  __int128 v97;
  double y;
  CGPoint *v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  BOOL v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  const __CTFrame *cf;
  const __CTFont *v113;
  const __CFAttributedString *v114;
  void *key;
  uint64_t v116;
  const __CFArray *v117;
  CFIndex v118;
  const __CFArray *theArray;
  int32x4_t v120;
  _anonymous_namespace_ *v121;
  const __CTFont *font;
  unint64_t v123;
  float32x4_t v124;
  float32x4_t v125;
  const __CTRun *v126;
  CFHashCode v127;
  CFStringRef v128;
  unint64_t range;
  float32x4_t v131;
  int32x2_t v132;
  float32x4_t v133;
  CGGlyph v135;
  CFTypeRef v136;
  CFHashCode v137;
  unint64_t v138;
  _QWORD v139[2];
  unint64_t v140;
  int v141;
  CGPoint *v142;
  _QWORD v143[2];
  unint64_t v144;
  int v145;
  CGGlyph *buffer;
  _QWORD v147[2];
  unint64_t v148;
  int v149;
  CGPoint *origins;
  _DWORD v151[3];
  __int128 v152;
  __int128 v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int v159;
  uint64_t v160;
  float32x4_t v161;
  float32x4_t v162;
  uint64_t v163;
  void *keys[2];
  float32x4_t v165;
  float32x4_t v166;
  __int128 v167;
  __int128 v168[42];
  float32x4_t v169;
  float32x4_t v170;
  _BYTE v171[12];
  __int16 v172;
  int v173;
  __int16 v174;
  uint64_t v175;
  __int16 v176;
  uint64_t v177;
  float32x4_t values[3];
  __int128 v179;
  __int128 v180;
  _BYTE v181[48];
  __int128 v182;
  uint64_t v183;
  CFRange v184;
  CFRange v185;
  CFRange v186;
  CFRange v187;
  CFRange v188;
  CGRect v189;
  CGRect BoundsWithOptions;

  v183 = *MEMORY[0x24BDAC8D0];
  v4 = &v152;
  v5.i64[0] = 0x7F0000007FLL;
  v5.i64[1] = 0x7F0000007FLL;
  v161 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  v162 = v5;
  v160 = 0;
  v158 = 0;
  v156 = 0;
  v157 = 0;
  v159 = 0;
  v154 = 0;
  v152 = 0u;
  v153 = 0u;
  v155 = 0x7FFFFFFFLL;
  v6 = *(float *)(a2 + 88);
  v7 = *(float *)(a2 + 92);
  if ((*(_QWORD *)(a2 + 40) & 1) != 0)
    v8 = *(const char **)(a2 + 48);
  else
    v8 = (const char *)(a2 + 41);
  v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v8, 0x8000100u);
  v10 = CTFontCreateWithName(v9, 1.0, 0);
  v12 = v10;
  v13.i32[0] = 12.0;
  if (*(float *)(a2 + 64) > 0.0)
    v13.i32[0] = *(_DWORD *)(a2 + 64);
  v14 = *(unsigned __int8 *)(a2 + 72);
  v151[1] = 1065353216;
  v151[0] = v14;
  v11.i32[0] = *(_DWORD *)(a2 + 99);
  v15 = (int16x8_t)vmovl_u8(v11);
  *(int8x8_t *)v15.i8 = vext_s8(*(int8x8_t *)v15.i8, *(int8x8_t *)v15.i8, 4uLL);
  v151[2] = vmovn_s16(v15).u32[0];
  if (!v9 || !v10)
  {
LABEL_61:
    if (!v9)
      goto LABEL_63;
    goto LABEL_62;
  }
  v132 = v13;
  if ((*(_QWORD *)(a2 + 8) & 1) != 0)
    v16 = *(const char **)(a2 + 16);
  else
    v16 = (const char *)(a2 + 9);
  if (AttributeString)
  {
    v19 = AttributeString;
    if ((float)(v6 * v7) == 0.0)
    else
      v20 = vdiv_f32(*(float32x2_t *)(a2 + 88), (float32x2_t)vdup_lane_s32(v132, 0));
    v189.size.width = v20.f32[0];
    v189.size.height = v20.f32[1];
    v189.origin.x = 0.0;
    v189.origin.y = 0.0;
    v21 = CGPathCreateWithRect(v189, 0);
    v114 = v19;
    if (v21)
    {
      v22 = v21;
      Length = CFAttributedStringGetLength(v19);
      v24 = CTFramesetterCreateWithAttributedString(v19);
      if (v24)
      {
        v25 = v24;
        keys[0] = *(void **)MEMORY[0x24BDC4EF0];
        values[0].i64[0] = *MEMORY[0x24BDBD268];
        v26 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 1, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        v184.location = 0;
        v184.length = Length;
        Frame = CTFramesetterCreateFrame(v25, v184, v22, v26);
        CFRelease(v26);
        CFRelease(v25);
      }
      else
      {
        Frame = 0;
      }
      CFRelease(v22);
    }
    else
    {
      Frame = 0;
    }
    v28 = 0;
    v29.i64[0] = 0;
    LODWORD(v30) = 0;
    HIDWORD(v30) = v132.i32[0];
    v29.i64[1] = *(unsigned int *)(a2 + 68);
    v31 = *(float32x4_t *)(a2 + 80);
    v31.i64[1] = 0x3F80000000000000;
    values[0] = (float32x4_t)v132.u32[0];
    values[1] = (float32x4_t)v30;
    values[2] = v29;
    v179 = xmmword_2260E5D70;
    do
    {
      *(float32x4_t *)&keys[v28 / 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2260E5F10, COERCE_FLOAT(*(_OWORD *)&values[v28 / 0x10])), (float32x4_t)xmmword_2260E5F20, *(float32x2_t *)values[v28 / 0x10].f32, 1), (float32x4_t)xmmword_2260E5F40, values[v28 / 0x10], 2), v31, values[v28 / 0x10], 3);
      v28 += 16;
    }
    while (v28 != 64);
    if (!Frame)
    {
LABEL_60:
      CFRelease(v19);
      goto LABEL_61;
    }
    v113 = v12;
    v124 = v165;
    v125 = *(float32x4_t *)keys;
    v131 = (float32x4_t)v167;
    v133 = v166;
    theArray = CTFrameGetLines(Frame);
    origins = 0;
    Count = CFArrayGetCount(theArray);
    v147[1] = 0;
    v148 = 0;
    v147[0] = 0;
    v149 = 0;
    v33 = Count == 0;
    cf = Frame;
    if (Count)
    {
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(v147, Count);
      v34 = origins;
      v35 = Count - v148;
      if (Count > v148)
      {
        v36 = &origins[v148];
        do
        {
          v36->x = 0.0;
          v36->y = 0.0;
          ++v36;
          --v35;
        }
        while (v35);
      }
      v148 = Count;
      ++v149;
      v185.location = 0;
      v185.length = Count;
      CTFrameGetLineOrigins(Frame, v185, v34);
      v37 = 0;
      v38 = 0;
      do
      {
        v39 = Count;
        ValueAtIndex = (const __CTLine *)CFArrayGetValueAtIndex(theArray, v37);
        GlyphRuns = CTLineGetGlyphRuns(ValueAtIndex);
        v42 = CFArrayGetCount(GlyphRuns);
        if (v42)
        {
          for (i = 0; i != v42; ++i)
          {
            v44 = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, i);
            v38 += CTRunGetGlyphCount(v44);
          }
        }
        ++v37;
        Count = v39;
      }
      while (v37 != v39);
      v45 = 0.0;
      if (*(_BYTE *)(a2 + 98))
      {
        v46 = 0;
        v47 = v148;
        p_y = &origins->y;
        v49 = INFINITY;
        do
        {
          v50 = (const __CTLine *)CFArrayGetValueAtIndex(theArray, v46);
          BoundsWithOptions = CTLineGetBoundsWithOptions(v50, 0x40uLL);
          if (v47 == v46)
            goto LABEL_156;
          v51 = *p_y;
          p_y += 2;
          v52 = BoundsWithOptions.origin.y + v51;
          if (v49 > v52)
            v49 = v52;
          ++v46;
        }
        while (v39 != v46);
        v53 = *(unsigned __int8 *)(a2 + 98);
        if (*(_BYTE *)(a2 + 98))
        {
          v54 = a1;
          v33 = 0;
LABEL_44:
          v55 = 0.0;
          if (v49 >= 0.0)
            v55 = v49;
          v56 = -v55;
          v57 = v55 * -0.5;
          if (v53 == 1)
            v57 = v56;
          v45 = v57;
          goto LABEL_51;
        }
      }
      v33 = 0;
    }
    else
    {
      v186.location = 0;
      v186.length = 0;
      CTFrameGetLineOrigins(Frame, v186, 0);
      v38 = 0;
      v53 = *(unsigned __int8 *)(a2 + 98);
      if (*(_BYTE *)(a2 + 98))
      {
        v49 = INFINITY;
        v54 = a1;
        goto LABEL_44;
      }
      v45 = 0.0;
      v33 = 1;
    }
    v54 = a1;
LABEL_51:
    v121 = (_anonymous_namespace_ *)(v54 + 40);
    if (*(_QWORD *)(v54 + 48) < (unint64_t)v38)
      re::DynamicArray<re::RigSplineIKJoint>::setCapacity(v121, v38);
    if (v157 < v38)
      re::DynamicArray<re::AABB>::setCapacity(&v156, v38);
    if (v33)
    {
LABEL_56:
      CFRelease(cf);
      if (v147[0] && origins)
        (*(void (**)(void))(*(_QWORD *)v147[0] + 40))();
      v12 = v113;
      v19 = v114;
      goto LABEL_60;
    }
    v59 = 0;
    v120 = vdupq_n_s32(0x7F800000u);
    key = (void *)*MEMORY[0x24BDC4C28];
    v47 = 56;
    while (1)
    {
      v60 = (const __CTLine *)CFArrayGetValueAtIndex(theArray, v59);
      v117 = CTLineGetGlyphRuns(v60);
      v116 = CFArrayGetCount(v117);
      if (v116)
        break;
LABEL_144:
      if (++v59 == Count)
        goto LABEL_56;
    }
    v61 = 0;
    v123 = v59;
    while (1)
    {
      v62 = (const __CTRun *)CFArrayGetValueAtIndex(v117, v61);
      Attributes = CTRunGetAttributes(v62);
      Value = (const __CTFont *)CFDictionaryGetValue(Attributes, key);
      v126 = v62;
      GlyphCount = CTRunGetGlyphCount(v62);
      font = Value;
      v128 = CTFontCopyFullName(Value);
      v66 = CFHash(v128);
      v67 = GlyphCount;
      v127 = v66;
      buffer = 0;
      v143[1] = 0;
      v144 = 0;
      v142 = 0;
      v143[0] = 0;
      v145 = 0;
      v139[1] = 0;
      v140 = 0;
      v139[0] = 0;
      v141 = 0;
      range = GlyphCount;
      v118 = v61;
      if (GlyphCount)
      {
        re::DynamicArray<re::RigNodeConstraint>::setCapacity(v139, GlyphCount);
        v67 = GlyphCount;
        v68 = v142;
        if (v140 < GlyphCount)
        {
          v69 = 16 * GlyphCount - 16 * v140;
          if (v69 >= 1)
          {
            bzero(&v142[v140], 16 * (((unint64_t)v69 >> 4) - ((unint64_t)v69 > 0xF)) + 16);
            v67 = GlyphCount;
          }
        }
        v140 = v67;
        ++v141;
      }
      else
      {
        v68 = 0;
      }
      re::DynamicArray<unsigned short>::resize((uint64_t)v143, v67);
      v187.location = 0;
      v187.length = GlyphCount;
      CTRunGetGlyphs(v126, v187, buffer);
      v188.location = 0;
      v188.length = GlyphCount;
      CTRunGetPositions(v126, v188, v68);
      (**(void (***)(uint64_t, CFStringRef, CFHashCode))a3)(a3, v128, v127);
      if (GlyphCount)
        break;
LABEL_137:
      CFRelease(v128);
      if (v139[0] && v68)
        (*(void (**)(void))(*(_QWORD *)v139[0] + 40))();
      if (v143[0] && buffer)
        (*(void (**)(void))(*(_QWORD *)v143[0] + 40))();
      v61 = v118 + 1;
      if (v118 + 1 == v116)
        goto LABEL_144;
    }
    v70 = 0;
    while (1)
    {
      v71 = v144;
      if (v144 <= v70)
      {
        *(_QWORD *)v181 = 0;
        v167 = 0u;
        v168[0] = 0u;
        v165 = 0u;
        v166 = 0u;
        *(_OWORD *)keys = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        values[0].i32[0] = 136315906;
        *(uint64_t *)((char *)values[0].i64 + 4) = (uint64_t)"operator[]";
        values[0].i16[6] = 1024;
        *(__int32 *)((char *)&values[0].i32[3] + 2) = 789;
        values[1].i16[1] = 2048;
        *(uint64_t *)((char *)values[1].i64 + 4) = v70;
        values[1].i16[6] = 2048;
        *(uint64_t *)((char *)&values[1].i64[1] + 6) = v71;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_147:
        *(_QWORD *)v181 = 0;
        v167 = 0u;
        v168[0] = 0u;
        v165 = 0u;
        v166 = 0u;
        *(_OWORD *)keys = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        values[0].i32[0] = 136315906;
        *(uint64_t *)((char *)values[0].i64 + 4) = (uint64_t)"operator[]";
        values[0].i16[6] = 1024;
        *(__int32 *)((char *)&values[0].i32[3] + 2) = 789;
        values[1].i16[1] = 2048;
        *(uint64_t *)((char *)values[1].i64 + 4) = v70;
        values[1].i16[6] = 2048;
        *(uint64_t *)((char *)&values[1].i64[1] + 6) = v71;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_148:
        *(_QWORD *)v171 = 0;
        v167 = 0u;
        v168[0] = 0u;
        v165 = 0u;
        v166 = 0u;
        *(_OWORD *)keys = 0u;
        v59 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v181 = 136315906;
        *(_QWORD *)&v181[4] = "operator[]";
        *(_WORD *)&v181[12] = 1024;
        *(_DWORD *)&v181[14] = 789;
        *(_WORD *)&v181[18] = 2048;
        *(_QWORD *)&v181[20] = v70;
        *(_WORD *)&v181[28] = 2048;
        *(_QWORD *)&v181[30] = v71;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_149:
        *(_QWORD *)v171 = 0;
        v167 = 0u;
        v168[0] = 0u;
        v165 = 0u;
        v166 = 0u;
        *(_OWORD *)keys = 0u;
        v4 = (__int128 *)v59;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v181 = 136315906;
        *(_QWORD *)&v181[4] = "operator[]";
        *(_WORD *)&v181[12] = 1024;
        *(_DWORD *)&v181[14] = 789;
        *(_WORD *)&v181[18] = 2048;
        *(_QWORD *)&v181[20] = v59;
        *(_WORD *)&v181[28] = 2048;
        *(_QWORD *)&v181[30] = v71;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_150:
        *(_QWORD *)v171 = 0;
        v4[12] = 0u;
        v4[13] = 0u;
        v4[10] = 0u;
        v4[11] = 0u;
        v4[9] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v181 = 136315906;
        *(_QWORD *)&v181[4] = "operator[]";
        *(_WORD *)&v181[12] = 1024;
        *(_DWORD *)&v181[14] = 789;
        *(_WORD *)&v181[18] = 2048;
        *(_QWORD *)&v181[20] = v54;
        *(_WORD *)&v181[28] = 2048;
        *(_QWORD *)&v181[30] = v71;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_151:
        *(_QWORD *)v181 = 0;
        v4[12] = 0u;
        v4[13] = 0u;
        v4[10] = 0u;
        v4[11] = 0u;
        v4[9] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        values[0].i32[0] = 136315906;
        *(uint64_t *)((char *)values[0].i64 + 4) = (uint64_t)"operator[]";
        values[0].i16[6] = 1024;
        *(__int32 *)((char *)&values[0].i32[3] + 2) = 789;
        values[1].i16[1] = 2048;
        *(uint64_t *)((char *)values[1].i64 + 4) = v70;
        values[1].i16[6] = 2048;
        *(uint64_t *)((char *)&values[1].i64[1] + 6) = v71;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_152:
        v163 = 0;
        v179 = 0u;
        v180 = 0u;
        memset(values, 0, sizeof(values));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v171 = 136315906;
        *(_QWORD *)&v171[4] = "operator[]";
        v172 = 1024;
        v173 = 789;
        v174 = 2048;
        v175 = 0;
        v176 = 2048;
        v177 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_153:
        v163 = 0;
        v179 = 0u;
        v180 = 0u;
        memset(values, 0, sizeof(values));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v171 = 136315906;
        *(_QWORD *)&v171[4] = "operator[]";
        v172 = 1024;
        v173 = 789;
        v174 = 2048;
        v175 = 1;
        v176 = 2048;
        v177 = 1;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_154:
        v163 = 0;
        v179 = 0u;
        v180 = 0u;
        memset(values, 0, sizeof(values));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v171 = 136315906;
        *(_QWORD *)&v171[4] = "operator[]";
        v172 = 1024;
        v173 = 789;
        v174 = 2048;
        v175 = 2;
        v176 = 2048;
        v177 = 2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_155:
        v163 = 0;
        v179 = 0u;
        v180 = 0u;
        memset(values, 0, sizeof(values));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v171 = 136315906;
        *(_QWORD *)&v171[4] = "operator[]";
        v172 = 1024;
        v173 = 789;
        v174 = 2048;
        v175 = 3;
        v176 = 2048;
        v177 = 3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_156:
        *(_QWORD *)v181 = 0;
        v4[12] = 0u;
        v4[13] = 0u;
        v4[10] = 0u;
        v4[11] = 0u;
        v4[9] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        values[0].i32[0] = 136315906;
        *(uint64_t *)((char *)values[0].i64 + 4) = (uint64_t)"operator[]";
        values[0].i16[6] = 1024;
        *(__int32 *)((char *)&values[0].i32[3] + 2) = 789;
        values[1].i16[1] = 2048;
        *(uint64_t *)((char *)values[1].i64 + 4) = v47;
        values[1].i16[6] = 2048;
        *(uint64_t *)((char *)&values[1].i64[1] + 6) = v47;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 8))(a3, buffer[v70]);
      v71 = v144;
      if (v144 <= v70)
        goto LABEL_147;
      v135 = buffer[v70];
      v136 = v128;
      v137 = v127;
      v72 = ((v127 << 6) + (v127 >> 2) - 0x61C8864680B583E9 + v135) ^ v127;
      v138 = v72;
      if (v128)
        CFRetain(v128);
      if (!(_QWORD)v152
        || (v73 = *(unsigned int *)(*((_QWORD *)&v152 + 1) + 4 * (v72 % DWORD2(v153))), (_DWORD)v73 == 0x7FFFFFFF))
      {
LABEL_89:
        v71 = v144;
        if (v144 <= v70)
          goto LABEL_151;
        v75 = (_anonymous_namespace_ *)v54;
        v54 = *(unsigned int *)(v54 + 16);
        v76 = buffer[v70];
        v77 = (re::GeomMesh *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
        if (!v77)
        {
          re::GeomMesh::GeomMesh((re::GeomMesh *)keys, 0);
          v78.i64[0] = 0x7F0000007FLL;
          v78.i64[1] = 0x7F0000007FLL;
          v169 = (float32x4_t)v120;
          v170 = v78;
          re::internal::build3dGlyph((uint64_t)keys, font, v76, (uint64_t)v151);
          if (re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v168, "vertexUV"))
          {
            *(_QWORD *)&v181[32] = 0;
            memset(v181, 0, 28);
            re::DynamicArray<double>::resize((uint64_t)v181, 4uLL);
            v79 = *(_QWORD *)&v181[16];
            if (!*(_QWORD *)&v181[16])
              goto LABEL_152;
            **(_QWORD **)&v181[32] = "vertexUV";
            if (v79 == 1)
              goto LABEL_153;
            *(_QWORD *)(*(_QWORD *)&v181[32] + 8) = "vertexNormal";
            if (v79 <= 2)
              goto LABEL_154;
            *(_QWORD *)(*(_QWORD *)&v181[32] + 16) = "vertexTangent";
            if (v79 == 3)
              goto LABEL_155;
            *(_QWORD *)(*(_QWORD *)&v181[32] + 24) = "vertexBitangent";
            re::internal::buildMeshByConvertingFaceVaryingToVertexHelper((unint64_t)keys, (uint64_t)v181, 0, (unint64_t)keys);
            if (*(_QWORD *)v181 && *(_QWORD *)&v181[32])
              (*(void (**)(void))(**(_QWORD **)v181 + 40))();
          }
          re::computeAABB((re *)keys, values);
          v169 = values[0];
          v170 = values[1];
          v77 = (re::GeomMesh *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a3 + 24))(a3, keys);
          re::GeomMesh::~GeomMesh((re::GeomMesh *)keys, v80);
          v75 = (_anonymous_namespace_ *)a1;
        }
        re::DynamicArray<re::GeomMesh>::add(v75, v77);
        re::DynamicArray<re::AABB>::add((_anonymous_namespace_ *)&v156, (uint64_t)v77 + 736);
        v81 = v138;
        if (!(_QWORD)v152)
        {
          v82 = 0;
LABEL_107:
          v86 = v131;
          v85 = v133;
          v87 = v155;
          if ((_DWORD)v155 == 0x7FFFFFFF)
          {
            v87 = v154;
            v88 = v154;
            if (v154 == DWORD2(v153))
            {
              v86 = v131;
              v85 = v133;
              v88 = v154;
              v82 = v81 % DWORD2(v153);
            }
            v154 = v88 + 1;
            v89 = v153;
            v90 = *(_DWORD *)(v153 + 56 * v87 + 8);
          }
          else
          {
            v89 = v153;
            v90 = *(_DWORD *)(v153 + 56 * v155 + 8);
            LODWORD(v155) = v90 & 0x7FFFFFFF;
          }
          v91 = v89 + 56 * v87;
          *(_DWORD *)(v91 + 8) = v90 | 0x80000000;
          v92 = *((_QWORD *)&v152 + 1);
          *(_DWORD *)(v91 + 8) = *(_DWORD *)(*((_QWORD *)&v152 + 1) + 4 * v82) | 0x80000000;
          *(_QWORD *)v91 = v81;
          *(_WORD *)(v91 + 16) = v135;
          v93 = v136;
          v94 = v137;
          *(_QWORD *)(v91 + 24) = v136;
          *(_QWORD *)(v91 + 32) = v94;
          *(_QWORD *)(v91 + 40) = v81;
          if (v93)
          {
            CFRetain(v93);
            v86 = v131;
            v85 = v133;
          }
          *(_DWORD *)(v89 + 56 * v87 + 48) = v54;
          *(_DWORD *)(v92 + 4 * v82) = v87;
          ++HIDWORD(v153);
          ++HIDWORD(v155);
          v4 = &v152;
          goto LABEL_118;
        }
        v82 = v138 % DWORD2(v153);
        v83 = *(unsigned int *)(*((_QWORD *)&v152 + 1) + 4 * v82);
        if ((_DWORD)v83 == 0x7FFFFFFF)
          goto LABEL_107;
        v84 = v153;
        {
          v83 = *(_DWORD *)(v84 + 56 * v83 + 8) & 0x7FFFFFFF;
          if (v83 == 0x7FFFFFFF)
            goto LABEL_107;
        }
        v4 = &v152;
      }
      else
      {
        v74 = v153;
        {
          v73 = *(_DWORD *)(v74 + 56 * v73 + 8) & 0x7FFFFFFF;
          if (v73 == 0x7FFFFFFF)
            goto LABEL_89;
        }
        v54 = *(unsigned int *)(v74 + 56 * v73 + 48);
      }
      v86 = v131;
      v85 = v133;
LABEL_118:
      LODWORD(v180) = v54;
      v71 = v140;
      v59 = v123;
      if (v140 <= v70)
        goto LABEL_148;
      v71 = v148;
      if (v148 <= v123)
        goto LABEL_149;
      v95 = 0;
      v68 = v142;
      v96 = &v142[v70];
      *(CGFloat *)&v97 = v96->x;
      y = v96->y;
      v99 = &origins[v123];
      *(float *)&v97 = *(double *)&v97 + v99->x;
      *(float *)&y = v45 + y + v99->y;
      DWORD1(v97) = LODWORD(y);
      DWORD2(v97) = 0;
      HIDWORD(v97) = 1.0;
      *(_OWORD *)v181 = xmmword_2260E5F10;
      *(_OWORD *)&v181[16] = xmmword_2260E5F20;
      *(_OWORD *)&v181[32] = xmmword_2260E5F40;
      v182 = v97;
      do
      {
        *(float32x4_t *)&keys[v95 / 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v125, COERCE_FLOAT(*(_OWORD *)&v181[v95])), v124, *(float32x2_t *)&v181[v95], 1), v85, *(float32x4_t *)&v181[v95], 2), v86, *(float32x4_t *)&v181[v95], 3);
        v95 += 16;
      }
      while (v95 != 64);
      values[0] = *(float32x4_t *)keys;
      values[1] = v165;
      values[2] = v166;
      v179 = v167;
      v71 = v158;
      if (v158 <= v54)
        goto LABEL_150;
      re::AABB::transform((float32x4_t *)(v160 + 32 * v54), values, (uint64_t)keys);
      v100 = v161;
      v101 = v162;
      v100.i32[3] = 0;
      v102 = *(float32x4_t *)keys;
      v103 = v165;
      v102.i32[3] = 0;
      v101.i32[3] = 0;
      v103.i32[3] = 0;
      v161 = vminnmq_f32(v100, v102);
      v162 = vmaxnmq_f32(v101, v103);
      v54 = a1;
      v104 = *(_QWORD *)(a1 + 48);
      v105 = *(_QWORD *)(a1 + 56);
      if (v105 >= v104)
      {
        v106 = v105 + 1;
        if (v104 < v105 + 1)
        {
          if (*(_QWORD *)v121)
          {
            v107 = 2 * v104;
            v108 = v104 == 0;
            v109 = 8;
            if (!v108)
              v109 = v107;
            if (v109 <= v106)
              v110 = v106;
            else
              v110 = v109;
            re::DynamicArray<re::RigSplineIKJoint>::setCapacity(v121, v110);
          }
          else
          {
            re::DynamicArray<re::RigSplineIKJoint>::setCapacity(v121, v106);
            ++*(_DWORD *)(a1 + 64);
          }
        }
        v105 = *(_QWORD *)(a1 + 56);
      }
      v111 = *(_QWORD *)(a1 + 72) + 80 * v105;
      *(float32x4_t *)(v111 + 16) = values[1];
      *(float32x4_t *)(v111 + 32) = values[2];
      *(_OWORD *)(v111 + 48) = v179;
      *(_OWORD *)(v111 + 64) = v180;
      *(float32x4_t *)v111 = values[0];
      ++*(_QWORD *)(a1 + 56);
      ++*(_DWORD *)(a1 + 64);
      if (v136)
        CFRelease(v136);
      if (++v70 == range)
        goto LABEL_137;
    }
  }
LABEL_62:
  CFRelease(v9);
LABEL_63:
  if (v12)
    CFRelease(v12);
  (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)a3 + 32))(a3, &v161);
  result = v156;
  if (v156)
  {
    if (v160)
      return (*(uint64_t (**)(void))(*(_QWORD *)v156 + 40))();
  }
  return result;
}

CFAttributedStringRef re::`anonymous namespace'::createAttributeString(void *a1, char a2, char a3, const char *a4)
{
  CTParagraphStyleRef v6;
  const __CFAllocator *v7;
  const __CFString *v8;
  void *v9;
  const __CFDictionary *v10;
  CFAttributedStringRef v11;
  char v13;
  char v14;
  void *values[2];
  void *keys[2];
  CTParagraphStyleSetting settings;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  settings.spec = kCTParagraphStyleSpecifierAlignment;
  settings.valueSize = 1;
  settings.value = &v14;
  v13 = a3;
  v18 = 6;
  v19 = 1;
  v20 = &v13;
  v6 = CTParagraphStyleCreate(&settings, 2uLL);
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], a4, 0x8000100u);
  v9 = (void *)*MEMORY[0x24BDC4F20];
  keys[0] = *(void **)MEMORY[0x24BDC4C28];
  keys[1] = v9;
  values[0] = a1;
  values[1] = v6;
  v10 = CFDictionaryCreate(v7, (const void **)keys, (const void **)values, 2, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (v10)
  {
    v11 = CFAttributedStringCreate(0, v8, v10);
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  v11 = 0;
  if (v8)
LABEL_3:
    CFRelease(v8);
LABEL_4:
  if (v6)
    CFRelease(v6);
  if (v10)
    CFRelease(v10);
  return v11;
}

float32x2_t re::`anonymous namespace'::computeSuggestedFrameSize(re::_anonymous_namespace_ *this, const __CFAttributedString *a2, CGFloat a3)
{
  CTFramesetterRef v4;
  const __CTFramesetter *v5;
  const __CFDictionary *v6;
  CGSize v7;
  float64x2_t v8;
  CFRange fitRange;
  void *values;
  void *keys[2];
  CFRange v13;
  CGSize v14;

  keys[1] = *(void **)MEMORY[0x24BDAC8D0];
  v4 = CTFramesetterCreateWithAttributedString(this);
  if (v4)
  {
    v5 = v4;
    keys[0] = *(void **)MEMORY[0x24BDC4EF0];
    values = (void *)*MEMORY[0x24BDBD268];
    v6 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v14.height = 1.79769313e308;
    v13.location = 0;
    v13.length = 0;
    v14.width = a3;
    v7 = CTFramesetterSuggestFrameSizeWithConstraints(v5, v13, v6, v14, &fitRange);
    CFRelease(v6);
    CFRelease(v5);
    v8 = (float64x2_t)v7;
  }
  else
  {
    v8 = *(float64x2_t *)MEMORY[0x24BDBF148];
  }
  return vcvt_f32_f64(v8);
}

re::GeomMesh *re::DynamicArray<re::GeomMesh>::add(_anonymous_namespace_ *this, re::GeomMesh *a2)
{
  unint64_t v4;
  uint64_t v5;
  re::GeomMesh *result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::GeomMesh>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 736 * v4;
  *(_QWORD *)v5 = 0;
  *(_DWORD *)(v5 + 8) = 0;
  bzero((void *)(v5 + 16), 0x2C8uLL);
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)(v5 + 16));
  *(_QWORD *)(v5 + 728) = 0;
  result = re::GeomMesh::copy(a2, (re::GeomMesh *)v5);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t *re::HashTable<re::`anonymous namespace'::FontNameAndGlyphIndexCacheKey,unsigned int,re::Hash<re::`anonymous namespace'::FontNameAndGlyphIndexCacheKey>,re::EqualTo<re::`anonymous namespace'::FontNameAndGlyphIndexCacheKey>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  const void *v8;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          v8 = *(const void **)(v6 + 24);
          if (v8)
          {
            CFRelease(v8);
            *(_QWORD *)(v6 + 24) = 0;
            v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 56;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

BOOL re::EqualTo<re::`anonymous namespace'::FontNameAndGlyphIndexCacheKey>::operator()(unsigned __int16 *a1, unsigned __int16 *a2)
{
  const __CFString *v2;
  const __CFString *v3;
  _BOOL8 result;

  result = 0;
  if (*((_QWORD *)a1 + 3) == *((_QWORD *)a2 + 3) && *a1 == *a2)
  {
    v2 = (const __CFString *)*((_QWORD *)a1 + 1);
    v3 = (const __CFString *)*((_QWORD *)a2 + 1);
    if (v2 == v3 || v2 && v3 && CFStringCompare(v2, v3, 0) == kCFCompareEqualTo)
      return 1;
  }
  return result;
}

void re::HashTable<re::`anonymous namespace'::FontNameAndGlyphIndexCacheKey,unsigned int,re::Hash<re::`anonymous namespace'::FontNameAndGlyphIndexCacheKey>,re::EqualTo<re::`anonymous namespace'::FontNameAndGlyphIndexCacheKey>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  const void *v23;
  signed int v24;
  _BYTE v25[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v25, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v25;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)v25 = v5;
      *(_QWORD *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = v7;
        v13 = DWORD1(v9);
        v14 = v6 + 24;
        do
        {
          if ((*(_DWORD *)(v14 - 16) & 0x80000000) != 0)
          {
            v15 = *(_QWORD *)(v14 - 24);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 56 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18) = v15;
            v22 = *(_QWORD *)(a1 + 16) + 56 * v18;
            *(_WORD *)(v22 + 16) = *(_WORD *)(v14 - 8);
            v23 = *(const void **)v14;
            *(_QWORD *)(v22 + 24) = *(_QWORD *)v14;
            *(_OWORD *)(v22 + 32) = *(_OWORD *)(v14 + 8);
            if (v23)
            {
              CFRetain(v23);
              v12 = *(_QWORD *)(a1 + 8);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18 + 48) = *(_DWORD *)(v14 + 24);
            *(_DWORD *)(v12 + 4 * v17) = v18;
            v13 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v13;
            v10 = *(_DWORD *)&v25[32];
          }
          ++v11;
          v14 += 56;
        }
        while (v11 < v10);
      }
    }
  }
  else
  {
    if (a2)
      v24 = a2;
    else
      v24 = 3;
  }
}

void re::`anonymous namespace'::GlyphCache::setFont(re::_anonymous_namespace_::GlyphCache *this, CFTypeRef cf, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;

  v6 = *((unsigned __int16 *)this + 4);
  v7 = (a3 << 6) + (a3 >> 2) - 0x61C8864680B583E9 + v6;
  if (cf)
    CFRetain(cf);
  v8 = v7 ^ a3;
  v9 = (const void *)*((_QWORD *)this + 2);
  if (v9)
    CFRelease(v9);
  *((_QWORD *)this + 3) = a3;
  *((_QWORD *)this + 4) = v8;
  *((_WORD *)this + 4) = v6;
  *((_QWORD *)this + 2) = cf;
  if (cf)
  {
    CFRetain(cf);
    CFRelease(cf);
  }
}

uint64_t re::`anonymous namespace'::GlyphCache::setGlyphIndex(uint64_t this, unsigned __int16 a2)
{
  *(_WORD *)(this + 8) = a2;
  *(_QWORD *)(this + 32) = ((*(_QWORD *)(this + 24) << 6) + a2 + (*(_QWORD *)(this + 24) >> 2) - 0x61C8864680B583E9) ^ *(_QWORD *)(this + 24);
  return this;
}

uint64_t re::`anonymous namespace'::GlyphCache::cachedGlyph(re::_anonymous_namespace_::GlyphCache *this)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  if (!*((_QWORD *)this + 5))
    return 0;
  v2 = *(unsigned int *)(*((_QWORD *)this + 6)
                       + 4 * (*((_QWORD *)this + 4) % (unint64_t)*((unsigned int *)this + 16)));
  if ((_DWORD)v2 == 0x7FFFFFFF)
    return 0;
  v3 = *((_QWORD *)this + 7);
  while (1)
  {
    v3 = *((_QWORD *)this + 7);
    if (v4)
      break;
    v2 = *(_DWORD *)(v3 + 816 * v2 + 8) & 0x7FFFFFFF;
    if (v2 == 0x7FFFFFFF)
      return 0;
  }
  return v3 + 816 * v2 + 48;
}

uint64_t re::`anonymous namespace'::GlyphCache::storeGlyph(uint64_t a1, re::GeomMesh *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v4 = a1 + 40;
  v5 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(a1 + 40))
  {
    LODWORD(v6) = 0;
    goto LABEL_8;
  }
  v6 = v5 % *(unsigned int *)(a1 + 64);
  v7 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * v6);
  if ((_DWORD)v7 == 0x7FFFFFFF)
  {
LABEL_8:
    v10 = *(_DWORD *)(a1 + 76);
    if (v10 == 0x7FFFFFFF)
    {
      v10 = *(_DWORD *)(a1 + 72);
      v11 = v10;
      if (v10 == *(_DWORD *)(a1 + 64))
      {
        LODWORD(v6) = v5 % *(unsigned int *)(a1 + 64);
        v11 = *(_DWORD *)(a1 + 72);
      }
      *(_DWORD *)(a1 + 72) = v11 + 1;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_DWORD *)(v12 + 816 * v10 + 8);
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_DWORD *)(v12 + 816 * v10 + 8);
      *(_DWORD *)(a1 + 76) = v13 & 0x7FFFFFFF;
    }
    v14 = 816 * v10;
    *(_DWORD *)(v12 + v14 + 8) = v13 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v6);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + v14) = v5;
    v15 = *(_QWORD *)(a1 + 56) + v14;
    *(_WORD *)(v15 + 16) = *(_WORD *)(a1 + 8);
    v16 = *(const void **)(a1 + 16);
    *(_QWORD *)(v15 + 24) = v16;
    *(_OWORD *)(v15 + 32) = *(_OWORD *)(a1 + 24);
    if (v16)
      CFRetain(v16);
    v17 = *(_QWORD *)(a1 + 56) + 816 * v10;
    *(_QWORD *)(v17 + 48) = 0;
    v17 += 48;
    *(_DWORD *)(v17 + 8) = 0;
    bzero((void *)(v17 + 16), 0x2C8uLL);
    re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)(v17 + 16));
    *(_QWORD *)(v17 + 728) = 0;
    re::GeomMesh::copy(a2, (re::GeomMesh *)v17);
    v18 = *((_OWORD *)a2 + 47);
    *(_OWORD *)(v17 + 736) = *((_OWORD *)a2 + 46);
    *(_OWORD *)(v17 + 752) = v18;
    *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v6) = v10;
    ++*(_DWORD *)(a1 + 68);
    ++*(_DWORD *)(a1 + 80);
    v19 = *(_QWORD *)(a1 + 56) + 816 * v10;
    return v19 + 48;
  }
  v8 = *(_QWORD *)(a1 + 56);
  while (1)
  {
    v8 = *(_QWORD *)(a1 + 56);
    if (v9)
      break;
    v7 = *(_DWORD *)(v8 + 816 * v7 + 8) & 0x7FFFFFFF;
    if (v7 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v19 = v8 + 816 * v7;
  return v19 + 48;
}

void re::HashTable<re::`anonymous namespace'::FontNameAndGlyphIndexCacheKey,re::GeomBuildExtrudedTextSupport::Glyph,re::Hash<re::`anonymous namespace'::FontNameAndGlyphIndexCacheKey>,re::EqualTo<re::`anonymous namespace'::FontNameAndGlyphIndexCacheKey>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  re::GeomAttribute *v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  __int128 v29;
  signed int v30;
  _BYTE v31[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v31, 0, 36);
      *(_QWORD *)&v31[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::FontNameAndGlyphIndexCacheKey,re::GeomBuildExtrudedTextSupport::Glyph,re::Hash<re::internal::FontNameAndGlyphIndexCacheKey>,re::EqualTo<re::internal::FontNameAndGlyphIndexCacheKey>,true,false>::init((uint64_t)v31, v4, a2);
      v6 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v31;
      v7 = *(_QWORD *)(a1 + 16);
      v8 = *(_OWORD *)&v31[8];
      *(_OWORD *)v31 = v6;
      *(_QWORD *)&v31[16] = v7;
      *(_OWORD *)(a1 + 8) = v8;
      v10 = *(_OWORD *)&v31[24];
      *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
      v9 = *(_DWORD *)&v31[32];
      *(_OWORD *)(a1 + 24) = v10;
      if (v9)
      {
        v11 = 0;
        v12 = DWORD1(v10);
        v13 = v8;
        v14 = 816 * v9;
        do
        {
          v15 = (uint64_t *)(v7 + v11);
          if ((*(_DWORD *)(v7 + v11 + 8) & 0x80000000) != 0)
          {
            v16 = (uint64_t)(v15 + 6);
            v17 = *v15;
            v18 = *(unsigned int *)(a1 + 24);
            v19 = *v15 % v18;
            v20 = *(_DWORD *)(a1 + 36);
            if (v20 == 0x7FFFFFFF)
            {
              v20 = *(_DWORD *)(a1 + 32);
              v21 = v20;
              if (v20 == (_DWORD)v18)
              {
                v19 = v17 % *(unsigned int *)(a1 + 24);
                v21 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v21 + 1;
              v22 = *(_QWORD *)(a1 + 16);
              v23 = *(_DWORD *)(v22 + 816 * v20 + 8);
            }
            else
            {
              v22 = *(_QWORD *)(a1 + 16);
              v23 = *(_DWORD *)(v22 + 816 * v20 + 8);
              *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v22 + 816 * v20 + 8) = v23 | 0x80000000;
            v24 = *(_QWORD *)(a1 + 16) + 816 * v20;
            *(_DWORD *)(v24 + 8) = *(_DWORD *)(v24 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v19);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 816 * v20) = v17;
            v25 = *(_QWORD *)(a1 + 16) + 816 * v20;
            *(_WORD *)(v25 + 16) = *((_WORD *)v15 + 8);
            v26 = v7 + v11;
            v27 = *(const void **)(v7 + v11 + 24);
            *(_QWORD *)(v25 + 24) = v27;
            *(_OWORD *)(v25 + 32) = *(_OWORD *)(v7 + v11 + 32);
            if (v27)
              CFRetain(v27);
            v28 = *(_QWORD *)(a1 + 16) + 816 * v20;
            re::GeomMesh::GeomMesh(v28 + 48, v16);
            v29 = *(_OWORD *)(v26 + 800);
            *(_OWORD *)(v28 + 784) = *(_OWORD *)(v26 + 784);
            *(_OWORD *)(v28 + 800) = v29;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v19) = v20;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          v11 += 816;
        }
        while (v14 != v11);
      }
    }
  }
  else
  {
    if (a2)
      v30 = a2;
    else
      v30 = 3;
  }
}

uint64_t *re::HashTable<re::`anonymous namespace'::FontNameAndGlyphIndexCacheKey,re::GeomBuildExtrudedTextSupport::Glyph,re::Hash<re::`anonymous namespace'::FontNameAndGlyphIndexCacheKey>,re::EqualTo<re::`anonymous namespace'::FontNameAndGlyphIndexCacheKey>,true,false>::~HashTable(uint64_t *a1, re::GeomAttribute *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void *v10;

  v3 = *a1;
  if (v3)
  {
    v4 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v4)
    {
      v5 = 0;
      for (i = 0; i < v4; ++i)
      {
        v7 = a1[2];
        v8 = v7 + v5;
        v9 = *(_DWORD *)(v7 + v5 + 8);
        if (v9 < 0)
        {
          *(_DWORD *)(v8 + 8) = v9 & 0x7FFFFFFF;
          v10 = *(const void **)(v8 + 24);
          if (v10)
          {
            CFRelease(v10);
            *(_QWORD *)(v8 + 24) = 0;
          }
          re::GeomMesh::~GeomMesh((re::GeomMesh *)(v7 + v5 + 48), a2);
          v4 = *((unsigned int *)a1 + 8);
        }
        v5 += 816;
      }
      v3 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

float32x2_t *re::buildPlane(re *this, float32x2_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v6;
  re::GeomMesh *v7;
  BOOL v8;
  float32x2_t *result;
  _BOOL4 v10;
  float v11;
  _BOOL4 v12;
  int8x8_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int v18;
  float v19;
  re::GeomMesh *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  float32x4_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  float32x4_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  re::GeomMesh *v51;
  uint64_t v52;
  unsigned int v53;
  int8x8_t v54;
  float32x2_t v55;
  float32x2_t v56;
  __int32 *v57;
  uint64_t v58;
  uint64_t v59;
  float32x2_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  re::GeomAttribute *v65;
  re::GeomAttribute *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  float32x4_t v74;
  float32x4_t v75;
  int v76;
  int v77;
  float v78;
  unsigned int v79;
  float32x2_t v80;
  float32x4_t v81;
  float32x2_t *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  unsigned __int32 v88;
  uint64_t v89;
  uint64_t *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t *v93;
  _BYTE v94[18];
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v6 = a2->u16[1];
  v7 = (re::GeomMesh *)a2->u16[0];
  if (v6)
    v8 = (_DWORD)v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v83);
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v86, "vertexPosition", 1, 7);
    if (a2[2].i8[4])
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v86, "vertexUV", 1, 6);
    if (a2[2].i8[5])
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v86, "vertexNormal", 1, 7);
      if (a2[2].i8[4])
      {
        if (a2[2].i8[5])
        {
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v86, "vertexTangent", 1, 7);
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v86, "vertexBitangent", 1, 7);
        }
      }
    }
    re::GeomMesh::operator=((uint64_t)this, &v83);
    re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)&v86);
    result = (float32x2_t *)*((_QWORD *)&v83 + 1);
    if (*((_QWORD *)&v83 + 1) && *((_QWORD *)&v85 + 1))
      return (float32x2_t *)(*(uint64_t (**)(void))(**((_QWORD **)&v83 + 1) + 40))();
  }
  else
  {
    v10 = a2->i16[2] != 0;
    v11 = a2[2].f32[0];
    v12 = v11 > 0.0;
    v13 = vbsl_s8((int8x8_t)vcgtz_f32(a2[1]), (int8x8_t)a2[1], (int8x8_t)vneg_f32(a2[1]));
    v14 = *(float *)&v13.i32[1];
    if (*(float *)&v13.i32[1] >= *(float *)v13.i32)
      v15 = *(float *)v13.i32;
    else
      v15 = *(float *)&v13.i32[1];
    v16 = fabsf(v11);
    if ((float)(v16 + v16) > v15)
      v16 = v15 * 0.5;
    v78 = v16;
    v80 = (float32x2_t)v13;
    v17 = v16 + v16;
    v18 = v10 && v12;
    v19 = 0.0;
    if (v10 && v12)
      v19 = v17;
    result = (float32x2_t *)re::buildParametricPlane(this, v7, *(float *)v13.i32 - v19, *(float *)&v13.i32[1] - v19, v6);
    if (v18 == 1)
    {
      v82 = a2;
      v21 = *((_DWORD *)this + 4);
      v22 = *((_DWORD *)this + 10);
      v23 = a2->u16[0];
      v24 = v23 + 1;
      v25 = a2->u16[1];
      v26 = a2->u16[2];
      v27 = v26 - 1;
      v76 = v23;
      v77 = v25 + 1;
      v28 = 2 * (v25 + 1 + v23 + 1) + 4 * (v26 - 1);
      v29 = 2 * (v25 + v23) + 4 * v26;
      re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v83, (re *)((char *)this + 16));
      LODWORD(v83) = v28 + *((_DWORD *)this + 4);
      v88 = v83;
      if (v89)
      {
        v30 = v90;
        v31 = 8 * v89;
        do
        {
          v32 = *v30++;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 72))(v32, v88);
          v31 -= 8;
        }
        while (v31);
      }
      v33 = (v29 + *((_DWORD *)this + 10));
      re::DynamicArray<re::GeomCell4>::resize((_QWORD *)&v83 + 1, v33);
      v91 = v33;
      if (v92)
      {
        v34 = v93;
        v35 = 8 * v92;
        do
        {
          v36 = *v34++;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 72))(v36, v91);
          v35 -= 8;
        }
        while (v35);
      }
      re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_0::operator()(&v83, v22, v21, 0, 1, a2->u16[0], 1, v14 * 0.5);
      v37 = a2->u16[0];
      v38 = v37 + v22;
      v39 = v27 + v24 + v21;
      v40.i64[0] = 0;
      v40.i64[1] = LODWORD(v78);
      v75 = v40;
      *(float32x4_t *)v94 = v40;
      v81 = (float32x4_t)LODWORD(v78);
      re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_1::operator()((uint64_t)&v82, (int *)&v83, v38, v24 + v21, v37, v39, (float32x4_t *)v94, &v81);
      v41 = v38 + a2->u16[2];
      re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_0::operator()(&v83, v41, v39, a2->u16[0], v24, a2->u16[1], 0, v80.f32[0] * 0.5);
      v42 = v41 + a2->u16[1];
      v43 = v39 + v77 + v27;
      *(_OWORD *)v94 = LODWORD(v78);
      *(float *)&v79 = -v78;
      v44.i64[0] = 0;
      v44.i64[1] = v79;
      v74 = v44;
      v81 = v44;
      re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_1::operator()((uint64_t)&v82, (int *)&v83, v42, v39 + v77, v21 - 1, v43, (float32x4_t *)v94, &v81);
      v45 = v42 + a2->u16[2];
      re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_0::operator()(&v83, v45, v43, v21 - 1, -1, a2->u16[0], 1, v14 * -0.5);
      v46 = v45 + a2->u16[0];
      v47 = v43 + v24;
      v2 = v21 - v24;
      v3 = v47 + v27;
      *(float32x4_t *)v94 = v74;
      v81 = (float32x4_t)v79;
      re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_1::operator()((uint64_t)&v82, (int *)&v83, v46, v47, v2, v47 + v27, (float32x4_t *)v94, &v81);
      v48 = v46 + a2->u16[2];
      re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_0::operator()(&v83, v48, v3, v2, ~v76, a2->u16[1], 0, v80.f32[0] * -0.5);
      v49 = v48 + a2->u16[1];
      *(_OWORD *)v94 = v79;
      v81 = v75;
      re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_1::operator()((uint64_t)&v82, (int *)&v83, v49, v3 + v77, 0, v21, (float32x4_t *)v94, &v81);
      re::GeomMesh::operator=((uint64_t)this, &v83);
      re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)&v86);
      result = (float32x2_t *)*((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1))
      {
        v20 = (re::GeomMesh *)*((_QWORD *)&v85 + 1);
        if (*((_QWORD *)&v85 + 1))
          result = (float32x2_t *)(*(uint64_t (**)(void))(**((_QWORD **)&v83 + 1) + 40))();
      }
    }
    if (a2[2].i8[4])
    {
      re::addVertexUVs(this, v20);
      v3 = *((unsigned int *)this + 4);
      v50 = re::GeomMesh::accessVertexPositions(this);
      LODWORD(v52) = (_DWORD)v51;
      result = (float32x2_t *)re::modifyVertexUVs(this, v51);
      if ((_DWORD)v3)
      {
        v54 = (int8x8_t)vceqz_f32(v80);
        v55 = (float32x2_t)vbic_s8((int8x8_t)vdiv_f32((float32x2_t)0xBF8000003F800000, v80), v54);
        v56 = (float32x2_t)vbic_s8((int8x8_t)0x3F0000003F000000, v54);
        v52 = v52;
        v2 = v53;
        v57 = (__int32 *)(v50 + 8);
        v58 = v52;
        v59 = v53;
        while (v58)
        {
          if (!v59)
            goto LABEL_69;
          v60.i32[0] = *(v57 - 2);
          v60.i32[1] = *v57;
          *result++ = vmla_f32(v56, v55, v60);
          v57 += 4;
          --v59;
          --v58;
          if (!--v3)
            goto LABEL_38;
        }
        goto LABEL_68;
      }
    }
LABEL_38:
    if (a2[2].i8[5])
    {
      v52 = *((unsigned int *)this + 4);
      if ((_DWORD)v52)
      {
        v62 = v61;
        v63 = v61;
        while (v63)
        {
          *(_OWORD *)result->f32 = xmmword_2260E5F20;
          result += 2;
          --v63;
          if (!--v52)
            goto LABEL_43;
        }
        v81.i64[0] = 0;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v83 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v94 = 136315906;
        *(_QWORD *)&v94[4] = "operator[]";
        *(_WORD *)&v94[12] = 1024;
        *(_DWORD *)&v94[14] = 609;
        v95 = 2048;
        v96 = v62;
        v97 = 2048;
        v98 = v62;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_68:
        v81.i64[0] = 0;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v83 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v94 = 136315906;
        *(_QWORD *)&v94[4] = "operator[]";
        *(_WORD *)&v94[12] = 1024;
        *(_DWORD *)&v94[14] = 601;
        v95 = 2048;
        v96 = v52;
        v97 = 2048;
        v98 = v52;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_69:
        v81.i64[0] = 0;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v83 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v94 = 136315906;
        *(_QWORD *)&v94[4] = "operator[]";
        *(_WORD *)&v94[12] = 1024;
        *(_DWORD *)&v94[14] = 609;
        v95 = 2048;
        v96 = v2;
        v97 = 2048;
        v98 = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_70:
        v81.i64[0] = 0;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v83 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v94 = 136315906;
        *(_QWORD *)&v94[4] = "operator[]";
        *(_WORD *)&v94[12] = 1024;
        *(_DWORD *)&v94[14] = 609;
        v95 = 2048;
        v96 = v3;
        v97 = 2048;
        v98 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_71:
        v81.i64[0] = 0;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v83 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v94 = 136315906;
        *(_QWORD *)&v94[4] = "operator[]";
        *(_WORD *)&v94[12] = 1024;
        *(_DWORD *)&v94[14] = 609;
        v95 = 2048;
        v96 = v52;
        v97 = 2048;
        v98 = v52;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
LABEL_43:
    if (a2[2].i8[5])
      v64 = a2[2].i8[4] == 0;
    else
      v64 = 1;
    if (!v64)
    {
      v65 = re::GeomMesh::addAttribute((uint64_t)this, "vertexTangent", 1, 7);
      v66 = re::GeomMesh::addAttribute((uint64_t)this, "vertexBitangent", 1, 7);
      if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v65 + 16))(v65))
      {
        v67 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v65, 0);
        v3 = (*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v65 + 16))(v65);
      }
      else
      {
        v3 = 0;
        v67 = 0;
      }
      result = (float32x2_t *)(*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)v66 + 16))(v66);
      if ((_DWORD)result)
      {
        v68 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v66, 0);
        result = (float32x2_t *)(*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)v66 + 16))(v66);
        v52 = result;
      }
      else
      {
        v52 = 0;
        v68 = 0;
      }
      v69 = *((unsigned int *)this + 4);
      if ((_DWORD)v69)
      {
        v70 = 0;
        while (v3 != v70)
        {
          *(_OWORD *)(v67 + 16 * v70) = xmmword_2260E5F10;
          if (v52 == v70)
            goto LABEL_71;
          *(_OWORD *)(v68 + 16 * v70++) = xmmword_226108EE0;
          if (v69 == v70)
            goto LABEL_58;
        }
        goto LABEL_70;
      }
    }
LABEL_58:
    switch(a2[3].i32[0])
    {
      case 0:
        v71 = xmmword_2260E5F50;
        v72 = xmmword_2260E5F10;
        goto LABEL_61;
      case 1:
        v71 = xmmword_2260E5F20;
        v72 = xmmword_2260E5F30;
LABEL_61:
        v83 = v71;
        v84 = v72;
        v73 = xmmword_2260E5F40;
        goto LABEL_65;
      case 3:
        v83 = xmmword_2260E5F10;
        v84 = xmmword_2260E5F50;
        v73 = xmmword_226108EE0;
        goto LABEL_65;
      case 4:
        v83 = xmmword_2260E5F10;
        v84 = xmmword_2260E5F40;
        v73 = xmmword_2260E5F50;
        goto LABEL_65;
      case 5:
        v83 = xmmword_2260E5F10;
        v84 = xmmword_226108EE0;
        v73 = xmmword_2260E5F20;
LABEL_65:
        v85 = v73;
        result = (float32x2_t *)re::transform(this, (float32x4_t *)&v83);
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_0::operator()(_QWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, float a8)
{
  uint64_t v15;
  uint64_t result;
  __int128 v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  _DWORD *v35;

  v15 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 6), "vertexPosition");
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  if ((_DWORD)result)
  {
    v18 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v15, 0);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    v19 = result;
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  v20 = a3 + a6 + 1;
  if (a7)
  {
    if ((_DWORD)v20 != a3)
    {
      v21 = (_OWORD *)(v18 + 16 * a3);
      if (v19 <= a3)
        v22 = a3;
      else
        v22 = v19;
      v23 = v20 - a3;
      v24 = v22 - a3;
      v25 = a4;
      while (v19 > v25)
      {
        if (!v24)
          goto LABEL_30;
        LODWORD(v17) = *(_DWORD *)(v18 + 16 * v25);
        *((float *)&v17 + 2) = a8;
        *v21++ = v17;
        v25 += a5;
        --v24;
        if (!--v23)
          goto LABEL_22;
      }
      goto LABEL_28;
    }
  }
  else if ((_DWORD)v20 != a3)
  {
    v26 = v18 + 8;
    v27 = (_OWORD *)(v18 + 16 * a3);
    if (v19 <= a3)
      v28 = a3;
    else
      v28 = v19;
    v29 = v20 - a3;
    v30 = v28 - a3;
    v31 = a4;
    while (v19 > v31)
    {
      if (!v30)
        goto LABEL_31;
      v32 = LODWORD(a8);
      DWORD2(v32) = *(_DWORD *)(v26 + 16 * v31);
      *v27++ = v32;
      v31 += a5;
      --v30;
      if (!--v29)
        goto LABEL_22;
    }
LABEL_29:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_30:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_31:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_22:
  if (a6)
  {
    v33 = a1[3];
    v34 = a1[5];
    while (v33 > a2)
    {
      v35 = (_DWORD *)(v34 + 16 * a2);
      v35[3] = a4;
      a4 += a5;
      *v35 = a3++;
      v35[1] = a3;
      v35[2] = a4;
      ++a2;
      if (!--a6)
        return result;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_28:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  return result;
}

void re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_1::operator()(uint64_t a1, int *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, float32x4_t *a7, float32x4_t *a8)
{
  int *v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  __float2 v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int *v37;
  int v38;
  uint64_t v39;
  int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;

  v14 = a2;
  v16 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a2 + 12), "vertexPosition");
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16))
    goto LABEL_22;
  v17 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v16, 0);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  if (v18 <= a5)
    goto LABEL_22;
  v19 = *(unsigned __int16 *)(*(_QWORD *)a1 + 4);
  v20 = *v14;
  if ((_WORD)v19 == 1)
  {
    v31 = 1;
LABEL_13:
    v32 = a4 - 1;
    v33 = *((_QWORD *)v14 + 3);
    v34 = *((_QWORD *)v14 + 5);
    v35 = v20 - a4;
    while (v33 > a3)
    {
      if (v35)
        v36 = v32 + 1;
      else
        v36 = a6;
      v37 = (unsigned int *)(v34 + 16 * a3);
      *v37 = a5;
      v37[1] = v32++;
      v37[2] = v36;
      v37[3] = -1;
      ++a3;
      --v35;
      if (!--v31)
        return;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_21:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_22:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v38 = *v14;
  v39 = a1;
  v40 = v14;
  v42 = a6;
  v21 = 0;
  v43 = a5;
  v22 = a5;
  v23 = 1.5708 / (float)v19;
  v24 = a4 + (unsigned __int16)(v19 - 1);
  v25 = v17 + 16 * a4;
  if (v18 <= a4)
    v26 = a4;
  else
    v26 = v18;
  v27 = a4;
  v28 = v24 - a4;
  v41 = v27;
  v29 = v26 - v27;
  do
  {
    if (v29 == v21)
      goto LABEL_21;
    v30 = __sincosf_stret(v23 * (float)(v21 + 1));
    *(float32x4_t *)(v25 + 16 * v21++) = vaddq_f32(*(float32x4_t *)(v17 + 16 * v22), vaddq_f32(vmulq_n_f32(*a7, v30.__cosval), vmulq_n_f32(*a8, v30.__sinval)));
  }
  while (v28 != v21);
  v14 = v40;
  v31 = *(unsigned __int16 *)(*(_QWORD *)v39 + 4);
  a6 = v42;
  a5 = v43;
  a4 = v41;
  v20 = v38;
  if (*(_WORD *)(*(_QWORD *)v39 + 4))
    goto LABEL_13;
}

void re::buildPlane(re::GeomMesh *a1, float32x2_t *a2)
{
  re::GeomAttribute *v4;
  re::GeomAttribute *v5;
  _BYTE v6[736];

  re::GeomMesh::GeomMesh((re::GeomMesh *)v6, 0);
  re::buildPlane((re *)v6, a2);
  re::DynamicArray<re::GeomMesh>::clear(a1, v4);
  re::DynamicArray<re::GeomMesh>::add((uint64_t)a1, (uint64_t)v6);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v6, v5);
}

void dispatchMipGenRect(void *a1, void *a2, void *a3, void *a4, int a5, unsigned int a6, unsigned int a7, unsigned int a8)
{
  id v13;
  id v14;
  id v15;
  int v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float32x2_t v25;
  float32x2_t v31;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unsigned int v45;
  _QWORD v46[3];
  _QWORD v47[3];
  _QWORD v48[3];
  uint64_t v49;
  int v50;
  int v51;

  v43 = __PAIR64__(a7, a8);
  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a5 - 1;
  v17 = a4;
  v18 = objc_msgSend(v13, "width");
  if (v18 >> a5 <= 1)
    v19 = 1;
  else
    v19 = v18 >> a5;
  v20 = objc_msgSend(v13, "height", v43);
  if (v20 >> a5 <= 1)
    v21 = 1;
  else
    v21 = v20 >> a5;
  v22 = objc_msgSend(v13, "width");
  if (v22 >> v16 <= 1)
    LOBYTE(v23) = 1;
  else
    v23 = v22 >> v16;
  v24 = (unint64_t)objc_msgSend(v13, "height") >> v16;
  if (v24 <= 1)
    LOBYTE(v24) = 1;
  v25.f32[1] = (float)v21;
  __asm { FMOV            V1.2S, #1.0 }
  v25.f32[0] = (float)v19;
  v31 = vdiv_f32(_D1, v25);
  __asm { FMOV            V1.2S, #0.25 }
  v48[0] = v31;
  v48[1] = vmul_f32(v31, _D1);
  v48[2] = vmul_f32(v31, (float32x2_t)0x3F0000003F000000);
  v49 = a6;
  BYTE4(v49) = v14 != v13;
  v50 = a5 - 1;
  v51 = a5;
  v33 = v24 & 1;
  _ZF = v33 == 0;
  v34 = (2 * v33) ^ 2;
  v35 = 3;
  if (!_ZF)
    v35 = 1;
  if ((v23 & 1) == 0)
    v34 = v35;
  v36 = (void *)v17[2 * v34 + 2];

  v37 = v36;
  objc_msgSend(v15, "setComputePipelineState:", v37);
  objc_msgSend(v15, "setBytes:length:atIndex:", v48, 40, 0);
  if (v44)
  {
    v38 = (void *)objc_msgSend(v13, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v13, "pixelFormat"), objc_msgSend(v13, "textureType"), v16, 1, 0, 1);
    v39 = (void *)objc_msgSend(v14, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v14, "pixelFormat"), objc_msgSend(v14, "textureType"), a5, 1, 0, 1);
    v40 = (void *)objc_msgSend(v14, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v14, "pixelFormat"), objc_msgSend(v14, "textureType"), 0, 1, 0, 1);
    objc_msgSend(v15, "setTexture:atIndex:", v38, 1);
    objc_msgSend(v15, "setTexture:atIndex:", v39, 2);
    objc_msgSend(v15, "setTexture:atIndex:", v38, 3);
    objc_msgSend(v15, "setTexture:atIndex:", v40, 4);

  }
  else
  {
    objc_msgSend(v15, "setTexture:atIndex:", v13, 1);
    objc_msgSend(v15, "setTexture:atIndex:", v14, 2);
  }
  v47[0] = (unsigned __int16)v45;
  v47[1] = HIWORD(v45);
  v47[2] = 1;
  v41 = objc_msgSend(v37, "threadExecutionWidth");
  v42 = objc_msgSend(v37, "maxTotalThreadsPerThreadgroup");
  v46[0] = v41;
  v46[1] = v42 / objc_msgSend(v37, "threadExecutionWidth");
  v46[2] = 1;
  objc_msgSend(v15, "dispatchThreads:threadsPerThreadgroup:", v47, v46);

}

void generateMipmapsForTexture_HierarchicalTiling_traverse(void *a1, void *a2, unint64_t a3, void *a4, int a5, __int32 a6, unsigned int a7, uint64_t a8, uint16x4_t a9)
{
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint32x4_t v20;
  uint64x2_t v21;
  int8x16_t v22;
  int8x16_t v23;
  uint64_t v24;
  __int32 v25;
  int32x2_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int32x2_t v30;
  int32x2_t v31;
  uint32x2_t v32;
  int8x8_t v33;
  int32x2_t v34;
  int8x16_t v35;
  int64x2_t v36;
  int32x2_t v37;
  id v38;
  uint16x4_t v39;
  uint32x4_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;

  a9.i32[0] = a6;
  v39 = a9;
  v38 = a1;
  v16 = a2;
  v17 = a4;
  v18 = objc_msgSend(v38, "width");
  v19 = objc_msgSend(v38, "height");
  if (v39.u16[1] <= HIWORD(a7))
  {
    v20 = vmovl_u16(v39);
    v21.i64[0] = v18;
    v21.i64[1] = v19;
    v22 = (int8x16_t)vshlq_u64(v21, (uint64x2_t)vnegq_s64(vdupq_n_s64(a5)));
    v23 = (int8x16_t)vcgtq_u64((uint64x2_t)v22, (uint64x2_t)vdupq_n_s64(1uLL));
    v24 = (unsigned __int16)a3;
    v35 = (int8x16_t)vdupq_n_s64(0x800uLL);
    v36 = vsubq_s64((int64x2_t)vandq_s8(v22, v23), (int64x2_t)vmvnq_s8(v23));
    do
    {
      v20.i32[0] = a6;
      if ((unsigned __int16)a7 >= (unsigned __int16)a6)
      {
        v25 = a6;
        do
        {
          v26 = vshl_n_s32(*(int32x2_t *)v20.i8, 0xBuLL);
          v27.i64[0] = v26.u32[0];
          v27.i64[1] = v26.u32[1];
          v28.i64[0] = 0xFFFFLL;
          v28.i64[1] = 0xFFFFLL;
          v29 = (int8x16_t)vsubq_s64(v36, (int64x2_t)vandq_s8(v27, v28));
          v30 = vmovn_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v35, (uint64x2_t)v29), v29, v35));
          v40 = v20;
          if (a5 >= 2)
          {
            v37 = v30;
            v31 = vadd_s32(v26, v30);
            v32 = vshr_n_u32((uint32x2_t)vand_s8((int8x8_t)vadd_s32(vadd_s32(v31, v31), (int32x2_t)-1), (int8x8_t)0xFFFF0000FFFFLL), 0xBuLL);
            HIWORD(v44) = v32.i16[2];
            LOWORD(v44) = v32.i16[0];
            v33 = vand_s8((int8x8_t)vadd_s32(*(int32x2_t *)v20.i8, *(int32x2_t *)v20.i8), (int8x8_t)0x1E0000001ELL);
            HIWORD(v43) = v33.i16[2];
            LOWORD(v43) = v33.i16[0];
            a3 = a3 & 0xFFFFFFFFFFFF0000 | v24;
            v34 = v26;
            generateMipmapsForTexture_HierarchicalTiling_traverse(v38, v16, a3, v17, (a5 - 1), v43, v44, a8);
            v30 = v37;
            v26 = v34;
          }
          HIWORD(v42) = v26.i16[2];
          LOWORD(v42) = v26.i16[0];
          HIWORD(v41) = v30.i16[2];
          LOWORD(v41) = v30.i16[0];
          dispatchMipGenRect(v38, v38, v16, v17, a5, v42, v41, a8);
          ++v25;
          v20 = v40;
          v20.i32[0] = v25;
        }
        while ((unsigned __int16)v25 <= (unsigned __int16)a7);
      }
      ++v20.i32[1];
    }
    while (v20.u16[2] <= HIWORD(a7));
  }

}

void re::SamplerManager::~SamplerManager(re::SamplerManager *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  re::FixedArray<re::DynamicString>::deinit((_QWORD *)this + 17);
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {

    *((_QWORD *)this + 15) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 14);
  if (v3)
  {

    *((_QWORD *)this + 14) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {

    *((_QWORD *)this + 13) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 12);
  if (v5)
  {

    *((_QWORD *)this + 12) = 0;
  }
  v6 = (void *)*((_QWORD *)this + 11);
  if (v6)
  {

    *((_QWORD *)this + 11) = 0;
  }
  v7 = (void *)*((_QWORD *)this + 10);
  if (v7)
  {

    *((_QWORD *)this + 10) = 0;
  }
  v8 = (void *)*((_QWORD *)this + 9);
  if (v8)
  {

    *((_QWORD *)this + 9) = 0;
  }
  v9 = (void *)*((_QWORD *)this + 8);
  if (v9)
  {

    *((_QWORD *)this + 8) = 0;
  }
  v10 = (void *)*((_QWORD *)this + 7);
  if (v10)
  {

    *((_QWORD *)this + 7) = 0;
  }
  v11 = (void *)*((_QWORD *)this + 6);
  if (v11)
  {

    *((_QWORD *)this + 6) = 0;
  }
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 8);

}

BOOL re::SamplerManager::init(id *this, id *a2)
{
  id *v4;
  _QWORD *v5;
  re::DynamicString *v6;
  int *v7;
  re::DynamicString *v8;
  re::DynamicString *v9;
  re::DynamicString *v10;
  re::DynamicString *v11;
  re::DynamicString *v12;
  re::DynamicString *v13;
  re::DynamicString *v14;
  re::DynamicString *v15;
  re::DynamicString *v16;
  id v17;
  int *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  re::SamplerTable *SamplerTableByName;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  char v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  char v43;
  unsigned __int8 *v44;
  int v45;
  uint64_t v46;
  int *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  char v53;
  unsigned __int8 *v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  char v62;
  unsigned __int8 *v63;
  int v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  char v71;
  unsigned __int8 *v72;
  int v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  char v80;
  unsigned __int8 *v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  _BYTE *v88;
  char v89;
  unsigned __int8 *v90;
  int v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _BYTE *v97;
  char v98;
  unsigned __int8 *v99;
  int v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  char v107;
  unsigned __int8 *v108;
  int v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  _BYTE *v115;
  char v116;
  unsigned __int8 *v117;
  int v118;
  uint64_t v119;
  id *v121;
  id *v122;
  id v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  id v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  id v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  const char *v145;
  __int16 v146;
  int v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  int *v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;

  v157 = *MEMORY[0x24BDAC8D0];
  v4 = re::ObjCObject::operator=(this, a2 + 23);
  v5 = v4 + 17;
  if (!this[18])
  {
    v143 = 0;
    v7 = &v144;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 0;
    v150 = 2048;
    v151 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_193;
  }
  v6 = (re::DynamicString *)this[19];
  *(_QWORD *)&v152 = "nearest";
  *((_QWORD *)&v152 + 1) = 7;
  re::DynamicString::operator=(v6, (uint64_t)&v152);
  v7 = (int *)this[18];
  if ((unint64_t)v7 <= 1)
  {
LABEL_193:
    v143 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 1;
    v150 = 2048;
    v151 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_194;
  }
  v8 = (re::DynamicString *)((char *)this[19] + 32);
  *(_QWORD *)&v152 = "bilinear";
  *((_QWORD *)&v152 + 1) = 8;
  re::DynamicString::operator=(v8, (uint64_t)&v152);
  v7 = (int *)this[18];
  if ((unint64_t)v7 <= 2)
  {
LABEL_194:
    v143 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 2;
    v150 = 2048;
    v151 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_195;
  }
  v9 = (re::DynamicString *)((char *)this[19] + 64);
  *(_QWORD *)&v152 = "trilinear";
  *((_QWORD *)&v152 + 1) = 9;
  re::DynamicString::operator=(v9, (uint64_t)&v152);
  v7 = (int *)this[18];
  if ((unint64_t)v7 <= 3)
  {
LABEL_195:
    v143 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 3;
    v150 = 2048;
    v151 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_196;
  }
  v10 = (re::DynamicString *)((char *)this[19] + 96);
  *(_QWORD *)&v152 = "anisotropic4x";
  *((_QWORD *)&v152 + 1) = 13;
  re::DynamicString::operator=(v10, (uint64_t)&v152);
  v7 = (int *)this[18];
  if ((unint64_t)v7 <= 4)
  {
LABEL_196:
    v143 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 4;
    v150 = 2048;
    v151 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_197;
  }
  v11 = (re::DynamicString *)((char *)this[19] + 128);
  *(_QWORD *)&v152 = "nearestClamp";
  *((_QWORD *)&v152 + 1) = 12;
  re::DynamicString::operator=(v11, (uint64_t)&v152);
  v7 = (int *)this[18];
  if ((unint64_t)v7 <= 5)
  {
LABEL_197:
    v143 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 5;
    v150 = 2048;
    v151 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_198;
  }
  v12 = (re::DynamicString *)((char *)this[19] + 160);
  *(_QWORD *)&v152 = "bilinearClamp";
  *((_QWORD *)&v152 + 1) = 13;
  re::DynamicString::operator=(v12, (uint64_t)&v152);
  v7 = (int *)this[18];
  if ((unint64_t)v7 <= 6)
  {
LABEL_198:
    v143 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 6;
    v150 = 2048;
    v151 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_199;
  }
  v13 = (re::DynamicString *)((char *)this[19] + 192);
  *(_QWORD *)&v152 = "trilinearClamp";
  *((_QWORD *)&v152 + 1) = 14;
  re::DynamicString::operator=(v13, (uint64_t)&v152);
  v7 = (int *)this[18];
  if ((unint64_t)v7 <= 7)
  {
LABEL_199:
    v143 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 7;
    v150 = 2048;
    v151 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_200;
  }
  v14 = (re::DynamicString *)((char *)this[19] + 224);
  *(_QWORD *)&v152 = "nearestClampToZero";
  *((_QWORD *)&v152 + 1) = 18;
  re::DynamicString::operator=(v14, (uint64_t)&v152);
  v7 = (int *)this[18];
  if ((unint64_t)v7 <= 8)
  {
LABEL_200:
    v143 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 8;
    v150 = 2048;
    v151 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_201;
  }
  v15 = (re::DynamicString *)((char *)this[19] + 256);
  *(_QWORD *)&v152 = "bilinearClampToZero";
  *((_QWORD *)&v152 + 1) = 19;
  re::DynamicString::operator=(v15, (uint64_t)&v152);
  v7 = (int *)this[18];
  if ((unint64_t)v7 <= 9)
  {
LABEL_201:
    v143 = 0;
    v18 = &v144;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 9;
    v150 = 2048;
    v151 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_202:
    v143 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 0;
    v150 = 2048;
    v151 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_203:
    v143 = 0;
    v47 = &v144;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 1;
    v150 = 2048;
    v151 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_204:
    v143 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 2;
    v150 = 2048;
    v151 = v47;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_205:
    v143 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 3;
    v150 = 2048;
    v151 = v47;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_206:
    v143 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 4;
    v150 = 2048;
    v151 = v47;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_207:
    v143 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 5;
    v150 = 2048;
    v151 = v47;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_208:
    v143 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 6;
    v150 = 2048;
    v151 = v47;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_209:
    v143 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 7;
    v150 = 2048;
    v151 = v47;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_210:
    v143 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 8;
    v150 = 2048;
    v151 = v47;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_211;
  }
  v16 = (re::DynamicString *)((char *)this[19] + 288);
  *(_QWORD *)&v152 = "trilinearClampToZero";
  *((_QWORD *)&v152 + 1) = 20;
  re::DynamicString::operator=(v16, (uint64_t)&v152);
  v17 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD6F0], sel_alloc), sel_init);
  objc_msgSend(v17, sel_setRAddressMode_, 2);
  objc_msgSend(v17, sel_setSAddressMode_, 2);
  objc_msgSend(v17, sel_setTAddressMode_, 2);
  objc_msgSend(v17, sel_setMinFilter_, 0);
  objc_msgSend(v17, sel_setMagFilter_, 0);
  objc_msgSend(v17, sel_setMipFilter_, 1);
  *(_QWORD *)&v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v17);
  NS::SharedPtr<MTL::Texture>::operator=(this + 6, (void **)&v152);
  if ((_QWORD)v152)
  {

    *(_QWORD *)&v152 = 0;
  }
  v121 = a2;
  if (v17)

  v18 = (int *)(this + 1);
  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), this + 6);
  v19 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD6F0], sel_alloc), sel_init);
  objc_msgSend(v19, sel_setRAddressMode_, 2);
  objc_msgSend(v19, sel_setSAddressMode_, 2);
  objc_msgSend(v19, sel_setTAddressMode_, 2);
  objc_msgSend(v19, sel_setMinFilter_, 1);
  objc_msgSend(v19, sel_setMagFilter_, 1);
  objc_msgSend(v19, sel_setMipFilter_, 1);
  *(_QWORD *)&v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v19);
  NS::SharedPtr<MTL::Texture>::operator=(this + 7, (void **)&v152);
  if ((_QWORD)v152)
  {

    *(_QWORD *)&v152 = 0;
  }
  if (v19)

  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), this + 7);
  v20 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD6F0], sel_alloc), sel_init);
  objc_msgSend(v20, sel_setRAddressMode_, 2);
  objc_msgSend(v20, sel_setSAddressMode_, 2);
  objc_msgSend(v20, sel_setTAddressMode_, 2);
  objc_msgSend(v20, sel_setMinFilter_, 1);
  objc_msgSend(v20, sel_setMagFilter_, 1);
  objc_msgSend(v20, sel_setMipFilter_, 2);
  *(_QWORD *)&v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v20);
  NS::SharedPtr<MTL::Texture>::operator=(this + 8, (void **)&v152);
  if ((_QWORD)v152)
  {

    *(_QWORD *)&v152 = 0;
  }
  if (v20)

  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), this + 8);
  v21 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD6F0], sel_alloc), sel_init);
  objc_msgSend(v21, sel_setRAddressMode_, 2);
  objc_msgSend(v21, sel_setSAddressMode_, 2);
  objc_msgSend(v21, sel_setTAddressMode_, 2);
  objc_msgSend(v21, sel_setMinFilter_, 0);
  objc_msgSend(v21, sel_setMagFilter_, 0);
  objc_msgSend(v21, sel_setMipFilter_, 1);
  objc_msgSend(v21, sel_setMaxAnisotropy_, 4);
  *(_QWORD *)&v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v21);
  NS::SharedPtr<MTL::Texture>::operator=(this + 9, (void **)&v152);
  if ((_QWORD)v152)
  {

    *(_QWORD *)&v152 = 0;
  }
  if (v21)

  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), this + 9);
  v22 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD6F0], sel_alloc), sel_init);
  objc_msgSend(v22, sel_setRAddressMode_, 0);
  objc_msgSend(v22, sel_setSAddressMode_, 0);
  objc_msgSend(v22, sel_setTAddressMode_, 0);
  objc_msgSend(v22, sel_setMinFilter_, 0);
  objc_msgSend(v22, sel_setMagFilter_, 0);
  objc_msgSend(v22, sel_setMipFilter_, 1);
  *(_QWORD *)&v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v22);
  NS::SharedPtr<MTL::Texture>::operator=(this + 10, (void **)&v152);
  if ((_QWORD)v152)
  {

    *(_QWORD *)&v152 = 0;
  }
  if (v22)

  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), this + 10);
  v23 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD6F0], sel_alloc), sel_init);
  objc_msgSend(v23, sel_setRAddressMode_, 0);
  objc_msgSend(v23, sel_setSAddressMode_, 0);
  objc_msgSend(v23, sel_setTAddressMode_, 0);
  objc_msgSend(v23, sel_setMinFilter_, 1);
  objc_msgSend(v23, sel_setMagFilter_, 1);
  objc_msgSend(v23, sel_setMipFilter_, 1);
  *(_QWORD *)&v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v23);
  NS::SharedPtr<MTL::Texture>::operator=(this + 11, (void **)&v152);
  if ((_QWORD)v152)
  {

    *(_QWORD *)&v152 = 0;
  }
  if (v23)

  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), this + 11);
  v24 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD6F0], sel_alloc), sel_init);
  objc_msgSend(v24, sel_setRAddressMode_, 0);
  objc_msgSend(v24, sel_setSAddressMode_, 0);
  objc_msgSend(v24, sel_setTAddressMode_, 0);
  objc_msgSend(v24, sel_setMinFilter_, 1);
  objc_msgSend(v24, sel_setMagFilter_, 1);
  objc_msgSend(v24, sel_setMipFilter_, 2);
  *(_QWORD *)&v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v24);
  NS::SharedPtr<MTL::Texture>::operator=(this + 12, (void **)&v152);
  if ((_QWORD)v152)
  {

    *(_QWORD *)&v152 = 0;
  }
  if (v24)

  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), this + 12);
  v25 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD6F0], sel_alloc), sel_init);
  objc_msgSend(v25, sel_setRAddressMode_, 4);
  objc_msgSend(v25, sel_setSAddressMode_, 4);
  objc_msgSend(v25, sel_setTAddressMode_, 4);
  objc_msgSend(v25, sel_setMinFilter_, 0);
  objc_msgSend(v25, sel_setMagFilter_, 0);
  objc_msgSend(v25, sel_setMipFilter_, 1);
  *(_QWORD *)&v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v25);
  NS::SharedPtr<MTL::Texture>::operator=(this + 13, (void **)&v152);
  if ((_QWORD)v152)
  {

    *(_QWORD *)&v152 = 0;
  }
  if (v25)

  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), this + 13);
  v26 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD6F0], sel_alloc), sel_init);
  objc_msgSend(v26, sel_setRAddressMode_, 4);
  objc_msgSend(v26, sel_setSAddressMode_, 4);
  objc_msgSend(v26, sel_setTAddressMode_, 4);
  objc_msgSend(v26, sel_setMinFilter_, 1);
  objc_msgSend(v26, sel_setMagFilter_, 1);
  objc_msgSend(v26, sel_setMipFilter_, 1);
  *(_QWORD *)&v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v26);
  v122 = this + 14;
  NS::SharedPtr<MTL::Texture>::operator=(this + 14, (void **)&v152);
  if ((_QWORD)v152)
  {

    *(_QWORD *)&v152 = 0;
  }
  if (v26)

  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), v122);
  v27 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD6F0], sel_alloc), sel_init);
  objc_msgSend(v27, sel_setRAddressMode_, 4);
  objc_msgSend(v27, sel_setSAddressMode_, 4);
  objc_msgSend(v27, sel_setTAddressMode_, 4);
  objc_msgSend(v27, sel_setMinFilter_, 1);
  objc_msgSend(v27, sel_setMagFilter_, 1);
  objc_msgSend(v27, sel_setMipFilter_, 2);
  *(_QWORD *)&v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v27);
  NS::SharedPtr<MTL::Texture>::operator=(this + 15, (void **)&v152);
  if ((_QWORD)v152)
  {

    *(_QWORD *)&v152 = 0;
  }
  if (v27)

  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), this + 15);
  SamplerTableByName = (re::SamplerTable *)re::MaterialManager::findSamplerTableByName((re::MaterialManager *)v121[3], "fallback");
  this[16] = SamplerTableByName;
  re::SamplerTable::init(SamplerTableByName, 0xAuLL);
  if (!this[18])
    goto LABEL_202;
  v29 = this[16];
  v30 = (uint64_t)this[19];
  v31 = *(_QWORD *)(v30 + 8);
  if ((v31 & 1) != 0)
  {
    v33 = *(_BYTE **)(v30 + 16);
    if (!v33)
    {
      v37 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_63;
    }
    LOBYTE(v30) = *v33;
  }
  else
  {
    v32 = v31 >> 8;
    v33 = (_BYTE *)(v30 + 9);
    LOBYTE(v30) = v32;
  }
  if ((_BYTE)v30)
  {
    v30 = (char)v30;
    v34 = v33[1];
    if (v34)
    {
      v35 = v33 + 2;
      do
      {
        v30 = 31 * v30 + v34;
        v36 = *v35++;
        v34 = v36;
      }
      while (v36);
    }
    v37 = v30 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v37 = 0;
  }
LABEL_63:
  v142 = v37;
  v141 = this[6];
  re::SamplerTable::setSampler(v29, &v142, &v141);
  if (v141)
  {

    v141 = 0;
  }
  v142 = 0;
  v18 = (int *)this[18];
  if ((unint64_t)v18 <= 1)
    goto LABEL_203;
  v38 = this[16];
  v39 = (uint64_t)this[19];
  v40 = *(_QWORD *)(v39 + 40);
  if ((v40 & 1) != 0)
  {
    v42 = *(_BYTE **)(v39 + 48);
    if (!v42)
    {
      v46 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_77;
    }
    LOBYTE(v39) = *v42;
  }
  else
  {
    v41 = v40 >> 8;
    v42 = (_BYTE *)(v39 + 41);
    LOBYTE(v39) = v41;
  }
  if ((_BYTE)v39)
  {
    v39 = (char)v39;
    v43 = v42[1];
    if (v43)
    {
      v44 = v42 + 2;
      do
      {
        v39 = 31 * v39 + v43;
        v45 = *v44++;
        v43 = v45;
      }
      while (v45);
    }
    v46 = v39 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v46 = 0;
  }
LABEL_77:
  v140 = v46;
  v139 = this[7];
  re::SamplerTable::setSampler(v38, &v140, &v139);
  if (v139)
  {

    v139 = 0;
  }
  v140 = 0;
  v47 = (int *)this[18];
  if ((unint64_t)v47 <= 2)
    goto LABEL_204;
  v48 = this[16];
  v49 = (uint64_t)this[19];
  v50 = *(_QWORD *)(v49 + 72);
  if ((v50 & 1) != 0)
  {
    v52 = *(_BYTE **)(v49 + 80);
    if (!v52)
    {
      v56 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_91;
    }
    LOBYTE(v49) = *v52;
  }
  else
  {
    v51 = v50 >> 8;
    v52 = (_BYTE *)(v49 + 73);
    LOBYTE(v49) = v51;
  }
  if ((_BYTE)v49)
  {
    v49 = (char)v49;
    v53 = v52[1];
    if (v53)
    {
      v54 = v52 + 2;
      do
      {
        v49 = 31 * v49 + v53;
        v55 = *v54++;
        v53 = v55;
      }
      while (v55);
    }
    v56 = v49 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v56 = 0;
  }
LABEL_91:
  v138 = v56;
  v137 = this[8];
  re::SamplerTable::setSampler(v48, &v138, &v137);
  if (v137)
  {

    v137 = 0;
  }
  v138 = 0;
  v47 = (int *)this[18];
  if ((unint64_t)v47 <= 3)
    goto LABEL_205;
  v57 = this[16];
  v58 = (uint64_t)this[19];
  v59 = *(_QWORD *)(v58 + 104);
  if ((v59 & 1) != 0)
  {
    v61 = *(_BYTE **)(v58 + 112);
    if (!v61)
    {
      v65 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_105;
    }
    LOBYTE(v58) = *v61;
  }
  else
  {
    v60 = v59 >> 8;
    v61 = (_BYTE *)(v58 + 105);
    LOBYTE(v58) = v60;
  }
  if ((_BYTE)v58)
  {
    v58 = (char)v58;
    v62 = v61[1];
    if (v62)
    {
      v63 = v61 + 2;
      do
      {
        v58 = 31 * v58 + v62;
        v64 = *v63++;
        v62 = v64;
      }
      while (v64);
    }
    v65 = v58 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v65 = 0;
  }
LABEL_105:
  v136 = v65;
  v135 = this[9];
  re::SamplerTable::setSampler(v57, &v136, &v135);
  if (v135)
  {

    v135 = 0;
  }
  v136 = 0;
  v47 = (int *)this[18];
  if ((unint64_t)v47 <= 4)
    goto LABEL_206;
  v66 = this[16];
  v67 = (uint64_t)this[19];
  v68 = *(_QWORD *)(v67 + 136);
  if ((v68 & 1) != 0)
  {
    v70 = *(_BYTE **)(v67 + 144);
    if (!v70)
    {
      v74 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_119;
    }
    LOBYTE(v67) = *v70;
  }
  else
  {
    v69 = v68 >> 8;
    v70 = (_BYTE *)(v67 + 137);
    LOBYTE(v67) = v69;
  }
  if ((_BYTE)v67)
  {
    v67 = (char)v67;
    v71 = v70[1];
    if (v71)
    {
      v72 = v70 + 2;
      do
      {
        v67 = 31 * v67 + v71;
        v73 = *v72++;
        v71 = v73;
      }
      while (v73);
    }
    v74 = v67 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v74 = 0;
  }
LABEL_119:
  v134 = v74;
  v133 = this[10];
  re::SamplerTable::setSampler(v66, &v134, &v133);
  if (v133)
  {

    v133 = 0;
  }
  v134 = 0;
  v47 = (int *)this[18];
  if ((unint64_t)v47 <= 5)
    goto LABEL_207;
  v75 = this[16];
  v76 = (uint64_t)this[19];
  v77 = *(_QWORD *)(v76 + 168);
  if ((v77 & 1) != 0)
  {
    v79 = *(_BYTE **)(v76 + 176);
    if (!v79)
    {
      v83 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_133;
    }
    LOBYTE(v76) = *v79;
  }
  else
  {
    v78 = v77 >> 8;
    v79 = (_BYTE *)(v76 + 169);
    LOBYTE(v76) = v78;
  }
  if ((_BYTE)v76)
  {
    v76 = (char)v76;
    v80 = v79[1];
    if (v80)
    {
      v81 = v79 + 2;
      do
      {
        v76 = 31 * v76 + v80;
        v82 = *v81++;
        v80 = v82;
      }
      while (v82);
    }
    v83 = v76 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v83 = 0;
  }
LABEL_133:
  v132 = v83;
  v131 = this[11];
  re::SamplerTable::setSampler(v75, &v132, &v131);
  if (v131)
  {

    v131 = 0;
  }
  v132 = 0;
  v47 = (int *)this[18];
  if ((unint64_t)v47 <= 6)
    goto LABEL_208;
  v84 = this[16];
  v85 = (uint64_t)this[19];
  v86 = *(_QWORD *)(v85 + 200);
  if ((v86 & 1) != 0)
  {
    v88 = *(_BYTE **)(v85 + 208);
    if (!v88)
    {
      v92 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_147;
    }
    LOBYTE(v85) = *v88;
  }
  else
  {
    v87 = v86 >> 8;
    v88 = (_BYTE *)(v85 + 201);
    LOBYTE(v85) = v87;
  }
  if ((_BYTE)v85)
  {
    v85 = (char)v85;
    v89 = v88[1];
    if (v89)
    {
      v90 = v88 + 2;
      do
      {
        v85 = 31 * v85 + v89;
        v91 = *v90++;
        v89 = v91;
      }
      while (v91);
    }
    v92 = v85 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v92 = 0;
  }
LABEL_147:
  v130 = v92;
  v129 = this[12];
  re::SamplerTable::setSampler(v84, &v130, &v129);
  if (v129)
  {

    v129 = 0;
  }
  v130 = 0;
  v47 = (int *)this[18];
  if ((unint64_t)v47 <= 7)
    goto LABEL_209;
  v93 = this[16];
  v94 = (uint64_t)this[19];
  v95 = *(_QWORD *)(v94 + 232);
  if ((v95 & 1) != 0)
  {
    v97 = *(_BYTE **)(v94 + 240);
    if (!v97)
    {
      v101 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_161;
    }
    LOBYTE(v94) = *v97;
  }
  else
  {
    v96 = v95 >> 8;
    v97 = (_BYTE *)(v94 + 233);
    LOBYTE(v94) = v96;
  }
  if ((_BYTE)v94)
  {
    v94 = (char)v94;
    v98 = v97[1];
    if (v98)
    {
      v99 = v97 + 2;
      do
      {
        v94 = 31 * v94 + v98;
        v100 = *v99++;
        v98 = v100;
      }
      while (v100);
    }
    v101 = v94 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v101 = 0;
  }
LABEL_161:
  v128 = v101;
  v127 = this[13];
  re::SamplerTable::setSampler(v93, &v128, &v127);
  if (v127)
  {

    v127 = 0;
  }
  v128 = 0;
  v47 = (int *)this[18];
  if ((unint64_t)v47 <= 8)
    goto LABEL_210;
  v102 = this[16];
  v103 = (uint64_t)this[19];
  v104 = *(_QWORD *)(v103 + 264);
  if ((v104 & 1) != 0)
  {
    v106 = *(_BYTE **)(v103 + 272);
    if (!v106)
    {
      v110 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_175;
    }
    LOBYTE(v103) = *v106;
  }
  else
  {
    v105 = v104 >> 8;
    v106 = (_BYTE *)(v103 + 265);
    LOBYTE(v103) = v105;
  }
  if ((_BYTE)v103)
  {
    v103 = (char)v103;
    v107 = v106[1];
    if (v107)
    {
      v108 = v106 + 2;
      do
      {
        v103 = 31 * v103 + v107;
        v109 = *v108++;
        v107 = v109;
      }
      while (v109);
    }
    v110 = v103 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v110 = 0;
  }
LABEL_175:
  v126 = v110;
  v125 = *v122;
  re::SamplerTable::setSampler(v102, &v126, &v125);
  if (v125)
  {

    v125 = 0;
  }
  v126 = 0;
  v47 = (int *)this[18];
  if ((unint64_t)v47 <= 9)
  {
LABEL_211:
    v143 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v144 = 136315906;
    v145 = "operator[]";
    v146 = 1024;
    v147 = 468;
    v148 = 2048;
    v149 = 9;
    v150 = 2048;
    v151 = v47;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v111 = this[16];
  v112 = (uint64_t)this[19];
  v113 = *(_QWORD *)(v112 + 296);
  if ((v113 & 1) != 0)
  {
    v115 = *(_BYTE **)(v112 + 304);
    if (!v115)
    {
      v119 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_189;
    }
    LOBYTE(v112) = *v115;
  }
  else
  {
    v114 = v113 >> 8;
    v115 = (_BYTE *)(v112 + 297);
    LOBYTE(v112) = v114;
  }
  if ((_BYTE)v112)
  {
    v112 = (char)v112;
    v116 = v115[1];
    if (v116)
    {
      v117 = v115 + 2;
      do
      {
        v112 = 31 * v112 + v116;
        v118 = *v117++;
        v116 = v118;
      }
      while (v118);
    }
    v119 = v112 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v119 = 0;
  }
LABEL_189:
  v124 = v119;
  v123 = this[15];
  re::SamplerTable::setSampler(v111, &v124, &v123);
  if (v123)

  return *this != 0;
}

_QWORD *re::SamplerTable::init(re::SamplerTable *this, unint64_t a2)
{
  _anonymous_namespace_ *v4;

  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)this + 8, a2);
  ++*((_DWORD *)this + 22);
}

void **re::SamplerTable::setSampler(_QWORD *a1, _QWORD *a2, id *a3)
{
  uint64_t v6;
  unint64_t v7;
  void **result;
  id v9;
  void *v10;
  uint64_t v11;
  _OWORD v12[5];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
  {
    v11 = a1[10];
    re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(a1 + 8), a3);
    LOBYTE(v12[0]) = v11;
    return (void **)re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addOrReplace((_anonymous_namespace_ *)a1, a2, (char *)v12);
  }
  else
  {
    v7 = *(unsigned __int8 *)(a1[1] + 16 * v6 + 8);
    if (a1[10] <= v7)
    {
      memset(v12, 0, sizeof(v12));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    result = (void **)(a1[12] + 8 * v7);
    v9 = *a3;
    v10 = *result;
    if (*a3 != *result)
    {
      result = NS::SharedPtr<MTL::Texture>::operator=(result, a3);
      if (!v9 || !v10)
      {
        *(_QWORD *)&v12[0] = a1;
        return (void **)re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::rehashKeysWith<re::SamplerTable::rehashNames(void)::{lambda(unsigned char)#1}>(a1, (uint64_t)v12);
      }
    }
  }
  return result;
}

void re::SamplerManager::deinit(re::SamplerManager *this)
{
  uint64_t v2;
  id *v3;
  uint64_t v4;
  void *v5;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = (id *)*((_QWORD *)this + 5);
    v4 = 8 * v2;
    do
    {

      *v3++ = 0;
      v4 -= 8;
    }
    while (v4);
  }
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)this + 8);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 8);
  *((_QWORD *)this + 16) = 0;

  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;

  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;

  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;

  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;

  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  v5 = *(void **)this;
  *(_QWORD *)this = 0;

}

void re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear(uint64_t a1)
{
  uint64_t v2;
  id *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(id **)(a1 + 32);
    v4 = 8 * v2;
    do
    {
      if (*v3)
      {

        *v3 = 0;
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v6 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 17 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      result = (_QWORD *)*v3;
    }
    v9 = &result[2 * v6];
    v3[1] = v9;
    v10 = v3[2];
    if (v10)
    {
      v11 = v9 + 1;
      v12 = v3[2];
      do
      {
        *((_QWORD *)v11 - 1) = 0;
        *v11 = 0;
        v11 += 16;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    v10 = 0;
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v10;
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addOrReplace(_anonymous_namespace_ *a1, _QWORD *a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::internalAdd(a1, a2, a3);
  v7 = v6;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateKvpsHash((uint64_t)a1, *((_QWORD *)a1 + 1) + 16 * v6);
  v8 = *((_QWORD *)a1 + 1) + 16 * v7;
  *(_BYTE *)(v8 + 8) = *a3;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateKvpsHash((uint64_t)a1, v8);
  return *((_QWORD *)a1 + 1) + 16 * v7 + 8;
}

_QWORD *re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::rehashKeysWith<re::SamplerTable::rehashNames(void)::{lambda(unsigned char)#1}>(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  uint64_t i;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  result[5] = 0;
  v14[0] = result;
  v2 = result[2];
  if (v2 >= 0x10)
  {
    v4 = result;
    v5 = 0;
    v6 = *result;
    v7 = v2 >> 4;
    while (1)
    {
      v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v14[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF)
        break;
      v5 += 16;
      if (!--v7)
        return result;
    }
    v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; v9 = i)
    {
      v10 = *(_QWORD *)(v14[0] + 8) + 16 * v9;
      v11 = *(unsigned __int8 *)(v10 + 8);
      v12 = *(_QWORD *)(*(_QWORD *)a2 + 80);
      if (v12 <= v11)
      {
        v16 = 0;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v17 = 136315906;
        v18 = "operator[]";
        v19 = 1024;
        v20 = 789;
        v21 = 2048;
        v22 = v11;
        v23 = 2048;
        v24 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 96) + 8 * v11))
      {
        v13 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)v10 ^ (*(_QWORD *)v10 >> 30));
        v4[5] ^= ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31) ^ (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27)));
      }
      result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v14);
    }
  }
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, char *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  v17 = *a3;
  v18 = *((_QWORD *)a1 + 1) + 16 * v16;
  *(_QWORD *)v18 = *a2;
  *(_BYTE *)(v18 + 8) = v17;
  v19 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v19;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateHashes((uint64_t)a1, v18);
  return *((_QWORD *)a1 + 1) + 16 * v16 + 8;
}

uint64_t re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateKvpsHash(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)a2 ^ (*(_QWORD *)a2 >> 30));
  v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * *(unsigned __int8 *)(a2 + 8)) ^ ((0xBF58476D1CE4E5B9 * *(unsigned __int8 *)(a2 + 8)) >> 27));
  *(_QWORD *)(result + 48) ^= v3 ^ ((v4 ^ (v4 >> 31)) + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9);
  return result;
}

double re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateHashes(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)a2 ^ (*(_QWORD *)a2 >> 30));
  v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  v4 = *(_QWORD *)(result + 48);
  *(_QWORD *)(result + 40) ^= v3;
  v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * *(unsigned __int8 *)(a2 + 8)) ^ ((0xBF58476D1CE4E5B9 * *(unsigned __int8 *)(a2 + 8)) >> 27));
  *(_QWORD *)(result + 48) = v4 ^ v3 ^ ((v3 << 6) + (v3 >> 2) + (v5 ^ (v5 >> 31)) - 0x61C8864680B583E9);
  return result;
}

double re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v18[2];
  uint64_t v19;
  _OWORD v20[4];

  v4 = a1[7];
  memset(v20, 0, sizeof(v20));
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::init(v20, v4, a2);
  v18[0] = a1;
  v5 = a1[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = *a1;
    v8 = v5 >> 4;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v18[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v8)
        goto LABEL_9;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    v19 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::internalAdd((_anonymous_namespace_ *)v20, (_QWORD *)(*(_QWORD *)(v18[0] + 8) + 16 * v10), (_BYTE *)(*(_QWORD *)(v18[0] + 8) + 16 * v10 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v18);
        v10 = v19;
      }
      while (v19 != -1);
      v5 = a1[2];
    }
  }
LABEL_9:
  v11 = *((_QWORD *)&v20[3] + 1);
  *((_QWORD *)&v20[3] + 1) = a1[7];
  v12 = v20[0];
  v13 = v20[1];
  v20[0] = *(_OWORD *)a1;
  *(_QWORD *)&v20[1] = v5;
  v14 = v20[2];
  v15 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v20[3];
  a1[7] = v11;
  *(_OWORD *)((char *)&v20[2] + 8) = v15;
  v16 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v12;
  *((_OWORD *)a1 + 1) = v13;
  *((_OWORD *)a1 + 2) = v14;
  *(_OWORD *)((char *)&v20[1] + 8) = v16;
  return re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)v20);
}

uint64_t re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::resize(a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = *(_QWORD *)a1;
  v12 = v9 % v10;
  while (1)
  {
    v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v13 < 0x40)
      break;
    if (v12 + 1 == v10)
      v12 = 0;
    else
      ++v12;
    if (v12 == v9 % v10)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  v14 = v11 + 16 * v12;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v12;
  LOBYTE(v14) = *a3;
  v17 = *((_QWORD *)a1 + 1) + 16 * v16;
  *(_QWORD *)v17 = *a2;
  *(_BYTE *)(v17 + 8) = v14;
  v18 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v18;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateHashes((uint64_t)a1, v17);
  return *((_QWORD *)a1 + 1) + 16 * v16 + 8;
}

void *re::introspect_MeshSortingConfiguration(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  re *v17;
  uint64_t *v18;
  re *v19;
  uint64_t *v20;
  re *v21;
  uint64_t *v22;
  uint64_t v23;
  re::IntrospectionBasic *v24;
  uint64_t v25[2];
  __int128 v26;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Centroid";
      re::introspect_MeshSortingConfiguration(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 3;
      *((_QWORD *)v15 + 2) = "FurthestOBB";
      qword_255828B98 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *((_QWORD *)v17 + 1) = 4;
      *((_QWORD *)v17 + 2) = "NearestOBB";
      qword_255828BA0 = (uint64_t)v17;
      v18 = re::introspectionAllocator(v17);
      v19 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 24, 8);
      *(_DWORD *)v19 = 1;
      *((_QWORD *)v19 + 1) = 1;
      *((_QWORD *)v19 + 2) = "FurthestRadial";
      qword_255828BA8 = (uint64_t)v19;
      v20 = re::introspectionAllocator(v19);
      v21 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 24, 8);
      *(_DWORD *)v21 = 1;
      *((_QWORD *)v21 + 1) = 2;
      *((_QWORD *)v21 + 2) = "NearestRadial";
      qword_255828BB0 = (uint64_t)v21;
      v22 = re::introspectionAllocator(v21);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 24, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = 5;
      *(_QWORD *)(v23 + 16) = "CentroidWithOverride";
      qword_255828BB8 = v23;
    }
  }
  {
    v24 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_MeshSortingConfiguration(BOOL)::info, "MeshSortingConfiguration", 1, 1, 1, 1);
    *(_QWORD *)v24 = &off_24ED7D9E8;
    *((_QWORD *)v24 + 8) = &re::introspect_MeshSortingConfiguration(BOOL)::enumTable;
    *((_DWORD *)v24 + 4) = 9;
  }
  if (v2)
  {
    if ((re::introspect_MeshSortingConfiguration(BOOL)::isInitialized & 1) != 0)
      return &re::introspect_MeshSortingConfiguration(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v26);
    v5 = re::introspect_MeshSortingConfiguration(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v26);
    if ((v5 & 1) != 0)
      return &re::introspect_MeshSortingConfiguration(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::introspect_MeshSortingConfiguration(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::introspect_MeshSortingConfiguration(BOOL)::info;
    }
  }
  re::introspect_MeshSortingConfiguration(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_MeshSortingConfiguration(BOOL)::info, a2);
  v25[0] = 0x5B547FA33D6536FELL;
  v25[1] = (uint64_t)"MeshSortingConfiguration";
  xmmword_255828BE8 = v26;
  re::StringID::destroyString((re::StringID *)v25);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::introspect_MeshSortingConfiguration(BOOL)::info;
}

uint64_t *re::allocInfo_RenderGraphData(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_365);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_365))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254118380, 0);
    *(uint64_t *)((char *)&qword_254118390 + 6) = 0;
    qword_254118390 = 0;
    qword_2541183A0 = 0;
    qword_2541183A8 = 0xFFFFFFFFLL;
    qword_254118380 = (uint64_t)&off_24ED7DAA8;
    qword_2541183B0 = (uint64_t)"RenderGraphData";
    dword_2541183B8 = 0;
    unk_2541183C0 = 0u;
    unk_2541183D0 = 0u;
    unk_2541183E0 = 0u;
    qword_2541183F0 = 0;
    __cxa_guard_release(&_MergedGlobals_365);
  }
  return &qword_254118380;
}

void re::initInfo_RenderGraphData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xA3C1F00635BD9A04;
  v5[1] = "RenderGraphData";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_RenderGraphData(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::introspect_RenderGraphData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphData", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphData, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphData>, this);
}

uint64_t re::RenderGraphDataStore::RenderGraphDataStore(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _anonymous_namespace_ *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = a1 + 16;
  *(_QWORD *)(a1 + 52) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  v5 = a1 + 64;
  *(_QWORD *)(a1 + 100) = 0x7FFFFFFFLL;
  v6 = re::globalAllocators((re *)a1);
  v7 = (_anonymous_namespace_ *)re::PerFrameAllocatorManager::perFrameAllocator(v6[6], a2);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = v7;
  *(_QWORD *)(a1 + 212) = 0x7FFFFFFFLL;
  *(_BYTE *)(a1 + 224) = 0;
  v9 = re::globalAllocators(v8);
  v10 = re::PerFrameAllocatorManager::perFrameAllocator(v9[6], *(_QWORD *)a1);
  *(_QWORD *)(a1 + 8) = v10;
  re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(v5, v10, 3);
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(a1 + 176, *(_QWORD *)(a1 + 8), 3);
  return a1;
}

void re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_18, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::RenderGraphDataStore::deinit(re::RenderGraphDataStore *this)
{
  re::RenderGraphDataStore *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  void (***v8)(_QWORD);
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  v1 = this;
  v2 = *((unsigned int *)this + 12);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = (int *)*((_QWORD *)this + 4);
    while (1)
    {
      v5 = *v4;
      v4 += 6;
      if (v5 < 0)
        break;
      if (v2 == ++v3)
      {
        LODWORD(v3) = *((_DWORD *)this + 12);
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if ((_DWORD)v2 != (_DWORD)v3)
  {
    v6 = v3;
    v7 = *((_DWORD *)this + 12);
    do
    {
      v8 = *(void (****)(_QWORD))(*((_QWORD *)v1 + 4) + 24 * v6 + 16);
      if (v8)
      {
        v9 = re::globalAllocators(this)[2];
        (**v8)(v8);
        this = (re::RenderGraphDataStore *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v9 + 40))(v9, v8);
        v7 = *((_DWORD *)v1 + 12);
      }
      if (v7 <= (int)v3 + 1)
        v10 = v3 + 1;
      else
        v10 = v7;
      while (1)
      {
        v6 = (v3 + 1);
        if (v10 - 1 == (_DWORD)v3)
          break;
        LODWORD(v3) = v3 + 1;
        v11 = v6;
        if ((*(_DWORD *)(*((_QWORD *)v1 + 4) + 24 * v6) & 0x80000000) != 0)
          goto LABEL_18;
      }
      v11 = v10;
LABEL_18:
      LODWORD(v3) = v11;
    }
    while ((_DWORD)v2 != v11);
  }
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v1 + 2);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v1 + 8);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)v1 + 112);
  return re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v1 + 22);
}

_anonymous_namespace_ *re::RenderGraphDataStore::add(re::RenderGraphDataStore *this, uint64_t a2, const re::RuntimeRenderGraphDataStruct *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  const char *v17;
  size_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _anonymous_namespace_ *v44;
  uint64_t v46;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v5 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), 40, 8);
  *(_QWORD *)v5 = &off_24ED72E48;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), 120, 8);
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_QWORD *)(v6 + 112) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v6, 0);
  *(_QWORD *)(v7 + 22) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0xFFFFFFFFLL;
  *(_QWORD *)v7 = &off_24ED7DAA8;
  *(_QWORD *)(v7 + 48) = 0;
  *(_DWORD *)(v7 + 56) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_QWORD *)(v7 + 112) = 0;
  if ((*((_QWORD *)a3 + 14) & 1) != 0)
    v8 = (const char *)*((_QWORD *)a3 + 15);
  else
    v8 = (char *)a3 + 113;
  v9 = strlen(v8);
  v10 = (char *)(*(uint64_t (**)(_QWORD, size_t, _QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), v9 + 1, 0);
  if ((*((_QWORD *)a3 + 14) & 1) != 0)
    v11 = (const char *)*((_QWORD *)a3 + 15);
  else
    v11 = (char *)a3 + 113;
  *(_QWORD *)(v6 + 48) = strcpy(v10, v11);
  v12 = *((_QWORD *)a3 + 5);
  *(_DWORD *)(v6 + 56) = v12;
  *(_DWORD *)(v6 + 16) = 8;
  v13 = v12;
  if ((_DWORD)v12)
  {
    v14 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), 8 * v12 + 23, 0);
    v15 = (_QWORD *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8);
    *(v15 - 2) = v13;
    *(v15 - 1) = v14;
    bzero(v15, 8 * v13);
    if (*(_DWORD *)(v6 + 56))
    {
      v16 = 0;
      do
      {
        if ((*((_QWORD *)a3 + 14) & 1) != 0)
          v17 = (const char *)*((_QWORD *)a3 + 15);
        else
          v17 = (char *)a3 + 113;
        v18 = strlen(v17);
        v19 = (char *)(*(uint64_t (**)(_QWORD, size_t, _QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), v18 + 1, 0);
        if (*((_QWORD *)a3 + 5) <= v16)
        {
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v48 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_50:
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v48 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_51:
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v48 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_52:
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v48 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v20 = v19;
        strcpy(v19, *(const char **)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 8 * v16) + 8));
        v21 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), 72, 8);
        *(_OWORD *)v21 = 0u;
        *(_OWORD *)(v21 + 16) = 0u;
        *(_OWORD *)(v21 + 32) = 0u;
        *(_OWORD *)(v21 + 48) = 0u;
        *(_QWORD *)(v21 + 64) = 0;
        *((_QWORD *)re::IntrospectionMember::IntrospectionMember((re::IntrospectionMember *)v21) + 1) = v20;
        if (*((_QWORD *)a3 + 5) <= v16)
          goto LABEL_50;
        v22 = *(_QWORD *)(*((_QWORD *)a3 + 7) + 8 * v16);
        *(_DWORD *)v21 = *(_DWORD *)v22;
        *(_DWORD *)(v21 + 36) = *(_DWORD *)(v22 + 36);
        re::SerializedReference<re::IntrospectionBase const*>::operator=((_QWORD *)(v21 + 16), (_QWORD *)(v22 + 16));
        if (*((_QWORD *)a3 + 5) <= v16)
          goto LABEL_51;
        re::SerializedReference<re::IntrospectionBase const*>::operator=((_QWORD *)(v21 + 48), (_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 8 * v16) + 48));
        if (*((_QWORD *)a3 + 5) <= v16)
          goto LABEL_52;
        *(_DWORD *)(v21 + 64) = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 8 * v16) + 64);
        v15[v16++] = v21;
      }
      while (v16 < *(unsigned int *)(v6 + 56));
    }
  }
  else
  {
    v15 = 0;
  }
  *(_QWORD *)(v6 + 64) = v15;
  *(_QWORD *)(v5 + 32) = v6;
  v23 = strlen(*(const char **)(v6 + 48));
  if (v23)
  {
    MurmurHash3_x64_128(*(_QWORD *)(v6 + 48), v23, 0, (unint64_t *)&v48);
    v24 = (*((_QWORD *)&v48 + 1) - 0x61C8864680B583E9 + ((_QWORD)v48 << 6) + ((unint64_t)v48 >> 2)) ^ v48;
  }
  else
  {
    v24 = 0;
  }
  re::FixedArray<char>::init<>((_QWORD *)(v5 + 8), *((_QWORD *)this + 1), *((_QWORD *)a3 + 10));
  memcpy(*(void **)(v5 + 24), *((const void **)a3 + 12), *(_QWORD *)(v5 + 16));
  v25 = *((_QWORD *)this + 22);
  if (v25)
  {
    v25 = v24 % *((unsigned int *)this + 50);
    v26 = *(unsigned int *)(*((_QWORD *)this + 23) + 4 * v25);
    v27 = a2;
    if ((_DWORD)v26 != 0x7FFFFFFF)
    {
      v28 = *((_QWORD *)this + 24);
      if (*(_QWORD *)(v28 + 24 * v26 + 8) == v24)
        goto LABEL_36;
      while (1)
      {
        LODWORD(v26) = *(_DWORD *)(v28 + 24 * v26) & 0x7FFFFFFF;
        if ((_DWORD)v26 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v28 + 24 * v26 + 8) == v24)
          goto LABEL_36;
      }
    }
  }
  else
  {
    v27 = a2;
  }
  v29 = *((unsigned int *)this + 53);
  if ((_DWORD)v29 == 0x7FFFFFFF)
  {
    v29 = *((unsigned int *)this + 52);
    v30 = v29;
    if ((_DWORD)v29 == *((_DWORD *)this + 50))
    {
      re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)this + 176, 2 * *((_DWORD *)this + 51));
      LODWORD(v25) = v24 % *((unsigned int *)this + 50);
      v30 = *((_DWORD *)this + 52);
    }
    *((_DWORD *)this + 52) = v30 + 1;
    v31 = *((_QWORD *)this + 24);
    v32 = *(_DWORD *)(v31 + 24 * v29);
  }
  else
  {
    v31 = *((_QWORD *)this + 24);
    v32 = *(_DWORD *)(v31 + 24 * v29);
    *((_DWORD *)this + 53) = v32 & 0x7FFFFFFF;
  }
  v33 = 24 * v29;
  *(_DWORD *)(v31 + v33) = v32 | 0x80000000;
  *(_DWORD *)(*((_QWORD *)this + 24) + v33) = *(_DWORD *)(*((_QWORD *)this + 24) + 24 * v29) & 0x80000000 | *(_DWORD *)(*((_QWORD *)this + 23) + 4 * v25);
  *(_QWORD *)(*((_QWORD *)this + 24) + 24 * v29 + 8) = v24;
  *(_QWORD *)(*((_QWORD *)this + 24) + 24 * v29 + 16) = v6;
  *(_DWORD *)(*((_QWORD *)this + 23) + 4 * v25) = v29;
  ++*((_DWORD *)this + 51);
  ++*((_DWORD *)this + 54);
LABEL_36:
  v34 = *((_QWORD *)this + 8);
  v35 = (v27 - 0x61C8864680B583E9 + (v24 << 6) + (v24 >> 2)) ^ v24;
  if (v34)
  {
    v34 = v35 % *((unsigned int *)this + 22);
    v36 = *(unsigned int *)(*((_QWORD *)this + 9) + 4 * v34);
    if ((_DWORD)v36 != 0x7FFFFFFF)
    {
      v46 = *((_QWORD *)this + 10);
      if (*(_QWORD *)(v46 + 24 * v36 + 8) == v35)
        goto LABEL_44;
      while (1)
      {
        LODWORD(v36) = *(_DWORD *)(v46 + 24 * v36) & 0x7FFFFFFF;
        if ((_DWORD)v36 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v46 + 24 * v36 + 8) == v35)
          goto LABEL_44;
      }
    }
  }
  v37 = *((unsigned int *)this + 25);
  if ((_DWORD)v37 == 0x7FFFFFFF)
  {
    v37 = *((unsigned int *)this + 24);
    v38 = v37;
    if ((_DWORD)v37 == *((_DWORD *)this + 22))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)this + 64, 2 * *((_DWORD *)this + 23));
      LODWORD(v34) = v35 % *((unsigned int *)this + 22);
      v38 = *((_DWORD *)this + 24);
    }
    *((_DWORD *)this + 24) = v38 + 1;
    v39 = *((_QWORD *)this + 10);
    v40 = *(_DWORD *)(v39 + 24 * v37);
  }
  else
  {
    v39 = *((_QWORD *)this + 10);
    v40 = *(_DWORD *)(v39 + 24 * v37);
    *((_DWORD *)this + 25) = v40 & 0x7FFFFFFF;
  }
  v41 = 24 * v37;
  *(_DWORD *)(v39 + v41) = v40 | 0x80000000;
  *(_DWORD *)(*((_QWORD *)this + 10) + v41) = *(_DWORD *)(*((_QWORD *)this + 10) + 24 * v37) & 0x80000000 | *(_DWORD *)(*((_QWORD *)this + 9) + 4 * v34);
  *(_QWORD *)(*((_QWORD *)this + 10) + 24 * v37 + 8) = v35;
  *(_QWORD *)(*((_QWORD *)this + 10) + 24 * v37 + 16) = v5;
  *(_DWORD *)(*((_QWORD *)this + 9) + 4 * v34) = v37;
  ++*((_DWORD *)this + 23);
  ++*((_DWORD *)this + 26);
LABEL_44:
  v42 = *((_QWORD *)this + 1);
  v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v44 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42 + 32))(v42, 40, 8);
  ArcSharedObject::ArcSharedObject(v44, 0);
  *(_QWORD *)v44 = &off_24ED72E88;
  *((_QWORD *)v44 + 3) = v6;
  *((_QWORD *)v44 + 4) = v43;
  return v44;
}

_QWORD *re::SerializedReference<re::IntrospectionBase const*>::operator=(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  const char *v4;

  v3 = a2[1];
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 8) & 1) != 0)
      v4 = *(const char **)(v3 + 16);
    else
      v4 = (const char *)(v3 + 9);
    re::SerializedReference<re::IntrospectionBase const*>::setString(a1, v4, *(_QWORD *)v3);
  }
  else
  {
    re::SerializedReference<re::IntrospectionBase const*>::reset(a1);
    *a1 = *a2;
  }
  return a1;
}

void re::FixedArray<char>::init<>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  size_t v8;

  *a1 = a2;
  a1[1] = a3;
  if (a3)
  {
    v5 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3, 1);
    a1[2] = v5;
    if (v5)
    {
      v7 = v5;
      v8 = a3 - 1;
      if (v8)
      {
        bzero(v5, v8);
        v7 += v8;
      }
      *v7 = 0;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
  }
}

_anonymous_namespace_ *re::RenderGraphDataStore::createWrappedData(re::RenderGraphDataStore *this, uint64_t a2, const char *__s)
{
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  re *v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v6 = strlen(__s);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)__s, v6, 0, (unint64_t *)v15);
    v7 = (v15[1] + (v15[0] << 6) + ((unint64_t)v15[0] >> 2) - 0x61C8864680B583E9) ^ v15[0];
  }
  else
  {
    v7 = 0;
  }
  v8 = re::RenderGraphDataStore::tryGetByTypeNameHash(this, a2, v7);
  v15[0] = v7;
  v9 = (re *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)this + 176, v15);
  v10 = 0;
  if (v9 && v8)
  {
    v11 = *(_QWORD *)v9;
    v12 = re::globalAllocators(v9)[2];
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, 40, 8);
    ArcSharedObject::ArcSharedObject(v10, 0);
    *(_QWORD *)v10 = &off_24ED72E88;
    *((_QWORD *)v10 + 3) = v11;
    *((_QWORD *)v10 + 4) = v13;
  }
  return v10;
}

uint64_t re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re23RenderGraphDataPipeDataE";
  if (((unint64_t)"N2re23RenderGraphDataPipeDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re23RenderGraphDataPipeDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::MipmapGenerationContext>(uint64_t a1, int a2, char *__s)
{
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t result;
  const char *v10;
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  if ((v5 & 1) == 0
  {
    re::RenderGraphDataStore::tryGet<re::MipmapGenerationContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v10);
  }
  v6 = 0x9E3779B97F4A7C17;
  v7 = re::RenderGraphDataStore::tryGet<re::MipmapGenerationContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, v11);
    v6 = ((v11[1] - 0x61C8864680B583E9 + (v11[0] << 6) + (v11[0] >> 2)) ^ v11[0]) - 0x61C8864680B583E9;
  }
  result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v7 >> 2) + (v7 << 6) + v6) ^ v7);
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 24))(*(_QWORD *)(result + 8));
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::DynamicArray<re::RenderProfilerText>>(uint64_t a1, int a2, char *__s)
{
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t result;
  const char *v10;
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  if ((v5 & 1) == 0
  {
    re::RenderGraphDataStore::tryGet<re::DynamicArray<re::RenderProfilerText>>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v10);
  }
  v6 = 0x9E3779B97F4A7C17;
  v7 = re::RenderGraphDataStore::tryGet<re::DynamicArray<re::RenderProfilerText>>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, v11);
    v6 = ((v11[1] - 0x61C8864680B583E9 + (v11[0] << 6) + (v11[0] >> 2)) ^ v11[0]) - 0x61C8864680B583E9;
  }
  result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v7 >> 2) + (v7 << 6) + v6) ^ v7);
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 56))(*(_QWORD *)(result + 8));
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::Slice<re::ClippingParametersEntry>>(uint64_t a1, int a2, char *__s)
{
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t result;
  const char *v10;
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  if ((v5 & 1) == 0
  {
    re::RenderGraphDataStore::tryGet<re::Slice<re::ClippingParametersEntry>>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v10);
  }
  v6 = 0x9E3779B97F4A7C17;
  v7 = re::RenderGraphDataStore::tryGet<re::Slice<re::ClippingParametersEntry>>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, v11);
    v6 = ((v11[1] - 0x61C8864680B583E9 + (v11[0] << 6) + (v11[0] >> 2)) ^ v11[0]) - 0x61C8864680B583E9;
  }
  result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v7 >> 2) + (v7 << 6) + v6) ^ v7);
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 88))(*(_QWORD *)(result + 8));
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::Slice<unsigned short>>(uint64_t a1, int a2, char *__s)
{
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t result;
  const char *v10;
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  if ((v5 & 1) == 0
  {
    re::RenderGraphDataStore::tryGet<re::Slice<unsigned short>>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v10);
  }
  v6 = 0x9E3779B97F4A7C17;
  v7 = re::RenderGraphDataStore::tryGet<re::Slice<unsigned short>>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, v11);
    v6 = ((v11[1] - 0x61C8864680B583E9 + (v11[0] << 6) + (v11[0] >> 2)) ^ v11[0]) - 0x61C8864680B583E9;
  }
  result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v7 >> 2) + (v7 << 6) + v6) ^ v7);
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 120))(*(_QWORD *)(result + 8));
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::ProbeContext>(uint64_t a1, int a2, char *__s)
{
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t result;
  const char *v10;
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  if ((v5 & 1) == 0
  {
    re::RenderGraphDataStore::tryGet<re::ProbeContext>(char const*,char const*)::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v10);
  }
  v6 = 0x9E3779B97F4A7C17;
  v7 = re::RenderGraphDataStore::tryGet<re::ProbeContext>(char const*,char const*)::kRenderGraphDataPipeDataScopeHash;
  v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, v11);
    v6 = ((v11[1] - 0x61C8864680B583E9 + (v11[0] << 6) + (v11[0] >> 2)) ^ v11[0]) - 0x61C8864680B583E9;
  }
  result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v7 >> 2) + (v7 << 6) + v6) ^ v7);
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 152))(*(_QWORD *)(result + 8));
  return result;
}

{
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t result;
  const char *v10;
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  if ((v5 & 1) == 0
  {
    re::RenderGraphDataStore::tryGet<re::ProbeContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v10);
  }
  v6 = 0x9E3779B97F4A7C17;
  v7 = re::RenderGraphDataStore::tryGet<re::ProbeContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, v11);
    v6 = ((v11[1] - 0x61C8864680B583E9 + (v11[0] << 6) + (v11[0] >> 2)) ^ v11[0]) - 0x61C8864680B583E9;
  }
  result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v7 >> 2) + (v7 << 6) + v6) ^ v7);
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 152))(*(_QWORD *)(result + 8));
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::BlurGenerationContext>(uint64_t a1, int a2, char *__s)
{
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t result;
  const char *v10;
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  if ((v5 & 1) == 0
  {
    re::RenderGraphDataStore::tryGet<re::BlurGenerationContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v10);
  }
  v6 = 0x9E3779B97F4A7C17;
  v7 = re::RenderGraphDataStore::tryGet<re::BlurGenerationContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, v11);
    v6 = ((v11[1] - 0x61C8864680B583E9 + (v11[0] << 6) + (v11[0] >> 2)) ^ v11[0]) - 0x61C8864680B583E9;
  }
  result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v7 >> 2) + (v7 << 6) + v6) ^ v7);
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 184))(*(_QWORD *)(result + 8));
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::CameraStreamContext>(uint64_t a1, int a2, char *__s)
{
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t result;
  const char *v10;
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  if ((v5 & 1) == 0
  {
    re::RenderGraphDataStore::tryGet<re::CameraStreamContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v10);
  }
  v6 = 0x9E3779B97F4A7C17;
  v7 = re::RenderGraphDataStore::tryGet<re::CameraStreamContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, v11);
    v6 = ((v11[1] - 0x61C8864680B583E9 + (v11[0] << 6) + (v11[0] >> 2)) ^ v11[0]) - 0x61C8864680B583E9;
  }
  result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v7 >> 2) + (v7 << 6) + v6) ^ v7);
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 216))(*(_QWORD *)(result + 8));
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::SFBSystemShellBlurContext>(uint64_t a1, int a2, char *__s)
{
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t result;
  const char *v10;
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  if ((v5 & 1) == 0
  {
    re::RenderGraphDataStore::tryGet<re::SFBSystemShellBlurContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v10);
  }
  v6 = 0x9E3779B97F4A7C17;
  v7 = re::RenderGraphDataStore::tryGet<re::SFBSystemShellBlurContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, v11);
    v6 = ((v11[1] - 0x61C8864680B583E9 + (v11[0] << 6) + (v11[0] >> 2)) ^ v11[0]) - 0x61C8864680B583E9;
  }
  result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v7 >> 2) + (v7 << 6) + v6) ^ v7);
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 248))(*(_QWORD *)(result + 8));
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::IBLContext>(uint64_t a1, int a2, char *__s)
{
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t result;
  const char *v10;
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  if ((v5 & 1) == 0
  {
    re::RenderGraphDataStore::tryGet<re::IBLContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v10);
  }
  v6 = 0x9E3779B97F4A7C17;
  v7 = re::RenderGraphDataStore::tryGet<re::IBLContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, v11);
    v6 = ((v11[1] - 0x61C8864680B583E9 + (v11[0] << 6) + (v11[0] >> 2)) ^ v11[0]) - 0x61C8864680B583E9;
  }
  result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v7 >> 2) + (v7 << 6) + v6) ^ v7);
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 408))(*(_QWORD *)(result + 8));
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::BlurPlanesRenderFrameData>(uint64_t a1, int a2, char *__s)
{
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t result;
  const char *v10;
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  if ((v5 & 1) == 0
  {
    re::RenderGraphDataStore::tryGet<re::BlurPlanesRenderFrameData>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v10);
  }
  v6 = 0x9E3779B97F4A7C17;
  v7 = re::RenderGraphDataStore::tryGet<re::BlurPlanesRenderFrameData>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, v11);
    v6 = ((v11[1] - 0x61C8864680B583E9 + (v11[0] << 6) + (v11[0] >> 2)) ^ v11[0]) - 0x61C8864680B583E9;
  }
  result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v7 >> 2) + (v7 << 6) + v6) ^ v7);
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 448))(*(_QWORD *)(result + 8));
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::AnchorTransformData>(uint64_t a1, int a2, char *__s)
{
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t result;
  const char *v10;
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  if ((v5 & 1) == 0
  {
    re::RenderGraphDataStore::tryGet<re::AnchorTransformData>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v10);
  }
  v6 = 0x9E3779B97F4A7C17;
  v7 = re::RenderGraphDataStore::tryGet<re::AnchorTransformData>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, v11);
    v6 = ((v11[1] - 0x61C8864680B583E9 + (v11[0] << 6) + (v11[0] >> 2)) ^ v11[0]) - 0x61C8864680B583E9;
  }
  result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v7 >> 2) + (v7 << 6) + v6) ^ v7);
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 1080))(*(_QWORD *)(result + 8));
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::VirtualEnvironmentProbeContext>(uint64_t a1, int a2, char *__s)
{
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t result;
  const char *v10;
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  if ((v5 & 1) == 0
  {
    re::RenderGraphDataStore::tryGet<re::VirtualEnvironmentProbeContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v10);
  }
  v6 = 0x9E3779B97F4A7C17;
  v7 = re::RenderGraphDataStore::tryGet<re::VirtualEnvironmentProbeContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, v11);
    v6 = ((v11[1] - 0x61C8864680B583E9 + (v11[0] << 6) + (v11[0] >> 2)) ^ v11[0]) - 0x61C8864680B583E9;
  }
  result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v7 >> 2) + (v7 << 6) + v6) ^ v7);
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 1112))(*(_QWORD *)(result + 8));
  return result;
}

re::DynamicString *re::SerializedReference<re::IntrospectionBase const*>::setString(_QWORD *a1, const char *a2, uint64_t a3)
{
  re::DynamicString *v6;
  _QWORD v8[2];

  re::SerializedReference<re::IntrospectionBase const*>::reset(a1);
  v6 = (re::DynamicString *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 32, 8);
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = 0;
  *(_QWORD *)v6 = a3;
  *((_QWORD *)v6 + 1) = 0;
  re::DynamicString::setCapacity(v6, 0);
  a1[1] = v6;
  v8[0] = a2;
  v8[1] = strlen(a2);
  return re::DynamicString::operator=(v6, (uint64_t)v8);
}

void re::RuntimeRenderGraphData::~RuntimeRenderGraphData(re::RuntimeRenderGraphData *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED72E48;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 2))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
    }
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED72E48;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 2))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
    }
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x2276933B8);
}

uint64_t re::RuntimeRenderGraphData::entryPoint(re::RuntimeRenderGraphData *this)
{
  return *((_QWORD *)this + 3);
}

re::IntrospectionMember *re::IntrospectionMember::IntrospectionMember(re::IntrospectionMember *this)
{
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)this + 2);
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 7) = 0;
  re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)this + 6);
  *((_DWORD *)this + 16) = 0;
  return this;
}

void re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10 + 8) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10 + 8), *(_QWORD *)&v13[16] + v10 + 8, *(_QWORD *)&v13[16] + v10 + 16);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::RenderGraphDataWrapper::~RenderGraphDataWrapper(re::RenderGraphDataWrapper *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphScopeOutput::addTargetToLane(uint64_t a1, uint64_t *a2, double *a3, int a4)
{
  uint64_t v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  _QWORD v10[3];
  int v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v7 = a1 + 40;
  v8 = (_anonymous_namespace_ *)re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a1 + 40, a2);
  if (v8)
    goto LABEL_10;
  memset(v10, 0, sizeof(v10));
  v11 = 0;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = -1;
  v18 = 0;
  v19 = -1;
  v20 = 0;
  v21 = -1;
  re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(v7, a2, (uint64_t)v10);
  if (*((_QWORD *)&v12 + 1))
  {
    if (v15)
      (*(void (**)(void))(**((_QWORD **)&v12 + 1) + 40))();
    v15 = 0;
    v13 = 0uLL;
    *((_QWORD *)&v12 + 1) = 0;
    ++v14;
  }
  if (v10[0] && (_QWORD)v12)
    (*(void (**)(void))(*(_QWORD *)v10[0] + 40))();
  v8 = (_anonymous_namespace_ *)re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v7, a2);
  if (v8)
  {
LABEL_10:
    *((_OWORD *)v8 + 5) = *(_OWORD *)a3;
    if (a4)
      re::DynamicArray<re::RenderGraphTargetHandle>::add(v8, a3);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "outputList", "addTargetToLane", 13);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 144 * v4 + 8) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 144 * v4) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + 144 * v4 + 8) == v2)
        return v6 + 144 * v4 + 16;
    }
    return 0;
  }
  return v6 + 144 * v4 + 16;
}

uint64_t re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 144 * v13;
    return v12 + 16;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 144 * v10 + 8) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 144 * v10) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 144 * v10;
  return v12 + 16;
}

double re::DynamicArray<re::RenderGraphTargetHandle>::add(_anonymous_namespace_ *this, double *a2)
{
  unint64_t v4;
  double *v5;
  double result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RenderGraphTargetHandle>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (double *)(*((_QWORD *)this + 4) + 16 * v4);
  *v5 = 0.0;
  v5[1] = NAN;
  *v5 = *a2;
  result = a2[1];
  v5[1] = result;
  *((_QWORD *)this + 2) = v4 + 1;
  ++*((_DWORD *)this + 6);
  return result;
}

double re::RenderGraphScopeOutput::inheritPropertiesFromLane(uint64_t a1, uint64_t *a2, double *a3)
{
  uint64_t v6;
  _anonymous_namespace_ *v7;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v6 = a1 + 88;
  v7 = (_anonymous_namespace_ *)re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a1 + 88, a2);
  if (!v7)
  {
    v11 = 0;
    v12 = 0;
    v14 = 0;
    v13 = 0;
    v15 = 0u;
    v16 = 0u;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = -1;
    v21 = 0;
    v22 = -1;
    v23 = 0;
    v24 = -1;
    v7 = (_anonymous_namespace_ *)re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(v6, a2, (uint64_t)&v11);
    if (*((_QWORD *)&v15 + 1))
    {
      if (v18)
        (*(void (**)(void))(**((_QWORD **)&v15 + 1) + 40))();
      v18 = 0;
      v16 = 0uLL;
      *((_QWORD *)&v15 + 1) = 0;
      ++v17;
    }
    if (v11 && (_QWORD)v15)
      (*(void (**)(void))(*(_QWORD *)v11 + 40))();
  }
  re::DynamicArray<re::RenderGraphTargetHandle>::add(v7, a3);
  v8 = a1 + 40;
  v9 = (_anonymous_namespace_ *)re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a1 + 40, a2);
  if (!v9)
  {
    v11 = 0;
    v12 = 0;
    v14 = 0;
    v13 = 0;
    v15 = 0u;
    v16 = 0u;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = -1;
    v21 = 0;
    v22 = -1;
    v23 = 0;
    v24 = -1;
    v9 = (_anonymous_namespace_ *)re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(v8, a2, (uint64_t)&v11);
    if (*((_QWORD *)&v15 + 1))
    {
      if (v18)
        (*(void (**)(void))(**((_QWORD **)&v15 + 1) + 40))();
      v18 = 0;
      v16 = 0uLL;
      *((_QWORD *)&v15 + 1) = 0;
      ++v17;
    }
    if (v11 && (_QWORD)v15)
      (*(void (**)(void))(*(_QWORD *)v11 + 40))();
  }
  return re::DynamicArray<re::RenderGraphTargetHandle>::add(v9, a3);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v6 = a1 + 40;
  v7 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a1 + 40, a2);
  if (!v7)
  {
    v11 = 0;
    v12 = 0;
    v14 = 0;
    v13 = 0;
    v15 = 0u;
    v16 = 0u;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = -1;
    v21 = 0;
    v22 = -1;
    v23 = 0;
    v24 = -1;
    v7 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(v6, a2, (uint64_t)&v11);
    if (*((_QWORD *)&v15 + 1))
    {
      if (v18)
        (*(void (**)(void))(**((_QWORD **)&v15 + 1) + 40))();
      v18 = 0;
      v16 = 0uLL;
      *((_QWORD *)&v15 + 1) = 0;
      ++v17;
    }
    if (v11 && (_QWORD)v15)
      (*(void (**)(void))(*(_QWORD *)v11 + 40))();
  }
  re::DynamicArray<re::RenderGraphTargetHandle>::add((_anonymous_namespace_ *)(v7 + 40), a3);
  v8 = a1 + 88;
  v9 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a1 + 88, a2);
  if (!v9)
  {
    v11 = 0;
    v12 = 0;
    v14 = 0;
    v13 = 0;
    v15 = 0u;
    v16 = 0u;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = -1;
    v21 = 0;
    v22 = -1;
    v23 = 0;
    v24 = -1;
    v9 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(v8, a2, (uint64_t)&v11);
    if (*((_QWORD *)&v15 + 1))
    {
      if (v18)
        (*(void (**)(void))(**((_QWORD **)&v15 + 1) + 40))();
      v18 = 0;
      v16 = 0uLL;
      *((_QWORD *)&v15 + 1) = 0;
      ++v17;
    }
    if (v11 && (_QWORD)v15)
      (*(void (**)(void))(*(_QWORD *)v11 + 40))();
  }
  return re::DynamicArray<re::RenderGraphTargetHandle>::add((_anonymous_namespace_ *)(v9 + 40), a3);
}

void re::RenderGraphScopeOutput::addBufferToLane(uint64_t a1, uint64_t *a2, double *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  int v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v7 = a1 + 88;
  v8 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a1 + 88, a2);
  if (v8)
    goto LABEL_10;
  memset(v10, 0, sizeof(v10));
  v11 = 0;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = -1;
  v18 = 0;
  v19 = -1;
  v20 = 0;
  v21 = -1;
  re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(v7, a2, (uint64_t)v10);
  if (*((_QWORD *)&v12 + 1))
  {
    if (v15)
      (*(void (**)(void))(**((_QWORD **)&v12 + 1) + 40))();
    v15 = 0;
    v13 = 0uLL;
    *((_QWORD *)&v12 + 1) = 0;
    ++v14;
  }
  if (v10[0] && (_QWORD)v12)
    (*(void (**)(void))(*(_QWORD *)v10[0] + 40))();
  v8 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v7, a2);
  if (v8)
  {
LABEL_10:
    *(_OWORD *)(v8 + 96) = *(_OWORD *)a3;
    if (a4)
      re::DynamicArray<re::RenderGraphTargetHandle>::add((_anonymous_namespace_ *)(v8 + 40), a3);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "outputList", "addBufferToLane", 49);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  signed int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v35[44];

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v8 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v35, 0, 36);
          *(_QWORD *)&v35[36] = 0x7FFFFFFFLL;
          re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v35, v13, v12);
          v15 = *(_OWORD *)v35;
          *(_OWORD *)v35 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v35[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v35[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v35[24];
          *(_OWORD *)&v35[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v35[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = (_QWORD *)(v17 + 8);
            do
            {
              if ((*(_DWORD *)(v22 - 1) & 0x80000000) != 0)
              {
                v23 = 0xBF58476D1CE4E5B9 * (*v22 ^ (*v22 >> 30));
                v24 = (0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31);
                re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(a1, v24 % *(unsigned int *)(a1 + 24), v24, v22, v22 + 1);
              }
              ++v21;
              v22 += 18;
            }
            while (v21 < v20);
          }
          re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v35);
        }
      }
      else
      {
        if (v12)
          v27 = 2 * v11;
        else
          v27 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(v25 + 144 * v8);
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(v25 + 144 * v8);
    *(_DWORD *)(a1 + 36) = v26 & 0x7FFFFFFF;
  }
  v28 = 144 * v8;
  *(_DWORD *)(v25 + v28) = v26 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v28) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 144 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 144 * v8 + 8) = *a4;
  v29 = *(_QWORD *)(a1 + 16) + 144 * v8;
  *(_QWORD *)(v29 + 48) = 0;
  *(_QWORD *)(v29 + 24) = 0;
  *(_QWORD *)(v29 + 32) = 0;
  *(_DWORD *)(v29 + 40) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  *(_QWORD *)(v29 + 16) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v29 + 24) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v30 = *(_QWORD *)(v29 + 32);
  *(_QWORD *)(v29 + 32) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v30;
  v31 = *(_QWORD *)(v29 + 48);
  *(_QWORD *)(v29 + 48) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v31;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v29 + 40);
  *(_QWORD *)(v29 + 88) = 0;
  *(_QWORD *)(v29 + 64) = 0;
  *(_QWORD *)(v29 + 72) = 0;
  *(_QWORD *)(v29 + 56) = 0;
  *(_DWORD *)(v29 + 80) = 0;
  *(_QWORD *)(v29 + 56) = *(_QWORD *)(a5 + 40);
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(v29 + 64) = *(_QWORD *)(a5 + 48);
  *(_QWORD *)(a5 + 48) = 0;
  v32 = *(_QWORD *)(v29 + 72);
  *(_QWORD *)(v29 + 72) = *(_QWORD *)(a5 + 56);
  *(_QWORD *)(a5 + 56) = v32;
  v33 = *(_QWORD *)(v29 + 88);
  *(_QWORD *)(v29 + 88) = *(_QWORD *)(a5 + 72);
  *(_QWORD *)(a5 + 72) = v33;
  ++*(_DWORD *)(a5 + 64);
  ++*(_DWORD *)(v29 + 80);
  *(_QWORD *)(v29 + 96) = 0;
  *(_QWORD *)(v29 + 104) = -1;
  *(_QWORD *)(v29 + 96) = *(_QWORD *)(a5 + 80);
  *(_QWORD *)(v29 + 104) = *(_QWORD *)(a5 + 88);
  *(_QWORD *)(v29 + 112) = 0;
  *(_QWORD *)(v29 + 120) = -1;
  *(_QWORD *)(v29 + 112) = *(_QWORD *)(a5 + 96);
  *(_QWORD *)(v29 + 120) = *(_QWORD *)(a5 + 104);
  *(_OWORD *)(v29 + 128) = *(_OWORD *)(a5 + 112);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 144 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::EntryWithoutHash::free((_QWORD *)(a1[2] + v3));
        ++v4;
        v3 += 144;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_QWORD *re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::EntryWithoutHash::free(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  if ((*(_DWORD *)result & 0x80000000) != 0)
  {
    v1 = result;
    *(_DWORD *)result &= ~0x80000000;
    result[1] = 0;
    v2 = result + 2;
    v4 = result + 7;
    v3 = result[7];
    if (v3)
    {
      if (v1[11])
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
      v1[11] = 0;
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      ++*((_DWORD *)v1 + 20);
    }
    result = (_QWORD *)*v2;
    if (*v2)
    {
      if (v1[6])
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
      v1[6] = 0;
      v2[1] = 0;
      v2[2] = 0;
      *v2 = 0;
      ++*((_DWORD *)v1 + 10);
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RenderGraphTargetHandle>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RenderGraphTargetHandle>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphTargetHandle>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RenderGraphTargetHandle>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphTargetHandle>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_15;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_15:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (_QWORD *)(v8 + 16 * v9);
        v11 = v7;
        v12 = (_QWORD *)v5[4];
        do
        {
          *v11 = 0;
          v11[1] = -1;
          *v11 = *v12;
          v11[1] = v12[1];
          v12 += 2;
          v11 += 2;
        }
        while (v12 != v10);
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t ___ZN2re22MaterialParameterTable16kDefaultNameHashEv_block_invoke()
{
  uint64_t result;
  unint64_t v1[3];

  v1[2] = *MEMORY[0x24BDAC8D0];
  result = MurmurHash3_x64_128((uint64_t)"Default", 7, 0, v1);
  re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash = (v1[1]
                                                                         + (v1[0] << 6)
                                                                         + (v1[0] >> 2)
                                                                         - 0x61C8864680B583E9) ^ v1[0];
  return result;
}

uint64_t ___ZN2re22MaterialParameterTable13kFadeNameHashEv_block_invoke()
{
  uint64_t result;
  unint64_t v1[3];

  v1[2] = *MEMORY[0x24BDAC8D0];
  result = MurmurHash3_x64_128((uint64_t)"Fade", 4, 0, v1);
  re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash = (v1[1]
                                                                   + (v1[0] << 6)
                                                                   + (v1[0] >> 2)
                                                                   - 0x61C8864680B583E9) ^ v1[0];
  return result;
}

BOOL re::MaterialParameterHandle::isParameterType(uint64_t a1, int a2)
{
  int v2;

  v2 = 64;
  switch(*(_BYTE *)(a1 + 12) & 7)
  {
    case 1:
      v2 = *(unsigned __int8 *)(a1 + 24);
      if (v2 != 48 && v2 != 34)
        return v2 == a2;
      return a2 == 34 || a2 == 48;
    case 2:
      return v2 == a2;
    case 3:
      v2 = 128;
      return v2 == a2;
    case 4:
      v2 = 192;
      return v2 == a2;
    default:
      v2 = 0;
      return v2 == a2;
  }
}

uint64_t re::TextureParameterTable::operator=(uint64_t a1, uint64_t *a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const re::TextureHandle *v14;
  _anonymous_namespace_ *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int16 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v26;
  uint64_t v27;
  os_unfair_lock_s *v28[2];
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t i;

  if ((uint64_t *)a1 != a2)
  {
    re::DynamicArray<re::TextureViews<re::TextureHandle>>::deinit(a1 + 200);
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit(a1 + 136);
    if (a2[25])
    {
      v5 = a2[27];
      re::DynamicArray<re::TextureViews<re::TextureHandle>>::setCapacity((_QWORD *)(a1 + 200), v5);
      ++*(_DWORD *)(a1 + 224);
      v30 = a2 + 17;
      v6 = a2[19];
      if (v6 >= 0x10)
      {
        v7 = 0;
        v8 = a2[17];
        v9 = v6 >> 4;
        while (1)
        {
          v10 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
          v31 = (unsigned __int16)~v10;
          if (v10 != 0xFFFF)
            break;
          v7 += 16;
          if (!--v9)
            goto LABEL_10;
        }
        v11 = __clz(__rbit64((unsigned __int16)~v10)) + v7;
        for (i = v11; i != -1; v11 = i)
        {
          v12 = v30[1] + 16 * v11;
          v13 = *(unsigned __int8 *)(v12 + 9);
          v29 = *(_QWORD *)v12;
          v14 = (const re::TextureHandle *)re::TextureHandleTable::textureHandleAt((re::TextureHandleTable *)(a2 + 16), v13);
          re::TextureHandle::TextureHandle((re::TextureHandle *)v28, v14);
          re::TextureHandleTable::setTexture((_QWORD *)(a1 + 128), &v29, v28);
          re::TextureHandle::invalidate((re::TextureHandle *)v28);
          v29 = 0;
          re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v30);
        }
      }
    }
LABEL_10:
    re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit(a1 + 304);
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit(a1 + 240);
    *(_QWORD *)(a1 + 344) = 0;
    if (a2[38])
    {
      v16 = a2[40];
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)(a1 + 304), v16);
      ++*(_DWORD *)(a1 + 328);
      v30 = a2 + 30;
      v17 = a2[32];
      if (v17 >= 0x10)
      {
        v18 = 0;
        v19 = a2[30];
        v20 = v17 >> 4;
        while (1)
        {
          v21 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v19 + v18)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
          v31 = (unsigned __int16)~v21;
          if (v21 != 0xFFFF)
            break;
          v18 += 16;
          if (!--v20)
            goto LABEL_20;
        }
        v22 = __clz(__rbit64((unsigned __int16)~v21)) + v18;
        for (i = v22; i != -1; v22 = i)
        {
          v23 = v30[1] + 16 * v22;
          v24 = *(unsigned __int8 *)(v23 + 8);
          v27 = *(_QWORD *)v23;
          v26 = *(id *)re::SamplerTable::samplerAt((re::SamplerTable *)(a2 + 30), v24);
          re::SamplerTable::setSampler((_QWORD *)(a1 + 240), &v27, &v26);
          if (v26)
          {

            v26 = 0;
          }
          v27 = 0;
          re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v30);
        }
      }
    }
LABEL_20:
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy((_anonymous_namespace_ *)a1, a2);
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy((_anonymous_namespace_ *)(a1 + 64), a2 + 8);
    re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::copy((_anonymous_namespace_ *)(a1 + 352), a2 + 44);
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::copy((_anonymous_namespace_ *)(a1 + 416), a2 + 52);
  }
  return a1;
}

void re::TextureHandleTable::setTexture(_QWORD *a1, uint64_t *a2, os_unfair_lock_s **a3)
{
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;

  re::TextureHandle::metalTexture(a3, &v11);
  v6 = v11;
  if (v11)
  {
    re::TextureHandle::metalTexture(a3, &v10);
    v7 = v10;
    v8 = objc_msgSend(v10, sel_protectionOptions);
    if (v7)

  }
  else
  {
    v8 = 0;
  }
  v9 = *a2;
  re::TextureTableImpl<re::TextureHandle>::setTexture(a1, &v9, (const re::TextureHandle *)a3, (uint64_t)v8);
}

unint64_t re::TextureHandleTable::textureHandleAt(re::TextureHandleTable *this, unint64_t a2)
{
  if (*((_QWORD *)this + 11) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 13) + 40 * a2;
}

unint64_t re::SamplerTable::samplerAt(re::SamplerTable *this, unint64_t a2)
{
  if (*((_QWORD *)this + 10) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 12) + 8 * a2;
}

uint64_t *re::TextureParameterTable::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(a1, a2);
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(a1 + 8, a2 + 8);
  }
  if (a2[25])
    re::TextureTableImpl<re::TextureHandle>::operator=((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
  if (a2[38])
    re::SamplerTable::operator=(a1 + 30, a2 + 30);
  if (a1 != a2)
  {
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(a1 + 44, a2 + 44);
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(a1 + 52, a2 + 52);
  }
  return a1;
}

uint64_t *re::SamplerTable::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(a1, a2);
  re::DynamicArray<re::TextureViews<re::TextureHandle>>::operator=((uint64_t)(a1 + 8), (uint64_t)(a2 + 8));
  a1[13] = a2[13];
  return a1;
}

double re::TextureParameterTable::deinit(re::TextureParameterTable *this)
{
  re::DynamicArray<re::TextureViews<re::TextureHandle>>::deinit((uint64_t)this + 200);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 136);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 304);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 240);
  *((_QWORD *)this + 43) = 0;
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64);
  re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::deinit((uint64_t)this + 352);
  return re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 416);
}

_QWORD *re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  __int128 v3;
  uint64_t v4;
  _QWORD *v5;

  result[5] = 0;
  result[6] = 0;
  v1 = result[2];
  result[3] = 0;
  result[4] = v1;
  if (v1 >= 0x10)
  {
    v2 = 0;
    *(_QWORD *)&v3 = -1;
    *((_QWORD *)&v3 + 1) = -1;
    do
    {
      *(_OWORD *)(*result + 16 * v2++) = v3;
      v1 = result[2];
    }
    while (v2 < v1 >> 4);
  }
  if (v1)
  {
    v4 = 40 * v1;
    v5 = (_QWORD *)(result[1] + 32);
    do
    {
      *v5 = 0;
      *(v5 - 2) = 0;
      *(v5 - 4) = 0;
      v5 += 5;
      v4 -= 40;
    }
    while (v4);
  }
  return result;
}

void re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::clear(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  __int128 v3;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v1;
  if (v1 >= 0x10)
  {
    v2 = 0;
    *(_QWORD *)&v3 = -1;
    *((_QWORD *)&v3 + 1) = -1;
    do
    {
      *(_OWORD *)(*(_QWORD *)a1 + 16 * v2++) = v3;
      v1 = *(_QWORD *)(a1 + 16);
    }
    while (v2 < v1 >> 4);
  }
  if (v1)
    bzero(*(void **)(a1 + 8), 16 * v1);
}

BOOL re::TextureParameterTable::containsTextureKey(_QWORD *a1, uint64_t *a2)
{
  return re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 17, a2) != -1|| re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(a1, a2) != -1;
}

uint64_t *re::ShaderParameterTable::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(a1, a2);
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(a1 + 8, a2 + 8);
  }
  re::ConstantTable::operator=((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
  re::BufferTable::operator=((uint64_t)(a1 + 30), (uint64_t)(a2 + 30));
  return a1;
}

uint64_t re::ConstantTable::operator=(uint64_t a1, uint64_t a2)
{
  re::DynamicArray<re::internal::DeferredUnregister *>::operator=(a1 + 8, a2 + 8);
  if (a1 != a2)
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  return a1;
}

double re::ShaderParameterTable::deinit(re::ShaderParameterTable *this)
{
  re::ConstantTable::deinit((re::ShaderParameterTable *)((char *)this + 128));
  re::BufferTable::deinit((re::ShaderParameterTable *)((char *)this + 240));
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this);
  return re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64);
}

BOOL re::ShaderParameterTable::containsConstantKey(_QWORD *a1, uint64_t *a2)
{
  return re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 22, a2) != -1|| re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(a1, a2) != -1;
}

BOOL re::ShaderParameterTable::containsBufferKey(uint64_t a1, uint64_t *a2)
{
  return re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 240), a2) != -1|| re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((_QWORD *)(a1 + 64), a2) != -1;
}

uint64_t re::MaterialParameterTable::operator=(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  uint64_t v5;

  re::ShaderParameterTable::operator=((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  re::TextureParameterTable::operator=((uint64_t *)(a1 + 552), (uint64_t *)(a2 + 552));
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(a1 + 1032, (uint64_t *)(a2 + 1032));
  if (*(_BYTE *)(a1 + 1080))
    v4 = 0;
  else
    v4 = *(_BYTE *)(a2 + 1080) == 0;
  if (!v4)
  {
    if (!*(_BYTE *)(a1 + 1080) || *(_BYTE *)(a2 + 1080))
    {
      if (!*(_BYTE *)(a1 + 1080) && *(_BYTE *)(a2 + 1080))
        *(_BYTE *)(a1 + 1080) = 1;
      *(_QWORD *)(a1 + 1081) = *(_QWORD *)(a2 + 1081);
    }
    else
    {
      *(_BYTE *)(a1 + 1080) = 0;
    }
  }
  if (*(_BYTE *)(a1 + 1092) || *(_BYTE *)(a2 + 1092))
  {
    if (!*(_BYTE *)(a1 + 1092) || *(_BYTE *)(a2 + 1092))
    {
      if (!*(_BYTE *)(a1 + 1092) && *(_BYTE *)(a2 + 1092))
        *(_BYTE *)(a1 + 1092) = 1;
      v5 = *(_QWORD *)(a2 + 1096);
      *(_DWORD *)(a1 + 1104) = *(_DWORD *)(a2 + 1104);
      *(_QWORD *)(a1 + 1096) = v5;
    }
    else
    {
      *(_BYTE *)(a1 + 1092) = 0;
    }
  }
  *(_QWORD *)(a1 + 1112) = *(_QWORD *)(a2 + 1112);
  *(_BYTE *)(a1 + 1120) = *(_BYTE *)(a2 + 1120);
  return a1;
}

uint64_t re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(_QWORD *)a1 || *(_QWORD *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t re::MaterialParameterTable::MaterialParameterTable(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;

  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)a1 = &off_24ED6A3F8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *(_QWORD *)(a1 + 152) = &off_24ED36808;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 424) = 1;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 0;
  re::ShaderParameterTable::operator=((uint64_t *)v6, a2);
  *(_QWORD *)(a1 + 784) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_QWORD *)(a1 + 680) = off_24ED3A908;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 868) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  re::TextureParameterTable::operator=(a1 + 552, a3);
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_QWORD *)(a1 + 1064) = 0x7FFFFFFF00000000;
  *(_DWORD *)(a1 + 1072) = 0;
  *(_BYTE *)(a1 + 1080) = 0;
  *(_BYTE *)(a1 + 1092) = 0;
  *(_WORD *)(a1 + 1120) = 0;
  *(_BYTE *)(a1 + 1122) = 0;
  return a1;
}

unint64_t re::MaterialParameterTable::handle@<X0>(re::MaterialParameterTable *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  unint64_t result;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)a1 + 25, a2);
  if (v6 != -1)
  {
    v7 = *((_QWORD *)a1 + 26) + 16 * v6;
    v8 = *(_WORD *)(v7 + 8);
    v9 = *(unsigned __int8 *)(v7 + 10);
    result = re::MaterialParameterTable::hash(a1);
    v11 = *(_BYTE *)(v7 + 11);
    v12 = 1;
    goto LABEL_10;
  }
  if (re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((_QWORD *)a1 + 3, a2) != -1)
  {
    result = re::MaterialParameterTable::hash(a1);
    v8 = 0;
    v9 = 0;
    v11 = 0;
    v12 = 17;
    goto LABEL_10;
  }
  v13 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)a1 + 86, a2);
  if (v13 != -1)
  {
    v8 = *(unsigned __int8 *)(*((_QWORD *)a1 + 87) + 16 * v13 + 9);
    result = re::MaterialParameterTable::hash(a1);
    v11 = 0;
    v12 = 2;
LABEL_7:
    v9 = 1;
    goto LABEL_10;
  }
  if (re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((_QWORD *)a1 + 69, a2) != -1)
  {
    result = re::MaterialParameterTable::hash(a1);
    v8 = 0;
    v9 = 0;
    v11 = 0;
    v12 = 18;
    goto LABEL_10;
  }
  v14 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)a1 + 33, a2);
  if (v14 != -1)
  {
    v8 = *(unsigned __int8 *)(*((_QWORD *)a1 + 34) + 16 * v14 + 8);
    result = re::MaterialParameterTable::hash(a1);
    v11 = 0;
    v12 = 3;
    goto LABEL_7;
  }
  if (re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((_QWORD *)a1 + 11, a2) != -1)
  {
    result = re::MaterialParameterTable::hash(a1);
    v8 = 0;
    v9 = 0;
    v11 = 0;
    v12 = 19;
    goto LABEL_10;
  }
  v15 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)a1 + 99, a2);
  if (v15 != -1)
  {
    v8 = *(unsigned __int8 *)(*((_QWORD *)a1 + 100) + 16 * v15 + 8);
    result = re::MaterialParameterTable::hash(a1);
    v11 = 0;
    v12 = 4;
    goto LABEL_7;
  }
  if (re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((_QWORD *)a1 + 77, a2) == -1)
  {
    v8 = 0;
    v9 = 0;
    v12 = 0;
    result = 0;
    v11 = 0;
  }
  else
  {
    result = re::MaterialParameterTable::hash(a1);
    v8 = 0;
    v9 = 0;
    v11 = 0;
    v12 = 20;
  }
LABEL_10:
  *(_QWORD *)a3 = *a2;
  *(_WORD *)(a3 + 8) = v8;
  *(_WORD *)(a3 + 10) = v9;
  *(_BYTE *)(a3 + 12) = v12;
  *(_QWORD *)(a3 + 16) = result;
  *(_BYTE *)(a3 + 24) = v11;
  return result;
}

unint64_t re::MaterialParameterTable::hash(re::MaterialParameterTable *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  if (*((_BYTE *)this + 1120))
    return *((_QWORD *)this + 139);
  v2 = (*((_QWORD *)this + 17)
      + ((*((_QWORD *)this + 75) - 0x61C8864680B583E9) << 6)
      + ((unint64_t)(*((_QWORD *)this + 75) - 0x61C8864680B583E9) >> 2)
      - 0x61C8864680B583E9) ^ (*((_QWORD *)this + 75) - 0x61C8864680B583E9);
  v3 = (*((_QWORD *)this + 83) + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  v4 = (*((_QWORD *)this + 92) + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  v5 = (*((_QWORD *)this + 39) + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  v6 = (*((_QWORD *)this + 105) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
  v7 = (*((_QWORD *)this + 9) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6;
  v8 = (*((_QWORD *)this + 31) + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7;
  v9 = (*((_QWORD *)this + 119) + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583E9) ^ v8;
  v1 = (*((_QWORD *)this + 127) + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583E9) ^ v9;
  if (*((_BYTE *)this + 1080))
  {
    if (*((unsigned __int8 *)this + 1081) == 255)
    {
      v11 = 0x9E3779B97F4A7C17;
    }
    else
    {
      v10 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)((char *)this + 1081) ^ (*(_QWORD *)((char *)this + 1081) >> 30));
      v11 = ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31))
          - 0x61C8864680B583E9;
    }
    v1 ^= (v1 >> 2) + (v1 << 6) + v11;
  }
  if (*((_BYTE *)this + 1092))
  {
    v12 = ((v1 << 6) - 0x61C8864680B583E9 + (v1 >> 2) + (unint64_t)*((float *)this + 274)) ^ v1;
    v13 = ((unint64_t)*((float *)this + 275) - 0x61C8864680B583E9 + (v12 << 6) + (v12 >> 2)) ^ v12;
    v1 = ((unint64_t)*((float *)this + 276) - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13;
  }
  *((_BYTE *)this + 1120) = 1;
  *((_QWORD *)this + 139) = v1;
  return v1;
}

BOOL re::MaterialParameterTable::BOOLValue(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(_QWORD *)(a1 + 176) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_BYTE *)(*(_QWORD *)(a1 + 192) + v2) != 0;
}

float re::MaterialParameterTable::floatValue(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(_QWORD *)(a1 + 176) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(float *)(*(_QWORD *)(a1 + 192) + v2);
}

uint64_t re::MaterialParameterTable::intValue(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(_QWORD *)(a1 + 176) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*(_QWORD *)(a1 + 192) + v2);
}

uint64_t re::MaterialParameterTable::vector2FValue(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(_QWORD *)(a1 + 176) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 192) + v2);
}

double re::MaterialParameterTable::int2Value(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(_QWORD *)(a1 + 176) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(double *)(*(_QWORD *)(a1 + 192) + v2);
}

double re::MaterialParameterTable::vector3FValue(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(_QWORD *)(a1 + 176) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(double *)(*(_QWORD *)(a1 + 192) + v2);
}

double re::MaterialParameterTable::int3Value(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(_QWORD *)(a1 + 176) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(double *)(*(_QWORD *)(a1 + 192) + v2);
}

uint64_t re::MaterialParameterTable::vector4FValue(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(_QWORD *)(a1 + 176) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 192) + v2);
}

__n128 re::MaterialParameterTable::int4Value(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(_QWORD *)(a1 + 176) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(__n128 *)(*(_QWORD *)(a1 + 192) + v2);
}

__n128 re::MaterialParameterTable::matrix3x3FValue@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>, __n128 a6@<Q2>)
{
  unint64_t v6;
  unint64_t v7;
  __n128 result;

  v6 = *(unsigned __int16 *)(a2 + 8);
  if (*(_QWORD *)(a1 + 176) <= v6)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = *(_QWORD *)(a1 + 192) + v6;
  a4.n128_u64[0] = *(_QWORD *)v7;
  a5.n128_u64[0] = *(_QWORD *)(v7 + 16);
  a6.n128_u64[0] = *(_QWORD *)(v7 + 32);
  a4.n128_u32[2] = *(_DWORD *)(v7 + 8);
  a5.n128_u32[2] = *(_DWORD *)(v7 + 24);
  a6.n128_u32[2] = *(_DWORD *)(v7 + 40);
  *a3 = a4;
  a3[1] = a5;
  a3[2] = a6;
  result.n128_u64[0] = a4.n128_u64[0];
  result.n128_u32[2] = a4.n128_u32[2];
  return result;
}

__n128 re::MaterialParameterTable::matrix4x4FValue@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *(unsigned __int16 *)(a2 + 8);
  if (*(_QWORD *)(a1 + 176) <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *(_QWORD *)(a1 + 192) + v3;
  result = *(__n128 *)v4;
  v6 = *(_OWORD *)(v4 + 16);
  v7 = *(_OWORD *)(v4 + 32);
  v8 = *(_OWORD *)(v4 + 48);
  *a3 = *(_OWORD *)v4;
  a3[1] = v6;
  a3[2] = v7;
  a3[3] = v8;
  return result;
}

unint64_t re::BufferTable::bufferAt(re::BufferTable *this, unint64_t a2)
{
  if (*((_QWORD *)this + 10) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 12) + 16 * a2;
}

void re::MaterialParameterTable::bindingValue(re *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE buf[24];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  switch(*((_BYTE *)a2 + 12) & 7)
  {
    case 1:
      *(_QWORD *)buf = *a2;
      v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((_QWORD *)a1 + 3, (uint64_t *)buf);
      v7 = *((_QWORD *)a1 + 4);
      goto LABEL_8;
    case 2:
      *(_QWORD *)buf = *a2;
      v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((_QWORD *)a1 + 69, (uint64_t *)buf);
      v7 = *((_QWORD *)a1 + 70);
      goto LABEL_8;
    case 3:
      *(_QWORD *)buf = *a2;
      v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((_QWORD *)a1 + 11, (uint64_t *)buf);
      v7 = *((_QWORD *)a1 + 12);
      goto LABEL_8;
    case 4:
      *(_QWORD *)buf = *a2;
      v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((_QWORD *)a1 + 77, (uint64_t *)buf);
      v7 = *((_QWORD *)a1 + 78);
LABEL_8:
      v9 = v7 + 40 * v6;
      *(_DWORD *)a3 = *(_DWORD *)(v9 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(v9 + 16);
      *(_BYTE *)(a3 + 16) = *(_BYTE *)(v9 + 24);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(v9 + 32);
      break;
    default:
      v8 = *re::graphicsLogObjects(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v10 = *a2;
        if (*a2 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v11 = 0;
        }
        else if (v10)
        {
          v11 = re::WeakStringID::debugStr(void)const::msg;
          snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", v10);
        }
        else
        {
          v11 = (char *)&str_110;
        }
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v11;
        _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Attempted to get a binding from an invalid handle %s", buf, 0xCu);
      }
      *(_DWORD *)a3 = 3;
      re::StringID::invalid((re::StringID *)buf);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)buf >> 1;
      re::StringID::destroyString((re::StringID *)buf);
      *(_BYTE *)(a3 + 16) = 0;
      re::StringID::invalid((re::StringID *)buf);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)buf >> 1;
      re::StringID::destroyString((re::StringID *)buf);
      break;
  }
}

uint64_t re::MaterialParameterTable::buildPerFrameDestructor(re::MaterialParameterTable *this, re::Allocator *a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  result = (*(uint64_t (**)(re::Allocator *))(*(_QWORD *)a2 + 24))(a2);
  if ((result & 1) == 0
    && (*((_QWORD *)this + 96)
     || *((_QWORD *)this + 43)
     || *((_QWORD *)this + 109)
     || *((_QWORD *)this + 6)
     || *((_QWORD *)this + 14)
     || *((_QWORD *)this + 72)
     || *((_QWORD *)this + 80)))
  {
    v5 = re::globalAllocators((re *)result)[2];
    v6[0] = &off_24ED72F90;
    v7 = v5;
    v8 = v6;
    (*(void (**)(re::Allocator *, re::MaterialParameterTable *, _QWORD *))(*(_QWORD *)a2 + 16))(a2, this, v6);
    result = (uint64_t)v8;
    if (v8)
    {
      result = (*(uint64_t (**)(_QWORD *))*v8)(v8);
      if (v8 != v6)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    }
  }
  return result;
}

void *re::MaterialParameterTable::passTechniqueHashTable(re::MaterialParameterTable *this, uint64_t a2, int a3)
{
  char *v4;
  void *result;
  uint64_t v6;
  uint64_t v7;

  v7 = a2;
  v4 = (char *)this + 1032;
  result = (void *)re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)this + 1032, &v7);
  if (!result)
  {
    if (!a3)
      return &re::MaterialParameterTable::passTechniqueHashTable(unsigned long,BOOL)const::kDummy;
    if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
      dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
    v6 = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
    result = (void *)re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)v4, &v6);
    if (!result)
      return &re::MaterialParameterTable::passTechniqueHashTable(unsigned long,BOOL)const::kDummy;
  }
  return result;
}

double re::MaterialParameterTable::initPassTechniqueMappings(re::MaterialParameterTable *this, re::Allocator *a2, signed int a3, uint64_t a4)
{
  char *v6;
  _OWORD v8[2];
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a4;
  v6 = (char *)this + 1032;
  if (!*((_QWORD *)this + 129))
    re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)this + 1032, (uint64_t)a2, 1);
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v10 = 0x7FFFFFFFLL;
  re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v8, (uint64_t)a2, a3);
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)v6, &v11, (uint64_t *)v8);
  return re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v8);
}

void re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 72 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_56, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 72 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 72 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 72 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 72 * v10;
  return v12 + 24;
}

uint64_t re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v14 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsCopy(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + 72 * v14;
    return v13 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 72 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 72 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = 9 * v10;
  re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::operator=(v11 + 72 * v10 + 24, a3);
  ++*(_DWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 16) + 8 * v12;
  return v13 + 24;
}

uint64_t re::MaterialParameterTable::appendPassTechniqueMappingsFrom(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  v15 = a3;
  v4 = (uint64_t)a1 + 1032;
  if (!*((_QWORD *)a1 + 129))
  {
  }
  result = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(v4, &v15);
  if (!result)
    return re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace(v4, &v15, a2);
  v6 = result;
  v7 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(int **)(a2 + 16);
    while (1)
    {
      v10 = *v9;
      v9 += 6;
      if (v10 < 0)
        break;
      if (v7 == ++v8)
      {
        LODWORD(v8) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
  }
  if ((_DWORD)v7 != (_DWORD)v8)
  {
    v11 = v8;
    v12 = *(_QWORD *)(a2 + 16);
    do
    {
      result = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<unsigned long &>(v6, (unint64_t *)(v12 + 24 * v11 + 8), (_QWORD *)(v12 + 24 * v11 + 16));
      v12 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)(a2 + 32) <= (v8 + 1))
        v13 = v8 + 1;
      else
        v13 = *(_DWORD *)(a2 + 32);
      v14 = v8;
      while (1)
      {
        v11 = (v14 + 1);
        if (v13 - 1 == v14)
          break;
        ++v14;
        LODWORD(v8) = v11;
        if ((*(_DWORD *)(v12 + 24 * v11) & 0x80000000) != 0)
          goto LABEL_21;
      }
      LODWORD(v8) = v13;
LABEL_21:
      ;
    }
    while ((_DWORD)v7 != (_DWORD)v8);
  }
  return result;
}

uint64_t re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<unsigned long &>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = *a2;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  v7 = v6 % *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v9 + 24 * v8 + 8) != v6)
  {
    v8 = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if ((_DWORD)v8 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v10 = 3 * v8;
  *(_QWORD *)(v9 + 8 * v10 + 16) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 16) + 8 * v10;
  return v11 + 16;
}

uint64_t re::MaterialParameterTable::addPassTechniqueMapping(re::MaterialParameterTable *this, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[2];
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v12 = a3;
  v13 = a2;
  v11 = a4;
  v4 = (uint64_t *)((char *)this + 1032);
  v5 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)this + 1032, &v11);
  if (!v5)
  {
    v6 = *v4;
    memset(v8, 0, sizeof(v8));
    v9 = 0;
    v10 = 0x7FFFFFFFLL;
    re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v8, v6, 1);
    v5 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)v4, &v11, (uint64_t *)v8);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v8);
  }
  return re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<unsigned long &>(v5, &v13, &v12);
}

uint64_t re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = *a2 % (unint64_t)*(unsigned int *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned int *)(v4 + 4 * v3);
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v7 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v7 + 24 * v5 + 8) != v2)
  {
    while (1)
    {
      v8 = v5;
      LODWORD(v5) = *(_DWORD *)(v7 + 24 * v5) & 0x7FFFFFFF;
      if ((_DWORD)v5 == 0x7FFFFFFF)
        return 0;
      if (*(_QWORD *)(v7 + 24 * v5 + 8) == v2)
      {
        *(_DWORD *)(v7 + 24 * v8) = *(_DWORD *)(v7 + 24 * v8) & 0x80000000 | *(_DWORD *)(v7 + 24
                                                                                                * v5) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v4 + 4 * v3) = *(_DWORD *)(v7 + 24 * v5) & 0x7FFFFFFF;
LABEL_9:
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (int *)(v9 + 24 * v5);
  v11 = *v10;
  if (*v10 < 0)
  {
    *v10 = v11 & 0x7FFFFFFF;
    v9 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v9 + 24 * v5);
  }
  v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v9 + 24 * v5) = *(_DWORD *)(a1 + 36) | v11 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v5;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  return 1;
}

double re::MaterialParameterTable::clearPassTechniqueMappings(re::MaterialParameterTable *this)
{
  re::Allocator *v2;

  v2 = (re::Allocator *)*((_QWORD *)this + 129);
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear((uint64_t)this + 1032);
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  return re::MaterialParameterTable::initPassTechniqueMappings(this, v2, 1, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
}

void re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_19, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v6 + 24));
          v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 72;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

_QWORD *re::MaterialParameterTableDelta::init(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;

  v3 = a1;
  *(_QWORD *)(a1 + 16) = a2;
  re::DynamicArray<BOOL>::setCapacity((_QWORD *)(a1 + 16), 0);
  ++*(_DWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 56) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::ConstantLocation>,true>>::setCapacity((_QWORD *)(v3 + 56), 0);
  ++*(_DWORD *)(v3 + 80);
  *(_QWORD *)(v3 + 96) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::setCapacity((_QWORD *)(v3 + 96), 0);
  ++*(_DWORD *)(v3 + 120);
  *(_QWORD *)(v3 + 136) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::setCapacity((_QWORD *)(v3 + 136), 0);
  ++*(_DWORD *)(v3 + 160);
  *(_QWORD *)(v3 + 176) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::setCapacity((_QWORD *)(v3 + 176), 0);
  *(_QWORD *)(v3 + 216) = a2;
  v3 += 216;
  ++*(_DWORD *)(v3 - 16);
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::setCapacity((_QWORD *)v3, 0);
  ++*(_DWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 40) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::setCapacity((_QWORD *)(v3 + 40), 0);
  ++*(_DWORD *)(v3 + 64);
  *(_QWORD *)(v3 + 80) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::setCapacity((_QWORD *)(v3 + 80), 0);
  ++*(_DWORD *)(v3 + 104);
  *(_QWORD *)(v3 + 120) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::setCapacity((_QWORD *)(v3 + 120), 0);
  ++*(_DWORD *)(v3 + 144);
  *(_QWORD *)(v3 + 160) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::setCapacity((_QWORD *)(v3 + 160), 0);
  ++*(_DWORD *)(v3 + 184);
  *(_QWORD *)(v3 + 200) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<unsigned int>,true>>::setCapacity((_QWORD *)(v3 + 200), 0);
  ++*(_DWORD *)(v3 + 224);
  *(_QWORD *)(v3 + 240) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::setCapacity((_QWORD *)(v3 + 240), 0);
  ++*(_DWORD *)(v3 + 264);
  *(_QWORD *)(v3 + 280) = a2;
  result = re::DynamicArray<re::PassTechniqueMappingDelta>::setCapacity((_QWORD *)(v3 + 280), 0);
  ++*(_DWORD *)(v3 + 304);
  return result;
}

uint64_t re::MaterialParameterTableDelta::deinit(re::MaterialParameterTableDelta *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  re::TextureHandle *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;

  v3 = (_QWORD *)((char *)this + 96);
  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    v4 = *((_QWORD *)this + 16);
    if (v4)
    {
      v5 = *((_QWORD *)this + 14);
      if (v5)
      {
        v6 = 32 * v5;
        v7 = (id *)(v4 + 16);
        do
        {
          if (*((_BYTE *)v7 - 8) && *v7)
          {

            *v7 = 0;
          }
          *(v7 - 2) = 0;
          v7 += 4;
          v6 -= 32;
        }
        while (v6);
        v2 = *((_QWORD *)this + 12);
        v4 = *((_QWORD *)this + 16);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v4);
    }
    *((_QWORD *)this + 16) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 30);
  }
  v8 = *((_QWORD *)this + 17);
  if (v8)
  {
    v9 = *((_QWORD *)this + 21);
    if (v9)
    {
      v10 = *((_QWORD *)this + 19);
      if (v10)
      {
        v11 = 32 * v10;
        v12 = (re::TextureHandle *)(v9 + 16);
        do
        {
          if (*((_BYTE *)v12 - 8))
            re::TextureHandle::invalidate(v12);
          *((_QWORD *)v12 - 2) = 0;
          v12 = (re::TextureHandle *)((char *)v12 + 32);
          v11 -= 32;
        }
        while (v11);
        v8 = *((_QWORD *)this + 17);
        v9 = *((_QWORD *)this + 21);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, v9);
    }
    *((_QWORD *)this + 21) = 0;
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 19) = 0;
    *((_QWORD *)this + 17) = 0;
    ++*((_DWORD *)this + 40);
  }
  result = *((_QWORD *)this + 22);
  if (result)
  {
    v14 = *((_QWORD *)this + 26);
    if (v14)
    {
      v15 = *((_QWORD *)this + 24);
      if (v15)
      {
        v16 = 24 * v15;
        v17 = (id *)(v14 + 16);
        do
        {
          if (*((_BYTE *)v17 - 8))
          {
            if (*v17)
            {

              *v17 = 0;
            }
          }
          *(v17 - 2) = 0;
          v17 += 3;
          v16 -= 24;
        }
        while (v16);
        result = *((_QWORD *)this + 22);
        v14 = *((_QWORD *)this + 26);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v14);
    }
    *((_QWORD *)this + 26) = 0;
    *((_QWORD *)this + 23) = 0;
    *((_QWORD *)this + 24) = 0;
    *((_QWORD *)this + 22) = 0;
    ++*((_DWORD *)this + 50);
  }
  return result;
}

uint64_t re::MaterialParameterTableDelta::encodeClear(re::MaterialParameterTableDelta *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;
  re::TextureHandle *v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  *((_QWORD *)this + 4) = 0;
  ++*((_DWORD *)this + 10);
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 11);
    v4 = 16 * v2;
    do
    {
      *v3 = 0;
      v3 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  ++*((_DWORD *)this + 20);
  v5 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    v6 = 32 * v5;
    v7 = (id *)(*((_QWORD *)this + 16) + 16);
    do
    {
      if (*((_BYTE *)v7 - 8) && *v7)
      {

        *v7 = 0;
      }
      *(v7 - 2) = 0;
      v7 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  ++*((_DWORD *)this + 30);
  v8 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v8)
  {
    v9 = 32 * v8;
    v10 = (re::TextureHandle *)(*((_QWORD *)this + 21) + 16);
    do
    {
      if (*((_BYTE *)v10 - 8))
        re::TextureHandle::invalidate(v10);
      *((_QWORD *)v10 - 2) = 0;
      v10 = (re::TextureHandle *)((char *)v10 + 32);
      v9 -= 32;
    }
    while (v9);
  }
  ++*((_DWORD *)this + 40);
  v11 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v11)
  {
    v12 = 24 * v11;
    v13 = (id *)(*((_QWORD *)this + 26) + 16);
    do
    {
      if (*((_BYTE *)v13 - 8) && *v13)
      {

        *v13 = 0;
      }
      *(v13 - 2) = 0;
      v13 += 3;
      v12 -= 24;
    }
    while (v12);
  }
  ++*((_DWORD *)this + 50);
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::clear((uint64_t)this + 216);
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::clear((uint64_t)this + 256);
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::clear((uint64_t)this + 296);
  result = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::clear((uint64_t)this + 336);
  v15 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v15)
  {
    v16 = 24 * v15;
    v17 = (_QWORD *)(*((_QWORD *)this + 51) + 16);
    do
    {
      if (*((_BYTE *)v17 - 8))
        *v17 = 0;
      *(v17 - 2) = 0;
      v17 += 3;
      v16 -= 24;
    }
    while (v16);
  }
  ++*((_DWORD *)this + 100);
  v18 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v18)
  {
    v19 = (_QWORD *)*((_QWORD *)this + 56);
    v20 = 16 * v18;
    do
    {
      *v19 = 0;
      v19 += 2;
      v20 -= 16;
    }
    while (v20);
  }
  ++*((_DWORD *)this + 110);
  v21 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v21)
  {
    v22 = (_QWORD *)*((_QWORD *)this + 61);
    v23 = 16 * v21;
    do
    {
      *v22 = 0;
      v22 += 2;
      v23 -= 16;
    }
    while (v23);
  }
  ++*((_DWORD *)this + 120);
  *((_QWORD *)this + 64) = 0;
  ++*((_DWORD *)this + 130);
  if (*((_BYTE *)this + 536))
    *((_BYTE *)this + 536) = 0;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  *((_BYTE *)this + 564) = 1;
  return result;
}

uint64_t re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = 0;
  if (v1)
  {
    v2 = 48 * v1;
    v3 = (_QWORD *)(*(_QWORD *)(result + 32) + 24);
    do
    {
      if (*((_BYTE *)v3 - 16))
      {
        v3[2] = 0;
        *v3 = 0;
      }
      *(v3 - 3) = 0;
      v3 += 6;
      v2 -= 48;
    }
    while (v2);
  }
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t applyBindingChanges(uint64_t result, uint64_t a2, _anonymous_namespace_ *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  if (result)
  {
    v4 = 48 * result;
    v5 = a2 + 16;
    do
    {
      v6 = (uint64_t *)(v5 - 16);
      if (*(_BYTE *)(v5 - 8))
        result = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace(a3, v6, v5);
      else
        result = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::remove((uint64_t *)a3, v6);
      v5 += 48;
      v4 -= 48;
    }
    while (v4);
  }
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::internalAdd(a1, a2, (int *)a3);
  v7 = 5 * v6;
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::updateKvpsHash((uint64_t)a1, (re::WeakParameterBinding *)(*((_QWORD *)a1 + 1) + 40 * v6));
  v8 = *((_QWORD *)a1 + 1) + 8 * v7;
  *(_DWORD *)(v8 + 8) = *(_DWORD *)a3;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(a3 + 8);
  *(_BYTE *)(v8 + 24) = *(_BYTE *)(a3 + 16);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(a3 + 24);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::updateKvpsHash((uint64_t)a1, (re::WeakParameterBinding *)v8);
  return *((_QWORD *)a1 + 1) + 8 * v7 + 8;
}

BOOL re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::remove(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t v6;
  int8x8_t v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;

  v3 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(a1, a2);
  v4 = v3;
  if (v3 != -1)
  {
    v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v7)
      v8 = -1;
    else
      v8 = 0x80;
    v5->i8[v3 & 0xF] = v8;
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::updateHashes((uint64_t)a1, (re::WeakParameterBinding *)(a1[1] + 40 * v3));
    v9 = a1[2];
    v10 = (_QWORD *)(a1[1] + 40 * v4);
    *v10 = 0;
    v10[4] = 0;
    v10[2] = 0;
    v11 = a1[4];
    if (v7)
      ++v11;
    v12 = a1[3] - 1;
    a1[3] = v12;
    a1[4] = v11;
    if (v9 >= 0x11 && v12 < v9 >> 2)
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::resize(a1, 0);
  }
  return v4 != -1;
}

void re::MaterialParameterTableDelta::applyDeltaChange(re::MaterialParameterTableDelta *this)
{
  int v1;
  _QWORD *WeakRetained;
  re::MaterialParameterTable *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const re::WeakStringID *v23;
  uint64_t v24;
  uint64_t v25;
  const re::TextureHandle *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  _DWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int16 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  os_unfair_lock_s *v78[2];
  uint64_t v79[2];
  _BYTE v80[12];
  __int16 v81;
  int v82;
  __int16 v83;
  unint64_t v84;
  __int16 v85;
  unint64_t v86;
  id v87[2];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)this + 1);
  v4 = (re::MaterialParameterTable *)(WeakRetained - 1);
  if (WeakRetained)
    v5 = (char *)(WeakRetained - 1);
  else
    v5 = 0;
  if (WeakRetained)
  {
    v6 = WeakRetained;
    if (*((_BYTE *)this + 564))
    {
      WeakRetained[21] = 0;
      ++*((_DWORD *)WeakRetained + 44);
      re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear(WeakRetained + 24);
      v6[42] = 0;
      ++*((_DWORD *)v6 + 86);
      re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::clear((uint64_t)(v6 + 50));
      re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear(v6 + 32);
      re::DynamicArray<re::FixedArray<unsigned char>>::clear(v6 + 57);
      v6[64] = 0;
      ++*((_DWORD *)v6 + 130);
      *((_DWORD *)v6 + 134) = 0;
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear(v6 + 2);
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear(v6 + 10);
      v7 = v6[95];
      v6[95] = 0;
      if (v7)
      {
        v8 = v6[97];
        v9 = 40 * v7;
        do
        {
          if (*(_BYTE *)(v8 + 16))
          {
            v10 = *(void **)(v8 + 24);
            if (v10)
            {

              *(_QWORD *)(v8 + 24) = 0;
            }
          }
          re::TextureHandle::invalidate((re::TextureHandle *)v8);
          v8 += 40;
          v9 -= 40;
        }
        while (v9);
      }
      ++*((_DWORD *)v6 + 192);
      v6[88] = 0;
      *((_OWORD *)v6 + 45) = 0u;
      v11 = v6[87];
      v6[89] = v11;
      if (v11 >= 0x10)
      {
        v12 = 0;
        *(_QWORD *)&v13 = -1;
        *((_QWORD *)&v13 + 1) = -1;
        do
        {
          *(_OWORD *)(v6[85] + 16 * v12++) = v13;
          v11 = v6[87];
        }
        while (v12 < v11 >> 4);
      }
      if (v11)
      {
        v14 = (_QWORD *)v6[86];
        v15 = 16 * v11;
        do
        {
          *v14 = 0;
          v14 += 2;
          v15 -= 16;
        }
        while (v15);
      }
      re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)(v6 + 106));
      re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear(v6 + 98);
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear(v6 + 68);
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear(v6 + 76);
      re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::clear((uint64_t)(v6 + 112));
      re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear(v6 + 120);
      ++*((_BYTE *)v6 + 1113);
      ++*((_BYTE *)v6 + 1114);
      re::MaterialParameterTable::clearPassTechniqueMappings(v4);
      if (*((_BYTE *)v6 + 1072))
        *((_BYTE *)v6 + 1072) = 0;
      if (*((_BYTE *)v6 + 1084))
        *((_BYTE *)v6 + 1084) = 0;
    }
    v16 = *((_QWORD *)this + 9);
    if (v16)
    {
      v17 = *((_QWORD *)this + 11);
      v18 = 16 * v16;
      do
      {
        if (*(_BYTE *)(v17 + 8))
        {
          v19 = (void *)*(unsigned __int8 *)(v17 + 12);
          v87[0] = (id)(*((_QWORD *)this + 6) + *(unsigned __int16 *)(v17 + 10));
          v87[1] = v19;
          re::ConstantTable::setConstant(v6 + 18, (_QWORD *)v17, (uint64_t)v87, 0);
        }
        else
        {
          v87[0] = *(id *)v17;
          re::removeNameMappedConstant(v87, v6 + 24, v6 + 19);
        }
        v17 += 16;
        v18 -= 16;
      }
      while (v18);
      if (*((_QWORD *)this + 9))
        ++v5[1121];
    }
    v20 = *((_QWORD *)this + 14);
    if (v20)
    {
      v21 = 32 * v20;
      v22 = *((_QWORD *)this + 16) + 16;
      do
      {
        v23 = (const re::WeakStringID *)(v22 - 16);
        if (*(_BYTE *)(v22 - 8))
          re::BufferTable::setBuffer((re::BufferTable *)(v5 + 264), v23, v22);
        else
          re::BufferTable::removeBuffer((re::BufferTable *)(v5 + 264), v23);
        v22 += 32;
        v21 -= 32;
      }
      while (v21);
    }
    v24 = *((_QWORD *)this + 19);
    if (v24)
    {
      v25 = 32 * v24;
      v26 = (const re::TextureHandle *)(*((_QWORD *)this + 21) + 16);
      do
      {
        if (*((_BYTE *)v26 - 8))
        {
          v79[0] = *((_QWORD *)v26 - 2);
          re::TextureHandle::TextureHandle((re::TextureHandle *)v78, v26);
          re::TextureHandleTable::setTexture((_QWORD *)v5 + 85, v79, v78);
          re::TextureHandle::invalidate((re::TextureHandle *)v78);
          v79[0] = 0;
        }
        else
        {
          v87[0] = *((id *)v26 - 2);
          re::removeNameMappedProtectedTexture<re::DynamicArray<re::TextureViews<re::TextureHandle>>>(v87, (uint64_t *)v5 + 86, (uint64_t)(v5 + 752));
        }
        v26 = (const re::TextureHandle *)((char *)v26 + 32);
        v25 -= 32;
      }
      while (v25);
    }
    v27 = *((_QWORD *)this + 59);
    if (v27)
    {
      v28 = *((_QWORD *)this + 61);
      for (i = 16 * v27; i; i -= 16)
      {
        v30 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v5 + 86, (_QWORD *)v28);
        if (v30 != -1)
        {
          if (*(_BYTE *)(v28 + 8))
            v1 = *(_DWORD *)(v28 + 9);
          v31 = *(unsigned __int8 *)(*((_QWORD *)v5 + 87) + 16 * v30 + 9);
          v32 = *((_QWORD *)v5 + 96);
          if (v32 <= v31)
          {
            v79[1] = 0;
            v90 = 0u;
            v91 = 0u;
            v88 = 0u;
            v89 = 0u;
            *(_OWORD *)v87 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v80 = 136315906;
            *(_QWORD *)&v80[4] = "operator[]";
            v81 = 1024;
            v82 = 789;
            v83 = 2048;
            v84 = v31;
            v85 = 2048;
            v86 = v32;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v33 = *((_QWORD *)v5 + 98);
          v34 = v33 + 40 * *(unsigned __int8 *)(*((_QWORD *)v5 + 87) + 16 * v30 + 9);
          v37 = *(unsigned __int8 *)(v34 + 32);
          v35 = (_BYTE *)(v34 + 32);
          v36 = v37;
          v38 = v37 | *(unsigned __int8 *)(v28 + 8);
          if (*(_BYTE *)(v28 + 8) && v36)
          {
            v39 = v33 + 40 * *(unsigned __int8 *)(*((_QWORD *)v5 + 87) + 16 * v30 + 9);
            v41 = *(_DWORD *)(v39 + 33);
            v40 = (_DWORD *)(v39 + 33);
            if (v41 != v1)
            {
              if (!v38)
                goto LABEL_61;
              goto LABEL_60;
            }
          }
          else if (v38)
          {
            if (!*(_BYTE *)(v28 + 8) && v36)
            {
              *v35 = 0;
LABEL_61:
              LOBYTE(v87[0]) = 0;
              re::Optional<NS::SharedPtr<MTL::Texture>>::operator=(v33 + 40 * v31 + 16, v87);
              if (LOBYTE(v87[0]) && v87[1])

              goto LABEL_64;
            }
            v40 = (_DWORD *)(v33 + 40 * *(unsigned __int8 *)(*((_QWORD *)v5 + 87) + 16 * v30 + 9) + 33);
            if (*(_BYTE *)(v28 + 8) && !v36)
              *v35 = 1;
LABEL_60:
            *v40 = v1;
            goto LABEL_61;
          }
        }
LABEL_64:
        v28 += 16;
      }
    }
    if (*((_QWORD *)this + 19) || *((_QWORD *)this + 59))
      ++v5[1122];
    v42 = *((_QWORD *)this + 24);
    if (v42)
    {
      v43 = (uint64_t *)*((_QWORD *)this + 26);
      v44 = &v43[3 * v42];
      do
      {
        if (*((_BYTE *)v43 + 8))
        {
          v77 = *v43;
          v76 = (id)v43[2];
          re::SamplerTable::setSampler((_QWORD *)v5 + 99, &v77, &v76);
          if (v76)
          {

            v76 = 0;
          }
          v77 = 0;
        }
        else
        {
          *(_QWORD *)v80 = *v43;
          v45 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v5 + 99, v80);
          if (v45 != -1)
          {
            v46 = *((_QWORD *)v5 + 100) + 16 * v45;
            re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::removeStableAt((uint64_t)(v5 + 856), *(unsigned __int8 *)(v46 + 8));
            v47 = *(unsigned __int8 *)(v46 + 8);
            v87[0] = v5 + 792;
            v48 = *((_QWORD *)v5 + 101);
            if (v48 >= 0x10)
            {
              v49 = 0;
              v50 = *((_QWORD *)v5 + 99);
              v51 = v48 >> 4;
              while (1)
              {
                v52 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v50 + v49)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
                v87[1] = (id)(unsigned __int16)~v52;
                if (v52 != 0xFFFF)
                  break;
                v49 += 16;
                if (!--v51)
                  goto LABEL_84;
              }
              v53 = __clz(__rbit64((unsigned __int16)~v52)) + v49;
              *(_QWORD *)&v88 = v53;
              if (v53 != -1)
              {
                do
                {
                  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateKvpsHash((uint64_t)(v5 + 792), *((_QWORD *)v5 + 100) + 16 * v53);
                  v54 = *((_QWORD *)v5 + 100);
                  v55 = v88;
                  v56 = v54 + 16 * v88;
                  v59 = *(unsigned __int8 *)(v56 + 8);
                  v57 = (_BYTE *)(v56 + 8);
                  v58 = v59;
                  if (v59 >= v47)
                  {
                    *v57 = v58 - 1;
                    v54 = *((_QWORD *)v5 + 100);
                    v55 = v88;
                  }
                  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateKvpsHash((uint64_t)(v5 + 792), v54 + 16 * v55);
                  re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v87);
                  v53 = v88;
                }
                while ((_QWORD)v88 != -1);
              }
            }
LABEL_84:
            re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::remove((uint64_t *)v5 + 99, v80);
          }
        }
        v43 += 3;
      }
      while (v43 != v44);
    }
    applyBindingChanges(*((_QWORD *)this + 29), *((_QWORD *)this + 31), (_anonymous_namespace_ *)(v5 + 24));
    applyBindingChanges(*((_QWORD *)this + 34), *((_QWORD *)this + 36), (_anonymous_namespace_ *)(v5 + 88));
    applyBindingChanges(*((_QWORD *)this + 39), *((_QWORD *)this + 41), (_anonymous_namespace_ *)(v5 + 552));
    applyBindingChanges(*((_QWORD *)this + 44), *((_QWORD *)this + 46), (_anonymous_namespace_ *)(v5 + 616));
    v60 = *((_QWORD *)this + 49);
    if (v60)
    {
      v61 = 24 * v60;
      v62 = (uint64_t *)(*((_QWORD *)this + 51) + 16);
      do
      {
        v63 = v62 - 2;
        if (*((_BYTE *)v62 - 8))
          re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::addOrReplace((_anonymous_namespace_ *)(v5 + 904), v63, v62);
        else
          re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::remove((uint64_t *)v5 + 113, v63);
        v62 += 3;
        v61 -= 24;
      }
      while (v61);
    }
    v64 = *((_QWORD *)this + 54);
    if (v64)
    {
      v65 = 16 * v64;
      v66 = (_DWORD *)(*((_QWORD *)this + 56) + 12);
      do
      {
        v67 = v66 - 3;
        if (*((_BYTE *)v66 - 4))
          re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v5 + 968), v67, v66);
        else
          re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::remove((uint64_t *)v5 + 121, v67);
        v66 += 4;
        v65 -= 16;
      }
      while (v65);
    }
    v68 = *((_QWORD *)this + 64);
    if (v68)
    {
      v69 = *((_QWORD *)this + 66);
      v70 = 40 * v68;
      do
      {
        if (*(_BYTE *)(v69 + 32))
        {
          re::MaterialParameterTable::clearPassTechniqueMappings((re::MaterialParameterTable *)v5);
        }
        else if (*(_BYTE *)(v69 + 16))
        {
          re::MaterialParameterTable::addPassTechniqueMapping((re::MaterialParameterTable *)v5, *(_QWORD *)(v69 + 8), *(_QWORD *)(v69 + 24), *(_QWORD *)v69);
        }
        else
        {
          v71 = *(_QWORD *)v69;
          v87[0] = *(id *)(v69 + 8);
          *(_QWORD *)v80 = v71;
          v72 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)(v5 + 1032), (uint64_t *)v80);
          if (v72)
            re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(v72, (uint64_t *)v87);
        }
        v69 += 40;
        v70 -= 40;
      }
      while (v70);
    }
    if (*((_BYTE *)this + 536))
    {
      v73 = *(_QWORD *)((char *)this + 537);
      if (!v5[1080])
        v5[1080] = 1;
      *(_QWORD *)(v5 + 1081) = v73;
    }
    if (*((_BYTE *)this + 548))
    {
      *(id *)((char *)v87 + 3) = *((id *)this + 69);
      *(_DWORD *)((char *)&v87[1] + 3) = *((_DWORD *)this + 140);
      v74 = v5 + 1096;
      if (v5[1092])
      {
        v75 = *((_QWORD *)this + 69);
        *((_DWORD *)v5 + 276) = *((_DWORD *)this + 140);
        *v74 = v75;
      }
      else
      {
        v5[1092] = 1;
        *v74 = *(id *)((char *)v87 + 3);
        *((_DWORD *)v5 + 276) = *(_DWORD *)((char *)&v87[1] + 3);
      }
    }
    v5[1120] = 0;

  }
}

uint64_t re::BufferTable::setBuffer(re::BufferTable *a1, const re::WeakStringID *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;

  v5 = re::BufferTable::getOrAddKey(a1, a2);
  re::BufferTable::setBufferRef((void **)a1, v5, (void **)a3);
  v6 = (uint64_t *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)a1 + 144, v5);
  re::BufferTable::setBufferView(a1, v5, *v6, *(_QWORD *)(a3 + 8));
  return re::BufferTable::setBufferIndirectResources(a1, v5, 0, 0);
}

BOOL re::BufferTable::removeBuffer(re::BufferTable *this, const re::WeakStringID *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(this, a2);
  v5 = v4;
  if (v4 != -1)
  {
    v6 = *((_QWORD *)this + 1) + 16 * v4;
    v8 = *(unsigned __int8 *)(v6 + 8);
    v7 = (unsigned __int8 *)(v6 + 8);
    re::DynamicArray<re::BufferView>::removeStableAt((_QWORD *)this + 8, v8);
    v9 = *v7;
    v10 = *((_QWORD *)this + 23);
    if (v10 > v9)
    {
      re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::removeStableAt((uint64_t)this + 144, v9);
      v10 = *((_QWORD *)this + 23);
    }
    v11 = (*((_DWORD *)this + 70) - 1);
    *((_DWORD *)this + 70) = v11;
    if (v11 >= v10)
      v12 = v10;
    else
      v12 = v11;
    v13 = *v7;
    if (v12 > v13)
    {
      v14 = 16 * v13;
      if (v11 >= v10)
        v15 = v10;
      else
        v15 = v11;
      do
      {
        if (*(_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)this + 144, v13))
        {
          v16 = (_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)this + 144, v13);
          if (*((_QWORD *)this + 10) <= v13)
          {
            memset(v18, 0, sizeof(v18));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(_QWORD *)(*((_QWORD *)this + 12) + v14) = *v16;
        }
        ++v13;
        v14 += 16;
      }
      while (v15 != (_DWORD)v13);
    }
    *(_QWORD *)&v18[0] = v7;
    _ZN2re9HashBrownINS_12WeakStringIDEhNS_4HashIS1_EENS_7EqualToIS1_EENS2_IhEELb0EE9mapValuesIZNS_11BufferTable12removeBufferERKS1_EUlRT_E_EEvOSC_((uint64_t *)this, (unsigned __int8 **)v18);
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::remove((uint64_t *)this, a2);
    *(_QWORD *)&v18[0] = this;
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::rehashKeysWith<re::BufferTable::rehashNames(void)::{lambda(unsigned char)#1}>(this, (uint64_t)v18);
    re::DynamicArray<re::FixedArray<unsigned long>>::removeStableAt((uint64_t)this + 200, *v7);
    re::DynamicArray<re::Allocator const*>::removeStableAt((_QWORD *)this + 30, *v7);
  }
  return v5 != -1;
}

uint64_t re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::addOrReplace(_anonymous_namespace_ *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::internalAdd(a1, a2, a3);
  v7 = v6;
  re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::updateKvpsHash((uint64_t)a1, (_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v6));
  v8 = (_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v7);
  v8[1] = *a3;
  re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::updateKvpsHash((uint64_t)a1, v8);
  return *((_QWORD *)a1 + 1) + 16 * v7 + 8;
}

BOOL re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t v6;
  int8x8_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  v4 = v3;
  if (v3 != -1)
  {
    v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v7)
      v8 = -1;
    else
      v8 = 0x80;
    v5->i8[v3 & 0xF] = v8;
    re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::updateHashes((uint64_t)a1, (_QWORD *)(a1[1] + 16 * v3));
    v9 = (_QWORD *)(a1[1] + 16 * v4);
    *v9 = 0;
    v9[1] = 0;
    if (v7)
      v10 = a1[4] + 1;
    else
      v10 = a1[4];
    v11 = a1[2];
    v12 = a1[3] - 1;
    a1[3] = v12;
    a1[4] = v10;
    if (v11 >= 0x11 && v12 < v11 >> 2)
      re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::resize(a1, 0);
  }
  return v4 != -1;
}

uint64_t re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addOrReplace(_anonymous_namespace_ *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::internalAdd(a1, a2, a3);
  v7 = v6;
  re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::updateKvpsHash((uint64_t)a1, *((_QWORD *)a1 + 1) + 16 * v6);
  v8 = *((_QWORD *)a1 + 1) + 16 * v7;
  *(_DWORD *)(v8 + 8) = *a3;
  re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::updateKvpsHash((uint64_t)a1, v8);
  return *((_QWORD *)a1 + 1) + 16 * v7 + 8;
}

void re::TextureTableImpl<re::TextureHandle>::setTexture(_QWORD *a1, _QWORD *a2, const re::TextureHandle *a3, uint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  re::TextureHandle *v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v17;
  _QWORD *v18;
  uint64_t v19;
  id v20[2];
  id v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v8 = (_anonymous_namespace_ *)(a1 + 1);
  v9 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 1, a2);
  if (v9 == -1)
  {
    v18 = a1 + 9;
    v19 = a1[11];
    re::TextureHandle::TextureHandle((re::TextureHandle *)v20, a3);
    LOBYTE(v21[0]) = 0;
    LOBYTE(v22) = 0;
    re::DynamicArray<re::TextureViews<re::TextureHandle>>::add(v18, (uint64_t *)v20);
    if (LOBYTE(v21[0]) && v21[1])
    {

      v21[1] = 0;
    }
    re::TextureHandle::invalidate((re::TextureHandle *)v20);
    LOBYTE(v20[0]) = a4;
    BYTE1(v20[0]) = v19;
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::addOrReplace(v8, a2, (__int16 *)v20);
  }
  else
  {
    v10 = a1[2] + 16 * v9;
    v11 = *(unsigned __int8 *)(v10 + 9);
    if (a1[11] <= v11)
    {
      v23 = 0u;
      v24 = 0u;
      *(_OWORD *)v21 = 0u;
      v22 = 0u;
      *(_OWORD *)v20 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v12 = *(unsigned __int8 *)(v10 + 8);
    v13 = (re::TextureHandle *)(a1[13] + 40 * *(unsigned __int8 *)(v10 + 9));
    LOBYTE(v20[0]) = 0;
    re::Optional<NS::SharedPtr<MTL::Texture>>::operator=((uint64_t)v13 + 16, v20);
    if (LOBYTE(v20[0]) && v20[1])

    v14 = *((_QWORD *)v13 + 1);
    v15 = *((_QWORD *)a3 + 1);
    if (v14 != v15)
    {
      v17 = 1;
      if (v14 && v15 && *(_QWORD *)v13 && *(_QWORD *)a3 != 0)
        v17 = 0;
      re::TextureHandle::operator=(v13, a3);
      if (v12 != a4)
      {
        LOBYTE(v20[0]) = a4;
        BYTE1(v20[0]) = v11;
        re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::replace(v8, a2, v20);
      }
      if (v17)
      {
        v20[0] = a1;
        re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::rehashKeysWith<re::TextureTableImpl<re::TextureHandle>::rehashNames(void)::{lambda(re::IndexAndProtectionOptions)#1}>(v8, (uint64_t)v20);
      }
    }
  }
}

_QWORD *re::DynamicArray<re::TextureViews<re::TextureHandle>>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  int v10;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::TextureViews<re::TextureHandle>>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4];
  v6 = (_QWORD *)(v5 + 40 * v4);
  *v6 = 0;
  v6[1] = 0;
  v7 = *a2;
  if (a2[1])
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    *v6 = v7;
    v6[1] = a2[1];
    a2[1] = 0;
  }
  v9 = *((unsigned __int8 *)a2 + 16);
  *(_BYTE *)(v5 + 40 * v4 + 16) = v9;
  if (v9)
  {
    *(_QWORD *)(v5 + 40 * v4 + 24) = a2[3];
    a2[3] = 0;
  }
  v10 = *((unsigned __int8 *)a2 + 32);
  *(_BYTE *)(v5 + 40 * v4 + 32) = v10;
  if (v10)
    *(_DWORD *)(v5 + 40 * v4 + 33) = *(_DWORD *)((char *)a2 + 33);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::rehashKeysWith<re::TextureTableImpl<re::TextureHandle>::rehashNames(void)::{lambda(re::IndexAndProtectionOptions)#1}>(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[2];
  uint64_t i;
  uint64_t v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  result[5] = 0;
  v15[0] = result;
  v2 = result[2];
  if (v2 >= 0x10)
  {
    v4 = result;
    v5 = 0;
    v6 = *result;
    v7 = v2 >> 4;
    while (1)
    {
      v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v15[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF)
        break;
      v5 += 16;
      if (!--v7)
        return result;
    }
    v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; v9 = i)
    {
      v10 = *(_QWORD *)(v15[0] + 8) + 16 * v9;
      v11 = (unint64_t)*(unsigned __int16 *)(v10 + 8) >> 8;
      v12 = *(_QWORD *)(*(_QWORD *)a2 + 88);
      if (v12 <= v11)
      {
        v17 = 0;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v26 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v18 = 136315906;
        v19 = "operator[]";
        v20 = 1024;
        v21 = 789;
        v22 = 2048;
        v23 = v11;
        v24 = 2048;
        v25 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v13 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 104) + 40 * v11);
      if (v13[1])
      {
        if (*v13)
        {
          v14 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)v10 ^ (*(_QWORD *)v10 >> 30));
          v4[5] ^= ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31) ^ (0x94D049BB133111EBLL * (v14 ^ (v14 >> 27)));
        }
      }
      result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v15);
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::TextureViews<re::TextureHandle>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::TextureViews<re::TextureHandle>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::TextureViews<re::TextureHandle>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::TextureViews<re::TextureHandle>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  int v17;
  void *v18;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::TextureViews<re::TextureHandle>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_28;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_28:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 40 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = v8 + v10;
          *v12 = 0;
          v12[1] = 0;
          v14 = *(_QWORD *)(v8 + v10);
          if (*(_QWORD *)(v8 + v10 + 8))
            v15 = v14 == 0;
          else
            v15 = 1;
          if (!v15)
          {
            *v12 = v14;
            v12[1] = *(_QWORD *)(v13 + 8);
            *(_QWORD *)(v13 + 8) = 0;
          }
          v16 = *(unsigned __int8 *)(v13 + 16);
          *((_BYTE *)v12 + 16) = v16;
          if (v16)
          {
            v7[v10 / 8 + 3] = *(_QWORD *)(v8 + v10 + 24);
            *(_QWORD *)(v8 + v10 + 24) = 0;
          }
          v17 = *(unsigned __int8 *)(v8 + v10 + 32);
          LOBYTE(v7[v10 / 8 + 4]) = v17;
          if (v17)
            *(_DWORD *)((char *)&v7[v10 / 8 + 4] + 1) = *(_DWORD *)(v8 + v10 + 33);
          if (*(_BYTE *)(v13 + 16))
          {
            v18 = *(void **)(v8 + v10 + 24);
            if (v18)
            {

              *(_QWORD *)(v8 + v10 + 24) = 0;
            }
          }
          re::TextureHandle::invalidate((re::TextureHandle *)(v8 + v10));
          v10 += 40;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_28;
    }
  }
  return result;
}

uint64_t re::TextureTableImpl<re::TextureHandle>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  re::DynamicArray<re::TextureViews<re::TextureHandle>>::operator=(a1 + 72, a2 + 72);
  return a1;
}

uint64_t re::DynamicArray<re::TextureViews<re::TextureHandle>>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result != a2)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)a2;
    if (*(_QWORD *)result)
      v4 = v3 == 0;
    else
      v4 = 1;
    if (v4 || v2 == v3)
    {
      v6 = *(_QWORD *)(result + 8);
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)result = v3;
      *(_QWORD *)(result + 8) = v7;
      *(_QWORD *)a2 = v2;
      *(_QWORD *)(a2 + 8) = v6;
      v8 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v8;
      v9 = *(_QWORD *)(result + 32);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

void re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  id *v4;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (id *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1, i);
      if (*v4)
      {

        *v4 = 0;
      }
    }
  }
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
}

void re::internal::Callable<re::MaterialParameterTable::buildPerFrameDestructor(re::Allocator *)::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::MaterialParameterTable::buildPerFrameDestructor(re::Allocator *)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;

  v2 = *(_QWORD **)a2;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 768);
  if (v3)
  {
    v4 = v2[98];
    v5 = 40 * v3;
    do
    {
      if (*(_BYTE *)(v4 + 16))
      {
        v6 = *(void **)(v4 + 24);
        if (v6)
        {

          *(_QWORD *)(v4 + 24) = 0;
        }
      }
      re::TextureHandle::invalidate((re::TextureHandle *)v4);
      v4 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  re::BufferTable::~BufferTable((re::BufferTable *)(v2 + 33));
  v7 = v2[109];
  if (v7)
  {
    v8 = (id *)v2[111];
    v9 = 8 * v7;
    do
    {
      if (*v8)
      {

        *v8 = 0;
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
}

_QWORD *re::internal::Callable<re::MaterialParameterTable::buildPerFrameDestructor(re::Allocator *)::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED72F90;
  return result;
}

_QWORD *re::internal::Callable<re::MaterialParameterTable::buildPerFrameDestructor(re::Allocator *)::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED72F90;
  return result;
}

uint64_t re::internal::Callable<re::MaterialParameterTable::buildPerFrameDestructor(re::Allocator *)::$_0,void ()(void *)>::size()
{
  return 16;
}

void *re::ConstantTable::setConstant(_QWORD *a1, _QWORD *a2, uint64_t a3, char a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[5];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = (_anonymous_namespace_ *)(a1 + 6);
  v9 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 6, a2);
  if (v9 != -1)
    return memcpy((void *)(a1[5] + *(unsigned __int16 *)(a1[7] + 16 * v9 + 8)), *(const void **)a3, *(unsigned __int8 *)(a1[7] + 16 * v9 + 10));
  v11 = *(_QWORD *)(a3 + 8);
  v12 = a1[3] + 3;
  LOWORD(v13[0]) = v12 & 0xFFFC;
  BYTE2(v13[0]) = v11;
  BYTE3(v13[0]) = a4;
  re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::addNew(v8, a2, (int *)v13);
  re::DynamicArray<BOOL>::resize((uint64_t)(a1 + 1), ((unsigned __int16)v12 & 0xFFFC) + (unint64_t)v11);
  if (a1[3] <= (unint64_t)((unsigned __int16)v12 & 0xFFFC))
  {
    memset(v13, 0, sizeof(v13));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return memcpy((void *)(a1[5] + ((unsigned __int16)v12 & 0xFFFC)), *(const void **)a3, v11);
}

uint64_t re::BufferTable::getOrAddKey(re::BufferTable *this, const re::WeakStringID *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v7;

  v4 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(this, a2);
  if (v4 != -1)
    return *(unsigned __int8 *)(*((_QWORD *)this + 1) + 16 * v4 + 8);
  v5 = *((unsigned int *)this + 70);
  *((_DWORD *)this + 70) = v5 + 1;
  v7 = v5;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addOrReplace(this, a2, &v7);
  return v5;
}

void **re::BufferTable::setBufferRef(void **result, unsigned int a2, void **a3)
{
  void **v5;
  uint64_t v6;
  void **v7;

  v5 = result;
  if ((unint64_t)result[23] <= a2)
  {
    if (!*a3)
      return result;
    re::BufferTable::resizeRefs((re::BufferTable *)result, a2 + 1);
  }
  v6 = (uint64_t)(v5 + 18);
  result = (void **)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v6, a2);
  if (*a3 != *result)
  {
    v7 = (void **)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v6, a2);
    return NS::SharedPtr<MTL::Texture>::operator=(v7, a3);
  }
  return result;
}

void re::BufferTable::setBufferView(re::BufferTable *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _OWORD v10[5];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = *((_QWORD *)a1 + 10);
  if (v8 <= a2)
  {
    re::BufferTable::resizeViews(a1, a2 + 1);
    v8 = *((_QWORD *)a1 + 10);
  }
  if (v8 <= v7)
  {
    memset(v10, 0, sizeof(v10));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v9 = (_QWORD *)(*((_QWORD *)a1 + 12) + 16 * v7);
  if (v9[1] != a4 || *v9 != a3)
  {
    if (a3 && *v9)
    {
      *v9 = a3;
      v9[1] = a4;
    }
    else
    {
      *v9 = a3;
      v9[1] = a4;
      *(_QWORD *)&v10[0] = a1;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::rehashKeysWith<re::BufferTable::rehashNames(void)::{lambda(unsigned char)#1}>(a1, (uint64_t)v10);
    }
  }
}

uint64_t re::BufferTable::setBufferIndirectResources(re::BufferTable *this, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v7 = a2;
  v33 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 27) <= (unint64_t)a2)
  {
    re::BufferTable::resizeResourcePointers(this, (a2 + 1));
    re::BufferTable::resizeResourceHashes(this, (v7 + 1));
  }
  v9 = *((_QWORD *)this + 25);
  v17 = 0;
  v18 = 0;
  v16 = 0;
  re::FixedArray<unsigned long>::init<>(&v16, v9, a4);
  if (v17)
  {
    v11 = 0;
    v12 = 0;
    v13 = v18;
    while (a4 != v11)
    {
      v14 = *(_QWORD *)(a3 + 8 * v11);
      *(_QWORD *)(v13 + 8 * v11) = v14;
      v4 = v17;
      if (v17 <= v11)
        goto LABEL_17;
      v12 ^= (v12 << 6) + (v12 >> 2) - 0x61C8864680B583E9 + v14;
      if (v17 <= ++v11)
        goto LABEL_10;
    }
    re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a4, a4);
    _os_crash();
    __break(1u);
LABEL_17:
    v19 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v20 = 136315906;
    v21 = "operator[]";
    v22 = 1024;
    v23 = 468;
    v24 = 2048;
    v25 = v11;
    v26 = 2048;
    v27 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_18:
    v19 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v20 = 136315906;
    v21 = "operator[]";
    v22 = 1024;
    v23 = 789;
    v24 = 2048;
    v25 = a4;
    v26 = 2048;
    v27 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_19:
    v19 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v20 = 136315906;
    v21 = "operator[]";
    v22 = 1024;
    v23 = 789;
    v24 = 2048;
    v25 = a4;
    v26 = 2048;
    v27 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v12 = 0;
LABEL_10:
  a4 = v7;
  v7 = *((_QWORD *)this + 27);
  if (v7 <= a4)
    goto LABEL_18;
  re::FixedArray<unsigned long>::operator=((uint64_t *)(*((_QWORD *)this + 29) + 24 * a4), &v16);
  v7 = *((_QWORD *)this + 32);
  if (v7 <= a4)
    goto LABEL_19;
  *(_QWORD *)(*((_QWORD *)this + 34) + 8 * a4) = v12;
  result = v16;
  if (v16)
  {
    if (v17)
      return (*(uint64_t (**)(void))(*(_QWORD *)v16 + 40))();
  }
  return result;
}

void re::BufferTable::resizeRefs(re::BufferTable *this, unint64_t a2)
{
  char *v3;

  v3 = (char *)this + 144;
  if (*((_QWORD *)this + 23) + 1 == a2)
    *(_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::addUninitialized((uint64_t)v3) = 0;
  else
    re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::resize((uint64_t)v3, a2);
}

void re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  id *v6;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4 >= a2)
  {
    if (v4 > a2)
    {
      v5 = a2;
      do
      {
        v6 = (id *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1, v5);
        if (*v6)
        {

          *v6 = 0;
        }
        ++v5;
      }
      while (v5 != *(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 40) = a2;
    }
  }
  else
  {
    if (a2 > 8 * *(_QWORD *)(a1 + 8))
    {
      re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::setBucketsCapacity((uint64_t *)a1, (a2 + 7) >> 3);
      v4 = *(_QWORD *)(a1 + 40);
    }
    for (*(_QWORD *)(a1 + 40) = a2; v4 != *(_QWORD *)(a1 + 40); ++v4)
      *(_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1, v4) = 0;
  }
  ++*(_DWORD *)(a1 + 48);
}

void re::BufferTable::resizeViews(re::BufferTable *this, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  __n128 v4;

  v3 = (re::BufferTable *)((char *)this + 64);
  if (*((_QWORD *)this + 10) + 1 == a2)
  {
    v4 = 0uLL;
    re::DynamicArray<re::RigNodeConstraint>::add(v3, &v4);
  }
  else
  {
    re::DynamicArray<re::RenderGraphNodeDataPointer>::resize((uint64_t)v3, a2);
  }
}

_QWORD *re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::rehashKeysWith<re::BufferTable::rehashNames(void)::{lambda(unsigned char)#1}>(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  uint64_t i;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  result[5] = 0;
  v14[0] = result;
  v2 = result[2];
  if (v2 >= 0x10)
  {
    v4 = result;
    v5 = 0;
    v6 = *result;
    v7 = v2 >> 4;
    while (1)
    {
      v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v14[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF)
        break;
      v5 += 16;
      if (!--v7)
        return result;
    }
    v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; v9 = i)
    {
      v10 = *(_QWORD *)(v14[0] + 8) + 16 * v9;
      v11 = *(unsigned __int8 *)(v10 + 8);
      v12 = *(_QWORD *)(*(_QWORD *)a2 + 80);
      if (v12 <= v11)
      {
        v16 = 0;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v17 = 136315906;
        v18 = "operator[]";
        v19 = 1024;
        v20 = 789;
        v21 = 2048;
        v22 = v11;
        v23 = 2048;
        v24 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 96) + 16 * v11))
      {
        v13 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)v10 ^ (*(_QWORD *)v10 >> 30));
        v4[5] ^= ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31) ^ (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27)));
      }
      result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v14);
    }
  }
  return result;
}

_QWORD *re::BufferTable::resizeResourcePointers(re::BufferTable *this, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)((char *)this + 200);
  if (*((_QWORD *)this + 27) + 1 != a2)
    return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize(v3, a2);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  re::DynamicArray<re::FixedArray<unsigned long>>::add(v3, &v6);
  result = (_QWORD *)v6;
  if (v6)
    v5 = v7 == 0;
  else
    v5 = 1;
  if (!v5)
    return (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v6 + 40))();
  return result;
}

_QWORD *re::BufferTable::resizeResourceHashes(re::BufferTable *this, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v5;

  v3 = (_QWORD *)((char *)this + 240);
  if (*((_QWORD *)this + 32) + 1 == a2)
  {
    v5 = 0;
    return re::DynamicArray<unsigned long>::add(v3, &v5);
  }
  else
  {
    v5 = 0;
    return re::DynamicArray<unsigned long>::resize(v3, a2, &v5);
  }
}

_QWORD *re::DynamicArray<re::FixedArray<unsigned long>>::add(_QWORD *this, _QWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::FixedArray<unsigned char>>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = (_QWORD *)(v3[4] + 24 * v4);
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  v6 = a2[1];
  *v5 = *a2;
  v5[1] = v6;
  *a2 = 0;
  a2[1] = 0;
  v7 = v5[2];
  v5[2] = a2[2];
  a2[2] = v7;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::DynamicArray<unsigned long>::resize(_QWORD *result, unint64_t a2, _QWORD *a3)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;

  v4 = result;
  v5 = result[2];
  if (v5 >= a2)
  {
    if (v5 <= a2)
      return result;
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(result, a2);
      v5 = v4[2];
    }
    v7 = a2 - v5;
    if (a2 > v5)
    {
      v8 = (_QWORD *)(v4[4] + 8 * v5);
      do
      {
        *v8++ = *a3;
        --v7;
      }
      while (v7);
    }
  }
  v4[2] = a2;
  ++*((_DWORD *)v4 + 6);
  return result;
}

_QWORD *re::DynamicArray<re::BufferView>::removeStableAt(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v2 = result[2];
  if (v2 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = result;
  v4 = v2 - 1;
  if (v2 - 1 > a2)
  {
    v5 = result[4];
    result = (_QWORD *)(v5 + 16 * a2);
    v6 = (char *)(v5 + 16 * v2);
    if (v6 != (char *)(result + 2))
    {
      result = memmove(result, result + 2, v6 - (char *)(result + 2));
      v4 = v3[2] - 1;
    }
  }
  v3[2] = v4;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::removeStableAt(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v5;
  id *v6;
  uint64_t v7[4];

  v3 = *(_QWORD *)(a1 + 40);
  if (v3 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeStableAt", 884, a2, v3);
    _os_crash();
    __break(1u);
  }
  else
  {
    v5 = v3 - 1;
    if (v3 - 1 > a2)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer>&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer>&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer>&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>&,true>>(a1, a2 + 1, a1, v3, a1, a2, v7);
      v5 = *(_QWORD *)(a1 + 40) - 1;
    }
    v6 = (id *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1, v5);
    if (*v6)
    {

      *v6 = 0;
    }
    --*(_QWORD *)(a1 + 40);
    ++*(_DWORD *)(a1 + 48);
  }
}

uint64_t *_ZN2re9HashBrownINS_12WeakStringIDEhNS_4HashIS1_EENS_7EqualToIS1_EENS2_IhEELb0EE9mapValuesIZNS_11BufferTable12removeBufferERKS1_EUlRT_E_EEvOSC_(uint64_t *result, unsigned __int8 **a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  unsigned int v15;
  _QWORD v16[2];
  uint64_t i;

  v16[0] = result;
  v2 = result[2];
  if (v2 >= 0x10)
  {
    v4 = (uint64_t)result;
    v5 = 0;
    v6 = *result;
    v7 = v2 >> 4;
    while (1)
    {
      v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v16[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF)
        break;
      v5 += 16;
      if (!--v7)
        return result;
    }
    v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; v9 = i)
    {
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateKvpsHash(v4, *(_QWORD *)(v4 + 8) + 16 * v9);
      v10 = *(_QWORD *)(v4 + 8);
      v11 = i;
      v12 = v10 + 16 * i;
      v15 = *(unsigned __int8 *)(v12 + 8);
      v13 = (_BYTE *)(v12 + 8);
      v14 = v15;
      if (v15 > **a2)
      {
        *v13 = v14 - 1;
        v10 = *(_QWORD *)(v4 + 8);
        v11 = i;
      }
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateKvpsHash(v4, v10 + 16 * v11);
      result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v16);
    }
  }
  return result;
}

BOOL re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t v6;
  int8x8_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  v4 = v3;
  if (v3 != -1)
  {
    v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v7)
      v8 = -1;
    else
      v8 = 0x80;
    v5->i8[v3 & 0xF] = v8;
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateHashes((uint64_t)a1, a1[1] + 16 * v3);
    v9 = a1[2];
    *(_QWORD *)(a1[1] + 16 * v4) = 0;
    v10 = a1[4];
    if (v7)
      ++v10;
    v11 = a1[3] - 1;
    a1[3] = v11;
    a1[4] = v10;
    if (v9 >= 0x11 && v11 < v9 >> 2)
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::resize(a1, 0);
  }
  return v4 != -1;
}

uint64_t re::DynamicArray<re::FixedArray<unsigned long>>::removeStableAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,0>((uint64_t *)(*(_QWORD *)(a1 + 32) + 24 * a2 + 24), (uint64_t *)(*(_QWORD *)(a1 + 32) + 24 * v2), (uint64_t *)(*(_QWORD *)(a1 + 32) + 24 * a2));
    v2 = *(_QWORD *)(a1 + 16);
  }
  v4 = *(_QWORD *)(a1 + 32) + 24 * v2;
  result = *(_QWORD *)(v4 - 24);
  if (result)
  {
    if (*(_QWORD *)(v4 - 16))
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v4 - 8));
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      v2 = *(_QWORD *)(a1 + 16);
    }
    *(_QWORD *)(v4 - 24) = 0;
  }
  *(_QWORD *)(a1 + 16) = v2 - 1;
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer>&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer>&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer>&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>&,true>>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void **v16;

  if (a1 != a3 || a2 != a4)
  {
    v13 = a4 - 1;
    do
    {
      do
      {
        v14 = a2;
        v15 = (void **)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1, a2);
        v16 = (void **)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a5, a6);
        NS::SharedPtr<MTL::Texture>::operator=(v16, v15);
        a2 = v14 + 1;
        ++a6;
      }
      while (a1 != a3);
    }
    while (v13 != v14);
    a2 = a4;
  }
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a5;
  a7[3] = a6;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::FixedArray<unsigned long>::operator=(a3, v4);
      v4 += 3;
      a3 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::removeStableAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  void **v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = (void **)(v4 + 8 * a2);
    v6 = (void **)(v4 + 8 * v2);
    if (v5 + 1 != v6)
    {
      do
      {
        NS::SharedPtr<MTL::Texture>::operator=(v5, v5 + 1);
        v7 = v5 + 2;
        ++v5;
      }
      while (v7 != v6);
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
  v8 = *(_QWORD *)(a1 + 32) + 8 * v2;
  v9 = *(void **)(v8 - 8);
  if (v9)
  {

    *(_QWORD *)(v8 - 8) = 0;
    v2 = *(_QWORD *)(a1 + 16);
  }
  *(_QWORD *)(a1 + 16) = v2 - 1;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy(_anonymous_namespace_ *a1, uint64_t *a2)
{
  _QWORD *result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t i;

  result = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear(a1);
  v17[0] = a2;
  v5 = a2[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = *a2;
    v8 = v5 >> 4;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v17[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v8)
        return result;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    for (i = v10; i != -1; v10 = i)
    {
      v11 = *(_QWORD *)(v17[0] + 8) + 40 * v10;
      v12 = *(_QWORD *)v11;
      v13 = *(_DWORD *)(v11 + 8);
      v14 = *(_QWORD *)(v11 + 16);
      v15 = *(_BYTE *)(v11 + 24);
      v16 = *(_QWORD *)(v11 + 32);
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::internalAdd(a1, &v12, &v13);
      result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v17);
    }
  }
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  _BOOL8 v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = v11;
  while (1)
  {
    v14 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v13)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v14 < 0x40)
      break;
    if (v13 + 1 == v10)
      v13 = 0;
    else
      ++v13;
    if (v13 == v11)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  v15 = v12 + 16 * v13;
  v16 = *(unsigned __int8 *)(v15 + v14);
  *(_BYTE *)(v15 + v14) = v9 & 0x7F;
  v17 = v16 == 255;
  v18 = v14 + 16 * v13;
  v19 = *a3;
  v20 = *((_QWORD *)a3 + 1);
  v21 = *((_BYTE *)a3 + 16);
  v22 = *((_QWORD *)a3 + 3);
  v23 = 5 * v18;
  v24 = *((_QWORD *)a1 + 1) + 40 * v18;
  *(_QWORD *)v24 = *a2;
  *(_DWORD *)(v24 + 8) = v19;
  *(_QWORD *)(v24 + 16) = v20;
  *(_BYTE *)(v24 + 24) = v21;
  *(_QWORD *)(v24 + 32) = v22;
  v25 = *((_QWORD *)a1 + 4) - v17;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v25;
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::updateHashes((uint64_t)a1, (re::WeakParameterBinding *)v24);
  return *((_QWORD *)a1 + 1) + 8 * v23 + 8;
}

{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  _BOOL8 v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13);
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v15 == 255;
  v17 = v13 + 16 * v11;
  v18 = *a3;
  v19 = *((_QWORD *)a3 + 1);
  v20 = *((_BYTE *)a3 + 16);
  v21 = *((_QWORD *)a3 + 3);
  v22 = 5 * v17;
  v23 = *((_QWORD *)a1 + 1) + 40 * v17;
  *(_QWORD *)v23 = *a2;
  *(_DWORD *)(v23 + 8) = v18;
  *(_QWORD *)(v23 + 16) = v19;
  *(_BYTE *)(v23 + 24) = v20;
  *(_QWORD *)(v23 + 32) = v21;
  v24 = *((_QWORD *)a1 + 4) - v16;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v24;
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::updateHashes((uint64_t)a1, (re::WeakParameterBinding *)v23);
  return *((_QWORD *)a1 + 1) + 8 * v22 + 8;
}

double re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::doResize(a1, v3);
}

unint64_t re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::updateHashes(uint64_t a1, re::WeakParameterBinding *this)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t result;

  v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)this ^ (*(_QWORD *)this >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                               * (*(_QWORD *)this ^ (*(_QWORD *)this >> 30))) >> 27));
  v4 = v3 ^ (v3 >> 31);
  *(_QWORD *)(a1 + 40) ^= v4;
  result = re::WeakParameterBinding::hash((re::WeakParameterBinding *)((char *)this + 8));
  *(_QWORD *)(a1 + 48) ^= v4 ^ (result + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9);
  return result;
}

_QWORD *re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t i;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  v6 = v5 & 0x3FFFFFFFFFFFFF0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v7 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 41 * v6, 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v8 = 0;
      *(_QWORD *)&v9 = -1;
      *((_QWORD *)&v9 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v8++) = v9;
      while (v7 != v8);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v7];
    v6 = v3[2];
    if (v6)
    {
      v10 = 0;
      for (i = 0; i < v6; ++i)
      {
        result = (_QWORD *)re::KeyValuePair<re::WeakStringID,re::WeakParameterBinding>::KeyValuePair(v3[1] + v10);
        v6 = v3[2];
        v10 += 40;
      }
    }
  }
  else
  {
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v6;
  return result;
}

uint64_t re::KeyValuePair<re::WeakStringID,re::WeakParameterBinding>::KeyValuePair(uint64_t a1)
{
  _QWORD v3[2];

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 8) = 3;
  re::StringID::invalid((re::StringID *)v3);
  *(_QWORD *)(a1 + 16) = v3[0] >> 1;
  re::StringID::destroyString((re::StringID *)v3);
  *(_BYTE *)(a1 + 24) = 0;
  re::StringID::invalid((re::StringID *)v3);
  *(_QWORD *)(a1 + 32) = v3[0] >> 1;
  re::StringID::destroyString((re::StringID *)v3);
  return a1;
}

double re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD v17[2];
  uint64_t v18;
  _OWORD v19[4];

  v4 = a1[7];
  memset(v19, 0, sizeof(v19));
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init(v19, v4, a2);
  v17[0] = a1;
  v5 = a1[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = *a1;
    v8 = v5 >> 4;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v17[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v8)
        goto LABEL_9;
    }
    v18 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    if (v18 != -1)
    {
      do
      {
        re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::internalAdd((int)v19);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v17);
      }
      while (v18 != -1);
      v5 = a1[2];
    }
  }
LABEL_9:
  v10 = *((_QWORD *)&v19[3] + 1);
  *((_QWORD *)&v19[3] + 1) = a1[7];
  v11 = v19[0];
  v12 = v19[1];
  v19[0] = *(_OWORD *)a1;
  *(_QWORD *)&v19[1] = v5;
  v13 = v19[2];
  v14 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v19[3];
  a1[7] = v10;
  *(_OWORD *)((char *)&v19[2] + 8) = v14;
  v15 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v11;
  *((_OWORD *)a1 + 1) = v12;
  *((_OWORD *)a1 + 2) = v13;
  *(_OWORD *)((char *)&v19[1] + 8) = v15;
  return re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)v19);
}

unint64_t re::WeakParameterBinding::hash(re::WeakParameterBinding *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = 0xBF58476D1CE4E5B9 * (*(int *)this ^ ((unint64_t)*(int *)this >> 30));
  v2 = (0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) ^ ((0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) >> 31);
  v3 = 0xBF58476D1CE4E5B9 * (*((_QWORD *)this + 1) ^ (*((_QWORD *)this + 1) >> 30));
  v4 = (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
      + (v2 << 6)
      + (v2 >> 2)
      - 0x61C8864680B583E9) ^ v2;
  v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 16)) ^ ((0xBF58476D1CE4E5B9
                                                                   * *((unsigned __int8 *)this + 16)) >> 27));
  v6 = *((_QWORD *)this + 3) ^ (*((_QWORD *)this + 3) >> 30);
  v7 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v6) ^ ((0xBF58476D1CE4E5B9 * v6) >> 27));
  return ((v4 << 6)
        + (v4 >> 2)
        + ((((v5 ^ (v5 >> 31)) << 6) + ((v5 ^ (v5 >> 31)) >> 2) + (v7 ^ (v7 >> 31)) - 0x61C8864680B583E9) ^ v5 ^ (v5 >> 31))
        - 0x61C8864680B583E9) ^ v4;
}

void re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::copy(_anonymous_namespace_ *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t i;

  re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::clear((uint64_t)a1);
  v13[0] = a2;
  v4 = a2[2];
  if (v4 >= 0x10)
  {
    v5 = 0;
    v6 = *a2;
    v7 = v4 >> 4;
    while (1)
    {
      v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v13[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF)
        break;
      v5 += 16;
      if (!--v7)
        return;
    }
    v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; v9 = i)
    {
      v10 = (uint64_t *)(*(_QWORD *)(v13[0] + 8) + 16 * v9);
      v11 = *v10;
      v12 = v10[1];
      re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::internalAdd(a1, &v11, &v12);
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v13);
    }
  }
}

uint64_t re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = *(_QWORD *)a1;
  v12 = v9 % v10;
  while (1)
  {
    v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v13 < 0x40)
      break;
    if (v12 + 1 == v10)
      v12 = 0;
    else
      ++v12;
    if (v12 == v9 % v10)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  v14 = v11 + 16 * v12;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v12;
  v17 = *a3;
  v18 = (_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v16);
  *v18 = *a2;
  v18[1] = v17;
  v19 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v19;
  re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::updateHashes((uint64_t)a1, v18);
  return *((_QWORD *)a1 + 1) + 16 * v16 + 8;
}

void re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::updateHashes(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  v4 = 0xBF58476D1CE4E5B9 * (a2[1] ^ (a2[1] >> 30));
  v5 = v3 ^ *(_QWORD *)(result + 40);
  v6 = *(_QWORD *)(result + 48) ^ v3 ^ ((v3 << 6)
                                      + (v3 >> 2)
                                      + ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                      * (v4 ^ (v4 >> 27))) >> 31))
                                      - 0x61C8864680B583E9);
  *(_QWORD *)(result + 40) = v5;
  *(_QWORD *)(result + 48) = v6;
  return result;
}

void re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[2];
  uint64_t v23;
  _OWORD v24[4];

  v4 = a1[7];
  memset(v24, 0, sizeof(v24));
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(v24, v4, a2);
  v22[0] = a1;
  v6 = a1[2];
  if (v6 >= 0x10)
  {
    v7 = 0;
    v8 = *a1;
    v9 = v6 >> 4;
    v10 = (__n128)xmmword_2260EE390;
    v5.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v11 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v22[1] = (unsigned __int16)~v11;
      if (v11 != 0xFFFF)
        break;
      v7 += 16;
      if (!--v9)
        goto LABEL_9;
    }
    v12 = __clz(__rbit64((unsigned __int16)~v11)) + v7;
    v23 = v12;
    if (v12 != -1)
    {
      do
      {
        re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::internalAdd(v24, *(_QWORD *)(v22[0] + 8) + 16 * v12, *(_QWORD *)(v22[0] + 8) + 16 * v12 + 8, v10, v5);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v22);
        v12 = v23;
      }
      while (v23 != -1);
      v6 = a1[2];
    }
  }
LABEL_9:
  v14 = *((_QWORD *)&v24[3] + 1);
  *((_QWORD *)&v24[3] + 1) = a1[7];
  v13 = *((_QWORD *)&v24[3] + 1);
  v16 = *a1;
  v15 = (void *)a1[1];
  v17 = v24[0];
  v18 = v24[1];
  *(_QWORD *)&v24[0] = *a1;
  *((_QWORD *)&v24[0] + 1) = v15;
  *(_QWORD *)&v24[1] = v6;
  v19 = v24[2];
  v20 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v24[3];
  a1[7] = v14;
  *(_OWORD *)((char *)&v24[2] + 8) = v20;
  v21 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v17;
  *((_OWORD *)a1 + 1) = v18;
  *((_OWORD *)a1 + 2) = v19;
  *(_OWORD *)((char *)&v24[1] + 8) = v21;
  if (v13)
  {
    if (v15)
    {
      if (v6)
      {
        bzero(v15, 16 * v6);
        v16 = *(_QWORD *)&v24[0];
      }
      *((_QWORD *)&v24[0] + 1) = 0;
    }
    if (v16)
      (*(void (**)(_QWORD))(**((_QWORD **)&v24[3] + 1) + 40))(*((_QWORD *)&v24[3] + 1));
  }
}

uint64_t re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  unint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1[7])
    return -1;
  v2 = a1[2];
  if (v2 < 0x10 || !a1[3])
    return -1;
  v3 = v2 >> 4;
  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  v7 = v6 % v3;
  v8 = vdupq_n_s8(v6 & 0x7F);
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  v10 = v6 % v3;
  while (1)
  {
    v11 = *(int8x16_t *)(*a1 + 16 * v10);
    v12 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v8, v11), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v13 = __clz(__rbit64(v12));
    if (v13 <= 0x3F)
      break;
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v11, v9), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v10 + 1 == v3)
      v10 = 0;
    else
      ++v10;
    v15 = -1;
    if (v10 == v7)
      return v15;
  }
  v14 = 16 * v10;
  while (1)
  {
    v15 = v13 + v14;
    if (v4 == *(_QWORD *)(a1[1] + 40 * (v13 + v14)))
      return v15;
    if (v13 <= 0x3E)
    {
      v13 = __clz(__rbit64((-2 << v13) & v12));
      if (v13 < 0x40)
        continue;
    }
    goto LABEL_10;
  }
}

void re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (_QWORD *)(v8 + 16), v8 + 24);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 72;
    }
  }
}

void re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 72;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 16) = *a4;
  re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::HashTable(*(_QWORD *)(a1 + 16) + 72 * v10 + 24, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 16) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + 72 * v10;
  *(_OWORD *)(v14 + 24) = 0u;
  v14 += 24;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_DWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v14, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::HashTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u)
      v5 = 3;
    else
      v5 = *(_DWORD *)(a2 + 28);
    re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(a1, v4, v5);
    re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *(_QWORD *)(v8 + v6 + 8) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v8 + v6 + 8), (_QWORD *)(v8 + v6 + 8), (_QWORD *)(v8 + v6 + 16));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 24;
    }
  }
}

void re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_56, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 24 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        v4 += 24;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(a1, v4, v5);
      re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::ConstantLocation>,true>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::ConstantLocation>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 16 * v9;
        v11 = v7;
        do
        {
          *v11 = *(_QWORD *)v8;
          v12 = *(unsigned __int8 *)(v8 + 8);
          *((_BYTE *)v11 + 8) = v12;
          if (v12)
            *(_DWORD *)((char *)v11 + 10) = *(_DWORD *)(v8 + 10);
          *(_QWORD *)v8 = 0;
          v8 += 16;
          v11 += 2;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_21;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_21:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 32 * v9;
        v11 = v7 + 3;
        v12 = v8 + 16;
        do
        {
          v13 = v12 - 16;
          *(v11 - 3) = *(_QWORD *)(v12 - 16);
          v14 = *(unsigned __int8 *)(v12 - 8);
          *((_BYTE *)v11 - 16) = v14;
          if (v14)
          {
            *(v11 - 1) = *(id *)v12;
            *v11 = *(_QWORD *)(v12 + 8);
          }
          if (*(_BYTE *)(v12 - 8))
          {
            if (*(_QWORD *)v12)
            {

              *(_QWORD *)v12 = 0;
            }
          }
          *(_QWORD *)(v12 - 16) = 0;
          v11 += 4;
          v12 += 32;
        }
        while (v13 + 32 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_21;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  re::TextureHandle *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (_QWORD *)(v8 + 32 * v9);
        v11 = (re::TextureHandle *)(v8 + 16);
        v12 = v7 + 2;
        do
        {
          v13 = (_QWORD *)((char *)v11 - 16);
          *(v12 - 2) = *((_QWORD *)v11 - 2);
          v14 = *((unsigned __int8 *)v11 - 8);
          *((_BYTE *)v12 - 8) = v14;
          if (v14)
          {
            *v12 = 0;
            v12[1] = 0;
            v15 = *(_QWORD *)v11;
            if (*((_QWORD *)v11 + 1) && v15 != 0)
            {
              *v12 = v15;
              v12[1] = *((_QWORD *)v11 + 1);
              *((_QWORD *)v11 + 1) = 0;
            }
          }
          if (*((_BYTE *)v11 - 8))
            re::TextureHandle::invalidate(v11);
          *((_QWORD *)v11 - 2) = 0;
          v11 = (re::TextureHandle *)((char *)v11 + 32);
          v12 += 4;
        }
        while (v13 + 4 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  id *v11;
  id *v12;
  id *v13;
  int v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_21;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_21:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (id *)(v8 + 24 * v9);
        v11 = (id *)(v7 + 2);
        v12 = (id *)(v8 + 16);
        do
        {
          v13 = v12 - 2;
          *(v11 - 2) = *(v12 - 2);
          v14 = *((unsigned __int8 *)v12 - 8);
          *((_BYTE *)v11 - 8) = v14;
          if (v14)
          {
            *v11 = *v12;
            *v12 = 0;
          }
          if (*((_BYTE *)v12 - 8))
          {
            if (*v12)
            {

              *v12 = 0;
            }
          }
          *(v12 - 2) = 0;
          v11 += 3;
          v12 += 3;
        }
        while (v13 + 3 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_21;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_19;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_19:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (_QWORD *)(v8 + 48 * v9);
        v11 = (_QWORD *)(v8 + 40);
        v12 = v7 + 3;
        do
        {
          v13 = v11 - 5;
          *(v12 - 3) = *(v11 - 5);
          v14 = *((unsigned __int8 *)v11 - 32);
          *((_BYTE *)v12 - 16) = v14;
          if (v14)
          {
            *((_DWORD *)v12 - 2) = *((_DWORD *)v11 - 6);
            *v12 = *(v11 - 2);
            *((_BYTE *)v12 + 8) = *((_BYTE *)v11 - 8);
            v12[2] = *v11;
          }
          if (*((_BYTE *)v11 - 32))
          {
            *v11 = 0;
            *(v11 - 2) = 0;
          }
          *(v11 - 5) = 0;
          v11 += 6;
          v12 += 6;
        }
        while (v13 + 6 != v10);
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_19;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_19;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_19:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (_QWORD *)(v8 + 24 * v9);
        v11 = v7 + 2;
        v12 = (_QWORD *)(v8 + 16);
        do
        {
          v13 = v12 - 2;
          *(v11 - 2) = *(v12 - 2);
          v14 = *((unsigned __int8 *)v12 - 8);
          *((_BYTE *)v11 - 8) = v14;
          if (v14)
            *v11 = *v12;
          if (*((_BYTE *)v12 - 8))
            *v12 = 0;
          *(v12 - 2) = 0;
          v11 += 3;
          v12 += 3;
        }
        while (v13 + 3 != v10);
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_19;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<unsigned int>,true>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<unsigned int>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_17;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_17:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 16 * v9;
        v11 = v7;
        v12 = v5[4];
        do
        {
          *v11 = *(_QWORD *)v12;
          v13 = *(unsigned __int8 *)(v12 + 8);
          *((_BYTE *)v11 + 8) = v13;
          if (v13)
            *((_DWORD *)v11 + 3) = *(_DWORD *)(v12 + 12);
          *(_QWORD *)v12 = 0;
          v12 += 16;
          v11 += 2;
        }
        while (v12 != v10);
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_17;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 16 * v9;
        v11 = v7;
        do
        {
          *v11 = *(_QWORD *)v8;
          v12 = *(unsigned __int8 *)(v8 + 8);
          *((_BYTE *)v11 + 8) = v12;
          if (v12)
            *(_DWORD *)((char *)v11 + 9) = *(_DWORD *)(v8 + 9);
          *(_QWORD *)v8 = 0;
          v8 += 16;
          v11 += 2;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::PassTechniqueMappingDelta>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::PassTechniqueMappingDelta>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 40 * v9;
        v11 = v7;
        do
        {
          *(_OWORD *)v11 = *(_OWORD *)v8;
          v12 = *(unsigned __int8 *)(v8 + 16);
          *((_BYTE *)v11 + 16) = v12;
          if (v12)
            v11[3] = *(_QWORD *)(v8 + 24);
          *((_BYTE *)v11 + 32) = *(_BYTE *)(v8 + 32);
          v8 += 40;
          v11 += 5;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

unint64_t re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::updateKvpsHash(uint64_t a1, re::WeakParameterBinding *this)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t result;

  v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)this ^ (*(_QWORD *)this >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                               * (*(_QWORD *)this ^ (*(_QWORD *)this >> 30))) >> 27));
  v4 = v3 ^ (v3 >> 31);
  result = re::WeakParameterBinding::hash((re::WeakParameterBinding *)((char *)this + 8));
  *(_QWORD *)(a1 + 48) ^= v4 ^ (result + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9);
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::updateKvpsHash(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  v4 = 0xBF58476D1CE4E5B9 * (a2[1] ^ (a2[1] >> 30));
  *(_QWORD *)(result + 48) ^= v3 ^ (((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                  * (v4 ^ (v4 >> 27))) >> 31))
                                  + (v3 << 6)
                                  + (v3 >> 2)
                                  - 0x61C8864680B583E9);
  return result;
}

__n128 re::RenderCamera::computeLocalTransform@<Q0>(re::RenderCamera *this@<X0>, uint64_t a2@<X8>)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  __int128 v17;
  float v18;
  float v19;
  __int128 v20;
  __int128 v21;
  __n128 result;

  v2 = *((float *)this + 4);
  v3 = *((float *)this + 5);
  v4 = v2 + v2;
  v5 = v3 + v3;
  v6 = *((float *)this + 6);
  v7 = *((float *)this + 7);
  v8 = v6 + v6;
  v9 = v2 * (float)(v2 + v2);
  v10 = v3 * (float)(v3 + v3);
  v11 = v6 * (float)(v6 + v6);
  v12 = v4 * v3;
  v13 = v4 * v6;
  v14 = v5 * v6;
  v15 = v5 * v7;
  v16 = v8 * v7;
  HIDWORD(v17) = 0;
  *(float *)&v17 = 1.0 - (float)(v10 + v11);
  *((float *)&v17 + 1) = v12 + v16;
  *((float *)&v17 + 2) = v13 - v15;
  v18 = v4 * v7;
  v19 = 1.0 - (float)(v9 + v11);
  HIDWORD(v20) = 0;
  *(float *)&v20 = v12 - v16;
  *((float *)&v20 + 1) = v19;
  *((float *)&v20 + 2) = v14 + v18;
  HIDWORD(v21) = 0;
  *(float *)&v21 = v13 + v15;
  *((float *)&v21 + 1) = v14 - v18;
  *((float *)&v21 + 2) = 1.0 - (float)(v9 + v10);
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v20;
  result = *(__n128 *)this;
  result.n128_u32[3] = 1.0;
  *(_OWORD *)(a2 + 32) = v21;
  *(__n128 *)(a2 + 48) = result;
  return result;
}

__n128 re::RenderCamera::computeInverseTransform@<Q0>(float32x4_t *this@<X0>, uint64_t a2@<X8>)
{
  float32x4_t v2;
  float32x4_t v3;
  int32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  __int128 v15;
  __int128 v16;
  __n128 result;

  v2 = this[1];
  v3 = vnegq_f32(v2);
  v4 = (int32x4_t)vnegq_f32(*this);
  v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), (int8x16_t)v3, 0xCuLL);
  v6 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v4, v4), (int8x16_t)v4, 0xCuLL), v2), v5, *this);
  v7 = (int32x4_t)vaddq_f32(v6, v6);
  v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v7, v7), (int8x16_t)v7, 0xCuLL);
  v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), v2), v8, v5);
  result = (__n128)vaddq_f32(vsubq_f32(vmulq_laneq_f32(v8, v2, 3), *this), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL));
  v8.f32[0] = v3.f32[0] + v3.f32[0];
  v10 = (float)(v3.f32[0] + v3.f32[0]) * v3.f32[0];
  v11 = vmuls_lane_f32(v3.f32[1] + v3.f32[1], *(float32x2_t *)v3.f32, 1);
  v12 = vmuls_lane_f32(v3.f32[2] + v3.f32[2], v3, 2);
  v13 = vmuls_lane_f32(v3.f32[0] + v3.f32[0], *(float32x2_t *)v3.f32, 1);
  v14 = vmuls_lane_f32(v3.f32[0] + v3.f32[0], v3, 2);
  v3.f32[0] = vmuls_lane_f32(v3.f32[1] + v3.f32[1], v3, 2);
  v8.f32[0] = vmuls_lane_f32(v8.f32[0], v2, 3);
  v5.f32[0] = vmuls_lane_f32(v3.f32[1] + v3.f32[1], v2, 3);
  v2.f32[0] = vmuls_lane_f32(v3.f32[2] + v3.f32[2], v2, 3);
  HIDWORD(v15) = 0;
  *(float *)&v15 = 1.0 - (float)(v11 + v12);
  *((float *)&v15 + 1) = v13 + v2.f32[0];
  v9.i32[3] = 0;
  *((float *)&v15 + 2) = v14 - v5.f32[0];
  HIDWORD(v16) = 0;
  *(float *)&v16 = v13 - v2.f32[0];
  *((float *)&v16 + 1) = 1.0 - (float)(v10 + v12);
  *((float *)&v16 + 2) = v3.f32[0] + v8.f32[0];
  *(float *)v9.i32 = v14 + v5.f32[0];
  *(float *)&v9.i32[1] = v3.f32[0] - v8.f32[0];
  *(float *)&v9.i32[2] = 1.0 - (float)(v10 + v11);
  *(_OWORD *)a2 = v15;
  *(_OWORD *)(a2 + 16) = v16;
  result.n128_u32[3] = 1.0;
  *(int32x4_t *)(a2 + 32) = v9;
  *(__n128 *)(a2 + 48) = result;
  return result;
}

int8x8_t re::RenderCamera::transformWorldBoundsToScreen@<D0>(float32x4_t *this@<X0>, float32x4_t *a2@<X1>, const re::Projection *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v27;
  float32x2_t v28;
  int8x8_t result;
  _OWORD v30[4];
  _OWORD v31[4];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  float32x4_t v36[4];

  re::RenderCamera::computeInverseTransform(this, (uint64_t)v31);
  re::Projection::computeMatrix4x4F(a3, (uint64_t)v30);
  v7 = atomic_load((unsigned __int8 *)&_MergedGlobals_366);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_366))
  {
    xmmword_254118420 = xmmword_2260E5F10;
    unk_254118430 = xmmword_2260E5F20;
    xmmword_254118440 = xmmword_2260E5F40;
    unk_254118450 = xmmword_226132B10;
    __cxa_guard_release(&_MergedGlobals_366);
  }
  v8 = atomic_load((unsigned __int8 *)&qword_254118408);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254118408))
  {
    dword_254118460 = 0u;
    unk_254118470 = 0u;
    unk_254118480 = 0u;
    unk_254118490 = 0u;
    dword_254118460.i32[0] = 1056964608;
    dword_254118474 = 1056964608;
    dword_254118488 = 1065353216;
    dword_25411849C = 1065353216;
    __cxa_guard_release(&qword_254118408);
  }
  v9 = atomic_load((unsigned __int8 *)qword_254118410);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(qword_254118410))
  {
    re::operator*<float>(&dword_254118460, (uint64_t)&xmmword_254118420, &xmmword_2541184A0);
    __cxa_guard_release(qword_254118410);
  }
  v10 = 0;
  v11 = (float32x4_t)xmmword_2541184A0;
  v12 = *(float32x4_t *)algn_2541184B0;
  v13 = (float32x4_t)xmmword_2541184C0;
  v14 = (float32x4_t)unk_2541184D0;
  v32 = v30[0];
  v33 = v30[1];
  v34 = v30[2];
  v35 = v30[3];
  do
  {
    v36[v10 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v11, COERCE_FLOAT(*(__int128 *)((char *)&v32 + v10))), v12, *(float32x2_t *)((char *)&v32 + v10), 1), v13, *(float32x4_t *)((char *)&v32 + v10), 2), v14, *(float32x4_t *)((char *)&v32 + v10), 3);
    v10 += 16;
  }
  while (v10 != 64);
  v15 = 0;
  v16 = v36[0];
  v17 = v36[1];
  v18 = v36[2];
  v19 = v36[3];
  v32 = v31[0];
  v33 = v31[1];
  v34 = v31[2];
  v35 = v31[3];
  do
  {
    v36[v15 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, COERCE_FLOAT(*(__int128 *)((char *)&v32 + v15))), v17, *(float32x2_t *)((char *)&v32 + v15), 1), v18, *(float32x4_t *)((char *)&v32 + v15), 2), v19, *(float32x4_t *)((char *)&v32 + v15), 3);
    v15 += 16;
  }
  while (v15 != 64);
  re::AABB::transform(a2, v36, a4);
  v20 = *(float32x2_t *)a4;
  v21 = *(float32x2_t *)(a4 + 16);
  v20.f32[1] = 1.0 - *(float *)(a4 + 20);
  __asm { FMOV            V1.2S, #1.0 }
  v27 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v20, _D1), (int8x8_t)_D1, (int8x8_t)v20);
  v21.f32[1] = 1.0 - *(float *)(a4 + 4);
  *(int8x8_t *)a4 = vbic_s8((int8x8_t)v27, (int8x8_t)vcltz_f32(v27));
  v28 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v21, _D1), (int8x8_t)_D1, (int8x8_t)v21);
  result = vbic_s8((int8x8_t)v28, (int8x8_t)vcltz_f32(v28));
  *(int8x8_t *)(a4 + 16) = result;
  return result;
}

double re::PerFrameAllocatorGPU::allocInternal@<D0>(re::PerFrameAllocatorGPU *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  char v9;
  re::PerFrameAllocatorGPU *v10;
  double result;
  _opaque_pthread_t *v12;
  pthread_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  re::PerFrameAllocatorGPUManager *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t NewChunk;
  uint64_t v31;
  uint64_t v32;
  signed int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _OWORD v44[5];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    goto LABEL_40;
  do
  {
    if (*((_BYTE *)this + 96))
      goto LABEL_40;
    v9 = a4;
    v10 = this;
    if (pthread_self() == *((pthread_t *)this + 10))
      break;
    this = (re::PerFrameAllocatorGPU *)re::PerFrameAllocatorGPUManager::perFrameAllocatorGPU(*((_QWORD *)this + 9), *(_QWORD *)this);
    v12 = (_opaque_pthread_t *)*((_QWORD *)this + 10);
    v13 = pthread_self();
    a4 = 0;
  }
  while (v12 == v13);
  if (a3 <= 0x10)
    v14 = 16;
  else
    v14 = a3;
  v15 = (char *)v10 + 8;
  v16 = 8;
  while (1)
  {
    v17 = *(uint64_t **)((char *)v10 + v16);
    if (v17)
    {
      if (v14 + a2 < v17[8] - v17[7])
        break;
    }
    v16 += 8;
    if (v16 == 32)
    {
      v18 = *((_QWORD *)v10 + 9);
      if (a2 <= 0x10000)
        v19 = 0x10000;
      else
        v19 = a2;
      v43 = *(_QWORD *)v10;
      v20 = (os_unfair_lock_s *)(v18 + 80);
      os_unfair_lock_lock((os_unfair_lock_t)(v18 + 80));
      v22 = re::PerFrameAllocatorGPUManager::sizeToIndex(v21, v19);
      v23 = *(_QWORD *)(v18 + 104);
      if (v22 < v23)
      {
        v24 = *(_QWORD *)(v18 + 120);
        v25 = v24 + 88 * v22;
        v28 = *(_QWORD *)(v25 + 24);
        v26 = (unint64_t *)(v25 + 24);
        v27 = v28;
        if (v28)
          goto LABEL_17;
        v40 = 0x10000 << v22;
        if (v22 < v23 - 1)
        {
          if (v23 > ++v22)
          {
            if (2 * v19 <= v40)
              goto LABEL_38;
            v41 = v24 + 88 * v22;
            v42 = *(_QWORD *)(v41 + 24);
            v26 = (unint64_t *)(v41 + 24);
            v27 = v42;
            if (v42 < 2)
              goto LABEL_38;
LABEL_17:
            v29 = v27 - 1;
            NewChunk = *(_QWORD *)(*(_QWORD *)(v24 + 88 * v22 + 40) + 8 * v29);
            *v26 = v29;
            ++*(_DWORD *)(v24 + 88 * v22 + 32);
LABEL_18:
            *(_QWORD *)(NewChunk + 136) = v43;
            *(_OWORD *)(NewChunk + 56) = *(_OWORD *)(NewChunk + 40);
            os_unfair_lock_unlock(v20);
            *(_QWORD *)&v44[0] = NewChunk;
            re::DynamicArray<re::PerFrameAllocatorGPUChunk *>::add((_QWORD *)v10 + 4, v44);
            v32 = 0;
            v33 = 0;
            v34 = -1;
            while (1)
            {
              v35 = *(_QWORD *)&v15[8 * v32];
              if (!v35)
                break;
              v36 = *(_QWORD *)(v35 + 64) - *(_QWORD *)(v35 + 56);
              if (v36 < v34)
              {
                v34 = v36;
                v33 = v32;
              }
              if (++v32 == 3)
                goto LABEL_29;
            }
            v33 = v32;
LABEL_29:
            v38 = v33;
            if (v33 < 3)
            {
              v17 = *(uint64_t **)&v44[0];
              *(_QWORD *)&v15[8 * v38] = *(_QWORD *)&v44[0];
              if ((v9 & 1) == 0)
                goto LABEL_31;
LABEL_25:
              v37 = (v17[8] - a2) & -v14;
              if (v17[7] > v37)
                goto LABEL_40;
              v17[8] = v37;
              if (!v37)
                goto LABEL_40;
LABEL_33:
              v39 = *v17;
              a5[2] = a2;
              a5[3] = v17 + 18;
              *a5 = v39;
              a5[1] = v37 - v39;
              return result;
            }
            re::internal::assertLog((re::internal *)6, v31, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v33, 3);
            _os_crash();
            __break(1u);
          }
          memset(v44, 0, sizeof(v44));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_38:
        NewChunk = re::PerFrameAllocatorGPUManager::allocateNewChunk((re::PerFrameAllocatorGPUManager *)v18, v40);
        if (NewChunk)
          goto LABEL_18;
      }
      os_unfair_lock_unlock(v20);
      goto LABEL_40;
    }
  }
  *(_QWORD *)&v44[0] = *(_QWORD *)((char *)v10 + v16);
  if ((v9 & 1) != 0)
    goto LABEL_25;
LABEL_31:
  v37 = (v14 + v17[7] - 1) & -v14;
  if ((uint64_t)(v37 + a2) <= v17[8])
  {
    v17[7] = v37 + a2;
    if (v37)
      goto LABEL_33;
  }
LABEL_40:
  result = 0.0;
  *(_OWORD *)a5 = 0u;
  *((_OWORD *)a5 + 1) = 0u;
  return result;
}

uint64_t re::PerFrameAllocatorGPUManager::perFrameAllocatorGPU(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _opaque_pthread_t *v10;
  const void *v11;
  int v12;
  uint64_t v14;
  char v15[8];
  __int16 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  v4 = pthread_getspecific(*(_QWORD *)(a1 + 8));
  if (v4)
  {
    v5 = re::DataArray<re::PerFrameAllocatorGPU>::tryGet(a1 + 16, (uint64_t)v4);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFLL;
      v8 = a2 & 0xFFFFFFFFFFFFFFFLL;
      if (v7 == 0xFFFFFFFFFFFFFFFLL)
      {
        if (v8 == 0xFFFFFFFFFFFFFFFLL)
          return v6;
      }
      else if (v8 != 0xFFFFFFFFFFFFFFFLL && v7 == v8)
      {
        return v6;
      }
      *(_BYTE *)(v5 + 104) = 1;
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v9 = (char *)re::PerFrameAllocatorGPUManager::perFrameAllocatorGPU(re::FrameCount)::kAllocationName();
  if (*v9)
  {
    v16 = 0;
    *(_QWORD *)v15 = 0;
    v10 = pthread_self();
    pthread_getname_np(v10, v15, 0xAuLL);
    snprintf(v9, 0x200uLL, "PerThreadAllocatorGPU.%s", v15);
  }
  *(_QWORD *)v15 = a1;
  v11 = (const void *)re::DataArray<re::PerFrameAllocatorGPU>::create<char (&)[512],re::FrameCount &,re::PerFrameAllocatorGPUManager *>(a1 + 16, (uint64_t)v9, &v14, (uint64_t *)v15);
  v12 = (int)v11;
  pthread_setspecific(*(_QWORD *)(a1 + 8), v11);
  v6 = re::DataArray<re::PerFrameAllocatorGPU>::get(a1 + 16, v12);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return v6;
}

_QWORD *re::DynamicArray<re::PerFrameAllocatorGPUChunk *>::add(_QWORD *this, _QWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::PerFrameAllocatorGPUChunk *>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  *(_QWORD *)(v3[4] + 8 * v4) = *a2;
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

void re::PerFrameAllocatorGPUManager::init(re::PerFrameAllocatorGPUManager *this, re::RenderManager *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  char *v11;

  if (!*(_BYTE *)this)
  {
    *((_QWORD *)this + 16) = a2;
    *(_BYTE *)this = 1;
    v4 = pthread_key_create((pthread_key_t *)this + 1, 0);
    if ((_DWORD)v4)
    {
      re::internal::assertLog((re::internal *)5, v5, "assertion failure: '%s' (%s:line %i) pthread_key_create failed: %d", "result == 0", "init", 202, v4);
      _os_crash();
      __break(1u);
    }
    else
    {
      re::DynamicArray<re::PerFrameAllocatorGPUManager::ChunkGroup>::resize((_QWORD *)this + 11, 0xFuLL);
      v6 = *((_QWORD *)this + 13);
      if (v6)
      {
        v7 = 0;
        v8 = (_QWORD *)*((_QWORD *)this + 15);
        do
        {
          *v8 = 0x10000 << v7;
          v8 += 11;
          ++v7;
        }
        while (v6 != v7);
      }
      v9 = *((_QWORD *)a2 + 30);
      re::PerFrameAllocatorGPUManager::addChunks(this, 0x10000, 8 * v9);
      v10 = (_anonymous_namespace_ *)re::PerFrameAllocatorGPUManager::addChunks(this, 0x20000, 4 * v9);
      v11 = (char *)this + 16;
      re::DynamicArray<re::DataArray<re::PerFrameAllocatorGPU>::ElementBlock>::setCapacity(v11, 0);
      ++*((_DWORD *)v11 + 6);
      *((_DWORD *)v11 + 11) = 8;
      re::DataArray<re::PerFrameAllocatorGPU>::allocBlock((unsigned int *)v11);
    }
  }
}

uint64_t re::PerFrameAllocatorGPUManager::sizeToIndex(re::PerFrameAllocatorGPUManager *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  signed int v4;
  uint64_t result;

  if (a2)
  {
    v4 = 16 - __clz(a2 - 1);
    return v4 & ~(v4 >> 31);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, 0, "assertion failure: '%s' (%s:line %i) ", "size > 0", "sizeToIndex", 494, v2, v3);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

_QWORD *re::DynamicArray<re::PerFrameAllocatorGPUManager::ChunkGroup>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 88 * a2;
    v9 = a2;
    do
    {
      v10 = v3[4];
      v11 = v10 + v8;
      v12 = *(_QWORD *)(v10 + v8 + 48);
      if (v12)
      {
        if (*(_QWORD *)(v11 + 80))
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
        *(_QWORD *)(v11 + 80) = 0;
        *(_QWORD *)(v10 + v8 + 56) = 0;
        *(_QWORD *)(v10 + v8 + 64) = 0;
        *(_QWORD *)(v10 + v8 + 48) = 0;
        ++*(_DWORD *)(v10 + v8 + 72);
      }
      v14 = *(_QWORD **)(v11 + 8);
      v13 = (_QWORD *)(v11 + 8);
      result = v14;
      if (v14)
      {
        v15 = v10 + v8;
        if (*(_QWORD *)(v15 + 40))
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
        *(_QWORD *)(v15 + 40) = 0;
        v13[1] = 0;
        v13[2] = 0;
        *v13 = 0;
        ++*(_DWORD *)(v15 + 32);
      }
      ++v9;
      v8 += 88;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::PerFrameAllocatorGPUManager::ChunkGroup>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 88 * v4;
      do
      {
        v7 = v3[4] + v6;
        *(_QWORD *)(v7 + 80) = 0;
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 32) = 0;
        *(_OWORD *)(v7 + 40) = 0uLL;
        *(_OWORD *)(v7 + 56) = 0uLL;
        *(_DWORD *)(v7 + 72) = 0;
        v6 += 88;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

unint64_t re::PerFrameAllocatorGPUManager::addChunks(re::PerFrameAllocatorGPUManager *this, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  uint64_t NewChunk;

  result = re::PerFrameAllocatorGPUManager::sizeToIndex(this, a2);
  if (a3 && result < *((_QWORD *)this + 13))
  {
    do
    {
      NewChunk = re::PerFrameAllocatorGPUManager::allocateNewChunk(this, a2);
      result = re::PerFrameAllocatorGPUManager::reuseChunk(this, NewChunk);
      --a3;
    }
    while (a3);
  }
  return result;
}

uint64_t re::PerFrameAllocatorGPUManager::deinit(uint64_t this)
{
  uint64_t v1;
  re *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  if (*(_BYTE *)this)
  {
    v1 = this;
    v2 = (re *)re::DataArray<re::PerFrameAllocatorGPU>::deinit(this + 16);
    v3 = *(_QWORD *)(v1 + 104);
    if (!v3)
      goto LABEL_14;
    v4 = 0;
    while (1)
    {
      v5 = *(_QWORD *)(v1 + 120);
      v6 = v5 + 88 * v4;
      v9 = *(_QWORD *)(v6 + 64);
      v8 = (unint64_t *)(v6 + 64);
      v7 = v9;
      if (!v9)
        goto LABEL_13;
      v10 = 0;
      v11 = (_QWORD *)(v5 + 88 * v4 + 80);
      do
      {
        v12 = *(_QWORD *)(*v11 + 8 * v10);
        if (v12)
        {
          v13 = re::globalAllocators(v2)[2];
          v14 = *(void **)(v12 + 144);
          if (v14)
          {

            *(_QWORD *)(v12 + 144) = 0;
          }
          *(_OWORD *)(v12 + 56) = 0u;
          *(_OWORD *)(v12 + 40) = 0u;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v12 + 80));
          re::Allocator::~Allocator((re::Allocator *)(v12 + 16));
          v2 = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 40))(v13, v12);
          v7 = *v8;
        }
        if (v7 <= v10)
        {
          v17 = 0;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v18) = 136315906;
          *(_QWORD *)((char *)&v18 + 4) = "operator[]";
          WORD6(v18) = 1024;
          HIWORD(v18) = 789;
          _os_log_send_and_compose_impl();
          this = _os_crash_msg();
          __break(1u);
          goto LABEL_18;
        }
        *(_QWORD *)(*v11 + 8 * v10++) = 0;
      }
      while (v7 > v10);
      v3 = *(_QWORD *)(v1 + 104);
LABEL_13:
      *v8 = 0;
      v15 = v5 + 88 * v4;
      ++*(_DWORD *)(v15 + 72);
      *(_QWORD *)(v15 + 24) = 0;
      ++*(_DWORD *)(v15 + 32);
      if (v3 <= ++v4)
      {
LABEL_14:
        this = pthread_key_delete(*(_QWORD *)(v1 + 8));
        if (!(_DWORD)this)
        {
          *(_BYTE *)v1 = 0;
          return this;
        }
LABEL_18:
        re::internal::assertLog((re::internal *)5, v16, "assertion failure: '%s' (%s:line %i) pthread_key_delete failed: %d", "result == 0", "deinit", 248, this, v17, v18);
        _os_crash();
        __break(1u);
      }
    }
  }
  return this;
}

uint64_t re::DataArray<re::PerFrameAllocatorGPU>::deinit(uint64_t result)
{
  uint64_t *v1;
  double v2;
  _QWORD *v3;

  if (*(_DWORD *)(result + 44))
  {
    v1 = (uint64_t *)result;
    v2 = re::DataArray<re::PerFrameAllocatorGPU>::clear((_QWORD *)result);
    if (!v1[2])
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v3 = (_QWORD *)v1[4];
    (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v3[1]);
    result = *v1;
    if (*v1)
    {
      if (v1[4])
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      v1[4] = 0;
      v1[1] = 0;
      v1[2] = 0;
      *v1 = 0;
      ++*((_DWORD *)v1 + 6);
    }
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

uint64_t re::DataArray<re::PerFrameAllocatorGPU>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (v3 = *(_DWORD *)(a1 + 44)) : (v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((v4 = *(_QWORD *)(a1 + 32),
          (v5 = *(_DWORD *)(*(_QWORD *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (v6 = 0),
         v6)))
  {
    return *(_QWORD *)(v4 + 16 * WORD1(a2)) + 112 * (unsigned __int16)a2;
  }
  else
  {
    return 0;
  }
}

unint64_t re::DataArray<re::PerFrameAllocatorGPU>::create<char (&)[512],re::FrameCount &,re::PerFrameAllocatorGPUManager *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  __int128 v21;

  v8 = *(_DWORD *)(a1 + 56);
  if ((v8 + 1) >> 24)
    v9 = 1;
  else
    v9 = v8 + 1;
  *(_DWORD *)(a1 + 56) = v9;
  v10 = *(unsigned __int16 *)(a1 + 52);
  v11 = *(unsigned __int16 *)(a1 + 54);
  if (v10 == 0xFFFF && (_DWORD)v11 == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 48) >= *(_DWORD *)(a1 + 44))
      re::DataArray<re::PerFrameAllocatorGPU>::allocBlock((unsigned int *)a1);
    v15 = *(_QWORD *)(a1 + 16);
    v11 = (unsigned __int16)(v15 - 1);
    if (v15)
    {
      v10 = *(unsigned int *)(a1 + 48);
      if (v10 < 0x10000)
      {
        v16 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v11);
        *(_DWORD *)(a1 + 48) = v10 + 1;
        *(_DWORD *)(v16[1] + 4 * v10) = *(_DWORD *)(a1 + 56);
        v14 = *v16 + 112 * v10;
        goto LABEL_15;
      }
LABEL_18:
      re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v10, v20, v21);
      _os_crash();
      __break(1u);
    }
LABEL_17:
    v20 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v21) = 136315906;
    *(_QWORD *)((char *)&v21 + 4) = "operator[]";
    WORD6(v21) = 1024;
    HIWORD(v21) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  if (*(_QWORD *)(a1 + 16) <= v11)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  v13 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v11);
  *(_DWORD *)(v13[1] + 4 * v10) = v9;
  v14 = *v13 + 112 * v10;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)v14;
LABEL_15:
  ++*(_DWORD *)(a1 + 40);
  v17 = *a3;
  v18 = *a4;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_DWORD *)(v14 + 56) = 0;
  *(_QWORD *)(v14 + 64) = 0;
  *(_QWORD *)(v14 + 72) = v18;
  *(_QWORD *)(v14 + 88) = a2;
  *(_BYTE *)(v14 + 96) = 0;
  *(_DWORD *)(v14 + 100) = 3;
  *(_BYTE *)(v14 + 104) = 0;
  *(_QWORD *)v14 = v17;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 80) = pthread_self();
  return (v11 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 56) & 0xFFFFFF) << 32) | v10;
}

uint64_t re::DataArray<re::PerFrameAllocatorGPU>::get(uint64_t a1, int a2)
{
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(a2)) + 112 * (unsigned __int16)a2;
}

uint64_t re::PerFrameAllocatorGPUManager::allocateNewChunk(re::PerFrameAllocatorGPUManager *this, uint64_t a2)
{
  re *v4;
  re *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD v14[2];
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  re *v20;
  __int16 v21;
  unint64_t v22;
  id v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (re *)re::PerFrameAllocatorGPUManager::sizeToIndex(this, a2);
  if ((unint64_t)v4 >= *((_QWORD *)this + 13))
    return 0;
  v5 = v4;
  v6 = *((_QWORD *)this + 16);
  v7 = re::globalAllocators(v4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 152, 8);
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 16) = &off_24ED42408;
  *(_QWORD *)(v8 + 24) = "PerFrameAllocatorGPUChunk-Linear";
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_DWORD *)(v8 + 112) = 0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_DWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 116) = 0x7FFFFFFFLL;
  *(_BYTE *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = 0xFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v8 + 144) = 0;
  v14[0] = v8;
  v23[0] = objc_msgSend(*(id *)(v6 + 184), sel_newBufferWithLength_options_, a2, 0);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v8 + 144), v23);
  if (v23[0])

  *(_QWORD *)v8 = objc_msgSend(*(id *)(v8 + 144), sel_contents);
  v9 = (char *)objc_msgSend(*(id *)(v8 + 144), sel_length);
  *(_QWORD *)(v8 + 8) = v9;
  v10 = *(_QWORD *)v8;
  v11 = &v9[*(_QWORD *)v8];
  *(_QWORD *)(v8 + 40) = *(_QWORD *)v8;
  *(_QWORD *)(v8 + 48) = v11;
  *(_QWORD *)(v8 + 56) = v10;
  *(_QWORD *)(v8 + 64) = v11;
  v12 = *((_QWORD *)this + 13);
  if (v12 <= (unint64_t)v5)
  {
    v14[1] = 0;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    *(_OWORD *)v23 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v15 = 136315906;
    v16 = "operator[]";
    v17 = 1024;
    v18 = 789;
    v19 = 2048;
    v20 = v5;
    v21 = 2048;
    v22 = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::DynamicArray<re::PerFrameAllocatorGPUChunk *>::add((_QWORD *)(*((_QWORD *)this + 15) + 88 * (_QWORD)v5 + 48), v14);
  return v14[0];
}

unint64_t re::PerFrameAllocatorGPUManager::reuseChunk(re::PerFrameAllocatorGPUManager *a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v4;

  v4 = a2;
  result = re::PerFrameAllocatorGPUManager::sizeToIndex(a1, *(_QWORD *)(a2 + 8));
  if (result < *((_QWORD *)a1 + 13))
    return (unint64_t)re::DynamicArray<re::PerFrameAllocatorGPUChunk *>::add((_QWORD *)(*((_QWORD *)a1 + 15) + 88 * result + 8), &v4);
  return result;
}

void re::PerFrameAllocatorGPUManager::freeAllocatorsWithPredicate(os_unfair_lock_s *a1, unint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  int v27;
  unint64_t *v28;
  _QWORD v29[2];
  uint64_t v30;
  int v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v32 = 0;
  v29[1] = 0;
  v30 = 0;
  v28 = 0;
  v29[0] = 0;
  v31 = 0;
  v25[1] = 0;
  v26 = 0;
  v25[0] = 0;
  v7 = (uint64_t)&a1[4];
  v27 = 0;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v33, (uint64_t)&a1[4], 0);
  v23 = v33;
  v24 = v34;
  if (&a1[4] == (os_unfair_lock_s *)v33 && (unsigned __int16)v34 == 0xFFFFLL && (v34 & 0xFFFF0000) == 0xFFFF0000)
  {
    v8 = 0;
  }
  else
  {
    do
    {
      v9 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
      v10 = re::DataArray<re::PerFrameAllocatorGPU>::get((uint64_t)&a1[4], v9);
      v11 = *(_QWORD *)v10;
      v33 = a2;
      v35 = v11;
      if ((*(unsigned int (**)(_QWORD, unint64_t *, uint64_t *))(**(_QWORD **)(a3 + 32) + 16))(*(_QWORD *)(a3 + 32), &v33, &v35))
      {
        v33 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
        re::DynamicArray<re::DataArrayHandle<re::PerFrameAllocatorGPU>>::add((_anonymous_namespace_ *)v29, &v33);
      }
      if (*(_BYTE *)(v10 + 96))
      {
        v12 = *(_DWORD *)(v10 + 100);
        if (v12 >= 1)
          *(_DWORD *)(v10 + 100) = --v12;
        if (v12)
          v13 = 1;
        else
          v13 = *(_BYTE *)(v10 + 104) == 0;
        if (!v13)
        {
          v33 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
          re::DynamicArray<re::DataArrayHandle<re::PerFrameAllocatorGPU>>::add((_anonymous_namespace_ *)v25, &v33);
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v23);
    }
    while (v23 != v7 || (unsigned __int16)v24 != 0xFFFF || WORD1(v24) != 0xFFFF);
    v8 = v32;
    if (v30)
    {
      v14 = &v32[v30];
      v15 = v32;
      do
      {
        v16 = re::DataArray<re::PerFrameAllocatorGPU>::get((uint64_t)&a1[4], *v15);
        if (*(_QWORD *)(v16 + 48))
        {
          v17 = 0;
          do
            re::PerFrameAllocatorGPUManager::reuseChunk((re::PerFrameAllocatorGPUManager *)a1, *(_QWORD *)(*(_QWORD *)(v16 + 64) + 8 * v17++));
          while (*(_QWORD *)(v16 + 48) > v17);
        }
        *(_QWORD *)(v16 + 48) = 0;
        ++*(_DWORD *)(v16 + 56);
        *(_QWORD *)(v16 + 16) = 0;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 8) = 0;
        *(_BYTE *)(v16 + 96) = 1;
        ++v15;
      }
      while (v15 != v14);
    }
  }
  v18 = v28;
  if (v26)
  {
    v19 = 8 * v26;
    v20 = v28;
    do
    {
      v21 = *v20++;
      re::DataArray<re::PerFrameAllocatorGPU>::destroy(v7, v21);
      v19 -= 8;
    }
    while (v19);
  }
  if (v25[0])
    v22 = v18 == 0;
  else
    v22 = 1;
  if (!v22)
    (*(void (**)(void))(*(_QWORD *)v25[0] + 40))();
  if (v29[0] && v8)
    (*(void (**)(void))(*(_QWORD *)v29[0] + 40))();
  os_unfair_lock_unlock(v6);
}

_anonymous_namespace_ *re::DynamicArray<re::DataArrayHandle<re::PerFrameAllocatorGPU>>::add(_anonymous_namespace_ *result, _QWORD *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::PerFrameAllocatorGPUChunk *>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::PerFrameAllocatorGPUChunk *>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  *(_QWORD *)(*((_QWORD *)v3 + 4) + 8 * v5) = *a2;
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::DataArray<re::PerFrameAllocatorGPU>::destroy(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  _QWORD *v7;

  v2 = a2;
  v4 = a2 >> 16;
  result = (_QWORD *)re::DataArray<re::PerFrameAllocatorGPU>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (result)
  {
    v6 = result;
    v7 = result + 4;
    result = (_QWORD *)result[4];
    if (result)
    {
      if (v6[8])
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
      v6[8] = 0;
      v7[1] = 0;
      v7[2] = 0;
      *v7 = 0;
      ++*((_DWORD *)v6 + 14);
    }
    if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *(_DWORD *)v6 = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

uint64_t re::PerFrameAllocatorGPUManager::freeAllocatorsOlderOrEqual(re *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[3];
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = re::globalAllocators(a1)[2];
  v6[0] = &off_24ED72FE8;
  v7 = v4;
  v8 = v6;
  re::PerFrameAllocatorGPUManager::freeAllocatorsWithPredicate((os_unfair_lock_s *)a1, a2, (uint64_t)v6);
  result = (uint64_t)v8;
  if (v8)
  {
    result = (*(uint64_t (**)(_QWORD *))*v8)(v8);
    if (v8 != v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  return result;
}

uint64_t re::PerFrameAllocatorGPUManager::freeAllocatorsForFrame(re *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[3];
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = re::globalAllocators(a1)[2];
  v6[0] = &off_24ED73040;
  v7 = v4;
  v8 = v6;
  re::PerFrameAllocatorGPUManager::freeAllocatorsWithPredicate((os_unfair_lock_s *)a1, a2, (uint64_t)v6);
  result = (uint64_t)v8;
  if (v8)
  {
    result = (*(uint64_t (**)(_QWORD *))*v8)(v8);
    if (v8 != v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  return result;
}

void re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsOlderOrEqual(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

BOOL re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsOlderOrEqual(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*a3 & 0xFFFFFFFFFFFFFFFuLL) <= (*a2 & 0xFFFFFFFFFFFFFFFuLL);
}

_QWORD *re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsOlderOrEqual(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED72FE8;
  return result;
}

_QWORD *re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsOlderOrEqual(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED72FE8;
  return result;
}

uint64_t re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsOlderOrEqual(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::size()
{
  return 16;
}

void re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsForFrame(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

BOOL re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsForFrame(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v6;
  _BOOL4 v7;

  v3 = *a3 & 0xFFFFFFFFFFFFFFFLL;
  v4 = *a2 & 0xFFFFFFFFFFFFFFFLL;
  v6 = v4 != 0xFFFFFFFFFFFFFFFLL && v3 == v4;
  v7 = v4 == 0xFFFFFFFFFFFFFFFLL;
  if (v3 == 0xFFFFFFFFFFFFFFFLL)
    return v7;
  else
    return v6;
}

_QWORD *re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsForFrame(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED73040;
  return result;
}

_QWORD *re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsForFrame(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED73040;
  return result;
}

uint64_t re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsForFrame(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::size()
{
  return 16;
}

_QWORD *re::DynamicArray<re::PerFrameAllocatorGPUChunk *>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::PerFrameAllocatorGPUChunk *>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PerFrameAllocatorGPUChunk *>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::PerFrameAllocatorGPUChunk *>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 8 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 8 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::PerFrameAllocatorGPUChunk *>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::PerFrameAllocatorGPUManager::ChunkGroup>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::PerFrameAllocatorGPUManager::ChunkGroup>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x58uLL))
        {
          v2 = 88 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 88 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 88, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 40;
        v11 = 88 * v9;
        v12 = v7;
        do
        {
          v13 = *(_QWORD *)(v10 - 40);
          v12[5] = 0;
          v12[1] = 0;
          v12[2] = 0;
          *((_DWORD *)v12 + 8) = 0;
          v12[3] = 0;
          v15 = (_QWORD *)(v10 - 32);
          v14 = *(_QWORD *)(v10 - 32);
          *v12 = v13;
          v16 = *(_QWORD *)(v10 - 24);
          v12[1] = v14;
          *(_QWORD *)(v10 - 32) = 0;
          v12[2] = v16;
          *(_QWORD *)(v10 - 24) = 0;
          v17 = v12[3];
          v12[3] = *(_QWORD *)(v10 - 16);
          *(_QWORD *)(v10 - 16) = v17;
          v18 = v12[5];
          v12[5] = *(_QWORD *)v10;
          *(_QWORD *)v10 = v18;
          ++*(_DWORD *)(v10 - 8);
          ++*((_DWORD *)v12 + 8);
          v12[10] = 0;
          v12[7] = 0;
          v12[8] = 0;
          v12[6] = 0;
          *((_DWORD *)v12 + 18) = 0;
          v12[6] = *(_QWORD *)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          v19 = v12[10];
          v12[10] = *(_QWORD *)(v10 + 40);
          v20 = *(_QWORD *)(v10 + 8);
          v12[7] = *(_QWORD *)(v10 + 16);
          *(_QWORD *)(v10 + 16) = 0;
          v21 = v12[8];
          v12[8] = *(_QWORD *)(v10 + 24);
          *(_QWORD *)(v10 + 24) = v21;
          ++*(_DWORD *)(v10 + 32);
          ++*((_DWORD *)v12 + 18);
          *(_QWORD *)(v10 + 40) = v19;
          if (v20)
          {
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
            *(_QWORD *)(v10 + 40) = 0;
            *(_QWORD *)(v10 + 16) = 0;
            *(_QWORD *)(v10 + 24) = 0;
            *(_QWORD *)(v10 + 8) = 0;
            ++*(_DWORD *)(v10 + 32);
          }
          if (*v15)
          {
            if (*(_QWORD *)v10)
              (*(void (**)(_QWORD))(*(_QWORD *)*v15 + 40))(*v15);
            *(_QWORD *)v10 = 0;
            *(_QWORD *)(v10 - 24) = 0;
            *(_QWORD *)(v10 - 16) = 0;
            *v15 = 0;
            ++*(_DWORD *)(v10 - 8);
          }
          v10 += 88;
          v12 += 11;
          v11 -= 88;
        }
        while (v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

void re::DataArray<re::PerFrameAllocatorGPU>::allocBlock(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  v2 = 112 * a1[11];
  v5.n128_u64[0] = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, v2, 0);
  if (v5.n128_u64[0])
  {
    v2 = 4 * a1[11];
    v5.n128_u64[1] = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, v2, 0);
    if (v5.n128_u64[1])
    {
      re::DynamicArray<re::DataArray<re::PerFrameAllocatorGPU>::ElementBlock>::add((_anonymous_namespace_ *)a1, &v5);
      a1[12] = 0;
      return;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v2, *(_QWORD *)(*(_QWORD *)a1 + 8), 0);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v2, *(_QWORD *)(*(_QWORD *)a1 + 8));
  _os_crash();
  __break(1u);
}

_QWORD *re::DynamicArray<re::DataArray<re::PerFrameAllocatorGPU>::ElementBlock>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 16 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::DataArray<re::PerFrameAllocatorGPU>::ElementBlock>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

__n128 re::DynamicArray<re::DataArray<re::PerFrameAllocatorGPU>::ElementBlock>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::DataArray<re::PerFrameAllocatorGPU>::ElementBlock>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = *a2;
  *(__n128 *)(*((_QWORD *)this + 4) + 16 * v4) = *a2;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::DataArray<re::PerFrameAllocatorGPU>::ElementBlock>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::DataArray<re::PerFrameAllocatorGPU>::ElementBlock>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DataArray<re::PerFrameAllocatorGPU>::ElementBlock>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

double re::DataArray<re::PerFrameAllocatorGPU>::clear(_QWORD *a1)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  _OWORD v12[5];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v4 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)v12);
      re::DataArray<re::PerFrameAllocatorGPU>::destroy((uint64_t)a1, v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(v12);
    }
    while (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  v7 = a1[2];
  v8 = v7 - 1;
  if (v7 != 1)
  {
    v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v10 = a1[4] + v9;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 16));
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 8));
      re::DynamicArray<re::DataArray<re::RigGraphOperatorDefinition>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

unint64_t re::generateFunctionVariantHash(uint64_t *a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  size_t v5;
  unint64_t v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v3 = 0x9E3779B97F4A7C17;
  v4 = re::TechniqueDefinitionBuilder::hashFunctionConstants(*a1, a1[1]);
  v5 = strlen(a2);
  if (v5)
  {
    MurmurHash3_x64_128((uint64_t)a2, v5, 0, v7);
    v3 = ((v7[1] - 0x61C8864680B583E9 + (v7[0] << 6) + (v7[0] >> 2)) ^ v7[0]) - 0x61C8864680B583E9;
  }
  return ((v4 >> 2) + (v4 << 6) + v3) ^ v4;
}

void re::FunctionReflectionCache::~FunctionReflectionCache(re::FunctionReflectionCache *this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  uint64_t v12;

  v2 = (uint64_t *)((char *)this + 120);
  v11[0] = (char *)this + 120;
  v3 = *((_QWORD *)this + 17);
  if (v3 >= 0x10)
  {
    v4 = 0;
    v5 = *v2;
    v6 = v3 >> 4;
    while (1)
    {
      v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v5 + v4)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v11[1] = (unsigned __int16)~v7;
      if (v7 != 0xFFFF)
        break;
      v4 += 16;
      if (!--v6)
        goto LABEL_9;
    }
    v8 = __clz(__rbit64((unsigned __int16)~v7)) + v4;
    v12 = v8;
    if (v8 != -1)
    {
      do
      {
        re::internal::destroyPersistent<re::FunctionReflectionResult>((re *)"~FunctionReflectionCache", 55, *(id **)(*(_QWORD *)(v11[0] + 8) + 16 * v8 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v11);
        v8 = v12;
      }
      while (v12 != -1);
      v3 = *((_QWORD *)this + 17);
    }
  }
LABEL_9:
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = v3;
  if (v3 >= 0x10)
  {
    v9 = 0;
    *(_QWORD *)&v10 = -1;
    *((_QWORD *)&v10 + 1) = -1;
    do
      *(_OWORD *)(*((_QWORD *)this + 15) + 16 * v9++) = v10;
    while (v9 < *((_QWORD *)this + 17) >> 4);
  }
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)v2);
  re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::deinit((uint64_t)this + 72);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 3);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::FunctionReflectionCache::~FunctionReflectionCache(this);
  JUMPOUT(0x2276933B8);
}

re *re::internal::destroyPersistent<re::FunctionReflectionResult>(re *result, uint64_t a2, id *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::FunctionReflectionResult::~FunctionReflectionResult(a3);
    return (re *)(*(uint64_t (**)(uint64_t, id *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

uint64_t re::FunctionReflectionCache::tryGetCachedFunction(os_unfair_lock_s *this, uint64_t a2)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = a2;
  v3 = this + 28;
  os_unfair_lock_lock(this + 28);
  v4 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(&this[30]._os_unfair_lock_opaque, &v7);
  if (v4 == -1)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)&this[32]._os_unfair_lock_opaque + 16 * v4 + 8);
  os_unfair_lock_unlock(v3);
  return v5;
}

void re::FunctionReflectionCache::scheduleAllFunctionBuildTasks(uint64_t a1, uint64_t a2, id *a3, char a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  re::ns *v15;
  unsigned __int8 v16;
  id v17;
  id v18;
  _anonymous_namespace_ *v19;
  _anonymous_namespace_ *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t FunctionVariantHash;
  re *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t As64Bits;
  NSObject *v29;
  id v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  const char *v36;
  char v37;
  id v38;
  const char *v42;
  unint64_t v44;
  unint64_t v45;
  id v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  id v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 buf;
  _BYTE v63[28];
  __int16 v64;
  _BYTE v65[10];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 88);
  if ((int)v5 >= 1)
  {
    v7 = *(_QWORD *)(a1 + 88);
    v38 = (id)(a1 + 8);
    do
    {
      v8 = (v7 - 1);
      if (v5 <= v8)
      {
        v52 = 0;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v57 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v63 = 136315906;
        *(_QWORD *)&v63[4] = "operator[]";
        *(_WORD *)&v63[12] = 1024;
        *(_DWORD *)&v63[14] = 789;
        *(_WORD *)&v63[18] = 2048;
        *(_QWORD *)&v63[20] = v8;
        v64 = 2048;
        *(_QWORD *)v65 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v44 = v7 - 1;
      v45 = v7;
      v9 = (_QWORD *)(*(_QWORD *)(a1 + 104) + 88 * v8);
      v10 = v9[4];
      v11 = v9[2];
      v12 = v9[9];
      v13 = v9[10];
      v14 = *a3;
      v51[0] = v10;
      v51[1] = v11;
      v49 = v13;
      v50 = v12;
      v48 = a4;
      v46 = v14;
      v47 = a5;
      if ((v9[6] & 1) != 0)
        v15 = (re::ns *)v9[7];
      else
        v15 = (re::ns *)((char *)v9 + 49);
      v16 = atomic_load((unsigned __int8 *)&qword_2541184E8);
      if ((v16 & 1) == 0)
      {
        v14 = (id)__cxa_guard_acquire(&qword_2541184E8);
        if ((_DWORD)v14)
        {
          re::Defaults::BOOLValue((re::Defaults *)"enableShaderDebugLogs", v36, (char *)&v57);
          if ((_BYTE)v57)
            v37 = BYTE1(v57);
          else
            v37 = 0;
          _MergedGlobals_367 = v37;
          __cxa_guard_release(&qword_2541184E8);
        }
      }
      if (_MergedGlobals_367)
      {
        *(_QWORD *)&v65[2] = 0;
        memset(&v63[8], 0, 20);
        re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(v63, v11);
        ++*(_DWORD *)&v63[24];
        v42 = (const char *)v15;
        re::ShaderManager::makeFunction(*(uint64_t **)(a2 + 56), v12, v15, 0, &v56);
        v17 = objc_msgSend(v56, sel_functionConstantsDictionary);
        v57 = 0u;
        v58 = 0u;
        LODWORD(v59) = 0;
        *(_QWORD *)((char *)&v59 + 4) = 0x7FFFFFFFLL;
        v18 = objc_msgSend(v17, sel_keyEnumerator);
        v19 = (_anonymous_namespace_ *)objc_msgSend(v18, sel_nextObject);
        if (v19)
        {
          v20 = v19;
          do
          {
            v52 = (char *)-[_anonymous_namespace_ UTF8String](v20, sel_UTF8String);
            *(_QWORD *)&buf = objc_msgSend(v17, sel_objectForKey_, v20);
            re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)&v57, &v52, &buf);
            if ((_QWORD)buf)

            v19 = (_anonymous_namespace_ *)objc_msgSend(v18, sel_nextObject);
            v20 = v19;
          }
          while (v19);
        }
        v53 = 0;
        v54 = 0;
        v55 = 0;
        re::DynamicString::setCapacity(&v52, 0x1F4uLL);
        if (v11)
        {
          v21 = v11 << 6;
          do
          {
            if ((*(_BYTE *)(v10 + 8) & 1) != 0)
              v22 = *(_QWORD *)(v10 + 16);
            else
              v22 = v10 + 9;
            *(_QWORD *)&buf = v22;
            if (re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::containsKey((uint64_t)&v57, (char **)&buf))
            {
              re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v63, (re::DynamicString *)v10);
            }
            v10 += 64;
            v21 -= 64;
          }
          while (v21);
        }
        *(_QWORD *)&buf = *(_QWORD *)&v65[2];
        *((_QWORD *)&buf + 1) = *(_QWORD *)&v63[16];
        FunctionVariantHash = re::generateFunctionVariantHash((uint64_t *)&buf, v42);
        v24 = (re *)re::DynamicString::appendf((re::DynamicString *)&v52, "Compiling shader %s (%zu) with function constants ", v42, FunctionVariantHash);
        if (*(_QWORD *)&v63[16])
        {
          v25 = *(_QWORD *)&v65[2];
          v26 = *(_QWORD *)&v63[16] << 6;
          do
          {
            if ((*(_BYTE *)(v25 + 8) & 1) != 0)
              v27 = *(const char **)(v25 + 16);
            else
              v27 = (const char *)(v25 + 9);
            As64Bits = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v25);
            v24 = (re *)re::DynamicString::appendf((re::DynamicString *)&v52, "%s=%llu ", v27, As64Bits);
            v25 += 64;
            v26 -= 64;
          }
          while (v26);
        }
        v29 = *re::graphicsLogObjects(v24);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          v35 = (char *)&v53 + 1;
          if ((v53 & 1) != 0)
            v35 = v54;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v35;
          _os_log_error_impl(&dword_224FE9000, v29, OS_LOG_TYPE_ERROR, "%s\n", (uint8_t *)&buf, 0xCu);
        }
        if (v52 && (v53 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v52 + 40))();
        re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v57);
        if (v56)

        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v63);
      }
      LOBYTE(v52) = 0;
      *(_QWORD *)v63 = a1;
      v30 = v38;
      v31 = operator new(0x58uLL);
      *v31 = &off_24ED73120;
      v31[1] = v51;
      v31[2] = &v49;
      v31[3] = v63;
      v31[4] = &v46;
      v31[5] = a2;
      v31[6] = &v52;
      v31[7] = &v50;
      v31[8] = v9 + 5;
      v31[9] = &v48;
      v31[10] = &v47;
      *((_QWORD *)&v58 + 1) = v31;
      re::runInLocalAutoreleasePool((uint64_t)&v57);
      (*(void (**)(_QWORD *))(*v31 + 40))(v31);
      v32 = v52;
      if (*(_QWORD *)v63)

      if (!v32)
        break;
      v33 = *(_QWORD *)(a1 + 104) + 88 * *(_QWORD *)(a1 + 88);
      v34 = *(_QWORD *)(v33 - 48);
      if (v34)
      {
        if ((*(_BYTE *)(v33 - 40) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 40))(v34, *(_QWORD *)(v33 - 32));
        *(_OWORD *)(v33 - 48) = 0u;
        *(_OWORD *)(v33 - 32) = 0u;
      }
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit(v33 - 88);
      v5 = *(_QWORD *)(a1 + 88) - 1;
      *(_QWORD *)(a1 + 88) = v5;
      ++*(_DWORD *)(a1 + 96);
      v7 = v44;
    }
    while (v45 > 1);
  }
}

void re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(uint64_t a1, uint64_t a2, dispatch_group_t *a3, int a4, void *a5)
{
  os_unfair_lock_s *v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  re *v21;
  uint64_t v22;
  NSObject *v23;
  _QWORD v24[2];
  uint64_t i;
  _BYTE v26[24];
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v10 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  dispatch_group_enter(*a3);
  if (a1)
    v11 = (id)(a1 + 8);
  v24[0] = a1 + 120;
  v12 = *(_QWORD *)(a1 + 136);
  if (v12 >= 0x10)
  {
    v13 = 0;
    v14 = *(_QWORD *)(a1 + 120);
    v15 = v12 >> 4;
    while (1)
    {
      v16 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v14 + v13)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v24[1] = (unsigned __int16)~v16;
      if (v16 != 0xFFFF)
        break;
      v13 += 16;
      if (!--v15)
        goto LABEL_18;
    }
    v17 = __clz(__rbit64((unsigned __int16)~v16)) + v13;
    for (i = v17; i != -1; v17 = i)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v24[0] + 8) + 16 * v17 + 8);
      if (*(_BYTE *)(v18 + 48))
      {
        dispatch_group_enter(*a3);
        v19 = *(_QWORD *)(a2 + 56);
        v23 = *a3;
        if (a1)
          v20 = (id)(a1 + 8);
        v21 = *a3;
        v27 = re::globalAllocators(v21)[2];
        v28 = 0;
        v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 48, 0);
        *(_QWORD *)v22 = &off_24ED730C8;
        *(_QWORD *)(v22 + 8) = a1;
        *(_QWORD *)(v22 + 16) = v18;
        *(_QWORD *)(v22 + 24) = v21;
        *(_QWORD *)(v22 + 32) = a5;
        *(_BYTE *)(v22 + 40) = a4;
        v28 = (_BYTE *)v22;
        re::ShaderManager::scheduleAsyncGroupFuncOnCompilationQueue(v19, a4, a5, (id *)&v23, (uint64_t)v26);
        if (v28)
        {
          (**(void (***)(_BYTE *))v28)(v28);
          if (v28 != v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
          v28 = 0;
        }

      }
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v24);
    }
  }
LABEL_18:
  dispatch_group_leave(*a3);
  if (a1)

  os_unfair_lock_unlock(v10);
}

BOOL re::FunctionReflectionCache::addTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  _BOOL4 v6;

  v4 = a1 + 24;
  v5 = (uint64_t *)(a2 + 80);
  v6 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a1 + 24, (uint64_t *)(a2 + 80));
  if (!v6)
  {
    re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::add((_anonymous_namespace_ *)(a1 + 72), a2);
    re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(v4, v5);
  }
  return !v6;
}

__n128 re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 88 * v4;
  re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray(v5, (uint64_t *)a2);
  re::DynamicString::DynamicString((re::DynamicString *)(v5 + 40), (const re::DynamicString *)(a2 + 40));
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v5 + 72) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::FunctionReflectionCache::hashFunction(uint64_t a1, uint64_t a2, re::FunctionConstantUsageMask *a3, const char *a4, unint64_t a5)
{
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  v7 = re::TechniqueDefinitionBuilder::hashFunctionConstants(a1, a2, a3);
  v8 = strlen(a4);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)a4, v8, 0, v11);
    v9 = ((v11[1] - 0x61C8864680B583E9 + (v11[0] << 6) + (v11[0] >> 2)) ^ v11[0]) - 0x61C8864680B583E9;
  }
  else
  {
    v9 = 0x9E3779B97F4A7C17;
  }
  return ((v7 << 6) - 0x61C8864680B583E9 + (v7 >> 2) + (((a5 >> 2) + (a5 << 6) + v9) ^ a5)) ^ v7;
}

uint64_t re::SharedPersistentObject<re::FunctionReflectionCache>::allocator(re *a1)
{
  return re::globalAllocators(a1)[2];
}

uint64_t re::internal::Callable<re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(re::RenderManager &,re::dispatch::Group,BOOL,unsigned long long)::$_0,void ()(void)>::~Callable(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24ED730C8;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {

    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

void re::internal::Callable<re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(re::RenderManager &,re::dispatch::Group,BOOL,unsigned long long)::$_0,void ()(void)>::~Callable(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24ED730C8;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {

    *(_QWORD *)(a1 + 8) = 0;
  }
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(re::RenderManager &,re::dispatch::Group,BOOL,unsigned long long)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  id v2;
  _BYTE v3[40];

  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (objc_msgSend(**(id **)(a1 + 16), sel_functionType) == (id)5)
    v2 = **(id **)(a1 + 16);
  else
    v2 = objc_msgSend(**(id **)(a1 + 16), sel_reflectionWithOptions_, 3);
  re::mtl::retainedArray<MTL::Argument>((uint64_t)v3, objc_msgSend(v2, sel_arguments));
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(*(_QWORD *)(a1 + 16) + 8, (uint64_t)v3);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v3);
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 48) = 0;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 24));
}

uint64_t re::internal::Callable<re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(re::RenderManager &,re::dispatch::Group,BOOL,unsigned long long)::$_0,void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  char v7;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED730C8;
  *(_QWORD *)(a2 + 8) = v4;
  if (v4)
    v5 = (id)(v4 + 8);
  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 24) = v6;
  v7 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(a2 + 40) = v7;
  return a2;
}

uint64_t re::internal::Callable<re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(re::RenderManager &,re::dispatch::Group,BOOL,unsigned long long)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a2 = &off_24ED730C8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a2 + 24) = v2;
  v3 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a2 + 32) = v3;
  return a2;
}

uint64_t re::internal::Callable<re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(re::RenderManager &,re::dispatch::Group,BOOL,unsigned long long)::$_0,void ()(void)>::size()
{
  return 48;
}

void re::mtl::retainedArray<MTL::Argument>(uint64_t a1, id a2)
{
  id v4;
  char *v5;
  char *v6;
  char *i;
  id v8;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v4 = objc_msgSend(a2, sel_count);
  if (v4)
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)a1, (unint64_t)v4);
  v5 = (char *)objc_msgSend(a2, sel_count);
  if (v5)
  {
    v6 = v5;
    for (i = 0; i != v6; ++i)
    {
      v8 = objc_msgSend(a2, sel_objectAtIndex_, i);
      re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add((_QWORD *)a1, &v8);
      if (v8)

    }
  }
}

BOOL re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::containsKey(uint64_t a1, char **a2)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int v10;
  char v12;

  v4 = re::RigEvaluation::HashString::operator()((int)&v12, *a2);
  v5 = 0x7FFFFFFFLL;
  if (*(_QWORD *)a1)
  {
    v6 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(a1 + 16);
      v8 = *a2;
      do
      {
        v9 = v7 + 32 * v6;
        v10 = strcmp(*(const char **)(v9 + 16), v8);
        v5 = v6;
        if (!v10)
          break;
        v6 = *(_DWORD *)(v9 + 8) & 0x7FFFFFFF;
        v5 = 0x7FFFFFFFLL;
      }
      while (v6 != 0x7FFFFFFF);
    }
  }
  return v5 != 0x7FFFFFFF;
}

void re::FunctionReflectionResult::~FunctionReflectionResult(id *this)
{
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)(this + 1));
  if (*this)
  {

    *this = 0;
  }
}

uint64_t re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 88 * v4;
        do
        {
          v6 = *(_QWORD *)(v3 + 40);
          if (v6)
          {
            if ((*(_BYTE *)(v3 + 48) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(v3 + 56));
            *(_OWORD *)(v3 + 40) = 0u;
            *(_OWORD *)(v3 + 56) = 0u;
          }
          re::DynamicArray<re::TechniqueFunctionConstant>::deinit(v3);
          v3 += 88;
          v5 -= 88;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::HashBrown<unsigned long,re::FunctionReflectionResult *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int8x16_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t result;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[2];
  uint64_t v46;
  __int128 v47;
  _BYTE v48[48];

  v3 = a1[2];
  v2 = a1[3];
  v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7)
    v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = (v5 << 7) / 0x97;
  v7 = a1[7];
  v47 = 0u;
  *(_OWORD *)v48 = 0u;
  if (v4 <= v3)
    v8 = v2 + 1;
  else
    v8 = v6;
  memset(&v48[16], 0, 32);
  v9 = (_anonymous_namespace_ *)re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(&v47, v7, v8);
  v45[0] = a1;
  v10 = a1[2];
  if (v10 >= 0x10)
  {
    v11 = 0;
    v12 = *a1;
    v13 = v10 >> 4;
    v14 = (int8x16_t)xmmword_2260EE390;
    while (1)
    {
      v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v45[1] = (unsigned __int16)~v15;
      if (v15 != 0xFFFF)
        break;
      v11 += 16;
      if (!--v13)
        goto LABEL_30;
    }
    v16 = __clz(__rbit64((unsigned __int16)~v15)) + v11;
    v46 = v16;
    if (v16 == -1)
      goto LABEL_30;
    while (1)
    {
      v17 = *(_QWORD *)(v45[0] + 8);
      if (*(_QWORD *)&v48[40])
      {
        v18 = *(_QWORD *)&v48[16];
        if (!*(_QWORD *)&v48[16])
          goto LABEL_29;
      }
      else
      {
        *(_QWORD *)v48 = 16;
        *(_QWORD *)&v32 = -1;
        *((_QWORD *)&v32 + 1) = -1;
        *(_OWORD *)v47 = v32;
        *((_QWORD *)&v47 + 1) = v47 + 16;
        if (*(_QWORD *)v48)
        {
          v33 = 0;
          v34 = 0;
          do
          {
            v35 = (_QWORD *)(*((_QWORD *)&v47 + 1) + v33);
            *v35 = 0;
            v35[1] = 0;
            ++v34;
            v18 = *(_QWORD *)v48;
            v33 += 16;
          }
          while (v34 < *(_QWORD *)v48);
        }
        else
        {
          v18 = 0;
        }
        v14 = (int8x16_t)xmmword_2260EE390;
        *(_QWORD *)&v48[32] = 0;
        *(_QWORD *)&v48[8] = 0;
        *(_OWORD *)&v48[16] = v18;
        if (!v18)
        {
LABEL_29:
          re::HashBrown<unsigned long,re::FunctionReflectionResult *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(&v47);
          v14 = (int8x16_t)xmmword_2260EE390;
          v19 = *(_QWORD *)v48;
          goto LABEL_15;
        }
      }
      v19 = *(_QWORD *)v48;
      if (*(_QWORD *)v48 > 8 * v18)
        goto LABEL_29;
LABEL_15:
      v20 = (_QWORD *)(v17 + 16 * v16);
      v21 = 0xBF58476D1CE4E5B9 * (*v20 ^ (*v20 >> 30));
      v22 = (0x94D049BB133111EBLL * (v21 ^ (v21 >> 27))) ^ ((0x94D049BB133111EBLL * (v21 ^ (v21 >> 27))) >> 31);
      v23 = v19 >> 4;
      v24 = v22 % (v19 >> 4);
      v25 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v47 + 16 * v24)), v14)))), (int8x8_t)0x3830282018100800)));
      if (v25 >= 0x40)
      {
        do
        {
          if (v24 + 1 == v23)
            v24 = 0;
          else
            ++v24;
          v25 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v47 + 16 * v24)), v14)))), (int8x8_t)0x3830282018100800)));
        }
        while (v25 > 0x3F);
      }
      v26 = v47 + 16 * v24;
      v27 = *(unsigned __int8 *)(v26 + v25) == 255;
      *(_BYTE *)(v26 + v25) = v22 & 0x7F;
      v28 = v20[1];
      v29 = 16 * (v25 + 16 * v24);
      v30 = (_QWORD *)(*((_QWORD *)&v47 + 1) + v29);
      *v30 = *v20;
      v30[1] = v28;
      ++*(_QWORD *)&v48[8];
      *(_QWORD *)&v48[16] -= v27;
      v31 = 0xBF58476D1CE4E5B9
          * (*(_QWORD *)(*((_QWORD *)&v47 + 1) + v29) ^ (*(_QWORD *)(*((_QWORD *)&v47 + 1) + v29) >> 30));
      *(_QWORD *)&v48[24] ^= ((0x94D049BB133111EBLL * (v31 ^ (v31 >> 27))) >> 31) ^ (0x94D049BB133111EBLL
                                                                                   * (v31 ^ (v31 >> 27)));
      v9 = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v45);
      v14 = (int8x16_t)xmmword_2260EE390;
      v16 = v46;
      if (v46 == -1)
      {
        v10 = a1[2];
        break;
      }
    }
  }
LABEL_30:
  v37 = *(_QWORD *)&v48[40];
  *(_QWORD *)&v48[40] = a1[7];
  result = *(_QWORD *)&v48[40];
  v38 = v47;
  v39 = *(_OWORD *)v48;
  *(_QWORD *)v48 = v10;
  v40 = *a1;
  v41 = a1[1];
  *(_QWORD *)&v47 = *a1;
  *((_QWORD *)&v47 + 1) = v41;
  v42 = *(_OWORD *)&v48[16];
  v43 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v48[32];
  a1[7] = v37;
  *(_OWORD *)&v48[24] = v43;
  v44 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v38;
  *((_OWORD *)a1 + 1) = v39;
  *((_OWORD *)a1 + 2) = v42;
  *(_OWORD *)&v48[8] = v44;
  if (result)
  {
    if (v41)
      *((_QWORD *)&v47 + 1) = 0;
    if (v40)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

_QWORD *re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x58uLL))
        {
          v2 = 88 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 88 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 88, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 88 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = v8 + v10;
          v12[4] = 0;
          v12[1] = 0;
          v12[2] = 0;
          *v12 = 0;
          *((_DWORD *)v12 + 6) = 0;
          v14 = *(_QWORD *)(v8 + v10 + 8);
          *v12 = *(_QWORD *)(v8 + v10);
          v12[1] = v14;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
          v15 = v7[v10 / 8 + 2];
          v12[2] = *(_QWORD *)(v8 + v10 + 16);
          *(_QWORD *)(v13 + 16) = v15;
          v16 = v7[v10 / 8 + 4];
          v12[4] = *(_QWORD *)(v8 + v10 + 32);
          *(_QWORD *)(v13 + 32) = v16;
          *(_DWORD *)(v13 + 24) = *(_DWORD *)(v8 + v10 + 24) + 1;
          *((_DWORD *)v12 + 6) = LODWORD(v7[v10 / 8 + 3]) + 1;
          *(_OWORD *)(v12 + 5) = 0u;
          *(_OWORD *)(v12 + 7) = 0u;
          v17 = (_QWORD *)(v8 + v10 + 40);
          v12[5] = *v17;
          *v17 = 0;
          v12[8] = *(_QWORD *)(v8 + v10 + 64);
          *(_QWORD *)(v13 + 64) = 0;
          v19 = v7[v10 / 8 + 6];
          v18 = v7[v10 / 8 + 7];
          v20 = *(_QWORD *)(v8 + v10 + 56);
          v12[6] = *(_QWORD *)(v8 + v10 + 48);
          v12[7] = v20;
          *(_QWORD *)(v13 + 48) = v19;
          *(_QWORD *)(v13 + 56) = v18;
          *(_OWORD *)(v12 + 9) = *(_OWORD *)(v8 + v10 + 72);
          if (*v17)
          {
            if ((*(_BYTE *)(v13 + 48) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v17 + 40))(*v17, *(_QWORD *)(v13 + 56));
            *(_OWORD *)v17 = 0u;
            *(_OWORD *)(v8 + v10 + 56) = 0u;
          }
          re::DynamicArray<re::TechniqueFunctionConstant>::deinit(v8 + v10);
          v10 += 88;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::TechniqueFunctionConstant>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t *re::DynamicArray<re::TechniqueFunctionConstant>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  re::DynamicString *v15;
  char v16;
  char v17;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *>((uint64_t)&v17, *(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + (a1[2] << 6)), a1[4]);
    v10 = a1[2];
    if (v10 != v4)
    {
      v11 = *(_QWORD *)(a2 + 32);
      v12 = a1[4];
      v13 = v10 << 6;
      v14 = v4 << 6;
      do
      {
        v15 = re::DynamicString::DynamicString((re::DynamicString *)(v12 + v13), (const re::DynamicString *)(v11 + v13));
        *((_DWORD *)v15 + 8) = *(_DWORD *)(v11 + v13 + 32);
        result = re::FixedArray<unsigned char>::FixedArray((_QWORD *)v15 + 5, (uint64_t *)(v11 + v13 + 40));
        v11 += 64;
        v14 -= 64;
        v12 += 64;
      }
      while (v13 != v14);
    }
  }
  else
  {
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *>((uint64_t)&v16, *(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + (v4 << 6)), a1[4]);
    v6 = a1[2];
    if (v4 != v6)
    {
      v7 = (_QWORD *)(a1[4] + (v4 << 6) + 40);
      v8 = (v6 << 6) - (v4 << 6);
      do
      {
        v9 = (uint64_t **)(v7 - 5);
        if (*v7)
        {
          if (v7[1])
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v7 + 40))(*v7, v7[2]);
            v7[1] = 0;
            v7[2] = 0;
          }
          *v7 = 0;
        }
        result = *v9;
        if (*v9)
        {
          if ((*(_BYTE *)(v7 - 4) & 1) != 0)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t *, _QWORD))(*result + 40))(result, *(v7 - 3));
          *(_OWORD *)v9 = 0u;
          *(_OWORD *)(v7 - 3) = 0u;
        }
        v7 += 8;
        v8 -= 64;
      }
      while (v8);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  if (a2 == a3)
    return a2;
  v4 = a3;
  v5 = (uint64_t *)(a4 + 40);
  v6 = a2 + 5;
  do
  {
    re::DynamicString::operator=((re::DynamicString *)(v5 - 5), (re::DynamicString *)(v6 - 5));
    *((_DWORD *)v5 - 2) = *((_DWORD *)v6 - 2);
    re::FixedArray<unsigned char>::operator=(v5, v6);
    v5 += 8;
    v7 = v6 + 3;
    v6 += 8;
  }
  while (v7 != v4);
  return v4;
}

void std::__function::__func<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0,std::allocator<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0,std::allocator<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = &off_24ED73120;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0,std::allocator<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24ED73120;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0,std::allocator<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  id v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  re *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  id v21;
  _BYTE v22[24];
  uint64_t v23;
  _BYTE *v24;
  _BYTE v25[24];
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5A0], sel_alloc), sel_init);
  v21 = v2;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = v3[1];
  if (v4)
  {
    v5 = v2;
    v6 = v4 << 6;
    v7 = (unsigned __int16 *)(*v3 + 32);
    do
    {
      objc_msgSend(v5, sel_setConstantValue_type_atIndex_, *((_QWORD *)v7 + 3), *v7, v7[1], v21);
      v7 += 32;
      v6 -= 64;
    }
    while (v6);
  }
  v8 = **(_QWORD **)(a1 + 16);
  v9 = **(_QWORD **)(a1 + 24);
  if (v9)
    v10 = (id)(v9 + 8);
  v11 = (re *)**(id **)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = re::globalAllocators(v11)[2];
  v26 = v13;
  if (v13)
    v14 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 40, 0);
  else
    v14 = 0;
  *v14 = &off_24ED73190;
  v14[1] = v8;
  v14[2] = v9;
  v14[3] = v11;
  v14[4] = v12;
  v27 = v14;
  dispatch_group_enter(**(dispatch_group_t **)(a1 + 32));
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56);
  v16 = *(_QWORD *)(a1 + 64);
  v17 = **(_QWORD **)(a1 + 56);
  if ((*(_BYTE *)(v16 + 8) & 1) != 0)
    v18 = *(_QWORD *)(v16 + 16);
  else
    v18 = v16 + 9;
  v19 = **(unsigned __int8 **)(a1 + 72);
  v20 = **(_QWORD **)(a1 + 80);
  v23 = v13;
  v24 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v22, (uint64_t)v25);
  **(_BYTE **)(a1 + 48) = re::ShaderManager::tryRequestFunctionReflection(v15, v17, v18, &v21, v19, v20, (uint64_t)v22);
  if (v24)
  {
    (**(void (***)(_BYTE *))v24)(v24);
    if (v24 != v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
    v24 = 0;
  }
  if (v27)
  {
    (**(void (***)(_BYTE *))v27)(v27);
    if (v27 != v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
  }
  if (v21)

}

uint64_t std::__function::__func<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0,std::allocator<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0,std::allocator<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0>,void ()(void)>::target_type()
{
}

uint64_t re::internal::Callable<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0::operator() const(void)::{lambda(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)#1},void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::~Callable(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24ED73190;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {

    *(_QWORD *)(a1 + 16) = 0;
  }
  return a1;
}

void re::internal::Callable<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0::operator() const(void)::{lambda(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)#1},void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::~Callable(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24ED73190;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {

    *(_QWORD *)(a1 + 16) = 0;
  }
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0::operator() const(void)::{lambda(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)#1},void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::operator()(uint64_t a1, void **a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  char v28;
  unint64_t v29;

  if (*a2)
  {
    v27 = 0;
    v28 = 0;
    v24 = 0u;
    v25 = 0u;
    v26 = 0;
    NS::SharedPtr<MTL::Texture>::operator=((void **)&v24, a2);
    v28 = 1;
    v3 = *(_QWORD *)(a1 + 16);
    v29 = *(_QWORD *)(a1 + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 112));
    if (re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v3 + 120), &v29) == -1)
    {
      v4 = re::globalAllocators((re *)0xFFFFFFFFFFFFFFFFLL);
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 56, 8);
      v6 = v24;
      *(_QWORD *)(v5 + 40) = 0;
      *(_DWORD *)(v5 + 32) = 0;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_QWORD *)v5 = v6;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 8) = *((_QWORD *)&v24 + 1);
      *(_OWORD *)(v5 + 16) = v25;
      v24 = 0u;
      v25 = 0u;
      *(_QWORD *)(v5 + 40) = v27;
      v27 = 0;
      ++v26;
      ++*(_DWORD *)(v5 + 32);
      *(_BYTE *)(v5 + 48) = v28;
      if (re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v3 + 120), &v29) == -1)
      {
        if (!*(_QWORD *)(v3 + 176))
        {
        }
        v8 = *(_QWORD *)(v3 + 152);
        if (!v8 || (v9 = *(_QWORD *)(v3 + 136), v9 > 8 * v8))
        {
          re::HashBrown<unsigned long,re::FunctionReflectionResult *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize((uint64_t *)(v3 + 120));
          v9 = *(_QWORD *)(v3 + 136);
        }
        v10 = 0xBF58476D1CE4E5B9;
        v11 = 0x94D049BB133111EBLL;
        v12 = (0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) >> 27))) ^ ((0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) >> 27))) >> 31);
        v13 = v9 >> 4;
        v14 = *(_QWORD *)(v3 + 120);
        v15 = v12 % v13;
        while (1)
        {
          v16 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v14 + 16 * v15)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
          if (v16 < 0x40)
            break;
          if (v15 + 1 == v13)
            v15 = 0;
          else
            ++v15;
          if (v15 == v12 % v13)
          {
            re::internal::assertLog((re::internal *)4, v7, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
            _os_crash();
            __break(1u);
            break;
          }
        }
        v17 = v14 + 16 * v15;
        v18 = *(unsigned __int8 *)(v17 + v16) == 255;
        *(_BYTE *)(v17 + v16) = v12 & 0x7F;
        v19 = 16 * (v16 + 16 * v15);
        v20 = (unint64_t *)(*(_QWORD *)(v3 + 128) + v19);
        *v20 = v29;
        v20[1] = v5;
        v21 = *(_QWORD *)(v3 + 152) - v18;
        ++*(_QWORD *)(v3 + 144);
        *(_QWORD *)(v3 + 152) = v21;
        v22 = *(_QWORD *)(*(_QWORD *)(v3 + 128) + v19) ^ (*(_QWORD *)(*(_QWORD *)(v3 + 128) + v19) >> 30);
        v23 = ((v22 * v10) ^ ((v22 * v10) >> 27)) * v11;
        *(_QWORD *)(v3 + 160) ^= (v23 >> 31) ^ v23;
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 112));
    re::FunctionReflectionResult::~FunctionReflectionResult((id *)&v24);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 24));
}

_QWORD *re::internal::Callable<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0::operator() const(void)::{lambda(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)#1},void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24ED73190;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
    v6 = (id)(v4 + 8);
  v7 = *(id *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  a2[3] = v7;
  a2[4] = v8;
  return a2;
}

uint64_t re::internal::Callable<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0::operator() const(void)::{lambda(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)#1},void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24ED73190;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  v4 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a2 + 24) = v4;
  return a2;
}

uint64_t re::internal::Callable<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0::operator() const(void)::{lambda(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)#1},void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::size()
{
  return 40;
}

void re::mtl::makeDefaultDevice(_QWORD *a1@<X8>)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = MTLCreateSystemDefaultDevice();
  if (v3)
  {
    v5 = v3;
    *a1 = v5;

  }
  else
  {
    re::internal::assertLog((re::internal *)4, v4, "assertion failure: '%s' (%s:line %i) Unable to create default system Metal device.", "(mtlDevice != nullptr)", "makeDefaultDevice", 242);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::mtl::getTextureTypeName()
{
  id v0;
  uint64_t v1;

  MTLTextureTypeString();
  v0 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v1 = objc_msgSend(v0, "UTF8String");

  return v1;
}

uint64_t re::mtl::getTextureCompressionType(id *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  _BOOL4 v9;
  unsigned int v10;
  id *v12;
  _QWORD *v13;
  int v14;
  const char *v15;
  int v16;
  char v17;
  id *v18;
  int v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  if ((v6 & 1) == 0)
  {
    v12 = a1;
    v13 = a4;
    a4 = v13;
    v16 = v14;
    a1 = v12;
    if (v16)
    {
      re::Defaults::BOOLValue((re::Defaults *)"disableLossy", v15, (char *)&v21);
      if ((_BYTE)v21)
        v17 = BYTE1(v21);
      else
        v17 = 0;
      re::mtl::getTextureCompressionType(re::mtl::Device const&,MTL::StorageMode const&,MTL::PixelFormat const&,unsigned long const&)::disableLossyDefault = v17;
      a1 = v12;
      a4 = v13;
    }
  }
  if ((v7 & 1) == 0)
  {
    v18 = a1;
    v20 = a4;
    a4 = v20;
    if (v19)
    {
      re::mtl::getTextureCompressionType(re::mtl::Device const&,MTL::StorageMode const&,MTL::PixelFormat const&,unsigned long const&)::lossyIsNotSupported = objc_msgSend(*v18, "supportsFamily:", 1008, v20) ^ 1;
      a4 = v20;
    }
  }
  v8 = *a4;
  if (*a3 == 32
    || (v24 = 0, v22 = 0u, v23 = 0u, v21 = 0u, MTLPixelFormatGetInfoForDevice(), (WORD4(v21) & 0x400) != 0))
  {
    v9 = 1;
  }
  else
  {
    v24 = 0;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    MTLPixelFormatGetInfoForDevice();
    v9 = (DWORD2(v21) & 0x4000000) == 0;
  }
  v10 = (v8 >> 4) & 1;
  if ((v8 & 0x4002) == 2)
    v10 = 1;
  if (re::mtl::getTextureCompressionType(re::mtl::Device const&,MTL::StorageMode const&,MTL::PixelFormat const&,unsigned long const&)::disableLossyDefault | re::mtl::getTextureCompressionType(re::mtl::Device const&,MTL::StorageMode const&,MTL::PixelFormat const&,unsigned long const&)::lossyIsNotSupported)
    v10 = 1;
  return (*a2 == 2) & ~(v10 | v9);
}

BOOL re::mtl::Device::needsArgumentBufferTextureEmulation(re::mtl::Device *this)
{
  unsigned __int8 v1;
  unsigned __int8 v3;
  _QWORD *v4;
  const char *v5;
  int v6;
  int v7;
  re::mtl::Device *v8;
  id *v9;

  if ((v1 & 1) == 0)
  {
    v8 = this;
    this = v8;
    if (v6)
    {
      re::Defaults::BOOLValue((re::Defaults *)"needsArgumentBufferTextureEmulation", v5, &re::mtl::Device::needsArgumentBufferTextureEmulation(void)const::enableEmulation);
      this = v8;
    }
  }
  if (re::mtl::Device::needsArgumentBufferTextureEmulation(void)const::enableEmulation)
    return byte_255828D31 != 0;
  v4 = &unk_255828000;
  if ((v3 & 1) == 0)
  {
    v9 = (id *)this;
    v4 = (_QWORD *)&unk_255828000;
    if (v7)
    {
      re::mtl::Device::needsArgumentBufferTextureEmulation(void)const::tier = objc_msgSend(*v9, "argumentBuffersSupport");
      v4 = (_QWORD *)&unk_255828000;
    }
  }
  return v4[424] == 0;
}

uint64_t re::mtl::Device::makeCommandQueue@<X0>(id *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v4;

  v4 = objc_msgSend(*a1, sel_newCommandQueueWithDescriptor_, a2);
  *a3 = v4;

  return objc_msgSend(v4, "setBackgroundGPUPriority:", 2);
}

void re::mtl::Device::makeLibraryWithFile(void **this@<X0>, re::ns *a2@<X1>, re **a3@<X8>)
{
  id v6;
  const char *v7;
  void *v8;
  void *v9;
  id v10;
  re *v11;
  id v12;
  void *v13;
  id v14;
  dispatch_data_t v15;
  void *v16;
  void *v17;
  re *v18;
  re *v19;
  re *v20;
  NSObject *v21;
  NSObject *v22;
  _BOOL4 v23;
  NSObject *v24;
  id v25;
  uint64_t v26;
  re *v27;
  NSObject *v28;
  id v29;
  _QWORD aBlock[4];
  id v31;
  id v32;
  uint8_t buf[4];
  re::ns *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v6 = objc_alloc(MEMORY[0x24BDBCE50]);
  re::ns::convertToNSString(a2, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = 0;
  v9 = (void *)objc_msgSend(v6, "initWithContentsOfFile:options:error:", v8, 1, &v32);
  v10 = v32;

  if (v9)
  {
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZNK2re3mtl6Device19makeLibraryWithFileEPKc_block_invoke;
    aBlock[3] = &unk_24ED2D4C0;
    v12 = v9;
    v31 = v12;
    v13 = _Block_copy(aBlock);
    v14 = objc_retainAutorelease(v12);
    v15 = dispatch_data_create((const void *)objc_msgSend(v14, "bytes"), objc_msgSend(v14, "length"), 0, v13);
    v16 = *this;
    v29 = 0;
    v17 = (void *)objc_msgSend(v16, "newLibraryWithData:error:", v15, &v29);
    v18 = (re *)v29;
    v19 = v18;
    if (v17)
    {

      v20 = v17;
      *a3 = v20;
      goto LABEL_16;
    }
    v22 = *re::graphicsLogObjects(v18);
    v23 = os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
    if (v19)
    {
      if (v23)
      {
        v24 = v22;
        -[re localizedDescription](v19, "localizedDescription");
        v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v26 = objc_msgSend(v25, "UTF8String");
        *(_DWORD *)buf = 136315138;
        v34 = (re::ns *)v26;
        _os_log_error_impl(&dword_224FE9000, v24, OS_LOG_TYPE_ERROR, "makeLibraryWithFile failed [%s].", buf, 0xCu);

      }
    }
    else if (v23)
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v22, OS_LOG_TYPE_ERROR, "makeLibraryWithFile failed.", buf, 2u);
    }

  }
  else
  {
    v21 = *re::graphicsLogObjects(v11);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v34 = a2;
      _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, "makeLibraryWithFile failed to open the file [%s].", buf, 0xCu);
    }
  }
  v27 = (re *)0;
  *a3 = v27;
  v28 = *re::graphicsLogObjects(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_224FE9000, v28, OS_LOG_TYPE_ERROR, "makeLibraryWithFile failed.", buf, 2u);
  }
  v20 = 0;
LABEL_16:

}

void re::mtl::Device::makeComputePipelineState(id *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  id v4;
  void *v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  NSObject *v9;
  id v10;
  void *v11;
  uint8_t buf[4];
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v4 = objc_msgSend(*a1, sel_newComputePipelineStateWithDescriptor_options_reflection_error_, *a2, 0, 0, &v11);
  *a3 = v4;
  if (!v4)
  {
    v5 = v11;
    v6 = *re::graphicsLogObjects(0);
    v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (v7)
      {
        v8 = v11;
        v9 = v6;
        v10 = objc_msgSend(objc_msgSend(v8, sel_localizedDescription), sel_UTF8String);
        *(_DWORD *)buf = 136315138;
        v13 = v10;
        _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "makeComputePipelineState failed [%s].", buf, 0xCu);

      }
    }
    else if (v7)
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "makeComputePipelineState failed.", buf, 2u);
    }
  }
}

void re::mtl::Device::makeRenderPipelineState(id *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v4;
  void *v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  NSObject *v9;
  id v10;
  void *v11;
  uint8_t buf[4];
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v4 = objc_msgSend(*a1, sel_newRenderPipelineStateWithDescriptor_error_, a2, &v11);
  *a3 = v4;
  if (!v4)
  {
    v5 = v11;
    v6 = *re::graphicsLogObjects(0);
    v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (v7)
      {
        v8 = v11;
        v9 = v6;
        v10 = objc_msgSend(objc_msgSend(v8, sel_localizedDescription), sel_UTF8String);
        *(_DWORD *)buf = 136315138;
        v13 = v10;
        _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "makeRenderPipelineState failed [%s].", buf, 0xCu);

      }
    }
    else if (v7)
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "makeRenderPipelineState failed.", buf, 2u);
    }
  }
}

{
  id v4;
  void *v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  NSObject *v9;
  id v10;
  void *v11;
  uint8_t buf[4];
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v4 = objc_msgSend(*a1, sel_newRenderPipelineStateWithTileDescriptor_options_reflection_error_, a2, 0, 0, &v11);
  *a3 = v4;
  if (!v4)
  {
    v5 = v11;
    v6 = *re::graphicsLogObjects(0);
    v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (v7)
      {
        v8 = v11;
        v9 = v6;
        v10 = objc_msgSend(objc_msgSend(v8, sel_localizedDescription), sel_UTF8String);
        *(_DWORD *)buf = 136315138;
        v13 = v10;
        _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "makeRenderPipelineState failed [%s].", buf, 0xCu);

      }
    }
    else if (v7)
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "makeRenderPipelineState failed.", buf, 2u);
    }
  }
}

void re::mtl::Device::makeBinaryArchive(id *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  id v4;
  void *v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  NSObject *v9;
  id v10;
  void *v11;
  uint8_t buf[4];
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v4 = objc_msgSend(*a1, sel_newBinaryArchiveWithDescriptor_error_, *a2, &v11);
  if (!v4)
  {
    v5 = v11;
    v6 = *re::graphicsLogObjects(0);
    v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (v7)
      {
        v8 = v11;
        v9 = v6;
        v10 = objc_msgSend(objc_msgSend(v8, sel_localizedDescription), sel_UTF8String);
        *(_DWORD *)buf = 136315138;
        v13 = v10;
        _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "makeBinaryArchive failed [%s].", buf, 0xCu);

      }
    }
    else if (v7)
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "makeBinaryArchive failed.", buf, 2u);
    }
  }
  *a3 = v4;
}

id re::mtl::Device::makeTexture@<X0>(id a1@<X1>, id *a2@<X0>, _QWORD *a3@<X8>)
{
  re *v6;
  NSObject *v7;
  id result;
  NSObject *v9;
  int v10;
  id v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = (re *)objc_msgSend(a1, sel_width);
  if ((unint64_t)v6 <= 0x4000 && (v6 = (re *)objc_msgSend(a1, sel_height), (unint64_t)v6 <= 0x4000))
  {
    result = objc_msgSend(*a2, sel_newTextureWithDescriptor_, a1);
  }
  else
  {
    v7 = *re::graphicsLogObjects(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = v7;
      v10 = 134218240;
      v11 = objc_msgSend(a1, sel_width);
      v12 = 2048;
      v13 = objc_msgSend(a1, sel_height);
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Texture too large with dimensions %zu x %zu", (uint8_t *)&v10, 0x16u);

    }
    result = 0;
  }
  *a3 = result;
  return result;
}

id re::mtl::Device::makeTextureWithIOSurface@<X0>(id a1@<X1>, id *a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  re *v10;
  NSObject *v11;
  id result;
  NSObject *v13;
  int v14;
  id v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v10 = (re *)objc_msgSend(a1, sel_width);
  if ((unint64_t)v10 <= 0x4000 && (v10 = (re *)objc_msgSend(a1, sel_height), (unint64_t)v10 <= 0x4000))
  {
    result = objc_msgSend(*a2, sel_newTextureWithDescriptor_iosurface_plane_, a1, a3, a4);
  }
  else
  {
    v11 = *re::graphicsLogObjects(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v13 = v11;
      v14 = 134218240;
      v15 = objc_msgSend(a1, sel_width);
      v16 = 2048;
      v17 = objc_msgSend(a1, sel_height);
      _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Texture too large with dimensions %zu x %zu", (uint8_t *)&v14, 0x16u);

    }
    result = 0;
  }
  *a5 = result;
  return result;
}

id re::mtl::Device::makeSharedTexture@<X0>(id a1@<X1>, id *a2@<X0>, _QWORD *a3@<X8>)
{
  re *v6;
  NSObject *v7;
  id result;
  NSObject *v9;
  int v10;
  id v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = (re *)objc_msgSend(a1, sel_width);
  if ((unint64_t)v6 <= 0x4000 && (v6 = (re *)objc_msgSend(a1, sel_height), (unint64_t)v6 <= 0x4000))
  {
    result = objc_msgSend(*a2, sel_newSharedTextureWithDescriptor_, a1);
  }
  else
  {
    v7 = *re::graphicsLogObjects(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = v7;
      v10 = 134218240;
      v11 = objc_msgSend(a1, sel_width);
      v12 = 2048;
      v13 = objc_msgSend(a1, sel_height);
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Texture too large with dimensions %zu x %zu", (uint8_t *)&v10, 0x16u);

    }
    result = 0;
  }
  *a3 = result;
  return result;
}

void re::mtl::Device::makeArgumentEncoder(id *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;

  v5 = objc_msgSend(objc_msgSend(MEMORY[0x24BDBCE30], sel_alloc), sel_initWithObjects_count_, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 16));
  *a3 = objc_msgSend(*a1, sel_newArgumentEncoderWithArguments_, v5);
  if (v5)

}

id re::mtl::Device::areProgrammableSamplePositionsSupported(id *this)
{
  id v1;
  id result;

  v1 = *this;
  if ((objc_msgSend(*this, sel_respondsToSelector_, sel_areProgrammableSamplePositionsSupported) & 1) != 0)
    return objc_msgSend(v1, sel_areProgrammableSamplePositionsSupported);
  result = objc_msgSend(v1, sel_methodSignatureForSelector_, sel_areProgrammableSamplePositionsSupported);
  if (result)
    return objc_msgSend(v1, sel_areProgrammableSamplePositionsSupported);
  return result;
}

void re::mtl::Device::newCounterSampleBufferWithDescriptor(void **a1@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  re *v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  id v15;
  uint8_t buf[4];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *a2;
  v15 = 0;
  v6 = v5;
  v7 = (void *)objc_msgSend(v4, "newCounterSampleBufferWithDescriptor:error:", v6, &v15);
  v8 = v15;

  if (v8)
  {
    v10 = *re::graphicsLogObjects(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v12 = v10;
      objc_msgSend(v8, "localizedDescription");
      v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v14 = objc_msgSend(v13, "UTF8String");
      *(_DWORD *)buf = 136315138;
      v17 = v14;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "newCounterSampleBufferWithDescriptor failed: %s", buf, 0xCu);

    }
    *a3 = 0;
  }
  else
  {
    *a3 = v7;
    v11 = v7;
  }

}

void re::mtl::Device::getCounterSet(id *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  id *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  id v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 1:
      v5 = (id *)MEMORY[0x24BDDD158];
      goto LABEL_7;
    case 4:
      v5 = (id *)MEMORY[0x24BDDD150];
      goto LABEL_7;
    case 2:
      v5 = (id *)MEMORY[0x24BDDD148];
LABEL_7:
      v6 = *v5;
      goto LABEL_9;
  }
  v6 = 0;
LABEL_9:
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  objc_msgSend(*a1, "counterSets", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v16;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v16 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_msgSend(v12, "name");
        v13 = (id)objc_claimAutoreleasedReturnValue();

        if (v13 == v6)
        {
          *a3 = v12;
          v14 = v12;

          goto LABEL_19;
        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v9)
        continue;
      break;
    }
  }

  *a3 = 0;
LABEL_19:

}

void re::mtl::CommandQueue::makeCommandBuffer(id *this@<X0>, _QWORD *a2@<X8>)
{
  id v3;

  objc_msgSend(*this, "commandBuffer");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  *a2 = v3;

}

void re::mtl::CommandQueue::makeCommandBufferWithUnretainedReferences(id *this@<X0>, _QWORD *a2@<X8>)
{
  id v3;

  objc_msgSend(*this, "commandBufferWithUnretainedReferences");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  *a2 = v3;

}

void re::mtl::CommandQueue::makeCommandBufferWithDescriptor(id *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v4;

  objc_msgSend(*a1, "commandBufferWithDescriptor:", a2);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  *a3 = v4;

}

void re::mtl::CommandQueue::device(id *this@<X0>, _QWORD *a2@<X8>)
{
  id v3;

  objc_msgSend(*this, "device");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  *a2 = v3;

}

uint64_t re::mtl::CommandBuffer::getLabel(id *this)
{
  id v2;
  id v3;
  uint64_t v4;

  v2 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*this, "label");
    v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v4 = objc_msgSend(v3, "UTF8String");

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t re::mtl::CommandBuffer::addCompletionHandler(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t result;
  _QWORD v4[4];
  _BYTE v5[24];
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3321888768;
  v4[2] = ___ZNK2re3mtl13CommandBuffer20addCompletionHandlerENS_8FunctionIFvRKS1_EEE_block_invoke;
  v4[3] = &__block_descriptor_72_a8_32c48_ZTSN2re8FunctionIFvRKNS_3mtl13CommandBufferEEEE_e28_v16__0___MTLCommandBuffer__8l;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v5, a2);
  objc_msgSend(v2, "addCompletedHandler:", v4);
  result = (uint64_t)v7;
  if (v7)
  {
    result = (**(uint64_t (***)(_BYTE *))v7)(v7);
    if (v7 != v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  return result;
}

void ___ZNK2re3mtl13CommandBuffer20addCompletionHandlerENS_8FunctionIFvRKS1_EEE_block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  (*(void (**)(_QWORD, id *))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), &v3);

}

uint64_t __copy_helper_block_a8_32c48_ZTSN2re8FunctionIFvRKNS_3mtl13CommandBufferEEEE(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(a1 + 32, a2 + 32);
}

uint64_t (***__destroy_helper_block_a8_32c48_ZTSN2re8FunctionIFvRKNS_3mtl13CommandBufferEEEE(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 32);
}

void ___ZNK2re3mtl13CommandBuffer38addCompletionHandlerPrintLabelForDebugEv_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  re *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t Label;
  id v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = a2;
  v7 = v2;
  v3 = (re *)objc_msgSend(v2, "status");
  if ((_DWORD)v3 == 5)
  {
    v4 = *re::graphicsLogObjects(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = v4;
      Label = re::mtl::CommandBuffer::getLabel(&v7);
      *(_DWORD *)buf = 136315138;
      v9 = Label;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Failed CB %s!\n", buf, 0xCu);

    }
  }

}

uint64_t re::mtl::CommandBuffer::addScheduledHandler(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t result;
  _QWORD v4[4];
  _BYTE v5[24];
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3321888768;
  v4[2] = ___ZNK2re3mtl13CommandBuffer19addScheduledHandlerENS_8FunctionIFvRKS1_EEE_block_invoke;
  v4[3] = &__block_descriptor_72_a8_32c48_ZTSN2re8FunctionIFvRKNS_3mtl13CommandBufferEEEE_e28_v16__0___MTLCommandBuffer__8l;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v5, a2);
  objc_msgSend(v2, "addScheduledHandler:", v4);
  result = (uint64_t)v7;
  if (v7)
  {
    result = (**(uint64_t (***)(_BYTE *))v7)(v7);
    if (v7 != v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  return result;
}

void ___ZNK2re3mtl13CommandBuffer19addScheduledHandlerENS_8FunctionIFvRKS1_EEE_block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  (*(void (**)(_QWORD, id *))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), &v3);

}

void re::mtl::CommandBuffer::makeRenderCommandEncoder(id *a1@<X0>, uint64_t a2@<X1>, re **a3@<X8>)
{
  id v4;

  objc_msgSend(*a1, "renderCommandEncoderWithDescriptor:", a2);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  re::mtl::RenderCommandEncoder::RenderCommandEncoder(a3, v4);

}

void re::mtl::CommandBuffer::makeParallelRenderCommandEncoder(id *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v4;

  objc_msgSend(*a1, "parallelRenderCommandEncoderWithDescriptor:", a2);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  *a3 = v4;

}

void re::mtl::CommandBuffer::makeBlitCommandEncoder(id *this@<X0>, _QWORD *a2@<X8>)
{
  id v3;

  objc_msgSend(*this, "blitCommandEncoder");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  *a2 = v3;

}

void re::mtl::CommandBuffer::makeComputeCommandEncoder(id *this@<X0>, _QWORD *a2@<X8>)
{
  id v3;

  objc_msgSend(*this, "computeCommandEncoder");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  *a2 = v3;

}

void re::mtl::CommandBuffer::makeComputeCommandEncoder(id *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v4;

  objc_msgSend(*a1, "computeCommandEncoderWithDescriptor:", a2);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  *a3 = v4;

}

void re::mtl::CommandBuffer::commandQueue(id *this@<X0>, _QWORD *a2@<X8>)
{
  id v3;

  objc_msgSend(*this, "commandQueue");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  *a2 = v3;

}

void re::mtl::CommandBuffer::error(id *this@<X0>, _QWORD *a2@<X8>)
{
  id v3;

  objc_msgSend(*this, "error");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  *a2 = v3;

}

re **re::mtl::RenderCommandEncoder::RenderCommandEncoder(re **a1, void *a2)
{
  re *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2;
  *a1 = v3;
  v4 = re::globalAllocators(v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 264, 8);
  v6 = v5;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_QWORD *)(v5 + 256) = 0;
  if (v3)
    re::mtl::RenderEncoderImpCache::build((re::mtl::RenderEncoderImpCache *)v5, v3);
  a1[1] = (re *)v6;

  return a1;
}

re::mtl::RenderCommandEncoder *re::mtl::RenderCommandEncoder::RenderCommandEncoder(re::mtl::RenderCommandEncoder *this, id *a2)
{
  re *v4;
  uint64_t *v5;
  _OWORD *v6;
  id v7;

  v4 = (re *)*a2;
  *(_QWORD *)this = v4;
  v5 = re::globalAllocators(v4);
  v6 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 264, 8);
  v7 = a2[1];
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  v6[8] = 0u;
  v6[9] = 0u;
  v6[10] = 0u;
  v6[11] = 0u;
  v6[12] = 0u;
  v6[13] = 0u;
  v6[14] = 0u;
  v6[15] = 0u;
  *((_QWORD *)v6 + 32) = 0;
  memcpy(v6, v7, 0x108uLL);
  *((_QWORD *)this + 1) = v6;
  return this;
}

void re::mtl::RenderCommandEncoder::~RenderCommandEncoder(re::mtl::RenderCommandEncoder *this)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = re::globalAllocators(this);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3[2] + 40))(v3[2], v2);
  }

}

int *re::mtl::RenderCommandEncoder::setLabel(re::mtl::RenderCommandEncoder *this, id *a2)
{
  int *result;

  result = re::AppleBuild::get(this);
  if (*result == 1)
    return (int *)(*(uint64_t (**)(_QWORD, char *, id))(*((_QWORD *)this + 1) + 248))(**((_QWORD **)this + 1), sel_setLabel_, objc_retainAutorelease(*a2));
  return result;
}

uint64_t re::mtl::RenderCommandEncoder::setViewports(uint64_t a1)
{
  id *v1;
  float32x2_t *v2;
  unint64_t v3;
  uint64_t v4;
  float64x2_t v5;
  float64x2_t *v6;
  float32x2_t *v7;
  unsigned int v8;
  float64x2_t v9;
  float32x2_t v10;
  unint64_t v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  v5.f64[0] = MEMORY[0x24BDAC7A8](a1);
  if (v3)
  {
    v6 = (float64x2_t *)&v13[-2 * v4 + 4];
    v7 = v2 + 2;
    v8 = 1;
    do
    {
      v9 = vcvtq_f64_f32(v7[-1]);
      v6[-2] = vcvtq_f64_f32(v7[-2]);
      v6[-1] = v9;
      v10 = *v7;
      v7 += 3;
      v11 = v8;
      v5 = vcvtq_f64_f32(v10);
      *v6 = v5;
      v6 += 3;
      ++v8;
    }
    while (v11 < v3);
  }
  return objc_msgSend(*v1, "setViewports:count:", v5.f64[0]);
}

int *re::mtl::ParallelRenderCommandEncoder::setLabel(re::mtl::ParallelRenderCommandEncoder *this, const re::ns::String *a2)
{
  int *result;

  result = re::AppleBuild::get(this);
  if (*result == 1)
    return (int *)objc_msgSend(*(id *)this, "setLabel:", *(_QWORD *)a2);
  return result;
}

void re::mtl::ParallelRenderCommandEncoder::makeRenderCommandEncoder(id *this@<X0>, re **a2@<X8>)
{
  id v3;

  objc_msgSend(*this, "renderCommandEncoder");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  re::mtl::RenderCommandEncoder::RenderCommandEncoder(a2, v3);

}

void re::mtl::BlitCommandEncoder::copyFromBufferToTexture(void **a1, void **a2, uint64_t *a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, __int128 *a8)
{
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v12 = *a1;
  v13 = *a2;
  v14 = *a3;
  v15 = a3[1];
  v16 = a3[2];
  v17 = *((_QWORD *)a4 + 2);
  v22 = *a4;
  v23 = v17;
  v18 = v13;
  v19 = *((_QWORD *)a8 + 2);
  v20 = *a8;
  v21 = v19;
  objc_msgSend(v12, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v18, v14, v15, v16, &v22, a5, a6, a7, &v20);

}

uint64_t re::mtl::BlitCommandEncoder::copyFromTextureToBuffer(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, __int128 *a6, _QWORD *a7, _QWORD *a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v8 = *a1;
  v9 = *((_QWORD *)a5 + 2);
  v14 = *a5;
  v15 = v9;
  v10 = *((_QWORD *)a6 + 2);
  v12 = *a6;
  v13 = v10;
  return objc_msgSend(v8, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:", a2, a3, a4, &v14, &v12, *a7, *a8, a8[1], a8[2]);
}

void re::mtl::ComputeCommandEncoder::pushDebugGroup(void **this, re::ns *a2)
{
  void *v2;
  id v3;

  v2 = *this;
  re::ns::convertToNSString(a2, (const char *)a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "pushDebugGroup:", v3);

}

void re::mtl::Drawable::texture(id *this@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;

  objc_msgSend(*this, "texture");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  *a2 = v4;
  v3 = v4;

}

uint64_t re::mtl::Drawable::addPresentedHandler(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t result;
  _QWORD v4[4];
  _BYTE v5[24];
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3321888768;
  v4[2] = ___ZNK2re3mtl8Drawable19addPresentedHandlerENS_8FunctionIFvRKS1_EEE_block_invoke;
  v4[3] = &__block_descriptor_72_a8_32c42_ZTSN2re8FunctionIFvRKNS_3mtl8DrawableEEEE_e23_v16__0___MTLDrawable__8l;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v5, a2);
  objc_msgSend(v2, "addPresentedHandler:", v4);
  result = (uint64_t)v7;
  if (v7)
  {
    result = (**(uint64_t (***)(_BYTE *))v7)(v7);
    if (v7 != v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  return result;
}

void ___ZNK2re3mtl8Drawable19addPresentedHandlerENS_8FunctionIFvRKS1_EEE_block_invoke(uint64_t a1)
{
  id v1;

  v1 = 0;
  (*(void (**)(_QWORD, id *))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), &v1);

}

uint64_t __copy_helper_block_a8_32c42_ZTSN2re8FunctionIFvRKNS_3mtl8DrawableEEEE(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(a1 + 32, a2 + 32);
}

uint64_t (***__destroy_helper_block_a8_32c42_ZTSN2re8FunctionIFvRKNS_3mtl8DrawableEEEE(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 32);
}

void re::mtl::Layer::nextDrawable(id *this@<X0>, _QWORD *a2@<X8>)
{
  id v3;

  objc_msgSend(*this, "nextDrawable");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  *a2 = v3;

}

void re::mtl::Library::makeFunction(void **this@<X0>, re::ns *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v5;
  void *v6;
  void *v7;
  id v8;
  re *v9;
  NSObject *v10;
  int v11;
  re::ns *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v5 = *this;
  re::ns::convertToNSString(a2, (const char *)a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v5, "newFunctionWithName:", v6);
  *a3 = v7;
  v8 = v7;

  if (!v7)
  {
    v10 = *re::graphicsLogObjects(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = 136315138;
      v12 = a2;
      _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "makeFunction failed for function name: %s.", (uint8_t *)&v11, 0xCu);
    }
  }
}

void re::mtl::Library::makeFunctionWithDescriptor(id *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  id v6;
  id v7;
  id v8;
  id v9;
  unsigned __int8 v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  uint64_t v19;
  int *v20;
  const std::string::value_type *v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  std::string::size_type size;
  const std::string::value_type *v26;
  re *v27;
  NSObject *v28;
  id v29;
  NSObject *v30;
  id v31;
  std::string *v32;
  id v33;
  const char *v34;
  uint8_t v35;
  id v36;
  _QWORD *v37;
  std::string v38;
  id v39;
  std::string v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t buf[4];
  id v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v6 = objc_msgSend(*a1, sel_newFunctionWithDescriptor_error_, a2, &v39);
  if (v6)
  {
    if (objc_msgSend(a2, sel_constantValues))
    {
      v7 = objc_msgSend(a2, sel_name);
      v8 = objc_msgSend(*a1, sel_newFunctionWithName_, v7);
      v9 = objc_msgSend(a2, sel_constantValues);
      v10 = atomic_load((unsigned __int8 *)&qword_2541184F8);
      if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_2541184F8))
      {
        re::Defaults::BOOLValue((re::Defaults *)"enableFunctionConstantLabels", v34, (char *)buf);
        if (buf[0])
          v35 = buf[1];
        else
          v35 = 0;
        _MergedGlobals_368 = v35;
        __cxa_guard_release(&qword_2541184F8);
      }
      if (_MergedGlobals_368)
      {
        v36 = v6;
        v37 = a3;
        objc_msgSend(v8, sel_functionConstantsDictionary);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        std::string::basic_string[abi:nn180100]<0>(&v38, (char *)objc_msgSend(objc_msgSend(v8, sel_name), sel_UTF8String));
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v12 = v11;
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v41, buf, 16);
        if (!v13)
          goto LABEL_33;
        v14 = v13;
        v15 = *(_QWORD *)v42;
        while (1)
        {
          for (i = 0; i != v14; ++i)
          {
            if (*(_QWORD *)v42 != v15)
              objc_enumerationMutation(v12);
            v17 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
            objc_msgSend(v12, "objectForKeyedSubscript:", v17);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v9 || (v19 = objc_msgSend(v9, "constantValueWithFunctionConstant:", v18)) == 0)
            {
              if (objc_msgSend(v18, "type") != 53)
                goto LABEL_31;
              v22 = 0;
              while (1)
              {
                v23 = defaultEnableConstants[v22];
                if (objc_msgSend(v18, "index") == v23)
                  break;
                v22 += 4;
                if (v22 == 44)
                  goto LABEL_31;
              }
              v26 = *(const std::string::value_type **)&defaultEnableConstants[v22 + 2];
              std::string::append(&v38, "-");
              v21 = v26;
              goto LABEL_30;
            }
            v20 = (int *)v19;
            if (objc_msgSend(v18, "type") == 53)
            {
              if (objc_msgSend(v18, "type") == 53 && *(_BYTE *)v20)
              {
                std::string::append(&v38, "-");
                v21 = (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v17), "UTF8String");
LABEL_30:
                std::string::append(&v38, v21);
              }
            }
            else
            {
              std::string::append(&v38, "-");
              std::string::append(&v38, (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v17), "UTF8String"));
              std::string::append(&v38, ":");
              std::to_string(&v40, *v20);
              if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v24 = &v40;
              else
                v24 = (std::string *)v40.__r_.__value_.__r.__words[0];
              if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
              else
                size = v40.__r_.__value_.__l.__size_;
              std::string::append(&v38, (const std::string::value_type *)v24, size);
              if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v40.__r_.__value_.__l.__data_);
            }
LABEL_31:

          }
          v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v41, buf, 16);
          if (!v14)
          {
LABEL_33:

            v6 = v36;
            a3 = v37;
            goto LABEL_38;
          }
        }
      }
      std::string::basic_string[abi:nn180100]<0>(&v38, "");
LABEL_38:
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v38;
      else
        v32 = (std::string *)v38.__r_.__value_.__r.__words[0];
      v33 = objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v32, 4);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      objc_msgSend(v6, sel_setLabel_, v33);
      if (v33)

      if (v8)
      if (v7)

    }
  }
  else
  {
    v27 = (re *)objc_msgSend(v39, sel_code);
    if (v27 != (re *)5)
    {
      v28 = *re::graphicsLogObjects(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v29 = v39;
        v30 = v28;
        v31 = objc_msgSend(objc_msgSend(v29, sel_localizedDescription), sel_UTF8String);
        *(_DWORD *)buf = 136315138;
        v46 = v31;
        _os_log_error_impl(&dword_224FE9000, v30, OS_LOG_TYPE_ERROR, "makeFunctionWithDescriptor error [%s].", buf, 0xCu);

      }
    }
  }
  *a3 = v6;
}

void re::mtl::reflectionArguments(re::mtl *this@<X0>, uint64_t a2@<X8>)
{
  id v4;
  id v5;
  char *v6;
  char *v7;
  char *i;
  id v9;

  v4 = objc_msgSend(-[re::mtl reflectionWithOptions:](this, sel_reflectionWithOptions_, 3), sel_arguments);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  v5 = objc_msgSend(v4, sel_count);
  if (v5)
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)a2, (unint64_t)v5);
  v6 = (char *)objc_msgSend(v4, sel_count);
  if (v6)
  {
    v7 = v6;
    for (i = 0; i != v7; ++i)
    {
      v9 = objc_msgSend(v4, sel_objectAtIndex_, i);
      re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add((_QWORD *)a2, &v9);
      if (v9)

    }
  }
}

uint64_t re::mtl::commandQueueSupportsDisableAsyncCompletionDispatch(re::mtl *this)
{
  if (qword_254118500 != -1)
    dispatch_once(&qword_254118500, &__block_literal_global_40);
  return byte_2541184F1;
}

void ___ZN2re3mtl50commandQueueSupportsDisableAsyncCompletionDispatchEv_block_invoke()
{
  id v0;

  v0 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD510], sel_alloc), sel_init);
  byte_2541184F1 = objc_msgSend(v0, sel_respondsToSelector_, sel_setDisableAsyncCompletionDispatch_);
  if (v0)

}

__n128 re::mtl::getTextureLevelInfo@<Q0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  __n128 result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 v11;

  v3 = *a1;
  MTLGetTextureLevelInfoForDeviceWithOptions();
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 40) = v8;
  *(_OWORD *)(a2 + 56) = v9;
  *(_OWORD *)(a2 + 72) = v10;

  result = v11;
  *(__n128 *)(a2 + 88) = v11;
  return result;
}

BOOL re::MeshVisitor::visitMeshScene(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 376) != 0.0 && *(_BYTE *)(a2 + 646) == 0;
}

BOOL re::MeshVisitor::visitVFXScene(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 795))
    return 0;
  return *(float *)(a2 + 376) != 0.0 && *(_BYTE *)(a2 + 646) == 0;
}

uint64_t re::MeshVisitor::visitMeshInstance(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  _QWORD *v4;
  _DWORD *v6;
  int v7;
  uint64_t result;
  _QWORD *v9;
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t *v12;
  __int128 *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int32 *v23;
  unsigned int v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  _DWORD *i;
  __int32 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  _QWORD *v40;
  __int16 v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 60))
    v3 = *(_BYTE *)(a2 + 112) == 0;
  else
    v3 = 0;
  if (v3)
    return 0;
  v4 = (_QWORD *)a2;
  v6 = *(_DWORD **)(a2 + 48);
  if (v6)
  {
    v7 = (*v6 ^ 0x180197E) & ~*(_DWORD *)(*(_QWORD *)(a2 + 48) + 4) | *v6 & *(_DWORD *)(*(_QWORD *)(a2 + 48) + 4);
    if ((v7 & 4) == 0)
      return 0;
    if ((v7 & 8) == 0)
      goto LABEL_12;
  }
  v9 = *(_QWORD **)(a1 + 24);
  if (!*v9
    || (result = re::boundingBoxIntersectFrustums(*(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 16), (uint64_t)v9),
        (_DWORD)result))
  {
LABEL_12:
    v10 = (float32x4_t *)v4[1];
    if (!v10)
    {
      result = 1;
      *(_DWORD *)(a1 + 56) = 1;
      *(_DWORD *)(a1 + 48) = -65280;
      *(_DWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 36) = v4[13];
      return result;
    }
    v11 = 0;
    v12 = *(float32x4_t **)(a1 + 16);
    v13 = (__int128 *)v4[2];
    v14 = v12[1];
    v15 = v12[2];
    v16 = v12[3];
    v17 = v12[4];
    v18 = v13[1];
    v19 = v13[2];
    v20 = v13[3];
    v30 = *v13;
    v31 = v18;
    v32 = v19;
    v33 = v20;
    do
    {
      *(__int128 *)((char *)&v43 + v11) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(*(__int128 *)((char *)&v30 + v11))), v15, *(float32x2_t *)((char *)&v30 + v11), 1), v16, *(float32x4_t *)((char *)&v30 + v11), 2), v17, *(float32x4_t *)((char *)&v30 + v11), 3);
      v11 += 16;
    }
    while (v11 != 64);
    v30 = v43;
    v31 = v44;
    v32 = v45;
    v33 = v46;
    if (v12->i8[0])
    {
      if (v12->i8[1])
        v21 = &v12->u8[2];
      else
        v21 = (unsigned __int8 *)(*v4 + 24);
      v22 = *v21;
      if (v12->i8[4])
        v23 = &v12->u32[2];
      else
        v23 = (unsigned __int32 *)(*v4 + 28);
      *(_QWORD *)&v43 = ((unint64_t)*(unsigned __int16 *)(*v4 + 25) << 8) | ((unint64_t)*(unsigned __int8 *)(*v4 + 27) << 24) | v22 | ((unint64_t)*v23 << 32);
      if ((_DWORD)v22 == 1)
      {
        v24 = re::selectMeshLodByViewDepth(v10, (uint64_t)&v30, (uint64_t)&v43, a1 + 48, 2);
      }
      else
      {
        if ((_DWORD)v22)
        {
          re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Invalid Lod select strategy (%d)", "!\"Unreachable code\"", "visitMeshInstance", 74, v22);
          result = _os_crash();
          __break(1u);
          return result;
        }
        v24 = re::selectMeshLodByScreenArea((uint64_t)v10, (uint64_t)&v30, v12[5].f32, (uint64_t)&v43, a1 + 48, 2);
      }
      *(_DWORD *)(a1 + 56) = v24;
      if (!v24)
        return 1;
    }
    else
    {
      v24 = 1;
      *(_DWORD *)(a1 + 56) = 1;
      *(_DWORD *)(a1 + 48) = -65280;
    }
    v25 = 0;
    v26 = (_DWORD *)(a1 + 32);
    v27 = v10[5].u64[0];
    for (i = v26; ; i += 2)
    {
      if (v25 == 2)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, 2, 2, v30, v31, v32, v33);
        _os_crash();
        __break(1u);
LABEL_43:
        v34 = 0;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v43 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v35 = 136315906;
        v36 = "operator[]";
        v37 = 1024;
        v38 = 476;
        v39 = 2048;
        v40 = v4;
        v41 = 2048;
        v42 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_44:
        v34 = 0;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v43 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v35 = 136315906;
        v36 = "operator[]";
        v37 = 1024;
        v38 = 476;
        v39 = 2048;
        v40 = (_QWORD *)v2;
        v41 = 2048;
        v42 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v4 = (_QWORD *)LOBYTE(v26[v25 + 4]);
      if (LOBYTE(v26[v25 + 4]))
      {
        if (v27)
        {
          v2 = ((_DWORD)v4 - 1);
          if (v27 <= v2)
            goto LABEL_44;
          *i = *(_DWORD *)(v10[5].i64[1] + 12 * v2 + 8);
LABEL_36:
          if (v27 <= (unint64_t)v4)
            goto LABEL_43;
          v29 = *(_DWORD *)(v10[5].i64[1] + 12 * v4 + 8);
          goto LABEL_40;
        }
        *i = 0;
      }
      else
      {
        *i = 0;
        if (v27)
          goto LABEL_36;
      }
      v29 = v10[3].i32[2];
LABEL_40:
      i[1] = v29;
      if (v24 == ++v25)
        return 1;
    }
  }
  return result;
}

uint64_t re::MeshVisitor::findLevelIndex(re::MeshVisitor *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v5;

  v2 = *((unsigned int *)this + 14);
  if (!(_DWORD)v2)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (_DWORD *)((char *)this + 36);
  while (result != 2)
  {
    if (*(v5 - 1) <= a2 && *v5 > a2)
      return result;
    ++result;
    v5 += 2;
    if (v2 == result)
      return 0xFFFFFFFFLL;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 242, 2, 2);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::PatchHandler::setHandler(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  id v5;
  void **v6;
  void *v7;
  void *v8;
  uint64_t v9;
  re *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[3];
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 32);
  v5 = a2;
  v6 = (void **)v4(v3, 8, 8);
  *v6 = 0;
  v7 = _Block_copy(v5);

  v8 = *v6;
  *v6 = v7;

  a1[1] = v6;
  v9 = *a1;
  v11 = re::globalAllocators(v10)[2];
  v13[0] = &off_24ED733B8;
  v14 = v11;
  v15 = v13;
  (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)v9 + 16))(v9, v6, v13);
  result = (uint64_t)v15;
  if (v15)
  {
    result = (*(uint64_t (**)(_QWORD *))*v15)(v15);
    if (v15 != v13)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  }
  return result;
}

void _ZN2re8internal8CallableIZNS_12PatchHandler10setHandlerEU13block_pointerFvPK13simd_float4x4iDv3_fEE3__0FvPvEJEED0Ev()
{
  JUMPOUT(0x2276933B8);
}

void _ZNK2re8internal8CallableIZNS_12PatchHandler10setHandlerEU13block_pointerFvPK13simd_float4x4iDv3_fEE3__0FvPvEJEEclEOSA_(uint64_t a1, id **a2)
{

}

_QWORD *_ZNK2re8internal8CallableIZNS_12PatchHandler10setHandlerEU13block_pointerFvPK13simd_float4x4iDv3_fEE3__0FvPvEJEE9cloneIntoESA_(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED733B8;
  return result;
}

_QWORD *_ZN2re8internal8CallableIZNS_12PatchHandler10setHandlerEU13block_pointerFvPK13simd_float4x4iDv3_fEE3__0FvPvEJEE8moveIntoESA_(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED733B8;
  return result;
}

uint64_t _ZNK2re8internal8CallableIZNS_12PatchHandler10setHandlerEU13block_pointerFvPK13simd_float4x4iDv3_fEE3__0FvPvEJEE4sizeEv()
{
  return 16;
}

uint64_t *re::allocInfo_StencilInfoData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_369);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_369))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541186C0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541186D0 = 0;
    qword_2541186E0 = 0;
    qword_2541186E8 = 0xFFFFFFFFLL;
    qword_2541186C0 = (uint64_t)&off_24ED7DAA8;
    qword_2541186F0 = (uint64_t)"StencilInfoData";
    dword_2541186F8 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254118730 = 0;
    __cxa_guard_release(&_MergedGlobals_369);
  }
  return &qword_2541186C0;
}

void re::initInfo_StencilInfoData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xAD42BCD4890DDE68;
  v10[1] = "StencilInfoData";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254118518);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254118518);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphData";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254118510 = v8;
      __cxa_guard_release(&qword_254118518);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254118510;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::StencilInfoData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::StencilInfoData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::StencilInfoData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::StencilInfoData>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

double re::internal::defaultConstruct<re::StencilInfoData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double result;

  *a3 = &off_24ED73410;
  *(_QWORD *)&result = 134217472;
  a3[1] = 134217472;
  a3[2] = 134217472;
  return result;
}

double re::internal::defaultConstructV2<re::StencilInfoData>(_QWORD *a1)
{
  double result;

  *a1 = &off_24ED73410;
  *(_QWORD *)&result = 134217472;
  a1[1] = 134217472;
  a1[2] = 134217472;
  return result;
}

uint64_t re::introspect_StencilInfoData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StencilInfoData", (uint64_t (*)(re::internal *))re::allocInfo_StencilInfoData, (re::IntrospectionBase *(*)(void))re::initInfo_StencilInfoData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::StencilInfoData>, this);
}

uint64_t *re::allocInfo_ViewportData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254118520);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254118520))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254118738, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254118748 = 0;
    qword_254118758 = 0;
    qword_254118760 = 0xFFFFFFFFLL;
    qword_254118738 = (uint64_t)&off_24ED7DAA8;
    qword_254118768 = (uint64_t)"ViewportData";
    dword_254118770 = 0;
    xmmword_254118778 = 0u;
    unk_254118788 = 0u;
    xmmword_254118798 = 0u;
    qword_2541187A8 = 0;
    __cxa_guard_release(&qword_254118520);
  }
  return &qword_254118738;
}

void re::initInfo_ViewportData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;

  v13[0] = 0x3F1D7E5A3F4DDB20;
  v13[1] = "ViewportData";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  v4 = atomic_load((unsigned __int8 *)&qword_254118528);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254118528);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphData";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541185A0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::mtl::introspect_Viewport((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "viewport";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_2541185A8 = v11;
      __cxa_guard_release(&qword_254118528);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541185A0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ViewportData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ViewportData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ViewportData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ViewportData>;
  re::IntrospectionRegistry::add(this, v3);
  v12 = v14;
}

void re::internal::defaultConstruct<re::ViewportData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED73450;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0x3F80000000000000;
}

_QWORD *re::internal::defaultConstructV2<re::ViewportData>(_QWORD *result)
{
  *result = &off_24ED73450;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0x3F80000000000000;
  return result;
}

uint64_t re::introspect_ViewportData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ViewportData", (uint64_t (*)(re::internal *))re::allocInfo_ViewportData, (re::IntrospectionBase *(*)(void))re::initInfo_ViewportData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ViewportData>, this);
}

uint64_t *re::allocInfo_VRRData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254118530);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254118530))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541187B0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541187C0 = 0;
    qword_2541187D0 = 0;
    qword_2541187D8 = 0xFFFFFFFFLL;
    qword_2541187B0 = (uint64_t)&off_24ED7DAA8;
    qword_2541187E0 = (uint64_t)"VRRData";
    dword_2541187E8 = 0;
    xmmword_2541187F0 = 0u;
    unk_254118800 = 0u;
    xmmword_254118810 = 0u;
    qword_254118820 = 0;
    __cxa_guard_release(&qword_254118530);
  }
  return &qword_2541187B0;
}

void re::initInfo_VRRData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x24ABD26BC0;
  v14[1] = "VRRData";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254118538);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254118538);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphData";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541185B0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "vrrEnabled";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0xC00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541185B8 = v12;
      __cxa_guard_release(&qword_254118538);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541185B0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::VRRData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::VRRData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::VRRData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::VRRData>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::VRRData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = &off_24ED73490;
  *(_DWORD *)(a3 + 8) = -1;
  *(_WORD *)(a3 + 12) = 0;
}

uint64_t re::internal::defaultConstructV2<re::VRRData>(uint64_t result)
{
  *(_QWORD *)result = &off_24ED73490;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 0;
  return result;
}

uint64_t re::introspect_VRRData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VRRData", (uint64_t (*)(re::internal *))re::allocInfo_VRRData, (re::IntrospectionBase *(*)(void))re::initInfo_VRRData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::VRRData>, this);
}

uint64_t *re::allocInfo_ThreadGroupMemoryData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254118540);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254118540))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254118828, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254118838 = 0;
    qword_254118848 = 0;
    qword_254118850 = 0xFFFFFFFFLL;
    qword_254118828 = (uint64_t)&off_24ED7DAA8;
    qword_254118858 = (uint64_t)"ThreadGroupMemoryData";
    dword_254118860 = 0;
    xmmword_254118868 = 0u;
    unk_254118878 = 0u;
    xmmword_254118888 = 0u;
    qword_254118898 = 0;
    __cxa_guard_release(&qword_254118540);
  }
  return &qword_254118828;
}

void re::initInfo_ThreadGroupMemoryData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0xED88CD191AFD3940;
  v18[1] = "ThreadGroupMemoryData";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_254118548);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254118548);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphData";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541185D0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_size_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "totalBytes";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541185D8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "threadgroupMemoryEnabled";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_2541185E0 = v16;
      __cxa_guard_release(&qword_254118548);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2541185D0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ThreadGroupMemoryData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ThreadGroupMemoryData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ThreadGroupMemoryData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ThreadGroupMemoryData>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

void re::internal::defaultConstruct<re::ThreadGroupMemoryData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = &off_24ED734D0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
}

uint64_t re::internal::defaultConstructV2<re::ThreadGroupMemoryData>(uint64_t result)
{
  *(_QWORD *)result = &off_24ED734D0;
  *(_BYTE *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t re::introspect_ThreadGroupMemoryData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ThreadGroupMemoryData", (uint64_t (*)(re::internal *))re::allocInfo_ThreadGroupMemoryData, (re::IntrospectionBase *(*)(void))re::initInfo_ThreadGroupMemoryData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ThreadGroupMemoryData>, this);
}

uint64_t *re::allocInfo_TriangleFillModeData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254118550);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254118550))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541188A0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541188B0 = 0;
    qword_2541188C0 = 0;
    qword_2541188C8 = 0xFFFFFFFFLL;
    qword_2541188A0 = (uint64_t)&off_24ED7DAA8;
    qword_2541188D0 = (uint64_t)"TriangleFillModeData";
    dword_2541188D8 = 0;
    xmmword_2541188E0 = 0u;
    unk_2541188F0 = 0u;
    xmmword_254118900 = 0u;
    qword_254118910 = 0;
    __cxa_guard_release(&qword_254118550);
  }
  return &qword_2541188A0;
}

void re::initInfo_TriangleFillModeData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x5E010951CB0401B0;
  v14[1] = "TriangleFillModeData";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254118558);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254118558);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphData";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541185C0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::mtl::introspect_TriangleFillMode((re::mtl *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "triangleFillMode";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541185C8 = v12;
      __cxa_guard_release(&qword_254118558);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541185C0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::TriangleFillModeData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::TriangleFillModeData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::TriangleFillModeData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::TriangleFillModeData>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::TriangleFillModeData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED73530;
}

_QWORD *re::internal::defaultConstructV2<re::TriangleFillModeData>(_QWORD *result)
{
  *result = &off_24ED73530;
  return result;
}

uint64_t re::introspect_TriangleFillModeData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TriangleFillModeData", (uint64_t (*)(re::internal *))re::allocInfo_TriangleFillModeData, (re::IntrospectionBase *(*)(void))re::initInfo_TriangleFillModeData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::TriangleFillModeData>, this);
}

void *re::introspect_ViewMode(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  uint64_t v17;
  re::IntrospectionBasic *v18;
  uint64_t v19[2];
  __int128 v20;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Mono";
      re::introspect_ViewMode(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "SinglePass";
      qword_255828D58 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = 2;
      *(_QWORD *)(v17 + 16) = "DualPass";
      qword_255828D60 = v17;
    }
  }
  {
    v18 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_ViewMode(BOOL)::info, "ViewMode", 1, 1, 1, 1);
    *(_QWORD *)v18 = &off_24ED7D9E8;
    *((_QWORD *)v18 + 8) = &re::introspect_ViewMode(BOOL)::enumTable;
    *((_DWORD *)v18 + 4) = 9;
  }
  if (v2)
  {
    if ((re::introspect_ViewMode(BOOL)::isInitialized & 1) != 0)
      return &re::introspect_ViewMode(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    v5 = re::introspect_ViewMode(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    if ((v5 & 1) != 0)
      return &re::introspect_ViewMode(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::introspect_ViewMode(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::introspect_ViewMode(BOOL)::info;
    }
  }
  re::introspect_ViewMode(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_ViewMode(BOOL)::info, a2);
  v19[0] = 0x47A963CE410;
  v19[1] = (uint64_t)"ViewMode";
  xmmword_255828D90 = v20;
  re::StringID::destroyString((re::StringID *)v19);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::introspect_ViewMode(BOOL)::info;
}

uint64_t *re::allocInfo_FilterMapAtlasData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254118560);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254118560))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254118918, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254118928 = 0;
    qword_254118938 = 0;
    qword_254118940 = 0xFFFFFFFFLL;
    qword_254118918 = (uint64_t)&off_24ED7DAA8;
    qword_254118948 = (uint64_t)"FilterMapAtlasData";
    dword_254118950 = 0;
    xmmword_254118958 = 0u;
    xmmword_254118968 = 0u;
    xmmword_254118978 = 0u;
    qword_254118988 = 0;
    __cxa_guard_release(&qword_254118560);
  }
  return &qword_254118918;
}

void re::initInfo_FilterMapAtlasData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[2];
  __int128 v27;

  v26[0] = 0x4F2768EAB2372922;
  v26[1] = "FilterMapAtlasData";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  v4 = atomic_load((unsigned __int8 *)&qword_254118568);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254118568);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphData";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254118628 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_uint32_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "atlasWidth";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254118630 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_uint32_t((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "atlasHeight";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0xC00000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254118638 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::mtl::introspect_PixelFormat((re::mtl *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "format";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x1000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254118640 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_uint64_t((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "protectionOptions";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x1800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254118648 = v24;
      __cxa_guard_release(&qword_254118568);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_254118628;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::FilterMapAtlasData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::FilterMapAtlasData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::FilterMapAtlasData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::FilterMapAtlasData>;
  re::IntrospectionRegistry::add(this, v3);
  v25 = v27;
}

void re::internal::defaultConstruct<re::FilterMapAtlasData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = &off_24ED73570;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 115;
  *(_QWORD *)(a3 + 24) = 0;
}

uint64_t re::internal::defaultConstructV2<re::FilterMapAtlasData>(uint64_t result)
{
  *(_QWORD *)result = &off_24ED73570;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 115;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t re::introspect_FilterMapAtlasData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FilterMapAtlasData", (uint64_t (*)(re::internal *))re::allocInfo_FilterMapAtlasData, (re::IntrospectionBase *(*)(void))re::initInfo_FilterMapAtlasData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FilterMapAtlasData>, this);
}

uint64_t *re::allocInfo_ShadowMapAtlasData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254118570);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254118570))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254118990, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541189A0 = 0;
    qword_2541189B0 = 0;
    qword_2541189B8 = 0xFFFFFFFFLL;
    qword_254118990 = (uint64_t)&off_24ED7DAA8;
    qword_2541189C0 = (uint64_t)"ShadowMapAtlasData";
    dword_2541189C8 = 0;
    xmmword_2541189D0 = 0u;
    xmmword_2541189E0 = 0u;
    xmmword_2541189F0 = 0u;
    qword_254118A00 = 0;
    __cxa_guard_release(&qword_254118570);
  }
  return &qword_254118990;
}

void re::initInfo_ShadowMapAtlasData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  uint64_t *v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[2];
  __int128 v23;

  v22[0] = 0xD3AD1B4260300C72;
  v22[1] = "ShadowMapAtlasData";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  v4 = atomic_load((unsigned __int8 *)&qword_254118578);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254118578);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphData";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541185E8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_uint32_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "atlasWidth";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541185F0 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_uint32_t((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "atlasHeight";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0xC00000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_2541185F8 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::mtl::introspect_PixelFormat((re::mtl *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "format";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x1000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254118600 = v20;
      __cxa_guard_release(&qword_254118578);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_2541185E8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ShadowMapAtlasData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ShadowMapAtlasData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ShadowMapAtlasData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ShadowMapAtlasData>;
  re::IntrospectionRegistry::add(this, v3);
  v21 = v23;
}

void re::internal::defaultConstruct<re::ShadowMapAtlasData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = &off_24ED735B0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 252;
}

uint64_t re::internal::defaultConstructV2<re::ShadowMapAtlasData>(uint64_t result)
{
  *(_QWORD *)result = &off_24ED735B0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 252;
  return result;
}

uint64_t re::introspect_ShadowMapAtlasData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ShadowMapAtlasData", (uint64_t (*)(re::internal *))re::allocInfo_ShadowMapAtlasData, (re::IntrospectionBase *(*)(void))re::initInfo_ShadowMapAtlasData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ShadowMapAtlasData>, this);
}

uint64_t *re::allocInfo_CameraData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254118580);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254118580))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254118A08, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254118A18 = 0;
    qword_254118A28 = 0;
    qword_254118A30 = 0xFFFFFFFFLL;
    qword_254118A08 = (uint64_t)&off_24ED7DAA8;
    qword_254118A38 = (uint64_t)"CameraData";
    dword_254118A40 = 0;
    xmmword_254118A48 = 0u;
    xmmword_254118A58 = 0u;
    xmmword_254118A68 = 0u;
    qword_254118A78 = 0;
    __cxa_guard_release(&qword_254118580);
  }
  return &qword_254118A08;
}

void re::initInfo_CameraData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  void *v46;
  uint64_t v47;
  uint64_t *v48;
  const re::IntrospectionBase *v49;
  void *v50;
  uint64_t v51;
  uint64_t *v52;
  const re::IntrospectionBase *v53;
  void *Action;
  uint64_t v55;
  uint64_t *v56;
  const re::IntrospectionBase *v57;
  void *v58;
  uint64_t v59;
  __int128 v60;
  _QWORD v61[2];
  __int128 v62;

  v61[0] = 0xD325DFDB7D11ELL;
  v61[1] = "CameraData";
  re::StringID::destroyString((re::StringID *)v61);
  *((_OWORD *)this + 2) = v62;
  v4 = atomic_load((unsigned __int8 *)&qword_254118588);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254118588);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphData";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254118650 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "clearColor";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x1A000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254118658 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_float((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "clearDepth";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1B000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254118660 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_BOOL((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "loadDepth";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x1C800000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254118668 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v22 = re::introspect_BOOL((re *)1, v21);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "saveDepth";
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x1C900000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_254118670 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      v26 = re::introspect_BOOL((re *)1, v25);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "loadStencil";
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x1CA00000006;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_254118678 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v30 = re::introspect_BOOL((re *)1, v29);
      v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = "saveStencil";
      *(_QWORD *)(v31 + 16) = v30;
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0x1CB00000007;
      *(_DWORD *)(v31 + 40) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_QWORD *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_254118680 = v31;
      v32 = re::introspectionAllocator((re *)v31);
      v34 = re::introspect_BOOL((re *)1, v33);
      v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = "drawDebug";
      *(_QWORD *)(v35 + 16) = v34;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 32) = 0x1CC00000008;
      *(_DWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = 0;
      *(_QWORD *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_254118688 = v35;
      v36 = re::introspectionAllocator((re *)v35);
      v38 = re::introspect_BOOL((re *)1, v37);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "enableUnwarp";
      *(_QWORD *)(v39 + 16) = v38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0x1CD0000000ALL;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_254118690 = v39;
      v40 = re::introspectionAllocator((re *)v39);
      v42 = re::introspect_uint32_t((re *)1, v41);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "msaaSamples";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0x1E40000000BLL;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_254118698 = v43;
      v44 = re::introspectionAllocator((re *)v43);
      v46 = re::mtl::introspect_MultisampleDepthResolveFilter((re::mtl *)1, v45);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = "depthResolveFilter";
      *(_QWORD *)(v47 + 16) = v46;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0x1EC0000000CLL;
      *(_DWORD *)(v47 + 40) = 0;
      *(_QWORD *)(v47 + 48) = 0;
      *(_QWORD *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_2541186A0 = v47;
      v48 = re::introspectionAllocator((re *)v47);
      v50 = re::mtl::introspect_MultisampleStencilResolveFilter((re::mtl *)1, v49);
      v51 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 72, 8);
      *(_DWORD *)v51 = 1;
      *(_QWORD *)(v51 + 8) = "stencilResolveFilter";
      *(_QWORD *)(v51 + 16) = v50;
      *(_QWORD *)(v51 + 24) = 0;
      *(_QWORD *)(v51 + 32) = 0x1F00000000DLL;
      *(_DWORD *)(v51 + 40) = 0;
      *(_QWORD *)(v51 + 48) = 0;
      *(_QWORD *)(v51 + 56) = 0;
      *(_DWORD *)(v51 + 64) = 0;
      qword_2541186A8 = v51;
      v52 = re::introspectionAllocator((re *)v51);
      Action = re::mtl::introspect_LoadAction((re::mtl *)1, v53);
      v55 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 72, 8);
      *(_DWORD *)v55 = 1;
      *(_QWORD *)(v55 + 8) = "colorLoadAction";
      *(_QWORD *)(v55 + 16) = Action;
      *(_QWORD *)(v55 + 24) = 0;
      *(_QWORD *)(v55 + 32) = 0x1F40000000ELL;
      *(_DWORD *)(v55 + 40) = 0;
      *(_QWORD *)(v55 + 48) = 0;
      *(_QWORD *)(v55 + 56) = 0;
      *(_DWORD *)(v55 + 64) = 0;
      qword_2541186B0 = v55;
      v56 = re::introspectionAllocator((re *)v55);
      v58 = re::introspect_uint32_t((re *)1, v57);
      v59 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v56 + 32))(v56, 72, 8);
      *(_DWORD *)v59 = 1;
      *(_QWORD *)(v59 + 8) = "clearStencil";
      *(_QWORD *)(v59 + 16) = v58;
      *(_QWORD *)(v59 + 24) = 0;
      *(_QWORD *)(v59 + 32) = 0x1FC0000000FLL;
      *(_DWORD *)(v59 + 40) = 0;
      *(_QWORD *)(v59 + 48) = 0;
      *(_QWORD *)(v59 + 56) = 0;
      *(_DWORD *)(v59 + 64) = 0;
      qword_2541186B8 = v59;
      __cxa_guard_release(&qword_254118588);
    }
  }
  *((_QWORD *)this + 2) = 0x21000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 14;
  *((_QWORD *)this + 8) = &qword_254118650;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::CameraData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::CameraData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::CameraData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::CameraData>;
  re::IntrospectionRegistry::add(this, v3);
  v60 = v62;
}

re::CameraData *re::internal::defaultConstruct<re::CameraData>(int a1, int a2, re::CameraData *this)
{
  return re::CameraData::CameraData(this);
}

double re::internal::defaultDestruct<re::CameraData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v4;
  double result;

  v4 = (_OWORD *)(a3 + 8);
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 272) = 0;
  ++*(_DWORD *)(a3 + 280);
  *(_QWORD *)(a3 + 128) = 0;
  ++*(_DWORD *)(a3 + 136);
  *(_QWORD *)(a3 + 48) = 0;
  ++*(_DWORD *)(a3 + 56);
  if (v3)
  {
    if ((*(_BYTE *)(a3 + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a3 + 24));
    result = 0.0;
    *v4 = 0u;
    v4[1] = 0u;
  }
  return result;
}

double re::internal::defaultDestructV2<re::CameraData>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v3 = a1 + 8;
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v3 + 264) = 0;
  ++*(_DWORD *)(v3 + 272);
  *(_QWORD *)(v3 + 120) = 0;
  ++*(_DWORD *)(v3 + 128);
  *(_QWORD *)(v3 + 40) = 0;
  ++*(_DWORD *)(v3 + 48);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 24));
    result = 0.0;
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
  }
  return result;
}

uint64_t re::introspect_CameraData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CameraData", (uint64_t (*)(re::internal *))re::allocInfo_CameraData, (re::IntrospectionBase *(*)(void))re::initInfo_CameraData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::CameraData>, this);
}

uint64_t *re::allocInfo_CameraMatrices(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254118590);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254118590))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254118A80, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254118A90 = 0;
    qword_254118AA0 = 0;
    qword_254118AA8 = 0xFFFFFFFFLL;
    qword_254118A80 = (uint64_t)&off_24ED7DAA8;
    qword_254118AB0 = (uint64_t)"CameraMatrices";
    dword_254118AB8 = 0;
    xmmword_254118AC0 = 0u;
    xmmword_254118AD0 = 0u;
    xmmword_254118AE0 = 0u;
    qword_254118AF0 = 0;
    __cxa_guard_release(&qword_254118590);
  }
  return &qword_254118A80;
}

void re::initInfo_CameraMatrices(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[2];
  __int128 v21;

  v20[0] = 0xF750B3A91D24CF7ELL;
  v20[1] = "CameraMatrices";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  v4 = atomic_load((unsigned __int8 *)&qword_254118598);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254118598);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphData";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254118608 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::IntrospectionInfo<re::DynamicArray<re::Matrix4x4<float>>>::get(1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "worldToView";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254118610 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v13 = re::IntrospectionInfo<re::DynamicArray<re::Matrix4x4<float>>>::get(1);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "viewToProj";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x3000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_254118618 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_uint8_t((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "viewportCount";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x8000000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_254118620 = v18;
      __cxa_guard_release(&qword_254118598);
    }
  }
  *((_QWORD *)this + 2) = 0x9000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254118608;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::CameraMatrices>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::CameraMatrices>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::CameraMatrices>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::CameraMatrices>;
  re::IntrospectionRegistry::add(this, v3);
  v19 = v21;
}

double re::internal::defaultConstruct<re::CameraMatrices>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = &off_24ED73630;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_BYTE *)(a3 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_DWORD *)(a3 + 72) = 0;
  *(_BYTE *)(a3 + 128) = 1;
  return result;
}

uint64_t re::internal::defaultDestruct<re::CameraMatrices>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(a3 + 48);
  v4 = *(_QWORD *)(a3 + 48);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 80))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 80) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 72);
  }
  result = *(_QWORD *)(a3 + 8);
  if (result)
  {
    if (*(_QWORD *)(a3 + 40))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    ++*(_DWORD *)(a3 + 32);
  }
  return result;
}

double re::internal::defaultConstructV2<re::CameraMatrices>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24ED73630;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::CameraMatrices>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 80))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 80) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 72);
  }
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    if (*(_QWORD *)(a1 + 40))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  return result;
}

uint64_t re::introspect_CameraMatrices(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CameraMatrices", (uint64_t (*)(re::internal *))re::allocInfo_CameraMatrices, (re::IntrospectionBase *(*)(void))re::initInfo_CameraMatrices, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::CameraMatrices>, this);
}

void re::StencilInfoData::~StencilInfoData(re::StencilInfoData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::ViewportData::~ViewportData(re::ViewportData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::VRRData::~VRRData(re::VRRData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::ThreadGroupMemoryData::~ThreadGroupMemoryData(re::ThreadGroupMemoryData *this)
{
  JUMPOUT(0x2276933B8);
}

unint64_t re::ThreadGroupMemoryData::hash(re::ThreadGroupMemoryData *this)
{
  unint64_t v1;
  unint64_t v2;

  v1 = *((_QWORD *)this + 2) * *((unsigned __int8 *)this + 8);
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v1 ^ (v1 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v1 ^ (v1 >> 30))) >> 27));
  return v2 ^ (v2 >> 31);
}

void re::TriangleFillModeData::~TriangleFillModeData(re::TriangleFillModeData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::FilterMapAtlasData::~FilterMapAtlasData(re::FilterMapAtlasData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::ShadowMapAtlasData::~ShadowMapAtlasData(re::ShadowMapAtlasData *this)
{
  JUMPOUT(0x2276933B8);
}

re::CameraData *re::CameraData::CameraData(re::CameraData *this)
{
  _QWORD *v2;

  *(_QWORD *)this = off_24ED735F0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  v2 = (_QWORD *)((char *)this + 8);
  re::DynamicString::setCapacity(v2, 0);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_DWORD *)this + 70) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_DWORD *)this + 108) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_DWORD *)this + 114) = 0;
  *((_DWORD *)this + 115) = 65537;
  *((_BYTE *)this + 464) = 0;
  *((_DWORD *)this + 117) = 1065353216;
  *((_WORD *)this + 236) = 1;
  *((_BYTE *)this + 476) = 0;
  *((_DWORD *)this + 121) = 1;
  *((_BYTE *)this + 490) = 1;
  *((_DWORD *)this + 125) = 2;
  *((_QWORD *)this + 63) = 0xFFFFFFFFLL;
  *((_BYTE *)this + 512) = 0;
  return this;
}

void re::CameraData::~CameraData(re::CameraData *this)
{
  uint64_t v2;
  char *v3;

  v3 = (char *)this + 8;
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)v3 + 33) = 0;
  ++*((_DWORD *)v3 + 68);
  *((_QWORD *)v3 + 15) = 0;
  ++*((_DWORD *)v3 + 32);
  *((_QWORD *)v3 + 5) = 0;
  ++*((_DWORD *)v3 + 12);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
}

{
  uint64_t v2;
  char *v3;

  v3 = (char *)this + 8;
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)v3 + 33) = 0;
  ++*((_DWORD *)v3 + 68);
  *((_QWORD *)v3 + 15) = 0;
  ++*((_DWORD *)v3 + 32);
  *((_QWORD *)v3 + 5) = 0;
  ++*((_DWORD *)v3 + 12);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  JUMPOUT(0x2276933B8);
}

void re::CameraMatrices::~CameraMatrices(re::CameraMatrices *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)((char *)this + 48);
  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 10) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 18);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 1) = 0;
    ++*((_DWORD *)this + 8);
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)((char *)this + 48);
  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 10) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 18);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 1) = 0;
    ++*((_DWORD *)this + 8);
  }
  JUMPOUT(0x2276933B8);
}

uint64_t *re::shadowLogObjects(re *this)
{
  unsigned __int8 v1;

  {
    re::shadowLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Shadow");
  }
  return &re::shadowLogObjects(void)::logObjects;
}

uint64_t re::DataArray<re::TextureAtlasTile>::deinit(uint64_t result)
{
  uint64_t *v1;
  double v2;
  _QWORD *v3;

  if (*(_DWORD *)(result + 44))
  {
    v1 = (uint64_t *)result;
    v2 = re::DataArray<re::TextureAtlasTile>::clear((_QWORD *)result);
    if (!v1[2])
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v3 = (_QWORD *)v1[4];
    (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v3[1]);
    result = *v1;
    if (*v1)
    {
      if (v1[4])
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      v1[4] = 0;
      v1[1] = 0;
      v1[2] = 0;
      *v1 = 0;
      ++*((_DWORD *)v1 + 6);
    }
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

unint64_t re::TextureAtlas::requestTile(re::TextureAtlas *this, int a2, int a3, float a4)
{
  unsigned int *v4;
  float v7;
  int v8;
  int v9;

  v8 = a3;
  v9 = a2;
  v7 = a4;
  v4 = (unsigned int *)((char *)this + 8);
  if (!*((_DWORD *)this + 13))
  {
    *((_QWORD *)this + 1) = *((_QWORD *)this + 11);
    re::DynamicArray<re::DataArray<re::TextureAtlasTile>::ElementBlock>::setCapacity((_QWORD *)this + 1, 0);
    ++*((_DWORD *)this + 8);
    *((_DWORD *)this + 13) = 32;
    re::DataArray<re::TextureAtlasTile>::allocBlock(v4);
    re::DataArray<re::TextureAtlasTile>::clear(v4);
  }
  return re::DataArray<re::TextureAtlasTile>::create<unsigned int &,unsigned int &,float &>((uint64_t)v4, &v9, &v8, (int *)&v7);
}

double re::DataArray<re::TextureAtlasTile>::clear(_QWORD *a1)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  _OWORD v12[5];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v4 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)v12);
      re::DataArray<re::TextureAtlasTile>::destroy((uint64_t)a1, v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(v12);
    }
    while (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  v7 = a1[2];
  v8 = v7 - 1;
  if (v7 != 1)
  {
    v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v10 = a1[4] + v9;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 16));
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 8));
      re::DynamicArray<re::DataArray<re::RigGraphOperatorDefinition>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

unint64_t re::DataArray<re::TextureAtlasTile>::create<unsigned int &,unsigned int &,float &>(uint64_t a1, _DWORD *a2, int *a3, int *a4)
{
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  int v18;
  uint64_t v20;
  __int128 v21;

  v8 = *(_DWORD *)(a1 + 56);
  if ((v8 + 1) >> 24)
    v9 = 1;
  else
    v9 = v8 + 1;
  *(_DWORD *)(a1 + 56) = v9;
  v10 = *(unsigned __int16 *)(a1 + 52);
  v11 = *(unsigned __int16 *)(a1 + 54);
  if (v10 == 0xFFFF && (_DWORD)v11 == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 48) >= *(_DWORD *)(a1 + 44))
      re::DataArray<re::TextureAtlasTile>::allocBlock((unsigned int *)a1);
    v15 = *(_QWORD *)(a1 + 16);
    v11 = (unsigned __int16)(v15 - 1);
    if (v15)
    {
      v10 = *(unsigned int *)(a1 + 48);
      if (v10 < 0x10000)
      {
        v16 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v11);
        *(_DWORD *)(a1 + 48) = v10 + 1;
        *(_DWORD *)(v16[1] + 4 * v10) = *(_DWORD *)(a1 + 56);
        v14 = *v16 + 24 * v10;
        goto LABEL_15;
      }
LABEL_18:
      re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v10, v20, v21);
      _os_crash();
      __break(1u);
    }
LABEL_17:
    v20 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v21) = 136315906;
    *(_QWORD *)((char *)&v21 + 4) = "operator[]";
    WORD6(v21) = 1024;
    HIWORD(v21) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  if (*(_QWORD *)(a1 + 16) <= v11)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  v13 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v11);
  *(_DWORD *)(v13[1] + 4 * v10) = v9;
  v14 = *v13 + 24 * v10;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)v14;
LABEL_15:
  ++*(_DWORD *)(a1 + 40);
  v17 = *a3;
  v18 = *a4;
  *(_DWORD *)v14 = *a2;
  *(_DWORD *)(v14 + 4) = v17;
  *(_DWORD *)(v14 + 8) = v18;
  *(_DWORD *)(v14 + 12) = 0;
  *(_DWORD *)(v14 + 16) = 0;
  *(_WORD *)(v14 + 20) = -1;
  return (v11 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 56) & 0xFFFFFF) << 32) | v10;
}

uint64_t re::DataArray<re::TextureAtlasTile>::get(uint64_t a1, int a2)
{
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(a2)) + 24 * (unsigned __int16)a2;
}

_DWORD *re::DataArray<re::TextureAtlasTile>::destroy(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  _DWORD *result;

  v2 = a2;
  v4 = a2 >> 16;
  result = (_DWORD *)re::DataArray<re::TextureAtlasTile>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (result)
  {
    if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *result = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

uint64_t re::TextureAtlas::allocateTiles(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  _anonymous_namespace_ *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int32x2_t *v45;
  int32x2_t v46;
  int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int32x2_t *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned __int32 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  int v67;
  __int32 v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  unsigned __int16 v82;
  _QWORD *v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  __int128 v89;
  int v90;
  _QWORD *v91;
  uint64_t v92;
  __int128 v93;
  int v94;
  _QWORD *v95;
  uint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  const char *v105;
  __int16 v106;
  int v107;
  __int16 v108;
  unint64_t v109;
  __int16 v110;
  unint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)(this + 48))
    return this;
  v2 = this;
  v3 = this + 8;
  v4 = *(_QWORD *)(this + 88);
  v95 = 0;
  v93 = 0uLL;
  v94 = 0;
  v92 = v4;
  re::DynamicArray<re::DataArrayHandle<re::TextureAtlasTile>>::setCapacity(&v92, 0);
  v5 = ++v94;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v101, v3, 0);
  if (v3 == v101 && (unsigned __int16)v102 == 0xFFFFLL && (v102 & 0xFFFF0000) == 0xFFFF0000)
  {
    v6 = (uint64_t)v95;
    v7 = *((_QWORD *)&v93 + 1);
  }
  else
  {
    v7 = *((_QWORD *)&v93 + 1);
    do
    {
      v8 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v101);
      if (v7 >= (unint64_t)v93)
      {
        re::DynamicArray<re::DataArrayHandle<re::TextureAtlasTile>>::growCapacity(&v92, v7 + 1);
        v7 = *((_QWORD *)&v93 + 1);
        v5 = v94;
      }
      v6 = (uint64_t)v95;
      v95[v7++] = v8;
      *((_QWORD *)&v93 + 1) = v7;
      v94 = ++v5;
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v101);
    }
    while (v101 != v3 || (unsigned __int16)v102 != 0xFFFF || WORD1(v102) != 0xFFFF);
  }
  v101 = v2;
  v11 = 126 - 2 * __clz(v7);
  if (v7)
    v12 = v11;
  else
    v12 = 0;
  std::__introsort<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *,false>(v6, (uint64_t *)(v6 + 8 * v7), &v101, v12, 1);
  v82 = 0;
  v80 = v2;
  do
  {
    v13 = *(_DWORD *)(v2 + 72);
    v86 = *(_DWORD *)(v2 + 76);
    v14 = *(_QWORD *)(v2 + 88);
    v89 = 0uLL;
    v90 = 0;
    v91 = 0;
    v88 = v14;
    re::DynamicArray<re::DataArrayHandle<re::TextureAtlasTile>>::setCapacity(&v88, 0);
    v87 = ++v90;
    v15 = *(uint64_t **)(v2 + 88);
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v96 = v15;
    v18 = ++v99;
    if (v98 >= v97)
    {
      v19 = v98 + 1;
      if (v97 < v98 + 1)
      {
        if (v96)
        {
          v20 = 2 * v97;
          if (!v97)
            v20 = 8;
          if (v20 <= v19)
            v21 = v98 + 1;
          else
            v21 = v20;
          v18 = v99;
        }
        else
        {
          v18 = v99 + 1;
        }
      }
    }
    v22 = v100;
    v23 = v98;
    v24 = v100 + 28 * v98;
    *(_OWORD *)v24 = xmmword_2260FF4D0;
    v25 = v86;
    *(_DWORD *)(v24 + 16) = v13;
    *(_DWORD *)(v24 + 20) = v86;
    *(_BYTE *)(v24 + 24) = 0;
    v26 = v23 + 1;
    v98 = v23 + 1;
    v99 = v18 + 1;
    if (!*((_QWORD *)&v93 + 1))
      goto LABEL_77;
    v27 = v95;
    v28 = &v95[*((_QWORD *)&v93 + 1)];
    v84 = v13;
    v83 = v28;
    do
    {
      v29 = (unsigned int *)re::DataArray<re::TextureAtlasTile>::get(v3, *v27);
      if (*v29 > v13 || v29[1] > v25)
        goto LABEL_74;
      if (!v26)
        goto LABEL_104;
      v31 = v29;
      v32 = 0;
      v33 = 0;
      v85 = *(_DWORD *)(v22 + 16);
      v34 = v26;
      while (1)
      {
        v35 = (_QWORD *)(v22 + 28 * v32);
        v36 = *(unsigned int *)v35;
        if (*v35 == -1)
          break;
        v37 = v33;
        if (v33 >= 0x40)
          goto LABEL_94;
        v33 = (v33 + 1);
        *((_DWORD *)&v101 + v37) = v32;
        v32 = v36;
LABEL_42:
        if (v34 <= v32)
        {
          v103 = 0;
          v115 = 0u;
          v116 = 0u;
          v113 = 0u;
          v114 = 0u;
          v112 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v104 = 136315906;
          v105 = "operator[]";
          v106 = 1024;
          v107 = 789;
          v108 = 2048;
          v109 = v32;
          v110 = 2048;
          v111 = v34;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_94:
          re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v37, 64);
          _os_crash();
          __break(1u);
LABEL_95:
          re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v33, 64);
          _os_crash();
          __break(1u);
LABEL_96:
          v103 = 0;
          v115 = 0u;
          v116 = 0u;
          v113 = 0u;
          v114 = 0u;
          v112 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v104 = 136315906;
          v105 = "operator[]";
          v106 = 1024;
          v107 = 789;
          v108 = 2048;
          v109 = v32;
          v110 = 2048;
          v111 = v34;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_97:
          v103 = 0;
          v115 = 0u;
          v116 = 0u;
          v113 = 0u;
          v114 = 0u;
          v112 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v104 = 136315906;
          v105 = "operator[]";
          v106 = 1024;
          v107 = 789;
          v108 = 2048;
          v109 = v32;
          v110 = 2048;
          v111 = v26;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_98:
          v103 = 0;
          v115 = 0u;
          v116 = 0u;
          v113 = 0u;
          v114 = 0u;
          v112 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v104 = 136315906;
          v105 = "operator[]";
          v106 = 1024;
          v107 = 789;
          v108 = 2048;
          v109 = v34;
          v110 = 2048;
          v111 = v26;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_99:
          v103 = 0;
          v115 = 0u;
          v116 = 0u;
          v113 = 0u;
          v114 = 0u;
          v112 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v104 = 136315906;
          v105 = "operator[]";
          v106 = 1024;
          v107 = 789;
          v108 = 2048;
          v109 = v34;
          v110 = 2048;
          v111 = v26;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_100:
          v103 = 0;
          v115 = 0u;
          v116 = 0u;
          v113 = 0u;
          v114 = 0u;
          v112 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v104 = 136315906;
          v105 = "operator[]";
          v106 = 1024;
          v107 = 789;
          v108 = 2048;
          v109 = v34;
          v110 = 2048;
          v111 = v26;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_101:
          v103 = 0;
          v115 = 0u;
          v116 = 0u;
          v113 = 0u;
          v114 = 0u;
          v112 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v104 = 136315906;
          v105 = "operator[]";
          v106 = 1024;
          v107 = 789;
          v108 = 2048;
          v109 = v34;
          v110 = 2048;
          v111 = v26;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_102:
          re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v62, 64);
          _os_crash();
          __break(1u);
LABEL_103:
          re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v62, 64);
          _os_crash();
          __break(1u);
LABEL_104:
          v103 = 0;
          v115 = 0u;
          v116 = 0u;
          v113 = 0u;
          v114 = 0u;
          v112 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v104 = 136315906;
          v105 = "operator[]";
          v106 = 1024;
          v107 = 789;
          v108 = 2048;
          v109 = 0;
          v110 = 2048;
          v111 = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_105:
          re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
          _os_crash();
          __break(1u);
        }
      }
      v38 = v22 + 28 * v32;
      v40 = *(unsigned __int8 *)(v38 + 24);
      v39 = (_BYTE *)(v38 + 24);
      if (!v40)
      {
        v41 = *(_DWORD *)(v22 + 28 * v32 + 16);
        if (v41 == *v31 && *(_DWORD *)(v22 + 28 * v32 + 20) == v31[1])
        {
          *v39 = 1;
          *((_WORD *)v31 + 10) = v82;
          v74 = v22 + 28 * v32;
          v13 = v84;
          v31[3] = *(_DWORD *)(v74 + 8) + v85 * v82;
          v31[4] = *(_DWORD *)(v74 + 12);
          goto LABEL_73;
        }
        if (v41 >= *v31 && *(_DWORD *)(v22 + 28 * v32 + 20) >= v31[1])
        {
          v26 = v34 + 2;
          if (v34 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            if (v97 < v26)
            {
              v34 = v98;
            }
            if (v34 < v26)
            {
              v42 = v100 + 28 * v34;
              v43 = 28 * v26 - 28 * v34;
              if (v43 >= 1)
              {
                v44 = v43 / 0x1CuLL + 1;
                do
                {
                  *(_QWORD *)v42 = 0;
                  *(_QWORD *)(v42 + 8) = 0;
                  *(_BYTE *)(v42 + 24) = 0;
                  *(_QWORD *)(v42 + 16) = 0;
                  v42 += 28;
                  --v44;
                }
                while (v44 > 1);
              }
            }
          }
          v98 = v26;
          ++v99;
          if (v26 <= v32)
            goto LABEL_97;
          v22 = v100;
          v45 = (int32x2_t *)(v100 + 28 * v32);
          v46 = vadd_s32(vdup_n_s32(v26), (int32x2_t)-2);
          *v45 = v46;
          v47 = (int *)&v45[2] + 1;
          v48 = v45[2].u32[1];
          v49 = *v31;
          v50 = v31[1];
          v51 = v45 + 2;
          v52 = v45[2].u32[0];
          v34 = v46.i32[0];
          if ((v48 - v50) * *v31 >= (v52 - *v31) * v50)
          {
            if (v26 <= v46.i32[0])
              goto LABEL_99;
            v63 = v22 + 28 * v46.i32[0];
            v64 = v22 + 28 * v32;
            v66 = *(_QWORD *)(v64 + 8);
            v65 = (int *)(v64 + 8);
            *(_QWORD *)v63 = -1;
            *(_QWORD *)(v63 + 8) = v66;
            *(_DWORD *)(v63 + 16) = v52;
            *(_DWORD *)(v63 + 20) = v50;
            *(_BYTE *)(v63 + 24) = 0;
            v34 = v45->i32[1];
            if (v26 <= v34)
              goto LABEL_101;
            v67 = *v65;
            v68 = v51->i32[0];
            v69 = v22 + 28 * (int)v34;
            v70 = *(_DWORD *)(v22 + 28 * v32 + 12) + v50;
            v71 = *v47 - v50;
            *(_QWORD *)v69 = -1;
            *(_DWORD *)(v69 + 8) = v67;
            *(_DWORD *)(v69 + 12) = v70;
            *(_DWORD *)(v69 + 16) = v68;
            *(_DWORD *)(v69 + 20) = v71;
            *(_BYTE *)(v69 + 24) = 0;
            v62 = v33;
            if (v33 >= 0x40)
              goto LABEL_103;
          }
          else
          {
            if (v26 <= v46.i32[0])
              goto LABEL_98;
            v53 = v22 + 28 * v46.i32[0];
            v54 = v22 + 28 * v32;
            v56 = *(_QWORD *)(v54 + 8);
            v55 = (_DWORD *)(v54 + 8);
            *(_QWORD *)v53 = -1;
            *(_QWORD *)(v53 + 8) = v56;
            *(_DWORD *)(v53 + 16) = v49;
            *(_DWORD *)(v53 + 20) = v48;
            *(_BYTE *)(v53 + 24) = 0;
            v34 = v45->i32[1];
            if (v26 <= v34)
              goto LABEL_100;
            v57 = *(_DWORD *)(v22 + 28 * v32 + 12);
            v58 = *v47;
            v59 = v22 + 28 * (int)v34;
            v60 = *v55 + v49;
            v61 = v51->i32[0] - v49;
            *(_QWORD *)v59 = -1;
            *(_DWORD *)(v59 + 8) = v60;
            *(_DWORD *)(v59 + 12) = v57;
            *(_DWORD *)(v59 + 16) = v61;
            *(_DWORD *)(v59 + 20) = v58;
            *(_BYTE *)(v59 + 24) = 0;
            v62 = v33;
            if (v33 >= 0x40)
              goto LABEL_102;
          }
          *((_DWORD *)&v101 + v62) = v32;
          v33 = (v33 + 1);
          v32 = v45->u32[0];
          v34 = v26;
          goto LABEL_42;
        }
      }
      if ((_DWORD)v33)
      {
        v33 = (v33 - 1);
        if (v33 >= 0x40)
          goto LABEL_95;
        v32 = *((unsigned int *)&v101 + v33);
        if (v34 <= v32)
          goto LABEL_96;
        v32 = *(unsigned int *)(v22 + 28 * v32 + 4);
        goto LABEL_42;
      }
      *((_WORD *)v31 + 10) = -1;
      v31[3] = 0;
      v31[4] = 0;
      v72 = *((_QWORD *)&v89 + 1);
      v13 = v84;
      v73 = v87;
      if (*((_QWORD *)&v89 + 1) >= (unint64_t)v89)
      {
        re::DynamicArray<re::DataArrayHandle<re::TextureAtlasTile>>::growCapacity(&v88, *((_QWORD *)&v89 + 1) + 1);
        v72 = *((_QWORD *)&v89 + 1);
        v73 = v90;
      }
      v91[v72] = *v27;
      *((_QWORD *)&v89 + 1) = v72 + 1;
      v87 = v73 + 1;
      v90 = v73 + 1;
LABEL_73:
      v25 = v86;
      v28 = v83;
LABEL_74:
      ++v27;
    }
    while (v27 != v28);
LABEL_77:
    if (v96 && v22)
      (*(void (**)(void))(*v96 + 40))();
    this = v92;
    v75 = v88;
    v2 = v80;
    if (v92 && v88 && v92 != v88)
      goto LABEL_105;
    v88 = v92;
    v76 = *((_QWORD *)&v89 + 1);
    v77 = v93;
    v92 = v75;
    v93 = v89;
    v89 = v77;
    v78 = v95;
    v79 = v91;
    v95 = v91;
    ++v94;
    if (this && v78)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 40))(this);
    ++v82;
  }
  while (v82 < a2 && v76);
  *(_WORD *)(v80 + 80) = v82;
  if (v82)
    *(_DWORD *)(v80 + 72) *= v82;
  if (v75)
  {
    if (v79)
      return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v75 + 40))(v75, v79);
  }
  return this;
}

_QWORD *re::DynamicArray<`anonymous namespace'::PackNode>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x1CuLL))
        {
          v2 = 28 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 28 * a2, 4);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 28 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 28, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::DataArrayHandle<re::TextureAtlasTile>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::DataArrayHandle<re::TextureAtlasTile>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DataArrayHandle<re::TextureAtlasTile>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::DataArrayHandle<re::TextureAtlasTile>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 8 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 8 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::DataArrayHandle<re::TextureAtlasTile>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::DataArray<re::TextureAtlasTile>::allocBlock(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  v2 = 24 * a1[11];
  v5.n128_u64[0] = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, v2, 0);
  if (v5.n128_u64[0])
  {
    v2 = 4 * a1[11];
    v5.n128_u64[1] = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, v2, 0);
    if (v5.n128_u64[1])
    {
      re::DynamicArray<re::DataArray<re::TextureAtlasTile>::ElementBlock>::add((_anonymous_namespace_ *)a1, &v5);
      a1[12] = 0;
      return;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v2, *(_QWORD *)(*(_QWORD *)a1 + 8), 0);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v2, *(_QWORD *)(*(_QWORD *)a1 + 8));
  _os_crash();
  __break(1u);
}

_QWORD *re::DynamicArray<re::DataArray<re::TextureAtlasTile>::ElementBlock>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 16 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::DataArray<re::TextureAtlasTile>::ElementBlock>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

__n128 re::DynamicArray<re::DataArray<re::TextureAtlasTile>::ElementBlock>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::DataArray<re::TextureAtlasTile>::ElementBlock>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = *a2;
  *(__n128 *)(*((_QWORD *)this + 4) + 16 * v4) = *a2;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::DataArray<re::TextureAtlasTile>::ElementBlock>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::DataArray<re::TextureAtlasTile>::ElementBlock>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DataArray<re::TextureAtlasTile>::ElementBlock>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::DataArray<re::TextureAtlasTile>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (v3 = *(_DWORD *)(a1 + 44)) : (v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((v4 = *(_QWORD *)(a1 + 32),
          (v5 = *(_DWORD *)(*(_QWORD *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (v6 = 0),
         v6)))
  {
    return *(_QWORD *)(v4 + 16 * WORD1(a2)) + 24 * (unsigned __int16)a2;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles(unsigned int)::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *,false>(uint64_t result, uint64_t *a2, _QWORD *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t *v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  uint64_t *v48;
  uint64_t v49;
  float v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  uint64_t *v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  uint64_t *v69;
  BOOL v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  uint64_t *v81;
  int64_t v82;
  int64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  int64_t v87;
  uint64_t v88;
  float v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  float v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float v98;
  uint64_t v99;
  float v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  float v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  float v118;
  uint64_t *v120;
  uint64_t v121;
  float v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  float v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t *v132;
  int64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;

  v8 = (uint64_t *)result;
LABEL_2:
  v130 = a2 - 2;
  v132 = a2 - 1;
  v135 = a2;
  v129 = a2 - 3;
  v9 = v8;
  while (2)
  {
    v8 = v9;
    v10 = v135;
    v11 = (char *)v135 - (char *)v9;
    v12 = v135 - v9;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v66 = *a3 + 8;
        v67 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v66, *(v135 - 1)) + 8);
        result = re::DataArray<re::TextureAtlasTile>::get(v66, *v8);
        if (v67 < *(float *)(result + 8))
        {
          v68 = *v8;
          *v8 = *(v135 - 1);
          *(v135 - 1) = v68;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(v8, v8 + 1, v132, a3);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(v8, v8 + 1, v8 + 2, v132, a3);
      case 5:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *,0>(v8, v8 + 1, v8 + 2, v8 + 3, v132, a3);
      default:
        if (v11 <= 191)
        {
          v69 = v8 + 1;
          v71 = v8 == v135 || v69 == v135;
          if ((a5 & 1) != 0)
          {
            if (!v71)
            {
              v72 = 0;
              v73 = v8;
              do
              {
                v74 = v73;
                v73 = v69;
                v75 = *a3 + 8;
                v76 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v75, v74[1]) + 8);
                result = re::DataArray<re::TextureAtlasTile>::get(v75, *v74);
                if (v76 < *(float *)(result + 8))
                {
                  v77 = *v73;
                  v78 = v72;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v78 + 8) = *(uint64_t *)((char *)v8 + v78);
                    if (!v78)
                      break;
                    v79 = *a3 + 8;
                    v80 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v79, v77) + 8);
                    result = re::DataArray<re::TextureAtlasTile>::get(v79, *(uint64_t *)((char *)v8 + v78 - 8));
                    v78 -= 8;
                    if (v80 >= *(float *)(result + 8))
                    {
                      v81 = (uint64_t *)((char *)v8 + v78 + 8);
                      goto LABEL_74;
                    }
                  }
                  v81 = v8;
LABEL_74:
                  *v81 = v77;
                }
                v69 = v73 + 1;
                v72 += 8;
              }
              while (v73 + 1 != v135);
            }
          }
          else if (!v71)
          {
            do
            {
              v120 = v8;
              v8 = v69;
              v121 = *a3 + 8;
              v122 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v121, v120[1]) + 8);
              result = re::DataArray<re::TextureAtlasTile>::get(v121, *v120);
              if (v122 < *(float *)(result + 8))
              {
                v123 = *v8;
                v124 = v8;
                do
                {
                  v125 = v124;
                  v126 = *--v124;
                  *v125 = v126;
                  v127 = *a3 + 8;
                  v128 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v127, v123) + 8);
                  result = re::DataArray<re::TextureAtlasTile>::get(v127, *(v125 - 2));
                }
                while (v128 < *(float *)(result + 8));
                *v124 = v123;
              }
              v69 = v8 + 1;
            }
            while (v8 + 1 != v135);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != v135)
          {
            v82 = (unint64_t)(v12 - 2) >> 1;
            v133 = v82;
            do
            {
              v83 = v82;
              if (v133 >= v82)
              {
                v84 = (2 * v82) | 1;
                v85 = &v8[v84];
                v86 = 2 * v82 + 2;
                if (v86 < v12)
                {
                  v87 = v82;
                  v88 = *a3 + 8;
                  v89 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v88, *v85) + 8);
                  v90 = v88;
                  v83 = v87;
                  if (v89 < *(float *)(re::DataArray<re::TextureAtlasTile>::get(v90, v85[1]) + 8))
                  {
                    ++v85;
                    v84 = v86;
                  }
                }
                v91 = &v8[v83];
                v92 = *a3 + 8;
                v93 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v92, *v85) + 8);
                result = re::DataArray<re::TextureAtlasTile>::get(v92, *v91);
                if (v93 >= *(float *)(result + 8))
                {
                  v131 = *v91;
                  do
                  {
                    v94 = v91;
                    v91 = v85;
                    *v94 = *v85;
                    if (v133 < v84)
                      break;
                    v95 = 2 * v84;
                    v84 = (2 * v84) | 1;
                    v85 = &v8[v84];
                    v96 = v95 + 2;
                    if (v95 + 2 < v12)
                    {
                      v97 = *a3 + 8;
                      v98 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v97, *v85) + 8);
                      if (v98 < *(float *)(re::DataArray<re::TextureAtlasTile>::get(v97, v85[1]) + 8))
                      {
                        ++v85;
                        v84 = v96;
                      }
                    }
                    v99 = *a3 + 8;
                    v100 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v99, *v85) + 8);
                    result = re::DataArray<re::TextureAtlasTile>::get(v99, v131);
                  }
                  while (v100 >= *(float *)(result + 8));
                  *v91 = v131;
                }
              }
              v82 = v83 - 1;
            }
            while (v83);
            v101 = (unint64_t)v11 >> 3;
            v102 = v135;
            do
            {
              v103 = 0;
              v134 = *v8;
              v136 = v102;
              v104 = v8;
              do
              {
                v105 = v104;
                v104 += v103 + 1;
                v106 = 2 * v103;
                v103 = (2 * v103) | 1;
                v107 = v106 + 2;
                if (v106 + 2 < v101)
                {
                  v108 = *a3 + 8;
                  v109 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v108, *v104) + 8);
                  result = re::DataArray<re::TextureAtlasTile>::get(v108, v104[1]);
                  if (v109 < *(float *)(result + 8))
                  {
                    ++v104;
                    v103 = v107;
                  }
                }
                *v105 = *v104;
              }
              while (v103 <= (uint64_t)((unint64_t)(v101 - 2) >> 1));
              v102 = v136 - 1;
              if (v104 == v136 - 1)
              {
                *v104 = v134;
              }
              else
              {
                *v104 = *v102;
                *v102 = v134;
                v110 = (char *)v104 - (char *)v8 + 8;
                if (v110 >= 9)
                {
                  v111 = (((unint64_t)v110 >> 3) - 2) >> 1;
                  v112 = &v8[v111];
                  v113 = *a3 + 8;
                  v114 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v113, *v112) + 8);
                  result = re::DataArray<re::TextureAtlasTile>::get(v113, *v104);
                  if (v114 < *(float *)(result + 8))
                  {
                    v115 = *v104;
                    do
                    {
                      v116 = v104;
                      v104 = v112;
                      *v116 = *v112;
                      if (!v111)
                        break;
                      v111 = (v111 - 1) >> 1;
                      v112 = &v8[v111];
                      v117 = *a3 + 8;
                      v118 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v117, *v112) + 8);
                      result = re::DataArray<re::TextureAtlasTile>::get(v117, v115);
                    }
                    while (v118 < *(float *)(result + 8));
                    *v104 = v115;
                  }
                }
              }
            }
            while (v101-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v8[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(v14, v8, v132, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(v8, v14, v132, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(v8 + 1, v14 - 1, v130, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(v8 + 2, &v8[v13 + 1], v129, a3);
          v10 = v135;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(v14 - 1, v14, &v8[v13 + 1], a3);
          v15 = *v8;
          *v8 = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v16 = *a3 + 8;
          v17 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v16, *(v8 - 1)) + 8);
          if (v17 >= *(float *)(re::DataArray<re::TextureAtlasTile>::get(v16, *v8) + 8))
          {
            v41 = *v8;
            v42 = *a3 + 8;
            v43 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v42, *v8) + 8);
            result = re::DataArray<re::TextureAtlasTile>::get(v42, *v132);
            if (v43 >= *(float *)(result + 8))
            {
              v48 = v8 + 1;
              do
              {
                v9 = v48;
                if (v48 >= v135)
                  break;
                v49 = *a3 + 8;
                v50 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v49, v41) + 8);
                ++v48;
                result = re::DataArray<re::TextureAtlasTile>::get(v49, *v9);
              }
              while (v50 >= *(float *)(result + 8));
            }
            else
            {
              v9 = v8;
              do
              {
                v44 = *a3 + 8;
                v45 = re::DataArray<re::TextureAtlasTile>::get(v44, v41);
                v46 = v9[1];
                ++v9;
                v47 = *(float *)(v45 + 8);
                result = re::DataArray<re::TextureAtlasTile>::get(v44, v46);
              }
              while (v47 >= *(float *)(result + 8));
            }
            v51 = v135;
            if (v9 < v135)
            {
              v51 = v135;
              do
              {
                v52 = *a3 + 8;
                v53 = re::DataArray<re::TextureAtlasTile>::get(v52, v41);
                v54 = *--v51;
                v55 = *(float *)(v53 + 8);
                result = re::DataArray<re::TextureAtlasTile>::get(v52, v54);
              }
              while (v55 < *(float *)(result + 8));
            }
            while (v9 < v51)
            {
              v56 = *v9;
              *v9 = *v51;
              *v51 = v56;
              do
              {
                v57 = *a3 + 8;
                v58 = re::DataArray<re::TextureAtlasTile>::get(v57, v41);
                v59 = v9[1];
                ++v9;
                v60 = *(float *)(v58 + 8);
              }
              while (v60 >= *(float *)(re::DataArray<re::TextureAtlasTile>::get(v57, v59) + 8));
              do
              {
                v61 = *a3 + 8;
                v62 = re::DataArray<re::TextureAtlasTile>::get(v61, v41);
                v63 = *--v51;
                v64 = *(float *)(v62 + 8);
                result = re::DataArray<re::TextureAtlasTile>::get(v61, v63);
              }
              while (v64 < *(float *)(result + 8));
            }
            v65 = v9 - 1;
            if (v9 - 1 != v8)
              *v8 = *v65;
            a5 = 0;
            *v65 = v41;
            continue;
          }
        }
        v18 = 0;
        v19 = *v8;
        do
        {
          v20 = *a3 + 8;
          v21 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v20, v8[++v18]) + 8);
        }
        while (v21 < *(float *)(re::DataArray<re::TextureAtlasTile>::get(v20, v19) + 8));
        v22 = &v8[v18];
        v23 = v10;
        if (v18 == 1)
        {
          v23 = v10;
          do
          {
            if (v22 >= v23)
              break;
            v27 = *--v23;
            v28 = *a3 + 8;
            v29 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v28, v27) + 8);
          }
          while (v29 >= *(float *)(re::DataArray<re::TextureAtlasTile>::get(v28, v19) + 8));
        }
        else
        {
          do
          {
            v24 = *--v23;
            v25 = *a3 + 8;
            v26 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v25, v24) + 8);
          }
          while (v26 >= *(float *)(re::DataArray<re::TextureAtlasTile>::get(v25, v19) + 8));
        }
        if (v22 >= v23)
        {
          v39 = v22 - 1;
        }
        else
        {
          v30 = &v8[v18];
          v31 = v23;
          do
          {
            v32 = *v30;
            *v30 = *v31;
            *v31 = v32;
            do
            {
              v33 = v30[1];
              ++v30;
              v34 = *a3 + 8;
              v35 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v34, v33) + 8);
            }
            while (v35 < *(float *)(re::DataArray<re::TextureAtlasTile>::get(v34, v19) + 8));
            do
            {
              v36 = *--v31;
              v37 = *a3 + 8;
              v38 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v37, v36) + 8);
            }
            while (v38 >= *(float *)(re::DataArray<re::TextureAtlasTile>::get(v37, v19) + 8));
          }
          while (v30 < v31);
          v39 = v30 - 1;
        }
        if (v39 != v8)
          *v8 = *v39;
        *v39 = v19;
        if (v22 < v23)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *,false>(v8, v39, a3, a4, a5 & 1);
          a5 = 0;
          v9 = v39 + 1;
          continue;
        }
        v40 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(v8, v39, a3);
        v9 = v39 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(v39 + 1, v135, a3);
        if (!(_DWORD)result)
        {
          if (v40)
            continue;
          goto LABEL_32;
        }
        a2 = v39;
        if (!v40)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles(unsigned int)::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v12;
  float v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(a1, a2, a3, a4, a6);
  v12 = *a6 + 8;
  v13 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v12, *a5) + 8);
  result = re::DataArray<re::TextureAtlasTile>::get(v12, *a4);
  if (v13 < *(float *)(result + 8))
  {
    v15 = *a4;
    *a4 = *a5;
    *a5 = v15;
    v16 = *a6 + 8;
    v17 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v16, *a4) + 8);
    result = re::DataArray<re::TextureAtlasTile>::get(v16, *a3);
    if (v17 < *(float *)(result + 8))
    {
      v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      v19 = *a6 + 8;
      v20 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v19, *a3) + 8);
      result = re::DataArray<re::TextureAtlasTile>::get(v19, *a2);
      if (v20 < *(float *)(result + 8))
      {
        v21 = *a2;
        *a2 = *a3;
        *a3 = v21;
        v22 = *a6 + 8;
        v23 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v22, *a2) + 8);
        result = re::DataArray<re::TextureAtlasTile>::get(v22, *a1);
        if (v23 < *(float *)(result + 8))
        {
          v24 = *a1;
          *a1 = *a2;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles(unsigned int)::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t result;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;

  v8 = *a4 + 8;
  v9 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v8, *a2) + 8);
  v10 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v8, *a1) + 8);
  v11 = *a4 + 8;
  v12 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v11, *a3) + 8);
  result = re::DataArray<re::TextureAtlasTile>::get(v11, *a2);
  v14 = *(float *)(result + 8);
  if (v9 >= v10)
  {
    if (v12 < v14)
    {
      v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      v17 = *a4 + 8;
      v18 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v17, *a2) + 8);
      result = re::DataArray<re::TextureAtlasTile>::get(v17, *a1);
      if (v18 < *(float *)(result + 8))
      {
        v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  else
  {
    v15 = *a1;
    if (v12 >= v14)
    {
      *a1 = *a2;
      *a2 = v15;
      v20 = *a4 + 8;
      v21 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v20, *a3) + 8);
      result = re::DataArray<re::TextureAtlasTile>::get(v20, *a2);
      if (v21 >= *(float *)(result + 8))
        return result;
      v15 = *a2;
      *a2 = *a3;
    }
    else
    {
      *a1 = *a3;
    }
    *a3 = v15;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles(unsigned int)::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t *v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *a3 + 8;
      v9 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v8, *(a2 - 1)) + 8);
      if (v9 < *(float *)(re::DataArray<re::TextureAtlasTile>::get(v8, *a1) + 8))
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *a3 + 8;
    v16 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v15, *v12) + 8);
    if (v16 < *(float *)(re::DataArray<re::TextureAtlasTile>::get(v15, *v11) + 8))
    {
      v17 = *v12;
      v18 = v13;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18 + 24) = *(uint64_t *)((char *)a1 + v18 + 16);
        if (v18 == -16)
          break;
        v19 = *a3 + 8;
        v20 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v19, v17) + 8);
        v21 = re::DataArray<re::TextureAtlasTile>::get(v19, *(uint64_t *)((char *)a1 + v18 + 8));
        v18 -= 8;
        if (v20 >= *(float *)(v21 + 8))
        {
          v22 = (uint64_t *)((char *)a1 + v18 + 24);
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      *v22 = v17;
      if (++v14 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v13 += 8;
    if (++v12 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles(unsigned int)::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  float v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextureAtlas::allocateTiles::$_0 &,re::DataArrayHandle<re::TextureAtlasTile> *>(a1, a2, a3, a5);
  v10 = *a5 + 8;
  v11 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v10, *a4) + 8);
  result = re::DataArray<re::TextureAtlasTile>::get(v10, *a3);
  if (v11 < *(float *)(result + 8))
  {
    v13 = *a3;
    *a3 = *a4;
    *a4 = v13;
    v14 = *a5 + 8;
    v15 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v14, *a3) + 8);
    result = re::DataArray<re::TextureAtlasTile>::get(v14, *a2);
    if (v15 < *(float *)(result + 8))
    {
      v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      v17 = *a5 + 8;
      v18 = *(float *)(re::DataArray<re::TextureAtlasTile>::get(v17, *a2) + 8);
      result = re::DataArray<re::TextureAtlasTile>::get(v17, *a1);
      if (v18 < *(float *)(result + 8))
      {
        v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

uint64_t re::getOrCreateTileRenderPipelineState(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  unint64_t LibraryHash;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  double v35;
  int v36;
  NSObject *v37;
  _anonymous_namespace_ *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t As64Bits;
  uint64_t v55;
  _BYTE *v56;
  re *v57;
  NSObject *v58;
  _BYTE *v59;
  re::AppleBuild *v61;
  const char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char v68;
  _BYTE v69[23];
  id v70;
  id v71;
  id v72;
  void *v73;
  id v74;
  uint8_t buf[4];
  _BYTE *v76;
  _BYTE info[24];
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a2)
    v4 = re::Hash<re::DynamicString>::operator()((uint64_t)info, a2 + 8);
  else
    v4 = 0;
  v5 = re::Hash<re::DynamicString>::operator()((uint64_t)info, a2 + 40);
  v6 = re::TechniqueDefinitionBuilder::hashFunctionConstants(*(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 88));
  MurmurHash3_x64_128(a2 + 112, 44, 0, (unint64_t *)info);
  v7 = (*(_QWORD *)&info[8] + (*(_QWORD *)info << 6) + (*(_QWORD *)info >> 2) - 0x61C8864680B583E9) ^ *(_QWORD *)info;
  v8 = (unint64_t)objc_msgSend(*(id *)(a2 + 168), sel_hash);
  v9 = ((((unint64_t)*(unsigned __int8 *)(a2 + 176) << 6) | 0x9E3779B97F4A7C17)
      + (((v8 << 6)
        + (v8 >> 2)
        - 0x61C8864680B583E9
        + (((((v6 << 6)
            + (v6 >> 2)
            + (((v5 << 6) + (v5 >> 2) + (((v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4) - 0x61C8864680B583E9) ^ v5)
            - 0x61C8864680B583E9) ^ v6)
          + (v7 << 6)
          + (v7 >> 2)
          - 0x61C8864680B583E9) ^ v7)) ^ v8)) ^ *(unsigned __int8 *)(a2 + 176);
  v10 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(v10 + 96))
  {
    v11 = *(unsigned int *)(*(_QWORD *)(v10 + 104) + 4 * (v9 % *(unsigned int *)(v10 + 120)));
    if ((_DWORD)v11 != 0x7FFFFFFF)
    {
      v21 = *(_QWORD *)(v10 + 112);
      if (*(_QWORD *)(v21 + 24 * v11 + 8) == v9)
        return v21 + 24 * v11 + 16;
      while (1)
      {
        LODWORD(v11) = *(_DWORD *)(v21 + 24 * v11) & 0x7FFFFFFF;
        if ((_DWORD)v11 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v21 + 24 * v11 + 8) == v9)
          return v21 + 24 * v11 + 16;
      }
    }
  }
  if (!*(_BYTE *)(a2 + 177))
  {
    v12 = atomic_load((unsigned __int8 *)&qword_254118B00);
    if ((v12 & 1) == 0)
    {
      v61 = (re::AppleBuild *)__cxa_guard_acquire(&qword_254118B00);
      if ((_DWORD)v61)
      {
        _MergedGlobals_370 = *re::AppleBuild::get(v61) == 1;
        __cxa_guard_release(&qword_254118B00);
      }
    }
    v13 = atomic_load((unsigned __int8 *)&qword_254118B08);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254118B08))
    {
      re::Defaults::BOOLValue((re::Defaults *)"shouldCrashOnRuntimeCompilation", v62, info);
      if (info[0])
        v63 = &info[1];
      else
        v63 = &_MergedGlobals_370;
      byte_254118AF9 = *v63;
      __cxa_guard_release(&qword_254118B08);
    }
  }
  v64 = mach_absolute_time();
  v14 = *(_QWORD **)(a1 + 56);
  if (*(_BYTE *)a2)
  {
    if ((*(_QWORD *)(a2 + 16) & 1) != 0)
      v15 = *(const char **)(a2 + 24);
    else
      v15 = (const char *)(a2 + 17);
    *(_QWORD *)info = re::ShaderManager::getLibraryHash(*(re::ShaderManager **)(a1 + 56), v15);
    v16 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)(v14 + 33), (uint64_t *)info);
    if ((*(_QWORD *)(a2 + 16) & 1) != 0)
      v17 = *(const char **)(a2 + 24);
    else
      v17 = (const char *)(a2 + 17);
    LibraryHash = re::ShaderManager::getLibraryHash((re::ShaderManager *)v14, v17);
    if (!v16)
      return 0;
    v19 = LibraryHash;
    v20 = (_QWORD *)(v16 + 8);
  }
  else
  {
    v20 = v14 + 31;
    v19 = v14[32];
  }
  v65 = a1;
  v66 = (_QWORD *)(v10 + 96);
  v74 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5A0], sel_alloc), sel_init);
  v23 = *(_QWORD *)(a2 + 88);
  if (v23)
  {
    v24 = v23 << 6;
    v25 = (unsigned __int16 *)(*(_QWORD *)(a2 + 104) + 32);
    do
    {
      objc_msgSend(v74, sel_setConstantValue_type_atIndex_, *((_QWORD *)v25 + 3), *v25, v25[1]);
      v25 += 32;
      v24 -= 64;
    }
    while (v24);
  }
  if ((*(_QWORD *)(a2 + 48) & 1) != 0)
    v26 = *(_QWORD *)(a2 + 56);
  else
    v26 = a2 + 49;
  re::ShaderManager::makeFunctionDescriptor((uint64_t)v14, v26, &v74, v20, v19, &v73);
  re::ShaderManager::makeFunctionWithDescriptor((uint64_t)v14, v19, &v73, &v72);
  re::ShaderManager::makeTileRenderPipelineDescriptor((re::ShaderManager *)v14, &v71);
  objc_msgSend(v71, sel_setTileFunction_, v72);
  objc_msgSend(v71, sel_setRasterSampleCount_, *(unsigned int *)(a2 + 112));
  objc_msgSend(v71, sel_setLinkedFunctions_, *(_QWORD *)(a2 + 168));
  objc_msgSend(v71, sel_setThreadgroupSizeMatchesTileSize_, *(unsigned __int8 *)(a2 + 176));
  v27 = 0;
  v28 = 32;
  do
  {
    v29 = *(int *)(a2 + 116 + 4 * v27);
    if ((_DWORD)v29)
      objc_msgSend(objc_msgSend(objc_msgSend(v71, sel_colorAttachments), sel_objectAtIndexedSubscript_, v27), sel_setPixelFormat_, v29);
    ++v27;
    v28 -= 4;
  }
  while (v28);
  v70 = 0;
  re::mtl::Device::makeRenderPipelineState((id *)(v65 + 184), (uint64_t)v71, info);
  NS::SharedPtr<MTL::Texture>::operator=(&v70, (void **)info);
  if (*(_QWORD *)info)

  v30 = mach_absolute_time();
  v31 = v30;
  v32 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
  if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
  {
    v30 = mach_timebase_info((mach_timebase_info_t)info);
    if ((_DWORD)v30)
    {
      v35 = NAN;
      goto LABEL_41;
    }
    LODWORD(v33) = *(_DWORD *)info;
    LODWORD(v34) = *(_DWORD *)&info[4];
    v32 = (double)v33 / (double)v34;
    re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(_QWORD *)&v32;
  }
  v35 = v32 * (double)(v31 - v64);
LABEL_41:
  v36 = (int)(v35 / 1000000.0);
  v37 = *re::graphicsLogObjects((re *)v30);
  v38 = (_anonymous_namespace_ *)os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
  if ((v38 & 1) != 0)
  {
    v39 = a2 + 49;
    if ((*(_QWORD *)(a2 + 48) & 1) != 0)
      v39 = *(_QWORD *)(a2 + 56);
    *(_DWORD *)info = 136446466;
    *(_QWORD *)&info[4] = v39;
    *(_WORD *)&info[12] = 1024;
    *(_DWORD *)&info[14] = v36;
    _os_log_impl(&dword_224FE9000, v37, OS_LOG_TYPE_DEFAULT, "PSO compilation completed for tile pipeline %{public}s in %d", info, 0x12u);
  }
  if (!*v66)
  {
    LODWORD(v40) = 0;
    goto LABEL_52;
  }
  v40 = v9 % *(unsigned int *)(v10 + 120);
  v41 = *(unsigned int *)(*(_QWORD *)(v10 + 104) + 4 * v40);
  if ((_DWORD)v41 == 0x7FFFFFFF)
  {
LABEL_52:
    v44 = *(unsigned int *)(v10 + 132);
    if ((_DWORD)v44 == 0x7FFFFFFF)
    {
      v44 = *(unsigned int *)(v10 + 128);
      v45 = v44;
      if ((_DWORD)v44 == *(_DWORD *)(v10 + 120))
      {
        re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v66, 2 * *(_DWORD *)(v10 + 124));
        LODWORD(v40) = v9 % *(unsigned int *)(v10 + 120);
        v45 = *(_DWORD *)(v10 + 128);
      }
      *(_DWORD *)(v10 + 128) = v45 + 1;
      v46 = *(_QWORD *)(v10 + 112);
      v47 = *(_DWORD *)(v46 + 24 * v44);
    }
    else
    {
      v46 = *(_QWORD *)(v10 + 112);
      v47 = *(_DWORD *)(v46 + 24 * v44);
      *(_DWORD *)(v10 + 132) = v47 & 0x7FFFFFFF;
    }
    v48 = 24 * v44;
    *(_DWORD *)(v46 + v48) = v47 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(v10 + 112) + v48) = *(_DWORD *)(*(_QWORD *)(v10 + 112) + 24 * v44) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v10 + 104) + 4 * v40);
    *(_QWORD *)(*(_QWORD *)(v10 + 112) + 24 * v44 + 8) = v9;
    v49 = *(_QWORD *)(v10 + 112) + 24 * v44;
    v38 = (_anonymous_namespace_ *)v70;
    *(_QWORD *)(v49 + 16) = v38;
    *(_DWORD *)(*(_QWORD *)(v10 + 104) + 4 * v40) = v44;
    ++*(_DWORD *)(v10 + 124);
    ++*(_DWORD *)(v10 + 136);
    v43 = *(_QWORD *)(v10 + 112) + 24 * v44;
    goto LABEL_58;
  }
  v42 = *(_QWORD *)(v10 + 112);
  while (*(_QWORD *)(v42 + 24 * v41 + 8) != v9)
  {
    LODWORD(v41) = *(_DWORD *)(v42 + 24 * v41) & 0x7FFFFFFF;
    if ((_DWORD)v41 == 0x7FFFFFFF)
      goto LABEL_52;
  }
  v43 = v42 + 24 * v41;
LABEL_58:
  v22 = v43 + 16;
  if (v36 >= 11)
  {
    *(_QWORD *)&info[16] = 0;
    v78 = 0;
    *(_QWORD *)&info[8] = 0;
    re::DynamicString::setCapacity(info, 0x80uLL);
    v50 = *(_QWORD *)(a2 + 88);
    if (v50)
    {
      v51 = *(_QWORD *)(a2 + 104);
      v52 = v50 << 6;
      do
      {
        if ((*(_BYTE *)(v51 + 8) & 1) != 0)
          v53 = *(const char **)(v51 + 16);
        else
          v53 = (const char *)(v51 + 9);
        As64Bits = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v51);
        re::DynamicString::appendf((re::DynamicString *)info, "%s=%llu ", v53, As64Bits);
        v51 += 64;
        v52 -= 64;
      }
      while (v52);
    }
    v55 = *(_QWORD *)(a2 + 56);
    if ((*(_QWORD *)(a2 + 48) & 1) == 0)
      v55 = a2 + 49;
    if ((info[8] & 1) != 0)
      v56 = *(_BYTE **)&info[16];
    else
      v56 = &info[9];
    v57 = (re *)re::DynamicString::format((re::DynamicString *)"name=%s sc=%d tgsmts=%d px=%d %d %d %d %d %d %d %d fc=%s", (re::DynamicString *)&v67, v55, *(unsigned int *)(a2 + 112), *(unsigned __int8 *)(a2 + 176), *(unsigned int *)(a2 + 116), *(unsigned int *)(a2 + 120), *(unsigned int *)(a2 + 124), *(unsigned int *)(a2 + 128), *(unsigned int *)(a2 + 132), *(unsigned int *)(a2 + 136), *(unsigned int *)(a2 + 140), *(unsigned int *)(a2 + 144), v56);
    v58 = *re::graphicsLogObjects(v57);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      if ((v68 & 1) != 0)
        v59 = *(_BYTE **)&v69[7];
      else
        v59 = v69;
      *(_DWORD *)buf = 136446210;
      v76 = v59;
      _os_log_impl(&dword_224FE9000, v58, OS_LOG_TYPE_DEFAULT, "Compiling PSO RT %{public}s", buf, 0xCu);
    }
    if (v67 && (v68 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v67 + 40))();
    if (*(_QWORD *)info && (info[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)info + 40))();
  }
  if (v70)

  if (v71)
  if (v72)

  if (v73)
  if (v74)

  return v22;
}

void re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  signed int v23;
  _BYTE v24[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v24, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v24;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(_QWORD *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = v7;
        v13 = DWORD1(v9);
        v14 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 2) & 0x80000000) != 0)
          {
            v15 = *(v14 - 1);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, (2 * v13));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
                v15 = *(v14 - 1);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 24 * v18);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 24 * v18);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            v22 = 24 * v18;
            *(_DWORD *)(v20 + v22) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v22) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18) & 0x80000000 | *(_DWORD *)(v12 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 8) = v15;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 16) = *v14;
            *v14 = 0;
            *(_DWORD *)(v12 + 4 * v17) = v18;
            v13 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v13;
            v10 = *(_DWORD *)&v24[32];
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2)
      v23 = a2;
    else
      v23 = 3;
  }
}

double re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          v8 = v6 + v4;
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          v9 = *(void **)(v6 + v4 + 16);
          if (v9)
          {

            *(_QWORD *)(v8 + 16) = 0;
            v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 24;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::TextureHandle::invalidate(re::TextureHandle *this)
{
  unsigned int *v2;
  unsigned int v3;
  const void *v4;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = (const void *)(v3 - 1);
    }
    while (__stlxr(v4, v2));
    if (v3 - 1048578 <= 0xFFEFFFFE)
    {
      re::internal::refCountCheckFailHandler(0, v2, v4);
      if ((_DWORD)v4)
        goto LABEL_6;
    }
    else if (v3 != 1)
    {
LABEL_6:
      *((_QWORD *)this + 1) = 0;
      goto LABEL_7;
    }
    re::Texture::dispose((id *)v2);
    goto LABEL_6;
  }
LABEL_7:
  *(_QWORD *)this = 0;
}

re::TextureHandle *re::TextureHandle::TextureHandle(re::TextureHandle *this, const re::TextureHandle *a2)
{
  uint64_t v3;
  unsigned int *v4;
  BOOL v5;
  unsigned int v7;
  const void *v9;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = *(_QWORD *)a2;
  v4 = (unsigned int *)*((_QWORD *)a2 + 1);
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    *(_QWORD *)this = v3;
    *((_QWORD *)this + 1) = v4;
    if (!atomic_load(v4))
    {
      v9 = (const void *)atomic_load(v4);
      re::internal::refCountCheckFailHandler((re::internal *)1, v4, v9);
    }
    do
      v7 = __ldxr(v4);
    while (__stxr(v7 + 1, v4));
    if (v7 - 0x100000 <= 0xFFEFFFFE)
      re::internal::refCountCheckFailHandler((re::internal *)1, v4, (const void *)(v7 + 1));
  }
  return this;
}

re::TextureHandle *re::TextureHandle::operator=(re::TextureHandle *this, re::TextureHandle *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v8;
  const void *v10;

  if (this != a2)
  {
    re::TextureHandle::invalidate(this);
    v4 = *(_QWORD *)a2;
    v5 = (unsigned int *)*((_QWORD *)a2 + 1);
    if (v5 && v4 != 0)
    {
      *(_QWORD *)this = v4;
      *((_QWORD *)this + 1) = v5;
      if (!atomic_load(v5))
      {
        v10 = (const void *)atomic_load(v5);
        re::internal::refCountCheckFailHandler((re::internal *)1, v5, v10);
      }
      do
        v8 = __ldxr(v5);
      while (__stxr(v8 + 1, v5));
      if (v8 - 0x100000 <= 0xFFEFFFFE)
        re::internal::refCountCheckFailHandler((re::internal *)1, v5, (const void *)(v8 + 1));
    }
  }
  return this;
}

void re::TextureHandle::metalTexture(os_unfair_lock_s **this@<X0>, _QWORD *a2@<X8>)
{
  id v4;

  if (this[1])
  {
    os_unfair_lock_lock(*this + 78);
    v4 = *(id *)&this[1][2]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(*this + 78);
  }
  else
  {
    re::TextureHandle::InvalidTexture((re::TextureHandle *)this);
    v4 = (id)re::TextureHandle::InvalidTexture(void)::invalidTexture;
  }
  *a2 = v4;
}

uint64_t *re::TextureHandle::InvalidTexture(re::TextureHandle *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    re::TextureHandle::InvalidTexture(void)::invalidTexture = 0;
  }
  return &re::TextureHandle::InvalidTexture(void)::invalidTexture;
}

void re::TextureHandle::unsynchronizedMetalTexture(os_unfair_lock_s **this@<X0>, _QWORD *a2@<X8>)
{
  id v4;

  if (this[1])
  {
    os_unfair_lock_lock(*this + 78);
    v4 = *(id *)&this[1][4]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(*this + 78);
  }
  else
  {
    re::TextureHandle::InvalidTexture((re::TextureHandle *)this);
    v4 = (id)re::TextureHandle::InvalidTexture(void)::invalidTexture;
  }
  *a2 = v4;
}

void re::TextureHandle::setMetalTexture(const re::TextureHandle *a1, void **a2)
{
  id v2;

  v2 = 0;
  re::TextureHandle::setMetalTextureAndHeap(a1, a2, &v2);
  if (v2)

}

double re::TextureHandle::setMetalTextureAndHeap(const re::TextureHandle *a1, void **a2, void **a3)
{
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  signed int v12;
  unsigned int v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  re *WeakRetained;
  const re::WeakStringID *v22;
  re *v23;
  unsigned int v24;
  unsigned int v25;
  NSObject *v26;
  double result;
  id location;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  uint64_t v33;
  uint8_t buf[4];
  const re::TextureHandle *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)a1 + 1))
  {
    v32 = 0;
    v30 = 0u;
    v31 = 0u;
    v33 = 0x7FFFFFFFLL;
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)a1 + 312));
    v6 = *((_QWORD *)a1 + 1);
    v8 = *(void **)(v6 + 16);
    v7 = (void **)(v6 + 16);
    if (*a2 == v8 && *a3 == *(void **)(*((_QWORD *)a1 + 1) + 32))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)a1 + 312));
    }
    else
    {
      NS::SharedPtr<MTL::Texture>::operator=(v7, a2);
      NS::SharedPtr<MTL::Texture>::operator=((void **)(*((_QWORD *)a1 + 1) + 32), a3);
      v9 = *((_QWORD *)a1 + 1);
      v10 = (uint64_t *)(v9 + 40);
      if (&v30 != (__int128 *)(v9 + 40) && *v10)
      {
        v11 = *(_DWORD *)(v9 + 68);
        if (v11 <= 3)
          v12 = 3;
        else
          v12 = v11;
        re::HashSetBase<re::TriggerPair,re::TriggerPair,re::internal::ValueAsKey<re::TriggerPair>,re::Hash<re::TriggerPair>,re::EqualTo<re::TriggerPair>,true,false>::init((uint64_t)&v30, *v10, v12);
        re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::copy((uint64_t)&v30, (uint64_t)v10);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)a1 + 312));
      objc_initWeak(&location, 0);
      *(_QWORD *)&v29 = 0;
      v13 = v32;
      if (v32)
      {
        v14 = 0;
        v15 = (int *)(v31 + 8);
        while (1)
        {
          v16 = *v15;
          v15 += 10;
          if (v16 < 0)
            break;
          if (v32 == ++v14)
          {
            LODWORD(v14) = v32;
            break;
          }
        }
      }
      else
      {
        LODWORD(v14) = 0;
      }
      if (v32 != (_DWORD)v14)
      {
        v17 = v14;
        v18 = v31;
        do
        {
          v19 = v18 + 40 * v17;
          v20 = (id *)(v19 + 16);
          WeakRetained = (re *)objc_loadWeakRetained((id *)(v19 + 16));
          v22 = (const re::WeakStringID *)(v19 + 24);
          if (WeakRetained)
          {
            v23 = WeakRetained;
            re::MaterialParameterBlock::enqueueTextureValueChangedDelta((re *)((char *)WeakRetained - 8), v22, a1);

          }
          else
          {
            if (v20 != &location)
            {
              objc_destroyWeak(&location);
              location = 0;
              objc_copyWeak(&location, v20);
            }
            v29 = *(_OWORD *)v22;
          }
          v18 = v31;
          if (v32 <= (int)v14 + 1)
            v24 = v14 + 1;
          else
            v24 = v32;
          while (1)
          {
            v17 = (v14 + 1);
            if (v24 - 1 == (_DWORD)v14)
              break;
            LODWORD(v14) = v14 + 1;
            v25 = v17;
            if ((*(_DWORD *)(v31 + 40 * v17 + 8) & 0x80000000) != 0)
              goto LABEL_30;
          }
          v25 = v24;
LABEL_30:
          LODWORD(v14) = v25;
        }
        while (v13 != v25);
        if ((_QWORD)v29)
        {
          v26 = *re::graphicsLogObjects(WeakRetained);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134219010;
            v35 = a1;
            v36 = 1024;
            v37 = HIDWORD(v31);
            v38 = 2048;
            v39 = *((_QWORD *)&v29 + 1);
            v40 = 2080;
            v41 = "<unknown>";
            v42 = 2048;
            v43 = v29;
            _os_log_error_impl(&dword_224FE9000, v26, OS_LOG_TYPE_ERROR, "TextureHandle (%p) tried to enqueue texture change into %d blocks. It encountered at least one expired MaterialParameterBlock (%p) which texture '%s' (hash: %llu). This suggests a missing call to 'stopTrackingMaterialParameterBlock()' or 'disconnectFromTextureHandles()'.", buf, 0x30u);
          }
        }
      }
      *(_QWORD *)&v29 = 0;
      objc_destroyWeak(&location);
    }
    return re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::deinit((uint64_t *)&v30);
  }
  return result;
}

void re::TextureHandle::unsafeReleaseMetalTextures(os_unfair_lock_s **this)
{
  re::TextureHandle *v2;
  void **v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;

  if (this[1])
  {
    os_unfair_lock_lock(*this + 78);
    re::TextureHandle::InvalidTexture(v2);
    v3 = NS::SharedPtr<MTL::Texture>::operator=((void **)&this[1][4], (void **)&re::TextureHandle::InvalidTexture(void)::invalidTexture);
    re::TextureHandle::InvalidTexture((re::TextureHandle *)v3);
    NS::SharedPtr<MTL::Texture>::operator=((void **)&this[1][2], (void **)&re::TextureHandle::InvalidTexture(void)::invalidTexture);
    v4 = this[1];

    *(_QWORD *)&v4[8]._os_unfair_lock_opaque = 0;
    v5 = this[1];

    *(_QWORD *)&v5[6]._os_unfair_lock_opaque = 0;
    os_unfair_lock_unlock(*this + 78);
  }
}

void re::TextureHandle::startTrackingMaterialParameterBlock(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v6;
  id location;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)(a1 + 8))
  {
    if (a2)
      v6 = (void *)(a2 + 8);
    else
      v6 = 0;
    objc_initWeak(&location, v6);
    v8 = *a3;
    v9 = a2;
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)a1 + 312));
    re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::add(*(_QWORD *)(a1 + 8) + 40, (uint64_t)&location);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)a1 + 312));
    v8 = 0;
    objc_destroyWeak(&location);
  }
}

uint64_t re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  unsigned int v14;

  v5 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v6 = (v5 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  v7 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_15;
  }
  v8 = v6 % v7;
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v6 % v7));
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_15:
    v14 = re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::addAsMove(a1, v8, v6, a2, (id *)a2);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + 40 * v14;
    return v13 + 16;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v10 + 40 * v9 + 32) != v4 || *(_QWORD *)(v10 + 40 * v9 + 24) != v5)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 40 * v9 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v9 == 0x7FFFFFFF)
      goto LABEL_15;
  }
  v13 = v10 + 40 * v9;
  return v13 + 16;
}

void re::TextureHandle::stopTrackingMaterialParameterBlock(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  id location;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 8))
  {
    objc_initWeak(&location, 0);
    v7 = *a3;
    v8 = a2;
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)a1 + 312));
    re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::remove(*(_QWORD *)(a1 + 8) + 40, (uint64_t)&location);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)a1 + 312));
    v7 = 0;
    objc_destroyWeak(&location);
  }
}

uint64_t re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::remove(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int *v18;
  int v19;
  uint64_t v20;
  int v21;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v5 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v6 = ((v5 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4) % v2;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(v7 + 4 * v6);
  if ((_DWORD)v8 == 0x7FFFFFFF)
    return 0;
  v10 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v10 + 40 * v8 + 32) != v4 || *(_QWORD *)(v10 + 40 * v8 + 24) != v5)
  {
    while (1)
    {
      v12 = v8;
      v13 = *(_DWORD *)(v10 + 40 * v8 + 8);
      v8 = v13 & 0x7FFFFFFF;
      if ((v13 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (*(_QWORD *)(v10 + 40 * v8 + 32) == v4
        && *(_QWORD *)(v10 + 40 * v8 + 24) == v5)
      {
        *(_DWORD *)(v10 + 40 * v12 + 8) = *(_DWORD *)(v10 + 40 * v12 + 8) & 0x80000000 | *(_DWORD *)(v10 + 40 * v8 + 8) & 0x7FFFFFFF;
        goto LABEL_16;
      }
    }
  }
  *(_DWORD *)(v7 + 4 * v6) = *(_DWORD *)(v10 + 40 * v8 + 8) & 0x7FFFFFFF;
LABEL_16:
  v15 = *(_QWORD *)(a1 + 16);
  v16 = v15 + 40 * v8;
  v19 = *(_DWORD *)(v16 + 8);
  v18 = (int *)(v16 + 8);
  v17 = v19;
  if (v19 < 0)
  {
    *v18 = v17 & 0x7FFFFFFF;
    v20 = v15 + 40 * v8;
    *(_QWORD *)(v20 + 24) = 0;
    objc_destroyWeak((id *)(v20 + 16));
    *(_QWORD *)(v20 + 16) = 0;
    v15 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v15 + 40 * v8 + 8);
  }
  v21 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v15 + 40 * v8 + 8) = *(_DWORD *)(a1 + 36) | v17 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v8;
  *(_DWORD *)(a1 + 40) = v21 + 1;
  return 1;
}

uint64_t *re::TextureHandle::InvalidHandle(re::TextureHandle *this)
{
  unsigned __int8 v1;

  {
    re::TextureHandle::InvalidHandle(void)::textureHandle = 0;
    unk_255828DF0 = 0;
  }
  return &re::TextureHandle::InvalidHandle(void)::textureHandle;
}

void re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  _QWORD *v9;
  id *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      v9 = (_QWORD *)(v8 + v6);
      if ((*(_DWORD *)(v8 + v6 + 8) & 0x80000000) != 0)
      {
        v12 = *v9;
        v10 = (id *)(v9 + 2);
        v11 = v12;
        v13 = *(unsigned int *)(a1 + 24);
        v14 = v12 % v13;
        v15 = *(unsigned int *)(a1 + 36);
        if ((_DWORD)v15 == 0x7FFFFFFF)
        {
          v15 = *(unsigned int *)(a1 + 32);
          v16 = v15;
          if ((_DWORD)v15 == (_DWORD)v13)
          {
            re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            v14 = v11 % *(unsigned int *)(a1 + 24);
            v16 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + 32) = v16 + 1;
          v17 = *(_QWORD *)(a1 + 16);
          v18 = *(_DWORD *)(v17 + 40 * v15 + 8);
        }
        else
        {
          v17 = *(_QWORD *)(a1 + 16);
          v18 = *(_DWORD *)(v17 + 40 * v15 + 8);
          *(_DWORD *)(a1 + 36) = v18 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v17 + 40 * v15 + 8) = v18 | 0x80000000;
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v15 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v15 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v14);
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v15) = v11;
        v19 = *(_QWORD *)(a1 + 16) + 40 * v15;
        *(_QWORD *)(v19 + 16) = 0;
        v19 += 16;
        objc_copyWeak((id *)v19, v10);
        *(_OWORD *)(v19 + 8) = *(_OWORD *)(v8 + v6 + 24);
        *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v14) = v15;
        ++*(_DWORD *)(a1 + 28);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 40;
    }
  }
}

void re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          *(_QWORD *)(v6 + 24) = 0;
          objc_destroyWeak((id *)(v6 + 16));
          *(_QWORD *)(v6 + 16) = 0;
          v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 40;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  id *v12;
  signed int v13;
  _BYTE v14[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v14, 0, 36);
      *(_QWORD *)&v14[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::TriggerPair,re::TriggerPair,re::internal::ValueAsKey<re::TriggerPair>,re::Hash<re::TriggerPair>,re::EqualTo<re::TriggerPair>,true,false>::init((uint64_t)v14, v4, a2);
      v5 = *(_OWORD *)v14;
      *(_OWORD *)v14 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v14[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v14[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v14[24];
      *(_OWORD *)&v14[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v14[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = (id *)(v7 + 16);
        do
        {
          if ((*(_DWORD *)(v12 - 1) & 0x80000000) != 0)
            re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::addAsMove(a1, (unint64_t)*(v12 - 2) % *(unsigned int *)(a1 + 24), (unint64_t)*(v12 - 2), (int)v12, v12);
          ++v11;
          v12 += 5;
        }
        while (v11 < v10);
      }
      re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::deinit((uint64_t *)v14);
    }
  }
  else
  {
    if (a2)
      v13 = a2;
    else
      v13 = 3;
  }
}

uint64_t re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, int a4, id *from)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 40 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9) = a3;
  v13 = *(_QWORD *)(a1 + 16) + 40 * v9;
  *(_QWORD *)(v13 + 16) = 0;
  v13 += 16;
  objc_moveWeak((id *)v13, from);
  *(_OWORD *)(v13 + 8) = *(_OWORD *)(from + 1);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

double re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          *(_QWORD *)(v6 + 24) = 0;
          objc_destroyWeak((id *)(v6 + 16));
          *(_QWORD *)(v6 + 16) = 0;
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 40;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::Texture::dispose(id *this)
{

  this[1] = 0;
  this[2] = 0;

  this[3] = 0;
  this[4] = 0;
  re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::clear((uint64_t)(this + 5));
}

uint64_t re::isSupportedPixelFormat()
{
  MTLPixelFormatGetInfoForDevice();
  return 0;
}

uint64_t re::getComponentCount()
{
  MTLPixelFormatGetInfoForDevice();
  return 0;
}

uint64_t re::isASTCPixelFormat(int a1)
{
  uint64_t result;
  unsigned int v3;

  result = 1;
  switch(a1)
  {
    case 0:
    case 1:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 40:
    case 41:
    case 42:
    case 43:
    case 53:
    case 54:
    case 55:
    case 60:
    case 62:
    case 63:
    case 64:
    case 65:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 80:
    case 81:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 103:
    case 104:
    case 105:
    case 110:
    case 112:
    case 113:
    case 114:
    case 115:
    case 123:
    case 124:
    case 125:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 140:
    case 141:
    case 142:
    case 143:
    case 150:
    case 151:
    case 152:
    case 153:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 170:
    case 172:
    case 174:
    case 176:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
LABEL_3:
      result = 0;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 26:
    case 27:
    case 28:
    case 29:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 56:
    case 57:
    case 58:
    case 59:
    case 61:
    case 66:
    case 67:
    case 68:
    case 69:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 106:
    case 107:
    case 108:
    case 109:
    case 111:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 126:
    case 127:
    case 128:
    case 129:
    case 136:
    case 137:
    case 138:
    case 139:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 168:
    case 169:
    case 171:
    case 173:
    case 175:
    case 177:
      return result;
    default:
      switch(a1)
      {
        case 500:
        case 501:
        case 502:
        case 503:
        case 504:
        case 505:
        case 506:
        case 507:
        case 508:
        case 509:
        case 510:
        case 520:
        case 521:
        case 522:
        case 523:
        case 524:
        case 525:
        case 526:
        case 527:
        case 528:
        case 529:
        case 530:
        case 540:
        case 541:
        case 542:
        case 543:
        case 544:
        case 545:
        case 546:
        case 547:
        case 548:
        case 550:
        case 551:
        case 552:
        case 553:
        case 554:
        case 555:
        case 562:
        case 563:
        case 564:
        case 565:
        case 566:
        case 567:
        case 568:
        case 569:
        case 607:
        case 608:
        case 609:
        case 610:
        case 611:
        case 612:
        case 613:
        case 628:
        case 629:
          goto LABEL_3;
        case 511:
        case 512:
        case 513:
        case 514:
        case 515:
        case 516:
        case 517:
        case 518:
        case 519:
        case 531:
        case 532:
        case 533:
        case 534:
        case 535:
        case 536:
        case 537:
        case 538:
        case 539:
        case 549:
        case 556:
        case 557:
        case 558:
        case 559:
        case 560:
        case 561:
        case 570:
        case 571:
        case 572:
        case 573:
        case 574:
        case 575:
        case 576:
        case 577:
        case 578:
        case 579:
        case 580:
        case 581:
        case 582:
        case 583:
        case 584:
        case 585:
        case 586:
        case 587:
        case 588:
        case 589:
        case 590:
        case 591:
        case 592:
        case 593:
        case 594:
        case 595:
        case 596:
        case 597:
        case 598:
        case 599:
        case 600:
        case 601:
        case 602:
        case 603:
        case 604:
        case 605:
        case 606:
        case 614:
        case 615:
        case 616:
        case 617:
        case 618:
        case 619:
        case 620:
        case 621:
        case 622:
        case 623:
        case 624:
        case 625:
        case 626:
        case 627:
          return result;
        default:
          v3 = a1 - 240;
          if (v3 <= 0x16 && ((1 << v3) & 0x70B403) != 0)
            goto LABEL_3;
          break;
      }
      break;
  }
  return result;
}

uint64_t re::translateSRGBPixelFormatToLinear(uint64_t result)
{
  if ((int)result <= 132)
  {
    if ((int)result <= 70)
    {
      if ((_DWORD)result == 11)
      {
        return 10;
      }
      else if ((_DWORD)result == 31)
      {
        return 30;
      }
    }
    else
    {
      switch((_DWORD)result)
      {
        case 0x47:
          return 70;
        case 0x51:
          return 80;
        case 0x83:
          return 130;
      }
    }
  }
  else
  {
    switch((int)result)
    {
      case 153:
        result = 152;
        break;
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 166:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 180:
      case 182:
      case 184:
      case 185:
      case 191:
        return result;
      case 165:
        result = 164;
        break;
      case 167:
        result = 166;
        break;
      case 179:
        result = 178;
        break;
      case 181:
        result = 180;
        break;
      case 183:
        result = 182;
        break;
      case 186:
        result = 204;
        break;
      case 187:
        result = 205;
        break;
      case 188:
        result = 206;
        break;
      case 189:
        result = 207;
        break;
      case 190:
        result = 208;
        break;
      case 192:
        result = 210;
        break;
      case 193:
        result = 211;
        break;
      case 194:
        result = 212;
        break;
      case 195:
        result = 213;
        break;
      case 196:
        result = 214;
        break;
      case 197:
        result = 215;
        break;
      case 198:
        result = 216;
        break;
      case 199:
        result = 217;
        break;
      case 200:
        result = 218;
        break;
      default:
        if ((_DWORD)result == 133)
        {
          result = 132;
        }
        else if ((_DWORD)result == 135)
        {
          result = 134;
        }
        break;
    }
  }
  return result;
}

uint64_t re::translateLinearPixelFormatToSRGB(uint64_t result)
{
  if ((int)result <= 163)
  {
    if ((int)result > 129)
    {
      if ((int)result > 133)
      {
        if ((_DWORD)result == 134)
        {
          return 135;
        }
        else if ((_DWORD)result == 152)
        {
          return 153;
        }
      }
      else if ((_DWORD)result == 130)
      {
        return 131;
      }
      else if ((_DWORD)result == 132)
      {
        return 133;
      }
    }
    else if ((int)result > 69)
    {
      if ((_DWORD)result == 70)
      {
        return 71;
      }
      else if ((_DWORD)result == 80)
      {
        return 81;
      }
    }
    else if ((_DWORD)result == 10)
    {
      return 11;
    }
    else if ((_DWORD)result == 30)
    {
      return 31;
    }
  }
  else
  {
    switch((int)result)
    {
      case 178:
        result = 179;
        break;
      case 179:
      case 181:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
      case 193:
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 209:
        return result;
      case 180:
        result = 181;
        break;
      case 182:
        result = 183;
        break;
      case 204:
        result = 186;
        break;
      case 205:
        result = 187;
        break;
      case 206:
        result = 188;
        break;
      case 207:
        result = 189;
        break;
      case 208:
        result = 190;
        break;
      case 210:
        result = 192;
        break;
      case 211:
        result = 193;
        break;
      case 212:
        result = 194;
        break;
      case 213:
        result = 195;
        break;
      case 214:
        result = 196;
        break;
      case 215:
        result = 197;
        break;
      case 216:
        result = 198;
        break;
      case 217:
        result = 199;
        break;
      case 218:
        result = 200;
        break;
      default:
        if ((_DWORD)result == 164)
        {
          result = 165;
        }
        else if ((_DWORD)result == 166)
        {
          result = 167;
        }
        break;
    }
  }
  return result;
}

uint64_t re::isHDR(int a1)
{
  uint64_t result;

  result = 1;
  switch(a1)
  {
    case 0:
    case 1:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 22:
    case 23:
    case 24:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 40:
    case 41:
    case 42:
    case 43:
    case 53:
    case 54:
    case 60:
    case 62:
    case 63:
    case 64:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 80:
    case 81:
    case 90:
    case 91:
    case 94:
    case 103:
    case 104:
    case 110:
    case 112:
    case 113:
    case 114:
    case 123:
    case 124:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 140:
    case 141:
    case 142:
    case 143:
    case 152:
    case 153:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 170:
    case 172:
    case 174:
    case 176:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 240:
    case 241:
    case 250:
    case 252:
    case 253:
    case 255:
    case 260:
    case 261:
    case 262:
      goto LABEL_4;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 61:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 92:
    case 93:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 111:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 136:
    case 137:
    case 138:
    case 139:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 168:
    case 169:
    case 171:
    case 173:
    case 175:
    case 177:
    case 184:
    case 185:
    case 191:
    case 201:
    case 202:
    case 203:
    case 209:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 251:
    case 254:
    case 256:
    case 257:
    case 258:
    case 259:
      return result;
    default:
      if ((a1 - 500) <= 0x3E && ((1 << (a1 + 12)) & 0x400DFF007FF007FFLL) != 0
        || (a1 - 628) < 2)
      {
LABEL_4:
        result = 0;
      }
      break;
  }
  return result;
}

re::TargetDisplayInfoProvider *re::TargetDisplayInfoProvider::TargetDisplayInfoProvider(re::TargetDisplayInfoProvider *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v2 = re::globalAllocators(this);
  *((_QWORD *)this + 3) = v2[2];
  *((_QWORD *)this + 4) = 0;
  v3 = re::globalAllocators((re *)v2);
  *((_QWORD *)this + 9) = v3[2];
  *((_QWORD *)this + 10) = 0;
  v4 = re::globalAllocators((re *)v3);
  *((_QWORD *)this + 15) = v4[2];
  *((_QWORD *)this + 16) = 0;
  v5 = re::globalAllocators((re *)v4);
  *((_QWORD *)this + 21) = v5[2];
  *((_QWORD *)this + 22) = 0;
  v6 = re::globalAllocators((re *)v5);
  *((_QWORD *)this + 27) = v6[2];
  *((_QWORD *)this + 28) = 0;
  v7 = re::globalAllocators((re *)v6);
  *((_QWORD *)this + 33) = v7[2];
  *((_QWORD *)this + 34) = 0;
  v8 = re::globalAllocators((re *)v7);
  *((_QWORD *)this + 39) = v8[2];
  *((_QWORD *)this + 40) = 0;
  v9 = re::globalAllocators((re *)v8);
  *((_QWORD *)this + 45) = v9[2];
  *((_QWORD *)this + 46) = 0;
  v10 = re::globalAllocators((re *)v9);
  *((_QWORD *)this + 51) = v10[2];
  *((_QWORD *)this + 52) = 0;
  v11 = re::globalAllocators((re *)v10);
  *((_QWORD *)this + 57) = v11[2];
  *((_QWORD *)this + 58) = 0;
  v12 = re::globalAllocators((re *)v11);
  *((_QWORD *)this + 63) = v12[2];
  *((_QWORD *)this + 64) = 0;
  v13 = re::globalAllocators((re *)v12);
  *((_QWORD *)this + 69) = v13[2];
  *((_QWORD *)this + 70) = 0;
  v14 = re::globalAllocators((re *)v13);
  *((_QWORD *)this + 75) = v14[2];
  *((_QWORD *)this + 76) = 0;
  v15 = re::globalAllocators((re *)v14);
  *((_QWORD *)this + 81) = v15[2];
  *((_QWORD *)this + 82) = 0;
  v16 = re::globalAllocators((re *)v15);
  *((_QWORD *)this + 87) = v16[2];
  *((_QWORD *)this + 88) = 0;
  v17 = re::globalAllocators((re *)v16);
  *((_QWORD *)this + 93) = v17[2];
  *((_QWORD *)this + 94) = 0;
  v18 = re::globalAllocators((re *)v17);
  *((_QWORD *)this + 98) = v18[2];
  *((_QWORD *)this + 99) = 0;
  v19 = re::globalAllocators((re *)v18);
  *((_QWORD *)this + 103) = v19[2];
  *((_QWORD *)this + 105) = 0;
  *((_QWORD *)this + 106) = 0;
  *((_QWORD *)this + 104) = 0;
  v20 = re::globalAllocators((re *)v19);
  *((_QWORD *)this + 110) = v20[2];
  *((_QWORD *)this + 111) = 0;
  v21 = re::globalAllocators((re *)v20);
  *((_QWORD *)this + 115) = v21[2];
  *((_QWORD *)this + 116) = 0;
  v22 = re::globalAllocators((re *)v21);
  *((_QWORD *)this + 127) = v22[2];
  *((_QWORD *)this + 128) = 0;
  v23 = re::globalAllocators((re *)v22);
  *((_QWORD *)this + 139) = v23[2];
  *((_QWORD *)this + 140) = 0;
  v24 = re::globalAllocators((re *)v23);
  *((_QWORD *)this + 145) = v24[2];
  *((_QWORD *)this + 146) = 0;
  v25 = re::globalAllocators((re *)v24);
  *((_QWORD *)this + 151) = v25[2];
  *((_QWORD *)this + 152) = 0;
  *((_QWORD *)this + 163) = re::globalAllocators((re *)v25)[2];
  *((_QWORD *)this + 164) = 0;
  *((_DWORD *)this + 10) = 1092616192;
  *((_DWORD *)this + 22) = 100;
  *((_DWORD *)this + 34) = 100;
  *((_DWORD *)this + 46) = 0;
  *((_BYTE *)this + 232) = 1;
  *((_DWORD *)this + 70) = 1176256512;
  *((_DWORD *)this + 82) = 1134367843;
  *((_DWORD *)this + 94) = 0;
  *((_DWORD *)this + 106) = 1120403456;
  *((_DWORD *)this + 118) = 100;
  *((_DWORD *)this + 130) = 1065353216;
  *((_DWORD *)this + 142) = 1065353216;
  *((_BYTE *)this + 616) = 3;
  *((_DWORD *)this + 166) = 1065353216;
  *((_DWORD *)this + 178) = 1065353216;
  *((_QWORD *)this + 105) = 32;
  v26 = (_OWORD *)operator new[]();
  *((_QWORD *)this + 106) = v26;
  v26[4] = xmmword_226133524;
  v26[5] = unk_226133534;
  v26[6] = xmmword_226133544;
  v26[7] = unk_226133554;
  *v26 = re::kDefaulLUTDomainEntry;
  v26[1] = unk_2261334F4;
  v26[2] = xmmword_226133504;
  v26[3] = unk_226133514;
  v27 = MEMORY[0x24BDAEDF8];
  v28 = *MEMORY[0x24BDAEDF8];
  v29 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 16);
  v30 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 32);
  v31 = *MEMORY[0x24BDAEDF8];
  *((_OWORD *)this + 60) = v29;
  *((_OWORD *)this + 61) = v30;
  *((_OWORD *)this + 59) = v28;
  *((_OWORD *)this + 65) = v31;
  *((_OWORD *)this + 66) = v29;
  v32 = *(_OWORD *)(v27 + 32);
  *((_OWORD *)this + 67) = v32;
  *((_DWORD *)this + 282) = 1120403456;
  *((_DWORD *)this + 294) = 1120403456;
  *((_OWORD *)this + 77) = v31;
  *((_OWORD *)this + 78) = v29;
  *((_OWORD *)this + 79) = v32;
  *((_DWORD *)this + 330) = 1065353216;
  return this;
}

float re::TargetDisplayInfoProvider::{unnamed type#1}::operator()(uint64_t a1)
{
  uint64_t v2;
  float result;
  unsigned __int8 v4;
  NSObject *v5;
  uint8_t v6[16];

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  else
  {
    do
      v4 = __ldaxr(re::TargetDisplayInfoProvider::{unnamed type#1}::operator()(void)const::__FILE____LINE___logged);
    while (__stlxr(1u, re::TargetDisplayInfoProvider::{unnamed type#1}::operator()(void)const::__FILE____LINE___logged));
    if ((v4 & 1) == 0)
    {
      v5 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v6 = 0;
        _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "Display min brightness nits provider has not been set.", v6, 2u);
      }
    }
    return *(float *)(a1 + 40);
  }
  return result;
}

void re::TargetDisplayInfoProvider::~TargetDisplayInfoProvider(re::TargetDisplayInfoProvider *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 106);
  if (v2)
    MEMORY[0x227693394](v2, 0x1000C8052888210);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 1280);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 1184);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 1136);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 1088);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 992);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 896);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 856);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 800);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 760);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 720);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 672);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 624);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 576);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 528);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 480);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 432);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 384);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 336);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 288);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 240);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 192);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 144);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 96);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 48);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this);
}

void re::MaterialDefinition::deinit(re::MaterialDefinition *this)
{
  re *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  re *v33;
  uint64_t v34;
  uint64_t *v35;

  re::ShaderParameterTable::deinit((re::MaterialDefinition *)((char *)this + 272));
  re::TextureParameterTable::deinit((re::MaterialDefinition *)((char *)this + 800));
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 160);
  v4 = (_QWORD *)((char *)this + 120);
  v3 = *((_QWORD *)this + 15);
  if (v3)
  {
    v5 = (uint64_t **)*((_QWORD *)this + 16);
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      if (*v5)
      {
        v8 = re::globalAllocators(v2);
        v9 = v8[2];
        v10 = (id)*v7;
        if (*v7)
        {
          v11 = re::globalAllocators((re *)v8);
          (*(void (**)(uint64_t, id))(*(_QWORD *)v11[2] + 40))(v11[2], v10);
          *v7 = 0;
        }
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v7 + 349);
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v7 + 343);
        objc_destroyWeak((id *)v7 + 342);
        v7[342] = 0;
        v12 = v7[337];
        if (v12)
        {
          v13 = v7[338];
          if (v13)
          {
            v14 = (void *)v7[339];
            bzero(v14, 8 * v13);
            (*(void (**)(uint64_t, void *))(*(_QWORD *)v12 + 40))(v12, v14);
            v7[338] = 0;
            v7[339] = 0;
          }
          v7[337] = 0;
        }
        re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v7 + 331);
        if (*((_BYTE *)v7 + 2632))
          v7[330] = 0;
        re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit(v7 + 323);
        v15.n128_f64[0] = re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit(v7 + 315);
        v16 = v7[309];
        if (v16)
        {
          if ((v7[310] & 1) != 0)
            (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v16 + 40))(v16, v7[311], v15.n128_f64[0]);
          v15 = 0uLL;
          *(_OWORD *)(v7 + 309) = 0u;
          *(_OWORD *)(v7 + 311) = 0u;
        }
        v17 = v7[305];
        if (v17)
        {
          if ((v7[306] & 1) != 0)
            (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v17 + 40))(v17, v7[307], v15);
          *(_OWORD *)(v7 + 305) = 0u;
          *(_OWORD *)(v7 + 307) = 0u;
        }
        re::MaterialParameterTable::~MaterialParameterTable((re::MaterialParameterTable *)(v7 + 162));
        re::MaterialParameterTable::~MaterialParameterTable((re::MaterialParameterTable *)(v7 + 21));
        v18 = v7[16];
        if (v18)
        {
          if (v7[20])
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
          v7[20] = 0;
          v7[17] = 0;
          v7[18] = 0;
          v7[16] = 0;
          ++*((_DWORD *)v7 + 38);
        }
        re::FixedArray<re::TechniqueFunctionConstant>::deinit(v7 + 6);
        re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(v7 + 1);
        v2 = (re *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 40))(v9, v7);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v19.n128_f64[0] = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 2);
  v20 = *((_QWORD *)this + 14);
  if (v20)
  {
    if (*v4)
    {
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v20 + 40))(v20, *((_QWORD *)this + 16), v19.n128_f64[0]);
      *v4 = 0;
      *((_QWORD *)this + 16) = 0;
    }
    *((_QWORD *)this + 14) = 0;
  }
  v21 = *((unsigned int *)this + 42);
  if ((_DWORD)v21)
  {
    v22 = 0;
    v23 = (int *)*((_QWORD *)this + 19);
    while (1)
    {
      v24 = *v23;
      v23 += 12;
      if (v24 < 0)
        break;
      if (v21 == ++v22)
      {
        LODWORD(v22) = *((_DWORD *)this + 42);
        break;
      }
    }
  }
  else
  {
    LODWORD(v22) = 0;
  }
  if ((_DWORD)v21 != (_DWORD)v22)
  {
    v25 = v22;
    v26 = *((_DWORD *)this + 42);
    do
    {
      v27 = *((_QWORD *)this + 19) + 48 * v25;
      v30 = *(_QWORD *)(v27 + 16);
      v29 = (_QWORD *)(v27 + 16);
      v28 = v30;
      if (v30)
      {
        if (v29[1])
        {
          (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v28 + 40))(v28, v29[2], v19);
          v29[1] = 0;
          v29[2] = 0;
          v26 = *((_DWORD *)this + 42);
        }
        *v29 = 0;
      }
      if (v26 <= (int)v22 + 1)
        v31 = v22 + 1;
      else
        v31 = v26;
      while (1)
      {
        v25 = (v22 + 1);
        if (v31 - 1 == (_DWORD)v22)
          break;
        LODWORD(v22) = v22 + 1;
        v32 = v25;
        if ((*(_DWORD *)(*((_QWORD *)this + 19) + 48 * v25) & 0x80000000) != 0)
          goto LABEL_49;
      }
      v32 = v31;
LABEL_49:
      LODWORD(v22) = v32;
    }
    while ((_DWORD)v21 != v32);
  }
  re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 17);
  v34 = *((_QWORD *)this + 178);
  if (v34)
  {
    v35 = re::globalAllocators(v33);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35[2] + 40))(v35[2], v34);
  }
  *((_QWORD *)this + 178) = 0;
}

double re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::EntryWithoutHash::free((_QWORD *)(a1[2] + v3));
        ++v4;
        v3 += 48;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

re::MaterialInstance *re::MaterialInstance::MaterialInstance(re::MaterialInstance *this, re::MaterialManager *a2)
{
  uint64_t v4;
  unint64_t v5;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)v4 = &off_24ED73670;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 44) = 0u;
  *(_QWORD *)(v4 + 60) = 0x7FFFFFFFLL;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_DWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 156) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 27) = 0;
  re::MaterialParameterTable::MaterialParameterTable((re::MaterialParameterTable *)(v4 + 224));
  *((_QWORD *)this + 169) = 0;
  *((_BYTE *)this + 1369) = 0;
  *((_OWORD *)this + 86) = 0u;
  do
    v5 = __ldaxr((unint64_t *)&re::MaterialInstance::g_lastInstanceId);
  while (__stlxr(v5 + 1, (unint64_t *)&re::MaterialInstance::g_lastInstanceId));
  *((_QWORD *)this + 172) = v5;
  *((_QWORD *)this + 173) = a2;
  return this;
}

void re::MaterialInstance::~MaterialInstance(re::MaterialInstance *this)
{
  _anonymous_namespace_ *v2;
  re *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_24ED73670;
  v2 = (_anonymous_namespace_ *)*((_QWORD *)this + 173);
  if (v2)
    re::MaterialManager::destroyMaterial(v2, *((_QWORD *)this + 172), (__int128 *)((char *)this + 72));
  re::ShaderParameterTable::deinit((re::MaterialInstance *)((char *)this + 248));
  re::TextureParameterTable::deinit((re::MaterialInstance *)((char *)this + 776));
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 157);
  re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::deinit((_QWORD *)this + 9);
  re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::deinit((_QWORD *)this + 12);
  re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 3);
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {

    *((_QWORD *)this + 2) = 0;
  }
  v5 = *((_QWORD *)this + 169);
  if (v5)
  {
    v6 = re::globalAllocators(v3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6[2] + 40))(v6[2], v5);
  }
  *((_QWORD *)this + 169) = 0;
  re::MaterialParameterTable::~MaterialParameterTable((re::MaterialInstance *)((char *)this + 224));
  re::FixedArray<re::LinkedFunction>::deinit((_QWORD *)this + 24);
  re::FixedArray<re::LinkedFunction>::deinit((_QWORD *)this + 21);
  v7 = *((_QWORD *)this + 15);
  if (v7)
  {
    v8 = *((unsigned int *)this + 38);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 24 * v8;
      do
      {
        v11 = *((_QWORD *)this + 17);
        v12 = *(_DWORD *)(v11 + v9);
        if (v12 < 0)
        {
          v13 = v11 + v9;
          *(_DWORD *)v13 = v12 & 0x7FFFFFFF;
          *(_QWORD *)(v13 + 8) = 0;
        }
        v9 += 24;
      }
      while (v10 != v9);
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 16));
    *((_DWORD *)this + 38) = 0;
    *(_OWORD *)((char *)this + 120) = 0u;
    *(_OWORD *)((char *)this + 136) = 0u;
    *(_QWORD *)((char *)this + 156) = 0x7FFFFFFFLL;
  }
  re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::deinit((_QWORD *)this + 12);
  re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::deinit((_QWORD *)this + 9);
  re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 3);
  v14 = *((_QWORD *)this + 2);
  if (v14)
  {

    *((_QWORD *)this + 2) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::MaterialInstance::~MaterialInstance(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::SharedPersistentObject<re::MaterialInstance>::allocator(re *a1)
{
  return re::globalAllocators(a1)[2];
}

_QWORD *re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (_QWORD *)(result[2] + 48);
      v5 = 88 * v2;
      do
      {
        v6 = v4 - 6;
        if (*v4)
        {
          if (v4[1])
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[2]);
            v4[1] = 0;
            v4[2] = 0;
          }
          *v4 = 0;
        }
        if (*v6)
        {
          if ((*(_BYTE *)(v4 - 5) & 1) != 0)
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v6 + 40))(*v6, *(v4 - 4));
          *(_OWORD *)v6 = 0u;
          *((_OWORD *)v4 - 2) = 0u;
        }
        v4 += 11;
        v5 -= 88;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::EntryWithoutHash::free(_QWORD *result)
{
  _QWORD *v1;

  if ((*(_DWORD *)result & 0x80000000) != 0)
  {
    v1 = result;
    *(_DWORD *)result &= ~0x80000000;
    result = (_QWORD *)result[2];
    if (result)
    {
      if (v1[3])
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 40))(result, v1[4]);
        v1[3] = 0;
        v1[4] = 0;
      }
      v1[2] = 0;
    }
  }
  return result;
}

uint64_t re::DeformationFencePool::init(re::DeformationFencePool *this, const re::mtl::Device *a2)
{
  re::DeformationFencePool *v2;
  char *v3;
  char *v4;
  _QWORD *v5;
  _anonymous_namespace_ *v6;

  v2 = this;
  *(_QWORD *)this = a2;
  v3 = (char *)this + 8;
  v4 = (char *)this + 520;
  v5 = (_QWORD *)((char *)this + 8);
  do
  {
    *v5 = 0xFFFFFFFFFFFFFFFLL;
    v5 += 8;
    v3 = (char *)v5;
  }
  while (v5 != (_QWORD *)v4);
  *((_QWORD *)v2 + 65) = 0;
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Fence>,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<NS::SharedPtr<MTL::Fence>,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::DeformationFencePool::deinit(re::DeformationFencePool *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = 0;
  v2 = (char *)this + 8;
  v3 = (char *)this + 520;
  do
  {
    v4 = (uint64_t)(v2 + 8);
    *(_QWORD *)v2 = 0xFFFFFFFFFFFFFFFLL;
    v2 += 64;
    re::BucketArray<unsigned long,8ul>::deinit(v4);
  }
  while (v2 != v3);
  *((_QWORD *)this + 65) = 0;
  re::BucketArray<unsigned long,8ul>::deinit((uint64_t)this + 528);
  return re::BucketArray<NS::SharedPtr<MTL::Fence>,32ul>::deinit((uint64_t)this + 584);
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Fence>,32ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  id *v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (id *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[](a1, i);
      if (*v4)
      {

        *v4 = 0;
      }
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::DeformationFencePool::setCurrentFrame(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result;
  v4 = a2 & 0xFFFFFFFFFFFFFFFLL;
  if ((a2 & 0xFFFFFFFFFFFFFFFLL) != 0xFFFFFFFFFFFFFFFLL)
  {
    v5 = (_QWORD *)(result + 8);
    v6 = (_QWORD *)(result + 520);
    do
    {
      v7 = *v5 & 0xFFFFFFFFFFFFFFFLL;
      if (v7 != 0xFFFFFFFFFFFFFFFLL && v7 <= v4)
      {
        v9 = v5[6];
        if (v9)
        {
          for (i = 0; i != v9; ++i)
          {
            v11 = *(_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)(v5 + 1), i);
            *(_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::addUninitialized(v3 + 528) = v11;
          }
        }
        *v5 = 0xFFFFFFFFFFFFFFFLL;
        result = re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::clear((uint64_t)(v5 + 1));
      }
      v5 += 8;
    }
    while (v5 != v6);
  }
  v12 = a3;
  v13 = a3 & 0xFFFFFFFFFFFFFFFLL;
  v14 = v3 + ((unint64_t)(a3 & 7) << 6);
  v16 = *(_QWORD *)(v14 + 8);
  v15 = (_QWORD *)(v14 + 8);
  *(_QWORD *)(v3 + 520) = v15;
  v17 = v16 & 0xFFFFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFFFFLL) != 0xFFFFFFFFFFFFFFFLL)
    goto LABEL_15;
  if (v17 != 0xFFFFFFFFFFFFFFFLL)
  {
    do
    {
      re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Overlapped frame (%llu) with current frame (%llu) detected! Last completed frame: %llu", "currentFrame == m_currentPerFrameFences->frameCount || !m_currentPerFrameFences->frameCount.isValid()", "setCurrentFrame", 53, v17, v13, v4);
      result = _os_crash();
      __break(1u);
LABEL_15:
      ;
    }
    while (v13 != v17 && v17 != 0xFFFFFFFFFFFFFFFLL);
  }
  *v15 = v12;
  return result;
}

uint64_t re::DeformationFencePool::allocateFence(re::DeformationFencePool *this)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = *((_QWORD *)this + 71);
  if (v2)
  {
    v3 = *(_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)this + 528, v2 - 1);
    re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)this + 528, *((_QWORD *)this + 71) - 1);
    --*((_QWORD *)this + 71);
    ++*((_DWORD *)this + 144);
LABEL_5:
    *(_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::addUninitialized(*((_QWORD *)this + 65) + 8) = v3;
    return v3;
  }
  v4 = objc_msgSend(**(id **)this, sel_newFence);
  *(_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Fence>,32ul>::addUninitialized((uint64_t)this + 584) = v4;
  v6 = *((_QWORD *)this + 78);
  if (v6)
  {
    v3 = re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)this + 584, v6 - 1);
    goto LABEL_5;
  }
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t i;

  v1 = result;
  v2 = *(_QWORD *)(result + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
      result = re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v1, i);
  }
  *(_QWORD *)(v1 + 40) = 0;
  ++*(_DWORD *)(v1 + 48);
  return result;
}

uint64_t *re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 64, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::BucketArray<NS::SharedPtr<MTL::Fence>,32ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 256, 0);
        result = (uint64_t *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 8 * v3)
  {
    re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 8) >> 3);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 3));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 7);
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Fence>,32ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 32 * v3)
  {
    re::BucketArray<NS::SharedPtr<MTL::Fence>,32ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 32) >> 5);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 5)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 5));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 0x1F);
}

uint64_t re::mesh_traversal::traverseMeshScene(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  __int128 *v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v57;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  _OWORD v63[4];
  uint64_t v64;
  __int128 v65;
  _BYTE v66[48];
  __int128 v67;
  unint64_t v68;
  char v69;
  __int128 v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  char v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  int v87;
  const char *v88;
  __int16 v89;
  int v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  unint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  result = (**(uint64_t (***)(uint64_t))a1)(a1);
  if (!(_DWORD)result)
    return result;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(__int128 **)(a2 + 24);
  if (v7)
    v9 = *(_QWORD *)(v7 + 96);
  else
    v9 = 0;
  v10 = *(_QWORD *)(a2 + 544);
  if (!v10)
    v10 = *(_QWORD *)(a2 + 416);
  v54 = v10;
  v55 = *(_QWORD *)(a2 + 416);
  v53 = *(_BYTE *)(a2 + 426);
  v62 = *(_OWORD *)(a2 + 352);
  v11 = *(__int128 **)(a2 + 32);
  v12 = *(__int128 **)(a2 + 480);
  v13 = *(_BYTE *)(a2 + 640);
  v65 = *v8;
  if (!*(_QWORD *)(a2 + 8))
    return result;
  v61 = 0;
  v14 = 0;
  v49 = a3 + 8;
  v50 = a3 + 72;
  v48 = (uint64_t)v8 + 40;
  v44 = v9;
  v45 = v8;
  v46 = v13;
  do
  {
    v15 = re::DataArray<re::MeshInstance>::get(v50, *(_QWORD *)(*(_QWORD *)a2 + 8 * v14));
    v16 = re::DataArray<re::MeshModel>::get(v49, *(_QWORD *)(v15 + 16));
    v17 = *((_QWORD *)v8 + 3);
    if (v17 <= v14)
      goto LABEL_44;
    v18 = v16;
    v19 = v48;
    if ((v8[2] & 1) == 0)
      v19 = *((_QWORD *)v8 + 6);
    v20 = *(unsigned int *)(v19 + 4 * v14);
    if (v9)
    {
      v17 = *(_QWORD *)(v9 + 8);
      if (v17 <= v14)
        goto LABEL_45;
      v52 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 24 * v14 + 16);
      v57 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 24 * v14 + 8);
    }
    else
    {
      v52 = 0;
      v57 = 0;
    }
    v21 = 0;
    v22 = *(_QWORD *)((unint64_t)&v65 & 0xFFFFFFFFFFFFFFF7 | (8 * (v20 & 1))) + ((16 * v20) & 0xFFFFFFFE0);
    v59 = *(_QWORD *)(a2 + 400);
    v60 = *(_QWORD *)(a2 + 392);
    v23 = *(float32x4_t *)(a2 + 48);
    v24 = *(float32x4_t *)(a2 + 64);
    v25 = *(float32x4_t *)(a2 + 80);
    v26 = *(float32x4_t *)(a2 + 96);
    v27 = *(_OWORD *)(v15 + 48);
    v28 = *(_OWORD *)(v15 + 64);
    v29 = *(_OWORD *)(v15 + 80);
    *(_OWORD *)v66 = *(_OWORD *)(v15 + 32);
    *(_OWORD *)&v66[16] = v27;
    *(_OWORD *)&v66[32] = v28;
    v67 = v29;
    do
    {
      *(__int128 *)((char *)&v74 + v21) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*(_OWORD *)&v66[v21])), v24, *(float32x2_t *)&v66[v21], 1), v25, *(float32x4_t *)&v66[v21], 2), v26, *(float32x4_t *)&v66[v21], 3);
      v21 += 16;
    }
    while (v21 != 64);
    v63[0] = v74;
    v63[1] = v75;
    v63[2] = v76;
    v63[3] = v77;
    *(_QWORD *)v66 = v15;
    *(_QWORD *)&v66[8] = v16;
    *(_QWORD *)&v66[16] = v63;
    *(_QWORD *)&v66[24] = v22;
    *(_OWORD *)&v66[32] = *(_OWORD *)(a2 + 112);
    *(_QWORD *)&v67 = a2 + 408;
    *((_QWORD *)&v67 + 1) = v60;
    v68 = v59;
    v69 = *(_BYTE *)(a2 + 344);
    v70 = v62;
    v71 = v14;
    v72 = 0;
    v73 = v13;
    result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 8))(a1, v66);
    if ((result & 1) == 0)
    {
      v32 = *(_QWORD *)(v18 + 56);
      goto LABEL_40;
    }
    v30 = *(_QWORD *)(v15 + 104);
    v51 = *(_QWORD *)(v15 + 112);
    v31 = *v11;
    v85 = *v12;
    v86 = v31;
    v32 = *(_QWORD *)(v18 + 56);
    if (!v32)
      goto LABEL_38;
    v47 = v14;
    v33 = 0;
    v34 = 4 * v61;
    v17 = 32 * v61;
    v35 = 474;
    do
    {
      v14 = *((_QWORD *)v11 + 3);
      if (v14 <= v61 + v33)
      {
        v64 = 0;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v74 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v87 = 136315906;
        v88 = "operator[]";
        v89 = 1024;
        v90 = 866;
        v91 = 2048;
        v92 = v61 + v33;
        v93 = 2048;
        v94 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_43:
        v64 = 0;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v74 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v87 = 136315906;
        v88 = "operator[]";
        v89 = 1024;
        v90 = 866;
        v91 = 2048;
        v92 = v61 + v33;
        v93 = 2048;
        v94 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_44:
        *(_QWORD *)&v63[0] = 0;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v74 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v66 = 136315906;
        *(_QWORD *)&v66[4] = "operator[]";
        *(_WORD *)&v66[12] = 1024;
        *(_DWORD *)&v66[14] = 866;
        *(_WORD *)&v66[18] = 2048;
        *(_QWORD *)&v66[20] = v14;
        *(_WORD *)&v66[28] = 2048;
        *(_QWORD *)&v66[30] = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_45:
        *(_QWORD *)&v63[0] = 0;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v74 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v66 = 136315906;
        *(_QWORD *)&v66[4] = "operator[]";
        *(_WORD *)&v66[12] = 1024;
        *(_DWORD *)&v66[14] = 476;
        *(_WORD *)&v66[18] = 2048;
        *(_QWORD *)&v66[20] = v14;
        *(_WORD *)&v66[28] = 2048;
        *(_QWORD *)&v66[30] = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v36 = (uint64_t)v11 + 40;
      if ((v11[2] & 1) == 0)
        v36 = *((_QWORD *)v11 + 6);
      v14 = *((_QWORD *)v12 + 3);
      if (v14 <= v61 + v33)
        goto LABEL_43;
      v37 = (uint64_t)v12 + 40;
      if ((v12[2] & 1) == 0)
        v37 = *((_QWORD *)v12 + 6);
      if (v33 >= v57)
        v38 = 0;
      else
        v38 = *(_QWORD *)(v52 + 8 * v33);
      v39 = *(_QWORD *)(v18 + 64);
      if (v33 >= v30)
        v40 = *(unsigned __int16 *)(v39 + v35);
      else
        v40 = *(_DWORD *)(v51 + 4 * v33);
      v41 = v37 + v34;
      *(_QWORD *)&v74 = v55;
      *((_QWORD *)&v74 + 1) = v54;
      LODWORD(v75) = a4;
      BYTE4(v75) = v53;
      *((_QWORD *)&v75 + 1) = v33;
      *(_QWORD *)&v76 = v39 + v35 - 474;
      *((_QWORD *)&v76 + 1) = v63;
      *(_QWORD *)&v77 = v38;
      v42 = *(_DWORD *)(v36 + v34 + 4 * v33);
      if (v59 <= v40)
        v43 = 0;
      else
        v43 = v60 + 18 * v40;
      *((_QWORD *)&v77 + 1) = *(_QWORD *)((unint64_t)&v86 & 0xFFFFFFFFFFFFFFF7 | (8 * (v42 & 1))) + v17;
      *(_QWORD *)&v78 = *(_QWORD *)((unint64_t)&v85 & 0xFFFFFFFFFFFFFFF7 | (8
                                                                                   * (*(_DWORD *)(v41 + 4 * v33) & 1)))
                      + v17;
      DWORD2(v78) = v40;
      v79 = a2 + 408;
      v80 = v43;
      v81 = *(_BYTE *)(a2 + 344);
      v82 = v62;
      v83 = 0;
      v84 = 0;
      result = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 16))(a1, &v74);
      ++v33;
      v32 = *(_QWORD *)(v18 + 56);
      v35 += 560;
      v17 += 32;
    }
    while (v33 < v32);
    v14 = v47;
    v9 = v44;
    v8 = v45;
LABEL_38:
    v13 = v46;
LABEL_40:
    v61 += v32;
    ++v14;
  }
  while (v14 < *(_QWORD *)(a2 + 8));
  return result;
}

uint64_t re::mesh_traversal::traverseVFXScene(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[9];
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result)
  {
    v10[0] = 0;
    v10[1] = 0;
    v10[2] = a2 + 48;
    v10[3] = a2 + 448;
    v10[4] = 0;
    v10[5] = 0;
    v10[7] = 0;
    v10[8] = 0;
    v10[6] = a2 + 408;
    v11 = *(_BYTE *)(a2 + 344);
    v12 = *(_OWORD *)(a2 + 352);
    v9 = *(_QWORD *)(a2 + 784);
    v13 = 0;
    v14 = v9;
    v15 = *(_BYTE *)(a2 + 640);
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 8))(a1, v10);
    if ((_DWORD)result)
      return re::addVFXSceneDrawsToTechniqueBuckets(a2, a3, a1, a4);
  }
  return result;
}

re::CustomDeformers *re::CustomDeformers::CustomDeformers(re::CustomDeformers *this, re::Allocator *a2)
{
  char *v4;
  unsigned int *v5;

  *(_QWORD *)this = &off_24ED736D0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *(_QWORD *)((char *)this + 60) = 0x1FFFFFFFFLL;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  v4 = (char *)this + 72;
  *(_QWORD *)((char *)this + 108) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 1) = a2;
  v5 = (unsigned int *)((char *)this + 8);
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)this + 1, 0);
  ++*((_DWORD *)this + 8);
  *((_DWORD *)this + 13) = 8;
  re::DataArray<re::CustomDeformers::CustomDeformerData>::allocBlock(v5);
  re::HashTable<re::StringID,re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v4, (uint64_t)a2, 32);
  return this;
}

void re::HashTable<re::StringID,re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_20, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::CustomDeformers::registerCustomDeformer@<X0>(uint64_t a1@<X0>, StringID *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  const char *v16;
  const char *var1;
  uint64_t v18;
  uint64_t result;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (a5 && a6)
  {
    v16 = "Custom deformers only current support either CPU or GPU mode.";
LABEL_8:
    goto LABEL_9;
  }
  if (!(a5 | a6))
  {
    v16 = "Custom deformers must specify either CPU or GPU functions.";
    goto LABEL_8;
  }
  var1 = a2->var1;
  if (strlen(var1) >= 0x40)
  {
    result = re::DynamicString::format((re::DynamicString *)"Invalid deformer name, exceeded maximum length (%zu): %s.", (re::DynamicString *)&v52, 64, var1);
LABEL_9:
    v20 = v52;
    v21 = v53;
    *(_BYTE *)a8 = 0;
    *(_QWORD *)(a8 + 8) = 1001;
    *(_QWORD *)(a8 + 16) = &re::GraphicsErrorCategory(void)::instance;
    *(_OWORD *)(a8 + 24) = v20;
    *(_OWORD *)(a8 + 40) = v21;
    return result;
  }
  v50 = a4;
  v51 = a7;
  v48 = a1 + 72;
  if (*(_QWORD *)(a1 + 72))
  {
    v22 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v23 = *(unsigned int *)(*(_QWORD *)(a1 + 80)
                          + 4
                          * (((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 96)));
    if ((_DWORD)v23 != 0x7FFFFFFF)
    {
      v24 = *(_QWORD *)(a1 + 88);
      while (!re::StringID::operator==((_QWORD *)(v24 + 32 * v23 + 8), a2))
      {
        v23 = *(_DWORD *)(v24 + 32 * v23) & 0x7FFFFFFF;
        if (v23 == 0x7FFFFFFF)
          goto LABEL_15;
      }
      result = re::DynamicString::format((re::DynamicString *)"Cannot register duplicate custom deformer name: %s.", (re::DynamicString *)&v52, var1);
      goto LABEL_9;
    }
  }
LABEL_15:
  v25 = *(_QWORD *)(a1 + 144);
  if (v25)
  {
    v26 = v25 - 1;
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v26);
    *(_QWORD *)(a1 + 144) = v26;
    ++*(_DWORD *)(a1 + 152);
  }
  else
  {
    v27 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v27 + 1;
  }
  v28 = *(_DWORD *)(a1 + 64);
  if ((v28 + 1) >> 24)
    v29 = 1;
  else
    v29 = v28 + 1;
  *(_DWORD *)(a1 + 64) = v29;
  v30 = *(unsigned __int16 *)(a1 + 60);
  v31 = *(unsigned __int16 *)(a1 + 62);
  if (v30 == 0xFFFF && (_DWORD)v31 == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 56) >= *(_DWORD *)(a1 + 52))
      re::DataArray<re::CustomDeformers::CustomDeformerData>::allocBlock((unsigned int *)(a1 + 8));
    v32 = *(_QWORD *)(a1 + 24);
    v31 = (unsigned __int16)(v32 - 1);
    if (v32)
    {
      v30 = *(unsigned int *)(a1 + 56);
      if (v30 < 0x10000)
      {
        v33 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 16 * v31);
        *(_DWORD *)(a1 + 56) = v30 + 1;
        *(_DWORD *)(v33[1] + 4 * v30) = *(_DWORD *)(a1 + 64);
        v34 = *v33 + 48 * v30;
        goto LABEL_30;
      }
    }
    else
    {
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v52 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)5, v18, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v30, v48);
    _os_crash();
    __break(1u);
LABEL_47:
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v52 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 24) <= v31)
    goto LABEL_47;
  v35 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 16 * v31);
  *(_DWORD *)(v35[1] + 4 * v30) = v29;
  v34 = *v35 + 48 * v30;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)v34;
LABEL_30:
  ++*(_DWORD *)(a1 + 48);
  v49 = v27;
  *(_QWORD *)v34 = v27;
  *(_QWORD *)(v34 + 8) = a3;
  *(_QWORD *)(v34 + 16) = v50;
  *(_QWORD *)(v34 + 24) = a5;
  *(_QWORD *)(v34 + 32) = a6;
  *(_QWORD *)(v34 + 40) = v51;
  v36 = *(_DWORD *)(a1 + 64);
  v37 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v38 = (0x94D049BB133111EBLL * (v37 ^ (v37 >> 27))) ^ ((0x94D049BB133111EBLL * (v37 ^ (v37 >> 27))) >> 31);
  if (*(_QWORD *)(a1 + 72))
  {
    v39 = v38 % *(unsigned int *)(a1 + 96);
    v40 = *(unsigned int *)(*(_QWORD *)(a1 + 80) + 4 * v39);
    if ((_DWORD)v40 != 0x7FFFFFFF)
    {
      v41 = *(_QWORD *)(a1 + 88);
      do
      {
        result = re::StringID::operator==((_QWORD *)(v41 + 32 * v40 + 8), a2);
        if ((result & 1) != 0)
          goto LABEL_43;
        v40 = *(_DWORD *)(v41 + 32 * v40) & 0x7FFFFFFF;
      }
      while (v40 != 0x7FFFFFFF);
    }
  }
  else
  {
    LODWORD(v39) = 0;
  }
  v42 = (v31 << 16) | ((unint64_t)(v36 & 0xFFFFFF) << 32) | v30;
  v43 = *(unsigned int *)(a1 + 108);
  if ((_DWORD)v43 == 0x7FFFFFFF)
  {
    v43 = *(unsigned int *)(a1 + 104);
    v44 = v43;
    if ((_DWORD)v43 == *(_DWORD *)(a1 + 96))
    {
      re::HashTable<re::StringID,re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(v48, 2 * *(_DWORD *)(a1 + 100));
      LODWORD(v39) = v38 % *(unsigned int *)(a1 + 96);
      v44 = *(_DWORD *)(a1 + 104);
    }
    *(_DWORD *)(a1 + 104) = v44 + 1;
    v45 = *(_QWORD *)(a1 + 88);
    v46 = *(_DWORD *)(v45 + 32 * v43);
  }
  else
  {
    v45 = *(_QWORD *)(a1 + 88);
    v46 = *(_DWORD *)(v45 + 32 * v43);
    *(_DWORD *)(a1 + 108) = v46 & 0x7FFFFFFF;
  }
  v47 = 32 * v43;
  *(_DWORD *)(v45 + v47) = v46 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 88) + v47) = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 32 * v43) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 80) + 4 * v39);
  result = (uint64_t)re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 88) + 32 * v43 + 8), a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 88) + 32 * v43 + 24) = v42;
  *(_DWORD *)(*(_QWORD *)(a1 + 80) + 4 * v39) = v43;
  ++*(_DWORD *)(a1 + 100);
  ++*(_DWORD *)(a1 + 112);
LABEL_43:
  *(_BYTE *)a8 = 1;
  *(_QWORD *)(a8 + 8) = v49;
  return result;
}

uint64_t re::CustomDeformers::unregisterCustomDeformer@<X0>(re::CustomDeformers *this@<X0>, const re::StringID *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  unint64_t *v7;
  unint64_t *v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  uint64_t result;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v6 = (char *)this + 72;
  v7 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 72, a2);
  if (v7)
  {
    v8 = v7;
    v9 = (_QWORD *)((char *)this + 128);
    v10 = (char *)this + 8;
    v11 = (_QWORD *)re::DataArray<re::CustomDeformers::CustomDeformerData>::get((uint64_t)v10, *v7);
    re::DynamicArray<unsigned long>::add(v9, v11);
    re::DataArray<re::CustomDeformers::CustomDeformerData>::destroy((uint64_t)v10, *v8);
    result = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v6, a2);
    v13 = 1;
  }
  else
  {
    result = re::DynamicString::format((re::DynamicString *)"Cannot unregister unknown deformer: %s.", (re::DynamicString *)&v17, *((_QWORD *)a2 + 1));
    v13 = 0;
    v14 = v17;
    v15 = v18;
    v16 = v19;
    *(_QWORD *)(a3 + 8) = 1001;
    *(_QWORD *)(a3 + 16) = &re::GraphicsErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v14;
    *(_QWORD *)(a3 + 40) = v15;
    *(_QWORD *)(a3 + 48) = v16;
  }
  *(_BYTE *)a3 = v13;
  return result;
}

uint64_t re::DataArray<re::CustomDeformers::CustomDeformerData>::get(uint64_t a1, int a2)
{
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(a2)) + 48 * (unsigned __int16)a2;
}

_DWORD *re::DataArray<re::CustomDeformers::CustomDeformerData>::destroy(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  _DWORD *result;

  v2 = a2;
  v4 = a2 >> 16;
  result = (_DWORD *)re::DataArray<re::CustomDeformers::CustomDeformerData>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (result)
  {
    if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *result = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

uint64_t re::CustomDeformers::customDeformerID(re::CustomDeformers *this, const re::StringID *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 72, a2);
  if (v3)
    return *(_QWORD *)re::DataArray<re::CustomDeformers::CustomDeformerData>::get((uint64_t)this + 8, *v3);
  else
    return -1;
}

void re::CustomDeformers::addDeformationInstance(re::CustomDeformers *this@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  char *v5;
  uint64_t v6;
  char v7;
  unsigned __int8 *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD v15[2];

  v5 = (char *)this + 72;
  if (a2)
  {
    v6 = (char)*a2;
    if (*a2)
    {
      v7 = a2[1];
      if (v7)
      {
        v8 = a2 + 2;
        do
        {
          v6 = 31 * v6 + v7;
          v9 = *v8++;
          v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    v6 = 0;
  }
  v15[0] = 2 * v6;
  v15[1] = a2;
  v10 = (_QWORD *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v5, v15);
  re::StringID::destroyString((re::StringID *)v15);
  if (v10)
  {
    v11 = re::DataArray<re::CustomDeformers::CustomDeformerData>::get((uint64_t)this + 8, *v10);
    v12 = (*(uint64_t (**)(_QWORD, _QWORD))(v11 + 8))(*(_QWORD *)v11, *(_QWORD *)(v11 + 40));
    *(_QWORD *)a3 = *v10;
    *(_QWORD *)(a3 + 8) = v12;
    *(_QWORD *)(a3 + 16) = v13;
    v14 = *(_QWORD *)(v11 + 24) != 0;
  }
  else
  {
    *(_QWORD *)(a3 + 24) = 0;
    *(_DWORD *)a3 = -1;
    *(_QWORD *)(a3 + 12) = 0;
    *(_QWORD *)(a3 + 4) = 0;
    v14 = -1;
    *(_DWORD *)(a3 + 20) = 0;
  }
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 24) = v14;
  *(_QWORD *)(a3 + 32) = -1;
  *(_QWORD *)(a3 + 40) = 0;
}

uint64_t re::CustomDeformers::allocateBuffers(unsigned int *a1, uint64_t a2, unsigned int a3, _QWORD *a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _anonymous_namespace_ *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[28];
  __int16 v53;
  _BYTE v54[10];
  _BYTE v55[12];
  __int16 v56;
  int v57;
  __int16 v58;
  unint64_t v59;
  __int16 v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v45 = a2;
  v10 = *(_QWORD *)(a2 + 24);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, 64, 8);
  v46 = (uint64_t)(a1 + 2);
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  v12 = a1[12];
  *(_QWORD *)v11 = v10;
  re::DynamicArray<re::Pair<re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::DynamicArray<unsigned long>,true>>::setCapacity((_QWORD *)v11, v12);
  ++*(_DWORD *)(v11 + 24);
  v13 = *(_QWORD *)(*a4 + 48);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  if (!v13)
    goto LABEL_31;
  v14 = 0;
  v15 = 1;
  v44 = v10;
  do
  {
    v16 = v49;
    if (v49 <= v14)
      goto LABEL_41;
    if (*(_BYTE *)(v50 + v14))
      goto LABEL_5;
    v17 = re::CustomDeformers::resolveCustomDeformerHandle(a4, v14);
    memset(&v52[8], 0, 20);
    *(_QWORD *)&v54[2] = 0;
    *(_QWORD *)v52 = v10;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v52, v13);
    ++*(_DWORD *)&v52[24];
    v16 = v49;
    if (v49 <= v14)
      goto LABEL_44;
    *(_BYTE *)(v50 + v14) = 1;
    v47 = v14;
    v18 = v14;
    do
    {
      v19 = re::CustomDeformers::resolveCustomDeformerHandle(a4, v18);
      if ((_DWORD)v19 == (_DWORD)v17 && ((v19 ^ v17) & 0xFFFFFF00000000) == 0)
      {
        v16 = v47;
        v20 = v49;
        if (v49 <= v47)
        {
          v51 = 0;
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v62 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v55 = 136315906;
          *(_QWORD *)&v55[4] = "operator[]";
          v56 = 1024;
          v57 = 468;
          v58 = 2048;
          v59 = v16;
          v60 = 2048;
          v61 = v20;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_41:
          *(_QWORD *)v55 = 0;
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v62 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v52 = 136315906;
          *(_QWORD *)&v52[4] = "operator[]";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 468;
          *(_WORD *)&v52[18] = 2048;
          *(_QWORD *)&v52[20] = v14;
          v53 = 2048;
          *(_QWORD *)v54 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_42;
        }
        *(_BYTE *)(v50 + v47) = 1;
        re::DynamicArray<unsigned long>::add(v52, &v47);
      }
      v18 = v47 + 1;
      v47 = v18;
    }
    while (v18 < v13);
    v21 = (_anonymous_namespace_ *)re::DataArray<re::CustomDeformers::CustomDeformerData>::tryGet(v46, v17);
    if (v21)
    {
      v22 = *(_QWORD *)v52;
      v23 = *(_OWORD *)&v52[8];
      memset(v52, 0, 24);
      v24 = *(_QWORD *)&v54[2];
      *(_QWORD *)&v54[2] = 0;
      ++*(_DWORD *)&v52[24];
      v25 = *(_QWORD *)(v11 + 8);
      v26 = *(_QWORD *)(v11 + 16);
      if (v26 >= v25)
      {
        v27 = v26 + 1;
        if (v25 < v26 + 1)
        {
          v43 = v23;
          if (*(_QWORD *)v11)
          {
            v28 = 2 * v25;
            v29 = v25 == 0;
            v30 = 8;
            if (!v29)
              v30 = v28;
            if (v30 <= v27)
              v31 = v27;
            else
              v31 = v30;
            re::DynamicArray<re::Pair<re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::DynamicArray<unsigned long>,true>>::setCapacity((_QWORD *)v11, v31);
          }
          else
          {
            re::DynamicArray<re::Pair<re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::DynamicArray<unsigned long>,true>>::setCapacity((_QWORD *)v11, v27);
            ++*(_DWORD *)(v11 + 24);
          }
          v23 = v43;
        }
        v26 = *(_QWORD *)(v11 + 16);
      }
      v32 = *(_QWORD *)(v11 + 32) + 48 * v26;
      *(_QWORD *)(v32 + 16) = 0;
      *(_QWORD *)(v32 + 24) = 0;
      *(_DWORD *)(v32 + 32) = 0;
      *(_QWORD *)v32 = v17;
      *(_QWORD *)(v32 + 8) = v22;
      *(_OWORD *)(v32 + 16) = v23;
      *(_QWORD *)(v32 + 40) = v24;
      *(_DWORD *)(v32 + 32) = 1;
      ++*(_QWORD *)(v11 + 16);
      ++*(_DWORD *)(v11 + 24);
      v10 = v44;
    }
    if (*(_QWORD *)v52 && *(_QWORD *)&v54[2])
      (*(void (**)(void))(**(_QWORD **)v52 + 40))();
LABEL_5:
    ++v14;
  }
  while (v14 != v13);
LABEL_31:
  v33 = *(_QWORD *)(v11 + 16);
  re::FixedArray<unsigned long>::init<>((uint64_t *)(v11 + 40), v10, v33);
  v14 = a5;
  if (v33)
  {
    v34 = 0;
    v16 = 0;
    while (1)
    {
      v15 = *(_QWORD *)(v11 + 16);
      if (v15 <= v16)
        break;
      v35 = (_QWORD *)(*(_QWORD *)(v11 + 32) + v34);
      v36 = re::DataArray<re::CustomDeformers::CustomDeformerData>::get(v46, *v35);
      v37 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v36 + 16))(v45, a3, a4, a5, a6, a7, v35[5], v35[3], *(_QWORD *)v36, *(_QWORD *)(v36 + 40));
      v15 = *(_QWORD *)(v11 + 48);
      if (v15 <= v16)
        goto LABEL_43;
      *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v16++) = v37;
      v34 += 48;
      if (v33 == v16)
        goto LABEL_36;
    }
LABEL_42:
    *(_QWORD *)v55 = 0;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v52 = 136315906;
    *(_QWORD *)&v52[4] = "operator[]";
    *(_WORD *)&v52[12] = 1024;
    *(_DWORD *)&v52[14] = 789;
    *(_WORD *)&v52[18] = 2048;
    *(_QWORD *)&v52[20] = v16;
    v53 = 2048;
    *(_QWORD *)v54 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_43:
    *(_QWORD *)v55 = 0;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v52 = 136315906;
    *(_QWORD *)&v52[4] = "operator[]";
    *(_WORD *)&v52[12] = 1024;
    *(_DWORD *)&v52[14] = 468;
    *(_WORD *)&v52[18] = 2048;
    *(_QWORD *)&v52[20] = v16;
    v53 = 2048;
    *(_QWORD *)v54 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_44:
    v51 = 0;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v62 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v55 = 136315906;
    *(_QWORD *)&v55[4] = "operator[]";
    v56 = 1024;
    v57 = 468;
    v58 = 2048;
    v59 = v14;
    v60 = 2048;
    v61 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_36:
  if (v48 && v49)
    (*(void (**)(void))(*(_QWORD *)v48 + 40))();
  return v11;
}

uint64_t re::CustomDeformers::resolveCustomDeformerHandle(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v3 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](*a1 + 8, a2);
  v4 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](a1[1], *(_QWORD *)(v3 + 8));
  v6 = *(unsigned __int8 *)(v3 + 16);
  v7 = *(_QWORD *)(v4 + 336);
  if (v7 > v6)
    return *(_QWORD *)(*(_QWORD *)(v4 + 328) + (v6 << 6));
  re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *(unsigned __int8 *)(v3 + 16), v7);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::DataArray<re::CustomDeformers::CustomDeformerData>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (v3 = *(_DWORD *)(a1 + 44)) : (v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((v4 = *(_QWORD *)(a1 + 32),
          (v5 = *(_DWORD *)(*(_QWORD *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (v6 = 0),
         v6)))
  {
    return *(_QWORD *)(v4 + 16 * WORD1(a2)) + 48 * (unsigned __int16)a2;
  }
  else
  {
    return 0;
  }
}

uint64_t re::CustomDeformers::deformGPU(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a2[2];
  if (v4)
  {
    v8 = 0;
    v9 = 0;
    v10 = result + 8;
    do
    {
      if (a2[2] <= v9)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = a2[4];
      v12 = re::DataArray<re::CustomDeformers::CustomDeformerData>::get(v10, *(_QWORD *)(v11 + v8));
      if (a2[6] <= v9)
        goto LABEL_8;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v12 + 24))(*(_QWORD *)(a2[7] + 8 * v9++), a3, a4, *(_QWORD *)(v11 + v8 + 40), *(_QWORD *)(v11 + v8 + 24), *(_QWORD *)v12, *(_QWORD *)(v12 + 40));
      v8 += 48;
    }
    while (v4 != v9);
  }
  return result;
}

uint64_t re::CustomDeformers::deformCPU(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a2[2];
  if (v3)
  {
    v6 = 0;
    v7 = 0;
    v8 = result + 8;
    do
    {
      if (a2[2] <= v7)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v9 = a2[4];
      v10 = re::DataArray<re::CustomDeformers::CustomDeformerData>::get(v8, *(_QWORD *)(v9 + v6));
      if (a2[6] <= v7)
        goto LABEL_8;
      result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v10 + 32))(*(_QWORD *)(a2[7] + 8 * v7++), a3, *(_QWORD *)(v9 + v6 + 40), *(_QWORD *)(v9 + v6 + 24), *(_QWORD *)v10, *(_QWORD *)(v10 + 40));
      v6 += 48;
    }
    while (v3 != v7);
  }
  return result;
}

uint64_t re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 6)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 6)) + 24 * (a2 & 0x3F);
}

uint64_t re::BucketArray<re::ActiveDeformation,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 400 * (a2 & 7);
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 400 * (a2 & 7);
}

void re::CustomDeformers::~CustomDeformers(re::CustomDeformers *this)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)((char *)this + 128);
  v2 = *((_QWORD *)this + 16);
  if (v2)
  {
    if (*((_QWORD *)this + 20))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 20) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 38);
  }
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9);
  re::DataArray<re::CustomDeformers::CustomDeformerData>::~DataArray((_QWORD *)this + 1);
}

{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)((char *)this + 128);
  v2 = *((_QWORD *)this + 16);
  if (v2)
  {
    if (*((_QWORD *)this + 20))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 20) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 38);
  }
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 9);
  re::DataArray<re::CustomDeformers::CustomDeformerData>::~DataArray((_QWORD *)this + 1);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DataArray<re::CustomDeformers::CustomDeformerData>::~DataArray(_QWORD *a1)
{
  re::DataArray<re::CustomDeformers::CustomDeformerData>::deinit((uint64_t)a1);
  if (*a1)
  {
    if (a1[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    ++*((_DWORD *)a1 + 6);
  }
  return a1;
}

uint64_t re::DataArray<re::CustomDeformers::CustomDeformerData>::deinit(uint64_t result)
{
  uint64_t *v1;
  double v2;
  _QWORD *v3;

  if (*(_DWORD *)(result + 44))
  {
    v1 = (uint64_t *)result;
    v2 = re::DataArray<re::CustomDeformers::CustomDeformerData>::clear((_QWORD *)result);
    if (!v1[2])
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v3 = (_QWORD *)v1[4];
    (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v3[1]);
    result = *v1;
    if (*v1)
    {
      if (v1[4])
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      v1[4] = 0;
      v1[1] = 0;
      v1[2] = 0;
      *v1 = 0;
      ++*((_DWORD *)v1 + 6);
    }
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

double re::DataArray<re::CustomDeformers::CustomDeformerData>::clear(_QWORD *a1)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  _OWORD v12[5];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v4 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)v12);
      re::DataArray<re::CustomDeformers::CustomDeformerData>::destroy((uint64_t)a1, v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(v12);
    }
    while (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  v7 = a1[2];
  v8 = v7 - 1;
  if (v7 != 1)
  {
    v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v10 = a1[4] + v9;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 16));
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 8));
      re::DynamicArray<re::DataArray<re::RigGraphOperatorDefinition>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

void re::DataArray<re::CustomDeformers::CustomDeformerData>::allocBlock(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  v2 = 48 * a1[11];
  v5.n128_u64[0] = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, v2, 0);
  if (v5.n128_u64[0])
  {
    v2 = 4 * a1[11];
    v5.n128_u64[1] = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, v2, 0);
    if (v5.n128_u64[1])
    {
      re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)a1, &v5);
      a1[12] = 0;
      return;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v2, *(_QWORD *)(*(_QWORD *)a1 + 8), 0);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v2, *(_QWORD *)(*(_QWORD *)a1 + 8));
  _os_crash();
  __break(1u);
}

void re::HashTable<re::StringID,re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const StringID *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  signed int v26;
  _BYTE v27[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v27, 0, 36);
      *(_QWORD *)&v27[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v27, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v27;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v27[8];
      *(_OWORD *)v27 = v5;
      *(_QWORD *)&v27[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v27[24];
      *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v27[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = 0;
        v13 = v7;
        v14 = DWORD1(v9);
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v27[16] + v11) & 0x80000000) != 0)
          {
            v15 = *(_QWORD *)&v27[16] + v11;
            v16 = (const StringID *)(*(_QWORD *)&v27[16] + v11 + 8);
            v17 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&v16->var0 >> 31) ^ (*(_QWORD *)&v16->var0 >> 1));
            v18 = (0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31);
            v19 = *(unsigned int *)(a1 + 24);
            v20 = v18 % v19;
            v21 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v21 == 0x7FFFFFFF)
            {
              v21 = *(unsigned int *)(a1 + 32);
              v22 = v21;
              if ((_DWORD)v21 == (_DWORD)v19)
              {
                re::HashTable<re::StringID,re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, (2 * v14));
                v20 = v18 % *(unsigned int *)(a1 + 24);
                v22 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v22 + 1;
              v23 = *(_QWORD *)(a1 + 16);
              v24 = *(_DWORD *)(v23 + 32 * v21);
            }
            else
            {
              v23 = *(_QWORD *)(a1 + 16);
              v24 = *(_DWORD *)(v23 + 32 * v21);
              *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
            }
            v25 = 32 * v21;
            *(_DWORD *)(v23 + v25) = v24 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v25) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v21) & 0x80000000 | *(_DWORD *)(v13 + 4 * v20);
            re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v21 + 8), v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v21 + 24) = *(_QWORD *)(v15 + 24);
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v20) = v21;
            v14 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v14;
            v10 = *(_DWORD *)&v27[32];
          }
          ++v12;
          v11 += 32;
        }
        while (v12 < v10);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v27);
    }
  }
  else
  {
    if (a2)
      v26 = a2;
    else
      v26 = 3;
  }
}

_QWORD *re::DynamicArray<re::Pair<re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::DynamicArray<unsigned long>,true>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Pair<re::DataArrayHandle<re::CustomDeformers::CustomDeformerData>,re::DynamicArray<unsigned long>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 48 * v9;
        v11 = (_QWORD *)(v8 + 40);
        v12 = v7;
        do
        {
          v13 = *(v11 - 5);
          v12[5] = 0;
          *v12 = v13;
          v12[1] = 0;
          *((_DWORD *)v12 + 8) = 0;
          v12[2] = 0;
          v12[3] = 0;
          v14 = *(v11 - 3);
          v12[1] = *(v11 - 4);
          *(v11 - 4) = 0;
          v12[2] = v14;
          *(v11 - 3) = 0;
          v15 = v12[3];
          v12[3] = *(v11 - 2);
          *(v11 - 2) = v15;
          v16 = v12[5];
          v12[5] = *v11;
          *v11 = v16;
          ++*((_DWORD *)v11 - 2);
          ++*((_DWORD *)v12 + 8);
          v17 = *(v11 - 4);
          if (v17)
          {
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
            *v11 = 0;
            *(v11 - 3) = 0;
            *(v11 - 2) = 0;
            *(v11 - 4) = 0;
            ++*((_DWORD *)v11 - 2);
          }
          v11 += 6;
          v12 += 6;
          v10 -= 48;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

void re::LightContext::createLightConstantBuffer(uint32x2_t *a1, uint64_t *a2, float32x4_t *a3, uint64_t a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _BOOL8 isEmpty;
  uint64_t i;
  uint64_t j;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t k;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  float32x4_t *v26;
  float32x4_t v27;
  uint64_t v28;
  __int128 *PointLightFaceLookatOrientations;
  float32x4_t v30;
  uint64_t v31;
  uint32x2_t v32;
  char v33;
  uint32x2_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  simd_float4 v45;
  int32x4_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float v49;
  simd_float4 v50;
  int8x16_t v51;
  int v52;
  float32x4_t v53;
  int32x2_t v54;
  int32x2_t v55;
  int32x2_t v56;
  uint32x4_t v57;
  uint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x2_t v63;
  uint64_t v64;
  float v65;
  float v66;
  simd_float4 v67;
  simd_float4 v68;
  simd_float4 v69;
  uint32x2_t v70;
  uint32x2_t v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v79;
  float v80;
  float32x4_t v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  float32x4_t v88;
  float v89;
  float32x4_t v90;
  float32x4_t v91;
  _OWORD *v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int8x16_t v97;
  float32x4_t v98;
  int8x16_t v99;
  float32x4_t v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  int32x4_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  float32x4_t *v114;
  uint64_t v115;
  int32x4_t v116;
  float32x4_t v117;
  uint32x4_t v118;
  float32x4_t v119;
  int32x4_t v120;
  float32x4_t v121;
  int32x4_t v122;
  uint32x4_t v123;
  float32x4_t v124;
  uint32x2_t v125;
  uint32x2_t v126;
  uint64_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  int v131;
  int *v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  int *v137;
  uint64_t v138;
  float32x4_t v139;
  simd_float4 v140;
  float32x4_t v141;
  simd_float4 v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  simd_float4 v151;
  simd_float4 v152;
  simd_float4 v153;
  float v154;
  float v155;
  float v156;
  float32x4_t v157;
  float v158;
  int32x2_t v159;
  int32x2_t v160;
  int32x2_t v161;
  uint32x4_t v162;
  float32x4_t v163;
  int32x4_t v164;
  float32x4_t v165;
  int32x4_t v166;
  uint32x4_t v167;
  float32x4_t v168;
  uint32x2_t v169;
  uint64_t v170;
  float *v171;
  float32x4_t v172;
  float32x4_t v173;
  uint64_t v174;
  uint32x2_t v175;
  uint64_t v176;
  uint32x2_t v177;
  uint64_t v178;
  float32x4_t v179;
  float32x4_t v180;
  int v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t *v191;
  uint32x2_t v192;
  uint32x2_t v193;
  uint64_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  uint64_t v199;
  uint64_t v200;
  float32x4_t v201;
  simd_float4 v202;
  int32x4_t v203;
  float32x2_t v204;
  float32x2_t v205;
  float v206;
  simd_float4 v207;
  int *v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x2_t v213;
  float32x4_t v214;
  int32x2_t v215;
  int32x2_t v216;
  int32x2_t v217;
  uint32x4_t v218;
  int8x16_t v219;
  uint64_t v220;
  float32x2_t v221;
  int *v222;
  simd_float4 v223;
  simd_float4 v224;
  simd_float4 v225;
  simd_float4 v226;
  unsigned __int8 v227;
  uint64_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  simd_float4 v233;
  simd_float4 v234;
  simd_float4 v235;
  simd_float4 *v236;
  int v237;
  _DWORD *v238;
  simd_float4 v239;
  simd_float4 v240;
  simd_float4 v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v250;
  simd_float4 v251;
  float32x4_t v252;
  simd_float4x4 v253;
  simd_float4x4 v254;
  simd_float4x4 v255;
  simd_float4x4 v256;
  simd_float4x4 v257;

  v6 = *a2;
  v7 = *((unsigned int *)a2 + 2);
  v8 = (int *)(*a2 + v7);
  *((_QWORD *)v8 + 6) = 0;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *(_OWORD *)v8 = 0u;
  isEmpty = re::LightContext::isEmpty((re::LightContext *)a1);
  if (!isEmpty)
  {
    for (i = 0; i != 2048; i += 256)
      *(_DWORD *)(v7 + v6 + 240 + i) = 0;
    for (j = 0; j != 2048; j += 256)
      *(_DWORD *)(v7 + v6 + 2288 + j) = 0;
    v12 = (_DWORD *)(v7 + v6 + 4776);
    v13 = 8;
    do
    {
      *((_QWORD *)v12 - 5) = 0x3F80000000000000;
      *(v12 - 2) = 1008981770;
      *((_BYTE *)v12 - 4) = 0;
      *v12 = 0x40000000;
      v12 += 156;
      --v13;
    }
    while (v13);
    *((_QWORD *)v8 + 1216) = 0x3F80000000000000;
    v8[2440] = 1008981770;
    *((_BYTE *)v8 + 9764) = 0;
    v8[2442] = 0x40000000;
    v14 = (_DWORD *)(v7 + v6 + 10056);
    v15 = 8;
    do
    {
      *((_QWORD *)v14 - 5) = 0x3F80000000000000;
      *(v14 - 2) = 1008981770;
      *((_BYTE *)v14 - 4) = 0;
      *v14 = 0x40000000;
      v14 += 72;
      --v15;
    }
    while (v15);
    v16 = (_DWORD *)(v7 + v6 + 12360);
    v17 = 8;
    do
    {
      *((_QWORD *)v16 - 5) = 0x3F80000000000000;
      *(v16 - 2) = 1008981770;
      *((_BYTE *)v16 - 4) = 0;
      *v16 = 0x40000000;
      v16 += 72;
      --v17;
    }
    while (v17);
    for (k = 0; k != 768; k += 96)
      *(_BYTE *)(v7 + v6 + 14592 + k) = 0;
    v8[3864] = 0;
    v19 = (_DWORD *)(v7 + v6 + 15816);
    v20 = 8;
    do
    {
      *((_QWORD *)v19 - 5) = 0x3F80000000000000;
      *(v19 - 2) = 1008981770;
      *((_BYTE *)v19 - 4) = 0;
      *v19 = 0x40000000;
      v19 += 72;
      --v20;
    }
    while (v20);
    v21 = (_DWORD *)(v7 + v6 + 18120);
    v22 = 8;
    do
    {
      *((_QWORD *)v21 - 5) = 0x3F80000000000000;
      *(v21 - 2) = 1008981770;
      *((_BYTE *)v21 - 4) = 0;
      *v21 = 0x40000000;
      v21 += 72;
      --v22;
    }
    while (v22);
    v23 = (_DWORD *)(v7 + v6 + 4776);
    v24 = 8;
    do
    {
      *((_QWORD *)v23 - 5) = 0x3F80000000000000;
      *(v23 - 2) = 1008981770;
      *((_BYTE *)v23 - 4) = 0;
      *v23 = 0x40000000;
      v23 += 156;
      --v24;
    }
    while (v24);
    *((_QWORD *)v8 + 1216) = 0x3F80000000000000;
    v8[2440] = 1008981770;
    *((_BYTE *)v8 + 9764) = 0;
    v8[2442] = 0x40000000;
    v238 = v8 + 6504;
    v25 = v8 + 6505;
    *((_QWORD *)v8 + 3252) = 0;
    v26 = a3;
    v27 = vnegq_f32(*a3);
    v27.i32[3] = 1.0;
    v252 = v27;
    PointLightFaceLookatOrientations = re::getPointLightFaceLookatOrientations((re *)isEmpty);
    v31 = v28;
    v32 = a1[1];
    v33 = a5;
    if (v32)
    {
      v34 = a1[2];
      v35 = *(_QWORD *)&v34 + 208 * *(_QWORD *)&v32;
      v30 = (float32x4_t)xmmword_2260E5F10;
      v36 = (float32x4_t)xmmword_2260E5F20;
      v37 = (float32x4_t)xmmword_2260E5F40;
      v242 = (float32x4_t)vdupq_n_s32(0x3ABFE803u);
      do
      {
        v38 = vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v34 + 128), *(float *)(*(_QWORD *)&v34 + 144));
        if (fmaxf(fmaxf(v38.f32[0], v38.f32[2]), v38.f32[1]) > 0.0)
        {
          if (!*(_BYTE *)(*(_QWORD *)&v34 + 204) || (v33 & 1) != 0)
          {
            v41 = *v8;
            if ((int)v41 < 8)
            {
              *v8 = v41 + 1;
              v40 = (uint64_t)&v8[64 * v41 + 16];
              goto LABEL_34;
            }
            ++*v238;
          }
          else if (*(_BYTE *)(*(_QWORD *)&v34 + 205))
          {
            v39 = v8[13];
            if (v39 <= 0)
            {
              v8[13] = v39 + 1;
              v40 = (uint64_t)(v8 + 6440);
              goto LABEL_34;
            }
          }
          else
          {
            v42 = v8[1];
            if ((int)v42 < 8)
            {
              v8[1] = v42 + 1;
              v40 = (uint64_t)&v8[64 * v42 + 528];
LABEL_34:
              v43 = 0;
              v44 = *(float32x4_t *)(*(_QWORD *)&v34 + 32);
              v45 = *(simd_float4 *)(*(_QWORD *)&v34 + 48);
              v46 = (int32x4_t)vmulq_f32(v44, v44);
              v46.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v46, 2), vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1))).u32[0];
              v47 = vrsqrte_f32((float32x2_t)v46.u32[0]);
              v48 = vmul_f32(v47, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v47, v47)));
              LODWORD(v49) = vmul_f32(v48, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v48, v48))).u32[0];
              v50 = *(simd_float4 *)(*(_QWORD *)&v34 + 16);
              v253.columns[0] = *(simd_float4 *)*(_QWORD *)&v34;
              v253.columns[1] = v50;
              v253.columns[2] = (simd_float4)v44;
              v253.columns[3] = v45;
              do
              {
                v254.columns[v43] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v30, COERCE_FLOAT(*(_OWORD *)&v253.columns[v43])), v36, *(float32x2_t *)v253.columns[v43].f32, 1), v37, (float32x4_t)v253.columns[v43], 2), v252, (float32x4_t)v253.columns[v43], 3);
                ++v43;
              }
              while (v43 != 4);
              v247 = vmulq_n_f32(v44, v49);
              v255 = __invert_f4(v254);
              *(float32x4_t *)v40 = vmulq_f32(vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v34 + 128), *(float *)(*(_QWORD *)&v34 + 144)), v242);
              *(float32x4_t *)(v40 + 16) = v247;
              *(simd_float4x4 *)(v40 + 32) = v255;
              v51 = 0uLL;
              v52 = 0;
              if (*(_BYTE *)(*(_QWORD *)&v34 + 204))
              {
                v33 = a5;
                if ((a5 & 1) == 0)
                {
                  v52 = *(_DWORD *)(*(_QWORD *)&v34 + 148);
                  if (*(__int16 *)(*(_QWORD *)&v34 + 176) == -1)
                  {
                    ++*v25;
                  }
                  else
                  {
                    *(float32x2_t *)v53.f32 = vcvt_f32_u32(a1[19]);
                    v53.i64[1] = v53.i64[0];
                    v54.i32[0] = *(_DWORD *)(*(_QWORD *)&v34 + 168);
                    v54.i32[1] = *(_DWORD *)(*(_QWORD *)&v34 + 152);
                    v55.i32[0] = v54.i32[1];
                    v55.i32[1] = *(_DWORD *)(*(_QWORD *)&v34 + 172);
                    v56 = (int32x2_t)vdupq_n_s32(2 * v54.i32[1]).u64[0];
                    *(int32x2_t *)v57.i8 = vadd_s32(v54, v55);
                    v57.u64[1] = (unint64_t)vsub_s32(*(int32x2_t *)(*(_QWORD *)&v34 + 156), v56);
                    v51 = (int8x16_t)vdivq_f32(vcvtq_f32_u32(v57), v53);
                  }
                }
              }
              else
              {
                v33 = a5;
              }
              v58 = 0;
              v59 = *(float32x4_t *)(*(_QWORD *)&v34 + 64);
              v60 = *(float32x4_t *)(*(_QWORD *)&v34 + 80);
              v61 = *(float32x4_t *)(*(_QWORD *)&v34 + 96);
              v62 = *(float32x4_t *)(*(_QWORD *)&v34 + 112);
              v63 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), vcvt_f32_u32(a1[19]));
              *(float32x4_t *)(v40 + 96) = v59;
              *(float32x4_t *)(v40 + 112) = v60;
              *(float32x4_t *)(v40 + 128) = v61;
              *(float32x4_t *)(v40 + 144) = v62;
              v253 = v255;
              do
              {
                v254.columns[v58] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v59, COERCE_FLOAT(*(_OWORD *)&v253.columns[v58])), v60, *(float32x2_t *)v253.columns[v58].f32, 1), v61, (float32x4_t)v253.columns[v58], 2), v62, (float32x4_t)v253.columns[v58], 3);
                ++v58;
              }
              while (v58 != 4);
              v64 = 0;
              v253 = v254;
              v65 = 2.0 / v59.f32[0];
              v37 = (float32x4_t)xmmword_2260E5F40;
              do
              {
                v254.columns[v64] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_22610BB90, COERCE_FLOAT(*(_OWORD *)&v253.columns[v64])), (float32x4_t)xmmword_226133610, *(float32x2_t *)v253.columns[v64].f32, 1), (float32x4_t)xmmword_2260E5F40, (float32x4_t)v253.columns[v64], 2), (float32x4_t)xmmword_226133620, (float32x4_t)v253.columns[v64], 3);
                ++v64;
              }
              while (v64 != 4);
              if (v63.f32[0] >= v63.f32[1])
                v66 = v63.f32[0];
              else
                v66 = v63.f32[1];
              v67 = v254.columns[1];
              v68 = v254.columns[2];
              v69 = v254.columns[3];
              *(simd_float4 *)(v40 + 192) = v254.columns[0];
              *(simd_float4 *)(v40 + 208) = v67;
              *(simd_float4 *)(v40 + 224) = v68;
              *(simd_float4 *)(v40 + 240) = v69;
              *(int8x16_t *)(v40 + 160) = v51;
              *(_DWORD *)(v40 + 176) = v52;
              *(float *)(v40 + 180) = v65 * (float)(1.0 / v66);
              v26 = a3;
              v36 = (float32x4_t)xmmword_2260E5F20;
              v30 = (float32x4_t)xmmword_2260E5F10;
              goto LABEL_50;
            }
            ++*v25;
          }
        }
LABEL_50:
        *(_QWORD *)&v34 += 208;
      }
      while (*(_QWORD *)&v34 != v35);
    }
    v70 = a1[4];
    if (v70)
    {
      v71 = a1[5];
      v72 = *(_QWORD *)&v71 + 352 * *(_QWORD *)&v70;
      v73 = (float32x4_t)vdupq_n_s32(0x3ABFE803u);
      __asm { FMOV            V1.4S, #0.25 }
      v79 = (float32x4_t)vdupq_n_s32(0x3EA2F983u);
      do
      {
        v80 = *(float *)(*(_QWORD *)&v71 + 144);
        v81 = vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v71 + 128), v80);
        if (fmaxf(fmaxf(v81.f32[0], v81.f32[2]), v81.f32[1]) > 0.0)
        {
          if (!*(_BYTE *)(*(_QWORD *)&v71 + 341) || (v33 & 1) != 0)
          {
            if (*(_BYTE *)(*(_QWORD *)&v71 + 342))
            {
              v84 = v8[11];
              if (v84 < 8)
              {
                v8[11] = v84 + 1;
                v83 = (uint64_t)&v8[156 * v84 + 5036];
                goto LABEL_68;
              }
            }
            else
            {
              v86 = v8[2];
              if (v86 < 8)
              {
                v8[2] = v86 + 1;
                v83 = (uint64_t)&v8[156 * v86 + 1040];
                goto LABEL_68;
              }
            }
            ++*v238;
          }
          else
          {
            if (*(_BYTE *)(*(_QWORD *)&v71 + 342))
            {
              v82 = v8[12];
              if (v82 < 1)
              {
                v8[12] = v82 + 1;
                v83 = (uint64_t)&v8[156 * v82 + 6284];
                goto LABEL_68;
              }
            }
            else
            {
              v85 = v8[3];
              if (v85 < 1)
              {
                v8[3] = v85 + 1;
                v83 = (uint64_t)&v8[156 * v85 + 2288];
LABEL_68:
                v87 = 0;
                v88 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)&v71 + 48), *v26);
                *(float32x4_t *)v83 = vmulq_f32(vmulq_f32(vmulq_f32(vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v71 + 128), v80), v73), _Q1), v79);
                *(_DWORD *)(v83 + 608) = *(_DWORD *)(*(_QWORD *)&v71 + 148);
                *(_BYTE *)(v83 + 612) = *(_BYTE *)(*(_QWORD *)&v71 + 340);
                *(float32x4_t *)(v83 + 16) = v88;
                *(float *)(v83 + 580) = 1.0
                                      / (float)(*(float *)(*(_QWORD *)&v71 + 152) * *(float *)(*(_QWORD *)&v71 + 152));
                v89 = *(float *)(*(_QWORD *)&v71 + 156) * 0.5;
                if (v89 < 0.0)
                  v89 = 0.0;
                *(float *)(v83 + 616) = v89;
                v90 = vnegq_f32(v88);
                v91 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), (int8x16_t)v90, 0xCuLL);
                v92 = (_OWORD *)(v83 + 48);
                do
                {
                  if (v31 == v87)
                  {
                    re::internal::assertLog((re::internal *)6, v28, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v31, v31);
                    _os_crash();
                    __break(1u);
                    return;
                  }
                  v93 = (float32x4_t)PointLightFaceLookatOrientations[v87];
                  v94 = vnegq_f32(v93);
                  v95 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v94, (int32x4_t)v94), (int8x16_t)v94, 0xCuLL);
                  v96 = vmlaq_f32(vmulq_f32(v91, v93), v90, v95);
                  v97 = (int8x16_t)vaddq_f32(v96, v96);
                  v98 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v97, (int32x4_t)v97), v97, 0xCuLL);
                  v99 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v98, (int32x4_t)v98), (int8x16_t)v98, 0xCuLL), v93), v98, v95);
                  v100 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v98, v93, 3), v88), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v99, (int32x4_t)v99), v99, 0xCuLL));
                  v98.f32[0] = v94.f32[0] + v94.f32[0];
                  v101 = (float)(v94.f32[0] + v94.f32[0]) * v94.f32[0];
                  v102 = vmuls_lane_f32(v94.f32[1] + v94.f32[1], *(float32x2_t *)v94.f32, 1);
                  v103 = vmuls_lane_f32(v94.f32[2] + v94.f32[2], v94, 2);
                  v104 = vmuls_lane_f32(v94.f32[0] + v94.f32[0], *(float32x2_t *)v94.f32, 1);
                  v105 = vmuls_lane_f32(v94.f32[0] + v94.f32[0], v94, 2);
                  v94.f32[0] = vmuls_lane_f32(v94.f32[1] + v94.f32[1], v94, 2);
                  v98.f32[0] = vmuls_lane_f32(v98.f32[0], v93, 3);
                  v106 = vmuls_lane_f32(v94.f32[1] + v94.f32[1], v93, 3);
                  v93.f32[0] = vmuls_lane_f32(v94.f32[2] + v94.f32[2], v93, 3);
                  HIDWORD(v107) = 0;
                  *(float *)&v107 = 1.0 - (float)(v102 + v103);
                  *((float *)&v107 + 1) = v104 + v93.f32[0];
                  *((float *)&v107 + 2) = v105 - v106;
                  HIDWORD(v108) = 0;
                  *(float *)&v108 = v104 - v93.f32[0];
                  *((float *)&v108 + 1) = 1.0 - (float)(v101 + v103);
                  *((float *)&v108 + 2) = v94.f32[0] + v98.f32[0];
                  HIDWORD(v109) = 0;
                  *(float *)&v109 = v105 + v106;
                  *((float *)&v109 + 1) = v94.f32[0] - v98.f32[0];
                  *((float *)&v109 + 2) = 1.0 - (float)(v101 + v102);
                  v100.i32[3] = 1.0;
                  *(v92 - 1) = v107;
                  *v92 = v108;
                  v92[1] = v109;
                  v92[2] = v100;
                  ++v87;
                  v92 += 4;
                }
                while (v87 != 6);
                v110 = *(int32x4_t *)(*(_QWORD *)&v71 + 80);
                v111 = *(_OWORD *)(*(_QWORD *)&v71 + 96);
                v112 = *(_OWORD *)(*(_QWORD *)&v71 + 112);
                *(_OWORD *)(v83 + 416) = *(_OWORD *)(*(_QWORD *)&v71 + 64);
                *(int32x4_t *)(v83 + 432) = v110;
                *(_OWORD *)(v83 + 448) = v111;
                *(_OWORD *)(v83 + 464) = v112;
                if (!*(_BYTE *)(*(_QWORD *)&v71 + 341) || (v33 & 1) != 0)
                {
                  *(_DWORD *)(v83 + 576) = 0;
                  *(_OWORD *)(v83 + 544) = 0uLL;
                  *(_OWORD *)(v83 + 560) = 0uLL;
                  *(_OWORD *)(v83 + 512) = 0uLL;
                  *(_OWORD *)(v83 + 528) = 0uLL;
                  *(_OWORD *)(v83 + 480) = 0uLL;
                  *(_OWORD *)(v83 + 496) = 0uLL;
                }
                else
                {
                  v113 = 0;
                  *(_DWORD *)(v83 + 576) = *(_DWORD *)(*(_QWORD *)&v71 + 160);
                  v114 = (float32x4_t *)(v83 + 480);
                  do
                  {
                    v115 = *(_QWORD *)&v71 + v113;
                    v28 = *(__int16 *)(*(_QWORD *)&v71 + v113 + 192);
                    if ((_DWORD)v28 == -1)
                    {
                      ++*v25;
                      v119 = 0uLL;
                    }
                    else
                    {
                      v28 = *(unsigned int *)(*(_QWORD *)&v71 + 164);
                      v116.i64[0] = *(_QWORD *)(v115 + 184);
                      *(float32x2_t *)v117.f32 = vcvt_f32_u32(a1[19]);
                      v117.i64[1] = v117.i64[0];
                      v116.i64[1] = *(_QWORD *)(v115 + 172);
                      v110.i32[0] = *(_DWORD *)(*(_QWORD *)&v71 + 164);
                      v110.i32[1] = 2 * v28;
                      v110 = vzip1q_s32(v110, v110);
                      v118.i64[0] = vaddq_s32(v116, v110).u64[0];
                      v118.i64[1] = vsubq_s32(v116, v110).i64[1];
                      v119 = vdivq_f32(vcvtq_f32_u32(v118), v117);
                    }
                    *v114++ = v119;
                    v113 += 24;
                  }
                  while (v113 != 144);
                }
                if (*(_BYTE *)(*(_QWORD *)&v71 + 342))
                {
                  if (*(__int16 *)(*(_QWORD *)&v71 + 336) == -1)
                  {
                    ++*v25;
                    v124 = 0uLL;
                  }
                  else
                  {
                    v120.i64[0] = *(_QWORD *)(*(_QWORD *)&v71 + 328);
                    *(float32x2_t *)v121.f32 = vcvt_f32_u32(a1[18]);
                    v121.i64[1] = v121.i64[0];
                    v120.i64[1] = *(_QWORD *)(*(_QWORD *)&v71 + 316);
                    v110.i32[0] = *(_DWORD *)(*(_QWORD *)&v71 + 168);
                    v110.i32[1] = 2 * v110.i32[0];
                    v122 = vzip1q_s32(v110, v110);
                    v123.i64[0] = vaddq_s32(v120, v122).u64[0];
                    v123.i64[1] = vsubq_s32(v120, v122).i64[1];
                    v124 = vdivq_f32(vcvtq_f32_u32(v123), v121);
                  }
                  *(float32x4_t *)(v83 + 592) = v124;
                }
                else
                {
                  *(_OWORD *)(v83 + 592) = 0uLL;
                }
                goto LABEL_88;
              }
            }
            ++*v25;
          }
        }
LABEL_88:
        *(_QWORD *)&v71 += 352;
      }
      while (*(_QWORD *)&v71 != v72);
    }
    v125 = a1[7];
    if (!*(_QWORD *)&v125)
    {
LABEL_129:
      v169 = a1[10];
      if (v169)
      {
        v170 = 32 * *(_QWORD *)&v169;
        v171 = (float *)(*(_QWORD *)&a1[11] + 16);
        v172 = (float32x4_t)vdupq_n_s32(0x3ABFE803u);
        do
        {
          v173 = vmulq_n_f32(*(float32x4_t *)(v171 - 4), *v171);
          if (fmaxf(fmaxf(v173.f32[0], v173.f32[2]), v173.f32[1]) > 0.0)
          {
            v174 = v8[6];
            if ((int)v174 <= 7)
            {
              v8[6] = v174 + 1;
              *(float32x4_t *)&v8[4 * v174 + 3596] = vmulq_f32(v173, v172);
            }
          }
          v171 += 8;
          v170 -= 32;
        }
        while (v170);
      }
      v175 = a1[13];
      if (v175)
      {
        v176 = 0;
        v177 = a1[14];
        v178 = 112 * *(_QWORD *)&v175;
        v179 = (float32x4_t)vdupq_n_s32(0x3ABFE803u);
        do
        {
          v180 = vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v177 + v176 + 64), *(float *)(*(_QWORD *)&v177 + v176 + 80));
          if (fmaxf(fmaxf(v180.f32[0], v180.f32[2]), v180.f32[1]) > 0.0)
          {
            v181 = v8[7];
            if (v181 > 7)
              break;
            v182 = *v26;
            v183 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)&v177 + v176 + 48), *v26);
            v182.i64[0] = *(_QWORD *)(*(_QWORD *)&v177 + v176);
            v182.i32[2] = *(_DWORD *)(*(_QWORD *)&v177 + v176 + 8);
            v30.i64[0] = *(_QWORD *)(*(_QWORD *)&v177 + v176 + 16);
            v30.i32[2] = *(_DWORD *)(*(_QWORD *)&v177 + v176 + 24);
            v184 = vmulq_n_f32(vnegq_f32(v182), *(float *)(*(_QWORD *)&v177 + v176 + 88) * 0.5);
            v185 = vmulq_n_f32(v30, *(float *)(*(_QWORD *)&v177 + v176 + 92) * 0.5);
            v186 = vsubq_f32(v183, v184);
            v187 = vsubq_f32(v186, v185);
            v188 = vaddq_f32(v183, v184);
            v189 = vsubq_f32(v188, v185);
            v190 = vaddq_f32(v185, v188);
            v30 = vaddq_f32(v185, v186);
            v8[7] = v181 + 1;
            v191 = (float32x4_t *)&v8[24 * v181];
            v191[907] = vmulq_f32(v180, v179);
            v191[908] = v187;
            v191[909] = v189;
            v191[910] = v190;
            v191[911] = v30;
            v191[912].i8[0] = *(_BYTE *)(*(_QWORD *)&v177 + v176 + 96);
          }
          v176 += 112;
        }
        while (v178 != v176);
      }
      v192 = a1[16];
      if (!*(_QWORD *)&v192)
        return;
      v193 = a1[17];
      v194 = *(_QWORD *)&v193 + 192 * *(_QWORD *)&v192;
      v195 = (float32x4_t)xmmword_2260E5F10;
      v196 = (float32x4_t)xmmword_2260E5F20;
      v197 = (float32x4_t)xmmword_2260E5F40;
      v243 = (float32x4_t)vdupq_n_s32(0x3ABFE803u);
      while (1)
      {
        v198 = vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v193 + 128), *(float *)(*(_QWORD *)&v193 + 144));
        if (fmaxf(fmaxf(v198.f32[0], v198.f32[2]), v198.f32[1]) > 0.0)
        {
          v199 = v8[8];
          if ((int)v199 > 0)
          {
            ++*v25;
            return;
          }
          v200 = 0;
          v8[8] = v199 + 1;
          v201 = *(float32x4_t *)(*(_QWORD *)&v193 + 32);
          v202 = *(simd_float4 *)(*(_QWORD *)&v193 + 48);
          v203 = (int32x4_t)vmulq_f32(v201, v201);
          v203.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v203, 2), vadd_f32(*(float32x2_t *)v203.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v203.i8, 1))).u32[0];
          v204 = vrsqrte_f32((float32x2_t)v203.u32[0]);
          v205 = vmul_f32(v204, vrsqrts_f32((float32x2_t)v203.u32[0], vmul_f32(v204, v204)));
          LODWORD(v206) = vmul_f32(v205, vrsqrts_f32((float32x2_t)v203.u32[0], vmul_f32(v205, v205))).u32[0];
          v207 = *(simd_float4 *)(*(_QWORD *)&v193 + 16);
          v253.columns[0] = *(simd_float4 *)*(_QWORD *)&v193;
          v253.columns[1] = v207;
          v253.columns[2] = (simd_float4)v201;
          v253.columns[3] = v202;
          do
          {
            v254.columns[v200] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v195, COERCE_FLOAT(*(_OWORD *)&v253.columns[v200])), v196, *(float32x2_t *)v253.columns[v200].f32, 1), v197, (float32x4_t)v253.columns[v200], 2), v252, (float32x4_t)v253.columns[v200], 3);
            ++v200;
          }
          while (v200 != 4);
          v250 = vmulq_n_f32(v201, v206);
          v208 = &v8[64 * v199];
          v257 = __invert_f4(v254);
          *((float32x4_t *)v208 + 955) = vmulq_f32(vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v193 + 128), *(float *)(*(_QWORD *)&v193 + 144)), v243);
          *((float32x4_t *)v208 + 956) = v250;
          *(simd_float4x4 *)(v208 + 3828) = v257;
          v209 = *(float32x4_t *)(*(_QWORD *)&v193 + 64);
          v210 = *(float32x4_t *)(*(_QWORD *)&v193 + 80);
          v211 = *(float32x4_t *)(*(_QWORD *)&v193 + 96);
          v212 = *(float32x4_t *)(*(_QWORD *)&v193 + 112);
          if (*(__int16 *)(*(_QWORD *)&v193 + 176) == -1)
          {
            ++*v25;
            v213 = vcvt_f32_u32(a1[19]);
            v219 = 0uLL;
          }
          else
          {
            v213 = vcvt_f32_u32(a1[19]);
            *(float32x2_t *)v214.f32 = v213;
            *(float32x2_t *)&v214.u32[2] = v213;
            v215.i32[0] = *(_DWORD *)(*(_QWORD *)&v193 + 168);
            v215.i32[1] = *(_DWORD *)(*(_QWORD *)&v193 + 152);
            v216.i32[0] = v215.i32[1];
            v216.i32[1] = *(_DWORD *)(*(_QWORD *)&v193 + 172);
            v217 = (int32x2_t)vdupq_n_s32(2 * v215.i32[1]).u64[0];
            *(int32x2_t *)v218.i8 = vadd_s32(v215, v216);
            v218.u64[1] = (unint64_t)vsub_s32(*(int32x2_t *)(*(_QWORD *)&v193 + 156), v217);
            v219 = (int8x16_t)vdivq_f32(vcvtq_f32_u32(v218), v214);
          }
          v220 = 0;
          v221 = vmul_f32(v213, (float32x2_t)*(_OWORD *)&vextq_s8(v219, v219, 8uLL));
          if (v221.f32[0] < v221.f32[1])
            v221.f32[0] = v221.f32[1];
          v222 = &v8[64 * v199];
          *((float32x4_t *)v222 + 961) = v209;
          *((float32x4_t *)v222 + 962) = v210;
          *((float32x4_t *)v222 + 963) = v211;
          *((float32x4_t *)v222 + 964) = v212;
          *((int8x16_t *)v222 + 965) = v219;
          v222[3864] = *(_DWORD *)(*(_QWORD *)&v193 + 148);
          *((float *)v222 + 3865) = (float)(2.0 / v209.f32[0]) * (float)(1.0 / v221.f32[0]);
          v253 = v257;
          do
          {
            v254.columns[v220] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v209, COERCE_FLOAT(*(_OWORD *)&v253.columns[v220])), v210, *(float32x2_t *)v253.columns[v220].f32, 1), v211, (float32x4_t)v253.columns[v220], 2), v212, (float32x4_t)v253.columns[v220], 3);
            ++v220;
          }
          while (v220 != 4);
          v223 = v254.columns[0];
          v224 = v254.columns[1];
          v225 = v254.columns[2];
          v226 = v254.columns[3];
          v227 = atomic_load((unsigned __int8 *)_MergedGlobals_371);
          if ((v227 & 1) == 0)
          {
            v251 = v254.columns[0];
            v240 = v254.columns[2];
            v241 = v254.columns[1];
            v239 = v254.columns[3];
            v237 = __cxa_guard_acquire(_MergedGlobals_371);
            v226 = v239;
            v225 = v240;
            v224 = v241;
            v223 = v251;
            if (v237)
            {
              xmmword_254118B20 = xmmword_22610BB90;
              unk_254118B30 = xmmword_226133610;
              xmmword_254118B40 = xmmword_2260E5F40;
              unk_254118B50 = xmmword_226133620;
              __cxa_guard_release(_MergedGlobals_371);
              v226 = v239;
              v225 = v240;
              v224 = v241;
              v223 = v251;
            }
          }
          v228 = 0;
          v229 = (float32x4_t)xmmword_254118B20;
          v230 = (float32x4_t)unk_254118B30;
          v231 = (float32x4_t)xmmword_254118B40;
          v232 = (float32x4_t)unk_254118B50;
          v253.columns[0] = v223;
          v253.columns[1] = v224;
          v253.columns[2] = v225;
          v253.columns[3] = v226;
          v196 = (float32x4_t)xmmword_2260E5F20;
          v197 = (float32x4_t)xmmword_2260E5F40;
          do
          {
            v254.columns[v228] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v229, COERCE_FLOAT(*(_OWORD *)&v253.columns[v228])), v230, *(float32x2_t *)v253.columns[v228].f32, 1), v231, (float32x4_t)v253.columns[v228], 2), v232, (float32x4_t)v253.columns[v228], 3);
            ++v228;
          }
          while (v228 != 4);
          v233 = v254.columns[1];
          v234 = v254.columns[2];
          v235 = v254.columns[3];
          v236 = (simd_float4 *)&v8[64 * v199];
          v236[967] = v254.columns[0];
          v236[968] = v233;
          v236[969] = v234;
          v236[970] = v235;
          v195 = (float32x4_t)xmmword_2260E5F10;
        }
        *(_QWORD *)&v193 += 192;
        if (*(_QWORD *)&v193 == v194)
          return;
      }
    }
    v126 = a1[8];
    v127 = *(_QWORD *)&v126 + 240 * *(_QWORD *)&v125;
    v30 = (float32x4_t)xmmword_2260E5F10;
    v128 = (float32x4_t)xmmword_2260E5F20;
    v129 = (float32x4_t)xmmword_2260E5F40;
    v244 = (float32x4_t)vdupq_n_s32(0x3EA2F983u);
    v246 = (float32x4_t)vdupq_n_s32(0x3ABFE803u);
    while (1)
    {
      v130 = vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v126 + 128), *(float *)(*(_QWORD *)&v126 + 144));
      if (fmaxf(fmaxf(v130.f32[0], v130.f32[2]), v130.f32[1]) > 0.0)
      {
        if (!*(_BYTE *)(*(_QWORD *)&v126 + 229) || (v33 & 1) != 0)
        {
          if (*(_BYTE *)(*(_QWORD *)&v126 + 230))
          {
            v134 = v8[9];
            if (v134 < 8)
            {
              v8[9] = v134 + 1;
              v132 = &v8[72 * v134];
              v133 = 3884;
              goto LABEL_106;
            }
          }
          else
          {
            v136 = v8[4];
            if (v136 < 8)
            {
              v8[4] = v136 + 1;
              v132 = &v8[72 * v136];
              v133 = 2444;
LABEL_106:
              v137 = &v132[v133];
              v138 = 0;
              v139 = *v26;
              v140 = *(simd_float4 *)(*(_QWORD *)&v126 + 16);
              v142 = *(simd_float4 *)(*(_QWORD *)&v126 + 32);
              v141 = *(float32x4_t *)(*(_QWORD *)&v126 + 48);
              v253.columns[0] = *(simd_float4 *)*(_QWORD *)&v126;
              v253.columns[1] = v140;
              v253.columns[2] = v142;
              v253.columns[3] = (simd_float4)v141;
              do
              {
                v254.columns[v138] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v30, COERCE_FLOAT(*(_OWORD *)&v253.columns[v138])), v128, *(float32x2_t *)v253.columns[v138].f32, 1), v129, (float32x4_t)v253.columns[v138], 2), v252, (float32x4_t)v253.columns[v138], 3);
                ++v138;
              }
              while (v138 != 4);
              v248 = vsubq_f32(v141, v139);
              v256 = __invert_f4(v254);
              v143 = 0;
              *(float32x4_t *)v137 = vmulq_f32(vmulq_f32(vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v126 + 128), *(float *)(*(_QWORD *)&v126 + 144)), v246), v244);
              v137[68] = *(_DWORD *)(*(_QWORD *)&v126 + 148);
              *((_BYTE *)v137 + 276) = *(_BYTE *)(*(_QWORD *)&v126 + 228);
              *((float32x4_t *)v137 + 1) = v248;
              *(simd_float4x4 *)(v137 + 8) = v256;
              v144 = *(_OWORD *)(*(_QWORD *)&v126 + 80);
              v145 = *(_OWORD *)(*(_QWORD *)&v126 + 96);
              v146 = *(_OWORD *)(*(_QWORD *)&v126 + 112);
              *((_OWORD *)v137 + 6) = *(_OWORD *)(*(_QWORD *)&v126 + 64);
              *((_OWORD *)v137 + 7) = v144;
              *((_OWORD *)v137 + 8) = v145;
              *((_OWORD *)v137 + 9) = v146;
              v147 = *(float32x4_t *)(*(_QWORD *)&v126 + 64);
              v148 = *(float32x4_t *)(*(_QWORD *)&v126 + 80);
              v149 = *(float32x4_t *)(*(_QWORD *)&v126 + 96);
              v150 = *(float32x4_t *)(*(_QWORD *)&v126 + 112);
              v253 = v256;
              do
              {
                v254.columns[v143] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v147, COERCE_FLOAT(*(_OWORD *)&v253.columns[v143])), v148, *(float32x2_t *)v253.columns[v143].f32, 1), v149, (float32x4_t)v253.columns[v143], 2), v150, (float32x4_t)v253.columns[v143], 3);
                ++v143;
              }
              while (v143 != 4);
              v151 = v254.columns[1];
              v152 = v254.columns[2];
              v153 = v254.columns[3];
              *((_OWORD *)v137 + 10) = v254.columns[0];
              *((simd_float4 *)v137 + 11) = v151;
              *((simd_float4 *)v137 + 12) = v152;
              *((simd_float4 *)v137 + 13) = v153;
              *((float *)v137 + 61) = 1.0
                                    / (float)(*(float *)(*(_QWORD *)&v126 + 152) * *(float *)(*(_QWORD *)&v126 + 152));
              v154 = *(float *)(*(_QWORD *)&v126 + 156) * 0.5;
              if (v154 < 0.0)
                v154 = 0.0;
              *((float *)v137 + 70) = v154;
              v155 = cosf(*(float *)(*(_QWORD *)&v126 + 160) * 0.5);
              v156 = cosf(*(float *)(*(_QWORD *)&v126 + 164) * 0.5) - v155;
              if (v156 <= 0.00000011921)
                v158 = 8388600.0;
              else
                v158 = 1.0 / v156;
              *((float *)v137 + 62) = v158;
              *((float *)v137 + 63) = -(float)(v155 * v158);
              v33 = a5;
              if (!*(_BYTE *)(*(_QWORD *)&v126 + 229) || (a5 & 1) != 0)
              {
                *((_QWORD *)v137 + 28) = 0;
                *((_QWORD *)v137 + 29) = 0;
                v137[60] = 0;
                v128 = (float32x4_t)xmmword_2260E5F20;
                v30 = (float32x4_t)xmmword_2260E5F10;
                v129 = (float32x4_t)xmmword_2260E5F40;
              }
              else
              {
                v137[60] = *(_DWORD *)(*(_QWORD *)&v126 + 168);
                v128 = (float32x4_t)xmmword_2260E5F20;
                v30 = (float32x4_t)xmmword_2260E5F10;
                v129 = (float32x4_t)xmmword_2260E5F40;
                if (*(__int16 *)(*(_QWORD *)&v126 + 200) == -1)
                {
                  ++*v25;
                  v163 = 0uLL;
                }
                else
                {
                  *(float32x2_t *)v157.f32 = vcvt_f32_u32(a1[19]);
                  v157.i64[1] = v157.i64[0];
                  v159.i32[0] = *(_DWORD *)(*(_QWORD *)&v126 + 192);
                  v159.i32[1] = *(_DWORD *)(*(_QWORD *)&v126 + 172);
                  v160.i32[0] = v159.i32[1];
                  v160.i32[1] = *(_DWORD *)(*(_QWORD *)&v126 + 196);
                  v161 = (int32x2_t)vdupq_n_s32(2 * v159.i32[1]).u64[0];
                  *(int32x2_t *)v162.i8 = vadd_s32(v159, v160);
                  v162.u64[1] = (unint64_t)vsub_s32(*(int32x2_t *)(*(_QWORD *)&v126 + 180), v161);
                  v163 = vdivq_f32(vcvtq_f32_u32(v162), v157);
                }
                *((float32x4_t *)v137 + 14) = v163;
              }
              if (*(_BYTE *)(*(_QWORD *)&v126 + 230))
              {
                if (*(__int16 *)(*(_QWORD *)&v126 + 224) == -1)
                {
                  ++*v25;
                  v168 = 0uLL;
                }
                else
                {
                  v164.i64[0] = *(_QWORD *)(*(_QWORD *)&v126 + 216);
                  *(float32x2_t *)v165.f32 = vcvt_f32_u32(a1[18]);
                  v165.i64[1] = v165.i64[0];
                  v164.i64[1] = *(_QWORD *)(*(_QWORD *)&v126 + 204);
                  v157.i32[0] = *(_DWORD *)(*(_QWORD *)&v126 + 176);
                  v157.i32[1] = 2 * v157.i32[0];
                  v166 = vzip1q_s32((int32x4_t)v157, (int32x4_t)v157);
                  v167.i64[0] = vaddq_s32(v164, v166).u64[0];
                  v167.i64[1] = vsubq_s32(v164, v166).i64[1];
                  v168 = vdivq_f32(vcvtq_f32_u32(v167), v165);
                }
                *((float32x4_t *)v137 + 16) = v168;
              }
              else
              {
                *((_QWORD *)v137 + 32) = 0;
                *((_QWORD *)v137 + 33) = 0;
              }
              goto LABEL_128;
            }
          }
          ++*v238;
        }
        else
        {
          if (*(_BYTE *)(*(_QWORD *)&v126 + 230))
          {
            v131 = v8[10];
            if (v131 < 8)
            {
              v8[10] = v131 + 1;
              v132 = &v8[72 * v131];
              v133 = 4460;
              goto LABEL_106;
            }
          }
          else
          {
            v135 = v8[5];
            if (v135 < 8)
            {
              v8[5] = v135 + 1;
              v132 = &v8[72 * v135];
              v133 = 3020;
              goto LABEL_106;
            }
          }
          ++*v25;
        }
      }
LABEL_128:
      *(_QWORD *)&v126 += 240;
      if (*(_QWORD *)&v126 == v127)
        goto LABEL_129;
    }
  }
}

BOOL re::LightContext::isEmpty(re::LightContext *this)
{
  return !*((_QWORD *)this + 1)
      && !*((_QWORD *)this + 4)
      && !*((_QWORD *)this + 7)
      && !*((_QWORD *)this + 10)
      && !*((_QWORD *)this + 13)
      && *((_QWORD *)this + 16) == 0;
}

__int128 *re::getPointLightFaceLookatOrientations(re *this)
{
  unsigned __int8 v1;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6[2];
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10[2];
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14[2];
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18[2];
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22[2];
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26[2];

  if ((v1 & 1) == 0
  {
    v25 = 0uLL;
    v24 = (float32x4_t)0x3F800000uLL;
    v23 = (float32x4_t)0x3F80000000000000uLL;
    re::makeLookAtPose<float>(&v25, &v24, &v23, 1, v26);
    re::getPointLightFaceLookatOrientations(void)::orientations = (__int128)v26[1];
    v21 = 0uLL;
    v20 = (float32x4_t)0xBF800000uLL;
    v19 = (float32x4_t)0x3F80000000000000uLL;
    re::makeLookAtPose<float>(&v21, &v20, &v19, 1, v22);
    xmmword_255803860 = (__int128)v22[1];
    v17 = 0uLL;
    v16 = (float32x4_t)0x3F80000000000000uLL;
    v15.i64[0] = 0;
    v15.i64[1] = 3212836864;
    re::makeLookAtPose<float>(&v17, &v16, &v15, 1, v18);
    xmmword_255803870 = (__int128)v18[1];
    v13 = 0uLL;
    v12 = (float32x4_t)0xBF80000000000000;
    v11.i64[0] = 0;
    v11.i64[1] = 3212836864;
    re::makeLookAtPose<float>(&v13, &v12, &v11, 1, v14);
    xmmword_255803880 = (__int128)v14[1];
    v9 = 0uLL;
    v8.i64[0] = 0;
    v8.i64[1] = 1065353216;
    v7 = (float32x4_t)0x3F80000000000000uLL;
    re::makeLookAtPose<float>(&v9, &v8, &v7, 1, v10);
    xmmword_255803890 = (__int128)v10[1];
    v5 = 0uLL;
    v4.i64[0] = 0;
    v4.i64[1] = 3212836864;
    v3 = (float32x4_t)0x3F80000000000000uLL;
    re::makeLookAtPose<float>(&v5, &v4, &v3, 1, v6);
    xmmword_2558038A0 = (__int128)v6[1];
  }
  return &re::getPointLightFaceLookatOrientations(void)::orientations;
}

void re::LightContext::createConstantBuffer(uint32x2_t *a1, re::FrameContext *this, float32x4_t *a3, re::BufferTable *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;

  re::FrameContext::perFrameAlloc(this, 0x65C0uLL, 0x10uLL, (uint64_t)&v14);
  v7 = v14;
  v12 = v15;
  v13 = v16;
  v14 = 0x28957AC9A6219ECLL;
  v15 = "lightBuffer";
  v10 = 0x144ABD64D310CF6;
  v11 = v7;
  v9[0] = v16;
  v9[1] = v12;
  re::BufferTable::setBuffer(a4, (const re::WeakStringID *)&v10, (const BufferView *)v9);
  v10 = 0;
  re::StringID::destroyString((re::StringID *)&v14);
  re::LightContext::createLightConstantBuffer(a1, &v11, a3, v8, 0);
}

uint64_t re::BufferTable::setBuffer(re::BufferTable *this, const re::WeakStringID *a2, const BufferView *a3)
{
  uint64_t v5;
  id v7;

  v5 = re::BufferTable::getOrAddKey(this, a2);
  v7 = 0;
  re::BufferTable::setBufferRef((void **)this, v5, &v7);
  if (v7)

  re::BufferTable::setBufferView(this, v5, *(_QWORD *)a3, *((_QWORD *)a3 + 1));
  return re::BufferTable::setBufferIndirectResources(this, v5, 0, 0);
}

void re::LightContexts::createConstantBuffer(uint32x2_t *a1, re::FrameContext *this, float32x4_t *a3, re::BufferTable *a4)
{
  uint32x2_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  unint64_t v11;
  uint32x2_t *v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;

  v7 = a1[5];
  if (v7)
  {
    re::FrameContext::perFrameAlloc(this, 26048 * *(_QWORD *)&v7, 0x10uLL, (uint64_t)&v16);
    v8 = v16;
    v9 = v17;
    v10 = v18;
    v16 = 0x28957AC9A6219ECLL;
    v17 = "lightBuffer";
    v14[1] = v9;
    v15 = 0x144ABD64D310CF6;
    v14[0] = v18;
    re::BufferTable::setBufferViewArray(a4, (const re::WeakStringID *)&v15, (const BufferView *)v14, 26048);
    v15 = 0;
    re::StringID::destroyString((re::StringID *)&v16);
    if (v7.i32[0] >= 1)
    {
      v11 = 0;
      do
      {
        v12 = (uint32x2_t *)re::BucketArray<re::LightContext,16ul>::operator[]((uint64_t)a1, v11);
        v16 = v8;
        v17 = (const char *)(v9 | 0x65C000000000);
        v18 = v10;
        re::LightContext::createLightConstantBuffer(v12, &v16, a3, v13, 0);
        ++v11;
        LODWORD(v9) = (_DWORD)v9 + 26048;
      }
      while (v7.u32[0] != v11);
    }
  }
  else
  {
    re::LightContext::createConstantBuffer(a1 + 13, this, a3, a4);
  }
}

void re::BufferTable::setBufferViewArray(re::BufferTable *this, const re::WeakStringID *a2, const BufferView *a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  id v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v7 = re::BufferTable::getOrAddKey(this, a2);
  v9[0] = 0;
  re::BufferTable::setBufferRef((void **)this, v7, v9);
  if (v9[0])

  re::BufferTable::setBufferView(this, v7, *(_QWORD *)a3, *((_QWORD *)a3 + 1));
  re::BufferTable::setBufferIndirectResources(this, v7, 0, 0);
  v8 = *((_QWORD *)this + 15);
  if (v8 <= v7)
  {
    re::DynamicArray<float>::resize((uint64_t)this + 104, (v7 + 1));
    v8 = *((_QWORD *)this + 15);
  }
  if (v8 <= v7)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    *(_OWORD *)v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_DWORD *)(*((_QWORD *)this + 17) + 4 * v7) = a4;
}

uint64_t re::BucketArray<re::LightContext,16ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 4)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 4)) + 168 * (a2 & 0xF);
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 4)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 4)) + 168 * (a2 & 0xF);
}

BOOL re::LightContexts::isEmpty(re::LightContexts *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  re::LightContext *v5;
  _BOOL8 result;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 1;
  v3 = 0;
  v4 = v1 - 1;
  do
  {
    v5 = (re::LightContext *)re::BucketArray<re::LightContext,16ul>::operator[]((uint64_t)this, v3);
    result = re::LightContext::isEmpty(v5);
    if (!result)
      break;
  }
  while (v4 != v3++);
  return result;
}

float32x4_t *re::makeLookAtPose<float>@<X0>(float32x4_t *result@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X2>, int a4@<W3>, float32x4_t *a5@<X8>)
{
  float32x4_t v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  float v19;
  float v20;
  float v21;
  float32x2_t v22;
  float32x2_t v23;
  float v24;
  BOOL v25;
  float v26;
  unsigned int v27;
  float32x2_t v28;
  float32x2_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float32x2_t v35;
  float32x2_t v36;
  float v37;
  float v38;
  float v39;

  if (a4)
    v5 = vsubq_f32(*result, *a2);
  else
    v5 = vsubq_f32(*a2, *result);
  v6 = (int32x4_t)vmulq_f32(v5, v5);
  v6.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v6, 2), vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1))).u32[0];
  v7 = vrsqrte_f32((float32x2_t)v6.u32[0]);
  v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v7, v7)));
  v9 = vmulq_n_f32(v5, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v8, v8))).f32[0]);
  v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL);
  v11 = vmlaq_f32(vmulq_f32(v10, vnegq_f32(*a3)), v9, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a3, *(int32x4_t *)a3), *(int8x16_t *)a3, 0xCuLL));
  v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL);
  v13 = (int32x4_t)vmulq_f32(v11, v11);
  v13.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), *(float32x2_t *)v13.i8)).u32[0];
  v14 = vrsqrte_f32((float32x2_t)v13.u32[0]);
  v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v14, v14)));
  v16 = vmulq_n_f32(v12, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v15, v15))).f32[0]);
  v17 = v16.f32[1];
  v18 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL), vnegq_f32(v9)), v16, v10);
  v19 = v9.f32[2] + vaddq_f32(v16, v18).f32[0];
  if (v19 >= 0.0)
  {
    v18.f32[0] = sqrtf(v19 + 1.0);
    v16.f32[0] = v18.f32[0] + v18.f32[0];
    v22 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v18.f32[0] + v18.f32[0]));
    v23 = vmul_f32(v22, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v18.f32[0] + v18.f32[0]), v22));
    v24 = vmul_f32(v23, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v18.f32[0] + v18.f32[0]), v23)).f32[0];
    v18.f32[0] = (float)(v18.f32[1] - v9.f32[1]) * v24;
    v20 = (float)(v9.f32[0] - v16.f32[2]) * v24;
    v9.f32[0] = (float)(v16.f32[1] - v18.f32[2]) * v24;
    v21 = v16.f32[0] * 0.25;
  }
  else if (v16.f32[0] < v9.f32[2] || (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v16, v18))).u8[0] & 1) != 0)
  {
    v16.f32[0] = 1.0 - v16.f32[0];
    v25 = v18.f32[0] < v9.f32[2];
    v26 = sqrtf(v9.f32[2] + (float)(v16.f32[0] - v18.f32[0]));
    *(float *)&v27 = v26 + v26;
    v28 = vrecpe_f32((float32x2_t)v27);
    v29 = vmul_f32(v28, vrecps_f32((float32x2_t)v27, v28));
    v30 = vmul_f32(v29, vrecps_f32((float32x2_t)v27, v29)).f32[0];
    v31 = (float)(v9.f32[0] + v16.f32[2]) * v30;
    v32 = (float)(v9.f32[1] + v18.f32[1]) * v30;
    v33 = *(float *)&v27 * 0.25;
    v34 = (float)(v16.f32[1] - v18.f32[2]) * v30;
    v18.f32[0] = sqrtf((float)(v16.f32[0] - v9.f32[2]) + v18.f32[0]);
    v18.f32[0] = v18.f32[0] + v18.f32[0];
    v35 = vrecpe_f32((float32x2_t)v18.u32[0]);
    v36 = vmul_f32(v35, vrecps_f32((float32x2_t)v18.u32[0], v35));
    v37 = vmul_f32(v36, vrecps_f32((float32x2_t)v18.u32[0], v36)).f32[0];
    v38 = v18.f32[0] * 0.25;
    v39 = (float)(v9.f32[1] + v18.f32[1]) * v37;
    v21 = (float)(v9.f32[0] - v16.f32[2]) * v37;
    if (v25)
      v18.f32[0] = v31;
    else
      v18.f32[0] = (float)(v16.f32[1] + v18.f32[2]) * v37;
    if (v25)
      v20 = v32;
    else
      v20 = v38;
    if (v25)
      v9.f32[0] = v33;
    else
      v9.f32[0] = v39;
    if (v25)
      v21 = v34;
  }
  else
  {
    v18.f32[0] = sqrtf(v16.f32[0] + (float)((float)(1.0 - v18.f32[0]) - v9.f32[2]));
    v18.f32[0] = v18.f32[0] + v18.f32[0];
    *(float32x2_t *)v16.f32 = vrecpe_f32((float32x2_t)v18.u32[0]);
    *(float32x2_t *)v16.f32 = vmul_f32(*(float32x2_t *)v16.f32, vrecps_f32((float32x2_t)v18.u32[0], *(float32x2_t *)v16.f32));
    v16.f32[0] = vmul_f32(*(float32x2_t *)v16.f32, vrecps_f32((float32x2_t)v18.u32[0], *(float32x2_t *)v16.f32)).f32[0];
    v18.f32[0] = v18.f32[0] * 0.25;
    v20 = (float)(v17 + v18.f32[2]) * v16.f32[0];
    v9.f32[0] = (float)(v9.f32[0] + v16.f32[2]) * v16.f32[0];
    v21 = (float)(v18.f32[1] - v9.f32[1]) * v16.f32[0];
  }
  v18.f32[1] = v20;
  v18.i64[1] = __PAIR64__(LODWORD(v21), v9.u32[0]);
  *a5 = *result;
  a5[1] = v18;
  return result;
}

IMP re::mtl::RenderEncoderImpCache::build(re::mtl::RenderEncoderImpCache *this, id a2)
{
  objc_class *Class;
  IMP result;

  *(_QWORD *)this = a2;
  Class = object_getClass(a2);
  *((_QWORD *)this + 1) = class_getMethodImplementation(Class, sel_setVertexBytes_length_atIndex_);
  *((_QWORD *)this + 2) = class_getMethodImplementation(Class, sel_setVertexBuffer_offset_atIndex_);
  *((_QWORD *)this + 3) = class_getMethodImplementation(Class, sel_setVertexBufferOffset_atIndex_);
  *((_QWORD *)this + 4) = class_getMethodImplementation(Class, sel_setVertexBuffer_offset_attributeStride_atIndex_);
  *((_QWORD *)this + 5) = class_getMethodImplementation(Class, sel_setVertexBufferOffset_attributeStride_atIndex_);
  *((_QWORD *)this + 6) = class_getMethodImplementation(Class, sel_setVertexTexture_atIndex_);
  *((_QWORD *)this + 7) = class_getMethodImplementation(Class, sel_setRenderPipelineState_);
  *((_QWORD *)this + 8) = class_getMethodImplementation(Class, sel_setCullMode_);
  *((_QWORD *)this + 9) = class_getMethodImplementation(Class, sel_setDepthBias_slopeScale_clamp_);
  *((_QWORD *)this + 10) = class_getMethodImplementation(Class, sel_setFragmentBytes_length_atIndex_);
  *((_QWORD *)this + 11) = class_getMethodImplementation(Class, sel_setFragmentBuffer_offset_atIndex_);
  *((_QWORD *)this + 12) = class_getMethodImplementation(Class, sel_setFragmentBufferOffset_atIndex_);
  *((_QWORD *)this + 13) = class_getMethodImplementation(Class, sel_setFragmentTexture_atIndex_);
  *((_QWORD *)this + 14) = class_getMethodImplementation(Class, sel_setDepthStencilState_);
  *((_QWORD *)this + 15) = class_getMethodImplementation(Class, sel_setStencilReferenceValue_);
  *((_QWORD *)this + 16) = class_getMethodImplementation(Class, sel_setStencilFrontReferenceValue_backReferenceValue_);
  *((_QWORD *)this + 17) = class_getMethodImplementation(Class, sel_setFrontFacingWinding_);
  *((_QWORD *)this + 18) = class_getMethodImplementation(Class, sel_setVertexAmplificationCount_viewMappings_);
  *((_QWORD *)this + 19) = class_getMethodImplementation(Class, sel_pushDebugGroup_);
  *((_QWORD *)this + 20) = class_getMethodImplementation(Class, sel_popDebugGroup);
  *((_QWORD *)this + 21) = class_getMethodImplementation(Class, sel_setTriangleFillMode_);
  *((_QWORD *)this + 22) = class_getMethodImplementation(Class, sel_setTessellationFactorBuffer_offset_instanceStride_);
  *((_QWORD *)this + 23) = class_getMethodImplementation(Class, sel_setVisibilityResultMode_offset_);
  *((_QWORD *)this + 24) = class_getMethodImplementation(Class, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_);
  *((_QWORD *)this + 25) = class_getMethodImplementation(Class, sel_drawPrimitives_vertexStart_vertexCount_);
  *((_QWORD *)this + 26) = class_getMethodImplementation(Class, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_);
  *((_QWORD *)this + 27) = class_getMethodImplementation(Class, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_);
  *((_QWORD *)this + 28) = class_getMethodImplementation(Class, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance_);
  *((_QWORD *)this + 29) = class_getMethodImplementation(Class, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance_);
  *((_QWORD *)this + 30) = class_getMethodImplementation(Class, sel_drawIndexedPrimitives_indexType_indexBuffer_indexBufferOffset_indirectBuffer_indirectBufferOffset_);
  *((_QWORD *)this + 31) = class_getMethodImplementation(Class, sel_setLabel_);
  result = class_getMethodImplementation(Class, sel_endEncoding);
  *((_QWORD *)this + 32) = result;
  return result;
}

uint64_t re::RenderStat::activatePerfSampling(uint64_t a1, id *a2, int a3)
{
  id *v5;
  char v6;
  char v7;
  re::RenderStat *v8;
  id v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[104];
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v5 = re::ObjCObject::operator=((id *)(a1 + 32), a2);
  if (a3 == 1 && !*(_QWORD *)(a1 + 520))
  {
    re::DynamicArray<re::PerfMTLCounterSampler>::setCapacity((_QWORD *)(a1 + 520), 2uLL);
    ++*(_DWORD *)(a1 + 544);
    v6 = 1;
    do
    {
      v7 = v6;
      v19 = 0u;
      v20 = 0u;
      v16 = 0u;
      v17 = 3;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v12 = 5;
      memset(v18, 0, sizeof(v18));
      DWORD2(v20) = 0;
      LODWORD(v19) = 0;
      v21 = 0;
      v22 = 0;
      re::mtl::CommandQueue::device(a2, &v11);
      re::PerfMTLCounterSampler::init((uint64_t)&v12, &v11);

      re::DynamicArray<re::PerfMTLCounterSampler>::add((_anonymous_namespace_ *)(a1 + 520), (uint64_t)&v12);
      re::SampleBufferObjectPool::~SampleBufferObjectPool((re::SampleBufferObjectPool *)&v18[40]);
      re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)v18);

      v6 = 0;
    }
    while ((v7 & 1) != 0);
  }
  v8 = (re::RenderStat *)a1;
  atomic_store(1u, (unsigned __int8 *)(a1 + 40));
  return re::RenderStat::setPerfSamplingMode(v8, a3);
}

id re::DynamicArray<re::PerfMTLCounterSampler>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  id result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::PerfMTLCounterSampler>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 200 * v4;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(id *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(v5 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(v5 + 44) = v7;
  re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::DynamicArray(v5 + 48, (uint64_t *)(a2 + 48));
  re::DynamicArray<re::SampleBufferObject *>::DynamicArray(v5 + 88, (uint64_t *)(a2 + 88));
  re::DynamicArray<re::SampleBufferObject *>::DynamicArray(v5 + 128, (uint64_t *)(a2 + 128));
  v8 = *(_QWORD *)(a2 + 168);
  *(_DWORD *)(v5 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(v5 + 168) = v8;
  *(_QWORD *)(v5 + 184) = *(id *)(a2 + 184);
  result = *(id *)(a2 + 192);
  *(_QWORD *)(v5 + 192) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::RenderStat::setPerfSamplingMode(re::RenderStat *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  if (*((_DWORD *)this + 6) != a2)
  {
    if ((*((_BYTE *)this + 40) & 1) != 0)
    {
      re::RenderStat::deinitializeCurrentMode(this);
      *((_DWORD *)this + 6) = a2;
      if (a2 == 1)
      {
        v4 = *((_QWORD *)this + 67);
        if (v4)
        {
          v5 = 200 * v4;
          v6 = (_BYTE *)(*((_QWORD *)this + 69) + 44);
          do
          {
            *v6 = 1;
            v6 += 200;
            v5 -= 200;
          }
          while (v5);
        }
      }
      ++*((_QWORD *)this + 13);
    }
    else
    {
      *((_DWORD *)this + 6) = a2;
    }
  }
  return 1;
}

void re::RenderStat::deinitializeCurrentMode(re::RenderStat *this)
{
  uint64_t v2;

  if (*((_DWORD *)this + 6) == 1 && *((_QWORD *)this + 67))
  {
    v2 = *((_QWORD *)this + 69);
    do
    {
      *(_BYTE *)(v2 + 44) = 0;
      re::SampleBufferObjectPool::release(v2 + 88, *(_QWORD *)(v2 + 24));
      *(_DWORD *)(v2 + 40) = 0;
      v2 += 200;
    }
    while (v2 != *((_QWORD *)this + 69) + 200 * *((_QWORD *)this + 67));
  }
  *((_DWORD *)this + 6) = 2;
}

uint64_t re::RenderStat::samplerIndexForType(re *a1, unsigned int a2)
{
  uint64_t v3;
  NSObject *v4;
  _DWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2 < 3)
    return qword_226133740[a2];
  v4 = *re::graphicsLogObjects(a1);
  v3 = 2;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    v3 = 2;
    _os_log_debug_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEBUG, "Unexpected CommandBufferSampleType for RenderStat: %u", (uint8_t *)v6, 8u);
  }
  return v3;
}

unint64_t re::RenderStat::addMTLCounterHandler(unint64_t result, uint64_t a2, unsigned int a3)
{
  unint64_t v4;

  if (*(_DWORD *)(result + 24) == 1)
  {
    v4 = result;
    result = re::RenderStat::samplerIndexForType((re *)result, a3);
    if (result < *(_QWORD *)(v4 + 536))
      return re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::add((_anonymous_namespace_ *)(*(_QWORD *)(v4 + 552) + 200 * result + 48), a2);
  }
  return result;
}

uint64_t (***re::RenderStat::clearMTLCounterHandlers(uint64_t (***this)(_QWORD)))(_QWORD)
{
  uint64_t (***v1)(_QWORD);
  uint64_t (**v2)(_QWORD);

  if (*((_DWORD *)this + 6) == 1)
  {
    v1 = this;
    if (this[67])
    {
      v2 = this[69];
      do
      {
        this = re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::clear((uint64_t (***)(_QWORD))v2 + 6);
        v2 += 25;
      }
      while (v2 != &v1[69][25 * (_QWORD)v1[67]]);
    }
  }
  return this;
}

void re::RenderStat::sampleRenderEncoderMTLCounterBegin(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re *v5;
  NSObject *v6;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 24) == 1)
  {
    v5 = (re *)re::RenderStat::samplerIndexForType((re *)a1, a3);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 536))
    {
      v6 = *re::graphicsLogObjects(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v7[0] = 67109120;
        v7[1] = a3;
        _os_log_debug_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEBUG, "sampleRenderEncoderMTLCounterBegin skipped, no PerfMTLCounterSampler for sample type %u", (uint8_t *)v7, 8u);
      }
    }
  }
}

void re::RenderStat::sampleRenderEncoderMTLCounterEnd(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re *v5;
  NSObject *v6;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 24) == 1)
  {
    v5 = (re *)re::RenderStat::samplerIndexForType((re *)a1, a3);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 536))
    {
      v6 = *re::graphicsLogObjects(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v7[0] = 67109120;
        v7[1] = a3;
        _os_log_debug_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEBUG, "sampleRenderEncoderMTLCounterEnd skipped, no PerfMTLCounterSampler for sample type %u", (uint8_t *)v7, 8u);
      }
    }
  }
}

void re::RenderStat::sampleComputeEncoderMTLCounterBegin(uint64_t a1, id *a2, unsigned int a3)
{
  re *v6;
  NSObject *v7;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 24) == 1)
  {
    v6 = (re *)re::RenderStat::samplerIndexForType((re *)a1, a3);
    if ((unint64_t)v6 >= *(_QWORD *)(a1 + 536))
    {
      v7 = *re::graphicsLogObjects(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v8[0] = 67109120;
        v8[1] = a3;
        _os_log_debug_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEBUG, "sampleComputeEncoderMTLCounterBegin skipped, no PerfMTLCounterSampler for sample type %u", (uint8_t *)v8, 8u);
      }
    }
    else
    {

    }
  }
}

void re::RenderStat::sampleComputeEncoderMTLCounterEnd(uint64_t a1, id *a2, unsigned int a3)
{
  re *v6;
  NSObject *v7;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 24) == 1)
  {
    v6 = (re *)re::RenderStat::samplerIndexForType((re *)a1, a3);
    if ((unint64_t)v6 >= *(_QWORD *)(a1 + 536))
    {
      v7 = *re::graphicsLogObjects(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v8[0] = 67109120;
        v8[1] = a3;
        _os_log_debug_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEBUG, "sampleComputeEncoderMTLCounterEnd skipped, no PerfMTLCounterSampler for sample type %u", (uint8_t *)v8, 8u);
      }
    }
    else
    {

    }
  }
}

void re::RenderStat::enableMTLCounterSamplingOnRenderPassDescriptor(uint64_t a1, id *a2, unsigned int a3)
{
  unint64_t v6;
  _DWORD *v7;
  id v8;
  NSObject *v9;
  id v10;
  uint8_t buf[4];
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 24) == 1)
  {
    v6 = re::RenderStat::samplerIndexForType((re *)a1, a3);
    if (v6 >= *(_QWORD *)(a1 + 536))
    {
      v9 = *re::graphicsLogObjects((re *)v6);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        v12 = a3;
        _os_log_debug_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEBUG, "enableMTLCounterSamplingOnRenderPassDescriptor skipped, no PerfMTLCounterSampler for sample type %u", buf, 8u);
      }
    }
    else
    {
      v7 = (_DWORD *)(*(_QWORD *)(a1 + 552) + 200 * v6);
      v8 = *a2;
      v10 = v8;
      re::PerfMTLCounterSampler::enableSamplingOnRenderPassDescriptor(v7, &v10);
      if (v8)

    }
  }
}

void re::RenderStat::makeComputeCommandEncoderWithMTLCounterSampling(id *this@<X1>, uint64_t a2@<X0>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  uint8_t buf[4];
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 24) == 1)
  {
    v8 = re::RenderStat::samplerIndexForType((re *)a2, a3);
    if (v8 < *(_QWORD *)(a2 + 536))
    {
      v9 = *(_QWORD *)(a2 + 552) + 200 * v8;
      v11 = *this;
      re::PerfMTLCounterSampler::makeComputeCommandEncoderWithSampling(v9, &v11, a4);

      return;
    }
    v10 = *re::graphicsLogObjects((re *)v8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v13 = a3;
      _os_log_debug_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEBUG, "makeComputeCommandEncoderWithMTLCounterSampling skipped, no PerfMTLCounterSampler for sample type %u", buf, 8u);
    }
  }
  re::mtl::CommandBuffer::makeComputeCommandEncoder(this, a4);
}

uint64_t re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::add(uint64_t a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = (unsigned __int16)*a2;
  v7 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v6) ^ ((0xBF58476D1CE4E5B9 * v6) >> 27));
  v8 = v7 ^ (v7 >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addAsCopy(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 56 * v13;
    return v12 + 16;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(unsigned __int16 *)(v11 + 56 * v10 + 12) != (_DWORD)v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 56 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 56 * v10;
  return v12 + 16;
}

uint64_t re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::remove(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  int v17;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = *a2;
  v4 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v3) ^ ((0xBF58476D1CE4E5B9 * v3) >> 27));
  v5 = (v4 ^ (v4 >> 31)) % *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (*(unsigned __int16 *)(v9 + 56 * v7 + 12) != (_DWORD)v3)
  {
    while (1)
    {
      v10 = v7;
      v11 = *(_DWORD *)(v9 + 56 * v7 + 8);
      v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (*(unsigned __int16 *)(v9 + 56 * v7 + 12) == (_DWORD)v3)
      {
        *(_DWORD *)(v9 + 56 * v10 + 8) = *(_DWORD *)(v9 + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 56 * v7 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 56 * v7 + 8) & 0x7FFFFFFF;
LABEL_9:
  v12 = *(_QWORD *)(a1 + 16);
  v13 = v12 + 56 * v7;
  v16 = *(_DWORD *)(v13 + 8);
  v15 = (int *)(v13 + 8);
  v14 = v16;
  if (v16 < 0)
  {
    *v15 = v14 & 0x7FFFFFFF;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(v12 + 56 * v7 + 16);
    v12 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v12 + 56 * v7 + 8);
  }
  v17 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v12 + 56 * v7 + 8) = *(_DWORD *)(a1 + 36) | v14 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v17 + 1;
  return 1;
}

uint64_t re::RenderStat::beginRecordPassStat(uint64_t a1, void **a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  re *v10;
  unint64_t v11;
  __int16 v12;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  _BYTE v17[24];
  uint64_t v18;
  re *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 24) <= 1u)
  {
    v6 = *(_DWORD *)(a1 + 116);
    v7 = *(_QWORD *)(a1 + 104);
    v8 = re::globalAllocators((re *)a1)[2];
    v18 = v8;
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 32, 0);
    *(_QWORD *)v9 = &off_24ED73760;
    *(_QWORD *)(v9 + 8) = a1;
    *(_DWORD *)(v9 + 16) = v6;
    *(_QWORD *)(v9 + 24) = v7;
    v19 = (re *)v9;
    v15 = v8;
    v16 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v14, (uint64_t)v17);
    re::mtl::CommandBuffer::addCompletionHandler(a2, (uint64_t)v14);
    if (v16)
    {
      (**(void (***)(_BYTE *))v16)(v16);
      if (v16 != v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
      v16 = 0;
    }
    v10 = v19;
    if (v19)
    {
      v10 = (re *)(**(uint64_t (***)(re *))v19)(v19);
      if (v19 != (re *)v17)
        v10 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    }
    if (*(_DWORD *)(a1 + 24) == 1)
    {
      v11 = re::RenderStat::samplerIndexForType(v10, a3);
      v12 = v11;
      if (v11 < *(_QWORD *)(a1 + 536))
        re::PerfMTLCounterSampler::createSampleBuffer((re::PerfMTLCounterSampler *)(*(_QWORD *)(a1 + 552) + 200 * v11));
      *(_WORD *)(a1 + 560) = v12;
    }
  }
  return 0;
}

re *re::RenderStat::finishMTLCounterSampling(re *result, uint64_t a2, id *a3)
{
  unint64_t v3;
  unint64_t v4;
  re *v5;
  uint64_t v7;
  void *v8[2];
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)result + 6) == 1)
  {
    if (a2 >= 0x20)
    {
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, a2, 32);
      _os_crash();
      __break(1u);
    }
    else
    {
      v5 = result;
      v4 = *((unsigned __int16 *)result + a2 + 280);
      if (*((_QWORD *)result + 67) <= v4)
        return result;
      v7 = *((_QWORD *)result + 69) + 200 * *((unsigned __int16 *)result + a2 + 280);
      v8[0] = *a3;
      re::PerfMTLCounterSampler::freezeAndReadSamples(v7, v8);

      v3 = *((_QWORD *)v5 + 67);
      if (v3 > v4)
        return re::PerfMTLCounterSampler::finishSampling((re *)(*((_QWORD *)v5 + 69) + 200 * v4), a3);
    }
    v8[1] = 0;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v9 = 136315906;
    v10 = "operator[]";
    v11 = 1024;
    v12 = 789;
    v13 = 2048;
    v14 = v4;
    v15 = 2048;
    v16 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

void re::RenderStat::finishFrame(unsigned int *a1, uint64_t a2, void **a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13;
  _BYTE *v14;
  uint8_t buf[4];
  int v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;

  v4 = a1;
  v19 = *MEMORY[0x24BDAC8D0];
  v5 = a1[29];
  v6 = atomic_load(a1 + 28);
  v7 = (v5 + 1) & 3;
  if (v7 == v6)
  {
    v8 = *re::graphicsLogObjects((re *)a1);
    a1 = (unsigned int *)os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)a1)
    {
      *(_DWORD *)buf = 67109120;
      v16 = 4;
      _os_log_impl(&dword_224FE9000, v8, OS_LOG_TYPE_DEFAULT, "There is a significant delay between requesting perf counters and receiving samples (at least %u frames)", buf, 8u);
    }
  }
  if (v4[6] <= 1)
  {
    if (v5 >= 4)
    {
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v5, 4);
      _os_crash();
      __break(1u);
    }
    *(_OWORD *)&v4[4 * v5 + 48] = xmmword_226133630;
    v9 = *((_QWORD *)v4 + 13);
    v10 = re::globalAllocators((re *)a1)[2];
    v17 = v10;
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 32, 0);
    *(_QWORD *)v11 = &off_24ED737B8;
    *(_QWORD *)(v11 + 8) = v4;
    *(_DWORD *)(v11 + 16) = v5;
    *(_QWORD *)(v11 + 24) = v9;
    v18 = (uint8_t *)v11;
    v13 = v10;
    v14 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v12, (uint64_t)buf);
    re::mtl::CommandBuffer::addCompletionHandler(a3, (uint64_t)v12);
    if (v14)
    {
      (**(void (***)(_BYTE *))v14)(v14);
      if (v14 != v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
      v14 = 0;
    }
    if (v18)
    {
      (**(void (***)(uint8_t *))v18)(v18);
      if (v18 != buf)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
    }
  }
  atomic_store(v7, v4 + 29);
}

uint64_t re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 40 * v4;
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v5 + 32) = 0;
  result = re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(v5, a2);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 40 * v9;
        v11 = (uint64_t)v7;
        do
        {
          *(_QWORD *)(v11 + 24) = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v11 + 32) = 0;
          re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(v11, v8);
          re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(v8);
          v8 += 40;
          v11 += 40;
          v10 -= 40;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t (***re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::clear(uint64_t (***result)(_QWORD)))(_QWORD)
{
  uint64_t (***v1)(_QWORD);
  uint64_t (**v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = (uint64_t)result[4];
    v4 = 40 * (_QWORD)v2;
    do
    {
      result = re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(v3);
      v3 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

void re::internal::Callable<re::RenderStat::beginRecordPassStat(re::mtl::CommandBuffer,re::RenderStat::CommandBufferSampleType)::$_0,void ()(re::mtl::CommandBuffer const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::RenderStat::beginRecordPassStat(re::mtl::CommandBuffer,re::RenderStat::CommandBufferSampleType)::$_0,void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1, id *a2)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  id v17;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v5 + 104) != *(_QWORD *)(a1 + 24) || (v17 = v4, objc_msgSend(v4, "GPUEndTime"), v4 = v17, v7 <= 0.0))
  {
LABEL_11:

    return;
  }
  v8 = *(unsigned int *)(a1 + 16);
  if (v8 >= 4)
  {
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, *(unsigned int *)(a1 + 16), 4);
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  objc_msgSend(v17, "GPUStartTime");
  v2 = *(unsigned int *)(a1 + 16);
  if (v2 >= 4)
  {
LABEL_13:
    re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v2, 4);
    _os_crash();
    __break(1u);
    goto LABEL_14;
  }
  v11 = v5 + 192;
  v12 = v10 * 1000.0;
  if (*(double *)(v11 + 16 * v8) <= v12)
    v12 = *(double *)(v11 + 16 * v8);
  *(double *)(v11 + 16 * v2) = v12;
  objc_msgSend(v17, "GPUEndTime");
  v15 = *(unsigned int *)(a1 + 16);
  if (v15 < 4)
  {
    v16 = v14 * 1000.0;
    if (*(double *)(v11 + 16 * v2 + 8) >= v16)
      v16 = *(double *)(v11 + 16 * v2 + 8);
    *(double *)(v11 + 16 * v15 + 8) = v16;
    v4 = v17;
    goto LABEL_11;
  }
LABEL_14:
  re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v15, 4);
  _os_crash();
  __break(1u);
}

uint64_t re::internal::Callable<re::RenderStat::beginRecordPassStat(re::mtl::CommandBuffer,re::RenderStat::CommandBufferSampleType)::$_0,void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED73760;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderStat::beginRecordPassStat(re::mtl::CommandBuffer,re::RenderStat::CommandBufferSampleType)::$_0,void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED73760;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderStat::beginRecordPassStat(re::mtl::CommandBuffer,re::RenderStat::CommandBufferSampleType)::$_0,void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 32;
}

void re::internal::Callable<re::RenderStat::finishFrame(unsigned int,re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::RenderStat::finishFrame(unsigned int,re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1, id *a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  double v21;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = atomic_load((unsigned __int8 *)(v5 + 40));
  if ((v6 & 1) == 0 || *(_QWORD *)(v5 + 104) != *(_QWORD *)(a1 + 24))
  {
LABEL_27:

    return;
  }
  v7 = *(unsigned int *)(a1 + 16);
  if (v7 < 4)
  {
    v8 = (double *)(v5 + 192 + 16 * v7);
    v9 = *(double *)(v5 + 192 + 16 * (((_BYTE)v7 - 1) & 3) + 8);
    v10 = v8[1];
    if (v9 < *v8 || v9 > v10)
      v9 = *v8;
    v21 = v10 - v9;
    v12 = *(unsigned int *)(v5 + 80);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = (int *)(*(_QWORD *)(v5 + 64) + 8);
      while (1)
      {
        v15 = *v14;
        v14 += 14;
        if (v15 < 0)
          break;
        if (v12 == ++v13)
        {
          LODWORD(v13) = *(_DWORD *)(v5 + 80);
          break;
        }
      }
    }
    else
    {
      LODWORD(v13) = 0;
    }
    if ((_DWORD)v12 != (_DWORD)v13)
    {
      v16 = v13;
      do
      {
        v17 = *(_QWORD *)(*(_QWORD *)(v5 + 64) + 56 * v16 + 48);
        (*(void (**)(uint64_t, double *))(*(_QWORD *)v17 + 16))(v17, &v21);
        if (*(_DWORD *)(v5 + 80) <= (v13 + 1))
          v18 = v13 + 1;
        else
          v18 = *(_DWORD *)(v5 + 80);
        v19 = v13;
        while (1)
        {
          v16 = (v19 + 1);
          if (v18 - 1 == v19)
            break;
          ++v19;
          LODWORD(v13) = v16;
          if ((*(_DWORD *)(*(_QWORD *)(v5 + 64) + 56 * v16 + 8) & 0x80000000) != 0)
            goto LABEL_25;
        }
        LODWORD(v13) = v18;
LABEL_25:
        ;
      }
      while ((_DWORD)v12 != (_DWORD)v13);
    }
    v20 = atomic_load((unsigned int *)(v5 + 112));
    atomic_store((v20 + 1) & 3, (unsigned int *)(v5 + 112));
    goto LABEL_27;
  }
  re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, *(unsigned int *)(a1 + 16), 4);
  _os_crash();
  __break(1u);
}

uint64_t re::internal::Callable<re::RenderStat::finishFrame(unsigned int,re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED737B8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderStat::finishFrame(unsigned int,re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED737B8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderStat::finishFrame(unsigned int,re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 32;
}

_QWORD *re::DynamicArray<re::PerfMTLCounterSampler>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0xC8uLL))
        {
          v2 = 200 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 200 * a2, 8);
          if (result)
          {
            v7 = (uint64_t)result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            re::ObjectHelper::move<re::PerfMTLCounterSampler>(v5[4], v5[4] + 200 * v5[2], v7);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 200, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::PerfMTLCounterSampler>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::ObjectHelper::move<re::PerfMTLCounterSampler>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = a1 + v6;
      v9 = *(_OWORD *)(a1 + v6 + 16);
      *(_OWORD *)v7 = *(_OWORD *)(a1 + v6);
      *(_OWORD *)(v7 + 16) = v9;
      *(_QWORD *)(v7 + 32) = *(id *)(a1 + v6 + 32);
      v10 = *(_BYTE *)(a1 + v6 + 44);
      *(_DWORD *)(v7 + 40) = *(_DWORD *)(a1 + v6 + 40);
      *(_BYTE *)(v7 + 44) = v10;
      re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::DynamicArray(a3 + v6 + 48, (uint64_t *)(a1 + v6 + 48));
      re::DynamicArray<re::SampleBufferObject *>::DynamicArray(a3 + v6 + 88, (uint64_t *)(a1 + v6 + 88));
      re::DynamicArray<re::SampleBufferObject *>::DynamicArray(a3 + v6 + 128, (uint64_t *)(a1 + v6 + 128));
      v11 = *(_QWORD *)(a1 + v6 + 168);
      *(_DWORD *)(v7 + 176) = *(_DWORD *)(a1 + v6 + 176);
      *(_QWORD *)(v7 + 168) = v11;
      *(_QWORD *)(v7 + 184) = *(id *)(a1 + v6 + 184);
      *(_QWORD *)(v7 + 192) = *(id *)(a1 + v6 + 192);
      re::SampleBufferObjectPool::~SampleBufferObjectPool((re::SampleBufferObjectPool *)(a1 + v6 + 88));
      re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit(a1 + v6 + 48);

      v6 += 200;
    }
    while (v8 + 200 != a2);
  }
}

uint64_t re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::Function<void ()(re::PerfMTLCounterSamplerResult)> *,re::Function<void ()(re::PerfMTLCounterSamplerResult)> *,re::Function<void ()(re::PerfMTLCounterSamplerResult)> *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 40 * a1[2], a1[4]);
    v9 = a1[2];
    if (v9 != v4)
    {
      v10 = 5 * v9;
      v11 = *(_QWORD *)(a2 + 32) + 8 * v10;
      v12 = a1[4] + 8 * v10;
      v13 = 40 * v4 - 8 * v10;
      do
      {
        *(_QWORD *)(v12 + 24) = *(_QWORD *)(v11 + 24);
        *(_QWORD *)(v12 + 32) = 0;
        result = re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(v12, v11);
        v11 += 40;
        v12 += 40;
        v13 -= 40;
      }
      while (v13);
    }
  }
  else
  {
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::Function<void ()(re::PerfMTLCounterSamplerResult)> *,re::Function<void ()(re::PerfMTLCounterSamplerResult)> *,re::Function<void ()(re::PerfMTLCounterSamplerResult)> *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 40 * v4, a1[4]);
    v6 = a1[2];
    if (v4 != v6)
    {
      v7 = a1[4] + 40 * v4;
      v8 = 40 * v6 - 40 * v4;
      do
      {
        result = (uint64_t)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(v7);
        v7 += 40;
        v8 -= 40;
      }
      while (v8);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::Function<void ()(re::PerfMTLCounterSamplerResult)> *,re::Function<void ()(re::PerfMTLCounterSamplerResult)> *,re::Function<void ()(re::PerfMTLCounterSamplerResult)> *,0>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (result != a2)
  {
    v5 = result;
    do
    {
      result = re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(a3, v5);
      v5 += 40;
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::DynamicArray<re::SampleBufferObject *>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::SampleBufferObject *>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::SampleBufferObject *>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void **re::DynamicArray<re::SampleBufferObject *>::copy(void **result, uint64_t a2)
{
  void **v3;
  unint64_t v4;
  void *v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::SampleBufferObject *>::setCapacity(result, *(_QWORD *)(a2 + 16));
    v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 8 * (_QWORD)v5);
      v5 = v3[2];
    }
    result = (void **)memcpy((char *)v3[4] + 8 * (_QWORD)v5, (const void *)(*(_QWORD *)(a2 + 32) + 8 * (_QWORD)v5), 8 * v4 - 8 * (_QWORD)v5);
  }
  else if (v4)
  {
    result = (void **)memmove(result[4], *(const void **)(a2 + 32), 8 * v4);
  }
  v3[2] = (void *)v4;
  return result;
}

_QWORD *re::DynamicArray<re::SampleBufferObject *>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 8 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 8 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::SampleBufferObject *>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::PerfMTLCounterSampler>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::PerfMTLCounterSampler>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PerfMTLCounterSampler>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, _WORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 56 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 56 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 56 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9) = a3;
  v13 = a2;
  *(_WORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 12) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + 56 * v9;
  v15 = v14 + 16;
  *(_QWORD *)(v14 + 40) = *(_QWORD *)(a5 + 24);
  *(_QWORD *)(v14 + 48) = 0;
  if (v14 + 16 != a5)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(v14 + 16);
    v16 = *(_QWORD *)(a5 + 32);
    if (v16)
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
      v18 = v15;
      if (v17 >= 0x19)
      {
        v19 = v17;
        v20 = *(_QWORD *)(v15 + 24);
        if (v20)
          v18 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, v19, 0);
        else
          v18 = 0;
      }
      *(_QWORD *)(v15 + 32) = v18;
      (*(void (**)(_QWORD))(**(_QWORD **)(a5 + 32) + 24))(*(_QWORD *)(a5 + 32));
    }
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v13) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  signed int v30;
  _BYTE v31[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v31, 0, 36);
      *(_QWORD *)&v31[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::init((uint64_t)v31, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v31;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v31[8];
      *(_OWORD *)v31 = v5;
      *(_QWORD *)&v31[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v31[24];
      *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v31[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (_QWORD *)(v6 + 48);
        while ((*(_DWORD *)(v14 - 5) & 0x80000000) == 0)
        {
LABEL_25:
          ++v11;
          v14 += 7;
          if (v11 >= v10)
            goto LABEL_26;
        }
        v15 = *(v14 - 6);
        v16 = *(unsigned int *)(a1 + 24);
        v17 = v15 % v16;
        v18 = *(unsigned int *)(a1 + 36);
        if ((_DWORD)v18 == 0x7FFFFFFF)
        {
          v18 = *(unsigned int *)(a1 + 32);
          v19 = v18;
          if ((_DWORD)v18 == (_DWORD)v16)
          {
            re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::setCapacity(a1, (2 * v12));
            v17 = v15 % *(unsigned int *)(a1 + 24);
            v19 = *(_DWORD *)(a1 + 32);
            v13 = *(_QWORD *)(a1 + 8);
          }
          *(_DWORD *)(a1 + 32) = v19 + 1;
          v20 = *(_QWORD *)(a1 + 16);
          v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
        }
        else
        {
          v20 = *(_QWORD *)(a1 + 16);
          v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
          *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v20 + 56 * v18 + 8) = v21 | 0x80000000;
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18) = v15;
        *(_WORD *)(*(_QWORD *)(a1 + 16) + 56 * v18 + 12) = *((_WORD *)v14 - 18);
        v22 = *(_QWORD *)(a1 + 16) + 56 * v18;
        v23 = v22 + 16;
        *(_QWORD *)(v22 + 40) = *(v14 - 1);
        *(_QWORD *)(v22 + 48) = 0;
        if (v14 - 4 != (_QWORD *)(v22 + 16))
        {
          re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(v22 + 16);
          v24 = (_QWORD *)*v14;
          if (*(_QWORD *)(v23 + 24) != *(v14 - 1))
          {
            v25 = (_QWORD *)*v14;
            if (!v24)
              goto LABEL_24;
LABEL_19:
            v26 = (*(uint64_t (**)(_QWORD *))(*v25 + 40))(v25);
            v27 = v23;
            if (v26 >= 0x19)
            {
              v28 = v26;
              v29 = *(_QWORD *)(v23 + 24);
              if (v29)
                v27 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, v28, 0);
              else
                v27 = 0;
            }
            *(_QWORD *)(v23 + 32) = v27;
            (*(void (**)(_QWORD))(*(_QWORD *)*v14 + 32))(*v14);
            re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(v14 - 4));
            goto LABEL_24;
          }
          v25 = v14 - 4;
          if (v14 - 4 == v24)
            goto LABEL_19;
          *(_QWORD *)(v23 + 32) = v24;
          *v14 = 0;
        }
LABEL_24:
        v13 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)(v13 + 4 * v17) = v18;
        v12 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v12;
        goto LABEL_25;
      }
LABEL_26:
      re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)v31);
    }
  }
  else
  {
    if (a2)
      v30 = a2;
    else
      v30 = 3;
  }
}

void re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_20, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8;
      do
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(v6 + v5 + 8);
          v3 = *((unsigned int *)a1 + 8);
        }
        ++v4;
        v5 += 56;
      }
      while (v4 < v3);
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::PerfMTLCounterSampler::init(uint64_t a1, id *a2)
{
  _QWORD *v2;
  id *v3;
  NSObject *v4;
  uint8_t v5[16];

  if (*(_DWORD *)(a1 + 40) == 3)
  {
    v2 = (_QWORD *)a1;
    v3 = re::ObjCObject::operator=((id *)(a1 + 32), a2);
    v2[3] = 0;
    v2 += 6;
    re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::setCapacity(v2, 1uLL);
    ++*((_DWORD *)v2 + 6);
    *((_DWORD *)v2 - 2) = 0;
  }
  else
  {
    v4 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v5 = 0;
      _os_log_debug_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEBUG, "PerfMTLCounterSampler already initialized", v5, 2u);
    }
  }
}

void re::PerfMTLCounterSampler::createSampleBuffer(re::PerfMTLCounterSampler *this)
{
  re::PerfMTLCounterSampler *v1;
  NSObject *v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  id v18;
  _anonymous_namespace_ *v19;
  id *v20;
  _anonymous_namespace_ *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _OWORD *v25;
  re *v26;
  NSObject *v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  id v38;
  uint8_t buf[8];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 44))
    return;
  v1 = this;
  if (*((_DWORD *)this + 10))
  {
    v2 = *re::graphicsLogObjects(this);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = *((_DWORD *)v1 + 10);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v3;
      _os_log_error_impl(&dword_224FE9000, v2, OS_LOG_TYPE_ERROR, "PerfMTLCounterSampler: Could not create sample buffer, wrong state: %i", buf, 8u);
    }
    return;
  }
  v4 = 4 * *((_DWORD *)this + 2);
  v5 = 2 * *((_DWORD *)this + 3);
  if (*((_BYTE *)this + 168))
  {
    v6 = *((_DWORD *)this + 44);
    if (v4 > *((_DWORD *)this + 43))
    {
      *((_DWORD *)this + 43) = v4;
      v7 = *((_QWORD *)this + 13);
      if (v7)
      {
        v8 = (uint64_t *)*((_QWORD *)this + 15);
        v9 = 8 * v7;
        do
        {
          v10 = *v8++;
          re::SampleBufferObjectPool::initializeCounterSampleBuffer((uint64_t)v1 + 88, v4, v10, 1);
          v9 -= 8;
        }
        while (v9);
      }
      v11 = *re::graphicsLogObjects(this);
      this = (re::PerfMTLCounterSampler *)os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)this)
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v4;
        _os_log_debug_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEBUG, "PerfMTLCounterSampler: Re-init sample buffer to size %d", buf, 8u);
      }
    }
    if (v5 <= v6)
      goto LABEL_34;
    *((_DWORD *)v1 + 44) = v5;
    v12 = *((_QWORD *)v1 + 13);
    if (v12)
    {
      v13 = (uint64_t *)*((_QWORD *)v1 + 15);
      v14 = 8 * v12;
      do
      {
        v15 = *v13++;
        re::SampleBufferObjectPool::initializeCounterSampleBuffer((uint64_t)v1 + 88, v5, v15, 2);
        v14 -= 8;
      }
      while (v14);
    }
    v16 = *re::graphicsLogObjects(this);
    this = (re::PerfMTLCounterSampler *)os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
    if (!(_DWORD)this)
      goto LABEL_34;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    v17 = "PerfMTLCounterSampler: Re-init compute sample buffer to size %d";
  }
  else
  {
    if (*((_DWORD *)this + 1) < *(_DWORD *)this)
      goto LABEL_34;
    v18 = *((id *)this + 4);
    v38 = v18;
    if (!*((_BYTE *)v1 + 168))
    {
      v19 = (_anonymous_namespace_ *)re::DynamicArray<re::SampleBufferObject *>::setCapacity((_QWORD *)v1 + 11, 2uLL);
      ++*((_DWORD *)v1 + 28);
      re::DynamicArray<re::SampleBufferObject *>::setCapacity((_QWORD *)v1 + 16, 2uLL);
      ++*((_DWORD *)v1 + 38);
      v20 = re::ObjCObject::operator=((id *)v1 + 23, &v38);
      *((_DWORD *)v1 + 43) = v4;
      re::mtl::Device::getCounterSet(v20, 1, buf);
      v21 = (_anonymous_namespace_ *)*((_QWORD *)v1 + 24);
      v22 = *(_QWORD *)buf;
      if (v21 == *(_anonymous_namespace_ **)buf)
      {

      }
      else
      {
        if (v21)

        *((_QWORD *)v1 + 24) = v22;
      }
      v23 = 2;
      do
      {
        v24 = re::globalAllocators(v21);
        v25 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24[2] + 32))(v24[2], 32, 8);
        *v25 = 0u;
        v25[1] = 0u;
        *(_QWORD *)buf = v25;
        re::SampleBufferObjectPool::initializeCounterSampleBuffer((uint64_t)v1 + 88, v4, (uint64_t)v25, 1);
        v21 = re::DynamicArray<re::SampleBufferObject *>::add((re::PerfMTLCounterSampler *)((char *)v1 + 88), buf);
        --v23;
      }
      while (v23);
      *((_BYTE *)v1 + 168) = 1;
      v18 = v38;
    }

    v27 = *re::graphicsLogObjects(v26);
    v28 = os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG);
    if (v28)
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v4;
      _os_log_debug_impl(&dword_224FE9000, v27, OS_LOG_TYPE_DEBUG, "PerfMTLCounterSampler: Init sample buffer to size %d", buf, 8u);
    }
    *((_DWORD *)v1 + 44) = v5;
    v29 = *((_QWORD *)v1 + 13);
    if (v29)
    {
      v30 = (uint64_t *)*((_QWORD *)v1 + 15);
      v31 = 8 * v29;
      do
      {
        v32 = *v30++;
        re::SampleBufferObjectPool::initializeCounterSampleBuffer((uint64_t)v1 + 88, v5, v32, 2);
        v31 -= 8;
      }
      while (v31);
    }
    v16 = *re::graphicsLogObjects((re *)v28);
    this = (re::PerfMTLCounterSampler *)os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
    if (!(_DWORD)this)
      goto LABEL_34;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    v17 = "PerfMTLCounterSampler: Init compute sample buffer to size %d";
  }
  _os_log_debug_impl(&dword_224FE9000, v16, OS_LOG_TYPE_DEBUG, v17, buf, 8u);
LABEL_34:
  *((_QWORD *)v1 + 1) = 0;
  v33 = *((_DWORD *)v1 + 1);
  if (v33 < *(_DWORD *)v1)
    *((_DWORD *)v1 + 1) = v33 + 1;
  v34 = *((_QWORD *)v1 + 13);
  if (v34)
  {
    v35 = v34 - 1;
    v36 = *(_QWORD *)(*((_QWORD *)v1 + 15) + 8 * v35);
    *(_QWORD *)buf = v36;
    *((_QWORD *)v1 + 13) = v35;
    ++*((_DWORD *)v1 + 28);
    re::DynamicArray<re::SampleBufferObject *>::add((re::PerfMTLCounterSampler *)((char *)v1 + 128), buf);
  }
  else
  {
    v37 = *re::graphicsLogObjects(this);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v37, OS_LOG_TYPE_ERROR, "PerfMTLCounterSampler: Error could not acquire SampleBufferObject", buf, 2u);
    }
    v36 = 0;
  }
  *((_QWORD *)v1 + 2) = 0;
  *((_QWORD *)v1 + 3) = v36;
  *((_DWORD *)v1 + 10) = 1;
}

void re::PerfMTLCounterSampler::freezeAndReadSamples(uint64_t a1, void **a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  NSObject *v7;
  uint8_t v8[16];
  _BYTE v9[24];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 44))
  {
    *(_DWORD *)(a1 + 40) = 2;
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      v5 = *(_QWORD *)(a1 + 16);
      v10 = re::globalAllocators((re *)a1)[2];
      v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 32, 0);
      *v6 = &off_24ED73810;
      v6[1] = a1;
      v6[2] = v3;
      v6[3] = v5;
      v11 = v6;
      re::mtl::CommandBuffer::addCompletionHandler(a2, (uint64_t)v9);
      if (v11)
      {
        (**(void (***)(_BYTE *))v11)(v11);
        if (v11 != v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
      }
    }
    else
    {
      v7 = *re::graphicsLogObjects((re *)a1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v8 = 0;
        _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "PerfMTLCounterSampler: Could not read samples, currentSampleBufferObject null", v8, 2u);
      }
    }
  }
}

_DWORD *re::PerfMTLCounterSampler::enableSamplingOnRenderPassDescriptor(_DWORD *result, id *a2)
{
  _DWORD *v2;
  id v3;

  if (*((_BYTE *)result + 44))
  {
    v2 = result;
    ++result[2];
    if (result[10] == 1 && (result[4] + 4) <= result[43])
    {
      if (*((_QWORD *)result + 3))
      {
        v3 = objc_msgSend(objc_msgSend(*a2, sel_sampleBufferAttachments), sel_objectAtIndexedSubscript_, 0);
        objc_msgSend(v3, sel_setSampleBuffer_, **((_QWORD **)v2 + 3));
        ++v2[4];
        objc_msgSend(v3, sel_setStartOfVertexSampleIndex_);
        ++v2[4];
        objc_msgSend(v3, sel_setEndOfVertexSampleIndex_);
        ++v2[4];
        objc_msgSend(v3, sel_setStartOfFragmentSampleIndex_);
        ++v2[4];
        return objc_msgSend(v3, sel_setEndOfFragmentSampleIndex_);
      }
    }
  }
  return result;
}

void re::PerfMTLCounterSampler::makeComputeCommandEncoderWithSampling(uint64_t a1@<X0>, id *a2@<X1>, _QWORD *a3@<X8>)
{
  id v6;
  id v7;

  ++*(_DWORD *)(a1 + 12);
  if (*(_BYTE *)(a1 + 44)
    && *(_DWORD *)(a1 + 40) == 1
    && (*(_DWORD *)(a1 + 20) + 2) <= *(_DWORD *)(a1 + 176)
    && *(_QWORD *)(a1 + 24))
  {
    v6 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD540], sel_alloc), sel_init);
    v7 = objc_msgSend(objc_msgSend(v6, sel_sampleBufferAttachments), sel_objectAtIndexedSubscript_, 0);
    objc_msgSend(v7, sel_setSampleBuffer_, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8));
    ++*(_DWORD *)(a1 + 20);
    objc_msgSend(v7, sel_setStartOfEncoderSampleIndex_);
    ++*(_DWORD *)(a1 + 20);
    objc_msgSend(v7, sel_setEndOfEncoderSampleIndex_);
    re::mtl::CommandBuffer::makeComputeCommandEncoder(a2, (uint64_t)v6, a3);
    if (v6)

  }
  else
  {
    re::mtl::CommandBuffer::makeComputeCommandEncoder(a2, a3);
  }
}

re *re::PerfMTLCounterSampler::finishSampling(re *this, void **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  re *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 44))
  {
    v3 = (uint64_t)this;
    v4 = *((_QWORD *)this + 3);
    v5 = re::globalAllocators(this)[2];
    v6[0] = &off_24ED73868;
    v6[1] = v3;
    v6[2] = v4;
    v7 = v5;
    v8 = (re *)v6;
    re::mtl::CommandBuffer::addCompletionHandler(a2, (uint64_t)v6);
    this = v8;
    if (v8)
    {
      this = (re *)(**(uint64_t (***)(re *))v8)(v8);
      if (v8 != (re *)v6)
        this = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    }
    *(_QWORD *)(v3 + 24) = 0;
    *(_DWORD *)(v3 + 40) = 0;
  }
  return this;
}

void re::SampleBufferObjectPool::initializeCounterSampleBuffer(uint64_t a1, unsigned int a2, uint64_t a3, char a4)
{
  id v8;
  id v9;
  id v10;
  id v11;

  if (a2 && *(_QWORD *)(a1 + 104))
  {
    v8 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD578], sel_alloc), sel_init);
    objc_msgSend(v8, sel_setStorageMode_, 0);
    objc_msgSend(v8, sel_setSampleCount_, a2);
    objc_msgSend(v8, sel_setCounterSet_, *(_QWORD *)(a1 + 104));
    if ((a4 & 1) != 0)
    {
      *(_DWORD *)(a3 + 20) = a2;
      objc_msgSend(v8, sel_setLabel_, CFSTR("RenderTimestamp"));
      v10 = v8;
      re::mtl::Device::newCounterSampleBufferWithDescriptor((void **)(a1 + 96), &v10, &v11);
      NS::SharedPtr<MTL::Texture>::operator=((void **)a3, &v11);
      if (v11)
      {

        v11 = 0;
      }
      if (v10)
      {

        v10 = 0;
      }
    }
    if ((a4 & 2) != 0)
    {
      *(_DWORD *)(a3 + 24) = a2;
      objc_msgSend(v8, sel_setLabel_, CFSTR("ComputeTimestamp"));
      v9 = v8;
      re::mtl::Device::newCounterSampleBufferWithDescriptor((void **)(a1 + 96), &v9, &v11);
      NS::SharedPtr<MTL::Texture>::operator=((void **)(a3 + 8), &v11);
      if (v11)
      {

        v11 = 0;
      }
      if (v9)
      {

        v9 = 0;
      }
    }
    *(_DWORD *)(a3 + 16) |= 1u;
    if (v8)

  }
}

_anonymous_namespace_ *re::DynamicArray<re::SampleBufferObject *>::add(_anonymous_namespace_ *result, _QWORD *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::SampleBufferObject *>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::SampleBufferObject *>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  *(_QWORD *)(*((_QWORD *)v3 + 4) + 8 * v5) = *a2;
  *((_QWORD *)v3 + 2) = v5 + 1;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void re::SampleBufferObjectPool::~SampleBufferObjectPool(re::SampleBufferObjectPool *this)
{
  uint64_t v2;
  re **v3;
  uint64_t v4;
  re *v5;
  uint64_t v6;
  re **v7;
  uint64_t v8;
  re *v9;
  void *v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (re **)*((_QWORD *)this + 4);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      re::internal::destroyPersistent<re::SampleBufferObject>(v5);
      v4 -= 8;
    }
    while (v4);
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
  {
    v7 = (re **)*((_QWORD *)this + 9);
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      re::internal::destroyPersistent<re::SampleBufferObject>(v9);
      v8 -= 8;
    }
    while (v8);
  }
  v10 = (void *)*((_QWORD *)this + 13);
  if (v10)
  {

    *((_QWORD *)this + 13) = 0;
  }

  v11 = *((_QWORD *)this + 5);
  if (v11)
  {
    if (*((_QWORD *)this + 9))
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 5) = 0;
    ++*((_DWORD *)this + 16);
  }
  if (*(_QWORD *)this)
  {
    if (*((_QWORD *)this + 4))
      (*(void (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this);
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)this = 0;
    ++*((_DWORD *)this + 6);
  }
}

re *re::internal::destroyPersistent<re::SampleBufferObject>(re *result)
{
  re *v1;
  uint64_t v2;
  void *v3;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];
    v3 = (void *)*((_QWORD *)v1 + 1);
    if (v3)
    {

      *((_QWORD *)v1 + 1) = 0;
    }
    if (*(_QWORD *)v1)
    {

      *(_QWORD *)v1 = 0;
    }
    return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

void re::SampleBufferObjectPool::release(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD v13[2];
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  uint8_t buf[16];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v13[0] = a2;
  v4 = *(_QWORD **)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = v4;
  if (v5)
  {
    v7 = 8 * v5;
    v6 = *(_QWORD **)(a1 + 72);
    while (*v6 != a2)
    {
      ++v6;
      v7 -= 8;
      if (!v7)
      {
        v6 = &v4[v5];
        break;
      }
    }
  }
  v8 = v6 - v4;
  if (v8 == v5)
  {
    v9 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "PerfMTLCounterSampler: Error could not release SampleBufferObject", buf, 2u);
    }
  }
  else
  {
    if (v5 <= v8)
    {
      v13[1] = 0;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v14 = 136315906;
      v15 = "removeAt";
      v16 = 1024;
      v17 = 931;
      v18 = 2048;
      v19 = v8;
      v20 = 2048;
      v21 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v5 - 1 > v8)
      v4[v8] = v4[v5 - 1];
    *(_QWORD *)(a1 + 56) = v5 - 1;
    ++*(_DWORD *)(a1 + 64);
    v10 = *(_DWORD *)(a2 + 20);
    v11 = *(_DWORD *)(a1 + 84);
    if (v10 != v11)
      re::SampleBufferObjectPool::initializeCounterSampleBuffer(a1, v11, a2, 1);
    v12 = *(_DWORD *)(a1 + 88);
    if (*(_DWORD *)(a2 + 24) != v12)
      re::SampleBufferObjectPool::initializeCounterSampleBuffer(a1, v12, a2, 2);
    re::DynamicArray<re::SampleBufferObject *>::add((_anonymous_namespace_ *)a1, v13);
  }
}

void re::internal::Callable<re::PerfMTLCounterSampler::freezeAndReadSamples(re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::PerfMTLCounterSampler::freezeAndReadSamples(re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1, id *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  _BYTE v29[24];
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = **(void ***)(a1 + 16);
  if (v5)
  {
    v6 = (char *)objc_msgSend(objc_msgSend(v5, sel_resolveCounterRange_, 0, *(int *)(a1 + 24)), sel_mutableBytes);
    v8 = 0;
    v9 = 0;
    v10 = *(int *)(a1 + 24);
    if ((int)v10 >= 4)
    {
      v11 = 0;
      v9 = 0;
      v8 = 0;
      v12 = *(unsigned int *)(a1 + 24);
      v13 = (uint64_t *)(v6 + 16);
      while (v11 < v12)
      {
        if (v11 + 1 >= v12)
          goto LABEL_29;
        if (v11 + 2 >= v12)
          goto LABEL_30;
        v14 = v11 + 3;
        if (v11 + 3 >= v12)
          goto LABEL_31;
        v9 = v9 - *(v13 - 2) + *(v13 - 1);
        v15 = *v13;
        v16 = v13[1];
        v13 += 4;
        v8 = v8 - v15 + v16;
        v11 += 4;
        if ((int)v10 - 3 <= (int)v11)
          goto LABEL_11;
      }
LABEL_28:
      re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, (v12 + 3) & 0x1FFFFFFFCLL, v10);
      _os_crash();
      __break(1u);
LABEL_29:
      re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, (v12 + 2) & 0x1FFFFFFFCLL | 1, v10);
      _os_crash();
      __break(1u);
LABEL_30:
      re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, (v12 + 1) & 0x1FFFFFFFCLL | 2, v10);
      _os_crash();
      __break(1u);
LABEL_31:
      re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v10);
      _os_crash();
      __break(1u);
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
LABEL_11:
  v17 = *(void **)(*(_QWORD *)(a1 + 16) + 8);
  if (v17)
  {
    v18 = objc_msgSend(objc_msgSend(v17, sel_resolveCounterRange_, 0, *(int *)(a1 + 28)), sel_mutableBytes);
    v20 = *(int *)(a1 + 28);
    if ((int)v20 >= 1)
    {
      v21 = 0;
      v22 = 0;
      v23 = *(unsigned int *)(a1 + 28);
      while (v21 < v23)
      {
        v24 = v21 + 1;
        if (v21 + 1 >= v23)
          goto LABEL_27;
        v22 = v22 - v18[v21] + v18[v21 + 1];
        v21 += 2;
        if ((int)v20 <= v24 + 1)
          goto LABEL_19;
      }
      re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, (v23 + 1) & 0x1FFFFFFFELL, v20);
      _os_crash();
      __break(1u);
LABEL_27:
      re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v23 | 1, v20);
      _os_crash();
      __break(1u);
      goto LABEL_28;
    }
  }
  v22 = 0;
LABEL_19:
  v25 = *(_QWORD *)(v4 + 64);
  if (v25)
  {
    v26 = *(_QWORD *)(v4 + 80);
    v27 = 40 * v25;
    do
    {
      v30 = *(_QWORD *)(v26 + 24);
      v31 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v29, v26);
      v28[0] = v9;
      v28[1] = v8;
      v28[2] = v22;
      (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v31 + 16))(v31, v28);
      if (v31)
      {
        (**(void (***)(_BYTE *))v31)(v31);
        if (v31 != v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
      }
      v26 += 40;
      v27 -= 40;
    }
    while (v27);
  }

}

uint64_t re::internal::Callable<re::PerfMTLCounterSampler::freezeAndReadSamples(re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED73810;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::PerfMTLCounterSampler::freezeAndReadSamples(re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED73810;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::PerfMTLCounterSampler::freezeAndReadSamples(re::mtl::CommandBuffer)::$_0,void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 32;
}

void re::internal::Callable<re::PerfMTLCounterSampler::finishSampling(re::mtl::CommandBuffer const&)::$_0,void ()(re::mtl::CommandBuffer const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::PerfMTLCounterSampler::finishSampling(re::mtl::CommandBuffer const&)::$_0,void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1, id *a2)
{
  id v3;

  v3 = *a2;
  re::SampleBufferObjectPool::release(*(_QWORD *)(a1 + 8) + 88, *(_QWORD *)(a1 + 16));

}

uint64_t re::internal::Callable<re::PerfMTLCounterSampler::finishSampling(re::mtl::CommandBuffer const&)::$_0,void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED73868;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::PerfMTLCounterSampler::finishSampling(re::mtl::CommandBuffer const&)::$_0,void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED73868;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::PerfMTLCounterSampler::finishSampling(re::mtl::CommandBuffer const&)::$_0,void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 24;
}

BOOL re::ColorHelpers::isGrayScaleCGColorSpaceName(re::ColorHelpers *this, const __CFString *a2)
{
  return CFEqual(this, (CFTypeRef)*MEMORY[0x24BDBF288])
      || CFEqual(this, (CFTypeRef)*MEMORY[0x24BDBF248])
      || CFEqual(this, (CFTypeRef)*MEMORY[0x24BDBF2F8])
      || CFEqual(this, (CFTypeRef)*MEMORY[0x24BDBF260]) != 0;
}

uint64_t re::ColorHelpers::getColorGamutFromCGColorSpaceName(const void *a1, char *a2)
{
  char v4;
  uint64_t result;

  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBF308])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBF270])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBF278])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBF318]))
  {
    v4 = 0;
LABEL_6:
    *a2 = v4;
    return 1;
  }
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBF228])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBF2F0])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBF240])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBF258])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBF238]))
  {
    v4 = 1;
    goto LABEL_6;
  }
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBF210]))
  {
    v4 = 2;
    goto LABEL_6;
  }
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBF2B8])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBF250])
    || (result = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBF268]), (_DWORD)result))
  {
    v4 = 3;
    goto LABEL_6;
  }
  return result;
}

uint64_t re::ColorHelpers::getColorGamutFromCGStandardLinearColorSpace(CGColorSpace *a1, char *a2)
{
  CFStringRef Name;
  char v4;
  uint64_t result;

  Name = CGColorSpaceGetName(a1);
  if (CFEqual(Name, (CFTypeRef)*MEMORY[0x24BDBF308]) || CFEqual(Name, (CFTypeRef)*MEMORY[0x24BDBF270]))
  {
    v4 = 0;
LABEL_4:
    *a2 = v4;
    return 1;
  }
  if (CFEqual(Name, (CFTypeRef)*MEMORY[0x24BDBF258]))
  {
    v4 = 1;
    goto LABEL_4;
  }
  if (CFEqual(Name, (CFTypeRef)*MEMORY[0x24BDBF210]))
  {
    v4 = 2;
    goto LABEL_4;
  }
  result = CFEqual(Name, (CFTypeRef)*MEMORY[0x24BDBF268]);
  if ((_DWORD)result)
  {
    v4 = 3;
    goto LABEL_4;
  }
  return result;
}

uint64_t re::ColorHelpers::getCGColorSpaceNameForGamut(unint64_t a1, int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (a1 > 2)
  {
    if (a4 == 3)
    {
      if (a3)
      {
        v4 = MEMORY[0x24BDBF268];
      }
      else if (a2)
      {
        v4 = MEMORY[0x24BDBF2C0];
      }
      else
      {
        v4 = MEMORY[0x24BDBF300];
      }
      return *(_QWORD *)v4;
    }
    if (a4 == 2)
    {
      v4 = MEMORY[0x24BDBF210];
      return *(_QWORD *)v4;
    }
    if (a4 != 1)
    {
      if (a2)
      {
        v4 = MEMORY[0x24BDBF318];
      }
      else if (a3)
      {
        v4 = MEMORY[0x24BDBF270];
      }
      else
      {
        v4 = MEMORY[0x24BDBF308];
      }
      return *(_QWORD *)v4;
    }
    if ((a2 & 1) == 0 && (a3 & 1) == 0)
    {
      v4 = MEMORY[0x24BDBF2F0];
      return *(_QWORD *)v4;
    }
    v4 = MEMORY[0x24BDBF240];
    if (!a3)
      v4 = MEMORY[0x24BDBF228];
    v5 = MEMORY[0x24BDBF258];
    v6 = a2 == 0;
  }
  else
  {
    if (a2)
    {
      v4 = MEMORY[0x24BDBF248];
      v5 = MEMORY[0x24BDBF290];
    }
    else
    {
      v4 = MEMORY[0x24BDBF260];
      v5 = MEMORY[0x24BDBF2F8];
    }
    v6 = a3 == 0;
  }
  if (v6)
    v4 = v5;
  return *(_QWORD *)v4;
}

uint64_t re::ColorHelpers::getCGColorSpaceNameForPixelFormat(int a1, int a2)
{
  int isHDR;

  MTLPixelFormatGetInfoForDevice();
  isHDR = re::isHDR(a1);
  return re::ColorHelpers::getCGColorSpaceNameForGamut(0, 0, isHDR, a2);
}

uint64_t re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(int a1)
{
  unsigned __int8 v1;
  int v3;
  int v4;

  if ((v1 & 1) == 0)
  {
    v4 = a1;
    a1 = v4;
    if (v3)
    {
      re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(re::ColorGamut)::g_supportedColorSpaces[0] = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF270]);
      qword_255828E18 = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF258]);
      qword_255828E20 = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF210]);
      qword_255828E28 = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF268]);
      a1 = v4;
    }
  }
  return re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(re::ColorGamut)::g_supportedColorSpaces[a1];
}

uint64_t re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(int a1, int a2)
{
  unsigned __int8 v2;
  uint64_t *v3;
  unsigned __int8 v4;
  int v6;
  CGColorSpaceRef v7;
  __guard *v8;
  int v9;
  CGColorSpaceRef v10;
  uint64_t *v11;
  int v12;

  if (!a2)
  {
    if ((v4 & 1) != 0)
    {
      v3 = &re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(re::ColorGamut,BOOL)::g_supportedLDRColorSpaces;
      return v3[a1];
    }
    v12 = a1;
    v3 = &re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(re::ColorGamut,BOOL)::g_supportedLDRColorSpaces;
    v11 = &re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(re::ColorGamut,BOOL)::g_supportedLDRColorSpaces;
    if (v9)
    {
      re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(re::ColorGamut,BOOL)::g_supportedLDRColorSpaces = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF270]);
      v10 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF2F0]);
      qword_255828E70 = 0;
      unk_255828E78 = 0;
      qword_255828E68 = (uint64_t)v10;
      goto LABEL_11;
    }
LABEL_12:
    a1 = v12;
    return v3[a1];
  }
  if ((v2 & 1) == 0)
  {
    v12 = a1;
    v3 = &re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(re::ColorGamut,BOOL)::g_supportedLDRColorSpaces;
    v11 = &re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(re::ColorGamut,BOOL)::g_supportedLDRColorSpaces;
    if (v6)
    {
      re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(re::ColorGamut,BOOL)::g_supportedLDRColorSpaces = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF278]);
      v7 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF228]);
      qword_255828E48 = 0;
      unk_255828E50 = 0;
      qword_255828E40 = (uint64_t)v7;
LABEL_11:
      __cxa_guard_release(v8);
      a1 = v12;
      v3 = v11;
      return v3[a1];
    }
    goto LABEL_12;
  }
  v3 = &re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(re::ColorGamut,BOOL)::g_supportedLDRColorSpaces;
  return v3[a1];
}

uint64_t ___ZN2re12ColorHelpers26getCGColorTransformToGamutENS_10ColorGamutE_block_invoke()
{
  uint64_t CGColorSpaceFromWorkingColorGamut;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  CGColorSpaceFromWorkingColorGamut = re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(0);
  re::ColorHelpers::getCGColorTransformToGamut(re::ColorGamut)::transforms = MEMORY[0x2276905BC](CGColorSpaceFromWorkingColorGamut, 0);
  v1 = re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(3);
  qword_255828EA0 = MEMORY[0x2276905BC](v1, 0);
  v2 = re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(1);
  qword_255828E90 = MEMORY[0x2276905BC](v2, 0);
  v3 = re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(2);
  result = MEMORY[0x2276905BC](v3, 0);
  qword_255828E98 = result;
  return result;
}

__n128 re::ColorHelpers::computeGamutTransformMatrix@<Q0>(int a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int8 v6;
  __int128 *v7;
  __int128 v8;
  __n128 result;

  if ((v6 & 1) == 0
  {
    bzero(re::ColorHelpers::computeGamutTransformMatrix(re::ColorGamut,re::ColorGamut)::transforms, 0x300uLL);
  }
  if (re::ColorHelpers::computeGamutTransformMatrix(re::ColorGamut,re::ColorGamut)::onceToken != -1)
    dispatch_once(&re::ColorHelpers::computeGamutTransformMatrix(re::ColorGamut,re::ColorGamut)::onceToken, &__block_literal_global_18_0);
  v7 = &re::ColorHelpers::computeGamutTransformMatrix(re::ColorGamut,re::ColorGamut)::transforms[12 * a1 + 3 * a2];
  v8 = v7[1];
  *(_OWORD *)a3 = *v7;
  *(_OWORD *)(a3 + 16) = v8;
  result = (__n128)v7[2];
  *(__n128 *)(a3 + 32) = result;
  return result;
}

double ___ZN2re12ColorHelpers27computeGamutTransformMatrixENS_10ColorGamutES1__block_invoke()
{
  double result;

  *(_QWORD *)&result = 1065353216;
  re::ColorHelpers::computeGamutTransformMatrix(re::ColorGamut,re::ColorGamut)::transforms = xmmword_2260E5F10;
  unk_255828EC0 = xmmword_2260E5F20;
  xmmword_255828ED0 = xmmword_2260E5F40;
  unk_255828EE0 = xmmword_226133840;
  xmmword_255828EF0 = xmmword_226133850;
  unk_255828F00 = xmmword_226133860;
  xmmword_255828F10 = xmmword_226133870;
  unk_255828F20 = xmmword_226133880;
  xmmword_255828F30 = xmmword_226133890;
  unk_255828F40 = xmmword_2261338A0;
  xmmword_255828F50 = xmmword_2261338B0;
  unk_255828F60 = xmmword_2261338C0;
  xmmword_255828F70 = xmmword_2261338D0;
  unk_255828F80 = xmmword_2261338E0;
  xmmword_255828F90 = xmmword_2261338F0;
  unk_255828FA0 = xmmword_2260E5F10;
  xmmword_255828FB0 = xmmword_2260E5F20;
  unk_255828FC0 = xmmword_2260E5F40;
  xmmword_255828FD0 = xmmword_226133900;
  unk_255828FE0 = xmmword_226133910;
  xmmword_255828FF0 = xmmword_226133920;
  unk_255829000 = xmmword_226133930;
  xmmword_255829010 = xmmword_226133940;
  unk_255829020 = xmmword_226133950;
  xmmword_255829030 = xmmword_226133960;
  unk_255829040 = xmmword_226133970;
  xmmword_255829050 = xmmword_226133980;
  unk_255829060 = xmmword_226133990;
  xmmword_255829070 = xmmword_2261339A0;
  unk_255829080 = xmmword_2261339B0;
  xmmword_255829090 = xmmword_2260E5F10;
  unk_2558290A0 = xmmword_2260E5F20;
  xmmword_2558290B0 = xmmword_2260E5F40;
  unk_2558290C0 = xmmword_2261339C0;
  xmmword_2558290D0 = xmmword_2261339D0;
  unk_2558290E0 = xmmword_2261339E0;
  xmmword_2558290F0 = xmmword_2261339F0;
  unk_255829100 = xmmword_226133A00;
  xmmword_255829110 = xmmword_226133A10;
  unk_255829120 = xmmword_226133A20;
  xmmword_255829130 = xmmword_226133A30;
  unk_255829140 = xmmword_226133A40;
  xmmword_255829150 = xmmword_226133A50;
  unk_255829160 = xmmword_226133A60;
  xmmword_255829170 = xmmword_226133A70;
  unk_255829180 = xmmword_2260E5F10;
  xmmword_255829190 = xmmword_2260E5F20;
  unk_2558291A0 = xmmword_2260E5F40;
  return result;
}

uint64_t re::ColorHelpers::getColorGamutFromSerializationLiteral@<X0>(re::ColorHelpers *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  __int16 v6;

  result = strcmp((const char *)this, "srgb");
  if ((_DWORD)result)
  {
    result = strcmp((const char *)this, "displayp3");
    if ((_DWORD)result)
    {
      result = strcmp((const char *)this, "acescg");
      if ((_DWORD)result)
      {
        result = strcmp((const char *)this, "itur2020");
        if ((_DWORD)result)
        {
          *a2 = 0;
          return result;
        }
        v6 = 769;
      }
      else
      {
        v6 = 513;
      }
    }
    else
    {
      v6 = 257;
    }
  }
  else
  {
    v6 = 1;
  }
  *(_WORD *)a2 = v6;
  return result;
}

void re::introspect_BlendShapeStorageMode(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  StringID v36;
  _QWORD v37[2];
  _QWORD v38[61];

  v2 = atomic_load((unsigned __int8 *)&qword_254118B68);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_254118B68);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Invalid";
      qword_254118BA8 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Sparse";
      qword_254118BB0 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 2;
      *(_QWORD *)(v32 + 16) = "Complete";
      qword_254118BB8 = v32;
      __cxa_guard_release(&qword_254118B68);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254118B70);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254118B70))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254118C50, "BlendShapeStorageMode", 1, 1, 1, 1);
    qword_254118C50 = (uint64_t)&off_24ED7D9E8;
    qword_254118C90 = (uint64_t)&re::introspect_BlendShapeStorageMode(BOOL)::enumTable;
    dword_254118C60 = 9;
    __cxa_guard_release(&qword_254118B70);
  }
  if ((_MergedGlobals_372 & 1) == 0)
  {
    _MergedGlobals_372 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254118C50, a2);
    v34 = 0xB693A90FE7D74D5CLL;
    v35 = "BlendShapeStorageMode";
    v38[0] = 0x31CD534126;
    v38[1] = "uint8_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v38);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v38);
      v6 = (unsigned int *)qword_254118C90;
      v37[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v36.var0 = 2 * v12;
            v36.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v16, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v36.var0 = 2 * v20;
              v36.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v24, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v25);
      xmmword_254118C70 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "BlendShapeStorageMode", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

double re::internal::defaultConstruct<re::BlendShapeDefinition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_QWORD *)(a3 + 128) = 0;
  return result;
}

void re::internal::defaultDestruct<re::BlendShapeDefinition>(int a1, int a2, re::BlendShapeDefinition *this)
{
  re::BlendShapeDefinition::~BlendShapeDefinition(this);
}

double re::internal::defaultConstructV2<re::BlendShapeDefinition>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = &str_110;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  return result;
}

uint64_t *re::allocInfo_BlendShapeGroupDefinition(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254118B90);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254118B90))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254118D10, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254118D20 = 0;
    qword_254118D30 = 0;
    qword_254118D38 = 0xFFFFFFFFLL;
    qword_254118D10 = (uint64_t)&off_24ED7DAA8;
    qword_254118D40 = (uint64_t)"BlendShapeGroupDefinition";
    dword_254118D48 = 0;
    xmmword_254118D50 = 0u;
    unk_254118D60 = 0u;
    xmmword_254118D70 = 0u;
    qword_254118D80 = 0;
    __cxa_guard_release(&qword_254118B90);
  }
  return &qword_254118D10;
}

void re::initInfo_BlendShapeGroupDefinition(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[2];
  __int128 v21;

  v20[0] = 0x6979C06139805244;
  v20[1] = "BlendShapeGroupDefinition";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  v4 = atomic_load((unsigned __int8 *)&qword_254118B98);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254118B98);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::StringID>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "blendShapeGroupName";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254118BC0 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<re::FixedArray<re::BlendShapeDefinition>>::get();
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "blendShapeDefinitions";
      *(_QWORD *)(v11 + 16) = qword_254118C10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x1000000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254118BC8 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      re::introspect_BlendShapeStorageMode((re *)v12, v13);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "storageMode";
      *(_QWORD *)(v14 + 16) = &qword_254118C50;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x2800000003;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_254118BD0 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_uint32_t((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "verticesPerBlendShape";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x2C00000004;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_254118BD8 = v18;
      __cxa_guard_release(&qword_254118B98);
    }
  }
  *((_QWORD *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254118BC0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::BlendShapeGroupDefinition>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::BlendShapeGroupDefinition>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::BlendShapeGroupDefinition>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::BlendShapeGroupDefinition>;
  re::IntrospectionRegistry::add(this, v3);
  v19 = v21;
}

void re::IntrospectionInfo<re::FixedArray<re::BlendShapeDefinition>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  const re::IntrospectionBase *v35;
  uint64_t *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40[2];
  __int128 v41;
  const char *v42;
  __int128 v43;

  v0 = atomic_load((unsigned __int8 *)&qword_254118BA0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254118BA0))
  {
    re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)qword_254118C10);
    qword_254118C10[0] = (uint64_t)&off_24ED73920;
    __cxa_guard_release(&qword_254118BA0);
  }
  if ((byte_254118B61 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254118B88;
    if (qword_254118B88)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254118B78);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254118B78))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254118C98, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254118CA8 = 0;
      *(_QWORD *)&xmmword_254118CB8 = 0;
      *((_QWORD *)&xmmword_254118CB8 + 1) = 0xFFFFFFFFLL;
      qword_254118C98 = (uint64_t)&off_24ED7DAA8;
      qword_254118CC8 = (uint64_t)"BlendShapeDefinition";
      dword_254118CD0 = 0;
      xmmword_254118CD8 = 0u;
      *(_OWORD *)&qword_254118CE8 = 0u;
      xmmword_254118CF8 = 0u;
      qword_254118D08 = 0;
      __cxa_guard_release(&qword_254118B78);
    }
    qword_254118B88 = (uint64_t)&qword_254118C98;
    *(_QWORD *)&v43 = 0xE22E282D2A316C6;
    *((_QWORD *)&v43 + 1) = "BlendShapeDefinition";
    re::StringID::destroyString((re::StringID *)&v43);
    xmmword_254118CB8 = v41;
    v4 = atomic_load((unsigned __int8 *)&qword_254118B80);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254118B80);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "name";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_254118BE0 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "indices";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x1000000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_254118BE8 = v21;
        v22 = re::introspectionAllocator((re *)v21);
        v24 = re::IntrospectionInfo<re::FixedArray<float>>::get(1, v23);
        v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
        *(_DWORD *)v25 = 1;
        *(_QWORD *)(v25 + 8) = "positionData";
        *(_QWORD *)(v25 + 16) = v24;
        *(_QWORD *)(v25 + 24) = 0;
        *(_QWORD *)(v25 + 32) = 0x2800000003;
        *(_DWORD *)(v25 + 40) = 0;
        *(_QWORD *)(v25 + 48) = 0;
        *(_QWORD *)(v25 + 56) = 0;
        *(_DWORD *)(v25 + 64) = 0;
        qword_254118BF0 = v25;
        v26 = re::introspectionAllocator((re *)v25);
        v28 = re::IntrospectionInfo<re::FixedArray<float>>::get(1, v27);
        v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
        *(_DWORD *)v29 = 1;
        *(_QWORD *)(v29 + 8) = "normalData";
        *(_QWORD *)(v29 + 16) = v28;
        *(_QWORD *)(v29 + 24) = 0;
        *(_QWORD *)(v29 + 32) = 0x4000000004;
        *(_DWORD *)(v29 + 40) = 0;
        *(_QWORD *)(v29 + 48) = 0;
        *(_QWORD *)(v29 + 56) = 0;
        *(_DWORD *)(v29 + 64) = 0;
        qword_254118BF8 = v29;
        v30 = re::introspectionAllocator((re *)v29);
        v32 = re::IntrospectionInfo<re::FixedArray<float>>::get(1, v31);
        v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
        *(_DWORD *)v33 = 1;
        *(_QWORD *)(v33 + 8) = "tangentData";
        *(_QWORD *)(v33 + 16) = v32;
        *(_QWORD *)(v33 + 24) = 0;
        *(_QWORD *)(v33 + 32) = 0x5800000005;
        *(_DWORD *)(v33 + 40) = 0;
        *(_QWORD *)(v33 + 48) = 0;
        *(_QWORD *)(v33 + 56) = 0;
        *(_DWORD *)(v33 + 64) = 0;
        qword_254118C00 = v33;
        v34 = re::introspectionAllocator((re *)v33);
        v36 = re::IntrospectionInfo<re::FixedArray<float>>::get(1, v35);
        v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 72, 8);
        *(_DWORD *)v37 = 1;
        *(_QWORD *)(v37 + 8) = "bitangentData";
        *(_QWORD *)(v37 + 16) = v36;
        *(_QWORD *)(v37 + 24) = 0;
        *(_QWORD *)(v37 + 32) = 0x7000000006;
        *(_DWORD *)(v37 + 40) = 0;
        *(_QWORD *)(v37 + 48) = 0;
        *(_QWORD *)(v37 + 56) = 0;
        *(_DWORD *)(v37 + 64) = 0;
        qword_254118C08 = v37;
        __cxa_guard_release(&qword_254118B80);
      }
    }
    qword_254118CA8 = 0x8800000008;
    v1 = &qword_254118C98;
    dword_254118CB0 = 8;
    word_254118CB4 = 0;
    dword_254118CD0 = 6;
    *(_QWORD *)&xmmword_254118CD8 = &qword_254118BE0;
    *((_QWORD *)&xmmword_254118CD8 + 1) = re::internal::defaultConstruct<re::BlendShapeDefinition>;
    qword_254118CE8 = (uint64_t)re::internal::defaultDestruct<re::BlendShapeDefinition>;
    unk_254118CF0 = 0;
    *(_QWORD *)&xmmword_254118CF8 = 0;
    *((_QWORD *)&xmmword_254118CF8 + 1) = re::internal::defaultConstructV2<re::BlendShapeDefinition>;
    qword_254118D08 = (uint64_t)re::internal::defaultDestructV2<re::BlendShapeDefinition>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254118C98, v3);
    v43 = v41;
    if ((byte_254118B61 & 1) == 0)
    {
LABEL_7:
      byte_254118B61 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_254118C10, 0);
      unk_254118C20 = 0x1800000004;
      unk_254118C28 = v5;
      unk_254118C2C = 0;
      *(_QWORD *)&xmmword_254118C30 = 0;
      *((_QWORD *)&xmmword_254118C30 + 1) = 0xFFFFFFFFLL;
      unk_254118C40 = v1;
      unk_254118C48 = 0;
      qword_254118C10[0] = (uint64_t)&off_24ED73920;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)qword_254118C10, (const re::IntrospectionBase *)&v41);
      if ((BYTE8(v41) & 1) != 0)
        v8 = v42;
      else
        v8 = (char *)&v41 + 9;
      if ((_QWORD)v41 && (BYTE8(v41) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v41 + 40))();
      v39 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v40);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v38 + 1) = v10;
      }
      else
      {
        v43 = v39;
        re::TypeBuilder::beginListType((uint64_t)&v41, v40, 1, 0x18uLL, 8uLL, &v43);
        re::TypeBuilder::setConstructor((uint64_t)&v41, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v41, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v41, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v41, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v41, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v41, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v41, v11);
      }
      xmmword_254118C30 = v38;
      re::StringID::destroyString((re::StringID *)v40);
    }
  }
}

void re::internal::defaultConstruct<re::BlendShapeGroupDefinition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  *(_DWORD *)(a3 + 44) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 40) = 0;
}

void re::internal::defaultDestruct<re::BlendShapeGroupDefinition>(uint64_t a1, uint64_t a2, re::StringID *a3)
{
  re::FixedArray<re::BlendShapeDefinition>::deinit((_QWORD *)a3 + 2);
  re::StringID::destroyString(a3);
}

uint64_t re::internal::defaultConstructV2<re::BlendShapeGroupDefinition>(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = &str_110;
  *(_DWORD *)(result + 44) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 40) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::BlendShapeGroupDefinition>(re::StringID *a1)
{
  re::FixedArray<re::BlendShapeDefinition>::deinit((_QWORD *)a1 + 2);
  re::StringID::destroyString(a1);
}

uint64_t re::introspect_BlendShapeGroupDefinition(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeGroupDefinition", (uint64_t (*)(re::internal *))re::allocInfo_BlendShapeGroupDefinition, (re::IntrospectionBase *(*)(void))re::initInfo_BlendShapeGroupDefinition, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BlendShapeGroupDefinition>, this);
}

_QWORD *re::IntrospectionFixedArray<re::BlendShapeDefinition>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<re::BlendShapeDefinition>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionFixedArray<re::BlendShapeDefinition>::construct(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

_QWORD *re::IntrospectionFixedArray<re::BlendShapeDefinition>::destroy(uint64_t a1, _QWORD *a2)
{
  return re::FixedArray<re::BlendShapeDefinition>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<re::BlendShapeDefinition>::init(uint64_t a1, uint64_t a2, re *a3, int a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::BlendShapeDefinition>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      if (*(_QWORD *)(a2 + 8) <= v12)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      result = (uint64_t)re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(*(_QWORD *)(a2 + 16) + v11));
      ++v12;
      v11 += 136;
    }
    while (a5 != v12);
  }
  return result;
}

_QWORD *re::IntrospectionFixedArray<re::BlendShapeDefinition>::deinit(uint64_t a1, _QWORD *a2)
{
  return re::FixedArray<re::BlendShapeDefinition>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<re::BlendShapeDefinition>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<re::BlendShapeDefinition>::isInitialized(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<re::BlendShapeDefinition>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 136 * a3;
}

{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 136 * a3;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *result = a3;
  return result;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(_QWORD *a1)
{
  re::FixedArray<re::BlendShapeDefinition>::deinit(a1);
  return re::FixedArray<re::BlendShapeDefinition>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(_QWORD *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  re::FixedArray<re::BlendShapeDefinition>::deinit(a1);
  v8 = (_anonymous_namespace_ *)re::FixedArray<re::BlendShapeDefinition>::init<>((uint64_t)a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = a1[1];
    if (v9)
    {
      v10 = (char *)a1[2];
      v11 = 136 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 136;
        v11 -= 136;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 16) + 136 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v1 < (int)v3)
    a1[2] = ++v1;
  if (v3 <= v1)
    return 0;
  else
    return *(_QWORD *)(v2 + 16) + 136 * v1;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::BlendShapeDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t re::fetchAllTextures(re *this, const re::MetalTypeInfo *a2)
{
  _anonymous_namespace_ *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  const re::MetalTypeInfo *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  const re::MetalTypeInfo *v21;
  _QWORD v22[2];
  uint64_t v23;
  int v24;
  uint64_t v25;

  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 6) = 0;
  v25 = 0;
  v22[1] = 0;
  v23 = 0;
  v21 = a2;
  v22[0] = 0;
  v24 = 0;
  v3 = re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v22, &v21);
  v4 = v23;
  if (v23)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = v4 - 1;
      v9 = *(unsigned int **)(v25 + 8 * (v4 - 1));
      v23 = v8;
      ++v24;
      v10 = *((unsigned __int16 *)v9 + 18);
      if (v10 == 58)
      {
        v14 = v9[16];
        v15 = *v9;
        v16 = *((_QWORD *)this + 1);
        if (v7 >= v16)
        {
          if (v16 < v7 + 1)
          {
            if (*(_QWORD *)this)
            {
              if (v16)
                v17 = 2 * v16;
              else
                v17 = 8;
              if (v17 <= v7 + 1)
                v18 = v7 + 1;
              else
                v18 = v17;
              v3 = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(this, v18);
              v5 = *((_DWORD *)this + 6);
            }
            else
            {
              v3 = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(this, v7 + 1);
              v5 = *((_DWORD *)this + 6) + 1;
            }
          }
          v7 = *((_QWORD *)this + 2);
          v6 = *((_QWORD *)this + 4);
        }
        v19 = v6 + 16 * v7;
        *(_DWORD *)v19 = v14;
        *(_QWORD *)(v19 + 8) = v15;
        v7 = *((_QWORD *)this + 2) + 1;
        *((_QWORD *)this + 2) = v7;
        *((_DWORD *)this + 6) = ++v5;
      }
      else if (v10 == 1)
      {
        v11 = *((_QWORD *)v9 + 6);
        if (v11)
        {
          v12 = (const re::MetalTypeInfo *)*((_QWORD *)v9 + 7);
          v13 = 80 * v11;
          do
          {
            v21 = v12;
            v3 = re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v22, &v21);
            v12 = (const re::MetalTypeInfo *)((char *)v12 + 80);
            v13 -= 80;
          }
          while (v13);
        }
      }
      v4 = v23;
    }
    while (v23);
  }
  result = v22[0];
  if (v22[0])
  {
    if (v25)
      return (*(uint64_t (**)(void))(*(_QWORD *)v22[0] + 40))();
  }
  return result;
}

_anonymous_namespace_ *re::fillLinkedArgumentsWithReflection@<X0>(_anonymous_namespace_ *result@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *var1;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id *CachedFunction;
  id *v27;
  _anonymous_namespace_ *v28;
  uint64_t v29;
  id *v30;
  _anonymous_namespace_ *v31;
  uint64_t v32;
  char *v33;
  char var0;
  char *v35;
  id v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  _anonymous_namespace_ *v40;
  __int128 v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v64;
  id v65;
  _QWORD v66[2];
  unint64_t v67;
  int v68;
  _QWORD *v69;
  uint64_t v70;
  StringID v71;
  __int128 v72;
  _OWORD v73[2];
  _BYTE v74[48];
  _BYTE v75[18];
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  unint64_t v79;
  _OWORD v80[5];
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)result + 1);
  if (!v4)
    goto LABEL_38;
  v5 = *((_QWORD *)result + 2);
  v64 = v5 + 144 * v4;
  while (1)
  {
    v69 = 0;
    v66[1] = 0;
    v67 = 0;
    v66[0] = 0;
    v68 = 0;
    if (*(_QWORD *)(v5 + 48))
    {
      v6 = 0uLL;
      *(_QWORD *)&v71.var0 = 0;
      v72 = 0u;
      v73[0] = 0u;
      memset(&v74[16], 0, 32);
      v71.var1 = (char *)&str_110;
      DWORD2(v72) = 0;
      LODWORD(v73[0]) = 1;
      v73[1] = (unint64_t)&str_110;
      *(_WORD *)&v74[36] = 256;
      memset(v74, 0, 29);
      if (!*(_QWORD *)(v5 + 104))
        goto LABEL_46;
      v7 = *(_QWORD *)(v5 + 112);
      *(_QWORD *)&v71.var0 = 0;
      v71.var1 = (char *)&str_110;
      v8 = *(_QWORD *)(v7 + 8);
      v9 = *(_QWORD *)v7 & 1;
      *(_QWORD *)(v7 + 8) = &str_110;
      *(_QWORD *)&v80[0] = v9;
      *((_QWORD *)&v80[0] + 1) = v8;
      *(_QWORD *)v7 = 0;
      re::StringID::destroyString((re::StringID *)v80);
      *(_WORD *)(v7 + 16) = v72;
      v10 = *((_QWORD *)&v72 + 1);
      *(_DWORD *)(v7 + 32) = v73[0];
      *(_QWORD *)(v7 + 24) = v10;
      v11 = *((_QWORD *)&v73[0] + 1);
      v12 = *(_QWORD *)&v73[1];
      *((_QWORD *)&v73[0] + 1) = 0;
      *(_QWORD *)&v73[1] = &str_110;
      v13 = *(_QWORD *)(v7 + 40);
      v14 = *(_QWORD *)(v7 + 48);
      *(_QWORD *)(v7 + 40) = v11;
      *(_QWORD *)(v7 + 48) = v12;
      *(_QWORD *)&v80[0] = v11 & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
      *((_QWORD *)&v80[0] + 1) = v14;
      re::StringID::destroyString((re::StringID *)v80);
      v15 = DWORD2(v73[1]);
      *(_WORD *)(v7 + 60) = WORD6(v73[1]);
      *(_DWORD *)(v7 + 56) = v15;
      re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)(v7 + 64), (uint64_t *)v74);
      v16 = *(_QWORD *)&v74[24];
      *(_QWORD *)(v7 + 94) = *(_QWORD *)&v74[30];
      *(_QWORD *)(v7 + 88) = v16;
      *(_BYTE *)(v7 + 104) = v74[40];
      re::FixedArray<re::MetalTypeInfo>::deinit(v74);
      re::StringID::destroyString((re::StringID *)((char *)v73 + 8));
      re::StringID::destroyString((re::StringID *)&v71);
      re::sg::CachedCompilationMaterial::getCustomUniformsArgument(*(StringID **)(v5 + 48), (uint64_t)&v71);
      v3 = *(_QWORD *)(v5 + 104);
      if (v3 > 1)
      {
        v17 = *(_QWORD *)(v5 + 112);
        v18 = *(_QWORD *)&v71.var0;
        var1 = v71.var1;
        *(_QWORD *)&v71.var0 = 0;
        v71.var1 = (char *)&str_110;
        v20 = *(_QWORD *)(v17 + 112);
        v21 = *(_QWORD *)(v17 + 120);
        *(_QWORD *)(v17 + 112) = v18;
        *(_QWORD *)(v17 + 120) = var1;
        *(_QWORD *)&v80[0] = v18 & 0xFFFFFFFFFFFFFFFELL | v20 & 1;
        *((_QWORD *)&v80[0] + 1) = v21;
        re::StringID::destroyString((re::StringID *)v80);
        *(_WORD *)(v17 + 128) = v72;
        *(_QWORD *)(v17 + 136) = *((_QWORD *)&v72 + 1);
        *(_DWORD *)(v17 + 144) = v73[0];
        v22 = *((_QWORD *)&v73[0] + 1);
        v23 = *(_QWORD *)&v73[1];
        *((_QWORD *)&v73[0] + 1) = 0;
        *(_QWORD *)&v73[1] = &str_110;
        v24 = *(_QWORD *)(v17 + 152);
        v25 = *(_QWORD *)(v17 + 160);
        *(_QWORD *)(v17 + 152) = v22;
        *(_QWORD *)(v17 + 160) = v23;
        *(_QWORD *)&v80[0] = v22 & 0xFFFFFFFFFFFFFFFELL | v24 & 1;
        *((_QWORD *)&v80[0] + 1) = v25;
        re::StringID::destroyString((re::StringID *)v80);
        *(_DWORD *)(v17 + 168) = DWORD2(v73[1]);
        *(_WORD *)(v17 + 172) = WORD6(v73[1]);
        re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)(v17 + 176), (uint64_t *)v74);
        *(_QWORD *)(v17 + 200) = *(_QWORD *)&v74[24];
        *(_QWORD *)(v17 + 206) = *(_QWORD *)&v74[30];
        *(_BYTE *)(v17 + 216) = v74[40];
        re::FixedArray<re::MetalTypeInfo>::deinit(v74);
        re::StringID::destroyString((re::StringID *)((char *)v73 + 8));
        re::StringID::destroyString((re::StringID *)&v71);
        goto LABEL_37;
      }
      goto LABEL_47;
    }
    CachedFunction = (id *)re::FunctionReflectionCache::tryGetCachedFunction(a2, (((*(_QWORD *)(v5 + 40) << 6)- 0x61C8864680B583E9+ (*(_QWORD *)(v5 + 40) >> 2)+ (*(_QWORD *)(v5 + 24) >> 1)) ^ *(_QWORD *)(v5 + 40))- 0x61C8864680B583E9);
    if (!CachedFunction)
    {
      re::DynamicString::format((re::DynamicString *)"Unable to build provided material function (%s)", (re::DynamicString *)&v71, *(_QWORD *)(v5 + 32));
      v60 = 80;
      goto LABEL_41;
    }
    v27 = CachedFunction;
    v28 = (_anonymous_namespace_ *)objc_msgSend(*CachedFunction, sel_functionType);
    if (v28 != (_anonymous_namespace_ *)5)
      break;
    if (v27[3])
    {
      v3 = 0;
      do
      {
        v30 = (id *)v27[5];
        *(_QWORD *)&v71.var0 = 0;
        v71.var1 = (char *)&str_110;
        LOWORD(v72) = 0;
        *((_QWORD *)&v72 + 1) = 0;
        LODWORD(v73[0]) = 1;
        *((_QWORD *)&v73[0] + 1) = 0;
        *(_QWORD *)&v73[1] = &str_110;
        DWORD2(v73[1]) = 0;
        WORD6(v73[1]) = 0;
        *(_DWORD *)&v74[32] = 0;
        *(_WORD *)&v74[36] = 256;
        memset(v74, 0, 29);
        v74[40] = 0;
        v31 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(v30[v3], sel_name), sel_UTF8String);
        *(_QWORD *)v75 = 0;
        *(_QWORD *)&v75[8] = &str_110;
        v32 = *(_QWORD *)v75;
        v33 = *(char **)&v75[8];
        *(_QWORD *)v75 = 0;
        *(_QWORD *)&v75[8] = &str_110;
        var0 = (char)v71.var0;
        v35 = v71.var1;
        *(_QWORD *)&v71.var0 = v32;
        v71.var1 = v33;
        *(_QWORD *)&v80[0] = v32 & 0xFFFFFFFFFFFFFFFELL | var0 & 1;
        *((_QWORD *)&v80[0] + 1) = v35;
        re::StringID::destroyString((re::StringID *)v80);
        re::StringID::destroyString((re::StringID *)v75);
        LOWORD(v72) = v3;
        if (objc_msgSend(v30[v3], sel_type) == (id)28)
        {
          v36 = v30[v3];
          v65 = v36;
          re::makeMetalTypeInfoForPointer(&v65, (uint64_t)v80);
          *((_QWORD *)&v72 + 1) = *(_QWORD *)&v80[0];
          LODWORD(v73[0]) = DWORD2(v80[0]);
          v37 = v80[1];
          *(_QWORD *)&v80[1] = 0;
          *((_QWORD *)&v80[1] + 1) = &str_110;
          v38 = BYTE8(v73[0]);
          v39 = *(_QWORD *)&v73[1];
          *(_OWORD *)((char *)v73 + 8) = v37;
          *(_QWORD *)v75 = v37 & 0xFFFFFFFFFFFFFFFELL | v38 & 1;
          *(_QWORD *)&v75[8] = v39;
          re::StringID::destroyString((re::StringID *)v75);
          DWORD2(v73[1]) = v80[2];
          WORD6(v73[1]) = WORD2(v80[2]);
          re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)v74, (uint64_t *)&v80[2] + 1);
          *(_QWORD *)&v74[24] = *(_QWORD *)&v80[4];
          *(_QWORD *)&v74[30] = *(_QWORD *)((char *)&v80[4] + 6);
          re::FixedArray<re::MetalTypeInfo>::deinit((_QWORD *)&v80[2] + 1);
          re::StringID::destroyString((re::StringID *)&v80[1]);
          if (v36)
          {

            v65 = 0;
          }
          v74[40] = 1;
        }
        else if (objc_msgSend(v30[v3], sel_type) == (id)29)
        {
          v40 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(objc_msgSend(v30[v3], sel_dataTypeDescription), sel_typeName), sel_cStringUsingEncoding_, 4);
          *(_QWORD *)&v80[0] = 0;
          DWORD2(v80[0]) = 1;
          *(_QWORD *)&v80[1] = 0;
          *((_QWORD *)&v80[1] + 1) = &str_110;
          LODWORD(v80[2]) = 0;
          WORD2(v80[2]) = 0;
          DWORD2(v80[4]) = 0;
          WORD6(v80[4]) = 256;
          memset(&v80[3], 0, 21);
          *((_QWORD *)&v80[2] + 1) = 0;
          *((_QWORD *)&v72 + 1) = *(_QWORD *)&v80[0];
          LODWORD(v73[0]) = DWORD2(v80[0]);
          v41 = v80[1];
          *(_QWORD *)&v80[1] = 0;
          *((_QWORD *)&v80[1] + 1) = &str_110;
          v42 = BYTE8(v73[0]);
          v43 = *(_QWORD *)&v73[1];
          *(_OWORD *)((char *)v73 + 8) = v41;
          *(_QWORD *)v75 = v41 & 0xFFFFFFFFFFFFFFFELL | v42 & 1;
          *(_QWORD *)&v75[8] = v43;
          re::StringID::destroyString((re::StringID *)v75);
          DWORD2(v73[1]) = v80[2];
          WORD6(v73[1]) = WORD2(v80[2]);
          re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)v74, (uint64_t *)&v80[2] + 1);
          *(_QWORD *)&v74[24] = *(_QWORD *)&v80[4];
          *(_QWORD *)&v74[30] = *(_QWORD *)((char *)&v80[4] + 6);
          re::FixedArray<re::MetalTypeInfo>::deinit((_QWORD *)&v80[2] + 1);
          re::StringID::destroyString((re::StringID *)&v80[1]);
          WORD6(v73[1]) = 1;
        }
        re::DynamicArray<re::TypedArgument>::add((_anonymous_namespace_ *)v66, &v71);
        re::FixedArray<re::MetalTypeInfo>::deinit(v74);
        re::StringID::destroyString((re::StringID *)((char *)v73 + 8));
        re::StringID::destroyString((re::StringID *)&v71);
        ++v3;
      }
      while (v3 < (unint64_t)v27[3]);
    }
    v44 = v67;
    if (!v67)
    {
      if (!*(_QWORD *)(v5 + 96))
        goto LABEL_37;
      v58 = 0;
      v59 = v69;
LABEL_35:
      if (*(_QWORD *)(v5 + 104) == v58)
      {
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TypedArgument const*,re::TypedArgument const*,re::TypedArgument*>(v59, &v59[14 * v58], *(_QWORD *)(v5 + 112));
        goto LABEL_37;
      }
LABEL_48:
      re::internal::assertLog((re::internal *)4, v29, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
      _os_crash();
      __break(1u);
    }
    v3 = 0;
    do
    {
      v45 = v67;
      if (v67 <= v3)
      {
        *(_QWORD *)v75 = 0;
        *(_OWORD *)v74 = 0u;
        v72 = 0u;
        memset(v73, 0, sizeof(v73));
        v71 = (StringID)0;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v80[0]) = 136315906;
        *(_QWORD *)((char *)v80 + 4) = "operator[]";
        WORD6(v80[0]) = 1024;
        *(_DWORD *)((char *)v80 + 14) = 789;
        WORD1(v80[1]) = 2048;
        *(_QWORD *)((char *)&v80[1] + 4) = v3;
        WORD6(v80[1]) = 2048;
        *(_QWORD *)((char *)&v80[1] + 14) = v45;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_46:
        v70 = 0;
        v80[3] = v6;
        v80[4] = v6;
        v80[1] = v6;
        v80[2] = v6;
        v80[0] = v6;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v75 = 136315906;
        *(_QWORD *)&v75[4] = "operator[]";
        *(_WORD *)&v75[12] = 1024;
        *(_DWORD *)&v75[14] = 468;
        v76 = 2048;
        v77 = 0;
        v78 = 2048;
        v79 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_47:
        v70 = 0;
        memset(v80, 0, sizeof(v80));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v75 = 136315906;
        *(_QWORD *)&v75[4] = "operator[]";
        *(_WORD *)&v75[12] = 1024;
        *(_DWORD *)&v75[14] = 468;
        v76 = 2048;
        v77 = 1;
        v78 = 2048;
        v79 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_48;
      }
      v46 = v69;
      v47 = &v69[14 * v3];
      if (*((_BYTE *)v47 + 100))
      {
        v48 = &v69[14 * v3];
        v49 = v48[9];
        if (v49)
        {
          v50 = 0;
          v51 = v48[10];
          v52 = 80 * v49;
          v53 = (_DWORD *)(v51 + 72);
          do
          {
            *v53 = v50;
            v53 += 20;
            ++v50;
            v52 -= 80;
          }
          while (v52);
        }
      }
      if (!*(_BYTE *)v47[1])
      {
        re::DynamicString::format((re::DynamicString *)"$%hu", (re::DynamicString *)&v71, LOWORD(v46[14 * v3 + 2]));
        re::StringID::StringID((re::StringID *)v75, (const re::DynamicString *)&v71);
        v54 = *(_QWORD *)v75;
        v55 = *(_QWORD *)&v75[8];
        *(_QWORD *)v75 = 0;
        *(_QWORD *)&v75[8] = &str_110;
        v56 = v47[1];
        v57 = v54 & 0xFFFFFFFFFFFFFFFELL | *v47 & 1;
        v47[1] = v55;
        *(_QWORD *)&v80[0] = v57;
        *((_QWORD *)&v80[0] + 1) = v56;
        *v47 = v54;
        re::StringID::destroyString((re::StringID *)v80);
        re::StringID::destroyString((re::StringID *)v75);
        v28 = *(_anonymous_namespace_ **)&v71.var0;
        if (*(_QWORD *)&v71.var0)
        {
          if (((uint64_t)v71.var1 & 1) != 0)
            v28 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v71.var0 + 40))();
        }
      }
      ++v3;
    }
    while (v3 != v44);
    v58 = v67;
    v59 = v69;
    if (*(_QWORD *)(v5 + 96))
      goto LABEL_35;
    if (v67)
    {
      goto LABEL_35;
    }
LABEL_37:
    result = (_anonymous_namespace_ *)re::DynamicArray<re::TypedArgument>::deinit((uint64_t)v66);
    v5 += 144;
    if (v5 == v64)
    {
LABEL_38:
      *(_BYTE *)a3 = 0;
      return result;
    }
  }
  re::DynamicString::format((re::DynamicString *)"Provided material function (%s) is NOT a visible or stitchable function", (re::DynamicString *)&v71, *(_QWORD *)(v5 + 32));
  v60 = 60;
LABEL_41:
  re::makeMaterialBuilderErr((__CFString *)v60, (uint64_t)&v71, v80);
  *(_BYTE *)a3 = 1;
  v61 = *(_QWORD *)&v80[0];
  *(_QWORD *)&v80[0] = 0;
  *(_QWORD *)(a3 + 8) = v61;
  if (*(_QWORD *)&v71.var0 && ((uint64_t)v71.var1 & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)&v71.var0 + 40))();
  return (_anonymous_namespace_ *)re::DynamicArray<re::TypedArgument>::deinit((uint64_t)v66);
}

_QWORD *re::DynamicArray<re::TypedArgument>::add(_anonymous_namespace_ *this, StringID *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *var1;
  int v7;
  _QWORD *result;
  char *v9;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::TypedArgument>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 112 * v4;
  re::StringID::StringID((re::StringID *)v5, a2);
  *(_WORD *)(v5 + 16) = a2[1].var0;
  var1 = a2[1].var1;
  *($19119DE20B7F3CFCAA17A8FA4D266B5D *)(v5 + 32) = a2[2].var0;
  *(_QWORD *)(v5 + 24) = var1;
  re::StringID::StringID((re::StringID *)(v5 + 40), (StringID *)((char *)a2 + 40));
  v7 = (int)a2[3].var1;
  *(_WORD *)(v5 + 60) = WORD2(a2[3].var1);
  *(_DWORD *)(v5 + 56) = v7;
  result = re::FixedArray<re::MetalTypeInfo>::FixedArray((_QWORD *)(v5 + 64), (uint64_t)&a2[4]);
  v9 = a2[5].var1;
  *(_QWORD *)(v5 + 94) = *(char **)((char *)&a2[5].var1 + 6);
  *(_QWORD *)(v5 + 88) = v9;
  *(_BYTE *)(v5 + 104) = a2[6].var1;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_anonymous_namespace_ *re::collectLinkedArgumentReflection(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _QWORD *v53;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v59;
  _QWORD v60[2];
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char *__s2[2];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[22];
  char v71;
  _BYTE v72[12];
  __int16 v73;
  _BYTE v74[24];
  _QWORD v75[2];
  _BYTE v76[22];
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)result + 1);
  if (v4)
  {
    v5 = (_QWORD *)*((_QWORD *)result + 2);
    v53 = &v5[18 * v4];
    do
    {
      v6 = v5[13];
      v7 = (_QWORD *)v5[14];
      v60[1] = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      if (v6)
      {
        re::DynamicArray<re::TypedArgument>::setCapacity(v60, v6);
        ++v62;
        if (v61 == -1)
        {
          v64 = 0;
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          *(_OWORD *)__s2 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v72 = 136315906;
          *(_QWORD *)&v72[4] = "copy";
          v73 = 1024;
          *(_DWORD *)v74 = 643;
          *(_WORD *)&v74[4] = 2048;
          *(_QWORD *)&v74[6] = 0;
          *(_WORD *)&v74[14] = 2048;
          *(_QWORD *)&v74[16] = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        if (v61 >= v6)
        {
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TypedArgument const*,re::TypedArgument const*,re::TypedArgument*>(v7, &v7[14 * v6], v63);
        }
        else
        {
          re::DynamicArray<re::TypedArgument>::growCapacity(v60, v6);
          v8 = v61;
          v9 = &v7[14 * v61];
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TypedArgument const*,re::TypedArgument const*,re::TypedArgument*>(v7, v9, v63);
          if (v8 != v6)
          {
            v10 = 0;
            v11 = v63 + 112 * v61;
            do
            {
              v12 = v11 + v10;
              re::StringID::StringID((re::StringID *)(v11 + v10), (const StringID *)&v9[v10 / 8]);
              *(_WORD *)(v12 + 16) = v9[v10 / 8 + 2];
              v13 = v9[v10 / 8 + 3];
              *(_DWORD *)(v12 + 32) = v9[v10 / 8 + 4];
              *(_QWORD *)(v12 + 24) = v13;
              re::StringID::StringID((re::StringID *)(v11 + v10 + 40), (const StringID *)&v9[v10 / 8 + 5]);
              v14 = v9[v10 / 8 + 7];
              *(_WORD *)(v12 + 60) = WORD2(v9[v10 / 8 + 7]);
              *(_DWORD *)(v12 + 56) = v14;
              re::FixedArray<re::MetalTypeInfo>::FixedArray((_QWORD *)(v11 + v10 + 64), (uint64_t)&v9[v10 / 8 + 8]);
              v15 = v9[v10 / 8 + 11];
              *(_QWORD *)(v12 + 94) = *(_QWORD *)((char *)&v9[v10 / 8 + 11] + 6);
              *(_QWORD *)(v12 + 88) = v15;
              *(_BYTE *)(v12 + 104) = v9[v10 / 8 + 13];
              v10 += 112;
            }
            while (-112 * v8 + 112 * v6 != v10);
          }
          v61 = v6;
        }
      }
      else
      {
        re::DynamicArray<re::TypedArgument>::setCapacity(v60, 0);
      }
      ++v62;
      v16 = a4;
      if (v5[5] == a3 && re::StringID::operator==(v5 + 3, v5 + 1))
      {
        v17 = *(_QWORD *)(a2 + 16);
        if (v17)
        {
          v18 = *(uint64_t **)(a2 + 32);
          v19 = 32 * v17;
          do
          {
            if (re::StringID::operator==(v18, v5 + 1))
            {
              *(_QWORD *)v72 = 0;
              *(_QWORD *)&v74[2] = 0;
              *(_QWORD *)&v74[10] = &str_110;
              *(_DWORD *)&v74[18] = 0;
              *(_DWORD *)&v76[16] = 0;
              *(_WORD *)&v76[20] = 256;
              v75[1] = 0;
              *(_QWORD *)v76 = 0;
              v75[0] = 0;
              *(_QWORD *)&v76[5] = 0;
              *(_DWORD *)&v72[8] = 16;
              *(_WORD *)&v74[22] = 1;
              __s2[0] = 0;
              __s2[1] = (char *)&str_110;
              LOWORD(v66) = 0;
              *((_QWORD *)&v66 + 1) = 0;
              LODWORD(v67) = 1;
              *((_QWORD *)&v67 + 1) = 0;
              *(_QWORD *)&v68 = &str_110;
              DWORD2(v68) = 0;
              WORD6(v68) = 0;
              *(_DWORD *)&v70[16] = 0;
              *(_WORD *)&v70[20] = 256;
              *(_QWORD *)v70 = 0;
              v69 = 0uLL;
              *(_QWORD *)&v70[5] = 0;
              v71 = 0;
              re::StringID::operator=((unint64_t *)__s2, v18);
              LOWORD(v66) = v18[2];
              *((_QWORD *)&v66 + 1) = *(_QWORD *)v72;
              LODWORD(v67) = *(_DWORD *)&v72[8];
              re::StringID::operator=((unint64_t *)&v67 + 1, (uint64_t *)&v74[2]);
              DWORD2(v68) = *(_DWORD *)&v74[18];
              WORD6(v68) = *(_WORD *)&v74[22];
              re::FixedArray<re::MetalTypeInfo>::operator=(&v69, (uint64_t)v75);
              *(_QWORD *)&v70[8] = *(_QWORD *)&v76[8];
              *(_QWORD *)&v70[14] = *(_QWORD *)&v76[14];
              re::DynamicArray<re::TypedArgument>::add((_anonymous_namespace_ *)v60, (StringID *)__s2);
              re::FixedArray<re::MetalTypeInfo>::deinit(&v69);
              re::StringID::destroyString((re::StringID *)((char *)&v67 + 8));
              re::StringID::destroyString((re::StringID *)__s2);
              re::FixedArray<re::MetalTypeInfo>::deinit(v75);
              re::StringID::destroyString((re::StringID *)&v74[2]);
            }
            v18 += 4;
            v19 -= 32;
          }
          while (v19);
        }
      }
      re::StringID::StringID((re::StringID *)__s2, (const StringID *)(v5 + 1));
      v20 = (unint64_t)__s2[0];
      v21 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (((unint64_t)__s2[0] >> 31) ^ ((unint64_t)__s2[0] >> 1))) ^ ((0xBF58476D1CE4E5B9 * (((unint64_t)__s2[0] >> 31) ^ ((unint64_t)__s2[0] >> 1))) >> 27));
      v22 = v21 ^ (v21 >> 31);
      if (*(_QWORD *)a4)
      {
        v23 = *(unsigned int *)(a4 + 24);
        v24 = v22 % v23;
        v25 = *(unsigned int *)(*(_QWORD *)(a4 + 8) + 4 * (v22 % v23));
        if ((_DWORD)v25 != 0x7FFFFFFF)
        {
          v56 = v22 % v23;
          v26 = *(_QWORD *)(a4 + 16);
          v27 = __s2[1];
          while (1)
          {
            v28 = v26 + (v25 << 6);
            if ((*(_QWORD *)(v28 + 8) ^ v20) <= 1)
            {
              v29 = *(const char **)(v28 + 16);
              if (v29 == v27 || !strcmp(v29, v27))
                goto LABEL_45;
            }
            v25 = *(_DWORD *)(v26 + (v25 << 6)) & 0x7FFFFFFF;
            if (v25 == 0x7FFFFFFF)
            {
              v59 = v5;
              v24 = v56;
              goto LABEL_29;
            }
          }
        }
        v59 = v5;
      }
      else
      {
        v59 = v5;
        v24 = 0;
      }
LABEL_29:
      v30 = *(unsigned int *)(a4 + 36);
      if ((_DWORD)v30 == 0x7FFFFFFF)
      {
        v30 = *(unsigned int *)(a4 + 32);
        v31 = v30;
        if ((_DWORD)v30 == *(_DWORD *)(a4 + 24))
        {
          re::HashTable<re::StringID,re::DynamicArray<re::TypedArgument>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a4, 2 * *(_DWORD *)(a4 + 28));
          v24 = v22 % *(unsigned int *)(a4 + 24);
          v31 = *(_DWORD *)(a4 + 32);
        }
        *(_DWORD *)(a4 + 32) = v31 + 1;
        v32 = *(_QWORD *)(a4 + 16);
        v33 = *(_DWORD *)(v32 + (v30 << 6));
      }
      else
      {
        v32 = *(_QWORD *)(a4 + 16);
        v33 = *(_DWORD *)(v32 + (v30 << 6));
        *(_DWORD *)(a4 + 36) = v33 & 0x7FFFFFFF;
      }
      v34 = v30 << 6;
      *(_DWORD *)(v32 + v34) = v33 | 0x80000000;
      *(_DWORD *)(*(_QWORD *)(a4 + 16) + v34) = *(_DWORD *)(*(_QWORD *)(a4 + 16) + (v30 << 6)) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a4 + 8) + 4 * v24);
      re::StringID::StringID((re::StringID *)(*(_QWORD *)(a4 + 16) + (v30 << 6) + 8), (const StringID *)__s2);
      v35 = *(_QWORD *)(a4 + 16) + (v30 << 6);
      *(_QWORD *)(v35 + 24) = 0;
      v36 = (_QWORD *)(v35 + 24);
      *(_QWORD *)(v35 + 56) = 0;
      v37 = (uint64_t *)(v35 + 56);
      *(_QWORD *)(v35 + 32) = 0;
      *(_QWORD *)(v35 + 40) = 0;
      *(_DWORD *)(v35 + 48) = 0;
      if (v60[0])
      {
        v57 = v24;
        v38 = v61;
        *v36 = v60[0];
        re::DynamicArray<re::TypedArgument>::setCapacity(v36, v38);
        v40 = *(_QWORD *)(v35 + 40);
        v39 = v35 + 40;
        ++*(_DWORD *)(v39 + 8);
        v41 = v61;
        v55 = v61;
        if (v61 >= v40)
        {
          re::DynamicArray<re::TypedArgument>::setCapacity(v36, v61);
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TypedArgument *,re::TypedArgument *,re::TypedArgument *>((uint64_t)v72, v63, v63 + 112 * *(_QWORD *)v39, *v37);
          if (*(_QWORD *)v39 != v41)
          {
            v44 = v63;
            v45 = *v37;
            v46 = 112 * *(_QWORD *)v39;
            v47 = 112 * v55;
            do
            {
              v48 = v45 + v46;
              re::StringID::StringID((re::StringID *)(v45 + v46), (const StringID *)(v44 + v46));
              *(_WORD *)(v48 + 16) = *(_WORD *)(v44 + v46 + 16);
              v49 = *(_QWORD *)(v44 + v46 + 24);
              *(_DWORD *)(v48 + 32) = *(_DWORD *)(v44 + v46 + 32);
              *(_QWORD *)(v48 + 24) = v49;
              re::StringID::StringID((re::StringID *)(v45 + v46 + 40), (const StringID *)(v44 + v46 + 40));
              v50 = *(_DWORD *)(v44 + v46 + 56);
              *(_WORD *)(v48 + 60) = *(_WORD *)(v44 + v46 + 60);
              *(_DWORD *)(v48 + 56) = v50;
              re::FixedArray<re::MetalTypeInfo>::FixedArray((_QWORD *)(v45 + v46 + 64), v44 + v46 + 64);
              v51 = *(_QWORD *)(v44 + v46 + 88);
              *(_QWORD *)(v48 + 94) = *(_QWORD *)(v44 + v46 + 94);
              *(_QWORD *)(v48 + 88) = v51;
              *(_BYTE *)(v48 + 104) = *(_BYTE *)(v44 + v46 + 104);
              v47 -= 112;
              v44 += 112;
              v45 += 112;
            }
            while (v46 != v47);
          }
        }
        else
        {
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TypedArgument *,re::TypedArgument *,re::TypedArgument *>((uint64_t)v72, v63, v63 + 112 * v61, *v37);
          if (v41 != *(_QWORD *)v39)
          {
            v42 = (_QWORD *)(*v37 + 112 * v55);
            v43 = -112 * v55 + 112 * *(_QWORD *)v39;
            do
            {
              re::FixedArray<re::MetalTypeInfo>::deinit(v42 + 8);
              re::StringID::destroyString((re::StringID *)(v42 + 5));
              re::StringID::destroyString((re::StringID *)v42);
              v42 += 14;
              v43 -= 112;
            }
            while (v43);
          }
        }
        v24 = v57;
        *(_QWORD *)v39 = v55;
        v16 = a4;
      }
      *(_DWORD *)(*(_QWORD *)(v16 + 8) + 4 * v24) = v30;
      ++*(_DWORD *)(v16 + 28);
      ++*(_DWORD *)(v16 + 40);
      v5 = v59;
LABEL_45:
      re::StringID::destroyString((re::StringID *)__s2);
      result = (_anonymous_namespace_ *)re::DynamicArray<re::TypedArgument>::deinit((uint64_t)v60);
      v5 += 18;
    }
    while (v5 != v53);
  }
  return result;
}

uint64_t re::validateMaterialFunctionReflection@<X0>(re::mtl::Device *this@<X1>, uint64_t a2@<X0>, int a3@<W2>, const char *a4@<X3>, const char *a5@<X4>, const char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  result = re::mtl::Device::needsArgumentBufferTextureEmulation(this);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
  {
    v14 = result;
    v15 = *(_QWORD **)(a2 + 16);
    v16 = 144 * v13;
    while (1)
    {
      if (*(unsigned __int8 *)v15 == a3)
      {
        v17 = v15[13];
        if (!v17)
          goto LABEL_22;
        if (v17 >= 3)
        {
          re::DynamicString::format((re::DynamicString *)"Provided material function (%s) has too many arguments", (re::DynamicString *)&v24, v15[4]);
          goto LABEL_28;
        }
        v18 = v15[14];
        v19 = *(const char **)(v18 + 48);
        if (*(_WORD *)(v18 + 60) != 1
          || (result = strcmp(*(const char **)(v18 + 48), a4), (_DWORD)result)
          && (result = strcmp(v19, a5), (_DWORD)result)
          && (result = strcmp(v19, a6), (_DWORD)result))
        {
          re::DynamicString::format((re::DynamicString *)"Provided material function (%s) has invalid first argument type: %s. Should be %s.", (re::DynamicString *)&v24, v15[4], v19, a4);
          goto LABEL_28;
        }
        if (v17 >= 2)
        {
          if (!*(_BYTE *)(v18 + 216) || *(_WORD *)(v18 + 172) != 1)
          {
            re::DynamicString::format((re::DynamicString *)"Provided material function (%s) has invalid second argument type: %s. The custom uniforms argument should be a pointer to a user defined constant or argument buffer structure.", (re::DynamicString *)&v24, v15[4], v19);
            goto LABEL_28;
          }
          v20 = v15[6] ? 0 : v14;
          if (v20 == 1)
          {
            re::fetchAllTextures((re *)&v24, (const re::MetalTypeInfo *)(v18 + 136));
            v21 = v26;
            result = v24;
            if (v24 && v27)
              result = (*(uint64_t (**)(void))(*(_QWORD *)v24 + 40))();
            if (v21)
              break;
          }
        }
      }
      v15 += 18;
      v16 -= 144;
      if (!v16)
        goto LABEL_22;
    }
    re::DynamicString::format((re::DynamicString *)"Provided material function (%s) contains textures in its second argument. This feature requires support for tier 2 argument buffers, which the current device does not have.", (re::DynamicString *)&v24, v15[4]);
LABEL_28:
    re::makeMaterialBuilderErr((__CFString *)0x50, (uint64_t)&v24, &v28);
    result = v24;
    *(_BYTE *)a7 = 1;
    v22 = v28;
    v28 = 0;
    *(_QWORD *)(a7 + 8) = v22;
    if (result)
    {
      if ((v25 & 1) != 0)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v26);
    }
  }
  else
  {
LABEL_22:
    *(_BYTE *)a7 = 0;
  }
  return result;
}

void re::forwardLinkedArguments(re::mtl::Device *this@<X6>, uint64_t a2@<X0>, uint64_t a3@<X1>, _anonymous_namespace_ *a4@<X2>, _anonymous_namespace_ *a5@<X3>, _QWORD *a6@<X4>, uint64_t a7@<X5>, uint64_t a8@<X8>)
{
  _BOOL4 v10;
  _BOOL4 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  _anonymous_namespace_ *v32;
  size_t v33;
  _anonymous_namespace_ *v34;
  size_t v35;
  uint64_t *v36;
  void *v37;
  void *v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  const re::mtl::Device *v45;
  _anonymous_namespace_ *ArgumentEncoderForBindlessArgument;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  _QWORD *v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v66;
  uint64_t v67;
  _QWORD v68[2];
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[2];
  uint64_t *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  id v78[2];
  __int128 v79;
  unint64_t v80;
  char *__s2;
  uint64_t v82;
  unsigned __int16 v83;
  StringID v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  _BYTE v90[14];
  char v91;
  _BYTE v92[12];
  __int16 v93;
  int v94;
  __int16 v95;
  unint64_t v96;
  __int16 v97;
  unint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v10 = re::mtl::Device::needsArgumentBufferTextureEmulation(this);
  if (!*(_QWORD *)(a3 + 16))
  {
LABEL_58:
    *(_BYTE *)a8 = 0;
    return;
  }
  v11 = v10;
  v12 = 0;
  v57 = *(_QWORD *)(a3 + 16);
  v58 = a3;
LABEL_3:
  v13 = *(_QWORD *)(a3 + 16);
  if (v13 <= v12)
  {
    v78[0] = 0;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v84 = (StringID)0;
    v56 = v12;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v92 = 136315906;
    *(_QWORD *)&v92[4] = "operator[]";
    v93 = 1024;
    v94 = 789;
    v95 = 2048;
    v96 = v56;
    v97 = 2048;
    v98 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v59 = v12;
  v14 = *(_QWORD *)(a3 + 32) + 32 * v12;
  re::StringID::StringID((re::StringID *)&v80, (const StringID *)v14);
  v15 = *(_QWORD *)(v14 + 16);
  v83 = *(_WORD *)(v14 + 24);
  v82 = v15;
  if (*(_QWORD *)a2)
  {
    v16 = v80;
    v17 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * ((v80 >> 31) ^ (v80 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v80 >> 31) ^ (v80 >> 1))) >> 27));
    v18 = *(unsigned int *)(*(_QWORD *)(a2 + 8) + 4 * ((v17 ^ (v17 >> 31)) % *(unsigned int *)(a2 + 24)));
    if ((_DWORD)v18 != 0x7FFFFFFF)
    {
      v19 = *(_QWORD *)(a2 + 16);
      v20 = __s2;
      while (1)
      {
        v21 = v19 + (v18 << 6);
        if ((*(_QWORD *)(v21 + 8) ^ v16) <= 1)
        {
          v22 = *(const char **)(v21 + 16);
          if (v22 == v20 || !strcmp(v22, v20))
            break;
        }
        v18 = *(_DWORD *)(v19 + (v18 << 6)) & 0x7FFFFFFF;
        if (v18 == 0x7FFFFFFF)
          goto LABEL_60;
      }
      v23 = v19 + (v18 << 6);
      v24 = *(_QWORD *)(v23 + 40);
      if (!v24)
        goto LABEL_66;
      v66 = 0;
      v25 = *(_QWORD *)(v23 + 56);
      v26 = v25 + 112 * v24;
      v67 = v26;
      while (v82 != *(unsigned __int16 *)(v25 + 16))
      {
LABEL_55:
        v25 += 112;
        if (v25 == v26)
        {
          if ((v66 & 1) == 0)
          {
            v20 = __s2;
LABEL_66:
            re::DynamicString::format((re::DynamicString *)"Failed to resolve forwarded buffer at binding index %u. Unable to find argument at index %zu of type source function \"%s\"", (re::DynamicString *)&v84, v83, v82, v20);
            v54 = 30;
            goto LABEL_61;
          }
          re::StringID::destroyString((re::StringID *)&v80);
          a3 = v58;
          v12 = v59 + 1;
          if (v59 + 1 == v57)
            goto LABEL_58;
          goto LABEL_3;
        }
      }
      re::StringID::StringID((re::StringID *)&v84, (const StringID *)v25);
      LOWORD(v85) = *(_WORD *)(v25 + 16);
      v27 = *(_DWORD *)(v25 + 32);
      *((_QWORD *)&v85 + 1) = *(_QWORD *)(v25 + 24);
      LODWORD(v86) = v27;
      re::StringID::StringID((re::StringID *)((char *)&v86 + 8), (const StringID *)(v25 + 40));
      v28 = *(_DWORD *)(v25 + 56);
      WORD6(v87) = *(_WORD *)(v25 + 60);
      DWORD2(v87) = v28;
      re::FixedArray<re::MetalTypeInfo>::FixedArray(&v88, v25 + 64);
      v29 = *(_QWORD *)(v25 + 88);
      *(_QWORD *)&v90[6] = *(_QWORD *)(v25 + 94);
      *(_QWORD *)v90 = v29;
      v91 = *(_BYTE *)(v25 + 104);
      LOWORD(v85) = v83;
      if (*((_QWORD *)&v88 + 1))
      {
        v30 = (int *)(v89 + 32);
        v31 = 80 * *((_QWORD *)&v88 + 1);
        do
        {
          v32 = (_anonymous_namespace_ *)strlen(v84.var1);
          v73[0] = v84.var1;
          v73[1] = v32;
          v75 = 0;
          v76 = 0;
          v77 = 0;
          if (v32)
            v33 = (size_t)v32 + 1;
          else
            v33 = 0;
          re::DynamicString::setCapacity(&v74, v33);
          re::DynamicString::operator=((re::DynamicString *)&v74, (uint64_t)v73);
          re::DynamicString::operator+((re::DynamicString *)&v74, ".", (re::DynamicString *)v78);
          v34 = (_anonymous_namespace_ *)strlen(*((const char **)v30 - 1));
          v68[0] = *((_QWORD *)v30 - 1);
          v68[1] = v34;
          v70 = 0;
          v71 = 0;
          v72 = 0;
          if (v34)
            v35 = (size_t)v34 + 1;
          else
            v35 = 0;
          re::DynamicString::setCapacity(&v69, v35);
          re::DynamicString::operator=((re::DynamicString *)&v69, (uint64_t)v68);
          re::DynamicString::operator+((re::DynamicString *)v78, (uint64_t)&v69, (re::DynamicString *)v92);
          if (v69 && (v70 & 1) != 0)
            (*(void (**)(void))(*v69 + 40))();
          if (v78[0])
          {
            if (((uint64_t)v78[1] & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v78[0] + 40))();
            *(_OWORD *)v78 = 0u;
            v79 = 0u;
          }
          if (v74 && (v75 & 1) != 0)
            (*(void (**)(void))(*v74 + 40))();
          re::StringID::StringID((re::StringID *)&v74, (const re::DynamicString *)v92);
          v36 = v74;
          v37 = v75;
          v74 = 0;
          v75 = &str_110;
          v38 = (void *)*((_QWORD *)v30 - 1);
          v39 = (void *)((unint64_t)v36 & 0xFFFFFFFFFFFFFFFELL | *((_QWORD *)v30 - 2) & 1);
          *((_QWORD *)v30 - 1) = v37;
          v78[0] = v39;
          v78[1] = v38;
          *((_QWORD *)v30 - 2) = v36;
          re::StringID::destroyString((re::StringID *)v78);
          re::StringID::destroyString((re::StringID *)&v74);
          if (v11 && *((_WORD *)v30 + 2) == 58)
          {
            v40 = *(_QWORD *)(a7 + 16);
            if (v40 >= *(_QWORD *)(a7 + 8))
            {
              re::DynamicArray<re::MetalTypeInfo>::growCapacity((_QWORD *)a7, v40 + 1);
              v40 = *(_QWORD *)(a7 + 16);
            }
            v41 = *(_QWORD *)(a7 + 32) + 80 * v40;
            v42 = *((_QWORD *)v30 - 4);
            *(_DWORD *)(v41 + 8) = *(v30 - 6);
            *(_QWORD *)v41 = v42;
            re::StringID::StringID((re::StringID *)(v41 + 16), (const StringID *)v30 - 1);
            v43 = *v30;
            *(_WORD *)(v41 + 36) = *((_WORD *)v30 + 2);
            *(_DWORD *)(v41 + 32) = v43;
            re::FixedArray<re::MetalTypeInfo>::FixedArray((_QWORD *)(v41 + 40), (uint64_t)(v30 + 2));
            v44 = *((_QWORD *)v30 + 4);
            *(_QWORD *)(v41 + 70) = *(_QWORD *)((char *)v30 + 38);
            *(_QWORD *)(v41 + 64) = v44;
            ++*(_QWORD *)(a7 + 16);
            ++*(_DWORD *)(a7 + 24);
          }
          if (*(_QWORD *)v92 && (v92[8] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)v92 + 40))();
          v30 += 20;
          v31 -= 80;
        }
        while (v31);
      }
      if (v90[12])
      {
        re::DynamicArray<re::TypedArgument>::add(a5, &v84);
        ArgumentEncoderForBindlessArgument = (_anonymous_namespace_ *)re::createArgumentEncoderForBindlessArgument((re *)&v84, (id *)this, v45, (uint64_t)v78);
        if (!LOBYTE(v78[0]))
        {
          re::makeMaterialBuilderErr((__CFString *)0xA, (uint64_t)v92, &v74);
          *(_BYTE *)a8 = 1;
          v53 = v74;
          v74 = 0;
          *(_QWORD *)(a8 + 8) = v53;
          if (*(_QWORD *)v92 && (v92[8] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)v92 + 40))();
          v52 = 0;
LABEL_54:
          re::FixedArray<re::MetalTypeInfo>::deinit(&v88);
          re::StringID::destroyString((re::StringID *)((char *)&v86 + 8));
          re::StringID::destroyString((re::StringID *)&v84);
          v26 = v67;
          if (!v52)
            goto LABEL_64;
          goto LABEL_55;
        }
        v47 = a6;
        v48 = a6[2];
        if (v48 >= a6[1])
        {
          re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::growCapacity(a6, v48 + 1);
          v47 = a6;
          v48 = a6[2];
        }
        v49 = v47[4];
        v50 = v78[1];
        v51 = v47;
        *(_QWORD *)(v49 + 8 * v48) = v78[1];
        ++v51[2];
        ++*((_DWORD *)v51 + 6);
        if (v50)

      }
      else
      {
        re::DynamicArray<re::TypedArgument>::add(a4, &v84);
      }
      v66 = 1;
      v52 = 1;
      goto LABEL_54;
    }
  }
  v20 = __s2;
LABEL_60:
  re::DynamicString::format((re::DynamicString *)"Failed to resolve forwarded buffer at binding index %u. Unable to find type source function \"%s\"", (re::DynamicString *)&v84, v83, v20);
  v54 = 20;
LABEL_61:
  re::makeMaterialBuilderErr((__CFString *)v54, (uint64_t)&v84, v92);
  *(_BYTE *)a8 = 1;
  v55 = *(_QWORD *)v92;
  *(_QWORD *)v92 = 0;
  *(_QWORD *)(a8 + 8) = v55;
  if (*(_QWORD *)&v84.var0)
  {
    if (((uint64_t)v84.var1 & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v84.var0 + 40))();
  }
LABEL_64:
  re::StringID::destroyString((re::StringID *)&v80);
}

uint64_t re::completeLinkedFunctions(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  re::StringID *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _anonymous_namespace_ *v19;
  _anonymous_namespace_ *v20;
  _QWORD *v21;
  uint64_t v22;
  _anonymous_namespace_ *v23;
  _anonymous_namespace_ *v24;
  uint64_t v25;
  re::StringID *v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[18];
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v27 = result;
  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(result + 16);
    v5 = 144 * v2;
    do
    {
      if (*(_BYTE *)(v4 + v3) == 3)
      {
        v6 = (_QWORD *)(v4 + v3);
        if ((*(_BYTE *)(v4 + v3 + 56) & 0x10) != 0)
        {
          re::StringID::destroyString((re::StringID *)(v6 + 1));
          result = re::internal::compileTimeHornerHash<35ul>(0, 0, 34);
          v6[1] = 2 * result;
          v6[2] = "geometryModifierUIWithCustomParams";
        }
        else
        {
          v7 = v6[13];
          v29 = 0u;
          v30 = 0u;
          re::DynamicString::setCapacity(&v29, 0);
          v32 = 0;
          v33 = 0;
          v34 = 0;
          *(_QWORD *)&v41 = "EnableGeometryModifierWithCustomParams";
          *((_QWORD *)&v41 + 1) = 38;
          v8 = re::DynamicString::operator=((re::DynamicString *)&v29, (uint64_t)&v41);
          v9 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)&v29, v7 == 2);
          v31 = 5177397;
          re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::TechniqueFunctionConstant&>(a2, (re::DynamicString *)&v41, (uint64_t)&v29);
          if ((_QWORD)v41 && (BYTE8(v41) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v41 + 40))();
          v10 = v4 + v3;
          v11 = (re::StringID *)(v4 + v3 + 8);
          re::StringID::destroyString(v11);
          if (v7 == 2)
          {
            *(_QWORD *)v11 = 2 * re::internal::compileTimeHornerHash<33ul>(0, 0, 32);
            *(_QWORD *)(v10 + 16) = "geometryModifierWithCustomParams";
            v12 = v6[13];
            if (v12 <= 1)
            {
              v35 = 0;
              v44 = 0u;
              v45 = 0u;
              v42 = 0u;
              v43 = 0u;
              v41 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v36 = 136315906;
              *(_QWORD *)&v36[4] = "operator[]";
              *(_WORD *)&v36[12] = 1024;
              *(_DWORD *)&v36[14] = 468;
              v37 = 2048;
              v38 = 1;
              v39 = 2048;
              v40 = v12;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_62:
              v35 = 0;
              v44 = 0u;
              v45 = 0u;
              v42 = 0u;
              v43 = 0u;
              v41 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v36 = 136315906;
              *(_QWORD *)&v36[4] = "operator[]";
              *(_WORD *)&v36[12] = 1024;
              *(_DWORD *)&v36[14] = 468;
              v37 = 2048;
              v38 = 1;
              v39 = 2048;
              v40 = v5;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            re::fetchAllTextures((re *)&v41, (const re::MetalTypeInfo *)(*(_QWORD *)(v4 + v3 + 112) + 136));
            *(_QWORD *)v36 = v43;
            *(_QWORD *)&v36[8] = v42;
            re::FixedArray<re::TextureRecord>::operator=(v4 + v3 + 120, (uint64_t)v36);
            if ((_QWORD)v41 && (_QWORD)v43)
              (*(void (**)(void))(*(_QWORD *)v41 + 40))();
          }
          else
          {
            *(_QWORD *)v11 = 2
                           * re::internal::compileTimeHornerHash<17ul>(31, (uint64_t)"geometryModifier", 0, 0, 16);
            *(_QWORD *)(v10 + 16) = "geometryModifier";
          }
          if (v32)
          {
            if (v33)
            {
              (*(void (**)(void))(*(_QWORD *)v32 + 40))();
              v33 = 0;
              v34 = 0;
            }
            v32 = 0;
          }
          result = v29;
          if ((_QWORD)v29 && (BYTE8(v29) & 1) != 0)
            result = (*(uint64_t (**)(void))(*(_QWORD *)v29 + 40))();
        }
      }
      v3 += 144;
    }
    while (v5 != v3);
  }
  v13 = *(_QWORD *)(v27 + 32);
  if (v13)
  {
    v14 = 0;
    v15 = *(_QWORD *)(v27 + 40);
    v16 = 144 * v13;
    do
    {
      v17 = *(unsigned __int8 *)(v15 + v14);
      if (v17 == 2)
      {
        v18 = *(_QWORD *)(v15 + v14 + 48);
        if (v18)
        {
          result = objc_msgSend(*(id *)(v18 + 24), "hasConnectedLightSpillNodes");
          if ((_DWORD)result)
          {
            v41 = 0u;
            v42 = 0u;
            re::DynamicString::setCapacity(&v41, 0);
            *((_QWORD *)&v43 + 1) = 0;
            v44 = 0uLL;
            *(_QWORD *)&v29 = "EnableSurfaceShaderVideo";
            *((_QWORD *)&v29 + 1) = 24;
            v19 = re::DynamicString::operator=((re::DynamicString *)&v41, (uint64_t)&v29);
            LODWORD(v29) = 1;
            LODWORD(v43) = 7667765;
            re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::TechniqueFunctionConstant&>(a2, (re::DynamicString *)&v29, (uint64_t)&v41);
            if ((_QWORD)v29 && (BYTE8(v29) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v29 + 40))();
            if (*((_QWORD *)&v43 + 1))
            {
              if ((_QWORD)v44)
              {
                (*(void (**)(void))(**((_QWORD **)&v43 + 1) + 40))();
                v44 = 0uLL;
              }
              *((_QWORD *)&v43 + 1) = 0;
            }
            result = v41;
            if ((_QWORD)v41 && (BYTE8(v41) & 1) != 0)
              result = (*(uint64_t (**)(void))(*(_QWORD *)v41 + 40))();
          }
        }
        v17 = *(unsigned __int8 *)(v15 + v14);
      }
      if (v17 == 4)
      {
        v21 = (_QWORD *)(v15 + v14);
        if ((*(_BYTE *)(v15 + v14 + 56) & 0x20) != 0)
        {
          re::StringID::destroyString((re::StringID *)(v21 + 1));
          result = re::internal::compileTimeHornerHash<32ul>(0, 0, 31);
          v21[1] = 2 * result;
          v21[2] = "surfaceShaderUIWithCustomParams";
        }
        else
        {
          v22 = v21[13];
          v29 = 0u;
          v30 = 0u;
          re::DynamicString::setCapacity(&v29, 0);
          v32 = 0;
          v33 = 0;
          v34 = 0;
          *(_QWORD *)&v41 = "EnableSurfaceShaderWithCustomParams";
          *((_QWORD *)&v41 + 1) = 35;
          v23 = re::DynamicString::operator=((re::DynamicString *)&v29, (uint64_t)&v41);
          v24 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)&v29, v22 == 2);
          v31 = 5111861;
          re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::TechniqueFunctionConstant&>(a2, (re::DynamicString *)&v41, (uint64_t)&v29);
          if ((_QWORD)v41 && (BYTE8(v41) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v41 + 40))();
          v25 = v15 + v14;
          v26 = (re::StringID *)(v15 + v14 + 8);
          re::StringID::destroyString(v26);
          if (v22 == 2)
          {
            *(_QWORD *)v26 = 2 * re::internal::compileTimeHornerHash<30ul>(0, 0, 29);
            *(_QWORD *)(v25 + 16) = "surfaceShaderWithCustomParams";
            v5 = v21[13];
            if (v5 <= 1)
              goto LABEL_62;
            re::fetchAllTextures((re *)&v41, (const re::MetalTypeInfo *)(*(_QWORD *)(v15 + v14 + 112) + 136));
            *(_QWORD *)v36 = v43;
            *(_QWORD *)&v36[8] = v42;
            re::FixedArray<re::TextureRecord>::operator=(v15 + v14 + 120, (uint64_t)v36);
            if ((_QWORD)v41 && (_QWORD)v43)
              (*(void (**)(void))(*(_QWORD *)v41 + 40))();
          }
          else
          {
            *(_QWORD *)v26 = 2
                           * re::internal::compileTimeHornerHash<14ul>(31, (uint64_t)"surfaceShader", 0, 0, 13);
            *(_QWORD *)(v25 + 16) = "surfaceShader";
          }
          if (v32)
          {
            if (v33)
            {
              (*(void (**)(void))(*(_QWORD *)v32 + 40))();
              v33 = 0;
              v34 = 0;
            }
            v32 = 0;
          }
          result = v29;
          if ((_QWORD)v29)
          {
            if ((BYTE8(v29) & 1) != 0)
              result = (*(uint64_t (**)(void))(*(_QWORD *)v29 + 40))();
          }
        }
      }
      v14 += 144;
    }
    while (v16 != v14);
  }
  return result;
}

void *re::TechniqueFunctionConstant::setAs64Bits(re::TechniqueFunctionConstant *this, uint64_t a2)
{
  size_t v2;
  unint64_t v4;
  size_t v5;
  _QWORD __src[2];
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  __src[0] = a2;
  v2 = *((_QWORD *)this + 6);
  if (!v2 || (bzero(*((void **)this + 7), v2), (v4 = *((_QWORD *)this + 6)) == 0))
  {
    __src[1] = 0;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v16 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v8 = 136315906;
    v9 = "operator[]";
    v10 = 1024;
    v11 = 468;
    v12 = 2048;
    v13 = 0;
    v14 = 2048;
    v15 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v4 >= 8)
    v5 = 8;
  else
    v5 = *((_QWORD *)this + 6);
  return memcpy(*((void **)this + 7), __src, v5);
}

uint64_t re::FixedArray<re::TextureRecord>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!*(_QWORD *)a1)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (!v4)
      return a1;
  }
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) == v5)
  {
    if (v5)
      memmove(*(void **)(a1 + 16), *(const void **)a2, 16 * v5);
    return a1;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::fillTablesWithLinkedFunctionParameterDefaults(uint64_t result, _QWORD *a2, _anonymous_namespace_ *a3)
{
  uint64_t v3;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  char v15;
  unsigned __int8 *v16;
  int v17;
  unsigned int v18;
  BOOL v19;
  BOOL v20;
  _anonymous_namespace_ *v21;
  unsigned int v22;
  uint64_t v23;
  re *v24;
  NSObject *v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  uint64_t v42;
  unsigned __int8 *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v54[4];
  uint64_t v55;
  _OWORD v56[3];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  _BYTE v72[7];
  char *v73;
  uint64_t v74;
  uint8_t buf[8];
  uint64_t v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(result + 8);
  if (v3)
  {
    v6 = *(unsigned __int8 **)(result + 16);
    v7 = &v6[144 * v3];
    v44 = a2 + 16;
    v43 = v7;
    do
    {
      if (*v6 - 3 <= 1 && *((_QWORD *)v6 + 13) >= 2uLL)
      {
        v8 = (_QWORD *)*((_QWORD *)v6 + 14);
        v9 = v8[23];
        if (v9)
        {
          v10 = v8[24];
          v11 = v10 + 80 * v9;
          do
          {
            if (*(_BYTE *)(v10 + 77))
            {
              re::DynamicString::format((re::DynamicString *)"%s.%s", (re::DynamicString *)&v70, v8[15], *(_QWORD *)(v10 + 24));
              if ((v71 & 1) != 0)
                v12 = v73;
              else
                v12 = v72;
              if (v12)
              {
                v13 = *v12;
                if (v13)
                {
                  if ((v71 & 1) != 0)
                    v14 = v73 + 1;
                  else
                    v14 = &v72[1];
                  v15 = *v14;
                  if (*v14)
                  {
                    v16 = v14 + 1;
                    do
                    {
                      v13 = 31 * v13 + v15;
                      v17 = *v16++;
                      v15 = v17;
                    }
                    while (v17);
                  }
                  v13 &= ~0x8000000000000000;
                }
              }
              else
              {
                v13 = 0x7FFFFFFFFFFFFFFFLL;
              }
              v69 = v13;
              v18 = *(unsigned __int16 *)(v10 + 36);
              if (v18 > 0x34)
              {
                switch(v18)
                {
                  case '5':
                    v53 = v13;
                    LOBYTE(v74) = 0;
                    *(_QWORD *)buf = v13;
                    v40 = re::ShaderParameterTable::containsConstantKey(a2, (uint64_t *)buf);
                    *(_QWORD *)buf = 0;
                    if (!v40)
                    {
                      *(_QWORD *)&v64 = &v74;
                      *((_QWORD *)&v64 + 1) = 1;
                      re::ConstantTable::setConstant(v44, &v53, (uint64_t)&v64, 2);
                    }
                    v53 = 0;
                    break;
                  case '<':
                    v63 = v13;
                    v41 = re::ShaderParameterTable::containsBufferKey((uint64_t)a2, &v63);
                    v63 = 0;
                    if (!v41)
                    {
                      re::StringID::invalid((re::StringID *)&v64);
                      re::StringID::destroyString((re::StringID *)&v64);
                      re::StringID::invalid((re::StringID *)&v64);
                      re::StringID::destroyString((re::StringID *)&v64);
                    }
                    break;
                  case ':':
                    v68 = v13;
                    v20 = re::TextureParameterTable::containsTextureKey(a3, &v68);
                    v68 = 0;
                    if (!v20)
                    {
                      v21 = a3;
                      v22 = *(_DWORD *)(v10 + 64);
                      v23 = v69;
                      re::StringID::invalid((re::StringID *)buf);
                      re::StringID::destroyString((re::StringID *)buf);
                      re::StringID::invalid((re::StringID *)buf);
                      re::StringID::destroyString((re::StringID *)buf);
                      if (v22 < 0xA && ((0x2EFu >> v22) & 1) != 0)
                      {
                        v42 = qword_226133B48[v22];
                        LOBYTE(v64) = 1;
                        DWORD2(v64) = 1;
                        v65 = v23;
                        v66 = 0;
                        v67 = v42;
                        if (re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(v21, &v69) == -1)re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::internalAdd(v21, &v69, (int *)&v64 + 2);
                      }
                      else
                      {
                        v25 = *re::graphicsLogObjects(v24);
                        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 67109120;
                          *(_DWORD *)&buf[4] = v22;
                          _os_log_impl(&dword_224FE9000, v25, OS_LOG_TYPE_DEFAULT, "Texture type %u not supported", buf, 8u);
                        }
                      }
                      a3 = v21;
                      v7 = v43;
                    }
                    break;
                }
              }
              else
              {
                switch(*(_WORD *)(v10 + 36))
                {
                  case 3:
                    v62 = v13;
                    LODWORD(v74) = 0;
                    *(_QWORD *)buf = v13;
                    v19 = re::ShaderParameterTable::containsConstantKey(a2, (uint64_t *)buf);
                    *(_QWORD *)buf = 0;
                    if (!v19)
                    {
                      *(_QWORD *)&v64 = &v74;
                      *((_QWORD *)&v64 + 1) = 4;
                      re::ConstantTable::setConstant(v44, &v62, (uint64_t)&v64, 1);
                    }
                    v62 = 0;
                    break;
                  case 4:
                    v61 = v13;
                    v74 = v13;
                    *(_QWORD *)buf = 0;
                    v26 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    v74 = 0;
                    if (!v26)
                    {
                      *(_QWORD *)&v64 = buf;
                      *((_QWORD *)&v64 + 1) = 8;
                      re::ConstantTable::setConstant(v44, &v61, (uint64_t)&v64, 32);
                    }
                    v61 = 0;
                    break;
                  case 5:
                    v60 = v13;
                    v64 = 0uLL;
                    v74 = v13;
                    v27 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    v74 = 0;
                    if (!v27)
                    {
                      *(_QWORD *)buf = &v64;
                      v76 = 16;
                      re::ConstantTable::setConstant(v44, &v60, (uint64_t)buf, 33);
                    }
                    v60 = 0;
                    break;
                  case 6:
                    v59 = v13;
                    v64 = 0uLL;
                    v74 = v13;
                    v28 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    v74 = 0;
                    if (!v28)
                    {
                      *(_QWORD *)buf = &v64;
                      v76 = 16;
                      re::ConstantTable::setConstant(v44, &v59, (uint64_t)buf, 34);
                    }
                    v59 = 0;
                    break;
                  case 7:
                    v58 = v13;
                    v64 = xmmword_226104350;
                    v74 = v13;
                    v29 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    v74 = 0;
                    if (!v29)
                    {
                      *(_QWORD *)buf = &v64;
                      v76 = 16;
                      re::ConstantTable::setConstant(v44, &v58, (uint64_t)buf, 48);
                    }
                    v58 = 0;
                    break;
                  case 0xB:
                    v57 = v13;
                    v56[0] = xmmword_2260E5F10;
                    v56[1] = xmmword_2260E5F20;
                    v56[2] = xmmword_2260E5F40;
                    *(_QWORD *)buf = v13;
                    v30 = re::ShaderParameterTable::containsConstantKey(a2, (uint64_t *)buf);
                    *(_QWORD *)buf = 0;
                    if (!v30)
                    {
                      *(_QWORD *)&v64 = v56;
                      *((_QWORD *)&v64 + 1) = 48;
                      re::ConstantTable::setConstant(v44, &v57, (uint64_t)&v64, 49);
                    }
                    v57 = 0;
                    break;
                  case 0xF:
                    v55 = v13;
                    v54[0] = xmmword_2260E5F10;
                    v54[1] = xmmword_2260E5F20;
                    v54[2] = xmmword_2260E5F40;
                    v54[3] = xmmword_2260E5D70;
                    *(_QWORD *)buf = v13;
                    v31 = re::ShaderParameterTable::containsConstantKey(a2, (uint64_t *)buf);
                    *(_QWORD *)buf = 0;
                    if (!v31)
                    {
                      *(_QWORD *)&v64 = v54;
                      *((_QWORD *)&v64 + 1) = 64;
                      re::ConstantTable::setConstant(v44, &v55, (uint64_t)&v64, 50);
                    }
                    v55 = 0;
                    break;
                  case 0x1D:
                    v52 = v13;
                    LODWORD(v74) = 0;
                    *(_QWORD *)buf = v13;
                    v32 = re::ShaderParameterTable::containsConstantKey(a2, (uint64_t *)buf);
                    *(_QWORD *)buf = 0;
                    if (!v32)
                    {
                      *(_QWORD *)&v64 = &v74;
                      *((_QWORD *)&v64 + 1) = 4;
                      re::ConstantTable::setConstant(v44, &v52, (uint64_t)&v64, 3);
                    }
                    v52 = 0;
                    break;
                  case 0x1E:
                    v51 = v13;
                    v74 = v13;
                    *(_QWORD *)buf = 0;
                    v33 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    v74 = 0;
                    if (!v33)
                    {
                      *(_QWORD *)&v64 = buf;
                      *((_QWORD *)&v64 + 1) = 8;
                      re::ConstantTable::setConstant(v44, &v51, (uint64_t)&v64, 4);
                    }
                    v51 = 0;
                    break;
                  case 0x1F:
                    v50 = v13;
                    v64 = 0uLL;
                    v74 = v13;
                    v34 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    v74 = 0;
                    if (!v34)
                    {
                      *(_QWORD *)buf = &v64;
                      v76 = 16;
                      re::ConstantTable::setConstant(v44, &v50, (uint64_t)buf, 5);
                    }
                    v50 = 0;
                    break;
                  case 0x20:
                    v49 = v13;
                    v64 = 0uLL;
                    v74 = v13;
                    v35 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    v74 = 0;
                    if (!v35)
                    {
                      *(_QWORD *)buf = &v64;
                      v76 = 16;
                      re::ConstantTable::setConstant(v44, &v49, (uint64_t)buf, 6);
                    }
                    v49 = 0;
                    break;
                  case 0x21:
                    v48 = v13;
                    LODWORD(v74) = 0;
                    *(_QWORD *)buf = v13;
                    v36 = re::ShaderParameterTable::containsConstantKey(a2, (uint64_t *)buf);
                    *(_QWORD *)buf = 0;
                    if (!v36)
                    {
                      *(_QWORD *)&v64 = &v74;
                      *((_QWORD *)&v64 + 1) = 4;
                      re::ConstantTable::setConstant(v44, &v48, (uint64_t)&v64, 7);
                    }
                    v48 = 0;
                    break;
                  case 0x22:
                    v47 = v13;
                    v74 = v13;
                    *(_QWORD *)buf = 0;
                    v37 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    v74 = 0;
                    if (!v37)
                    {
                      *(_QWORD *)&v64 = buf;
                      *((_QWORD *)&v64 + 1) = 8;
                      re::ConstantTable::setConstant(v44, &v47, (uint64_t)&v64, 8);
                    }
                    v47 = 0;
                    break;
                  case 0x23:
                    v46 = v13;
                    v64 = 0uLL;
                    v74 = v13;
                    v38 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    v74 = 0;
                    if (!v38)
                    {
                      *(_QWORD *)buf = &v64;
                      v76 = 16;
                      re::ConstantTable::setConstant(v44, &v46, (uint64_t)buf, 9);
                    }
                    v46 = 0;
                    break;
                  case 0x24:
                    v45 = v13;
                    v64 = 0uLL;
                    v74 = v13;
                    v39 = re::ShaderParameterTable::containsConstantKey(a2, &v74);
                    v74 = 0;
                    if (!v39)
                    {
                      *(_QWORD *)buf = &v64;
                      v76 = 16;
                      re::ConstantTable::setConstant(v44, &v45, (uint64_t)buf, 10);
                    }
                    v45 = 0;
                    break;
                  default:
                    break;
                }
              }
              result = v70;
              if (v70)
              {
                if ((v71 & 1) != 0)
                  result = (*(uint64_t (**)(void))(*(_QWORD *)v70 + 40))();
              }
            }
            v10 += 80;
          }
          while (v10 != v11);
        }
      }
      v6 += 144;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t *re::FixedArray<re::MetalTypeInfo>::operator=(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (result != a2)
  {
    v2 = *result;
    v3 = *a2;
    if (*result)
      v4 = v2 == v3;
    else
      v4 = 1;
    if (v4)
    {
      *result = v3;
      *a2 = v2;
      v5 = result[1];
      v6 = result[2];
      v7 = a2[2];
      result[1] = a2[1];
      result[2] = v7;
      a2[1] = v5;
      a2[2] = v6;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
      result = (uint64_t *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

_QWORD *re::FixedArray<re::MetalTypeInfo>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != (_QWORD *)a2)
  {
    v4 = *(_QWORD *)a2;
    if (*a1)
    {
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    if (v4)
    {
      re::FixedArray<re::MetalTypeInfo>::init<>((uint64_t)a1, v4, *(_QWORD *)(a2 + 8));
LABEL_7:
      re::FixedArray<re::MetalTypeInfo>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::FixedArray<re::MetalTypeInfo>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >= 0x333333333333334)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 80, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 80 * a3, 8);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_OWORD *)result = 0uLL;
      *(_OWORD *)(result + 16) = 0uLL;
      *(_OWORD *)(result + 48) = 0uLL;
      *(_OWORD *)(result + 64) = 0uLL;
      *(_OWORD *)(result + 32) = 0uLL;
      *(_DWORD *)(result + 8) = 1;
      *(_QWORD *)(result + 24) = &str_110;
      *(_WORD *)(result + 36) = 0;
      *(_WORD *)(result + 76) = 256;
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 61) = 0;
      result += 80;
      --v6;
    }
    while (v6);
  }
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 24) = &str_110;
  *(_WORD *)(result + 36) = 0;
  *(_WORD *)(result + 76) = 256;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 61) = 0;
  return result;
}

uint64_t re::FixedArray<re::MetalTypeInfo>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a2 + 8))
    return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MetalTypeInfo *,re::MetalTypeInfo *,re::MetalTypeInfo *>((uint64_t)&v4, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 16) + 80 * v2, *(_QWORD *)(a1 + 16));
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MetalTypeInfo *,re::MetalTypeInfo *,re::MetalTypeInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 16;
  do
  {
    v7 = *(_QWORD *)(v6 - 16);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(v6 - 8);
    *(_QWORD *)a4 = v7;
    re::StringID::operator=((unint64_t *)(a4 + 16), (uint64_t *)v6);
    v8 = *(_DWORD *)(v6 + 16);
    *(_WORD *)(a4 + 36) = *(_WORD *)(v6 + 20);
    *(_DWORD *)(a4 + 32) = v8;
    re::FixedArray<re::MetalTypeInfo>::operator=((_QWORD *)(a4 + 40), v6 + 24);
    v9 = *(_QWORD *)(v6 + 54);
    *(_QWORD *)(a4 + 64) = *(_QWORD *)(v6 + 48);
    *(_QWORD *)(a4 + 70) = v9;
    a4 += 80;
    v10 = v6 + 64;
    v6 += 80;
  }
  while (v10 != v5);
  return v5;
}

_QWORD *re::FixedArray<re::MetalTypeInfo>::FixedArray(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    re::FixedArray<re::MetalTypeInfo>::init<>((uint64_t)a1, v4, *(_QWORD *)(a2 + 8));
    re::FixedArray<re::MetalTypeInfo>::copy((uint64_t)a1, a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::TypedArgument>::deinit(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 112 * v4;
        do
        {
          re::FixedArray<re::MetalTypeInfo>::deinit(v3 + 8);
          re::StringID::destroyString((re::StringID *)(v3 + 5));
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 14;
          v5 -= 112;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::FixedArray<re::TypedArgument>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >= 0x24924924924924ALL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 112, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 112 * a3, 8);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = &str_110;
      *(_WORD *)(result + 16) = 0;
      *(_OWORD *)(result + 24) = 0uLL;
      *(_OWORD *)(result + 40) = 0uLL;
      *(_OWORD *)(result + 56) = 0uLL;
      *(_OWORD *)(result + 88) = 0uLL;
      *(_OWORD *)(result + 72) = 0uLL;
      *(_DWORD *)(result + 32) = 1;
      *(_QWORD *)(result + 48) = &str_110;
      *(_WORD *)(result + 60) = 0;
      *(_WORD *)(result + 100) = 256;
      *(_QWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 72) = 0;
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 85) = 0;
      *(_BYTE *)(result + 104) = 0;
      result += 112;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = &str_110;
  *(_WORD *)(result + 16) = 0;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_DWORD *)(result + 32) = 1;
  *(_QWORD *)(result + 48) = &str_110;
  *(_WORD *)(result + 60) = 0;
  *(_WORD *)(result + 100) = 256;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 85) = 0;
  *(_BYTE *)(result + 104) = 0;
  return result;
}

_QWORD *re::DynamicArray<re::TypedArgument>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::TypedArgument>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::TypedArgument>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::TypedArgument>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::TypedArgument>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x70uLL))
        {
          v2 = 112 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[14 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          *((_WORD *)v11 + 8) = *((_WORD *)v8 + 8);
          LODWORD(v12) = *((_DWORD *)v8 + 8);
          v11[3] = v8[3];
          *((_DWORD *)v11 + 8) = v12;
          LOBYTE(v12) = v8[5];
          v11[5] = v11[5] & 0xFFFFFFFFFFFFFFFELL | v8[5] & 1;
          v11[5] = v8[5] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[6] = v8[6];
          v8[6] = (uint64_t)&str_110;
          v8[5] = 0;
          LODWORD(v12) = *((_DWORD *)v8 + 14);
          *((_WORD *)v11 + 30) = *((_WORD *)v8 + 30);
          *((_DWORD *)v11 + 14) = v12;
          v11[9] = 0;
          v11[10] = 0;
          v11[8] = 0;
          v11[8] = v8[8];
          v8[8] = 0;
          v13 = v11[10];
          v14 = v8[10];
          v11[9] = v8[9];
          v11[10] = v14;
          v8[9] = 0;
          v8[10] = v13;
          v15 = v8[11];
          *(unint64_t *)((char *)v11 + 94) = *(uint64_t *)((char *)v8 + 94);
          v11[11] = v15;
          *((_BYTE *)v11 + 104) = *((_BYTE *)v8 + 104);
          re::FixedArray<re::MetalTypeInfo>::deinit(v8 + 8);
          re::StringID::destroyString((re::StringID *)(v8 + 5));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 14;
          v11 += 14;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TypedArgument const*,re::TypedArgument const*,re::TypedArgument*>(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = a3 + v6 * 8;
      re::StringID::operator=((unint64_t *)(a3 + v6 * 8), &v5[v6]);
      *(_WORD *)(v7 + 16) = v5[v6 + 2];
      v8 = v5[v6 + 3];
      *(_DWORD *)(v7 + 32) = v5[v6 + 4];
      *(_QWORD *)(v7 + 24) = v8;
      re::StringID::operator=((unint64_t *)(a3 + v6 * 8 + 40), &v5[v6 + 5]);
      v9 = v5[v6 + 7];
      *(_WORD *)(v7 + 60) = WORD2(v5[v6 + 7]);
      *(_DWORD *)(v7 + 56) = v9;
      result = re::FixedArray<re::MetalTypeInfo>::operator=((_QWORD *)(a3 + v6 * 8 + 64), (uint64_t)&v5[v6 + 8]);
      v10 = v5[v6 + 11];
      *(_QWORD *)(v7 + 94) = *(_QWORD *)((char *)&v5[v6 + 11] + 6);
      *(_QWORD *)(v7 + 88) = v10;
      *(_BYTE *)(v7 + 104) = v5[v6 + 13];
      v6 += 14;
    }
    while (&v5[v6] != a2);
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TypedArgument *,re::TypedArgument *,re::TypedArgument *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = a4 + v7;
    re::StringID::operator=((unint64_t *)(a4 + v7), (uint64_t *)(a2 + v7));
    *(_WORD *)(v8 + 16) = *(_WORD *)(a2 + v7 + 16);
    v9 = *(_QWORD *)(a2 + v7 + 24);
    *(_DWORD *)(v8 + 32) = *(_DWORD *)(a2 + v7 + 32);
    *(_QWORD *)(v8 + 24) = v9;
    re::StringID::operator=((unint64_t *)(a4 + v7 + 40), (uint64_t *)(a2 + v7 + 40));
    v10 = *(_DWORD *)(a2 + v7 + 56);
    *(_WORD *)(v8 + 60) = *(_WORD *)(a2 + v7 + 60);
    *(_DWORD *)(v8 + 56) = v10;
    re::FixedArray<re::MetalTypeInfo>::operator=((_QWORD *)(a4 + v7 + 64), a2 + v7 + 64);
    v11 = *(_QWORD *)(a2 + v7 + 88);
    *(_QWORD *)(v8 + 94) = *(_QWORD *)(a2 + v7 + 94);
    *(_QWORD *)(v8 + 88) = v11;
    *(_BYTE *)(v8 + 104) = *(_BYTE *)(a2 + v7 + 104);
    v7 += 112;
  }
  while (a2 + v7 != v6);
  return v6;
}

void re::HashTable<re::StringID,re::DynamicArray<re::TypedArgument>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  signed int v27;
  _BYTE v28[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v28, 0, 36);
      *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v28;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v28[8];
      *(_OWORD *)v28 = v5;
      *(_QWORD *)&v28[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v28[24];
      *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v28[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = v6 + 32;
        do
        {
          if ((*(_DWORD *)(v14 - 32) & 0x80000000) != 0)
          {
            v15 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v14 - 24) >> 31) ^ (*(_QWORD *)(v14 - 24) >> 1));
            v16 = (0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) ^ ((0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) >> 31);
            v17 = *(unsigned int *)(a1 + 24);
            v18 = v16 % v17;
            v19 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v19 == 0x7FFFFFFF)
            {
              v19 = *(unsigned int *)(a1 + 32);
              v20 = v19;
              if ((_DWORD)v19 == (_DWORD)v17)
              {
                re::HashTable<re::StringID,re::DynamicArray<re::TypedArgument>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, (2 * v12));
                v18 = v16 % *(unsigned int *)(a1 + 24);
                v20 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + (v19 << 6));
            }
            else
            {
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + (v19 << 6));
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            v23 = v19 << 6;
            *(_DWORD *)(v21 + v23) = v22 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v23) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v19 << 6)) & 0x80000000 | *(_DWORD *)(v13 + 4 * v18);
            re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + (v19 << 6) + 8), (const StringID *)(v14 - 24));
            v24 = *(_QWORD *)(a1 + 16) + (v19 << 6);
            *(_QWORD *)(v24 + 56) = 0;
            *(_DWORD *)(v24 + 48) = 0;
            *(_QWORD *)(v24 + 32) = 0;
            *(_QWORD *)(v24 + 40) = 0;
            *(_QWORD *)(v24 + 24) = 0;
            *(_QWORD *)(v24 + 24) = *(_QWORD *)(v14 - 8);
            *(_QWORD *)(v14 - 8) = 0;
            *(_QWORD *)(v24 + 32) = *(_QWORD *)v14;
            *(_QWORD *)v14 = 0;
            v25 = *(_QWORD *)(v24 + 40);
            *(_QWORD *)(v24 + 40) = *(_QWORD *)(v14 + 8);
            *(_QWORD *)(v14 + 8) = v25;
            v26 = *(_QWORD *)(v24 + 56);
            *(_QWORD *)(v24 + 56) = *(_QWORD *)(v14 + 24);
            *(_QWORD *)(v14 + 24) = v26;
            ++*(_DWORD *)(v14 + 16);
            ++*(_DWORD *)(v24 + 48);
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v18) = v19;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          v14 += 64;
          ++v11;
        }
        while (v11 < v10);
      }
      re::HashTable<re::StringID,re::DynamicArray<re::TypedArgument>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v28);
    }
  }
  else
  {
    if (a2)
      v27 = a2;
    else
      v27 = 3;
  }
}

double re::HashTable<re::StringID,re::DynamicArray<re::TypedArgument>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::DynamicArray<re::TypedArgument>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 64;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_DWORD *re::HashTable<re::StringID,re::DynamicArray<re::TypedArgument>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(_DWORD *result)
{
  _DWORD *v1;

  if ((*result & 0x80000000) != 0)
  {
    v1 = result;
    *result &= ~0x80000000;
    re::StringID::destroyString((re::StringID *)(result + 2));
    return (_DWORD *)re::DynamicArray<re::TypedArgument>::deinit((uint64_t)(v1 + 6));
  }
  return result;
}

_QWORD *re::DynamicArray<re::MetalTypeInfo>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MetalTypeInfo>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MetalTypeInfo>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::MetalTypeInfo>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  re::StringID *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MetalTypeInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          v2 = 80 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[10 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *((_DWORD *)v11 + 2) = *((_DWORD *)v8 + 2);
          *v11 = v12;
          v13 = (re::StringID *)(v8 + 2);
          LOBYTE(v12) = v8[2];
          v11[2] = v11[2] & 0xFFFFFFFFFFFFFFFELL | v8[2] & 1;
          v11[2] = v8[2] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[3] = v8[3];
          v8[3] = &str_110;
          v8[2] = 0;
          LODWORD(v12) = *((_DWORD *)v8 + 8);
          *((_WORD *)v11 + 18) = *((_WORD *)v8 + 18);
          *((_DWORD *)v11 + 8) = v12;
          v11[6] = 0;
          v11[7] = 0;
          v11[5] = 0;
          v15 = v8[5];
          v14 = v8 + 5;
          v11[5] = v15;
          *v14 = 0;
          v16 = v11[7];
          v17 = v14[2];
          v11[6] = v14[1];
          v11[7] = v17;
          v14[1] = 0;
          v14[2] = v16;
          v18 = v14[3];
          *(_QWORD *)((char *)v11 + 70) = *(_QWORD *)((char *)v14 + 30);
          v11[8] = v18;
          re::FixedArray<re::MetalTypeInfo>::deinit(v14);
          re::StringID::destroyString(v13);
          v8 = v14 + 5;
          v11 += 10;
        }
        while (v8 != v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::internal::compileTimeHornerHash<35ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v3 = a2;
  v4 = a3 - a2;
  switch(a3 - a2)
  {
    case 0:
      return v4;
    case 1:
      goto LABEL_4;
    case 2:
      v5 = 961 * a1 - aGeometrymodifi[a2] + 32 * aGeometrymodifi[a2];
      v3 = a2 + 1;
      return v5 + aGeometrymodifi[v3];
    case 3:
      v5 = 29791 * a1 + 961 * aGeometrymodifi[a2] - aGeometrymodifi[a2 + 1] + 32 * aGeometrymodifi[a2 + 1];
      v3 = a2 + 2;
      return v5 + aGeometrymodifi[v3];
    case 4:
      v5 = 923521 * a1
         + 29791 * aGeometrymodifi[a2]
         + 961 * aGeometrymodifi[a2 + 1]
         - aGeometrymodifi[a2 + 2]
         + 32 * aGeometrymodifi[a2 + 2];
      v3 = a2 + 3;
      return v5 + aGeometrymodifi[v3];
    case 5:
      v5 = 28629151 * a1
         + 923521 * aGeometrymodifi[a2]
         + 29791 * aGeometrymodifi[a2 + 1]
         + 961 * aGeometrymodifi[a2 + 2]
         - aGeometrymodifi[a2 + 3]
         + 32 * aGeometrymodifi[a2 + 3];
      v3 = a2 + 4;
      return v5 + aGeometrymodifi[v3];
    case 6:
      v5 = 887503681 * a1
         + 28629151 * aGeometrymodifi[a2]
         + 923521 * aGeometrymodifi[a2 + 1]
         + 29791 * aGeometrymodifi[a2 + 2]
         + 961 * aGeometrymodifi[a2 + 3]
         - aGeometrymodifi[a2 + 4]
         + 32 * aGeometrymodifi[a2 + 4];
      v3 = a2 + 5;
      return v5 + aGeometrymodifi[v3];
    case 7:
      v5 = 0x667E12CDFLL * a1
         + 887503681 * aGeometrymodifi[a2]
         + 28629151 * aGeometrymodifi[a2 + 1]
         + 923521 * aGeometrymodifi[a2 + 2]
         + 29791 * aGeometrymodifi[a2 + 3]
         + 961 * aGeometrymodifi[a2 + 4]
         - aGeometrymodifi[a2 + 5]
         + 32 * aGeometrymodifi[a2 + 5];
      v3 = a2 + 6;
      return v5 + aGeometrymodifi[v3];
    case 8:
      v5 = 0xC694446F01 * a1
         + 0x667E12CDFLL * aGeometrymodifi[a2]
         + 887503681 * aGeometrymodifi[a2 + 1]
         + 28629151 * aGeometrymodifi[a2 + 2]
         + 923521 * aGeometrymodifi[a2 + 3]
         + 29791 * aGeometrymodifi[a2 + 4]
         + 961 * aGeometrymodifi[a2 + 5]
         - aGeometrymodifi[a2 + 6]
         + 32 * aGeometrymodifi[a2 + 6];
      v3 = a2 + 7;
      return v5 + aGeometrymodifi[v3];
    case 9:
      v5 = 0x180BF449711FLL * a1
         + 0xC694446F01 * aGeometrymodifi[a2]
         + 0x667E12CDFLL * aGeometrymodifi[a2 + 1]
         + 887503681 * aGeometrymodifi[a2 + 2]
         + 28629151 * aGeometrymodifi[a2 + 3]
         + 923521 * aGeometrymodifi[a2 + 4]
         + 29791 * aGeometrymodifi[a2 + 5]
         + 961 * aGeometrymodifi[a2 + 6]
         - aGeometrymodifi[a2 + 7]
         + 32 * aGeometrymodifi[a2 + 7];
      v3 = a2 + 8;
      return v5 + aGeometrymodifi[v3];
    case 10:
      v5 = 0x2E97294E4B2C1 * a1
         + 0x180BF449711FLL * aGeometrymodifi[a2]
         + 0xC694446F01 * aGeometrymodifi[a2 + 1]
         + 0x667E12CDFLL * aGeometrymodifi[a2 + 2]
         + 887503681 * aGeometrymodifi[a2 + 3]
         + 28629151 * aGeometrymodifi[a2 + 4]
         + 923521 * aGeometrymodifi[a2 + 5]
         + 29791 * aGeometrymodifi[a2 + 6]
         + 961 * aGeometrymodifi[a2 + 7]
         - aGeometrymodifi[a2 + 8]
         + 32 * aGeometrymodifi[a2 + 8];
      v3 = a2 + 9;
      return v5 + aGeometrymodifi[v3];
    default:
      v7 = a2 + (v4 >> 1);
      v8 = re::internal::compileTimeHornerHash<35ul>(a1, a2, v7 - 1);
      v3 = a3 - 1;
      a1 = re::internal::compileTimeHornerHash<35ul>(aGeometrymodifi[v7 - 1] - v8 + 32 * v8, v7, a3 - 1);
LABEL_4:
      v5 = 31 * a1;
      return v5 + aGeometrymodifi[v3];
  }
}

uint64_t re::internal::compileTimeHornerHash<33ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v3 = a2;
  v4 = a3 - a2;
  switch(a3 - a2)
  {
    case 0:
      return v4;
    case 1:
      goto LABEL_4;
    case 2:
      v5 = 961 * a1 - aGeometrymodifi_0[a2] + 32 * aGeometrymodifi_0[a2];
      v3 = a2 + 1;
      return v5 + aGeometrymodifi_0[v3];
    case 3:
      v5 = 29791 * a1 + 961 * aGeometrymodifi_0[a2] - aGeometrymodifi_0[a2 + 1] + 32 * aGeometrymodifi_0[a2 + 1];
      v3 = a2 + 2;
      return v5 + aGeometrymodifi_0[v3];
    case 4:
      v5 = 923521 * a1
         + 29791 * aGeometrymodifi_0[a2]
         + 961 * aGeometrymodifi_0[a2 + 1]
         - aGeometrymodifi_0[a2 + 2]
         + 32 * aGeometrymodifi_0[a2 + 2];
      v3 = a2 + 3;
      return v5 + aGeometrymodifi_0[v3];
    case 5:
      v5 = 28629151 * a1
         + 923521 * aGeometrymodifi_0[a2]
         + 29791 * aGeometrymodifi_0[a2 + 1]
         + 961 * aGeometrymodifi_0[a2 + 2]
         - aGeometrymodifi_0[a2 + 3]
         + 32 * aGeometrymodifi_0[a2 + 3];
      v3 = a2 + 4;
      return v5 + aGeometrymodifi_0[v3];
    case 6:
      v5 = 887503681 * a1
         + 28629151 * aGeometrymodifi_0[a2]
         + 923521 * aGeometrymodifi_0[a2 + 1]
         + 29791 * aGeometrymodifi_0[a2 + 2]
         + 961 * aGeometrymodifi_0[a2 + 3]
         - aGeometrymodifi_0[a2 + 4]
         + 32 * aGeometrymodifi_0[a2 + 4];
      v3 = a2 + 5;
      return v5 + aGeometrymodifi_0[v3];
    case 7:
      v5 = 0x667E12CDFLL * a1
         + 887503681 * aGeometrymodifi_0[a2]
         + 28629151 * aGeometrymodifi_0[a2 + 1]
         + 923521 * aGeometrymodifi_0[a2 + 2]
         + 29791 * aGeometrymodifi_0[a2 + 3]
         + 961 * aGeometrymodifi_0[a2 + 4]
         - aGeometrymodifi_0[a2 + 5]
         + 32 * aGeometrymodifi_0[a2 + 5];
      v3 = a2 + 6;
      return v5 + aGeometrymodifi_0[v3];
    case 8:
      v5 = 0xC694446F01 * a1
         + 0x667E12CDFLL * aGeometrymodifi_0[a2]
         + 887503681 * aGeometrymodifi_0[a2 + 1]
         + 28629151 * aGeometrymodifi_0[a2 + 2]
         + 923521 * aGeometrymodifi_0[a2 + 3]
         + 29791 * aGeometrymodifi_0[a2 + 4]
         + 961 * aGeometrymodifi_0[a2 + 5]
         - aGeometrymodifi_0[a2 + 6]
         + 32 * aGeometrymodifi_0[a2 + 6];
      v3 = a2 + 7;
      return v5 + aGeometrymodifi_0[v3];
    case 9:
      v5 = 0x180BF449711FLL * a1
         + 0xC694446F01 * aGeometrymodifi_0[a2]
         + 0x667E12CDFLL * aGeometrymodifi_0[a2 + 1]
         + 887503681 * aGeometrymodifi_0[a2 + 2]
         + 28629151 * aGeometrymodifi_0[a2 + 3]
         + 923521 * aGeometrymodifi_0[a2 + 4]
         + 29791 * aGeometrymodifi_0[a2 + 5]
         + 961 * aGeometrymodifi_0[a2 + 6]
         - aGeometrymodifi_0[a2 + 7]
         + 32 * aGeometrymodifi_0[a2 + 7];
      v3 = a2 + 8;
      return v5 + aGeometrymodifi_0[v3];
    case 10:
      v5 = 0x2E97294E4B2C1 * a1
         + 0x180BF449711FLL * aGeometrymodifi_0[a2]
         + 0xC694446F01 * aGeometrymodifi_0[a2 + 1]
         + 0x667E12CDFLL * aGeometrymodifi_0[a2 + 2]
         + 887503681 * aGeometrymodifi_0[a2 + 3]
         + 28629151 * aGeometrymodifi_0[a2 + 4]
         + 923521 * aGeometrymodifi_0[a2 + 5]
         + 29791 * aGeometrymodifi_0[a2 + 6]
         + 961 * aGeometrymodifi_0[a2 + 7]
         - aGeometrymodifi_0[a2 + 8]
         + 32 * aGeometrymodifi_0[a2 + 8];
      v3 = a2 + 9;
      return v5 + aGeometrymodifi_0[v3];
    default:
      v7 = a2 + (v4 >> 1);
      v8 = re::internal::compileTimeHornerHash<33ul>(a1, a2, v7 - 1);
      v3 = a3 - 1;
      a1 = re::internal::compileTimeHornerHash<33ul>(aGeometrymodifi_0[v7 - 1] - v8 + 32 * v8, v7, a3 - 1);
LABEL_4:
      v5 = 31 * a1;
      return v5 + aGeometrymodifi_0[v3];
  }
}

_QWORD *re::FixedArray<re::TextureRecord>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_DWORD *)result = 0;
      result[1] = 0;
      result += 2;
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)result = 0;
  result[1] = 0;
  return result;
}

unint64_t re::internal::compileTimeHornerHash<17ul>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t result;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v5 = a4;
  result = a5 - a4;
  switch(a5 - a4)
  {
    case 0:
      return result;
    case 1:
      v9 = 31 * a3;
      return v9 + *(char *)(a2 + v5);
    case 2:
      v9 = 961 * a3 - *(char *)(a2 + a4) + 32 * *(char *)(a2 + a4);
      v5 = a4 + 1;
      return v9 + *(char *)(a2 + v5);
    case 3:
      v9 = 29791 * a3 + 961 * *(char *)(a2 + a4) - *(char *)(a2 + a4 + 1) + 32 * *(char *)(a2 + a4 + 1);
      v5 = a4 + 2;
      return v9 + *(char *)(a2 + v5);
    case 4:
      v9 = 923521 * a3
         + 29791 * *(char *)(a2 + a4)
         + 961 * *(char *)(a2 + a4 + 1)
         - *(char *)(a2 + a4 + 2)
         + 32 * *(char *)(a2 + a4 + 2);
      v5 = a4 + 3;
      return v9 + *(char *)(a2 + v5);
    case 5:
      v9 = 28629151 * a3
         + 923521 * *(char *)(a2 + a4)
         + 29791 * *(char *)(a2 + a4 + 1)
         + 961 * *(char *)(a2 + a4 + 2)
         - *(char *)(a2 + a4 + 3)
         + 32 * *(char *)(a2 + a4 + 3);
      v5 = a4 + 4;
      return v9 + *(char *)(a2 + v5);
    case 6:
      v9 = 887503681 * a3
         + 28629151 * *(char *)(a2 + a4)
         + 923521 * *(char *)(a2 + a4 + 1)
         + 29791 * *(char *)(a2 + a4 + 2)
         + 961 * *(char *)(a2 + a4 + 3)
         - *(char *)(a2 + a4 + 4)
         + 32 * *(char *)(a2 + a4 + 4);
      v5 = a4 + 5;
      return v9 + *(char *)(a2 + v5);
    case 7:
      v9 = 0x667E12CDFLL * a3
         + 887503681 * *(char *)(a2 + a4)
         + 28629151 * *(char *)(a2 + a4 + 1)
         + 923521 * *(char *)(a2 + a4 + 2)
         + 29791 * *(char *)(a2 + a4 + 3)
         + 961 * *(char *)(a2 + a4 + 4)
         - *(char *)(a2 + a4 + 5)
         + 32 * *(char *)(a2 + a4 + 5);
      v5 = a4 + 6;
      return v9 + *(char *)(a2 + v5);
    case 8:
      v9 = 0xC694446F01 * a3
         + 0x667E12CDFLL * *(char *)(a2 + a4)
         + 887503681 * *(char *)(a2 + a4 + 1)
         + 28629151 * *(char *)(a2 + a4 + 2)
         + 923521 * *(char *)(a2 + a4 + 3)
         + 29791 * *(char *)(a2 + a4 + 4)
         + 961 * *(char *)(a2 + a4 + 5)
         - *(char *)(a2 + a4 + 6)
         + 32 * *(char *)(a2 + a4 + 6);
      v5 = a4 + 7;
      return v9 + *(char *)(a2 + v5);
    case 9:
      v9 = 0x180BF449711FLL * a3
         + 0xC694446F01 * *(char *)(a2 + a4)
         + 0x667E12CDFLL * *(char *)(a2 + a4 + 1)
         + 887503681 * *(char *)(a2 + a4 + 2)
         + 28629151 * *(char *)(a2 + a4 + 3)
         + 923521 * *(char *)(a2 + a4 + 4)
         + 29791 * *(char *)(a2 + a4 + 5)
         + 961 * *(char *)(a2 + a4 + 6)
         - *(char *)(a2 + a4 + 7)
         + 32 * *(char *)(a2 + a4 + 7);
      v5 = a4 + 8;
      return v9 + *(char *)(a2 + v5);
    case 10:
      v9 = 0x2E97294E4B2C1 * a3
         + 0x180BF449711FLL * *(char *)(a2 + a4)
         + 0xC694446F01 * *(char *)(a2 + a4 + 1)
         + 0x667E12CDFLL * *(char *)(a2 + a4 + 2)
         + 887503681 * *(char *)(a2 + a4 + 3)
         + 28629151 * *(char *)(a2 + a4 + 4)
         + 923521 * *(char *)(a2 + a4 + 5)
         + 29791 * *(char *)(a2 + a4 + 6)
         + 961 * *(char *)(a2 + a4 + 7)
         - *(char *)(a2 + a4 + 8)
         + 32 * *(char *)(a2 + a4 + 8);
      v5 = a4 + 9;
      return v9 + *(char *)(a2 + v5);
    default:
      v11 = a4 + (result >> 1);
      v12 = re::internal::compileTimeHornerHash<17ul>(a1, a2, a3, a4, v11 - 1);
      v5 = a5 - 1;
      v9 = re::internal::compileTimeHornerHash<17ul>(a1, a2, *(char *)(a2 + v11 - 1) + v12 * a1, v11, a5 - 1) * a1;
      return v9 + *(char *)(a2 + v5);
  }
}

_QWORD *re::FixedArray<unsigned char>::init<int>(_QWORD *result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  *result = a2;
  result[1] = a3;
  if (a3)
  {
    v6 = result;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3, 1);
    v6[2] = result;
    if (result)
    {
      v8 = a3 - 1;
      if (a3 != 1)
      {
        do
        {
          *(_BYTE *)result = *a4;
          result = (_QWORD *)((char *)result + 1);
          --v8;
        }
        while (v8);
      }
      *(_BYTE *)result = *a4;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::compileTimeHornerHash<32ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v3 = a2;
  v4 = a3 - a2;
  switch(a3 - a2)
  {
    case 0:
      return v4;
    case 1:
      goto LABEL_4;
    case 2:
      v5 = 961 * a1 - aSurfaceshaderu[a2] + 32 * aSurfaceshaderu[a2];
      v3 = a2 + 1;
      return v5 + aSurfaceshaderu[v3];
    case 3:
      v5 = 29791 * a1 + 961 * aSurfaceshaderu[a2] - aSurfaceshaderu[a2 + 1] + 32 * aSurfaceshaderu[a2 + 1];
      v3 = a2 + 2;
      return v5 + aSurfaceshaderu[v3];
    case 4:
      v5 = 923521 * a1
         + 29791 * aSurfaceshaderu[a2]
         + 961 * aSurfaceshaderu[a2 + 1]
         - aSurfaceshaderu[a2 + 2]
         + 32 * aSurfaceshaderu[a2 + 2];
      v3 = a2 + 3;
      return v5 + aSurfaceshaderu[v3];
    case 5:
      v5 = 28629151 * a1
         + 923521 * aSurfaceshaderu[a2]
         + 29791 * aSurfaceshaderu[a2 + 1]
         + 961 * aSurfaceshaderu[a2 + 2]
         - aSurfaceshaderu[a2 + 3]
         + 32 * aSurfaceshaderu[a2 + 3];
      v3 = a2 + 4;
      return v5 + aSurfaceshaderu[v3];
    case 6:
      v5 = 887503681 * a1
         + 28629151 * aSurfaceshaderu[a2]
         + 923521 * aSurfaceshaderu[a2 + 1]
         + 29791 * aSurfaceshaderu[a2 + 2]
         + 961 * aSurfaceshaderu[a2 + 3]
         - aSurfaceshaderu[a2 + 4]
         + 32 * aSurfaceshaderu[a2 + 4];
      v3 = a2 + 5;
      return v5 + aSurfaceshaderu[v3];
    case 7:
      v5 = 0x667E12CDFLL * a1
         + 887503681 * aSurfaceshaderu[a2]
         + 28629151 * aSurfaceshaderu[a2 + 1]
         + 923521 * aSurfaceshaderu[a2 + 2]
         + 29791 * aSurfaceshaderu[a2 + 3]
         + 961 * aSurfaceshaderu[a2 + 4]
         - aSurfaceshaderu[a2 + 5]
         + 32 * aSurfaceshaderu[a2 + 5];
      v3 = a2 + 6;
      return v5 + aSurfaceshaderu[v3];
    case 8:
      v5 = 0xC694446F01 * a1
         + 0x667E12CDFLL * aSurfaceshaderu[a2]
         + 887503681 * aSurfaceshaderu[a2 + 1]
         + 28629151 * aSurfaceshaderu[a2 + 2]
         + 923521 * aSurfaceshaderu[a2 + 3]
         + 29791 * aSurfaceshaderu[a2 + 4]
         + 961 * aSurfaceshaderu[a2 + 5]
         - aSurfaceshaderu[a2 + 6]
         + 32 * aSurfaceshaderu[a2 + 6];
      v3 = a2 + 7;
      return v5 + aSurfaceshaderu[v3];
    case 9:
      v5 = 0x180BF449711FLL * a1
         + 0xC694446F01 * aSurfaceshaderu[a2]
         + 0x667E12CDFLL * aSurfaceshaderu[a2 + 1]
         + 887503681 * aSurfaceshaderu[a2 + 2]
         + 28629151 * aSurfaceshaderu[a2 + 3]
         + 923521 * aSurfaceshaderu[a2 + 4]
         + 29791 * aSurfaceshaderu[a2 + 5]
         + 961 * aSurfaceshaderu[a2 + 6]
         - aSurfaceshaderu[a2 + 7]
         + 32 * aSurfaceshaderu[a2 + 7];
      v3 = a2 + 8;
      return v5 + aSurfaceshaderu[v3];
    case 10:
      v5 = 0x2E97294E4B2C1 * a1
         + 0x180BF449711FLL * aSurfaceshaderu[a2]
         + 0xC694446F01 * aSurfaceshaderu[a2 + 1]
         + 0x667E12CDFLL * aSurfaceshaderu[a2 + 2]
         + 887503681 * aSurfaceshaderu[a2 + 3]
         + 28629151 * aSurfaceshaderu[a2 + 4]
         + 923521 * aSurfaceshaderu[a2 + 5]
         + 29791 * aSurfaceshaderu[a2 + 6]
         + 961 * aSurfaceshaderu[a2 + 7]
         - aSurfaceshaderu[a2 + 8]
         + 32 * aSurfaceshaderu[a2 + 8];
      v3 = a2 + 9;
      return v5 + aSurfaceshaderu[v3];
    default:
      v7 = a2 + (v4 >> 1);
      v8 = re::internal::compileTimeHornerHash<32ul>(a1, a2, v7 - 1);
      v3 = a3 - 1;
      a1 = re::internal::compileTimeHornerHash<32ul>(aSurfaceshaderu[v7 - 1] - v8 + 32 * v8, v7, a3 - 1);
LABEL_4:
      v5 = 31 * a1;
      return v5 + aSurfaceshaderu[v3];
  }
}

uint64_t re::internal::compileTimeHornerHash<30ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v3 = a2;
  v4 = a3 - a2;
  switch(a3 - a2)
  {
    case 0:
      return v4;
    case 1:
      goto LABEL_4;
    case 2:
      v5 = 961 * a1 - aSurfaceshaderw[a2] + 32 * aSurfaceshaderw[a2];
      v3 = a2 + 1;
      return v5 + aSurfaceshaderw[v3];
    case 3:
      v5 = 29791 * a1 + 961 * aSurfaceshaderw[a2] - aSurfaceshaderw[a2 + 1] + 32 * aSurfaceshaderw[a2 + 1];
      v3 = a2 + 2;
      return v5 + aSurfaceshaderw[v3];
    case 4:
      v5 = 923521 * a1
         + 29791 * aSurfaceshaderw[a2]
         + 961 * aSurfaceshaderw[a2 + 1]
         - aSurfaceshaderw[a2 + 2]
         + 32 * aSurfaceshaderw[a2 + 2];
      v3 = a2 + 3;
      return v5 + aSurfaceshaderw[v3];
    case 5:
      v5 = 28629151 * a1
         + 923521 * aSurfaceshaderw[a2]
         + 29791 * aSurfaceshaderw[a2 + 1]
         + 961 * aSurfaceshaderw[a2 + 2]
         - aSurfaceshaderw[a2 + 3]
         + 32 * aSurfaceshaderw[a2 + 3];
      v3 = a2 + 4;
      return v5 + aSurfaceshaderw[v3];
    case 6:
      v5 = 887503681 * a1
         + 28629151 * aSurfaceshaderw[a2]
         + 923521 * aSurfaceshaderw[a2 + 1]
         + 29791 * aSurfaceshaderw[a2 + 2]
         + 961 * aSurfaceshaderw[a2 + 3]
         - aSurfaceshaderw[a2 + 4]
         + 32 * aSurfaceshaderw[a2 + 4];
      v3 = a2 + 5;
      return v5 + aSurfaceshaderw[v3];
    case 7:
      v5 = 0x667E12CDFLL * a1
         + 887503681 * aSurfaceshaderw[a2]
         + 28629151 * aSurfaceshaderw[a2 + 1]
         + 923521 * aSurfaceshaderw[a2 + 2]
         + 29791 * aSurfaceshaderw[a2 + 3]
         + 961 * aSurfaceshaderw[a2 + 4]
         - aSurfaceshaderw[a2 + 5]
         + 32 * aSurfaceshaderw[a2 + 5];
      v3 = a2 + 6;
      return v5 + aSurfaceshaderw[v3];
    case 8:
      v5 = 0xC694446F01 * a1
         + 0x667E12CDFLL * aSurfaceshaderw[a2]
         + 887503681 * aSurfaceshaderw[a2 + 1]
         + 28629151 * aSurfaceshaderw[a2 + 2]
         + 923521 * aSurfaceshaderw[a2 + 3]
         + 29791 * aSurfaceshaderw[a2 + 4]
         + 961 * aSurfaceshaderw[a2 + 5]
         - aSurfaceshaderw[a2 + 6]
         + 32 * aSurfaceshaderw[a2 + 6];
      v3 = a2 + 7;
      return v5 + aSurfaceshaderw[v3];
    case 9:
      v5 = 0x180BF449711FLL * a1
         + 0xC694446F01 * aSurfaceshaderw[a2]
         + 0x667E12CDFLL * aSurfaceshaderw[a2 + 1]
         + 887503681 * aSurfaceshaderw[a2 + 2]
         + 28629151 * aSurfaceshaderw[a2 + 3]
         + 923521 * aSurfaceshaderw[a2 + 4]
         + 29791 * aSurfaceshaderw[a2 + 5]
         + 961 * aSurfaceshaderw[a2 + 6]
         - aSurfaceshaderw[a2 + 7]
         + 32 * aSurfaceshaderw[a2 + 7];
      v3 = a2 + 8;
      return v5 + aSurfaceshaderw[v3];
    case 10:
      v5 = 0x2E97294E4B2C1 * a1
         + 0x180BF449711FLL * aSurfaceshaderw[a2]
         + 0xC694446F01 * aSurfaceshaderw[a2 + 1]
         + 0x667E12CDFLL * aSurfaceshaderw[a2 + 2]
         + 887503681 * aSurfaceshaderw[a2 + 3]
         + 28629151 * aSurfaceshaderw[a2 + 4]
         + 923521 * aSurfaceshaderw[a2 + 5]
         + 29791 * aSurfaceshaderw[a2 + 6]
         + 961 * aSurfaceshaderw[a2 + 7]
         - aSurfaceshaderw[a2 + 8]
         + 32 * aSurfaceshaderw[a2 + 8];
      v3 = a2 + 9;
      return v5 + aSurfaceshaderw[v3];
    default:
      v7 = a2 + (v4 >> 1);
      v8 = re::internal::compileTimeHornerHash<30ul>(a1, a2, v7 - 1);
      v3 = a3 - 1;
      a1 = re::internal::compileTimeHornerHash<30ul>(aSurfaceshaderw[v7 - 1] - v8 + 32 * v8, v7, a3 - 1);
LABEL_4:
      v5 = 31 * a1;
      return v5 + aSurfaceshaderw[v3];
  }
}

unint64_t re::internal::compileTimeHornerHash<14ul>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t result;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v5 = a4;
  result = a5 - a4;
  switch(a5 - a4)
  {
    case 0:
      return result;
    case 1:
      v9 = 31 * a3;
      return v9 + *(char *)(a2 + v5);
    case 2:
      v9 = 961 * a3 - *(char *)(a2 + a4) + 32 * *(char *)(a2 + a4);
      v5 = a4 + 1;
      return v9 + *(char *)(a2 + v5);
    case 3:
      v9 = 29791 * a3 + 961 * *(char *)(a2 + a4) - *(char *)(a2 + a4 + 1) + 32 * *(char *)(a2 + a4 + 1);
      v5 = a4 + 2;
      return v9 + *(char *)(a2 + v5);
    case 4:
      v9 = 923521 * a3
         + 29791 * *(char *)(a2 + a4)
         + 961 * *(char *)(a2 + a4 + 1)
         - *(char *)(a2 + a4 + 2)
         + 32 * *(char *)(a2 + a4 + 2);
      v5 = a4 + 3;
      return v9 + *(char *)(a2 + v5);
    case 5:
      v9 = 28629151 * a3
         + 923521 * *(char *)(a2 + a4)
         + 29791 * *(char *)(a2 + a4 + 1)
         + 961 * *(char *)(a2 + a4 + 2)
         - *(char *)(a2 + a4 + 3)
         + 32 * *(char *)(a2 + a4 + 3);
      v5 = a4 + 4;
      return v9 + *(char *)(a2 + v5);
    case 6:
      v9 = 887503681 * a3
         + 28629151 * *(char *)(a2 + a4)
         + 923521 * *(char *)(a2 + a4 + 1)
         + 29791 * *(char *)(a2 + a4 + 2)
         + 961 * *(char *)(a2 + a4 + 3)
         - *(char *)(a2 + a4 + 4)
         + 32 * *(char *)(a2 + a4 + 4);
      v5 = a4 + 5;
      return v9 + *(char *)(a2 + v5);
    case 7:
      v9 = 0x667E12CDFLL * a3
         + 887503681 * *(char *)(a2 + a4)
         + 28629151 * *(char *)(a2 + a4 + 1)
         + 923521 * *(char *)(a2 + a4 + 2)
         + 29791 * *(char *)(a2 + a4 + 3)
         + 961 * *(char *)(a2 + a4 + 4)
         - *(char *)(a2 + a4 + 5)
         + 32 * *(char *)(a2 + a4 + 5);
      v5 = a4 + 6;
      return v9 + *(char *)(a2 + v5);
    case 8:
      v9 = 0xC694446F01 * a3
         + 0x667E12CDFLL * *(char *)(a2 + a4)
         + 887503681 * *(char *)(a2 + a4 + 1)
         + 28629151 * *(char *)(a2 + a4 + 2)
         + 923521 * *(char *)(a2 + a4 + 3)
         + 29791 * *(char *)(a2 + a4 + 4)
         + 961 * *(char *)(a2 + a4 + 5)
         - *(char *)(a2 + a4 + 6)
         + 32 * *(char *)(a2 + a4 + 6);
      v5 = a4 + 7;
      return v9 + *(char *)(a2 + v5);
    case 9:
      v9 = 0x180BF449711FLL * a3
         + 0xC694446F01 * *(char *)(a2 + a4)
         + 0x667E12CDFLL * *(char *)(a2 + a4 + 1)
         + 887503681 * *(char *)(a2 + a4 + 2)
         + 28629151 * *(char *)(a2 + a4 + 3)
         + 923521 * *(char *)(a2 + a4 + 4)
         + 29791 * *(char *)(a2 + a4 + 5)
         + 961 * *(char *)(a2 + a4 + 6)
         - *(char *)(a2 + a4 + 7)
         + 32 * *(char *)(a2 + a4 + 7);
      v5 = a4 + 8;
      return v9 + *(char *)(a2 + v5);
    case 10:
      v9 = 0x2E97294E4B2C1 * a3
         + 0x180BF449711FLL * *(char *)(a2 + a4)
         + 0xC694446F01 * *(char *)(a2 + a4 + 1)
         + 0x667E12CDFLL * *(char *)(a2 + a4 + 2)
         + 887503681 * *(char *)(a2 + a4 + 3)
         + 28629151 * *(char *)(a2 + a4 + 4)
         + 923521 * *(char *)(a2 + a4 + 5)
         + 29791 * *(char *)(a2 + a4 + 6)
         + 961 * *(char *)(a2 + a4 + 7)
         - *(char *)(a2 + a4 + 8)
         + 32 * *(char *)(a2 + a4 + 8);
      v5 = a4 + 9;
      return v9 + *(char *)(a2 + v5);
    default:
      v11 = a4 + (result >> 1);
      v12 = re::internal::compileTimeHornerHash<14ul>(a1, a2, a3, a4, v11 - 1);
      v5 = a5 - 1;
      v9 = re::internal::compileTimeHornerHash<14ul>(a1, a2, *(char *)(a2 + v11 - 1) + v12 * a1, v11, a5 - 1) * a1;
      return v9 + *(char *)(a2 + v5);
  }
}

uint64_t re::ProtectionOptionsManager::setAllowedProtectionOptions(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 8) = a2;
  return this;
}

uint64_t re::ProtectionOptionsManager::allowedProtectionOptions(re::ProtectionOptionsManager *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t re::ProtectionOptionsManager::addDesiredProtectionOptions(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 16) |= a2;
  return this;
}

uint64_t re::ProtectionOptionsManager::desiredProtectionOptions(re::ProtectionOptionsManager *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t re::ProtectionOptionsManager::resetDesiredProtectionOptions(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  return this;
}

void re::ProtectionOptionsManager::~ProtectionOptionsManager(re::ProtectionOptionsManager *this)
{
  JUMPOUT(0x2276933B8);
}

unint64_t makeValidInternal(uint64_t a1, id *a2, uint64_t a3, double a4)
{
  unint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;

  result = (unint64_t)*a2;
  if (!*a2 || (*(_DWORD *)a1 | 2) != 2)
    return result;
  if (!*(_DWORD *)(a1 + 4))
    *(_DWORD *)(a1 + 4) = objc_msgSend((id)result, sel_pixelFormat);
  if (*(_DWORD *)(a1 + 12) == -1)
  {
    *(float *)&a4 = fmaxf(*(float *)(a1 + 40) * (float)(unint64_t)objc_msgSend(*a2, sel_width), 0.0);
    v8 = *(_DWORD *)(a1 + 48);
    if (v8 == 2)
    {
      *(float *)&a4 = ceilf(*(float *)&a4);
    }
    else if (v8 == 1)
    {
      *(float *)&a4 = roundf(*(float *)&a4);
    }
    else
    {
      if (v8)
        goto LABEL_13;
      *(float *)&a4 = floorf(*(float *)&a4);
    }
    *(_DWORD *)(a1 + 12) = *(float *)&a4;
  }
LABEL_13:
  if (*(_DWORD *)(a1 + 16) != -1)
    goto LABEL_21;
  *(float *)&a4 = fmaxf(*(float *)(a1 + 44) * (float)(unint64_t)objc_msgSend(*a2, sel_height, a4), 0.0);
  v9 = *(_DWORD *)(a1 + 52);
  if (v9 == 2)
  {
    *(float *)&a4 = ceilf(*(float *)&a4);
  }
  else if (v9 == 1)
  {
    *(float *)&a4 = roundf(*(float *)&a4);
  }
  else
  {
    if (v9)
      goto LABEL_21;
    *(float *)&a4 = floorf(*(float *)&a4);
  }
  *(_DWORD *)(a1 + 16) = *(float *)&a4;
LABEL_21:
  v10 = *(_DWORD *)(a1 + 20);
  if (v10 == -1)
  {
    v10 = objc_msgSend(*a2, sel_sampleCount, a4);
    *(_DWORD *)(a1 + 20) = v10;
  }
  result = *(unsigned int *)(a1 + 24);
  if ((_DWORD)result == -1)
  {
    result = (unint64_t)objc_msgSend(*a2, sel_arrayLength);
    *(_DWORD *)(a1 + 24) = result;
    v10 = *(_DWORD *)(a1 + 20);
  }
  if (v10 < 2)
  {
    if (*(_DWORD *)(a1 + 12) != -1 && *(_DWORD *)(a1 + 16) != -1 && (_DWORD)result != -1)
    {
      result = (unint64_t)objc_msgSend(*a2, sel_textureType);
      *(_DWORD *)(a1 + 8) = result;
    }
    v12 = *(_DWORD *)(a1 + 28);
    if (v12 == -2)
    {
      v11 = 32 - __clz(*(_DWORD *)(a1 + 12));
      v14 = 32 - __clz(*(_DWORD *)(a1 + 16));
      if (v11 <= v14)
        v11 = v14;
    }
    else
    {
      if (v12 != -1)
        goto LABEL_40;
      result = (unint64_t)objc_msgSend(*a2, sel_mipmapLevelCount);
      *(_DWORD *)(a1 + 28) = result;
      v11 = 32 - __clz(*(_DWORD *)(a1 + 12));
      v13 = 32 - __clz(*(_DWORD *)(a1 + 16));
      if (v11 <= v13)
        v11 = v13;
      if (v11 >= result)
        goto LABEL_40;
    }
  }
  else
  {
    v11 = 1;
  }
  *(_DWORD *)(a1 + 28) = v11;
LABEL_40:
  if (*(_DWORD *)(a1 + 32) == -1)
    *(_DWORD *)(a1 + 32) = 0;
  if (*(_QWORD *)(a1 + 88) == -1)
  {
    result = (unint64_t)objc_msgSend(*a2, sel_protectionOptions);
    *(_QWORD *)(a1 + 88) = result & a3;
  }
  return result;
}

void re::RenderGraphTargetDescription::makeValid(uint64_t a1, id *a2, uint64_t a3)
{
  id v5;
  double v6;
  id v7;

  v5 = *a2;
  v7 = v5;
  makeValidInternal(a1, &v7, a3, v6);
  if (v5)

}

uint64_t re::RenderGraphTargetDescription::copySetProperties(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;

  if (!*(_DWORD *)(result + 4))
    *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
  v2 = *(_DWORD *)(result + 12);
  if (v2 == -1)
  {
    v2 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(result + 12) = v2;
  }
  v3 = *(_DWORD *)(result + 16);
  if (v3 == -1)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(result + 16) = v3;
  }
  v4 = *(_DWORD *)(result + 20);
  if (v4 == -1)
  {
    v4 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(result + 20) = v4;
  }
  v5 = *(_DWORD *)(result + 24);
  if (v5 == -1)
  {
    v5 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(result + 24) = v5;
  }
  if (v2 != -1 && v3 != -1 && v4 != -1 && v5 != -1)
  {
    if (v4 >= 2 && v5 > 1)
    {
      v6 = 8;
LABEL_29:
      *(_DWORD *)(result + 8) = v6;
      goto LABEL_30;
    }
    if (v5 < 2)
    {
      if (v5 == 1)
      {
        if (v4 > 1)
        {
          v6 = 4;
          goto LABEL_29;
        }
        if (v3 >= 2 && v2 >= 2 && v4 == 1)
        {
          v6 = 2;
          goto LABEL_29;
        }
      }
    }
    else if (v4 == 1)
    {
      v6 = 3;
      goto LABEL_29;
    }
    v6 = *(_DWORD *)(a2 + 8);
    goto LABEL_29;
  }
LABEL_30:
  v7 = *(_DWORD *)(result + 28);
  if (v7 == -1)
  {
    v7 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(result + 28) = v7;
  }
  if (*(_DWORD *)(result + 32) == -1)
    *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  if (*(_QWORD *)(result + 88) == -1)
    *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
  if (v2 != -1 && v7 == -2 && v3 != -1)
  {
    v8 = 32 - __clz(v2);
    v9 = 32 - __clz(v3);
    if (v8 <= v9)
      v8 = v9;
    *(_DWORD *)(result + 28) = v8;
  }
  return result;
}

_QWORD *re::RenderGraphTargetDescription::valuesToString@<X0>(re::RenderGraphTargetDescription *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v7;
  char v8;

  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  re::DynamicString::setCapacity(a2, 0);
  v4 = a2[1];
  if ((v4 & 1) != 0)
  {
    a2[1] = 1;
    v5 = (_BYTE *)a2[2];
  }
  else
  {
    *((_BYTE *)a2 + 8) = v4 & 1;
    v5 = (char *)a2 + 9;
  }
  *v5 = 0;
  re::DynamicString::setCapacity(a2, 0x400uLL);
  re::DynamicString::format((re::DynamicString *)"type: %d format: %d textureType: %d width: %u height: %u sampleCount: %u arrayLength: %u mipLevelCount: %u                                     tonemapInPlace: %u widthMultiplier: %f heightMultiplier: %f widthRoundingMode: %d heightRoundingMode: %d                                     initialUsageFlags: %d initialOptions: %d protectionOptions: %llu isMemoryless: %d", (re::DynamicString *)&v7, *(unsigned int *)this, *((unsigned int *)this + 1), *((unsigned int *)this + 2), *((unsigned int *)this + 3), *((unsigned int *)this + 4), *((unsigned int *)this + 5), *((unsigned int *)this + 6), *((unsigned int *)this + 7), *((unsigned int *)this + 8), *((float *)this + 10), *((float *)this + 11), *((unsigned int *)this + 12), *((unsigned int *)this + 13), *((unsigned int *)this + 16),
    *((unsigned int *)this + 17),
    *((_QWORD *)this + 11),
    (*((_DWORD *)this + 17) & 0x70) == 48);
  re::DynamicString::operator=((re::DynamicString *)a2, (re::DynamicString *)&v7);
  if (v7 && (v8 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v7 + 40))();
  return re::DynamicString::trimExcess(a2);
}

uint64_t re::RenderGraphTargetHandle::introspectionSerialize(uint64_t a1, uint64_t a2, _QWORD *a3, re::DynamicString *a4)
{
  uint64_t v6;
  char v7;

  re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)&v6, *a3);
  re::DynamicString::operator=(a4, (re::DynamicString *)&v6);
  if (v6 && (v7 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v6 + 40))();
  return 1;
}

uint64_t re::RenderGraphTargetHandle::introspectionDeserialize(int a1, int a2, int a3, _QWORD *a4, char *__str)
{
  char *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  char *v10;
  int v11;
  char *__endptr;

  v5 = __str;
  do
  {
    v7 = *v5++;
    v6 = v7;
    if (!v7)
    {
      __endptr = 0;
      *a4 = strtoull(__str, &__endptr, 10);
      return 1;
    }
  }
  while ((v6 & 0x80) == 0 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v6 + 60) & 0x400) != 0);
  v8 = *__str;
  if (*__str)
  {
    v9 = __str[1];
    if (v9)
    {
      v10 = __str + 2;
      do
      {
        v8 = 31 * v8 + v9;
        v11 = *v10++;
        v9 = v11;
      }
      while (v11);
    }
    v8 &= ~0x8000000000000000;
  }
  *a4 = v8;
  return 1;
}

uint64_t re::RenderGraphTargetHandle::introspectionDeepCopy(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _OWORD *a5)
{
  *a5 = *a4;
  return 1;
}

void *re::introspect_RenderGraphTargetDimensionRoundingMode(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  uint64_t v17;
  re::IntrospectionBasic *v18;
  uint64_t v19[2];
  __int128 v20;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Floor";
      re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "Round";
      qword_2558291C8 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = 2;
      *(_QWORD *)(v17 + 16) = "Ceil";
      qword_2558291D0 = v17;
    }
  }
  if ((v4 & 1) == 0
  {
    v18 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::info, "RenderGraphTargetDimensionRoundingMode", 4, 4, 1, 1);
    *(_QWORD *)v18 = &off_24ED7D9E8;
    *((_QWORD *)v18 + 8) = &re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::enumTable;
    *((_DWORD *)v18 + 4) = 9;
  }
  if (v2)
  {
    if ((re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::isInitialized & 1) != 0)
      return &re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    v5 = re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    if ((v5 & 1) != 0)
      return &re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::info;
    }
  }
  re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::info, a2);
  v19[0] = 0xE1B9E1AD2F7284E8;
  v19[1] = (uint64_t)"RenderGraphTargetDimensionRoundingMode";
  xmmword_255829200 = v20;
  re::StringID::destroyString((re::StringID *)v19);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::introspect_RenderGraphTargetDimensionRoundingMode(BOOL)::info;
}

void *re::introspect_RenderGraphTargetHandle(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  char v4;
  re *v5;
  std::__shared_mutex_base *v6;
  re *v7;
  std::__shared_mutex_base *v8;
  re::IntrospectionBasic *v10;
  _QWORD v11[2];
  __int128 v12;

  v2 = (int)this;
  {
    v10 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_RenderGraphTargetHandle(BOOL)::info, "RenderGraphTargetHandle", 16, 8, 0, 0);
    *(_QWORD *)v10 = &off_24ED7DA28;
    *((_QWORD *)v10 + 8) = re::internal::defaultConstruct<re::RenderGraphTargetHandle>;
    *((_QWORD *)v10 + 9) = re::RenderGraphTargetHandle::introspectionSerialize;
    *((_QWORD *)v10 + 10) = re::RenderGraphTargetHandle::introspectionDeserialize;
    *((_QWORD *)v10 + 11) = re::RenderGraphTargetHandle::introspectionDeepCopy;
    *((_QWORD *)v10 + 12) = 0;
    *((_QWORD *)v10 + 13) = 0;
    *((_DWORD *)v10 + 4) = 11;
  }
  if (v2)
  {
    if ((re::introspect_RenderGraphTargetHandle(BOOL)::isInitialized & 1) != 0)
      return &re::introspect_RenderGraphTargetHandle(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
    v4 = re::introspect_RenderGraphTargetHandle(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
    if ((v4 & 1) != 0)
      return &re::introspect_RenderGraphTargetHandle(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
    if ((re::introspect_RenderGraphTargetHandle(BOOL)::isInitialized & 1) != 0)
    {
LABEL_8:
      v8 = re::introspectionSharedMutex(v7);
      std::__shared_mutex_base::unlock(v8);
      return &re::introspect_RenderGraphTargetHandle(BOOL)::info;
    }
  }
  re::introspect_RenderGraphTargetHandle(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_RenderGraphTargetHandle(BOOL)::info, a2);
  v11[0] = 0xAF79EE31A5FB40E2;
  v11[1] = "RenderGraphTargetHandle";
  xmmword_255829258 = v12;
  re::StringID::destroyString((re::StringID *)v11);
  if ((v2 & 1) == 0)
    goto LABEL_8;
  return &re::introspect_RenderGraphTargetHandle(BOOL)::info;
}

double re::internal::defaultConstruct<re::RenderGraphTargetHandle>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double result;

  *a3 = 0;
  result = NAN;
  a3[1] = -1;
  return result;
}

double re::internal::defaultConstructV2<re::RenderGraphTargetHandle>(_QWORD *a1)
{
  double result;

  *a1 = 0;
  result = NAN;
  a1[1] = -1;
  return result;
}

void textureDescFromTargetDesc(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t TextureCompressionType;
  id v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  re::mtl::makeDefaultDevice(&v12);
  v4 = *(unsigned int *)(a1 + 64);
  v5 = *(int *)(a1 + 4);
  v10 = v5;
  v11 = v4;
  v9 = 0;
  TextureCompressionType = re::mtl::getTextureCompressionType(&v12, &v9, &v10, &v11);
  v7 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  *a2 = v7;
  if ((objc_msgSend(v7, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v7, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v7, sel_setCompressionType_, TextureCompressionType);
  }
  objc_msgSend(v7, sel_setPixelFormat_, v5);
  objc_msgSend(v7, sel_setWidth_, *(unsigned int *)(a1 + 12));
  objc_msgSend(v7, sel_setHeight_, *(unsigned int *)(a1 + 16));
  objc_msgSend(v7, sel_setTextureType_, *(int *)(a1 + 8));
  if (*(_DWORD *)(a1 + 20) >= 2u)
    objc_msgSend(v7, sel_setSampleCount_);
  if (*(_DWORD *)(a1 + 24) >= 2u)
    objc_msgSend(v7, sel_setArrayLength_);
  if (*(_DWORD *)(a1 + 28) != -1)
    objc_msgSend(v7, sel_setMipmapLevelCount_);
  objc_msgSend(v7, sel_setUsage_, v4);
  v8 = *(_DWORD *)(a1 + 68);
  if (v8 == 0xFFFF)
    v8 = 0;
  objc_msgSend(v7, sel_setResourceOptions_, v8);
  objc_msgSend(v7, sel_setProtectionOptions_, *(_QWORD *)(a1 + 88));

}

void re::RenderGraphCachingErrorCategoryImpl::~RenderGraphCachingErrorCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x2276933B8);
}

const char *re::RenderGraphCachingErrorCategoryImpl::name(re::RenderGraphCachingErrorCategoryImpl *this)
{
  return "RERenderGraph caching error";
}

_QWORD *re::RenderGraphCachingErrorCategoryImpl::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v3;

  if (a1 > 2999)
  {
    switch(a1)
    {
      case 3000:
        v3 = "Used an incompatible buffer feature";
        break;
      case 3001:
        v3 = "Created a buffer outside of a provide() callback";
        break;
      case 3002:
        v3 = "Registered an external buffer inside of a provide() callback";
        break;
      case 3003:
        v3 = "Accessed an input buffer outside of a provide() callback";
        break;
      default:
        if (a1 == 4000)
        {
          v3 = "Created an unsupported node";
        }
        else if (a1 == 4001)
        {
          v3 = "Called an unsupported node function";
        }
        else
        {
LABEL_21:
          v3 = "Unknown RERenderGraph error";
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 2000:
        v3 = "Used an incompatible target feature";
        break;
      case 2001:
        v3 = "Created a target outside of a provide() callback";
        break;
      case 2002:
        v3 = "Registered an external texture inside of a provide() callback";
        break;
      case 2003:
        v3 = "Accessed an input target outside of a provide() callback";
        break;
      default:
        if (a1 == 1000)
        {
          v3 = "Used an incompatible graph feature";
        }
        else
        {
          if (a1 != 1001)
            goto LABEL_21;
          v3 = "Created a graph outside of a provide() callback";
        }
        break;
    }
  }
  return std::string::basic_string[abi:nn180100]<0>(a2, v3);
}

Class re::getVFXRESceneClass(re *this)
{
  Class Class;
  unsigned __int8 v2;
  NSObject *v3;
  uint8_t v5[16];

  Class = (Class)qword_254118D90;
  if (!qword_254118D90)
  {
    if (qword_254118DD8 != -1)
      dispatch_once(&qword_254118DD8, &__block_literal_global_514);
    v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_373);
    if ((v2 & 1) != 0)
    {
      Class = objc_getClass("VFXREScene");
      if (!Class)
      {
        v3 = *re::graphicsLogObjects(0);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v5 = 0;
          _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Unable to find class VFXREScene", v5, 2u);
        }
      }
      qword_254118D90 = (uint64_t)Class;
    }
    else
    {
      return 0;
    }
  }
  return Class;
}

Class re::getVFXSceneClass(re *this)
{
  Class Class;
  unsigned __int8 v2;
  NSObject *v3;
  uint8_t v5[16];

  Class = (Class)qword_254118D98;
  if (!qword_254118D98)
  {
    if (qword_254118DD8 != -1)
      dispatch_once(&qword_254118DD8, &__block_literal_global_514);
    v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_373);
    if ((v2 & 1) != 0)
    {
      Class = objc_getClass("VFX.VFXScene");
      if (!Class)
      {
        v3 = *re::graphicsLogObjects(0);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v5 = 0;
          _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Unable to find class VFX.VFXScene", v5, 2u);
        }
      }
      qword_254118D98 = (uint64_t)Class;
    }
    else
    {
      return 0;
    }
  }
  return Class;
}

Class re::getVFXREDrawCallClass(re *this)
{
  Class Class;
  unsigned __int8 v2;
  NSObject *v3;
  uint8_t v5[16];

  Class = (Class)qword_254118DA0;
  if (!qword_254118DA0)
  {
    if (qword_254118DD8 != -1)
      dispatch_once(&qword_254118DD8, &__block_literal_global_514);
    v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_373);
    if ((v2 & 1) != 0)
    {
      Class = objc_getClass("VFXREDrawCall");
      if (!Class)
      {
        v3 = *re::graphicsLogObjects(0);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v5 = 0;
          _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Unable to find class VFXREDrawCall", v5, 2u);
        }
      }
      qword_254118DA0 = (uint64_t)Class;
    }
    else
    {
      return 0;
    }
  }
  return Class;
}

Class re::getVFXMemorySerializationClass(re *this)
{
  Class Class;
  unsigned __int8 v2;
  NSObject *v3;
  uint8_t v5[16];

  Class = (Class)qword_254118DA8;
  if (!qword_254118DA8)
  {
    if (qword_254118DD8 != -1)
      dispatch_once(&qword_254118DD8, &__block_literal_global_514);
    v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_373);
    if ((v2 & 1) != 0)
    {
      Class = objc_getClass("VFXMemorySerialization");
      if (!Class)
      {
        v3 = *re::graphicsLogObjects(0);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v5 = 0;
          _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Unable to find class VFXMemorySerialization", v5, 2u);
        }
      }
      qword_254118DA8 = (uint64_t)Class;
    }
    else
    {
      return 0;
    }
  }
  return Class;
}

Class re::getVFXSceneLoadOptionsClass(re *this)
{
  Class Class;
  unsigned __int8 v2;
  NSObject *v3;
  uint8_t v5[16];

  Class = (Class)qword_254118DB0;
  if (!qword_254118DB0)
  {
    if (qword_254118DD8 != -1)
      dispatch_once(&qword_254118DD8, &__block_literal_global_514);
    v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_373);
    if ((v2 & 1) != 0)
    {
      Class = objc_getClass("VFXSceneLoadOptions");
      if (!Class)
      {
        v3 = *re::graphicsLogObjects(0);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v5 = 0;
          _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Unable to find class VFXSceneLoadOptions", v5, 2u);
        }
      }
      qword_254118DB0 = (uint64_t)Class;
    }
    else
    {
      return 0;
    }
  }
  return Class;
}

void *re::getVFXREForEachDrawCallFct(re *this)
{
  void *v1;
  unsigned __int8 v2;
  NSObject *v3;
  uint8_t v5[16];

  v1 = (void *)qword_254118DB8;
  if (!qword_254118DB8)
  {
    if (qword_254118DD8 != -1)
      dispatch_once(&qword_254118DD8, &__block_literal_global_514);
    v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_373);
    if ((v2 & 1) != 0)
    {
      v1 = dlsym((void *)qword_254118DC0, "VFXREForEachDrawCall");
      if (!v1)
      {
        v3 = *re::graphicsLogObjects(0);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v5 = 0;
          _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Unable to find function VFXREForEachDrawCall", v5, 2u);
        }
      }
      qword_254118DB8 = (uint64_t)v1;
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t re::loadVFXAssetsFramework(re *this)
{
  unsigned __int8 v1;

  if (qword_254118DE0 != -1)
    dispatch_once(&qword_254118DE0, &__block_literal_global_517);
  v1 = atomic_load(byte_254118D89);
  return v1 & 1;
}

uint64_t re::BufferTableReference::getBuffer(re::BufferTableReference *this, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  if (v2 > a2)
    return *(_QWORD *)(*(_QWORD *)this + 16 * a2);
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v2);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::EncoderState::setCullMode(uint64_t result, unsigned int a2, uint64_t a3)
{
  char v3;
  uint64_t v4;

  v3 = a2;
  v4 = result;
  if ((*(_WORD *)result & 1) == 0 || *(unsigned __int8 *)(result + 2) != a2)
  {
    result = (*(uint64_t (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(a3 + 8) + 64))(**(_QWORD **)(a3 + 8), sel_setCullMode_, a2);
    *(_BYTE *)(v4 + 2) = v3;
    *(_WORD *)v4 |= 1u;
  }
  return result;
}

uint64_t re::EncoderState::setTriangleFillMode(uint64_t result, unsigned int a2, uint64_t a3)
{
  char v3;
  uint64_t v4;

  v3 = a2;
  v4 = result;
  if ((*(_WORD *)result & 2) == 0 || *(unsigned __int8 *)(result + 3) != a2)
  {
    result = (*(uint64_t (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(a3 + 8) + 168))(**(_QWORD **)(a3 + 8), sel_setTriangleFillMode_, a2);
    *(_BYTE *)(v4 + 3) = v3;
    *(_WORD *)v4 |= 2u;
  }
  return result;
}

uint64_t re::EncoderState::setStencilReferenceValues(uint64_t this, uint64_t a2, uint64_t a3, RenderCommandEncoder *a4)
{
  char v4;
  char v5;
  uint64_t v6;

  v4 = a3;
  v5 = a2;
  v6 = this;
  if ((*(_WORD *)this & 4) == 0
    || *(unsigned __int8 *)(this + 4) != (_DWORD)a2
    || *(unsigned __int8 *)(this + 5) != (_DWORD)a3)
  {
    this = (*((uint64_t (**)(_QWORD, char *, uint64_t, uint64_t))a4->var0 + 16))(*(_QWORD *)a4->var0, sel_setStencilFrontReferenceValue_backReferenceValue_, a2, a3);
    *(_BYTE *)(v6 + 4) = v5;
    *(_BYTE *)(v6 + 5) = v4;
    *(_WORD *)v6 |= 4u;
  }
  return this;
}

void **re::EncoderState::setDepthStencilState(void **result, void **a2, uint64_t a3)
{
  void **v5;
  void *v6;

  v5 = result;
  v6 = *a2;
  if ((*(_WORD *)result & 0x80) == 0 || result[3] != v6)
  {
    (*(void (**)(_QWORD, char *, void *))(*(_QWORD *)(a3 + 8) + 112))(**(_QWORD **)(a3 + 8), sel_setDepthStencilState_, v6);
    result = NS::SharedPtr<MTL::Texture>::operator=(v5 + 3, a2);
    *(_WORD *)v5 |= 0x80u;
  }
  return result;
}

void **re::EncoderState::setRenderPipelineState(void **result, void **a2, uint64_t a3)
{
  void **v5;
  void *v6;

  v5 = result;
  v6 = *a2;
  if ((*(_WORD *)result & 0x100) == 0 || result[4] != v6)
  {
    (*(void (**)(_QWORD, char *, void *))(*(_QWORD *)(a3 + 8) + 56))(**(_QWORD **)(a3 + 8), sel_setRenderPipelineState_, v6);
    result = NS::SharedPtr<MTL::Texture>::operator=(v5 + 4, a2);
    *(_WORD *)v5 |= 0x100u;
  }
  return result;
}

void ___ZL13VFXLoadBridgev_block_invoke()
{
  NSObject *v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  unsigned __int8 v2;
  NSObject *v3;
  uint8_t v4[16];
  uint8_t buf[16];

  if (dlsym((void *)0xFFFFFFFFFFFFFFFELL, "VFXREVersionCheckBridgeVersion"))
  {
    qword_254118DC0 = -2;
  }
  else if (!qword_254118DC0)
  {
    qword_254118DC0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/VFX.framework/VFX", 1);
    if (!qword_254118DC0)
    {
      v0 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_224FE9000, v0, OS_LOG_TYPE_ERROR, "[VFX] VFX.framework failed loading", buf, 2u);
      }
    }
  }
  if (qword_254118DE0 != -1)
    dispatch_once(&qword_254118DE0, &__block_literal_global_517);
  atomic_load(byte_254118D89);
  if (qword_254118DC0)
  {
    v1 = (uint64_t (*)(uint64_t, uint64_t))dlsym((void *)qword_254118DC0, "VFXREVersionCheckBridgeVersion");
    if (v1)
      v1 = (uint64_t (*)(uint64_t, uint64_t))v1(0x2540BE40BLL, 0xFFFFLL);
    atomic_store(v1, (unsigned __int8 *)&_MergedGlobals_373);
    v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_373);
    if ((v2 & 1) == 0)
    {
      v3 = *re::graphicsLogObjects((re *)v1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v4 = 0;
        _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "[VFX] Version missmatch between RE bridge and VFX framework", v4, 2u);
      }
    }
  }
}

void ___ZL14_loadVFXAssetsv_block_invoke()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[16];

  v0 = -2;
  if (dlsym((void *)0xFFFFFFFFFFFFFFFELL, "__vfx_get_effect_class_comAppleVfxConfetti"))
  {
    qword_254118DE8 = -2;
  }
  else
  {
    v0 = qword_254118DE8;
    if (!qword_254118DE8)
    {
      v0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/VFXAssets.framework/VFXAssets", 1);
      qword_254118DE8 = v0;
      if (!v0)
      {
        v1 = *re::graphicsLogObjects(0);
        if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v2 = 0;
          _os_log_error_impl(&dword_224FE9000, v1, OS_LOG_TYPE_ERROR, "[VFX] VFXAssets.framework failed loading", v2, 2u);
        }
        v0 = qword_254118DE8;
      }
    }
  }
  atomic_store(v0 != 0, byte_254118D89);
}

void re::makeMaterialBuilderErr(__CFString *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  if ((*(_QWORD *)(a2 + 8) & 1) != 0)
    v3 = *(_QWORD *)(a2 + 16);
  else
    v3 = a2 + 9;
  re::WrappedError::make((re::WrappedError *)CFSTR("REMaterialBuilderErrorDomain"), a1, v3, a3);
}

uint64_t re::ShaderParameterTableBuilder::addConstant(uint64_t a1, const re::DynamicString *a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  uint64_t i;
  uint64_t result;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  int v15;
  char v16;

  v8 = (_QWORD *)(a1 + 96);
  for (i = *(_QWORD *)(a1 + 112); (i & 3) != 0; i = *(_QWORD *)(a1 + 112))
  {
    v16 = 0;
    re::DynamicArray<unsigned char>::add(v8, &v16);
  }
  LOWORD(v15) = i;
  BYTE2(v15) = *(_QWORD *)(a3 + 8);
  HIBYTE(v15) = a4;
  result = re::HashTable<re::DynamicString,re::ConstantLocation,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(a1 + 176, a2, &v15);
  v11 = *(_QWORD *)(a3 + 8);
  if (v11)
  {
    v12 = *(char **)a3;
    do
    {
      v13 = *v12++;
      v14 = v13;
      result = (uint64_t)re::DynamicArray<unsigned char>::add(v8, &v14);
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::ConstantLocation,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(uint64_t a1, const re::DynamicString *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,re::ConstantLocation,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v10 + 56 * v9;
  return v12 + 48;
}

uint64_t re::ShaderParameterTableBuilder::addOriginalColorConstant(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char *v4;
  uint64_t v5;
  char v6;
  unsigned __int8 *v7;
  int v8;
  __int128 v10;
  char v11;
  char v12;
  uint64_t v13;

  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    v4 = *(char **)(a2 + 16);
  else
    v4 = (char *)(a2 + 9);
  if (v4)
  {
    v5 = *v4;
    if (*v4)
    {
      v6 = v4[1];
      if (v6)
      {
        v7 = (unsigned __int8 *)(v4 + 2);
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *v7++;
          v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v13 = v5;
  v10 = *(_OWORD *)a3;
  v11 = *(_BYTE *)(a3 + 16);
  v12 = a4;
  return re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(a1 + 272, &v13, &v10);
}

uint64_t re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsCopy(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 40 * v13;
    return v12 + 16;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 40 * v10 + 8) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 40 * v10) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 40 * v10;
  return v12 + 16;
}

uint64_t re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned char>(uint64_t a1, re::DynamicString *a2, unsigned __int8 *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<unsigned char>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v10 + 56 * v9;
  return v12 + 48;
}

id re::DynamicArray<re::BufferSlice>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  id result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::BufferSlice>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (_QWORD *)(*((_QWORD *)this + 4) + 16 * v4);
  result = *(id *)a2;
  *v5 = result;
  v5[1] = *(_QWORD *)(a2 + 8);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

BOOL re::TextureParameterTableBuilder::bindTextureToSampler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int *v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v38;
  uint64_t v39;
  char v40;
  _BYTE v41[7];
  char *v42;
  uint64_t v43;
  int v44;
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  unint64_t v49;
  __int16 v50;
  unint64_t v51;
  _OWORD v52[5];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v8 = a1 + 224;
  v9 = (unsigned int *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a1 + 224, a3);
  if (v9)
  {
    re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)&v39, a4);
    v10 = v41;
    if ((v40 & 1) != 0)
      v10 = v42;
    if (v10)
    {
      v11 = *v10;
      if (v11)
      {
        if ((v40 & 1) != 0)
          v12 = v42 + 1;
        else
          v12 = &v41[1];
        v13 = *v12;
        if (*v12)
        {
          v14 = v12 + 1;
          do
          {
            v11 = 31 * v11 + v13;
            v15 = *v14++;
            v13 = v15;
          }
          while (v15);
        }
        v16 = v11 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v16 = 0;
      }
    }
    else
    {
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    v19 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v8, (uint64_t)&v39);
    v20 = re::Hash<re::DynamicString>::operator()((uint64_t)v52, a2);
    v21 = v20;
    if (*(_QWORD *)(a1 + 272))
    {
      v22 = v20 % *(unsigned int *)(a1 + 296);
      v23 = *(unsigned int *)(*(_QWORD *)(a1 + 280) + 4 * v22);
      if ((_DWORD)v23 != 0x7FFFFFFF)
      {
        v38 = v19;
        v24 = *(_QWORD *)(a1 + 288);
        while (!re::DynamicString::operator==(v24 + 56 * v23 + 16, a2))
        {
          v23 = *(_DWORD *)(v24 + 56 * v23 + 8) & 0x7FFFFFFF;
          if (v23 == 0x7FFFFFFF)
          {
            v19 = v38;
            goto LABEL_25;
          }
        }
        *(_QWORD *)(v24 + 56 * v23 + 48) = 0;
        *(_QWORD *)(*(_QWORD *)(a1 + 288) + 56 * v23 + 48) = v16;
        v19 = v38;
LABEL_31:
        ++*(_DWORD *)(a1 + 312);
        if (v19)
        {
LABEL_43:
          if (v39 && (v40 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v39 + 40))();
          return v9 != 0;
        }
        v29 = *v9;
        LODWORD(v52[0]) = *(_QWORD *)(a1 + 152);
        v30 = re::Hash<re::DynamicString>::operator()((uint64_t)&v44, (uint64_t)&v39);
        v31 = v30;
        if (*(_QWORD *)(a1 + 224))
        {
          v32 = v30 % *(unsigned int *)(a1 + 248);
          v33 = *(unsigned int *)(*(_QWORD *)(a1 + 232) + 4 * v32);
          if ((_DWORD)v33 != 0x7FFFFFFF)
          {
            v34 = *(_QWORD *)(a1 + 240);
            while (!re::DynamicString::operator==(v34 + 56 * v33 + 16, (uint64_t)&v39))
            {
              v33 = *(_DWORD *)(v34 + 56 * v33 + 8) & 0x7FFFFFFF;
              if (v33 == 0x7FFFFFFF)
                goto LABEL_39;
            }
            goto LABEL_40;
          }
        }
        else
        {
          LODWORD(v32) = 0;
        }
LABEL_39:
        re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(v8, v32, v31, (re::DynamicString *)&v39, v52);
        ++*(_DWORD *)(a1 + 264);
LABEL_40:
        v35 = *(_QWORD *)(a1 + 152);
        if (v35 <= v29)
        {
          v43 = 0;
          memset(v52, 0, sizeof(v52));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v44 = 136315906;
          v45 = "operator[]";
          v46 = 1024;
          v47 = 789;
          v48 = 2048;
          v49 = v29;
          v50 = 2048;
          v51 = v35;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_QWORD *)&v52[0] = *(id *)(*(_QWORD *)(a1 + 168) + 8 * v29);
        re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(a1 + 136), (id *)v52);
        if (*(_QWORD *)&v52[0])

        goto LABEL_43;
      }
    }
    else
    {
      LODWORD(v22) = 0;
    }
LABEL_25:
    v25 = *(unsigned int *)(a1 + 308);
    if ((_DWORD)v25 == 0x7FFFFFFF)
    {
      v25 = *(unsigned int *)(a1 + 304);
      v26 = v25;
      if ((_DWORD)v25 == *(_DWORD *)(a1 + 296))
      {
        re::HashTable<re::DynamicString,re::WeakStringID,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1 + 272, 2 * *(_DWORD *)(a1 + 300));
        LODWORD(v22) = v21 % *(unsigned int *)(a1 + 296);
        v26 = *(_DWORD *)(a1 + 304);
      }
      *(_DWORD *)(a1 + 304) = v26 + 1;
      v27 = *(_QWORD *)(a1 + 288);
      v28 = *(_DWORD *)(v27 + 56 * v25 + 8);
    }
    else
    {
      v27 = *(_QWORD *)(a1 + 288);
      v28 = *(_DWORD *)(v27 + 56 * v25 + 8);
      *(_DWORD *)(a1 + 308) = v28 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v27 + 56 * v25 + 8) = v28 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 288) + 56 * v25 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 288) + 56 * v25 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 280) + 4 * v22);
    *(_QWORD *)(*(_QWORD *)(a1 + 288) + 56 * v25) = v21;
    re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 288) + 56 * v25 + 16), (const re::DynamicString *)a2);
    *(_QWORD *)(*(_QWORD *)(a1 + 288) + 56 * v25 + 48) = v16;
    *(_DWORD *)(*(_QWORD *)(a1 + 280) + 4 * v22) = v25;
    ++*(_DWORD *)(a1 + 300);
    goto LABEL_31;
  }
  v17 = *re::graphicsLogObjects(0);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    if ((*(_BYTE *)(a2 + 8) & 1) != 0)
      v18 = *(_QWORD *)(a2 + 16);
    else
      v18 = a2 + 9;
    if ((*(_BYTE *)(a3 + 8) & 1) != 0)
      v36 = *(_QWORD *)(a3 + 16);
    else
      v36 = a3 + 9;
    LODWORD(v52[0]) = 136315394;
    *(_QWORD *)((char *)v52 + 4) = v18;
    WORD6(v52[0]) = 2080;
    *(_QWORD *)((char *)v52 + 14) = v36;
    _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEFAULT, "Attempting to bind texture \"%s\" to non-existent sampler \"%s\", skipping binding.", (uint8_t *)v52, 0x16u);
  }
  return v9 != 0;
}

uint64_t re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace<unsigned int &>(uint64_t a1, re::DynamicString *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_DWORD *)(v10 + 56 * v9 + 48) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 56 * v9;
  return v12 + 48;
}

void re::MaterialParameterTableBuilder::buildFromParameterBlockArray(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _anonymous_namespace_ *v18;
  _QWORD *v19;
  _anonymous_namespace_ *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int16 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int16 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int16 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int16 v44;
  uint64_t v45;
  size_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int16 v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int16 v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const re::TextureHandle *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned __int16 v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unsigned __int16 v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned __int16 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  _anonymous_namespace_ *v100;
  re::Allocator *v102;
  id v103;
  uint64_t v104;
  os_unfair_lock_s *v105[2];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  const char *v112;
  __int16 v113;
  int v114;
  __int16 v115;
  unint64_t v116;
  __int16 v117;
  unint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;

  v102 = (re::Allocator *)a1;
  v124 = *MEMORY[0x24BDAC8D0];
  v98 = a3;
  v99 = a2;
  if (a3)
  {
    v4 = a3;
    a3 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 8 * v4;
    v16 = a2;
    do
    {
      v17 = (_QWORD *)*v16++;
      a3 += v17[58];
      v5 += v17[66];
      v6 += v17[74];
      v7 += v17[82];
      v8 += v17[5];
      v9 += v17[26];
      v10 += v17[15];
      v11 += v17[10];
      v12 += v17[20];
      v13 += v17[90];
      v14 += v17[98];
      v15 -= 8;
    }
    while (v15);
  }
  else
  {
    v14 = 0;
    v13 = 0;
    v12 = 0;
    v11 = 0;
    v10 = 0;
    LODWORD(v9) = 0;
    v8 = 0;
    v7 = 0;
    v6 = 0;
    v5 = 0;
  }
  v100 = (_anonymous_namespace_ *)(a4 + 24);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init((_QWORD *)(a4 + 24), a1, a3);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init((_QWORD *)(a4 + 88), (uint64_t)v102, v5);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init((_QWORD *)(a4 + 552), (uint64_t)v102, v6);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init((_QWORD *)(a4 + 616), (uint64_t)v102, v7);
  re::ConstantTable::init((re::ConstantTable *)(a4 + 152), v102, v8, v9);
  v18 = (_anonymous_namespace_ *)(a4 + 264);
  re::BufferTable::init((re::BufferTable *)(a4 + 264), v102, v10);
  *(_QWORD *)(a4 + 752) = v102;
  re::DynamicArray<re::TextureViews<re::TextureHandle>>::setCapacity((_QWORD *)(a4 + 752), v11);
  ++*(_DWORD *)(a4 + 776);
  re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::init((_QWORD *)(a4 + 688), (uint64_t)v102, v11);
  *(_QWORD *)(a4 + 856) = v102;
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)(a4 + 856), v12);
  ++*(_DWORD *)(a4 + 880);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::init((_QWORD *)(a4 + 792), (uint64_t)v102, v12);
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init((_QWORD *)(a4 + 904), (uint64_t)v102, v13);
  re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init((_QWORD *)(a4 + 968), (uint64_t)v102, v14);
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
    goto LABEL_117;
  while (1)
  {
    re::MaterialParameterTable::initPassTechniqueMappings((re::MaterialParameterTable *)a4, v102, 1, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
    v19 = v99;
    if (!v98)
      break;
    v20 = (_anonymous_namespace_ *)(a4 + 200);
    v97 = (_QWORD *)(a4 + 1096);
    v102 = (re::Allocator *)0x8040201008040201;
    v98 = (uint64_t)&v99[v98];
    while (1)
    {
      v99 = v19;
      v21 = *v19;
      if (*(_QWORD *)(*v19 + 464))
      {
        v119 = (unint64_t)(v21 + 440);
        v22 = *(_QWORD *)(v21 + 456);
        if (v22 >= 0x10)
        {
          v23 = 0;
          v24 = *(_QWORD *)(v21 + 440);
          v25 = v22 >> 4;
          while (1)
          {
            v26 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v24 + v23)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
            *((_QWORD *)&v119 + 1) = (unsigned __int16)~v26;
            if (v26 != 0xFFFF)
              break;
            v23 += 16;
            if (!--v25)
              goto LABEL_17;
          }
          v27 = __clz(__rbit64((unsigned __int16)~v26)) + v23;
          *(_QWORD *)&v120 = v27;
          if (v27 != -1)
          {
            do
            {
              re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace(v100, (uint64_t *)(*(_QWORD *)(v119 + 8) + 40 * v27), *(_QWORD *)(v119 + 8) + 40 * v27 + 8);
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v119);
              v27 = v120;
            }
            while ((_QWORD)v120 != -1);
          }
        }
      }
LABEL_17:
      if (*(_QWORD *)(v21 + 528))
      {
        v119 = (unint64_t)(v21 + 504);
        v28 = *(_QWORD *)(v21 + 520);
        if (v28 >= 0x10)
        {
          v29 = 0;
          v30 = *(_QWORD *)(v21 + 504);
          v31 = v28 >> 4;
          while (1)
          {
            v32 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v30 + v29)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
            *((_QWORD *)&v119 + 1) = (unsigned __int16)~v32;
            if (v32 != 0xFFFF)
              break;
            v29 += 16;
            if (!--v31)
              goto LABEL_25;
          }
          v33 = __clz(__rbit64((unsigned __int16)~v32)) + v29;
          *(_QWORD *)&v120 = v33;
          if (v33 != -1)
          {
            do
            {
              re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace((_anonymous_namespace_ *)(a4 + 88), (uint64_t *)(*(_QWORD *)(v119 + 8) + 40 * v33), *(_QWORD *)(v119 + 8) + 40 * v33 + 8);
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v119);
              v33 = v120;
            }
            while ((_QWORD)v120 != -1);
          }
        }
      }
LABEL_25:
      if (*(_QWORD *)(v21 + 592))
      {
        v119 = (unint64_t)(v21 + 568);
        v34 = *(_QWORD *)(v21 + 584);
        if (v34 >= 0x10)
        {
          v35 = 0;
          v36 = *(_QWORD *)(v21 + 568);
          v37 = v34 >> 4;
          while (1)
          {
            v38 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v36 + v35)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
            *((_QWORD *)&v119 + 1) = (unsigned __int16)~v38;
            if (v38 != 0xFFFF)
              break;
            v35 += 16;
            if (!--v37)
              goto LABEL_33;
          }
          v39 = __clz(__rbit64((unsigned __int16)~v38)) + v35;
          *(_QWORD *)&v120 = v39;
          if (v39 != -1)
          {
            do
            {
              re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace((_anonymous_namespace_ *)(a4 + 552), (uint64_t *)(*(_QWORD *)(v119 + 8) + 40 * v39), *(_QWORD *)(v119 + 8) + 40 * v39 + 8);
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v119);
              v39 = v120;
            }
            while ((_QWORD)v120 != -1);
          }
        }
      }
LABEL_33:
      if (*(_QWORD *)(v21 + 656))
      {
        v119 = (unint64_t)(v21 + 632);
        v40 = *(_QWORD *)(v21 + 648);
        if (v40 >= 0x10)
        {
          v41 = 0;
          v42 = *(_QWORD *)(v21 + 632);
          v43 = v40 >> 4;
          while (1)
          {
            v44 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v42 + v41)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
            *((_QWORD *)&v119 + 1) = (unsigned __int16)~v44;
            if (v44 != 0xFFFF)
              break;
            v41 += 16;
            if (!--v43)
              goto LABEL_41;
          }
          v45 = __clz(__rbit64((unsigned __int16)~v44)) + v41;
          *(_QWORD *)&v120 = v45;
          if (v45 != -1)
          {
            do
            {
              re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace((_anonymous_namespace_ *)(a4 + 616), (uint64_t *)(*(_QWORD *)(v119 + 8) + 40 * v45), *(_QWORD *)(v119 + 8) + 40 * v45 + 8);
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v119);
              v45 = v120;
            }
            while ((_QWORD)v120 != -1);
          }
        }
      }
LABEL_41:
      v46 = *(_QWORD *)(v21 + 40);
      if (v46)
      {
        memcpy(*(void **)(a4 + 192), *(const void **)(v21 + 56), v46);
        v119 = (unint64_t)(v21 + 184);
        v47 = *(_QWORD *)(v21 + 200);
        if (v47 >= 0x10)
        {
          v48 = 0;
          v49 = *(_QWORD *)(v21 + 184);
          v50 = v47 >> 4;
          while (1)
          {
            v51 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v49 + v48)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
            *((_QWORD *)&v119 + 1) = (unsigned __int16)~v51;
            if (v51 != 0xFFFF)
              break;
            v48 += 16;
            if (!--v50)
              goto LABEL_52;
          }
          v52 = __clz(__rbit64((unsigned __int16)~v51)) + v48;
          *(_QWORD *)&v120 = v52;
          if (v52 != -1)
          {
            do
            {
              v53 = *(_QWORD *)(v119 + 8) + 16 * v52;
              v54 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v20, (_QWORD *)v53);
              if (v54 == -1)
              {
                re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::internalAdd(v20, (_QWORD *)v53, (_DWORD *)(v53 + 8));
              }
              else
              {
                v55 = v54;
                re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::updateKvpsHash((uint64_t)v20, *(_QWORD *)(a4 + 208) + 16 * v54);
                *(_DWORD *)(*(_QWORD *)(a4 + 208) + 16 * v55 + 8) = *(_DWORD *)(v53 + 8);
                re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::updateKvpsHash((uint64_t)v20, *(_QWORD *)(a4 + 208) + 16 * v55);
              }
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v119);
              v52 = v120;
            }
            while ((_QWORD)v120 != -1);
          }
        }
      }
LABEL_52:
      if (*(_QWORD *)(v21 + 120))
      {
        v107 = v21 + 248;
        v108 = 0;
        v56 = *(_QWORD *)(v21 + 264);
        if (v56 >= 0x10)
        {
          v57 = 0;
          v58 = *(_QWORD *)(v21 + 248);
          v59 = v56 >> 4;
          while (1)
          {
            v60 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v58 + v57)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
            v108 = (unsigned __int16)~v60;
            if (v60 != 0xFFFF)
              break;
            v57 += 16;
            if (!--v59)
              goto LABEL_63;
          }
          v61 = __clz(__rbit64((unsigned __int16)~v60)) + v57;
          v109 = v61;
          if (v61 != -1)
          {
            while (1)
            {
              v62 = *(_QWORD *)(v107 + 8) + 16 * v61;
              v63 = (unsigned int *)(v62 + 8);
              v64 = *(_DWORD *)(v62 + 8);
              LOBYTE(v119) = v64;
              re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v18, (_QWORD *)v62, (char *)&v119);
              if (*(_DWORD *)(a4 + 544) <= v64)
                *(_DWORD *)(a4 + 544) = v64 + 1;
              v65 = *v63;
              v66 = *(_QWORD *)(v21 + 120);
              if (v66 <= v65)
                break;
              re::BufferTable::setBuffer((uint64_t)v18, v65, *(_QWORD *)(v21 + 136) + 16 * v65);
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v107);
              v61 = v109;
              if (v109 == -1)
                goto LABEL_63;
            }
            v110 = 0;
            v122 = 0u;
            v123 = 0u;
            v120 = 0u;
            v121 = 0u;
            v119 = 0u;
            v74 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v111 = 136315906;
            v112 = "operator[]";
            v113 = 1024;
            v114 = 789;
            v115 = 2048;
            v116 = v65;
            v117 = 2048;
            v118 = v66;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_115;
          }
        }
      }
LABEL_63:
      if (*(_QWORD *)(v21 + 80))
      {
        v107 = v21 + 312;
        v108 = 0;
        v67 = *(_QWORD *)(v21 + 328);
        if (v67 >= 0x10)
        {
          v68 = 0;
          v69 = *(_QWORD *)(v21 + 312);
          v70 = v67 >> 4;
          while (1)
          {
            v71 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v69 + v68)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
            v108 = (unsigned __int16)~v71;
            if (v71 != 0xFFFF)
              break;
            v68 += 16;
            if (!--v70)
              goto LABEL_75;
          }
          v72 = __clz(__rbit64((unsigned __int16)~v71)) + v68;
          v109 = v72;
          if (v72 != -1)
          {
            while (1)
            {
              v73 = *(_QWORD *)(v107 + 8) + 16 * v72;
              v74 = *(unsigned int *)(v73 + 8);
              v66 = *(_QWORD *)(v21 + 80);
              if (v66 <= v74)
                break;
              v75 = (const re::TextureHandle *)(*(_QWORD *)(v21 + 96) + 16 * v74);
              if (*((_QWORD *)v75 + 1) && *(_QWORD *)v75)
              {
                v106 = *(_QWORD *)v73;
                re::TextureHandle::TextureHandle((re::TextureHandle *)v105, v75);
                re::TextureHandleTable::setTexture((_QWORD *)(a4 + 680), &v106, v105);
                re::TextureHandle::invalidate((re::TextureHandle *)v105);
                v106 = 0;
              }
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v107);
              v72 = v109;
              if (v109 == -1)
                goto LABEL_75;
            }
LABEL_115:
            v110 = 0;
            v122 = 0u;
            v123 = 0u;
            v120 = 0u;
            v121 = 0u;
            v119 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v111 = 136315906;
            v112 = "operator[]";
            v113 = 1024;
            v114 = 789;
            v115 = 2048;
            v116 = v74;
            v117 = 2048;
            v118 = v66;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_116;
          }
        }
      }
LABEL_75:
      if (*(_QWORD *)(v21 + 160))
      {
        v107 = v21 + 376;
        v108 = 0;
        v76 = *(_QWORD *)(v21 + 392);
        if (v76 >= 0x10)
        {
          v77 = 0;
          v78 = *(_QWORD *)(v21 + 376);
          v79 = v76 >> 4;
          while (1)
          {
            v80 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v78 + v77)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
            v108 = (unsigned __int16)~v80;
            if (v80 != 0xFFFF)
              break;
            v77 += 16;
            if (!--v79)
              goto LABEL_86;
          }
          v81 = __clz(__rbit64((unsigned __int16)~v80)) + v77;
          v109 = v81;
          if (v81 != -1)
            break;
        }
      }
LABEL_86:
      if (*(_QWORD *)(v21 + 720))
      {
        v119 = (unint64_t)(v21 + 696);
        v83 = *(_QWORD *)(v21 + 712);
        if (v83 >= 0x10)
        {
          v84 = 0;
          v85 = *(_QWORD *)(v21 + 696);
          v86 = v83 >> 4;
          while (1)
          {
            v87 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v85 + v84)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
            *((_QWORD *)&v119 + 1) = (unsigned __int16)~v87;
            if (v87 != 0xFFFF)
              break;
            v84 += 16;
            if (!--v86)
              goto LABEL_94;
          }
          v88 = __clz(__rbit64((unsigned __int16)~v87)) + v84;
          *(_QWORD *)&v120 = v88;
          if (v88 != -1)
          {
            do
            {
              re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::addNew((_anonymous_namespace_ *)(a4 + 904), (_QWORD *)(*(_QWORD *)(v119 + 8) + 16 * v88), (uint64_t *)(*(_QWORD *)(v119 + 8) + 16 * v88 + 8));
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v119);
              v88 = v120;
            }
            while ((_QWORD)v120 != -1);
          }
        }
      }
LABEL_94:
      if (*(_QWORD *)(v21 + 784))
      {
        v119 = (unint64_t)(v21 + 760);
        v89 = *(_QWORD *)(v21 + 776);
        if (v89 >= 0x10)
        {
          v90 = 0;
          v91 = *(_QWORD *)(v21 + 760);
          v92 = v89 >> 4;
          while (1)
          {
            v93 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v91 + v90)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
            *((_QWORD *)&v119 + 1) = (unsigned __int16)~v93;
            if (v93 != 0xFFFF)
              break;
            v90 += 16;
            if (!--v92)
              goto LABEL_102;
          }
          v94 = __clz(__rbit64((unsigned __int16)~v93)) + v90;
          *(_QWORD *)&v120 = v94;
          if (v94 != -1)
          {
            do
            {
              re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)(a4 + 968), (_QWORD *)(*(_QWORD *)(v119 + 8) + 16 * v94), (_DWORD *)(*(_QWORD *)(v119 + 8) + 16 * v94 + 8));
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v119);
              v94 = v120;
            }
            while ((_QWORD)v120 != -1);
          }
        }
      }
LABEL_102:
      if (*(_DWORD *)(v21 + 916))
        re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(a4 + 1032, v21 + 888);
      if (*(_BYTE *)(v21 + 936))
      {
        v95 = *(_QWORD *)(v21 + 937);
        if (!*(_BYTE *)(a4 + 1080))
          *(_BYTE *)(a4 + 1080) = 1;
        *(_QWORD *)(a4 + 1081) = v95;
      }
      if (*(_BYTE *)(v21 + 948))
      {
        *(_QWORD *)((char *)&v119 + 3) = *(_QWORD *)(v21 + 952);
        *(_DWORD *)((char *)&v119 + 11) = *(_DWORD *)(v21 + 960);
        if (*(_BYTE *)(a4 + 1092))
        {
          v96 = *(_QWORD *)(v21 + 952);
          *(_DWORD *)(a4 + 1104) = *(_DWORD *)(v21 + 960);
          *v97 = v96;
        }
        else
        {
          *(_BYTE *)(a4 + 1092) = 1;
          *v97 = *(_QWORD *)((char *)&v119 + 3);
          *(_DWORD *)(a4 + 1104) = *(_DWORD *)((char *)&v119 + 11);
        }
      }
      v19 = v99 + 1;
      if (v99 + 1 == (_QWORD *)v98)
        return;
    }
    while (1)
    {
      v82 = *(_QWORD *)(v107 + 8) + 16 * v81;
      v104 = *(_QWORD *)v82;
      v74 = *(unsigned int *)(v82 + 8);
      v66 = *(_QWORD *)(v21 + 160);
      if (v66 <= v74)
        break;
      v103 = *(id *)(*(_QWORD *)(v21 + 176) + 8 * v74);
      re::SamplerTable::setSampler((_QWORD *)(a4 + 792), &v104, &v103);
      if (v103)
      {

        v103 = 0;
      }
      v104 = 0;
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v107);
      v81 = v109;
      if (v109 == -1)
        goto LABEL_86;
    }
LABEL_116:
    v110 = 0;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v119 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v111 = 136315906;
    v112 = "operator[]";
    v113 = 1024;
    v114 = 789;
    v115 = 2048;
    v116 = v74;
    v117 = 2048;
    v118 = v66;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_117:
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  }
}

_QWORD *re::ConstantTable::init(re::ConstantTable *this, re::Allocator *a2, unint64_t a3, unsigned int a4)
{
  char *v7;

  *((_QWORD *)this + 1) = a2;
  v7 = (char *)this + 8;
  re::DynamicArray<BOOL>::setCapacity((_QWORD *)this + 1, a3);
  ++*((_DWORD *)v7 + 6);
  re::DynamicArray<unsigned char>::resizeUninitialized(v7, a3);
  return re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::init((_QWORD *)v7 + 5, (uint64_t)a2, a4);
}

void re::BufferTable::init(re::BufferTable *this, re::Allocator *a2, unint64_t a3)
{
  re::BufferTable *v5;
  char *v6;

  v5 = this;
  *((_QWORD *)this + 8) = a2;
  v6 = (char *)this + 64;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)this + 8, a3);
  ++*((_DWORD *)v5 + 22);
  re::DynamicArray<re::RenderGraphNodeDataPointer>::resize((uint64_t)v6, a3);
  re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::init((uint64_t)v5 + 144, (uint64_t)a2, a3);
  re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::resize((uint64_t)v5 + 144, a3);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::init(v5, (uint64_t)a2, a3);
  *((_QWORD *)v5 + 25) = a2;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)v5 + 25, a3);
  ++*((_DWORD *)v5 + 56);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((_QWORD *)v5 + 25, a3);
  *((_QWORD *)v5 + 30) = a2;
  v5 = (re::BufferTable *)((char *)v5 + 240);
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v5, a3);
  ++*((_DWORD *)v5 + 6);
  re::DynamicArray<unsigned long>::resize((uint64_t)v5, a3);
}

uint64_t re::BufferTable::setBuffer(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v6;

  if (*(_DWORD *)(a1 + 280) <= a2)
    *(_DWORD *)(a1 + 280) = a2 + 1;
  re::BufferTable::setBufferRef((void **)a1, a2, (void **)a3);
  v6 = (uint64_t *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1 + 144, a2);
  re::BufferTable::setBufferView((re::BufferTable *)a1, a2, *v6, *(_QWORD *)(a3 + 8));
  return re::BufferTable::setBufferIndirectResources((re::BufferTable *)a1, a2, 0, 0);
}

uint64_t re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::addNew(_anonymous_namespace_ *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t result;

  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (result == -1)
    return re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::internalAdd(a1, a2, a3);
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew(_anonymous_namespace_ *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t result;

  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (result == -1)
    return re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::internalAdd(a1, a2, a3);
  return result;
}

uint64_t re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(a1, v4, v5);
      re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

void re::MaterialParameterTableBuilder::build(re::MaterialParameterTableBuilder *this, re::Allocator *a2, const re::MaterialParameterBlock *a3, re::MaterialParameterTable *a4)
{
  const re::MaterialParameterBlock *v4;
  re::Allocator *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int16 v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int16 v36;
  uint64_t v37;
  uint64_t v38;
  const re::TextureHandle *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int16 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int16 v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int16 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  _anonymous_namespace_ *v65;
  _anonymous_namespace_ *v66;
  _anonymous_namespace_ *v67;
  id v68;
  uint64_t v69;
  os_unfair_lock_s *v70[2];
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  char *v74;
  uint64_t v75;
  uint64_t i;
  uint64_t v77;
  _BYTE v78[18];
  __int16 v79;
  unint64_t v80;
  __int16 v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v4 = a3;
  v6 = this;
  v88 = *MEMORY[0x24BDAC8D0];
  *(_WORD *)((char *)a3 + 1121) = 0;
  v7 = (const re::MaterialParameterBlock *)((char *)a3 + 24);
  v64 = (uint64_t *)((char *)a2 + 440);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init((_QWORD *)a3 + 3, (uint64_t)this, *((unsigned int *)a2 + 116));
  v8 = (const re::MaterialParameterBlock *)((char *)v4 + 88);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init((_QWORD *)v4 + 11, (uint64_t)v6, *((unsigned int *)a2 + 132));
  v9 = (const re::MaterialParameterBlock *)((char *)v4 + 552);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init((_QWORD *)v4 + 69, (uint64_t)v6, *((unsigned int *)a2 + 148));
  v10 = (const re::MaterialParameterBlock *)((char *)v4 + 616);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init((_QWORD *)v4 + 77, (uint64_t)v6, *((unsigned int *)a2 + 164));
  re::ConstantTable::init((const re::MaterialParameterBlock *)((char *)v4 + 152), v6, *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 26));
  v11 = (const re::MaterialParameterBlock *)((char *)v4 + 264);
  re::BufferTable::init((const re::MaterialParameterBlock *)((char *)v4 + 264), v6, *((_QWORD *)a2 + 15));
  v12 = *((_QWORD *)a2 + 10);
  *((_QWORD *)v4 + 94) = v6;
  re::DynamicArray<re::TextureViews<re::TextureHandle>>::setCapacity((_QWORD *)v4 + 94, v12);
  ++*((_DWORD *)v4 + 194);
  re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::init((_QWORD *)v4 + 86, (uint64_t)v6, v12);
  v13 = *((_QWORD *)a2 + 20);
  *((_QWORD *)v4 + 107) = v6;
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)v4 + 107, v13);
  ++*((_DWORD *)v4 + 220);
  v65 = (const re::MaterialParameterBlock *)((char *)v4 + 792);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::init((_QWORD *)v4 + 99, (uint64_t)v6, v13);
  v66 = (const re::MaterialParameterBlock *)((char *)v4 + 904);
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init((_QWORD *)v4 + 113, (uint64_t)v6, *((_QWORD *)a2 + 90));
  v67 = (const re::MaterialParameterBlock *)((char *)v4 + 968);
  re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init((_QWORD *)v4 + 121, (uint64_t)v6, *((_QWORD *)a2 + 98));
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
    goto LABEL_86;
  while (1)
  {
    re::MaterialParameterTable::initPassTechniqueMappings(v4, v6, 1, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
    if (v7 != (_anonymous_namespace_ *)v64 && *((_QWORD *)a2 + 58))
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy(v7, v64);
    if (v8 != (re::Allocator *)((char *)a2 + 504) && *((_QWORD *)a2 + 66))
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy(v8, (uint64_t *)a2 + 63);
    if (v9 != (re::Allocator *)((char *)a2 + 568) && *((_QWORD *)a2 + 74))
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy(v9, (uint64_t *)a2 + 71);
    v8 = v65;
    if (v10 != (re::Allocator *)((char *)a2 + 632) && *((_QWORD *)a2 + 82))
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy(v10, (uint64_t *)a2 + 79);
    v14 = *((_QWORD *)a2 + 5);
    v9 = v66;
    v10 = v67;
    if (v14)
    {
      memcpy(*((void **)v4 + 24), *((const void **)a2 + 7), v14);
      v83 = (unint64_t)a2 + 184;
      v15 = *((_QWORD *)a2 + 25);
      if (v15 >= 0x10)
      {
        v16 = 0;
        v17 = *((_QWORD *)a2 + 23);
        v18 = v15 >> 4;
        while (1)
        {
          v19 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v17 + v16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
          *((_QWORD *)&v83 + 1) = (unsigned __int16)~v19;
          if (v19 != 0xFFFF)
            break;
          v16 += 16;
          if (!--v18)
            goto LABEL_22;
        }
        v20 = __clz(__rbit64((unsigned __int16)~v19)) + v16;
        *(_QWORD *)&v84 = v20;
        if (v20 != -1)
        {
          do
          {
            v21 = *(_QWORD *)(v83 + 8) + 16 * v20;
            *(_QWORD *)v78 = *(_QWORD *)v21;
            *(_DWORD *)&v78[8] = *(_DWORD *)(v21 + 8);
            re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::addNew((const re::MaterialParameterBlock *)((char *)v4 + 200), v78, &v78[8]);
            re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v83);
            v20 = v84;
          }
          while ((_QWORD)v84 != -1);
        }
      }
    }
LABEL_22:
    v6 = (re::Allocator *)&v83;
    if (*((_QWORD *)a2 + 15))
    {
      v74 = (char *)a2 + 248;
      v75 = 0;
      v22 = *((_QWORD *)a2 + 33);
      if (v22 >= 0x10)
      {
        v23 = 0;
        v24 = *((_QWORD *)a2 + 31);
        v25 = v22 >> 4;
        while (1)
        {
          v26 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v24 + v23)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
          v75 = (unsigned __int16)~v26;
          if (v26 != 0xFFFF)
            break;
          v23 += 16;
          if (!--v25)
            goto LABEL_33;
        }
        v27 = __clz(__rbit64((unsigned __int16)~v26)) + v23;
        i = v27;
        if (v27 != -1)
        {
          while (1)
          {
            v28 = *((_QWORD *)v74 + 1) + 16 * v27;
            v72 = *(_QWORD *)v28;
            v29 = *(_DWORD *)(v28 + 8);
            v73 = v29;
            LOBYTE(v83) = v29;
            re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v11, &v72, (char *)&v83);
            if (*((_DWORD *)v4 + 136) <= v29)
              *((_DWORD *)v4 + 136) = v29 + 1;
            v30 = v73;
            v31 = *((_QWORD *)a2 + 15);
            if (v31 <= v73)
              break;
            re::BufferTable::setBuffer((uint64_t)v11, v73, *((_QWORD *)a2 + 17) + 16 * v73);
            re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v74);
            v27 = i;
            if (i == -1)
              goto LABEL_33;
          }
          v77 = 0;
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v83 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v78 = 136315906;
          *(_QWORD *)&v78[4] = "operator[]";
          *(_WORD *)&v78[12] = 1024;
          *(_DWORD *)&v78[14] = 797;
          v79 = 2048;
          v80 = v30;
          v81 = 2048;
          v82 = v31;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_84;
        }
      }
    }
LABEL_33:
    if (!*((_QWORD *)a2 + 10))
      break;
    v74 = (char *)a2 + 312;
    v75 = 0;
    v32 = *((_QWORD *)a2 + 41);
    if (v32 < 0x10)
      break;
    v33 = 0;
    v30 = (unint64_t)v4 + 680;
    v34 = *((_QWORD *)a2 + 39);
    v35 = v32 >> 4;
    while (1)
    {
      v36 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v34 + v33)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v75 = (unsigned __int16)~v36;
      if (v36 != 0xFFFF)
        break;
      v33 += 16;
      if (!--v35)
        goto LABEL_45;
    }
    v37 = __clz(__rbit64((unsigned __int16)~v36)) + v33;
    i = v37;
    if (v37 == -1)
      break;
    while (1)
    {
      v38 = *((_QWORD *)v74 + 1) + 16 * v37;
      v31 = *(unsigned int *)(v38 + 8);
      v11 = (_anonymous_namespace_ *)*((_QWORD *)a2 + 10);
      if ((unint64_t)v11 <= v31)
        break;
      v39 = (const re::TextureHandle *)(*((_QWORD *)a2 + 12) + 16 * v31);
      if (*((_QWORD *)v39 + 1) && *(_QWORD *)v39)
      {
        v71 = *(_QWORD *)v38;
        re::TextureHandle::TextureHandle((re::TextureHandle *)v70, v39);
        re::TextureHandleTable::setTexture((_QWORD *)v4 + 85, &v71, v70);
        re::TextureHandle::invalidate((re::TextureHandle *)v70);
        v71 = 0;
      }
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v74);
      v37 = i;
      if (i == -1)
        goto LABEL_45;
    }
LABEL_84:
    v72 = 0;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v83 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v78 = 136315906;
    *(_QWORD *)&v78[4] = "operator[]";
    *(_WORD *)&v78[12] = 1024;
    *(_DWORD *)&v78[14] = 797;
    v79 = 2048;
    v80 = v31;
    v81 = 2048;
    v82 = (unint64_t)v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_85:
    v72 = 0;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v83 = 0u;
    v4 = (const re::MaterialParameterBlock *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v78 = 136315906;
    *(_QWORD *)&v78[4] = "operator[]";
    *(_WORD *)&v78[12] = 1024;
    *(_DWORD *)&v78[14] = 797;
    v79 = 2048;
    v80 = v30;
    v81 = 2048;
    v82 = v31;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_86:
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  }
LABEL_45:
  if (*((_QWORD *)a2 + 20))
  {
    v74 = (char *)a2 + 376;
    v75 = 0;
    v40 = *((_QWORD *)a2 + 49);
    if (v40 >= 0x10)
    {
      v41 = 0;
      v42 = *((_QWORD *)a2 + 47);
      v43 = v40 >> 4;
      while (1)
      {
        v44 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v42 + v41)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
        v75 = (unsigned __int16)~v44;
        if (v44 != 0xFFFF)
          break;
        v41 += 16;
        if (!--v43)
          goto LABEL_56;
      }
      v45 = __clz(__rbit64((unsigned __int16)~v44)) + v41;
      for (i = v45; i != -1; v45 = i)
      {
        v46 = *((_QWORD *)v74 + 1) + 16 * v45;
        v30 = *(unsigned int *)(v46 + 8);
        v69 = *(_QWORD *)v46;
        v31 = *((_QWORD *)a2 + 20);
        if (v31 <= v30)
          goto LABEL_85;
        v68 = *(id *)(*((_QWORD *)a2 + 22) + 8 * v30);
        re::SamplerTable::setSampler(v65, &v69, &v68);
        if (v68)
        {

          v68 = 0;
        }
        v69 = 0;
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v74);
      }
    }
  }
LABEL_56:
  if (*((_QWORD *)a2 + 90))
  {
    *(_QWORD *)&v83 = (char *)a2 + 696;
    v47 = *((_QWORD *)a2 + 89);
    if (v47 >= 0x10)
    {
      v48 = 0;
      v49 = *((_QWORD *)a2 + 87);
      v50 = v47 >> 4;
      while (1)
      {
        v51 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v49 + v48)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
        *((_QWORD *)&v83 + 1) = (unsigned __int16)~v51;
        if (v51 != 0xFFFF)
          break;
        v48 += 16;
        if (!--v50)
          goto LABEL_64;
      }
      v52 = __clz(__rbit64((unsigned __int16)~v51)) + v48;
      *(_QWORD *)&v84 = v52;
      if (v52 != -1)
      {
        do
        {
          v53 = (_QWORD *)(*(_QWORD *)(v83 + 8) + 16 * v52);
          *(_QWORD *)v78 = *v53;
          *(_QWORD *)&v78[8] = v53[1];
          re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::addNew(v66, v78, (uint64_t *)&v78[8]);
          re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v83);
          v52 = v84;
        }
        while ((_QWORD)v84 != -1);
      }
    }
  }
LABEL_64:
  if (*((_QWORD *)a2 + 98))
  {
    *(_QWORD *)&v83 = (char *)a2 + 760;
    v54 = *((_QWORD *)a2 + 97);
    if (v54 >= 0x10)
    {
      v55 = 0;
      v56 = *((_QWORD *)a2 + 95);
      v57 = v54 >> 4;
      while (1)
      {
        v58 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v56 + v55)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
        *((_QWORD *)&v83 + 1) = (unsigned __int16)~v58;
        if (v58 != 0xFFFF)
          break;
        v55 += 16;
        if (!--v57)
          goto LABEL_72;
      }
      v59 = __clz(__rbit64((unsigned __int16)~v58)) + v55;
      *(_QWORD *)&v84 = v59;
      if (v59 != -1)
      {
        do
        {
          v60 = *(_QWORD *)(v83 + 8) + 16 * v59;
          *(_QWORD *)v78 = *(_QWORD *)v60;
          *(_DWORD *)&v78[8] = *(_DWORD *)(v60 + 8);
          re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew(v67, v78, &v78[8]);
          re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v83);
          v59 = v84;
        }
        while ((_QWORD)v84 != -1);
      }
    }
  }
LABEL_72:
  if (*((_DWORD *)a2 + 229))
    re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=((uint64_t)v4 + 1032, (uint64_t)a2 + 888);
  if (*((_BYTE *)a2 + 936))
  {
    v61 = *(_QWORD *)((char *)a2 + 937);
    if (!*((_BYTE *)v4 + 1080))
      *((_BYTE *)v4 + 1080) = 1;
    *(_QWORD *)((char *)v4 + 1081) = v61;
  }
  if (*((_BYTE *)a2 + 948))
  {
    *(_QWORD *)((char *)&v83 + 3) = *((_QWORD *)a2 + 119);
    *(_DWORD *)((char *)&v83 + 11) = *((_DWORD *)a2 + 240);
    v62 = (_QWORD *)((char *)v4 + 1096);
    if (*((_BYTE *)v4 + 1092))
    {
      v63 = *((_QWORD *)a2 + 119);
      *((_DWORD *)v4 + 276) = *((_DWORD *)a2 + 240);
      *v62 = v63;
    }
    else
    {
      *((_BYTE *)v4 + 1092) = 1;
      *v62 = *(_QWORD *)((char *)&v83 + 3);
      *((_DWORD *)v4 + 276) = *(_DWORD *)((char *)&v83 + 11);
    }
  }
}

uint64_t re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::addNew(_anonymous_namespace_ *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t result;

  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (result == -1)
    return re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::internalAdd(a1, a2, a3);
  return result;
}

void re::ShaderParameterTableBuilder::build(re::ShaderParameterTableBuilder *this, void **a2)
{
  re::ShaderParameterTableBuilder *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  _anonymous_namespace_ *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  char v49;
  unsigned __int8 *v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  char v65;
  unsigned __int8 *v66;
  int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  _BYTE v75[12];
  __int16 v76;
  int v77;
  __int16 v78;
  unint64_t v79;
  __int16 v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v3 = this;
  v87 = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned int *)this + 8);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*((_QWORD *)this + 2) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 22;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    do
    {
      v9 = *((_QWORD *)v3 + 2);
      v10 = v9 + 88 * v8;
      v11 = *(_QWORD *)(v10 + 24);
      if ((v11 & 1) != 0)
      {
        v13 = *(_BYTE **)(v9 + 88 * v8 + 32);
        if (!v13)
        {
          v17 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_20;
        }
        LOBYTE(v12) = *v13;
      }
      else
      {
        v12 = v11 >> 8;
        v13 = (_BYTE *)(v9 + 88 * v8 + 25);
      }
      if ((_BYTE)v12)
      {
        v12 = (char)v12;
        v14 = v13[1];
        if (v14)
        {
          v15 = v13 + 2;
          do
          {
            v12 = 31 * v12 + v14;
            v16 = *v15++;
            v14 = v16;
          }
          while (v16);
        }
        v17 = v12 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v17 = 0;
      }
LABEL_20:
      *(_QWORD *)v75 = v17;
      LODWORD(v82) = *(_DWORD *)(v10 + 48);
      v18 = v9 + 88 * v8;
      *((_QWORD *)&v82 + 1) = *(_QWORD *)(v18 + 56);
      LOBYTE(v83) = *(_BYTE *)(v18 + 64);
      *((_QWORD *)&v83 + 1) = *(_QWORD *)(v18 + 72) >> 1;
      this = (re::ShaderParameterTableBuilder *)re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addNew((_anonymous_namespace_ *)a2, (uint64_t *)v75, (int *)&v82);
      if (*((_DWORD *)v3 + 8) <= (v5 + 1))
        v19 = v5 + 1;
      else
        v19 = *((_DWORD *)v3 + 8);
      while (1)
      {
        v8 = (v5 + 1);
        if (v19 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v20 = v8;
        if ((*(_DWORD *)(*((_QWORD *)v3 + 2) + 88 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_27;
      }
      v20 = v19;
LABEL_27:
      LODWORD(v5) = v20;
    }
    while ((_DWORD)v4 != v20);
  }
  v21 = *((unsigned int *)v3 + 20);
  if ((_DWORD)v21)
  {
    v22 = 0;
    v23 = (int *)(*((_QWORD *)v3 + 8) + 8);
    while (1)
    {
      v24 = *v23;
      v23 += 22;
      if (v24 < 0)
        break;
      if (v21 == ++v22)
      {
        LODWORD(v22) = *((_DWORD *)v3 + 20);
        break;
      }
    }
  }
  else
  {
    LODWORD(v22) = 0;
  }
  if ((_DWORD)v21 != (_DWORD)v22)
  {
    v25 = v22;
    do
    {
      v26 = *((_QWORD *)v3 + 8);
      v27 = v26 + 88 * v25;
      v28 = *(_QWORD *)(v27 + 24);
      if ((v28 & 1) != 0)
      {
        v30 = *(_BYTE **)(v26 + 88 * v25 + 32);
        if (!v30)
        {
          v34 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_47;
        }
        LOBYTE(v29) = *v30;
      }
      else
      {
        v29 = v28 >> 8;
        v30 = (_BYTE *)(v26 + 88 * v25 + 25);
      }
      if ((_BYTE)v29)
      {
        v29 = (char)v29;
        v31 = v30[1];
        if (v31)
        {
          v32 = v30 + 2;
          do
          {
            v29 = 31 * v29 + v31;
            v33 = *v32++;
            v31 = v33;
          }
          while (v33);
        }
        v34 = v29 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v34 = 0;
      }
LABEL_47:
      *(_QWORD *)v75 = v34;
      LODWORD(v82) = *(_DWORD *)(v27 + 48);
      v35 = v26 + 88 * v25;
      *((_QWORD *)&v82 + 1) = *(_QWORD *)(v35 + 56);
      LOBYTE(v83) = *(_BYTE *)(v35 + 64);
      *((_QWORD *)&v83 + 1) = *(_QWORD *)(v35 + 72) >> 1;
      this = (re::ShaderParameterTableBuilder *)re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addNew((_anonymous_namespace_ *)(a2 + 8), (uint64_t *)v75, (int *)&v82);
      if (*((_DWORD *)v3 + 20) <= (v22 + 1))
        v36 = v22 + 1;
      else
        v36 = *((_DWORD *)v3 + 20);
      while (1)
      {
        v25 = (v22 + 1);
        if (v36 - 1 == (_DWORD)v22)
          break;
        LODWORD(v22) = v22 + 1;
        v37 = v25;
        if ((*(_DWORD *)(*((_QWORD *)v3 + 8) + 88 * v25 + 8) & 0x80000000) != 0)
          goto LABEL_54;
      }
      v37 = v36;
LABEL_54:
      LODWORD(v22) = v37;
    }
    while ((_DWORD)v21 != v37);
  }
  v38 = (_anonymous_namespace_ *)memcpy(a2[21], *((const void **)v3 + 16), *((_QWORD *)v3 + 14));
  v39 = *((unsigned int *)v3 + 52);
  if ((_DWORD)v39)
  {
    v40 = 0;
    v41 = (int *)(*((_QWORD *)v3 + 24) + 8);
    while (1)
    {
      v42 = *v41;
      v41 += 14;
      if (v42 < 0)
        break;
      if (v39 == ++v40)
      {
        LODWORD(v40) = *((_DWORD *)v3 + 52);
        break;
      }
    }
  }
  else
  {
    LODWORD(v40) = 0;
  }
  if ((_DWORD)v39 != (_DWORD)v40)
  {
    v43 = v40;
    do
    {
      v44 = *((_QWORD *)v3 + 24);
      v45 = v44 + 56 * v43;
      v46 = *(_QWORD *)(v45 + 24);
      if ((v46 & 1) != 0)
      {
        v47 = *(_BYTE **)(v44 + 56 * v43 + 32);
        if (!v47)
        {
          v52 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_74;
        }
        LOBYTE(v48) = *v47;
      }
      else
      {
        v47 = (_BYTE *)(v44 + 56 * v43 + 25);
        v48 = v46 >> 8;
      }
      if ((_BYTE)v48)
      {
        v48 = (char)v48;
        v49 = v47[1];
        if (v49)
        {
          v50 = v47 + 2;
          do
          {
            v48 = 31 * v48 + v49;
            v51 = *v50++;
            v49 = v51;
          }
          while (v51);
        }
        v52 = v48 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v52 = 0;
      }
LABEL_74:
      *(_QWORD *)&v82 = v52;
      v38 = (_anonymous_namespace_ *)re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::addNew((_anonymous_namespace_ *)(a2 + 22), &v82, (_DWORD *)(v45 + 48));
      v53 = *((_DWORD *)v3 + 52);
      if (v53 <= (int)v40 + 1)
        v53 = v40 + 1;
      while (1)
      {
        v43 = (v40 + 1);
        if (v53 - 1 == (_DWORD)v40)
          break;
        LODWORD(v40) = v40 + 1;
        v54 = v43;
        if ((*(_DWORD *)(*((_QWORD *)v3 + 24) + 56 * v43 + 8) & 0x80000000) != 0)
          goto LABEL_80;
      }
      v54 = v53;
LABEL_80:
      LODWORD(v40) = v54;
    }
    while ((_DWORD)v39 != v54);
  }
  v55 = *((unsigned int *)v3 + 64);
  if ((_DWORD)v55)
  {
    v56 = 0;
    v57 = (int *)(*((_QWORD *)v3 + 30) + 8);
    while (1)
    {
      v58 = *v57;
      v57 += 14;
      if (v58 < 0)
        break;
      if (v55 == ++v56)
      {
        LODWORD(v56) = *((_DWORD *)v3 + 64);
        break;
      }
    }
  }
  else
  {
    LODWORD(v56) = 0;
  }
  if ((_DWORD)v55 != (_DWORD)v56)
  {
    v59 = v56;
    do
    {
      v60 = *((_QWORD *)v3 + 30);
      v61 = v60 + 56 * v59;
      v62 = *(_QWORD *)(v61 + 24);
      if ((v62 & 1) != 0)
      {
        v63 = *(_BYTE **)(v60 + 56 * v59 + 32);
        if (!v63)
        {
          v68 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_100;
        }
        LOBYTE(v64) = *v63;
      }
      else
      {
        v63 = (_BYTE *)(v60 + 56 * v59 + 25);
        v64 = v62 >> 8;
      }
      if ((_BYTE)v64)
      {
        v64 = (char)v64;
        v65 = v63[1];
        if (v65)
        {
          v66 = v63 + 2;
          do
          {
            v64 = 31 * v64 + v65;
            v67 = *v66++;
            v65 = v67;
          }
          while (v67);
        }
        v68 = v64 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v68 = 0;
      }
LABEL_100:
      v69 = (unsigned int *)(v61 + 48);
      *(_QWORD *)&v82 = v68;
      v70 = *(_DWORD *)(v61 + 48);
      v75[0] = v70;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew((_anonymous_namespace_ *)(a2 + 30), &v82, v75);
      if (*((_DWORD *)a2 + 130) <= v70)
        *((_DWORD *)a2 + 130) = v70 + 1;
      v71 = *v69;
      v72 = *((_QWORD *)v3 + 19);
      if (v72 <= v71)
      {
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v82 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v75 = 136315906;
        *(_QWORD *)&v75[4] = "operator[]";
        v76 = 1024;
        v77 = 797;
        v78 = 2048;
        v79 = v71;
        v80 = 2048;
        v81 = v72;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::BufferTable::setBuffer((uint64_t)(a2 + 30), v71, *((_QWORD *)v3 + 21) + 16 * v71);
      v73 = *((_DWORD *)v3 + 64);
      if (v73 <= (int)v56 + 1)
        v73 = v56 + 1;
      while (1)
      {
        v59 = (v56 + 1);
        if (v73 - 1 == (_DWORD)v56)
          break;
        LODWORD(v56) = v56 + 1;
        v74 = v59;
        if ((*(_DWORD *)(*((_QWORD *)v3 + 30) + 56 * v59 + 8) & 0x80000000) != 0)
          goto LABEL_109;
      }
      v74 = v73;
LABEL_109:
      LODWORD(v56) = v74;
    }
    while ((_DWORD)v55 != v74);
  }
}

uint64_t re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addNew(_anonymous_namespace_ *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::internalAdd(a1, a2, a3);
  else
    return *((_QWORD *)a1 + 1) + 40 * v6 + 8;
}

void re::TextureParameterTableBuilder::build(re::TextureParameterTableBuilder *this, re::TextureParameterTable *a2)
{
  re::TextureParameterTableBuilder *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned __int8 *v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  id v63;
  void *v64;
  uint64_t v65;
  char v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  char v81;
  unsigned __int8 *v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  int v90;
  uint64_t v91;
  _anonymous_namespace_ *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  char v98;
  unsigned __int8 *v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  _BYTE v104[16];
  uint64_t v105;
  _BYTE v106[12];
  __int16 v107;
  int v108;
  __int16 v109;
  unint64_t v110;
  __int16 v111;
  unint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;

  v3 = this;
  v118 = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned int *)this + 8);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*((_QWORD *)this + 2) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 22;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    do
    {
      v9 = *((_QWORD *)v3 + 2);
      v10 = v9 + 88 * v8;
      v11 = *(_QWORD *)(v10 + 24);
      if ((v11 & 1) != 0)
      {
        v13 = *(_BYTE **)(v9 + 88 * v8 + 32);
        if (!v13)
        {
          v17 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_20;
        }
        LOBYTE(v12) = *v13;
      }
      else
      {
        v12 = v11 >> 8;
        v13 = (_BYTE *)(v9 + 88 * v8 + 25);
      }
      if ((_BYTE)v12)
      {
        v12 = (char)v12;
        v14 = v13[1];
        if (v14)
        {
          v15 = v13 + 2;
          do
          {
            v12 = 31 * v12 + v14;
            v16 = *v15++;
            v14 = v16;
          }
          while (v16);
        }
        v17 = v12 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v17 = 0;
      }
LABEL_20:
      *(_QWORD *)v106 = v17;
      LODWORD(v113) = *(_DWORD *)(v10 + 48);
      v18 = v9 + 88 * v8;
      *((_QWORD *)&v113 + 1) = *(_QWORD *)(v18 + 56);
      LOBYTE(v114) = *(_BYTE *)(v18 + 64);
      *((_QWORD *)&v114 + 1) = *(_QWORD *)(v18 + 72) >> 1;
      this = (re::TextureParameterTableBuilder *)re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addNew(a2, (uint64_t *)v106, (int *)&v113);
      if (*((_DWORD *)v3 + 8) <= (v5 + 1))
        v19 = v5 + 1;
      else
        v19 = *((_DWORD *)v3 + 8);
      while (1)
      {
        v8 = (v5 + 1);
        if (v19 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v20 = v8;
        if ((*(_DWORD *)(*((_QWORD *)v3 + 2) + 88 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_27;
      }
      v20 = v19;
LABEL_27:
      LODWORD(v5) = v20;
    }
    while ((_DWORD)v4 != v20);
  }
  v21 = *((unsigned int *)v3 + 20);
  if ((_DWORD)v21)
  {
    v22 = 0;
    v23 = (int *)(*((_QWORD *)v3 + 8) + 8);
    while (1)
    {
      v24 = *v23;
      v23 += 22;
      if (v24 < 0)
        break;
      if (v21 == ++v22)
      {
        LODWORD(v22) = *((_DWORD *)v3 + 20);
        break;
      }
    }
  }
  else
  {
    LODWORD(v22) = 0;
  }
  if ((_DWORD)v21 != (_DWORD)v22)
  {
    v25 = v22;
    do
    {
      v26 = *((_QWORD *)v3 + 8);
      v27 = v26 + 88 * v25;
      v28 = *(_QWORD *)(v27 + 24);
      if ((v28 & 1) != 0)
      {
        v30 = *(_BYTE **)(v26 + 88 * v25 + 32);
        if (!v30)
        {
          v34 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_47;
        }
        LOBYTE(v29) = *v30;
      }
      else
      {
        v29 = v28 >> 8;
        v30 = (_BYTE *)(v26 + 88 * v25 + 25);
      }
      if ((_BYTE)v29)
      {
        v29 = (char)v29;
        v31 = v30[1];
        if (v31)
        {
          v32 = v30 + 2;
          do
          {
            v29 = 31 * v29 + v31;
            v33 = *v32++;
            v31 = v33;
          }
          while (v33);
        }
        v34 = v29 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v34 = 0;
      }
LABEL_47:
      *(_QWORD *)v106 = v34;
      LODWORD(v113) = *(_DWORD *)(v27 + 48);
      v35 = v26 + 88 * v25;
      *((_QWORD *)&v113 + 1) = *(_QWORD *)(v35 + 56);
      LOBYTE(v114) = *(_BYTE *)(v35 + 64);
      *((_QWORD *)&v114 + 1) = *(_QWORD *)(v35 + 72) >> 1;
      this = (re::TextureParameterTableBuilder *)re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addNew((re::TextureParameterTable *)((char *)a2 + 64), (uint64_t *)v106, (int *)&v113);
      if (*((_DWORD *)v3 + 20) <= (v22 + 1))
        v36 = v22 + 1;
      else
        v36 = *((_DWORD *)v3 + 20);
      while (1)
      {
        v25 = (v22 + 1);
        if (v36 - 1 == (_DWORD)v22)
          break;
        LODWORD(v22) = v22 + 1;
        v37 = v25;
        if ((*(_DWORD *)(*((_QWORD *)v3 + 8) + 88 * v25 + 8) & 0x80000000) != 0)
          goto LABEL_54;
      }
      v37 = v36;
LABEL_54:
      LODWORD(v22) = v37;
    }
    while ((_DWORD)v21 != v37);
  }
  v38 = *((_QWORD *)v3 + 14);
  re::DynamicArray<re::TextureViews<re::TextureHandle>>::setCapacity((_QWORD *)a2 + 25, v38);
  ++*((_DWORD *)a2 + 56);
  v39 = *((unsigned int *)v3 + 52);
  if ((_DWORD)v39)
  {
    v40 = 0;
    v41 = (int *)(*((_QWORD *)v3 + 24) + 8);
    while (1)
    {
      v42 = *v41;
      v41 += 14;
      if (v42 < 0)
        break;
      if (v39 == ++v40)
      {
        LODWORD(v40) = *((_DWORD *)v3 + 52);
        break;
      }
    }
  }
  else
  {
    LODWORD(v40) = 0;
  }
  if ((_DWORD)v39 != (_DWORD)v40)
  {
    v43 = v40;
    while (1)
    {
      v44 = *((_QWORD *)v3 + 24);
      v45 = v44 + 56 * v43;
      v46 = (*(_BYTE *)(v45 + 24) & 1) != 0 ? *(char **)(v44 + 56 * v43 + 32) : (char *)(v44 + 56 * v43 + 25);
      v47 = *(unsigned int *)(v45 + 48);
      v48 = *((_QWORD *)v3 + 14);
      if (v48 <= v47)
        break;
      re::TextureHandle::TextureHandle((re::TextureHandle *)v104, (const re::TextureHandle *)(*((_QWORD *)v3 + 16) + 16 * v47));
      if (v46)
      {
        v49 = *v46;
        if (*v46)
        {
          v50 = v46[1];
          if (v50)
          {
            v51 = (unsigned __int8 *)(v46 + 2);
            do
            {
              v49 = 31 * v49 + v50;
              v52 = *v51++;
              v50 = v52;
            }
            while (v52);
          }
          v49 &= ~0x8000000000000000;
        }
      }
      else
      {
        v49 = 0x7FFFFFFFFFFFFFFFLL;
      }
      *(_QWORD *)v106 = v49;
      re::TextureHandle::TextureHandle((re::TextureHandle *)&v113, (const re::TextureHandle *)v104);
      re::TextureHandleTable::setTexture((_QWORD *)a2 + 16, (uint64_t *)v106, (os_unfair_lock_s **)&v113);
      re::TextureHandle::invalidate((re::TextureHandle *)&v113);
      re::TextureHandle::invalidate((re::TextureHandle *)v104);
      if (*((_DWORD *)v3 + 52) <= (v40 + 1))
        v53 = v40 + 1;
      else
        v53 = *((_DWORD *)v3 + 52);
      while (1)
      {
        v43 = (v40 + 1);
        if (v53 - 1 == (_DWORD)v40)
          break;
        LODWORD(v40) = v40 + 1;
        v54 = v43;
        if ((*(_DWORD *)(*((_QWORD *)v3 + 24) + 56 * v43 + 8) & 0x80000000) != 0)
          goto LABEL_81;
      }
      v54 = v53;
LABEL_81:
      LODWORD(v40) = v54;
      if ((_DWORD)v39 == v54)
        goto LABEL_82;
    }
    v105 = 0;
    v117 = 0u;
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v106 = 136315906;
    *(_QWORD *)&v106[4] = "operator[]";
    v107 = 1024;
    v108 = 797;
    v109 = 2048;
    v110 = v47;
    v111 = 2048;
    v112 = v48;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_167:
    v105 = 0;
    v117 = 0u;
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v106 = 136315906;
    *(_QWORD *)&v106[4] = "operator[]";
    v107 = 1024;
    v108 = 797;
    v109 = 2048;
    v110 = v39;
    v111 = 2048;
    v112 = v48;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_82:
  re::SamplerTable::init((re::TextureParameterTable *)((char *)a2 + 240), *((_QWORD *)v3 + 19));
  v55 = *((unsigned int *)v3 + 64);
  if ((_DWORD)v55)
  {
    v56 = 0;
    v57 = (int *)(*((_QWORD *)v3 + 30) + 8);
    while (1)
    {
      v58 = *v57;
      v57 += 14;
      if (v58 < 0)
        break;
      if (v55 == ++v56)
      {
        LODWORD(v56) = *((_DWORD *)v3 + 64);
        break;
      }
    }
  }
  else
  {
    LODWORD(v56) = 0;
  }
  if ((_DWORD)v55 != (_DWORD)v56)
  {
    v59 = v56;
    do
    {
      v60 = *((_QWORD *)v3 + 30);
      v61 = v60 + 56 * v59;
      v62 = (*(_BYTE *)(v61 + 24) & 1) != 0 ? *(char **)(v60 + 56 * v59 + 32) : (char *)(v60 + 56 * v59 + 25);
      v39 = *(unsigned int *)(v61 + 48);
      v48 = *((_QWORD *)v3 + 19);
      if (v48 <= v39)
        goto LABEL_167;
      v63 = *(id *)(*((_QWORD *)v3 + 21) + 8 * v39);
      v64 = v63;
      if (v62)
      {
        v65 = *v62;
        if (*v62)
        {
          v66 = v62[1];
          if (v66)
          {
            v67 = (unsigned __int8 *)(v62 + 2);
            do
            {
              v65 = 31 * v65 + v66;
              v68 = *v67++;
              v66 = v68;
            }
            while (v68);
          }
          v65 &= ~0x8000000000000000;
        }
      }
      else
      {
        v65 = 0x7FFFFFFFFFFFFFFFLL;
      }
      *(_QWORD *)&v113 = v65;
      *(_QWORD *)v106 = v63;
      re::SamplerTable::setSampler((_QWORD *)a2 + 30, &v113, (id *)v106);
      if (*(_QWORD *)v106)

      if (v64)
      if (*((_DWORD *)v3 + 64) <= (v56 + 1))
        v69 = v56 + 1;
      else
        v69 = *((_DWORD *)v3 + 64);
      while (1)
      {
        v59 = (v56 + 1);
        if (v69 - 1 == (_DWORD)v56)
          break;
        LODWORD(v56) = v56 + 1;
        v70 = v59;
        if ((*(_DWORD *)(*((_QWORD *)v3 + 30) + 56 * v59 + 8) & 0x80000000) != 0)
          goto LABEL_112;
      }
      v70 = v69;
LABEL_112:
      LODWORD(v56) = v70;
    }
    while ((_DWORD)v55 != v70);
  }
  v71 = *((unsigned int *)v3 + 76);
  if ((_DWORD)v71)
  {
    v72 = 0;
    v73 = (int *)(*((_QWORD *)v3 + 36) + 8);
    while (1)
    {
      v74 = *v73;
      v73 += 14;
      if (v74 < 0)
        break;
      if (v71 == ++v72)
      {
        LODWORD(v72) = *((_DWORD *)v3 + 76);
        break;
      }
    }
  }
  else
  {
    LODWORD(v72) = 0;
  }
  if ((_DWORD)v71 != (_DWORD)v72)
  {
    v75 = v72;
    do
    {
      v76 = *((_QWORD *)v3 + 36);
      v77 = v76 + 56 * v75;
      v78 = *(_QWORD *)(v77 + 24);
      if ((v78 & 1) != 0)
      {
        v79 = *(_BYTE **)(v76 + 56 * v75 + 32);
        if (!v79)
        {
          v84 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_132;
        }
        LOBYTE(v80) = *v79;
      }
      else
      {
        v79 = (_BYTE *)(v76 + 56 * v75 + 25);
        v80 = v78 >> 8;
      }
      if ((_BYTE)v80)
      {
        v80 = (char)v80;
        v81 = v79[1];
        if (v81)
        {
          v82 = v79 + 2;
          do
          {
            v80 = 31 * v80 + v81;
            v83 = *v82++;
            v81 = v83;
          }
          while (v83);
        }
        v84 = v80 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v84 = 0;
      }
LABEL_132:
      *(_QWORD *)&v113 = v84;
      re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::addNew((re::TextureParameterTable *)((char *)a2 + 352), &v113, (uint64_t *)(v77 + 48));
      v85 = *((_DWORD *)v3 + 76);
      if (v85 <= (int)v72 + 1)
        v85 = v72 + 1;
      while (1)
      {
        v75 = (v72 + 1);
        if (v85 - 1 == (_DWORD)v72)
          break;
        LODWORD(v72) = v72 + 1;
        v86 = v75;
        if ((*(_DWORD *)(*((_QWORD *)v3 + 36) + 56 * v75 + 8) & 0x80000000) != 0)
          goto LABEL_138;
      }
      v86 = v85;
LABEL_138:
      LODWORD(v72) = v86;
    }
    while ((_DWORD)v71 != v86);
  }
  v87 = *((unsigned int *)v3 + 88);
  if ((_DWORD)v87)
  {
    v88 = 0;
    v89 = (int *)(*((_QWORD *)v3 + 42) + 8);
    while (1)
    {
      v90 = *v89;
      v89 += 14;
      if (v90 < 0)
        break;
      if (v87 == ++v88)
      {
        LODWORD(v88) = *((_DWORD *)v3 + 88);
        break;
      }
    }
  }
  else
  {
    LODWORD(v88) = 0;
  }
  if ((_DWORD)v87 != (_DWORD)v88)
  {
    v91 = v88;
    v92 = (re::TextureParameterTable *)((char *)a2 + 416);
    do
    {
      v93 = *((_QWORD *)v3 + 42);
      v94 = v93 + 56 * v91;
      v95 = *(_QWORD *)(v94 + 24);
      if ((v95 & 1) != 0)
      {
        v96 = *(_BYTE **)(v93 + 56 * v91 + 32);
        if (!v96)
        {
          v101 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_158;
        }
        LOBYTE(v97) = *v96;
      }
      else
      {
        v96 = (_BYTE *)(v93 + 56 * v91 + 25);
        v97 = v95 >> 8;
      }
      if ((_BYTE)v97)
      {
        v97 = (char)v97;
        v98 = v96[1];
        if (v98)
        {
          v99 = v96 + 2;
          do
          {
            v97 = 31 * v97 + v98;
            v100 = *v99++;
            v98 = v100;
          }
          while (v100);
        }
        v101 = v97 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v101 = 0;
      }
LABEL_158:
      *(_QWORD *)&v113 = v101;
      re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew(v92, &v113, (_DWORD *)(v94 + 48));
      v102 = *((_DWORD *)v3 + 88);
      if (v102 <= (int)v88 + 1)
        v102 = v88 + 1;
      while (1)
      {
        v91 = (v88 + 1);
        if (v102 - 1 == (_DWORD)v88)
          break;
        LODWORD(v88) = v88 + 1;
        v103 = v91;
        if ((*(_DWORD *)(*((_QWORD *)v3 + 42) + 56 * v91 + 8) & 0x80000000) != 0)
          goto LABEL_164;
      }
      v103 = v102;
LABEL_164:
      LODWORD(v88) = v103;
    }
    while ((_DWORD)v87 != v103);
  }
}

uint64_t re::makeStage@<X0>(re *a1@<X0>, id *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, id *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v18;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  re *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id *v27;
  uint64_t v28;
  uint64_t v29;
  re::StringID *v30;
  uint64_t v31;
  uint64_t v32;
  re::StringID *v33;
  uint64_t v34;
  uint64_t v35;
  re::StringID *v36;
  uint64_t v37;
  uint64_t result;
  re::StringID *v39;
  uint64_t v40;
  re *v41;
  uint64_t v42;
  _BYTE *v43;
  char *v44;
  uint64_t v45;
  __n128 v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  id v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  id v55;
  re *v56;
  uint64_t v57;
  id v58;
  id v59;
  _BOOL4 v60;
  _anonymous_namespace_ *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  const char *v71;
  unint64_t v72;
  _anonymous_namespace_ *v73;
  unint64_t v74;
  _anonymous_namespace_ *v75;
  unint64_t v76;
  _anonymous_namespace_ *v77;
  unint64_t v78;
  unint64_t v79;
  _anonymous_namespace_ *v80;
  _anonymous_namespace_ *v81;
  unint64_t v82;
  uint64_t v83;
  re::StringID *v84;
  re::StringID *v85;
  unint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  re::StringID *v100;
  re::StringID *v101;
  uint64_t v102;
  uint64_t v103;
  re::StringID *v104;
  re::StringID *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unsigned __int16 *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unint64_t v118;
  unsigned int v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unsigned __int16 v124;
  unsigned __int16 *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  int v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  unsigned __int16 *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unsigned int v145;
  unint64_t v146;
  unsigned int v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  id *v151;
  uint64_t v152;
  id v153;
  uint64_t v154;
  unint64_t v155;
  unsigned __int16 *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  unint64_t v162;
  unsigned __int16 *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unsigned int v167;
  _anonymous_namespace_ *v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  re::StringID *v185;
  uint64_t v186;
  __int128 v187;
  const char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  unsigned __int16 v192;
  unint64_t v193;
  unsigned __int16 v194;
  unint64_t v195;
  uint64_t v196;
  unsigned __int8 v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  int v206;
  uint64_t v207;
  char v208[8];
  uint64_t v209;
  char v210;
  _BYTE v211[23];
  char v212[8];
  id v213;
  _QWORD v214[2];
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  int v221;
  _QWORD *v222;
  _QWORD v223[2];
  uint64_t v224;
  int v225;
  re::StringID *v226;
  _QWORD v227[2];
  unint64_t v228;
  int v229;
  re::StringID *v230;
  _QWORD v231[2];
  unint64_t v232;
  int v233;
  re::StringID *v234;
  _QWORD v235[2];
  unint64_t v236;
  int v237;
  uint64_t *v238;
  _QWORD v239[2];
  unint64_t v240;
  int v241;
  uint64_t *v242;
  _QWORD v243[2];
  unint64_t v244;
  int v245;
  re::StringID *v246;
  uint64_t v247;
  _BYTE v248[44];
  _BYTE v249[18];
  __int16 v250;
  id *v251;
  __int16 v252;
  id *v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;

  v18 = (int)a1;
  v259 = *MEMORY[0x24BDAC8D0];
  v20 = re::globalAllocators(a1);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20[2] + 32))(v20[2], 336, 8);
  *(_OWORD *)v21 = 0u;
  *(_OWORD *)(v21 + 16) = 0u;
  *(_OWORD *)(v21 + 32) = 0u;
  *(_OWORD *)(v21 + 48) = 0u;
  *(_OWORD *)(v21 + 64) = 0u;
  *(_OWORD *)(v21 + 80) = 0u;
  *(_OWORD *)(v21 + 96) = 0u;
  *(_OWORD *)(v21 + 112) = 0u;
  *(_OWORD *)(v21 + 128) = 0u;
  *(_OWORD *)(v21 + 144) = 0u;
  *(_OWORD *)(v21 + 160) = 0u;
  *(_OWORD *)(v21 + 176) = 0u;
  *(_OWORD *)(v21 + 208) = 0u;
  *(_OWORD *)(v21 + 224) = 0u;
  *(_OWORD *)(v21 + 240) = 0u;
  *(_OWORD *)(v21 + 256) = 0u;
  *(_OWORD *)(v21 + 272) = 0u;
  *(_OWORD *)(v21 + 288) = 0u;
  *(_OWORD *)(v21 + 304) = 0u;
  *(_OWORD *)(v21 + 320) = 0u;
  *(_OWORD *)(v21 + 192) = 0u;
  *(_DWORD *)(v21 + 180) = 0x7FFFFFFF;
  *(_OWORD *)(v21 + 192) = 0u;
  *(_OWORD *)(v21 + 208) = 0u;
  *(_OWORD *)(v21 + 224) = 0u;
  *(_OWORD *)(v21 + 240) = 0u;
  *(_OWORD *)(v21 + 256) = 0u;
  *(_OWORD *)(v21 + 272) = 0u;
  *(_OWORD *)(v21 + 288) = 0u;
  *(_OWORD *)(v21 + 304) = 0u;
  *(_OWORD *)(v21 + 317) = 0u;
  *(_DWORD *)v21 = v18;
  *(_QWORD *)(v21 + 8) = makeString(a3);
  v246 = 0;
  v243[1] = 0;
  v244 = 0;
  v242 = 0;
  v243[0] = 0;
  v245 = 0;
  v239[1] = 0;
  v240 = 0;
  v238 = 0;
  v239[0] = 0;
  v241 = 0;
  v235[1] = 0;
  v236 = 0;
  v234 = 0;
  v235[0] = 0;
  v237 = 0;
  v231[1] = 0;
  v232 = 0;
  v230 = 0;
  v231[0] = 0;
  v233 = 0;
  v227[1] = 0;
  v228 = 0;
  v226 = 0;
  v227[0] = 0;
  v229 = 0;
  v223[1] = 0;
  v224 = 0;
  v222 = 0;
  v223[0] = 0;
  v225 = 0;
  v219 = 0;
  v220 = 0;
  v217 = 0;
  v218 = 0;
  v221 = 0;
  v214[1] = 0;
  v215 = 0;
  v214[0] = 0;
  if (a8[1])
    v22 = v223;
  else
    v22 = 0;
  v216 = 0;
  v191 = 0;
  re::collectArguments((_anonymous_namespace_ *)v243, (uint64_t)v239, (uint64_t)v235, (uint64_t)v231, (_anonymous_namespace_ *)v227, (uint64_t)v22, a5, a7, (uint64_t)v212);
  if (v212[0])
  {
    v24 = re::globalAllocators(v23)[2];
    re::TechniqueStage::~TechniqueStage((re::TechniqueStage *)v21);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 40))(v24, v21);
    v25 = v213;
    *(_BYTE *)a9 = 0;
    *(_QWORD *)(a9 + 8) = v25;
    goto LABEL_6;
  }
  v198 = a9;
  v41 = (re *)re::validateArgumentsCount((_anonymous_namespace_ *)v243, (uint64_t)v239, (uint64_t)v231, (uint64_t)v227, a6, (uint64_t)v208);
  if (v208[0])
  {
    v42 = re::globalAllocators(v41)[2];
    re::TechniqueStage::~TechniqueStage((re::TechniqueStage *)v21);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 40))(v42, v21);
    if ((v210 & 1) != 0)
      v43 = *(_BYTE **)&v211[7];
    else
      v43 = v211;
    re::DynamicString::format((re::DynamicString *)"Program \"%s\" failed due to invalid argument numbers. %s", (re::DynamicString *)&v254, a3, v43);
    if ((BYTE8(v254) & 1) != 0)
      v44 = (char *)v255;
    else
      v44 = (char *)&v254 + 9;
    re::WrappedError::make((re::WrappedError *)CFSTR("REMaterialBuilderErrorDomain"), (const __CFString *)0x32, (uint64_t)v44, v248);
    v45 = *(_QWORD *)v248;
    *(_QWORD *)v248 = 0;
    *(_BYTE *)a9 = 0;
    *(_QWORD *)(a9 + 8) = v45;

    if ((_QWORD)v254 && (BYTE8(v254) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v254 + 40))();
    goto LABEL_184;
  }
  v201 = a4;
  v196 = a7;
  if (*(_QWORD *)(v21 + 64))
  {

    if (*(_QWORD *)(v21 + 64))
    {
      v47 = 0;
      v48 = 2;
      while (1)
      {
        v49 = v236;
        if (v236 <= v47)
          break;
        v50 = objc_msgSend(*a2, sel_newArgumentEncoderWithBufferIndex_, LOWORD(v238[v48]));
        v51 = v220;
        if (v220 >= v219)
        {
          re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::growCapacity(&v218, v220 + 1);
          v51 = v220;
        }
        v222[v51] = v50;
        v220 = v51 + 1;
        ++v221;
        ++v47;
        v48 += 14;
        if (*(_QWORD *)(v21 + 64) <= v47)
          goto LABEL_65;
      }
      *(_QWORD *)&v204 = 0;
      v257 = 0u;
      v258 = 0u;
      v255 = 0u;
      v256 = 0u;
      v254 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v248 = 136315906;
      *(_QWORD *)&v248[4] = "operator[]";
      *(_WORD *)&v248[12] = 1024;
      *(_DWORD *)&v248[14] = 789;
      *(_WORD *)&v248[18] = 2048;
      *(_QWORD *)&v248[20] = v47;
      *(_WORD *)&v248[28] = 2048;
      *(_QWORD *)&v248[30] = v49;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_198:
      v247 = 0;
      v257 = 0u;
      v258 = 0u;
      v255 = 0u;
      v256 = 0u;
      v254 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v249 = 136315906;
      *(_QWORD *)&v249[4] = "operator[]";
      *(_WORD *)&v249[12] = 1024;
      *(_DWORD *)&v249[14] = 789;
      v250 = 2048;
      v251 = a8;
      v252 = 2048;
      v253 = a2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_199:
      v247 = 0;
      v257 = 0u;
      v258 = 0u;
      v255 = 0u;
      v256 = 0u;
      v254 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v249 = 136315906;
      *(_QWORD *)&v249[4] = "operator[]";
      *(_WORD *)&v249[12] = 1024;
      *(_DWORD *)&v249[14] = 468;
      v250 = 2048;
      v251 = a8;
      v252 = 2048;
      v253 = a2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_200:
      v247 = 0;
      v257 = 0u;
      v258 = 0u;
      v255 = 0u;
      v256 = 0u;
      v254 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v249 = 136315906;
      *(_QWORD *)&v249[4] = "operator[]";
      *(_WORD *)&v249[12] = 1024;
      *(_DWORD *)&v249[14] = 468;
      v250 = 2048;
      v251 = a8;
      v252 = 2048;
      v253 = a8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
LABEL_65:
  memset(v248, 0, 36);
  *(_QWORD *)&v248[36] = 0x7FFFFFFFLL;
  v52 = v201;
  re::collectLinkedArgumentReflection((_anonymous_namespace_ *)a8, (uint64_t)v223, v201, (uint64_t)v248);
  if (*(_DWORD *)&v248[28])
  {
    *(_QWORD *)&v204 = objc_msgSend(*a2, sel_device);
    re::forwardLinkedArguments((re::mtl::Device *)&v204, (uint64_t)v248, (uint64_t)v223, (_anonymous_namespace_ *)v239, (_anonymous_namespace_ *)v235, &v218, (uint64_t)v214, (uint64_t)&v254);
    if (v212[0] || (_BYTE)v254)
    {
      if (!v212[0] || (_BYTE)v254)
      {
        if (v212[0] || !(_BYTE)v254)
        {
          v54 = (void *)*((_QWORD *)&v254 + 1);
          *((_QWORD *)&v254 + 1) = 0;
          v55 = v213;
          v213 = v54;

        }
        else
        {
          v212[0] = 1;
          v53 = (void *)*((_QWORD *)&v254 + 1);
          *((_QWORD *)&v254 + 1) = 0;
          v213 = v53;
        }
      }
      else
      {

        v212[0] = 0;
      }
      if ((_BYTE)v254)

    }
    if (v212[0])
    {
      v57 = re::globalAllocators(v56)[2];
      re::TechniqueStage::~TechniqueStage((re::TechniqueStage *)v21);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 40))(v57, v21);
      v58 = v213;
      *(_BYTE *)a9 = 0;
      *(_QWORD *)(a9 + 8) = v58;
      goto LABEL_183;
    }
  }
  v206 = 0;
  v204 = 0u;
  v205 = 0u;
  v207 = 0x7FFFFFFFLL;
  v59 = objc_msgSend(*a2, sel_device, v191);
  *(_QWORD *)&v254 = v59;
  v60 = re::mtl::Device::needsArgumentBufferTextureEmulation((re::mtl::Device *)&v254);

  if (!v60 || !v215)
  {
LABEL_98:
    *(_QWORD *)(v21 + 16) = v52;
    v72 = v244;
    v74 = v240;
    v76 = v236;
    v78 = v236;
    v79 = v232;
    v82 = v228;
    re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v21 + 144, (uint64_t)&v204);
    if (v244)
    {
      v84 = v246;
      v85 = (re::StringID *)((char *)v246 + 24 * v244);
      v86 = *(unint64_t **)(v21 + 248);
      do
      {
        v87 = *(_QWORD *)v84;
        *v86 = *v86 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v84 & 1;
        *v86 = *(_QWORD *)v84 & 0xFFFFFFFFFFFFFFFELL | v87 & 1;
        v86[1] = *((_QWORD *)v84 + 1);
        *(_QWORD *)v84 = 0;
        *((_QWORD *)v84 + 1) = &str_110;
        v86[2] = *((_QWORD *)v84 + 2);
        re::StringID::destroyString(v84);
        v84 = (re::StringID *)((char *)v84 + 24);
        v86 += 3;
      }
      while (v84 != v85);
    }
    if (v240)
    {
      v88 = v242;
      v89 = &v242[14 * v240];
      v90 = *(_QWORD *)(v21 + 40);
      do
      {
        v91 = *v88;
        *(_QWORD *)v90 = *(_QWORD *)v90 & 0xFFFFFFFFFFFFFFFELL | *v88 & 1;
        *(_QWORD *)v90 = *v88 & 0xFFFFFFFFFFFFFFFELL | v91 & 1;
        *(_QWORD *)(v90 + 8) = v88[1];
        *v88 = 0;
        v88[1] = (uint64_t)&str_110;
        *(_WORD *)(v90 + 16) = *((_WORD *)v88 + 8);
        LODWORD(v91) = *((_DWORD *)v88 + 8);
        *(_QWORD *)(v90 + 24) = v88[3];
        *(_DWORD *)(v90 + 32) = v91;
        LOBYTE(v91) = v88[5];
        *(_QWORD *)(v90 + 40) = *(_QWORD *)(v90 + 40) & 0xFFFFFFFFFFFFFFFELL | v88[5] & 1;
        *(_QWORD *)(v90 + 40) = v88[5] & 0xFFFFFFFFFFFFFFFELL | v91 & 1;
        *(_QWORD *)(v90 + 48) = v88[6];
        v88[6] = (uint64_t)&str_110;
        v88[5] = 0;
        LODWORD(v91) = *((_DWORD *)v88 + 14);
        *(_WORD *)(v90 + 60) = *((_WORD *)v88 + 30);
        *(_DWORD *)(v90 + 56) = v91;
        *(_QWORD *)(v90 + 72) = 0;
        *(_QWORD *)(v90 + 80) = 0;
        *(_QWORD *)(v90 + 64) = 0;
        *(_QWORD *)(v90 + 64) = v88[8];
        v88[8] = 0;
        *(_QWORD *)(v90 + 72) = v88[9];
        v88[9] = 0;
        v92 = *(_QWORD *)(v90 + 80);
        *(_QWORD *)(v90 + 80) = v88[10];
        v88[10] = v92;
        v93 = v88[11];
        *(_QWORD *)(v90 + 94) = *(uint64_t *)((char *)v88 + 94);
        *(_QWORD *)(v90 + 88) = v93;
        *(_BYTE *)(v90 + 104) = *((_BYTE *)v88 + 104);
        re::FixedArray<re::MetalTypeInfo>::deinit(v88 + 8);
        re::StringID::destroyString((re::StringID *)(v88 + 5));
        re::StringID::destroyString((re::StringID *)v88);
        v88 += 14;
        v90 += 112;
      }
      while (v88 != v89);
    }
    if (v236)
    {
      v94 = v238;
      v95 = &v238[14 * v236];
      v96 = *(_QWORD *)(v21 + 72);
      do
      {
        v97 = *v94;
        *(_QWORD *)v96 = *(_QWORD *)v96 & 0xFFFFFFFFFFFFFFFELL | *v94 & 1;
        *(_QWORD *)v96 = *v94 & 0xFFFFFFFFFFFFFFFELL | v97 & 1;
        *(_QWORD *)(v96 + 8) = v94[1];
        *v94 = 0;
        v94[1] = (uint64_t)&str_110;
        *(_WORD *)(v96 + 16) = *((_WORD *)v94 + 8);
        LODWORD(v97) = *((_DWORD *)v94 + 8);
        *(_QWORD *)(v96 + 24) = v94[3];
        *(_DWORD *)(v96 + 32) = v97;
        LOBYTE(v97) = v94[5];
        *(_QWORD *)(v96 + 40) = *(_QWORD *)(v96 + 40) & 0xFFFFFFFFFFFFFFFELL | v94[5] & 1;
        *(_QWORD *)(v96 + 40) = v94[5] & 0xFFFFFFFFFFFFFFFELL | v97 & 1;
        *(_QWORD *)(v96 + 48) = v94[6];
        v94[6] = (uint64_t)&str_110;
        v94[5] = 0;
        LODWORD(v97) = *((_DWORD *)v94 + 14);
        *(_WORD *)(v96 + 60) = *((_WORD *)v94 + 30);
        *(_DWORD *)(v96 + 56) = v97;
        *(_QWORD *)(v96 + 72) = 0;
        *(_QWORD *)(v96 + 80) = 0;
        *(_QWORD *)(v96 + 64) = 0;
        *(_QWORD *)(v96 + 64) = v94[8];
        v94[8] = 0;
        *(_QWORD *)(v96 + 72) = v94[9];
        v94[9] = 0;
        v98 = *(_QWORD *)(v96 + 80);
        *(_QWORD *)(v96 + 80) = v94[10];
        v94[10] = v98;
        v99 = v94[11];
        *(_QWORD *)(v96 + 94) = *(uint64_t *)((char *)v94 + 94);
        *(_QWORD *)(v96 + 88) = v99;
        *(_BYTE *)(v96 + 104) = *((_BYTE *)v94 + 104);
        re::FixedArray<re::MetalTypeInfo>::deinit(v94 + 8);
        re::StringID::destroyString((re::StringID *)(v94 + 5));
        re::StringID::destroyString((re::StringID *)v94);
        v94 += 14;
        v96 += 112;
      }
      while (v94 != v95);
    }
    if (v232)
    {
      v100 = v234;
      v101 = (re::StringID *)((char *)v234 + 32 * v232);
      v102 = *(_QWORD *)(v21 + 128);
      do
      {
        v103 = *(_QWORD *)v100;
        *(_QWORD *)v102 = *(_QWORD *)v102 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v100 & 1;
        *(_QWORD *)v102 = *(_QWORD *)v100 & 0xFFFFFFFFFFFFFFFELL | v103 & 1;
        *(_QWORD *)(v102 + 8) = *((_QWORD *)v100 + 1);
        *(_QWORD *)v100 = 0;
        *((_QWORD *)v100 + 1) = &str_110;
        *(_OWORD *)(v102 + 16) = *((_OWORD *)v100 + 1);
        re::StringID::destroyString(v100);
        v100 = (re::StringID *)((char *)v100 + 32);
        v102 += 32;
      }
      while (v100 != v101);
    }
    if (v228)
    {
      v104 = v230;
      v105 = (re::StringID *)((char *)v230 + 24 * v228);
      v106 = *(_QWORD *)(v21 + 216);
      do
      {
        v107 = *(_QWORD *)v104;
        *(_QWORD *)v106 = *(_QWORD *)v106 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v104 & 1;
        *(_QWORD *)v106 = *(_QWORD *)v104 & 0xFFFFFFFFFFFFFFFELL | v107 & 1;
        *(_QWORD *)(v106 + 8) = *((_QWORD *)v104 + 1);
        *(_QWORD *)v104 = 0;
        *((_QWORD *)v104 + 1) = &str_110;
        LOWORD(v107) = *((_WORD *)v104 + 8);
        *(_BYTE *)(v106 + 18) = *((_BYTE *)v104 + 18);
        *(_WORD *)(v106 + 16) = v107;
        re::StringID::destroyString(v104);
        v104 = (re::StringID *)((char *)v104 + 24);
        v106 += 24;
      }
      while (v104 != v105);
    }
    if (v220)
    {
      v108 = v222;
      v109 = *(_QWORD **)(v21 + 96);
      v110 = 8 * v220;
      do
      {
        *v109++ = *v108;
        *v108++ = 0;
        v110 -= 8;
      }
      while (v110);
    }
    v202 = 0u;
    v203 = 0u;
    v111 = *(_QWORD *)(v21 + 240);
    if (v111)
    {
      v112 = 0;
      v113 = (unsigned __int16 *)(*(_QWORD *)(v21 + 248) + 16);
      v114 = 24 * v111;
      do
      {
        v115 = *v113;
        v116 = 1 << v115;
        v117 = re::Bitset<256>::toWordIndex(v115, v83);
        *((_QWORD *)&v202 + v117) |= v116;
        v118 = *((_QWORD *)v113 - 2);
        v119 = *v113;
        v113 += 12;
        v120 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * ((v118 >> 31) ^ (v118 >> 1))) ^ ((0xBF58476D1CE4E5B9
                                                                        * ((v118 >> 31) ^ (v118 >> 1))) >> 27));
        v121 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v119) ^ ((0xBF58476D1CE4E5B9 * v119) >> 27));
        v112 ^= (v112 << 6)
              - 0x61C8864680B583E9
              + (v112 >> 2)
              + (((v121 ^ (v121 >> 31))
                - 0x61C8864680B583E9
                + ((v120 ^ (v120 >> 31)) << 6)
                + ((v120 ^ (v120 >> 31)) >> 2)) ^ v120 ^ (v120 >> 31));
        v114 -= 24;
      }
      while (v114);
    }
    else
    {
      v112 = 0;
    }
    v122 = *(_QWORD *)(v21 + 120);
    if (v122)
    {
      v123 = 0;
      v124 = 0;
      v125 = (unsigned __int16 *)(*(_QWORD *)(v21 + 128) + 16);
      v126 = 32 * v122;
      do
      {
        v127 = *v125;
        if (v124 <= v127)
          v124 = *v125;
        v128 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * ((*((_QWORD *)v125 - 2) >> 31) ^ (*((_QWORD *)v125 - 2) >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((*((_QWORD *)v125 - 2) >> 31) ^ (*((_QWORD *)v125 - 2) >> 1))) >> 27));
        v129 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v127) ^ ((0xBF58476D1CE4E5B9 * v127) >> 27));
        v123 ^= (v123 << 6)
              - 0x61C8864680B583E9
              + (v123 >> 2)
              + (((v129 ^ (v129 >> 31))
                - 0x61C8864680B583E9
                + ((v128 ^ (v128 >> 31)) << 6)
                + ((v128 ^ (v128 >> 31)) >> 2)) ^ v128 ^ (v128 >> 31));
        v125 += 16;
        v126 -= 32;
      }
      while (v126);
    }
    else
    {
      v124 = 0;
      v123 = 0;
    }
    v130 = *(unsigned int *)(v21 + 176);
    if ((_DWORD)v130)
    {
      v131 = 0;
      v132 = *(int **)(v21 + 160);
      while (1)
      {
        v133 = *v132;
        v132 += 10;
        if (v133 < 0)
          break;
        if (v130 == ++v131)
        {
          LODWORD(v131) = *(_DWORD *)(v21 + 176);
          break;
        }
      }
    }
    else
    {
      LODWORD(v131) = 0;
    }
    if ((_DWORD)v130 == (_DWORD)v131)
    {
      v134 = 0;
    }
    else
    {
      v134 = 0;
      v135 = v131;
      v136 = *(_QWORD *)(v21 + 160);
      do
      {
        v134 ^= (v134 << 6)
              - 0x61C8864680B583E9
              + (v134 >> 2)
              + (((*(_QWORD *)(v136 + 40 * v135 + 8) >> 3)
                - 0x61C8864680B583E9
                + (*(_QWORD *)(v136 + 40 * v135 + 24) >> 1)
                + (*(_QWORD *)(v136 + 40 * v135 + 8) >> 1 << 6)) ^ (*(_QWORD *)(v136 + 40 * v135 + 8) >> 1));
        if (v130 <= (int)v131 + 1)
          v137 = v131 + 1;
        else
          v137 = *(_DWORD *)(v21 + 176);
        v138 = v131;
        while (1)
        {
          v135 = (v138 + 1);
          if (v137 - 1 == v138)
            break;
          ++v138;
          LODWORD(v131) = v135;
          if ((*(_DWORD *)(v136 + 40 * v135) & 0x80000000) != 0)
            goto LABEL_145;
        }
        LODWORD(v131) = v137;
LABEL_145:
        ;
      }
      while ((_DWORD)v130 != (_DWORD)v131);
    }
    v193 = v134;
    v194 = v124;
    v195 = v112;
    v139 = *(_QWORD *)(v21 + 208);
    if (v139)
    {
      v140 = 0;
      v141 = (unsigned __int16 *)(*(_QWORD *)(v21 + 216) + 16);
      v142 = 24 * v139;
      do
      {
        v143 = *v141;
        v144 = 1 << v143;
        v145 = re::Bitset<256>::toWordIndex(v143, v83);
        *((_QWORD *)&v202 + v145) |= v144;
        v146 = *((_QWORD *)v141 - 2);
        v147 = *v141;
        v141 += 12;
        v148 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * ((v146 >> 31) ^ (v146 >> 1))) ^ ((0xBF58476D1CE4E5B9
                                                                        * ((v146 >> 31) ^ (v146 >> 1))) >> 27));
        v149 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v147) ^ ((0xBF58476D1CE4E5B9 * v147) >> 27));
        v140 ^= (v140 << 6)
              - 0x61C8864680B583E9
              + (v140 >> 2)
              + (((v149 ^ (v149 >> 31))
                - 0x61C8864680B583E9
                + ((v148 ^ (v148 >> 31)) << 6)
                + ((v148 ^ (v148 >> 31)) >> 2)) ^ v148 ^ (v148 >> 31));
        v142 -= 24;
      }
      while (v142);
    }
    else
    {
      v140 = 0;
    }
    v150 = *(_QWORD *)(v196 + 16);
    if (v150)
    {
      v151 = *(id **)(v196 + 32);
      v152 = 8 * v150;
      while (1)
      {
        v153 = *v151;
        if (objc_msgSend(*v151, sel_type) == (id)3
          && (unint64_t)objc_msgSend(v153, sel_arrayLength) >= 2
          && !strcmp("dynamicSamplers", (const char *)objc_msgSend(objc_msgSend(v153, sel_name), sel_UTF8String)))
        {
          break;
        }
        ++v151;
        v152 -= 8;
        if (!v152)
          goto LABEL_157;
      }
      v197 = objc_msgSend(v153, sel_arrayLength);
      v192 = (unsigned __int16)objc_msgSend(v153, sel_index);
    }
    else
    {
LABEL_157:
      v197 = 0;
      v192 = 0;
    }
    v154 = *(_QWORD *)(v21 + 32);
    if (v154)
    {
      v155 = 0;
      v156 = *(unsigned __int16 **)(v21 + 40);
      v157 = 112 * v154;
      do
      {
        v158 = v156[8];
        v159 = 1 << v158;
        v160 = re::Bitset<256>::toWordIndex(v158, v83);
        *((_QWORD *)&v202 + v160) |= v159;
        v155 ^= (v155 << 6)
              - 0x61C8864680B583E9
              + (v155 >> 2)
              + re::TypedArgument::resolutionHash((re::TypedArgument *)v156);
        v156 += 56;
        v157 -= 112;
      }
      while (v157);
    }
    else
    {
      v155 = 0;
    }
    v161 = *(_QWORD *)(v21 + 64);
    if (v161)
    {
      v162 = 0;
      v163 = *(unsigned __int16 **)(v21 + 72);
      v164 = 112 * v161;
      do
      {
        v165 = v163[8];
        v166 = 1 << v165;
        v167 = re::Bitset<256>::toWordIndex(v165, v83);
        *((_QWORD *)&v202 + v167) |= v166;
        v162 ^= (v162 << 6)
              - 0x61C8864680B583E9
              + (v162 >> 2)
              + re::TypedArgument::resolutionHash((re::TypedArgument *)v163);
        v163 += 56;
        v164 -= 112;
      }
      while (v164);
    }
    else
    {
      v162 = 0;
    }
    v168 = (_anonymous_namespace_ *)MurmurHash3_x64_128((uint64_t)&v202, 32, 0, (unint64_t *)&v254);
    v169 = (*((_QWORD *)&v254 + 1) - 0x61C8864680B583E9 + ((_QWORD)v254 << 6) + ((unint64_t)v254 >> 2)) ^ v254;
    v170 = a11;
    if (*(_QWORD *)(a11 + 16))
    {
      v171 = *(_QWORD *)(a11 + 16);
      v200 = v171;
      if (v171)
      {
        a8 = 0;
        v172 = 8;
        do
        {
          a2 = *(id **)(v170 + 16);
          if (a2 <= a8)
            goto LABEL_198;
          a2 = *(id **)(v21 + 272);
          if (a2 <= a8)
            goto LABEL_199;
          v173 = *(_QWORD *)(v170 + 32) + v172;
          v174 = *(_QWORD *)(v21 + 280) + v172;
          v175 = *(_QWORD *)(v173 - 8);
          v176 = *(_QWORD *)v173;
          *(_QWORD *)(v173 - 8) = 0;
          *(_QWORD *)v173 = &str_110;
          v177 = v175 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v174 - 8) & 1;
          v178 = *(_QWORD *)v174;
          *(_QWORD *)v174 = v176;
          *(_QWORD *)&v254 = v177;
          *((_QWORD *)&v254 + 1) = v178;
          *(_QWORD *)(v174 - 8) = v175;
          re::StringID::destroyString((re::StringID *)&v254);
          *(_DWORD *)(v174 + 8) = *(_DWORD *)(v173 + 8);
          v170 = a11;
          a8 = (id *)((char *)a8 + 1);
          v172 += 24;
        }
        while ((id *)v200 != a8);
        v179 = 0;
        a8 = *(id **)(v21 + 272);
        while ((unint64_t)a8 > v200 - 1)
        {
          v180 = *(_QWORD *)(v21 + 280) + v179;
          v181 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)v180 >> 31) ^ (*(_QWORD *)v180 >> 1));
          v182 = (0x94D049BB133111EBLL * (v181 ^ (v181 >> 27))) ^ ((0x94D049BB133111EBLL * (v181 ^ (v181 >> 27))) >> 31);
          v183 = 0xBF58476D1CE4E5B9
               * ((*(unsigned __int16 *)(v180 + 18) | ((unint64_t)*(unsigned __int16 *)(v180 + 16) << 32)) ^ (4 * *(unsigned __int16 *)(v180 + 16)));
          v169 ^= (v169 << 6)
                - 0x61C8864680B583E9
                + (v169 >> 2)
                + (((v182 << 6)
                  - 0x61C8864680B583E9
                  + (v182 >> 2)
                  + ((0x94D049BB133111EBLL * (v183 ^ (v183 >> 27))) ^ ((0x94D049BB133111EBLL * (v183 ^ (v183 >> 27))) >> 31))) ^ v182);
          v179 += 24;
          if (24 * v200 == v179)
            goto LABEL_177;
        }
        goto LABEL_200;
      }
LABEL_177:
      v184 = *(_QWORD *)(v170 + 16);
      *(_QWORD *)(v170 + 16) = 0;
      if (v184)
      {
        v185 = *(re::StringID **)(v170 + 32);
        v186 = 24 * v184;
        do
        {
          re::StringID::destroyString(v185);
          v185 = (re::StringID *)((char *)v185 + 24);
          v186 -= 24;
        }
        while (v186);
      }
      ++*(_DWORD *)(v170 + 24);
    }
    v187 = v203;
    *(_OWORD *)(v21 + 296) = v202;
    *(_OWORD *)(v21 + 312) = v187;
    *(_WORD *)(v21 + 328) = v194;
    *(_WORD *)(v21 + 330) = v192;
    *(_BYTE *)(v21 + 332) = v197;
    *(_QWORD *)(v21 + 256) = v195;
    *(_QWORD *)(v21 + 136) = v123;
    *(_QWORD *)(v21 + 192) = v193;
    *(_QWORD *)(v21 + 224) = v140;
    *(_QWORD *)(v21 + 48) = v155;
    *(_QWORD *)(v21 + 104) = v162;
    *(_QWORD *)(v21 + 288) = v169;
    *(_BYTE *)v198 = 1;
    *(_QWORD *)(v198 + 8) = v21;
    goto LABEL_182;
  }
  v62 = 0;
  v63 = v217;
  v199 = v217 + 80 * v215;
  while (1)
  {
    if (*(_DWORD *)(v63 + 64) != 2)
    {
      v188 = "Attempting to load a shader graph with non-2D textures, which is not supported on devices with tier 1 argum"
             "ent buffer support.";
      goto LABEL_190;
    }
    if ((_DWORD)v62 == 16)
      break;
    re::DynamicString::format((re::DynamicString *)"textureCustomArray[%d]", (re::DynamicString *)&v254, v62);
    re::StringID::StringID((re::StringID *)v249, (const re::DynamicString *)&v254);
    if ((_QWORD)v254 && (BYTE8(v254) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v254 + 40))();
    v64 = *(_QWORD *)v249;
    v65 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * ((v64 >> 31) ^ (v64 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v64 >> 31) ^ (v64 >> 1))) >> 27));
    v66 = v65 ^ (v65 >> 31);
    if ((_QWORD)v204)
    {
      v67 = v66 % DWORD2(v205);
      v68 = *(unsigned int *)(*((_QWORD *)&v204 + 1) + 4 * v67);
      if ((_DWORD)v68 != 0x7FFFFFFF)
      {
        v69 = v205;
        v70 = *(const char **)&v249[8];
        do
        {
          if ((*(_QWORD *)(v69 + 40 * v68 + 8) ^ v64) <= 1)
          {
            v71 = *(const char **)(v69 + 40 * v68 + 16);
            if (v71 == v70 || !strcmp(v71, v70))
              goto LABEL_97;
          }
          v68 = *(_DWORD *)(v69 + 40 * v68) & 0x7FFFFFFF;
        }
        while (v68 != 0x7FFFFFFF);
      }
    }
    else
    {
      LODWORD(v67) = 0;
    }
    re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy((uint64_t)&v204, v67, v66, (StringID *)v249, (const StringID *)(v63 + 16));
    ++HIDWORD(v207);
LABEL_97:
    v62 = (v62 + 1);
    re::StringID::destroyString((re::StringID *)v249);
    v63 += 80;
    v52 = v201;
    if (v63 == v199)
      goto LABEL_98;
  }
  v188 = "Attempting to load a shader graph with more than 16 textures, which is not supported on devices with tier 1 arg"
         "ument buffer support.";
LABEL_190:
  if ((BYTE8(v254) & 1) != 0)
    v189 = (char *)v255;
  else
    v189 = (char *)&v254 + 9;
  re::WrappedError::make((re::WrappedError *)CFSTR("REMaterialBuilderErrorDomain"), (const __CFString *)0x5A, (uint64_t)v189, v249);
  v190 = *(_QWORD *)v249;
  *(_QWORD *)v249 = 0;
  *(_BYTE *)v198 = 0;
  *(_QWORD *)(v198 + 8) = v190;

  if ((_QWORD)v254 && (BYTE8(v254) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v254 + 40))();
LABEL_182:
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v204);
LABEL_183:
  v46.n128_f64[0] = re::HashTable<re::StringID,re::DynamicArray<re::TypedArgument>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v248);
LABEL_184:
  if (v208[0] && v209 && (v210 & 1) != 0)
    (*(void (**)(__n128))(*(_QWORD *)v209 + 40))(v46);
LABEL_6:
  if (v212[0])

  re::DynamicArray<re::MetalTypeInfo>::deinit((uint64_t)v214);
  v26 = v218;
  if (v218)
  {
    v27 = (id *)v222;
    if (v222)
    {
      if (v220)
      {
        v28 = 8 * v220;
        do
        {
          if (*v27)
          {

            *v27 = 0;
          }
          ++v27;
          v28 -= 8;
        }
        while (v28);
        v26 = v218;
        v27 = (id *)v222;
      }
      (*(void (**)(uint64_t, id *))(*(_QWORD *)v26 + 40))(v26, v27);
    }
  }
  v29 = v223[0];
  if (v223[0])
  {
    v30 = v226;
    if (v226)
    {
      if (v224)
      {
        v31 = 32 * v224;
        do
        {
          re::StringID::destroyString(v30);
          v30 = (re::StringID *)((char *)v30 + 32);
          v31 -= 32;
        }
        while (v31);
        v29 = v223[0];
        v30 = v226;
      }
      (*(void (**)(uint64_t, re::StringID *))(*(_QWORD *)v29 + 40))(v29, v30);
    }
  }
  v32 = v227[0];
  if (v227[0])
  {
    v33 = v230;
    if (v230)
    {
      if (v228)
      {
        v34 = 24 * v228;
        do
        {
          re::StringID::destroyString(v33);
          v33 = (re::StringID *)((char *)v33 + 24);
          v34 -= 24;
        }
        while (v34);
        v32 = v227[0];
        v33 = v230;
      }
      (*(void (**)(uint64_t, re::StringID *))(*(_QWORD *)v32 + 40))(v32, v33);
    }
    v230 = 0;
  }
  v35 = v231[0];
  if (v231[0])
  {
    v36 = v234;
    if (v234)
    {
      if (v232)
      {
        v37 = 32 * v232;
        do
        {
          re::StringID::destroyString(v36);
          v36 = (re::StringID *)((char *)v36 + 32);
          v37 -= 32;
        }
        while (v37);
        v35 = v231[0];
        v36 = v234;
      }
      (*(void (**)(uint64_t, re::StringID *))(*(_QWORD *)v35 + 40))(v35, v36);
    }
    v234 = 0;
  }
  re::DynamicArray<re::TypedArgument>::deinit((uint64_t)v235);
  re::DynamicArray<re::TypedArgument>::deinit((uint64_t)v239);
  result = v243[0];
  if (v243[0])
  {
    v39 = v246;
    if (v246)
    {
      if (v244)
      {
        v40 = 24 * v244;
        do
        {
          re::StringID::destroyString(v39);
          v39 = (re::StringID *)((char *)v39 + 24);
          v40 -= 24;
        }
        while (v40);
        result = v243[0];
        v39 = v246;
      }
      return (*(uint64_t (**)(uint64_t, re::StringID *))(*(_QWORD *)result + 40))(result, v39);
    }
  }
  return result;
}

void *makeString(const char *a1)
{
  re *v2;
  size_t v3;
  uint64_t *v4;
  void *v5;

  v2 = (re *)strlen(a1);
  v3 = (size_t)v2 + 1;
  v4 = re::globalAllocators(v2);
  v5 = (void *)(*(uint64_t (**)(uint64_t, size_t, _QWORD))(*(_QWORD *)v4[2] + 32))(v4[2], v3, 0);
  return memcpy(v5, a1, v3);
}

re *re::internal::destroyPersistent<re::TechniqueStage>(re *result, uint64_t a2, re::TechniqueStage *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::TechniqueStage::~TechniqueStage(a3);
    return (re *)(*(uint64_t (**)(uint64_t, re::TechniqueStage *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

unint64_t re::TypedArgument::resolutionHash(re::TypedArgument *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)this >> 31) ^ (*(_QWORD *)this >> 1));
  v2 = (0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) ^ ((0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) >> 31);
  v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * *((unsigned __int16 *)this + 8)) ^ ((0xBF58476D1CE4E5B9
                                                                   * *((unsigned __int16 *)this + 8)) >> 27));
  return ((v2 << 6)
        + (v2 >> 2)
        + ((re::MetalTypeInfo::resolutionHash((re::TypedArgument *)((char *)this + 24))
          + ((v3 ^ (v3 >> 31)) << 6)
          + ((v3 ^ (v3 >> 31)) >> 2)
          - 0x61C8864680B583E9) ^ v3 ^ (v3 >> 31))
        - 0x61C8864680B583E9) ^ v2;
}

void re::makeAttributeArguments(id *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  char *i;
  id v7;
  _anonymous_namespace_ *v8;
  unsigned __int16 v9;
  StringID v10;
  uint64_t v11[2];
  __int16 v12;
  unsigned __int16 v13;

  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  v4 = (char *)objc_msgSend(objc_msgSend(*a1, sel_vertexAttributes), sel_count);
  if (v4)
  {
    v5 = v4;
    re::DynamicArray<re::BlendParameterInputNode>::setCapacity((_QWORD *)a2, (unint64_t)v4);
    for (i = 0; i != v5; ++i)
    {
      v7 = objc_msgSend(objc_msgSend(*a1, sel_vertexAttributes), sel_objectAtIndex_, i);
      if (objc_msgSend(v7, sel_isActive))
      {
        v8 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(v7, sel_name), sel_UTF8String);
        *(_QWORD *)&v10.var0 = 0;
        v10.var1 = (char *)&str_110;
        LOWORD(v8) = (unsigned __int16)objc_msgSend(v7, sel_attributeIndex);
        v9 = (unsigned __int16)objc_msgSend(v7, sel_attributeType);
        re::StringID::StringID((re::StringID *)v11, &v10);
        v12 = (__int16)v8;
        v13 = v9;
        re::StringID::destroyString((re::StringID *)&v10);
        re::DynamicArray<re::AttributeArgument>::add((_QWORD *)a2, v11);
        re::StringID::destroyString((re::StringID *)v11);
      }
    }
  }
}

_QWORD *re::DynamicArray<re::AttributeArgument>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::AttributeArgument>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 24 * v4;
  v6 = *a2;
  *(_QWORD *)v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  *(_DWORD *)(v5 + 16) = *((_DWORD *)a2 + 4);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::TechniqueDefinitionBuilder::hashFunctionConstants(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t As64Bits;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v3 = 0;
  v4 = a2 << 6;
  do
  {
    if ((*(_BYTE *)(a1 + 8) & 1) != 0)
      v5 = *(const char **)(a1 + 16);
    else
      v5 = (const char *)(a1 + 9);
    v6 = strlen(v5);
    if (v6)
    {
      MurmurHash3_x64_128((uint64_t)v5, v6, 0, v16);
      v7 = (v16[1] - 0x61C8864680B583E9 + (v16[0] << 6) + (v16[0] >> 2)) ^ v16[0];
    }
    else
    {
      v7 = 0;
    }
    v8 = v7 - 0x61C8864680B583E9;
    As64Bits = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)a1);
    v10 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (As64Bits ^ (As64Bits >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                    * (As64Bits ^ (As64Bits >> 30))) >> 27));
    v11 = ((v8 << 6) - 0x61C8864680B583E9 + (v8 >> 2) + (v10 ^ (v10 >> 31))) ^ v8;
    v12 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(a1 + 32)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *(unsigned __int16 *)(a1 + 32)) >> 27));
    v13 = ((v12 ^ (v12 >> 31)) - 0x61C8864680B583E9 + (v11 << 6) + (v11 >> 2)) ^ v11;
    v14 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(a1 + 34)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *(unsigned __int16 *)(a1 + 34)) >> 27));
    v3 ^= v13 ^ ((v14 ^ (v14 >> 31)) - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2));
    a1 += 64;
    v4 -= 64;
  }
  while (v4);
  return v3;
}

uint64_t re::TechniqueDefinitionBuilder::hashFunctionConstants(uint64_t a1, uint64_t a2, re::FunctionConstantUsageMask *this)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t As64Bits;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v5 = 0;
  v6 = a2 << 6;
  do
  {
    if (re::FunctionConstantUsageMask::getIndexUsage(this, *(unsigned __int16 *)(a1 + 34)))
    {
      if ((*(_BYTE *)(a1 + 8) & 1) != 0)
        v7 = *(const char **)(a1 + 16);
      else
        v7 = (const char *)(a1 + 9);
      v8 = strlen(v7);
      if (v8)
      {
        MurmurHash3_x64_128((uint64_t)v7, v8, 0, v18);
        v9 = (v18[1] - 0x61C8864680B583E9 + (v18[0] << 6) + (v18[0] >> 2)) ^ v18[0];
      }
      else
      {
        v9 = 0;
      }
      v10 = v9 - 0x61C8864680B583E9;
      As64Bits = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)a1);
      v12 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (As64Bits ^ (As64Bits >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                      * (As64Bits ^ (As64Bits >> 30))) >> 27));
      v13 = ((v10 << 6) - 0x61C8864680B583E9 + (v10 >> 2) + (v12 ^ (v12 >> 31))) ^ v10;
      v14 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(a1 + 32)) ^ ((0xBF58476D1CE4E5B9
                                                                       * *(unsigned __int16 *)(a1 + 32)) >> 27));
      v15 = ((v14 ^ (v14 >> 31)) - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13;
      v16 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(a1 + 34)) ^ ((0xBF58476D1CE4E5B9
                                                                       * *(unsigned __int16 *)(a1 + 34)) >> 27));
      v5 ^= v15 ^ ((v16 ^ (v16 >> 31)) - 0x61C8864680B583E9 + (v15 << 6) + (v15 >> 2));
    }
    a1 += 64;
    v6 -= 64;
  }
  while (v6);
  return v5;
}

BOOL re::FunctionConstantUsageMask::getIndexUsage(re::FunctionConstantUsageMask *this, unsigned int a2)
{
  unsigned __int16 v3;

  v3 = a2;
  if (a2 > 0x7F)
    return re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::contains((uint64_t)this + 16, &v3);
  else
    return (*((_QWORD *)this + re::Bitset<128>::toWordIndex((uint64_t)this, a2)) >> a2) & 1;
}

void re::TechniqueDefinitionBuilder::buildPipelineData(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _BYTE *v11;
  _QWORD *v12;
  id v13;
  id v14;
  char v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  char v21;
  _BYTE v22[15];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v19[0] = a1;
  v19[1] = a2;
  v17 = 0;
  v18 = a3;
  if ((v21 & 1) != 0)
    v11 = *(_BYTE **)&v22[7];
  else
    v11 = v22;
  re::WrappedError::make((re::WrappedError *)CFSTR("REMaterialBuilderErrorDomain"), 0, (uint64_t)v11, &v16);
  if (v20 && (v21 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v20 + 40))();
  v12 = operator new(0x40uLL);
  *v12 = &off_24ED73AC8;
  v12[1] = v19;
  v12[2] = a4;
  v12[3] = &v18;
  v12[4] = a6;
  v12[5] = &v16;
  v12[6] = a5;
  v12[7] = &v17;
  v23 = v12;
  re::runInLocalAutoreleasePool((uint64_t)&v20);
  (*(void (**)(_QWORD *))(*v12 + 40))(v12);
  v13 = (id)v17;
  if (v17)
  {
    v14 = (id)(v17 + 8);
    v15 = 1;
  }
  else
  {
    v13 = v16;
    v15 = 0;
  }
  *(_BYTE *)a7 = v15;
  *(_QWORD *)(a7 + 8) = v13;

  if (v17)
}

uint64_t re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::FixedArray<re::TechniqueFunctionConstant>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;

  if (!*(_QWORD *)a1)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (!v4)
      return (uint64_t)a1;
  }
  v5 = *(_QWORD *)(a2 + 8);
  if (*((_QWORD *)a1 + 1) == v5)
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *>((uint64_t)&v7, *(uint64_t **)a2, (uint64_t *)(*(_QWORD *)a2 + (v5 << 6)), *((_QWORD *)a1 + 2));
    return (uint64_t)a1;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::MaterialDefinitionBuilder::result(re::MaterialDefinitionBuilder *this@<X0>, id *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  int8x8_t v6;
  const char *v7;
  _anonymous_namespace_ *v8;
  unint64_t v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  unsigned __int16 v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  void **v33;
  _anonymous_namespace_ *v34;
  _anonymous_namespace_ *v35;
  const char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _anonymous_namespace_ *v40;
  uint64_t v41;
  void *v42;
  signed int v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  _anonymous_namespace_ *v55;
  uint64_t v56;
  unsigned __int8 v57;
  const char *v58;
  int v59;
  BOOL v60;
  char v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned __int16 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int16 v76;
  uint64_t v77;
  uint64_t v78;
  _BOOL8 v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  _BOOL8 v83;
  NSObject *v84;
  uint64_t v85;
  _QWORD *v86;
  size_t v87;
  unint64_t v88;
  _anonymous_namespace_ *v89;
  uint64_t v90;
  int v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  const void *v95;
  _anonymous_namespace_ *v96;
  uint64_t v97;
  signed int v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  _QWORD *v104;
  const char **v105;
  size_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  int v122;
  uint64_t v123;
  _BOOL8 v124;
  NSObject *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  _DWORD *v134;
  uint64_t v135;
  NSObject *v136;
  uint64_t v137;
  unsigned int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _BOOL8 v151;
  uint64_t v152;
  NSObject *v153;
  uint64_t v154;
  _BOOL8 v155;
  uint64_t v156;
  NSObject *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _DWORD *v165;
  char v166;
  re *v167;
  NSObject *v168;
  const char *v169;
  uint64_t v170;
  NSObject *v171;
  uint64_t v172;
  NSObject *v173;
  uint64_t v174;
  NSObject *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  int *v192;
  int v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  int *v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  int *v202;
  int v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  double v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  int *v220;
  int v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  _BOOL4 v228;
  unsigned int v229;
  unsigned int v230;
  uint64_t v231;
  int *v232;
  int v233;
  _QWORD *v234;
  double v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  int *v240;
  int v241;
  unint64_t v242;
  unsigned int v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  unsigned int *v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  _BOOL4 v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  _QWORD *v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t *v268;
  _QWORD *v269;
  id obj;
  uint64_t v272;
  uint64_t v273;
  int v274;
  _QWORD *v275;
  uint64_t v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  unsigned int *v282;
  _QWORD *v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int8x16_t v288;
  _OWORD v289[2];
  int v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  unint64_t v294;
  _QWORD *v295;
  _OWORD v296[2];
  unint64_t v297;
  uint64_t v298[2];
  char v299[2];
  uint8_t buf[32];
  uint8_t v301[48];
  __int128 v302;
  __int128 v303;
  _BYTE v304[28];
  __int16 v305;
  unint64_t v306;
  uint64_t v307;

  v3 = (uint64_t)this;
  v307 = *MEMORY[0x24BDAC8D0];
  v4 = re::globalAllocators(this);
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 1440, 8);
  bzero(v5, 0x5A0uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
  *v5 = &off_24ED73B48;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *((_DWORD *)v5 + 12) = 0;
  v6 = (int8x8_t)0x7FFFFFFFLL;
  *((_OWORD *)v5 + 4) = 0u;
  v279 = (uint64_t)(v5 + 8);
  *(_QWORD *)((char *)v5 + 52) = 0x7FFFFFFFLL;
  *((_OWORD *)v5 + 5) = 0u;
  *((_DWORD *)v5 + 24) = 0;
  *((_OWORD *)v5 + 7) = 0u;
  v268 = v5 + 14;
  *(_QWORD *)((char *)v5 + 100) = 0x7FFFFFFFLL;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *(_OWORD *)((char *)v5 + 156) = 0u;
  *(_QWORD *)((char *)v5 + 172) = 0x7FFFFFFFLL;
  *(_OWORD *)(v5 + 23) = 0u;
  *(_OWORD *)(v5 + 25) = 0u;
  *(_OWORD *)(v5 + 27) = 0u;
  *(_OWORD *)(v5 + 29) = 0u;
  re::MaterialParameterTable::MaterialParameterTable((re::MaterialParameterTable *)(v5 + 31));
  v283 = v5;
  *((_DWORD *)v5 + 352) = 0;
  *((_OWORD *)v5 + 87) = 0u;
  *((_OWORD *)v5 + 86) = 0u;
  *(_QWORD *)((char *)v5 + 1412) = 0x7FFFFFFFLL;
  v5[178] = 0;
  *((_WORD *)v5 + 716) = 0;
  if ((*(_BYTE *)(v3 + 8) & 1) != 0)
    v7 = *(const char **)(v3 + 16);
  else
    v7 = (const char *)(v3 + 9);
  v5[178] = makeString(v7);
  re::DynamicString::DynamicString((re::DynamicString *)v296, (const re::DynamicString *)(v3 + 32));
  *((_BYTE *)v5 + 1432) = 0;
  v8 = *(_anonymous_namespace_ **)&v296[0];
  if (*(_QWORD *)&v296[0])
  {
    if ((BYTE8(v296[0]) & 1) != 0)
      v8 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v296[0] + 40))();
    memset(v296, 0, sizeof(v296));
  }
  v269 = v5 + 23;
  v265 = v5 + 2;
  v293 = 0;
  v294 = 0;
  v295 = 0;
  v9 = *(unsigned int *)(v3 + 1148);
  v292 = 0;
  v290 = 0;
  memset(v289, 0, sizeof(v289));
  v291 = 0x7FFFFFFFLL;
  v272 = *(unsigned int *)(v3 + 1152);
  v266 = (uint64_t)(v5 + 31);
  v12 = 0;
  if ((_DWORD)v272)
  {
    v13 = (int *)(*(_QWORD *)(v3 + 1136) + 8);
    v14 = v5;
    while (1)
    {
      v15 = *v13;
      v13 += 14;
      if (v15 < 0)
        break;
      if (v272 == ++v12)
      {
        LODWORD(v12) = *(_DWORD *)(v3 + 1152);
        break;
      }
    }
  }
  else
  {
    v14 = v5;
  }
  v267 = v5 + 172;
  v16 = 0x9E3779B97F4A7C17;
  v278 = v3;
  if ((_DWORD)v272 != (_DWORD)v12)
  {
    v29 = v12;
    v30 = v14 + 1;
    if (!v14)
      v30 = 0;
    obj = v30;
    do
    {
      v31 = *(_QWORD *)(*(_QWORD *)(v3 + 1136) + 56 * v29 + 48);
      v32 = re::globalAllocators(v10);
      v33 = (void **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32[2] + 32))(v32[2], 2856, 8);
      bzero(v33, 0xB28uLL);
      v33[6] = 0;
      v33[5] = (void *)1;
      *(_OWORD *)(v33 + 7) = 0u;
      *((_WORD *)v33 + 36) = 0;
      *((_BYTE *)v33 + 74) = 1;
      *((_BYTE *)v33 + 76) = 1;
      *((_WORD *)v33 + 39) = -1;
      *(_WORD *)((char *)v33 + 81) = 1031;
      *(void **)((char *)v33 + 84) = (void *)0x500000001;
      v33[12] = (void *)0x500000001;
      v33[16] = 0;
      *((_DWORD *)v33 + 27) = 15;
      *(_OWORD *)(v33 + 17) = 0u;
      *((_DWORD *)v33 + 38) = 0;
      v33[14] = 0;
      *(void **)((char *)v33 + 117) = 0;
      re::MaterialParameterTable::MaterialParameterTable((re::MaterialParameterTable *)(v33 + 21));
      re::MaterialParameterTable::MaterialParameterTable((re::MaterialParameterTable *)(v33 + 162));
      v9 = (unint64_t)(v33 + 305);
      *(_OWORD *)(v33 + 305) = 0u;
      *(_OWORD *)(v33 + 307) = 0u;
      v35 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v33 + 305, 0);
      *(_OWORD *)(v33 + 309) = 0u;
      *(_OWORD *)(v33 + 311) = 0u;
      re::DynamicString::setCapacity(v33 + 309, 0);
      *(_OWORD *)(v33 + 315) = 0u;
      *(_OWORD *)(v33 + 317) = 0u;
      *(_OWORD *)(v33 + 313) = 0u;
      v33[319] = (void *)0x7FFFFFFF00000000;
      *((_DWORD *)v33 + 640) = 0;
      *(_OWORD *)(v33 + 321) = 0u;
      *(_OWORD *)(v33 + 323) = 0u;
      *(_OWORD *)(v33 + 325) = 0u;
      *((_DWORD *)v33 + 654) = 0;
      *(void **)((char *)v33 + 2620) = (void *)0x7FFFFFFF;
      *((_BYTE *)v33 + 2632) = 0;
      *(_OWORD *)(v33 + 331) = 0u;
      *(_OWORD *)(v33 + 333) = 0u;
      *((_DWORD *)v33 + 670) = 0;
      v275 = v33 + 331;
      *(void **)((char *)v33 + 2684) = (void *)0x7FFFFFFF;
      v33[339] = 0;
      *(_OWORD *)(v33 + 337) = 0u;
      objc_initWeak(v33 + 342, 0);
      *(_OWORD *)(v33 + 343) = 0u;
      *(_OWORD *)(v33 + 345) = 0u;
      *((_DWORD *)v33 + 694) = 0;
      *(void **)((char *)v33 + 2780) = (void *)0x7FFFFFFF;
      *(_OWORD *)(v33 + 349) = 0u;
      *(_OWORD *)(v33 + 351) = 0u;
      *((_DWORD *)v33 + 706) = 0;
      *(void **)((char *)v33 + 2828) = (void *)0x7FFFFFFF;
      *((_DWORD *)v33 + 710) = 0;
      *((_DWORD *)v33 + 711) = 0x10000;
      *((_BYTE *)v33 + 2848) = 0;
      if ((*(_BYTE *)(v31 + 8) & 1) != 0)
        v36 = *(const char **)(v31 + 16);
      else
        v36 = (const char *)(v31 + 9);
      *v33 = makeString(v36);
      v37 = *(_OWORD *)(v31 + 240);
      v38 = *(_OWORD *)(v31 + 256);
      v39 = *(_OWORD *)(v31 + 272);
      *((_DWORD *)v33 + 30) = *(_DWORD *)(v31 + 288);
      *(_OWORD *)(v33 + 13) = v39;
      *(_OWORD *)(v33 + 11) = v38;
      *(_OWORD *)(v33 + 9) = v37;
      if (*((_BYTE *)v33 + 124) || *(_BYTE *)(v31 + 292))
      {
        if (!*((_BYTE *)v33 + 124) || *(_BYTE *)(v31 + 292))
        {
          if (!*((_BYTE *)v33 + 124) && *(_BYTE *)(v31 + 292))
            *((_BYTE *)v33 + 124) = 1;
          *((_BYTE *)v33 + 125) = *(_BYTE *)(v31 + 293);
        }
        else
        {
          *((_BYTE *)v33 + 124) = 0;
        }
      }
      re::DynamicArray<re::RenderAttachmentState>::operator=((uint64_t)(v33 + 16), (uint64_t *)(v31 + 296));
      v33[303] = *(void **)(v31 + 32);
      re::DynamicString::operator=((re::DynamicString *)(v33 + 305), (re::DynamicString *)(v31 + 40));
      *(_OWORD *)(v33 + 313) = *(_OWORD *)(v31 + 72);
      re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::operator=((uint64_t)(v33 + 315), v31 + 88);
      v33[304] = *(void **)(v31 + 136);
      re::DynamicString::operator=((re::DynamicString *)(v33 + 309), (re::DynamicString *)(v31 + 144));
      *(_OWORD *)(v33 + 321) = *(_OWORD *)(v31 + 176);
      v40 = (_anonymous_namespace_ *)re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::operator=((uint64_t)(v33 + 323), v31 + 192);
      v42 = *(void **)(v31 + 528);
      if (*((_BYTE *)v33 + 2632) || *(_BYTE *)(v31 + 520))
      {
        if (!*((_BYTE *)v33 + 2632) || *(_BYTE *)(v31 + 520))
        {
          if (!*((_BYTE *)v33 + 2632) && *(_BYTE *)(v31 + 520))
            *((_BYTE *)v33 + 2632) = 1;
          v33[330] = v42;
        }
        else
        {
          v33[330] = 0;
          *((_BYTE *)v33 + 2632) = 0;
        }
      }
      if (v275 != (_QWORD *)(v31 + 536))
      {
        v41 = *(_QWORD *)(v31 + 536);
        if (*v275)
        {
          if (v41)
          {
            re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy((uint64_t)v275, v31 + 536);
            ++*((_DWORD *)v33 + 672);
          }
          else
          {
            re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear((uint64_t)v275);
          }
        }
        else if (v41)
        {
          if (*(_DWORD *)(v31 + 564) <= 3u)
            v43 = 3;
          else
            v43 = *(_DWORD *)(v31 + 564);
          re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v275, v41, v43);
          re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy((uint64_t)v275, v31 + 536);
        }
      }
      v44 = *(uint64_t **)(v31 + 512);
      v45 = *(_QWORD *)(v31 + 496);
      if (!v33[337])
      {
        if (!v45)
          goto LABEL_76;
        v33[338] = (void *)v45;
        if (v45 >> 61)
          goto LABEL_471;
        v33[339] = v47;
        if (!v47)
          goto LABEL_472;
        v9 = (unint64_t)v47;
        if (v45 != 1)
        {
          bzero(v47, 8 * v45 - 8);
          v9 += 8 * v45 - 8;
        }
        *(_QWORD *)v9 = 0;
      }
      if (v33[338] != (void *)v45)
        goto LABEL_470;
      if (v45)
      {
        v48 = v33[339];
        v49 = 8 * v45;
        do
        {
          v50 = *v44++;
          *v48++ = v50;
          v49 -= 8;
        }
        while (v49);
      }
      v51 = *(_QWORD *)(v31 + 496);
      if (!v51)
      {
LABEL_76:
        v52 = 0;
        v55 = (_anonymous_namespace_ *)(v33 + 6);
        goto LABEL_77;
      }
      v52 = 0;
      v53 = *(uint64_t **)(v31 + 512);
      v54 = 8 * v51;
      v55 = (_anonymous_namespace_ *)(v33 + 6);
      do
      {
        v56 = *v53++;
        v52 ^= v56;
        v54 -= 8;
      }
      while (v54);
LABEL_77:
      v33[340] = (void *)v52;
      *((_BYTE *)v33 + 2845) = *(_BYTE *)(v31 + 685);
      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)(v33 + 343), v31 + 584);
      *((_DWORD *)v33 + 710) = *(_DWORD *)(v31 + 680);
      re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)(v33 + 349), v31 + 632);
      *((_BYTE *)v33 + 2844) = 0;
      v57 = atomic_load((unsigned __int8 *)&qword_254118DF8);
      if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_254118DF8))
      {
        _MergedGlobals_374 = objc_msgSend(a2[23], "supportsDynamicAttributeStride");
        __cxa_guard_release(&qword_254118DF8);
      }
      if (_MergedGlobals_374)
      {
        if ((*(_QWORD *)(v31 + 48) & 1) != 0)
          v58 = *(const char **)(v31 + 56);
        else
          v58 = (const char *)(v31 + 49);
        v59 = strcmp(v58, "vsRealityPbrOpenSubdiv");
        if (*(_BYTE *)(v31 + 684))
          v60 = v59 == 0;
        else
          v60 = 1;
        v61 = !v60;
        *((_BYTE *)v33 + 2844) = v61;
      }
      if (*((_BYTE *)v33 + 2846) || *(_BYTE *)(v31 + 686))
      {
        if (!*((_BYTE *)v33 + 2846) || *(_BYTE *)(v31 + 686))
        {
          if (!*((_BYTE *)v33 + 2846) && *(_BYTE *)(v31 + 686))
            *((_BYTE *)v33 + 2846) = 1;
          *((_BYTE *)v33 + 2847) = *(_BYTE *)(v31 + 687);
        }
        else
        {
          *((_BYTE *)v33 + 2846) = 0;
        }
      }
      v62 = (uint64_t)a2[3];
      re::StringID::StringID((re::StringID *)v298, (const re::DynamicString *)(v31 + 40));
      re::MaterialManager::getEngineShaderMetadata(v62, v298, v299);
      re::StringID::destroyString((re::StringID *)v298);
      if (v299[0])
        v63 = v299[1];
      else
        v63 = 0;
      *((_BYTE *)v33 + 2848) = v63;
      v280 = a2[3];
      re::FunctionConstantsEnumerator::createEnumerator((uint64_t *)(v31 + 376), *(uint64_t **)(v31 + 472), *(_QWORD *)(v31 + 456), v31 + 336, v280 + 121, (uint64_t)v301);
      re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)v33 + 1, (uint64_t *)v301);
      *((_OWORD *)v33 + 2) = *(_OWORD *)&v301[24];
      re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(v301);
      re::FunctionConstantsEnumerator::createPermutation((_anonymous_namespace_ *)(v33 + 1), 0, *(_QWORD *)(v31 + 368), *(_QWORD *)(v31 + 352), (uint64_t)v301);
      *(_QWORD *)v304 = *(_QWORD *)&v301[32];
      *(_QWORD *)&v304[8] = *(_QWORD *)&v301[16];
      re::FixedArray<re::TechniqueFunctionConstant>::operator=(v55, (uint64_t)v304);
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v301);
      if (*((_BYTE *)v33 + 2845))
      {
        *(_QWORD *)v301 = v31 + 376;
        v64 = *(_QWORD *)(v31 + 392);
        if (v64 >= 0x10)
        {
          v65 = 0;
          v66 = *(_QWORD *)(v31 + 376);
          v67 = v64 >> 4;
          while (1)
          {
            v68 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v66 + v65)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
            *(_QWORD *)&v301[8] = (unsigned __int16)~v68;
            if (v68 != 0xFFFF)
              break;
            v65 += 16;
            if (!--v67)
              goto LABEL_108;
          }
          v69 = __clz(__rbit64((unsigned __int16)~v68)) + v65;
          for (*(_QWORD *)&v301[16] = v69; *(_QWORD *)&v301[16] != -1; v69 = *(_QWORD *)&v301[16])
          {
            v82 = *(_QWORD *)(*(_QWORD *)v301 + 8) + 96 * v69;
            v83 = re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)(v33 + 343), v82);
            if (!v83)
            {
              v84 = *re::graphicsLogObjects((re *)v83);
              if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
              {
                if ((*(_BYTE *)(v82 + 8) & 1) != 0)
                  v85 = *(_QWORD *)(v82 + 16);
                else
                  v85 = v82 + 9;
                *(_DWORD *)v304 = 136315138;
                *(_QWORD *)&v304[4] = v85;
                _os_log_error_impl(&dword_224FE9000, v84, OS_LOG_TYPE_ERROR, "Missing runtime function constant fallback value for varying function constant %s. Please add fallback values to the material definition.", v304, 0xCu);
              }
            }
            re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v301);
          }
        }
LABEL_108:
        v70 = *(_QWORD *)(v31 + 456);
        if (v70)
        {
          v71 = *(uint64_t **)(v31 + 472);
          v72 = &v71[v70];
          do
          {
            v297 = *v71;
            v73 = re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::find(v280 + 121, (uint64_t *)&v297);
            re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::HashBrown((uint64_t)v301, (uint64_t *)(v280[122] + 72 * v73 + 8));
            *(_QWORD *)v304 = v301;
            *(_QWORD *)&v304[8] = 0;
            if (*(_QWORD *)&v301[16] >= 0x10uLL)
            {
              v74 = 0;
              v75 = *(_QWORD *)&v301[16] >> 4;
              while (1)
              {
                v76 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)v301 + v74)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
                *(_QWORD *)&v304[8] = (unsigned __int16)~v76;
                if (v76 != 0xFFFF)
                  break;
                v74 += 16;
                if (!--v75)
                  goto LABEL_116;
              }
              v77 = __clz(__rbit64((unsigned __int16)~v76)) + v74;
              for (*(_QWORD *)&v304[16] = v77; *(_QWORD *)&v304[16] != -1; v77 = *(_QWORD *)&v304[16])
              {
                v78 = *(_QWORD *)(*(_QWORD *)v304 + 8) + 96 * v77;
                v79 = re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)(v33 + 343), v78);
                if (!v79)
                {
                  v80 = *re::graphicsLogObjects((re *)v79);
                  if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
                  {
                    if ((*(_BYTE *)(v78 + 8) & 1) != 0)
                      v81 = *(_QWORD *)(v78 + 16);
                    else
                      v81 = v78 + 9;
                    *(_DWORD *)buf = 136315394;
                    *(_QWORD *)&buf[4] = v81;
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v297;
                    _os_log_error_impl(&dword_224FE9000, v80, OS_LOG_TYPE_ERROR, "Missing runtime function constant fallback value for varying function constant %s in default variation %lu. This is an RE bug.", buf, 0x16u);
                  }
                }
                re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v304);
              }
            }
LABEL_116:
            re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v301);
            ++v71;
          }
          while (v71 != v72);
        }
      }
      v9 = v292;
      v45 = v294;
      if (v294 <= v292)
        goto LABEL_468;
      v86 = v295;
      v295[v292] = v33;
      objc_storeWeak(v33 + 342, obj);
      v87 = strlen((const char *)*v33);
      if (v87)
      {
        MurmurHash3_x64_128((uint64_t)*v33, v87, 0, (unint64_t *)v301);
        v16 = 0x9E3779B97F4A7C17;
        v88 = (*(_QWORD *)&v301[8] - 0x61C8864680B583E9 + (*(_QWORD *)v301 << 6) + (*(_QWORD *)v301 >> 2)) ^ *(_QWORD *)v301;
        v3 = v278;
      }
      else
      {
        v88 = 0;
        v3 = v278;
        v16 = 0x9E3779B97F4A7C17;
      }
      v89 = (_anonymous_namespace_ *)strlen((const char *)v283[178]);
      if (v89)
      {
        v89 = (_anonymous_namespace_ *)MurmurHash3_x64_128(v283[178], (int)v89, 0, (unint64_t *)v301);
        v90 = (*(_QWORD *)&v301[8] - 0x61C8864680B583E9 + (*(_QWORD *)v301 << 6) + (*(_QWORD *)v301 >> 2)) ^ *(_QWORD *)v301;
      }
      else
      {
        v90 = 0;
      }
      v9 = v292;
      if (v45 <= v292)
      {
LABEL_469:
        *(_QWORD *)buf = 0;
        v302 = 0u;
        v303 = 0u;
        memset(v301, 0, sizeof(v301));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v304 = 136315906;
        *(_QWORD *)&v304[4] = "operator[]";
        *(_WORD *)&v304[12] = 1024;
        *(_DWORD *)&v304[14] = 468;
        *(_WORD *)&v304[18] = 2048;
        *(_QWORD *)&v304[20] = v9;
        v305 = 2048;
        v306 = v45;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_470:
        re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
        _os_crash();
        __break(1u);
LABEL_471:
        re::internal::assertLog((re::internal *)6, v46, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v45);
        _os_crash();
        __break(1u);
LABEL_472:
        re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
LABEL_473:
        *(_QWORD *)buf = 0;
        v302 = 0u;
        v303 = 0u;
        memset(v301, 0, sizeof(v301));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v304 = 136315906;
        *(_QWORD *)&v304[4] = "slice";
        *(_WORD *)&v304[12] = 1024;
        *(_DWORD *)&v304[14] = 502;
        *(_WORD *)&v304[18] = 2048;
        *(_QWORD *)&v304[20] = 0;
        v305 = 2048;
        v306 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_474:
        re::internal::assertLog((re::internal *)7, v11, "assertion failure: '%s' (%s:line %i) Invalid count. index = %zu, count = %zu, array size = %zu", "endIndexExclusive <= m_size", "slice", 512, 0, v9, v94);
        _os_crash();
        __break(1u);
LABEL_475:
        re::internal::assertLog((re::internal *)4, v101, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
        _os_crash();
        __break(1u);
LABEL_476:
        v298[0] = 0;
        v302 = 0u;
        v303 = 0u;
        memset(v301, 0, sizeof(v301));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v304 = 136315906;
        *(_QWORD *)&v304[4] = "operator[]";
        *(_WORD *)&v304[12] = 1024;
        *(_DWORD *)&v304[14] = 789;
        *(_WORD *)&v304[18] = 2048;
        *(_QWORD *)&v304[20] = 0;
        v305 = 2048;
        v306 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)(v86[v292] + 2728) = ((v88 << 6) - 0x61C8864680B583E9 + (v88 >> 2) + v90) ^ v88;
      v9 = (unint64_t)*v33;
      re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned int &>((uint64_t)v289, (re::DynamicString *)v301, &v292);
      v10 = *(re **)v301;
      if (*(_QWORD *)v301 && (v301[8] & 1) != 0)
        v10 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)v301 + 40))();
      ++v292;
      if (*(_DWORD *)(v3 + 1152) <= (v12 + 1))
        v91 = v12 + 1;
      else
        v91 = *(_DWORD *)(v3 + 1152);
      v14 = v283;
      while (1)
      {
        v29 = (v12 + 1);
        if (v91 - 1 == (_DWORD)v12)
          break;
        LODWORD(v12) = v12 + 1;
        v92 = v29;
        if ((*(_DWORD *)(*(_QWORD *)(v3 + 1136) + 56 * v29 + 8) & 0x80000000) != 0)
          goto LABEL_153;
      }
      v92 = v91;
LABEL_153:
      LODWORD(v12) = v92;
    }
    while ((_DWORD)v272 != v92);
  }
  v17 = v3 + 1312;
  v18 = (unint64_t)v269;
  if (v269 != (_QWORD *)(v3 + 1312))
  {
    v14[28] = 0;
    v14[29] = 0;
    v19 = v14[25];
    v14[26] = 0;
    v14[27] = v19;
    if (v19 >= 0x10)
    {
      v20 = 0;
      *(_QWORD *)&v21 = -1;
      *((_QWORD *)&v21 + 1) = -1;
      do
      {
        *(_OWORD *)(v14[23] + 16 * v20++) = v21;
        v19 = v14[25];
      }
      while (v20 < v19 >> 4);
    }
    if (v19)
    {
      v22 = 72 * v19;
      v9 = v283[24] + 8;
      do
      {
        re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v9);
        v9 += 72;
        v22 -= 72;
      }
      while (v22);
    }
    v23 = *(_QWORD *)(v3 + 1328);
    if (v23 >= 0x10)
    {
      v24 = 0;
      v25 = v23 >> 4;
      v26 = xmmword_2260EE390;
      v6 = (int8x8_t)0x3830282018100800;
      while (1)
      {
        v27 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)v17 + v24)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
        v28 = (unsigned __int16)~v27;
        if (v27 != 0xFFFF)
          break;
        v24 += 16;
        if (!--v25)
          goto LABEL_158;
      }
      v93 = __clz(__rbit64(v28)) + v24;
      if (v93 != -1)
        goto LABEL_451;
    }
  }
LABEL_158:
  v94 = v294;
  if (v294 == -1)
    goto LABEL_473;
  v9 = v292;
  if (v294 < v292)
    goto LABEL_474;
  v95 = v295;
  re::MaterialParameterTable::MaterialParameterTable((uint64_t)v301, (uint64_t *)(v3 + 64), (uint64_t *)(v3 + 592));
  re::MaterialParameterTable::operator=(v266, (uint64_t)v301);
  re::MaterialParameterTable::~MaterialParameterTable((re::MaterialParameterTable *)v301);
  if (v267 != (_QWORD *)(v3 + 1072))
  {
    v97 = *(_QWORD *)(v3 + 1072);
    if (*v267)
    {
      if (v97)
      {
        re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy((uint64_t)v267, v3 + 1072);
        ++*((_DWORD *)v283 + 354);
      }
      else
      {
        re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear((uint64_t)v267);
      }
    }
    else if (v97)
    {
      if (*(_DWORD *)(v3 + 1100) <= 3u)
        v98 = 3;
      else
        v98 = *(_DWORD *)(v3 + 1100);
      re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v267, v97, v98);
      re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy((uint64_t)v267, v3 + 1072);
    }
  }
  v99 = v292;
  if (!*v268)
  {
    v102 = v283;
    if (!(_DWORD)v9)
      goto LABEL_176;
  }
  v102 = v283;
  if (v283[15] != v9)
    goto LABEL_475;
  if ((_DWORD)v9)
  {
    v100 = (uint64_t)memmove((void *)v283[16], v95, 8 * v9);
    v102 = v283;
  }
LABEL_176:
  if (v102[15])
  {
    v103 = 0;
    v104 = v102 + 17;
    do
    {
      v105 = *(const char ***)(v102[16] + 8 * v103);
      memset(v304, 0, 24);
      *(_DWORD *)v301 = v103;
      v106 = strlen(*v105);
      if (v106)
      {
        MurmurHash3_x64_128((uint64_t)*v105, v106, 0, (unint64_t *)v301);
        v107 = (*(_QWORD *)&v301[8] + v16 + (*(_QWORD *)v301 << 6) + (*(_QWORD *)v301 >> 2)) ^ *(_QWORD *)v301;
      }
      else
      {
        v107 = 0;
      }
      *(_QWORD *)buf = v107;
      *(_OWORD *)v301 = *(_OWORD *)v304;
      v108 = *(_QWORD *)&v304[16];
      memset(v304, 0, 24);
      *(_QWORD *)&v301[16] = v108;
      v301[24] = -1;
      if (*v104)
      {
        v109 = v107 % *((unsigned int *)v283 + 40);
        v110 = *(unsigned int *)(v283[18] + 4 * v109);
        if ((_DWORD)v110 != 0x7FFFFFFF)
        {
          v111 = v283[19];
          while (*(_QWORD *)(v111 + 48 * v110 + 8) != v107)
          {
            LODWORD(v110) = *(_DWORD *)(v111 + 48 * v110) & 0x7FFFFFFF;
            if ((_DWORD)v110 == 0x7FFFFFFF)
              goto LABEL_188;
          }
          v112 = v111 + 48 * v110;
          re::FixedArray<float>::operator=((uint64_t *)(v112 + 16), (uint64_t *)v301);
          *(_BYTE *)(v112 + 40) = v301[24];
          goto LABEL_190;
        }
      }
      else
      {
        LODWORD(v109) = 0;
      }
LABEL_188:
      re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove((uint64_t)v104, v109, v107, buf, (uint64_t)v301);
LABEL_190:
      v102 = v283;
      ++*((_DWORD *)v283 + 44);
      if (*(_QWORD *)v301)
        v113 = *(_QWORD *)&v301[8] == 0;
      else
        v113 = 1;
      if (!v113)
      {
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v301 + 40))(*(_QWORD *)v301, *(_QWORD *)&v301[16]);
        v102 = v283;
      }
      v100 = *(_QWORD *)v304;
      if (*(_QWORD *)v304 && *(_QWORD *)&v304[8])
      {
        v100 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v304 + 40))(*(_QWORD *)v304, *(_QWORD *)&v304[16]);
        v102 = v283;
      }
      ++v103;
    }
    while (v103 < v102[15]);
  }
  v114 = v278;
  v115 = *(unsigned int *)(v278 + 1296);
  if ((_DWORD)v115)
  {
    v116 = 0;
    v117 = (int *)(*(_QWORD *)(v278 + 1280) + 8);
    while (1)
    {
      v118 = *v117;
      v117 += 22;
      if (v118 < 0)
        break;
      if (v115 == ++v116)
      {
        LODWORD(v116) = *(_DWORD *)(v278 + 1296);
        break;
      }
    }
  }
  else
  {
    LODWORD(v116) = 0;
  }
  if ((_DWORD)v115 != (_DWORD)v116)
  {
    v45 = v116;
    v281 = (uint64_t)(v102 + 17);
    v284 = *(_DWORD *)(v278 + 1296);
    while (1)
    {
      v123 = *(_QWORD *)(v114 + 1280);
      v124 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v289, v123 + 88 * v45 + 16);
      if (!v124)
        break;
      v125 = *re::graphicsLogObjects((re *)v124);
      v100 = os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT);
      v102 = v283;
      if ((_DWORD)v100)
      {
        if ((*(_BYTE *)(v123 + 88 * v45 + 24) & 1) != 0)
          v126 = *(_QWORD *)(v123 + 88 * v45 + 32);
        else
          v126 = v123 + 88 * v45 + 25;
        *(_DWORD *)v301 = 136315138;
        *(_QWORD *)&v301[4] = v126;
        _os_log_impl(&dword_224FE9000, v125, OS_LOG_TYPE_DEFAULT, "Technique group \"%s\" has the same name as an existing technique.  Skipping the group", v301, 0xCu);
LABEL_233:
        v102 = v283;
      }
      v138 = *(_DWORD *)(v114 + 1296);
      if (v138 <= (int)v116 + 1)
        v138 = v116 + 1;
      while (1)
      {
        v45 = (v116 + 1);
        if (v138 - 1 == (_DWORD)v116)
          break;
        LODWORD(v116) = v116 + 1;
        v139 = v45;
        if ((*(_DWORD *)(*(_QWORD *)(v114 + 1280) + 88 * v45 + 8) & 0x80000000) != 0)
          goto LABEL_240;
      }
      v139 = v138;
LABEL_240:
      LODWORD(v116) = v139;
      if ((_DWORD)v115 == v139)
        goto LABEL_206;
    }
    memset(buf, 0, 24);
    v127 = v123 + 88 * v45;
    v129 = *(_QWORD *)(v127 + 64);
    v128 = (unint64_t *)(v127 + 64);
    if (*v128)
    {
      v130 = 0;
      v131 = 0;
      v132 = (uint64_t *)(v123 + 88 * v45 + 80);
      while (1)
      {
        v133 = *v132;
        v134 = (_DWORD *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)v289, *v132 + v130);
        if (!v134)
          break;
        v9 = *(_QWORD *)&buf[8];
        if (*(_QWORD *)&buf[8] <= v131)
        {
          v298[0] = 0;
          v302 = 0u;
          v303 = 0u;
          memset(v301, 0, sizeof(v301));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v304 = 136315906;
          *(_QWORD *)&v304[4] = "operator[]";
          *(_WORD *)&v304[12] = 1024;
          *(_DWORD *)&v304[14] = 468;
          *(_WORD *)&v304[18] = 2048;
          *(_QWORD *)&v304[20] = v131;
          v305 = 2048;
          v306 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_467:
          v298[0] = 0;
          v302 = 0u;
          v303 = 0u;
          memset(v301, 0, sizeof(v301));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v304 = 136315906;
          *(_QWORD *)&v304[4] = "operator[]";
          *(_WORD *)&v304[12] = 1024;
          *(_DWORD *)&v304[14] = 468;
          *(_WORD *)&v304[18] = 2048;
          *(_QWORD *)&v304[20] = v9;
          v305 = 2048;
          v306 = v130;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_468:
          *(_QWORD *)buf = 0;
          v302 = 0u;
          v303 = 0u;
          memset(v301, 0, sizeof(v301));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v304 = 136315906;
          *(_QWORD *)&v304[4] = "operator[]";
          *(_WORD *)&v304[12] = 1024;
          *(_DWORD *)&v304[14] = 468;
          *(_WORD *)&v304[18] = 2048;
          *(_QWORD *)&v304[20] = v9;
          v305 = 2048;
          v306 = v45;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_469;
        }
        *(_DWORD *)(*(_QWORD *)&buf[16] + 4 * v131++) = *v134;
        v130 += 32;
        if (v131 >= *v128)
          goto LABEL_221;
      }
      v136 = *re::graphicsLogObjects(0);
      v114 = v278;
      LODWORD(v115) = v284;
      if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
      {
        if ((*(_BYTE *)(v123 + 88 * v45 + 24) & 1) != 0)
          v137 = *(_QWORD *)(v123 + 88 * v45 + 32);
        else
          v137 = v123 + 88 * v45 + 25;
        v140 = v133 + v130;
        if ((*(_BYTE *)(v133 + v130 + 8) & 1) != 0)
          v141 = *(_QWORD *)(v140 + 16);
        else
          v141 = v140 + 9;
        *(_DWORD *)v301 = 136315394;
        *(_QWORD *)&v301[4] = v137;
        *(_WORD *)&v301[12] = 2080;
        *(_QWORD *)&v301[14] = v141;
        _os_log_impl(&dword_224FE9000, v136, OS_LOG_TYPE_DEFAULT, "In technique group \"%s\", technique \"%s\" does not exist. Skipping the group.", v301, 0x16u);
      }
    }
    else
    {
LABEL_221:
      *(_QWORD *)v304 = re::Hash<re::DynamicString>::operator()((uint64_t)v301, v123 + 88 * v45 + 16);
      *(_OWORD *)v301 = *(_OWORD *)buf;
      v135 = *(_QWORD *)&buf[16];
      memset(buf, 0, 24);
      *(_QWORD *)&v301[16] = v135;
      v301[24] = -1;
      re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(v281, (unint64_t *)v304, (uint64_t)v301);
      if (*(_QWORD *)v301 && *(_QWORD *)&v301[8])
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v301 + 40))(*(_QWORD *)v301, *(_QWORD *)&v301[16]);
      v114 = v278;
      LODWORD(v115) = v284;
    }
    v100 = *(_QWORD *)buf;
    if (*(_QWORD *)buf && *(_QWORD *)&buf[8])
      v100 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, *(_QWORD *)&buf[16]);
    goto LABEL_233;
  }
LABEL_206:
  v119 = *(unsigned int *)(v114 + 1408);
  if ((_DWORD)v119)
  {
    v120 = 0;
    v121 = (int *)(*(_QWORD *)(v114 + 1392) + 8);
    v16 = 0x9E3779B97F4A7C17;
    while (1)
    {
      v122 = *v121;
      v121 += 30;
      if (v122 < 0)
        break;
      if (v119 == ++v120)
      {
        LODWORD(v120) = *(_DWORD *)(v114 + 1408);
        break;
      }
    }
  }
  else
  {
    LODWORD(v120) = 0;
    v16 = 0x9E3779B97F4A7C17;
  }
  if ((_DWORD)v119 != (_DWORD)v120)
  {
    v147 = v120;
    v148 = (uint64_t)(v102 + 17);
    v273 = (uint64_t)(v102 + 17);
    v274 = *(_DWORD *)(v114 + 1408);
    do
    {
      v285 = *(_QWORD *)(v114 + 1392);
      v149 = v285 + 120 * v147;
      v150 = v149 + 16;
      v151 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v289, v149 + 16);
      if (v151)
      {
        v152 = v149 + 16;
        v153 = *re::graphicsLogObjects((re *)v151);
        v100 = os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT);
        v102 = v283;
        if ((_DWORD)v100)
        {
          if ((*(_BYTE *)(v285 + 120 * v147 + 24) & 1) != 0)
            v154 = *(_QWORD *)(v285 + 120 * v147 + 32);
          else
            v154 = v152 + 9;
          *(_DWORD *)v301 = 136315138;
          *(_QWORD *)&v301[4] = v154;
          v168 = v153;
          v169 = "Technique quality set \"%s\" has the same name as an existing technique.  Skipping the quality set";
LABEL_290:
          _os_log_impl(&dword_224FE9000, v168, OS_LOG_TYPE_DEFAULT, v169, v301, 0xCu);
          v102 = v283;
        }
      }
      else
      {
        v297 = 0;
        v297 = re::Hash<re::DynamicString>::operator()((uint64_t)v301, v149 + 16);
        v155 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(v148, (uint64_t *)&v297);
        if (v155)
        {
          v156 = v149 + 16;
          v157 = *re::graphicsLogObjects((re *)v155);
          v100 = os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT);
          v102 = v283;
          if ((_DWORD)v100)
          {
            if ((*(_BYTE *)(v285 + 120 * v147 + 24) & 1) != 0)
              v158 = *(_QWORD *)(v285 + 120 * v147 + 32);
            else
              v158 = v156 + 9;
            *(_DWORD *)v301 = 136315138;
            *(_QWORD *)&v301[4] = v158;
            v168 = v157;
            v169 = "Technique quality set \"%s\" has the same name as an existing technique group.  Skipping the quality set";
            goto LABEL_290;
          }
        }
        else
        {
          v159 = v149 + 48;
          if (*(_QWORD *)(v159 + 16))
          {
            v160 = *(_QWORD *)(v159 + 16);
            memset(buf, 0, 24);
            v276 = v150;
            if (!*(_QWORD *)(v159 + 16))
            {
              v167 = (re *)re::Hash<re::DynamicString>::operator()((uint64_t)v301, v150);
              v297 = (unint64_t)v167;
              goto LABEL_282;
            }
            v45 = 0;
            v9 = 0;
            LOBYTE(v161) = -1;
            do
            {
              v162 = *(_QWORD *)(v159 + 32);
              v163 = v162 + v45;
              v164 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)v289, v162 + v45);
              if (!v164)
              {
                v175 = *re::graphicsLogObjects(0);
                v114 = v278;
                v16 = 0x9E3779B97F4A7C17;
                v148 = v273;
                LODWORD(v119) = v274;
                if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
                {
                  if ((*(_BYTE *)(v285 + 120 * v147 + 24) & 1) != 0)
                    v176 = *(_QWORD *)(v285 + 120 * v147 + 32);
                  else
                    v176 = v276 + 9;
                  v182 = v162 + v45;
                  if ((*(_BYTE *)(v162 + v45 + 8) & 1) != 0)
                    v183 = *(_QWORD *)(v182 + 16);
                  else
                    v183 = v182 + 9;
                  *(_DWORD *)v301 = 136315394;
                  *(_QWORD *)&v301[4] = v176;
                  *(_WORD *)&v301[12] = 2080;
                  *(_QWORD *)&v301[14] = v183;
                  _os_log_impl(&dword_224FE9000, v175, OS_LOG_TYPE_DEFAULT, "In technique quality level set \"%s\", technique \"%s\" does not exist. Skipping the set.", v301, 0x16u);
                }
                goto LABEL_301;
              }
              v130 = *(_QWORD *)&buf[8];
              if (*(_QWORD *)&buf[8] <= v9)
                goto LABEL_467;
              v165 = (_DWORD *)v164;
              if (re::DynamicString::operator==(v163, v285 + 120 * v147 + 88))
                v166 = v9;
              else
                v166 = v161;
              v161 = v166;
              *(_DWORD *)(*(_QWORD *)&buf[16] + 4 * v9++) = *v165;
              v45 += 32;
            }
            while (v9 < *(_QWORD *)(v159 + 16));
            v167 = (re *)re::Hash<re::DynamicString>::operator()((uint64_t)v301, v150);
            v297 = (unint64_t)v167;
            v114 = v278;
            v148 = v273;
            LODWORD(v119) = v274;
            if ((v161 & 0x80000000) == 0)
              goto LABEL_297;
LABEL_282:
            v173 = *re::graphicsLogObjects(v167);
            LOBYTE(v161) = 0;
            if (!os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT))
              goto LABEL_297;
            if ((*(_BYTE *)(v285 + 120 * v147 + 24) & 1) != 0)
              v174 = *(_QWORD *)(v285 + 120 * v147 + 32);
            else
              v174 = v276 + 9;
            if (!*(_QWORD *)(v159 + 16))
              goto LABEL_476;
            v177 = *(_QWORD *)(v159 + 32);
            if ((*(_BYTE *)(v177 + 8) & 1) != 0)
              v178 = *(_QWORD *)(v177 + 16);
            else
              v178 = v177 + 9;
            *(_DWORD *)v301 = 136315394;
            *(_QWORD *)&v301[4] = v174;
            *(_WORD *)&v301[12] = 2080;
            *(_QWORD *)&v301[14] = v178;
            _os_log_impl(&dword_224FE9000, v173, OS_LOG_TYPE_DEFAULT, "In technique quality level set \"%s\", techniqueSetBaseline does not exist. It will be set to technique \"%s\" by default.", v301, 0x16u);
            LOBYTE(v161) = 0;
LABEL_297:
            *(_OWORD *)v301 = *(_OWORD *)buf;
            v179 = *(_QWORD *)&buf[16];
            memset(buf, 0, 24);
            *(_QWORD *)&v301[16] = v179;
            v301[24] = v161;
            re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(v148, &v297, (uint64_t)v301);
            if (*(_QWORD *)v301 && *(_QWORD *)&v301[8])
              (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v301 + 40))(*(_QWORD *)v301, *(_QWORD *)&v301[16]);
            v16 = 0x9E3779B97F4A7C17;
LABEL_301:
            v100 = *(_QWORD *)buf;
            if (*(_QWORD *)buf && *(_QWORD *)&buf[8])
              v100 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, *(_QWORD *)&buf[16]);
            v102 = v283;
          }
          else
          {
            v170 = v150;
            v171 = *re::graphicsLogObjects((re *)v155);
            v100 = os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT);
            v102 = v283;
            if ((_DWORD)v100)
            {
              if ((*(_BYTE *)(v285 + 120 * v147 + 24) & 1) != 0)
                v172 = *(_QWORD *)(v285 + 120 * v147 + 32);
              else
                v172 = v170 + 9;
              *(_DWORD *)v301 = 136315138;
              *(_QWORD *)&v301[4] = v172;
              v168 = v171;
              v169 = "In technique quality level set \"%s\" ,techniques array is empty. Skipping the set.";
              goto LABEL_290;
            }
          }
        }
      }
      v180 = *(_DWORD *)(v114 + 1408);
      if (v180 <= (int)v120 + 1)
        v180 = v120 + 1;
      while (1)
      {
        v147 = (v120 + 1);
        if (v180 - 1 == (_DWORD)v120)
          break;
        LODWORD(v120) = v120 + 1;
        v181 = v147;
        if ((*(_DWORD *)(*(_QWORD *)(v114 + 1392) + 120 * v147 + 8) & 0x80000000) != 0)
          goto LABEL_311;
      }
      v181 = v180;
LABEL_311:
      LODWORD(v120) = v181;
    }
    while ((_DWORD)v119 != v181);
  }
  v142 = *(unsigned int *)(v114 + 1200);
  if ((_DWORD)v142)
  {
    v143 = 0;
    v144 = (int *)(*(_QWORD *)(v114 + 1184) + 8);
    v145 = (uint64_t)v265;
    while (1)
    {
      v146 = *v144;
      v144 += 20;
      if (v146 < 0)
        break;
      if (v142 == ++v143)
      {
        LODWORD(v143) = *(_DWORD *)(v114 + 1200);
        break;
      }
    }
  }
  else
  {
    LODWORD(v143) = 0;
    v145 = (uint64_t)v265;
  }
  if ((_DWORD)v142 != (_DWORD)v143)
  {
    v184 = v143;
    v185 = (uint64_t)(v102 + 17);
    do
    {
      v186 = *(_QWORD *)(v114 + 1184);
      *(_QWORD *)v304 = 0;
      *(_QWORD *)v304 = re::Hash<re::DynamicString>::operator()((uint64_t)v301, v186 + 80 * v184 + 48);
      v100 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(v185, (uint64_t *)v304);
      if ((_DWORD)v100)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)buf = re::Hash<re::DynamicString>::operator()((uint64_t)v301, v186 + 80 * v184 + 16);
        re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<unsigned long &>(v145, (unint64_t *)buf, v304);
        MurmurHash3_x64_128((uint64_t)"Default", 7, 0, (unint64_t *)v301);
        v298[0] = (*(_QWORD *)&v301[8] - 0x61C8864680B583E9 + (*(_QWORD *)v301 << 6) + (*(_QWORD *)v301 >> 2)) ^ *(_QWORD *)v301;
        memset(v301, 0, sizeof(v301));
        *(_DWORD *)&v301[36] = 0x7FFFFFFF;
        v187 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(v279, v298, (uint64_t *)v301);
        re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v301);
        v100 = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<unsigned long &>(v187, (unint64_t *)buf, v304);
      }
      v114 = v278;
      v188 = *(_DWORD *)(v278 + 1200);
      if (v188 <= (int)v143 + 1)
        v188 = v143 + 1;
      v102 = v283;
      while (1)
      {
        v184 = (v143 + 1);
        if (v188 - 1 == (_DWORD)v143)
          break;
        LODWORD(v143) = v143 + 1;
        v189 = v184;
        if ((*(_DWORD *)(*(_QWORD *)(v278 + 1184) + 80 * v184 + 8) & 0x80000000) != 0)
          goto LABEL_330;
      }
      v189 = v188;
LABEL_330:
      LODWORD(v143) = v189;
    }
    while ((_DWORD)v142 != v189);
  }
  v190 = *(unsigned int *)(v114 + 1248);
  if ((_DWORD)v190)
  {
    v191 = 0;
    v192 = (int *)(*(_QWORD *)(v114 + 1232) + 8);
    while (1)
    {
      v193 = *v192;
      v192 += 24;
      if (v193 < 0)
        break;
      if (v190 == ++v191)
      {
        LODWORD(v191) = *(_DWORD *)(v114 + 1248);
        break;
      }
    }
  }
  else
  {
    LODWORD(v191) = 0;
  }
  if ((_DWORD)v190 != (_DWORD)v191)
  {
    v194 = v191;
    v286 = (uint64_t)(v102 + 17);
    v16 = 0x7FFFFFFFLL;
    v195 = *(_DWORD *)(v114 + 1248);
    v277 = v195;
    while (1)
    {
      v196 = *(_QWORD *)(v114 + 1232);
      v197 = v196 + 96 * v194;
      v200 = *(_DWORD *)(v197 + 80);
      v198 = (int *)(v197 + 80);
      v199 = v200;
      if (v200)
      {
        v201 = 0;
        v202 = (int *)(*(_QWORD *)(v196 + 96 * v194 + 64) + 8);
        while (1)
        {
          v203 = *v202;
          v202 += 20;
          if (v203 < 0)
            break;
          if (v199 == ++v201)
          {
            LODWORD(v201) = v199;
            break;
          }
        }
      }
      else
      {
        LODWORD(v201) = 0;
      }
      if ((_DWORD)v199 != (_DWORD)v201)
        break;
LABEL_364:
      if (v195 <= (int)v191 + 1)
        v214 = v191 + 1;
      else
        v214 = v195;
      v114 = v278;
      while (1)
      {
        v194 = (v191 + 1);
        if (v214 - 1 == (_DWORD)v191)
          break;
        LODWORD(v191) = v191 + 1;
        v215 = v194;
        if ((*(_DWORD *)(*(_QWORD *)(v278 + 1232) + 96 * v194 + 8) & 0x80000000) != 0)
          goto LABEL_372;
      }
      v215 = v214;
LABEL_372:
      LODWORD(v191) = v215;
      if ((_DWORD)v190 == v215)
        goto LABEL_373;
    }
    v204 = v201;
    v205 = (uint64_t *)(v196 + 96 * v194 + 64);
    while (1)
    {
      v206 = *v205;
      v207 = *v205 + 80 * v204 + 48;
      *(_QWORD *)v304 = 0;
      *(_QWORD *)v304 = re::Hash<re::DynamicString>::operator()((uint64_t)v301, v207);
      v100 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(v286, (uint64_t *)v304);
      if ((_DWORD)v100)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)buf = re::Hash<re::DynamicString>::operator()((uint64_t)v301, v206 + 80 * v204 + 16);
        v298[0] = re::Hash<re::DynamicString>::operator()((uint64_t)v301, (uint64_t)(v198 - 16));
        memset(v301, 0, sizeof(v301));
        *(_DWORD *)&v301[36] = 0x7FFFFFFF;
        v208 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(v279, v298, (uint64_t *)v301);
        re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v301);
        if (*(_QWORD *)v208)
        {
          v209 = *(_QWORD *)buf % (unint64_t)*(unsigned int *)(v208 + 24);
          v210 = *(unsigned int *)(*(_QWORD *)(v208 + 8) + 4 * v209);
          if ((_DWORD)v210 != 0x7FFFFFFF)
          {
            v211 = *(_QWORD *)(v208 + 16);
            while (*(_QWORD *)(v211 + 24 * v210 + 8) != *(_QWORD *)buf)
            {
              LODWORD(v210) = *(_DWORD *)(v211 + 24 * v210) & 0x7FFFFFFF;
              if ((_DWORD)v210 == 0x7FFFFFFF)
                goto LABEL_355;
            }
            goto LABEL_356;
          }
        }
        else
        {
          LODWORD(v209) = 0;
        }
LABEL_355:
        v100 = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(v208, v209, *(unint64_t *)buf, buf, v304);
        ++*(_DWORD *)(v208 + 40);
      }
LABEL_356:
      v212 = *v198;
      if (*v198 <= (v201 + 1))
        v212 = v201 + 1;
      while (1)
      {
        v204 = (v201 + 1);
        if (v212 - 1 == (_DWORD)v201)
          break;
        LODWORD(v201) = v201 + 1;
        v213 = v204;
        if ((*(_DWORD *)(*v205 + 80 * v204 + 8) & 0x80000000) != 0)
          goto LABEL_362;
      }
      v213 = v212;
LABEL_362:
      LODWORD(v201) = v213;
      if ((_DWORD)v199 == v213)
      {
        v195 = *(_DWORD *)(v278 + 1248);
        LODWORD(v190) = v277;
        goto LABEL_364;
      }
    }
  }
LABEL_373:
  v217 = v283;
  v218 = *((unsigned int *)v283 + 12);
  if ((_DWORD)v218)
  {
    v219 = 0;
    v220 = (int *)v283[4];
    while (1)
    {
      v221 = *v220;
      v220 += 6;
      if (v221 < 0)
        break;
      if (v218 == ++v219)
      {
        LODWORD(v219) = *((_DWORD *)v283 + 12);
        break;
      }
    }
  }
  else
  {
    LODWORD(v219) = 0;
  }
  if ((_DWORD)v218 != (_DWORD)v219)
  {
    v222 = v219;
    v17 = 24;
    v28 = 1;
    v223 = *((_DWORD *)v283 + 12);
    do
    {
      v224 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)(v283 + 17), *(_QWORD *)(v217[4] + 24 * v222 + 16));
      v217 = v283;
      v225 = *(_QWORD *)(v224 + 8);
      if (v225)
      {
        v93 = *(_QWORD *)(v224 + 16);
        v3 = 4 * v225;
        do
        {
          v18 = *(unsigned int *)v93;
          v226 = v217[15];
          if (v226 <= v18)
            goto LABEL_450;
          v227 = *(_QWORD *)(v217[16] + 8 * v18);
          if (*(_BYTE *)(v227 + 2845))
          {
            v228 = re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v227 + 2744, (uint64_t)buf);
            v217 = v283;
            if (v228)
              *((_BYTE *)v283 + 1433) = 1;
          }
          v93 += 4;
          v3 -= 4;
        }
        while (v3);
        v223 = *((_DWORD *)v217 + 12);
      }
      if (v223 <= (int)v219 + 1)
        v229 = v219 + 1;
      else
        v229 = v223;
      while (1)
      {
        v222 = (v219 + 1);
        if (v229 - 1 == (_DWORD)v219)
          break;
        LODWORD(v219) = v219 + 1;
        v230 = v222;
        if ((*(_DWORD *)(v217[4] + 24 * v222) & 0x80000000) != 0)
          goto LABEL_396;
      }
      v230 = v229;
LABEL_396:
      LODWORD(v219) = v230;
    }
    while ((_DWORD)v218 != v230);
  }
  v231 = *((unsigned int *)v217 + 24);
  if ((_DWORD)v231)
  {
    v17 = 0;
    v232 = (int *)(v217[10] + 8);
    while (1)
    {
      v233 = *v232;
      v232 += 18;
      if (v233 < 0)
        break;
      if (v231 == ++v17)
      {
        v17 = *((unsigned int *)v217 + 24);
        break;
      }
    }
  }
  else
  {
    v17 = 0;
  }
  if ((_DWORD)v231 == (_DWORD)v17)
    goto LABEL_404;
  v236 = v17;
  v287 = (uint64_t)(v217 + 17);
  v93 = 24;
  v18 = 1;
  v237 = *((_DWORD *)v217 + 24);
  v279 = v237;
  do
  {
    v238 = v217[10];
    v239 = v238 + 72 * v236;
    v3 = *(unsigned int *)(v239 + 56);
    v282 = (unsigned int *)(v239 + 56);
    v226 = 0;
    if (*(_DWORD *)(v239 + 56))
    {
      v240 = *(int **)(v238 + 72 * v236 + 40);
      while (1)
      {
        v241 = *v240;
        v240 += 6;
        if (v241 < 0)
          break;
        if (v3 == ++v226)
        {
          v226 = v3;
          break;
        }
      }
    }
    if ((_DWORD)v3 == (_DWORD)v226)
      goto LABEL_440;
    v242 = v226;
    v16 = v238 + 72 * v236 + 40;
    v243 = v3;
    do
    {
      v244 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v287, *(_QWORD *)(*(_QWORD *)v16 + 24 * v242 + 16));
      v245 = v283;
      v246 = *(_QWORD *)(v244 + 8);
      if (!v246)
        goto LABEL_431;
      v247 = *(unsigned int **)(v244 + 16);
      v248 = 4 * v246;
      while (2)
      {
        v28 = *v247;
        v249 = v245[15];
        if (v249 <= v28)
        {
          v298[0] = 0;
          v302 = 0u;
          v303 = 0u;
          memset(v301, 0, sizeof(v301));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v304 = 136315906;
          *(_QWORD *)&v304[4] = "operator[]";
          *(_WORD *)&v304[12] = 1024;
          *(_DWORD *)&v304[14] = 468;
          *(_WORD *)&v304[18] = 2048;
          *(_QWORD *)&v304[20] = v28;
          v305 = 2048;
          v306 = v249;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_450:
          v298[0] = 0;
          v302 = 0u;
          v303 = 0u;
          memset(v301, 0, sizeof(v301));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v304 = 136315906;
          *(_QWORD *)&v304[4] = "operator[]";
          *(_WORD *)&v304[12] = 1024;
          *(_DWORD *)&v304[14] = 468;
          *(_WORD *)&v304[18] = 2048;
          *(_QWORD *)&v304[20] = v18;
          v305 = 2048;
          v306 = v226;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_451:
          v9 = (unint64_t)&v301[8];
          v288 = (int8x16_t)v26;
          while (1)
          {
            v256 = (_QWORD *)(*(_QWORD *)(v3 + 1320) + 72 * v93);
            *(_QWORD *)v301 = *v256;
            re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::HashBrown((uint64_t)&v301[8], v256 + 1);
            re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd((_anonymous_namespace_ *)v18, (uint64_t *)v301, (uint64_t *)&v301[8]);
            if ((_QWORD)v303)
            {
              if (*(_QWORD *)&v301[16])
                *(_QWORD *)&v301[16] = 0;
              v11 = *(_QWORD *)&v301[8];
              if (*(_QWORD *)&v301[8])
                (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v303 + 40))(v303, *(_QWORD *)&v301[8]);
            }
            v257 = v93 >> 4;
            v258 = *(_QWORD *)(v3 + 1328);
            if (v93 >> 4 >= v258 >> 4)
              goto LABEL_158;
            v259 = __clz(__rbit64((-2 << (v93 & 0xF)) & v28));
            if (v259 >= 0x40)
            {
              v260 = v258 >> 4;
              v261 = 16 * v257;
              v262 = ~v257 + v260;
              while (v262)
              {
                v28 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)v17 + 16 + v261)), v288)))), v6);
                v263 = __clz(__rbit64(v28));
                v261 += 16;
                --v262;
                if (v263 <= 0x3F)
                {
                  v93 = v263 + v261;
                  goto LABEL_464;
                }
              }
              goto LABEL_158;
            }
            v93 = v259 + (v93 & 0xFFFFFFFFFFFFFFF0);
LABEL_464:
            if (v93 == -1)
              goto LABEL_158;
          }
        }
        v250 = *(_QWORD *)(v245[16] + 8 * v28);
        if (*(_BYTE *)(v250 + 2845))
        {
          v251 = re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v250 + 2744, (uint64_t)buf);
          v245 = v283;
          if (v251)
            *((_BYTE *)v283 + 1433) = 1;
        }
        ++v247;
        v248 -= 4;
        if (v248)
          continue;
        break;
      }
      v243 = *v282;
LABEL_431:
      if (v243 <= (int)v226 + 1)
        v252 = (v226 + 1);
      else
        v252 = v243;
      while (1)
      {
        v242 = (v226 + 1);
        if ((_DWORD)v252 - 1 == (_DWORD)v226)
          break;
        LODWORD(v226) = v226 + 1;
        v253 = v242;
        if ((*(_DWORD *)(*(_QWORD *)v16 + 24 * v242) & 0x80000000) != 0)
          goto LABEL_438;
      }
      v253 = v252;
LABEL_438:
      v226 = v253;
    }
    while ((_DWORD)v3 != (_DWORD)v253);
    v237 = *((_DWORD *)v245 + 24);
    LODWORD(v231) = v279;
LABEL_440:
    if (v237 <= (int)v17 + 1)
      v254 = (v17 + 1);
    else
      v254 = v237;
    while (1)
    {
      v236 = (v17 + 1);
      if ((_DWORD)v254 - 1 == (_DWORD)v17)
        break;
      LODWORD(v17) = v17 + 1;
      v255 = v236;
      if ((*(_DWORD *)(v283[10] + 72 * v236 + 8) & 0x80000000) != 0)
        goto LABEL_447;
    }
    v255 = v254;
LABEL_447:
    v17 = v255;
    v217 = v283;
  }
  while ((_DWORD)v231 != (_DWORD)v255);
LABEL_404:
  if (v217)
  {
    v234 = v217 + 1;
    v217 = v283;
  }
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = v217;
  if (*(_QWORD *)buf && (buf[8] & 1) != 0)
    v216 = (*(double (**)(_QWORD, _QWORD))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, *(_QWORD *)&buf[16]);
  v235 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v289, v216);
  if (v293 && v294)
    (*(void (**)(double))(*(_QWORD *)v293 + 40))(v235);
  if (v283)

}

uint64_t re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned int &>(uint64_t a1, re::DynamicString *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v10 + 56 * v9;
  return v12 + 48;
}

uint64_t re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(uint64_t result, unint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = result;
  v6 = *a2;
  if (*(_QWORD *)result)
  {
    v7 = v6 % *(unsigned int *)(result + 24);
    v8 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v7);
    if ((_DWORD)v8 != 0x7FFFFFFF)
    {
      v9 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v9 + 48 * v8 + 8) == v6)
        return result;
      while (1)
      {
        LODWORD(v8) = *(_DWORD *)(v9 + 48 * v8) & 0x7FFFFFFF;
        if ((_DWORD)v8 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v9 + 48 * v8 + 8) == v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  result = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(result, v7, v6, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

BOOL re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (*a2 % (unint64_t)*(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 48 * v3 + 8) == v2)
    return 1;
  do
  {
    LODWORD(v3) = *(_DWORD *)(v5 + 48 * v3) & 0x7FFFFFFF;
    result = (_DWORD)v3 != 0x7FFFFFFF;
  }
  while ((_DWORD)v3 != 0x7FFFFFFF && *(_QWORD *)(v5 + 48 * v3 + 8) != v2);
  return result;
}

uint64_t re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<unsigned long &>(uint64_t result, unint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = result;
  v6 = *a2;
  if (*(_QWORD *)result)
  {
    v7 = v6 % *(unsigned int *)(result + 24);
    v8 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v7);
    if ((_DWORD)v8 != 0x7FFFFFFF)
    {
      v9 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v9 + 24 * v8 + 8) == v6)
        return result;
      while (1)
      {
        LODWORD(v8) = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
        if ((_DWORD)v8 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v9 + 24 * v8 + 8) == v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  result = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(result, v7, v6, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

uint64_t re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (a2 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v2 == 0x7FFFFFFF)
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v4 + 48 * v2 + 8) != a2)
  {
    while (1)
    {
      LODWORD(v2) = *(_DWORD *)(v4 + 48 * v2) & 0x7FFFFFFF;
      if ((_DWORD)v2 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v4 + 48 * v2 + 8) == a2)
        return v4 + 48 * v2 + 16;
    }
    return 0;
  }
  return v4 + 48 * v2 + 16;
}

uint64_t re::MaterialDefinitionBuilder::MaterialDefinitionBuilder(uint64_t a1, const re::DynamicString *a2, const re::DynamicString *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  re::DynamicString *v17;
  uint64_t *v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  uint64_t v23;

  v17 = re::DynamicString::DynamicString((re::DynamicString *)a1, a2);
  re::DynamicString::DynamicString((re::DynamicString *)((char *)v17 + 32), a3);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 192) = &off_24ED36808;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 464) = 1;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_DWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_QWORD *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_DWORD *)(a1 + 568) = 0;
  re::ShaderParameterTable::operator=((uint64_t *)(a1 + 64), a4);
  *(_QWORD *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_QWORD *)(a1 + 720) = off_24ED3A908;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 908) = 0u;
  *(_DWORD *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_QWORD *)(a1 + 1108) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 1072), a5);
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_QWORD *)(a1 + 1152) = 0x7FFFFFFF00000000;
  *(_DWORD *)(a1 + 1160) = 0;
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(a1 + 1168, a6);
  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(a1 + 1216, a7);
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_QWORD *)(a1 + 1296) = 0x7FFFFFFF00000000;
  *(_DWORD *)(a1 + 1304) = 0;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 1264), a8);
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)(a1 + 1312), a9);
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_QWORD *)(a1 + 1408) = 0x7FFFFFFF00000000;
  *(_DWORD *)(a1 + 1416) = 0;
  v18 = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 1376), a10);
  *(_OWORD *)(a1 + 1424) = 0u;
  re::make::shared::object<re::FunctionReflectionCache>((re *)v18, &v23);
  v19 = *(_QWORD *)(a1 + 1432);
  *(_QWORD *)(a1 + 1432) = v23;
  v23 = v19;
  if (v19)

  v20 = dispatch_group_create();
  v21 = *(void **)(a1 + 1424);
  *(_QWORD *)(a1 + 1424) = v20;

  return a1;
}

uint64_t re::MaterialDefinitionBuilder::MaterialDefinitionBuilder(uint64_t a1, uint64_t *a2)
{
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t *v9;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)a1, 0);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  re::DynamicString::setCapacity((_QWORD *)(a1 + 32), 0);
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 192) = &off_24ED36808;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 464) = 1;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_DWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_QWORD *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_DWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_QWORD *)(a1 + 720) = off_24ED3A908;
  *(_OWORD *)(a1 + 908) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_DWORD *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_QWORD *)(a1 + 1108) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_QWORD *)(a1 + 1156) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 1200) = 0;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_QWORD *)(a1 + 1204) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_QWORD *)(a1 + 1252) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 1296) = 0;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_QWORD *)(a1 + 1300) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 1408) = 0;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_QWORD *)(a1 + 1412) = 0x7FFFFFFFLL;
  v9 = (uint64_t *)(a1 + 1432);
  *(_OWORD *)(a1 + 1424) = 0u;
  re::DynamicString::operator=((re::DynamicString *)a1, (re::DynamicString *)a2);
  re::DynamicString::operator=((re::DynamicString *)(a1 + 32), (re::DynamicString *)(a2 + 4));
  re::ShaderParameterTable::operator=((uint64_t *)(a1 + 64), a2 + 8);
  re::TextureParameterTable::operator=((uint64_t *)(a1 + 592), a2 + 74);
  re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::operator=(a1 + 1072, a2 + 134);
  re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 1120, a2 + 140);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 1168, a2 + 146);
  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 1216, a2 + 152);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 1264, a2 + 158);
  re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 1376, a2 + 172);
  if ((uint64_t *)a1 == a2)
  {
    v5 = a2 + 179;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, a2[179]);
  }
  else
  {
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)(a1 + 1312), a2 + 164);
    v5 = a2 + 179;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, a2[179]);
    v6 = a2[178];
    a2[178] = 0;
    v7 = *(void **)(a1 + 1424);
    *(_QWORD *)(a1 + 1424) = v6;

  }
  if (*v5)
  {

    *v5 = 0;
  }
  return a1;
}

uint64_t re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(_QWORD *)a1 || *(_QWORD *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(_QWORD *)a1 || *(_QWORD *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(_QWORD *)a1 || *(_QWORD *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(_QWORD *)a1 || *(_QWORD *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(_QWORD *)a1 || *(_QWORD *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(_QWORD *)a1 || *(_QWORD *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t *re::MaterialDefinitionBuilder::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  void *v6;

  re::MaterialDefinitionBuilder::destroy((re::MaterialDefinitionBuilder *)a1);
  re::DynamicString::operator=((re::DynamicString *)a1, (re::DynamicString *)a2);
  re::DynamicString::operator=((re::DynamicString *)(a1 + 4), (re::DynamicString *)(a2 + 4));
  re::ShaderParameterTable::operator=(a1 + 8, a2 + 8);
  re::TextureParameterTable::operator=(a1 + 74, a2 + 74);
  re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::operator=((uint64_t)(a1 + 134), a2 + 134);
  re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)(a1 + 140), a2 + 140);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)(a1 + 146), a2 + 146);
  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)(a1 + 152), a2 + 152);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)(a1 + 158), a2 + 158);
  re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)(a1 + 172), a2 + 172);
  if (a1 == a2)
  {
    v4 = a2 + 179;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(a1 + 179, a2[179]);
  }
  else
  {
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(a1 + 164, a2 + 164);
    v4 = a2 + 179;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(a1 + 179, a2[179]);
    v5 = a2[178];
    a2[178] = 0;
    v6 = (void *)a1[178];
    a1[178] = v5;

  }
  if (*v4)
  {

    *v4 = 0;
  }
  return a1;
}

void re::MaterialDefinitionBuilder::destroy(re::MaterialDefinitionBuilder *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;

  v2 = *((_QWORD *)this + 178);
  if (v2)
    dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  v3 = *((_QWORD *)this + 179);
  if (v3)
  {

    *((_QWORD *)this + 179) = 0;
  }
  v4 = *((unsigned int *)this + 288);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*((_QWORD *)this + 142) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 14;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 288);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    do
    {
      re::internal::destroyPersistent<re::TechniqueDefinitionBuilder>((re *)"destroy", 1340, *(re::TechniqueDefinitionBuilder **)(*((_QWORD *)this + 142) + 56 * v8 + 48));
      if (*((_DWORD *)this + 288) <= (v5 + 1))
        v9 = v5 + 1;
      else
        v9 = *((_DWORD *)this + 288);
      v10 = v5;
      while (1)
      {
        v8 = (v10 + 1);
        if (v9 - 1 == v10)
          break;
        ++v10;
        LODWORD(v5) = v8;
        if ((*(_DWORD *)(*((_QWORD *)this + 142) + 56 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_21;
      }
      LODWORD(v5) = v9;
LABEL_21:
      ;
    }
    while ((_DWORD)v4 != (_DWORD)v5);
  }
  re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)this + 1120);
}

void re::MaterialDefinitionBuilder::~MaterialDefinitionBuilder(re::MaterialDefinitionBuilder *this)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;

  re::MaterialDefinitionBuilder::destroy(this);
  v2 = *((_QWORD *)this + 179);
  if (v2)
  {

    *((_QWORD *)this + 179) = 0;
  }

  re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 172);
  re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)this + 1312);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 158);
  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 152);
  v3 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 146);
  v4 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 140, v3);
  re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)this + 134, v4);
  re::TextureParameterTable::~TextureParameterTable((re::MaterialDefinitionBuilder *)((char *)this + 592));
  re::ShaderParameterTable::~ShaderParameterTable((re::MaterialDefinitionBuilder *)((char *)this + 64));
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    if ((*((_BYTE *)this + 40) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 6));
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  if (*(_QWORD *)this)
  {
    if ((*((_BYTE *)this + 8) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, *((_QWORD *)this + 2));
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
}

re *re::internal::destroyPersistent<re::TechniqueDefinitionBuilder>(re *result, uint64_t a2, re::TechniqueDefinitionBuilder *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::TechniqueDefinitionBuilder::~TechniqueDefinitionBuilder(a3);
    return (re *)(*(uint64_t (**)(uint64_t, re::TechniqueDefinitionBuilder *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

void re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 *v8;
  int v9;
  uint64_t v10;
  __n128 *v11;
  uint64_t v12;
  int v13;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_165, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = 0uLL;
      do
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = (__n128 *)(v7 + v4);
        v9 = *(_DWORD *)(v7 + v4 + 8);
        if (v9 < 0)
        {
          v8->n128_u32[2] = v9 & 0x7FFFFFFF;
          v12 = v8[1].n128_i64[0];
          v11 = v8 + 1;
          v10 = v12;
          if (v12)
          {
            if ((*(_BYTE *)(v7 + v4 + 24) & 1) != 0)
            {
              (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)(v7 + v4 + 32), v6);
              v6 = 0uLL;
            }
            *v11 = v6;
            v11[1] = v6;
            v3 = *(unsigned int *)(a1 + 32);
          }
        }
        ++v5;
        v4 += 56;
      }
      while (v5 < v3);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v13 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v13;
  }
}

unint64_t re::MaterialDefinitionBuilder::addTechnique@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v34, a2);
  if (!*(_QWORD *)(a1 + 1120)
    || (v7 = *(unsigned int *)(*(_QWORD *)(a1 + 1128) + 4 * (v6 % *(unsigned int *)(a1 + 1144))),
        (_DWORD)v7 == 0x7FFFFFFF))
  {
LABEL_6:
    v32 = a3;
    v9 = re::globalAllocators((re *)v6);
    v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 688, 8);
    bzero(v10, 0x2B0uLL);
    v12 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v10, 0);
    *(_OWORD *)(v10 + 7) = 0u;
    *(_OWORD *)(v10 + 5) = 0u;
    v13 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v10 + 5, 0);
    *((_DWORD *)v10 + 30) = 0;
    *(_OWORD *)(v10 + 13) = 0u;
    *(_OWORD *)(v10 + 11) = 0u;
    *(_OWORD *)(v10 + 9) = 0u;
    *(_QWORD *)((char *)v10 + 124) = 0x7FFFFFFFLL;
    *((_OWORD *)v10 + 10) = 0u;
    *((_OWORD *)v10 + 9) = 0u;
    re::DynamicString::setCapacity(v10 + 18, 0);
    v10[30] = 0xFFFF000100010000;
    *((_DWORD *)v10 + 56) = 0;
    *((_OWORD *)v10 + 12) = 0u;
    *((_OWORD *)v10 + 13) = 0u;
    *((_OWORD *)v10 + 11) = 0u;
    *(_QWORD *)((char *)v10 + 228) = 0x7FFFFFFFLL;
    *((_WORD *)v10 + 124) = 1792;
    *((_BYTE *)v10 + 250) = 4;
    *(_OWORD *)((char *)v10 + 252) = xmmword_226133C50;
    *((_DWORD *)v10 + 67) = 5;
    v10[34] = 0xF00000000;
    v10[38] = 0;
    v10[39] = 0;
    v10[37] = 0;
    *((_DWORD *)v10 + 80) = 0;
    v10[35] = 0;
    *(_QWORD *)((char *)v10 + 285) = 0;
    v10[64] = 0;
    *((_BYTE *)v10 + 520) = 0;
    *((_DWORD *)v10 + 142) = 0;
    *(_OWORD *)(v10 + 67) = 0u;
    *(_OWORD *)(v10 + 69) = 0u;
    *((_DWORD *)v10 + 90) = 0;
    *(_OWORD *)(v10 + 43) = 0u;
    *(_OWORD *)(v10 + 41) = 0u;
    *((_OWORD *)v10 + 23) = 0u;
    *((_OWORD *)v10 + 24) = 0u;
    *((_OWORD *)v10 + 25) = 0u;
    *((_OWORD *)v10 + 26) = 0u;
    *((_OWORD *)v10 + 27) = 0u;
    *((_OWORD *)v10 + 28) = 0u;
    *((_DWORD *)v10 + 116) = 0;
    *(_OWORD *)(v10 + 59) = 0u;
    *(_OWORD *)(v10 + 61) = 0u;
    *((_DWORD *)v10 + 126) = 0;
    *(_QWORD *)((char *)v10 + 572) = 0x7FFFFFFFLL;
    *(_OWORD *)(v10 + 73) = 0u;
    *(_OWORD *)(v10 + 75) = 0u;
    *((_DWORD *)v10 + 154) = 0;
    *(_QWORD *)((char *)v10 + 620) = 0x7FFFFFFFLL;
    *(_OWORD *)(v10 + 79) = 0u;
    *(_OWORD *)(v10 + 81) = 0u;
    *((_DWORD *)v10 + 166) = 0;
    *(_QWORD *)((char *)v10 + 668) = 0x7FFFFFFFLL;
    *((_DWORD *)v10 + 170) = 0;
    *((_DWORD *)v10 + 171) = 0x10000;
    re::DynamicString::operator=((re::DynamicString *)v10, (re::DynamicString *)a2);
    v14 = re::Hash<re::DynamicString>::operator()((uint64_t)&v34, a2);
    v15 = v14;
    v33 = (_QWORD *)(a1 + 1120);
    if (*(_QWORD *)(a1 + 1120))
    {
      v16 = v14 % *(unsigned int *)(a1 + 1144);
      v17 = *(unsigned int *)(*(_QWORD *)(a1 + 1128) + 4 * v16);
      if ((_DWORD)v17 != 0x7FFFFFFF)
      {
        v18 = *(_QWORD *)(a1 + 1136);
        while (!re::DynamicString::operator==(v18 + 56 * v17 + 16, a2))
        {
          v17 = *(_DWORD *)(v18 + 56 * v17 + 8) & 0x7FFFFFFF;
          if (v17 == 0x7FFFFFFF)
            goto LABEL_13;
        }
        goto LABEL_19;
      }
    }
    else
    {
      LODWORD(v16) = 0;
    }
LABEL_13:
    v19 = *(unsigned int *)(a1 + 1156);
    if ((_DWORD)v19 == 0x7FFFFFFF)
    {
      v19 = *(unsigned int *)(a1 + 1152);
      v20 = v19;
      if ((_DWORD)v19 == *(_DWORD *)(a1 + 1144))
      {
        re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)v33, 2 * *(_DWORD *)(a1 + 1148));
        LODWORD(v16) = v15 % *(unsigned int *)(a1 + 1144);
        v20 = *(_DWORD *)(a1 + 1152);
      }
      *(_DWORD *)(a1 + 1152) = v20 + 1;
      v21 = *(_QWORD *)(a1 + 1136);
      v22 = *(_DWORD *)(v21 + 56 * v19 + 8);
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 1136);
      v22 = *(_DWORD *)(v21 + 56 * v19 + 8);
      *(_DWORD *)(a1 + 1156) = v22 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v21 + 56 * v19 + 8) = v22 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 1136) + 56 * v19 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 1136) + 56 * v19 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 1128) + 4 * v16);
    *(_QWORD *)(*(_QWORD *)(a1 + 1136) + 56 * v19) = v15;
    re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 1136) + 56 * v19 + 16), (const re::DynamicString *)a2);
    *(_QWORD *)(*(_QWORD *)(a1 + 1136) + 56 * v19 + 48) = v10;
    *(_DWORD *)(*(_QWORD *)(a1 + 1128) + 4 * v16) = v19;
    ++*(_DWORD *)(a1 + 1148);
    ++*(_DWORD *)(a1 + 1160);
LABEL_19:
    result = re::Hash<re::DynamicString>::operator()((uint64_t)&v34, a2);
    v24 = 0x7FFFFFFFLL;
    if (*v33)
    {
      v25 = *(unsigned int *)(*(_QWORD *)(a1 + 1128) + 4 * (result % *(unsigned int *)(a1 + 1144)));
      if ((_DWORD)v25 != 0x7FFFFFFF)
      {
        v26 = *(_QWORD *)(a1 + 1136);
        v24 = 0x7FFFFFFFLL;
        while (1)
        {
          result = re::DynamicString::operator==(v26 + 56 * v25 + 16, a2);
          if ((result & 1) != 0)
            break;
          v25 = *(_DWORD *)(v26 + 56 * v25 + 8) & 0x7FFFFFFF;
          if (v25 == 0x7FFFFFFF)
            goto LABEL_28;
        }
        v24 = v25;
      }
    }
LABEL_28:
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 1136) + 56 * v24 + 48);
    *(_BYTE *)v32 = 1;
    *(_QWORD *)(v32 + 8) = v28;
    return result;
  }
  v8 = *(_QWORD *)(a1 + 1136);
  while (1)
  {
    v6 = re::DynamicString::operator==(v8 + 56 * v7 + 16, a2);
    if ((v6 & 1) != 0)
      break;
    v7 = *(_DWORD *)(v8 + 56 * v7 + 8) & 0x7FFFFFFF;
    if (v7 == 0x7FFFFFFF)
      goto LABEL_6;
  }
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    v27 = *(_QWORD *)(a2 + 16);
  else
    v27 = a2 + 9;
  result = re::DynamicString::format((re::DynamicString *)"Duplicate technique added to MaterialBuilder %s", (re::DynamicString *)&v34, v27);
  v29 = v34;
  v30 = v35;
  v31 = v36;
  *(_BYTE *)a3 = 0;
  *(_OWORD *)(a3 + 8) = v29;
  *(_QWORD *)(a3 + 24) = v30;
  *(_QWORD *)(a3 + 32) = v31;
  return result;
}

uint64_t re::MaterialBuilder::MaterialBuilder(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  id v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  char *v35;
  const char *v36;
  re *v37;
  char *v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  NSObject *v42;
  void *v43;
  NSObject *v44;
  void *v45;
  uint64_t v47;

  v15 = *a5;
  *(_BYTE *)(a1 + 8) = v15;
  if (v15)
    *(_BYTE *)(a1 + 9) = a5[1];
  v16 = a5[2];
  *(_BYTE *)(a1 + 10) = v16;
  if (v16)
    *(_BYTE *)(a1 + 11) = a5[3];
  v17 = a5[4];
  *(_BYTE *)(a1 + 12) = v17;
  if (v17)
    *(_BYTE *)(a1 + 13) = a5[5];
  v18 = a5[6];
  *(_BYTE *)(a1 + 14) = v18;
  if (v18)
    *(_BYTE *)(a1 + 15) = a5[7];
  v19 = a5[8];
  *(_BYTE *)(a1 + 16) = v19;
  if (v19)
    *(_BYTE *)(a1 + 17) = a5[9];
  v20 = a5[10];
  *(_BYTE *)(a1 + 18) = v20;
  if (v20)
    *(_BYTE *)(a1 + 19) = a5[11];
  v21 = a5[12];
  *(_BYTE *)(a1 + 20) = v21;
  if (v21)
    *(_BYTE *)(a1 + 21) = a5[13];
  v22 = a5[14];
  *(_BYTE *)(a1 + 22) = v22;
  if (v22)
    *(_BYTE *)(a1 + 23) = a5[15];
  v23 = a5[16];
  *(_BYTE *)(a1 + 24) = v23;
  if (v23)
    *(_BYTE *)(a1 + 25) = a5[17];
  v24 = *a2;
  *(_QWORD *)(a1 + 32) = *a2;
  if (v24)
    v25 = (id)(v24 + 8);
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 76) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 40), a4);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 216) = &off_24ED36808;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 488) = 1;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_DWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_DWORD *)(a1 + 592) = 0;
  v26 = re::ShaderParameterTable::operator=((uint64_t *)(a1 + 88), a3);
  v26[95] = 0;
  *(_OWORD *)(v26 + 93) = 0u;
  *(_OWORD *)(v26 + 91) = 0u;
  *(_OWORD *)(v26 + 89) = 0u;
  *(_OWORD *)(v26 + 87) = 0u;
  *(_OWORD *)(v26 + 85) = 0u;
  *(_OWORD *)(v26 + 83) = 0u;
  *((_OWORD *)v26 + 33) = 0u;
  *((_OWORD *)v26 + 34) = 0u;
  *((_OWORD *)v26 + 35) = 0u;
  *((_OWORD *)v26 + 36) = 0u;
  *((_OWORD *)v26 + 37) = 0u;
  *((_OWORD *)v26 + 38) = 0u;
  *((_OWORD *)v26 + 39) = 0u;
  *((_OWORD *)v26 + 40) = 0u;
  v26[82] = (uint64_t)off_24ED3A908;
  *((_OWORD *)v26 + 49) = 0u;
  *((_OWORD *)v26 + 50) = 0u;
  *((_OWORD *)v26 + 51) = 0u;
  *((_OWORD *)v26 + 52) = 0u;
  *((_OWORD *)v26 + 48) = 0u;
  *(_OWORD *)((char *)v26 + 844) = 0u;
  v26[128] = 0;
  *((_OWORD *)v26 + 62) = 0u;
  *((_OWORD *)v26 + 63) = 0u;
  *((_OWORD *)v26 + 60) = 0u;
  *((_OWORD *)v26 + 61) = 0u;
  *((_OWORD *)v26 + 58) = 0u;
  *((_OWORD *)v26 + 59) = 0u;
  *((_OWORD *)v26 + 56) = 0u;
  *((_OWORD *)v26 + 57) = 0u;
  *((_OWORD *)v26 + 54) = 0u;
  *((_OWORD *)v26 + 55) = 0u;
  v27 = a6[1];
  v26[126] = *a6;
  v26[127] = v27;
  *a6 = 0;
  a6[1] = 0;
  v28 = v26[128];
  v26[128] = a6[2];
  a6[2] = v28;
  v26[130] = 0;
  v26[129] = 0;
  v26[131] = 0;
  v29 = a6[4];
  v26[129] = a6[3];
  v26[130] = v29;
  a6[3] = 0;
  a6[4] = 0;
  v30 = v26[131];
  v26[131] = a6[5];
  a6[5] = v30;
  *((_DWORD *)v26 + 264) = 0;
  *(_OWORD *)(v26 + 133) = 0u;
  *(_OWORD *)(v26 + 135) = 0u;
  *(_OWORD *)(v26 + 137) = 0u;
  *(_OWORD *)(v26 + 139) = 0u;
  v26[141] = 0;
  v26[142] = a8;
  *((_BYTE *)v26 + 1144) = 0;
  if (*(v26 - 7))
  {
    v31 = *(_QWORD *)(a7 + 8);
    if ((v31 & 1) != 0)
      v32 = v31 >> 1;
    else
      v32 = v31 >> 1;
    if (v32)
    {
      v33 = v32 + 1;
      v34 = re::globalAllocators((re *)v26);
      v35 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v34[2] + 32))(v34[2], v33, 0);
      *(_QWORD *)a1 = v35;
      if ((*(_QWORD *)(a7 + 8) & 1) != 0)
        v36 = *(const char **)(a7 + 16);
      else
        v36 = (const char *)(a7 + 9);
    }
    else
    {
      v37 = (re *)strlen(*(const char **)(*a2 + 1424));
      v38 = (char *)v37 + 1;
      v39 = re::globalAllocators(v37);
      v35 = (char *)(*(uint64_t (**)(uint64_t, char *, _QWORD))(*(_QWORD *)v39[2] + 32))(v39[2], v38, 0);
      *(_QWORD *)a1 = v35;
      v36 = *(const char **)(*a2 + 1424);
    }
    v40 = strcpy(v35, v36);
    re::make::shared::object<re::FunctionReflectionCache>((re *)v40, &v47);
    v41 = *(_QWORD *)(a1 + 1168);
    *(_QWORD *)(a1 + 1168) = v47;
    v47 = v41;
    if (v41)

    v42 = dispatch_group_create();
    v43 = *(void **)(a1 + 1152);
    *(_QWORD *)(a1 + 1152) = v42;

    v44 = dispatch_group_create();
    v45 = *(void **)(a1 + 1160);
    *(_QWORD *)(a1 + 1160) = v44;

  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 1144) = 8;
  }
  return a1;
}

re::MaterialBuilder *re::MaterialBuilder::MaterialBuilder(re::MaterialBuilder *this)
{
  _anonymous_namespace_ *v2;
  uint64_t v4;
  char v5;
  _OWORD v6[3];
  _QWORD v7[2];
  __int16 v8;
  _OWORD v9[2];
  __int128 v10;
  uint64_t v11[20];
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  __int128 v40;
  int v41;
  uint64_t v42;

  v42 = 0;
  bzero(v11, 0x210uLL);
  v11[16] = (uint64_t)&off_24ED36808;
  memset(&v11[17], 0, 24);
  v24 = 0u;
  v25 = 0u;
  v26 = 0;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v12 = 0;
  v23 = 0;
  v30 = 1;
  v33 = 0;
  v34 = 0;
  v31 = 0;
  v32 = 0;
  v37 = 0;
  v38 = 0;
  v35 = 0;
  v36 = 0;
  v39 = 0u;
  v40 = 0u;
  v41 = 0;
  v10 = 0u;
  memset(v9, 0, sizeof(v9));
  DWORD1(v10) = 0x7FFFFFFF;
  v8 = 0;
  v7[0] = 0;
  v7[1] = 0;
  memset(v6, 0, sizeof(v6));
  re::MaterialBuilder::MaterialBuilder((uint64_t)this, &v42, v11, (uint64_t *)v9, (unsigned __int8 *)v7, (uint64_t *)v6, (uint64_t)&v4, 0);
  if (v4 && (v5 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v4 + 40))();
  re::FixedArray<re::LinkedFunction>::deinit((_QWORD *)&v6[1] + 1);
  re::FixedArray<re::LinkedFunction>::deinit(v6);
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v9);
  re::ShaderParameterTable::~ShaderParameterTable((re::ShaderParameterTable *)v11);
  *((_DWORD *)this + 286) = 8;
  return this;
}

uint64_t re::MaterialBuilder::MaterialBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 22) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_QWORD *)(a1 + 76) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 216) = &off_24ED36808;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 488) = 1;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_DWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_DWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_QWORD *)(a1 + 744) = off_24ED3A908;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 932) = 0u;
  *(_DWORD *)(a1 + 1144) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_QWORD *)(a1 + 1216) = 0;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 1232) = 0;
  re::MaterialRenderFlags::operator=((_BYTE *)(a1 + 8), (unsigned __int8 *)(a2 + 8));
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v4;
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 40, (uint64_t *)(a2 + 40));
  re::ShaderParameterTable::operator=((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
  re::TextureParameterTable::operator=((uint64_t *)(a1 + 616), (uint64_t *)(a2 + 616));
  *(_DWORD *)(a1 + 1144) = *(_DWORD *)(a2 + 1144);
  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a2 + 1152);
    *(_QWORD *)(a2 + 1152) = 0;
    v6 = *(void **)(a1 + 1152);
    *(_QWORD *)(a1 + 1152) = v5;

    v7 = *(_QWORD *)(a2 + 1160);
    *(_QWORD *)(a2 + 1160) = 0;
    v8 = *(void **)(a1 + 1160);
    *(_QWORD *)(a1 + 1160) = v7;

  }
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a1 + 1168), *(_QWORD *)(a2 + 1168));
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)(a1 + 1096), (uint64_t *)(a2 + 1096));
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)(a1 + 1120), (uint64_t *)(a2 + 1120));
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)(a1 + 1176), (uint64_t *)(a2 + 1176));
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)(a1 + 1200), (uint64_t *)(a2 + 1200));
  *(_QWORD *)(a1 + 1224) = *(_QWORD *)(a2 + 1224);
  *(_BYTE *)(a1 + 1232) = *(_BYTE *)(a2 + 1232);
  v9 = *(_QWORD *)(a2 + 32);
  if (v9)
  {

    *(_QWORD *)(a2 + 32) = 0;
  }
  *(_QWORD *)a2 = 0;
  v10 = *(_QWORD *)(a2 + 1168);
  if (v10)
  {

    *(_QWORD *)(a2 + 1168) = 0;
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(_QWORD *)a1 || *(_QWORD *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t *re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (result != a2)
  {
    v2 = *result;
    v3 = *a2;
    if (*result)
      v4 = v2 == v3;
    else
      v4 = 1;
    if (v4)
    {
      *result = v3;
      *a2 = v2;
      v5 = result[1];
      v6 = result[2];
      v7 = a2[2];
      result[1] = a2[1];
      result[2] = v7;
      a2[1] = v5;
      a2[2] = v6;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
      result = (uint64_t *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::MaterialBuilder::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  re::MaterialBuilder::destroy((re::MaterialBuilder *)a1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  re::MaterialRenderFlags::operator=((_BYTE *)(a1 + 8), (unsigned __int8 *)(a2 + 8));
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v4;
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 40, (uint64_t *)(a2 + 40));
  re::ShaderParameterTable::operator=((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
  re::TextureParameterTable::operator=((uint64_t *)(a1 + 616), (uint64_t *)(a2 + 616));
  *(_DWORD *)(a1 + 1144) = *(_DWORD *)(a2 + 1144);
  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a2 + 1152);
    *(_QWORD *)(a2 + 1152) = 0;
    v6 = *(void **)(a1 + 1152);
    *(_QWORD *)(a1 + 1152) = v5;

    v7 = *(_QWORD *)(a2 + 1160);
    *(_QWORD *)(a2 + 1160) = 0;
    v8 = *(void **)(a1 + 1160);
    *(_QWORD *)(a1 + 1160) = v7;

  }
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a1 + 1168), *(_QWORD *)(a2 + 1168));
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)(a1 + 1096), (uint64_t *)(a2 + 1096));
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)(a1 + 1120), (uint64_t *)(a2 + 1120));
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)(a1 + 1176), (uint64_t *)(a2 + 1176));
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)(a1 + 1200), (uint64_t *)(a2 + 1200));
  *(_QWORD *)(a1 + 1224) = *(_QWORD *)(a2 + 1224);
  *(_BYTE *)(a1 + 1232) = *(_BYTE *)(a2 + 1232);
  v9 = *(_QWORD *)(a2 + 32);
  if (v9)
  {

    *(_QWORD *)(a2 + 32) = 0;
  }
  *(_QWORD *)a2 = 0;
  v10 = *(_QWORD *)(a2 + 1168);
  if (v10)
  {

    *(_QWORD *)(a2 + 1168) = 0;
  }
  return a1;
}

void re::MaterialBuilder::destroy(re::MaterialBuilder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {

    *((_QWORD *)this + 4) = 0;
  }
  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = re::globalAllocators(this);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4[2] + 40))(v4[2], v3);
    *(_QWORD *)this = 0;
  }
  re::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit((_QWORD *)this + 147);
  v5 = *((_QWORD *)this + 146);
  if (v5)
  {

    *((_QWORD *)this + 146) = 0;
  }
  *((_DWORD *)this + 286) = 8;
}

void re::MaterialBuilder::~MaterialBuilder(re::MaterialBuilder *this)
{
  uint64_t v2;
  uint64_t v3;

  re::MaterialBuilder::destroy(this);
  re::FixedArray<re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>>::deinit((_QWORD *)this + 150);
  re::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit((_QWORD *)this + 147);
  v2 = *((_QWORD *)this + 146);
  if (v2)
  {

    *((_QWORD *)this + 146) = 0;
  }

  re::FixedArray<re::LinkedFunction>::deinit((_QWORD *)this + 140);
  re::FixedArray<re::LinkedFunction>::deinit((_QWORD *)this + 137);
  re::TextureParameterTable::~TextureParameterTable((re::MaterialBuilder *)((char *)this + 616));
  re::ShaderParameterTable::~ShaderParameterTable((re::MaterialBuilder *)((char *)this + 88));
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 5);
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {

    *((_QWORD *)this + 4) = 0;
  }
}

double re::MaterialBuilder::addOrReplaceFunctionConstants(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  double result;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  const char *v13;
  re::DynamicString *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _BYTE v34[7];
  const char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 24);
  if (a3)
  {
    v9 = 0;
    v10 = a2 + (a3 << 6);
    v11 = a2;
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v32, (const re::DynamicString *)v11);
      v36 = *(_DWORD *)(v11 + 32);
      v12 = (_anonymous_namespace_ *)re::FixedArray<unsigned char>::FixedArray(&v37, (uint64_t *)(v11 + 40));
      if ((v33 & 1) != 0)
        v13 = v35;
      else
        v13 = v34;
      v14 = (re::DynamicString *)re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a4, (uint64_t)&v28);
      if ((_QWORD)v28 && (BYTE8(v28) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v28 + 40))();
      if (v14)
      {
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)a1, v14);
        ++v9;
      }
      else
      {
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)a1, (re::DynamicString *)&v32);
      }
      if (v37)
      {
        if (v38)
        {
          (*(void (**)(void))(*(_QWORD *)v37 + 40))();
          v38 = 0;
          v39 = 0;
        }
        v37 = 0;
      }
      if (v32 && (v33 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v32 + 40))();
      v11 += 64;
    }
    while (v11 != v10);
    if (v9 >= *(_DWORD *)(a4 + 28))
      return result;
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
    v31 = 0x7FFFFFFFLL;
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v32, (const re::DynamicString *)a2);
      v36 = *(_DWORD *)(a2 + 32);
      re::FixedArray<unsigned char>::FixedArray(&v37, (uint64_t *)(a2 + 40));
      re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)&v28, (re::DynamicString *)&v32);
      if (v37)
      {
        if (v38)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 40))(v37, v39, v15, v16, v17, v18);
          v38 = 0;
          v39 = 0;
        }
        v37 = 0;
      }
      if (v32 && (v33 & 1) != 0)
        (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32 + 40))(v32, v35, v15, v16, v17, v18);
      a2 += 64;
    }
    while (a2 != v10);
  }
  else
  {
    if (!*(_DWORD *)(a4 + 28))
      return result;
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
    v19 = 0x7FFFFFFFLL;
    v31 = 0x7FFFFFFFLL;
  }
  v20 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v20)
  {
    v21 = 0;
    v22 = (int *)(*(_QWORD *)(a4 + 16) + 8);
    while (1)
    {
      v23 = *v22;
      v22 += 28;
      if (v23 < 0)
        break;
      if (v20 == ++v21)
      {
        LODWORD(v21) = *(_DWORD *)(a4 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v21) = 0;
  }
  if ((_DWORD)v20 != (_DWORD)v21)
  {
    v24 = v21;
    v25 = *(_QWORD *)(a4 + 16);
    do
    {
      if (!re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)&v28, v25 + 112 * v24 + 16))re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)a1, (re::DynamicString *)(v25 + 112 * v24 + 48));
      v26 = *(_DWORD *)(a4 + 32);
      v25 = *(_QWORD *)(a4 + 16);
      if (v26 <= (int)v21 + 1)
        v26 = v21 + 1;
      while (1)
      {
        v24 = (v21 + 1);
        if (v26 - 1 == (_DWORD)v21)
          break;
        LODWORD(v21) = v21 + 1;
        v27 = v24;
        if ((*(_DWORD *)(v25 + 112 * v24 + 8) & 0x80000000) != 0)
          goto LABEL_49;
      }
      v27 = v26;
LABEL_49:
      LODWORD(v21) = v27;
    }
    while ((_DWORD)v20 != v27);
  }
  return re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v28, *(double *)&v19);
}

void re::MaterialBuilder::tickBuilder(re::MaterialBuilder *this@<X0>, re::RenderManager *a2@<X1>, uint64_t a3@<X8>)
{
  re::RenderManager *v3;
  re::MaterialBuilder *v4;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _anonymous_namespace_ *v26;
  uint64_t v27;
  uint64_t v28;
  re::MaterialBuilder *v29;
  uint64_t v30;
  re::MaterialBuilder *v31;
  uint64_t v32;
  _anonymous_namespace_ *v33;
  __int128 v34;
  mach_timebase_info v35;
  mach_timebase_info v36;
  int v37;
  _anonymous_namespace_ *v38;
  __int128 v39;
  mach_timebase_info v40;
  mach_timebase_info v41;
  re::MaterialBuilder *v42;
  uint64_t v43;
  re::MaterialBuilder *v44;
  uint64_t v45;
  re::MaterialBuilder *v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  re::DynamicString *v58;
  re::DynamicString *v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  re::MaterialBuilder *v63;
  unint64_t v64;
  unint64_t v65;
  double v66;
  _anonymous_namespace_ *v67;
  __int128 v68;
  mach_timebase_info v69;
  mach_timebase_info v70;
  int v71;
  _QWORD *v72;
  char *v73;
  unint64_t v74;
  re *v75;
  uint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  NSObject *v82;
  const char *v83;
  BOOL v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  __int128 v88;
  unsigned __int8 v89;
  BOOL v90;
  int v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  uint64_t v98;
  int *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  const char *v104;
  _anonymous_namespace_ *v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char **v113;
  const char *v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  unint64_t j;
  unsigned __int8 As64Bits;
  re::DynamicString *v120;
  re::DynamicString *v121;
  int v122;
  _anonymous_namespace_ *v123;
  int v124;
  _anonymous_namespace_ *v125;
  _anonymous_namespace_ *v126;
  uint64_t v127;
  re::MaterialBuilder *v128;
  uint64_t v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  _anonymous_namespace_ *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  int v137;
  _DWORD *v138;
  int v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  double v151;
  double v152;
  int v153;
  const char *v154;
  const char *v155;
  const char *v156;
  const char *v157;
  const char *v158;
  const char *v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char numer;
  mach_timebase_info v166;
  int v167;
  uint64_t *v168;
  uint64_t *v169;
  mach_timebase_info *v170;
  mach_timebase_info *v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t v175;
  mach_timebase_info *v176;
  mach_timebase_info *v177;
  mach_timebase_info *v178;
  uint64_t v179;
  mach_timebase_info v180;
  id v181;
  mach_timebase_info *v182;
  uint64_t i;
  mach_timebase_info v184;
  void *v185;
  id v186;
  int v187;
  re::MaterialBuilder *v188;
  _anonymous_namespace_ *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  _anonymous_namespace_ *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  re::RenderManager *v199;
  uint64_t v200;
  unint64_t v201;
  re::MaterialBuilder *v202;
  uint64_t v203;
  uint64_t v204[6];
  uint64_t v205[6];
  _QWORD v206[3];
  _BYTE v207[16];
  uint64_t v208;
  re::DynamicString *v209;
  uint64_t v210[4];
  int v211;
  uint64_t v212;
  uint64_t v213[4];
  int v214;
  uint64_t v215;
  _OWORD v216[3];
  int v217;
  _QWORD v218[4];
  unint64_t v219;
  uint64_t v220[8];
  _OWORD v221[2];
  _QWORD v222[3];
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD v226[3];
  _OWORD v227[3];
  int v228;
  char v229[8];
  char *v230;
  _BYTE v231[16];
  uint64_t v232;
  _anonymous_namespace_ *v233;
  uint64_t v234[3];
  int v235;
  uint64_t v236;
  uint64_t v237[4];
  int v238;
  uint64_t v239;
  _BYTE v240[16];
  uint64_t v241;
  re::DynamicString *v242;
  id v243;
  id v244;
  char v245[8];
  id v246;
  char v247[8];
  id v248;
  id v249;
  id v250;
  uint64_t v251;
  _BYTE v252[40];
  uint64_t v253;
  uint64_t v254;
  __int16 v255;
  mach_timebase_info *v256;
  uint64_t v257;
  uint64_t v258;
  char v259;
  uint64_t v260;
  __int128 v261;
  __int128 v262;
  mach_timebase_info info[4];
  _QWORD v264[6];
  uint64_t v265;
  int v266;
  const char *v267;
  __int16 v268;
  int v269;
  __int16 v270;
  unint64_t v271;
  __int16 v272;
  unint64_t v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  uint64_t v279;

  v3 = a2;
  v4 = this;
  v279 = *MEMORY[0x24BDAC8D0];
  v6 = *((_DWORD *)this + 286);
  v202 = this;
  switch(v6)
  {
    case 0:
      v7 = *((_QWORD *)this + 146);
      v8 = *((_QWORD *)this + 138);
      if (v8)
      {
        v9 = 0;
        v10 = 1;
        do
        {
          v11 = *((_QWORD *)v4 + 139);
          if (!*(_QWORD *)(v11 + 144 * v9 + 48))
          {
            memset(info, 0, 28);
            memset(v264, 0, 40);
            re::DynamicString::setCapacity(&v264[1], 0);
            v12 = v11 + 144 * v9;
            *(_QWORD *)&v252[8] = 0;
            *(_QWORD *)v252 = 0;
            v13 = *(_QWORD *)(v12 + 72);
            *(_QWORD *)v252 = *(_QWORD *)(v12 + 80);
            *(_QWORD *)&v252[8] = v13;
            re::DynamicArray<re::TechniqueFunctionConstant>::operator=((_anonymous_namespace_ *)info, (uint64_t)v252);
            v14 = strlen(*(const char **)(v12 + 32));
            *(_QWORD *)v252 = *(_QWORD *)(v12 + 32);
            *(_QWORD *)&v252[8] = v14;
            re::DynamicString::operator=((re::DynamicString *)&v264[1], (uint64_t)v252);
            v264[5] = *(_QWORD *)(v12 + 40);
            v265 = (((v264[5] << 6) - 0x61C8864680B583E9 + (v264[5] >> 2) + (*(_QWORD *)(v12 + 24) >> 1)) ^ v264[5])
                 - 0x61C8864680B583E9;
            re::FunctionReflectionCache::addTask(v7, (uint64_t)info);
            if (v264[1])
            {
              if ((v264[2] & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v264[1] + 40))();
              memset(&v264[1], 0, 32);
            }
            this = (re::MaterialBuilder *)re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)info);
            v4 = v202;
            v8 = *((_QWORD *)v202 + 138);
          }
          v9 = v10;
          v15 = v8 > v10++;
        }
        while (v15);
      }
      v16 = *((_QWORD *)v4 + 141);
      if (v16)
      {
        v17 = 0;
        v18 = 1;
        do
        {
          v19 = *((_QWORD *)v4 + 142);
          if (!*(_QWORD *)(v19 + 144 * v17 + 48))
          {
            memset(info, 0, 28);
            memset(v264, 0, 40);
            re::DynamicString::setCapacity(&v264[1], 0);
            v20 = v19 + 144 * v17;
            *(_QWORD *)&v252[8] = 0;
            *(_QWORD *)v252 = 0;
            v21 = *(_QWORD *)(v20 + 72);
            *(_QWORD *)v252 = *(_QWORD *)(v20 + 80);
            *(_QWORD *)&v252[8] = v21;
            re::DynamicArray<re::TechniqueFunctionConstant>::operator=((_anonymous_namespace_ *)info, (uint64_t)v252);
            v22 = strlen(*(const char **)(v20 + 32));
            *(_QWORD *)v252 = *(_QWORD *)(v20 + 32);
            *(_QWORD *)&v252[8] = v22;
            re::DynamicString::operator=((re::DynamicString *)&v264[1], (uint64_t)v252);
            v264[5] = *(_QWORD *)(v20 + 40);
            v265 = (((v264[5] << 6) - 0x61C8864680B583E9 + (v264[5] >> 2) + (*(_QWORD *)(v20 + 24) >> 1)) ^ v264[5])
                 - 0x61C8864680B583E9;
            re::FunctionReflectionCache::addTask(v7, (uint64_t)info);
            if (v264[1])
            {
              if ((v264[2] & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v264[1] + 40))();
              memset(&v264[1], 0, 32);
            }
            this = (re::MaterialBuilder *)re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)info);
            v4 = v202;
            v16 = *((_QWORD *)v202 + 141);
          }
          v17 = v18;
          v15 = v16 > v18++;
        }
        while (v15);
      }
      v3 = a2;
      if (*(_QWORD *)(*((_QWORD *)v4 + 146) + 88))
      {
        *((_DWORD *)v4 + 286) = 1;
        v23 = (uint64_t *)((char *)v4 + 1176);
        v24 = *(_QWORD *)(*((_QWORD *)v4 + 4) + 120);
        v25 = *(_QWORD *)(*((_QWORD *)v202 + 4) + 120);
        v27 = mach_absolute_time();
        v28 = *((_QWORD *)v202 + 146);
        *(_QWORD *)(v28 + 16) = v27;
        v250 = *((id *)v202 + 144);
        re::FunctionReflectionCache::scheduleAllFunctionBuildTasks(v28, (uint64_t)a2, &v250, 1, *((_QWORD *)v202 + 153));

        v4 = v202;
      }
      if (*((_DWORD *)v4 + 286) == 1)
        goto LABEL_23;
      goto LABEL_26;
    case 1:
LABEL_23:
      v29 = v4;
      if (dispatch_group_wait(*((dispatch_group_t *)v4 + 144), 0))
        goto LABEL_28;
      v30 = *((_QWORD *)v29 + 146);
      if (*(_QWORD *)(v30 + 88))
        goto LABEL_28;
      v249 = *((id *)v29 + 145);
      re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(v30, (uint64_t)v3, (dispatch_group_t *)&v249, 1, *((void **)v29 + 153));

      v4 = v29;
LABEL_26:
      *((_DWORD *)v4 + 286) = 2;
LABEL_27:
      v31 = v4;
      if (dispatch_group_wait(*((dispatch_group_t *)v4 + 145), 0))
        goto LABEL_28;
      v32 = (uint64_t)v31 + 1096;
      re::fillLinkedArgumentsWithReflection((re::MaterialBuilder *)((char *)v31 + 1096), *((os_unfair_lock_s **)v31 + 146), (uint64_t)v247);
      if (v247[0])

      re::fillLinkedArgumentsWithReflection((re::MaterialBuilder *)((char *)v202 + 1120), *((os_unfair_lock_s **)v202 + 146), (uint64_t)v245);
      if (v245[0])

      re::validateMaterialFunctionReflection((re::RenderManager *)((char *)v3 + 184), v32, 3, "realitykit::geometry_parameters", "realitykit::geometry_parameters_private", "realitykit::ui_geometry_parameters_private", (uint64_t)v252);
      if (v252[0])
      {
        v33 = (_anonymous_namespace_ *)re::ObjCObject::description((id *)&v252[8]);
        v34 = *(_OWORD *)&info[0].numer;
        v35 = info[2];
        v36 = info[3];
        *(_BYTE *)a3 = 0;
        *(_OWORD *)(a3 + 8) = v34;
        *(mach_timebase_info *)(a3 + 24) = v35;
        *(mach_timebase_info *)(a3 + 32) = v36;
        v37 = 1;
      }
      else
      {
        re::validateMaterialFunctionReflection((re::RenderManager *)((char *)v3 + 184), (uint64_t)v202 + 1120, 4, "realitykit::surface_parameters", "realitykit::surface_parameters_private", "realitykit::ui_surface_parameters_private", (uint64_t)&v274);
        if ((_BYTE)v274)
        {
          v38 = (_anonymous_namespace_ *)re::ObjCObject::description((id *)&v274 + 1);
          v39 = *(_OWORD *)&info[0].numer;
          v40 = info[2];
          v41 = info[3];
          *(_BYTE *)a3 = 0;
          *(_OWORD *)(a3 + 8) = v39;
          *(mach_timebase_info *)(a3 + 24) = v40;
          *(mach_timebase_info *)(a3 + 32) = v41;
          v37 = 1;
        }
        else
        {
          v188 = v202;
          re::completeLinkedFunctions(v32, (uint64_t)v202 + 40);
          if (*((_QWORD *)v3 + 13))
          {
            re::MaterialBuilder::createFunctionBuildTasks(v202);
            v190 = *((_QWORD *)v202 + 146);
            if (*(_QWORD *)(v190 + 88))
            {
              *((_DWORD *)v202 + 286) = 3;
              if (!*((_QWORD *)v202 + 147))
              {
                v191 = *(_QWORD *)(*((_QWORD *)v202 + 4) + 120);
                v192 = *(_QWORD *)(*((_QWORD *)v202 + 4) + 120);
                v194 = mach_absolute_time();
                v188 = v202;
                v190 = *((_QWORD *)v202 + 146);
                *(_QWORD *)(v190 + 16) = v194;
              }
              v244 = *((id *)v188 + 144);
              re::FunctionReflectionCache::scheduleAllFunctionBuildTasks(v190, (uint64_t)v3, &v244, 1, *((_QWORD *)v202 + 153));

              v188 = v202;
            }
            v37 = 0;
            if (*((_DWORD *)v188 + 286) != 3)
              *((_DWORD *)v188 + 286) = 6;
          }
          else
          {
            *((_DWORD *)v202 + 286) = 7;
            v37 = 1;
            *(_BYTE *)a3 = 1;
            *(_DWORD *)(a3 + 8) = 1;
          }
        }
        if ((_BYTE)v274)

      }
      if (v252[0])

      if (v37)
        return;
      v4 = v202;
      v6 = *((_DWORD *)v202 + 286);
LABEL_44:
      if (v6 == 5)
      {
        v161 = *((_QWORD *)v4 + 151);
        if (v161)
        {
          v162 = *((_QWORD *)v4 + 152);
          v163 = v162 + 40 * v161;
          do
          {
            info[1] = 0;
            info[0] = 0;
            info[2].numer = 1;
            info[3] = 0;
            v264[0] = 0;
            if (*(_QWORD *)v162)
            {
              v164 = *(_QWORD *)(v162 + 8);
              info[0] = *(mach_timebase_info *)v162;
              re::DynamicOverflowArray<re::SharedPtr<re::ResourceFetchManager::Request>,1ul>::setCapacity((uint64_t *)info, v164);
              numer = info[2].numer;
              info[2].numer += 2;
              v166 = *(mach_timebase_info *)(v162 + 8);
              if (*(unint64_t *)&v166 >= *(_QWORD *)&info[1])
              {
                re::DynamicOverflowArray<re::SharedPtr<re::ResourceFetchManager::Request>,1ul>::setCapacity((uint64_t *)info, *(_QWORD *)(v162 + 8));
                if ((*(_DWORD *)(v162 + 16) & 1) != 0)
                  v173 = (uint64_t *)(v162 + 24);
                else
                  v173 = *(uint64_t **)(v162 + 32);
                if ((info[2].numer & 1) != 0)
                  v174 = (uint64_t *)&info[3];
                else
                  v174 = (uint64_t *)v264[0];
                std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,0>(v173, &v173[*(_QWORD *)&info[1]], v174);
                v175 = *(_QWORD *)(v162 + 32);
                if ((*(_BYTE *)(v162 + 16) & 1) != 0)
                  v175 = v162 + 24;
                if (*(_QWORD *)&info[1] != v166)
                {
                  v176 = (mach_timebase_info *)v264[0];
                  if ((info[2].numer & 1) != 0)
                    v176 = &info[3];
                  v177 = (mach_timebase_info *)(v175 + 8 * *(_QWORD *)&info[1]);
                  v178 = &v176[*(_QWORD *)&info[1]];
                  v179 = 8 * *(_QWORD *)&v166 - 8 * *(_QWORD *)&info[1];
                  do
                  {
                    v180 = *v177;
                    *v178 = *v177;
                    if (v180)
                      v181 = (id)(*(_QWORD *)&v180 + 8);
                    ++v177;
                    ++v178;
                    v179 -= 8;
                  }
                  while (v179);
                }
              }
              else
              {
                v167 = numer & 1;
                if ((*(_DWORD *)(v162 + 16) & 1) != 0)
                  v168 = (uint64_t *)(v162 + 24);
                else
                  v168 = *(uint64_t **)(v162 + 32);
                if (v167)
                  v169 = (uint64_t *)&info[3];
                else
                  v169 = (uint64_t *)v264[0];
                std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,0>(v168, &v168[*(_QWORD *)&v166], v169);
                if ((info[2].numer & 1) != 0)
                  v170 = &info[3];
                else
                  v170 = (mach_timebase_info *)v264[0];
                if (v166 != *(_QWORD *)&info[1])
                {
                  v171 = &v170[*(_QWORD *)&v166];
                  v172 = 8 * *(_QWORD *)&info[1] - 8 * *(_QWORD *)&v166;
                  do
                  {
                    if (*v171)
                    {

                      *v171 = 0;
                    }
                    ++v171;
                    v172 -= 8;
                  }
                  while (v172);
                }
              }
              info[1] = v166;
              v182 = (info[2].numer & 1) != 0 ? &info[3] : (mach_timebase_info *)v264[0];
              if (v166)
              {
                for (i = 8 * *(_QWORD *)&v166; i; i -= 8)
                {
                  v184 = *v182;
                  if (*v182)
                  {
                    v185 = (void *)(*(_QWORD *)&v184 + 8);
                    v186 = (id)(*(_QWORD *)&v184 + 8);
                    v187 = atomic_load((unsigned __int8 *)(*(_QWORD *)&v184 + 240));
                    if (v187 == 1)
                    {
                      *(_BYTE *)a3 = 1;
                      *(_DWORD *)(a3 + 8) = 0;

                      re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::deinit(info);
                      return;
                    }

                  }
                  ++v182;
                }
              }
            }
            re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::deinit(info);
            v4 = v202;
            v162 += 40;
          }
          while (v162 != v163);
        }
        *((_DWORD *)v4 + 286) = 6;
        goto LABEL_315;
      }
      if (v6 == 4)
        goto LABEL_50;
      if (v6 != 3)
      {
LABEL_315:
        *(_BYTE *)a3 = 1;
        *(_DWORD *)(a3 + 8) = 1;
        return;
      }
      v42 = v4;
      if (dispatch_group_wait(*((dispatch_group_t *)v4 + 144), 0))
        goto LABEL_28;
      v43 = *((_QWORD *)v42 + 146);
      if (*(_QWORD *)(v43 + 88))
        goto LABEL_28;
      v243 = *((id *)v42 + 145);
      re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(v43, (uint64_t)v3, (dispatch_group_t *)&v243, 1, *((void **)v42 + 153));

      *((_DWORD *)v42 + 286) = 4;
      v4 = v42;
LABEL_50:
      v44 = v4;
      if (dispatch_group_wait(*((dispatch_group_t *)v4 + 145), 0))
      {
LABEL_28:
        *(_BYTE *)a3 = 1;
        *(_DWORD *)(a3 + 8) = 0;
        return;
      }
      v45 = *((_QWORD *)v44 + 4);
      v46 = v44;
      if (*(_QWORD *)(v45 + 120))
      {
        v47 = 0;
        v48 = 0;
        v196 = (uint64_t)v46 + 40;
        v195 = (uint64_t)v46 + 1096;
        v199 = v3;
        while (1)
        {
          v49 = *(_QWORD *)(*(_QWORD *)(v45 + 128) + 8 * v47);
          if (*(_BYTE *)(v49 + 2845))
          {
            if (re::MaterialBuilder::shouldCompileFallbackShaderForTechnique((_anonymous_namespace_ *)v49, v48))break;
          }
LABEL_253:
          v46 = v202;
          v45 = *((_QWORD *)v202 + 4);
          v47 = ++v48;
          if (*(_QWORD *)(v45 + 120) <= (unint64_t)v48)
            goto LABEL_317;
        }
        v197 = v48;
        re::MaterialBuilder::addOrReplaceFunctionConstants((uint64_t)v240, *(_QWORD *)(v49 + 64), *(_QWORD *)(v49 + 56), v196);
        v238 = 0;
        memset(v237, 0, sizeof(v237));
        v239 = 0x7FFFFFFFLL;
        v236 = 0;
        memset(v234, 0, sizeof(v234));
        v235 = 0;
        v50 = *(unsigned int *)(v49 + 2776);
        if ((_DWORD)v50)
        {
          v51 = 0;
          v52 = (int *)(*(_QWORD *)(v49 + 2760) + 8);
          while (1)
          {
            v53 = *v52;
            v52 += 28;
            if (v53 < 0)
              break;
            if (v50 == ++v51)
            {
              LODWORD(v51) = *(_DWORD *)(v49 + 2776);
              break;
            }
          }
        }
        else
        {
          LODWORD(v51) = 0;
        }
        if ((_DWORD)v50 != (_DWORD)v51)
        {
          v54 = v51;
          do
          {
            v55 = *(_QWORD *)(v49 + 2760) + 112 * v54;
            re::DynamicString::DynamicString((re::DynamicString *)info, (const re::DynamicString *)(v55 + 48));
            LODWORD(v264[0]) = *(_DWORD *)(v55 + 80);
            re::FixedArray<unsigned char>::FixedArray(&v264[1], (uint64_t *)(v55 + 88));
            if (!re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v237, (uint64_t)info))
            {
              re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v237, (re::DynamicString *)info);
              re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v234, (re::DynamicString *)info);
            }
            if (v264[1])
            {
              if (v264[2])
              {
                (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v264[1] + 40))(v264[1], v264[3]);
                v264[2] = 0;
                v264[3] = 0;
              }
              v264[1] = 0;
            }
            if (*(_QWORD *)info && (info[1].numer & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)info + 40))(*(_QWORD *)info, *(_QWORD *)&info[2]);
            if (*(_DWORD *)(v49 + 2776) <= (v51 + 1))
              v56 = v51 + 1;
            else
              v56 = *(_DWORD *)(v49 + 2776);
            while (1)
            {
              v54 = (v51 + 1);
              if (v56 - 1 == (_DWORD)v51)
                break;
              LODWORD(v51) = v51 + 1;
              v57 = v54;
              if ((*(_DWORD *)(*(_QWORD *)(v49 + 2760) + 112 * v54 + 8) & 0x80000000) != 0)
                goto LABEL_79;
            }
            v57 = v56;
LABEL_79:
            LODWORD(v51) = v57;
          }
          while ((_DWORD)v50 != v57);
        }
        if (v241)
        {
          v58 = v242;
          v59 = (re::DynamicString *)((char *)v242 + 64 * v241);
          do
          {
            re::DynamicString::DynamicString((re::DynamicString *)info, v58);
            LODWORD(v264[0]) = *((_DWORD *)v58 + 8);
            re::FixedArray<unsigned char>::FixedArray(&v264[1], (uint64_t *)v58 + 5);
            if (!re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v237, (uint64_t)info))
            {
              re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v237, (re::DynamicString *)info);
              re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v234, (re::DynamicString *)info);
            }
            if (v264[1])
            {
              if (v264[2])
              {
                (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v264[1] + 40))(v264[1], v264[3]);
                v264[2] = 0;
                v264[3] = 0;
              }
              v264[1] = 0;
            }
            if (*(_QWORD *)info && (info[1].numer & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)info + 40))(*(_QWORD *)info, *(_QWORD *)&info[2]);
            v58 = (re::DynamicString *)((char *)v58 + 64);
          }
          while (v58 != v59);
        }
        re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)v231, v234);
        re::TechniqueDefinitionBuilder::buildPipelineData(v233, v232, v49, v195, (uint64_t)v3, *((_QWORD *)v202 + 146), (uint64_t)v229);
        if (!v229[0])
        {
          if (objc_msgSend(v230, "code") == 10 || objc_msgSend(v230, "code") == 90)
          {
            v67 = (_anonymous_namespace_ *)re::ObjCObject::description((id *)&v230);
            v68 = *(_OWORD *)&info[0].numer;
            v69 = info[2];
            v70 = info[3];
            *(_BYTE *)a3 = 0;
            *(_OWORD *)(a3 + 8) = v68;
            *(mach_timebase_info *)(a3 + 24) = v69;
            *(mach_timebase_info *)(a3 + 32) = v70;
            v71 = 1;
          }
          else
          {
            v71 = 4;
          }
          goto LABEL_252;
        }
        v60 = mach_absolute_time();
        v61 = *(_QWORD *)(*((_QWORD *)v202 + 146) + 16);
        v62 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
        v63 = v202;
        if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
        {
          if (mach_timebase_info(info))
          {
            v66 = NAN;
            v63 = v202;
LABEL_101:
            v72 = v230;
            if (v230)
            {
              v73 = v230 + 8;
              v63 = v202;
            }
            v74 = *((_QWORD *)v63 + 148);
            if (v74 <= v47)
              goto LABEL_330;
            re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(*((_QWORD *)v63 + 149) + 8 * v47), (uint64_t)v72);
            v76 = v72[2];
            if (v76)
            {
              v77 = *(void **)(v76 + 8);
              if (v77)
                v78 = v77;
              else
                v78 = &str_2_116;
            }
            else
            {
              v78 = &str_2_116;
            }
            v79 = v72[3];
            if (v79)
            {
              v80 = *(void **)(v79 + 8);
              if (v80)
                v81 = v80;
              else
                v81 = &str_2_116;
            }
            else
            {
              v81 = &str_2_116;
            }
            v82 = *re::graphicsLogObjects(v75);
            if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
            {
              v83 = *(const char **)v49;
              info[0].numer = 136446978;
              *(_QWORD *)&info[0].denom = v83;
              LOWORD(info[1].denom) = 2082;
              *(_QWORD *)((char *)&info[1].denom + 2) = v78;
              HIWORD(info[2].denom) = 2082;
              info[3] = (mach_timebase_info)v81;
              LOWORD(v264[0]) = 1024;
              *(_DWORD *)((char *)v264 + 2) = (int)(v66 / 1000000.0);
              _os_log_impl(&dword_224FE9000, v82, OS_LOG_TYPE_DEFAULT, "Function specialization completed for fallback technique %{public}s with vertex shader %{public}s and fragment shader %{public}s in %d", (uint8_t *)info, 0x26u);
            }

            v74 = *((_QWORD *)v202 + 148);
            if (*((_BYTE *)v202 + 1232))
            {
              v84 = 1;
            }
            else
            {
              if (v74 <= v47)
                goto LABEL_334;
              v84 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v202 + 149) + 8 * v47) + 16) + 64) != 0;
            }
            *((_BYTE *)v202 + 1232) = v84;
            if (v74 <= v47)
              goto LABEL_331;
            v85 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v202 + 149) + 8 * v47) + 24);
            if (v85)
            {
              v86 = v84 || *(_QWORD *)(v85 + 64) != 0;
              *((_BYTE *)v202 + 1232) = v86;
            }
            v87 = *((_QWORD *)v3 + 7);
            re::makeRenderTargetInfoPrediction(*(const char **)v49, v87 + 424, v87 + 472, v87 + 520, v87 + 568, v87 + 616, v87 + 664, *((unsigned __int8 *)v3 + 308), (uint64_t)v227);
            v74 = *((_QWORD *)v202 + 148);
            if (v74 <= v47)
            {
LABEL_332:
              *(_QWORD *)&v274 = 0;
              memset(v264, 0, sizeof(v264));
              memset(info, 0, sizeof(info));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v252 = 136315906;
              *(_QWORD *)&v252[4] = "operator[]";
              *(_WORD *)&v252[12] = 1024;
              *(_DWORD *)&v252[14] = 468;
              *(_WORD *)&v252[18] = 2048;
              *(_QWORD *)&v252[20] = v47;
              *(_WORD *)&v252[28] = 2048;
              *(_QWORD *)&v252[30] = v74;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_333:
              *(_QWORD *)&v274 = 0;
              memset(v264, 0, sizeof(v264));
              memset(info, 0, sizeof(info));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v252 = 136315906;
              *(_QWORD *)&v252[4] = "operator[]";
              *(_WORD *)&v252[12] = 1024;
              *(_DWORD *)&v252[14] = 468;
              *(_WORD *)&v252[18] = 2048;
              *(_QWORD *)&v252[20] = v47;
              *(_WORD *)&v252[28] = 2048;
              *(_QWORD *)&v252[30] = v74;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_334:
              *(_QWORD *)&v274 = 0;
              memset(v264, 0, sizeof(v264));
              memset(info, 0, sizeof(info));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v252 = 136315906;
              *(_QWORD *)&v252[4] = "operator[]";
              *(_WORD *)&v252[12] = 1024;
              *(_DWORD *)&v252[14] = 468;
              *(_WORD *)&v252[18] = 2048;
              *(_QWORD *)&v252[20] = v47;
              *(_WORD *)&v252[28] = 2048;
              *(_QWORD *)&v252[30] = v74;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            re::FixedArray<re::AttributeArgument>::FixedArray(v226, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v202 + 149) + 8 * v47) + 16) + 264);
            re::FixedArray<re::AttributeArgument>::FixedArray(v222, (uint64_t)v226);
            v74 = *((_QWORD *)v202 + 148);
            if (v74 <= v47)
              goto LABEL_333;
            v88 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v202 + 149) + 8 * v47) + 16) + 312);
            v221[0] = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v202 + 149) + 8 * v47) + 16) + 296);
            v221[1] = v88;
            re::makeAttributeResolutionsPrediction((_anonymous_namespace_ *)v222, (uint64_t)v221, *(unsigned __int8 *)(v49 + 2844), &v223);
            re::FixedArray<re::AttributeArgument>::deinit(v222);
            v89 = atomic_load((unsigned __int8 *)&qword_254118E00);
            if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_254118E00))
            {
              re::Defaults::BOOLValue((re::Defaults *)"loadMultipleFallbacks", v154, &byte_254118DF2);
              __cxa_guard_release(&qword_254118E00);
            }
            if (byte_254118DF2)
              v90 = byte_254118DF3 == 0;
            else
              v90 = 1;
            v91 = !v90;
            v92 = atomic_load((unsigned __int8 *)&qword_254118E10);
            if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_254118E10))
            {
              qword_254118E08 = re::hashString((re *)"PixelFormat", v155);
              __cxa_guard_release(&qword_254118E10);
            }
            v93 = atomic_load((unsigned __int8 *)&qword_254118E20);
            if ((v93 & 1) == 0 && __cxa_guard_acquire(&qword_254118E20))
            {
              qword_254118E18 = re::hashString((re *)"SampleCount", v156);
              __cxa_guard_release(&qword_254118E20);
            }
            v94 = atomic_load((unsigned __int8 *)&qword_254118E30);
            if ((v94 & 1) == 0 && __cxa_guard_acquire(&qword_254118E30))
            {
              qword_254118E28 = re::hashString((re *)"OverrideFlags", v157);
              __cxa_guard_release(&qword_254118E30);
            }
            v95 = atomic_load((unsigned __int8 *)&qword_254118E40);
            if ((v95 & 1) == 0 && __cxa_guard_acquire(&qword_254118E40))
            {
              qword_254118E38 = re::hashString((re *)"TexcoordFormatOverride", v158);
              __cxa_guard_release(&qword_254118E40);
            }
            v96 = atomic_load((unsigned __int8 *)&qword_254118E50);
            if ((v96 & 1) == 0 && __cxa_guard_acquire(&qword_254118E50))
            {
              qword_254118E48 = re::hashString((re *)"StepFormatOverride", v159);
              __cxa_guard_release(&qword_254118E50);
            }
            v201 = v47;
            v97 = atomic_load((unsigned __int8 *)&qword_254118E60);
            if ((v97 & 1) == 0 && __cxa_guard_acquire(&qword_254118E60))
            {
              qword_254118E58 = re::hashString((re *)"PositionFormatOverride", v160);
              __cxa_guard_release(&qword_254118E60);
            }
            memset(v220, 0, sizeof(v220));
            if (v91)
            {
              v200 = *(unsigned int *)(v49 + 2824);
              v98 = 0;
              if ((_DWORD)v200)
              {
                v99 = (int *)(*(_QWORD *)(v49 + 2808) + 8);
                while (1)
                {
                  v100 = *v99;
                  v99 += 22;
                  if (v100 < 0)
                    break;
                  if (v200 == ++v98)
                  {
                    LODWORD(v98) = *(_DWORD *)(v49 + 2824);
                    break;
                  }
                }
              }
              if ((_DWORD)v200 != (_DWORD)v98)
              {
                v101 = v98;
                do
                {
                  v102 = *(_QWORD *)(v49 + 2808);
                  v103 = (_QWORD *)(v102 + 88 * v101);
                  memset(&info[1], 0, 24);
                  LODWORD(v264[0]) = 0;
                  memset(&v264[1], 0, 18);
                  LOWORD(info[0].numer) = 29;
                  if ((v103[3] & 1) != 0)
                    v104 = (const char *)v103[4];
                  else
                    v104 = (char *)v103 + 25;
                  v105 = (_anonymous_namespace_ *)strlen(v104);
                  if (v105)
                  {
                    v105 = (_anonymous_namespace_ *)MurmurHash3_x64_128((uint64_t)v104, (int)v105, 0, (unint64_t *)v252);
                    v106 = (*(_QWORD *)&v252[8] - 0x61C8864680B583E9 + (*(_QWORD *)v252 << 6) + (*(_QWORD *)v252 >> 2)) ^ *(_QWORD *)v252;
                  }
                  else
                  {
                    v106 = 0;
                  }
                  if (v106 == qword_254118E08)
                    v107 = 0;
                  else
                    v107 = -1;
                  if (v106 == qword_254118E18)
                    v107 = 1;
                  if (v106 == qword_254118E28)
                    v107 = 2;
                  if (v106 == qword_254118E38)
                    v107 = 3;
                  if (v106 == qword_254118E48)
                    v107 = 6;
                  if (v106 == qword_254118E58)
                    v108 = 7;
                  else
                    v108 = v107;
                  if (v108 != -1)
                  {
                    HIWORD(info[0].numer) = v108;
                    LOBYTE(v264[3]) = 1;
                    v109 = v102 + 88 * v101;
                    v110 = *(_QWORD *)(v109 + 64);
                    re::DynamicArray<float *>::setCapacity(&info[1], v110);
                    ++LODWORD(v264[0]);
                    v111 = *(_QWORD *)(v109 + 64);
                    if (v111)
                    {
                      v112 = 32 * v111;
                      v113 = (const char **)(*(_QWORD *)(v109 + 80) + 16);
                      do
                      {
                        *(_QWORD *)v252 = 0;
                        if ((*(_BYTE *)(v113 - 1) & 1) != 0)
                          v114 = *v113;
                        else
                          v114 = (char *)v113 - 7;
                        v115 = atoll(v114);
                        *(_QWORD *)v252 = v115;
                        if ((_WORD)v108 || v115 != 71)
                          re::DynamicArray<re::TransitionCondition *>::add(&info[1], v252);
                        v113 += 4;
                        v112 -= 32;
                      }
                      while (v112);
                    }
                    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew(v220, (const re::DynamicString *)(v103 + 2), (uint64_t *)info);
                  }
                  v3 = v199;
                  if (*(_QWORD *)&info[1] && v264[1])
                    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&info[1] + 40))(*(_QWORD *)&info[1], v264[1]);
                  v116 = *(_DWORD *)(v49 + 2824);
                  if (v116 <= (int)v98 + 1)
                    v116 = v98 + 1;
                  while (1)
                  {
                    v101 = (v98 + 1);
                    if (v116 - 1 == (_DWORD)v98)
                      break;
                    LODWORD(v98) = v98 + 1;
                    v117 = v101;
                    if ((*(_DWORD *)(*(_QWORD *)(v49 + 2808) + 88 * v101 + 8) & 0x80000000) != 0)
                      goto LABEL_189;
                  }
                  v117 = v116;
LABEL_189:
                  LODWORD(v98) = v117;
                }
                while ((_DWORD)v200 != v117);
              }
            }
            *(_QWORD *)&v252[32] = 0;
            memset(v252, 0, 28);
            memset(v264, 0, 32);
            memset(info, 0, sizeof(info));
            re::FunctionConstantsEnumerator::createEnumerator(v220, 0, 0, (uint64_t)v252, info, (uint64_t)v218);
            re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)info);
            re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v252);
            if (v219)
            {
              for (j = 0; v219 > j; ++j)
              {
                v216[0] = v227[0];
                v216[1] = v227[1];
                v216[2] = v227[2];
                v217 = v228;
                v214 = 0;
                memset(v213, 0, sizeof(v213));
                v215 = 0x7FFFFFFFLL;
                v211 = 0;
                memset(v210, 0, sizeof(v210));
                v212 = 0x7FFFFFFFLL;
                re::FunctionConstantsEnumerator::createPermutation((_anonymous_namespace_ *)v218, j, 0, 0, (uint64_t)v207);
                if (v208)
                {
                  As64Bits = 0;
                  v120 = v209;
                  v121 = (re::DynamicString *)((char *)v209 + 64 * v208);
                  do
                  {
                    re::DynamicString::DynamicString((re::DynamicString *)info, v120);
                    LODWORD(v264[0]) = *((_DWORD *)v120 + 8);
                    re::FixedArray<unsigned char>::FixedArray(&v264[1], (uint64_t *)v120 + 5);
                    v122 = WORD1(v264[0]);
                    if (!WORD1(v264[0]))
                    {
                      DWORD1(v216[0]) = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)info);
                      v122 = WORD1(v264[0]);
                    }
                    if (v122 == 1)
                    {
                      LODWORD(v216[0]) = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)info);
                      v122 = WORD1(v264[0]);
                    }
                    if (v122 == 2)
                    {
                      As64Bits = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)info);
                      v122 = WORD1(v264[0]);
                    }
                    if (v122 == 3)
                    {
                      v123 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)info);
                      if (v123)
                      {
                        *(_QWORD *)v252 = 0;
                        *(_QWORD *)&v252[8] = &str_110;
                        LOWORD(v274) = 5;
                        re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v213, (StringID *)v252, &v274);
                        re::StringID::destroyString((re::StringID *)v252);
                      }
                    }
                    v124 = WORD1(v264[0]);
                    if (WORD1(v264[0]) == 6)
                    {
                      v125 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)info);
                      if (v125)
                      {
                        *(_QWORD *)v252 = 0;
                        *(_QWORD *)&v252[8] = &str_110;
                        LOBYTE(v274) = 0;
                        re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v210, (StringID *)v252, &v274);
                        re::StringID::destroyString((re::StringID *)v252);
                      }
                      v124 = WORD1(v264[0]);
                    }
                    if (v124 == 7)
                    {
                      v126 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)info);
                      *(_QWORD *)v252 = 0;
                      *(_QWORD *)&v252[8] = &str_110;
                      if (v126)
                      {
                        LOWORD(v274) = 6;
                      }
                      else
                      {
                        LOWORD(v274) = 5;
                      }
                      re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v213, (StringID *)v252, &v274);
                      re::StringID::destroyString((re::StringID *)v252);
                    }
                    if (v264[1])
                    {
                      if (v264[2])
                      {
                        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v264[1] + 40))(v264[1], v264[3]);
                        v264[2] = 0;
                        v264[3] = 0;
                      }
                      v264[1] = 0;
                    }
                    if (*(_QWORD *)info && (info[1].numer & 1) != 0)
                      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)info + 40))(*(_QWORD *)info, *(_QWORD *)&info[2]);
                    v120 = (re::DynamicString *)((char *)v120 + 64);
                  }
                  while (v120 != v121);
                }
                else
                {
                  As64Bits = 0;
                }
                v47 = v201;
                if (LODWORD(v227[0]) == 1 || *(_QWORD *)&v216[0] != 0x7300000001)
                {
                  re::FixedArray<re::AttributeArgument>::FixedArray(v206, (uint64_t)v226);
                  re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable((uint64_t)v205, (uint64_t)v213);
                  re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable((uint64_t)v204, (uint64_t)v210);
                  re::makeAttributeTablePrediction((_anonymous_namespace_ *)v206, (uint64_t)v205, (uint64_t)v204, (uint64_t)info);
                  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v204);
                  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v205);
                  re::FixedArray<re::AttributeArgument>::deinit(v206);
                  v127 = *((_QWORD *)v3 + 13);
                  *(_QWORD *)v252 = v127 + 48;
                  *(_QWORD *)&v252[8] = v3;
                  *(_QWORD *)&v252[16] = v127;
                  *(_QWORD *)&v252[24] = v216;
                  v128 = v202;
                  v74 = *((_QWORD *)v202 + 148);
                  if (v74 <= v201)
                  {
                    v251 = 0;
                    v277 = 0u;
                    v278 = 0u;
                    v275 = 0u;
                    v276 = 0u;
                    v274 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v266 = 136315906;
                    v267 = "operator[]";
                    v268 = 1024;
                    v269 = 468;
                    v270 = 2048;
                    v271 = v201;
                    v272 = 2048;
                    v273 = v74;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_328:
                    v251 = 0;
                    v277 = 0u;
                    v278 = 0u;
                    v275 = 0u;
                    v276 = 0u;
                    v274 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v266 = 136315906;
                    v267 = "operator[]";
                    v268 = 1024;
                    v269 = 468;
                    v270 = 2048;
                    v271 = v201;
                    v272 = 2048;
                    v273 = v74;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_329:
                    v251 = 0;
                    v277 = 0u;
                    v278 = 0u;
                    v275 = 0u;
                    v276 = 0u;
                    v274 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v266 = 136315906;
                    v267 = "operator[]";
                    v268 = 1024;
                    v269 = 468;
                    v270 = 2048;
                    v271 = v201;
                    v272 = 2048;
                    v273 = v74;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_330:
                    *(_QWORD *)&v274 = 0;
                    memset(v264, 0, sizeof(v264));
                    memset(info, 0, sizeof(info));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v252 = 136315906;
                    *(_QWORD *)&v252[4] = "operator[]";
                    *(_WORD *)&v252[12] = 1024;
                    *(_DWORD *)&v252[14] = 468;
                    *(_WORD *)&v252[18] = 2048;
                    *(_QWORD *)&v252[20] = v47;
                    *(_WORD *)&v252[28] = 2048;
                    *(_QWORD *)&v252[30] = v74;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_331:
                    *(_QWORD *)&v274 = 0;
                    memset(v264, 0, sizeof(v264));
                    memset(info, 0, sizeof(info));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v252 = 136315906;
                    *(_QWORD *)&v252[4] = "operator[]";
                    *(_WORD *)&v252[12] = 1024;
                    *(_DWORD *)&v252[14] = 468;
                    *(_WORD *)&v252[18] = 2048;
                    *(_QWORD *)&v252[20] = v47;
                    *(_WORD *)&v252[28] = 2048;
                    *(_QWORD *)&v252[30] = v74;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_332;
                  }
                  v129 = *(_QWORD *)(*((_QWORD *)v202 + 149) + 8 * v201);
                  *(_QWORD *)&v252[32] = v129;
                  if (v129)
                  {
                    v130 = (id)(v129 + 8);
                    v128 = v202;
                  }
                  v131 = *((_QWORD *)v128 + 4);
                  v74 = *(_QWORD *)(v131 + 120);
                  if (v74 <= v201)
                    goto LABEL_328;
                  v132 = *(_QWORD *)v128;
                  v253 = *(_QWORD *)(*(_QWORD *)(v131 + 128) + 8 * v201);
                  v254 = v132;
                  v255 = 257;
                  v256 = info;
                  v257 = v225;
                  v258 = v224;
                  v259 = 3;
                  v260 = *((_QWORD *)v128 + 153);
                  v261 = 0u;
                  v262 = 0u;
                  v133 = (_anonymous_namespace_ *)re::getOrCreatePipelineState((re *)v252, As64Bits, &v203);
                  v74 = *((_QWORD *)v202 + 151);
                  if (v74 <= v201)
                    goto LABEL_329;
                  v134 = *((_QWORD *)v202 + 152);
                  v135 = (_QWORD *)(v134 + 40 * v201);
                  if (*v135)
                  {
                    v136 = v134 + 40 * v201;
                    v139 = *(_DWORD *)(v136 + 16);
                    v138 = (_DWORD *)(v136 + 16);
                    LOBYTE(v137) = v139;
                    if ((v139 & 1) != 0)
                      v140 = 1;
                    else
                      v140 = *(_QWORD *)(v134 + 40 * v201 + 24);
                    v143 = *((_QWORD *)v138 - 1);
                    if (v143 >= v140)
                    {
                      re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::growCapacity(v134 + 40 * v201, v143 + 1);
                      v137 = *v138;
                    }
                  }
                  else
                  {
                    v141 = v134 + 40 * v201;
                    v142 = *(_QWORD *)(v141 + 8) + 1;
                    re::DynamicOverflowArray<re::SharedPtr<re::ResourceFetchManager::Request>,1ul>::setCapacity((uint64_t *)v141, v142);
                    v137 = *(_DWORD *)(v141 + 16) + 2;
                    *(_DWORD *)(v141 + 16) = v137;
                  }
                  if ((v137 & 1) != 0)
                    v144 = v134 + 40 * v201 + 24;
                  else
                    v144 = *(_QWORD *)(v134 + 40 * v201 + 32);
                  v145 = v134 + 40 * v201;
                  v148 = *(_QWORD *)(v145 + 8);
                  v147 = (uint64_t *)(v145 + 8);
                  v146 = v148;
                  v149 = v203;
                  *(_QWORD *)(v144 + 8 * v148) = v203;
                  if (v149)
                  {
                    v150 = (id)(v149 + 8);
                    v146 = *v147;
                  }
                  *v147 = v146 + 1;
                  *(_DWORD *)(v134 + 40 * v201 + 16) += 2;
                  if (v203)

                  if (*(_QWORD *)&v252[32])
                  re::AttributeTable::~AttributeTable((re::AttributeTable *)info);
                }
                re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v207);
                re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v210);
                re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v213);
              }
            }
            re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(v218);
            v151 = re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v220);
            if (v223)
            {
              if (v224)
                (*(void (**)(double))(*(_QWORD *)v223 + 40))(v151);
            }
            re::FixedArray<re::AttributeArgument>::deinit(v226);
            v71 = 0;
LABEL_252:
            re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v229);
            re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v231);
            re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v234);
            re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v237, v152);
            re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v240);
            v153 = v71 | 4;
            v48 = v197;
            if (v153 != 4)
              return;
            goto LABEL_253;
          }
          LODWORD(v64) = info[0].numer;
          LODWORD(v65) = info[0].denom;
          v62 = (double)v64 / (double)v65;
          re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(_QWORD *)&v62;
          v63 = v202;
        }
        v66 = v62 * (double)(v60 - v61);
        goto LABEL_101;
      }
LABEL_317:
      *((_DWORD *)v46 + 286) = 5;
      *(_BYTE *)a3 = 1;
      *(_DWORD *)(a3 + 8) = 0;
      return;
    case 2:
      goto LABEL_27;
    case 8:
      goto LABEL_28;
    default:
      goto LABEL_44;
  }
}

void re::MaterialBuilder::createFunctionBuildTasks(re::MaterialBuilder *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t shouldCompileFallbackShaderForTechnique;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  re::DynamicString *v18;
  re::DynamicString *v19;
  double v20;
  const char *v21;
  char v22;
  uint64_t v23[2];
  uint64_t v24[3];
  int v25;
  uint64_t v26;
  _OWORD v27[2];
  int v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;
  re::DynamicString *v32;
  _BYTE buf[12];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254118E70);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254118E70))
  {
    re::Defaults::BOOLValue((re::Defaults *)"enableShaderDebugLogs", v21, buf);
    if (buf[0])
      v22 = buf[1];
    else
      v22 = 0;
    byte_254118DF1 = v22;
    __cxa_guard_release(&qword_254118E70);
  }
  v3 = *((_QWORD *)this + 4);
  if (*(_QWORD *)(v3 + 120))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v3 + 128) + 8 * v4);
      if (*(_BYTE *)(v6 + 2845))
      {
        shouldCompileFallbackShaderForTechnique = re::MaterialBuilder::shouldCompileFallbackShaderForTechnique((_anonymous_namespace_ *)v6, v5);
        if ((shouldCompileFallbackShaderForTechnique & 1) != 0)
        {
          re::MaterialBuilder::addOrReplaceFunctionConstants((uint64_t)v30, *(_QWORD *)(v6 + 64), *(_QWORD *)(v6 + 56), (uint64_t)this + 40);
          v28 = 0;
          memset(v27, 0, sizeof(v27));
          v29 = 0x7FFFFFFFLL;
          v26 = 0;
          memset(v24, 0, sizeof(v24));
          v25 = 0;
          v8 = *(unsigned int *)(v6 + 2776);
          if ((_DWORD)v8)
          {
            v9 = 0;
            v10 = (int *)(*(_QWORD *)(v6 + 2760) + 8);
            while (1)
            {
              v11 = *v10;
              v10 += 28;
              if (v11 < 0)
                break;
              if (v8 == ++v9)
              {
                LODWORD(v9) = *(_DWORD *)(v6 + 2776);
                break;
              }
            }
          }
          else
          {
            LODWORD(v9) = 0;
          }
          if ((_DWORD)v8 != (_DWORD)v9)
          {
            v14 = v9;
            do
            {
              v15 = *(_QWORD *)(v6 + 2760) + 112 * v14;
              re::DynamicString::DynamicString((re::DynamicString *)buf, (const re::DynamicString *)(v15 + 48));
              LODWORD(v35) = *(_DWORD *)(v15 + 80);
              re::FixedArray<unsigned char>::FixedArray(&v36, (uint64_t *)(v15 + 88));
              if (!re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v27, (uint64_t)buf))
              {
                re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v27, (re::DynamicString *)buf);
                re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v24, (re::DynamicString *)buf);
              }
              if (v36)
              {
                if (v37)
                {
                  (*(void (**)(void))(*(_QWORD *)v36 + 40))();
                  v37 = 0;
                  v38 = 0;
                }
                v36 = 0;
              }
              if (*(_QWORD *)buf && (buf[8] & 1) != 0)
                (*(void (**)(void))(**(_QWORD **)buf + 40))();
              if (*(_DWORD *)(v6 + 2776) <= (v9 + 1))
                v16 = v9 + 1;
              else
                v16 = *(_DWORD *)(v6 + 2776);
              while (1)
              {
                v14 = (v9 + 1);
                if (v16 - 1 == (_DWORD)v9)
                  break;
                LODWORD(v9) = v9 + 1;
                v17 = v14;
                if ((*(_DWORD *)(*(_QWORD *)(v6 + 2760) + 112 * v14 + 8) & 0x80000000) != 0)
                  goto LABEL_33;
              }
              v17 = v16;
LABEL_33:
              LODWORD(v9) = v17;
            }
            while ((_DWORD)v8 != v17);
          }
          if (v31)
          {
            v18 = v32;
            v19 = (re::DynamicString *)((char *)v32 + 64 * v31);
            do
            {
              re::DynamicString::DynamicString((re::DynamicString *)buf, v18);
              LODWORD(v35) = *((_DWORD *)v18 + 8);
              re::FixedArray<unsigned char>::FixedArray(&v36, (uint64_t *)v18 + 5);
              if (!re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v27, (uint64_t)buf))
              {
                re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v27, (re::DynamicString *)buf);
                re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v24, (re::DynamicString *)buf);
              }
              if (v36)
              {
                if (v37)
                {
                  (*(void (**)(void))(*(_QWORD *)v36 + 40))();
                  v37 = 0;
                  v38 = 0;
                }
                v36 = 0;
              }
              if (*(_QWORD *)buf)
              {
                if ((buf[8] & 1) != 0)
                  (*(void (**)(void))(**(_QWORD **)buf + 40))();
              }
              v18 = (re::DynamicString *)((char *)v18 + 64);
            }
            while (v18 != v19);
          }
          re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)buf, v24);
          v23[0] = v35;
          v23[1] = v34;
          re::MaterialBuilder::addFunctionsToReflectionCache(v6, v23, *((_QWORD *)this + 146));
          re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)buf);
          re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v24);
          re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v27, v20);
          re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v30);
        }
        else if (byte_254118DF1)
        {
          v12 = *re::graphicsLogObjects((re *)shouldCompileFallbackShaderForTechnique);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            v13 = *(_QWORD *)v6;
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v13;
            _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "Skipping fallback shader compilation for technique %s", buf, 0xCu);
          }
        }
      }
      v3 = *((_QWORD *)this + 4);
      v4 = ++v5;
    }
    while (*(_QWORD *)(v3 + 120) > (unint64_t)v5);
  }
}

uint64_t re::MaterialBuilder::shouldCompileFallbackShaderForTechnique(_anonymous_namespace_ *a1, int a2)
{
  _anonymous_namespace_ *v3;
  unsigned __int8 v4;
  int v5;
  uint64_t v6;
  const char *v8;
  size_t v9;
  unint64_t v10;
  char *WeakRetained;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  const char *v33;
  int v34;
  uint64_t *v35[2];
  char *v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = a1;
  v42 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_254118E68);
  if ((v4 & 1) == 0)
  {
    a1 = (_anonymous_namespace_ *)__cxa_guard_acquire(&qword_254118E68);
    if ((_DWORD)a1)
    {
      re::Defaults::intValue((re::Defaults *)"shaderCompilationMode", v33, (uint64_t)&v38);
      if ((_BYTE)v38)
        v34 = HIDWORD(v38);
      else
        v34 = 0;
      dword_254118DF4 = v34;
      __cxa_guard_release(&qword_254118E68);
    }
  }
  if (dword_254118DF4 == 2)
    return 0;
  if (dword_254118DF4 == 1)
    return 1;
  v5 = *((_DWORD *)v3 + 710);
  if (v5 == 2)
    return 0;
  if (v5 == 1)
    return 1;
  v8 = *(const char **)v3;
  re::DynamicString::find((re::DynamicString *)&v38, "_BackCompat", 11, 0, (uint64_t)&v40);
  if (!(_BYTE)v40)
  {
    v9 = strlen(*(const char **)v3);
    if (v9)
    {
      MurmurHash3_x64_128(*(_QWORD *)v3, v9, 0, &v40);
      v10 = (v41 - 0x61C8864680B583E9 + (v40 << 6) + (v40 >> 2)) ^ v40;
    }
    else
    {
      v10 = 0;
    }
    v37 = v10;
    WeakRetained = (char *)objc_loadWeakRetained((id *)v3 + 342);
    v12 = WeakRetained - 8;
    if (!WeakRetained)
      v12 = 0;
    v36 = v12;
    if (*((_QWORD *)v12 + 2))
    {
      v13 = *(unsigned int *)(*((_QWORD *)v12 + 3) + 4 * (v10 % *((unsigned int *)v12 + 10)));
      if ((_DWORD)v13 != 0x7FFFFFFF)
      {
        v15 = *((_QWORD *)v12 + 4);
        v16 = *(_QWORD *)(v15 + 24 * v13 + 8);
        if (v16 == v10)
        {
LABEL_20:
          v14 = *(_QWORD *)(v15 + 24 * v13 + 16);
LABEL_21:
          v17 = (uint64_t)(v12 + 136);
          v18 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)(v12 + 136), v14);
          if (v18)
          {
            v19 = *(_QWORD *)(v18 + 8);
            if (v19)
            {
              v20 = 0;
              v21 = *(int **)(v18 + 16);
              v22 = 4 * v19;
              do
              {
                v23 = *v21++;
                if (v23 == a2)
                  v20 = 1;
                v22 -= 4;
              }
              while (v22);
LABEL_34:
              v6 = v20 & 1;
LABEL_43:
              v35[0] = (uint64_t *)&v37;
              v35[1] = (uint64_t *)&v36;
              MurmurHash3_x64_128((uint64_t)"OpaqueLite", 10, 0, &v40);
              if (v10 == ((v41 - 0x61C8864680B583E9 + (v40 << 6) + (v40 >> 2)) ^ v40)
                && (v30 = (uint64_t)(v36 + 136),
                    MurmurHash3_x64_128((uint64_t)"Opaque", 6, 0, &v40),
                    re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v30, (v41 - 0x61C8864680B583E9 + (v40 << 6) + (v40 >> 2)) ^ v40))|| (v31 = v37, MurmurHash3_x64_128((uint64_t)"TransparentLite", 15, 0, &v40), v31 == ((v41 - 0x61C8864680B583E9 + (v40 << 6) + (v40 >> 2)) ^ v40))&& (v32 = (uint64_t)(v36 + 136), MurmurHash3_x64_128((uint64_t)"Transparent", 11, 0, &v40), re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v32, (v41 - 0x61C8864680B583E9 + (v40 << 6) + (v40 >> 2)) ^ v40))|| re::MaterialBuilder::shouldCompileFallbackShaderForTechnique(re::MaterialTechniqueDefinition const*,int)::$_0::operator()(v35, "SurfaceShaderOpaqueLite", "SurfaceShaderOpaque")|| re::MaterialBuilder::shouldCompileFallbackShaderForTechnique(re::MaterialTechniqueDefinition const*,int)::$_0::operator()(v35, "SurfaceShaderTransparentLite", "SurfaceShaderTransparent")|| re::MaterialBuilder::shouldCompileFallbackShaderForTechnique(re::MaterialTechniqueDefinition const*,int)::$_0::operator()(
                     v35,
                     "FadeOpaqueLite",
                     "FadeOpaque")
                || re::MaterialBuilder::shouldCompileFallbackShaderForTechnique(re::MaterialTechniqueDefinition const*,int)::$_0::operator()(v35, "SurfaceShaderFadeOpaqueLite", "SurfaceShaderFadeOpaque"))
              {
                v6 = 0;
              }
              if (v36)

              goto LABEL_54;
            }
          }
          else
          {
            v24 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v17, v10);
            if (!v24)
            {
              v6 = 1;
              goto LABEL_43;
            }
            v25 = *(_QWORD *)(v24 + 8);
            if (v25)
            {
              v20 = 0;
              v26 = *(int **)(v24 + 16);
              v27 = 4 * v25;
              do
              {
                v28 = *v26++;
                if (v28 == a2)
                  v20 = 1;
                v27 -= 4;
              }
              while (v27);
              goto LABEL_34;
            }
          }
          v6 = 0;
          goto LABEL_43;
        }
        while (1)
        {
          v29 = *(_DWORD *)(v15
                          + 24 * *(unsigned int *)(*((_QWORD *)v12 + 3) + 4 * (v10 % *((unsigned int *)v12 + 10)))) & 0x7FFFFFFF;
          if (v29 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v15 + 24 * v29 + 8) == v10)
          {
            if (v16 != v10)
            {
              while (1)
              {
                LODWORD(v13) = *(_DWORD *)(v15 + 24 * v13) & 0x7FFFFFFF;
                if ((_DWORD)v13 == 0x7FFFFFFF)
                  break;
                if (*(_QWORD *)(v15 + 24 * v13 + 8) == v10)
                  goto LABEL_20;
              }
              LODWORD(v13) = 0x7FFFFFFF;
            }
            goto LABEL_20;
          }
        }
      }
    }
    v14 = -1;
    goto LABEL_21;
  }
  v6 = 0;
LABEL_54:
  if (v38 && (v39 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v38 + 40))();
  return v6;
}

uint64_t re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _WORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 32 * v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _BYTE *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 32 * v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

BOOL re::MaterialBuilder::shouldCompileFallbackShaderForTechnique(re::MaterialTechniqueDefinition const*,int)::$_0::operator()(uint64_t **a1, char *__s, const char *a3)
{
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = **a1;
  v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, &v12);
    v8 = (v13 + (v12 << 6) + (v12 >> 2) - 0x61C8864680B583E9) ^ v12;
  }
  else
  {
    v8 = 0;
  }
  if (v6 != v8)
    return 0;
  v9 = *a1[1] + 136;
  v10 = strlen(a3);
  if (v10)
  {
    MurmurHash3_x64_128((uint64_t)a3, v10, 0, &v12);
    v10 = (v13 + (v12 << 6) + (v12 >> 2) - 0x61C8864680B583E9) ^ v12;
  }
  return re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v9, v10) != 0;
}

_anonymous_namespace_ *re::DynamicArray<re::TechniqueFunctionConstant>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)this)
  {
    if (v4)
    {
      re::DynamicArray<re::TechniqueFunctionConstant>::copy((uint64_t *)this, 0, *(uint64_t **)a2, v4);
      re::DynamicArray<re::TechniqueFunctionConstant>::resize(this, *(_QWORD *)(a2 + 8));
    }
    else
    {
      re::DynamicArray<re::TechniqueFunctionConstant>::clear(this);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::TechniqueFunctionConstant>::copy((uint64_t *)this, 0, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  }
  return this;
}

uint64_t re::MaterialBuilder::addFunctionsToReflectionCache(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  _anonymous_namespace_ *v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  _anonymous_namespace_ *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE v19[40];
  uint64_t v20;
  _anonymous_namespace_ *v21;

  v6 = *a2;
  v7 = a2[1];
  if ((*(_BYTE *)(a1 + 2448) & 1) != 0)
    v8 = *(const char **)(a1 + 2456);
  else
    v8 = (const char *)(a1 + 2449);
  v9 = (_anonymous_namespace_ *)re::FunctionReflectionCache::hashFunction(v6, v7, (re::FunctionConstantUsageMask *)(a1 + 2504), v8, *(_QWORD *)(a1 + 2424));
  v15 = 0;
  v16 = 0;
  v18 = 0;
  v17 = 0;
  *(_QWORD *)v19 = 0;
  memset(&v19[16], 0, 24);
  re::DynamicString::setCapacity(&v19[8], 0);
  re::DynamicArray<re::TechniqueFunctionConstant>::operator=((_anonymous_namespace_ *)&v15, (uint64_t)a2);
  re::DynamicString::operator=((re::DynamicString *)&v19[8], (re::DynamicString *)(a1 + 2440));
  v20 = *(_QWORD *)(a1 + 2424);
  v21 = v9;
  re::FunctionReflectionCache::addTask(a3, (uint64_t)&v15);
  if (*(_QWORD *)&v19[8])
  {
    if ((v19[16] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v19[8] + 40))();
    memset(&v19[8], 0, 32);
  }
  result = re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v15);
  v11 = *(_QWORD *)(a1 + 2480);
  v12 = v11 >> 1;
  if ((v11 & 1) == 0)
    v12 = v11 >> 1;
  if (v12)
  {
    if ((v11 & 1) != 0)
      v13 = *(const char **)(a1 + 2488);
    else
      v13 = (const char *)(a1 + 2481);
    v14 = (_anonymous_namespace_ *)re::FunctionReflectionCache::hashFunction(*a2, a2[1], (re::FunctionConstantUsageMask *)(a1 + 2568), v13, *(_QWORD *)(a1 + 2432));
    v15 = 0;
    v16 = 0;
    v18 = 0;
    v17 = 0;
    memset(v19, 0, sizeof(v19));
    re::DynamicString::setCapacity(&v19[8], 0);
    re::DynamicArray<re::TechniqueFunctionConstant>::operator=((_anonymous_namespace_ *)&v15, (uint64_t)a2);
    re::DynamicString::operator=((re::DynamicString *)&v19[8], (re::DynamicString *)(a1 + 2472));
    v20 = *(_QWORD *)(a1 + 2432);
    v21 = v14;
    re::FunctionReflectionCache::addTask(a3, (uint64_t)&v15);
    if (*(_QWORD *)&v19[8])
    {
      if ((v19[16] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v19[8] + 40))();
      memset(&v19[8], 0, 32);
    }
    return re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v15);
  }
  return result;
}

void re::MaterialBuilder::overlayBlurTechniquesAndTextures(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  _anonymous_namespace_ *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _anonymous_namespace_ *v23;
  _anonymous_namespace_ *v24;
  _anonymous_namespace_ *v25;
  _anonymous_namespace_ *v26;
  _anonymous_namespace_ *v27;
  _anonymous_namespace_ *v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  int v43;
  _BYTE v44[12];
  uint64_t v45;
  uint64_t v46;

  v6 = atomic_load((unsigned __int8 *)&qword_254118E80);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254118E80))
  {
    qword_254118E78 = re::hashString((re *)"SFBPassthroughDownsample2D", v30);
    __cxa_guard_release(&qword_254118E80);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_254118E90);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254118E90))
  {
    qword_254118E88 = re::hashString((re *)"SFBCopyTextureBilinear", v31);
    __cxa_guard_release(&qword_254118E90);
  }
  v8 = atomic_load((unsigned __int8 *)&qword_254118EA0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254118EA0))
  {
    qword_254118E98 = re::hashString((re *)"PlattersOnly", v32);
    __cxa_guard_release(&qword_254118EA0);
  }
  v9 = atomic_load((unsigned __int8 *)&qword_254118EB0);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254118EB0))
  {
    qword_254118EA8 = re::hashString((re *)"OnlyPlattersVS", v33);
    __cxa_guard_release(&qword_254118EB0);
  }
  v10 = atomic_load((unsigned __int8 *)&qword_254118EC0);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254118EC0))
  {
    qword_254118EB8 = re::hashString((re *)"OnlyPlattersBreakthrough", v34);
    __cxa_guard_release(&qword_254118EC0);
  }
  v11 = atomic_load((unsigned __int8 *)&qword_254118ED0);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254118ED0))
  {
    qword_254118EC8 = re::hashString((re *)"PlatterContentsOnly", v35);
    __cxa_guard_release(&qword_254118ED0);
  }
  v12 = atomic_load((unsigned __int8 *)&qword_254118EE0);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254118EE0))
  {
    qword_254118ED8 = re::hashString((re *)"StenciledRenderNoPlatter", v36);
    __cxa_guard_release(&qword_254118EE0);
  }
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  *(_QWORD *)&v41 = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
  v13 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a2 + 1032, (uint64_t *)&v41);
  if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1)
    dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_3_1);
  *(_QWORD *)&v41 = re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash;
  v14 = (_anonymous_namespace_ *)re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a2 + 1032, (uint64_t *)&v41);
  v15 = (uint64_t)v14;
  v16 = *a3;
  if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1)
    dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_3_1);
  if (*(_QWORD *)(v16 + 64)
    && (v17 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9
              * (re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash ^ ((unint64_t)re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash >> 30))) ^ ((0xBF58476D1CE4E5B9 * (re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash ^ ((unint64_t)re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash >> 30))) >> 27)),
        v18 = *(unsigned int *)(*(_QWORD *)(v16 + 72) + 4 * ((v17 ^ (v17 >> 31)) % *(unsigned int *)(v16 + 88))),
        (_DWORD)v18 != 0x7FFFFFFF))
  {
    v29 = *(_QWORD *)(v16 + 80);
    if (*(_QWORD *)(v29 + 72 * v18 + 16) == re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash)
    {
      v19 = 1;
    }
    else
    {
      do
      {
        LODWORD(v18) = *(_DWORD *)(v29 + 72 * v18 + 8) & 0x7FFFFFFF;
        v19 = (_DWORD)v18 != 0x7FFFFFFF;
      }
      while ((_DWORD)v18 != 0x7FFFFFFF
           && *(_QWORD *)(v29 + 72 * v18 + 16) != re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
    }
  }
  else
  {
    v19 = 0;
  }
  if (*(_BYTE *)(a1 + 22) && *(_BYTE *)(a1 + 23) || *(_BYTE *)(a1 + 24) && *(_BYTE *)(a1 + 25))
  {
    if (!v13)
    {
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      v37 = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
      v41 = 0u;
      v42 = 0u;
      v43 = 0;
      *(_QWORD *)v44 = 0x7FFFFFFFLL;
      re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)&v41, v20, 3);
      v13 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a2 + 1032, &v37, (uint64_t *)&v41);
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)&v41);
    }
    v21 = !v19;
    if (v15)
      v21 = 1;
    if ((v21 & 1) == 0)
    {
      if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1)
        dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_3_1);
      v37 = re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash;
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
      v41 = 0u;
      v42 = 0u;
      v43 = 0;
      *(_QWORD *)v44 = 0x7FFFFFFFLL;
      re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)&v41, v22, 2);
      v15 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a2 + 1032, &v37, (uint64_t *)&v41);
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)&v41);
    }
  }
  if (*(_BYTE *)(a1 + 22) && *(_BYTE *)(a1 + 23))
  {
    v41 = 0u;
    v42 = 0u;
    v23 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v41, 0);
    *(_QWORD *)&v44[4] = 0;
    v45 = 0;
    v46 = 0;
    v24 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)&v41, 1);
    v43 = 2949173;
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::TechniqueFunctionConstant&>(a1 + 40, (re::DynamicString *)&v37, 2, (uint64_t)&v41);
    if (v37 && (v38 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v37 + 40))();
    LODWORD(v37) = 0;
    re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<int>(v13, (unint64_t *)&qword_254118E78, (int *)&v37);
    if (!*(_QWORD *)(a2 + 608))
    {
    }
    re::StringID::invalid((re::StringID *)&v37);
    re::StringID::destroyString((re::StringID *)&v37);
    re::StringID::invalid((re::StringID *)&v37);
    re::StringID::destroyString((re::StringID *)&v37);
    LODWORD(v37) = 1;
    LOBYTE(v39) = 9;
    v40 = 0x23D59F1355F7D636;
    v38 = 0x7F03C6932F573C08;
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace((_anonymous_namespace_ *)(a2 + 552), &v38, (uint64_t)&v37);
    if (*(_QWORD *)&v44[4])
    {
      if (v45)
      {
        (*(void (**)(void))(**(_QWORD **)&v44[4] + 40))();
        v45 = 0;
        v46 = 0;
      }
      *(_QWORD *)&v44[4] = 0;
    }
    v14 = (_anonymous_namespace_ *)v41;
    if ((_QWORD)v41 && (BYTE8(v41) & 1) != 0)
      v14 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v41 + 40))();
  }
  if (*(_BYTE *)(a1 + 24) && *(_BYTE *)(a1 + 25))
  {
    *((_QWORD *)&v41 + 1) = 0;
    v42 = 0uLL;
    v26 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v41, 0);
    *(_QWORD *)&v44[4] = 0;
    v45 = 0;
    v46 = 0;
    v27 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)&v41, 1);
    v43 = 4390965;
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::TechniqueFunctionConstant&>(a1 + 40, (re::DynamicString *)&v37, 2, (uint64_t)&v41);
    if (v37 && (v38 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v37 + 40))();
    LODWORD(v37) = 0;
    re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<int>(v13, (unint64_t *)&qword_254118E88, (int *)&v37);
    re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace(v13, (unint64_t *)&qword_254118E98, &qword_254118EA8);
    v28 = (_anonymous_namespace_ *)re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace(v13, (unint64_t *)&qword_254118EC8, &qword_254118ED8);
    if (v15)
    {
      re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace(v15, (unint64_t *)&qword_254118E98, &qword_254118EB8);
      v28 = (_anonymous_namespace_ *)re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace(v15, (unint64_t *)&qword_254118EC8, &qword_254118ED8);
    }
    if (!*(_QWORD *)(a2 + 608))
    {
    }
    re::StringID::invalid((re::StringID *)&v37);
    re::StringID::destroyString((re::StringID *)&v37);
    re::StringID::invalid((re::StringID *)&v37);
    re::StringID::destroyString((re::StringID *)&v37);
    LODWORD(v37) = 1;
    LOBYTE(v39) = 9;
    v40 = 0x60DF09E0AF8AD07;
    v38 = 0x2AC55919B0708E48;
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace((_anonymous_namespace_ *)(a2 + 552), &v38, (uint64_t)&v37);
    if (*(_QWORD *)&v44[4])
    {
      if (v45)
      {
        (*(void (**)(void))(**(_QWORD **)&v44[4] + 40))();
        v45 = 0;
        v46 = 0;
      }
      *(_QWORD *)&v44[4] = 0;
    }
    if ((_QWORD)v41)
    {
      if ((BYTE8(v41) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v41 + 40))();
    }
  }
}

void re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<int>(uint64_t a1, unint64_t *a2, int *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v7 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v7 = v6 % *(unsigned int *)(a1 + 24);
    v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
    if ((_DWORD)v8 != 0x7FFFFFFF)
    {
      v13 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v13 + 24 * v8 + 8) == v6)
      {
LABEL_10:
        *(_QWORD *)(v13 + 24 * v8 + 16) = *a3;
        goto LABEL_14;
      }
      while (1)
      {
        LODWORD(v8) = *(_DWORD *)(v13 + 24 * v8) & 0x7FFFFFFF;
        if ((_DWORD)v8 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v13 + 24 * v8 + 8) == v6)
          goto LABEL_10;
      }
    }
  }
  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v7) = v6 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
      v6 = *a2;
    }
    else
    {
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v9);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v9);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v14 = 24 * v9;
  *(_DWORD *)(v11 + v14) = v12 | 0x80000000;
  v15 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9) & 0x80000000 | *(_DWORD *)(v15 + 4 * v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 8) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 16) = *a3;
  *(_DWORD *)(v15 + 4 * v7) = v9;
  ++*(_DWORD *)(a1 + 28);
LABEL_14:
  ++*(_DWORD *)(a1 + 40);
}

uint64_t re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace(uint64_t result, unint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = result;
  v6 = *a2;
  if (!*(_QWORD *)result)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  v7 = v6 % *(unsigned int *)(result + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_8:
    result = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(result, v7, v6, a2, a3);
    goto LABEL_9;
  }
  v9 = *(_QWORD *)(result + 16);
  while (*(_QWORD *)(v9 + 24 * v8 + 8) != v6)
  {
    LODWORD(v8) = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if ((_DWORD)v8 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_QWORD *)(v9 + 24 * v8 + 16) = *a3;
LABEL_9:
  ++*(_DWORD *)(v5 + 40);
  return result;
}

void re::MaterialBuilder::result(re::MaterialBuilder *this@<X0>, re::RenderManager *a2@<X1>, uint64_t a3@<X8>)
{
  int *v3;
  re::MaterialManager *v4;
  uint64_t *v5;
  uint64_t *v6;
  re::MaterialInstance *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  NSObject *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  re *v29;
  const char **v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  _BYTE *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned int v46;
  signed int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  _BYTE v63[16];
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _BYTE v67[1128];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  _BYTE v72[31];
  int v73;
  const char *v74;
  __int16 v75;
  int v76;
  __int16 v77;
  unint64_t v78;
  __int16 v79;
  unint64_t v80;
  int v81;
  const char *v82;
  __int16 v83;
  int v84;
  __int16 v85;
  unint64_t v86;
  __int16 v87;
  _QWORD *v88;
  __int128 buf;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;

  v3 = (int *)this;
  v94 = *MEMORY[0x24BDAC8D0];
  v4 = (re::MaterialManager *)*((_QWORD *)a2 + 3);
  v5 = re::globalAllocators(this);
  v6 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 1392, 8);
  v7 = re::MaterialInstance::MaterialInstance((re::MaterialInstance *)v6, v4);
  v8 = *((_QWORD *)v3 + 4);
  v9 = *((_QWORD *)v7 + 2);
  if (v9 != v8)
  {
    if (v8)
    {
      v10 = (id)(v8 + 8);
      v9 = v6[2];
    }
    if (v9)

    v6[2] = v8;
  }
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=(v6 + 21, (uint64_t *)v3 + 137);
  v61 = v6;
  re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=(v6 + 24, (uint64_t *)v3 + 140);
  v11 = (unint64_t)(v3 + 22);
  re::fillTablesWithLinkedFunctionParameterDefaults((uint64_t)(v6 + 21), (_QWORD *)v3 + 11, (_anonymous_namespace_ *)(v3 + 154));
  v12 = v6;
  re::fillTablesWithLinkedFunctionParameterDefaults((uint64_t)(v6 + 24), (_QWORD *)v3 + 11, (_anonymous_namespace_ *)(v3 + 154));
  v6[169] = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  re::MaterialParameterTable::MaterialParameterTable((uint64_t)v67, (uint64_t *)v3 + 11, (uint64_t *)v3 + 77);
  v13 = *((_QWORD *)v3 + 4);
  v66 = v13;
  if (v13)
  {
    v14 = (void *)(v13 + 8);
    v15 = (id)(v13 + 8);
    re::MaterialBuilder::overlayBlurTechniquesAndTextures((uint64_t)v3, (uint64_t)v67, &v66);

    v66 = 0;
  }
  else
  {
    re::MaterialBuilder::overlayBlurTechniquesAndTextures((uint64_t)v3, (uint64_t)v67, &v66);
  }
  re::MaterialParameterTable::operator=((uint64_t)(v6 + 28), (uint64_t)v67);
  v16 = re::MaterialRenderFlags::flattenToOverrideFlags((re::MaterialRenderFlags *)(v3 + 2));
  v6[27] = v16;
  v17 = *(_QWORD *)(*((_QWORD *)v3 + 4) + 120);
  v57 = v6 + 28;
  if (v17 >= 0xFFFFFFFF)
  {
    v18 = *re::graphicsLogObjects((re *)v16);
    v16 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v16)
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v17;
      _os_log_impl(&dword_224FE9000, v18, OS_LOG_TYPE_DEFAULT, "Reached max supported material definitions (%zu)", (uint8_t *)&buf, 0xCu);
    }
    v17 = 4294967294;
  }
  v6[10] = v17;
  if (v17)
  {
    v6[11] = (uint64_t)v19;
    if (!v19)
    {
      re::internal::assertLog((re::internal *)4, v20, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    v21 = v17 - 1;
    if (v17 == 1)
    {
      *v19 = 0;
      v22 = v19 + 4;
    }
    else
    {
      v22 = v19 + 4;
      do
      {
        *(v22 - 4) = 0;
        *v22 = 0;
        v22 += 5;
        --v21;
      }
      while (v21);
      *(v22 - 4) = 0;
    }
    v23 = 0;
    v24 = 0;
    *v22 = 0;
    if (v17 <= 1)
      v25 = 1;
    else
      v25 = v17;
    v59 = 40 * v25;
    v60 = (uint64_t)(v3 + 10);
    while (1)
    {
      v26 = *((_QWORD *)v3 + 4);
      v27 = *(_QWORD *)(v26 + 120);
      if (v27 <= v24)
      {
        v69 = 0;
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v73 = 136315906;
        v74 = "operator[]";
        v75 = 1024;
        v76 = 468;
        v77 = 2048;
        v78 = v24;
        v79 = 2048;
        v80 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_86:
        v68 = 0;
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v81 = 136315906;
        v82 = "operator[]";
        v83 = 1024;
        v84 = 468;
        v85 = 2048;
        v86 = v24;
        v87 = 2048;
        v88 = (_QWORD *)v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_87:
        v68 = 0;
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v81 = 136315906;
        v82 = "operator[]";
        v83 = 1024;
        v84 = 468;
        v85 = 2048;
        v86 = v24;
        v87 = 2048;
        v88 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_88:
        v68 = 0;
        v3 = &v73;
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v81 = 136315906;
        v82 = "operator[]";
        v83 = 1024;
        v84 = 468;
        v85 = 2048;
        v86 = v24;
        v87 = 2048;
        v88 = (_QWORD *)v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_89;
      }
      v28 = *(_QWORD **)(*(_QWORD *)(v26 + 128) + 8 * v24);
      re::MaterialBuilder::addOrReplaceFunctionConstants((uint64_t)v63, v28[8], v28[7], v60);
      v29 = (re *)re::FunctionConstantsEnumerator::overrideEnumerator(v28 + 1, v60, &v73);
      v30 = (_BYTE)v73 ? (const char **)((char *)&v74 + 4) : (const char **)(v28 + 1);
      v31 = v65;
      v27 = v64;
      if (*((_QWORD *)v3 + 147))
      {
        v11 = *((_QWORD *)v3 + 148);
        if (v11 <= v24)
          goto LABEL_86;
        v11 = *(_QWORD *)(*((_QWORD *)v3 + 149) + 8 * v24);
        v62 = v11;
        if (v11)
          v29 = (re *)(id)(v11 + 8);
      }
      else
      {
        v11 = 0;
        v62 = 0;
      }
      v32 = *((_QWORD *)v3 + 150);
      if (v32)
      {
        v12 = (uint64_t *)*((_QWORD *)v3 + 151);
        if ((unint64_t)v12 <= v24)
          goto LABEL_87;
        v33 = *((_QWORD *)v3 + 152);
        v34 = v33 + v23;
        v35 = (*(_BYTE *)(v33 + v23 + 16) & 1) != 0 ? (uint64_t *)(v34 + 24) : *(uint64_t **)(v34 + 32);
        v12 = v61;
        v32 = *(_QWORD *)(v33 + v23 + 8);
      }
      else
      {
        v35 = 0;
        v12 = v61;
      }
      re::MaterialBuilder::generateTechnique(v29, (uint64_t)v28, (uint64_t)v12, v31, v27, (uint64_t)v30, (uint64_t)&v69, (uint64_t *)&v62, v35, v32);
      if (v11)
      {

        v62 = 0;
      }
      v36 = v69;
      if ((_BYTE)v69)
      {
        v27 = v12[10];
        if (v27 <= v24)
          goto LABEL_88;
        v37 = (uint64_t *)(v12[11] + v23);
        v38 = v70;
        v70 = 0;
        std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](v37, v38);
        std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100](v37 + 1, (uint64_t)&v71);
      }
      else
      {
        v39 = v72;
        if ((v71 & 1) != 0)
          v39 = *(_BYTE **)&v72[7];
        re::DynamicString::format((re::DynamicString *)"[%s] %s", (re::DynamicString *)&buf, *v28, v39);
        v40 = buf;
        v41 = v90;
        *(_BYTE *)a3 = 0;
        *(_OWORD *)(a3 + 8) = v40;
        *(_OWORD *)(a3 + 24) = v41;
      }
      re::Result<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>,re::DynamicString>::~Result((uint64_t)&v69);
      if ((_BYTE)v73)
        re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit((const char **)((char *)&v74 + 4));
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v63);
      if (!v36)
        break;
      ++v24;
      v23 += 40;
      if (v59 == v23)
        goto LABEL_53;
    }
    re::MaterialParameterTable::~MaterialParameterTable((re::MaterialParameterTable *)v67);
    if (v12)
      goto LABEL_84;
  }
  else
  {
LABEL_53:
    v42 = *((_QWORD *)v3 + 4);
    v43 = (uint64_t *)(v42 + 136);
    v44 = v12 + 3;
    v11 = (unint64_t)v57;
    if (v44 != (_QWORD *)(v42 + 136))
    {
      v45 = *v43;
      if (*v44)
      {
        if (v45)
        {
          re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy((uint64_t)v44, v42 + 136);
          ++*((_DWORD *)v61 + 16);
        }
        else
        {
          re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear((uint64_t)v44);
        }
      }
      else if (v45)
      {
        v46 = *(_DWORD *)(v42 + 164);
        if (v46 <= 3)
          v47 = 3;
        else
          v47 = v46;
        re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v44, v45, v47);
        re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy((uint64_t)v44, (uint64_t)v43);
      }
    }
    v27 = *((_QWORD *)v3 + 4) + 16;
    if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
LABEL_89:
      dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
    re::MaterialParameterTable::appendPassTechniqueMappingsFrom((_anonymous_namespace_ *)v11, v27, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
    v48 = *((_QWORD *)v3 + 4);
    v49 = *(unsigned int *)(v48 + 96);
    if ((_DWORD)v49)
    {
      v50 = 0;
      v51 = (int *)(*(_QWORD *)(v48 + 80) + 8);
      while (1)
      {
        v52 = *v51;
        v51 += 18;
        if (v52 < 0)
          break;
        if (v49 == ++v50)
        {
          LODWORD(v50) = *(_DWORD *)(v48 + 96);
          break;
        }
      }
    }
    else
    {
      LODWORD(v50) = 0;
    }
    if ((_DWORD)v49 != (_DWORD)v50)
    {
      v53 = v50;
      do
      {
        re::MaterialParameterTable::appendPassTechniqueMappingsFrom((_anonymous_namespace_ *)v11, *(_QWORD *)(v48 + 80) + 72 * v53 + 24, *(_QWORD *)(*(_QWORD *)(v48 + 80) + 72 * v53 + 16));
        if (*(_DWORD *)(v48 + 96) <= (v50 + 1))
          v54 = v50 + 1;
        else
          v54 = *(_DWORD *)(v48 + 96);
        v55 = v50;
        while (1)
        {
          v53 = (v55 + 1);
          if (v54 - 1 == v55)
            break;
          ++v55;
          LODWORD(v50) = v53;
          if ((*(_DWORD *)(*(_QWORD *)(v48 + 80) + 72 * v53 + 8) & 0x80000000) != 0)
            goto LABEL_82;
        }
        LODWORD(v50) = v54;
LABEL_82:
        ;
      }
      while ((_DWORD)v49 != (_DWORD)v50);
    }
    v12 = v61;
    v61[170] = *((_QWORD *)v3 + 153);
    *((_BYTE *)v61 + 1368) = *((_BYTE *)v3 + 1232);
    v56 = v61 + 1;
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v61;
    re::MaterialParameterTable::~MaterialParameterTable((re::MaterialParameterTable *)v67);
LABEL_84:

  }
}

unint64_t re::MaterialRenderFlags::flattenToOverrideFlags(re::MaterialRenderFlags *this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)this;
  if (*(_BYTE *)this)
  {
    v2 = *((unsigned __int8 *)this + 1);
    v1 = 1;
  }
  else
  {
    v2 = 0;
  }
  if (*((_BYTE *)this + 6))
  {
    v2 |= *((unsigned __int8 *)this + 7) << 11;
    v1 = v1 | 0x800;
  }
  if (*((_BYTE *)this + 8))
  {
    v2 = v2 & 0xFFFFEFFF | (*((unsigned __int8 *)this + 9) << 12);
    v1 = v1 | 0x1000;
  }
  if (*((_BYTE *)this + 2))
  {
    v2 = v2 & 0xFFFFFF9F | (32 * (*((_BYTE *)this + 3) == 1)) | ((*((_BYTE *)this + 3) == 0) << 6);
    v1 = v1 | 0x60;
  }
  if (*((_BYTE *)this + 4))
  {
    v2 = v2 & 0xFFCFFFFF | ((*((_BYTE *)this + 5) == 0) << 20) | ((*((_BYTE *)this + 5) == 1) << 21);
    v1 = v1 | 0x300000;
  }
  if (*((_BYTE *)this + 10))
  {
    v2 = v2 & 0xFF7FFFFF | (*((unsigned __int8 *)this + 11) << 23);
    v1 = v1 | 0x800000;
  }
  if (*((_BYTE *)this + 12))
  {
    v2 = v2 & 0xFEFFFFFF | (*((unsigned __int8 *)this + 13) << 24);
    v1 = v1 | 0x1000000;
  }
  if (*((_BYTE *)this + 14))
  {
    v2 = v2 & 0xFDFFFFFF | (*((unsigned __int8 *)this + 15) << 25);
    v1 = v1 | 0x2000000;
  }
  if (*((_BYTE *)this + 16))
  {
    v2 = v2 & 0xFBFFFFFF | (*((unsigned __int8 *)this + 17) << 26);
    v1 = v1 | 0x4000000;
  }
  return v2 | (unint64_t)(v1 << 32);
}

uint64_t *re::MaterialBuilder::generateTechnique@<X0>(re *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t *a8, uint64_t *a9, uint64_t a10)
{
  uint64_t *v16;
  uint64_t v17;
  re::MaterialTechnique *v18;
  uint64_t v19;
  uint64_t TechniqueVariant;
  uint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  re::MaterialTechnique *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v33;
  _QWORD v34[2];
  re::MaterialTechnique *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  re::MaterialTechnique *v39;
  _QWORD v40[3];
  __int128 *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v16 = re::globalAllocators(a1);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16[2] + 32))(v16[2], 136, 8);
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 112) = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_QWORD *)(v17 + 128) = 0;
  *(_DWORD *)(v17 + 124) = 0x7FFFFFFF;
  v41 = (__int128 *)v40;
  v39 = (re::MaterialTechnique *)v17;
  v40[0] = &off_24ED73BA8;
  *(_QWORD *)v17 = a2;
  *(_QWORD *)(v17 + 8) = a3;
  re::FunctionConstantsEnumerator::createPermutation((_anonymous_namespace_ *)a6, 0, a4, a5, (uint64_t)&v35);
  v34[0] = v38;
  v34[1] = *((_QWORD *)&v36 + 1);
  re::FixedArray<re::TechniqueFunctionConstant>::operator=((re::MaterialTechnique *)((char *)v39 + 16), (uint64_t)v34);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v35);
  LOBYTE(v35) = 1;
  re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::FixedArray(&v36, a6);
  v38 = *(_OWORD *)(a6 + 24);
  v18 = v39;
  if (*((_BYTE *)v39 + 40) || (_BYTE)v35)
  {
    if (!*((_BYTE *)v39 + 40) || (_BYTE)v35)
    {
      if (*((_BYTE *)v39 + 40) || !(_BYTE)v35)
      {
        re::FixedArray<re::SharedPtr<re::MaterialPipelineData const>>::operator=((uint64_t *)v39 + 6, (uint64_t *)&v36);
      }
      else
      {
        *((_BYTE *)v39 + 40) = 1;
        *((_OWORD *)v18 + 3) = v36;
        v19 = v37;
        v37 = 0;
        v36 = 0uLL;
        *((_QWORD *)v18 + 8) = v19;
      }
      *(_OWORD *)((char *)v18 + 72) = v38;
    }
    else
    {
      re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit((_QWORD *)v39 + 6);
      *((_BYTE *)v18 + 40) = 0;
    }
    if ((_BYTE)v35)
      re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(&v36);
  }
  if (*(_BYTE *)(a2 + 2845))
  {
    TechniqueVariant = re::MaterialTechnique::getOrCreateTechniqueVariant(v39, *(_QWORD *)(a6 + 32), 1);
    if (*a8)
    {
      v21 = TechniqueVariant;
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(TechniqueVariant + 8), *a8);
      atomic_store(1u, (unsigned __int8 *)(v21 + 17));
      if (a10)
      {
        v24 = v21 + 24;
        v25 = 8 * a10;
        do
        {
          v26 = *a9;
          if (*a9)
          {
            v27 = (id)(v26 + 8);
            v33 = v26;
            v28 = (id)(v26 + 8);
            re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::addNew<re::SharedPtr<re::CachedPipelineState>&>(v24, (_QWORD *)(v26 + 24), &v33);
            if (v33)
            {

              v33 = 0;
            }

          }
          ++a9;
          v25 -= 8;
        }
        while (v25);
      }
    }
  }
  v29 = v39;
  v30 = v41;
  v39 = 0;
  v35 = v29;
  if (!v41)
  {
    *(_BYTE *)a7 = 1;
    *(_QWORD *)&v38 = 0;
    v35 = 0;
    *(_QWORD *)(a7 + 8) = v29;
    goto LABEL_26;
  }
  if (v41 != (__int128 *)v40)
  {
    v41 = 0;
    *(_BYTE *)a7 = 1;
    *(_QWORD *)&v38 = v30;
    v35 = 0;
    *(_QWORD *)(a7 + 8) = v29;
    goto LABEL_28;
  }
  *(_QWORD *)&v38 = &v36;
  (*(void (**)(_QWORD *, __int128 *))(v40[0] + 24))(v40, &v36);
  v31 = (uint64_t)v35;
  v30 = (__int128 *)v38;
  *(_BYTE *)a7 = 1;
  v35 = 0;
  *(_QWORD *)(a7 + 8) = v31;
  if (!v30)
  {
LABEL_26:
    *(_QWORD *)(a7 + 40) = 0;
    goto LABEL_31;
  }
LABEL_28:
  if (v30 == &v36)
  {
    *(_QWORD *)(a7 + 40) = a7 + 16;
    (*(void (**)(__int128 *))(v36 + 24))(&v36);
  }
  else
  {
    *(_QWORD *)(a7 + 40) = v30;
    *(_QWORD *)&v38 = 0;
  }
LABEL_31:
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v35);
  return std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v39);
}

uint64_t re::MaterialTechnique::getOrCreateTechniqueVariant(re::MaterialTechnique *this, unint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;

  v6 = (_QWORD *)((char *)this + 88);
  v14 = a2;
  if (!re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)this + 88, (uint64_t *)&v14))
  {
    re::MaterialTechnique::createNewTechniqueVariant(this, a2, a3);
    v13 = a2;
    v14 = v7;
    re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<re::MaterialTechniqueVariant *&>((uint64_t)v6, (uint64_t *)&v13, &v14);
  }
  LODWORD(v8) = 0x7FFFFFFF;
  if (*v6)
  {
    v9 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v10 = *(unsigned int *)(*((_QWORD *)this + 12) + 4 * ((v9 ^ (v9 >> 31)) % *((unsigned int *)this + 28)));
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *((_QWORD *)this + 13);
      LODWORD(v8) = v10;
      if (*(_QWORD *)(v11 + 32 * v10 + 16) != a2)
      {
        v8 = v10;
        while (1)
        {
          v8 = *(_DWORD *)(v11 + 32 * v8 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v8 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v11 + 32 * v8 + 16) == a2)
            return *(_QWORD *)(*((_QWORD *)this + 13) + 32 * v8 + 24);
        }
        LODWORD(v8) = 0x7FFFFFFF;
      }
    }
  }
  return *(_QWORD *)(*((_QWORD *)this + 13) + 32 * v8 + 24);
}

_QWORD *re::DynamicArray<unsigned char>::resizeUninitialized(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else if (result[1] < a2)
  {
    result = re::DynamicArray<BOOL>::setCapacity(result, a2);
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(_anonymous_namespace_ *a1, _QWORD *a2, char *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::internalAdd(a1, a2, a3);
  else
    return *((_QWORD *)a1 + 1) + 16 * v6 + 8;
}

unint64_t re::MetalTypeInfo::resolutionHash(re::MetalTypeInfo *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  re::MetalTypeInfo *v7;
  uint64_t v8;

  v1 = 0xBF58476D1CE4E5B9 * ((*((_QWORD *)this + 2) >> 31) ^ (*((_QWORD *)this + 2) >> 1));
  v2 = (0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) ^ ((0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) >> 31);
  v3 = (*((unsigned int *)this + 1) | ((unint64_t)*(unsigned int *)this << 32)) ^ ((*((unsigned int *)this + 1) | ((unint64_t)*(unsigned int *)this << 32)) >> 30);
  v4 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v3) ^ ((0xBF58476D1CE4E5B9 * v3) >> 27));
  v5 = ((v2 << 6) + (v2 >> 2) + (v4 ^ (v4 >> 31)) - 0x61C8864680B583E9) ^ v2;
  v6 = *((_QWORD *)this + 6);
  if (v6)
  {
    v7 = (re::MetalTypeInfo *)*((_QWORD *)this + 7);
    v8 = 80 * v6;
    do
    {
      v5 ^= (v5 << 6) - 0x61C8864680B583E9 + (v5 >> 2) + re::MetalTypeInfo::resolutionHash(v7);
      v7 = (re::MetalTypeInfo *)((char *)v7 + 80);
      v8 -= 80;
    }
    while (v8);
  }
  return v5;
}

uint64_t re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::init(a1, v4, v5);
      re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

void re::AttributeTable::~AttributeTable(re::AttributeTable *this)
{
  uint64_t v2;

  re::AttributeTable::deinit(this);
  re::BufferTable::~BufferTable((re::AttributeTable *)((char *)this + 48));
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 4))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 5));
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
    }
    *((_QWORD *)this + 3) = 0;
  }
  if (*(_QWORD *)this)
  {

    *(_QWORD *)this = 0;
  }
}

uint64_t re::AttributeTable::deinit(re::AttributeTable *this)
{
  uint64_t result;

  re::BufferTable::deinit((re::AttributeTable *)((char *)this + 48));
  result = *((_QWORD *)this + 3);
  if (result)
  {
    if (*((_QWORD *)this + 4))
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *((_QWORD *)this + 5));
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
    }
    *((_QWORD *)this + 3) = 0;
  }
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return result;
}

_QWORD *re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::FixedArray(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::init<>(a1, v4, *(_QWORD *)(a2 + 8));
    re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::copy((uint64_t)a1, a2);
  }
  return a1;
}

_QWORD *re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  _anonymous_namespace_ *v5;
  uint64_t v6;
  _anonymous_namespace_ *v7;
  unint64_t i;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >= 0x2E8BA2E8BA2E8BBLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 88, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 88 * a3, 8);
  v4[2] = v5;
  if (!v5)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v7 = v5;
  for (i = a3 - 1; i; --i)
  {
    *(_OWORD *)v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v7, 0);
    *((_QWORD *)v7 + 4) = 0;
    *((_DWORD *)v7 + 10) = 0;
    *((_OWORD *)v7 + 3) = 0u;
    *((_OWORD *)v7 + 4) = 0u;
    *((_BYTE *)v7 + 80) = 0;
    v7 = (_anonymous_namespace_ *)((char *)v7 + 88);
  }
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  result = re::DynamicString::setCapacity(v7, 0);
  *((_QWORD *)v7 + 4) = 0;
  *((_DWORD *)v7 + 10) = 0;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_BYTE *)v7 + 80) = 0;
  return result;
}

uint64_t re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a2 + 8))
    return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::FunctionConstantsEnumerator::PermutationLayer *,re::FunctionConstantsEnumerator::PermutationLayer *,re::FunctionConstantsEnumerator::PermutationLayer *>((uint64_t)&v4, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 16) + 88 * v2, *(_QWORD *)(a1 + 16));
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::FunctionConstantsEnumerator::PermutationLayer *,re::FunctionConstantsEnumerator::PermutationLayer *,re::FunctionConstantsEnumerator::PermutationLayer *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  if (a2 == a3)
    return a2;
  v4 = a3;
  v5 = a4 + 48;
  v6 = a2 + 48;
  do
  {
    re::DynamicString::operator=((re::DynamicString *)(v5 - 48), (re::DynamicString *)(v6 - 48));
    v7 = *(_QWORD *)(v6 - 16);
    *(_DWORD *)(v5 - 8) = *(_DWORD *)(v6 - 8);
    *(_QWORD *)(v5 - 16) = v7;
    re::FixedArray<re::Optional<unsigned long long>>::operator=((_QWORD *)v5, v6);
    v8 = *(_BYTE *)(v6 + 32);
    *(_QWORD *)(v5 + 24) = *(_QWORD *)(v6 + 24);
    *(_BYTE *)(v5 + 32) = v8;
    v5 += 88;
    v9 = v6 + 40;
    v6 += 88;
  }
  while (v9 != v4);
  return v4;
}

_QWORD *re::FixedArray<re::Optional<unsigned long long>>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != (_QWORD *)a2)
  {
    v4 = *(_QWORD *)a2;
    if (*a1)
    {
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    if (v4)
    {
      re::FixedArray<re::Optional<unsigned long long>>::init<>(a1, v4, *(_QWORD *)(a2 + 8));
LABEL_7:
      re::FixedArray<re::Optional<unsigned long long>>::copy((uint64_t)a1, a2);
    }
  }
  return a1;
}

_QWORD *re::FixedArray<re::Optional<unsigned long long>>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_BYTE *)result = 0;
      result += 2;
      --v6;
    }
    while (v6);
  }
  *(_BYTE *)result = 0;
  return result;
}

unsigned __int8 *re::FixedArray<re::Optional<unsigned long long>>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *result;
  char v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a2 + 8))
    return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::Optional<unsigned long long> *,re::Optional<unsigned long long> *,re::Optional<unsigned long long> *>((uint64_t)&v4, *(unsigned __int8 **)(a2 + 16), (unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 16 * v2), *(_QWORD *)(a1 + 16));
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  result = (unsigned __int8 *)_os_crash();
  __break(1u);
  return result;
}

unsigned __int8 *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::Optional<unsigned long long> *,re::Optional<unsigned long long> *,re::Optional<unsigned long long> *>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned __int8 *result;
  int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;

  result = a2;
  if (a2 != a3)
  {
    do
    {
      v5 = *result;
      if (*(_BYTE *)a4)
        v6 = 0;
      else
        v6 = v5 == 0;
      if (!v6)
      {
        if (*(_BYTE *)a4)
          v7 = v5 == 0;
        else
          v7 = 0;
        if (v7)
        {
          *(_BYTE *)a4 = 0;
        }
        else
        {
          if (*(_BYTE *)a4)
            v8 = 1;
          else
            v8 = v5 == 0;
          if (!v8)
            *(_BYTE *)a4 = 1;
          *(_QWORD *)(a4 + 8) = *((_QWORD *)result + 1);
        }
      }
      result += 16;
      a4 += 16;
    }
    while (result != a3);
    return a3;
  }
  return result;
}

double re::MaterialTechnique::createNewTechniqueVariant(re::MaterialTechnique *this, unint64_t a2, char a3)
{
  uint64_t *v5;
  uint64_t v6;
  double result;

  v5 = re::globalAllocators(this);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 408, 8);
  result = 0.0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_BYTE *)(v6 + 18) = 1;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_QWORD *)(v6 + 56) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_QWORD *)(v6 + 104) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_QWORD *)(v6 + 152) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_QWORD *)(v6 + 200) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_QWORD *)(v6 + 248) = 0x7FFFFFFF00000000;
  *(_DWORD *)(v6 + 296) = 0;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_DWORD *)(v6 + 300) = 0x7FFFFFFF;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_QWORD *)(v6 + 344) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_QWORD *)(v6 + 392) = 0x7FFFFFFF00000000;
  *(_QWORD *)v6 = this;
  *(_BYTE *)(v6 + 16) = a3;
  return result;
}

uint64_t re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<re::MaterialTechniqueVariant *&>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addEmplace<re::MaterialTechniqueVariant *&>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 32 * v10;
  return v12 + 24;
}

uint64_t re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addEmplace<re::MaterialTechniqueVariant *&>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addEmplace<re::MaterialTechniqueVariant *&>(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_167, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

_QWORD *re::FixedArray<re::AttributeArgument>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  re::StringID *v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (re::StringID *)result[2];
      v5 = 24 * v2;
      do
      {
        re::StringID::destroyString(v4);
        v4 = (re::StringID *)((char *)v4 + 24);
        v5 -= 24;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::ConstantLocation,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const re::DynamicString *a4, _DWORD *a5)
{
  uint64_t v10;
  int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  signed int v26;
  _BYTE v28[44];

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v10 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<re::DynamicString,re::ConstantLocation,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v28, v14, v13);
          v16 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v28[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = DWORD2(v19);
          if (DWORD2(v19))
          {
            v22 = 0;
            v23 = v18 + 48;
            do
            {
              if ((*(_DWORD *)(v23 - 40) & 0x80000000) != 0)
                re::HashTable<re::DynamicString,re::ConstantLocation,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)(v23 - 48) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v23 - 48), v23 - 32, v23);
              ++v22;
              v23 += 56;
            }
            while (v22 < v21);
          }
          re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v28, *(double *)&v19);
        }
      }
      else
      {
        if (v13)
          v26 = 2 * v12;
        else
          v26 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_DWORD *)(v24 + 56 * v10 + 8);
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_DWORD *)(v24 + 56 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v25 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v24 + 56 * v10 + 8) = v25 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 16), a4);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 48) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::ConstantLocation,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_167, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<unsigned char>(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, unsigned __int8 *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 56 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 16), a4);
  v14 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 48) = *a5;
  *(_DWORD *)(v14 + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_OWORD *)&v13[24];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = DWORD2(v7);
      if (DWORD2(v7))
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (re::DynamicString *)(*(_QWORD *)&v13[16] + v10 + 16));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 56;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13, *(double *)&v7);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, _DWORD *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 56 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 16), a4);
  v14 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 48) = *a5;
  *(_DWORD *)(v14 + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_142, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

_QWORD *re::DynamicArray<re::BufferSlice>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::BufferSlice>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::BufferSlice>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::BufferSlice>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::BufferSlice>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 16 * v9;
        v11 = v7;
        do
        {
          *v11 = *(id *)v8;
          v11[1] = *(_QWORD *)(v8 + 8);
          if (*(_QWORD *)v8)
          {

            *(_QWORD *)v8 = 0;
          }
          v8 += 16;
          v11 += 2;
          v10 -= 16;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

void re::HashTable<re::DynamicString,re::WeakStringID,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  unint64_t *v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::ConstantLocation,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(unint64_t **)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        do
        {
          if ((v6[1] & 0x80000000) != 0)
          {
            v14 = *v6;
            v15 = *(unsigned int *)(a1 + 24);
            v16 = *v6 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::DynamicString,re::WeakStringID,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v12));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 56 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 56 * v17 + 16), (const re::DynamicString *)(v6 + 2));
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17 + 48) = v6[6];
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v16) = v17;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v6 += 7;
        }
        while (v11 < v10);
      }
      re::HashTable<re::DynamicString,re::WeakStringID,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v22, *(double *)&v7);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

uint64_t re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::updateKvpsHash(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)a2 ^ (*(_QWORD *)a2 >> 30));
  v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  v4 = *(unsigned __int8 *)(a2 + 11);
  v5 = *(unsigned __int16 *)(a2 + 8) | (v4 << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 10) << 16);
  v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v5 ^ (v4 >> 6))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v4 >> 6))) >> 27));
  *(_QWORD *)(result + 48) ^= v3 ^ ((v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9 + (v6 ^ (v6 >> 31)));
  return result;
}

uint64_t re::DynamicArray<re::MetalTypeInfo>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 80 * v4;
        v6 = (_QWORD *)(v3 + 40);
        do
        {
          re::FixedArray<re::MetalTypeInfo>::deinit(v6);
          re::StringID::destroyString((re::StringID *)(v6 - 3));
          v6 += 10;
          v5 -= 80;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::TechniqueStage::~TechniqueStage(re::TechniqueStage *this)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = re::globalAllocators(this);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3[2] + 40))(v3[2], v2);
    *((_QWORD *)this + 1) = 0;
  }
  re::FixedArray<re::AttributeArgument>::deinit((_QWORD *)this + 33);
  re::FixedArray<re::AttributeArgument>::deinit((_QWORD *)this + 29);
  re::FixedArray<re::AttributeArgument>::deinit((_QWORD *)this + 25);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 18);
  re::FixedArray<re::TextureArgument>::deinit((_QWORD *)this + 14);
  re::FixedArray<NS::SharedPtr<NS::String>>::deinit((_QWORD *)this + 10);
  re::FixedArray<re::TypedArgument>::deinit((_QWORD *)this + 7);
  re::FixedArray<re::TypedArgument>::deinit((_QWORD *)this + 3);
}

_QWORD *re::FixedArray<re::TextureArgument>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  re::StringID *v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (re::StringID *)result[2];
      v5 = 32 * v2;
      do
      {
        re::StringID::destroyString(v4);
        v4 = (re::StringID *)((char *)v4 + 32);
        v5 -= 32;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::FixedArray<re::BufferArgument>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >= 0xAAAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 24 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *result = 0;
      result[1] = &str_110;
      result[2] = 0;
      result += 3;
      --v6;
    }
    while (v6);
  }
  *result = 0;
  result[1] = &str_110;
  result[2] = 0;
  return result;
}

void re::FixedArray<NS::SharedPtr<MTL::ArgumentEncoder>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 8 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 8 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    v8 = (_QWORD *)((char *)v8 + v5 - 8);
  }
  *v8 = 0;
}

uint64_t re::FixedArray<re::TextureArgument>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >> 59)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 32 * a3, 8);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = &str_110;
      *(_QWORD *)(result + 24) = 0;
      *(_DWORD *)(result + 16) = 0;
      *(_DWORD *)(result + 19) = 0;
      result += 32;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = &str_110;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 19) = 0;
  return result;
}

uint64_t re::FixedArray<re::SamplerArgument>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >= 0xAAAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 24 * a3, 8);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = &str_110;
      *(_WORD *)(result + 16) = 0;
      *(_BYTE *)(result + 18) = 0;
      result += 24;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = &str_110;
  *(_WORD *)(result + 16) = 0;
  *(_BYTE *)(result + 18) = 0;
  return result;
}

uint64_t re::Bitset<256>::toWordIndex(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (a1 < 0x100)
    return a1 >> 6;
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %d.", "b < kBitCount", "toWordIndex", 345, a1, 256, v2, v3);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::FixedArray<re::AttributeArgument>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >= 0xAAAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 24 * a3, 8);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = &str_110;
      *(_DWORD *)(result + 16) = 0;
      result += 24;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = &str_110;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

_QWORD *re::DynamicArray<re::AttributeArgument>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::BlendParameterInputNode>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::BlendParameterInputNode>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void std::__function::__func<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0,std::allocator<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0,std::allocator<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24ED73AC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0,std::allocator<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24ED73AC8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0,std::allocator<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void **CachedFunction;
  void **v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  const char *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  id *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  id *v52;
  id v53;
  id v54;
  unsigned __int8 v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  id *v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  char v70[8];
  _QWORD *v71;
  id v72[5];
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  int v79;
  uint64_t v80;

  v2 = re::globalAllocators((re *)a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 192, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(_QWORD *)v4 = &off_24ED79C88;
  *(_OWORD *)(v4 + 16) = 0u;
  v5 = (_QWORD *)(v4 + 16);
  *(_BYTE *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = 0;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  v6 = (uint64_t *)(v4 + 32);
  *(_QWORD *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 128) = 0u;
  v75 = v3;
  re::FixedArray<re::TechniqueFunctionConstant>::operator=((_anonymous_namespace_ *)(v4 + 128), *(_QWORD *)(a1 + 8));
  *(_QWORD *)(v3 + 168) = re::TechniqueDefinitionBuilder::hashFunctionConstants(*(_QWORD *)(v3 + 144), *(_QWORD *)(v3 + 136));
  v7 = *(uint64_t **)(a1 + 16);
  re::FixedArray<re::LinkedFunction>::operator=(v6, v7);
  re::FixedArray<re::LinkedFunction>::operator=((uint64_t *)(v3 + 56), v7 + 3);
  v73 = 0;
  v74 = 0;
  v8 = **(_QWORD **)(a1 + 24);
  if ((*(_BYTE *)(v8 + 2448) & 1) != 0)
    v9 = *(const char **)(v8 + 2456);
  else
    v9 = (const char *)(v8 + 2449);
  v10 = re::FunctionReflectionCache::hashFunction(*(_QWORD *)(v3 + 144), *(_QWORD *)(v3 + 136), (re::FunctionConstantUsageMask *)(v8 + 2504), v9, *(_QWORD *)(v8 + 2424));
  CachedFunction = (void **)re::FunctionReflectionCache::tryGetCachedFunction(*(os_unfair_lock_s **)(a1 + 32), v10);
  if (CachedFunction)
  {
    v12 = CachedFunction;
    NS::SharedPtr<MTL::Texture>::operator=(&v74, CachedFunction);
    v13 = **(unint64_t ***)(a1 + 24);
    v14 = v13[310];
    v15 = v14 >> 1;
    if ((v14 & 1) == 0)
      v15 = v14 >> 1;
    if (!v15)
    {
      v19 = 0;
      goto LABEL_16;
    }
    if ((v14 & 1) != 0)
      v16 = (const char *)v13[311];
    else
      v16 = (char *)v13 + 2481;
    v20 = re::FunctionReflectionCache::hashFunction(*(_QWORD *)(v3 + 144), *(_QWORD *)(v3 + 136), (re::FunctionConstantUsageMask *)(v13 + 321), v16, v13[304]);
    v21 = (void **)re::FunctionReflectionCache::tryGetCachedFunction(*(os_unfair_lock_s **)(a1 + 32), v20);
    if (v21)
    {
      v22 = v21;
      NS::SharedPtr<MTL::Texture>::operator=(&v73, v21);
      v19 = (uint64_t)(v22 + 1);
LABEL_16:
      v23 = (uint64_t)(v12 + 1);
      re::makeAttributeArguments(&v74, (uint64_t)v72);
      v24 = **(_QWORD **)(a1 + 24);
      if ((*(_BYTE *)(v24 + 2448) & 1) != 0)
        v25 = *(const char **)(v24 + 2456);
      else
        v25 = (const char *)(v24 + 2449);
      re::makeStage((re *)1, &v74, v25, *(_QWORD *)(v24 + 2424), *(unsigned __int8 *)(v24 + 2848), *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 309), v23, *(id **)(a1 + 16), (uint64_t)v70, v66, (uint64_t)v72);
      if (v70[0])
      {
        v26 = v71;
        *v5 = v71;
        v27 = **(_QWORD **)(a1 + 24);
        v28 = *(_QWORD *)(v27 + 2480);
        v29 = v28 >> 1;
        if ((v28 & 1) == 0)
          v29 = v28 >> 1;
        if (!v29)
          goto LABEL_34;
        if ((v28 & 1) != 0)
          v30 = *(const char **)(v27 + 2488);
        else
          v30 = (const char *)(v27 + 2481);
        v34 = *(_QWORD *)(v27 + 2432);
        v35 = *(unsigned __int8 *)(v27 + 2848);
        v36 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 309);
        v37 = (id *)(*(_QWORD *)(a1 + 16) + 24);
        v80 = 0;
        v77 = 0;
        v78 = 0;
        v76 = 0;
        v79 = 0;
        re::makeStage((re *)2, &v73, v30, v34, v35, v36, v19, v37, (uint64_t)&v68, v67, (uint64_t)&v76);
        re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)&v76);
        if ((_BYTE)v68)
        {
          *(_QWORD *)(v3 + 24) = v69;
          v26 = *(_QWORD **)(v3 + 16);
LABEL_34:
          if (*((_BYTE *)v26 + 332)
            && (v38 = *(_QWORD *)(v3 + 24)) != 0
            && *(_BYTE *)(v38 + 332)
            && (*((unsigned __int8 *)v26 + 332) != *(unsigned __int8 *)(v38 + 332)
             || *((unsigned __int16 *)v26 + 165) != *(unsigned __int16 *)(v38 + 330)))
          {
            v59 = **(_QWORD **)(a1 + 24);
            if ((*(_BYTE *)(v59 + 2448) & 1) != 0)
              v60 = *(_QWORD *)(v59 + 2456);
            else
              v60 = v59 + 2449;
            if ((*(_BYTE *)(v59 + 2480) & 1) != 0)
              v61 = *(_QWORD *)(v59 + 2488);
            else
              v61 = v59 + 2481;
            re::DynamicString::format((re::DynamicString *)"Vertex shader function %s and fragment shader function %s do not have matching \"dynamicSamplers\" arrays.", (re::DynamicString *)&v76, v60, v61);
            if ((v77 & 1) != 0)
              v62 = v78;
            else
              v62 = (char *)&v77 + 1;
            re::WrappedError::make((re::WrappedError *)CFSTR("REMaterialBuilderErrorDomain"), (const __CFString *)0x46, (uint64_t)v62, &v68);
            v63 = *(id **)(a1 + 40);
            if (v63 != &v68)
            {
              v64 = v68;
              v68 = 0;
              v65 = *v63;
              *v63 = v64;

            }
            if (v76 && (v77 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v76 + 40))();
          }
          else
          {
            v39 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 2480);
            if ((v39 & 1) != 0)
              v40 = v39 >> 1;
            else
              v40 = v39 >> 1;
            v41 = v26[6];
            v42 = (v41 << 6) + (v41 >> 2) - 0x61C8864680B583E9;
            if (v40)
            {
              v43 = *(_QWORD **)(v3 + 24);
              v44 = v43[6];
              v45 = (v44 + v42) ^ v41;
              v46 = ((((v26[32] + v42) ^ v41) << 6)
                   - 0x61C8864680B583E9
                   + (((v26[32] + v42) ^ v41) >> 2)
                   + (((v44 << 6) - 0x61C8864680B583E9 + (v44 >> 2) + v43[32]) ^ v44)) ^ (v26[32] + v42) ^ v41;
              v47 = (v43[17] - 0x61C8864680B583E9 + (v26[17] << 6) + (v26[17] >> 2)) ^ v26[17];
              v48 = (v43[24] - 0x61C8864680B583E9 + (v26[24] << 6) + (v26[24] >> 2)) ^ v26[24];
              v49 = (v43[28] - 0x61C8864680B583E9 + (v26[28] << 6) + (v26[28] >> 2)) ^ v26[28];
              v50 = (v43[13] - 0x61C8864680B583E9 + (v26[13] << 6) + (v26[13] >> 2)) ^ v26[13];
            }
            else
            {
              v46 = (v26[32] + v42) ^ v41;
              v47 = v26[17];
              v48 = v26[24];
              v49 = v26[28];
              v50 = v26[13];
              v45 = v41;
            }
            *(_QWORD *)(v3 + 80) = v45;
            *(_QWORD *)(v3 + 88) = v47;
            *(_QWORD *)(v3 + 96) = v48;
            *(_QWORD *)(v3 + 104) = v46;
            *(_QWORD *)(v3 + 112) = v49;
            *(_QWORD *)(v3 + 120) = v50;
            *(_QWORD *)(v3 + 184) = objc_msgSend(v74, sel_patchType);
            if (objc_msgSend(v74, sel_patchControlPointCount) == (id)-1)
              v55 = 0;
            else
              v55 = objc_msgSend(v74, sel_patchControlPointCount);
            *(_BYTE *)(v3 + 176) = v55;
            re::MaterialPipelineData::generatePipelineStateKey((_QWORD *)v3);
            re::MaterialManager::tryGetMaterialPipelineData(*(os_unfair_lock_s **)(*(_QWORD *)(a1 + 48) + 24), *(_QWORD *)(v3 + 152), &v76);
            v56 = *(uint64_t **)(a1 + 56);
            v57 = *v56;
            *v56 = v76;
            if (v57)

            v58 = *(uint64_t **)(a1 + 56);
            if (!*v58)
            {
              re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v58, v3);
              re::MaterialManager::installMaterialPipelineData(*(os_unfair_lock_s **)(*(_QWORD *)(a1 + 48) + 24), &v75);
            }
          }
          goto LABEL_65;
        }
        re::ObjCObject::operator=(*(id **)(a1 + 40), &v69);
        if (!(_BYTE)v68)
        {
          v31 = v69;
          goto LABEL_56;
        }
      }
      else
      {
        re::ObjCObject::operator=(*(id **)(a1 + 40), (id *)&v71);
        if (!v70[0])
        {
          v31 = v71;
LABEL_56:

        }
      }
LABEL_65:
      re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v72);
      goto LABEL_66;
    }
    v32 = **(_QWORD **)(a1 + 24);
    if ((*(_BYTE *)(v32 + 2480) & 1) != 0)
      v33 = *(_QWORD *)(v32 + 2488);
    else
      v33 = v32 + 2481;
    re::DynamicString::format((re::DynamicString *)"makeFunction failed for fragment shader function %s.", (re::DynamicString *)&v76, v33);
  }
  else
  {
    v17 = **(_QWORD **)(a1 + 24);
    if ((*(_BYTE *)(v17 + 2448) & 1) != 0)
      v18 = *(_QWORD *)(v17 + 2456);
    else
      v18 = v17 + 2449;
    re::DynamicString::format((re::DynamicString *)"makeFunction failed for vertex shader function %s.", (re::DynamicString *)&v76, v18);
  }
  if ((v77 & 1) != 0)
    v51 = v78;
  else
    v51 = (char *)&v77 + 1;
  re::WrappedError::make((re::WrappedError *)CFSTR("REMaterialBuilderErrorDomain"), (const __CFString *)0x3C, (uint64_t)v51, v72);
  v52 = *(id **)(a1 + 40);
  if (v52 != v72)
  {
    v53 = v72[0];
    v72[0] = 0;
    v54 = *v52;
    *v52 = v53;

  }
  if (v76 && (v77 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v76 + 40))();
LABEL_66:
  if (v73)

  if (v74)
  if (v75)

}

uint64_t std::__function::__func<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0,std::allocator<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0,std::allocator<re::TechniqueDefinitionBuilder::buildPipelineData(re::Slice<re::TechniqueFunctionConstant>,re::MaterialTechniqueDefinition const*,re::StageLinkedFunctions const&,re::RenderManager &,re::FunctionReflectionCache &)::$_0>,void ()(void)>::target_type()
{
}

uint64_t re::FixedArray<re::LinkedFunction>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  if (a1 == a2)
    return (uint64_t)a1;
  v4 = *a2;
  if (*a1)
  {
    if (!v4)
      return (uint64_t)a1;
  }
  else
  {
    if (!v4)
      return (uint64_t)a1;
    re::FixedArray<re::LinkedFunction>::init<>((uint64_t)a1, v4, a2[1]);
  }
  v5 = a2[1];
  if (a1[1] != v5)
    goto LABEL_34;
  if (!v5)
    return (uint64_t)a1;
  v6 = 0;
  v7 = a2[2];
  v8 = v7 + 144 * v5;
  v9 = a1[2];
  while (1)
  {
    v10 = v7 + v6;
    v11 = v9 + v6;
    *(_BYTE *)(v9 + v6) = *(_BYTE *)(v7 + v6);
    re::StringID::operator=((unint64_t *)(v9 + v6 + 8), (uint64_t *)(v7 + v6 + 8));
    re::StringID::operator=((unint64_t *)(v9 + v6 + 24), (uint64_t *)(v7 + v6 + 24));
    v12 = *(_QWORD *)(v7 + v6 + 48);
    *(_QWORD *)(v9 + v6 + 40) = *(_QWORD *)(v7 + v6 + 40);
    v13 = *(_QWORD *)(v9 + v6 + 48);
    if (v13 != v12)
    {
      if (v12)
      {
        v14 = (id)(v12 + 8);
        v13 = *(_QWORD *)(v11 + 48);
      }
      if (v13)

      *(_QWORD *)(v11 + 48) = v12;
    }
    *(_DWORD *)(v11 + 56) = *(_DWORD *)(v10 + 56);
    if (v11 == v10)
      goto LABEL_31;
    v16 = *(_QWORD *)(v11 + 64);
    v15 = (_QWORD *)(v11 + 64);
    v17 = *(_QWORD *)(v10 + 64);
    if (!v16)
    {
      if (!v17)
        goto LABEL_23;
      re::FixedArray<re::TechniqueFunctionConstant>::init<>(v15, v17, *(_QWORD *)(v7 + v6 + 72));
LABEL_22:
      re::FixedArray<re::TechniqueFunctionConstant>::copy((uint64_t)v15, v10 + 64);
      goto LABEL_23;
    }
    if (v17)
      goto LABEL_22;
LABEL_23:
    *(_QWORD *)(v9 + v6 + 88) = *(_QWORD *)(v7 + v6 + 88);
    re::FixedArray<re::TypedArgument>::operator=((_QWORD *)(v9 + v6 + 96), v7 + v6 + 96);
    v18 = *(_QWORD *)(v7 + v6 + 120);
    if (!*(_QWORD *)(v9 + v6 + 120))
      break;
    if (v18)
      goto LABEL_28;
LABEL_31:
    v6 += 144;
    if (v10 + 144 == v8)
      return (uint64_t)a1;
  }
  if (!v18)
    goto LABEL_31;
  re::FixedArray<re::TextureRecord>::init<>((_QWORD *)(v9 + v6 + 120), v18, *(_QWORD *)(v7 + v6 + 128));
LABEL_28:
  v19 = *(_QWORD *)(v7 + v6 + 128);
  if (*(_QWORD *)(v9 + v6 + 128) == v19)
  {
    if (v19)
      memmove(*(void **)(v9 + v6 + 136), *(const void **)(v7 + v6 + 136), 16 * v19);
    goto LABEL_31;
  }
  re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  _os_crash();
  __break(1u);
LABEL_34:
  re::internal::assertLog((re::internal *)4, v4, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::FixedArray<re::TypedArgument>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != (_QWORD *)a2)
  {
    v4 = *(_QWORD *)a2;
    if (*a1)
    {
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    if (v4)
    {
      re::FixedArray<re::TypedArgument>::init<>((uint64_t)a1, v4, *(_QWORD *)(a2 + 8));
LABEL_7:
      re::FixedArray<re::TypedArgument>::copy((uint64_t)a1, a2);
    }
  }
  return a1;
}

uint64_t *re::FixedArray<re::TechniqueFunctionConstant>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *result;
  char v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a2 + 8))
    return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *>((uint64_t)&v4, *(uint64_t **)(a2 + 16), (uint64_t *)(*(_QWORD *)(a2 + 16) + (v2 << 6)), *(_QWORD *)(a1 + 16));
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

uint64_t re::FixedArray<re::TypedArgument>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a2 + 8))
    return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TypedArgument *,re::TypedArgument *,re::TypedArgument *>((uint64_t)&v4, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 16) + 112 * v2, *(_QWORD *)(a1 + 16));
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        v9 = v8 + v6;
        v10 = *(_QWORD *)(v8 + v6 + 8);
        v11 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
        v12 = v11 ^ (v11 >> 31);
        v13 = *(unsigned int *)(a1 + 24);
        v14 = v12 % v13;
        v15 = *(unsigned int *)(a1 + 36);
        if ((_DWORD)v15 == 0x7FFFFFFF)
        {
          v15 = *(unsigned int *)(a1 + 32);
          v16 = v15;
          if ((_DWORD)v15 == (_DWORD)v13)
          {
            re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            v14 = v12 % *(unsigned int *)(a1 + 24);
            v16 = *(_DWORD *)(a1 + 32);
            v10 = *(_QWORD *)(v9 + 8);
          }
          *(_DWORD *)(a1 + 32) = v16 + 1;
          v17 = *(_QWORD *)(a1 + 16);
          v18 = *(_DWORD *)(v17 + 24 * v15);
        }
        else
        {
          v17 = *(_QWORD *)(a1 + 16);
          v18 = *(_DWORD *)(v17 + 24 * v15);
          *(_DWORD *)(a1 + 36) = v18 & 0x7FFFFFFF;
        }
        v19 = 24 * v15;
        *(_DWORD *)(v17 + v19) = v18 | 0x80000000;
        v20 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + v19) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v15) & 0x80000000 | *(_DWORD *)(v20 + 4 * v14);
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v15 + 8) = v10;
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v15 + 16) = *(_QWORD *)(v9 + 16);
        *(_DWORD *)(v20 + 4 * v14) = v15;
        ++*(_DWORD *)(a1 + 28);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 24;
    }
  }
}

void re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_167, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          v8 = v6 + v4;
          *(_DWORD *)v8 = v7 & 0x7FFFFFFF;
          *(_QWORD *)(v8 + 8) = 0;
          *(_QWORD *)(v8 + 16) = 0;
          v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 24;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v9 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v9;
  }
}

void re::MaterialDefinition::~MaterialDefinition(re::MaterialDefinition *this)
{
  re::MaterialDefinition::~MaterialDefinition(this);
  JUMPOUT(0x2276933B8);
}

{
  double v2;
  double v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24ED73B48;
  re::MaterialDefinition::deinit(this);
  re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)this + 172, v2);
  re::MaterialParameterTable::~MaterialParameterTable((re::MaterialDefinition *)((char *)this + 248));
  re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)this + 184);
  v3 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 17);
  v4 = *((_QWORD *)this + 14);
  if (v4)
  {
    if (*((_QWORD *)this + 15))
    {
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 16), v3);
      *((_QWORD *)this + 15) = 0;
      *((_QWORD *)this + 16) = 0;
    }
    *((_QWORD *)this + 14) = 0;
  }
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 8);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::SharedPersistentObject<re::MaterialDefinition>::allocator(re *a1)
{
  return re::globalAllocators(a1)[2];
}

void re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        v9 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)(v8 + v6 + 8) ^ (*(_QWORD *)(v8 + v6 + 8) >> 30));
        v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsCopy(a1, v10 % *(unsigned int *)(a1 + 24), v10, (_QWORD *)(v8 + v6 + 8), (re::DynamicString *)(v8 + v6 + 16));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 48;
    }
  }
}

void re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  __n128 *v11;
  int v12;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_167, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = 0uLL;
      do
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_DWORD *)(v7 + v4);
        if (v8 < 0)
        {
          v9 = v8 & 0x7FFFFFFF;
          v10 = v7 + v4;
          *(_DWORD *)v10 = v9;
          *(_QWORD *)(v10 + 8) = 0;
          v11 = (__n128 *)(v7 + v4 + 16);
          if (v11->n128_u64[0])
          {
            if ((*(_BYTE *)(v10 + 24) & 1) != 0)
            {
              (*(void (**)(unint64_t, _QWORD, __n128))(*(_QWORD *)v11->n128_u64[0] + 40))(v11->n128_u64[0], *(_QWORD *)(v7 + v4 + 32), v6);
              v6 = 0uLL;
            }
            *v11 = v6;
            v11[1] = v6;
            v3 = *(unsigned int *)(a1 + 32);
          }
        }
        ++v5;
        v4 += 48;
      }
      while (v5 < v3);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v12 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v12;
  }
}

uint64_t re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, re::DynamicString *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 48 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 48 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 48 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8) = *a4;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 16), a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 48 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 48 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 48 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v8 + 8) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + 48 * v8;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  v15 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(v14 + 16) = *(_QWORD *)a5;
  *(_QWORD *)(v14 + 24) = v15;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v16 = *(_QWORD *)(v14 + 32);
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v16;
  *(_BYTE *)(v14 + 40) = *(_BYTE *)(a5 + 24);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  signed int v13;
  _BYTE v14[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v14, 0, 36);
      *(_QWORD *)&v14[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v14, v4, a2);
      v5 = *(_OWORD *)v14;
      *(_OWORD *)v14 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v14[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v14[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v14[24];
      *(_OWORD *)&v14[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v14[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = (unint64_t *)(v7 + 8);
        do
        {
          if ((*(_DWORD *)(v12 - 1) & 0x80000000) != 0)
            re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *v12 % *(unsigned int *)(a1 + 24), *v12, v12, (uint64_t)(v12 + 1));
          ++v11;
          v12 += 6;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v14);
    }
  }
  else
  {
    if (a2)
      v13 = a2;
    else
      v13 = 3;
  }
}

void re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 48 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_167, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u)
      v5 = 3;
    else
      v5 = *(_DWORD *)(a2 + 28);
    re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
    re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (re::DynamicString *)(v8 + 16), v8 + 48);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 96;
    }
  }
}

void re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_164, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + v3);
        ++v4;
        v3 += 96;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 96 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 96 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 96 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 96 * v10 + 16), a4);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(*(_QWORD *)(a1 + 16) + 96 * v10 + 48, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

double re::make::shared::object<re::FunctionReflectionCache>@<D0>(re *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = re::globalAllocators(a1);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 184, 8);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_QWORD *)(v4 + 176) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(_QWORD *)v5 = &off_24ED73208;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 44) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v5 + 60) = 0x7FFFFFFFLL;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_DWORD *)(v5 + 96) = 0;
  *(_DWORD *)(v5 + 112) = 0;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *a2 = v5;
  return result;
}

void re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (re::DynamicString *)(v8 + 16), (_QWORD *)(v8 + 48));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 56;
    }
  }
}

void re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  unint64_t *v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::ConstantLocation,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(unint64_t **)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        do
        {
          if ((v6[1] & 0x80000000) != 0)
          {
            v14 = *v6;
            v15 = *(unsigned int *)(a1 + 24);
            v16 = *v6 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v12));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 56 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 56 * v17 + 16), (const re::DynamicString *)(v6 + 2));
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17 + 48) = v6[6];
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v16) = v17;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v6 += 7;
        }
        while (v11 < v10);
      }
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v22, *(double *)&v7);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

uint64_t re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, _QWORD *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::TechniqueDefinitionBuilder *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 56 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 16), a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 48) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_167, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + v3);
        ++v4;
        v3 += 120;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (re::DynamicString *)(v8 + 16), (uint64_t *)(v8 + 48));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 120;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 120 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 120 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 120 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 120 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 120 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 120 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 120 * v10 + 16), a4);
  v14 = *(_QWORD *)(a1 + 16) + 120 * v10;
  re::DynamicArray<re::DynamicString>::DynamicArray(v14 + 48, a5);
  re::DynamicString::DynamicString((re::DynamicString *)(v14 + 88), (const re::DynamicString *)(a5 + 5));
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::TechniqueDefinitionBuilder::~TechniqueDefinitionBuilder(re::TechniqueDefinitionBuilder *this)
{
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 79);
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 73);
  v2.n128_f64[0] = re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)this + 67);
  if (*((_BYTE *)this + 520))
    *((_QWORD *)this + 66) = 0;
  v3 = *((_QWORD *)this + 60);
  if (v3)
  {
    v4 = *((_QWORD *)this + 64);
    if (v4)
    {
      v5 = *((_QWORD *)this + 62);
      if (v5)
        bzero(*((void **)this + 64), 8 * v5);
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v3 + 40))(v3, v4, v2);
    }
    *((_QWORD *)this + 64) = 0;
    *((_QWORD *)this + 61) = 0;
    *((_QWORD *)this + 62) = 0;
    *((_QWORD *)this + 60) = 0;
    ++*((_DWORD *)this + 126);
  }
  v6 = *((_QWORD *)this + 55);
  if (v6)
  {
    if (*((_QWORD *)this + 59))
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v6 + 40))(v6, v2);
    *((_QWORD *)this + 59) = 0;
    *((_QWORD *)this + 56) = 0;
    *((_QWORD *)this + 57) = 0;
    *((_QWORD *)this + 55) = 0;
    ++*((_DWORD *)this + 116);
  }
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)this + 376);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)this + 336);
  v7 = *((_QWORD *)this + 37);
  if (v7)
  {
    if (*((_QWORD *)this + 41))
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *((_QWORD *)this + 41) = 0;
    *((_QWORD *)this + 38) = 0;
    *((_QWORD *)this + 39) = 0;
    *((_QWORD *)this + 37) = 0;
    ++*((_DWORD *)this + 80);
  }
  v8 = re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)this + 24);
  v9 = *((_QWORD *)this + 18);
  if (v9)
  {
    if ((*((_BYTE *)this + 152) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v9 + 40))(v9, *((_QWORD *)this + 20), v8);
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
  }
  v10.n128_f64[0] = re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)this + 11);
  v11 = *((_QWORD *)this + 5);
  if (v11)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v11 + 40))(v11, *((_QWORD *)this + 7), v10.n128_f64[0]);
    v10 = 0uLL;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  if (*(_QWORD *)this)
  {
    if ((*((_BYTE *)this + 8) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, __n128))(**(_QWORD **)this + 40))(*(_QWORD *)this, *((_QWORD *)this + 2), v10);
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
}

_QWORD *re::FixedArray<re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (_QWORD *)result[2];
      v5 = 40 * v2;
      do
      {
        re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::deinit(v4);
        v4 += 5;
        v5 -= 40;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

void re::FixedArray<re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>>::init<decltype(nullptr)>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  v3 = a3;
  if (a3 >= 0x666666666666667)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, a3);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
  v5 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40 * a3, 8);
  a1[2] = v5;
  if (!v5)
    goto LABEL_13;
  for (i = v5; --v3; i += 40)
  {
    v8[0] = 0;
    re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::DynamicOverflowArray(i, v8, 1uLL);
    if (v8[0])

  }
  v8[0] = 0;
  re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::DynamicOverflowArray(i, v8, 1uLL);
  if (v8[0])

}

uint64_t re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::DynamicOverflowArray(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t *v4;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = (uint64_t *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  if (a3)
  {
    re::DynamicOverflowArray<re::SharedPtr<re::ResourceFetchManager::Request>,1ul>::setCapacity((uint64_t *)a1, a3);
    v7 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v7 + 2;
    v8 = *(_QWORD *)(a1 + 8);
    if (v8 == -1)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v8 >= a3)
    {
      if ((v7 & 1) == 0)
        v4 = *(uint64_t **)(a1 + 32);
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,0>(a2, &a2[a3], v4);
    }
    else
    {
      re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::growCapacity(a1, a3);
      v9 = *(_QWORD *)(a1 + 8);
      v10 = &a2[v9];
      v11 = v4;
      if ((*(_BYTE *)(a1 + 16) & 1) == 0)
        v11 = *(uint64_t **)(a1 + 32);
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,0>(a2, &a2[v9], v11);
      if ((*(_BYTE *)(a1 + 16) & 1) == 0)
        v4 = *(uint64_t **)(a1 + 32);
      if (v9 != a3)
      {
        v12 = &v4[*(_QWORD *)(a1 + 8)];
        v13 = 8 * a3 - 8 * v9;
        do
        {
          v14 = *v10;
          *v12 = *v10;
          if (v14)
            v15 = (id)(v14 + 8);
          ++v10;
          ++v12;
          v13 -= 8;
        }
        while (v13);
      }
      *(_QWORD *)(a1 + 8) = a3;
    }
    *(_DWORD *)(a1 + 16) += 2;
  }
  return a1;
}

uint64_t re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::growCapacity(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = a2;
  v3 = result;
  if (!*(_QWORD *)result)
  {
    result = re::DynamicOverflowArray<re::SharedPtr<re::ResourceFetchManager::Request>,1ul>::setCapacity((uint64_t *)v3, v2);
    *(_DWORD *)(v3 + 16) += 2;
    return result;
  }
  if ((*(_BYTE *)(result + 16) & 1) != 0)
  {
    if (a2 <= 1)
      return result;
    v5 = 2;
  }
  else
  {
    v4 = *(_QWORD *)(result + 24);
    if (v4 >= a2)
      return result;
    v5 = 2 * v4;
  }
  if (v5 > a2)
    a2 = v5;
  return re::DynamicOverflowArray<re::SharedPtr<re::ResourceFetchManager::Request>,1ul>::setCapacity((uint64_t *)result, a2);
}

_QWORD *re::FixedArray<re::AttributeArgument>::FixedArray(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    re::FixedArray<re::AttributeArgument>::init<>((uint64_t)a1, v4, *(_QWORD *)(a2 + 8));
    re::FixedArray<re::AttributeArgument>::copy((uint64_t)a1, a2);
  }
  return a1;
}

uint64_t re::FixedArray<re::AttributeArgument>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a2 + 8))
    return std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::AttributeArgument *,re::AttributeArgument *,re::AttributeArgument *,0>(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 16) + 24 * v2, *(_QWORD *)(a1 + 16));
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::AttributeArgument *,re::AttributeArgument *,re::AttributeArgument *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::StringID::operator=((unint64_t *)a3, (uint64_t *)v4);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(v4 + 16);
      v4 += 24;
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

double re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  if (*(_QWORD *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        v4 = 72 * v3;
        v5 = v2 + 8;
        do
        {
          re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit(v5);
          v5 += 72;
          v4 -= 72;
        }
        while (v4);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (*(_QWORD *)a1)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56));
      *(_QWORD *)a1 = 0;
    }
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _WORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  v15 = *(_QWORD *)(a1 + 8);
  *(_WORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v15 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _BYTE *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  v15 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v15 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u)
      v5 = 3;
    else
      v5 = *(_DWORD *)(a2 + 28);
    re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(a1, v4, v5);
    re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        v9 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v8 + v6 + 8) >> 31) ^ (*(_QWORD *)(v8 + v6 + 8) >> 1));
        v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v10 % *(unsigned int *)(a1 + 24), v10, (StringID *)(v8 + v6 + 8), (_WORD *)(v8 + v6 + 24));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

void re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_167, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 32;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u)
      v5 = 3;
    else
      v5 = *(_DWORD *)(a2 + 28);
    re::HashTable<unsigned long,re::MaterialTechniqueVariant *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(a1, v4, v5);
    re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        v9 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v8 + v6 + 8) >> 31) ^ (*(_QWORD *)(v8 + v6 + 8) >> 1));
        v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v10 % *(unsigned int *)(a1 + 24), v10, (StringID *)(v8 + v6 + 8), (_BYTE *)(v8 + v6 + 24));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

void re::DynamicOverflowArray<re::SharedPtr<re::CachedPipelineState>,1ul>::deinit(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;

  if (*a1)
  {
    v2 = a1[1];
    if (v2)
    {
      if ((a1[2] & 1) != 0)
        v3 = a1 + 3;
      else
        v3 = (_QWORD *)a1[4];
      v4 = 8 * v2;
      do
      {
        if (*v3)
        {

          *v3 = 0;
        }
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    v5 = *((_DWORD *)a1 + 4);
    if ((v5 & 1) == 0)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, a1[4]);
      v5 = *((_DWORD *)a1 + 4);
    }
    *a1 = 0;
    a1[1] = 0;
    *((_DWORD *)a1 + 4) = (v5 | 1) + 2;
  }
}

_QWORD *re::DynamicArray<re::TechniqueFunctionConstant>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD **v5;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = (_QWORD *)(result[4] + 40);
    v4 = v2 << 6;
    do
    {
      v5 = (_QWORD **)(v3 - 5);
      if (*v3)
      {
        if (v3[1])
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v3[2]);
          v3[1] = 0;
          v3[2] = 0;
        }
        *v3 = 0;
      }
      result = *v5;
      if (*v5)
      {
        if ((*(_BYTE *)(v3 - 4) & 1) != 0)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 40))(result, *(v3 - 3));
        *(_OWORD *)v5 = 0u;
        *(_OWORD *)(v3 - 3) = 0u;
      }
      v3 += 8;
      v4 -= 64;
    }
    while (v4);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::TechniqueFunctionConstant>::resize(_anonymous_namespace_ *result, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = a2 << 6;
    v9 = a2;
    do
    {
      v10 = *((_QWORD *)v3 + 4);
      v11 = v10 + v8;
      v12 = *(_QWORD *)(v10 + v8 + 40);
      if (v12)
      {
        if (*(_QWORD *)(v11 + 48))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)(v10 + v8 + 56));
          *(_QWORD *)(v11 + 48) = 0;
          *(_QWORD *)(v11 + 56) = 0;
        }
        *(_QWORD *)(v11 + 40) = 0;
      }
      result = *(_anonymous_namespace_ **)v11;
      if (*(_QWORD *)v11)
      {
        if ((*(_BYTE *)(v10 + v8 + 8) & 1) != 0)
          result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v10 + v8 + 16));
        *(_OWORD *)v11 = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
      }
      ++v9;
      v8 += 64;
    }
    while (v9 < *((_QWORD *)v3 + 2));
  }
  else
  {
    if (*((_QWORD *)result + 1) < a2)
    {
      result = (_anonymous_namespace_ *)re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(result, a2);
      v4 = *((_QWORD *)v3 + 2);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = v4 << 6;
      do
      {
        v7 = *((_QWORD *)v3 + 4) + v6;
        *(_OWORD *)v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        result = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v7, 0);
        *(_DWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 56) = 0;
        v6 += 64;
        *(_QWORD *)(v7 + 40) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *((_QWORD *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t *re::DynamicArray<re::TechniqueFunctionConstant>::copy(uint64_t *this, unint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  re::DynamicString *v15;
  uint64_t v16;
  __int128 v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return this;
  v6 = this;
  v7 = this[2];
  if (v7 + 1 <= a2)
  {
    v16 = 0;
    memset(v18, 0, sizeof(v18));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v17) = 136315906;
    *(_QWORD *)((char *)&v17 + 4) = "copy";
    WORD6(v17) = 1024;
    HIWORD(v17) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, a2, v4, v16, v17);
    _os_crash();
    __break(1u);
  }
  v4 = a4;
  v8 = a2 + a4;
  if (__CFADD__(a2, a4))
    goto LABEL_13;
  if (v7 >= v8)
  {
    this = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *>((uint64_t)v18, a3, &a3[8 * a4], this[4] + (a2 << 6));
  }
  else
  {
    re::DynamicArray<re::TechniqueFunctionConstant>::growCapacity(this, a2 + a4);
    v10 = v6[2];
    v11 = &a3[8 * (v10 - a2)];
    this = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *>((uint64_t)v18, a3, v11, v6[4] + (a2 << 6));
    if (v10 - a2 != v4)
    {
      v12 = 0;
      v13 = v6[4] + (v6[2] << 6);
      v14 = (v4 << 6) + (a2 << 6) - (v10 << 6);
      do
      {
        v15 = re::DynamicString::DynamicString((re::DynamicString *)(v13 + v12), (const re::DynamicString *)&v11[v12 / 8]);
        *((_DWORD *)v15 + 8) = v11[v12 / 8 + 4];
        this = re::FixedArray<unsigned char>::FixedArray((_QWORD *)v15 + 5, &v11[v12 / 8 + 5]);
        v12 += 64;
      }
      while (v14 != v12);
    }
    v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

uint64_t re::Result<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>,re::DynamicString>::~Result(uint64_t a1)
{
  _OWORD *v2;

  v2 = (_OWORD *)(a1 + 8);
  if (*(_BYTE *)a1)
  {
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(a1 + 8));
  }
  else if (*(_QWORD *)v2)
  {
    if ((*(_BYTE *)(a1 + 16) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v2 + 40))(*(_QWORD *)v2, *(_QWORD *)(a1 + 24));
    *v2 = 0u;
    v2[1] = 0u;
  }
  return a1;
}

void re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        v9 = v8 + v6;
        v10 = *(_QWORD *)(v8 + v6 + 8);
        v11 = *(unsigned int *)(a1 + 24);
        v12 = v10 % v11;
        v13 = *(unsigned int *)(a1 + 36);
        if ((_DWORD)v13 == 0x7FFFFFFF)
        {
          v13 = *(unsigned int *)(a1 + 32);
          v14 = v13;
          if ((_DWORD)v13 == (_DWORD)v11)
          {
            re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            v12 = v10 % *(unsigned int *)(a1 + 24);
            v14 = *(_DWORD *)(a1 + 32);
            v10 = *(_QWORD *)(v9 + 8);
          }
          *(_DWORD *)(a1 + 32) = v14 + 1;
          v15 = *(_QWORD *)(a1 + 16);
          v16 = *(_DWORD *)(v15 + 48 * v13);
        }
        else
        {
          v15 = *(_QWORD *)(a1 + 16);
          v16 = *(_DWORD *)(v15 + 48 * v13);
          *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
        }
        v17 = v9 + 16;
        v18 = 48 * v13;
        *(_DWORD *)(v15 + v18) = v16 | 0x80000000;
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + v18) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v13) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v12);
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v13 + 8) = v10;
        v19 = *(_QWORD *)(a1 + 16) + 48 * v13;
        re::FixedArray<unsigned int>::FixedArray((uint64_t *)(v19 + 16), v17);
        *(_BYTE *)(v19 + 40) = *(_BYTE *)(v8 + v6 + 40);
        *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v12) = v13;
        ++*(_DWORD *)(a1 + 28);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 48;
    }
  }
}

void re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_167, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::EntryWithoutHash::free((_QWORD *)(*(_QWORD *)(a1 + 16) + v3));
        ++v4;
        v3 += 48;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void _ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_17MaterialTechniqueEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_17MaterialTechniqueEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED73BA8;
  return result;
}

void _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_17MaterialTechniqueEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE7__cloneEPNS0_6__baseISJ_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED73BA8;
}

re *_ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_17MaterialTechniqueEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EEclEOSF_(re *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  int v19;
  int v20;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result);
    v4 = *(unsigned int *)(v2 + 120);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = (int *)(*(_QWORD *)(v2 + 104) + 8);
      while (1)
      {
        v7 = *v6;
        v6 += 8;
        if (v7 < 0)
          break;
        if (v4 == ++v5)
        {
          LODWORD(v5) = *(_DWORD *)(v2 + 120);
          break;
        }
      }
    }
    else
    {
      LODWORD(v5) = 0;
    }
    v8 = v3[2];
    if ((_DWORD)v4 != (_DWORD)v5)
    {
      v9 = v5;
      do
      {
        v10 = *(_QWORD *)(v2 + 104) + 32 * v9;
        v13 = *(uint64_t **)(v10 + 24);
        v12 = (uint64_t **)(v10 + 24);
        v11 = v13;
        v14 = v13[1];
        if (!v14 || ((id)(v14 + 8), v11[1] = 0, (v11 = *v12) != 0))
        {
          v15 = re::globalAllocators((re *)v3)[2];
          v16 = v11[1];
          if (v16)
          {

            v11[1] = 0;
          }
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v11 + 45);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v11 + 39);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v11 + 33);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v11 + 27);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v11 + 21);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v11 + 15);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v11 + 9);
          v17.n128_f64[0] = re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::deinit(v11 + 3);
          v18 = v11[1];
          if (v18)
          {

            v11[1] = 0;
          }
          v3 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *, __n128))(*(_QWORD *)v15 + 40))(v15, v11, v17);
        }
        if (*(_DWORD *)(v2 + 120) <= (v5 + 1))
          v19 = v5 + 1;
        else
          v19 = *(_DWORD *)(v2 + 120);
        while (1)
        {
          v9 = (v5 + 1);
          if (v19 - 1 == (_DWORD)v5)
            break;
          LODWORD(v5) = v5 + 1;
          v20 = v9;
          if ((*(_DWORD *)(*(_QWORD *)(v2 + 104) + 32 * v9 + 8) & 0x80000000) != 0)
            goto LABEL_25;
        }
        v20 = v19;
LABEL_25:
        LODWORD(v5) = v20;
      }
      while ((_DWORD)v4 != v20);
    }
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(v2 + 88));
    if (*(_BYTE *)(v2 + 40))
      re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit((_QWORD *)(v2 + 48));
    re::FixedArray<re::TechniqueFunctionConstant>::deinit((_QWORD *)(v2 + 16));
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_17MaterialTechniqueEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_17MaterialTechniqueEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE11target_typeEv()
{
}

double re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          v8 = *(_QWORD *)(v6 + 88);
          if (v8)
          {

            *(_QWORD *)(v6 + 88) = 0;
            v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 96;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::PrimitiveRenderingContext::addShape<unsigned long>(uint64_t a1, unint64_t a2, _OWORD *a3, _OWORD *a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[4];
  int v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v7 = a1;
  v38 = *MEMORY[0x24BDAC8D0];
  v8 = re::PrimitiveRenderingDynamicGeometry::numShapes<unsigned long>(a1, a2);
  v9 = 0;
  v21 = 50462976;
  v23 = 0u;
  v24 = 0u;
  do
  {
    v10 = *((unsigned __int8 *)&v21 + v9);
    *((_QWORD *)&v23 + v9) = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(v7, a2, v10);
    v20[v9++] = re::PrimitiveRenderingDynamicGeometry::isAttributeVarying<unsigned long>(v7, a2, v10);
  }
  while (v9 != 4);
  re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(v7, a2, 0);
  v11 = *(_QWORD *)(v7 + 1032);
  if (v11 <= a2)
  {
    v22 = 0;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v25 = 136315906;
    v26 = "operator[]";
    v27 = 1024;
    v28 = 789;
    v29 = 2048;
    v30 = a2;
    v31 = 2048;
    v32 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  v12 = re::PrimitiveRenderingDynamicGeometry::append<re::PrimitiveRenderingShapeAttribute>((uint64_t)&v21, (uint64_t)&v23, (uint64_t)v20, *(_QWORD *)(*(_QWORD *)(v7 + 1048) + 8 * a2), *(re **)(v7 + 1192));
  v9 = *(_QWORD *)(v7 + 1032);
  if (v9 <= a2)
  {
LABEL_13:
    v22 = 0;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v25 = 136315906;
    v26 = "operator[]";
    v27 = 1024;
    v28 = 789;
    v29 = 2048;
    v30 = a2;
    v31 = 2048;
    v32 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_14:
    v22 = 0;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v25 = 136315906;
    v26 = "operator[]";
    v27 = 1024;
    v28 = 789;
    v29 = 2048;
    v30 = a2;
    v31 = 2048;
    v32 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = v12;
  *(_QWORD *)(*(_QWORD *)(v7 + 1048) + 8 * a2) = v12;
  v7 = *(_QWORD *)(v7 + 1032);
  if (v7 <= a2)
    goto LABEL_14;
  if (v12 == 1)
  {
    if (v20[2])
      v13 = re::fill<re::Vector3<float>,re::PrimitiveRenderingShapeAttribute>(*(_QWORD *)(v24 + 32) + 32 * *(_QWORD *)(v24 + 16) - 32, 2);
    if (v20[3])
      re::fill<re::Vector4<float>,re::PrimitiveRenderingShapeAttribute>(*(_QWORD *)(*((_QWORD *)&v24 + 1) + 32) + 32 * *(_QWORD *)(*((_QWORD *)&v24 + 1) + 16) - 32, 3);
  }
  v15 = *(_QWORD *)(v23 + 32) + 32 * *(_QWORD *)(v23 + 16);
  v16 = (char *)objc_msgSend(**(id **)(v15 - 8), sel_contents, v13) + *(_QWORD *)(v15 - 24);
  v17 = 16 * v14 - 16;
  *(_OWORD *)&v16[v17] = *a3;
  v18 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 32) + 32 * *(_QWORD *)(*((_QWORD *)&v23 + 1) + 16);
  *(_OWORD *)((char *)objc_msgSend(**(id **)(v18 - 8), sel_contents) + *(_QWORD *)(v18 - 24) + v17) = *a4;
  return v8;
}

