void re::ecs2::VideoPlayerComponentHelper::impl::regenerateScreenMesh(uint64_t a1, _QWORD *a2, uint64_t a3, re::AssetManager *a4, uint64_t a5, int a6, float a7)
{
  float v9;
  re *v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t v17;
  float v18;
  re::ecs2::EntityComponentCollection *v19;
  _BYTE *v20;
  float32x4_t v26;
  re::VideoDefaults *v27;
  _QWORD *v28;
  re *v29;
  re *v30;
  NSObject *v31;
  float v32;
  uint64_t v33;
  NSObject *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  NSObject *v38;
  uint64_t v39;
  const re::AssetHandle *v40;
  uint64_t v41;
  re *v42;
  int32x2_t v43;
  int32x2_t v44;
  NSObject *v45;
  uint64_t v46;
  os_unfair_lock_s *v47;
  NSObject *v48;
  uint64_t v49;
  float v50;
  re::VideoDefaults *v51;
  float v52;
  re::VideoDefaults *v53;
  re *v54;
  float v55;
  re *v56;
  _QWORD *v57;
  NSObject *v58;
  int v59;
  double v60;
  NSObject *v61;
  const char *v62;
  NSObject *v63;
  NSObject *v64;
  _BOOL8 v65;
  NSObject *v66;
  NSObject *v67;
  double v68;
  double v69;
  double v70;
  NSObject *v71;
  NSObject *v72;
  int32x2_t v73;
  int32x2_t v74;
  float v75;
  float v76;
  float32x4_t v77;
  uint64_t v78[3];
  uint64_t v79[3];
  uint8_t buf[4];
  _BYTE v81[18];
  __int16 v82;
  __int128 v83;
  _DWORD v84[2];
  uint8_t v85[4];
  int v86;
  os_unfair_lock_s *v87;
  uint64_t v88;

  v9 = *((float *)&a5 + 1);
  v88 = *MEMORY[0x24BDAC8D0];
  LODWORD(v76) = a5;
  v14 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)a1);
  if ((_DWORD)v14)
  {
    v58 = *re::videoLogObjects(v14);
    v14 = (re *)os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v14)
    {
      v59 = *(unsigned __int8 *)(a1 + 4226);
      v60 = *(float *)(a1 + 40);
      *(_DWORD *)buf = 134219008;
      *(double *)v81 = v76;
      *(_WORD *)&v81[8] = 2048;
      *(double *)&v81[10] = a7;
      v82 = 1024;
      LODWORD(v83) = a6;
      WORD2(v83) = 2048;
      *(double *)((char *)&v83 + 6) = v60;
      HIWORD(v83) = 1024;
      v84[0] = v59;
      _os_log_impl(&dword_224FE9000, v58, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] regenerateScreenMesh: aspectRatio: %f, cornerRadiusInPts: %f, customUV: %d, m_currentVideoEntityScaleMax: %f, m_isScreenDeferAspectRatioTransitionToApp: %d", buf, 0x2Cu);
    }
  }
  if (a2)
  {
    v15 = a2[3];
    if (v15)
    {
      if ((*(_BYTE *)(v15 + 288) & 0x80) == 0)
      {
        v16 = *(float32x4_t **)(v15 + 240);
        if (v16)
        {
          v17 = a2[30];
          if (v17)
          {
            v18 = v9;
            v19 = (re::ecs2::EntityComponentCollection *)(a2 + 4);
            v20 = (_BYTE *)(a1 + 4226);
            v75 = v18;
            if (*(_BYTE *)(a1 + 4226))
            {
              if (fminf(fminf(v16[2].f32[0], v16[2].f32[2]), v16[2].f32[1]) > 0.0)
              {
                __asm { FMOV            V1.4S, #1.0 }
                v26 = vdivq_f32(_Q1, v16[2]);
                if (*(_QWORD *)(v17 + 16))
                {
                  v77 = v26;
                  v27 = (re::VideoDefaults *)re::BindPoint::baseValueUntyped((re::BindPoint *)(v17 + 80));
                  v26 = v77;
                }
                else
                {
                  v27 = (re::VideoDefaults *)(v17 + 32);
                }
                *(float32x4_t *)v27 = v26;
                v76 = v16[2].f32[0];
                v75 = v16[2].f32[1];
                v29 = (re *)re::VideoDefaults::logEnabled(v27);
                if ((_DWORD)v29)
                {
                  v64 = *re::videoLogObjects(v29);
                  v65 = os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT);
                  if (v65)
                  {
                    *(_DWORD *)buf = 134218240;
                    *(double *)v81 = v76;
                    *(_WORD *)&v81[8] = 2048;
                    *(double *)&v81[10] = v75;
                    _os_log_impl(&dword_224FE9000, v64, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] new mesh size: %f, %f", buf, 0x16u);
                  }
                  v66 = *re::videoLogObjects((re *)v65);
                  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
                  {
                    v67 = v66;
                    v68 = *(float *)(v17 + 32);
                    v69 = *(float *)(v17 + 36);
                    v70 = *(float *)(v17 + 40);
                    *(_DWORD *)buf = 134218496;
                    *(double *)v81 = v68;
                    *(_WORD *)&v81[8] = 2048;
                    *(double *)&v81[10] = v69;
                    v82 = 2048;
                    *(double *)&v83 = v70;
                    _os_log_impl(&dword_224FE9000, v67, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] screen entity local scale: %f, %f, %f", buf, 0x20u);

                  }
                  v20 = (_BYTE *)(a1 + 4226);
                }
              }
            }
            else
            {
              if (*(_QWORD *)(v17 + 16))
                v28 = (_QWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)(v17 + 80));
              else
                v28 = (_QWORD *)(v17 + 32);
              *v28 = 0x3F8000003F800000;
              v28[1] = 1065353216;
            }
            v30 = (re *)re::ecs2::Component::markDirty((_QWORD *)v17);
            v31 = *re::videoLogObjects(v30);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_224FE9000, v31, OS_LOG_TYPE_ERROR, "[ScreenAnimation] Radius in Meters is still 0 after it should be, or maybe the app doesn't have CA context. Defaulting back to one to hopefully avoid possible UI issues", buf, 2u);
            }
            re::ecs2::VideoPlayerComponentHelper::impl::createPlaneAsset((re::ecs2::VideoPlayerComponentHelper::impl *)v79, (float32x2_t *)a1, v76, v75, a7 * 0.001, (uint64_t)a4, a6);
            re::AssetHandle::loadNow(v79[1], 0);
            re::ecs2::buildCollisionShapeAssetHandle((re::ecs2 *)v78, a4, v76, v75, v32);
            re::AssetHandle::loadNow(v78[1], 0);
            v33 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v33)
            {
              *(_QWORD *)(v33 + 32) = __PAIR64__(LODWORD(v75), LODWORD(v76));
            }
            else
            {
              v34 = *re::videoLogObjects(0);
              v33 = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
              if ((_DWORD)v33)
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_224FE9000, v34, OS_LOG_TYPE_ERROR, "[ScreenAnimation] Can't update shadowProxyComponent as it is nil for screenEntity", buf, 2u);
              }
            }
            v35 = (_QWORD *)a2[22];
            if (!v35)
            {
              v63 = *re::videoLogObjects((re *)v33);
              if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)v81 = 1343;
                _os_log_error_impl(&dword_224FE9000, v63, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, meshComponent is nullptr", buf, 8u);
              }
              goto LABEL_46;
            }
            re::AssetHandle::operator=(v35 + 4, v79);
            re::ecs2::Component::markDirty(v35);
            v36 = re::ecs2::EntityComponentCollection::get(v19, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            if (v36)
            {
              v37 = (_QWORD *)v36;
              re::AssetHandle::operator=((uint64_t *)(v36 + 32), v78);
              re::ecs2::Component::markDirty(v37);
            }
            else
            {
              v38 = *re::videoLogObjects(0);
              if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_224FE9000, v38, OS_LOG_TYPE_ERROR, "[ScreenAnimation] Can't update colliderComponent as it is nil for screenEntity", buf, 2u);
              }
            }
            v39 = re::ecs2::EntityComponentCollection::get(v19, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v39)
            {
              v40 = (const re::AssetHandle *)(v39 + 168);
              v41 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)(v39 + 168));
              if (v41)
              {
                v42 = re::AssetHandle::AssetHandle((re::AssetHandle *)v85, v40);
                v43 = vdup_n_s32(0x21Cu);
                v43.i32[0] = (int)(float)((float)(v76 / v75) * 540.0);
                v74 = vmin_s32(vmax_s32(v43, 0), (int32x2_t)0x80000000800);
                v44.i32[1] = 24;
                v44.i32[0] = (int)(float)((float)(v76 / v75) * 24.0);
                v73 = vmin_s32(vmax_s32(v44, 0), (int32x2_t)0x10000000100);
                v45 = *re::videoLogObjects(v42);
                if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 134219264;
                  *(double *)v81 = v76;
                  *(_WORD *)&v81[8] = 2048;
                  *(double *)&v81[10] = v75;
                  v82 = 1024;
                  LODWORD(v83) = v74.i32[0];
                  WORD2(v83) = 1024;
                  *(_DWORD *)((char *)&v83 + 6) = v74.i32[1];
                  WORD5(v83) = 1024;
                  HIDWORD(v83) = v73.i32[0];
                  LOWORD(v84[0]) = 1024;
                  *(_DWORD *)((char *)v84 + 2) = v73.i32[1];
                  _os_log_impl(&dword_224FE9000, v45, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->regenerateScreenMesh:: Size (%f, %f) : Specular Dimensions == x=%i y=%i && Diffuse Dimensions == x=%i y=%i", buf, 0x2Eu);
                }
                re::AssetHandle::mutateAssetCommon((re::AssetHandle *)v85);
                ++v87[65]._os_unfair_lock_opaque;
                v46 = re::AssetHandle::asset<re::VideoAsset>((re::VideoAsset *)v85);
                if (v46)
                {
                  *(int32x2_t *)(v46 + 232) = v74;
                  *(int32x2_t *)(v46 + 216) = v73;
                  v47 = v87;
                  LOBYTE(v87[64]._os_unfair_lock_opaque) = 1;
                  re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v47);
                  re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize((re::internal::AssetEntry *)v87);
                }
                re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)v85);
                re::AssetHandle::~AssetHandle((re::AssetHandle *)v85);
                if (!a3)
                  goto LABEL_46;
                goto LABEL_38;
              }
            }
            else
            {
              v48 = *re::videoLogObjects(0);
              v41 = os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
              if ((_DWORD)v41)
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_224FE9000, v48, OS_LOG_TYPE_ERROR, "[ScreenAnimation] Can't update spillMap as videoComponent is nil for screenEntity", buf, 2u);
                if (a3)
                  goto LABEL_38;
                goto LABEL_46;
              }
            }
            if (a3)
            {
LABEL_38:
              if ((*(_BYTE *)(a3 + 288) & 8) != 0)
              {
                v49 = *(_QWORD *)(a3 + 24);
                if (v49)
                {
                  if ((*(_BYTE *)(v49 + 288) & 0x80) == 0 && !*v20)
                  {
                    v50 = v76 * re::VideoDefaults::glowSizeXModifier((re::VideoDefaults *)v41);
                    v52 = v75 * re::VideoDefaults::glowSizeYModifier(v51);
                    v54 = (re *)re::VideoDefaults::logEnabled(v53);
                    if ((_DWORD)v54)
                    {
                      v71 = *re::videoLogObjects(v54);
                      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 134218240;
                        *(double *)v81 = v50;
                        *(_WORD *)&v81[8] = 2048;
                        *(double *)&v81[10] = v52;
                        _os_log_impl(&dword_224FE9000, v71, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->regenerateScreenMesh ::          glowSize.x : %f, glowSize.y : %f ", buf, 0x16u);
                      }
                    }
                    re::ecs2::VideoPlayerComponentHelper::impl::createInvertedPlaneAsset((re::ecs2::VideoPlayerComponentHelper::impl *)buf, (re::AssetManager *)a1, v50, v52, v55, (uint64_t)a4);
                    re::AssetHandle::loadNow(*(uint64_t *)&v81[4], 0);
                    v57 = *(_QWORD **)(a3 + 176);
                    if (v57)
                    {
                      re::AssetHandle::operator=(v57 + 4, (uint64_t *)buf);
                      re::ecs2::Component::markDirty(v57);
                    }
                    else
                    {
                      v72 = *re::videoLogObjects(v56);
                      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)v85 = 67109120;
                        v86 = 1413;
                        _os_log_error_impl(&dword_224FE9000, v72, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, glowMeshComponent is nullptr", v85, 8u);
                      }
                    }
                    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
                  }
                }
              }
            }
LABEL_46:
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v78);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v79);
            return;
          }
          v61 = *re::videoLogObjects(v14);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v81 = 1292;
            v62 = "VideoPlayerComponentHelper line: %d, tfComp is nullptr";
            goto LABEL_56;
          }
        }
        else
        {
          v61 = *re::videoLogObjects(v14);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v81 = 1290;
            v62 = "VideoPlayerComponentHelper line: %d, videoEntityTFComp is nullptr";
LABEL_56:
            _os_log_error_impl(&dword_224FE9000, v61, OS_LOG_TYPE_ERROR, v62, buf, 8u);
          }
        }
      }
    }
  }
}

void re::ecs2::VideoPlayerComponentHelper::impl::createPlaneAsset(re::ecs2::VideoPlayerComponentHelper::impl *this, float32x2_t *a2, float a3, float a4, float a5, uint64_t a6, int a7)
{
  uint64_t v7;
  re *v13;
  re::GeomMesh *v19;
  re::VideoDefaults *v20;
  unsigned int v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float32x2_t v25;
  re *v26;
  re::GeomAttribute *v27;
  NSObject *v28;
  int v29;
  double v30;
  double v31;
  NSObject *v32;
  double v33;
  uint64_t v34;
  __int16 v35;
  __int128 v36;
  float v37;
  float v38;
  __int16 v39;
  char v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t buf[4];
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  int v59;
  const char *v60;
  __int16 v61;
  int v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  _OWORD v67[5];
  uint64_t v68;

  LODWORD(v7) = a7;
  v68 = *MEMORY[0x24BDAC8D0];
  v13 = (re *)re::VideoDefaults::logEnabled(this);
  if ((_DWORD)v13)
    goto LABEL_23;
  while (1)
  {
    re::GeomMesh::GeomMesh((re::GeomMesh *)buf, 0);
    v34 = 0x3000100010001;
    v35 = 4;
    v39 = 257;
    v40 = 0;
    __asm { FMOV            V0.2S, #1.0 }
    v41 = _D0;
    v42 = 1065353216;
    v43 = 0;
    v37 = a3;
    v38 = a4;
    v36 = xmmword_2261206A0;
    if (a5 == 0.0 || a5 > 0.0 && ((float)(a5 + a5) < a3 ? (_NF = (float)(a5 + a5) < a4) : (_NF = 0), _NF))
    {
      *(float *)&v36 = a5;
      HIWORD(v34) = 16;
    }
    re::buildPlatterWithRoundedCorners((unsigned int *)buf, (unsigned __int16 *)&v34);
    if (!(_DWORD)v7 || a2[4].f32[1] <= 0.0)
      break;
    v7 = *(unsigned int *)((char *)&v48 + 2);
    v20 = (re::VideoDefaults *)re::modifyVertexUVs((re *)buf, v19);
    if (a2[528].i8[2])
      a3 = a2[4].f32[0];
    v22 = a3 / a2[4].f32[1];
    a2[797].f32[0] = v22;
    if (v22 > 0.99 && v22 < 1.01)
    {
      a2[797].i32[0] = 1065353216;
      a2[795] = 0;
      a2[796] = (float32x2_t)0x3F8000003F800000;
    }
    if (!(_DWORD)v7)
    {
LABEL_20:
      v26 = (re *)re::VideoDefaults::logEnabled(v20);
      if ((v26 & 1) != 0)
      {
        v32 = *re::videoLogObjects(v26);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          v33 = a2[797].f32[0];
          LODWORD(v67[0]) = 134217984;
          *(double *)((char *)v67 + 4) = v33;
          _os_log_impl(&dword_224FE9000, v32, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] createPlaneAsset with uScale: %f", (uint8_t *)v67, 0xCu);
        }
      }
      break;
    }
    v23 = v21;
    v24 = v21;
    while (v24)
    {
      v25.f32[0] = (*(float *)v20 + -0.5) * a2[797].f32[0] + 0.5;
      v25.i32[1] = *((_DWORD *)v20 + 1);
      *(float32x2_t *)v20 = v25;
      v20 = (re::VideoDefaults *)((char *)v20 + 8);
      a2[795] = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(a2[795], v25), (int8x8_t)v25, (int8x8_t)a2[795]);
      a2[796] = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v25, a2[796]), (int8x8_t)v25, (int8x8_t)a2[796]);
      --v24;
      if (!--v7)
        goto LABEL_20;
    }
    v44 = 0;
    memset(v67, 0, sizeof(v67));
    a6 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v59 = 136315906;
    v60 = "operator[]";
    v61 = 1024;
    v62 = 609;
    v63 = 2048;
    v64 = v23;
    v65 = 2048;
    v66 = v23;
    _os_log_send_and_compose_impl();
    v13 = (re *)_os_crash_msg();
    __break(1u);
LABEL_23:
    v28 = *re::videoLogObjects(v13);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      v29 = a2[528].u8[2];
      v30 = a2[4].f32[0];
      v31 = a2[4].f32[1];
      *(_DWORD *)buf = 134219520;
      v46 = a3;
      v47 = 2048;
      v48 = a4;
      v49 = 2048;
      v50 = a5;
      v51 = 1024;
      v52 = v7;
      v53 = 1024;
      v54 = v29;
      v55 = 2048;
      v56 = v30;
      v57 = 2048;
      v58 = v31;
      _os_log_impl(&dword_224FE9000, v28, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] createPlaneAsset: width: %f, height: %f, cornerRadius: %f, customUV: %d, m_isScreenDeferAspectRatioTransitionToApp: %d, m_currentVideoEntityScaleAspectRatio: %f, m_currentContentAspectRatio: %f", buf, 0x40u);
    }
  }
  re::AssetHelper::makeMeshMemoryAsset(a6, (_anonymous_namespace_ *)buf, 1, 0, 0);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)buf, v27);
}

void re::ecs2::VideoPlayerComponentHelper::impl::createInvertedPlaneAsset(re::ecs2::VideoPlayerComponentHelper::impl *this, re::AssetManager *a2, float a3, float a4, float a5, uint64_t a6)
{
  re *v10;
  uint64_t v16;
  re::GeomMesh *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  re::GeomAttribute *v22;
  NSObject *v23;
  int v24;
  double v25;
  double v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  __int16 v33;
  char v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  int v53;
  const char *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  re::AssetManager *v58;
  __int16 v59;
  re::AssetManager *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v10 = (re *)re::VideoDefaults::logEnabled(this);
  if ((_DWORD)v10)
    goto LABEL_8;
  while (1)
  {
    re::GeomMesh::GeomMesh((re::GeomMesh *)buf, 0);
    v28 = 4;
    v33 = 257;
    v34 = 0;
    __asm { FMOV            V0.2S, #1.0 }
    v35 = _D0;
    v36 = 1065353216;
    v37 = 0;
    v31 = a3;
    v32 = a4;
    v30 = 0;
    v29 = 0;
    v27 = 0x10000100010001;
    re::buildPlatterWithRoundedCorners((unsigned int *)buf, (unsigned __int16 *)&v27);
    v16 = *(unsigned int *)((char *)&v42 + 2);
    v18 = re::modifyVertexUVs((re *)buf, v17);
    if (!(_DWORD)v16)
      break;
    a2 = (re::AssetManager *)v19;
    v20 = v19;
    while (v20)
    {
      LODWORD(v21) = *(_DWORD *)v18;
      *((float *)&v21 + 1) = 1.0 - *(float *)(v18 + 4);
      *(_QWORD *)v18 = v21;
      v18 += 8;
      --v20;
      if (!--v16)
        goto LABEL_6;
    }
    v38 = 0;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    a6 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v53 = 136315906;
    v54 = "operator[]";
    v55 = 1024;
    v56 = 609;
    v57 = 2048;
    v58 = a2;
    v59 = 2048;
    v60 = a2;
    _os_log_send_and_compose_impl();
    v10 = (re *)_os_crash_msg();
    __break(1u);
LABEL_8:
    v23 = *re::videoLogObjects(v10);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = *((unsigned __int8 *)a2 + 4226);
      v25 = *((float *)a2 + 8);
      v26 = *((float *)a2 + 9);
      *(_DWORD *)buf = 134219520;
      v40 = a3;
      v41 = 2048;
      v42 = a4;
      v43 = 2048;
      v44 = 0;
      v45 = 1024;
      v46 = 0;
      v47 = 1024;
      v48 = v24;
      v49 = 2048;
      v50 = v25;
      v51 = 2048;
      v52 = v26;
      _os_log_impl(&dword_224FE9000, v23, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->createInvertedPlaneAsset :: width: %f, height: %f, cornerRadius: %f, customUV: %d, m_isScreenDeferAspectRatioTransitionToApp: %d, m_currentVideoEntityScaleAspectRatio: %f, m_currentContentAspectRatio: %f", buf, 0x40u);
    }
  }
LABEL_6:
  re::AssetHelper::makeMeshMemoryAsset(a6, (_anonymous_namespace_ *)buf, 1, 0, 0);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)buf, v22);
}

void vpc::ScreenMeshAnimationEngine::update(vpc::ScreenMeshAnimationEngine *this, float a2, double a3, __n128 a4)
{
  uint64_t v6;
  char v7;
  char *v8;
  void (****v9)(_QWORD);
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  void (***v19)(_QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;

  v6 = 0;
  v7 = 0;
  do
  {
    v8 = (char *)this + v6;
    if (*(_QWORD *)((char *)this + v6 + 48))
    {
      v9 = (void (****)(_QWORD))(v8 + 64);
      v10 = *((_QWORD *)v8 + 8);
      v11 = *(float *)(v10 + 32) + a2;
      *(float *)(v10 + 32) = v11;
      v13 = *(float *)(v10 + 8);
      v12 = *(float *)(v10 + 12);
      v14 = v12 + v13;
      if (v11 >= (float)(v12 + v13))
      {
        *(_BYTE *)(v10 + 37) = 1;
        a4.n128_u32[0] = 1.0;
      }
      else
      {
        a4.n128_u32[0] = 0;
        if (v12 > 0.0 && v11 > v13)
        {
          a4.n128_f32[0] = (float)(v11 - v13) / v12;
          if (!*(_BYTE *)(v10 + 36))
            *(_BYTE *)(v10 + 36) = 1;
        }
      }
      **(float **)(v10 + 24) = (*(float (**)(uint64_t, float, float, __n128))(*(_QWORD *)v10 + 16))(v10, *(float *)(v10 + 16), *(float *)(v10 + 20), a4);
      if (v11 >= v14)
      {
        v18 = *((_QWORD *)v8 + 6);
        if (!v18)
        {
          re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 0, 0);
          _os_crash();
          __break(1u);
LABEL_26:
          re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeStableAt", 555, 0, 0);
          _os_crash();
          __break(1u);
          return;
        }
        v19 = *v9;
        if (*v9)
        {
          v20 = re::globalAllocators(v16)[2];
          (**v19)(v19);
          (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v20 + 40))(v20, v19);
          v18 = *((_QWORD *)v8 + 6);
          if (!v18)
            goto LABEL_26;
        }
        v22 = v18 - 1;
        if (v18 != 1)
        {
          v23 = (char *)this + v6 + 72;
          if ((char *)this + 8 * v18 + v6 + 64 != v23)
            memmove(v8 + 64, v23, 8 * v18 - 8);
        }
        *((_QWORD *)v8 + 6) = v22;
        ++*(_DWORD *)((char *)this + v6 + 56);
      }
      v7 = 1;
    }
    v6 += 2064;
  }
  while (v6 != 4128);
  if ((v7 & 1) != 0)
  {
    v24 = *((_QWORD *)this + 4);
    if (v24)
    {
      v25 = *((_DWORD *)this + 10);
      v26 = *((_DWORD *)this + 11);
      v27 = v25;
      (*(void (**)(uint64_t, int *, int *))(*(_QWORD *)v24 + 16))(v24, &v27, &v26);
    }
  }
}

uint64_t vpc::ScreenMeshAnimationEngine::add(re *a1, unsigned int a2)
{
  uint64_t *v4;
  vpc::FloatSpringAnimation *v5;
  float *v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == 1)
  {
    v7 = re::globalAllocators(a1);
    v5 = (vpc::FloatSpringAnimation *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 48, 8);
    v6 = (float *)((char *)a1 + 44);
  }
  else
  {
    if (a2)
      return 0;
    v4 = re::globalAllocators(a1);
    v5 = (vpc::FloatSpringAnimation *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 48, 8);
    v6 = (float *)((char *)a1 + 40);
  }
  result = (uint64_t)vpc::FloatSpringAnimation::FloatSpringAnimation(v5, v6);
  if (result)
  {
    v10 = (uint64_t *)((char *)a1 + 2064 * a2 + 48);
    v11 = *v10;
    if ((unint64_t)*v10 >= 0x100)
    {
      re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
      result = _os_crash();
      __break(1u);
    }
    else
    {
      v12 = (uint64_t)a1 + 2064 * a2 + 48;
      *(_QWORD *)(v12 + 8 * v11 + 16) = result;
      *v10 = v11 + 1;
      ++*(_DWORD *)(v12 + 8);
    }
  }
  return result;
}

uint64_t vpc::FloatSpringAnimation::setSpringParam(uint64_t a1, float *a2)
{
  objc_msgSend(*(id *)(a1 + 40), "setMass:", *a2);
  objc_msgSend(*(id *)(a1 + 40), "setStiffness:", a2[1]);
  objc_msgSend(*(id *)(a1 + 40), "setDamping:", a2[2]);
  objc_msgSend(*(id *)(a1 + 40), "settlingDuration");
  return objc_msgSend(*(id *)(a1 + 40), "setDuration:");
}

void re::ecs2::VideoPlayerComponentHelper::impl::updateAudioSrcPosition(uint64_t a1, re::ecs2::Entity *a2)
{
  re *VideoAudioControlComponentUnderneathParent;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  re::ecs2::TransformComponent **v8;
  float32x4_t v9;
  re::ecs2::TransformComponent **v10;
  float32x4_t v11;
  uint32x4_t v12;
  uint32x4_t v13;
  re *v14;
  re::ecs2::TransformComponent **v15;
  float32x4_t v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint8_t buf[16];
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return;
  VideoAudioControlComponentUnderneathParent = (re *)re::ecs2::VideoAudioControlSystem::getVideoAudioControlComponentUnderneathParent((uint64_t)a2, a2);
  if (!VideoAudioControlComponentUnderneathParent)
    return;
  v5 = *((_QWORD *)VideoAudioControlComponentUnderneathParent + 2);
  if (!v5)
    return;
  v6 = *(_QWORD *)(v5 + 240);
  if (!v6)
  {
    v17 = *re::videoLogObjects(VideoAudioControlComponentUnderneathParent);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 1776;
    v18 = "VideoPlayerComponentHelper line: %d, audioTFComp is nullptr";
    goto LABEL_28;
  }
  v7 = *((_QWORD *)a2 + 30);
  if (!v7)
  {
    v17 = *re::videoLogObjects(VideoAudioControlComponentUnderneathParent);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 1778;
    v18 = "VideoPlayerComponentHelper line: %d, parentTFComp is nullptr";
LABEL_28:
    _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, v18, buf, 8u);
    return;
  }
  if (*(_BYTE *)(a1 + 2) == 1 || !*(_BYTE *)(a1 + 2) && *(_BYTE *)(a1 + 3) == 1)
  {
    v8 = *(re::ecs2::TransformComponent ***)(v6 + 16);
    if (v8)
    {
      re::ecs2::TransformComponent::worldSRT(v8, (const re::ecs2::Entity *)1, (uint64_t)buf);
    }
    else
    {
      v9 = *(float32x4_t *)(v6 + 48);
      *(_OWORD *)buf = *(_OWORD *)(v6 + 32);
      v24 = v9;
      v25 = *(float32x4_t *)(v6 + 64);
    }
    v10 = *(re::ecs2::TransformComponent ***)(v7 + 16);
    if (v10)
    {
      re::ecs2::TransformComponent::worldSRT(v10, (const re::ecs2::Entity *)1, (uint64_t)&v20);
    }
    else
    {
      v11 = *(float32x4_t *)(v7 + 48);
      v20 = *(float32x4_t *)(v7 + 32);
      v21 = v11;
      v22 = *(float32x4_t *)(v7 + 64);
    }
    v12 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)buf, v20));
    v12.i32[3] = v12.i32[2];
    if ((vmaxvq_u32(v12) & 0x80000000) != 0
      || (vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v24, v21))) & 0x80000000) != 0
      || (v13 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v25, v22)),
          v13.i32[3] = v13.i32[2],
          (vmaxvq_u32(v13) & 0x80000000) != 0))
    {
      v14 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v10);
      if ((_DWORD)v14)
      {
        v19 = *re::videoLogObjects(v14);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_224FE9000, v19, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->updateAudioSrcPosition :: Video :: Updating the AudioSrc's World SRT", buf, 2u);
        }
      }
      v15 = *(re::ecs2::TransformComponent ***)(v7 + 16);
      if (v15)
      {
        re::ecs2::TransformComponent::worldSRT(v15, (const re::ecs2::Entity *)1, (uint64_t)buf);
      }
      else
      {
        v16 = *(float32x4_t *)(v7 + 48);
        *(_OWORD *)buf = *(_OWORD *)(v7 + 32);
        v24 = v16;
        v25 = *(float32x4_t *)(v7 + 64);
      }
      re::ecs2::TransformComponent::setWorldSRT(v6, (uint64_t)buf, 0);
      re::ecs2::Component::markDirty((_QWORD *)v6);
    }
  }
}

void re::ecs2::VideoPlayerComponentHelper::impl::setVideoAssetContentInfo(re::VideoDefaults *a1, unsigned __int8 *a2)
{
  re *v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (re *)re::VideoDefaults::logEnabled(a1);
  if ((_DWORD)v4)
  {
    v7 = *re::videoLogObjects(v4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *a2;
      v9 = a2[1];
      v10[0] = 67109376;
      v10[1] = v8;
      v11 = 1024;
      v12 = v9;
      _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper::impl::VideoAssetContentInfo]: contentType is set to %d, stereoType is set to %d", (uint8_t *)v10, 0xEu);
    }
  }
  v5 = *((unsigned __int8 *)a1 + 2);
  v6 = *a2;
  if (v5 != v6)
  {
    *((_BYTE *)a1 + 3) = v5;
    *((_BYTE *)a1 + 2) = v6;
    *(_BYTE *)a1 = 1;
    v5 = v6;
  }
  if (!v5)
    *((_BYTE *)a1 + 1) = 0;
}

void re::ecs2::VideoPlayerComponentHelper::impl::handleEntitiesPosition(re::ecs2::VideoPlayerComponentHelper::impl *this, re::ecs2::Entity *a2)
{
  re *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  re::ecs2::TransformComponent **v19;
  float32x4_t v20;
  NSObject *v21;
  const char *v22;
  re::ecs2::TransformComponent **v23;
  float32x4_t v24;
  uint32x4_t v25;
  re *v26;
  re::ecs2::TransformComponent **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  re::ecs2::TransformComponent **v31;
  float32x4_t v32;
  re::ecs2::TransformComponent **v33;
  float32x4_t v34;
  uint32x4_t v35;
  re *v36;
  re::ecs2::TransformComponent **v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  float32x4_t v43;
  float32x4_t v44;
  uint8_t buf[48];
  __int128 v46;

  v4 = (re *)re::VideoDefaults::logEnabled(this);
  if ((_DWORD)v4)
  {
    v40 = *re::videoLogObjects(v4);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v40, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->handleEntitiesPosition :: Starting the process of updating the entity positions", buf, 2u);
    }
  }
  if (a2)
  {
    v5 = 2;
    if (!*((_BYTE *)this + 2))
      v5 = 3;
    if (*((_BYTE *)this + v5) == 1)
    {
      *(_QWORD *)buf = 0xF4664E2E6A44E25ALL;
      *(_QWORD *)&buf[8] = "__InternalVPC-Screen__";
      v6 = *((_QWORD *)a2 + 41);
      if (v6)
      {
        v7 = (uint64_t *)*((_QWORD *)a2 + 43);
        v8 = 8 * v6;
        while (1)
        {
          v9 = *v7;
          if ((*(_QWORD *)(*v7 + 272) ^ 0xF4664E2E6A44E25ALL) <= 1)
          {
            v10 = *(char **)(v9 + 280);
            if (v10 == "__InternalVPC-Screen__" || !strcmp(v10, "__InternalVPC-Screen__"))
              break;
          }
          ++v7;
          v8 -= 8;
          if (!v8)
            goto LABEL_12;
        }
      }
      else
      {
LABEL_12:
        v9 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      *(_QWORD *)buf = 0x931CC76C0DD179BALL;
      *(_QWORD *)&buf[8] = "__InternalVPC-ScreenGlowEntity__";
      v11 = *((_QWORD *)a2 + 41);
      if (v11)
      {
        v12 = (uint64_t *)*((_QWORD *)a2 + 43);
        v13 = 8 * v11;
        while (1)
        {
          v14 = *v12;
          if ((*(_QWORD *)(*v12 + 272) ^ 0x931CC76C0DD179BALL) <= 1)
          {
            v15 = *(char **)(v14 + 280);
            if (v15 == "__InternalVPC-ScreenGlowEntity__" || !strcmp(v15, "__InternalVPC-ScreenGlowEntity__"))
              break;
          }
          ++v12;
          v13 -= 8;
          if (!v13)
            goto LABEL_19;
        }
      }
      else
      {
LABEL_19:
        v14 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      if (v9)
      {
        v17 = *(_QWORD *)(v9 + 240);
        if (!v17)
        {
          v21 = *re::videoLogObjects(v16);
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            return;
          *(_WORD *)buf = 0;
          v22 = "[VideoPlayerComponentHelper]->handleEntitiesPosition :: Screen Transform Component is nullptr";
          goto LABEL_45;
        }
        v18 = *((_QWORD *)a2 + 30);
        if (!v18)
        {
          v21 = *re::videoLogObjects(v16);
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            return;
          *(_WORD *)buf = 0;
          v22 = "[VideoPlayerComponentHelper]->handleEntitiesPosition :: Screen Parent Transform Component is nullptr";
          goto LABEL_45;
        }
        v19 = *(re::ecs2::TransformComponent ***)(v17 + 16);
        if (v19)
        {
          re::ecs2::TransformComponent::worldMatrix4x4F(v19, (const re::ecs2::Entity *)1, buf);
          v20 = (float32x4_t)v46;
        }
        else
        {
          v20 = *(float32x4_t *)(v17 + 64);
        }
        v23 = *(re::ecs2::TransformComponent ***)(v18 + 16);
        if (v23)
        {
          v43 = v20;
          re::ecs2::TransformComponent::worldMatrix4x4F(v23, (const re::ecs2::Entity *)1, buf);
          v20 = v43;
          v24 = (float32x4_t)v46;
        }
        else
        {
          v24 = *(float32x4_t *)(v18 + 64);
        }
        v25 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v20, v24));
        v25.i32[3] = v25.i32[2];
        if ((vmaxvq_u32(v25) & 0x80000000) != 0)
        {
          v26 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v23);
          if ((_DWORD)v26)
          {
            v41 = *re::videoLogObjects(v26);
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_224FE9000, v41, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->handleEntitiesPosition :: Updating the ScreenEntitie's World Position", buf, 2u);
            }
          }
          v27 = *(re::ecs2::TransformComponent ***)(v18 + 16);
          if (v27)
          {
            re::ecs2::TransformComponent::worldMatrix4x4F(v27, (const re::ecs2::Entity *)1, buf);
            v29 = *((_QWORD *)&v46 + 1);
            v28 = v46;
          }
          else
          {
            v28 = *(_QWORD *)(v18 + 64);
            v29 = *(_QWORD *)(v18 + 72);
          }
          re::ecs2::TransformComponent::setWorldPosition((_QWORD *)v17, v28, v29);
          v23 = (re::ecs2::TransformComponent **)re::ecs2::Component::markDirty((_QWORD *)v17);
        }
        if (v14)
        {
          v30 = *(_QWORD *)(v14 + 240);
          if (v30)
          {
            v31 = *(re::ecs2::TransformComponent ***)(v30 + 16);
            if (v31)
            {
              re::ecs2::TransformComponent::worldMatrix4x4F(v31, (const re::ecs2::Entity *)1, buf);
              v32 = (float32x4_t)v46;
            }
            else
            {
              v32 = *(float32x4_t *)(v30 + 64);
            }
            v33 = *(re::ecs2::TransformComponent ***)(v18 + 16);
            if (v33)
            {
              v44 = v32;
              re::ecs2::TransformComponent::worldMatrix4x4F(v33, (const re::ecs2::Entity *)1, buf);
              v32 = v44;
              v34 = (float32x4_t)v46;
            }
            else
            {
              v34 = *(float32x4_t *)(v18 + 64);
            }
            v35 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v32, v34));
            v35.i32[3] = v35.i32[2];
            if ((vmaxvq_u32(v35) & 0x80000000) != 0)
            {
              v36 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v33);
              if ((_DWORD)v36)
              {
                v42 = *re::videoLogObjects(v36);
                if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_224FE9000, v42, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->handleEntitiesPosition :: Updating the Screen Glow Entity World Position", buf, 2u);
                }
              }
              v37 = *(re::ecs2::TransformComponent ***)(v18 + 16);
              if (v37)
              {
                re::ecs2::TransformComponent::worldMatrix4x4F(v37, (const re::ecs2::Entity *)1, buf);
                v39 = *((_QWORD *)&v46 + 1);
                v38 = v46;
              }
              else
              {
                v38 = *(_QWORD *)(v18 + 64);
                v39 = *(_QWORD *)(v18 + 72);
              }
              re::ecs2::TransformComponent::setWorldPosition((_QWORD *)v30, v38, v39);
              re::ecs2::Component::markDirty((_QWORD *)v30);
            }
            return;
          }
          v21 = *re::videoLogObjects((re *)v23);
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            return;
          *(_WORD *)buf = 0;
          v22 = "[VideoPlayerComponentHelper]->handleEntitiesPosition :: Screen Glow Entity Transform Component is nullptr";
LABEL_45:
          _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, v22, buf, 2u);
        }
      }
    }
  }
}

uint64_t re::ecs2::VideoPlayerComponentHelper::impl::isVideoEntityHierarchyValid(re::ecs2::VideoPlayerComponentHelper::impl *this, re::ecs2::Entity *a2)
{
  uint64_t result;

  result = re::ecs2::VideoPlayerComponentHelper::impl::hasVideoEntityHierarchy((uint64_t)this, (uint64_t)a2);
  if ((_DWORD)result)
    return re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) != 0;
  return result;
}

void re::ecs2::VideoPlayerComponentHelper::impl::addAttachmentsToVideoComponent(re::ecs2::VideoPlayerComponentHelper::impl *this, re::ecs2::VideoComponent *a2)
{
  _anonymous_namespace_ *v2;
  _anonymous_namespace_ *v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  StringID v11;
  _QWORD v12[2];
  StringID v13;
  _QWORD v14[2];
  StringID v15;
  _QWORD v16[2];
  StringID v17;
  _QWORD v18[2];
  StringID v19;
  _QWORD v20[2];
  StringID v21;
  _QWORD v22[2];
  StringID v23;
  _QWORD v24[2];
  StringID v25;
  _QWORD v26[2];
  StringID v27;
  _QWORD v28[2];

  v2 = this;
  *(_QWORD *)&v27.var0 = 0xFFB9D6614348A962;
  v27.var1 = "REVideoAttachmentChannelID1TexturePlane0";
  v28[0] = 0;
  v28[1] = &str_110;
  v2 = (_anonymous_namespace_ *)((char *)v2 + 80);
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v27);
  re::StringID::destroyString((re::StringID *)v28);
  re::StringID::destroyString((re::StringID *)&v27);
  *(_QWORD *)&v25.var0 = 0xFFB9D6614348A964;
  v25.var1 = "REVideoAttachmentChannelID1TexturePlane1";
  v26[0] = 0;
  v26[1] = &str_110;
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v25);
  re::StringID::destroyString((re::StringID *)v26);
  re::StringID::destroyString((re::StringID *)&v25);
  *(_QWORD *)&v23.var0 = 0xFFB9D6614348A966;
  v23.var1 = "REVideoAttachmentChannelID1TexturePlane2";
  v24[0] = 0;
  v24[1] = &str_110;
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v23);
  re::StringID::destroyString((re::StringID *)v24);
  re::StringID::destroyString((re::StringID *)&v23);
  *(_QWORD *)&v21.var0 = 0xA572F05B07043CA0;
  v21.var1 = "REVideoAttachmentChannelID2TexturePlane0";
  v22[0] = 0;
  v22[1] = &str_110;
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v21);
  re::StringID::destroyString((re::StringID *)v22);
  re::StringID::destroyString((re::StringID *)&v21);
  *(_QWORD *)&v19.var0 = 0xA572F05B07043CA2;
  v19.var1 = "REVideoAttachmentChannelID2TexturePlane1";
  v20[0] = 0;
  v20[1] = &str_110;
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v19);
  re::StringID::destroyString((re::StringID *)v20);
  re::StringID::destroyString((re::StringID *)&v19);
  *(_QWORD *)&v17.var0 = 0xA572F05B07043CA4;
  v17.var1 = "REVideoAttachmentChannelID2TexturePlane2";
  v18[0] = 0;
  v18[1] = &str_110;
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v17);
  re::StringID::destroyString((re::StringID *)v18);
  re::StringID::destroyString((re::StringID *)&v17);
  *(_QWORD *)&v15.var0 = 0x83807E236D5174B2;
  v15.var1 = "REVideoAttachmentConstantYCbCrMatrix";
  v16[0] = 0;
  v16[1] = &str_110;
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v15);
  re::StringID::destroyString((re::StringID *)v16);
  re::StringID::destroyString((re::StringID *)&v15);
  *(_QWORD *)&v13.var0 = 0x652E145D102D3908;
  v13.var1 = "REVideoAttachmentConstantImageFunction";
  v14[0] = 0;
  v14[1] = &str_110;
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v13);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)&v13);
  *(_QWORD *)&v11.var0 = 0x963DA5D75AB5D342;
  v11.var1 = "REVideoAttachmentSpill";
  v12[0] = 0;
  v12[1] = &str_110;
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v11);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)&v11);
}

re::ecs2::VideoPlayerComponentHelper *re::ecs2::VideoPlayerComponentHelper::VideoPlayerComponentHelper(re::ecs2::VideoPlayerComponentHelper *this)
{
  uint64_t *v2;
  uint64_t v3;
  re *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = re::globalAllocators(this);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 6384, 8);
  bzero((void *)v3, 0x18F0uLL);
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v3 + 24) = _D0;
  v10 = re::globalAllocators(v9);
  *(_QWORD *)(v3 + 72) = v10[2];
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0x400000003F800000;
  v11 = -4128;
  do
  {
    v12 = v3 + v11;
    *(_QWORD *)(v12 + 4224) = 0;
    *(_DWORD *)(v12 + 4232) = 0;
    v11 += 2064;
  }
  while (v11);
  *(_DWORD *)(v3 + 4224) = 0x1000000;
  *(_QWORD *)(v3 + 4256) = re::globalAllocators((re *)v10)[2];
  *(_QWORD *)(v3 + 4264) = 0;
  *(_DWORD *)(v3 + 4272) = 0;
  *(_QWORD *)(v3 + 4280) = 0;
  *(_DWORD *)(v3 + 4288) = 0;
  objc_initWeak((id *)(v3 + 6344), 0);
  objc_initWeak((id *)(v3 + 6352), 0);
  *(_QWORD *)(v3 + 6360) = 0;
  *(_QWORD *)(v3 + 6368) = 0x3F8000003F800000;
  *(_DWORD *)(v3 + 6376) = 1065353216;
  *(_QWORD *)this = v3;
  return this;
}

void re::ecs2::VideoPlayerComponentHelper::~VideoPlayerComponentHelper(id **this)
{
  id *v1;
  uint64_t v2;

  v1 = *this;
  if (*this)
  {
    v2 = re::globalAllocators((re *)this)[2];
    re::ecs2::VideoPlayerComponentHelper::impl::~impl(v1);
    (*(void (**)(uint64_t, id *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
}

void re::ecs2::VideoPlayerComponentHelper::update(uint64_t **a1, _QWORD *a2, const re::AssetHandle *a3, re::AssetManager *a4)
{
  uint64_t *v6;
  _BYTE v7[24];

  v6 = *a1;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v7, a3);
  re::ecs2::VideoPlayerComponentHelper::impl::update(v6, a2, (re::ecs2::Entity *)v7, a4);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
}

void re::ecs2::VideoPlayerComponentHelper::updateAudioSrcPosition(uint64_t *a1, re::ecs2::Entity *a2, const re::AssetHandle *a3)
{
  uint64_t v4;
  _BYTE v5[24];

  v4 = *a1;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v5, a3);
  re::ecs2::VideoPlayerComponentHelper::impl::updateAudioSrcPosition(v4, a2);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
}

void vpc::ImmersiveMediaOpacityInAnimationEngine::~ImmersiveMediaOpacityInAnimationEngine(vpc::ImmersiveMediaOpacityInAnimationEngine *this)
{
  vpc::ImmersiveMediaOpacityInAnimationEngine *v1;
  uint64_t v2;
  void (****v3)(_QWORD);
  uint64_t v4;
  void (***v5)(_QWORD);
  uint64_t v6;

  v1 = this;
  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    v3 = (void (****)(_QWORD))((char *)this + 64);
    v4 = 8 * v2;
    do
    {
      v5 = *v3;
      if (*v3)
      {
        v6 = re::globalAllocators(this)[2];
        (**v5)(v5);
        this = (vpc::ImmersiveMediaOpacityInAnimationEngine *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v6 + 40))(v6, v5);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  *((_QWORD *)v1 + 6) = 0;
  ++*((_DWORD *)v1 + 14);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)v1);
}

void vpc::ScreenMeshAnimationEngine::~ScreenMeshAnimationEngine(vpc::ScreenMeshAnimationEngine *this)
{
  vpc::ScreenMeshAnimationEngine *v1;
  _QWORD *v2;
  char *v3;
  void (****v4)(_QWORD);
  uint64_t v5;
  void (***v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;

  v1 = this;
  v2 = (_QWORD *)((char *)this + 48);
  v3 = (char *)this + 4176;
  do
  {
    v4 = (void (****)(_QWORD))(v2 + 2);
    if (*v2)
    {
      v5 = 8 * *v2;
      do
      {
        v6 = *v4;
        if (*v4)
        {
          v7 = re::globalAllocators(this)[2];
          (**v6)(v6);
          this = (vpc::ScreenMeshAnimationEngine *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v7 + 40))(v7, v6);
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
    v2 += 258;
  }
  while (v2 != (_QWORD *)v3);
  v8 = 4128;
  do
  {
    *(_QWORD *)((char *)v1 + v8 - 2016) = 0;
    ++*(_DWORD *)((char *)v1 + v8 - 2008);
    v8 -= 2064;
  }
  while (v8);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)v1);
}

uint64_t re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator*(_QWORD *a1)
{
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_DWORD *)a1 + 2);
  if (v1 == 2)
  {
    v2 = a1[2];
    if (*(_QWORD *)(*a1 + 296) > v2)
    {
      v3 = *(_QWORD *)(*a1 + 312);
      v4 = 384;
      return v3 + v2 * v4;
    }
LABEL_15:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (v1 == 1)
  {
    v2 = a1[2];
    if (*(_QWORD *)(*a1 + 256) > v2)
    {
      v3 = *(_QWORD *)(*a1 + 272);
      goto LABEL_10;
    }
LABEL_16:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (!v1)
  {
    v2 = a1[2];
    if (*(_QWORD *)(*a1 + 216) > v2)
    {
      v3 = *(_QWORD *)(*a1 + 232);
LABEL_10:
      v4 = 336;
      return v3 + v2 * v4;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  return 0;
}

uint64_t *re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++(uint64_t *result)
{
  unint64_t v1;
  int v2;
  uint64_t v3;

  v1 = result[2] + 1;
  result[2] = v1;
  v2 = *((_DWORD *)result + 2);
  switch(v2)
  {
    case 2:
      v3 = *result;
LABEL_10:
      if (v1 >= *(_QWORD *)(v3 + 296))
      {
        *((_DWORD *)result + 2) = 3;
        result[2] = 0;
      }
      return result;
    case 1:
      v3 = *result;
      goto LABEL_8;
    case 0:
      v3 = *result;
      if (v1 >= *(_QWORD *)(*result + 216))
      {
        v1 = 0;
        *((_DWORD *)result + 2) = 1;
        result[2] = 0;
LABEL_8:
        if (v1 < *(_QWORD *)(v3 + 256))
          return result;
        v1 = 0;
        *((_DWORD *)result + 2) = 2;
        result[2] = 0;
        goto LABEL_10;
      }
      break;
  }
  return result;
}

vpc::FloatSpringAnimation *vpc::FloatSpringAnimation::FloatSpringAnimation(vpc::FloatSpringAnimation *this, float *a2)
{
  id v3;
  void *v4;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_DWORD *)this + 8) = 0;
  *((_WORD *)this + 18) = 0;
  *(_QWORD *)this = &off_24ED61C88;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 5) = 0;
  v3 = objc_alloc_init(MEMORY[0x24BDE5768]);
  v4 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v3;

  return this;
}

void vpc::FloatSpringAnimation::~FloatSpringAnimation(id *this)
{

}

{

  JUMPOUT(0x2276933B8);
}

float vpc::FloatSpringAnimation::interpolate(id *this, double a2, float a3, float a4)
{
  float v5;
  float v6;

  v5 = *(float *)&a2;
  *(float *)&a2 = a4;
  objc_msgSend(this[5], "_solveForInput:", a2);
  if (v6 > 0.999)
    v6 = 1.0;
  return v5 + (float)((float)(a3 - v5) * v6);
}

uint64_t re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::addEmplace<re::AssetHandle&>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, re::AssetHandle *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 48 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 48 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 48 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v10) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v10 + 16) = *a4;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(*(_QWORD *)(a1 + 16) + 48 * v10 + 24), a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 16), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 24));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 48;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 48 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 48 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 48 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 16) = *a4;
  v13 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9);
  v13[3] = 0;
  v13[4] = 0;
  v13[5] = 0;
  v13[4] = a5[1];
  a5[1] = 0;
  v14 = v13[3];
  v13[3] = 0;
  v13[3] = *a5;
  *a5 = v14;
  v15 = v13[5];
  v13[5] = a5[2];
  a5[2] = v15;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::internal::Callable<re::ecs2::VideoPlayerComponentHelper::impl::update(float,re::ecs2::Entity *,re::AssetHandle,re::AssetManager *)::$_0,void ()(float,float)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ecs2::VideoPlayerComponentHelper::impl::update(float,re::ecs2::Entity *,re::AssetHandle,re::AssetManager *)::$_0,void ()(float,float)>::operator()(uint64_t a1, float *a2, float *a3)
{
  float v4;
  uint64_t v5;
  id WeakRetained;
  re::VideoDefaults *v7;
  re *v8;
  char *v9;
  void *v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  char *v20;
  char *v21;
  re *v22;
  re *v23;
  NSObject *v24;
  NSObject *v25;
  float v26;
  uint8_t buf[4];
  double v28;
  __int16 v29;
  double v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v26 = *a2;
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  WeakRetained = objc_loadWeakRetained((id *)(v5 + 6344));
  if (WeakRetained)
  {

    v8 = (re *)re::VideoDefaults::logEnabled(v7);
    if ((_DWORD)v8)
    {
      v24 = *re::videoLogObjects(v8);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        v28 = v26;
        v29 = 2048;
        v30 = v4;
        _os_log_impl(&dword_224FE9000, v24, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] m_screenMeshAnimationEngine.onUpdate: aspect ratio: %f, cornerRadius: %f", buf, 0x16u);
      }
    }
    v9 = (char *)objc_loadWeakRetained((id *)(v5 + 6344));
    v10 = v9;
    if (v9)
      v11 = v9 - 8;
    else
      v11 = 0;
    v12 = objc_loadWeakRetained((id *)(v5 + 6352));
    v13 = v12;
    if (v12)
      v14 = (uint64_t)v12 - 8;
    else
      v14 = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *(float *)&_D0 = v26;
    re::ecs2::VideoPlayerComponentHelper::impl::regenerateScreenMesh(v5, v11, v14, *(re::AssetManager **)(a1 + 16), _D0, 1, v4);
    if (v13)

    if (v10)
    v20 = (char *)objc_loadWeakRetained((id *)(v5 + 6344));
    v21 = v20 - 8;
    if (!v20)
      v21 = 0;
    v22 = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v23 = v22;
    if (v20)

    if (v23)
    {
      if (*(float *)(v5 + 36) < v26)
        *((_BYTE *)v23 + 217) = 1;
    }
    else
    {
      v25 = *re::videoLogObjects(v22);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v28) = 794;
        _os_log_error_impl(&dword_224FE9000, v25, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, videoComponent is nullptr", buf, 8u);
      }
    }
  }
}

uint64_t re::internal::Callable<re::ecs2::VideoPlayerComponentHelper::impl::update(float,re::ecs2::Entity *,re::AssetHandle,re::AssetManager *)::$_0,void ()(float,float)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED61CD8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::VideoPlayerComponentHelper::impl::update(float,re::ecs2::Entity *,re::AssetHandle,re::AssetManager *)::$_0,void ()(float,float)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED61CD8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::VideoPlayerComponentHelper::impl::update(float,re::ecs2::Entity *,re::AssetHandle,re::AssetManager *)::$_0,void ()(float,float)>::size()
{
  return 24;
}

uint64_t *re::ecs2::allocInfo_AudioMixerComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_223);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_223))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410D248, 0);
    *(uint64_t *)((char *)&qword_25410D258 + 6) = 0;
    qword_25410D258 = 0;
    qword_25410D268 = 0;
    qword_25410D270 = 0xFFFFFFFFLL;
    qword_25410D248 = (uint64_t)&off_24ED7DAA8;
    qword_25410D278 = (uint64_t)"AudioMixerComponent";
    dword_25410D280 = 0;
    unk_25410D288 = 0u;
    unk_25410D298 = 0u;
    unk_25410D2A8 = 0u;
    qword_25410D2B8 = 0;
    __cxa_guard_release(&_MergedGlobals_223);
  }
  return &qword_25410D248;
}

void re::ecs2::initInfo_AudioMixerComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x8F1F37482BD3D894;
  v14[1] = "AudioMixerComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25410D228);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410D228);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410D238 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "mixGroups";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410D240 = v12;
      __cxa_guard_release(&qword_25410D228);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410D238;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioMixerComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioMixerComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioMixerComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioMixerComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

uint64_t *re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  int v4;
  re *v5;
  std::__shared_mutex_base *v6;
  _OWORD *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  uint64_t v11;
  int v12;
  re::IntrospectionRegistry *v13;
  const re::IntrospectionBase *v14;
  const char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  const char *v20;
  uint64_t v21[2];

  if ((v3 & 1) == 0
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::info);
    re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::info = (uint64_t)&off_24ED61E48;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
    v4 = re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
    if (v4)
      return &re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
  }
  v7 = re::introspect_uint64_t((re *)1, a2);
  v8 = (re *)re::introspect_AudioMixGroup((re::IntrospectionBase **)1);
  if (re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
    }
  }
  else
  {
    v11 = (uint64_t)v8;
    re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::isInitialized = 1;
    v12 = *((_DWORD *)v8 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::info, 0);
    qword_255802620 = 0x3000000007;
    dword_255802628 = v12;
    word_25580262C = 0;
    *(_QWORD *)&xmmword_255802630 = 0;
    *((_QWORD *)&xmmword_255802630 + 1) = 0xFFFFFFFFLL;
    qword_255802640 = (uint64_t)v7;
    unk_255802648 = 0;
    qword_255802650 = v11;
    unk_255802658 = 0;
    re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::info = (uint64_t)&off_24ED61E48;
    re::IntrospectionRegistry::add(v13, v14);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::info, (const re::IntrospectionBase *)&v19);
    if ((BYTE8(v19) & 1) != 0)
      v15 = v20;
    else
      v15 = (char *)&v19 + 9;
    if ((_QWORD)v19 && (BYTE8(v19) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v19 + 40))();
    v16 = v7[2];
    v18 = *(_OWORD *)(v11 + 32);
    v19 = v16;
    xmmword_255802630 = v17;
    re::StringID::destroyString((re::StringID *)v21);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::info;
}

double re::internal::defaultConstruct<re::ecs2::AudioMixerComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED61D40;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_DWORD *)(v3 + 64) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 68) = 0x7FFFFFFFLL;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 116) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::AudioMixerComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::AudioMixerComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED61D40;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 68) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_DWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 116) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AudioMixerComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AudioMixerComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioMixerComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioMixerComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioMixerComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioMixerComponent>, this);
}

uint64_t *re::ecs2::allocInfo_AudioMixerSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410D230);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410D230))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410D2C0, 0);
    *(uint64_t *)((char *)&qword_25410D2D0 + 6) = 0;
    qword_25410D2D0 = 0;
    qword_25410D2E0 = 0;
    qword_25410D2E8 = 0xFFFFFFFFLL;
    qword_25410D2C0 = (uint64_t)&off_24ED7DAA8;
    qword_25410D2F0 = (uint64_t)"AudioMixerSystem";
    dword_25410D2F8 = 0;
    xmmword_25410D300 = 0u;
    unk_25410D310 = 0u;
    xmmword_25410D320 = 0u;
    qword_25410D330 = 0;
    __cxa_guard_release(&qword_25410D230);
  }
  return &qword_25410D2C0;
}

void re::ecs2::initInfo_AudioMixerSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xBEC6F30AB275C04;
  v5[1] = "AudioMixerSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_AudioMixerSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioMixerSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioMixerSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::AudioMixerSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::AudioMixerSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioMixerSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioMixerSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::AudioMixerSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  re::ecs2::System::System(a3, 1, 1);
  *v3 = &off_24ED61D90;
  v3[13] = 0;
}

void *re::internal::defaultDestruct<re::ecs2::AudioMixerSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::AudioMixerSystem>(uint64_t a1)
{
  _QWORD *v1;

  re::ecs2::System::System(a1, 1, 1);
  *v1 = &off_24ED61D90;
  v1[13] = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::AudioMixerSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AudioMixerSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioMixerSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioMixerSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioMixerSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioMixerSystem>, this);
}

void re::ecs2::AudioMixerComponent::~AudioMixerComponent(re::ecs2::AudioMixerComponent *this)
{
  uint64_t *v2;

  *(_QWORD *)this = &off_24ED61D40;
  v2 = (uint64_t *)((char *)this + 32);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 10);
  re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::AudioMixerComponent::~AudioMixerComponent(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AudioMixerComponent::markMixGroupGainChangeClean(re::ecs2::AudioMixerComponent *this, uint64_t a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;

  v5 = a2;
  result = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 32, &v5);
  if (result)
  {
    v4 = *(_DWORD *)(result + 124);
    return re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace((uint64_t)this + 80, &v5, &v4);
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 152 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 152 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + 152 * v4 + 16) == v2)
        return v6 + 152 * v4 + 24;
    }
    return 0;
  }
  return v6 + 152 * v4 + 24;
}

uint64_t re::ecs2::AudioMixerSystem::willAddSystemToECSService(re::ecs2::AudioMixerSystem *this)
{
  uint64_t result;
  uint64_t v3;

  result = *((_QWORD *)this + 5);
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    result = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v3);
    *((_QWORD *)this + 13) = result;
  }
  return result;
}

uint64_t re::ecs2::AudioMixerSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(_QWORD *)(this + 104) = 0;
  return this;
}

double re::ecs2::AudioMixerSystem::willAddSceneToECSService(re::ecs2::AudioMixerSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  double result;
  re::ecs2::AudioMixerSystem *v5;
  uint64_t (*v6)(re *, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v5 = this;
    v6 = re::ecs2::AudioMixerSystem::activateComponents;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::createSubscription<re::ecs2::AudioMixerSystem>(re::ecs2::AudioMixerSystem *,REEventHandlerResult (re::ecs2::AudioMixerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Slice<re::ecs2::AudioMixerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioMixerComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 216), (uint64_t)&v5);
    v5 = this;
    v6 = re::ecs2::AudioMixerSystem::deactivateComponents;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::createSubscription<re::ecs2::AudioMixerSystem>(re::ecs2::AudioMixerSystem *,REEventHandlerResult (re::ecs2::AudioMixerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Slice<re::ecs2::AudioMixerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioMixerComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 304), (uint64_t)&v5);
  }
  return result;
}

uint64_t re::ecs2::AudioMixerSystem::activateComponents(re *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v5 = 8 * a4;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)a3 + 16);
      v7 = (id)*re::audioLogObjects(a1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        if (v6)
        {
          v8 = *(const char **)(v6 + 280);
          v9 = *(_QWORD *)(v6 + 296);
        }
        else
        {
          v9 = 0;
          v8 = "(null)";
        }
        *(_DWORD *)buf = 136315394;
        v12 = v8;
        v13 = 2048;
        v14 = v9;
        _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "AudioMixerSystem::activateComponents() AudioMixerComponent activating, name='%s', entityId=%llu", buf, 0x16u);
      }

      a3 += 8;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t re::ecs2::AudioMixerSystem::deactivateComponents(re *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v5 = 8 * a4;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)a3 + 16);
      v7 = (id)*re::audioLogObjects(a1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        if (v6)
        {
          v8 = *(const char **)(v6 + 280);
          v9 = *(_QWORD *)(v6 + 296);
        }
        else
        {
          v9 = 0;
          v8 = "(null)";
        }
        *(_DWORD *)buf = 136315394;
        v12 = v8;
        v13 = 2048;
        v14 = v9;
        _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "AudioMixerSystem::deactivateComponents() AudioMixerComponent deactivating, name='%s', entityId=%llu", buf, 0x16u);
      }

      a3 += 8;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

void re::ecs2::AudioMixerSystem::willRemoveSceneFromECSService(re::ecs2::AudioMixerSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(_QWORD *)&v4 = this;
    *((_QWORD *)&v4 + 1) = re::ecs2::AudioMixerSystem::activateComponents;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::createSubscription<re::ecs2::AudioMixerSystem>(re::ecs2::AudioMixerSystem *,REEventHandlerResult (re::ecs2::AudioMixerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Slice<re::ecs2::AudioMixerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioMixerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 216, &v4);
    *(_QWORD *)&v4 = this;
    *((_QWORD *)&v4 + 1) = re::ecs2::AudioMixerSystem::deactivateComponents;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::createSubscription<re::ecs2::AudioMixerSystem>(re::ecs2::AudioMixerSystem *,REEventHandlerResult (re::ecs2::AudioMixerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Slice<re::ecs2::AudioMixerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioMixerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 304, &v4);
  }
}

_QWORD *re::ecs2::AudioMixerSystem::update(_QWORD *result, uint64_t a2, int a3)
{
  uint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __objc2_class_ro **p_info;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::NetworkComponent *v16;
  uint64_t v17;
  const re::ecs2::Component *v18;
  uint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  re::ecs2::NetworkComponent *v27;
  const re::ecs2::Component *v28;
  uint64_t v29;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  re::ecs2::AudioMixerComponent *v38;
  uint64_t v39;
  re::ecs2::AudioMixerComponent **v40;
  uint64_t v41;
  re::ecs2::AudioMixerComponent *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  re::ecs2::AudioMixerComponent *v46;
  re::ecs2::NetworkComponent *v47;
  int v48;
  re::ecs2::NetworkComponent *v49;
  int v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  std::string::size_type v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  int v60;
  uint64_t v61;
  const re::DynamicString *v62;
  unint64_t v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  uint8x8_t v67;
  _QWORD **v68;
  _QWORD *i;
  unint64_t v70;
  float v71;
  _BOOL8 v72;
  unint64_t v73;
  unint64_t v74;
  int8x8_t prime;
  void *v76;
  void *v77;
  uint64_t v78;
  _QWORD **v79;
  unint64_t v80;
  uint8x8_t v81;
  unint64_t v82;
  uint8x8_t v83;
  uint64_t v84;
  _QWORD *j;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  const re::DynamicString **v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  const re::DynamicString **v99;
  char *v100;
  char *v101;
  const re::DynamicString **v102;
  unsigned int v103;
  int v104;
  int v105;
  void *v106;
  _QWORD *v107;
  re::ecs2::AudioMixerComponent *v108;
  uint64_t v109;
  _BYTE *v110;
  _BYTE *v111;
  size_t v112;
  uint64_t v113;
  re::DynamicString **v114;
  _anonymous_namespace_ *v115;
  re::DynamicString *v116;
  __int128 v117;
  __int128 v118;
  re::DynamicString **v119;
  float v120;
  re::DynamicString **v121;
  re::ecs2::AudioMixGroupsComponent *v122;
  re::DynamicString *v123;
  float v124;
  int v125;
  uint64_t v126;
  int v127;
  BOOL v128;
  uint64_t v129;
  int *v130;
  int v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint8x8_t v143;
  unint64_t v144;
  void **v145;
  void *v146;
  unint64_t v147;
  float v148;
  _BOOL8 v149;
  unint64_t v150;
  unint64_t v151;
  size_t v152;
  uint64_t v153;
  _QWORD *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  _DWORD *v161;
  _BOOL8 v162;
  unint64_t v163;
  uint8x8_t v164;
  unint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  unint64_t v168;
  unsigned int v169;
  unsigned int v170;
  re::ecs2::AudioMixerComponent **v171;
  re::ecs2::AudioMixerComponent **v172;
  uint64_t *k;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  void *v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t *v182;
  double v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int *v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  float *v191;
  int v192;
  int v193;
  re::ecs2::SceneComponentTable *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  BOOL v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t *v202;
  unsigned int v203;
  re::ecs2::AudioMixerComponent *v204;
  _QWORD *v205;
  std::string v206;
  std::string v207;
  void *__p[2];
  void *v209[2];
  float v210;
  __int128 v211;
  __int128 v212;
  int v213;
  _BYTE v214[16];
  uint64_t v215[2];
  __int128 v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219[4];
  uint64_t v220;
  _BYTE v221[40];
  _BYTE v222[32];
  __int128 v223;
  _QWORD v224[3];
  int v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;

  v230 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = (uint64_t)result;
    result = (_QWORD *)result[13];
    if (result)
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
      if (result)
      {
        v6 = result;
        re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v215);
        re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v214, 3095, v3);
        v7 = *(_QWORD *)(*(_QWORD *)(a2 + 104) + 272);
        v201 = v6;
        v8 = (*(uint64_t (**)(_QWORD *))(*v6 + 720))(v6);
        v211 = 0u;
        v212 = 0u;
        v213 = 1065353216;
        v195 = a2;
        v194 = (re::ecs2::SceneComponentTable *)(a2 + 200);
        v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        v10 = *(_QWORD *)(v9 + 24);
        p_info = VideoSpillMapMetalSession.info;
        if (v10)
        {
          v12 = *(uint64_t **)(v9 + 40);
          v13 = 8 * v10;
          while (1)
          {
            v14 = *v12;
            v15 = *(_QWORD *)(*v12 + 16);
            if (v15)
              break;
LABEL_20:
            ++v12;
            v13 -= 8;
            if (!v13)
              goto LABEL_21;
          }
          v16 = *(re::ecs2::NetworkComponent **)(v15 + 200);
          if (!v16)
            goto LABEL_10;
          if (re::ecs2::NetworkComponent::owningProcessType(*(re::ecs2::NetworkComponent **)(v15 + 200)))
          {
LABEL_16:
            v19 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)(v14 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
            if (v19)
            {
              v20 = (unint64_t *)(v19 + 32);
              v21 = (_QWORD *)(v19 + 32);
            }
            else
            {
              v20 = (unint64_t *)&re::kInvalidAudioPlaybackConnectionIdentifier;
              v21 = &re::kInvalidAudioPlaybackConnectionIdentifier;
            }
            std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)&v211, v20, v21);
            goto LABEL_20;
          }
          v15 = *(_QWORD *)(v14 + 16);
          if (v15)
          {
LABEL_10:
            v17 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v15 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
            if (v17)
              v15 = *(_QWORD *)(v17 + 32);
            else
              v15 = 0;
          }
          if (v15 != v8)
          {
            v18 = (const re::ecs2::Component *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(*(_QWORD *)(v14 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
            *((_QWORD *)v18 + 4) = v8;
            if (v16)
              re::ecs2::NetworkComponent::markDirty(v16, v18);
          }
          goto LABEL_16;
        }
LABEL_21:
        v22 = re::ecs2::SceneComponentTable::get(v194, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        v23 = *(_QWORD *)(v22 + 24);
        if (v23)
        {
          v24 = *(_QWORD *)(v22 + 40);
          v25 = 8 * v23;
          do
          {
            v26 = *(_QWORD *)(*(_QWORD *)v24 + 16);
            if (v26)
            {
              v27 = *(re::ecs2::NetworkComponent **)(v26 + 200);
              if (!v27
                || !re::ecs2::NetworkComponent::owningProcessType(*(re::ecs2::NetworkComponent **)(v26 + 200)))
              {
                v28 = (const re::ecs2::Component *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v26 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
                if (*((_QWORD *)v28 + 4) != v8)
                {
                  *((_QWORD *)v28 + 4) = v8;
                  if (v27)
                    re::ecs2::NetworkComponent::markDirty(v27, v28);
                }
              }
            }
            v24 += 8;
            v25 -= 8;
          }
          while (v25);
        }
        if (((*(uint64_t (**)(_QWORD *))(*v201 + 544))(v201) & 1) == 0)
        {
          v179 = re::ecs2::SceneComponentTable::get(v194, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          v180 = *(_QWORD *)(v179 + 24);
          if (!v180)
            goto LABEL_357;
          v181 = *(uint64_t **)(v179 + 40);
          v182 = &v181[v180];
          v183 = *(float *)&a3;
          while (1)
          {
            v184 = *v181;
            v185 = *(unsigned int *)(*v181 + 64);
            if ((_DWORD)v185)
            {
              v186 = 0;
              v187 = (int *)(*(_QWORD *)(v184 + 48) + 8);
              do
              {
                v188 = *v187;
                v187 += 38;
                if (v188 < 0)
                  goto LABEL_345;
                ++v186;
              }
              while (v185 != v186);
              LODWORD(v186) = *(_DWORD *)(*v181 + 64);
            }
            else
            {
              LODWORD(v186) = 0;
            }
LABEL_345:
            if ((_DWORD)v185 != (_DWORD)v186)
            {
              v189 = v186;
              do
              {
                v190 = *(_QWORD *)(v184 + 48) + 152 * v189;
                v191 = (float *)(v190 + 24);
                re::ecs2::AudioMixerComponent::markMixGroupGainChangeClean((re::ecs2::AudioMixerComponent *)v184, *(_QWORD *)(v190 + 56));
                re::AudioMixGroup::applyRamp(v191, v183);
                if (*(_DWORD *)(v184 + 64) <= (v186 + 1))
                  v192 = v186 + 1;
                else
                  v192 = *(_DWORD *)(v184 + 64);
                v193 = v186;
                while (1)
                {
                  v189 = (v193 + 1);
                  if (v192 - 1 == v193)
                    break;
                  ++v193;
                  LODWORD(v186) = v189;
                  if ((*(_DWORD *)(*(_QWORD *)(v184 + 48) + 152 * v189 + 8) & 0x80000000) != 0)
                    goto LABEL_355;
                }
                LODWORD(v186) = v192;
LABEL_355:
                ;
              }
              while ((_DWORD)v185 != (_DWORD)v186);
            }
            if (++v181 == v182)
              goto LABEL_357;
          }
        }
        v29 = v195;
        v205 = (_QWORD *)v212;
        if (!(_QWORD)v212)
          goto LABEL_357;
        v198 = v7 >> 1;
        __asm { FMOV            V8.2S, #1.0 }
LABEL_33:
        v34 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
              + 8);
        if (*(_QWORD *)(v29 + 224) <= v34)
          goto LABEL_335;
        v35 = *(_QWORD *)(*(_QWORD *)(v29 + 240) + 8 * v34);
        if (!v35)
          goto LABEL_335;
        v36 = *(_QWORD *)(v35 + 24);
        if (!v36)
          goto LABEL_335;
        v37 = 0;
        v38 = 0;
        v39 = v205[2];
        v40 = *(re::ecs2::AudioMixerComponent ***)(v35 + 40);
        v41 = 8 * v36;
        do
        {
          v42 = *v40;
          v43 = *((_QWORD *)*v40 + 2);
          if (v43 && (*(_BYTE *)(v43 + 288) & 1) != 0)
          {
            v44 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v43 + 32), (const re::ecs2::ComponentTypeBase *)p_info[340]);
            v45 = v44 ? *(_QWORD *)(v44 + 32) : 0;
            v46 = v42;
            if (v45 == v39)
            {
              v47 = *(re::ecs2::NetworkComponent **)(*((_QWORD *)v42 + 2) + 200);
              if (!v47)
                goto LABEL_49;
              v48 = re::ecs2::NetworkComponent::owningProcessType(v47);
              v46 = v42;
              if (v37 == 0 || v48 == 0)
              {
                v38 = v42;
                v37 = 1;
              }
              if (!v48)
                goto LABEL_49;
            }
          }
          ++v40;
          v41 -= 8;
        }
        while (v41);
        v46 = v38;
        if (!v37)
          goto LABEL_335;
LABEL_49:
        v204 = v46;
        v49 = *(re::ecs2::NetworkComponent **)(*((_QWORD *)v46 + 2) + 200);
        if (v49)
        {
          v50 = re::ecs2::NetworkComponent::owningProcessType(v49);
          if (v50)
            _ZF = v205[2] == 0;
          else
            _ZF = 0;
          if (_ZF)
            goto LABEL_335;
          v199 = v50 != 0;
        }
        else
        {
          v199 = 0;
        }
        *(_OWORD *)__p = 0u;
        *(_OWORD *)v209 = 0u;
        v210 = 1.0;
        v52 = re::ecs2::SceneComponentTable::get(v194, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        v53 = *(_QWORD *)(v52 + 24);
        if (v53)
        {
          v54 = *(uint64_t **)(v52 + 40);
          v202 = &v54[v53];
          while (1)
          {
            v55 = *v54;
            v56 = *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)(*v54 + 16) + 32), (const re::ecs2::ComponentTypeBase *)p_info[340])+ 32);
            if (v56 == v205[2])
              break;
LABEL_67:
            if (++v54 == v202)
              goto LABEL_180;
          }
          v57 = *(unsigned int *)(v55 + 64);
          if ((_DWORD)v57)
          {
            v58 = 0;
            v59 = (int *)(*(_QWORD *)(v55 + 48) + 8);
            do
            {
              v60 = *v59;
              v59 += 38;
              if (v60 < 0)
                goto LABEL_65;
              ++v58;
            }
            while (v57 != v58);
            LODWORD(v58) = *(_DWORD *)(v55 + 64);
          }
          else
          {
            LODWORD(v58) = 0;
          }
LABEL_65:
          if ((_DWORD)v57 == (_DWORD)v58)
          {
LABEL_66:
            p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
            goto LABEL_67;
          }
          v61 = v58;
          while (1)
          {
            v62 = (const re::DynamicString *)(*(_QWORD *)(v55 + 48) + 152 * v61 + 24);
            re::DynamicString::DynamicString((re::DynamicString *)&v216, v62);
            v207.__r_.__value_.__r.__words[0] = v56;
            v63 = re::Hash<re::DynamicString>::operator()((uint64_t)v222, (uint64_t)&v216);
            MurmurHash3_x64_128((uint64_t)&v207, 8, 0, (unint64_t *)v222);
            v64 = *(_OWORD *)v222;
            if ((_QWORD)v216)
            {
              if ((BYTE8(v216) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v216 + 40))();
              v216 = 0u;
              v217 = 0u;
            }
            v65 = ((v63 << 6)
                 - 0x61C8864680B583E9
                 + (v63 >> 2)
                 + ((*((_QWORD *)&v64 + 1) - 0x61C8864680B583E9 + ((_QWORD)v64 << 6) + ((unint64_t)v64 >> 2)) ^ v64)) ^ v63;
            v66 = (unint64_t)__p[1];
            if (__p[1])
            {
              v67 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
              v67.i16[0] = vaddlv_u8(v67);
              if (v67.u32[0] > 1uLL)
              {
                v63 ^= (v63 << 6)
                     - 0x61C8864680B583E9
                     + (v63 >> 2)
                     + ((*((_QWORD *)&v64 + 1) - 0x61C8864680B583E9 + ((_QWORD)v64 << 6) + ((unint64_t)v64 >> 2)) ^ v64);
                if (__p[1] <= (void *)v65)
                  v63 = v65 % (unint64_t)__p[1];
              }
              else
              {
                v63 = ((unint64_t)__p[1] - 1) & v65;
              }
              v68 = (_QWORD **)*((_QWORD *)__p[0] + v63);
              if (v68)
              {
                for (i = *v68; i; i = (_QWORD *)*i)
                {
                  v70 = i[1];
                  if (v70 == v65)
                  {
                    if (i[2] == v65)
                      goto LABEL_146;
                  }
                  else
                  {
                    if (v67.u32[0] > 1uLL)
                    {
                      if ((void *)v70 >= __p[1])
                        v70 %= (unint64_t)__p[1];
                    }
                    else
                    {
                      v70 &= (unint64_t)__p[1] - 1;
                    }
                    if (v70 != v63)
                      break;
                  }
                }
              }
            }
            i = operator new(0x30uLL);
            *i = 0;
            i[1] = v65;
            i[2] = v65;
            i[3] = 0;
            i[4] = 0;
            i[5] = 0;
            v71 = (float)((unint64_t)v209[1] + 1);
            if (!v66 || (float)(v210 * (float)v66) < v71)
              break;
LABEL_136:
            v87 = __p[0];
            v88 = (_QWORD *)*((_QWORD *)__p[0] + v63);
            if (v88)
            {
              *i = *v88;
            }
            else
            {
              *i = v209[0];
              v209[0] = i;
              v87[v63] = v209;
              if (!*i)
                goto LABEL_145;
              v89 = *(_QWORD *)(*i + 8);
              if ((v66 & (v66 - 1)) != 0)
              {
                if (v89 >= v66)
                  v89 %= v66;
              }
              else
              {
                v89 &= v66 - 1;
              }
              v88 = (char *)__p[0] + 8 * v89;
            }
            *v88 = i;
LABEL_145:
            ++v209[1];
LABEL_146:
            v91 = (const re::DynamicString **)i[4];
            v90 = i[5];
            if ((unint64_t)v91 >= v90)
            {
              v93 = i[3];
              v94 = ((uint64_t)v91 - v93) >> 4;
              v95 = v94 + 1;
              if ((unint64_t)(v94 + 1) >> 60)
LABEL_359:
                abort();
              v96 = v90 - v93;
              if (v96 >> 3 > v95)
                v95 = v96 >> 3;
              if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF0)
                v97 = 0xFFFFFFFFFFFFFFFLL;
              else
                v97 = v95;
              if (v97)
                v97 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v97);
              else
                v98 = 0;
              v99 = (const re::DynamicString **)(v97 + 16 * v94);
              *v99 = v62;
              v99[1] = (const re::DynamicString *)v55;
              v101 = (char *)i[3];
              v100 = (char *)i[4];
              v102 = v99;
              if (v100 != v101)
              {
                do
                {
                  *((_OWORD *)v102 - 1) = *((_OWORD *)v100 - 1);
                  v102 -= 2;
                  v100 -= 16;
                }
                while (v100 != v101);
                v100 = (char *)i[3];
              }
              v92 = v99 + 2;
              i[3] = v102;
              i[4] = v99 + 2;
              i[5] = v97 + 16 * v98;
              if (v100)
                operator delete(v100);
            }
            else
            {
              *v91 = v62;
              v91[1] = (const re::DynamicString *)v55;
              v92 = v91 + 2;
            }
            i[4] = v92;
            v103 = *(_DWORD *)(v55 + 64);
            if (v103 <= (int)v58 + 1)
              v104 = v58 + 1;
            else
              v104 = *(_DWORD *)(v55 + 64);
            while (1)
            {
              v61 = (v58 + 1);
              if (v104 - 1 == (_DWORD)v58)
                break;
              LODWORD(v58) = v58 + 1;
              v105 = v61;
              if ((*(_DWORD *)(*(_QWORD *)(v55 + 48) + 152 * v61 + 8) & 0x80000000) != 0)
                goto LABEL_169;
            }
            v105 = v104;
LABEL_169:
            LODWORD(v58) = v105;
            if (v103 == v105)
              goto LABEL_66;
          }
          v72 = (v66 & (v66 - 1)) != 0;
          if (v66 < 3)
            v72 = 1;
          v73 = v72 | (2 * v66);
          v74 = vcvtps_u32_f32(v71 / v210);
          if (v73 <= v74)
            prime = (int8x8_t)v74;
          else
            prime = (int8x8_t)v73;
          if (*(_QWORD *)&prime == 1)
          {
            prime = (int8x8_t)2;
          }
          else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
          {
            prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
            v66 = (unint64_t)__p[1];
          }
          if (*(_QWORD *)&prime > v66)
            goto LABEL_102;
          if (*(_QWORD *)&prime < v66)
          {
            v82 = vcvtps_u32_f32((float)(unint64_t)v209[1] / v210);
            if (v66 < 3 || (v83 = (uint8x8_t)vcnt_s8((int8x8_t)v66), v83.i16[0] = vaddlv_u8(v83), v83.u32[0] > 1uLL))
            {
              v82 = std::__next_prime(v82);
            }
            else
            {
              v84 = 1 << -(char)__clz(v82 - 1);
              if (v82 >= 2)
                v82 = v84;
            }
            if (*(_QWORD *)&prime <= v82)
              prime = (int8x8_t)v82;
            if (*(_QWORD *)&prime >= v66)
            {
              v66 = (unint64_t)__p[1];
            }
            else
            {
              if (prime)
              {
LABEL_102:
                if (*(_QWORD *)&prime >> 61)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v76 = operator new(8 * *(_QWORD *)&prime);
                v77 = __p[0];
                __p[0] = v76;
                if (v77)
                  operator delete(v77);
                v78 = 0;
                __p[1] = (void *)prime;
                do
                  *((_QWORD *)__p[0] + v78++) = 0;
                while (*(_QWORD *)&prime != v78);
                v79 = (_QWORD **)v209[0];
                if (v209[0])
                {
                  v80 = *((_QWORD *)v209[0] + 1);
                  v81 = (uint8x8_t)vcnt_s8(prime);
                  v81.i16[0] = vaddlv_u8(v81);
                  if (v81.u32[0] > 1uLL)
                  {
                    if (v80 >= *(_QWORD *)&prime)
                      v80 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v80 &= *(_QWORD *)&prime - 1;
                  }
                  *((_QWORD *)__p[0] + v80) = v209;
                  for (j = *v79; j; v80 = v86)
                  {
                    v86 = j[1];
                    if (v81.u32[0] > 1uLL)
                    {
                      if (v86 >= *(_QWORD *)&prime)
                        v86 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v86 &= *(_QWORD *)&prime - 1;
                    }
                    if (v86 != v80)
                    {
                      if (!*((_QWORD *)__p[0] + v86))
                      {
                        *((_QWORD *)__p[0] + v86) = v79;
                        goto LABEL_127;
                      }
                      *v79 = (_QWORD *)*j;
                      *j = **((_QWORD **)__p[0] + v86);
                      **((_QWORD **)__p[0] + v86) = j;
                      j = v79;
                    }
                    v86 = v80;
LABEL_127:
                    v79 = (_QWORD **)j;
                    j = (_QWORD *)*j;
                  }
                }
                v66 = (unint64_t)prime;
                goto LABEL_131;
              }
              v106 = __p[0];
              __p[0] = 0;
              if (v106)
                operator delete(v106);
              v66 = 0;
              __p[1] = 0;
            }
          }
LABEL_131:
          if ((v66 & (v66 - 1)) != 0)
          {
            if (v66 <= v65)
              v63 = v65 % v66;
            else
              v63 = v65;
          }
          else
          {
            v63 = (v66 - 1) & v65;
          }
          goto LABEL_136;
        }
LABEL_180:
        v107 = v209[0];
        v108 = v204;
        if (v209[0])
        {
          v109 = (uint64_t)v204 + 32;
          do
          {
            v111 = (_BYTE *)v107[3];
            v110 = (_BYTE *)v107[4];
            v112 = v110 - v111;
            if (v110 != v111)
            {
              if (v110 - v111 < 0)
                goto LABEL_359;
              v113 = v107[2];
              v114 = (re::DynamicString **)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v112 >> 4);
              v115 = (_anonymous_namespace_ *)memmove(v114, v111, v112);
              v220 = 0;
              *(_WORD *)v221 = 0;
              v218 = 0u;
              memset(v219, 0, 28);
              *(_OWORD *)&v221[4] = xmmword_2260E5D70;
              *(_QWORD *)&v221[20] = 0;
              *(_QWORD *)&v221[28] = 0;
              *(_DWORD *)&v221[36] = 1;
              v116 = *v114;
              if (v112 == 16)
              {
                if (v116)
                {
                  v112 = (size_t)v114[1];
                  re::DynamicString::operator=((re::DynamicString *)&v216, *v114);
                  v218 = *((_OWORD *)v116 + 2);
                  re::DynamicArray<unsigned long long>::operator=((uint64_t)v219, (uint64_t *)v116 + 6);
                  v117 = *(_OWORD *)((char *)v116 + 104);
                  v118 = *(_OWORD *)((char *)v116 + 88);
                  *(_QWORD *)&v221[32] = *((_QWORD *)v116 + 15);
                  *(_OWORD *)v221 = v118;
                  *(_OWORD *)&v221[16] = v117;
                  LOBYTE(v112) = re::ecs2::AudioMixGroupsComponent::isMixGroupGainDirty((re::ecs2::AudioMixGroupsComponent *)v112, *((_QWORD *)v116 + 4));
                }
                else
                {
                  LOBYTE(v112) = 0;
                }
              }
              else
              {
                v119 = (re::DynamicString **)((char *)v114 + v112);
                re::DynamicString::operator=((re::DynamicString *)&v216, *v114);
                LODWORD(v112) = 0;
                v120 = 0.0;
                v121 = v114;
                do
                {
                  v123 = *v121;
                  v122 = v121[1];
                  v121 += 2;
                  v120 = v120 + *((float *)v123 + 28);
                  *(float *)&v221[16] = *((float *)v123 + 26) * *(float *)&v221[16];
                  v221[0] |= *((_BYTE *)v123 + 88);
                  v221[1] |= *((_BYTE *)v123 + 89);
                  LODWORD(v112) = v112 | re::ecs2::AudioMixGroupsComponent::isMixGroupGainDirty(v122, *((_QWORD *)v123 + 4));
                }
                while (v121 != v119);
                if (v120 <= 15.0)
                  v124 = v120;
                else
                  v124 = 15.0;
                *(_DWORD *)&v221[24] = fmaxf(v124, -60.0);
                *(_DWORD *)&v221[28] = *(_DWORD *)&v221[24];
                *(_DWORD *)&v221[20] = 0;
                *(_DWORD *)&v221[12] = 0;
                ++*(_DWORD *)&v221[36];
              }
              *(_QWORD *)&v218 = v113;
              re::DynamicString::DynamicString((re::DynamicString *)v222, (const re::DynamicString *)&v216);
              v223 = v218;
              re::DynamicArray<char const*>::DynamicArray((uint64_t)v224, v219);
              v229 = *(_QWORD *)&v221[32];
              v227 = *(_OWORD *)v221;
              v228 = *(_OWORD *)&v221[16];
              v125 = *(_DWORD *)&v221[36];
              v126 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v109, (uint64_t *)&v223);
              if (v126)
              {
                v127 = *(_DWORD *)(v126 + 124);
                if (v125 <= v127 + 1)
                  v125 = v127 + 1;
              }
              HIDWORD(v229) = v125;
              re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addInternal<re::AudioMixGroup&>(v109, (uint64_t *)&v223, 2, (re::DynamicString *)v222);
              if (v224[0])
              {
                if (v226)
                  (*(void (**)(void))(*(_QWORD *)v224[0] + 40))();
                v226 = 0;
                memset(v224, 0, sizeof(v224));
                ++v225;
              }
              if (*(_QWORD *)v222)
              {
                if ((v222[8] & 1) != 0)
                  (*(void (**)(void))(**(_QWORD **)v222 + 40))();
                memset(v222, 0, sizeof(v222));
              }
              if ((v112 & 1) == 0)
                re::ecs2::AudioMixerComponent::markMixGroupGainChangeClean(v204, v218);
              if (v219[0])
              {
                if (v220)
                  (*(void (**)(void))(*(_QWORD *)v219[0] + 40))();
                v220 = 0;
                memset(v219, 0, 24);
                ++LODWORD(v219[3]);
              }
              if ((_QWORD)v216 && (BYTE8(v216) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v216 + 40))();
              operator delete(v114);
              v108 = v204;
            }
            v107 = (_QWORD *)*v107;
          }
          while (v107);
        }
        v128 = v199;
        if (v205[2])
          v128 = 0;
        v29 = v195;
        if (v128)
          goto LABEL_329;
        v216 = 0u;
        v217 = 0u;
        LODWORD(v218) = 1065353216;
        v200 = *((unsigned int *)v108 + 16);
        v129 = 0;
        if ((_DWORD)v200)
        {
          v130 = (int *)(*((_QWORD *)v108 + 6) + 8);
          do
          {
            v131 = *v130;
            v130 += 38;
            if (v131 < 0)
              goto LABEL_224;
            ++v129;
          }
          while (v200 != v129);
          LODWORD(v129) = *((_DWORD *)v108 + 16);
        }
LABEL_224:
        if ((_DWORD)v200 == (_DWORD)v129)
          goto LABEL_328;
        v132 = 0;
        v133 = v129;
        v196 = (uint64_t)v108 + 80;
        v197 = (uint64_t)v108 + 32;
LABEL_226:
        v134 = *((_QWORD *)v108 + 6);
        v135 = v134 + 152 * v133;
        v136 = v135 + 24;
        v203 = v132;
        if ((*(_BYTE *)(v135 + 32) & 1) != 0)
          v137 = *(char **)(v135 + 40);
        else
          v137 = (char *)(v135 + 33);
        std::string::basic_string[abi:nn180100]<0>(v222, v137);
        if (v222[23] >= 0)
          v138 = (uint64_t *)v222;
        else
          v138 = *(uint64_t **)v222;
        if (v222[23] >= 0)
          v139 = v222[23];
        else
          v139 = *(_QWORD *)&v222[8];
        v140 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v207, v138, v139);
        v141 = v140;
        v142 = *((_QWORD *)&v216 + 1);
        if (!*((_QWORD *)&v216 + 1))
        {
LABEL_253:
          v146 = operator new(0x38uLL);
          *(_QWORD *)v146 = 0;
          *((_QWORD *)v146 + 1) = v141;
          *((_OWORD *)v146 + 1) = *(_OWORD *)v222;
          *((_QWORD *)v146 + 4) = *(_QWORD *)&v222[16];
          memset(v222, 0, 24);
          *((_DWORD *)v146 + 12) = 0;
          *((_QWORD *)v146 + 5) = _D8;
          v148 = (float)(unint64_t)(*((_QWORD *)&v217 + 1) + 1);
          if (!v142 || (float)(*(float *)&v218 * (float)v142) < v148)
          {
            v149 = (v142 & (v142 - 1)) != 0;
            if (v142 < 3)
              v149 = 1;
            v150 = v149 | (2 * v142);
            v151 = vcvtps_u32_f32(v148 / *(float *)&v218);
            if (v150 <= v151)
              v152 = v151;
            else
              v152 = v150;
            std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)&v216, v152);
            v142 = *((_QWORD *)&v216 + 1);
            if ((*((_QWORD *)&v216 + 1) & (*((_QWORD *)&v216 + 1) - 1)) != 0)
            {
              if (v141 >= *((_QWORD *)&v216 + 1))
                v132 = v141 % *((_QWORD *)&v216 + 1);
              else
                v132 = v141;
            }
            else
            {
              v132 = (*((_QWORD *)&v216 + 1) - 1) & v141;
            }
          }
          v153 = v216;
          v154 = *(_QWORD **)(v216 + 8 * v132);
          if (v154)
          {
            *(_QWORD *)v146 = *v154;
            goto LABEL_273;
          }
          *(_QWORD *)v146 = v217;
          *(_QWORD *)&v217 = v146;
          *(_QWORD *)(v153 + 8 * v132) = &v217;
          if (*(_QWORD *)v146)
          {
            v155 = *(_QWORD *)(*(_QWORD *)v146 + 8);
            if ((v142 & (v142 - 1)) != 0)
            {
              if (v155 >= v142)
                v155 %= v142;
            }
            else
            {
              v155 &= v142 - 1;
            }
            v154 = (_QWORD *)(v216 + 8 * v155);
LABEL_273:
            *v154 = v146;
          }
          ++*((_QWORD *)&v217 + 1);
          goto LABEL_275;
        }
        v143 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v216 + 8));
        v143.i16[0] = vaddlv_u8(v143);
        v144 = v143.u32[0];
        if (v143.u32[0] > 1uLL)
        {
          v132 = v140;
          if (v140 >= *((_QWORD *)&v216 + 1))
            v132 = v140 % *((_QWORD *)&v216 + 1);
        }
        else
        {
          v132 = (*((_QWORD *)&v216 + 1) - 1) & v140;
        }
        v145 = *(void ***)(v216 + 8 * v132);
        if (!v145 || (v146 = *v145) == 0)
        {
          v29 = v195;
          goto LABEL_253;
        }
        while (1)
        {
          v147 = *((_QWORD *)v146 + 1);
          if (v147 == v141)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v218, (unsigned __int8 *)v146 + 16, v222) & 1) != 0)
            {
              v29 = v195;
LABEL_275:
              if ((v222[23] & 0x80000000) != 0)
                operator delete(*(void **)v222);
              v156 = v205[2];
              v157 = v134 + 152 * v133;
              v159 = *(_QWORD *)(v157 + 56);
              v158 = (uint64_t *)(v157 + 56);
              *(_QWORD *)v222 = v159;
              v160 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v197, (uint64_t *)v222);
              v161 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v196, (uint64_t *)v222);
              v162 = 1;
              if (v160 && v161)
                v162 = *v161 != *(_DWORD *)(v160 + 124);
              if (!(*(unsigned int (**)(_QWORD *, unint64_t, uint64_t, uint64_t, _BOOL8))(*v201 + 432))(v201, v198, v156, v136, v162))goto LABEL_297;
              re::ecs2::AudioMixerComponent::markMixGroupGainChangeClean(v204, *v158);
              if (!__p[1])
                goto LABEL_297;
              v163 = *v158;
              v164 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
              v164.i16[0] = vaddlv_u8(v164);
              if (v164.u32[0] > 1uLL)
              {
                v165 = *v158;
                if ((void *)v163 >= __p[1])
                  v165 = v163 % (unint64_t)__p[1];
              }
              else
              {
                v165 = ((unint64_t)__p[1] - 1) & v163;
              }
              v166 = (_QWORD *)*((_QWORD *)__p[0] + v165);
              if (!v166)
                goto LABEL_297;
              v167 = (_QWORD *)*v166;
              if (!v167)
                goto LABEL_297;
              while (2)
              {
                v168 = v167[1];
                if (v168 != v163)
                {
                  if (v164.u32[0] > 1uLL)
                  {
                    if ((void *)v168 >= __p[1])
                      v168 %= (unint64_t)__p[1];
                  }
                  else
                  {
                    v168 &= (unint64_t)__p[1] - 1;
                  }
                  if (v168 != v165)
                    goto LABEL_297;
LABEL_296:
                  v167 = (_QWORD *)*v167;
                  if (!v167)
                    goto LABEL_297;
                  continue;
                }
                break;
              }
              if (v167[2] != v163)
                goto LABEL_296;
              v171 = (re::ecs2::AudioMixerComponent **)v167[3];
              v172 = (re::ecs2::AudioMixerComponent **)v167[4];
              while (v171 != v172)
              {
                if (*v171)
                  re::ecs2::AudioMixerComponent::markMixGroupGainChangeClean(v171[1], *((_QWORD *)*v171 + 4));
                v171 += 2;
              }
LABEL_297:
              v132 = (*((_BYTE *)v146 + 48) != 0) | v203;
              v108 = v204;
              v169 = *((_DWORD *)v204 + 16);
              if (v169 <= (int)v129 + 1)
                v169 = v129 + 1;
              while (1)
              {
                v133 = (v129 + 1);
                if (v169 - 1 == (_DWORD)v129)
                  break;
                LODWORD(v129) = v129 + 1;
                v170 = v133;
                if ((*(_DWORD *)(*((_QWORD *)v204 + 6) + 152 * v133 + 8) & 0x80000000) != 0)
                  goto LABEL_303;
              }
              v170 = v169;
LABEL_303:
              LODWORD(v129) = v170;
              if ((_DWORD)v200 == v170)
              {
                for (k = (uint64_t *)v217; k; k = (uint64_t *)*k)
                {
                  if (*((char *)k + 39) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v222, (const std::string::value_type *)k[2], k[3]);
                  }
                  else
                  {
                    *(_OWORD *)v222 = *((_OWORD *)k + 1);
                    *(_QWORD *)&v222[16] = k[4];
                  }
                  *(_QWORD *)&v222[24] = k[5];
                  LODWORD(v223) = *((_DWORD *)k + 12);
                  if ((v222[23] & 0x80000000) != 0)
                    std::string::__init_copy_ctor_external(&v207, *(const std::string::value_type **)v222, *(std::string::size_type *)&v222[8]);
                  else
                    v207 = *(std::string *)v222;
                  if ((v132 & ((_BYTE)v223 == 0)) == 1)
                  {
                    *(_DWORD *)&v222[28] = 0;
                    BYTE1(v223) = 1;
                  }
                  v174 = v205[2];
                  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v206, v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
                  else
                    v206 = v207;
                  (*(void (**)(_QWORD *, unint64_t, uint64_t, std::string *, _BYTE *))(*v201 + 424))(v201, v198, v174, &v206, &v222[24]);
                  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v206.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v207.__r_.__value_.__l.__data_);
                  if ((v222[23] & 0x80000000) != 0)
                    operator delete(*(void **)v222);
                }
LABEL_328:
                std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)&v216);
                p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
LABEL_329:
                v175 = v209[0];
                if (v209[0])
                {
                  do
                  {
                    v176 = (_QWORD *)*v175;
                    v177 = (void *)v175[3];
                    if (v177)
                    {
                      v175[4] = v177;
                      operator delete(v177);
                    }
                    operator delete(v175);
                    v175 = v176;
                  }
                  while (v176);
                }
                v178 = __p[0];
                __p[0] = 0;
                if (v178)
                  operator delete(v178);
LABEL_335:
                v205 = (_QWORD *)*v205;
                if (!v205)
                {
LABEL_357:
                  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v211);
                  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v214);
                  return (_QWORD *)re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v215);
                }
                goto LABEL_33;
              }
              goto LABEL_226;
            }
          }
          else
          {
            if (v144 > 1)
            {
              if (v147 >= v142)
                v147 %= v142;
            }
            else
            {
              v147 &= v142 - 1;
            }
            if (v147 != v132)
            {
LABEL_251:
              v29 = v195;
              goto LABEL_253;
            }
          }
          v146 = *(void **)v146;
          if (!v146)
            goto LABEL_251;
        }
      }
    }
  }
  return result;
}

void re::ecs2::AudioMixerSystem::~AudioMixerSystem(re::ecs2::AudioMixerSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AudioMixerSystem::typeInfo(re::ecs2::AudioMixerSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioMixerSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioMixerSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioMixerSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioMixerSystem>, 0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re *a1@<X0>, uint64_t *a2@<X1>, re **a3@<X2>, __int128 *a4@<X3>, re **a5@<X8>)
{
  uint64_t v10;
  re **v11;
  re *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  _anonymous_namespace_ *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  const char *v23;
  int v24;
  _QWORD v25[2];
  __int128 v26;
  StringID v27;
  const char **v28;

  v10 = (uint64_t)a1 + 200;
  v11 = (re **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v11)
  {
    v12 = *v11;
    *a5 = a1;
    a5[1] = v12;
    return;
  }
  v22 = 0x449AD97C4B77BED4;
  v23 = "_CompareFunc";
  v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v10, &v22);
  if (v13)
  {
    v14 = *v13;
    re::StringID::destroyString((re::StringID *)&v22);
    if (a1)
    {
      v15 = (uint64_t)a1;
      goto LABEL_9;
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v22);
  }
  *(_QWORD *)&v27.var0 = 0x449AD97C4B77BED4;
  v27.var1 = "_CompareFunc";
  re::TypeRegistry::declareType((uint64_t)a1, 8, &v27, 1u, 0, &v22);
  v15 = v22;
  v14 = (uint64_t)v23;
  re::StringID::destroyString((re::StringID *)&v27);
LABEL_9:
  re::TypeRegistry::typeInfo(a1, a3, &v22);
  re::TypeInfo::TypeInfo((uint64_t)&v27, (uint64_t)&v23);
  if (!v15
    || (v16 = *v28,
        v22 = v14,
        v23 = v16,
        v24 = -1,
        (v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v27.var0 + 768, &v22)) == 0)|| !*(_QWORD *)v17)
  {
    v26 = *(_OWORD *)a3;
    v25[0] = v15;
    v25[1] = v14;
    v17 = (_anonymous_namespace_ *)re::TypeRegistry::addAttribute((uint64_t)a1, &v26, -1, (uint64_t)v25, (uint64_t)re::internal::less<unsigned long long>, 0);
  }
  v18 = *(_OWORD *)a3;
  v20 = *a4;
  v21 = v18;
  re::TypeBuilder::beginDictionaryType((uint64_t)&v22, a2, 1, 0x30uLL, 8uLL, &v21, &v20);
  re::TypeBuilder::setConstructor((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
  re::TypeBuilder::setDestructor((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
  re::TypeBuilder::setDictionaryAccessors((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
  re::TypeBuilder::setDictionaryIterator((uint64_t)&v22, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
  re::TypeBuilder::commitTo((re::TypeBuilder *)&v22, a1, a5);
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v22, v19);
}

_QWORD *re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4, uint64_t *a5)
{
  re::IntrospectionBase *v10;
  _OWORD v12[2];
  __int128 v13;
  _OWORD v14[5];

  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  memset(v12, 0, sizeof(v12));
  *(_QWORD *)&v14[2] = 0;
  WORD4(v14[2]) = 0;
  v13 = 0u;
  memset(v14, 0, 28);
  *(_OWORD *)((char *)&v14[2] + 12) = xmmword_2260E5D70;
  *(_OWORD *)((char *)&v14[3] + 12) = 0uLL;
  HIDWORD(v14[4]) = 1;
  v10 = (re::IntrospectionBase *)re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(a4, a5, (uint64_t)v12, 2u);
  if (*(_QWORD *)&v14[0])
  {
    if (*(_QWORD *)&v14[2])
      (*(void (**)(void))(**(_QWORD **)&v14[0] + 40))();
    *(_QWORD *)&v14[2] = 0;
    memset(v14, 0, 24);
    ++DWORD2(v14[1]);
  }
  if (*(_QWORD *)&v12[0] && (BYTE8(v12[0]) & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)&v12[0] + 40))();
  re::introspectionInitElement(a2, a3, a1[8], v10);
  return v10;
}

uint64_t re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 38;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 152 * v10 + 16, *(_QWORD *)(a2 + 16) + 152 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 152 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

double re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 152;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  double result;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    v4 = (_QWORD *)(a1 + 72);
    v3 = *(_QWORD *)(a1 + 72);
    *((_DWORD *)v4 - 16) = v1 & 0x7FFFFFFF;
    v5 = v4 - 6;
    if (v3)
    {
      if (*(_QWORD *)(a1 + 104))
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
      *(_QWORD *)(a1 + 104) = 0;
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      ++*(_DWORD *)(a1 + 96);
    }
    if (*v5)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, *(_QWORD *)(a1 + 40));
      result = 0.0;
      *(_OWORD *)v5 = 0u;
      *((_OWORD *)v4 - 2) = 0u;
    }
  }
  return result;
}

void re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 152;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 152 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 152 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 152 * v9 + 8) = v12 | 0x80000000;
  v13 = 152 * v9;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v13) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v13 + 16) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + v13;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_QWORD *)(v14 + 48) = *(_QWORD *)(a5 + 24);
  v15 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(v14 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  v16 = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 24) = 0;
  v18 = *(_QWORD *)(v14 + 32);
  v17 = *(_QWORD *)(v14 + 40);
  *(_QWORD *)(v14 + 32) = v15;
  *(_QWORD *)(v14 + 40) = v16;
  *(_QWORD *)(a5 + 8) = v18;
  *(_QWORD *)(a5 + 16) = v17;
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(a5 + 32);
  *(_QWORD *)(v14 + 104) = 0;
  *(_DWORD *)(v14 + 96) = 0;
  *(_QWORD *)(v14 + 80) = 0;
  *(_QWORD *)(v14 + 88) = 0;
  *(_QWORD *)(v14 + 72) = 0;
  v19 = *(_QWORD *)(a5 + 56);
  *(_QWORD *)(v14 + 72) = *(_QWORD *)(a5 + 48);
  *(_QWORD *)(v14 + 80) = v19;
  *(_QWORD *)(a5 + 48) = 0;
  *(_QWORD *)(a5 + 56) = 0;
  v20 = *(_QWORD *)(v14 + 88);
  *(_QWORD *)(v14 + 88) = *(_QWORD *)(a5 + 64);
  *(_QWORD *)(a5 + 64) = v20;
  v21 = *(_QWORD *)(v14 + 104);
  *(_QWORD *)(v14 + 104) = *(_QWORD *)(a5 + 80);
  *(_QWORD *)(a5 + 80) = v21;
  ++*(_DWORD *)(a5 + 72);
  ++*(_DWORD *)(v14 + 96);
  v22 = *(_OWORD *)(a5 + 88);
  v23 = *(_OWORD *)(a5 + 104);
  *(_QWORD *)(v14 + 144) = *(_QWORD *)(a5 + 120);
  *(_OWORD *)(v14 + 112) = v22;
  *(_OWORD *)(v14 + 128) = v23;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + v3);
        ++v4;
        v3 += 152;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v5 = (unint64_t)a2;
  v7 = *a2;
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v10) = 0;
    goto LABEL_9;
  }
  v10 = v9 % *(unsigned int *)(a1 + 24);
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v10);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
LABEL_9:
    v15 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v10, v9, (_QWORD *)v5, a3);
    ++*(_DWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 16) + 152 * v15;
    return v14 + 24;
  }
  v12 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v12 + 152 * v11 + 16) != v7)
  {
    v13 = *(_DWORD *)(v12 + 152 * v11 + 8);
    v11 = v13 & 0x7FFFFFFF;
    if ((v13 & 0x7FFFFFFF) == 0x7FFFFFFF)
      goto LABEL_9;
  }
  v5 = a4;
  switch(a4)
  {
    case 0u:
    case 1u:
      v14 = v12 + 152 * v11;
      break;
    case 2u:
    case 3u:
      v17 = v12 + 152 * v11;
      re::DynamicString::operator=((re::DynamicString *)(v17 + 24), (re::DynamicString *)a3);
      *(_OWORD *)(v17 + 56) = *(_OWORD *)(a3 + 32);
      re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v17 + 72, a3 + 48);
      v18 = *(_QWORD *)(a3 + 120);
      v19 = *(_OWORD *)(a3 + 104);
      *(_OWORD *)(v17 + 112) = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(v17 + 128) = v19;
      *(_QWORD *)(v17 + 144) = v18;
      ++*(_DWORD *)(a1 + 40);
      v14 = *(_QWORD *)(a1 + 16) + 152 * v11;
      break;
    default:
      goto LABEL_9;
  }
  return v14 + 24;
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1);
  return re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1);
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, uint64_t *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(a1, a4, (uint64_t)Instance, 2u);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 152 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 38;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 152 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 152 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

id re::internal::defaultRetain<re::ecs2::AudioMixerSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AudioMixerSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addInternal<re::AudioMixGroup&>(uint64_t a1, uint64_t *a2, int a3, re::DynamicString *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  v8 = *a2;
  v9 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v11) = 0;
    goto LABEL_9;
  }
  v11 = v10 % *(unsigned int *)(a1 + 24);
  v12 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v11);
  if ((_DWORD)v12 == 0x7FFFFFFF)
  {
LABEL_9:
    v15 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<re::AudioMixGroup&>(a1, v11, v10, a2, a4);
    ++*(_DWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 16) + 152 * v15;
    return v14 + 24;
  }
  v13 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v13 + 152 * v12 + 16) != v8)
  {
    LODWORD(v12) = *(_DWORD *)(v13 + 152 * v12 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v12 == 0x7FFFFFFF)
      goto LABEL_9;
  }
  switch(a3)
  {
    case 0:
    case 1:
      v14 = v13 + 152 * v12;
      break;
    case 2:
    case 3:
      v17 = v12;
      v18 = v13 + 152 * v12;
      v21 = *(_QWORD *)(v18 + 72);
      v20 = (_QWORD *)(v18 + 72);
      v19 = v21;
      if (v21)
      {
        v22 = v13 + 152 * v12;
        v24 = *(_QWORD *)(v22 + 104);
        v23 = (_QWORD *)(v22 + 104);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
        *v23 = 0;
        v20[1] = 0;
        v20[2] = 0;
        *v20 = 0;
        ++*(_DWORD *)(v13 + 152 * v17 + 96);
      }
      v25 = v13 + 152 * v17;
      v28 = *(_QWORD *)(v25 + 24);
      v27 = v25 + 24;
      v26 = v28;
      if (v28)
      {
        if ((*(_BYTE *)(v27 + 8) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 40))(v26, *(_QWORD *)(v27 + 16));
        *(_OWORD *)v27 = 0u;
        *(_OWORD *)(v27 + 16) = 0u;
      }
      v29 = *(_QWORD *)(a1 + 16) + 152 * v17;
      re::DynamicString::DynamicString((re::DynamicString *)(v29 + 24), a4);
      *(_OWORD *)(v29 + 56) = *((_OWORD *)a4 + 2);
      re::DynamicArray<char const*>::DynamicArray(v29 + 72, (uint64_t *)a4 + 6);
      v30 = *(_OWORD *)((char *)a4 + 88);
      v31 = *(_OWORD *)((char *)a4 + 104);
      *(_QWORD *)(v29 + 144) = *((_QWORD *)a4 + 15);
      *(_OWORD *)(v29 + 112) = v30;
      *(_OWORD *)(v29 + 128) = v31;
      ++*(_DWORD *)(a1 + 40);
      v14 = *(_QWORD *)(a1 + 16) + 152 * v17;
      break;
    default:
      goto LABEL_9;
  }
  return v14 + 24;
}

uint64_t re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<re::AudioMixGroup&>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, re::DynamicString *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 152 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 152 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 152 * v10;
  *(_DWORD *)(v12 + v14 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v14) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v14 + 16) = *a4;
  v15 = *(_QWORD *)(a1 + 16) + v14;
  re::DynamicString::DynamicString((re::DynamicString *)(v15 + 24), a5);
  *(_OWORD *)(v15 + 56) = *((_OWORD *)a5 + 2);
  re::DynamicArray<char const*>::DynamicArray(v15 + 72, (uint64_t *)a5 + 6);
  v16 = *(_OWORD *)((char *)a5 + 88);
  v17 = *(_OWORD *)((char *)a5 + 104);
  *(_QWORD *)(v15 + 144) = *((_QWORD *)a5 + 15);
  *(_OWORD *)(v15 + 112) = v16;
  *(_OWORD *)(v15 + 128) = v17;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::createSubscription<re::ecs2::AudioMixerSystem>(re::ecs2::AudioMixerSystem *,REEventHandlerResult (re::ecs2::AudioMixerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Slice<re::ecs2::AudioMixerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioMixerComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

void re::AVFVideoFileWriter::~AVFVideoFileWriter(id *this)
{

}

uint64_t re::AVFVideoFileWriter::stopVideoFileWriter(uint64_t a1, __int128 *a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[5];
  _BYTE v7[24];
  uint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = *(NSObject **)(a1 + 40);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3321888768;
  v6[2] = ___ZN2re18AVFVideoFileWriter19stopVideoFileWriterE6CMTimeNS_8FunctionIFvP5NSURLEEE_block_invoke;
  v6[3] = &__block_descriptor_104_a8_40c30_ZTSN2re8FunctionIFvP5NSURLEEE_e5_v8__0l;
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v4 = *(_QWORD *)(a3 + 24);
  v6[4] = a1;
  v8 = v4;
  v9 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v7, a3);
  dispatch_async(v3, v6);
  result = (uint64_t)v9;
  if (v9)
  {
    result = (**(uint64_t (***)(_BYTE *))v9)(v9);
    if (v9 != v7)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  }
  return result;
}

uint64_t ___ZN2re18AVFVideoFileWriter19stopVideoFileWriterE6CMTimeNS_8FunctionIFvP5NSURLEEE_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _QWORD v8[5];
  _BYTE v9[24];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(result + 32);
  if (!*(_BYTE *)(v1 + 48))
  {
    v2 = result;
    objc_msgSend(*(id *)(v1 + 8), "markAsFinished");
    v3 = *(void **)v1;
    v6 = *(_OWORD *)(v2 + 80);
    v7 = *(_QWORD *)(v2 + 96);
    objc_msgSend(v3, "endSessionAtSourceTime:", &v6);
    v4 = *(void **)v1;
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3321888768;
    v8[2] = ___ZN2re18AVFVideoFileWriter19stopVideoFileWriterE6CMTimeNS_8FunctionIFvP5NSURLEEE_block_invoke_2;
    v8[3] = &__block_descriptor_80_a8_40c30_ZTSN2re8FunctionIFvP5NSURLEEE_e5_v8__0l;
    v5 = *(_QWORD *)(v2 + 64);
    v8[4] = v1;
    v10 = v5;
    v11 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, v2 + 40);
    objc_msgSend(v4, "finishWritingWithCompletionHandler:", v8);
    *(_BYTE *)(v1 + 48) = 1;
    result = (uint64_t)v11;
    if (v11)
    {
      result = (**(uint64_t (***)(_BYTE *))v11)(v11);
      if (v11 != v9)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    }
  }
  return result;
}

uint64_t ___ZN2re18AVFVideoFileWriter19stopVideoFileWriterE6CMTimeNS_8FunctionIFvP5NSURLEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD block[5];
  _BYTE v6[24];
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3321888768;
  block[2] = ___ZN2re18AVFVideoFileWriter19stopVideoFileWriterE6CMTimeNS_8FunctionIFvP5NSURLEEE_block_invoke_3;
  block[3] = &__block_descriptor_80_a8_40c30_ZTSN2re8FunctionIFvP5NSURLEEE_e5_v8__0l;
  v3 = *(_QWORD *)(a1 + 64);
  block[4] = v1;
  v7 = v3;
  v8 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v6, a1 + 40);
  dispatch_async(v2, block);
  result = (uint64_t)v8;
  if (v8)
  {
    result = (**(uint64_t (***)(_BYTE *))v8)(v8);
    if (v8 != v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  return result;
}

void ___ZN2re18AVFVideoFileWriter19stopVideoFileWriterE6CMTimeNS_8FunctionIFvP5NSURLEEE_block_invoke_3(uint64_t a1)
{
  id v2;

  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 24);
  (*(void (**)(_QWORD, id *))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), &v2);

}

uint64_t __copy_helper_block_a8_40c30_ZTSN2re8FunctionIFvP5NSURLEEE(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(a1 + 40, a2 + 40);
}

uint64_t (***__destroy_helper_block_a8_40c30_ZTSN2re8FunctionIFvP5NSURLEEE(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 40);
}

void ___ZN2re18AVFVideoFileWriter34appendPixelBufferToVideoFileWriterEP10__CVBufferDv2_f6CMTimey_block_invoke(uint64_t a1)
{
  __CVBuffer *v2;
  uint32x2_t *v3;
  unsigned int Width;
  unsigned int Height;
  uint64_t PixelFormatType;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const __CFDictionary *v14;
  const __CFAllocator *Default;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  re::AppleBuild *v26;
  const __CFString *v27;
  uint64_t v28;
  re *v29;
  void *v30;
  re *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  double v35;
  Float64 Seconds;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  Float64 v40;
  double v41;
  NSObject *log;
  void *v43;
  CMTime time;
  __int128 v45;
  uint64_t v46;
  CMTime v47;
  float32x2_t v48;
  uint64_t v49;
  CVPixelBufferRef pixelBufferOut;
  uint8_t buf[4];
  Float64 v52;
  __int16 v53;
  Float64 v54;
  __int16 v55;
  uint64_t v56;
  _QWORD v57[8];
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v3 = *(uint32x2_t **)(a1 + 32);
  v2 = *(__CVBuffer **)(a1 + 40);
  if (v3[6].i8[0])
  {
    CVPixelBufferRelease(v2);
  }
  else
  {
    Width = CVPixelBufferGetWidth(v2);
    Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 40));
    PixelFormatType = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(a1 + 40));
    objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 80, Width, Height, 0);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(*(id *)&v3[7], "newTextureWithDescriptor:iosurface:plane:", v43, CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a1 + 40)), 0);
    v8 = *MEMORY[0x24BDC5668];
    v57[0] = *MEMORY[0x24BDC5690];
    v57[1] = v8;
    v58[0] = MEMORY[0x24BDBD1C8];
    v58[1] = MEMORY[0x24BDBD1B8];
    v57[2] = *MEMORY[0x24BDC5708];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v3[4].u32[0]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v58[2] = v9;
    v57[3] = *MEMORY[0x24BDC5650];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v3[4].u32[1]);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *MEMORY[0x24BDC56C8];
    v58[3] = v10;
    v58[4] = &unk_24EDB7AA8;
    v12 = *MEMORY[0x24BDC55D0];
    v57[4] = v11;
    v57[5] = v12;
    v58[5] = &unk_24EDB7AA8;
    v57[6] = *MEMORY[0x24BDC56B8];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", PixelFormatType);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v57[7] = *MEMORY[0x24BDC56D0];
    v58[6] = v13;
    v58[7] = &unk_24EDB7AC0;
    v14 = (const __CFDictionary *)objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v58, v57, 8);

    pixelBufferOut = 0;
    Default = CFAllocatorGetDefault();
    CVPixelBufferCreate(Default, v3[4].u32[0], v3[4].u32[1], PixelFormatType, v14, &pixelBufferOut);
    v16 = (void *)objc_msgSend(*(id *)&v3[7], "newTextureWithDescriptor:iosurface:plane:", *(_QWORD *)&v3[9], CVPixelBufferGetIOSurface(pixelBufferOut), 0);
    objc_msgSend(MEMORY[0x24BDDD690], "renderPassDescriptor");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "colorAttachments");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "objectAtIndexedSubscript:", 0);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setTexture:", v16);

    objc_msgSend(v17, "colorAttachments");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "objectAtIndexedSubscript:", 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "setLoadAction:", 2);

    objc_msgSend(v17, "colorAttachments");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "objectAtIndexedSubscript:", 0);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "setClearColor:", 0.0, 0.0, 0.0, 1.0);

    v24 = (void *)objc_msgSend(*(id *)&v3[7], "newCommandQueue");
    objc_msgSend(v24, "commandBuffer");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "renderCommandEncoderWithDescriptor:", v17);
    v26 = (re::AppleBuild *)objc_claimAutoreleasedReturnValue();
    if (*re::AppleBuild::get(v26) == 1)
      v27 = CFSTR("texture resampling and padding encoder");
    else
      v27 = &stru_24EDA2070;
    -[re::AppleBuild setLabel:](v26, "setLabel:", v27);
    -[re::AppleBuild setRenderPipelineState:](v26, "setRenderPipelineState:", *(_QWORD *)&v3[8]);
    *(float *)&v28 = (float)Width;
    *((float *)&v28 + 1) = (float)Height;
    v49 = v28;
    v48 = vcvt_f32_u32(v3[4]);
    -[re::AppleBuild setVertexBytes:length:atIndex:](v26, "setVertexBytes:length:atIndex:", &re::boxVertices, 32, 0);
    -[re::AppleBuild setVertexBytes:length:atIndex:](v26, "setVertexBytes:length:atIndex:", &v49, 8, 1);
    -[re::AppleBuild setVertexBytes:length:atIndex:](v26, "setVertexBytes:length:atIndex:", a1 + 48, 8, 2);
    -[re::AppleBuild setVertexBytes:length:atIndex:](v26, "setVertexBytes:length:atIndex:", &v48, 8, 3);
    -[re::AppleBuild setFragmentTexture:atIndex:](v26, "setFragmentTexture:atIndex:", v7, 0);
    -[re::AppleBuild drawPrimitives:vertexStart:vertexCount:](v26, "drawPrimitives:vertexStart:vertexCount:", 4, 0, 4);
    -[re::AppleBuild endEncoding](v26, "endEncoding");
    objc_msgSend(v25, "commit");
    objc_msgSend(v25, "waitUntilCompleted");
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 40));
    v29 = (re *)objc_msgSend(*(id *)&v3[1], "isReadyForMoreMediaData");
    if ((v29 & 1) != 0)
    {
      v30 = (void *)v3[2];
      v45 = *(_OWORD *)(a1 + 64);
      v46 = *(_QWORD *)(a1 + 80);
      v31 = (re *)objc_msgSend(v30, "appendPixelBuffer:withPresentationTime:", pixelBufferOut, &v45);
      if ((v31 & 1) == 0)
      {
        v32 = *re::peerVideoStreamingLogObjects(v31);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          v33 = (void *)*v3;
          log = v32;
          objc_msgSend(v33, "error");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "localizedDescription");
          v35 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
          time = *(CMTime *)(a1 + 64);
          Seconds = CMTimeGetSeconds(&time);
          v37 = *(_QWORD *)(a1 + 56);
          *(_DWORD *)buf = 138412802;
          v52 = v35;
          v53 = 2048;
          v54 = Seconds;
          v55 = 2048;
          v56 = v37;
          _os_log_error_impl(&dword_224FE9000, log, OS_LOG_TYPE_ERROR, "[PeerVideoFileWriter] Failed to append pixel buffer to video file output: %@, timestamp: %f, entity id: %llu", buf, 0x20u);

        }
      }
    }
    else
    {
      v38 = *re::peerVideoStreamingLogObjects(v29);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        v47 = *(CMTime *)(a1 + 64);
        v39 = v38;
        v40 = CMTimeGetSeconds(&v47);
        v41 = *(double *)(a1 + 56);
        *(_DWORD *)buf = 134218240;
        v52 = v40;
        v53 = 2048;
        v54 = v41;
        _os_log_error_impl(&dword_224FE9000, v39, OS_LOG_TYPE_ERROR, "[PeerVideoFileWriter] Not ready for more pixel buffer, timestamp: %f, entity id: %llu", buf, 0x16u);

      }
    }
    CVPixelBufferRelease(pixelBufferOut);

  }
}

__n128 re::PeerVideoFileWriter::destroy(re::PeerVideoFileWriter *this)
{
  id *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  __n128 result;
  uint64_t v9;

  v2 = (id *)*((_QWORD *)this + 8);
  if (v2)
  {
    re::AVFVideoFileWriter::~AVFVideoFileWriter(v2);
    MEMORY[0x2276933B8]();
    *((_QWORD *)this + 8) = 0;
  }
  v3 = *((_QWORD *)this + 1);
  if ((v3 & 1) != 0)
  {
    *((_QWORD *)this + 1) = 1;
    v4 = (_BYTE *)*((_QWORD *)this + 2);
  }
  else
  {
    *((_BYTE *)this + 8) = v3 & 1;
    v4 = (char *)this + 9;
  }
  *v4 = 0;
  v5 = *((_QWORD *)this + 5);
  if ((v5 & 1) != 0)
  {
    *((_QWORD *)this + 5) = 1;
    v6 = (_BYTE *)*((_QWORD *)this + 6);
  }
  else
  {
    *((_BYTE *)this + 40) = v5 & 1;
    v6 = (char *)this + 41;
  }
  *v6 = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0x3FF0000000000000;
  *((_BYTE *)this + 96) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  v7 = MEMORY[0x24BDC0D88];
  result = *(__n128 *)MEMORY[0x24BDC0D88];
  *(_OWORD *)((char *)this + 120) = *MEMORY[0x24BDC0D88];
  v9 = *(_QWORD *)(v7 + 16);
  *((_QWORD *)this + 17) = v9;
  *((__n128 *)this + 9) = result;
  *((_QWORD *)this + 20) = v9;
  return result;
}

void re::PeerVideoFileWriter::~PeerVideoFileWriter(re::PeerVideoFileWriter *this)
{
  __n128 v2;
  uint64_t v3;

  v2 = re::PeerVideoFileWriter::destroy(this);
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if ((*((_BYTE *)this + 40) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 6), v2);
    v2 = 0uLL;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  if (*(_QWORD *)this)
  {
    if ((*((_BYTE *)this + 8) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, __n128))(**(_QWORD **)this + 40))(*(_QWORD *)this, *((_QWORD *)this + 2), v2);
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
}

void re::PeerVideoFileWriter::flush(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  re *v13;
  __int128 v14;
  uint64_t v15;
  CMTime rhs;
  CMTime lhs;
  CMTime v18;
  _QWORD aBlock[4];
  id v20;
  _BYTE v21[24];
  uint64_t v22;
  _BYTE *v23;
  _QWORD v24[3];
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 64))
  {
    lhs = *(CMTime *)(a1 + 144);
    CMTimeMake(&rhs, 1, 90);
    CMTimeAdd(&v18, &lhs, &rhs);
    *(CMTime *)(a1 + 144) = v18;
    if ((*(_BYTE *)(a1 + 8) & 1) != 0)
      v4 = *(_QWORD *)(a1 + 16);
    else
      v4 = a1 + 9;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
      v6 = *(_QWORD *)(a1 + 48);
    else
      v6 = a1 + 41;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@_%llu-%llu_%ux%u_%f.%@"), v5, *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(a1 + 64);
    v14 = *(_OWORD *)(a1 + 144);
    v15 = *(_QWORD *)(a1 + 160);
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN2re19PeerVideoFileWriter5flushENS_8FunctionIFvvEEE_block_invoke;
    aBlock[3] = &unk_24ED61F60;
    v11 = v9;
    v12 = *(_QWORD *)(a2 + 24);
    v20 = v11;
    v22 = v12;
    v23 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v21, a2);
    v13 = (re *)_Block_copy(aBlock);
    v25 = re::globalAllocators(v13)[2];
    v24[0] = &off_24ED61FC8;
    v24[1] = _Block_copy(v13);
    v26 = v24;
    re::AVFVideoFileWriter::stopVideoFileWriter(v10, &v14, (uint64_t)v24);
    if (v26)
    {
      (*(void (**)(_QWORD *))*v26)(v26);
      if (v26 != v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
      v26 = 0;
    }

    if (v23)
    {
      (**(void (***)(_BYTE *))v23)(v23);
      if (v23 != v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
      v23 = 0;
    }

  }
}

void ___ZN2re19PeerVideoFileWriter5flushENS_8FunctionIFvvEEE_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  re *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  id v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x24BDD1580];
  v4 = a2;
  objc_msgSend(v3, "defaultManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(a1 + 32);
  v14 = 0;
  objc_msgSend(v5, "moveItemAtURL:toURL:error:", v4, v6, &v14);

  v7 = v14;
  if (v7)
  {
    v9 = *re::peerVideoStreamingLogObjects(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = *(void **)(a1 + 32);
      v11 = v9;
      objc_msgSend(v10, "path");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "localizedDescription");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v16 = v12;
      v17 = 2112;
      v18 = v13;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "[PeerVideoFileWriter] Failed to rename CALayer video file to: %@, error: %@", buf, 0x16u);

    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72));

}

uint64_t __copy_helper_block_a8_40c24_ZTSN2re8FunctionIFvvEEE(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(a1 + 40, a2 + 40);
}

uint64_t (***__destroy_helper_block_a8_40c24_ZTSN2re8FunctionIFvvEEE(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 40);
}

void re::PeerVideoFileWriter::appendFrame(uint64_t a1, uint64_t a2, void *a3, int a4, float64_t a5, double a6)
{
  uint64_t v8;
  int64_t v9;
  size_t Width;
  re *Height;
  int v14;
  double v15;
  float64x2_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  re *v32;
  uint64_t v33;
  void **v34;
  NSObject *v35;
  dispatch_queue_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  re *v53;
  NSObject *v54;
  re *v55;
  NSObject *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  re *v79;
  void *v80;
  NSObject *v81;
  char v82;
  void *v83;
  void *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  void *v95;
  re *v96;
  re *v97;
  uint64_t v98;
  const char *v99;
  NSObject *v100;
  const char *v101;
  NSObject *v102;
  void *v103;
  uint64_t v104;
  re *v105;
  re *v106;
  __CVBuffer *v107;
  float32x2_t v108;
  NSObject *v109;
  NSObject *v110;
  _BOOL8 v111;
  uint64_t v112;
  NSObject *v113;
  void *v114;
  re *v115;
  NSObject *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  int v125;
  void *v126;
  CMTime v129;
  __int128 v130;
  uint64_t v131;
  _QWORD aBlock[4];
  id v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  CMTime v137;
  id v138;
  id v139;
  _QWORD v140[3];
  uint64_t v141;
  _QWORD *v142;
  _BYTE v143[24];
  uint8_t v144[4];
  void *v145;
  __int16 v146;
  void *v147;
  _BYTE buf[24];
  void *v149;
  uint64_t v150;
  __CVBuffer *v151;
  float32x2_t v152;
  void *v153;
  CMTime v154;
  uint64_t v155;

  v155 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)a2)
  {
    v21 = *re::peerVideoStreamingLogObjects((re *)a1);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v22 = "[PeerVideoFileWriter] Invalid arg to appendFrame: pixelBuffer is nullptr";
    v23 = v21;
    v24 = 2;
    goto LABEL_15;
  }
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a2 + 16);
  if (v8 == v9)
    return;
  memset(&v137, 0, sizeof(v137));
  CMTimeMake(&v137, v9, 90);
  *(CMTime *)(a1 + 144) = v137;
  Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)a2);
  Height = (re *)CVPixelBufferGetHeight(*(CVPixelBufferRef *)a2);
  v14 = (int)Height;
  if (!Width || !Height)
  {
    v25 = *re::peerVideoStreamingLogObjects(Height);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = Width;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v14;
    v22 = "[PeerVideoFileWriter] Invalid arg to appendFrame: pixelBuffer width: %u, height: %u";
    v23 = v25;
    v24 = 14;
LABEL_15:
    _os_log_error_impl(&dword_224FE9000, v23, OS_LOG_TYPE_ERROR, v22, buf, v24);
    return;
  }
  v126 = a3;
  v16.f64[0] = a5;
  v15 = a6;
  v17 = ((unint64_t)a5 & 0xFFFFFFFFFFFFFFC0) + 64;
  v18 = ((unint64_t)a6 & 0xFFFFFFFFFFFFFFC0) + 64;
  v19 = *(_QWORD *)(a1 + 64);
  if (v19)
  {
    if (v17 == *(_QWORD *)(a1 + 72) && v18 == *(_QWORD *)(a1 + 80) && *(unsigned __int8 *)(a1 + 96) == a4)
      goto LABEL_68;
    *(_QWORD *)(a1 + 64) = 0;
    if ((*(_BYTE *)(a1 + 8) & 1) != 0)
      v20 = *(_QWORD *)(a1 + 16);
    else
      v20 = a1 + 9;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v20);
    v26 = objc_claimAutoreleasedReturnValue();
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
      v27 = *(_QWORD *)(a1 + 48);
    else
      v27 = a1 + 41;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v123 = (void *)v26;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@_%llu-%llu_%ux%u_%f.%@"), v26, *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v135 = *(_OWORD *)(a1 + 144);
    v136 = *(_QWORD *)(a1 + 160);
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZN2re19PeerVideoFileWriter11appendFrameERKNS_15InputVideoFrameEddyb_block_invoke;
    aBlock[3] = &unk_24ED61F98;
    v31 = v30;
    v133 = v31;
    v134 = v19;
    v32 = (re *)_Block_copy(aBlock);
    v141 = re::globalAllocators(v32)[2];
    v140[0] = &off_24ED61FC8;
    v140[1] = _Block_copy(v32);
    v142 = v140;
    re::AVFVideoFileWriter::stopVideoFileWriter(v19, &v135, (uint64_t)v140);
    if (v142)
    {
      (*(void (**)(_QWORD *))*v142)(v142);
      if (v142 != v140)
        (*(void (**)(uint64_t))(*(_QWORD *)v141 + 40))(v141);
      v142 = 0;
    }

    v18 = ((unint64_t)a6 & 0xFFFFFFFFFFFFFFC0) + 64;
  }
  *(_QWORD *)(a1 + 72) = v17;
  *(_QWORD *)(a1 + 80) = v18;
  *(_BYTE *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 16);
  v33 = operator new();
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)(v33 + 16) = 0u;
  *(_OWORD *)(v33 + 32) = 0u;
  *(_BYTE *)(v33 + 48) = 1;
  *(_QWORD *)(v33 + 56) = 0;
  v34 = (void **)(v33 + 56);
  *(_QWORD *)(v33 + 64) = 0;
  *(_QWORD *)(v33 + 72) = 0;
  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, -1);
  v35 = objc_claimAutoreleasedReturnValue();
  v36 = dispatch_queue_create("AVFVideoFileWriter", v35);
  v37 = *(void **)(v33 + 40);
  *(_QWORD *)(v33 + 40) = v36;

  *(_QWORD *)(a1 + 64) = v33;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    v38 = *(_QWORD *)(a1 + 16);
  else
    v38 = a1 + 9;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    v40 = *(_QWORD *)(a1 + 48);
  else
    v40 = a1 + 41;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v40);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = *(_QWORD *)(a1 + 72);
  v42 = *(_QWORD *)(a1 + 80);
  v125 = *(unsigned __int8 *)(a1 + 96);
  v44 = v39;
  v45 = v41;
  v46 = v45;
  if (!v44 || !v45 || !(_DWORD)v43 || !(_DWORD)v42)
  {

LABEL_40:
LABEL_41:
    v56 = *re::peerVideoStreamingLogObjects(v55);
    if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
LABEL_42:
      *(_QWORD *)(a1 + 64) = 0;
      return;
    }
    v98 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v98;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v126;
    v99 = "[PeerVideoFileWriter] Failed to create peer video file writer, sync frame number: %llu, entity id: %llu";
LABEL_54:
    _os_log_error_impl(&dword_224FE9000, v56, OS_LOG_TYPE_ERROR, v99, buf, 0x16u);
    goto LABEL_42;
  }
  v124 = v45;
  v47 = MTLCreateSystemDefaultDevice();
  v48 = *v34;
  *v34 = v47;

  v49 = *v34;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "\n\n#include <metal_stdlib>\n\nusing namespace metal;\n"
    "\n"
    "struct VertexData\n"
    "{\n"
    "    float4 position [[position]]; //nominal position\n"
    "    float2 xy; //pixel position used for sampling\n"
    "};\n"
    "\n"
    "vertex VertexData resamplingAndPaddingVertexShader(uint vid [[ vertex_id ]],\n"
    "                                                   device const float2 *vertices [[ buffer(0) ]],\n"
    "                                                   device const float2& inputSize [[ buffer(1) ]],\n"
    "                                                   device const float2& targetSize [[ buffer(2) ]],\n"
    "                                                   device const float2& outputSize [[ buffer(3) ]])\n"
    "{\n"
    "    VertexData vertexData;\n"
    "    \n"
    "    float2 offset = (outputSize - targetSize) / 2.0f * float2(-1, 1);\n"
    "    vertexData.position = float4((vertices[vid] * (targetSize / 2.0f) + offset) / (outputSize / 2.0f), 0.0f, 1.0f);\n"
    "    vertexData.xy = vertices[vid] * (inputSize / 2.0f) * float2(1, -1) + (inputSize / 2.0f);\n"
    "    \n"
    "    return vertexData;\n"
    "}\n"
    "\n"
    "fragment float4 resamplingAndPaddingFragmentShader(VertexData inputFragment [[ stage_in ]],\n"
    "                                                   texture2d<float> inputTexture [[ texture(0) ]])\n"
    "{\n"
    "    constexpr sampler colorSampler(coord::pixel,\n"
    "                                   mip_filter::none,\n"
    "                                   mag_filter::linear,\n"
    "                                   min_filter::linear,\n"
    "                                   address::clamp_to_zero);\n"
    "    \n"
    "    return inputTexture.sample(colorSampler, inputFragment.xy);\n"
    "}\n"
    "\n");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v139 = 0;
  v51 = (void *)objc_msgSend(v49, "newLibraryWithSource:options:error:", v50, 0, &v139);
  v52 = v139;

  if (v52)
  {
    v54 = *re::peerVideoStreamingLogObjects(v53);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      v102 = v54;
      objc_msgSend(v52, "localizedDescription");
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v144 = 138412546;
      v145 = v103;
      v146 = 2048;
      v147 = v126;
      _os_log_error_impl(&dword_224FE9000, v102, OS_LOG_TYPE_ERROR, "[PeerVideoFileWriter] Failed to create MTLLibrary with source: %@, entity id: %llu", v144, 0x16u);

    }
    v46 = v124;

    goto LABEL_40;
  }
  v122 = v44;
  v57 = (void *)objc_opt_new();
  objc_msgSend(v57, "setLabel:", CFSTR("texture resampling and padding"));
  v58 = (void *)objc_msgSend(v51, "newFunctionWithName:", CFSTR("resamplingAndPaddingVertexShader"));
  objc_msgSend(v57, "setVertexFunction:", v58);

  v121 = v51;
  v59 = (void *)objc_msgSend(v51, "newFunctionWithName:", CFSTR("resamplingAndPaddingFragmentShader"));
  objc_msgSend(v57, "setFragmentFunction:", v59);

  objc_msgSend(v57, "colorAttachments");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v60, "objectAtIndexedSubscript:", 0);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v61, "setPixelFormat:", 70);

  objc_msgSend(v57, "colorAttachments");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v62, "objectAtIndexedSubscript:", 0);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v63, "setBlendingEnabled:", 0);

  v119 = v57;
  v64 = objc_msgSend(*(id *)(v33 + 56), "newRenderPipelineStateWithDescriptor:error:", v57, 0);
  v65 = *(void **)(v33 + 64);
  *(_QWORD *)(v33 + 64) = v64;

  objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 80, v43, v42, 0);
  v66 = objc_claimAutoreleasedReturnValue();
  v67 = *(void **)(v33 + 72);
  *(_QWORD *)(v33 + 72) = v66;

  *(_DWORD *)(v33 + 32) = v43;
  *(_DWORD *)(v33 + 36) = v42;
  v68 = (void *)MEMORY[0x24BDD17C8];
  objc_msgSend(MEMORY[0x24BDD1880], "UUID");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v69, "UUIDString");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v68, "stringWithFormat:", CFSTR("%@_%@.%@"), v122, v70, v124);
  v71 = objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v71);
  v72 = objc_claimAutoreleasedReturnValue();
  v73 = *(void **)(v33 + 24);
  *(_QWORD *)(v33 + 24) = v72;

  v74 = *(_QWORD *)(v33 + 24);
  v75 = *MEMORY[0x24BDB1C40];
  v138 = 0;
  objc_msgSend(MEMORY[0x24BDB2400], "assetWriterWithURL:fileType:error:", v74, v75, &v138);
  v76 = objc_claimAutoreleasedReturnValue();
  v77 = v138;
  v78 = *(id *)v33;
  *(_QWORD *)v33 = v76;

  v120 = v77;
  if (v77)
  {
    v80 = (void *)v71;
    v81 = *re::peerVideoStreamingLogObjects(v79);
    if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
    {
      v113 = v81;
      v84 = v120;
      objc_msgSend(v120, "localizedDescription");
      v114 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v144 = 138412546;
      v145 = v114;
      v146 = 2048;
      v147 = v126;
      _os_log_error_impl(&dword_224FE9000, v113, OS_LOG_TYPE_ERROR, "[PeerVideoFileWriter] Failed to create AVAssetWriter: %@, entity id: %llu", v144, 0x16u);

      v82 = 0;
      v83 = v119;
    }
    else
    {
      v82 = 0;
      v83 = v119;
      v84 = v120;
    }
    goto LABEL_64;
  }
  objc_msgSend(*(id *)v33, "setShouldOptimizeForNetworkUse:", 0);
  objc_msgSend(*(id *)v33, "setMovieTimeScale:", 90);
  v85 = (_QWORD *)MEMORY[0x24BDB22A0];
  v86 = *MEMORY[0x24BDB2268];
  if (!v125)
    v85 = (_QWORD *)MEMORY[0x24BDB22A8];
  *(_QWORD *)buf = *v85;
  v87 = *MEMORY[0x24BDB2368];
  *(_QWORD *)v143 = v86;
  *(_QWORD *)&v143[8] = v87;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v43);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)&buf[8] = v88;
  *(_QWORD *)&v143[16] = *MEMORY[0x24BDB2310];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v42);
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)&buf[16] = v89;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", buf, v143, 3);
  v90 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDB2408], "assetWriterInputWithMediaType:outputSettings:", *MEMORY[0x24BDB1D50], v90);
  v91 = objc_claimAutoreleasedReturnValue();
  v92 = *(void **)(v33 + 8);
  *(_QWORD *)(v33 + 8) = v91;

  v93 = *(void **)(v33 + 8);
  if (!v93)
  {
    v80 = (void *)v71;
    v100 = *re::peerVideoStreamingLogObjects(0);
    if (!os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
      goto LABEL_62;
    *(_DWORD *)v144 = 134217984;
    v145 = v126;
    v101 = "[PeerVideoFileWriter] Failed to create AVAssetWriterInput, entity id: %llu";
LABEL_61:
    _os_log_error_impl(&dword_224FE9000, v100, OS_LOG_TYPE_ERROR, v101, v144, 0xCu);
    goto LABEL_62;
  }
  objc_msgSend(v93, "setExpectsMediaDataInRealTime:", 0);
  objc_msgSend(*(id *)(v33 + 8), "setMediaTimeScale:", 90);
  objc_msgSend(MEMORY[0x24BDB2418], "assetWriterInputPixelBufferAdaptorWithAssetWriterInput:sourcePixelBufferAttributes:", *(_QWORD *)(v33 + 8), 0);
  v94 = objc_claimAutoreleasedReturnValue();
  v95 = *(void **)(v33 + 16);
  *(_QWORD *)(v33 + 16) = v94;

  if (!*(_QWORD *)(v33 + 16))
  {
    v80 = (void *)v71;
    v100 = *re::peerVideoStreamingLogObjects(v96);
    if (!os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
      goto LABEL_62;
    *(_DWORD *)v144 = 134217984;
    v145 = v126;
    v101 = "[PeerVideoFileWriter] Failed to create AVAssetWriterInputPixelBufferAdaptor, entity id: %llu";
    goto LABEL_61;
  }
  v97 = (re *)objc_msgSend(*(id *)v33, "canAddInput:", *(_QWORD *)(v33 + 8));
  v80 = (void *)v71;
  if ((v97 & 1) == 0)
  {
    v100 = *re::peerVideoStreamingLogObjects(v97);
    if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v144 = 134217984;
      v145 = v126;
      v101 = "[PeerVideoFileWriter] Can't add video input to AVAssetWriter, entity id: %llu";
      goto LABEL_61;
    }
LABEL_62:
    v82 = 0;
    goto LABEL_63;
  }
  objc_msgSend(*(id *)v33, "addInput:", *(_QWORD *)(v33 + 8));
  v82 = 1;
LABEL_63:
  v83 = v119;
  v84 = 0;

LABEL_64:
  if ((v82 & 1) == 0)
    goto LABEL_41;
  v104 = *(_QWORD *)(a1 + 64);
  v130 = *MEMORY[0x24BDC0D88];
  v131 = *(_QWORD *)(MEMORY[0x24BDC0D88] + 16);
  v105 = *(re **)v104;
  if (!*(_QWORD *)v104 || (v105 = (re *)-[re startWriting](v105, "startWriting"), (v105 & 1) == 0))
  {
    v110 = *re::peerVideoStreamingLogObjects(v105);
    v111 = os_log_type_enabled(v110, OS_LOG_TYPE_ERROR);
    if (v111)
    {
      v115 = *(re **)v104;
      v116 = v110;
      -[re error](v115, "error");
      v117 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v117, "localizedDescription");
      v118 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v143 = 138412546;
      *(_QWORD *)&v143[4] = v118;
      *(_WORD *)&v143[12] = 2048;
      *(_QWORD *)&v143[14] = v126;
      _os_log_error_impl(&dword_224FE9000, v116, OS_LOG_TYPE_ERROR, "[PeerVideoFileWriter] Failed to start writing: %@, entity id: %llu", v143, 0x16u);

    }
    v56 = *re::peerVideoStreamingLogObjects((re *)v111);
    if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      goto LABEL_42;
    v112 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v112;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v126;
    v99 = "[PeerVideoFileWriter] Failed to start peer video file writer, sync frame number: %llu, entity id: %llu";
    goto LABEL_54;
  }
  v106 = *(re **)v104;
  *(_OWORD *)buf = v130;
  *(_QWORD *)&buf[16] = v131;
  -[re startSessionAtSourceTime:](v106, "startSessionAtSourceTime:", buf);
  *(_BYTE *)(v104 + 48) = 0;
  v19 = *(_QWORD *)(a1 + 64);
  v16.f64[0] = a5;
  v15 = a6;
LABEL_68:
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 16);
  v107 = *(__CVBuffer **)a2;
  v129 = v137;
  if (*(_QWORD *)a2)
  {
    v16.f64[1] = v15;
    v108 = vcvt_f32_f64(v16);
    CVPixelBufferRetain(v107);
    v109 = *(NSObject **)(v19 + 40);
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZN2re18AVFVideoFileWriter34appendPixelBufferToVideoFileWriterEP10__CVBufferDv2_f6CMTimey_block_invoke;
    v149 = &__block_descriptor_88_e5_v8__0l;
    v150 = v19;
    v151 = v107;
    v152 = v108;
    v154 = v129;
    v153 = v126;
    dispatch_async(v109, buf);
  }
}

void ___ZN2re19PeerVideoFileWriter11appendFrameERKNS_15InputVideoFrameEddyb_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  re *v8;
  NSObject *v9;
  id *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x24BDD1580];
  v4 = a2;
  objc_msgSend(v3, "defaultManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(a1 + 32);
  v15 = 0;
  objc_msgSend(v5, "moveItemAtURL:toURL:error:", v4, v6, &v15);

  v7 = v15;
  if (v7)
  {
    v9 = *re::peerVideoStreamingLogObjects(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = *(void **)(a1 + 32);
      v12 = v9;
      objc_msgSend(v11, "path");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "localizedDescription");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v17 = v13;
      v18 = 2112;
      v19 = v14;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "[PeerVideoFileWriter] Failed to rename CALayer video file to: %@, error: %@", buf, 0x16u);

    }
  }
  v10 = *(id **)(a1 + 40);
  if (v10)
  {
    re::AVFVideoFileWriter::~AVFVideoFileWriter(v10);
    MEMORY[0x2276933B8]();
  }

}

uint64_t re::internal::Callable<void({block_pointer} {__strong})(NSURL *),void ()(NSURL *)>::~Callable(uint64_t a1)
{

  return a1;
}

void re::internal::Callable<void({block_pointer} {__strong})(NSURL *),void ()(NSURL *)>::~Callable(uint64_t a1)
{

  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<void({block_pointer} {__strong})(NSURL *),void ()(NSURL *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

_QWORD *re::internal::Callable<void({block_pointer} {__strong})(NSURL *),void ()(NSURL *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED61FC8;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

_QWORD *re::internal::Callable<void({block_pointer} {__strong})(NSURL *),void ()(NSURL *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED61FC8;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

uint64_t re::internal::Callable<void({block_pointer} {__strong})(NSURL *),void ()(NSURL *)>::size()
{
  return 16;
}

uint64_t *re::ecs2::allocInfo_SkyboxComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_224);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_224))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410D368, 0);
    *(uint64_t *)((char *)&qword_25410D378 + 6) = 0;
    qword_25410D378 = 0;
    qword_25410D388 = 0;
    qword_25410D390 = 0xFFFFFFFFLL;
    qword_25410D368 = (uint64_t)&off_24ED7DAA8;
    qword_25410D398 = (uint64_t)"SkyboxComponent";
    dword_25410D3A0 = 0;
    xmmword_25410D3A8 = 0u;
    unk_25410D3B8 = 0u;
    xmmword_25410D3C8 = 0u;
    qword_25410D3D8 = 0;
    __cxa_guard_release(&_MergedGlobals_224);
  }
  return &qword_25410D368;
}

void re::ecs2::initInfo_SkyboxComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0x86D071A0DABBBDE6;
  v18[1] = "SkyboxComponent";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_25410D340);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410D340);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410D350 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "intensityExponent";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410D358 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_AssetHandle((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "material";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x2000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25410D360 = v16;
      __cxa_guard_release(&qword_25410D340);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25410D350;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SkyboxComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SkyboxComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SkyboxComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SkyboxComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

double re::internal::defaultConstruct<re::ecs2::SkyboxComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57708;
  result = 0.0;
  *(_OWORD *)(v3 + 28) = 0u;
  *(_OWORD *)(v3 + 44) = 0u;
  *(_DWORD *)(v3 + 60) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::SkyboxComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  v4 = a3[7];
  if (v4)
  {

    a3[7] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::SkyboxComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57708;
  result = 0.0;
  *(_OWORD *)(v1 + 28) = 0u;
  *(_OWORD *)(v1 + 44) = 0u;
  *(_DWORD *)(v1 + 60) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::SkyboxComponent>(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[7];
  if (v2)
  {

    a1[7] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SkyboxComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkyboxComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkyboxComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkyboxComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkyboxComponent>, this);
}

uint64_t *re::allocInfo_SkyboxSystem(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410D348);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410D348))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410D3E0, 0);
    *(uint64_t *)((char *)&qword_25410D3F0 + 6) = 0;
    qword_25410D3F0 = 0;
    qword_25410D400 = 0;
    qword_25410D408 = 0xFFFFFFFFLL;
    qword_25410D3E0 = (uint64_t)&off_24ED7DAA8;
    qword_25410D410 = (uint64_t)"SkyboxSystem";
    dword_25410D418 = 0;
    unk_25410D420 = 0u;
    unk_25410D430 = 0u;
    unk_25410D440 = 0u;
    qword_25410D450 = 0;
    __cxa_guard_release(&qword_25410D348);
  }
  return &qword_25410D3E0;
}

void re::initInfo_SkyboxSystem(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x3D0F2824BC4FC7F2;
  v5[1] = "SkyboxSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_SkyboxSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SkyboxSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SkyboxSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::SkyboxSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::SkyboxSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SkyboxSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SkyboxSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::SkyboxSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  double result;

  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED62030;
  return result;
}

void *re::internal::defaultDestruct<re::SkyboxSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::SkyboxSystem>(_OWORD *a1)
{
  uint64_t v1;
  double result;

  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = &off_24ED62030;
  return result;
}

void *re::internal::defaultDestructV2<re::SkyboxSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::introspect_SkyboxSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkyboxSystem", (uint64_t (*)(re::internal *))re::allocInfo_SkyboxSystem, (re::IntrospectionBase *(*)(void))re::initInfo_SkyboxSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SkyboxSystem>, this);
}

double re::SkyboxSystem::willAddSceneToECSService(re::SkyboxSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x24BDAC8D0];
  v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkyboxComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v5[0] = this;
  v5[1] = re::SkyboxSystem::onActivateSkyboxComponent;
  v5[2] = 0;
  v5[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>,re::Slice<re::ecs2::SkyboxComponent*>>::createSubscription<re::SkyboxSystem>(re::SkyboxSystem *,REEventHandlerResult (re::SkyboxSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>*,re::Slice<re::ecs2::SkyboxComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>,re::Slice<re::ecs2::SkyboxComponent*>>::Subscription const&,re::Slice<re::ecs2::SkyboxComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 216), (uint64_t)v5);
}

uint64_t re::SkyboxSystem::onActivateSkyboxComponent(float *a1)
{
  re::ecs2::System::resetTaskOptions(a1);
  return 0;
}

void re::SkyboxSystem::willRemoveSceneFromECSService(re::SkyboxSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkyboxComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(_QWORD *)&v4 = this;
  *((_QWORD *)&v4 + 1) = re::SkyboxSystem::onActivateSkyboxComponent;
  v5 = 0;
  v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>,re::Slice<re::ecs2::SkyboxComponent*>>::createSubscription<re::SkyboxSystem>(re::SkyboxSystem *,REEventHandlerResult (re::SkyboxSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>*,re::Slice<re::ecs2::SkyboxComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>,re::Slice<re::ecs2::SkyboxComponent*>>::Subscription const&,re::Slice<re::ecs2::SkyboxComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 216, &v4);
}

uint64_t re::SkyboxSystem::updateScenes(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  _anonymous_namespace_ *v14;
  int v15;
  signed int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t QuaternionFrom;
  int32x2_t v29;
  __int128 v30;
  float32x2_t v31;
  int8x8_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  re::MaterialParameterBlock *v37;
  re::MaterialParameterBlock *v38;
  re::RenderManager *v39;
  uint64_t *v40;
  re::MaterialParameterBlock *v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  int32x4_t v53;
  int32x4_t v54;
  float32x2x2_t v55;
  float v56;
  int32x4_t v57;
  int32x4_t v58;
  float32x2x2_t v59;
  int32x4_t v60;
  float *v61;
  float *v62;
  float v63;
  uint64_t v64;
  uint64_t *v65;
  re::MeshAsset *v66;
  uint64_t v67;
  _anonymous_namespace_ *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _OWORD *v72;
  __int128 v73;
  _QWORD *v74;
  __int128 v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  re::MaterialParameterBlock **v81;
  uint64_t v82;
  _QWORD *v83;
  re::MeshAsset **v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  uint64_t v93;
  re::RenderFrameData *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (**v99)(uint64_t, _QWORD, _QWORD, void *, void *);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  unint64_t v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _OWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (**v126)(uint64_t, _QWORD, _QWORD, void *, void *);
  uint64_t v127;
  uint64_t v128;
  re *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  re *v142;
  uint64_t v143;
  uint64_t v144;
  int32x4_t v145;
  _QWORD *v146;
  uint64_t v147;
  int v148;
  unsigned int v149;
  __int128 v150;
  uint64_t *v151;
  __int128 v152;
  re::MeshAsset *v153;
  __int128 v154;
  re::MaterialParameterBlock *v155;
  uint64_t v156;
  re::DynamicString **v157;
  uint64_t v158;
  _QWORD *v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166[4];
  _BYTE v167[32];
  _OWORD v168[2];
  uint64_t v169[4];
  unint64_t v170;
  __int128 v171;
  __int128 v172;
  unsigned int v173;
  uint64_t v174;
  _BYTE v175[16];
  uint64_t v176[2];
  uint64_t v177;
  float32x4_t v178;
  __int128 v179;
  __int128 v180;
  float32x4_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  char v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  char v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  char v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  _BYTE v220[48];
  float32x4_t v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  _BYTE v229[88];
  __int128 v230;
  __int128 v231;
  _QWORD v232[4];
  char v233;
  uint64_t v234;
  _BYTE v235[32];
  __int128 v236;
  __int128 v237;
  _BYTE v238[32];
  _BYTE v239[48];
  char v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  char v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  void *v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  _OWORD v255[3];
  int v256;
  const char *v257;
  __int16 v258;
  int v259;
  __int16 v260;
  unint64_t v261;
  __int16 v262;
  unint64_t v263;
  float32x4_t v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  uint64_t v269;

  v269 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v3 = result;
    v4 = v220;
    v5 = *(_QWORD **)a2;
    v6 = *(_QWORD *)a2 + 8 * v2;
    v145 = vdupq_n_s32(0x7F800000u);
    __asm { FMOV            V10.2S, #1.0 }
    v147 = result;
    v144 = v6;
    do
    {
      v158 = *v5;
      if (*v5)
      {
        v12 = *(_QWORD *)(v3 + 104);
        if (!v12 || (*(_BYTE *)(v12 + 424) & 0x10) != 0)
        {
          re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v176);
          re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v175, 3013, v3);
          if (!*(_QWORD *)(v3 + 120))
            goto LABEL_146;
          if (!*(_QWORD *)(v3 + 112))
          {
LABEL_147:
            re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 116);
            _os_crash();
            __break(1u);
          }
          v146 = v5;
          v161 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 136) + 24))(*(_QWORD *)(v3 + 136));
          v14 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v161 + 16))();
          v15 = *((_DWORD *)v14 + 31);
          if (!v15)
            v15 = *((_DWORD *)v14 + 4);
          v16 = v15 + 1;
          v173 = 0;
          v171 = 0u;
          v172 = 0u;
          v174 = 0x7FFFFFFFLL;
          v159 = (_QWORD *)re::RenderManager::perFrameAllocator(*(re::RenderManager **)(v3 + 112));
          v17 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v158 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkyboxComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          if (v17)
          {
            v18 = *(_QWORD *)(v17 + 24);
            if (v18)
            {
              v19 = *(uint64_t **)(v17 + 40);
              v20 = &v19[v18];
              v151 = v20;
              do
              {
                v21 = *v19;
                v22 = *(_QWORD *)(*v19 + 16);
                if ((*(_BYTE *)(v22 + 288) & 1) != 0)
                {
                  (*(void (**)(float32x4_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v161 + 8))(&v178, v161, *(_QWORD *)(*v19 + 16));
                  if (v178.i8[0])
                    v23 = v178.u64[1];
                  else
                    v23 = 0;
                  v170 = v23;
                  if ((_QWORD)v171)
                  {
                    v24 = 0x94D049BB133111EBLL
                        * ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) >> 27));
                    v25 = *(unsigned int *)(*((_QWORD *)&v171 + 1) + 4 * ((v24 ^ (v24 >> 31)) % DWORD2(v172)));
                    if ((_DWORD)v25 != 0x7FFFFFFF)
                    {
                      while (*(_QWORD *)(v172 + 704 * v25 + 16) != v23)
                      {
                        LODWORD(v25) = *(_DWORD *)(v172 + 704 * v25 + 8) & 0x7FFFFFFF;
                        if ((_DWORD)v25 == 0x7FFFFFFF)
                          goto LABEL_21;
                      }
                      goto LABEL_71;
                    }
                  }
LABEL_21:
                  v26 = *(_QWORD *)(v21 + 40);
                  if (v26)
                  {
                    v27 = atomic_load((unsigned int *)(v26 + 704));
                    if (v27 == 2)
                    {
                      v156 = v171;
                      re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v22, (const re::ecs2::Entity *)1, &v264);
                      v178 = v264;
                      v179 = v265;
                      v180 = v266;
                      QuaternionFrom = re::makeQuaternionFromMatrix<float>(&v178);
                      *((int32x2_t *)&v30 + 1) = v29;
                      *(_QWORD *)&v30 = QuaternionFrom;
                      v31 = (float32x2_t)vzip1_s32(v29, (int32x2_t)(v30 >> 32));
                      v32 = vorr_s8((int8x8_t)vcgt_f32(v31, (float32x2_t)__PAIR64__(QuaternionFrom, v29.u32[1])), (int8x8_t)vcge_f32((float32x2_t)__PAIR64__(QuaternionFrom, v29.u32[1]), v31));
                      v33 = vorn_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8(v32), 1), v32).u8[0];
                      if ((v33 & 1) != 0)
                        v34 = 0x3F80000000000000;
                      else
                        v34 = (uint64_t)v29;
                      if ((v33 & 1) != 0)
                        v35 = 0;
                      else
                        v35 = QuaternionFrom;
                      ++*(_DWORD *)(*(_QWORD *)(v21 + 40) + 260);
                      v36 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(v21 + 32));
                      v37 = *(re::MaterialParameterBlock **)(v36 + 1672);
                      if (v37)
                      {
                        v37 = (re::MaterialParameterBlock *)re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(v37, v159);
                        v155 = v37;
                      }
                      else
                      {
                        v155 = 0;
                      }
                      v38 = *(re::MaterialParameterBlock **)(v21 + 56);
                      if (!v38)
                      {
                        v39 = *(re::RenderManager **)(v147 + 112);
                        v40 = re::globalAllocators(v37);
                        v38 = (re::MaterialParameterBlock *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v40[2] + 32))(v40[2], 1008, 8);
                        v41 = re::MaterialParameterBlock::MaterialParameterBlock(v38, v39);
                        v42 = *(_QWORD *)(v21 + 56);
                        *(_QWORD *)(v21 + 56) = v41;
                        if (v42)
                        {

                          v38 = *(re::MaterialParameterBlock **)(v21 + 56);
                        }
                      }
                      v43 = v35;
                      v44 = *(float *)&v34;
                      v45 = v44 + v44;
                      v46 = (float)(*((float *)&v35 + 1) + *((float *)&v35 + 1)) * *((float *)&v35 + 1);
                      v47 = (float)(v44 + v44) * v44;
                      v48 = (float)(*(float *)&v43 + *(float *)&v43) * *((float *)&v35 + 1);
                      v49 = (float)(*(float *)&v43 + *(float *)&v43) * *(float *)&v34;
                      v50 = (float)(*((float *)&v35 + 1) + *((float *)&v35 + 1)) * *(float *)&v34;
                      v51 = (float)(*(float *)&v43 + *(float *)&v43) * *((float *)&v34 + 1);
                      v52 = (float)(*((float *)&v35 + 1) + *((float *)&v35 + 1)) * *((float *)&v34 + 1);
                      v53.i32[3] = 0;
                      *(float *)v53.i32 = 1.0 - (float)(v46 + v47);
                      *(float *)&v53.i32[1] = v48 + (float)(v45 * *((float *)&v34 + 1));
                      v54.i32[3] = 0;
                      *(float *)v54.i32 = v49 + v52;
                      *(float *)&v54.i32[1] = v50 - v51;
                      v55 = (float32x2x2_t)vzip1q_s32((int32x4_t)v53.u64[0], (int32x4_t)v54.u64[0]);
                      *(float *)&v53.i32[2] = v49 - v52;
                      v56 = (float)(*(float *)&v43 + *(float *)&v43) * *(float *)&v43;
                      v57.i32[3] = 0;
                      *(float *)v57.i32 = v48 - (float)(v45 * *((float *)&v34 + 1));
                      *(float *)&v57.i32[1] = 1.0 - (float)(v56 + v47);
                      v58 = vzip1q_s32((int32x4_t)v57.u64[0], (int32x4_t)0);
                      *(float *)&v57.i32[2] = v51 + v50;
                      *(float *)&v54.i32[2] = 1.0 - (float)(v56 + v46);
                      v59 = (float32x2x2_t)vzip2q_s32(v53, v54);
                      v60 = vzip2q_s32(v57, (int32x4_t)xmmword_2260E5D70);
                      v61 = (float *)v167;
                      vst2_f32(v61, v55);
                      v61 += 4;
                      *(int32x4_t *)v61 = vzip2q_s32((int32x4_t)v55, v58);
                      v62 = (float *)v168;
                      vst2_f32(v62, v59);
                      v168[1] = vzip2q_s32((int32x4_t)v59, v60);
                      re::MaterialParameterBlock::setMatrix4x4F(v38, "matrixRotation", v167, (uint64_t)v169);
                      v169[0] = 0;
                      v63 = exp2f(*(float *)(v21 + 28));
                      re::MaterialParameterBlock::setFloat(v38, "intensityScale", v63, (uint64_t)v166);
                      v166[0] = 0;
                      v153 = (re::MeshAsset *)re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(v38, v159);
                      v64 = *(_QWORD *)(v147 + 120);
                      v65 = re::MeshAsset::assetType(v153);
                      (*(void (**)(int *__return_ptr, uint64_t, const char *, uint64_t *))(*(_QWORD *)v64 + 32))(&v256, v64, "sharedCubeMesh.compiledmesh", v65);
                      v66 = (re::MeshAsset *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)&v256);
                      re::MeshAsset::boundingBoxForModel(v66, 0, &v250);
                      v67 = *(_QWORD *)(v22 + 296);
                      v68 = (_anonymous_namespace_ *)re::MeshAsset::partCountForModel(v66, 0);
                      v163 = 0;
                      v164 = 0;
                      v165 = 0;
                      if (v68)
                      {
                        v69 = 0;
                        v70 = 0;
                        while (1)
                        {
                          re::MeshAsset::boundingBoxForPartOnModel(v66, 0, v70, v255);
                          v71 = v164;
                          if (v164 <= v70)
                            break;
                          v72 = (_OWORD *)(v165 + v69);
                          v73 = v255[1];
                          *v72 = v255[0];
                          v72[1] = v73;
                          ++v70;
                          v69 += 32;
                          if (v68 == (_anonymous_namespace_ *)v70)
                            goto LABEL_40;
                        }
                        v177 = 0;
                        v181 = 0u;
                        v182 = 0u;
                        v179 = 0u;
                        v180 = 0u;
                        v178 = 0u;
                        v116 = MEMORY[0x24BDACB70];
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v220 = 136315906;
                        *(_QWORD *)&v220[4] = "operator[]";
                        *(_WORD *)&v220[12] = 1024;
                        *(_DWORD *)&v220[14] = 468;
                        *(_WORD *)&v220[18] = 2048;
                        *(_QWORD *)&v220[20] = v70;
                        *(_WORD *)&v220[28] = 2048;
                        *(_QWORD *)&v220[30] = v71;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_142:
                        v177 = 0;
                        v106 = (unint64_t)&v256;
                        v267 = 0u;
                        v268 = 0u;
                        v265 = 0u;
                        v266 = 0u;
                        v264 = 0u;
                        v108 = MEMORY[0x24BDACB70];
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        v256 = 136315906;
                        v257 = "operator[]";
                        v258 = 1024;
                        v259 = 858;
                        v260 = 2048;
                        v261 = v116;
                        v262 = 2048;
                        v263 = v70;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_143:
                        re::internal::assertLog((re::internal *)4, v109, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
                        _os_crash();
                        __break(1u);
LABEL_144:
                        v264.i64[0] = 0;
                        v181 = 0u;
                        v182 = 0u;
                        v179 = 0u;
                        v180 = 0u;
                        v178 = 0u;
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v220 = 136315906;
                        *(_QWORD *)(v4 + 4) = "operator[]";
                        *(_WORD *)&v220[12] = 1024;
                        *(_DWORD *)(v4 + 14) = 858;
                        *(_WORD *)&v220[18] = 2048;
                        *(_QWORD *)(v4 + 20) = v108;
                        *(_WORD *)&v220[28] = 2048;
                        *(_QWORD *)(v4 + 30) = v106;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_145:
                        re::internal::assertLog((re::internal *)4, v131, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
                        _os_crash();
                        __break(1u);
LABEL_146:
                        re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) ", "m_assetService", "updateSceneInternal", 115);
                        _os_crash();
                        __break(1u);
                        goto LABEL_147;
                      }
LABEL_40:
                      v233 = 0;
                      v235[0] = 0;
                      *(_OWORD *)&v235[8] = 0u;
                      memset(v220, 0, 40);
                      v221 = 0u;
                      v222 = 0u;
                      v223 = 0u;
                      v224 = 0u;
                      v225 = 0u;
                      v226 = 0u;
                      v227 = 0u;
                      v228 = 0u;
                      v229[0] = 0;
                      memset(&v229[8], 0, 80);
                      v230 = 0u;
                      v231 = 0u;
                      memset(v232, 0, 28);
                      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
                        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
                      v74 = v159;
                      *(_QWORD *)&v235[24] = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
                      *(_QWORD *)&v236 = _D10;
                      DWORD2(v236) = 1065353216;
                      v237 = 0u;
                      memset(v238, 0, 19);
                      *(_QWORD *)&v238[20] = 0xFFFFFFFF00000001;
                      *(int32x4_t *)&v239[8] = v145;
                      *(_QWORD *)&v75 = 0x7F0000007FLL;
                      *((_QWORD *)&v75 + 1) = 0x7F0000007FLL;
                      *(_OWORD *)&v239[24] = v75;
                      *(_QWORD *)&v239[40] = 0;
                      v240 = 0;
                      v243 = 0;
                      v244 = 0;
                      v249 = 0x10100010001;
                      v76 = *((_QWORD *)v66 + 47);
                      v178.i64[0] = *((_QWORD *)v66 + 49);
                      v178.i64[1] = v76;
                      v77 = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v159 + 32))(v159, 24, 8);
                      v77[1] = 0;
                      v77[2] = 0;
                      *v77 = 0;
                      re::FixedArray<re::DataArrayHandle<re::DeformationStack>>::init<>(v77, (uint64_t)v159, v178.u64[1]);
                      re::FixedArray<re::SkinningInfluence>::copy(v77, (uint64_t)&v178);
                      v78 = v77[1];
                      *(_QWORD *)v220 = v77[2];
                      *(_QWORD *)&v220[8] = v78;
                      v178.i64[0] = (uint64_t)&v250;
                      v178.i64[1] = 1;
                      v79 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v74 + 32))(v74, 72, 8);
                      *(_QWORD *)&v220[24] = re::MeshBoundingBoxes::MeshBoundingBoxes(v79, (uint64_t)v159, (const void **)&v178, 1);
                      v178.i64[0] = v165;
                      v178.i64[1] = v164;
                      v80 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v74 + 32))(v74, 72, 8);
                      *(_QWORD *)&v220[32] = re::MeshBoundingBoxes::MeshBoundingBoxes(v80, (uint64_t)v159, (const void **)&v178, 1);
                      *(_QWORD *)&v239[40] = *(_QWORD *)&v220[32];
                      v221 = v264;
                      v222 = v265;
                      v223 = v266;
                      v224 = v267;
                      if (v155)
                      {
                        v81 = (re::MaterialParameterBlock **)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v159 + 32))(v159, 8, 8);
                        *v81 = v155;
                        *(_QWORD *)&v229[24] = v81;
                        *(_QWORD *)&v229[32] = 1;
                      }
                      v82 = *(_QWORD *)(v36 + 1664);
                      v83 = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v159 + 32))(v159, 8, 8);
                      *v83 = v82;
                      *(_QWORD *)&v225 = v83;
                      *((_QWORD *)&v225 + 1) = 1;
                      v84 = (re::MeshAsset **)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v159 + 32))(v159, 8, 8);
                      *v84 = v153;
                      *(_QWORD *)&v229[8] = v84;
                      *(_QWORD *)&v229[16] = 1;
                      *(_QWORD *)&v238[8] = v67;
                      LODWORD(v85) = *(_DWORD *)v238 & 0xFFFFFFF7;
                      HIDWORD(v85) = *(_DWORD *)&v238[4] | 8;
                      *(_QWORD *)v238 = v85;
                      v190 = *(_OWORD *)&v229[16];
                      v191 = *(_OWORD *)&v229[32];
                      v192 = *(_OWORD *)&v229[48];
                      v193 = *(_OWORD *)&v229[64];
                      v186 = v226;
                      v187 = v227;
                      v188 = v228;
                      v189 = *(_OWORD *)v229;
                      v182 = v222;
                      v183 = v223;
                      v184 = v224;
                      v185 = v225;
                      v178 = *(float32x4_t *)v220;
                      v179 = *(_OWORD *)&v220[16];
                      v180 = *(_OWORD *)&v220[32];
                      v181 = v221;
                      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::HashBrown((uint64_t)&v194, (uint64_t *)&v229[80]);
                      v197 = v232[3];
                      v198 = v233;
                      if (v233)
                        v199 = v234;
                      v206 = *(_OWORD *)v239;
                      v207 = *(_OWORD *)&v239[16];
                      v208 = *(_OWORD *)&v239[32];
                      v202 = v236;
                      v203 = v237;
                      v204 = *(_OWORD *)v238;
                      v205 = *(_OWORD *)&v238[16];
                      v200 = *(_OWORD *)v235;
                      v201 = *(_OWORD *)&v235[16];
                      v209 = v240;
                      v20 = v151;
                      if (v240)
                      {
                        v210 = v241;
                        v211 = v242;
                      }
                      v212 = v243;
                      v213 = v244;
                      if (v244)
                      {
                        v214 = v245;
                        v215 = v246;
                        v216 = v247;
                        v217 = v248;
                      }
                      v218 = v249;
                      v219 = v67;
                      v86 = 0x94D049BB133111EBLL
                          * ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) >> 27));
                      v87 = v86 ^ (v86 >> 31);
                      if (v156)
                      {
                        v88 = v87 % DWORD2(v172);
                        v89 = *(unsigned int *)(*((_QWORD *)&v171 + 1) + 4 * v88);
                        if ((_DWORD)v89 != 0x7FFFFFFF)
                        {
                          while (*(_QWORD *)(v172 + 704 * v89 + 16) != v23)
                          {
                            LODWORD(v89) = *(_DWORD *)(v172 + 704 * v89 + 8) & 0x7FFFFFFF;
                            if ((_DWORD)v89 == 0x7FFFFFFF)
                              goto LABEL_56;
                          }
                          goto LABEL_57;
                        }
                      }
                      else
                      {
                        LODWORD(v88) = 0;
                      }
LABEL_56:
                      re::HashTable<unsigned long long,re::SkyboxSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::SkyboxData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v171, v88, v87, &v170, (__int128 *)&v178);
                      ++HIDWORD(v174);
LABEL_57:
                      if (v196)
                      {
                        if (v195)
                          v195 = 0;
                        if (v194)
                          (*(void (**)(void))(*(_QWORD *)v196 + 40))();
                      }
                      if (v232[2])
                      {
                        if ((_QWORD)v230)
                          *(_QWORD *)&v230 = 0;
                        if (*(_QWORD *)&v229[80])
                          (*(void (**)(void))(*(_QWORD *)v232[2] + 40))();
                      }
                      if (v163 && v164)
                        (*(void (**)(void))(*(_QWORD *)v163 + 40))();
                      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v256);
                      goto LABEL_71;
                    }
                  }
                  re::AssetHandle::loadAsync((re::AssetHandle *)(v21 + 32));
                }
LABEL_71:
                ++v19;
              }
              while (v19 != v20);
            }
          }
          v90 = *(_QWORD *)(*(_QWORD *)(v147 + 112) + 104);
          if (v90)
            v157 = (re::DynamicString **)re::RenderFrameBox::get(v90 + 344, 0xFFFFFFFFFFFFFFFuLL);
          else
            v157 = 0;
          v160 = v173;
          v91 = 0;
          if (v173)
          {
            v92 = (_DWORD *)(v172 + 8);
            while ((*v92 & 0x80000000) == 0)
            {
              v92 += 176;
              if (v173 == ++v91)
              {
                LODWORD(v91) = v173;
                break;
              }
            }
          }
          if (v173 != (_DWORD)v91)
          {
            v94 = (re::RenderFrameData *)(v157 + 33);
            v95 = v91;
            v96 = v172;
            do
            {
              v97 = v96 + 704 * v95;
              re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v158, *(const re::ecs2::Scene **)(v97 + 16), v157, &v163);
              v170 = v163 >> 1;
              v98 = re::RenderFrameData::stream(v94, (const re::WeakStringID *)&v170);
              v99 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v98, (uint64_t *)&v250);
              if (!v99)
              {
                v140 = *(_QWORD *)(*(_QWORD *)(v98 + 48) + 8);
                v141 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v140 + 32))(v140, 56, 8);
                *(_QWORD *)v141 = 0;
                *(_QWORD *)(v141 + 8) = 0;
                *(_DWORD *)(v141 + 16) = 1;
                *(_QWORD *)(v141 + 32) = 0;
                *(_QWORD *)(v141 + 40) = 0;
                *(_QWORD *)(v141 + 24) = 0;
                *(_DWORD *)(v141 + 48) = 0;
                v142 = (re *)re::BucketArray<re::MeshScene,4ul>::init(v141, v140, 1uLL);
                v143 = re::globalAllocators(v142)[2];
                *(_QWORD *)v220 = &off_24ED62100;
                *(_QWORD *)&v220[8] = v140;
                *(_QWORD *)&v220[24] = v143;
                *(_QWORD *)&v220[32] = v220;
                v178.i64[1] = v141;
                v178.i64[0] = (uint64_t)std::__any_imp::_SmallHandler<re::BucketArray<re::MeshScene,4ul> *>::__handle[abi:nn180100];
                v181.i64[1] = v143;
                *(_QWORD *)&v182 = 0;
                re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v180, (uint64_t)v220);
                v99 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v98, (uint64_t *)&v250, (re *)&v178);
                if ((_QWORD)v182)
                {
                  v264.i64[0] = (uint64_t)&v178;
                  (*(void (**)(_QWORD, float32x4_t *))(*(_QWORD *)v182 + 16))(v182, &v264);
                  if ((_QWORD)v182)
                  {
                    (**(void (***)(_QWORD))v182)(v182);
                    if ((__int128 *)v182 != &v180)
                      (*(void (**)(uint64_t))(*(_QWORD *)v181.i64[1] + 40))(v181.i64[1]);
                    *(_QWORD *)&v182 = 0;
                  }
                }
                if (v178.i64[0])
                  ((void (*)(int))v178.i64[0])(0);
                if (*(_QWORD *)&v220[32])
                {
                  (***(void (****)(_QWORD))&v220[32])(*(_QWORD *)&v220[32]);
                  if (*(_BYTE **)&v220[32] != v220)
                    (*(void (**)(_QWORD))(**(_QWORD **)&v220[24] + 40))(*(_QWORD *)&v220[24]);
                }
              }
              v162 = v97;
              v100 = v97 + 32;
              v190 = *(_OWORD *)(v97 + 224);
              v191 = *(_OWORD *)(v97 + 240);
              v192 = *(_OWORD *)(v97 + 256);
              v193 = *(_OWORD *)(v97 + 272);
              v186 = *(_OWORD *)(v97 + 160);
              v187 = *(_OWORD *)(v97 + 176);
              v188 = *(_OWORD *)(v97 + 192);
              v189 = *(_OWORD *)(v97 + 208);
              v182 = *(_OWORD *)(v97 + 96);
              v183 = *(_OWORD *)(v97 + 112);
              v184 = *(_OWORD *)(v97 + 128);
              v185 = *(_OWORD *)(v97 + 144);
              v178 = *(float32x4_t *)(v97 + 32);
              v179 = *(_OWORD *)(v97 + 48);
              v180 = *(_OWORD *)(v97 + 64);
              v181 = *(float32x4_t *)(v97 + 80);
              v102 = *(_QWORD *)(v97 + 336);
              v4 = *(_BYTE **)(v97 + 344);
              v103 = *(_OWORD *)(v97 + 288);
              v104 = *(_OWORD *)(v97 + 304);
              *(_OWORD *)(v97 + 288) = 0u;
              *(_OWORD *)(v97 + 304) = 0u;
              v105 = *(_OWORD *)(v97 + 320);
              *(_OWORD *)(v97 + 320) = 0u;
              *(_OWORD *)(v97 + 336) = 0u;
              v106 = *(unsigned int *)(v97 + 352);
              v107 = *(unsigned __int8 *)(v97 + 360);
              v108 = *(_QWORD *)(v97 + 368);
              v223 = *(_OWORD *)(v100 + 424);
              v224 = *(_OWORD *)(v100 + 440);
              v225 = *(_OWORD *)(v100 + 456);
              v226 = *(_OWORD *)(v100 + 472);
              *(_OWORD *)&v220[16] = *(_OWORD *)(v100 + 360);
              *(_OWORD *)&v220[32] = *(_OWORD *)(v100 + 376);
              v221 = *(float32x4_t *)(v100 + 392);
              v222 = *(_OWORD *)(v100 + 408);
              *(_OWORD *)v220 = *(_OWORD *)(v100 + 344);
              v109 = *(unsigned __int8 *)(v100 + 496);
              if (*(_BYTE *)(v100 + 496))
              {
                *(_OWORD *)((char *)v255 + 15) = *(_OWORD *)(v100 + 512);
                *(_OWORD *)((char *)&v255[1] + 15) = *(_OWORD *)(v100 + 528);
              }
              v110 = *(_QWORD *)(v100 + 544);
              v111 = *(unsigned __int8 *)(v100 + 560);
              if (*(_BYTE *)(v100 + 560))
              {
                v251 = *(_OWORD *)(v100 + 576);
                v252 = *(_OWORD *)(v100 + 592);
                v253 = *(_OWORD *)(v100 + 608);
                v254 = *(_OWORD *)(v100 + 624);
              }
              v112 = *(_QWORD *)(v100 + 640);
              v113 = *(_QWORD *)(v101 + 40);
              v70 = *(_QWORD *)(v101 + 8);
              if (v113 + 1 > 4 * v70)
              {
                v148 = v111;
                v149 = v109;
                v114 = *(_QWORD *)(v100 + 640);
                v115 = v110;
                v152 = v104;
                v154 = v103;
                v150 = v105;
                re::BucketArray<re::MeshScene,4ul>::setBucketsCapacity((_QWORD *)v101, (v113 + 4) >> 2);
                v105 = v150;
                v104 = v152;
                v111 = v148;
                v109 = v149;
                v103 = v154;
                v110 = v115;
                v112 = v114;
                v70 = *(_QWORD *)(v101 + 8);
              }
              v116 = v113 >> 2;
              if (v70 <= v113 >> 2)
                goto LABEL_142;
              if ((*(_BYTE *)(v101 + 16) & 1) != 0)
                v117 = v101 + 24;
              else
                v117 = *(_QWORD *)(v101 + 32);
              v94 = (re::RenderFrameData *)(v157 + 33);
              v118 = *(_QWORD *)(v117 + 8 * v116);
              ++*(_QWORD *)(v101 + 40);
              ++*(_DWORD *)(v101 + 48);
              v119 = v118 + 656 * (v113 & 3);
              *(_OWORD *)(v119 + 192) = v190;
              *(_OWORD *)(v119 + 208) = v191;
              *(_OWORD *)(v119 + 224) = v192;
              *(_OWORD *)(v119 + 240) = v193;
              *(_OWORD *)(v119 + 128) = v186;
              *(_OWORD *)(v119 + 144) = v187;
              *(_OWORD *)(v119 + 160) = v188;
              *(_OWORD *)(v119 + 176) = v189;
              *(_OWORD *)(v119 + 64) = v182;
              *(_OWORD *)(v119 + 80) = v183;
              *(_OWORD *)(v119 + 96) = v184;
              *(_OWORD *)(v119 + 112) = v185;
              *(float32x4_t *)v119 = v178;
              *(_OWORD *)(v119 + 16) = v179;
              *(_OWORD *)(v119 + 32) = v180;
              *(float32x4_t *)(v119 + 48) = v181;
              *(_OWORD *)(v119 + 288) = v105;
              *(_OWORD *)(v119 + 304) = 0u;
              *(_QWORD *)(v119 + 304) = v102;
              *(_QWORD *)(v119 + 312) = v4;
              *(_OWORD *)(v119 + 256) = v103;
              *(_OWORD *)(v119 + 272) = v104;
              *(_DWORD *)(v119 + 320) = v106;
              *(_BYTE *)(v119 + 328) = v107;
              if (v107)
                *(_QWORD *)(v118 + 656 * (v113 & 3) + 336) = v108;
              v120 = v118 + 656 * (v113 & 3);
              v4 = v220;
              *(_OWORD *)(v120 + 424) = v223;
              *(_OWORD *)(v120 + 440) = v224;
              *(_OWORD *)(v120 + 456) = v225;
              *(_OWORD *)(v120 + 472) = v226;
              *(_OWORD *)(v120 + 360) = *(_OWORD *)&v220[16];
              *(_OWORD *)(v120 + 376) = *(_OWORD *)&v220[32];
              *(float32x4_t *)(v120 + 392) = v221;
              *(_OWORD *)(v120 + 408) = v222;
              *(_OWORD *)(v120 + 344) = *(_OWORD *)v220;
              *(_BYTE *)(v120 + 496) = v109;
              if ((_DWORD)v109)
              {
                v121 = v118 + 656 * (v113 & 3);
                *(_OWORD *)(v121 + 512) = *(_OWORD *)((char *)v255 + 15);
                *(_OWORD *)(v121 + 528) = *(_OWORD *)((char *)&v255[1] + 15);
              }
              v122 = v118 + 656 * (v113 & 3);
              *(_QWORD *)(v122 + 544) = v110;
              *(_BYTE *)(v122 + 560) = v111;
              if (v111)
              {
                v123 = (_OWORD *)(v118 + 656 * (v113 & 3));
                v123[36] = v251;
                v123[37] = v252;
                v123[38] = v253;
                v123[39] = v254;
              }
              *(_QWORD *)(v118 + 656 * (v113 & 3) + 640) = v112;
              v124 = *(_QWORD *)(v101 + 40);
              if (!v124)
                goto LABEL_143;
              re::BucketArray<re::MeshScene,4ul>::operator[](v101, v124 - 1);
              v250 = (void *)(v163 >> 1);
              v125 = re::RenderFrameData::stream((re::RenderFrameData *)(v157 + 33), (const re::WeakStringID *)&v250);
              v126 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v125, (uint64_t *)&v264);
              if (!v126)
              {
                v127 = *(_QWORD *)(*(_QWORD *)(v125 + 48) + 8);
                v128 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v127 + 32))(v127, 56, 8);
                *(_QWORD *)v128 = 0;
                *(_QWORD *)(v128 + 8) = 0;
                *(_DWORD *)(v128 + 16) = 1;
                *(_QWORD *)(v128 + 32) = 0;
                *(_QWORD *)(v128 + 40) = 0;
                *(_QWORD *)(v128 + 24) = 0;
                *(_DWORD *)(v128 + 48) = 0;
                v129 = (re *)re::BucketArray<re::ecs2::SkyboxMeshID,4ul>::init(v128, v127, 1uLL);
                v178.i64[1] = v128;
                v178.i64[0] = (uint64_t)std::__any_imp::_SmallHandler<re::BucketArray<re::ecs2::SkyboxMeshID,4ul> *>::__handle[abi:nn180100];
                v181.i64[1] = re::globalAllocators(v129)[2];
                *(_QWORD *)&v182 = 0;
                v126 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v125, (uint64_t *)&v264, (re *)&v178);
                if ((_QWORD)v182)
                {
                  *(_QWORD *)v220 = &v178;
                  (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)v182 + 16))(v182, v220);
                  if ((_QWORD)v182)
                  {
                    (**(void (***)(_QWORD))v182)(v182);
                    if ((__int128 *)v182 != &v180)
                      (*(void (**)(uint64_t))(*(_QWORD *)v181.i64[1] + 40))(v181.i64[1]);
                    *(_QWORD *)&v182 = 0;
                  }
                }
                if (v178.i64[0])
                  ((void (*)(int))v178.i64[0])(0);
              }
              v132 = *v130;
              v133 = *(_QWORD *)(v162 + 688);
              v134 = *(_QWORD *)(*v130 + 40);
              v106 = *(_QWORD *)(*v130 + 8);
              if (v134 + 1 > 4 * v106)
              {
                re::BucketArray<re::ecs2::SkyboxMeshID,4ul>::setBucketsCapacity((_QWORD *)*v130, (v134 + 4) >> 2);
                v106 = *(_QWORD *)(v132 + 8);
              }
              v108 = v134 >> 2;
              if (v106 <= v134 >> 2)
                goto LABEL_144;
              if ((*(_BYTE *)(v132 + 16) & 1) != 0)
                v135 = v132 + 24;
              else
                v135 = *(_QWORD *)(v132 + 32);
              v136 = *(_QWORD *)(v135 + 8 * v108);
              ++*(_QWORD *)(v132 + 40);
              ++*(_DWORD *)(v132 + 48);
              *(_QWORD *)(v136 + 8 * (v134 & 3)) = v133;
              v137 = *(_QWORD *)(v132 + 40);
              if (!v137)
                goto LABEL_145;
              re::BucketArray<unsigned long,4ul>::operator[](v132, v137 - 1);
              re::StringID::destroyString((re::StringID *)&v163);
              v96 = v172;
              if (v173 <= (int)v91 + 1)
                v138 = v91 + 1;
              else
                v138 = v173;
              while (1)
              {
                v95 = (v91 + 1);
                if (v138 - 1 == (_DWORD)v91)
                  break;
                LODWORD(v91) = v91 + 1;
                v139 = v95;
                if ((*(_DWORD *)(v172 + 704 * v95 + 8) & 0x80000000) != 0)
                  goto LABEL_128;
              }
              v139 = v138;
LABEL_128:
              LODWORD(v91) = v139;
            }
            while (v160 != v139);
          }
          v93 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v158 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkyboxComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          v3 = v147;
          if (!v93 || !*(_QWORD *)(v93 + 24))
          {
            v178.i64[0] = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkyboxComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
            re::ecs2::SystemSchedulingDisabler::disableSchedulingIfNoComponent(v147, (uint64_t)&v178, 1);
          }
          re::HashTable<unsigned long long,re::SkyboxSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::SkyboxData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)&v171);
          re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v175);
          result = re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v176);
          v5 = v146;
          v6 = v144;
        }
      }
      ++v5;
    }
    while (v5 != (_QWORD *)v6);
  }
  return result;
}

uint64_t *re::HashTable<unsigned long long,re::SkyboxSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::SkyboxData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 288;
      do
      {
        v6 = a1[2] + v5;
        v7 = *(_DWORD *)(v6 - 280);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 - 280) = v7 & 0x7FFFFFFF;
          re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v6);
          v3 = *((unsigned int *)a1 + 8);
        }
        ++v4;
        v5 += 704;
      }
      while (v4 < v3);
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

void re::SkyboxSystem::~SkyboxSystem(re::SkyboxSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::SkyboxSystem::typeInfo(re::SkyboxSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkyboxSystem", (uint64_t (*)(re::internal *))re::allocInfo_SkyboxSystem, (re::IntrospectionBase *(*)(void))re::initInfo_SkyboxSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SkyboxSystem>, 0);
}

id re::internal::defaultRetain<re::SkyboxSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::SkyboxSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>,re::Slice<re::ecs2::SkyboxComponent*>>::createSubscription<re::SkyboxSystem>(re::SkyboxSystem *,REEventHandlerResult (re::SkyboxSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>*,re::Slice<re::ecs2::SkyboxComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>,re::Slice<re::ecs2::SkyboxComponent*>>::Subscription const&,re::Slice<re::ecs2::SkyboxComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

void re::HashTable<unsigned long long,re::SkyboxSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::SkyboxData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 704 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t *re::HashTable<unsigned long long,re::SkyboxSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::SkyboxData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, __int128 *a5)
{
  unsigned int v10;
  unsigned int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t *result;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;
  __int128 v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[44];

  v10 = *(_DWORD *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    v10 = *(_DWORD *)(a1 + 32);
    v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = v10 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v56, 0, 36);
          *(_QWORD *)&v56[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::SkyboxSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::SkyboxData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v56, v14, v13);
          v16 = *(_OWORD *)v56;
          *(_OWORD *)v56 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v56[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v56[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v56[24];
          *(_OWORD *)&v56[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v56[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = v18 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::SkyboxSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::SkyboxData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 16);
              v22 += 704;
              --v21;
            }
            while (v21);
          }
          re::HashTable<unsigned long long,re::SkyboxSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::SkyboxData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)v56);
        }
      }
      else
      {
        if (v13)
          v25 = 2 * v12;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 704 * v10 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 704 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  v26 = 704 * v10;
  *(_DWORD *)(v23 + v26 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v26) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v26 + 16) = *a4;
  v27 = *(_QWORD *)(a1 + 16);
  v28 = v27 + v26;
  v29 = v27 + v26 + 32;
  v31 = a5[14];
  v30 = a5[15];
  v32 = a5[13];
  *(_OWORD *)(v28 + 224) = a5[12];
  *(_OWORD *)(v28 + 240) = v32;
  *(_OWORD *)(v28 + 256) = v31;
  *(_OWORD *)(v28 + 272) = v30;
  v33 = a5[11];
  v34 = a5[8];
  v35 = a5[9];
  *(_OWORD *)(v28 + 192) = a5[10];
  *(_OWORD *)(v28 + 208) = v33;
  *(_OWORD *)(v28 + 160) = v34;
  *(_OWORD *)(v28 + 176) = v35;
  v36 = a5[7];
  v37 = a5[4];
  v38 = a5[5];
  *(_OWORD *)(v28 + 128) = a5[6];
  *(_OWORD *)(v28 + 144) = v36;
  *(_OWORD *)(v28 + 96) = v37;
  *(_OWORD *)(v28 + 112) = v38;
  v39 = *a5;
  v40 = a5[1];
  v41 = a5[3];
  *(_OWORD *)(v28 + 64) = a5[2];
  *(_OWORD *)(v28 + 80) = v41;
  *(_OWORD *)(v28 + 32) = v39;
  *(_OWORD *)(v28 + 48) = v40;
  *(_OWORD *)(v28 + 320) = 0u;
  *(_OWORD *)(v28 + 336) = 0u;
  *(_OWORD *)(v28 + 288) = 0u;
  *(_OWORD *)(v28 + 304) = 0u;
  result = re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)(v27 + v26 + 288), (uint64_t *)a5 + 32);
  *(_DWORD *)(v28 + 352) = *((_DWORD *)a5 + 80);
  v43 = *((unsigned __int8 *)a5 + 328);
  *(_BYTE *)(v28 + 360) = v43;
  if (v43)
    *(_QWORD *)(v29 + 336) = *((_QWORD *)a5 + 42);
  *(_OWORD *)(v29 + 344) = *(__int128 *)((char *)a5 + 344);
  v44 = *(__int128 *)((char *)a5 + 360);
  v45 = *(__int128 *)((char *)a5 + 376);
  v46 = *(__int128 *)((char *)a5 + 408);
  *(_OWORD *)(v29 + 392) = *(__int128 *)((char *)a5 + 392);
  *(_OWORD *)(v29 + 408) = v46;
  *(_OWORD *)(v29 + 360) = v44;
  *(_OWORD *)(v29 + 376) = v45;
  v47 = *(__int128 *)((char *)a5 + 424);
  v48 = *(__int128 *)((char *)a5 + 440);
  v49 = *(__int128 *)((char *)a5 + 472);
  *(_OWORD *)(v29 + 456) = *(__int128 *)((char *)a5 + 456);
  *(_OWORD *)(v29 + 472) = v49;
  *(_OWORD *)(v29 + 424) = v47;
  *(_OWORD *)(v29 + 440) = v48;
  v50 = *((unsigned __int8 *)a5 + 496);
  *(_BYTE *)(v29 + 496) = v50;
  if (v50)
  {
    v51 = a5[33];
    *(_OWORD *)(v29 + 512) = a5[32];
    *(_OWORD *)(v29 + 528) = v51;
  }
  *(_QWORD *)(v29 + 544) = *((_QWORD *)a5 + 68);
  v52 = *((unsigned __int8 *)a5 + 560);
  *(_BYTE *)(v29 + 560) = v52;
  if (v52)
  {
    v53 = a5[36];
    v54 = a5[37];
    v55 = a5[39];
    *(_OWORD *)(v29 + 608) = a5[38];
    *(_OWORD *)(v29 + 624) = v55;
    *(_OWORD *)(v29 + 576) = v53;
    *(_OWORD *)(v29 + 592) = v54;
  }
  *(_QWORD *)(v29 + 640) = *((_QWORD *)a5 + 80);
  *(_QWORD *)(v27 + 704 * v10 + 688) = *((_QWORD *)a5 + 82);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

_QWORD *re::BucketArray<re::MeshScene,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::MeshScene,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::MeshScene,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 2624, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void std::__any_imp::_SmallHandler<re::BucketArray<re::MeshScene,4ul> *>::__handle[abi:nn180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2256B9EAC()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

void re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::MeshScene>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::MeshScene>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::operator()(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  result = (uint64_t *)(**a2)(3);
  v4 = *result;
  if (*result)
  {
    v5 = *(_QWORD *)(v4 + 40);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = re::BucketArray<re::MeshScene,4ul>::operator[](v4, i);
        re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v7 + 256);
      }
    }
    while (*(_QWORD *)(v4 + 8))
      re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v4);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    *(_QWORD *)(v4 + 40) = 0;
    ++*(_DWORD *)(v4 + 48);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v4);
  }
  return result;
}

_QWORD *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::MeshScene>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED62100;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::MeshScene>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED62100;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::MeshScene>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::size()
{
  return 16;
}

uint64_t re::BucketArray<re::MeshScene,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 656 * (a2 & 3);
}

_QWORD *re::BucketArray<re::ecs2::SkyboxMeshID,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::SkyboxMeshID,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::SkyboxMeshID,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      v4 = result[1];
      if (v4 > a2)
      {
        v5 = *((_DWORD *)result + 4);
        do
        {
          v6 = v3 + 3;
          if ((v5 & 1) == 0)
            v6 = (_QWORD *)v3[4];
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v6[v4 - 1]);
          v7 = *((_DWORD *)v3 + 4);
          v4 = v3[1] - 1;
          v3[1] = v4;
          v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        v8 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 32, 0);
          v9 = result;
          if (*v3)
          {
            v10 = v3[1];
            v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              v12 = *v8;
              v14 = v10 >= *v8;
              v13 = v10 + 1;
              v14 = !v14 || v12 >= v13;
              if (v14)
                goto LABEL_24;
              v15 = 2 * v12;
              goto LABEL_20;
            }
            v13 = v10 + 1;
            if (v13 >= 3)
            {
              v15 = 4;
LABEL_20:
              if (v15 <= v13)
                v17 = v13;
              else
                v17 = v15;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v16 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          v18 = v3 + 3;
          if ((v11 & 1) == 0)
            v18 = (_QWORD *)v3[4];
          v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void std::__any_imp::_SmallHandler<re::BucketArray<re::ecs2::SkyboxMeshID,4ul> *>::__handle[abi:nn180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2256BA3FC()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

double re::internal::defaultConstruct<re::ecs2::SpecifyLaneCommand>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)a3, 0);
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  result = NAN;
  *(_QWORD *)(a3 + 80) = -1;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 116) = 0u;
  return result;
}

double re::internal::defaultDestruct<re::ecs2::SpecifyLaneCommand>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t i;
  void *v5;
  void *v6;
  uint64_t j;
  double result;

  for (i = 14; i != 12; --i)
  {
    v5 = (void *)a3[i];
    if (v5)
    {

      a3[i] = 0;
    }
  }
  do
  {
    v6 = (void *)a3[i];
    if (v6)
    {

      a3[i] = 0;
    }
    --i;
  }
  while (i != 10);
  for (j = 7; j != 1; j -= 3)
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&a3[j]);
  if (*a3)
  {
    if ((a3[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

double re::internal::defaultConstructV2<re::ecs2::SpecifyLaneCommand>(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)a1, 0);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  result = NAN;
  *(_QWORD *)(a1 + 80) = -1;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  return result;
}

double re::internal::defaultDestructV2<re::ecs2::SpecifyLaneCommand>(_QWORD *a1)
{
  uint64_t i;
  void *v3;
  void *v4;
  uint64_t j;
  double result;

  for (i = 14; i != 12; --i)
  {
    v3 = (void *)a1[i];
    if (v3)
    {

      a1[i] = 0;
    }
  }
  do
  {
    v4 = (void *)a1[i];
    if (v4)
    {

      a1[i] = 0;
    }
    --i;
  }
  while (i != 10);
  for (j = 7; j != 1; j -= 3)
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&a1[j]);
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::ScopeLanePair>>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_25410D4C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25410D4C0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)qword_25410D528);
    qword_25410D528[0] = (uint64_t)&off_24ED622D0;
    __cxa_guard_release(&qword_25410D4C0);
  }
  if ((byte_25410D459 & 1) == 0)
  {
    v1 = re::ecs2::introspect_ScopeLanePair((re::IntrospectionBase **)1);
    if ((byte_25410D459 & 1) == 0)
    {
      v2 = v1;
      byte_25410D459 = 1;
      v3 = *(_DWORD *)(v1 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_25410D528, 0);
      unk_25410D538 = 0x2800000003;
      unk_25410D540 = v3;
      unk_25410D544 = 0;
      *(_QWORD *)&xmmword_25410D548 = 0;
      *((_QWORD *)&xmmword_25410D548 + 1) = 0xFFFFFFFFLL;
      *(_QWORD *)algn_25410D558 = v2;
      qword_25410D560 = 0;
      qword_25410D528[0] = (uint64_t)&off_24ED622D0;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)qword_25410D528, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *(_OWORD *)(v2 + 32);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_25410D548 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::ecs2::CameraViewDescriptor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  double result;
  uint64_t v6;

  v3 = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = xmmword_2260E5D70;
  *(_WORD *)(a3 + 56) = 1;
  *(_DWORD *)(a3 + 48) = 0;
  *(_DWORD *)(a3 + 52) = 117440767;
  *(_BYTE *)(a3 + 60) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_DWORD *)(a3 + 96) = 0;
  do
  {
    v4 = a3 + v3;
    *(_QWORD *)(v4 + 144) = 0;
    *(_QWORD *)(v4 + 120) = 0;
    *(_QWORD *)(v4 + 128) = 0;
    *(_QWORD *)(v4 + 112) = 0;
    v3 += 40;
    *(_DWORD *)(v4 + 136) = 0;
  }
  while (v3 != 80);
  result = 0.0;
  *(_OWORD *)(a3 + 232) = 0u;
  v6 = a3 + 232;
  *(_BYTE *)(v6 - 40) = 0;
  *(_OWORD *)(v6 - 20) = xmmword_22610BC10;
  *(_OWORD *)(v6 - 36) = xmmword_22610BC10;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_WORD *)(v6 + 48) = 1;
  *(_BYTE *)(v6 + 50) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 80) = 0;
  return result;
}

void re::internal::defaultDestruct<re::ecs2::CameraViewDescriptor>(uint64_t a1, uint64_t a2, re::AssetHandle *a3)
{
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t i;

  re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)a3 + 288);
  v4 = 0;
  v5 = (char *)a3 + 272;
  do
  {
    v6 = *(void **)&v5[v4];
    if (v6)
    {

      *(_QWORD *)&v5[v4] = 0;
    }
    v4 -= 8;
  }
  while (v4 != -16);
  v7 = 0;
  v8 = (char *)a3 + 256;
  do
  {
    v9 = *(void **)&v8[v7];
    if (v9)
    {

      *(_QWORD *)&v8[v7] = 0;
    }
    v7 -= 8;
  }
  while (v7 != -16);
  v10 = 0;
  v11 = (char *)a3 + 240;
  do
  {
    v12 = *(void **)&v11[v10];
    if (v12)
    {

      *(_QWORD *)&v11[v10] = 0;
    }
    v10 -= 8;
  }
  while (v10 != -16);
  for (i = 152; i != 72; i -= 40)
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)a3 + i);
  re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)a3 + 72);
  re::AssetHandle::~AssetHandle(a3);
}

uint64_t re::internal::defaultConstructV2<re::ecs2::CameraViewDescriptor>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = xmmword_2260E5D70;
  *(_WORD *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 117440767;
  *(_BYTE *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  do
  {
    v2 = a1 + v1;
    *(_QWORD *)(v2 + 144) = 0;
    *(_QWORD *)(v2 + 120) = 0;
    *(_QWORD *)(v2 + 128) = 0;
    *(_QWORD *)(v2 + 112) = 0;
    v1 += 40;
    *(_DWORD *)(v2 + 136) = 0;
  }
  while (v1 != 80);
  *(_OWORD *)(a1 + 232) = 0u;
  result = a1 + 232;
  *(_BYTE *)(result - 40) = 0;
  *(_OWORD *)(result - 20) = xmmword_22610BC10;
  *(_OWORD *)(result - 36) = xmmword_22610BC10;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_WORD *)(result + 48) = 1;
  *(_BYTE *)(result + 50) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::ecs2::CameraViewDescriptor>(re::AssetHandle *a1)
{
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t i;

  re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)a1 + 288);
  v2 = 0;
  v3 = (char *)a1 + 272;
  do
  {
    v4 = *(void **)&v3[v2];
    if (v4)
    {

      *(_QWORD *)&v3[v2] = 0;
    }
    v2 -= 8;
  }
  while (v2 != -16);
  v5 = 0;
  v6 = (char *)a1 + 256;
  do
  {
    v7 = *(void **)&v6[v5];
    if (v7)
    {

      *(_QWORD *)&v6[v5] = 0;
    }
    v5 -= 8;
  }
  while (v5 != -16);
  v8 = 0;
  v9 = (char *)a1 + 240;
  do
  {
    v10 = *(void **)&v9[v8];
    if (v10)
    {

      *(_QWORD *)&v9[v8] = 0;
    }
    v8 -= 8;
  }
  while (v8 != -16);
  for (i = 152; i != 72; i -= 40)
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)a1 + i);
  re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)a1 + 72);
  re::AssetHandle::~AssetHandle(a1);
}

uint64_t *re::ecs2::allocInfo_CameraViewDescriptorsComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410D498);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410D498))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410D818, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410D828 = 0;
    qword_25410D838 = 0;
    qword_25410D840 = 0xFFFFFFFFLL;
    qword_25410D818 = (uint64_t)&off_24ED7DAA8;
    qword_25410D848 = (uint64_t)"CameraViewDescriptorsComponent";
    dword_25410D850 = 0;
    xmmword_25410D858 = 0u;
    unk_25410D868 = 0u;
    xmmword_25410D878 = 0u;
    qword_25410D888 = 0;
    __cxa_guard_release(&qword_25410D498);
  }
  return &qword_25410D818;
}

void re::ecs2::initInfo_CameraViewDescriptorsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 v14;
  uint64_t *v15;
  unsigned __int8 v16;
  const re::IntrospectionBase *v17;
  unsigned __int8 v18;
  int v19;
  re::IntrospectionRegistry *v20;
  const re::IntrospectionBase *v21;
  const char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  re *v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  const re::IntrospectionBase *v42;
  void *v43;
  uint64_t v44;
  uint64_t *v45;
  const re::IntrospectionBase *v46;
  void *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  unsigned __int8 v58;
  re::IntrospectionRegistry *v59;
  const re::IntrospectionBase *v60;
  const char *v61;
  uint64_t v62;
  uint64_t *v63;
  const re::IntrospectionBase *v64;
  void *v65;
  uint64_t v66;
  uint64_t *v67;
  unsigned __int8 v68;
  const re::IntrospectionBase *v69;
  re::IntrospectionRegistry *v70;
  const re::IntrospectionBase *v71;
  const char *v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned __int8 v75;
  uint64_t *v76;
  unsigned __int8 v77;
  const re::IntrospectionBase *v78;
  unsigned __int8 v79;
  int v80;
  re::IntrospectionRegistry *v81;
  const re::IntrospectionBase *v82;
  const char *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  const re::IntrospectionBase *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  re *v93;
  uint64_t *v94;
  const re::IntrospectionBase *v95;
  void *v96;
  uint64_t v97;
  const re::IntrospectionBase *v98;
  uint64_t *v99;
  unsigned __int8 v100;
  const re::IntrospectionBase *v101;
  re::IntrospectionRegistry *v102;
  const re::IntrospectionBase *v103;
  const char *v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  const char *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114[2];

  *(_QWORD *)&v110 = 0x57901BFF93CFC246;
  *((_QWORD *)&v110 + 1) = "CameraViewDescriptorsComponent";
  re::StringID::destroyString((re::StringID *)&v110);
  *((_OWORD *)this + 2) = v107;
  v4 = atomic_load((unsigned __int8 *)&qword_25410D490);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410D490);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410D4F8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_int((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "renderOrder";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410D500 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = atomic_load((unsigned __int8 *)&qword_25410D4E0);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_25410D4E0))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410D5A8, 0);
        *(uint64_t *)((char *)&qword_25410D5B8 + 6) = 0;
        qword_25410D5B8 = 0;
        *(_QWORD *)&xmmword_25410D5C8 = 0;
        *((_QWORD *)&xmmword_25410D5C8 + 1) = 0xFFFFFFFFLL;
        qword_25410D5A8 = (uint64_t)&off_24ED1FA08;
        qword_25410D5E0 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_25410D5D8);
        qword_25410D5A8 = (uint64_t)&off_24ED62400;
        __cxa_guard_release(&qword_25410D4E0);
      }
      if ((byte_25410D45D & 1) == 0)
      {
        v15 = (uint64_t *)qword_25410D488;
        if (qword_25410D488)
          goto LABEL_10;
        v16 = atomic_load((unsigned __int8 *)&qword_25410D480);
        if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25410D480))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410D7A0, 0);
          *(_QWORD *)(v27 + 22) = 0;
          qword_25410D7B0 = 0;
          *(_QWORD *)&xmmword_25410D7C0 = 0;
          *((_QWORD *)&xmmword_25410D7C0 + 1) = 0xFFFFFFFFLL;
          qword_25410D7A0 = (uint64_t)&off_24ED7DAA8;
          qword_25410D7D0 = (uint64_t)"CameraViewDescriptor";
          dword_25410D7D8 = 0;
          xmmword_25410D7E0 = 0u;
          *(_OWORD *)&qword_25410D7F0 = 0u;
          xmmword_25410D800 = 0u;
          qword_25410D810 = 0;
          __cxa_guard_release(&qword_25410D480);
        }
        qword_25410D488 = (uint64_t)&qword_25410D7A0;
        *(_QWORD *)&v110 = 0xA0AAB9439DFEFD32;
        *((_QWORD *)&v110 + 1) = "CameraViewDescriptor";
        re::StringID::destroyString((re::StringID *)&v110);
        xmmword_25410D7C0 = v108;
        v18 = atomic_load((unsigned __int8 *)&qword_25410D478);
        if ((v18 & 1) == 0)
        {
          v28 = (re *)__cxa_guard_acquire(&qword_25410D478);
          if ((_DWORD)v28)
          {
            v29 = re::introspectionAllocator(v28);
            v31 = re::introspect_AssetHandle((re *)1, v30);
            v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
            *(_DWORD *)v32 = 1;
            *(_QWORD *)(v32 + 8) = "renderGraph";
            *(_QWORD *)(v32 + 16) = v31;
            *(_QWORD *)(v32 + 24) = 0;
            *(_QWORD *)(v32 + 32) = 1;
            *(_DWORD *)(v32 + 40) = 0;
            *(_QWORD *)(v32 + 48) = 0;
            *(_QWORD *)(v32 + 56) = 0;
            *(_DWORD *)(v32 + 64) = 0;
            qword_25410D6C0 = v32;
            v33 = re::introspectionAllocator((re *)v32);
            v35 = re::introspect_BOOL((re *)1, v34);
            v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
            *(_DWORD *)v36 = 1;
            *(_QWORD *)(v36 + 8) = "disableAA";
            *(_QWORD *)(v36 + 16) = v35;
            *(_QWORD *)(v36 + 24) = 0;
            *(_QWORD *)(v36 + 32) = 0x1800000002;
            *(_DWORD *)(v36 + 40) = 0;
            *(_QWORD *)(v36 + 48) = 0;
            *(_QWORD *)(v36 + 56) = 0;
            *(_DWORD *)(v36 + 64) = 0;
            qword_25410D6C8 = v36;
            v37 = re::introspectionAllocator((re *)v36);
            v39 = re::introspect_BOOL((re *)1, v38);
            v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
            *(_DWORD *)v40 = 1;
            *(_QWORD *)(v40 + 8) = "enableUnwarp";
            *(_QWORD *)(v40 + 16) = v39;
            *(_QWORD *)(v40 + 24) = 0;
            *(_QWORD *)(v40 + 32) = 0x1A00000004;
            *(_DWORD *)(v40 + 40) = 0;
            *(_QWORD *)(v40 + 48) = 0;
            *(_QWORD *)(v40 + 56) = 0;
            *(_DWORD *)(v40 + 64) = 0;
            qword_25410D6D0 = v40;
            v41 = re::introspectionAllocator((re *)v40);
            v43 = re::introspect_BOOL((re *)1, v42);
            v44 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 72, 8);
            *(_DWORD *)v44 = 1;
            *(_QWORD *)(v44 + 8) = "disableTonemapping";
            *(_QWORD *)(v44 + 16) = v43;
            *(_QWORD *)(v44 + 24) = 0;
            *(_QWORD *)(v44 + 32) = 0x1900000005;
            *(_DWORD *)(v44 + 40) = 0;
            *(_QWORD *)(v44 + 48) = 0;
            *(_QWORD *)(v44 + 56) = 0;
            *(_DWORD *)(v44 + 64) = 0;
            qword_25410D6D8 = v44;
            v45 = re::introspectionAllocator((re *)v44);
            v47 = re::introspect_BOOL((re *)1, v46);
            v48 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 72, 8);
            *(_DWORD *)v48 = 1;
            *(_QWORD *)(v48 + 8) = "disableDebugDraw";
            *(_QWORD *)(v48 + 16) = v47;
            *(_QWORD *)(v48 + 24) = 0;
            *(_QWORD *)(v48 + 32) = 0x1B00000006;
            *(_DWORD *)(v48 + 40) = 0;
            *(_QWORD *)(v48 + 48) = 0;
            *(_QWORD *)(v48 + 56) = 0;
            *(_DWORD *)(v48 + 64) = 0;
            qword_25410D6E0 = v48;
            v49 = re::introspectionAllocator((re *)v48);
            v50 = re::introspect_Vector4F((re::IntrospectionBase **)1);
            v51 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v49 + 32))(v49, 72, 8);
            *(_DWORD *)v51 = 1;
            *(_QWORD *)(v51 + 8) = "clearColor";
            *(_QWORD *)(v51 + 16) = v50;
            *(_QWORD *)(v51 + 24) = 0;
            *(_QWORD *)(v51 + 32) = 0x2000000007;
            *(_DWORD *)(v51 + 40) = 0;
            *(_QWORD *)(v51 + 48) = 0;
            *(_QWORD *)(v51 + 56) = 0;
            *(_DWORD *)(v51 + 64) = 0;
            qword_25410D6E8 = v51;
            v52 = re::introspectionAllocator((re *)v51);
            v53 = re::introspect_MeshLodSelectOverrideOptions((re::IntrospectionBase **)1);
            v54 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 72, 8);
            *(_DWORD *)v54 = 1;
            *(_QWORD *)(v54 + 8) = "lodOverrideOptions";
            *(_QWORD *)(v54 + 16) = v53;
            *(_QWORD *)(v54 + 24) = 0;
            *(_QWORD *)(v54 + 32) = 0x3800000008;
            *(_DWORD *)(v54 + 40) = 0;
            *(_QWORD *)(v54 + 48) = 0;
            *(_QWORD *)(v54 + 56) = 0;
            *(_DWORD *)(v54 + 64) = 0;
            qword_25410D6F0 = v54;
            v55 = re::introspectionAllocator((re *)v54);
            re::IntrospectionInfo<re::DynamicArray<re::ecs2::ScopeLanePair>>::get();
            v56 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v55 + 32))(v55, 72, 8);
            *(_DWORD *)v56 = 1;
            *(_QWORD *)(v56 + 8) = "pickupScopeLanes";
            *(_QWORD *)(v56 + 16) = qword_25410D528;
            *(_QWORD *)(v56 + 24) = 0;
            *(_QWORD *)(v56 + 32) = 0x4800000009;
            *(_DWORD *)(v56 + 40) = 0;
            *(_QWORD *)(v56 + 48) = 0;
            *(_QWORD *)(v56 + 56) = 0;
            *(_DWORD *)(v56 + 64) = 0;
            qword_25410D6F8 = v56;
            v57 = re::introspectionAllocator((re *)v56);
            v58 = atomic_load((unsigned __int8 *)&qword_25410D4C8);
            if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_25410D4C8))
            {
              re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_25410D630);
              __cxa_guard_release(&qword_25410D4C8);
            }
            if ((byte_25410D45A & 1) == 0)
            {
              byte_25410D45A = 1;
              re::IntrospectionInfo<re::DynamicArray<re::ecs2::ScopeLanePair>>::get();
              re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_25410D630, (const re::IntrospectionBase *)qword_25410D528, 2);
              re::IntrospectionRegistry::add(v59, v60);
              re::getPrettyTypeName((re *)&unk_25410D630, (const re::IntrospectionBase *)&v110);
              if ((BYTE8(v110) & 1) != 0)
                v61 = v111;
              else
                v61 = (char *)&v110 + 9;
              if ((_QWORD)v110 && (BYTE8(v110) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v110 + 40))();
              v110 = xmmword_25410D548;
              xmmword_25410D650 = v113;
              re::StringID::destroyString((re::StringID *)v114);
            }
            v62 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v57 + 32))(v57, 72, 8);
            *(_DWORD *)v62 = 1;
            *(_QWORD *)(v62 + 8) = "pickupScopeLanesPerEye";
            *(_QWORD *)(v62 + 16) = &unk_25410D630;
            *(_QWORD *)(v62 + 24) = 0;
            *(_QWORD *)(v62 + 32) = 0x700000000ALL;
            *(_DWORD *)(v62 + 40) = 0;
            *(_QWORD *)(v62 + 48) = 0;
            *(_QWORD *)(v62 + 56) = 0;
            *(_DWORD *)(v62 + 64) = 0;
            qword_25410D700 = v62;
            v63 = re::introspectionAllocator((re *)v62);
            v65 = re::introspect_ViewMode((re *)1, v64);
            v66 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v63 + 32))(v63, 72, 8);
            *(_DWORD *)v66 = 1;
            *(_QWORD *)(v66 + 8) = "viewMode";
            *(_QWORD *)(v66 + 16) = v65;
            *(_QWORD *)(v66 + 24) = 0;
            *(_QWORD *)(v66 + 32) = 0xC00000000BLL;
            *(_DWORD *)(v66 + 40) = 0;
            *(_QWORD *)(v66 + 48) = 0;
            *(_QWORD *)(v66 + 56) = 0;
            *(_DWORD *)(v66 + 64) = 0;
            qword_25410D708 = v66;
            v67 = re::introspectionAllocator((re *)v66);
            v68 = atomic_load((unsigned __int8 *)&qword_25410D4D0);
            if ((v68 & 1) == 0 && __cxa_guard_acquire(&qword_25410D4D0))
            {
              re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_25410D678);
              __cxa_guard_release(&qword_25410D4D0);
            }
            if ((byte_25410D45B & 1) == 0)
            {
              byte_25410D45B = 1;
              v69 = (const re::IntrospectionBase *)re::ecs2::introspect_CameraViewport((re::IntrospectionBase **)1);
              re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_25410D678, v69, 2);
              re::IntrospectionRegistry::add(v70, v71);
              re::getPrettyTypeName((re *)&unk_25410D678, (const re::IntrospectionBase *)&v110);
              if ((BYTE8(v110) & 1) != 0)
                v72 = v111;
              else
                v72 = (char *)&v110 + 9;
              if ((_QWORD)v110 && (BYTE8(v110) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v110 + 40))();
              v110 = *((_OWORD *)v69 + 2);
              xmmword_25410D698 = v113;
              re::StringID::destroyString((re::StringID *)v114);
            }
            v73 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v67 + 32))(v67, 72, 8);
            *(_DWORD *)v73 = 1;
            *(_QWORD *)(v73 + 8) = "viewport";
            *(_QWORD *)(v73 + 16) = &unk_25410D678;
            *(_QWORD *)(v73 + 24) = 0;
            *(_QWORD *)(v73 + 32) = 0xC40000000CLL;
            *(_DWORD *)(v73 + 40) = 0;
            *(_QWORD *)(v73 + 48) = 0;
            *(_QWORD *)(v73 + 56) = 0;
            *(_DWORD *)(v73 + 64) = 0;
            qword_25410D710 = v73;
            v74 = re::introspectionAllocator((re *)v73);
            v75 = atomic_load((unsigned __int8 *)&qword_25410D4D8);
            if ((v75 & 1) == 0 && __cxa_guard_acquire(&qword_25410D4D8))
            {
              ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410D568, 0);
              *(uint64_t *)((char *)&qword_25410D578 + 6) = 0;
              qword_25410D578 = 0;
              *(_QWORD *)&xmmword_25410D588 = 0;
              *((_QWORD *)&xmmword_25410D588 + 1) = 0xFFFFFFFFLL;
              qword_25410D568 = (uint64_t)&off_24ED1FA08;
              qword_25410D5A0 = 0;
              re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_25410D598);
              qword_25410D568 = (uint64_t)&off_24ED62368;
              __cxa_guard_release(&qword_25410D4D8);
            }
            if ((byte_25410D45C & 1) == 0)
            {
              v76 = (uint64_t *)qword_25410D470;
              if (qword_25410D470)
                goto LABEL_50;
              v77 = atomic_load((unsigned __int8 *)&qword_25410D460);
              if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_25410D460))
              {
                ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410D728, 0);
                *(_QWORD *)(v92 + 22) = 0;
                qword_25410D738 = 0;
                *(_QWORD *)&xmmword_25410D748 = 0;
                *((_QWORD *)&xmmword_25410D748 + 1) = 0xFFFFFFFFLL;
                qword_25410D728 = (uint64_t)&off_24ED7DAA8;
                qword_25410D758 = (uint64_t)"SpecifyLaneCommand";
                dword_25410D760 = 0;
                xmmword_25410D768 = 0u;
                *(_OWORD *)&qword_25410D778 = 0u;
                xmmword_25410D788 = 0u;
                qword_25410D798 = 0;
                __cxa_guard_release(&qword_25410D460);
              }
              qword_25410D470 = (uint64_t)&qword_25410D728;
              *(_QWORD *)&v110 = 0xF5E828FC47FA9F7CLL;
              *((_QWORD *)&v110 + 1) = "SpecifyLaneCommand";
              re::StringID::destroyString((re::StringID *)&v110);
              xmmword_25410D748 = v112;
              v79 = atomic_load((unsigned __int8 *)&qword_25410D468);
              if ((v79 & 1) == 0)
              {
                v93 = (re *)__cxa_guard_acquire(&qword_25410D468);
                if ((_DWORD)v93)
                {
                  v94 = re::introspectionAllocator(v93);
                  v96 = re::IntrospectionInfo<re::DynamicString>::get(1, v95);
                  v97 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v94 + 32))(v94, 72, 8);
                  *(_DWORD *)v97 = 1;
                  *(_QWORD *)(v97 + 8) = "lane";
                  *(_QWORD *)(v97 + 16) = v96;
                  *(_QWORD *)(v97 + 24) = 0;
                  *(_QWORD *)(v97 + 32) = 1;
                  *(_DWORD *)(v97 + 40) = 0;
                  *(_QWORD *)(v97 + 48) = 0;
                  *(_QWORD *)(v97 + 56) = 0;
                  *(_DWORD *)(v97 + 64) = 0;
                  qword_25410D4E8 = v97;
                  v99 = re::introspectionAllocator((re *)v97);
                  v100 = atomic_load((unsigned __int8 *)&qword_25410D4B8);
                  if ((v100 & 1) == 0 && __cxa_guard_acquire(&qword_25410D4B8))
                  {
                    re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_25410D5E8);
                    __cxa_guard_release(&qword_25410D4B8);
                  }
                  if ((_MergedGlobals_225 & 1) == 0)
                  {
                    _MergedGlobals_225 = 1;
                    v101 = (const re::IntrospectionBase *)re::introspect_AssetHandle((re *)1, v98);
                    re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_25410D5E8, v101, 2);
                    re::IntrospectionRegistry::add(v102, v103);
                    re::getPrettyTypeName((re *)&unk_25410D5E8, (const re::IntrospectionBase *)&v110);
                    if ((BYTE8(v110) & 1) != 0)
                      v104 = v111;
                    else
                      v104 = (char *)&v110 + 9;
                    if ((_QWORD)v110 && (BYTE8(v110) & 1) != 0)
                      (*(void (**)(void))(*(_QWORD *)v110 + 40))();
                    v110 = *((_OWORD *)v101 + 2);
                    xmmword_25410D608 = v113;
                    re::StringID::destroyString((re::StringID *)v114);
                  }
                  v105 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v99 + 32))(v99, 72, 8);
                  *(_DWORD *)v105 = 1;
                  *(_QWORD *)(v105 + 8) = "renderTarget";
                  *(_QWORD *)(v105 + 16) = &unk_25410D5E8;
                  *(_QWORD *)(v105 + 24) = 0;
                  *(_QWORD *)(v105 + 32) = 0x2000000002;
                  *(_DWORD *)(v105 + 40) = 0;
                  *(_QWORD *)(v105 + 48) = 0;
                  *(_QWORD *)(v105 + 56) = 0;
                  *(_DWORD *)(v105 + 64) = 0;
                  qword_25410D4F0 = v105;
                  __cxa_guard_release(&qword_25410D468);
                }
              }
              qword_25410D738 = 0x8800000008;
              v76 = &qword_25410D728;
              dword_25410D740 = 8;
              word_25410D744 = 0;
              dword_25410D760 = 2;
              *(_QWORD *)&xmmword_25410D768 = &qword_25410D4E8;
              *((_QWORD *)&xmmword_25410D768 + 1) = re::internal::defaultConstruct<re::ecs2::SpecifyLaneCommand>;
              qword_25410D778 = (uint64_t)re::internal::defaultDestruct<re::ecs2::SpecifyLaneCommand>;
              *(_QWORD *)&xmmword_25410D788 = 0;
              qword_25410D780 = 0;
              *((_QWORD *)&xmmword_25410D788 + 1) = re::internal::defaultConstructV2<re::ecs2::SpecifyLaneCommand>;
              qword_25410D798 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::SpecifyLaneCommand>;
              re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25410D728, v78);
              v110 = v112;
              if ((byte_25410D45C & 1) == 0)
              {
LABEL_50:
                byte_25410D45C = 1;
                v80 = *((_DWORD *)v76 + 6);
                ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410D568, 0);
                qword_25410D578 = 0x2800000003;
                dword_25410D580 = v80;
                word_25410D584 = 0;
                *(_QWORD *)&xmmword_25410D588 = 0;
                *((_QWORD *)&xmmword_25410D588 + 1) = 0xFFFFFFFFLL;
                qword_25410D598 = (uint64_t)v76;
                qword_25410D5A0 = 0;
                qword_25410D568 = (uint64_t)&off_24ED62368;
                re::IntrospectionRegistry::add(v81, v82);
                re::getPrettyTypeName((re *)&qword_25410D568, (const re::IntrospectionBase *)&v110);
                if ((BYTE8(v110) & 1) != 0)
                  v83 = v111;
                else
                  v83 = (char *)&v110 + 9;
                if ((_QWORD)v110 && (BYTE8(v110) & 1) != 0)
                  (*(void (**)(void))(*(_QWORD *)v110 + 40))();
                v112 = *((_OWORD *)v76 + 2);
                v84 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v113);
                if (v84)
                {
                  v85 = *v84;
                  *((_QWORD *)&v109 + 1) = v85;
                }
                else
                {
                  v114[0] = v112;
                  re::TypeBuilder::beginListType((uint64_t)&v110, (uint64_t *)&v113, 1, 0x28uLL, 8uLL, v114);
                  re::TypeBuilder::setConstructor((uint64_t)&v110, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
                  re::TypeBuilder::setDestructor((uint64_t)&v110, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
                  re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v110, 1);
                  re::TypeBuilder::setListAccessors((uint64_t)&v110, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
                  re::TypeBuilder::setListIndexer((uint64_t)&v110, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
                  re::TypeBuilder::setListIterator((uint64_t)&v110, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
                  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v110, v86);
                }
                xmmword_25410D588 = v109;
                re::StringID::destroyString((re::StringID *)&v113);
              }
            }
            v87 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v74 + 32))(v74, 72, 8);
            *(_DWORD *)v87 = 1;
            *(_QWORD *)(v87 + 8) = "specifyCommands";
            *(_QWORD *)(v87 + 16) = &qword_25410D568;
            *(_QWORD *)(v87 + 24) = 0;
            *(_QWORD *)(v87 + 32) = 0x1200000000DLL;
            *(_DWORD *)(v87 + 40) = 0;
            *(_QWORD *)(v87 + 48) = 0;
            *(_QWORD *)(v87 + 56) = 0;
            *(_DWORD *)(v87 + 64) = 0;
            qword_25410D718 = v87;
            v88 = re::introspectionAllocator((re *)v87);
            v90 = re::introspect_BOOL((re *)1, v89);
            v91 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v88 + 32))(v88, 72, 8);
            *(_DWORD *)v91 = 1;
            *(_QWORD *)(v91 + 8) = "forceHidePassthroughFeed";
            *(_QWORD *)(v91 + 16) = v90;
            *(_QWORD *)(v91 + 24) = 0;
            *(_QWORD *)(v91 + 32) = 0x1C00000013;
            *(_DWORD *)(v91 + 40) = 0;
            *(_QWORD *)(v91 + 48) = 0;
            *(_QWORD *)(v91 + 56) = 0;
            *(_DWORD *)(v91 + 64) = 0;
            qword_25410D720 = v91;
            __cxa_guard_release(&qword_25410D478);
          }
        }
        qword_25410D7B0 = 0x15000000008;
        v15 = &qword_25410D7A0;
        dword_25410D7B8 = 16;
        word_25410D7BC = 0;
        dword_25410D7D8 = 13;
        *(_QWORD *)&xmmword_25410D7E0 = &qword_25410D6C0;
        *((_QWORD *)&xmmword_25410D7E0 + 1) = re::internal::defaultConstruct<re::ecs2::CameraViewDescriptor>;
        qword_25410D7F0 = (uint64_t)re::internal::defaultDestruct<re::ecs2::CameraViewDescriptor>;
        *(_QWORD *)&xmmword_25410D800 = 0;
        qword_25410D7F8 = 0;
        *((_QWORD *)&xmmword_25410D800 + 1) = re::internal::defaultConstructV2<re::ecs2::CameraViewDescriptor>;
        qword_25410D810 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::CameraViewDescriptor>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25410D7A0, v17);
        v110 = v108;
        if ((byte_25410D45D & 1) == 0)
        {
LABEL_10:
          byte_25410D45D = 1;
          v19 = *((_DWORD *)v15 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410D5A8, 0);
          qword_25410D5B8 = 0x2800000003;
          dword_25410D5C0 = v19;
          word_25410D5C4 = 0;
          *(_QWORD *)&xmmword_25410D5C8 = 0;
          *((_QWORD *)&xmmword_25410D5C8 + 1) = 0xFFFFFFFFLL;
          qword_25410D5D8 = (uint64_t)v15;
          qword_25410D5E0 = 0;
          qword_25410D5A8 = (uint64_t)&off_24ED62400;
          re::IntrospectionRegistry::add(v20, v21);
          re::getPrettyTypeName((re *)&qword_25410D5A8, (const re::IntrospectionBase *)&v110);
          if ((BYTE8(v110) & 1) != 0)
            v22 = v111;
          else
            v22 = (char *)&v110 + 9;
          if ((_QWORD)v110 && (BYTE8(v110) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v110 + 40))();
          v112 = *((_OWORD *)v15 + 2);
          v23 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v113);
          if (v23)
          {
            v24 = *v23;
            *((_QWORD *)&v109 + 1) = v24;
          }
          else
          {
            v114[0] = v112;
            re::TypeBuilder::beginListType((uint64_t)&v110, (uint64_t *)&v113, 1, 0x28uLL, 8uLL, v114);
            re::TypeBuilder::setConstructor((uint64_t)&v110, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v110, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v110, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v110, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v110, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v110, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v110, v25);
          }
          xmmword_25410D5C8 = v109;
          re::StringID::destroyString((re::StringID *)&v113);
        }
      }
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "viewDescriptors";
      *(_QWORD *)(v26 + 16) = &qword_25410D5A8;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0xC800000002;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_25410D508 = v26;
      __cxa_guard_release(&qword_25410D490);
    }
  }
  *((_QWORD *)this + 2) = 0x17800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25410D4F8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::CameraViewDescriptorsComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::CameraViewDescriptorsComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CameraViewDescriptorsComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CameraViewDescriptorsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v106 = v107;
}

uint64_t re::internal::defaultConstruct<re::ecs2::CameraViewDescriptorsComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::CameraViewDescriptorsComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::CameraViewDescriptorsComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CameraViewDescriptorsComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_CameraViewDescriptorsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CameraViewDescriptorsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CameraViewDescriptorsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CameraViewDescriptorsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CameraViewDescriptorsComponent>, this);
}

uint64_t *re::ecs2::allocInfo_CameraViewDescriptorsSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410D4A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410D4A0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410D890, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410D8A0 = 0;
    qword_25410D8B0 = 0;
    qword_25410D8B8 = 0xFFFFFFFFLL;
    qword_25410D890 = (uint64_t)&off_24ED7DAA8;
    qword_25410D8C0 = (uint64_t)"CameraViewDescriptorsSystem";
    dword_25410D8C8 = 0;
    xmmword_25410D8D0 = 0u;
    xmmword_25410D8E0 = 0u;
    xmmword_25410D8F0 = 0u;
    qword_25410D900 = 0;
    __cxa_guard_release(&qword_25410D4A0);
  }
  return &qword_25410D890;
}

void re::ecs2::initInfo_CameraViewDescriptorsSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x9886566CB711F92;
  v5[1] = "CameraViewDescriptorsSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1E800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_CameraViewDescriptorsSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::CameraViewDescriptorsSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::CameraViewDescriptorsSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::CameraViewDescriptorsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::CameraViewDescriptorsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CameraViewDescriptorsSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CameraViewDescriptorsSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::CameraViewDescriptorsSystem *re::internal::defaultConstruct<re::ecs2::CameraViewDescriptorsSystem>(int a1, int a2, re::ecs2::CameraViewDescriptorsSystem *this)
{
  return re::ecs2::CameraViewDescriptorsSystem::CameraViewDescriptorsSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::CameraViewDescriptorsSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  a3[50] = &off_24ED62198;
  v4 = a3[58];
  if (v4)
  {
    if (a3[59])
    {
      v5 = a3 + 59;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[60]);
      *v5 = 0;
      a3[60] = 0;
    }
    a3[58] = 0;
  }
  v6 = a3[55];
  if (v6)
  {
    if (a3[56])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, a3[57]);
      a3[56] = 0;
      a3[57] = 0;
    }
    a3[55] = 0;
  }
  v7 = a3[52];
  if (v7)
  {
    if (a3[53])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, a3[54]);
      a3[53] = 0;
      a3[54] = 0;
    }
    a3[52] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 20);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::CameraViewDescriptorsSystem>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  a1[50] = &off_24ED62198;
  v2 = a1[58];
  if (v2)
  {
    if (a1[59])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[60]);
      a1[59] = 0;
      a1[60] = 0;
    }
    a1[58] = 0;
  }
  v3 = a1[55];
  if (v3)
  {
    if (a1[56])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, a1[57]);
      a1[56] = 0;
      a1[57] = 0;
    }
    a1[55] = 0;
  }
  v4 = a1[52];
  if (v4)
  {
    if (a1[53])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a1[54]);
      a1[53] = 0;
      a1[54] = 0;
    }
    a1[52] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 20);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_CameraViewDescriptorsSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CameraViewDescriptorsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CameraViewDescriptorsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CameraViewDescriptorsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CameraViewDescriptorsSystem>, this);
}

uint64_t *re::ecs2::allocInfo_TintComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410D4A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410D4A8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410D908, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410D918 = 0;
    qword_25410D928 = 0;
    qword_25410D930 = 0xFFFFFFFFLL;
    qword_25410D908 = (uint64_t)&off_24ED7DAA8;
    qword_25410D938 = (uint64_t)"TintComponent";
    dword_25410D940 = 0;
    xmmword_25410D948 = 0u;
    xmmword_25410D958 = 0u;
    xmmword_25410D968 = 0u;
    qword_25410D978 = 0;
    __cxa_guard_release(&qword_25410D4A8);
  }
  return &qword_25410D908;
}

void re::ecs2::initInfo_TintComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;

  v17[0] = 0x790C845E74D08844;
  v17[1] = "TintComponent";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  v4 = atomic_load((unsigned __int8 *)&qword_25410D4B0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410D4B0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410D510 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "tintColor";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_25410D518 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_BOOL((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "tintVirtualObject";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x3000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_25410D520 = v15;
      __cxa_guard_release(&qword_25410D4B0);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25410D510;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::TintComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::TintComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::TintComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::TintComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v16 = v18;
}

void re::internal::defaultConstruct<re::ecs2::TintComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57808;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 48) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::TintComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::TintComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57808;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 48) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::TintComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_TintComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TintComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TintComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TintComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TintComponent>, this);
}

uint64_t re::ecs2::SpecifyLaneCommand::SpecifyLaneCommand(uint64_t a1, void **a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 80) = -1;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 88 + 8 * a3), a2);
  return a1;
}

void re::ecs2::CameraViewDescriptor::updateWithSettings(__n128 *this, const re::RuntimeRenderGraphDataStruct *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  const re::IntrospectionBase *v18;
  const re::IntrospectionBase *v19;
  _BYTE v20[2];
  _BYTE v21[2];
  char v22[4];
  unsigned __int32 v23;
  __n128 v24[2];
  _BYTE v25[2];
  _BYTE v26[2];
  _BYTE v27[2];
  _BYTE v28[2];
  _BYTE v29[2];
  _BYTE v30[2];
  _BYTE v31[2];
  _BYTE v32[2];
  uint64_t v33;
  int v34;
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  unint64_t v39;
  __int16 v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>("disableAA", a2, v32);
  if (v32[0])
    this[1].n128_u8[8] = v32[1];
  re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>("enableFrustumCulling", a2, v31);
  if (v31[0])
    this[17].n128_u8[8] = v31[1];
  re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>("enableUnwarp", a2, v30);
  if (v30[0])
    this[1].n128_u8[10] = v30[1];
  re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>("disableTonemapping", a2, v29);
  if (v29[0])
    this[1].n128_u8[9] = v29[1];
  re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>("disableDebugDraw", a2, v28);
  if (v28[0])
    this[1].n128_u8[11] = v28[1];
  re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>("forceHidePassthroughFeed", a2, v27);
  if (v27[0])
    this[1].n128_u8[12] = v27[1];
  re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>("disableSceneRenderGraphFileProviders", a2, v26);
  if (v26[0])
    this[1].n128_u8[13] = v26[1];
  re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>("loadColor", a2, v25);
  if (v25[0])
    this[1].n128_u8[14] = v25[1];
  re::RuntimeRenderGraphDataStruct::getValueOfType<re::Vector4<float>>("clearColor", a2, v24);
  if (v24[0].n128_u8[0])
    this[2] = v24[1];
  re::RuntimeRenderGraphDataStruct::getValueOfType<float>("clearDepth", a2, (uint64_t)v22);
  if (v22[0])
    this[3].n128_u32[0] = v23;
  re::RuntimeRenderGraphDataStruct::getValueOfType<unsigned char>(v21, a2, "stencilMask");
  if (v21[0])
    this[3].n128_u8[4] = v21[1];
  re::RuntimeRenderGraphDataStruct::getValueOfType<unsigned char>(v20, a2, "stencilReference");
  if (v20[0])
    this[3].n128_u8[5] = v20[1];
  v4 = *((_QWORD *)a2 + 5);
  if (!v4)
    goto LABEL_32;
  v5 = (uint64_t *)*((_QWORD *)a2 + 7);
  v6 = 8 * v4;
  while (1)
  {
    v7 = *v5;
    if (!strcmp(*(const char **)(*v5 + 8), "stencilOperation"))
      break;
    ++v5;
    v6 -= 8;
    if (!v6)
      goto LABEL_32;
  }
  if ((v8 & 1) == 0
  {
    re::introspect<re::mtl::StencilOperation>(void)::info = re::mtl::introspect_StencilOperation(0, v18);
  }
  if (re::introspect<re::mtl::StencilOperation>(void)::info == *(_UNKNOWN **)(v7 + 16))
  {
    v14 = *(int *)(v7 + 36);
    v9 = *((_QWORD *)a2 + 10);
    if (v9 <= v14)
      goto LABEL_52;
    v9 = 0;
    v16 = *(unsigned __int8 *)(*((_QWORD *)a2 + 12) + v14);
    v17 = this[3].n128_u8[6];
    this[3].n128_u8[6] = v16;
    if (v17 != v16)
      goto LABEL_35;
  }
  else
  {
LABEL_32:
    v9 = 1;
  }
  re::RuntimeRenderGraphDataStruct::getValueOfType<unsigned int>("stencilOperationUint", a2, (uint64_t)&v42);
  if ((_BYTE)v42)
    this[3].n128_u8[6] = BYTE4(v42);
LABEL_35:
  v10 = *((_QWORD *)a2 + 5);
  if (v10)
  {
    v11 = (uint64_t *)*((_QWORD *)a2 + 7);
    v12 = 8 * v10;
    while (1)
    {
      v13 = *v11;
      if (!strcmp(*(const char **)(*v11 + 8), "stencilCompare"))
        break;
      ++v11;
      v12 -= 8;
      if (!v12)
        goto LABEL_45;
    }
    if ((v10 & 1) == 0
    {
      re::introspect<re::mtl::CompareFunction>(void)::info = re::mtl::introspect_CompareFunction(0, v19);
    }
    if (re::introspect<re::mtl::CompareFunction>(void)::info == *(_UNKNOWN **)(v13 + 16))
    {
      v14 = *(int *)(v13 + 36);
      v15 = *((_QWORD *)a2 + 10);
      if (v15 > v14)
      {
        LOBYTE(v10) = *(_BYTE *)(*((_QWORD *)a2 + 12) + v14);
        goto LABEL_45;
      }
      v33 = 0;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v42 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v34 = 136315906;
      v35 = "operator[]";
      v36 = 1024;
      v37 = 797;
      v38 = 2048;
      v39 = v14;
      v40 = 2048;
      v41 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_52:
      v33 = 0;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v42 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v34 = 136315906;
      v35 = "operator[]";
      v36 = 1024;
      v37 = 797;
      v38 = 2048;
      v39 = v14;
      v40 = 2048;
      v41 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
LABEL_45:
  if ((v9 & 1) == 0)
    this[3].n128_u8[7] = v10;
}

void re::RuntimeRenderGraphDataStruct::getValueOfType<unsigned char>(_BYTE *a1, _QWORD *a2, char *__s2)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v12;
  const re::IntrospectionBase *v13;

  v4 = a2[5];
  if (!v4)
    goto LABEL_8;
  v7 = (uint64_t *)a2[7];
  v8 = 8 * v4;
  while (1)
  {
    v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2))
      break;
    ++v7;
    v8 -= 8;
    if (!v8)
      goto LABEL_8;
  }
  if ((v10 & 1) == 0
  {
    re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v13);
  }
  if (re::introspect<unsigned char>(void)::info == *(_UNKNOWN **)(v9 + 16))
  {
    v11 = *(int *)(v9 + 36);
    if (a2[10] <= v11)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v12 = a2[12];
    *a1 = 1;
    a1[1] = *(_BYTE *)(v12 + v11);
  }
  else
  {
LABEL_8:
    *a1 = 0;
  }
}

void re::RuntimeRenderGraphDataStruct::getValueOfType<unsigned int>(char *__s2@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v12;
  const re::IntrospectionBase *v13;

  v4 = a2[5];
  if (!v4)
    goto LABEL_8;
  v7 = (uint64_t *)a2[7];
  v8 = 8 * v4;
  while (1)
  {
    v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2))
      break;
    ++v7;
    v8 -= 8;
    if (!v8)
      goto LABEL_8;
  }
  if ((v10 & 1) == 0
  {
    re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v13);
  }
  if (re::introspect<unsigned int>(void)::info == *(_UNKNOWN **)(v9 + 16))
  {
    v11 = *(int *)(v9 + 36);
    if (a2[10] <= v11)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v12 = a2[12];
    *(_BYTE *)a3 = 1;
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(v12 + v11);
  }
  else
  {
LABEL_8:
    *(_BYTE *)a3 = 0;
  }
}

uint64_t re::ecs2::CameraViewDescriptor::tryGetSpecifyByLane(re::ecs2::CameraViewDescriptor *this, const char *__s2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;

  v2 = *((_QWORD *)this + 38);
  if (!v2)
    return 0;
  v4 = *((_QWORD *)this + 40);
  v5 = 136 * v2;
  while (1)
  {
    v6 = (*(_QWORD *)(v4 + 8) & 1) != 0 ? *(const char **)(v4 + 16) : (const char *)(v4 + 9);
    if (!strcmp(v6, __s2))
      break;
    v4 += 136;
    v5 -= 136;
    if (!v5)
      return 0;
  }
  return v4;
}

BOOL re::ecs2::CameraViewDescriptor::operator==(float32x4_t *a1, float32x4_t *a2)
{
  _BOOL8 result;
  char v3;
  uint64_t v4;

  if (a1[1].u8[8] != a2[1].u8[8]
    || a1[1].u8[9] != a2[1].u8[9]
    || a1[1].u8[10] != a2[1].u8[10]
    || a1[1].u8[11] != a2[1].u8[11]
    || a1[1].u8[13] != a2[1].u8[13]
    || a1[17].u8[8] != a2[17].u8[8]
    || a1[1].u8[12] != a2[1].u8[12]
    || a1[1].u8[14] != a2[1].u8[14]
    || a1[17].u8[9] != a2[17].u8[9]
    || a1[17].u8[10] != a2[17].u8[10]
    || a1[1].u8[15] != a2[1].u8[15]
    || (vminvq_u32((uint32x4_t)vceqq_f32(a1[2], a2[2])) & 0x80000000) == 0
    || a1[3].f32[0] != a2[3].f32[0]
    || a1[3].u8[4] != a2[3].u8[4]
    || a1[3].u8[5] != a2[3].u8[5]
    || a1[3].u8[6] != a2[3].u8[6]
    || a1[3].u8[7] != a2[3].u8[7])
  {
    return 0;
  }
  result = re::MeshLodSelectOverrideOptions::operator==(&a1[3].f32[2], &a2[3].f32[2]);
  if (!result)
    return result;
  if (a1[12].u8[0] != a2[12].u8[0])
    return 0;
  if (!re::DynamicArray<re::ecs2::ScopeLanePair>::operator==((uint64_t)&a1[4].i64[1], a2[5].i64[1], a2[6].i64[1]))
    return 1;
  v3 = 0;
  v4 = 0;
  do
  {
    result = re::DynamicArray<re::ecs2::ScopeLanePair>::operator==((uint64_t)&a1[7] + 40 * v4, a2[8].i64[5 * v4], a2[9].i64[5 * v4]);
    if ((v3 & 1) != 0)
      break;
    v3 = 1;
    v4 = 1;
  }
  while (result);
  return result;
}

BOOL re::MeshLodSelectOverrideOptions::operator==(float *a1, float *a2)
{
  int v2;
  BOOL v3;
  _BOOL8 v4;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v2 = *((unsigned __int8 *)a2 + 1);
  if (*((_BYTE *)a1 + 1))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (!v3)
  {
    if (*((unsigned __int8 *)a1 + 2) == *((unsigned __int8 *)a2 + 2))
      goto LABEL_11;
    return 0;
  }
  if (v2 | *((unsigned __int8 *)a1 + 1))
    return 0;
LABEL_11:
  v4 = (*((unsigned __int8 *)a2 + 4) | *((unsigned __int8 *)a1 + 4)) == 0;
  if (*((_BYTE *)a1 + 4) && *((_BYTE *)a2 + 4))
    return a1[2] == a2[2];
  return v4;
}

BOOL re::DynamicArray<re::ecs2::ScopeLanePair>::operator==(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 16) != a2)
    return 0;
  if (!a2)
    return 1;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = v4 + (a2 << 6);
  while (1)
  {
    result = re::DynamicString::operator==(v4, a3);
    if (!result)
      break;
    v7 = v4 + 32;
    v8 = a3 + 32;
    result = re::DynamicString::operator==(v7, v8);
    if (!result)
      break;
    v4 = v7 + 32;
    a3 = v8 + 32;
    if (v4 == v5)
      return 1;
  }
  return result;
}

uint64_t re::ecs2::CameraViewDescriptorsComponent::handleToTypeAndIndex(unint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  if (this < 0x10000)
    return 0;
  if (!(this >> 17))
    return 1;
  if (this >> 16 <= 2)
    return 2;
  re::internal::assertLog((re::internal *)4, this, "assertion failure: '%s' (%s:line %i) Invalid handle passed", "!\"Unreachable code\"", "handleToTypeAndIndex", 285, v1, v2);
  result = _os_crash();
  __break(1u);
  return result;
}

re::ecs2::CameraViewDescriptor *re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(_anonymous_namespace_ *this, re::ecs2::CameraViewDescriptor *a2)
{
  unint64_t v4;
  re::ecs2::CameraViewDescriptor *result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = re::ecs2::CameraViewDescriptor::CameraViewDescriptor((re::ecs2::CameraViewDescriptor *)(*((_QWORD *)this + 4) + 336 * v4), a2);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::DynamicArray<re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor>::add(uint64_t a1, re::ecs2::CameraViewDescriptor *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  re::ecs2::CameraViewDescriptor *v11;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = re::ecs2::CameraViewDescriptor::CameraViewDescriptor((re::ecs2::CameraViewDescriptor *)(*(_QWORD *)(a1 + 32) + 384 * v5), a2);
  *((_QWORD *)v11 + 45) = *((_QWORD *)a2 + 45);
  *((_QWORD *)v11 + 46) = 0;
  result = re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v11 + 336, (uint64_t)a2 + 336);
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void re::ecs2::CameraViewDescriptorsComponent::clearSpecifyCommands(re::ecs2::CameraViewDescriptorsComponent *this, re::ecs2::CameraViewDescriptorsComponent *a2)
{
  uint64_t ViewDescriptor;
  NSObject *v3;
  uint8_t v4[16];

  ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
  if (ViewDescriptor)
  {
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::clear((_QWORD *)(ViewDescriptor + 288));
  }
  else
  {
    v3 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_224FE9000, v3, OS_LOG_TYPE_DEFAULT, "View descriptor not found (invalid handle)", v4, 2u);
    }
  }
}

_QWORD *re::DynamicArray<re::ecs2::SpecifyLaneCommand>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  uint64_t j;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = result[4];
    v4 = v3 + 136 * v2;
    do
    {
      for (i = 112; i != 96; i -= 8)
      {
        v6 = *(void **)(v3 + i);
        if (v6)
        {

          *(_QWORD *)(v3 + i) = 0;
        }
      }
      do
      {
        v7 = *(void **)(v3 + i);
        if (v7)
        {

          *(_QWORD *)(v3 + i) = 0;
        }
        i -= 8;
      }
      while (i != 80);
      for (j = 56; j != 8; j -= 24)
        re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + j));
      result = *(_QWORD **)v3;
      if (*(_QWORD *)v3)
      {
        if ((*(_BYTE *)(v3 + 8) & 1) != 0)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 40))(result, *(_QWORD *)(v3 + 16));
        *(_OWORD *)v3 = 0u;
        *(_OWORD *)(v3 + 16) = 0u;
      }
      v3 += 136;
    }
    while (v3 != v4);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::ecs2::CameraViewDescriptorsComponent::addSpecifyCommand(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, uint64_t a3)
{
  uint64_t ViewDescriptor;
  uint64_t v6;
  re *v7;
  _BOOL4 v8;
  NSObject *v9;
  _BOOL4 v10;
  uint64_t result;
  const char *v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _BOOL4 v20;
  NSObject *v21;
  _BOOL4 v22;
  NSObject *v23;
  uint32_t v24;
  _BOOL4 v25;
  _BOOL4 v26;
  _BOOL4 v27;
  _DWORD v28[2];
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  if (!ViewDescriptor)
  {
    v9 = *re::graphicsLogObjects(0);
    v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v10)
      return result;
    LOWORD(v28[0]) = 0;
    v12 = "View descriptor not found (invalid handle)";
LABEL_33:
    v23 = v9;
    v24 = 2;
    goto LABEL_34;
  }
  v6 = ViewDescriptor;
  v7 = (re *)re::ecs2::CameraViewDescriptorsComponent::handleToTypeAndIndex((unint64_t)a2);
  v8 = *(_DWORD *)(a3 + 80) == -1 && *(_DWORD *)(a3 + 84) == -1;
  if (*(_QWORD *)(a3 + 40))
    v13 = 0;
  else
    v13 = *(_QWORD *)(a3 + 64) == 0;
  if (*(_QWORD *)(a3 + 88))
    v14 = 0;
  else
    v14 = *(_QWORD *)(a3 + 96) == 0;
  if (*(_QWORD *)(a3 + 104))
  {
    v15 = 0;
    if ((_DWORD)v7)
      goto LABEL_17;
  }
  else
  {
    v15 = *(_QWORD *)(a3 + 112) == 0;
    if ((_DWORD)v7)
      goto LABEL_17;
  }
  if (!v8)
  {
    v9 = *re::graphicsLogObjects(v7);
    v25 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v25)
      return result;
    LOWORD(v28[0]) = 0;
    v12 = "For serialized view descriptor layerHandle must be kInvalidRenderLayerHandle";
    goto LABEL_33;
  }
  if (!v14)
  {
    v9 = *re::graphicsLogObjects(v7);
    v26 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v26)
      return result;
    LOWORD(v28[0]) = 0;
    v12 = "For serialized view descriptor textures must not be set";
    goto LABEL_33;
  }
  if (!v15)
  {
    v9 = *re::graphicsLogObjects(v7);
    v27 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v27)
      return result;
    LOWORD(v28[0]) = 0;
    v12 = "For serialized view descriptor texture descriptors must not be set";
    goto LABEL_33;
  }
  if (v13)
  {
    v9 = *re::graphicsLogObjects(v7);
    v20 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v20)
      return result;
    LOWORD(v28[0]) = 0;
    v12 = "For serialized view descriptor renderTarget must not be null";
    goto LABEL_33;
  }
LABEL_17:
  v16 = !v8;
  v17 = !v13;
  v18 = !v14;
  v19 = !v15;
  if (!v13 + !v8 + !v14 + !v15 == 1)
  {
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::add((_anonymous_namespace_ *)(v6 + 288), a3);
    return 1;
  }
  v21 = *re::graphicsLogObjects(v7);
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v22)
  {
    v28[0] = 67109888;
    v28[1] = v16;
    v29 = 1024;
    v30 = v18;
    v31 = 1024;
    v32 = v19;
    v33 = 1024;
    v34 = v17;
    v12 = "Exactly one set of properties on a specify command must be valid. Validity: Layer handles=%d, textures=%d, des"
          "criptors=%d, render targets=%d";
    v23 = v21;
    v24 = 26;
LABEL_34:
    _os_log_impl(&dword_224FE9000, v23, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)v28, v24);
    return 0;
  }
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::ecs2::SpecifyLaneCommand>::add(_anonymous_namespace_ *result, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = result;
  v5 = *((_QWORD *)result + 1);
  v4 = *((_QWORD *)result + 2);
  if (v4 >= v5)
  {
    v6 = v4 + 1;
    if (v5 < v4 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v5;
        if (!v5)
          v7 = 8;
        if (v7 <= v6)
          v8 = v6;
        else
          v8 = v7;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity(result, v8);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v4 = *((_QWORD *)v3 + 2);
  }
  v9 = 0;
  v10 = *((_QWORD *)v3 + 4);
  v11 = v10 + 136 * v4;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)(v11 + 24) = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v13 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  v15 = *(_QWORD *)(v11 + 8);
  v14 = *(_QWORD *)(v11 + 16);
  *(_QWORD *)(v11 + 8) = v12;
  *(_QWORD *)(v11 + 16) = v13;
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 16) = v14;
  do
  {
    v16 = (_QWORD *)(v11 + v9);
    v17 = (_QWORD *)(a2 + v9);
    v16[4] = 0;
    v16[5] = 0;
    v16[6] = 0;
    v16[5] = *(_QWORD *)(a2 + v9 + 40);
    v17[5] = 0;
    v18 = *(_QWORD *)(v11 + v9 + 32);
    v16[4] = 0;
    v16[4] = *(_QWORD *)(a2 + v9 + 32);
    v17[4] = v18;
    v19 = *(_QWORD *)(v11 + v9 + 48);
    v16[6] = *(_QWORD *)(a2 + v9 + 48);
    v17[6] = v19;
    v9 += 24;
  }
  while (v9 != 48);
  v20 = 0;
  v21 = v10 + 136 * v4;
  *(_QWORD *)(v21 + 80) = *(_QWORD *)(a2 + 80);
  v22 = v21 + 88;
  v23 = a2 + 88;
  do
  {
    *(_QWORD *)(v22 + v20) = *(_QWORD *)(v23 + v20);
    *(_QWORD *)(v23 + v20) = 0;
    v20 += 8;
  }
  while (v20 != 16);
  v24 = 0;
  v25 = a2 + 104;
  do
  {
    *(_QWORD *)(v10 + 136 * v4 + 104 + v24) = *(_QWORD *)(v25 + v24);
    *(_QWORD *)(v25 + v24) = 0;
    v24 += 8;
  }
  while (v24 != 16);
  v26 = v10 + 136 * v4;
  v27 = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(v26 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(v26 + 120) = v27;
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(re::ecs2::CameraViewDescriptorsComponent *this, re::ecs2::CameraViewDescriptorsComponent *a2)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = re::ecs2::CameraViewDescriptorsComponent::handleToTypeAndIndex((unint64_t)a2);
  if (v3 == 2)
  {
    if (v4 < *((_QWORD *)this + 37))
    {
      v5 = *((_QWORD *)this + 39);
      v6 = 384;
      return v5 + v4 * v6;
    }
  }
  else if (v3 == 1)
  {
    if (v4 < *((_QWORD *)this + 32))
    {
      v5 = *((_QWORD *)this + 34);
      goto LABEL_10;
    }
  }
  else if (!v3 && v4 < *((_QWORD *)this + 27))
  {
    v5 = *((_QWORD *)this + 29);
LABEL_10:
    v6 = 336;
    return v5 + v4 * v6;
  }
  return 0;
}

uint64_t *re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4;
  uint64_t *result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = re::ecs2::CameraViewDescriptor::CameraViewDescriptor((uint64_t *)(*((_QWORD *)this + 4) + 336 * v4), a2);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

re::DynamicString *re::ecs2::CameraViewDescriptorsComponent::viewScopeNameFromCache@<X0>(re::ecs2::CameraViewDescriptorsComponent *this@<X0>, re::ecs2::CameraViewDescriptorsComponent *a2@<X1>, uint64_t a3@<X2>, re::DynamicString *a4@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t ViewDescriptor;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  const char *v22;
  re::DynamicString *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  re::DynamicString *result;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;

  v8 = re::ecs2::CameraViewDescriptorsComponent::handleToTypeAndIndex((unint64_t)a2);
  v10 = v9;
  ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
  if (!ViewDescriptor || (v12 = *(unsigned __int8 *)(ViewDescriptor + 192), *(_BYTE *)(ViewDescriptor + 192)))
  {
    if (a3)
      v12 = 2;
    else
      v12 = 1;
  }
  v13 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v12) ^ ((0xBF58476D1CE4E5B9 * v12) >> 27));
  v14 = 0xBF58476D1CE4E5B9 * ((int)v8 ^ ((unint64_t)(int)v8 >> 30));
  v15 = ((v10 << 6)
       + (v10 >> 2)
       - 0x61C8864680B583E9
       + ((((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31))
         + ((v13 ^ (v13 >> 31)) << 6)
         + ((v13 ^ (v13 >> 31)) >> 2)
         - 0x61C8864680B583E9) ^ v13 ^ (v13 >> 31))) ^ v10;
  v16 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
  v17 = v16 ^ (v16 >> 31);
  if (*((_QWORD *)this + 41))
  {
    v18 = *(unsigned int *)(*((_QWORD *)this + 42) + 4 * (v17 % *((unsigned int *)this + 88)));
    if ((_DWORD)v18 != 0x7FFFFFFF)
    {
      v33 = *((_QWORD *)this + 43);
      if (*(_QWORD *)(v33 + 56 * v18 + 16) == v15)
        return re::DynamicString::DynamicString(a4, (const re::DynamicString *)(v33 + 56 * v18 + 24));
      while (1)
      {
        LODWORD(v18) = *(_DWORD *)(v33 + 56 * v18 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v18 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v33 + 56 * v18 + 16) == v15)
          return re::DynamicString::DynamicString(a4, (const re::DynamicString *)(v33 + 56 * v18 + 24));
      }
    }
  }
  v19 = *((_QWORD *)this + 2);
  if (**(_BYTE **)(v19 + 280))
    v20 = *(const char **)(v19 + 280);
  else
    v20 = "Camera";
  v21 = "Right";
  if (!a3)
    v21 = "Left";
  if (v12)
    v22 = v21;
  else
    v22 = "Mono";
  v23 = (re::DynamicString *)(*(uint64_t (**)(re::ecs2::CameraViewDescriptorsComponent *))(*(_QWORD *)this + 24))(this);
  re::DynamicString::format(v23, (re::Allocator *)"%s_%d_%zu_%llX_%s", a4, v20, v8, v10, *(_QWORD *)(v19 + 296), v22);
  if (!*((_QWORD *)this + 41))
  {
    LODWORD(v24) = 0;
    goto LABEL_31;
  }
  v24 = v17 % *((unsigned int *)this + 88);
  v25 = *(unsigned int *)(*((_QWORD *)this + 42) + 4 * v24);
  if ((_DWORD)v25 == 0x7FFFFFFF)
  {
LABEL_31:
    v34 = *((unsigned int *)this + 91);
    if ((_DWORD)v34 == 0x7FFFFFFF)
    {
      v34 = *((unsigned int *)this + 90);
      v35 = v34;
      if ((_DWORD)v34 == *((_DWORD *)this + 88))
      {
        re::HashTable<unsigned long,re::DynamicString,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity((uint64_t)this + 328, 2 * *((_DWORD *)this + 89));
        LODWORD(v24) = v17 % *((unsigned int *)this + 88);
        v35 = *((_DWORD *)this + 90);
      }
      *((_DWORD *)this + 90) = v35 + 1;
      v36 = *((_QWORD *)this + 43);
      v37 = *(_DWORD *)(v36 + 56 * v34 + 8);
    }
    else
    {
      v36 = *((_QWORD *)this + 43);
      v37 = *(_DWORD *)(v36 + 56 * v34 + 8);
      *((_DWORD *)this + 91) = v37 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v36 + 56 * v34 + 8) = v37 | 0x80000000;
    *(_DWORD *)(*((_QWORD *)this + 43) + 56 * v34 + 8) = *(_DWORD *)(*((_QWORD *)this + 43) + 56 * v34 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)this + 42) + 4 * v24);
    *(_QWORD *)(*((_QWORD *)this + 43) + 56 * v34) = v17;
    *(_QWORD *)(*((_QWORD *)this + 43) + 56 * v34 + 16) = v15;
    result = re::DynamicString::DynamicString((re::DynamicString *)(*((_QWORD *)this + 43) + 56 * v34 + 24), a4);
    *(_DWORD *)(*((_QWORD *)this + 42) + 4 * v24) = v34;
    ++*((_DWORD *)this + 89);
    goto LABEL_37;
  }
  v26 = *((_QWORD *)this + 43);
  while (*(_QWORD *)(v26 + 56 * v25 + 16) != v15)
  {
    v27 = *(_DWORD *)(v26 + 56 * v25 + 8);
    v25 = v27 & 0x7FFFFFFF;
    if ((v27 & 0x7FFFFFFF) == 0x7FFFFFFF)
      goto LABEL_31;
  }
  v28 = v26 + 56 * v25;
  v31 = *(_QWORD *)(v28 + 24);
  v30 = v28 + 24;
  v29 = v31;
  if (v31)
  {
    if ((*(_BYTE *)(v30 + 8) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 40))(v29, *(_QWORD *)(v30 + 16));
    *(_OWORD *)v30 = 0u;
    *(_OWORD *)(v30 + 16) = 0u;
    v26 = *((_QWORD *)this + 43);
  }
  result = re::DynamicString::DynamicString((re::DynamicString *)(v26 + 56 * v25 + 24), a4);
LABEL_37:
  ++*((_DWORD *)this + 92);
  return result;
}

re::DynamicString *re::ecs2::CameraViewDescriptorsComponent::viewScopeName@<X0>(re::ecs2::CameraViewDescriptorsComponent *this@<X0>, re::ecs2::CameraViewDescriptorsComponent *a2@<X1>, re::ecs2::Entity *a3@<X3>, re::Allocator *a4@<X4>, uint64_t a5@<X2>, re::DynamicString *a6@<X8>)
{
  re::DynamicString *result;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ViewDescriptor;
  _BYTE *v17;
  const char *v18;
  uint64_t v19;
  char v20;
  _BYTE v21[7];
  _BYTE *v22;

  if (*((_QWORD *)this + 2))
    return re::ecs2::CameraViewDescriptorsComponent::viewScopeNameFromCache(this, a2, a5, a6);
  if (**((_BYTE **)a3 + 35))
    v13 = (const char *)*((_QWORD *)a3 + 35);
  else
    v13 = "Camera";
  v14 = re::ecs2::CameraViewDescriptorsComponent::handleToTypeAndIndex((unint64_t)a2);
  re::DynamicString::format(a4, (re::Allocator *)"%d_%zu_%llu", (re::DynamicString *)&v19, v14, v15, *((_QWORD *)a3 + 37));
  ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
  if (ViewDescriptor && !*(_BYTE *)(ViewDescriptor + 192))
  {
    if ((v20 & 1) != 0)
      v17 = v22;
    else
      v17 = v21;
    v18 = "_Mono";
  }
  else
  {
    v17 = v22;
    if ((v20 & 1) == 0)
      v17 = v21;
    if (a5)
      v18 = "_Right";
    else
      v18 = "_Left";
  }
  re::DynamicString::format(a4, (re::Allocator *)"%s_%s%s", a6, v13, v17, v18);
  result = (re::DynamicString *)v19;
  if (v19)
  {
    if ((v20 & 1) != 0)
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(_QWORD *)v19 + 40))();
  }
  return result;
}

re::ecs2::CameraViewDescriptorsComponentStateImpl *re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewDescriptorsComponentStateImpl(re::ecs2::CameraViewDescriptorsComponentStateImpl *this, re::ecs2::CameraViewDescriptorsSystem *a2)
{
  _anonymous_namespace_ *v3;
  _anonymous_namespace_ *v4;
  uint64_t i;
  _QWORD v7[2];
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD __src[6];

  __src[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24ED62198;
  *((_QWORD *)this + 1) = a2;
  v3 = (re::ecs2::CameraViewDescriptorsComponentStateImpl *)((char *)this + 40);
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 1) = 0u;
  __src[0] = re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  __src[1] = re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  __src[2] = re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  __src[3] = re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  __src[4] = re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v13[0] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v13[1] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v13[2] = re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v8 = __src;
  v9 = 5;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::CameraViewDescriptorsComponentStateImpl *)((char *)this + 16), (uint64_t)&v8);
  v8 = v13;
  v9 = 3;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=(v3, (uint64_t)&v8);
  v12 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  re::DynamicArray<float *>::setCapacity(&v8, 5uLL);
  ++v11;
  re::DynamicArray<char const*>::copy(&v8, 0, (char *)__src, 5);
  for (i = 0; i != 3; ++i)
  {
    v7[0] = v13[i];
    re::DynamicArray<re::TransitionCondition *>::add(&v8, v7);
  }
  v7[0] = v12;
  v7[1] = v10;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::CameraViewDescriptorsComponentStateImpl *)((char *)this + 64), (uint64_t)v7);
  if (v8 && v12)
    (*(void (**)(void))(*v8 + 40))();
  return this;
}

uint64_t re::ecs2::CameraViewDescriptorsComponentStateImpl::didDependentComponentChange(uint64_t a1, uint64_t a2, _QWORD *a3, const re::ecs2::ComponentTypeBase *a4)
{
  re::ecs2::EntityComponentCollection *v8;
  uint64_t result;
  re::ecs2::Component *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  _BOOL4 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v21;
  unint64_t v22;

  v8 = (re::ecs2::EntityComponentCollection *)(a3 + 4);
  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v10 = (re::ecs2::Component *)result;
  v12 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  if (v12)
  {
    v13 = 8 * v12;
    v14 = *(void ***)(a1 + 32);
    while (*v14 != a4)
    {
      ++v14;
      v13 -= 8;
      if (!v13)
      {
        v14 = (void **)(v11 + 8 * v12);
        break;
      }
    }
  }
  else
  {
    v14 = *(void ***)(a1 + 32);
  }
  if (v12 == ((uint64_t)v14 - v11) >> 3)
  {
    v15 = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)a4
       || *(_BYTE *)(re::ecs2::EntityComponentCollection::get(v8, a4) + 40) != 0;
    v21 = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4
       || v15;
    return re::ecs2::CameraViewDescriptorsComponentStateImpl::hierarchicallyDirtyEntities(a3, (uint64_t)a4, v21, a2);
  }
  else if (result)
  {
    v16 = 24;
    v17 = 0xFFFFFFFFLL;
    do
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v16), v10);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        v22 = v18;
        v17 = v19;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v22, v17);
      }
      v16 += 8;
    }
    while (v16 != 56);
    v22 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v22, v17);
  }
  return result;
}

unint64_t re::ecs2::CameraViewDescriptorsComponentStateImpl::hierarchicallyDirtyEntities(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t result;
  re::ecs2::Component *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  int8x16_t v19;
  uint64_t v20;
  const __int16 *v21;
  int16x8_t *v22;
  int16x8_t v23;
  int v24;
  uint16x8_t v25;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (a3)
  {
    v9 = (re::ecs2::Component *)result;
    if (result)
    {
      v10 = 24;
      v11 = 0xFFFFFFFFLL;
      do
      {
        v12 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a4 + 16), *(_QWORD *)(a4 + v10), v9);
        if (v12 != -1 && (v13 & 0xFFFFFF00000000) != 0)
        {
          v15 = v12;
          v11 = v13;
          goto LABEL_11;
        }
        v10 += 8;
      }
      while (v10 != 56);
      v15 = -1;
LABEL_11:
      result = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a4, v15, v11);
    }
  }
  v16 = a1[41];
  if (v16)
  {
    v17 = (unint64_t *)a1[43];
    v18 = &v17[v16];
    v19 = (int8x16_t)xmmword_2260F1E80;
    do
    {
      result = *v17;
      v20 = *(unsigned __int16 *)(*v17 + 82);
      if (*(_WORD *)(*v17 + 82))
      {
        v21 = (const __int16 *)(a2 + 16);
        v22 = *(int16x8_t **)(result + 88);
        v23 = vld1q_dup_s16(v21);
        v24 = 1;
        while (1)
        {
          v25 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v23, *v22), v19);
          v25.i16[0] = vmaxvq_u16(v25);
          if (v25.i32[0])
            break;
          v24 -= 8;
          ++v22;
          if (!--v20)
            goto LABEL_20;
        }
        if (v25.u16[0] - v24 < *(unsigned __int16 *)(result + 80))
          break;
      }
LABEL_20:
      result = re::ecs2::CameraViewDescriptorsComponentStateImpl::hierarchicallyDirtyEntities();
      v19 = (int8x16_t)xmmword_2260F1E80;
      ++v17;
    }
    while (v17 != v18);
  }
  return result;
}

uint64_t re::ecs2::CameraViewDescriptorsComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _anonymous_namespace_ *v16;
  uint64_t v17;
  int v18;
  const __int16 *v19;
  int16x8_t v20;
  int v21;
  int16x8_t *v22;
  uint64_t v23;
  uint16x8_t v24;
  _anonymous_namespace_ *v25;
  uint64_t v26;
  const __int16 *v27;
  int16x8_t v28;
  int v29;
  uint16x8_t v30;
  int16x8_t *v31;
  uint64_t v32;
  _anonymous_namespace_ *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  re::ecs2::ComponentBucketsBase *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  const __int16 *v45;
  int16x8_t v46;
  int16x8_t *v47;
  int v48;
  int16x8_t *v49;
  uint64_t v50;
  uint16x8_t v51;
  const __int16 *v52;
  int16x8_t v53;
  int v54;
  int16x8_t *v55;
  uint64_t v56;
  uint16x8_t v57;
  const __int16 *v58;
  int16x8_t v59;
  int v60;
  uint16x8_t v61;
  id WeakRetained;
  void *v63;
  uint64_t v64;
  re::ecs2::EntityComponentCollection *v65;
  const __int16 *v66;
  int16x8_t v67;
  int v68;
  int16x8_t *v69;
  uint64_t v70;
  uint16x8_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t result;
  __objc2_class_ro *v75;
  __objc2_class_ro *v76;
  uint64_t v77;
  char *v78;
  _QWORD v79[2];
  unint64_t v80;
  unint64_t v81;
  char *v82;

  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
  v10 = re::ServiceLocator::serviceOrNull<re::ecs2::RenderOptionsService>(v9);
  if (v10)
  {
    v79[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v80, a5, 0);
    v12 = v80;
    v11 = (char *)v81;
    v80 = a4;
    v81 = v12;
    v82 = v11;
    if (v12 != a5
      || ((v13 = (unsigned __int16)v11, v14 = v11 & 0xFFFF0000, v13 == 0xFFFF)
        ? (v15 = v14 == 4294901760)
        : (v15 = 0),
          !v15))
    {
      do
      {
        v41 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v81);
        v42 = *(_QWORD *)v41;
        v43 = *(_QWORD *)(*(_QWORD *)v41 + 16);
        if (*(_BYTE *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)v79, v43)
          && (v44 = *(unsigned __int16 *)(v43 + 82), *(_WORD *)(v43 + 82)))
        {
          v45 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                + 16);
          v46 = vld1q_dup_s16(v45);
          v47 = *(int16x8_t **)(v43 + 88);
          v48 = 1;
          v49 = v47;
          v50 = *(unsigned __int16 *)(v43 + 82);
          while (1)
          {
            v51 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v46, *v49), (int8x16_t)xmmword_2260F1E80);
            v51.i16[0] = vmaxvq_u16(v51);
            if (v51.i32[0])
              break;
            v48 -= 8;
            ++v49;
            if (!--v50)
              goto LABEL_39;
          }
          if (v51.u16[0] - v48 < *(unsigned __int16 *)(v43 + 80))
            goto LABEL_49;
LABEL_39:
          v52 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                + 16);
          v53 = vld1q_dup_s16(v52);
          v54 = 1;
          v55 = *(int16x8_t **)(v43 + 88);
          v56 = *(unsigned __int16 *)(v43 + 82);
          while (1)
          {
            v57 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v53, *v55), (int8x16_t)xmmword_2260F1E80);
            v57.i16[0] = vmaxvq_u16(v57);
            if (v57.i32[0])
              break;
            v54 -= 8;
            ++v55;
            if (!--v56)
              goto LABEL_44;
          }
          if (v57.u16[0] - v54 < *(unsigned __int16 *)(v43 + 80))
            goto LABEL_49;
LABEL_44:
          v58 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                + 16);
          v59 = vld1q_dup_s16(v58);
          v60 = 1;
          while (1)
          {
            v61 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v59, *v47), (int8x16_t)xmmword_2260F1E80);
            v61.i16[0] = vmaxvq_u16(v61);
            if (v61.i32[0])
              break;
            v60 -= 8;
            ++v47;
            if (!--v44)
              goto LABEL_57;
          }
          if (v61.u16[0] - v60 >= *(unsigned __int16 *)(v43 + 80))
            goto LABEL_57;
LABEL_49:
          WeakRetained = objc_loadWeakRetained((id *)(v42 + 32));
          v63 = WeakRetained;
          if (WeakRetained)
            v64 = (uint64_t)WeakRetained - 8;
          else
            v64 = 0;
          v32 = *(unsigned __int16 *)(v43 + 82);
          if (*(_WORD *)(v43 + 82))
          {
            v65 = (re::ecs2::EntityComponentCollection *)(v43 + 32);
            v66 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                  + 16);
            v31 = *(int16x8_t **)(v43 + 88);
            v67 = vld1q_dup_s16(v66);
            v68 = 1;
            v69 = v31;
            v70 = *(unsigned __int16 *)(v43 + 82);
            while (1)
            {
              v71 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v67, *v69), (int8x16_t)xmmword_2260F1E80);
              v71.i16[0] = vmaxvq_u16(v71);
              if (v71.i32[0])
                break;
              v68 -= 8;
              ++v69;
              if (!--v70)
                goto LABEL_10;
            }
            if (v71.u16[0] - v68 < *(unsigned __int16 *)(v43 + 80))
            {
              v16 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get(v65, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
              goto LABEL_22;
            }
LABEL_10:
            v19 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                  + 16);
            v20 = vld1q_dup_s16(v19);
            v21 = 1;
            v22 = *(int16x8_t **)(v43 + 88);
            v23 = *(unsigned __int16 *)(v43 + 82);
            while (1)
            {
              v24 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v20, *v22), (int8x16_t)xmmword_2260F1E80);
              v24.i16[0] = vmaxvq_u16(v24);
              if (v24.i32[0])
                break;
              v21 -= 8;
              ++v22;
              if (!--v23)
                goto LABEL_16;
            }
            if (v24.u16[0] - v21 < *(unsigned __int16 *)(v43 + 80))
            {
              v25 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get(v65, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              v26 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
              goto LABEL_22;
            }
LABEL_16:
            v27 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                  + 16);
            v28 = vld1q_dup_s16(v27);
            v29 = 1;
            while (1)
            {
              v30 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v28, *v31), (int8x16_t)xmmword_2260F1E80);
              v30.i16[0] = vmaxvq_u16(v30);
              if (v30.i32[0])
                break;
              v29 -= 8;
              ++v31;
              if (!--v32)
                goto LABEL_25;
            }
            if (v30.u16[0] - v29 >= *(unsigned __int16 *)(v43 + 80))
              goto LABEL_25;
            v33 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get(v65, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            v34 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
LABEL_22:
            if (v18 == 2)
            {
              v35 = v80;
              v36 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v81);
              v37 = *(re::ecs2::ComponentBucketsBase **)(a3 + 16);
              v38 = *(_QWORD *)(a3 + 40);
              goto LABEL_26;
            }
            if (v18 == 1)
            {
              v39 = v80;
              v40 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v81);
              re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a3, v39, v40);
              if (v63)
                goto LABEL_28;
              goto LABEL_58;
            }
            if (v18)
              goto LABEL_27;
          }
LABEL_25:
          v35 = v80;
          v36 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v81);
          v37 = *(re::ecs2::ComponentBucketsBase **)(a3 + 16);
          v38 = *(_QWORD *)(a3 + 48);
LABEL_26:
          re::ecs2::ComponentBucketsBase::moveComponent(v37, v35, v36, v38);
LABEL_27:
          if (v63)
LABEL_28:

        }
        else
        {
LABEL_57:
          v72 = v80;
          v73 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v81);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v72, v73, *(_QWORD *)(a3 + 32));
        }
LABEL_58:
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v81);
      }
      while (v81 != a5 || (unsigned __int16)v82 != 0xFFFF || WORD1(v82) != 0xFFFF);
    }
    return *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    v75 = re::introspect<re::ecs2::RenderOptionsService>();
    re::StringID::invalid((re::StringID *)v79);
    re::internal::missingServiceErrorMessage((re::internal *)v75, (const re::IntrospectionBase *)v79, (re::DynamicString *)&v80);
    re::DynamicString::~DynamicString((re::DynamicString *)&v80);
    re::StringID::~StringID((re::StringID *)v79);
    v76 = re::introspect<re::ecs2::RenderOptionsService>();
    re::StringID::invalid((re::StringID *)v79);
    re::internal::missingServiceErrorMessage((re::internal *)v76, (const re::IntrospectionBase *)v79, (re::DynamicString *)&v80);
    if ((v81 & 1) != 0)
      v78 = v82;
    else
      v78 = (char *)&v81 + 1;
    re::internal::assertLog((re::internal *)5, v77, "assertion failure: '%s' (%s:line %i) %s", "service", "service", 69, v78);
    re::DynamicString::~DynamicString((re::DynamicString *)&v80);
    re::StringID::~StringID((re::StringID *)v79);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

BOOL re::ecs2::CameraViewDescriptorsComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  re::ecs2::Entity *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v27, a5, 0);
  v12 = v27;
  v13 = v28;
  v27 = a4;
  v28 = v12;
  v29 = v13;
  v14 = (unsigned __int16)v13;
  v15 = v13 & 0xFFFF0000;
  if (v12 != a5 || v14 != 0xFFFF || v15 != 4294901760)
  {
    do
    {
      v18 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v28);
      if (re::ecs2::CameraViewDescriptorsHelper::setCameraViewsRenderGraphFileProviders(*(re::ecs2::CameraViewDescriptorsHelper **)(*(_QWORD *)v18 + 16), v19))
      {
        v20 = v27;
        v21 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v28);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v20, v21, *(_QWORD *)(a3 + 48));
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v28);
    }
    while (v28 != a5 || (unsigned __int16)v29 != 0xFFFF || WORD1(v29) != 0xFFFF);
  }
  v24 = *(_QWORD *)(a3 + 48);
  v25 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(_QWORD *)(a3 + 16) + 8, v24);
  if (!*(_DWORD *)(v25 + 40))
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, a3, v24, v25, a6);
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  re *v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  _BOOL8 v23;
  char v24;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  int *v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t ViewDescriptor;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  int8x16_t v47;
  uint64_t v48;
  uint64_t v49;
  re::ecs2::EntityComponentCollection *v50;
  const __int16 *v51;
  int16x8_t *v52;
  int16x8_t v53;
  int v54;
  int16x8_t *v55;
  uint64_t v56;
  uint16x8_t v57;
  _OWORD *v58;
  const __int16 *v59;
  int16x8_t v60;
  int v61;
  int16x8_t *v62;
  uint64_t v63;
  uint16x8_t v64;
  _OWORD *v65;
  const __int16 *v66;
  int16x8_t v67;
  int v68;
  uint16x8_t v69;
  _OWORD *v70;
  uint64_t v71;
  re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t i;
  unint64_t v76;
  unint64_t v77;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __n128 v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  int v116;
  int v117;
  _OWORD *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  const re::CameraMultiView *v133;
  re::CameraMultiView *v134;
  uint64_t v135;
  re::CameraMultiView *v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned __int8 *v142;
  unsigned int v143;
  uint64_t v144;
  int *v145;
  re::DynamicString **v146;
  int v147;
  _QWORD *v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  _BOOL8 v152;
  char v153;
  re::RenderFrameData *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t (**v165)(uint64_t, _QWORD, _QWORD, void *, void *);
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  double v175;
  uint64_t v177;
  uint64_t v178;
  re *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  re::ecs2::RenderingSubsystem *v183;
  re::RenderFrame *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  int v189[2];
  _OWORD v190[2];
  unsigned int v191;
  uint64_t v192;
  _QWORD v193[2];
  unint64_t v194;
  int v195;
  uint64_t *v196;
  void *v197;
  __int128 *v198;
  _BYTE v199[18];
  __int16 v200;
  _BYTE v201[20];
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;

  v9 = a1;
  v207 = *MEMORY[0x24BDAC8D0];
  v183 = (re::ecs2::RenderingSubsystem *)a3[1];
  *(_QWORD *)v189 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 112);
  v10 = *(_QWORD *)(*(_QWORD *)v189 + 104);
  if (v10)
  {
    a1 = (re *)re::RenderFrameBox::get(v10 + 344, 0xFFFFFFFFFFFFFFFuLL);
    v11 = (unint64_t *)a1;
  }
  else
  {
    v11 = 0;
  }
  v12 = re::globalAllocators(a1);
  v184 = (re::RenderFrame *)v11;
  v13 = re::PerFrameAllocatorManager::perFrameAllocator(v12[6], v11[46]);
  v196 = 0;
  v193[1] = 0;
  v194 = 0;
  v195 = 0;
  v187 = v13;
  v193[0] = v13;
  re::DynamicArray<float *>::setCapacity(v193, 0);
  ++v195;
  v182 = a3;
  v14 = a3[5];
  v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a3[2] + 8, v14);
  v186 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v9 + 1) + 136) + 24))(*(_QWORD *)(*((_QWORD *)v9 + 1) + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v202, v15, 0);
  *(_QWORD *)&v190[0] = v14;
  *(_OWORD *)((char *)v190 + 8) = v202;
  if (v15 != (_QWORD)v202
    || WORD4(v202) != 0xFFFFLL
    || (v16 = 0, v17 = 0, (DWORD2(v202) & 0xFFFF0000) != 0xFFFF0000))
  {
    v17 = 0;
    v16 = 0;
    while (1)
    {
      v148 = *(_QWORD **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)v190 + 4);
      *(_QWORD *)v199 = v148;
      re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v193, v199);
      *(_QWORD *)&v202 = v148;
      *(_QWORD *)&v203 = 0;
      if (v148[27])
      {
        v149 = 0;
        goto LABEL_140;
      }
      if (v148[32])
        break;
      if (v148[37])
      {
        v149 = 2;
LABEL_140:
        v5 = 0;
        v150 = 0;
        DWORD2(v202) = v149;
        do
        {
          v151 = re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator*(&v202);
          if (*(_QWORD *)(v151 + 232))
            v152 = 1;
          else
            v152 = *(_QWORD *)(v151 + 264) != 0;
          v153 = *(_BYTE *)(v151 + 192) != 0;
          v150 = (*(_QWORD *)(v151 + 304) + v150) << v153;
          v5 = (v152 + v5) << v153;
          re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)&v202);
        }
        while ((_QWORD *)v202 != v148 || DWORD2(v202) != 3 || (_QWORD)v203 != 0);
        goto LABEL_152;
      }
      v150 = 0;
      v5 = 0;
LABEL_152:
      v16 += v5;
      v17 += v150;
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment((_WORD *)v190 + 4);
      if (*((_QWORD *)&v190[0] + 1) == v15 && LOWORD(v190[1]) == 0xFFFF && WORD1(v190[1]) == 0xFFFF)
        goto LABEL_7;
    }
    v149 = 1;
    goto LABEL_140;
  }
LABEL_7:
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v202, a5, 0);
  *(_QWORD *)&v190[0] = a4;
  *(_OWORD *)((char *)v190 + 8) = v202;
  if ((_QWORD)v202 != a5 || WORD4(v202) != 0xFFFFLL || (DWORD2(v202) & 0xFFFF0000) != 0xFFFF0000)
  {
    while (1)
    {
      v20 = *(_QWORD **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)v190 + 4);
      *(_QWORD *)v199 = v20;
      re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v193, v199);
      *(_QWORD *)&v202 = v20;
      *(_QWORD *)&v203 = 0;
      if (v20[27])
      {
        v21 = 0;
        goto LABEL_18;
      }
      if (v20[32])
        break;
      if (v20[37])
      {
        v21 = 2;
LABEL_18:
        v19 = 0;
        v18 = 0;
        DWORD2(v202) = v21;
        do
        {
          v22 = re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator*(&v202);
          if (*(_QWORD *)(v22 + 232))
            v23 = 1;
          else
            v23 = *(_QWORD *)(v22 + 264) != 0;
          v24 = *(_BYTE *)(v22 + 192) != 0;
          v18 = (*(_QWORD *)(v22 + 304) + v18) << v24;
          v19 = (v23 + v19) << v24;
          re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)&v202);
        }
        while ((_QWORD *)v202 != v20 || DWORD2(v202) != 3 || (_QWORD)v203 != 0);
        goto LABEL_30;
      }
      v18 = 0;
      v19 = 0;
LABEL_30:
      v16 += v19;
      v17 += v18;
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment((_WORD *)v190 + 4);
      if (*((_QWORD *)&v190[0] + 1) == a5 && LOWORD(v190[1]) == 0xFFFF && WORD1(v190[1]) == 0xFFFF)
        goto LABEL_33;
    }
    v21 = 1;
    goto LABEL_18;
  }
LABEL_33:
  re::RenderFrame::reserveDynamicArraysSize(v184, v16, v17);
  v27 = v196;
  v28 = v194;
  v29 = 126 - 2 * __clz(v194);
  if (v194)
    v30 = v29;
  else
    v30 = 0;
  v185 = &v196[v194];
  std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**,false>((uint64_t)v196, v185, v30, 1);
  v31 = *(unsigned __int8 *)(*(_QWORD *)v189 + 271);
  v191 = 0;
  memset(v190, 0, sizeof(v190));
  v192 = 0x7FFFFFFFLL;
  v32 = v31 != 0;
  if (!v28)
  {
    v143 = 0;
    goto LABEL_158;
  }
  v33 = (uint64_t)v182;
  v181 = a5;
  do
  {
    v34 = *v27;
    re::DrawingManager::getLayersWithPendingSizeOrScaleChanges(*(_QWORD **)(*(_QWORD *)v189 + 104), (uint64_t)&v202);
    if ((_QWORD)v203)
    {
      v35 = (int *)v204;
      v36 = (int *)(v204 + 4 * v203);
      v37 = *(_QWORD *)(v34 + 256);
      do
      {
        if (v37)
        {
          v38 = 0;
          v39 = *v35;
          do
          {
            ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor((re::ecs2::CameraViewDescriptorsComponent *)v34, (re::ecs2::CameraViewDescriptorsComponent *)(v38 + 0x10000));
            v41 = *(_QWORD *)(ViewDescriptor + 304);
            if (v41)
            {
              v42 = *(_QWORD *)(ViewDescriptor + 320);
              v43 = v42 + 136 * v41;
              while (2)
              {
                v44 = 0;
                v45 = 1;
                do
                {
                  if (v39 == *(_DWORD *)(v42 + 4 * v44 + 80))
                  {
                    re::ecs2::Component::markDirty((_QWORD *)v34);
                    goto LABEL_52;
                  }
                  v46 = v45;
                  v45 = 0;
                  v44 = 1;
                }
                while ((v46 & 1) != 0);
                v42 += 136;
                if (v42 != v43)
                  continue;
                break;
              }
            }
            ++v38;
            v37 = *(_QWORD *)(v34 + 256);
          }
          while (v38 < v37);
        }
        ++v35;
      }
      while (v35 != v36);
    }
LABEL_52:
    v47 = (int8x16_t)xmmword_2260F1E80;
    if ((_QWORD)v202 && (_QWORD)v204)
    {
      (*(void (**)(void))(*(_QWORD *)v202 + 40))();
      v47 = (int8x16_t)xmmword_2260F1E80;
    }
    v48 = *(_QWORD *)(v34 + 16);
    v49 = *(unsigned __int16 *)(v48 + 82);
    if (*(_WORD *)(v48 + 82))
    {
      v50 = (re::ecs2::EntityComponentCollection *)(v48 + 32);
      v51 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                            + 16);
      v52 = *(int16x8_t **)(v48 + 88);
      v53 = vld1q_dup_s16(v51);
      v54 = 1;
      v55 = v52;
      v56 = *(unsigned __int16 *)(v48 + 82);
      while (1)
      {
        v57 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v53, *v55), v47);
        v57.i16[0] = vmaxvq_u16(v57);
        if (v57.i32[0])
          break;
        v54 -= 8;
        ++v55;
        if (!--v56)
          goto LABEL_62;
      }
      if (v57.u16[0] - v54 < *(unsigned __int16 *)(v48 + 80))
      {
        v58 = (_OWORD *)re::ecs2::EntityComponentCollection::get(v50, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        re::ecs2::CameraViewDescriptorsHelper::updateCameraViewsPerFrameData<re::ecs2::PerspectiveCameraComponent>(*(_anonymous_namespace_ **)v189, (re::ecs2::CameraViewDescriptorsComponent *)v34, v58, (re::ecs2::CameraViewDescriptorsComponent *)v48);
        goto LABEL_74;
      }
LABEL_62:
      v59 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                            + 16);
      v60 = vld1q_dup_s16(v59);
      v61 = 1;
      v62 = *(int16x8_t **)(v48 + 88);
      v63 = *(unsigned __int16 *)(v48 + 82);
      while (1)
      {
        v64 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v60, *v62), v47);
        v64.i16[0] = vmaxvq_u16(v64);
        if (v64.i32[0])
          break;
        v61 -= 8;
        ++v62;
        if (!--v63)
          goto LABEL_68;
      }
      if (v64.u16[0] - v61 < *(unsigned __int16 *)(v48 + 80))
      {
        v65 = (_OWORD *)re::ecs2::EntityComponentCollection::get(v50, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        re::ecs2::CameraViewDescriptorsHelper::updateCameraViewsPerFrameData<re::ecs2::OrthographicCameraComponent>(*(_anonymous_namespace_ **)v189, (re::ecs2::CameraViewDescriptorsComponent *)v34, v65, (re::ecs2::CameraViewDescriptorsComponent *)v48);
        goto LABEL_74;
      }
LABEL_68:
      v66 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                            + 16);
      v67 = vld1q_dup_s16(v66);
      v68 = 1;
      while (1)
      {
        v69 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v67, *v52), v47);
        v69.i16[0] = vmaxvq_u16(v69);
        if (v69.i32[0])
          break;
        v68 -= 8;
        ++v52;
        if (!--v49)
          goto LABEL_74;
      }
      if (v69.u16[0] - v68 < *(unsigned __int16 *)(v48 + 80))
      {
        v70 = (_OWORD *)re::ecs2::EntityComponentCollection::get(v50, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        re::ecs2::CameraViewDescriptorsHelper::updateCameraViewsPerFrameData<re::ecs2::CustomMatrixCameraComponent>(*(_anonymous_namespace_ **)v189, (re::ecs2::CameraViewDescriptorsComponent *)v34, v70, (re::ecs2::CameraViewDescriptorsComponent *)v48);
      }
    }
LABEL_74:
    objc_destroyWeak((id *)(v34 + 32));
    *(_QWORD *)(v34 + 32) = 0;
    v71 = *(_QWORD *)(v34 + 296);
    if (v71)
    {
      *(_QWORD *)(v34 + 296) = 0;
      v72 = *(re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor **)(v34 + 312);
      v73 = 384 * v71;
      do
      {
        re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor::~OneoffViewDescriptor(v72);
        v72 = (re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor *)(v74 + 384);
        v73 -= 384;
      }
      while (v73);
      ++*(_DWORD *)(v34 + 304);
      for (i = 24; i != 56; i += 8)
      {
        v76 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(v33 + 16), *(_QWORD *)(v33 + i), (re::ecs2::Component *)v34);
        if (v76 != -1 && (v77 & 0xFFFFFF00000000) != 0)
        {
          v79 = v76;
          v80 = v77;
          goto LABEL_85;
        }
      }
      v79 = -1;
      v80 = 0xFFFFFFFFLL;
LABEL_85:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(v33, v79, v80);
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v186 + 8))(&v202, v186, v48);
    if ((_BYTE)v202)
      v81 = *((_QWORD *)&v202 + 1);
    else
      v81 = 0;
    v197 = (void *)v81;
    *(_QWORD *)&v203 = 0;
    DWORD2(v203) = 0;
    *(_QWORD *)&v204 = 0;
    v82 = v187;
    v202 = (unint64_t)v187;
    re::DynamicArray<re::CameraView>::setCapacity(&v202, 0);
    ++DWORD2(v203);
    v205 = 0uLL;
    LODWORD(v206) = 0;
    *((_QWORD *)&v206 + 1) = 0;
    *((_QWORD *)&v204 + 1) = v187;
    re::DynamicArray<re::CameraMultiView>::setCapacity((_QWORD *)&v204 + 1, 0);
    LODWORD(v206) = v206 + 1;
    v83 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v81 ^ (v81 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v81 ^ (v81 >> 30))) >> 27));
    v84 = v83 ^ (v83 >> 31);
    if (!*(_QWORD *)&v190[0])
    {
      LODWORD(v85) = 0;
LABEL_95:
      v87 = re::HashTable<unsigned long long,re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v190, v85, v84, &v197, (uint64_t)&v202);
      ++HIDWORD(v192);
      v88 = *(_QWORD *)&v190[1] + 104 * v87;
      goto LABEL_97;
    }
    v85 = v84 % DWORD2(v190[1]);
    v86 = *(unsigned int *)(*((_QWORD *)&v190[0] + 1) + 4 * v85);
    if ((_DWORD)v86 == 0x7FFFFFFF)
      goto LABEL_95;
    while (*(_QWORD *)(*(_QWORD *)&v190[1] + 104 * v86 + 16) != v81)
    {
      LODWORD(v86) = *(_DWORD *)(*(_QWORD *)&v190[1] + 104 * v86 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v86 == 0x7FFFFFFF)
        goto LABEL_95;
    }
    v88 = *(_QWORD *)&v190[1] + 104 * v86;
LABEL_97:
    v89 = v88 + 24;
    re::DynamicArray<re::CameraMultiView>::deinit((uint64_t)&v204 + 8);
    re::DynamicArray<re::CameraView>::deinit((uint64_t)&v202);
    v92 = *(_QWORD *)(v34 + 56);
    if (v92)
    {
      v188 = v27;
      v93 = *(_QWORD *)(v89 + 16);
      if (v93 == -1)
      {
        v198 = 0;
        v205 = 0u;
        v206 = 0u;
        v203 = 0u;
        v204 = 0u;
        v202 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v199 = 136315906;
        *(_QWORD *)&v199[4] = "copy";
        *(_WORD *)&v199[12] = 1024;
        *(_DWORD *)&v199[14] = 643;
        v200 = 2048;
        *(_QWORD *)v201 = -1;
        *(_WORD *)&v201[8] = 2048;
        *(_QWORD *)&v201[10] = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_198:
        re::internal::assertLog((re::internal *)7, v90, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v93, v93, v92);
        _os_crash();
        __break(1u);
LABEL_199:
        v34 = v92 + 1;
        v198 = 0;
        v205 = 0u;
        v206 = 0u;
        v203 = 0u;
        v204 = 0u;
        v202 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v199 = 136315906;
        *(_QWORD *)&v199[4] = "copy";
        *(_WORD *)&v199[12] = 1024;
        *(_DWORD *)&v199[14] = 643;
        v200 = 2048;
        *(_QWORD *)v201 = v92;
        *(_WORD *)&v201[8] = 2048;
        *(_QWORD *)&v201[10] = v92 + 1;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_200:
        re::internal::assertLog((re::internal *)7, v90, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v92, v92, v5);
        _os_crash();
        __break(1u);
        goto LABEL_201;
      }
      v82 = v93 + v92;
      if (__CFADD__(v93, v92))
        goto LABEL_198;
      v94 = *(_QWORD *)(v34 + 72);
      if (v93 >= v82)
      {
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::CameraView const*,re::CameraView const*,re::CameraView*>(*(_QWORD *)(v34 + 72), v94 + 672 * v92, *(_QWORD *)(v89 + 32) + 672 * v93, v91);
      }
      else
      {
        re::DynamicArray<re::CameraView>::growCapacity((_QWORD *)v89, v93 + v92);
        v95 = *(_QWORD *)(v89 + 16);
        v96 = v94 + 672 * (v95 - v93);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::CameraView const*,re::CameraView const*,re::CameraView*>(v94, v96, *(_QWORD *)(v89 + 32) + 672 * v93, v97);
        if (v95 - v93 != v92)
        {
          v98 = v95;
          v99 = 0;
          v100 = *(_QWORD *)(v89 + 32) + 672 * *(_QWORD *)(v89 + 16);
          v101 = 672 * v93 + 672 * v92 - 672 * v98;
          do
          {
            v102 = v100 + v99;
            v103 = v96 + v99;
            re::DynamicString::DynamicString((re::DynamicString *)(v100 + v99), (const re::DynamicString *)(v96 + v99));
            v104 = *(_OWORD *)(v96 + v99 + 32);
            v105 = *(_OWORD *)(v96 + v99 + 48);
            v106 = *(_OWORD *)(v96 + v99 + 80);
            *(_OWORD *)(v102 + 64) = *(_OWORD *)(v96 + v99 + 64);
            *(_OWORD *)(v102 + 80) = v106;
            *(_OWORD *)(v102 + 32) = v104;
            *(_OWORD *)(v102 + 48) = v105;
            v107 = *(_OWORD *)(v96 + v99 + 96);
            v108 = *(_OWORD *)(v96 + v99 + 112);
            v109 = *(_OWORD *)(v96 + v99 + 144);
            *(_OWORD *)(v102 + 128) = *(_OWORD *)(v96 + v99 + 128);
            *(_OWORD *)(v102 + 144) = v109;
            *(_OWORD *)(v102 + 96) = v107;
            *(_OWORD *)(v102 + 112) = v108;
            v110 = *(_OWORD *)(v96 + v99 + 160);
            v111 = *(_OWORD *)(v96 + v99 + 176);
            v112 = *(_OWORD *)(v96 + v99 + 208);
            *(_OWORD *)(v102 + 192) = *(_OWORD *)(v96 + v99 + 192);
            *(_OWORD *)(v102 + 208) = v112;
            *(_OWORD *)(v102 + 160) = v110;
            *(_OWORD *)(v102 + 176) = v111;
            re::DynamicArray<re::RenderGraphFileProvider>::DynamicArray(v100 + v99 + 224, (uint64_t *)(v96 + v99 + 224));
            *(_WORD *)(v102 + 264) = *(_WORD *)(v96 + v99 + 264);
            re::DynamicArray<re::CameraView::PickupScopeLane>::DynamicArray(v100 + v99 + 272, (uint64_t *)(v96 + v99 + 272));
            *(_OWORD *)(v102 + 320) = *(_OWORD *)(v96 + v99 + 320);
            v113 = *(_OWORD *)(v96 + v99 + 336);
            v114 = *(_OWORD *)(v96 + v99 + 352);
            v115 = *(_OWORD *)(v96 + v99 + 368);
            *(_QWORD *)(v102 + 384) = *(_QWORD *)(v96 + v99 + 384);
            *(_OWORD *)(v102 + 352) = v114;
            *(_OWORD *)(v102 + 368) = v115;
            *(_OWORD *)(v102 + 336) = v113;
            *(_BYTE *)(v102 + 400) = *(_BYTE *)(v96 + v99 + 400);
            v116 = *(unsigned __int8 *)(v96 + v99 + 401);
            *(_BYTE *)(v102 + 401) = v116;
            if (v116)
              *(_BYTE *)(v102 + 402) = *(_BYTE *)(v103 + 402);
            v117 = *(unsigned __int8 *)(v103 + 404);
            *(_BYTE *)(v102 + 404) = v117;
            if (v117)
              *(_DWORD *)(v100 + v99 + 408) = *(_DWORD *)(v96 + v99 + 408);
            v118 = (_OWORD *)(v100 + v99);
            v119 = *(_OWORD *)(v96 + v99 + 416);
            v120 = *(_OWORD *)(v96 + v99 + 432);
            v121 = *(_OWORD *)(v96 + v99 + 464);
            v118[28] = *(_OWORD *)(v96 + v99 + 448);
            v118[29] = v121;
            v118[26] = v119;
            v118[27] = v120;
            v122 = *(_OWORD *)(v96 + v99 + 480);
            v123 = *(_OWORD *)(v96 + v99 + 496);
            v124 = *(_OWORD *)(v96 + v99 + 528);
            v118[32] = *(_OWORD *)(v96 + v99 + 512);
            v118[33] = v124;
            v118[30] = v122;
            v118[31] = v123;
            v126 = *(_OWORD *)(v96 + v99 + 624);
            v125 = *(_OWORD *)(v96 + v99 + 640);
            v127 = *(_OWORD *)(v96 + v99 + 608);
            *(_QWORD *)(v100 + v99 + 653) = *(_QWORD *)(v96 + v99 + 653);
            v118[39] = v126;
            v118[40] = v125;
            v118[38] = v127;
            v128 = *(_OWORD *)(v96 + v99 + 544);
            v129 = *(_OWORD *)(v96 + v99 + 560);
            v130 = *(_OWORD *)(v96 + v99 + 592);
            v118[36] = *(_OWORD *)(v96 + v99 + 576);
            v118[37] = v130;
            v118[34] = v128;
            v118[35] = v129;
            v99 += 672;
          }
          while (v101 != v99);
        }
        *(_QWORD *)(v89 + 16) = v82;
        a5 = v181;
        v33 = (uint64_t)v182;
      }
      ++*(_DWORD *)(v89 + 24);
      v27 = v188;
    }
    v5 = *(_QWORD *)(v34 + 96);
    if (v5)
    {
      v92 = *(_QWORD *)(v89 + 56);
      if (v92 == -1)
        goto LABEL_199;
      v82 = v92 + v5;
      if (__CFADD__(v92, v5))
        goto LABEL_200;
      v131 = *(_QWORD *)(v34 + 112);
      if (v92 >= v82)
      {
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::CameraMultiView const*,re::CameraMultiView const*,re::CameraMultiView*,0>(*(_QWORD *)(v34 + 112), v131 + 1360 * v5, *(_QWORD *)(v89 + 72) + 1360 * v92);
      }
      else
      {
        re::DynamicArray<re::CameraMultiView>::growCapacity((_QWORD *)(v89 + 40), v92 + v5);
        v132 = *(_QWORD *)(v89 + 56);
        v133 = (const re::CameraMultiView *)(v131 + 1360 * (v132 - v92));
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::CameraMultiView const*,re::CameraMultiView const*,re::CameraMultiView*,0>(v131, (uint64_t)v133, *(_QWORD *)(v89 + 72) + 1360 * v92);
        if (v132 - v92 != v5)
        {
          v134 = (re::CameraMultiView *)(*(_QWORD *)(v89 + 72) + 1360 * *(_QWORD *)(v89 + 56));
          v135 = 1360 * v5 + 1360 * v92 - 1360 * v132;
          do
          {
            v136 = re::CameraMultiView::CameraMultiView(v134, v133);
            v133 = (const re::CameraMultiView *)((char *)v133 + 1360);
            v134 = (re::CameraMultiView *)((char *)v136 + 1360);
            v135 -= 1360;
          }
          while (v135);
        }
        *(_QWORD *)(v89 + 56) = v82;
        a5 = v181;
        v33 = (uint64_t)v182;
      }
      ++*(_DWORD *)(v89 + 64);
    }
    v137 = *(_QWORD *)(v89 + 16);
    if (v137)
    {
      v138 = 672 * v137;
      v139 = (unsigned __int8 *)(*(_QWORD *)(v89 + 32) + 653);
      do
      {
        v32 = (*v139 | v32) != 0;
        v139 += 672;
        v138 -= 672;
      }
      while (v138);
    }
    v140 = *(_QWORD *)(v89 + 56);
    if (v140)
    {
      v141 = 1360 * v140;
      v142 = (unsigned __int8 *)(*(_QWORD *)(v89 + 72) + 653);
      do
      {
        v32 = (*v142 | v32) != 0;
        v142 += 1360;
        v141 -= 1360;
      }
      while (v141);
    }
    ++v27;
  }
  while (v27 != v185);
  v143 = v191;
  if (!v191)
  {
LABEL_158:
    LODWORD(v144) = 0;
    v146 = (re::DynamicString **)v184;
    goto LABEL_159;
  }
  v144 = 0;
  v145 = (int *)(*(_QWORD *)&v190[1] + 8);
  v146 = (re::DynamicString **)v184;
  while (1)
  {
    v147 = *v145;
    v145 += 26;
    if (v147 < 0)
      break;
    if (v191 == ++v144)
    {
      LODWORD(v144) = v191;
      break;
    }
  }
LABEL_159:
  v156 = (re::RenderFrameData *)(v146 + 33);
  if (v143 != (_DWORD)v144)
  {
    v157 = v144;
    v158 = *(_QWORD *)&v190[1];
    do
    {
      v159 = v158 + 104 * v157;
      re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v183, *(const re::ecs2::Scene **)(v159 + 16), v146, &v202);
      if (*(_QWORD *)(v159 + 40))
      {
        *(_QWORD *)v199 = (unint64_t)v202 >> 1;
        v160 = re::RenderFrameData::stream(v156, (const re::WeakStringID *)v199);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v160 + 48) + 616))(*(_QWORD *)(v160 + 48), v159 + 24);
      }
      if (*(_QWORD *)(v158 + 104 * v157 + 80))
      {
        *(_QWORD *)v199 = (unint64_t)v202 >> 1;
        v161 = re::RenderFrameData::stream(v156, (const re::WeakStringID *)v199);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v161 + 48) + 648))(*(_QWORD *)(v161 + 48), v159 + 64);
      }
      re::StringID::destroyString((re::StringID *)&v202);
      v158 = *(_QWORD *)&v190[1];
      if (v191 <= (int)v144 + 1)
        v162 = v144 + 1;
      else
        v162 = v191;
      while (1)
      {
        v157 = (v144 + 1);
        if (v162 - 1 == (_DWORD)v144)
          break;
        LODWORD(v144) = v144 + 1;
        v163 = v157;
        if ((*(_DWORD *)(*(_QWORD *)&v190[1] + 104 * v157 + 8) & 0x80000000) != 0)
          goto LABEL_172;
      }
      v163 = v162;
LABEL_172:
      LODWORD(v144) = v163;
      v146 = (re::DynamicString **)v184;
    }
    while (v143 != v163);
  }
  if (v32)
  {
    *(_QWORD *)&v202 = 0xC1ECEDF69A9CD01;
    v164 = re::RenderFrameData::stream(v156, (const re::WeakStringID *)&v202);
    v165 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v164, (uint64_t *)&v197);
    if (!v165)
    {
      v177 = *(_QWORD *)(*(_QWORD *)(v164 + 48) + 8);
      v178 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v177 + 32))(v177, 56, 8);
      *(_QWORD *)v178 = 0;
      *(_QWORD *)(v178 + 8) = 0;
      *(_DWORD *)(v178 + 16) = 1;
      *(_QWORD *)(v178 + 32) = 0;
      *(_QWORD *)(v178 + 40) = 0;
      *(_QWORD *)(v178 + 24) = 0;
      *(_DWORD *)(v178 + 48) = 0;
      v179 = (re *)re::BucketArray<re::PipelineCompilationData,4ul>::init(v178, v177, 1uLL);
      v180 = re::globalAllocators(v179)[2];
      *(_QWORD *)v199 = &off_24ED624C8;
      *(_QWORD *)&v199[8] = v177;
      *(_QWORD *)&v201[4] = v180;
      *(_QWORD *)&v201[12] = v199;
      *(_QWORD *)&v202 = std::__any_imp::_SmallHandler<re::BucketArray<re::PipelineCompilationData,4ul> *>::__handle[abi:nn180100];
      *((_QWORD *)&v202 + 1) = v178;
      *((_QWORD *)&v205 + 1) = v180;
      *(_QWORD *)&v206 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v204, (uint64_t)v199);
      v165 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v164, (uint64_t *)&v197, (re *)&v202);
      if ((_QWORD)v206)
      {
        v198 = &v202;
        (*(void (**)(_QWORD, __int128 **))(*(_QWORD *)v206 + 16))(v206, &v198);
        if ((_QWORD)v206)
        {
          (**(void (***)(_QWORD))v206)(v206);
          if ((__int128 *)v206 != &v204)
            (*(void (**)(_QWORD))(**((_QWORD **)&v205 + 1) + 40))(*((_QWORD *)&v205 + 1));
          *(_QWORD *)&v206 = 0;
        }
      }
      if ((_QWORD)v202)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD, _QWORD))v202)(0, &v202, 0, 0, 0);
      if (*(_QWORD *)&v201[12])
      {
        (***(void (****)(_QWORD))&v201[12])(*(_QWORD *)&v201[12]);
        if (*(_BYTE **)&v201[12] != v199)
          (*(void (**)(_QWORD))(**(_QWORD **)&v201[4] + 40))(*(_QWORD *)&v201[4]);
      }
    }
    v168 = *v166;
    v169 = *(_QWORD *)(*v166 + 40);
    v82 = *(_QWORD *)(*v166 + 8);
    if (v169 + 1 > 4 * v82)
    {
      re::BucketArray<re::PipelineCompilationData,4ul>::setBucketsCapacity((_QWORD *)*v166, (v169 + 4) >> 2);
      v82 = *(_QWORD *)(v168 + 8);
    }
    v34 = v169 >> 2;
    if (v82 > v169 >> 2)
    {
      if ((*(_BYTE *)(v168 + 16) & 1) != 0)
        v170 = v168 + 24;
      else
        v170 = *(_QWORD *)(v168 + 32);
      v171 = *(_QWORD *)(v170 + 8 * v34);
      ++*(_QWORD *)(v168 + 40);
      ++*(_DWORD *)(v168 + 48);
      v172 = v171 + 16 * (v169 & 3);
      *(_QWORD *)v172 = &off_24ED62290;
      *(_WORD *)(v172 + 8) = 1;
      v173 = *(_QWORD *)(v168 + 40);
      if (v173)
      {
        re::BucketArray<re::PipelineCompilationData,4ul>::operator[](v168, v173 - 1);
        goto LABEL_183;
      }
LABEL_202:
      re::internal::assertLog((re::internal *)4, v167, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
      _os_crash();
      __break(1u);
    }
LABEL_201:
    v198 = 0;
    v205 = 0u;
    v206 = 0u;
    v203 = 0u;
    v204 = 0u;
    v202 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v199 = 136315906;
    *(_QWORD *)&v199[4] = "operator[]";
    *(_WORD *)&v199[12] = 1024;
    *(_DWORD *)&v199[14] = 858;
    v200 = 2048;
    *(_QWORD *)v201 = v34;
    *(_WORD *)&v201[8] = 2048;
    *(_QWORD *)&v201[10] = v82;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_202;
  }
LABEL_183:
  v174 = *(_DWORD *)(a5 + 40);
  v175 = re::HashTable<unsigned long long,re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v190);
  if (v193[0] && v196)
    (*(void (**)(double))(*(_QWORD *)v193[0] + 40))(v175);
  return v174 != 0;
}

uint64_t re::ecs2::CameraViewDescriptorsSystem::updateScenes(uint64_t result, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  re::ecs2::System *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[2];
  _QWORD v66[2];
  unint64_t v67;
  _BYTE v68[16];
  __int128 v69;
  __int128 v70;
  unsigned int v71;
  uint64_t v72;
  id v73;
  id v74;
  __int128 v75;
  char v76;
  uint64_t v77;

  v5 = result;
  v77 = *MEMORY[0x24BDAC8D0];
  v66[0] = a3;
  v66[1] = a4;
  v6 = *(_QWORD *)(result + 104);
  if (!v6 || (*(_BYTE *)(v6 + 424) & 0x10) != 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(result + 112) + 104);
    if (v7 && (v8 = re::RenderFrameBox::get(v7 + 344, 0xFFFFFFFFFFFFFFFuLL)) != 0)
    {
      v9 = v8;
      re::CameraStreamManager::context(*(re::CameraStreamManager **)(*(_QWORD *)(v5 + 112) + 112), (uint64_t)&v69);
      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v9 + 320) + 208))(*(_QWORD *)(v9 + 320), &v69);
      if (v74)
      {

        v74 = 0;
      }
      if (v73)
      {

        v73 = 0;
      }
      re::SmallHashTable<re::WeakStringID,re::CameraStreamParams,4ul,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false>::~SmallHashTable((uint64_t)&v69);
      re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v65);
      v10 = a2[1];
      if (v10)
      {
        v11 = *a2;
        v63 = (uint64_t)&(*a2)[(_QWORD)v10];
        v64 = v5 + 328;
        while (1)
        {
          v12 = *v11;
          *(_QWORD *)&v69 = *v11;
          v13 = *(_QWORD *)(*(_QWORD *)(v5 + 224)
                          + 16
                          * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v5 + 216), &v69)+ 8);
          re::DynamicBitset<unsigned long long,64ul>::clearBit(v64, v13);
          v14 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5 + 160, v13);
          v15 = *(_QWORD *)(*v14 + 224);
          v16 = v14[3];
          v17 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v14[2] + 8, v16);
          if (*(_DWORD *)(v17 + 40))
            v18 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v15 + 24))(v15, v66, v14, v16, v17, 0);
          else
            v18 = 0;
          v19 = v14[5];
          v20 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v14[2] + 8, v19);
          if (*(_DWORD *)(v20 + 40))
            v18 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, v66, v14, v19, v20, 0);
          v21 = v14[6];
          v22 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v14[2] + 8, v21);
          if (*(_DWORD *)(v22 + 40))
            break;
          if (v18)
            goto LABEL_18;
LABEL_19:
          if (!*(_BYTE *)(v5 + 392))
            goto LABEL_36;
          v23 = *(_QWORD *)(v5 + 336);
          v24 = *(_DWORD *)(v5 + 344);
          if (v23 < 0xB)
          {
            v27 = (uint64_t *)(v5 + 352);
            if ((v24 & 1) == 0)
              v27 = *(uint64_t **)(v5 + 360);
            if (!v23)
              goto LABEL_36;
            v28 = 0;
            v29 = 8 * v23;
            do
            {
              v30 = *v27++;
              v28 |= v30;
              v29 -= 8;
            }
            while (v29);
            if (!v28)
            {
LABEL_36:
              if (!v12)
                goto LABEL_83;
              goto LABEL_37;
            }
          }
          else
          {
            v25 = (_QWORD *)(v5 + 352);
            if ((v24 & 1) == 0)
              v25 = *(_QWORD **)(v5 + 360);
            v26 = 8 * v23;
            while (!*v25)
            {
              ++v25;
              v26 -= 8;
              if (!v26)
                goto LABEL_36;
            }
          }
          v31 = *(re::ecs2::System **)(v5 + 376);
          if (*((_BYTE *)v31 + 86))
            goto LABEL_36;
          re::ecs2::System::queueToRun(v31, 0.0);
          if (!v12)
            goto LABEL_83;
LABEL_37:
          re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v12 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v68, 3009, v5);
          v33 = *(_QWORD *)(v5 + 112);
          if (!v33)
          {
            re::internal::assertLog((re::internal *)4, v32, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 895);
            _os_crash();
            __break(1u);
          }
          v34 = *(_QWORD *)(v33 + 104);
          if (v34)
            v35 = re::RenderFrameBox::get(v34 + 344, 0xFFFFFFFFFFFFFFFuLL);
          else
            v35 = 0;
          v36 = *(_QWORD *)(v35 + 376);
          v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 136) + 24))(*(_QWORD *)(v5 + 136));
          v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
          v39 = *(_DWORD *)(v38 + 124);
          if (!v39)
            v39 = *(_DWORD *)(v38 + 16);
          v71 = 0;
          v69 = 0u;
          v70 = 0u;
          v72 = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v69, v36, v39 + 1);
          v40 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v12 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (v40)
          {
            v41 = *(_QWORD *)(v40 + 24);
            if (v41)
            {
              v42 = *(uint64_t **)(v40 + 40);
              v43 = &v42[v41];
              do
              {
                v44 = *v42;
                if ((*(_BYTE *)(*(_QWORD *)(*v42 + 16) + 288) & 1) != 0)
                {
                  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v37 + 8))(&v75, v37);
                  if ((_BYTE)v75)
                    v45 = *((_QWORD *)&v75 + 1);
                  else
                    v45 = 0;
                  v67 = v45;
                  v46 = 0x94D049BB133111EBLL
                      * ((0xBF58476D1CE4E5B9 * (v45 ^ (v45 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v45 ^ (v45 >> 30))) >> 27));
                  v47 = v46 ^ (v46 >> 31);
                  if ((_QWORD)v69)
                  {
                    v48 = v47 % DWORD2(v70);
                    v49 = *(unsigned int *)(*((_QWORD *)&v69 + 1) + 4 * v48);
                    if ((_DWORD)v49 != 0x7FFFFFFF)
                    {
                      v50 = *(_QWORD *)(v70 + (v49 << 6) + 16);
                      v51 = *(unsigned int *)(*((_QWORD *)&v69 + 1) + 4 * v48);
                      while (v50 != v45)
                      {
                        v51 = *(_DWORD *)(v70 + (v51 << 6) + 8) & 0x7FFFFFFF;
                        if ((_DWORD)v51 == 0x7FFFFFFF)
                        {
                          v75 = *(_OWORD *)(v44 + 32);
                          v76 = *(_BYTE *)(v44 + 48);
                          while (1)
                          {
                            v49 = *(_DWORD *)(v70 + (v49 << 6) + 8) & 0x7FFFFFFF;
                            if ((_DWORD)v49 == 0x7FFFFFFF)
                              goto LABEL_58;
                            if (*(_QWORD *)(v70 + (v49 << 6) + 16) == v45)
                              goto LABEL_59;
                          }
                        }
                        v50 = *(_QWORD *)(v70 + (v51 << 6) + 16);
                      }
                      goto LABEL_59;
                    }
                  }
                  else
                  {
                    LODWORD(v48) = 0;
                  }
                  v75 = *(_OWORD *)(v44 + 32);
                  v76 = *(_BYTE *)(v44 + 48);
LABEL_58:
                  re::HashTable<unsigned long long,re::TintContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v69, v48, v47, &v67, (uint64_t)&v75);
                  ++HIDWORD(v72);
                }
LABEL_59:
                ++v42;
              }
              while (v42 != v43);
            }
          }
          v52 = v71;
          if (v71)
          {
            v53 = 0;
            v54 = (int *)(v70 + 8);
            while (1)
            {
              v55 = *v54;
              v54 += 16;
              if (v55 < 0)
                break;
              if (v71 == ++v53)
              {
                LODWORD(v53) = v71;
                break;
              }
            }
          }
          else
          {
            LODWORD(v53) = 0;
          }
          if (v71 != (_DWORD)v53)
          {
            v56 = v53;
            v57 = v70;
            do
            {
              v58 = v57 + (v56 << 6);
              v59 = v58 + 32;
              re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v12, *(const re::ecs2::Scene **)(v58 + 16), (re::DynamicString **)v35, &v75);
              v67 = (unint64_t)v75 >> 1;
              v60 = re::RenderFrameData::stream((re::RenderFrameData *)(v35 + 264), (const re::WeakStringID *)&v67);
              (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v60 + 48) + 472))(*(_QWORD *)(v60 + 48), v59);
              re::StringID::destroyString((re::StringID *)&v75);
              v57 = v70;
              if (v71 <= (int)v53 + 1)
                v61 = v53 + 1;
              else
                v61 = v71;
              v62 = v53;
              while (1)
              {
                v56 = (v62 + 1);
                if (v61 - 1 == v62)
                  break;
                ++v62;
                LODWORD(v53) = v56;
                if ((*(_DWORD *)(v70 + (v56 << 6) + 8) & 0x80000000) != 0)
                  goto LABEL_81;
              }
              LODWORD(v53) = v61;
LABEL_81:
              ;
            }
            while (v52 != (_DWORD)v53);
          }
          re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)&v69);
          re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v68);
LABEL_83:
          if (++v11 == (uint64_t *)v63)
            return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v65);
        }
        if (((v18 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v15 + 40))(v15, v66, v14, v21, v22, 0)) & 1) == 0)goto LABEL_19;
LABEL_18:
        re::DynamicBitset<unsigned long long,256ul>::setBit(v64, v13);
        goto LABEL_19;
      }
      return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v65);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "renderFrame", "addCameraStreamContext", 877);
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

void re::ecs2::CameraViewDescriptorsSystem::willAddSceneToECSService(re::ecs2::CameraViewDescriptorsSystem *this, re::ecs2::Scene *a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 160;
  v57[0] = (uint64_t)a2;
  v5 = (re::ecs2::CameraViewDescriptorsSystem *)((char *)this + 280);
  v6 = *((_QWORD *)this + 36);
  v7 = *((_DWORD *)this + 74);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 304);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 39);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 304);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 39);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 280, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::CameraViewDescriptorsSystem *)((char *)this + 216), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = (char *)this + 328;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *((_QWORD *)this + 25);
  *(_QWORD *)&v56 = 0;
  v18 = *((_QWORD *)this + 21);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 20, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 21);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*((_BYTE *)this + 176) & 1) != 0)
    v19 = (char *)this + 184;
  else
    v19 = (char *)*((_QWORD *)this + 24);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 25);
  ++*((_DWORD *)this + 52);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *((_QWORD *)this + 25);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(_QWORD *)&v66[0] = *((_QWORD *)this + 25) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::CameraViewDescriptorsSystem *)((char *)this + 216), v57, (uint64_t *)v66);
  v28 = *((_QWORD *)this + 25);
  v29 = *((_QWORD *)this + 40);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 40) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 40) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 296) & 1) != 0)
      v33 = (char *)this + 304;
    else
      v33 = (char *)*((_QWORD *)this + 39);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 36) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 25);
  v35 = *((_QWORD *)this + 46);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 46) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::CameraViewDescriptorsSystem *)((char *)this + 328), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 46) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 344) & 1) != 0)
      v39 = (char *)this + 352;
    else
      v39 = (char *)*((_QWORD *)this + 45);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 42) - 8] &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = (char *)this + 328;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 392))
    return;
  v40 = *((_QWORD *)this + 42);
  v41 = *((_DWORD *)this + 86);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 352);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 45);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 47);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 352);
    if (!v40)
      return;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 45);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::CameraViewDescriptorsSystem::willRemoveSceneFromECSService(re::ecs2::CameraViewDescriptorsSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  re::ecs2::Scene *v16;

  v16 = a2;
  v3 = (uint64_t *)((char *)this + 216);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 27, &v16);
  if (result != -1)
  {
    v5 = *((_QWORD *)this + 28) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 280, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 328, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 160, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::CameraViewDescriptorsComponent::snapshot(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  re::ecs2::CameraViewDescriptorsComponent *v11;
  uint64_t i;
  void *v13;
  void *v14;
  uint64_t j;
  id v16;
  _OWORD v17[8];
  uint64_t v18;
  _BYTE v19[32];
  __int128 v20;
  int v21;
  int v22;
  __int16 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int16 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _QWORD v43[6];
  int v44;
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v6 = 0;
  v57 = *MEMORY[0x24BDAC8D0];
  memset(v19, 0, sizeof(v19));
  v20 = xmmword_2260E5D70;
  v23 = 1;
  v21 = 0;
  v22 = 117440767;
  v24 = 0;
  v29 = 0;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v28 = 0;
  do
  {
    v7 = &v19[v6];
    *((_QWORD *)v7 + 18) = 0;
    *((_QWORD *)v7 + 15) = 0;
    *((_QWORD *)v7 + 16) = 0;
    *((_QWORD *)v7 + 14) = 0;
    v6 += 40;
    *((_DWORD *)v7 + 34) = 0;
  }
  while (v6 != 80);
  v30 = 0;
  v32 = xmmword_22610BC10;
  v31 = xmmword_22610BC10;
  v35 = 0u;
  v33 = 0u;
  v34 = 0u;
  v36 = 1;
  v37 = 0;
  v42 = 0;
  v39 = 0;
  v40 = 0;
  v38 = 0;
  v41 = 0;
  v43[3] = re::globalAllocators(a1)[2];
  v43[4] = 0;
  v8 = *(_QWORD *)(a2 + 16);
  if (v8 <= 1)
  {
    if (v8 != 1)
    {
      v18 = 0;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v52 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v44 = 136315906;
      v45 = "operator[]";
      v46 = 1024;
      v47 = 789;
      v48 = 2048;
      v49 = 0;
      v50 = 2048;
      v51 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v9 = (unint64_t)objc_msgSend(**(id **)(a2 + 32), sel_arrayLength) > 1;
  }
  else
  {
    v9 = 2;
  }
  v30 = v9;
  HIBYTE(v36) = 1;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v43, a3);
  re::DynamicArray<re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor>::add((uint64_t)a1 + 280, (re::ecs2::CameraViewDescriptor *)v19);
  if (*(_QWORD *)(a2 + 16))
  {
    v10 = 0;
    v11 = (re::ecs2::CameraViewDescriptorsComponent *)(*((_QWORD *)a1 + 37) + 0x1FFFFLL);
    do
    {
      v16 = *(id *)(*(_QWORD *)(a2 + 32) + 8 * v10);
      re::ecs2::SpecifyLaneCommand::SpecifyLaneCommand((uint64_t)v17, &v16, v10);
      re::ecs2::CameraViewDescriptorsComponent::addSpecifyCommand(a1, v11, (uint64_t)v17);
      for (i = 112; i != 96; i -= 8)
      {
        v13 = *(void **)((char *)v17 + i);
        if (v13)
        {

          *(_QWORD *)((char *)v17 + i) = 0;
        }
      }
      do
      {
        v14 = *(void **)((char *)v17 + i);
        if (v14)
        {

          *(_QWORD *)((char *)v17 + i) = 0;
        }
        i -= 8;
      }
      while (i != 80);
      for (j = 56; j != 8; j -= 24)
        re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)v17 + j));
      if (*(_QWORD *)&v17[0])
      {
        if ((BYTE8(v17[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v17[0] + 40))();
        memset(v17, 0, 32);
      }
      if (v16)
      {

        v16 = 0;
      }
      ++v10;
    }
    while (*(_QWORD *)(a2 + 16) > v10);
  }
  re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor::~OneoffViewDescriptor((re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor *)v19);
}

re::ecs2::CameraViewDescriptorsComponent *re::ecs2::CameraViewDescriptorsComponent::snapshotWithSettings(re *a1, uint64_t a2, const re::RuntimeRenderGraphDataStruct *a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char v11;
  re::ecs2::CameraViewDescriptorsComponent *v12;
  unint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  uint64_t j;
  id v19;
  _OWORD v20[8];
  uint64_t v21;
  __n128 v22[3];
  int v23;
  int v24;
  __int16 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int16 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _QWORD v45[6];
  int v46;
  const char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v8 = 0;
  v59 = *MEMORY[0x24BDAC8D0];
  memset(v22, 0, 32);
  v22[2] = (__n128)xmmword_2260E5D70;
  v25 = 1;
  v23 = 0;
  v24 = 117440767;
  v26 = 0;
  v31 = 0;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  v30 = 0;
  do
  {
    v9 = (char *)v22 + v8;
    *((_QWORD *)v9 + 18) = 0;
    *((_QWORD *)v9 + 15) = 0;
    *((_QWORD *)v9 + 16) = 0;
    *((_QWORD *)v9 + 14) = 0;
    v8 += 40;
    *((_DWORD *)v9 + 34) = 0;
  }
  while (v8 != 80);
  v32 = 0;
  v34 = xmmword_22610BC10;
  v33 = xmmword_22610BC10;
  v37 = 0u;
  v35 = 0u;
  v36 = 0u;
  v38 = 1;
  v39 = 0;
  v44 = 0;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v43 = 0;
  v45[3] = re::globalAllocators(a1)[2];
  v45[4] = 0;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10 <= 1)
  {
    if (v10 != 1)
    {
      v21 = 0;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v54 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v46 = 136315906;
      v47 = "operator[]";
      v48 = 1024;
      v49 = 789;
      v50 = 2048;
      v51 = 0;
      v52 = 2048;
      v53 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v11 = (unint64_t)objc_msgSend(**(id **)(a2 + 32), sel_arrayLength) > 1;
  }
  else
  {
    v11 = 2;
  }
  v32 = v11;
  HIBYTE(v38) = 1;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v45, a4);
  re::ecs2::CameraViewDescriptor::updateWithSettings(v22, a3);
  re::DynamicArray<re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor>::add((uint64_t)a1 + 280, (re::ecs2::CameraViewDescriptor *)v22);
  v12 = (re::ecs2::CameraViewDescriptorsComponent *)(*((_QWORD *)a1 + 37) + 0x1FFFFLL);
  if (*(_QWORD *)(a2 + 16))
  {
    v13 = 0;
    do
    {
      v19 = *(id *)(*(_QWORD *)(a2 + 32) + 8 * v13);
      re::ecs2::SpecifyLaneCommand::SpecifyLaneCommand((uint64_t)v20, &v19, v13);
      re::ecs2::CameraViewDescriptorsComponent::addSpecifyCommand(a1, v12, (uint64_t)v20);
      for (i = 112; i != 96; i -= 8)
      {
        v15 = *(void **)((char *)v20 + i);
        if (v15)
        {

          *(_QWORD *)((char *)v20 + i) = 0;
        }
      }
      do
      {
        v16 = *(void **)((char *)v20 + i);
        if (v16)
        {

          *(_QWORD *)((char *)v20 + i) = 0;
        }
        i -= 8;
      }
      while (i != 80);
      for (j = 56; j != 8; j -= 24)
        re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)v20 + j));
      if (*(_QWORD *)&v20[0])
      {
        if ((BYTE8(v20[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v20[0] + 40))();
        memset(v20, 0, 32);
      }
      if (v19)
      {

        v19 = 0;
      }
      ++v13;
    }
    while (*(_QWORD *)(a2 + 16) > v13);
  }
  re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor::~OneoffViewDescriptor((re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor *)v22);
  return v12;
}

void re::ecs2::CameraViewDescriptorsComponent::getAspect(re::ecs2::CameraViewDescriptorsComponent *this, re::ecs2::CameraViewDescriptorsComponent *a2, uint64_t a3, const re::RenderManager *a4, double a5)
{
  uint64_t v6;
  re::DrawingManager *v7;
  uint64_t ViewDescriptor;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  id v18;
  unsigned int v19;
  re::DrawingManager *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  re::ecs2::CameraViewDescriptorsComponent *v25;
  uint64_t v26;
  float *v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v32[3];

  v6 = *((_QWORD *)this + 27);
  if (v6 == 1)
  {
    if (!*((_QWORD *)this + 32) && !*(_QWORD *)(*((_QWORD *)this + 29) + 304))
    {
      LODWORD(a5) = *(_DWORD *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, 0) + 204);
      v7 = (re::DrawingManager *)*((_QWORD *)a4 + 13);
      if (v7)
        goto LABEL_5;
      return;
    }
    goto LABEL_8;
  }
  if (v6 || *((_QWORD *)this + 32))
  {
LABEL_8:
    ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
    if (!ViewDescriptor)
      return;
    v9 = ViewDescriptor;
    v10 = *(_BYTE *)(ViewDescriptor + 192) ? a3 : 0;
    if (!*(_QWORD *)(ViewDescriptor + 304))
      return;
    v11 = 0;
    v12 = 0;
    v30 = 8 * v10;
    v13 = 4 * v10 + 80;
    v14 = 24 * v10 + 32;
    while (1)
    {
      v15 = *(_QWORD *)(v9 + 320);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v32, (const re::AssetHandle *)(v15 + v14 + v11));
      if (*(_BYTE *)(v9 + 192) == 1)
        re::AssetHandle::operator=(v32, (uint64_t *)(v15 + v11 + 32));
      if (v32[1])
      {
        v17 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v32);
        if (*(_DWORD *)(v17 + 240))
        {
          v25 = (re::ecs2::CameraViewDescriptorsComponent *)std::__throw_bad_variant_access[abi:nn180100]();
          re::ecs2::CameraViewDescriptorsComponent::getCameraScreenSize(v25, v26, v27, v28, v29);
          return;
        }
        v18 = *(id *)(v17 + 160);
        objc_msgSend(v18, sel_width);
        objc_msgSend(v18, sel_height);
        if (v18)

      }
      else
      {
        v19 = *(_DWORD *)(v15 + v13 + v11);
        if (v19 != -1)
        {
          v20 = (re::DrawingManager *)*((_QWORD *)a4 + 13);
          if (v20)
            re::DrawingManager::layerAspect(v20, v19, v16);
          goto LABEL_29;
        }
        v21 = v15 + v30 + v11;
        v22 = *(void **)(v21 + 88);
        if (v22)
        {
          objc_msgSend(v22, sel_width);
          v23 = *(void **)(v21 + 88);
LABEL_28:
          objc_msgSend(v23, sel_height);
          goto LABEL_29;
        }
        v24 = *(void **)(v21 + 104);
        if (v24)
        {
          objc_msgSend(v24, sel_width);
          v23 = *(void **)(v21 + 104);
          goto LABEL_28;
        }
      }
LABEL_29:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v32);
      ++v12;
      v11 += 136;
      if (*(_QWORD *)(v9 + 304) <= v12)
        return;
    }
  }
  v7 = (re::DrawingManager *)*((_QWORD *)a4 + 13);
  if (v7)
LABEL_5:
    re::DrawingManager::layerAspect(v7, 0, a5);
}

uint64_t re::ecs2::CameraViewDescriptorsComponent::getCameraScreenSize(re::ecs2::CameraViewDescriptorsComponent *this, uint64_t a2, float *a3, double a4, double a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  float LayerSize;
  float v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  double v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  re::DrawingManager *v23;
  void *v24;
  void *v25;
  uint64_t v28;
  id v29;
  void *v30;
  float v32;
  float v33;
  float v34;
  re::ecs2::CameraViewDescriptorsComponentStateImpl *v35;
  _BYTE v36[8];
  uint64_t v37;
  re::ecs2::CameraViewDescriptorsComponent *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  const char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v8 = *((_QWORD *)this + 27);
  if (v8 != 1)
  {
    if (!v8)
    {
      if (*((_QWORD *)this + 32))
      {
        v38 = this;
        v40 = 0;
        goto LABEL_16;
      }
      goto LABEL_8;
    }
LABEL_6:
    v9 = 0;
    v38 = this;
    v40 = 0;
    goto LABEL_20;
  }
  if (*((_QWORD *)this + 32))
    goto LABEL_6;
  if (!*(_QWORD *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, 0) + 304))
  {
LABEL_8:
    v10 = *(_QWORD *)(a2 + 104);
    if (v10 && *(_QWORD *)(v10 + 1688) && **(_QWORD **)(v10 + 1704))
    {
      LayerSize = re::DrawingManager::getLayerSize((re::DrawingManager *)v10, 0, a4, a5);
      *a3 = LayerSize;
      a3[1] = v12;
      return v12 != 0.0 && LayerSize != 0.0;
    }
  }
  v14 = *((_QWORD *)this + 27);
  v38 = this;
  v40 = 0;
  if (!v14)
  {
LABEL_16:
    if (*((_QWORD *)this + 32))
    {
      v9 = 1;
    }
    else
    {
      if (!*((_QWORD *)this + 37))
        return 0;
      v9 = 2;
    }
    goto LABEL_20;
  }
  v9 = 0;
LABEL_20:
  v39 = v9;
  while (1)
  {
    v15 = re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator*(&v38);
    if (*(_QWORD *)(v15 + 304))
      break;
LABEL_31:
    re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)&v38);
    if (v38 == this && v39 == 3 && v40 == 0)
      return 0;
  }
  v16 = v15;
  v18 = *(float *)(v15 + 204);
  v17 = *(float *)(v15 + 208);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v36, (const re::AssetHandle *)(*(_QWORD *)(v15 + 320) + 32));
  if (v37)
  {
    v28 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v36);
    if (*(_DWORD *)(v28 + 240))
    {
      v35 = (re::ecs2::CameraViewDescriptorsComponentStateImpl *)std::__throw_bad_variant_access[abi:nn180100]();
      return re::ecs2::CameraViewDescriptorsComponentStateImpl::dependsOnComponents(v35);
    }
    v29 = *(id *)(v28 + 160);
    *a3 = v18 * (float)(unint64_t)objc_msgSend(v29, sel_width);
    a3[1] = v17 * (float)(unint64_t)objc_msgSend(v29, sel_height);
    if (v29)

LABEL_48:
    v13 = 1;
    goto LABEL_49;
  }
  if (!*(_QWORD *)(v16 + 304))
  {
    v41 = 0;
    v53 = 0u;
    v54 = 0u;
    v52 = 0u;
    v50 = 0u;
    v51 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v42 = 136315906;
    v43 = "operator[]";
    v44 = 1024;
    v45 = 797;
    v46 = 2048;
    v47 = 0;
    v48 = 2048;
    v49 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_55;
  }
  v21 = *(_QWORD *)(v16 + 320);
  v22 = *(unsigned int *)(v21 + 80);
  if ((_DWORD)v22 == -1
    || (v23 = *(re::DrawingManager **)(a2 + 104)) == 0
    || *((_QWORD *)v23 + 211) <= v22
    || !*(_QWORD *)(*((_QWORD *)v23 + 213) + 32 * v22))
  {
    v24 = *(void **)(v21 + 88);
    if (!v24)
    {
      v25 = *(void **)(v21 + 104);
      if (!v25)
      {
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v36);
        goto LABEL_31;
      }
      *a3 = v18 * (float)(unint64_t)objc_msgSend(v25, sel_width);
      if (*(_QWORD *)(v16 + 304))
      {
        v30 = *(void **)(*(_QWORD *)(v16 + 320) + 104);
        goto LABEL_47;
      }
LABEL_56:
      v41 = 0;
      v53 = 0u;
      v54 = 0u;
      v52 = 0u;
      v50 = 0u;
      v51 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v42 = 136315906;
      v43 = "operator[]";
      v44 = 1024;
      v45 = 797;
      v46 = 2048;
      v47 = 0;
      v48 = 2048;
      v49 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a3 = v18 * (float)(unint64_t)objc_msgSend(v24, sel_width);
    if (*(_QWORD *)(v16 + 304))
    {
      v30 = *(void **)(*(_QWORD *)(v16 + 320) + 88);
LABEL_47:
      a3[1] = v17 * (float)(unint64_t)objc_msgSend(v30, sel_height);
      goto LABEL_48;
    }
LABEL_55:
    v41 = 0;
    v53 = 0u;
    v54 = 0u;
    v52 = 0u;
    v50 = 0u;
    v51 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v42 = 136315906;
    v43 = "operator[]";
    v44 = 1024;
    v45 = 797;
    v46 = 2048;
    v47 = 0;
    v48 = 2048;
    v49 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_56;
  }
  v32 = v18 * re::DrawingManager::getLayerSize(v23, v22, v19, v20);
  v34 = v17 * v33;
  *a3 = v32;
  a3[1] = v34;
  v13 = v34 != 0.0 && v32 != 0.0;
LABEL_49:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v36);
  return v13;
}

uint64_t re::ecs2::CameraViewDescriptorsComponentStateImpl::dependsOnComponents(re::ecs2::CameraViewDescriptorsComponentStateImpl *this)
{
  return *((_QWORD *)this + 10);
}

void re::ecs2::CameraViewDescriptorsSystem::~CameraViewDescriptorsSystem(re::ecs2::CameraViewDescriptorsSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *((_QWORD *)this + 50) = &off_24ED62198;
  v2 = *((_QWORD *)this + 58);
  if (v2)
  {
    if (*((_QWORD *)this + 59))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 60));
      *((_QWORD *)this + 59) = 0;
      *((_QWORD *)this + 60) = 0;
    }
    *((_QWORD *)this + 58) = 0;
  }
  v3 = *((_QWORD *)this + 55);
  if (v3)
  {
    if (*((_QWORD *)this + 56))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 57));
      *((_QWORD *)this + 56) = 0;
      *((_QWORD *)this + 57) = 0;
    }
    *((_QWORD *)this + 55) = 0;
  }
  v4 = *((_QWORD *)this + 52);
  if (v4)
  {
    if (*((_QWORD *)this + 53))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 54));
      *((_QWORD *)this + 53) = 0;
      *((_QWORD *)this + 54) = 0;
    }
    *((_QWORD *)this + 52) = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 20);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *((_QWORD *)this + 50) = &off_24ED62198;
  v2 = *((_QWORD *)this + 58);
  if (v2)
  {
    if (*((_QWORD *)this + 59))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 60));
      *((_QWORD *)this + 59) = 0;
      *((_QWORD *)this + 60) = 0;
    }
    *((_QWORD *)this + 58) = 0;
  }
  v3 = *((_QWORD *)this + 55);
  if (v3)
  {
    if (*((_QWORD *)this + 56))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 57));
      *((_QWORD *)this + 56) = 0;
      *((_QWORD *)this + 57) = 0;
    }
    *((_QWORD *)this + 55) = 0;
  }
  v4 = *((_QWORD *)this + 52);
  if (v4)
  {
    if (*((_QWORD *)this + 53))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 54));
      *((_QWORD *)this + 53) = 0;
      *((_QWORD *)this + 54) = 0;
    }
    *((_QWORD *)this + 52) = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 20);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::CameraViewDescriptorsSystem::typeInfo(re::ecs2::CameraViewDescriptorsSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CameraViewDescriptorsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CameraViewDescriptorsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CameraViewDescriptorsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CameraViewDescriptorsSystem>, 0);
}

void re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>(char *__s2@<X1>, _QWORD *a2@<X0>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v12;
  const re::IntrospectionBase *v13;

  v4 = a2[5];
  if (!v4)
    goto LABEL_8;
  v7 = (uint64_t *)a2[7];
  v8 = 8 * v4;
  while (1)
  {
    v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2))
      break;
    ++v7;
    v8 -= 8;
    if (!v8)
      goto LABEL_8;
  }
  if ((v10 & 1) == 0
  {
    re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v13);
  }
  if (re::introspect<BOOL>(void)::info == *(_UNKNOWN **)(v9 + 16))
  {
    v11 = *(int *)(v9 + 36);
    if (a2[10] <= v11)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v12 = a2[12];
    *a3 = 1;
    a3[1] = *(_BYTE *)(v12 + v11);
  }
  else
  {
LABEL_8:
    *a3 = 0;
  }
}

__n128 re::RuntimeRenderGraphDataStruct::getValueOfType<re::Vector4<float>>@<Q0>(char *__s2@<X1>, _QWORD *a2@<X0>, __n128 *a3@<X8>)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t v13;

  v4 = a2[5];
  if (!v4)
    goto LABEL_8;
  v7 = (uint64_t *)a2[7];
  v8 = 8 * v4;
  while (1)
  {
    v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2))
      break;
    ++v7;
    v8 -= 8;
    if (!v8)
      goto LABEL_8;
  }
  if ((v11 & 1) == 0
  {
    re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
  }
  if (re::introspect<re::Vector4<float>>(void)::info == *(_UNKNOWN **)(v9 + 16))
  {
    v12 = *(int *)(v9 + 36);
    if (a2[10] <= v12)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v13 = a2[12];
    a3->n128_u8[0] = 1;
    result = *(__n128 *)(v13 + v12);
    a3[1] = result;
  }
  else
  {
LABEL_8:
    a3->n128_u8[0] = 0;
  }
  return result;
}

float re::RuntimeRenderGraphDataStruct::getValueOfType<float>@<S0>(char *__s2@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  float result;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t v13;
  const re::IntrospectionBase *v14;

  v4 = a2[5];
  if (!v4)
    goto LABEL_8;
  v7 = (uint64_t *)a2[7];
  v8 = 8 * v4;
  while (1)
  {
    v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2))
      break;
    ++v7;
    v8 -= 8;
    if (!v8)
      goto LABEL_8;
  }
  if ((v11 & 1) == 0
  {
    re::introspect<float>(void)::info = re::introspect_float(0, v14);
  }
  if (re::introspect<float>(void)::info == *(_UNKNOWN **)(v9 + 16))
  {
    v12 = *(int *)(v9 + 36);
    if (a2[10] <= v12)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v13 = a2[12];
    *(_BYTE *)a3 = 1;
    result = *(float *)(v13 + v12);
    *(float *)(a3 + 4) = result;
  }
  else
  {
LABEL_8:
    *(_BYTE *)a3 = 0;
  }
  return result;
}

_QWORD *re::DynamicArray<re::CameraMultiView>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::CameraMultiView>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x550uLL))
        {
          v2 = 1360 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 1360 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_22;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 1360, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_22:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 1360 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::CameraMultiView::CameraMultiView(v11, v8);
          v12 = 1344;
          do
          {
            v13 = (_QWORD *)(v8 + v12 - 672);
            re::DynamicArray<re::ecs2::ScopeLanePair>::deinit(v8 + v12 - 400);
            re::DynamicArray<re::RenderGraphFileProvider>::deinit(v8 + v12 - 448);
            if (*v13)
            {
              if ((*(_BYTE *)(v8 + v12 - 664) & 1) != 0)
                (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v13 + 40))(*v13, *(_QWORD *)(v8 + v12 - 656));
              *(_OWORD *)v13 = 0u;
              *(_OWORD *)(v8 + v12 - 656) = 0u;
            }
            v12 -= 672;
          }
          while (v12);
          v8 += 1360;
          v11 += 1360;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_22;
    }
  }
  return result;
}

uint64_t re::CameraMultiView::CameraMultiView(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v2 = 0;
  v3 = 0;
  do
  {
    v4 = result + 672 * v3;
    v5 = a2 + 672 * v3;
    *(_OWORD *)v4 = 0uLL;
    *(_OWORD *)(v4 + 16) = 0uLL;
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v5 + 24);
    v6 = *(_QWORD *)(v5 + 8);
    *(_QWORD *)v4 = *(_QWORD *)v5;
    *(_QWORD *)v5 = 0;
    v7 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)(v5 + 24) = 0;
    v9 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 8) = v6;
    *(_QWORD *)(v4 + 16) = v7;
    v10 = v2;
    *(_QWORD *)(v5 + 8) = v9;
    *(_QWORD *)(v5 + 16) = v8;
    v11 = *(_OWORD *)(v5 + 32);
    v12 = *(_OWORD *)(v5 + 48);
    v13 = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(v4 + 80) = v13;
    *(_OWORD *)(v4 + 32) = v11;
    *(_OWORD *)(v4 + 48) = v12;
    v14 = *(_OWORD *)(v5 + 96);
    v15 = *(_OWORD *)(v5 + 112);
    v16 = *(_OWORD *)(v5 + 144);
    *(_OWORD *)(v4 + 128) = *(_OWORD *)(v5 + 128);
    *(_OWORD *)(v4 + 144) = v16;
    *(_OWORD *)(v4 + 96) = v14;
    *(_OWORD *)(v4 + 112) = v15;
    v17 = *(_OWORD *)(v5 + 160);
    v18 = *(_OWORD *)(v5 + 176);
    v19 = *(_OWORD *)(v5 + 208);
    *(_OWORD *)(v4 + 192) = *(_OWORD *)(v5 + 192);
    *(_OWORD *)(v4 + 208) = v19;
    *(_OWORD *)(v4 + 160) = v17;
    *(_OWORD *)(v4 + 176) = v18;
    *(_QWORD *)(v4 + 256) = 0;
    *(_DWORD *)(v4 + 248) = 0;
    *(_QWORD *)(v4 + 232) = 0;
    *(_QWORD *)(v4 + 240) = 0;
    *(_QWORD *)(v4 + 224) = 0;
    v20 = *(_QWORD *)(v5 + 232);
    *(_QWORD *)(v4 + 224) = *(_QWORD *)(v5 + 224);
    *(_QWORD *)(v4 + 232) = v20;
    *(_QWORD *)(v5 + 224) = 0;
    *(_QWORD *)(v5 + 232) = 0;
    v21 = *(_QWORD *)(v4 + 240);
    *(_QWORD *)(v4 + 240) = *(_QWORD *)(v5 + 240);
    *(_QWORD *)(v5 + 240) = v21;
    v22 = *(_QWORD *)(v4 + 256);
    *(_QWORD *)(v4 + 256) = *(_QWORD *)(v5 + 256);
    *(_QWORD *)(v5 + 256) = v22;
    ++*(_DWORD *)(v5 + 248);
    ++*(_DWORD *)(v4 + 248);
    *(_WORD *)(v4 + 264) = *(_WORD *)(v5 + 264);
    *(_QWORD *)(v4 + 304) = 0;
    *(_DWORD *)(v4 + 296) = 0;
    *(_QWORD *)(v4 + 280) = 0;
    *(_QWORD *)(v4 + 288) = 0;
    *(_QWORD *)(v4 + 272) = 0;
    v23 = *(_QWORD *)(v5 + 280);
    *(_QWORD *)(v4 + 272) = *(_QWORD *)(v5 + 272);
    *(_QWORD *)(v4 + 280) = v23;
    *(_QWORD *)(v5 + 272) = 0;
    *(_QWORD *)(v5 + 280) = 0;
    v24 = *(_QWORD *)(v4 + 288);
    *(_QWORD *)(v4 + 288) = *(_QWORD *)(v5 + 288);
    *(_QWORD *)(v5 + 288) = v24;
    v25 = *(_QWORD *)(v4 + 304);
    *(_QWORD *)(v4 + 304) = *(_QWORD *)(v5 + 304);
    *(_QWORD *)(v5 + 304) = v25;
    ++*(_DWORD *)(v5 + 296);
    ++*(_DWORD *)(v4 + 296);
    *(_OWORD *)(v4 + 320) = *(_OWORD *)(v5 + 320);
    v26 = *(_OWORD *)(v5 + 336);
    v27 = *(_OWORD *)(v5 + 352);
    v28 = *(_OWORD *)(v5 + 368);
    *(_QWORD *)(v4 + 384) = *(_QWORD *)(v5 + 384);
    *(_OWORD *)(v4 + 352) = v27;
    *(_OWORD *)(v4 + 368) = v28;
    *(_OWORD *)(v4 + 336) = v26;
    *(_BYTE *)(v4 + 400) = *(_BYTE *)(v5 + 400);
    LODWORD(v5) = *(unsigned __int8 *)(v5 + 401);
    *(_BYTE *)(v4 + 401) = v5;
    if ((_DWORD)v5)
      *(_BYTE *)(result + 672 * v3 + 402) = *(_BYTE *)(a2 + 672 * v3 + 402);
    v29 = *(unsigned __int8 *)(a2 + 672 * v3 + 404);
    *(_BYTE *)(result + 672 * v3 + 404) = v29;
    if (v29)
      *(_DWORD *)(result + 672 * v3 + 408) = *(_DWORD *)(a2 + 672 * v3 + 408);
    v30 = 672 * v3;
    v31 = result + v30;
    v32 = a2 + v30;
    v33 = *(_OWORD *)(v32 + 416);
    v34 = *(_OWORD *)(v32 + 432);
    v35 = *(_OWORD *)(v32 + 464);
    *(_OWORD *)(v31 + 448) = *(_OWORD *)(v32 + 448);
    *(_OWORD *)(v31 + 464) = v35;
    *(_OWORD *)(v31 + 416) = v33;
    *(_OWORD *)(v31 + 432) = v34;
    v36 = *(_OWORD *)(v32 + 480);
    v37 = *(_OWORD *)(v32 + 496);
    v38 = *(_OWORD *)(v32 + 528);
    *(_OWORD *)(v31 + 512) = *(_OWORD *)(v32 + 512);
    *(_OWORD *)(v31 + 528) = v38;
    *(_OWORD *)(v31 + 480) = v36;
    *(_OWORD *)(v31 + 496) = v37;
    v40 = *(_OWORD *)(v32 + 624);
    v39 = *(_OWORD *)(v32 + 640);
    v41 = *(_OWORD *)(v32 + 608);
    *(_QWORD *)(v31 + 653) = *(_QWORD *)(v32 + 653);
    *(_OWORD *)(v31 + 624) = v40;
    *(_OWORD *)(v31 + 640) = v39;
    *(_OWORD *)(v31 + 608) = v41;
    v42 = *(_OWORD *)(v32 + 544);
    v43 = *(_OWORD *)(v32 + 560);
    v44 = *(_OWORD *)(v32 + 592);
    *(_OWORD *)(v31 + 576) = *(_OWORD *)(v32 + 576);
    *(_OWORD *)(v31 + 592) = v44;
    *(_OWORD *)(v31 + 544) = v42;
    *(_OWORD *)(v31 + 560) = v43;
    v2 = 1;
    v3 = 1;
  }
  while ((v10 & 1) == 0);
  *(_WORD *)(result + 1344) = *(_WORD *)(a2 + 1344);
  return result;
}

void re::PipelineCompilationData::~PipelineCompilationData(re::PipelineCompilationData *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::SmallHashTable<re::WeakStringID,re::CameraStreamParams,4ul,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false>::~SmallHashTable(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 16;
  re::DynamicInlineArray<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>,4ul>::clear(a1 + 16);
  re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)(a1 + 1696));
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)(a1 + 1696));
  re::DynamicInlineArray<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>,4ul>::clear(v2);
  return a1;
}

uint64_t re::DynamicInlineArray<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>,4ul>::clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  id *v3;

  v1 = result;
  if (*(_QWORD *)result)
  {
    v2 = 416 * *(_QWORD *)result;
    v3 = (id *)(result + 232);
    do
    {
      if (*v3)
      {

        *v3 = 0;
      }
      result = (uint64_t)*(v3 - 3);
      if (result)
      {
        if (*(v3 - 2))
        {
          result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(v3 - 1));
          *(v3 - 2) = 0;
          *(v3 - 1) = 0;
        }
        *(v3 - 3) = 0;
      }
      *(v3 - 27) = 0;
      v3 += 52;
      v2 -= 416;
    }
    while (v2);
  }
  *(_QWORD *)v1 = 0;
  ++*(_DWORD *)(v1 + 8);
  return result;
}

double re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::EntryWithoutHash::free((_QWORD *)(a1[2] + v3));
        ++v4;
        v3 += 416;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_QWORD *re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::EntryWithoutHash::free(_QWORD *result)
{
  _QWORD *v1;
  void *v2;

  if ((*(_DWORD *)result & 0x80000000) != 0)
  {
    v1 = result;
    *(_DWORD *)result &= ~0x80000000;
    result[1] = 0;
    v2 = (void *)result[27];
    if (v2)
    {

      v1[27] = 0;
    }
    result = (_QWORD *)v1[24];
    if (result)
    {
      if (v1[25])
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 40))(result, v1[26]);
        v1[25] = 0;
        v1[26] = 0;
      }
      v1[24] = 0;
    }
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::ScopeLanePair>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::ScopeLanePair>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::ScopeLanePair>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ScopeLanePair>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::ScopeLanePair>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::ScopeLanePair>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::ScopeLanePair>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_anonymous_namespace_ *re::IntrospectionDynamicArray<re::ecs2::ScopeLanePair>::resize(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = (_anonymous_namespace_ *)re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::ecs2::ScopeLanePair>::resize((_anonymous_namespace_ *)a4, a5);
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::ScopeLanePair>::addElement(re::Allocator **a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  _anonymous_namespace_ *v8;
  __n128 v9;
  re::IntrospectionBase *v10;
  uint64_t *v12;
  __int128 v13;
  _BYTE v14[40];

  memset(v14, 0, sizeof(v14));
  v13 = 0u;
  v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v12, 0);
  memset(&v14[16], 0, 24);
  re::DynamicString::setCapacity(&v14[8], 0);
  v9.n128_f64[0] = re::DynamicArray<re::ecs2::ScopeLanePair>::add(a4, &v12);
  if (*(_QWORD *)&v14[8])
  {
    if ((v14[16] & 1) != 0)
      (*(void (**)(double))(**(_QWORD **)&v14[8] + 40))(v9.n128_f64[0]);
    v9 = 0uLL;
    memset(&v14[8], 0, 32);
  }
  if (v12 && (v13 & 1) != 0)
    (*(void (**)(__n128))(*v12 + 40))(v9);
  v10 = (re::IntrospectionBase *)(*((_QWORD *)a4 + 4) + (*((_QWORD *)a4 + 2) << 6) - 64);
  re::introspectionInitElement(a2, a3, a1[6], v10);
  return v10;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ScopeLanePair>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ScopeLanePair>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 6);
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 6);
}

_anonymous_namespace_ *re::DynamicArray<re::ecs2::ScopeLanePair>::resize(_anonymous_namespace_ *result, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _anonymous_namespace_ *v8;
  unint64_t v9;
  __n128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v9 = a2 << 6;
    v10 = 0uLL;
    v11 = a2;
    do
    {
      v12 = *((_QWORD *)v3 + 4);
      v13 = v12 + v9;
      v14 = *(_QWORD *)(v12 + v9 + 32);
      if (v14)
      {
        if ((*(_BYTE *)(v13 + 40) & 1) != 0)
        {
          (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v14 + 40))(v14, *(_QWORD *)(v12 + v9 + 48), v10);
          v10 = 0uLL;
        }
        *(__n128 *)(v12 + v9 + 32) = v10;
        *(__n128 *)(v12 + v9 + 48) = v10;
      }
      result = *(_anonymous_namespace_ **)v13;
      if (*(_QWORD *)v13)
      {
        if ((*(_BYTE *)(v12 + v9 + 8) & 1) != 0)
        {
          result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD, __n128))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v12 + v9 + 16), v10);
          v10 = 0uLL;
        }
        *(__n128 *)v13 = v10;
        *(__n128 *)(v13 + 16) = v10;
      }
      ++v11;
      v9 += 64;
    }
    while (v11 < *((_QWORD *)v3 + 2));
  }
  else
  {
    if (*((_QWORD *)result + 1) < a2)
    {
      result = (_anonymous_namespace_ *)re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity(result, a2);
      v4 = *((_QWORD *)v3 + 2);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = v4 << 6;
      do
      {
        v7 = *((_QWORD *)v3 + 4) + v6;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v7, 0);
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        result = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)(v7 + 32), 0);
        v6 += 64;
        --v5;
      }
      while (v5);
    }
  }
  *((_QWORD *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

double re::DynamicArray<re::ecs2::ScopeLanePair>::add(_anonymous_namespace_ *this, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::ecs2::ScopeLanePair>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + (v4 << 6);
  result = 0.0;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)(v5 + 24) = a2[3];
  v7 = a2[1];
  *(_QWORD *)v5 = *a2;
  *a2 = 0;
  v8 = a2[2];
  a2[3] = 0;
  v10 = *(_QWORD *)(v5 + 8);
  v9 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 16) = v8;
  a2[1] = v10;
  a2[2] = v9;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_QWORD *)(v5 + 56) = a2[7];
  v11 = a2[5];
  *(_QWORD *)(v5 + 32) = a2[4];
  a2[4] = 0;
  v12 = a2[6];
  a2[7] = 0;
  v14 = *(_QWORD *)(v5 + 40);
  v13 = *(_QWORD *)(v5 + 48);
  *(_QWORD *)(v5 + 40) = v11;
  *(_QWORD *)(v5 + 48) = v12;
  a2[5] = v14;
  a2[6] = v13;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::ScopeLanePair>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::ScopeLanePair>::clear((_QWORD *)a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = re::DynamicArray<re::ecs2::ScopeLanePair>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = v9 << 6;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 64;
        v11 -= 64;
      }
      while (v11);
    }
  }
}

_QWORD *re::DynamicArray<re::ecs2::ScopeLanePair>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 *v4;
  __n128 v5;
  __n128 *v6;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = v2 << 6;
    v4 = (__n128 *)(result[4] + 32);
    v5 = 0uLL;
    do
    {
      v6 = v4 - 2;
      if (v4->n128_u64[0])
      {
        if ((v4->n128_u8[8] & 1) != 0)
        {
          (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v4->n128_u64[0] + 40))(v4->n128_u64[0], v4[1].n128_u64[0], v5);
          v5 = 0uLL;
        }
        *v4 = v5;
        v4[1] = v5;
      }
      result = (_QWORD *)v6->n128_u64[0];
      if (v6->n128_u64[0])
      {
        if ((v4[-2].n128_u8[8] & 1) != 0)
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, __n128))(*result + 40))(result, v4[-1].n128_u64[0], v5);
          v5 = 0uLL;
        }
        *v6 = v5;
        v4[-1] = v5;
      }
      v4 += 4;
      v3 -= 64;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + (a2 << 6);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + ((uint64_t)v3 << 6);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::SpecifyLaneCommand>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::SpecifyLaneCommand>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::SpecifyLaneCommand>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SpecifyLaneCommand>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::SpecifyLaneCommand>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_anonymous_namespace_ *re::IntrospectionDynamicArray<re::ecs2::SpecifyLaneCommand>::resize(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::ecs2::SpecifyLaneCommand>::resize((_anonymous_namespace_ *)a4, a5);
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::SpecifyLaneCommand>::addElement(re::Allocator **a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  uint64_t i;
  uint64_t *v9;
  uint64_t j;
  uint64_t *v11;
  uint64_t k;
  re::IntrospectionBase *v13;
  uint64_t *v15;
  __int128 v16;
  _OWORD v17[4];
  __int128 v18;
  _OWORD v19[2];

  memset(v19, 0, sizeof(v19));
  v18 = 0u;
  v16 = 0u;
  memset(v17, 0, sizeof(v17));
  re::DynamicString::setCapacity(&v15, 0);
  memset((char *)v17 + 8, 0, 48);
  *((_QWORD *)&v17[3] + 1) = -1;
  v18 = 0u;
  memset(v19, 0, 28);
  re::DynamicArray<re::ecs2::SpecifyLaneCommand>::add(a4, (uint64_t)&v15);
  for (i = 14; i != 12; --i)
  {
    v9 = (&v15)[i];
    if (v9)
    {

      (&v15)[i] = 0;
    }
  }
  for (j = 12; j != 10; --j)
  {
    v11 = (&v15)[j];
    if (v11)
    {

      (&v15)[j] = 0;
    }
  }
  for (k = 7; k != 1; k -= 3)
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&(&v15)[k]);
  if (v15 && (v16 & 1) != 0)
    (*(void (**)(void))(*v15 + 40))();
  v13 = (re::IntrospectionBase *)(*((_QWORD *)a4 + 4) + 136 * *((_QWORD *)a4 + 2) - 136);
  re::introspectionInitElement(a2, a3, a1[6], v13);
  return v13;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SpecifyLaneCommand>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SpecifyLaneCommand>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 136 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 136 * a3;
}

_QWORD *re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x88uLL))
        {
          v2 = 136 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 136 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 136, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 136 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::ecs2::SpecifyLaneCommand>(v8, v11);
          v8 += 17;
          v11 += 136;
          v10 -= 136;
        }
        while (v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

double re::ObjectHelper::move<re::ecs2::SpecifyLaneCommand>(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t j;
  void *v15;
  void *v16;
  uint64_t k;
  double result;

  v3 = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 24) = a1[3];
  v4 = a1[1];
  *(_QWORD *)a2 = *a1;
  *a1 = 0;
  v5 = a1[2];
  a1[3] = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  a1[1] = v7;
  a1[2] = v6;
  do
  {
    v8 = (_QWORD *)(a2 + v3 * 8);
    v9 = &a1[v3];
    v8[4] = 0;
    v8[5] = 0;
    v8[6] = 0;
    v8[5] = a1[v3 + 5];
    v9[5] = 0;
    v10 = *(_QWORD *)(a2 + v3 * 8 + 32);
    v8[4] = 0;
    v8[4] = a1[v3 + 4];
    v9[4] = v10;
    v11 = *(_QWORD *)(a2 + v3 * 8 + 48);
    v8[6] = a1[v3 + 6];
    v9[6] = v11;
    v3 += 3;
  }
  while (v3 != 6);
  *(_QWORD *)(a2 + 80) = a1[10];
  for (i = 11; i != 13; ++i)
  {
    *(_QWORD *)(a2 + i * 8) = a1[i];
    a1[i] = 0;
  }
  do
  {
    *(_QWORD *)(a2 + i * 8) = a1[i];
    a1[i++] = 0;
  }
  while (i != 15);
  v13 = a1[15];
  *(_DWORD *)(a2 + 128) = *((_DWORD *)a1 + 32);
  *(_QWORD *)(a2 + 120) = v13;
  for (j = 14; j != 12; --j)
  {
    v15 = (void *)a1[j];
    if (v15)
    {

      a1[j] = 0;
    }
  }
  do
  {
    v16 = (void *)a1[j];
    if (v16)
    {

      a1[j] = 0;
    }
    --j;
  }
  while (j != 10);
  for (k = 7; k != 1; k -= 3)
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&a1[k]);
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::ecs2::SpecifyLaneCommand>::resize(_anonymous_namespace_ *result, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t i;
  uint64_t v20;

  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 136 * a2;
    v9 = 136 * a2 + 112;
    v10 = 136 * a2 + 96;
    v11 = a2;
    do
    {
      v12 = 0;
      v13 = *((_QWORD *)v3 + 4);
      v14 = v13 + v9;
      do
      {
        v15 = *(void **)(v14 + v12);
        if (v15)
        {

          *(_QWORD *)(v14 + v12) = 0;
        }
        v12 -= 8;
      }
      while (v12 != -16);
      v16 = 0;
      v17 = v13 + v10;
      do
      {
        v18 = *(void **)(v17 + v16);
        if (v18)
        {

          *(_QWORD *)(v17 + v16) = 0;
        }
        v16 -= 8;
      }
      while (v16 != -16);
      for (i = 56; i != 8; i -= 24)
        re::AssetHandle::~AssetHandle((re::AssetHandle *)(v13 + v8 + i));
      v20 = v13 + 136 * v11;
      result = *(_anonymous_namespace_ **)v20;
      if (*(_QWORD *)v20)
      {
        if ((*(_BYTE *)(v20 + 8) & 1) != 0)
          result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v20 + 16));
        *(_OWORD *)v20 = 0u;
        *(_OWORD *)(v20 + 16) = 0u;
      }
      ++v11;
      v9 += 136;
      v10 += 136;
      v8 += 136;
    }
    while (v11 < *((_QWORD *)v3 + 2));
  }
  else
  {
    if (*((_QWORD *)result + 1) < a2)
    {
      result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity(result, a2);
      v4 = *((_QWORD *)v3 + 2);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 136 * v4;
      do
      {
        v7 = *((_QWORD *)v3 + 4) + v6;
        *(_QWORD *)(v7 + 128) = 0;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        result = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v7, 0);
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_QWORD *)(v7 + 80) = -1;
        *(_OWORD *)(v7 + 88) = 0u;
        *(_OWORD *)(v7 + 104) = 0u;
        v6 += 136;
        *(_OWORD *)(v7 + 116) = 0u;
        --v5;
      }
      while (v5);
    }
  }
  *((_QWORD *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::clear((_QWORD *)a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = re::DynamicArray<re::ecs2::SpecifyLaneCommand>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 136 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 136;
        v11 -= 136;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 136 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 136 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::CameraViewDescriptor>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::CameraViewDescriptor>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::CameraViewDescriptor>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::CameraViewDescriptor>::destroy(uint64_t a1, _QWORD *a2)
{
  return re::DynamicArray<re::ecs2::CameraViewDescriptor>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::CameraViewDescriptor>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::CameraViewDescriptor>::deinit((_QWORD *)a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::CameraViewDescriptor>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::ecs2::CameraViewDescriptor>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::CameraViewDescriptor>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  uint64_t v8;
  char *v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  uint64_t j;
  re::IntrospectionBase *v15;
  _OWORD v17[3];
  __int128 v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[6];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v8 = 0;
  v30 = *MEMORY[0x24BDAC8D0];
  v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  v18 = 0u;
  memset(v19, 0, sizeof(v19));
  memset(v17, 0, 32);
  v17[2] = xmmword_2260E5D70;
  BYTE4(v18) = -1;
  WORD3(v18) = 1792;
  BYTE8(v18) = 1;
  BYTE12(v18) = 0;
  LODWORD(v20) = 0;
  do
  {
    v9 = (char *)v17 + v8;
    *((_QWORD *)v9 + 18) = 0;
    *((_QWORD *)v9 + 15) = 0;
    *((_QWORD *)v9 + 16) = 0;
    *((_QWORD *)v9 + 14) = 0;
    v8 += 40;
    *((_DWORD *)v9 + 34) = 0;
  }
  while (v8 != 80);
  LOBYTE(v26[0]) = 0;
  *(_OWORD *)((char *)&v26[1] + 4) = xmmword_22610BC10;
  *(_OWORD *)((char *)v26 + 4) = xmmword_22610BC10;
  memset((char *)&v26[2] + 8, 0, 48);
  WORD4(v26[5]) = 1;
  BYTE10(v26[5]) = 0;
  *(_QWORD *)&v29 = 0;
  *(_QWORD *)&v28 = 0;
  v27 = 0uLL;
  DWORD2(v28) = 0;
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(this, (uint64_t *)v17);
  re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)&v27);
  for (i = 272; i != 256; i -= 8)
  {
    v11 = *(void **)((char *)v17 + i);
    if (v11)
    {

      *(_QWORD *)((char *)v17 + i) = 0;
    }
  }
  do
  {
    v12 = *(void **)((char *)v17 + i);
    if (v12)
    {

      *(_QWORD *)((char *)v17 + i) = 0;
    }
    i -= 8;
  }
  while (i != 240);
  do
  {
    v13 = *(void **)((char *)v17 + i);
    if (v13)
    {

      *(_QWORD *)((char *)v17 + i) = 0;
    }
    i -= 8;
  }
  while (i != 224);
  for (j = 152; j != 72; j -= 40)
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v17 + j);
  re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v19 + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
  v15 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 336 * *((_QWORD *)this + 2) - 336);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v15);
  return v15;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::CameraViewDescriptor>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::CameraViewDescriptor>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 336 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 336 * a3;
}

_QWORD *re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x150uLL))
        {
          v2 = 336 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 336 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 336, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 336 * v9;
        v11 = v7;
        do
        {
          re::ObjectHelper::move<re::ecs2::CameraViewDescriptor>(v8, v11);
          v8 += 42;
          v11 += 42;
          v10 -= 336;
        }
        while (v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::ObjectHelper::move<re::ecs2::CameraViewDescriptor>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  uint64_t i;

  re::ecs2::CameraViewDescriptor::CameraViewDescriptor(a2, a1);
  re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)(a1 + 36));
  v3 = 0;
  v4 = a1 + 34;
  do
  {
    v5 = (void *)v4[v3];
    if (v5)
    {

      v4[v3] = 0;
    }
    --v3;
  }
  while (v3 != -2);
  v6 = 0;
  v7 = a1 + 32;
  do
  {
    v8 = (void *)v7[v6];
    if (v8)
    {

      v7[v6] = 0;
    }
    --v6;
  }
  while (v6 != -2);
  v9 = 0;
  v10 = a1 + 30;
  do
  {
    v11 = (void *)v10[v9];
    if (v11)
    {

      v10[v9] = 0;
    }
    --v9;
  }
  while (v9 != -2);
  for (i = 19; i != 9; i -= 5)
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&a1[i]);
  re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)(a1 + 9));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a1);
}

uint64_t *re::ecs2::CameraViewDescriptor::CameraViewDescriptor(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t i;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *result = 0;
  result[1] = 0;
  result[2] = 0;
  result[1] = a2[1];
  a2[1] = 0;
  v2 = *result;
  *result = 0;
  *result = *a2;
  *a2 = v2;
  v3 = result[2];
  result[2] = a2[2];
  a2[2] = v3;
  v4 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(result + 5) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(result + 3) = v4;
  *((_BYTE *)result + 56) = *((_BYTE *)a2 + 56);
  LODWORD(v3) = *((unsigned __int8 *)a2 + 57);
  *((_BYTE *)result + 57) = v3;
  if ((_DWORD)v3)
    *((_BYTE *)result + 58) = *((_BYTE *)a2 + 58);
  v5 = *((unsigned __int8 *)a2 + 60);
  *((_BYTE *)result + 60) = v5;
  if (v5)
    *((_DWORD *)result + 16) = *((_DWORD *)a2 + 16);
  v6 = 0;
  result[13] = 0;
  result[10] = 0;
  result[11] = 0;
  result[9] = 0;
  *((_DWORD *)result + 24) = 0;
  v7 = a2[10];
  result[9] = a2[9];
  result[10] = v7;
  a2[9] = 0;
  a2[10] = 0;
  v8 = result[11];
  result[11] = a2[11];
  a2[11] = v8;
  v9 = result[13];
  result[13] = a2[13];
  a2[13] = v9;
  ++*((_DWORD *)a2 + 24);
  ++*((_DWORD *)result + 24);
  do
  {
    v10 = &result[v6];
    v11 = &a2[v6];
    v10[18] = 0;
    v10[15] = 0;
    v10[16] = 0;
    v10[14] = 0;
    *((_DWORD *)v10 + 34) = 0;
    v12 = a2[v6 + 15];
    v10[14] = a2[v6 + 14];
    v10[15] = v12;
    v11[14] = 0;
    v11[15] = 0;
    v13 = result[v6 + 16];
    v10[16] = a2[v6 + 16];
    v11[16] = v13;
    v14 = result[v6 + 18];
    v10[18] = a2[v6 + 18];
    v11[18] = v14;
    *((_DWORD *)v11 + 34) = LODWORD(a2[v6 + 17]) + 1;
    *((_DWORD *)v10 + 34) = LODWORD(result[v6 + 17]) + 1;
    v6 += 5;
  }
  while (v6 != 10);
  v15 = *((_OWORD *)a2 + 12);
  v16 = *((_OWORD *)a2 + 13);
  *((_DWORD *)result + 56) = *((_DWORD *)a2 + 56);
  *((_OWORD *)result + 12) = v15;
  *((_OWORD *)result + 13) = v16;
  for (i = 29; i != 31; ++i)
  {
    result[i] = a2[i];
    a2[i] = 0;
  }
  do
  {
    result[i] = a2[i];
    a2[i++] = 0;
  }
  while (i != 33);
  do
  {
    result[i] = a2[i];
    a2[i++] = 0;
  }
  while (i != 35);
  v18 = *((_WORD *)a2 + 140);
  *((_BYTE *)result + 282) = *((_BYTE *)a2 + 282);
  *((_WORD *)result + 140) = v18;
  result[40] = 0;
  result[37] = 0;
  result[38] = 0;
  result[36] = 0;
  *((_DWORD *)result + 78) = 0;
  v19 = a2[37];
  result[36] = a2[36];
  result[37] = v19;
  a2[36] = 0;
  a2[37] = 0;
  v20 = result[38];
  result[38] = a2[38];
  a2[38] = v20;
  v21 = result[40];
  result[40] = a2[40];
  a2[40] = v21;
  ++*((_DWORD *)a2 + 78);
  ++*((_DWORD *)result + 78);
  return result;
}

void re::DynamicArray<re::ecs2::CameraViewDescriptor>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t i;
  re::AssetHandle *v27;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v11 = 336 * a2;
    v12 = 336 * a2 + 272;
    v13 = 336 * a2 + 256;
    v14 = 336 * a2 + 240;
    v15 = a2;
    do
    {
      v16 = *(_QWORD *)(a1 + 32);
      re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit(v16 + 336 * v15 + 288);
      v17 = 0;
      v18 = v16 + v12;
      do
      {
        v19 = *(void **)(v18 + v17);
        if (v19)
        {

          *(_QWORD *)(v18 + v17) = 0;
        }
        v17 -= 8;
      }
      while (v17 != -16);
      v20 = 0;
      v21 = v16 + v13;
      do
      {
        v22 = *(void **)(v21 + v20);
        if (v22)
        {

          *(_QWORD *)(v21 + v20) = 0;
        }
        v20 -= 8;
      }
      while (v20 != -16);
      v23 = 0;
      v24 = v16 + v14;
      do
      {
        v25 = *(void **)(v24 + v23);
        if (v25)
        {

          *(_QWORD *)(v24 + v23) = 0;
        }
        v23 -= 8;
      }
      while (v23 != -16);
      for (i = 152; i != 72; i -= 40)
        re::DynamicArray<re::ecs2::ScopeLanePair>::deinit(v16 + v11 + i);
      v27 = (re::AssetHandle *)(v16 + 336 * v15);
      re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v27 + 72);
      re::AssetHandle::~AssetHandle(v27);
      ++v15;
      v12 += 336;
      v13 += 336;
      v14 += 336;
      v11 += 336;
    }
    while (v15 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    if (v4 < a2)
    {
      v5 = 336 * v4;
      do
      {
        v6 = 0;
        v7 = *(_QWORD *)(a1 + 32);
        v8 = v7 + 336 * v4;
        *(_OWORD *)(v8 + 304) = 0uLL;
        *(_OWORD *)(v8 + 320) = 0uLL;
        *(_OWORD *)(v8 + 272) = 0uLL;
        *(_OWORD *)(v8 + 288) = 0uLL;
        *(_OWORD *)(v8 + 240) = 0uLL;
        *(_OWORD *)(v8 + 256) = 0uLL;
        *(_OWORD *)(v8 + 208) = 0uLL;
        *(_OWORD *)(v8 + 224) = 0uLL;
        *(_OWORD *)(v8 + 160) = 0uLL;
        *(_OWORD *)(v8 + 176) = 0uLL;
        *(_OWORD *)(v8 + 128) = 0uLL;
        *(_OWORD *)(v8 + 144) = 0uLL;
        *(_OWORD *)(v8 + 96) = 0uLL;
        *(_OWORD *)(v8 + 112) = 0uLL;
        *(_OWORD *)(v8 + 64) = 0uLL;
        *(_OWORD *)(v8 + 80) = 0uLL;
        *(_OWORD *)(v8 + 32) = 0uLL;
        *(_OWORD *)(v8 + 48) = 0uLL;
        *(_OWORD *)(v8 + 192) = 0uLL;
        *(_OWORD *)v8 = 0uLL;
        *(_OWORD *)(v8 + 16) = 0uLL;
        *(_OWORD *)(v8 + 32) = xmmword_2260E5D70;
        *(_DWORD *)(v8 + 48) = 0;
        *(_DWORD *)(v8 + 52) = 117440767;
        *(_WORD *)(v8 + 56) = 1;
        *(_BYTE *)(v8 + 60) = 0;
        *(_QWORD *)(v8 + 104) = 0;
        *(_QWORD *)(v8 + 80) = 0;
        *(_QWORD *)(v8 + 88) = 0;
        *(_QWORD *)(v8 + 72) = 0;
        *(_DWORD *)(v8 + 96) = 0;
        do
        {
          v9 = v7 + v5 + v6;
          *(_QWORD *)(v9 + 144) = 0;
          *(_QWORD *)(v9 + 120) = 0;
          *(_QWORD *)(v9 + 128) = 0;
          *(_QWORD *)(v9 + 112) = 0;
          v6 += 40;
          *(_DWORD *)(v9 + 136) = 0;
        }
        while (v6 != 80);
        *(_BYTE *)(v8 + 192) = 0;
        v10 = v7 + 336 * v4;
        *(_OWORD *)(v10 + 232) = 0uLL;
        v10 += 232;
        *(_OWORD *)(v10 - 20) = xmmword_22610BC10;
        *(_OWORD *)(v10 - 36) = xmmword_22610BC10;
        *(_OWORD *)(v10 + 16) = 0uLL;
        *(_OWORD *)(v10 + 32) = 0uLL;
        *(_WORD *)(v10 + 48) = 1;
        *(_BYTE *)(v10 + 50) = 0;
        *(_QWORD *)(v10 + 88) = 0;
        *(_QWORD *)(v10 + 64) = 0;
        *(_QWORD *)(v10 + 72) = 0;
        *(_QWORD *)(v10 + 56) = 0;
        *(_DWORD *)(v10 + 80) = 0;
        ++v4;
        v5 += 336;
      }
      while (v4 != a2);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    re::ObjectHelper::destroy<re::ecs2::CameraViewDescriptor>(*(re::AssetHandle **)(a1 + 32), (re::AssetHandle *)(*(_QWORD *)(a1 + 32) + 336 * v8));
  }
  else
  {
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::deinit((_QWORD *)a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 336 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 336;
        v12 -= 336;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 336 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 336 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::CameraViewDescriptorsComponent>(uint64_t a1)
{
  id *v2;
  uint64_t v3;

  *(_QWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v2 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57788;
  *(_DWORD *)(v3 + 28) = 0;
  objc_initWeak(v2, 0);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_QWORD *)(a1 + 364) = 0x7FFFFFFFLL;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::CameraViewDescriptorsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::CameraViewDescriptorsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

_QWORD *re::DynamicArray<re::ecs2::CameraViewDescriptor>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

re::ecs2::CameraViewDescriptor *re::ecs2::CameraViewDescriptor::CameraViewDescriptor(re::ecs2::CameraViewDescriptor *this, const re::ecs2::CameraViewDescriptor *a2)
{
  re::AssetHandle *v4;
  __int128 v5;
  int v6;
  int v7;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  uint64_t j;
  __int16 v12;

  v4 = re::AssetHandle::AssetHandle(this, a2);
  v5 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)v4 + 40) = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)v4 + 24) = v5;
  *((_BYTE *)v4 + 56) = *((_BYTE *)a2 + 56);
  v6 = *((unsigned __int8 *)a2 + 57);
  *((_BYTE *)v4 + 57) = v6;
  if (v6)
    *((_BYTE *)this + 58) = *((_BYTE *)a2 + 58);
  v7 = *((unsigned __int8 *)a2 + 60);
  *((_BYTE *)this + 60) = v7;
  if (v7)
    *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  re::DynamicArray<re::CameraView::PickupScopeLane>::DynamicArray((uint64_t)this + 72, (uint64_t *)a2 + 9);
  for (i = 112; i != 192; i += 40)
    re::DynamicArray<re::CameraView::PickupScopeLane>::DynamicArray((uint64_t)this + i, (uint64_t *)((char *)a2 + i));
  v9 = *((_OWORD *)a2 + 12);
  v10 = *((_OWORD *)a2 + 13);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_OWORD *)this + 12) = v9;
  *((_OWORD *)this + 13) = v10;
  for (j = 232; j != 248; j += 8)
    *(_QWORD *)((char *)this + j) = *(id *)((char *)a2 + j);
  do
  {
    *(_QWORD *)((char *)this + j) = *(id *)((char *)a2 + j);
    j += 8;
  }
  while (j != 264);
  do
  {
    *(_QWORD *)((char *)this + j) = *(id *)((char *)a2 + j);
    j += 8;
  }
  while (j != 280);
  v12 = *((_WORD *)a2 + 140);
  *((_BYTE *)this + 282) = *((_BYTE *)a2 + 282);
  *((_WORD *)this + 140) = v12;
  re::DynamicArray<re::ecs2::SpecifyLaneCommand>::DynamicArray((uint64_t)this + 288, (uint64_t *)a2 + 36);
  return this;
}

uint64_t re::DynamicArray<re::ecs2::SpecifyLaneCommand>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

re::DynamicString *re::DynamicArray<re::ecs2::SpecifyLaneCommand>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  re::DynamicString *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t k;
  void *v11;
  void *v12;
  uint64_t m;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t j;
  uint64_t v22;
  char v23;
  char v24;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 16));
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::SpecifyLaneCommand *,re::ecs2::SpecifyLaneCommand *,re::ecs2::SpecifyLaneCommand *>((int)&v24, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(_QWORD *)(a2 + 32) + 136 * *(_QWORD *)(a1 + 16)), *(re::DynamicString **)(a1 + 32));
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v4)
    {
      v15 = *(_QWORD *)(a2 + 32);
      v16 = v15 + 136 * v4;
      v17 = 17 * v14;
      v18 = v15 + 8 * v17;
      v19 = *(_QWORD *)(a1 + 32) + 8 * v17;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)v19, (const re::DynamicString *)v18);
        for (i = 32; i != 80; i += 24)
          re::AssetHandle::AssetHandle((re::AssetHandle *)(v19 + i), (const re::AssetHandle *)(v18 + i));
        *(_QWORD *)(v19 + 80) = *(_QWORD *)(v18 + 80);
        for (j = 88; j != 104; j += 8)
          *(_QWORD *)(v19 + j) = *(id *)(v18 + j);
        do
        {
          result = (re::DynamicString *)*(id *)(v18 + j);
          *(_QWORD *)(v19 + j) = result;
          j += 8;
        }
        while (j != 120);
        v22 = *(_QWORD *)(v18 + 120);
        *(_DWORD *)(v19 + 128) = *(_DWORD *)(v18 + 128);
        *(_QWORD *)(v19 + 120) = v22;
        v18 += 136;
        v19 += 136;
      }
      while (v18 != v16);
    }
  }
  else
  {
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::SpecifyLaneCommand *,re::ecs2::SpecifyLaneCommand *,re::ecs2::SpecifyLaneCommand *>((int)&v23, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(_QWORD *)(a2 + 32) + 136 * v4), *(re::DynamicString **)(a1 + 32));
    v6 = *(_QWORD *)(a1 + 16);
    if (v4 != v6)
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = v7 + 136 * v6;
      v9 = v7 + 136 * v4;
      do
      {
        for (k = 112; k != 96; k -= 8)
        {
          v11 = *(void **)(v9 + k);
          if (v11)
          {

            *(_QWORD *)(v9 + k) = 0;
          }
        }
        do
        {
          v12 = *(void **)(v9 + k);
          if (v12)
          {

            *(_QWORD *)(v9 + k) = 0;
          }
          k -= 8;
        }
        while (k != 80);
        for (m = 56; m != 8; m -= 24)
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v9 + m));
        result = *(re::DynamicString **)v9;
        if (*(_QWORD *)v9)
        {
          if ((*(_BYTE *)(v9 + 8) & 1) != 0)
            result = (re::DynamicString *)(*(uint64_t (**)(re::DynamicString *, _QWORD))(*(_QWORD *)result
                                                                                                 + 40))(result, *(_QWORD *)(v9 + 16));
          *(_OWORD *)v9 = 0u;
          *(_OWORD *)(v9 + 16) = 0u;
        }
        v9 += 136;
      }
      while (v9 != v8);
    }
  }
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

re::DynamicString *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::SpecifyLaneCommand *,re::ecs2::SpecifyLaneCommand *,re::ecs2::SpecifyLaneCommand *>(int a1, re::DynamicString *a2, re::DynamicString *a3, re::DynamicString *this)
{
  re::DynamicString *v5;
  uint64_t i;
  uint64_t j;
  uint64_t v9;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      re::DynamicString::operator=(this, v5);
      for (i = 32; i != 80; i += 24)
        re::AssetHandle::operator=((uint64_t *)((char *)this + i), (uint64_t *)((char *)v5 + i));
      *((_QWORD *)this + 10) = *((_QWORD *)v5 + 10);
      for (j = 88; j != 104; j += 8)
        NS::SharedPtr<MTL::Texture>::operator=((void **)((char *)this + j), (void **)((char *)v5 + j));
      do
      {
        NS::SharedPtr<MTL::Texture>::operator=((void **)((char *)this + j), (void **)((char *)v5 + j));
        j += 8;
      }
      while (j != 120);
      v9 = *((_QWORD *)v5 + 15);
      *((_DWORD *)this + 32) = *((_DWORD *)v5 + 32);
      *((_QWORD *)this + 15) = v9;
      v5 = (re::DynamicString *)((char *)v5 + 136);
      this = (re::DynamicString *)((char *)this + 136);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *re::DynamicArray<re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x180uLL))
        {
          v2 = 384 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 384 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 384, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 384 * v9;
        do
        {
          v12 = re::ecs2::CameraViewDescriptor::CameraViewDescriptor(&v7[v10 / 8], (uint64_t *)(v8 + v10));
          v12[45] = *(_QWORD *)(v8 + v10 + 360);
          v12[46] = 0;
          re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(v12 + 42), v8 + v10 + 336);
          re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor::~OneoffViewDescriptor((re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor *)(v8 + v10));
          v10 += 384;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::HashTable<unsigned long,re::DynamicString,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  signed int v25;
  _BYTE v26[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v26, 0, 36);
      *(_QWORD *)&v26[36] = 0x7FFFFFFFLL;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v26, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v26;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v26[8];
      *(_OWORD *)v26 = v5;
      *(_QWORD *)&v26[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v26[24];
      *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v26[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (_QWORD *)(v6 + 24);
        do
        {
          if ((*(_DWORD *)(v14 - 2) & 0x80000000) != 0)
          {
            v15 = *(v14 - 3);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<unsigned long,re::DynamicString,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 56 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18) = v15;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18 + 16) = *(v14 - 1);
            v22 = *(_QWORD *)(a1 + 16) + 56 * v18;
            *(_QWORD *)&v7 = 0;
            *(_OWORD *)(v22 + 40) = 0u;
            *(_OWORD *)(v22 + 24) = 0u;
            *(_QWORD *)(v22 + 24) = *v14;
            *v14 = 0;
            v23 = *(_QWORD *)(v22 + 40);
            *(_QWORD *)(v22 + 40) = v14[2];
            v14[2] = v23;
            *(_QWORD *)(v22 + 48) = v14[3];
            v14[3] = 0;
            v24 = *(_QWORD *)(v22 + 32);
            *(_QWORD *)(v22 + 32) = v14[1];
            v14[1] = v24;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          v14 += 7;
          ++v11;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long,re::DynamicString,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v26, *(double *)&v7);
    }
  }
  else
  {
    if (a2)
      v25 = a2;
    else
      v25 = 3;
  }
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::RenderOptionsService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::RenderOptionsService>(void)::info = re::ecs2::introspect_RenderOptionsService(0);
  }
  v3 = re::introspect<re::ecs2::RenderOptionsService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

__objc2_class_ro *re::introspect<re::ecs2::RenderOptionsService>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::ecs2::RenderOptionsService>(void)::info = re::ecs2::introspect_RenderOptionsService(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[464];
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  BOOL v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t *v88;
  uint64_t v90;
  uint64_t v91;
  int v92;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*(_DWORD *)(v38 + 28) < *(_DWORD *)(*v8 + 28))
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v40 = v8 + 1;
        v41 = v8 + 2;
        v42 = v8 + 3;
        result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(v8, v8 + 1, v8 + 2, v8 + 3);
        v43 = *(a2 - 1);
        v44 = v8[3];
        if (*(_DWORD *)(v43 + 28) < *(_DWORD *)(v44 + 28))
        {
          *v42 = v43;
          *(a2 - 1) = v44;
          v45 = *v42;
          v46 = *v41;
          v47 = *(_DWORD *)(*v42 + 28);
          if (v47 < *(_DWORD *)(*v41 + 28))
          {
            *v41 = v45;
            *v42 = v46;
            v48 = *v40;
            if (v47 < *(_DWORD *)(*v40 + 28))
            {
              v8[1] = v45;
              v8[2] = v48;
              v49 = *v8;
              if (v47 < *(_DWORD *)(*v8 + 28))
              {
                *v8 = v45;
                v8[1] = v49;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v50 = v8 + 1;
          v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 8;
              v54 = v8;
              do
              {
                v56 = *v54;
                v55 = v54[1];
                v54 = v50;
                v57 = *(_DWORD *)(v55 + 28);
                if (v57 < *(_DWORD *)(v56 + 28))
                {
                  v58 = v53;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v58) = v56;
                    v59 = v58 - 8;
                    if (v58 == 8)
                      break;
                    v56 = *(uint64_t *)((char *)v8 + v58 - 16);
                    v58 -= 8;
                    if (v57 >= *(_DWORD *)(v56 + 28))
                    {
                      v60 = (uint64_t *)((char *)v8 + v59);
                      goto LABEL_80;
                    }
                  }
                  v60 = v8;
LABEL_80:
                  *v60 = v55;
                }
                v50 = v54 + 1;
                v53 += 8;
              }
              while (v54 + 1 != a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v91 = *v7;
              v90 = v7[1];
              v7 = v50;
              v92 = *(_DWORD *)(v90 + 28);
              if (v92 < *(_DWORD *)(v91 + 28))
              {
                do
                {
                  *v50 = v91;
                  v91 = *(v50 - 2);
                  --v50;
                }
                while (v92 < *(_DWORD *)(v91 + 28));
                *v50 = v90;
              }
              v50 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v61 = (v10 - 2) >> 1;
            v62 = v61;
            do
            {
              v63 = v62;
              if (v61 >= v62)
              {
                v64 = (2 * v62) | 1;
                v65 = &v8[v64];
                v66 = *v65;
                if (2 * v63 + 2 < (uint64_t)v10)
                {
                  result = *(unsigned int *)(v66 + 28);
                  if ((int)result < *(_DWORD *)(v65[1] + 28))
                  {
                    v66 = v65[1];
                    ++v65;
                    v64 = 2 * v63 + 2;
                  }
                }
                v67 = &v8[v63];
                v68 = *v67;
                v69 = *(_DWORD *)(*v67 + 28);
                if (*(_DWORD *)(v66 + 28) >= v69)
                {
                  do
                  {
                    v70 = v65;
                    *v67 = v66;
                    if (v61 < v64)
                      break;
                    result = (2 * v64) | 1;
                    v65 = &v8[result];
                    v71 = 2 * v64 + 2;
                    v66 = *v65;
                    if (v71 < (uint64_t)v10 && *(_DWORD *)(v66 + 28) < *(_DWORD *)(v65[1] + 28))
                    {
                      v66 = v65[1];
                      ++v65;
                      result = v71;
                    }
                    v67 = v70;
                    v64 = result;
                  }
                  while (*(_DWORD *)(v66 + 28) >= v69);
                  *v70 = v68;
                }
              }
              v62 = v63 - 1;
            }
            while (v63);
            v72 = (unint64_t)v9 >> 3;
            do
            {
              v73 = 0;
              v74 = *v8;
              v75 = v8;
              do
              {
                v76 = &v75[v73];
                v79 = v76[1];
                v77 = v76 + 1;
                v78 = v79;
                v80 = (2 * v73) | 1;
                v81 = 2 * v73 + 2;
                if (v81 < v72)
                {
                  result = *(unsigned int *)(v78 + 28);
                  if ((int)result < *(_DWORD *)(v77[1] + 28))
                  {
                    v78 = v77[1];
                    ++v77;
                    v80 = v81;
                  }
                }
                *v75 = v78;
                v75 = v77;
                v73 = v80;
              }
              while (v80 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
              if (v77 == --a2)
              {
                *v77 = v74;
              }
              else
              {
                *v77 = *a2;
                *a2 = v74;
                v82 = (char *)v77 - (char *)v8 + 8;
                if (v82 >= 9)
                {
                  v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                  v84 = &v8[v83];
                  v85 = *v84;
                  v86 = *v77;
                  v87 = *(_DWORD *)(*v77 + 28);
                  if (*(_DWORD *)(*v84 + 28) < v87)
                  {
                    do
                    {
                      v88 = v84;
                      *v77 = v85;
                      if (!v83)
                        break;
                      v83 = (v83 - 1) >> 1;
                      v84 = &v8[v83];
                      v85 = *v84;
                      v77 = v88;
                    }
                    while (*(_DWORD *)(*v84 + 28) < v87);
                    *v88 = v86;
                  }
                }
              }
            }
            while (v72-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(v14 + 28);
          if (*(_DWORD *)(*(v7 - 1) + 28) < v15)
            goto LABEL_12;
          if (v15 >= *(_DWORD *)(*(a2 - 1) + 28))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= *(_DWORD *)(*v8 + 28));
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *(_DWORD *)(v29 + 28));
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *(_DWORD *)(v32 + 28));
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= *(_DWORD *)(v35 + 28));
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < *(_DWORD *)(v36 + 28));
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v15 = *(_DWORD *)(v14 + 28);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_DWORD *)(v17 + 28) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_DWORD *)(v21 + 28) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_DWORD *)(v20 + 28) >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*(_DWORD *)(v25 + 28) < v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*(_DWORD *)(v26 + 28) >= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**,false>(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(v7, v27);
        v8 = v27 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_DWORD *)(*a2 + 28);
  v6 = *(_DWORD *)(*result + 28);
  v7 = *a3;
  v8 = *(_DWORD *)(*a3 + 28);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_DWORD *)(*a2 + 28) < *(_DWORD *)(*result + 28))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 28) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_DWORD *)(v6 + 28) < *(_DWORD *)(*a1 + 28))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_DWORD *)(v21 + 28) < *(_DWORD *)(v22 + 28))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_DWORD *)(*v20 + 28);
        if (v25 < *(_DWORD *)(*v19 + 28))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(_DWORD *)(*v18 + 28))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(_DWORD *)(*a1 + 28))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_DWORD *)(*v9 + 28);
    if (v14 < *(_DWORD *)(*v8 + 28))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 28))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(a1, a2, a3);
  v9 = *a3;
  if (*(_DWORD *)(*a4 + 28) < *(_DWORD *)(*a3 + 28))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_DWORD *)(*a3 + 28) < *(_DWORD *)(*a2 + 28))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_DWORD *)(*a2 + 28) < *(_DWORD *)(*a1 + 28))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

double re::HashTable<unsigned long long,re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          v8 = v6 + 24;
          re::DynamicArray<re::CameraMultiView>::deinit(v6 + 64);
          re::DynamicArray<re::CameraView>::deinit(v8);
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 104;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v32, 0, 36);
          *(_QWORD *)&v32[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v32, v13, v12);
          v15 = *(_OWORD *)v32;
          *(_OWORD *)v32 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v32[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v32[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v32[24];
          *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v32[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 104;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v32);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 104 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 104 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 104 * v9 + 8) = v23 | 0x80000000;
  v25 = 104 * v9;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v25 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v25 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v25) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v25 + 16) = *a4;
  v26 = *(_QWORD *)(a1 + 16) + v25;
  *(_QWORD *)(v26 + 56) = 0;
  *(_DWORD *)(v26 + 48) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 40) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v27 = *(_QWORD *)(v26 + 40);
  *(_QWORD *)(v26 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v27;
  v28 = *(_QWORD *)(v26 + 56);
  *(_QWORD *)(v26 + 56) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v28;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v26 + 48);
  *(_QWORD *)(v26 + 96) = 0;
  *(_QWORD *)(v26 + 72) = 0;
  *(_QWORD *)(v26 + 80) = 0;
  *(_QWORD *)(v26 + 64) = 0;
  *(_DWORD *)(v26 + 88) = 0;
  *(_QWORD *)(v26 + 64) = *(_QWORD *)(a5 + 40);
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(v26 + 72) = *(_QWORD *)(a5 + 48);
  *(_QWORD *)(a5 + 48) = 0;
  v29 = *(_QWORD *)(v26 + 80);
  *(_QWORD *)(v26 + 80) = *(_QWORD *)(a5 + 56);
  *(_QWORD *)(a5 + 56) = v29;
  v30 = *(_QWORD *)(v26 + 96);
  *(_QWORD *)(v26 + 96) = *(_QWORD *)(a5 + 72);
  *(_QWORD *)(a5 + 72) = v30;
  ++*(_DWORD *)(a5 + 64);
  ++*(_DWORD *)(v26 + 88);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 104 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

__n128 std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::CameraView const*,re::CameraView const*,re::CameraView*>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 result)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  if (a1 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      re::DynamicString::operator=((re::DynamicString *)(a3 + v7), (re::DynamicString *)(a1 + v7));
      v9 = *(_OWORD *)(a1 + v7 + 32);
      v10 = *(_OWORD *)(a1 + v7 + 48);
      v11 = *(_OWORD *)(a1 + v7 + 80);
      *(_OWORD *)(v8 + 64) = *(_OWORD *)(a1 + v7 + 64);
      *(_OWORD *)(v8 + 80) = v11;
      *(_OWORD *)(v8 + 32) = v9;
      *(_OWORD *)(v8 + 48) = v10;
      v12 = *(_OWORD *)(a1 + v7 + 96);
      v13 = *(_OWORD *)(a1 + v7 + 112);
      v14 = *(_OWORD *)(a1 + v7 + 144);
      *(_OWORD *)(v8 + 128) = *(_OWORD *)(a1 + v7 + 128);
      *(_OWORD *)(v8 + 144) = v14;
      *(_OWORD *)(v8 + 96) = v12;
      *(_OWORD *)(v8 + 112) = v13;
      v15 = *(_OWORD *)(a1 + v7 + 160);
      v16 = *(_OWORD *)(a1 + v7 + 176);
      v17 = *(_OWORD *)(a1 + v7 + 208);
      *(_OWORD *)(v8 + 192) = *(_OWORD *)(a1 + v7 + 192);
      *(_OWORD *)(v8 + 208) = v17;
      *(_OWORD *)(v8 + 160) = v15;
      *(_OWORD *)(v8 + 176) = v16;
      re::DynamicArray<re::RenderGraphFileProvider>::operator=(a3 + v7 + 224, (uint64_t *)(a1 + v7 + 224));
      *(_WORD *)(v8 + 264) = *(_WORD *)(a1 + v7 + 264);
      re::DynamicArray<re::CameraView::PickupScopeLane>::operator=(a3 + v7 + 272, (uint64_t *)(a1 + v7 + 272));
      *(_OWORD *)(v8 + 320) = *(_OWORD *)(a1 + v7 + 320);
      v19 = *(_OWORD *)(a1 + v7 + 352);
      v18 = *(_OWORD *)(a1 + v7 + 368);
      v20 = *(_OWORD *)(a1 + v7 + 336);
      *(_QWORD *)(v8 + 384) = *(_QWORD *)(a1 + v7 + 384);
      *(_OWORD *)(v8 + 352) = v19;
      *(_OWORD *)(v8 + 368) = v18;
      *(_OWORD *)(v8 + 336) = v20;
      *(_BYTE *)(v8 + 400) = *(_BYTE *)(a1 + v7 + 400);
      if (*(_BYTE *)(a3 + v7 + 401) || *(_BYTE *)(a1 + v7 + 401))
      {
        if (!*(_BYTE *)(a3 + v7 + 401) || *(_BYTE *)(a1 + v7 + 401))
        {
          if (*(_BYTE *)(a3 + v7 + 401) || !*(_BYTE *)(a1 + v7 + 401))
          {
            *(_BYTE *)(a3 + v7 + 402) = *(_BYTE *)(a1 + v7 + 402);
          }
          else
          {
            *(_BYTE *)(v8 + 401) = 1;
            *(_BYTE *)(a3 + v7 + 402) = *(_BYTE *)(a1 + v7 + 402);
          }
        }
        else
        {
          *(_BYTE *)(v8 + 401) = 0;
        }
      }
      v21 = a3 + v7;
      if (*(_BYTE *)(a3 + v7 + 404) || *(_BYTE *)(a1 + v7 + 404))
      {
        if (!*(_BYTE *)(a3 + v7 + 404) || *(_BYTE *)(a1 + v7 + 404))
        {
          if (*(_BYTE *)(a3 + v7 + 404) || !*(_BYTE *)(a1 + v7 + 404))
          {
            v23 = *(_DWORD *)(a1 + v7 + 408);
            v22 = a3 + v7;
          }
          else
          {
            *(_BYTE *)(v21 + 404) = 1;
            v22 = a3 + v7;
            v23 = *(_DWORD *)(a1 + v7 + 408);
          }
          *(_DWORD *)(v22 + 408) = v23;
        }
        else
        {
          *(_BYTE *)(v21 + 404) = 0;
        }
      }
      v24 = a3 + v7;
      v25 = *(_OWORD *)(a1 + v7 + 416);
      v26 = *(_OWORD *)(a1 + v7 + 432);
      v27 = *(_OWORD *)(a1 + v7 + 464);
      *(_OWORD *)(v24 + 448) = *(_OWORD *)(a1 + v7 + 448);
      *(_OWORD *)(v24 + 464) = v27;
      *(_OWORD *)(v24 + 416) = v25;
      *(_OWORD *)(v24 + 432) = v26;
      v28 = *(_OWORD *)(a1 + v7 + 480);
      v29 = *(_OWORD *)(a1 + v7 + 496);
      v30 = *(_OWORD *)(a1 + v7 + 528);
      *(_OWORD *)(v24 + 512) = *(_OWORD *)(a1 + v7 + 512);
      *(_OWORD *)(v24 + 528) = v30;
      *(_OWORD *)(v24 + 480) = v28;
      *(_OWORD *)(v24 + 496) = v29;
      v32 = *(_OWORD *)(a1 + v7 + 624);
      v31 = *(_OWORD *)(a1 + v7 + 640);
      v33 = *(_OWORD *)(a1 + v7 + 608);
      *(_QWORD *)(a3 + v7 + 653) = *(_QWORD *)(a1 + v7 + 653);
      *(_OWORD *)(v24 + 624) = v32;
      *(_OWORD *)(v24 + 640) = v31;
      *(_OWORD *)(v24 + 608) = v33;
      result = *(__n128 *)(a1 + v7 + 544);
      v34 = *(_OWORD *)(a1 + v7 + 560);
      v35 = *(_OWORD *)(a1 + v7 + 592);
      *(_OWORD *)(v24 + 576) = *(_OWORD *)(a1 + v7 + 576);
      *(_OWORD *)(v24 + 592) = v35;
      *(__n128 *)(v24 + 544) = result;
      *(_OWORD *)(v24 + 560) = v34;
      v7 += 672;
    }
    while (a1 + v7 != a2);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphFileProvider>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::RenderGraphFileProvider>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::RenderGraphFileProvider>::clear((_QWORD *)a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::RenderGraphFileProvider>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::RenderGraphFileProvider>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::CameraView::PickupScopeLane>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::CameraView::PickupScopeLane>::copy(a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::ecs2::ScopeLanePair>::clear((_QWORD *)a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::CameraView::PickupScopeLane>::copy(a1, (uint64_t)a2);
    }
  }
  return a1;
}

_QWORD *re::DynamicArray<re::RenderGraphFileProvider>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = result[4] + 16;
    v4 = 48 * v2;
    v5 = 0uLL;
    do
    {
      result = *(_QWORD **)(v3 - 8);
      if (result)
      {
        if ((*(_BYTE *)v3 & 1) != 0)
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, __n128))(*result + 40))(result, *(_QWORD *)(v3 + 8), v5);
          v5 = 0uLL;
        }
        *(__n128 *)(v3 - 8) = v5;
        *(__n128 *)(v3 + 8) = v5;
      }
      v3 += 48;
      v4 -= 48;
    }
    while (v4);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

_QWORD *re::DynamicArray<re::CameraMultiView>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::CameraMultiView>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::CameraMultiView>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::CameraMultiView const*,re::CameraMultiView const*,re::CameraMultiView*,0>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = v6;
        v9 = a3 + 672 * v7;
        v10 = v5 + 672 * v7;
        re::DynamicString::operator=((re::DynamicString *)v9, (re::DynamicString *)v10);
        v11 = *(_OWORD *)(v10 + 32);
        v12 = *(_OWORD *)(v10 + 48);
        v13 = *(_OWORD *)(v10 + 80);
        *(_OWORD *)(v9 + 64) = *(_OWORD *)(v10 + 64);
        *(_OWORD *)(v9 + 80) = v13;
        *(_OWORD *)(v9 + 32) = v11;
        *(_OWORD *)(v9 + 48) = v12;
        v14 = *(_OWORD *)(v10 + 96);
        v15 = *(_OWORD *)(v10 + 112);
        v16 = *(_OWORD *)(v10 + 144);
        *(_OWORD *)(v9 + 128) = *(_OWORD *)(v10 + 128);
        *(_OWORD *)(v9 + 144) = v16;
        *(_OWORD *)(v9 + 96) = v14;
        *(_OWORD *)(v9 + 112) = v15;
        v17 = *(_OWORD *)(v10 + 160);
        v18 = *(_OWORD *)(v10 + 176);
        v19 = *(_OWORD *)(v10 + 208);
        *(_OWORD *)(v9 + 192) = *(_OWORD *)(v10 + 192);
        *(_OWORD *)(v9 + 208) = v19;
        *(_OWORD *)(v9 + 160) = v17;
        *(_OWORD *)(v9 + 176) = v18;
        re::DynamicArray<re::RenderGraphFileProvider>::operator=(v9 + 224, (uint64_t *)(v10 + 224));
        *(_WORD *)(v9 + 264) = *(_WORD *)(v10 + 264);
        result = re::DynamicArray<re::CameraView::PickupScopeLane>::operator=(v9 + 272, (uint64_t *)(v10 + 272));
        *(_OWORD *)(v9 + 320) = *(_OWORD *)(v10 + 320);
        v21 = *(_OWORD *)(v10 + 352);
        v20 = *(_OWORD *)(v10 + 368);
        v22 = *(_OWORD *)(v10 + 336);
        *(_QWORD *)(v9 + 384) = *(_QWORD *)(v10 + 384);
        *(_OWORD *)(v9 + 352) = v21;
        *(_OWORD *)(v9 + 368) = v20;
        *(_OWORD *)(v9 + 336) = v22;
        *(_BYTE *)(v9 + 400) = *(_BYTE *)(v10 + 400);
        if (*(_BYTE *)(v9 + 401) || *(_BYTE *)(v10 + 401))
        {
          v23 = (_BYTE *)(v9 + 401);
          if (!*(_BYTE *)(v9 + 401) || *(_BYTE *)(v10 + 401))
          {
            if (*(_BYTE *)(v9 + 401) || !*(_BYTE *)(v10 + 401))
            {
              *(_BYTE *)(a3 + 672 * v7 + 402) = *(_BYTE *)(v5 + 672 * v7 + 402);
            }
            else
            {
              *v23 = 1;
              *(_BYTE *)(a3 + 672 * v7 + 402) = *(_BYTE *)(v5 + 672 * v7 + 402);
            }
          }
          else
          {
            *v23 = 0;
          }
        }
        v24 = a3 + 672 * v7;
        v25 = *(unsigned __int8 *)(v24 + 404);
        if (*(_BYTE *)(v24 + 404) || *(_BYTE *)(v5 + 672 * v7 + 404))
        {
          v26 = (_BYTE *)(v24 + 404);
          if (!v25 || *(_BYTE *)(v5 + 672 * v7 + 404))
          {
            if (v25 || !*(_BYTE *)(v5 + 672 * v7 + 404))
            {
              *(_DWORD *)(a3 + 672 * v7 + 408) = *(_DWORD *)(v5 + 672 * v7 + 408);
            }
            else
            {
              *v26 = 1;
              *(_DWORD *)(a3 + 672 * v7 + 408) = *(_DWORD *)(v5 + 672 * v7 + 408);
            }
          }
          else
          {
            *v26 = 0;
          }
        }
        v27 = a3 + 672 * v7;
        v28 = v5 + 672 * v7;
        v29 = *(_OWORD *)(v28 + 416);
        v30 = *(_OWORD *)(v28 + 432);
        v31 = *(_OWORD *)(v28 + 464);
        *(_OWORD *)(v27 + 448) = *(_OWORD *)(v28 + 448);
        *(_OWORD *)(v27 + 464) = v31;
        *(_OWORD *)(v27 + 416) = v29;
        *(_OWORD *)(v27 + 432) = v30;
        v32 = *(_OWORD *)(v28 + 480);
        v33 = *(_OWORD *)(v28 + 496);
        v34 = *(_OWORD *)(v28 + 528);
        *(_OWORD *)(v27 + 512) = *(_OWORD *)(v28 + 512);
        *(_OWORD *)(v27 + 528) = v34;
        *(_OWORD *)(v27 + 480) = v32;
        *(_OWORD *)(v27 + 496) = v33;
        v36 = *(_OWORD *)(v28 + 624);
        v35 = *(_OWORD *)(v28 + 640);
        v37 = *(_OWORD *)(v28 + 608);
        *(_QWORD *)(v27 + 653) = *(_QWORD *)(v28 + 653);
        *(_OWORD *)(v27 + 624) = v36;
        *(_OWORD *)(v27 + 640) = v35;
        *(_OWORD *)(v27 + 608) = v37;
        v38 = *(_OWORD *)(v28 + 544);
        v39 = *(_OWORD *)(v28 + 560);
        v40 = *(_OWORD *)(v28 + 592);
        *(_OWORD *)(v27 + 576) = *(_OWORD *)(v28 + 576);
        *(_OWORD *)(v27 + 592) = v40;
        *(_OWORD *)(v27 + 544) = v38;
        *(_OWORD *)(v27 + 560) = v39;
        v6 = 1;
        v7 = 1;
      }
      while ((v8 & 1) == 0);
      *(_WORD *)(a3 + 1344) = *(_WORD *)(v5 + 1344);
      v5 += 1360;
      a3 += 1360;
    }
    while (v5 != a2);
  }
  return result;
}

re::CameraMultiView *re::CameraMultiView::CameraMultiView(re::CameraMultiView *this, const re::CameraMultiView *a2)
{
  char v4;
  uint64_t v5;
  char v6;
  re::DynamicString *v7;
  uint64_t *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v4 = 0;
  v5 = 0;
  do
  {
    v6 = v4;
    v7 = (re::CameraMultiView *)((char *)this + 672 * v5);
    v8 = (uint64_t *)((char *)a2 + 672 * v5);
    re::DynamicString::DynamicString(v7, (const re::DynamicString *)v8);
    v9 = *((_OWORD *)v8 + 2);
    v10 = *((_OWORD *)v8 + 3);
    v11 = *((_OWORD *)v8 + 5);
    *((_OWORD *)v7 + 4) = *((_OWORD *)v8 + 4);
    *((_OWORD *)v7 + 5) = v11;
    *((_OWORD *)v7 + 2) = v9;
    *((_OWORD *)v7 + 3) = v10;
    v12 = *((_OWORD *)v8 + 6);
    v13 = *((_OWORD *)v8 + 7);
    v14 = *((_OWORD *)v8 + 9);
    *((_OWORD *)v7 + 8) = *((_OWORD *)v8 + 8);
    *((_OWORD *)v7 + 9) = v14;
    *((_OWORD *)v7 + 6) = v12;
    *((_OWORD *)v7 + 7) = v13;
    v15 = *((_OWORD *)v8 + 10);
    v16 = *((_OWORD *)v8 + 11);
    v17 = *((_OWORD *)v8 + 13);
    *((_OWORD *)v7 + 12) = *((_OWORD *)v8 + 12);
    *((_OWORD *)v7 + 13) = v17;
    *((_OWORD *)v7 + 10) = v15;
    *((_OWORD *)v7 + 11) = v16;
    re::DynamicArray<re::RenderGraphFileProvider>::DynamicArray((uint64_t)v7 + 224, v8 + 28);
    *((_WORD *)v7 + 132) = *((_WORD *)v8 + 132);
    re::DynamicArray<re::CameraView::PickupScopeLane>::DynamicArray((uint64_t)v7 + 272, v8 + 34);
    *((_OWORD *)v7 + 20) = *((_OWORD *)v8 + 20);
    v18 = *((_OWORD *)v8 + 21);
    v19 = *((_OWORD *)v8 + 22);
    v20 = *((_OWORD *)v8 + 23);
    *((_QWORD *)v7 + 48) = v8[48];
    *((_OWORD *)v7 + 22) = v19;
    *((_OWORD *)v7 + 23) = v20;
    *((_OWORD *)v7 + 21) = v18;
    *((_BYTE *)v7 + 400) = *((_BYTE *)v8 + 400);
    v21 = *((unsigned __int8 *)v8 + 401);
    *((_BYTE *)v7 + 401) = v21;
    if (v21)
      *((_BYTE *)this + 672 * v5 + 402) = *((_BYTE *)a2 + 672 * v5 + 402);
    v22 = *((unsigned __int8 *)a2 + 672 * v5 + 404);
    *((_BYTE *)this + 672 * v5 + 404) = v22;
    if (v22)
      *((_DWORD *)this + 168 * v5 + 102) = *((_DWORD *)a2 + 168 * v5 + 102);
    v23 = (char *)this + 672 * v5;
    v24 = (char *)a2 + 672 * v5;
    v25 = *((_OWORD *)v24 + 26);
    v26 = *((_OWORD *)v24 + 27);
    v27 = *((_OWORD *)v24 + 29);
    *((_OWORD *)v23 + 28) = *((_OWORD *)v24 + 28);
    *((_OWORD *)v23 + 29) = v27;
    *((_OWORD *)v23 + 26) = v25;
    *((_OWORD *)v23 + 27) = v26;
    v28 = *((_OWORD *)v24 + 30);
    v29 = *((_OWORD *)v24 + 31);
    v30 = *((_OWORD *)v24 + 33);
    *((_OWORD *)v23 + 32) = *((_OWORD *)v24 + 32);
    *((_OWORD *)v23 + 33) = v30;
    *((_OWORD *)v23 + 30) = v28;
    *((_OWORD *)v23 + 31) = v29;
    v32 = *((_OWORD *)v24 + 39);
    v31 = *((_OWORD *)v24 + 40);
    v33 = *((_OWORD *)v24 + 38);
    *(_QWORD *)(v23 + 653) = *(_QWORD *)(v24 + 653);
    *((_OWORD *)v23 + 39) = v32;
    *((_OWORD *)v23 + 40) = v31;
    *((_OWORD *)v23 + 38) = v33;
    v34 = *((_OWORD *)v24 + 34);
    v35 = *((_OWORD *)v24 + 35);
    v36 = *((_OWORD *)v24 + 37);
    *((_OWORD *)v23 + 36) = *((_OWORD *)v24 + 36);
    *((_OWORD *)v23 + 37) = v36;
    *((_OWORD *)v23 + 34) = v34;
    *((_OWORD *)v23 + 35) = v35;
    v4 = 1;
    v5 = 1;
  }
  while ((v6 & 1) == 0);
  *((_WORD *)this + 672) = *((_WORD *)a2 + 672);
  return this;
}

_QWORD *re::BucketArray<re::PipelineCompilationData,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::PipelineCompilationData,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::PipelineCompilationData,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 64, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void std::__any_imp::_SmallHandler<re::BucketArray<re::PipelineCompilationData,4ul> *>::__handle[abi:nn180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2256C7398()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

void re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::PipelineCompilationData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::PipelineCompilationData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::operator()(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  result = (uint64_t *)(**a2)(3);
  v4 = *result;
  if (*result)
  {
    v5 = *(_QWORD *)(v4 + 40);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        re::BucketArray<re::PipelineCompilationData,4ul>::operator[](v4, i);
    }
    while (*(_QWORD *)(v4 + 8))
      re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v4);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    *(_QWORD *)(v4 + 40) = 0;
    ++*(_DWORD *)(v4 + 48);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v4);
  }
  return result;
}

_QWORD *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::PipelineCompilationData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED624C8;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::PipelineCompilationData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED624C8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::PipelineCompilationData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::size()
{
  return 16;
}

uint64_t re::BucketArray<re::PipelineCompilationData,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 16 * (a2 & 3);
}

__n128 re::HashTable<unsigned long long,re::TintContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  __n128 result;
  __int128 v27;
  _BYTE v28[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v13, v12);
          v15 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v28[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::TintContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 16);
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  result = *(__n128 *)a5;
  v27 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(v25 + 32) = *(_OWORD *)a5;
  *(_OWORD *)(v25 + 48) = v27;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED62520;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED62578;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED625D0;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED62628;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED62520;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED62578;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED625D0;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED62628;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED62520;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED62520;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED62578;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED62578;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED625D0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED625D0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED62628;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED62628;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void re::ecs2::PinSkeletalPoseHelper::collectMeshJointPins(uint64_t a1, _QWORD *a2, uint64_t a3, _anonymous_namespace_ *a4)
{
  uint64_t v5;
  const StringID *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  StringID v11;
  float32x4_t *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[216];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  v14 = 0;
  v12 = 0;
  {
    v5 = v13;
    v7 = *(_QWORD *)(v14 + 24);
    v6 = *(const StringID **)(v14 + 32);
    v8 = *((_QWORD *)a4 + 2) + v13;
    if (*((_QWORD *)a4 + 1) < v8)
      re::DynamicArray<re::ecs2::Pin>::setCapacity(a4, v8);
    if (v5)
    {
      v9 = 0;
      v10 = v12;
      do
      {
        if (v7 == v9)
        {
          re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v7, v7);
          _os_crash();
          __break(1u);
        }
        re::StringID::StringID((re::StringID *)&v11, v6);
        re::DynamicArray<re::ecs2::Pin>::add(a4, (uint64_t)v15);
        re::ecs2::Pin::~Pin((re::ecs2::Pin *)v15);
        re::StringID::destroyString((re::StringID *)&v11);
        ++v9;
        ++v6;
        v10 += 4;
      }
      while (v5 != v9);
    }
  }
}

uint64_t `anonymous namespace'::getSkeletonAndJointTransforms(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a4 = 0;
  if (!result)
    return result;
  v5 = (_QWORD *)result;
  v6 = *(_QWORD *)(result + 16);
  if (!v6)
    return 0;
  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (!result)
    return result;
  if (!v5[71])
    return 0;
  v11 = result;
  v12 = (uint64_t)(v5 + 59);
  v13 = *(_QWORD *)(a3 + 8);
  if (v13 < 0xFFFFFFFFFFFFFFFELL || (v13 & 1) != 0)
  {
    if (v13 > 1)
      goto LABEL_11;
    v14 = *(_BYTE **)(a3 + 16);
    if (!v14)
      goto LABEL_11;
  }
  else
  {
    v14 = *(_BYTE **)(a3 + 16);
  }
  if (!*v14)
  {
    v19 = 0;
    goto LABEL_22;
  }
LABEL_11:
  re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)(a2 + 56), (unsigned __int8 *)a3, &v26);
  v15 = v26;
  if (v26)
  {
    v16 = 0;
    while (1)
    {
      v25 = v16;
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t *))(*v29 + 16))(v29, &v25);
      v18 = re::SkeletalPoseRigMappingData::poseRigMapIndex((re::SkeletalPoseRigMappingData *)(v5 + 59), (const re::MeshNameMap *)(a2 + 56), v17, WORD2(v17));
      if (v18 != -1)
        break;
      if (v15 == ++v16)
        goto LABEL_15;
    }
    v19 = v18;
  }
  else
  {
LABEL_15:
    v19 = -1;
  }
  if (v29)
  {
    (*(void (**)(uint64_t *))*v29)(v29);
    if (v29 != &v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
  }
  if (v19 == -1)
    return 0;
LABEL_22:
  if (v5[80] <= (unint64_t)v19)
    v20 = 0xFFFFFFFFLL;
  else
    v20 = *(unsigned int *)(v5[81] + 4 * v19);
  if (a2[117] <= v20)
    return 0;
  if (a2[28] > v20
    && (v21 = re::AssetHandle::loadedAsset<re::SkeletonAsset>((re::SkeletonAsset *)(a2[30] + 24 * v20))) != 0)
  {
    v22 = v21 + 88;
  }
  else
  {
    v22 = re::MeshAsset::skeletonAtIndex((re::MeshAsset *)a2, v20);
  }
  *(_QWORD *)a4 = v22;
  v23 = *(_QWORD *)(v11 + 112);
  v26 = *(_QWORD *)(v11 + 128);
  v27 = v23;
  *a5 = re::SkeletalPoseRigMappingData::poseRigMapAbsoluteJointTransforms(v12, v19, &v26);
  a5[1] = v24;
  return *(_QWORD *)(*(_QWORD *)a4 + 24) == v24;
}

uint64_t re::DynamicArray<re::ecs2::Pin>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  __int128 v11;
  int v12;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::ecs2::Pin>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4);
  v6 = v5 + 208 * v4;
  *(_QWORD *)v6 = &off_24ED68168;
  re::StringID::StringID((re::StringID *)(v6 + 8), (const StringID *)(a2 + 8));
  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 48);
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 80) = v9;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = v8;
  result = re::DynamicArray<re::ecs2::PinAlignment>::DynamicArray(v6 + 96, (uint64_t *)(a2 + 96));
  v11 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v6 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v6 + 160) = v11;
  v12 = *(unsigned __int8 *)(a2 + 176);
  *(_BYTE *)(v6 + 176) = v12;
  if (v12)
    result = (uint64_t)re::StringID::StringID((re::StringID *)(v5 + 208 * v4 + 184), (const StringID *)(a2 + 184));
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void `anonymous namespace'::makePinFromNameAndTransform(const StringID *a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  __int128 v9;
  uint64_t v10[3];
  int v11;
  uint64_t v12;
  _OWORD v13[2];
  unsigned __int8 v14[8];
  _BYTE v15[16];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;

  v5 = a2[1];
  v6 = a2[2];
  v7 = vmulq_f32(*a2, (float32x4_t)0);
  v8 = vaddq_f32(a2[3], vmlaq_f32(vmlaq_f32(v7, (float32x4_t)0, v5), (float32x4_t)0, v6));
  v21 = vmlaq_f32(vmlaq_f32(*a2, (float32x4_t)0, v5), (float32x4_t)0, v6);
  v22 = vdivq_f32(v8, (float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 3));
  v20 = vmlaq_f32(vaddq_f32(v7, v5), (float32x4_t)0, v6);
  re::poseFromOriginAndXYAxes((uint64_t *)&v22, &v21, (int32x4_t *)&v20, (uint64_t)v19);
  v16 = 0uLL;
  v17 = 0;
  v18 = 0x3F80000000000000;
  v14[0] = 1;
  re::StringID::StringID((re::StringID *)v15, a1);
  *(_QWORD *)&v9 = 0x7F0000007FLL;
  *((_QWORD *)&v9 + 1) = 0x7F0000007FLL;
  v13[0] = vdupq_n_s32(0x7F800000u);
  v13[1] = v9;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v11 = 0;
  re::ecs2::Pin::Pin(a3, a1, v19, &v16, v14, v13, v10);
  re::DynamicArray<re::ecs2::PinAlignment>::deinit((uint64_t)v10);
  if (v14[0])
    re::StringID::destroyString((re::StringID *)v15);
}

void re::ecs2::PinSkeletalPoseHelper::pinByName(re::ecs2::PinSkeletalPoseHelper *this@<X0>, const re::ecs2::SkeletalPoseComponent *a2@<X1>, const re::MeshAsset *a3@<X2>, _BYTE *a4@<X8>)
{
  const char *v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19[8];
  _BYTE v20[16];
  _BYTE v21[16];
  StringID v22;
  StringID v23;
  _QWORD v24[2];
  _BYTE v25[216];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v24[0] = 0;
  v24[1] = &str_110;
  *(_QWORD *)&v23.var0 = 0;
  v23.var1 = (char *)&str_110;
  *(_QWORD *)&v22.var0 = 0;
  v22.var1 = (char *)&str_110;
  v8 = (const char *)*((_QWORD *)a3 + 1);
  v9 = strlen(v8);
  re::internal::parseSkeletalPoseJointPinName((uint64_t)v8, v9, (re::StringID *)v24, (re::StringID *)&v23, (re::StringID *)&v22);
  v19[0] = 1;
  re::StringID::StringID((re::StringID *)v20, &v23);
  re::StringID::StringID((re::StringID *)v21, &v22);
  v17 = 0;
  v18 = 0;
  v16 = 0;
    || (v11 = *(_QWORD *)(v18 + 24),
        v10 = *(_QWORD *)(v18 + 32),
        (v12 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v18 + 112, v24)) == 0)|| (v14 = *v12, (_DWORD)v14 == -1))
  {
    *a4 = 0;
    goto LABEL_8;
  }
  if (v11 <= v14)
  {
    re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *v12, v11);
    _os_crash();
    __break(1u);
LABEL_10:
    re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v15);
    _os_crash();
    __break(1u);
  }
  v15 = v17;
  if (v17 <= v14)
    goto LABEL_10;
  re::Optional<re::ecs2::Pin>::Optional((uint64_t)a4, (uint64_t)v25);
  re::ecs2::Pin::~Pin((re::ecs2::Pin *)v25);
LABEL_8:
  re::StringID::destroyString((re::StringID *)v21);
  re::StringID::destroyString((re::StringID *)v20);
  re::StringID::destroyString((re::StringID *)&v22);
  re::StringID::destroyString((re::StringID *)&v23);
  re::StringID::destroyString((re::StringID *)v24);
}

uint64_t re::DynamicArray<re::ecs2::PinAlignment>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v4 << 7;
        v6 = (_QWORD *)(v3 + 120);
        do
        {
          v7 = *(v6 - 4);
          if (v7)
          {
            if (*v6)
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            *v6 = 0;
            *(v6 - 3) = 0;
            *(v6 - 2) = 0;
            *(v6 - 4) = 0;
            ++*((_DWORD *)v6 - 2);
          }
          v6 += 16;
          v5 -= 128;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::Optional<re::ecs2::Pin>::Optional(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;

  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 16) = &off_24ED68168;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 8));
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  re::DynamicArray<re::ecs2::PinAlignment>::DynamicArray(a1 + 112, (uint64_t *)(a2 + 96));
  v7 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 176) = v7;
  v8 = *(unsigned __int8 *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = v8;
  if (v8)
    re::StringID::StringID((re::StringID *)(a1 + 200), (const StringID *)(a2 + 184));
  return a1;
}

uint64_t re::DynamicArray<re::ecs2::PinAlignment>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::ecs2::PinAlignment>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::ecs2::PinAlignment>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::ecs2::PinAlignment>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::ecs2::PinAlignment>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::ecs2::PinAlignment *,re::ecs2::PinAlignment *,re::ecs2::PinAlignment *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + (a1[2] << 7), a1[4]);
    v9 = a1[2];
    if (v9 != v4)
    {
      v10 = (v4 << 7) - (v9 << 7);
      v11 = (v9 << 7) | 0x58;
      v12 = (uint64_t *)(*(_QWORD *)(a2 + 32) + v11);
      result = a1[4] + v11;
      do
      {
        v13 = *(_OWORD *)(v12 - 11);
        *(_OWORD *)(result - 72) = *(_OWORD *)(v12 - 9);
        *(_OWORD *)(result - 88) = v13;
        v14 = *(_OWORD *)(v12 - 7);
        v15 = *(_OWORD *)(v12 - 5);
        v16 = *(_OWORD *)(v12 - 3);
        *(_BYTE *)(result - 8) = *((_BYTE *)v12 - 8);
        *(_OWORD *)(result - 24) = v16;
        *(_OWORD *)(result - 40) = v15;
        *(_OWORD *)(result - 56) = v14;
        v17 = re::DynamicArray<float>::DynamicArray(result, v12);
        v12 += 16;
        result = v17 + 128;
        v10 -= 128;
      }
      while (v10);
    }
  }
  else
  {
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::ecs2::PinAlignment *,re::ecs2::PinAlignment *,re::ecs2::PinAlignment *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + (v4 << 7), a1[4]);
    v6 = a1[2];
    if (v4 != v6)
    {
      v7 = (v6 << 7) - (v4 << 7);
      v8 = (_QWORD *)(a1[4] + (v4 << 7) + 120);
      do
      {
        result = *(v8 - 4);
        if (result)
        {
          if (*v8)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
          *v8 = 0;
          *(v8 - 3) = 0;
          *(v8 - 2) = 0;
          *(v8 - 4) = 0;
          ++*((_DWORD *)v8 - 2);
        }
        v8 += 16;
        v7 -= 128;
      }
      while (v7);
    }
  }
  a1[2] = v4;
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::PinAlignment>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::PinAlignment>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 57)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 128, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 7;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 7, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v9 << 7;
        v11 = (_QWORD *)(v8 + 120);
        v12 = v7;
        do
        {
          v13 = *(_OWORD *)(v11 - 13);
          *(_OWORD *)v12 = *(_OWORD *)(v11 - 15);
          *((_OWORD *)v12 + 1) = v13;
          v14 = *(_OWORD *)(v11 - 11);
          v15 = *(_OWORD *)(v11 - 9);
          v16 = *(_OWORD *)(v11 - 7);
          *((_BYTE *)v12 + 80) = *((_BYTE *)v11 - 40);
          *((_OWORD *)v12 + 3) = v15;
          *((_OWORD *)v12 + 4) = v16;
          *((_OWORD *)v12 + 2) = v14;
          v12[15] = 0;
          v12[12] = 0;
          v12[13] = 0;
          v12[11] = 0;
          *((_DWORD *)v12 + 28) = 0;
          v17 = *(v11 - 3);
          v12[11] = *(v11 - 4);
          *(v11 - 4) = 0;
          v12[12] = v17;
          *(v11 - 3) = 0;
          v18 = v12[13];
          v12[13] = *(v11 - 2);
          *(v11 - 2) = v18;
          v19 = v12[15];
          v12[15] = *v11;
          *v11 = v19;
          ++*((_DWORD *)v11 - 2);
          ++*((_DWORD *)v12 + 28);
          v20 = *(v11 - 4);
          if (v20)
          {
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
            *v11 = 0;
            *(v11 - 3) = 0;
            *(v11 - 2) = 0;
            *(v11 - 4) = 0;
            ++*((_DWORD *)v11 - 2);
          }
          v11 += 16;
          v12 += 16;
          v10 -= 128;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::ecs2::PinAlignment *,re::ecs2::PinAlignment *,re::ecs2::PinAlignment *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v4;
    *(_OWORD *)(a3 + 16) = v6;
    v7 = *(_OWORD *)(v4 + 32);
    v8 = *(_OWORD *)(v4 + 48);
    v9 = *(_OWORD *)(v4 + 64);
    *(_BYTE *)(a3 + 80) = *(_BYTE *)(v4 + 80);
    *(_OWORD *)(a3 + 48) = v8;
    *(_OWORD *)(a3 + 64) = v9;
    *(_OWORD *)(a3 + 32) = v7;
    re::DynamicArray<float>::operator=(a3 + 88, (uint64_t *)(v4 + 88));
    a3 += 128;
    v4 += 128;
  }
  while (v4 != v5);
  return v5;
}

_QWORD *re::DynamicArray<re::ecs2::Pin>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::Pin>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xD0uLL))
        {
          v2 = 208 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 208 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 208, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 208 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = v8 + v10;
          v7[v10 / 8] = &off_24ED68168;
          re::StringID::StringID((re::StringID *)&v7[v10 / 8 + 1], (const StringID *)(v8 + v10 + 8));
          v14 = *(_OWORD *)(v8 + v10 + 32);
          v15 = *(_OWORD *)(v8 + v10 + 48);
          v16 = *(_OWORD *)(v8 + v10 + 80);
          *((_OWORD *)v12 + 4) = *(_OWORD *)(v8 + v10 + 64);
          *((_OWORD *)v12 + 5) = v16;
          *((_OWORD *)v12 + 2) = v14;
          *((_OWORD *)v12 + 3) = v15;
          re::DynamicArray<re::ecs2::PinAlignment>::DynamicArray((uint64_t)&v7[v10 / 8 + 12], (uint64_t *)(v8 + v10 + 96));
          v17 = *(_OWORD *)(v8 + v10 + 160);
          *((_OWORD *)v12 + 9) = *(_OWORD *)(v8 + v10 + 144);
          *((_OWORD *)v12 + 10) = v17;
          v18 = *(unsigned __int8 *)(v8 + v10 + 176);
          *((_BYTE *)v12 + 176) = v18;
          if (v18)
            re::StringID::StringID((re::StringID *)(v12 + 23), (const StringID *)(v13 + 184));
          (**(void (***)(uint64_t))v13)(v8 + v10);
          v10 += 208;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::Pin>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::Pin>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::Pin>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t *re::ecs2::allocInfo_PhysicsOriginComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_226);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_226))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410D998, 0);
    *(uint64_t *)((char *)&qword_25410D9A8 + 6) = 0;
    qword_25410D9A8 = 0;
    qword_25410D9B8 = 0;
    qword_25410D9C0 = 0xFFFFFFFFLL;
    qword_25410D998 = (uint64_t)&off_24ED7DAA8;
    qword_25410D9C8 = (uint64_t)"PhysicsOriginComponent";
    dword_25410D9D0 = 0;
    unk_25410D9D8 = 0u;
    unk_25410D9E8 = 0u;
    unk_25410D9F8 = 0u;
    qword_25410DA08 = 0;
    __cxa_guard_release(&_MergedGlobals_226);
  }
  return &qword_25410D998;
}

void re::ecs2::initInfo_PhysicsOriginComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x5CCE2FB72C22FEA0;
  v10[1] = "PhysicsOriginComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410D990);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410D990);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410D988 = v8;
      __cxa_guard_release(&qword_25410D990);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410D988;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsOriginComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PhysicsOriginComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsOriginComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsOriginComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::PhysicsOriginComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED43A90;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PhysicsOriginComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::PhysicsOriginComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED43A90;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PhysicsOriginComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PhysicsOriginComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsOriginComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsOriginComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsOriginComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsOriginComponent>, this);
}

void re::internal::findPhysicsOrigin(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  re::ecs2::TransformComponent *v14;
  re::ecs2::TransformComponent **v15;
  re *v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  NSObject *v20;
  uint8_t v21[16];

  v5 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
       + 8);
  if (*(_QWORD *)(a1 + 224) > v5
    && (v6 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * v5)) != 0
    && (v7 = *(_QWORD *)(v6 + 24)) != 0)
  {
    v8 = *(uint64_t **)(v6 + 40);
    v9 = &v8[v7];
    while (1)
    {
      v10 = *v8;
      if (a3)
      {
        v11 = 8 * a3;
        v12 = a2;
        while (*v12 != v10)
        {
          ++v12;
          v11 -= 8;
          if (!v11)
          {
            v12 = &a2[a3];
            break;
          }
        }
      }
      else
      {
        v12 = a2;
      }
      if (a3 == v12 - a2)
      {
        v13 = *(_QWORD *)(v10 + 16);
        if ((*(_BYTE *)(v13 + 288) & 1) != 0)
        {
          v14 = *(re::ecs2::TransformComponent **)(v13 + 240);
          if (v14)
            break;
        }
      }
      if (++v8 == v9)
        goto LABEL_15;
    }
    v15 = (re::ecs2::TransformComponent **)*((_QWORD *)v14 + 2);
    if (v15)
    {
      re::ecs2::TransformComponent::worldScale(v15, (const re::ecs2::Entity *)1);
    }
    else
    {
      v16 = (re *)*((_QWORD *)v14 + 4);
      v17 = *((_QWORD *)v14 + 5);
    }
    v18.i64[0] = (uint64_t)v16;
    v18.i64[1] = v17;
    v19 = vmulq_f32(v18, v18);
    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]) < 1.0e-10)
    {
      v20 = *re::ecsComponentsLogObjects(v16);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v21 = 0;
        _os_log_impl(&dword_224FE9000, v20, OS_LOG_TYPE_DEFAULT, "Physics origin tranform has scale of 0.", v21, 2u);
      }
    }
    re::ecs2::TransformComponent::worldMatrix4x4F(v14, 1, (uint64_t)a4);
  }
  else
  {
LABEL_15:
    *a4 = xmmword_2260E5F10;
    a4[1] = xmmword_2260E5F20;
    a4[2] = xmmword_2260E5F40;
    a4[3] = xmmword_2260E5D70;
  }
}

uint64_t re::internal::getPhysicsOriginFromTransformComponent@<X0>(re::ecs2::TransformComponent *a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t result;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  int32x4_t v15[4];
  __int128 v16;
  __int128 v17;
  __int128 v18;

  re::ecs2::TransformComponent::worldMatrix4x4F(a1, 1, (uint64_t)v14);
  v5 = 0;
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v15[0] = (int32x4_t)v14[0];
  v15[1] = (int32x4_t)v14[1];
  v15[2] = (int32x4_t)v14[2];
  v15[3] = (int32x4_t)v14[3];
  do
  {
    *(__int128 *)((char *)&v16 + v5 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(*(_OWORD *)&v15[v5])), v7, *(float32x2_t *)v15[v5].i8, 1), v8, (float32x4_t)v15[v5], 2), v9, (float32x4_t)v15[v5], 3);
    ++v5;
  }
  while (v5 != 4);
  v15[0] = 0u;
  v17 = 0u;
  v18 = xmmword_2260E5D70;
  result = re::decomposeScaleRotationTranslation<float>((uint64_t)&v16, v15, &v18, &v17);
  v11 = v15[0].i64[1];
  v12 = v18;
  v13 = v17;
  *(_QWORD *)a3 = v15[0].i64[0];
  *(_QWORD *)(a3 + 8) = v11;
  *(_OWORD *)(a3 + 16) = v12;
  *(_OWORD *)(a3 + 32) = v13;
  return result;
}

void re::ecs2::SceneSystem::update(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint8_t buf[16];
  uint8_t v16[16];
  uint8_t v17[16];

  v2 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(v2 + 200))
  {
    v3 = a2;
    v4 = (unsigned __int8 *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v5 = *(unsigned __int8 *)(v3 + 49);
    if (v5 == v4[26])
    {
      v6 = v4;
      v7 = *(unsigned __int8 *)(v3 + 48);
      v8 = v4[25];
      if (v8 == v7)
      {
        if (v5 == v7 && v5 == v8)
          return;
        v3 = *re::ecsComponentsLogObjects((re *)v4);
        if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_224FE9000, (os_log_t)v3, OS_LOG_TYPE_ERROR, "[Scene] inconsistent requiresAnchoring", buf, 2u);
        }
        re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "update", 45);
        v4 = (unsigned __int8 *)_os_crash();
        __break(1u);
      }
      if (v5 != v7 && v5 == v8)
      {
        v6[25] = v7;
        v6[26] = v7;
        *(_BYTE *)(v3 + 49) = v7;
        re::ecs2::NetworkComponent::markDirty(*(re::ecs2::NetworkComponent **)(*(_QWORD *)(v3 + 104) + 200), (const re::ecs2::Component *)v6);
        return;
      }
      if (v5 == v7 && v5 != v8)
      {
        re::ecs2::Scene::setRequiresAnchoring((re::ecs2::Scene *)v3, v8 != 0);
        v10 = v6[25];
        *(_BYTE *)(v3 + 49) = v10;
        v6[26] = v10;
        return;
      }
    }
    else
    {
      v11 = *re::ecsComponentsLogObjects((re *)v4);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v17 = 0;
        _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "[Scene] inconsistent previous requiresAnchoring", v17, 2u);
      }
      re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "update", 21);
      v4 = (unsigned __int8 *)_os_crash();
      __break(1u);
    }
    v13 = *re::ecsComponentsLogObjects((re *)v4);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v16 = 0;
      _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "[Scene] inconsistent requiresAnchoring", v16, 2u);
    }
    re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "update", 40);
    _os_crash();
    __break(1u);
  }
}

uint64_t *re::ecs2::allocInfo_SceneSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_227);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_227))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410DA18, 0);
    *(uint64_t *)((char *)&qword_25410DA28 + 6) = 0;
    qword_25410DA28 = 0;
    qword_25410DA38 = 0;
    qword_25410DA40 = 0xFFFFFFFFLL;
    qword_25410DA18 = (uint64_t)&off_24ED7DAA8;
    qword_25410DA48 = (uint64_t)"SceneSystem";
    dword_25410DA50 = 0;
    unk_25410DA58 = 0u;
    unk_25410DA68 = 0u;
    unk_25410DA78 = 0u;
    qword_25410DA88 = 0;
    __cxa_guard_release(&_MergedGlobals_227);
  }
  return &qword_25410DA18;
}

void re::ecs2::initInfo_SceneSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x1F69BE8A7490B76;
  v5[1] = "SceneSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_SceneSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SceneSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SceneSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::SceneSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::SceneSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SceneSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SceneSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::SceneSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  *(_QWORD *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::ecs2::System::System(a3, 1);
  *v3 = &off_24ED62698;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SceneSystem>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::SceneSystem>(uint64_t a1)
{
  _QWORD *v1;

  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::ecs2::System::System(a1, 1);
  *v1 = &off_24ED62698;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SceneSystem>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_SceneSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneSystem>, this);
}

void re::ecs2::SceneSystem::~SceneSystem(re::ecs2::SceneSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::SceneSystem::typeInfo(re::ecs2::SceneSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::SceneSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::SceneSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::ecs2::ComponentHelper::addDefaultSystems(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  re *v3;
  _BOOL4 v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v1 = result;
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    v3 = (re *)re::ServiceLocator::serviceOrNull<re::RenderManager>(v2);
    v4 = v3 != 0;
    v5 = re::globalAllocators(v3)[2];
    v6[0] = &off_24ED62730;
    v6[1] = v1;
    v7 = v5;
    v8 = v6;
    result = (uint64_t)v8;
    if (v8)
    {
      result = (*(uint64_t (**)(_QWORD *))*v8)(v8);
      if (v8 != v6)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    }
  }
  return result;
}

void `anonymous namespace'::addDefaultSystemsUsingLambda(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  re *v7;
  uint64_t *v8;
  re::ecs2::DeferredActivationSystem *v9;
  double Trace;
  re *v11;
  uint64_t *v12;
  re::ecs2::AssetMutateTrackingSystem *v13;
  re *v14;
  uint64_t *v15;
  re::ecs2::Static3DTextSystem *v16;
  re *v17;
  uint64_t *v18;
  re::ecs2::MeshSceneSystem *v19;
  re *v20;
  uint64_t *v21;
  re::ecs2::SkeletalPosePreparationSystem *v22;
  re *v23;
  uint64_t *v24;
  re::ecs2::AnimationUpdateSystem *v25;
  re *v26;
  uint64_t *v27;
  re::ecs2::AnimationSystem *v28;
  re *v29;
  uint64_t *v30;
  re::ecs2::TextSystem *v31;
  re *v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  re *v36;
  uint64_t *v37;
  re::ecs2::PhysicsSystem *v38;
  re *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  re *v43;
  uint64_t *v44;
  re::ecs2::TransformSystem *v45;
  re *v46;
  uint64_t *v47;
  re::ecs2::MaterialParameterBlockArraySystem *v48;
  re *v49;
  uint64_t *v50;
  re::ecs2::IKParametersSystem *v51;
  re *v52;
  uint64_t *v53;
  re::ecs2::RigSystem *v54;
  re *v55;
  uint64_t *v56;
  re::ecs2::SkeletalPoseSystem *v57;
  re *v58;
  uint64_t *v59;
  re::ecs2::MeshDeformationSystem *v60;
  re *v61;
  uint64_t *v62;
  re::ecs2::BlendShapeWeightsSystem *v63;
  re *v64;
  uint64_t *v65;
  re::ecs2::MeshOffsetsSystem *v66;
  re *v67;
  uint64_t *v68;
  re::ecs2::SkeletalDebugSystem *v69;
  re *v70;
  uint64_t *v71;
  re::ecs2::MeshSmoothSystem *v72;
  double v73;
  re *v74;
  uint64_t *v75;
  re::ecs2::AudioUpdateSystem *v76;
  re *v77;
  uint64_t *v78;
  re::ecs2::AudioSessionSystem *v79;
  re *v80;
  uint64_t *v81;
  re::ecs2::VideoAudioControlSystem *v82;
  re *v83;
  uint64_t *v84;
  re::ecs2::AudioPlayerSystem *v85;
  re *v86;
  uint64_t *v87;
  re::ecs2::ReverbSystem *v88;
  re *v89;
  uint64_t *v90;
  re::ecs2::AcousticMeshSystem *v91;
  double v92;
  double v93;
  re *v94;
  uint64_t *v95;
  re::ecs2::AudioDebugSystem *v96;
  re *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  re *v101;
  uint64_t *v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  re::ecs2::AudioDebugSystem *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  re::ecs2::AcousticMeshSystem *v111;
  re::ecs2::ReverbSystem *v112;
  uint64_t v113;
  uint64_t v114;
  re::ecs2::AudioPlayerSystem *v115;
  re::ecs2::VideoAudioControlSystem *v116;
  re::ecs2::AudioSessionSystem *v117;
  re::ecs2::AudioUpdateSystem *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  re::ecs2::MeshSmoothSystem *v122;
  re::ecs2::SkeletalDebugSystem *v123;
  re::ecs2::MeshOffsetsSystem *v124;
  re::ecs2::BlendShapeWeightsSystem *v125;
  re::ecs2::MeshDeformationSystem *v126;
  re::ecs2::SkeletalPoseSystem *v127;
  re::ecs2::RigSystem *v128;
  re::ecs2::IKParametersSystem *v129;
  uint64_t v130;
  re::ecs2::MaterialParameterBlockArraySystem *v131;
  uint64_t v132;
  uint64_t v133;
  re::ecs2::TransformSystem *v134;
  uint64_t v135;
  re::ecs2::PhysicsSystem *v136;
  _QWORD *v137;
  re::ecs2::TextSystem *v138;
  re::ecs2::AnimationSystem *v139;
  re::ecs2::AnimationUpdateSystem *updated;
  re::ecs2::SkeletalPosePreparationSystem *v141;
  uint64_t v142;
  re::ecs2::MeshSceneSystem *v143;
  re::ecs2::Static3DTextSystem *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  re::ecs2::AssetMutateTrackingSystem *v156;
  uint64_t v157;
  uint64_t v158;
  re::ecs2::DeferredActivationSystem *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _BYTE v164[24];
  uint64_t v165;
  re *v166;
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  v4 = re::globalAllocators((re *)a1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 232, 8);
  re::ecs2::System::System(v5, 0);
  *(_QWORD *)v6 = &off_24ED692C8;
  *(_DWORD *)(v6 + 136) = 0;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_QWORD *)(v6 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  v163 = v6;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v163);
  if (v163)
  {

    v163 = 0;
  }
  re::make::shared::object<re::ecs2::SceneSystem>((re *)&v161);
  v162 = v161;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v162);
  if (v162)
  {

    v162 = 0;
  }
  re::make::shared::object<re::ecs2::TimebaseSystem>((re *)&v161);
  v160 = v161;
  v7 = (re *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v160);
  if (v160)
  {

    v160 = 0;
  }
  v8 = re::globalAllocators(v7);
  v9 = (re::ecs2::DeferredActivationSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2]
                                                                                                  + 32))(v8[2], 368, 8);
  v159 = re::ecs2::DeferredActivationSystem::DeferredActivationSystem(v9);
  (*(void (**)(_QWORD, re::ecs2::DeferredActivationSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v159);
  if (v159)
  {

    v159 = 0;
  }
  Trace = re::make::shared::object<re::ecs2::LoadTraceSystem>((re *)&v161);
  v158 = v161;
  (*(void (**)(_QWORD, uint64_t *, double))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v158, Trace);
  if (v158)
  {

    v158 = 0;
  }
  re::make::shared::object<re::ecs2::NetworkAssetComponentSystem>((re *)&v161);
  v157 = v161;
  v11 = (re *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v157);
  if (v157)
  {

    v157 = 0;
  }
  v12 = re::globalAllocators(v11);
  v13 = (re::ecs2::AssetMutateTrackingSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 232, 8);
  v156 = re::ecs2::AssetMutateTrackingSystem::AssetMutateTrackingSystem(v13);
  (*(void (**)(_QWORD, re::ecs2::AssetMutateTrackingSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v156);
  if (v156)
  {

    v156 = 0;
  }
  re::make::shared::object<re::ecs2::CameraMovementSystem>((re *)&v161);
  v155 = v161;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v155);
  if (v155)
  {

    v155 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitiveBoxSystem>((re *)&v161);
  v154 = v161;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v154);
  if (v154)
  {

    v154 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>((re *)&v161);
  v153 = v161;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v153);
  if (v153)
  {

    v153 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitiveCapsuleSystem>((re *)&v161);
  v152 = v161;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v152);
  if (v152)
  {

    v152 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitiveConeSystem>((re *)&v161);
  v151 = v161;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v151);
  if (v151)
  {

    v151 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitiveCylinderSystem>((re *)&v161);
  v150 = v161;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v150);
  if (v150)
  {

    v150 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitivePlaneSystem>((re *)&v161);
  v149 = v161;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v149);
  if (v149)
  {

    v149 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitivePyramidSystem>((re *)&v161);
  v148 = v161;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v148);
  if (v148)
  {

    v148 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitiveSphereSystem>((re *)&v161);
  v147 = v161;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v147);
  if (v147)
  {

    v147 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitiveTetrahedronSystem>((re *)&v161);
  v146 = v161;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v146);
  if (v146)
  {

    v146 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitiveTubeSystem>((re *)&v161);
  v145 = v161;
  v14 = (re *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v145);
  if (v145)
  {

    v145 = 0;
  }
  v15 = re::globalAllocators(v14);
  v16 = (re::ecs2::Static3DTextSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 384, 8);
  v144 = re::ecs2::Static3DTextSystem::Static3DTextSystem(v16);
  v17 = (re *)(*(uint64_t (**)(_QWORD, re::ecs2::Static3DTextSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v144);
  if (v144)
  {

    v144 = 0;
  }
  v18 = re::globalAllocators(v17);
  v19 = (re::ecs2::MeshSceneSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18[2] + 32))(v18[2], 456, 8);
  v143 = re::ecs2::MeshSceneSystem::MeshSceneSystem(v19);
  (*(void (**)(_QWORD, re::ecs2::MeshSceneSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v143);
  if (v143)
  {

    v143 = 0;
  }
  re::make::shared::object<re::ecs2::StateMachineSystem>((re *)&v161);
  v142 = v161;
  v20 = (re *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v142);
  if (v142)
  {

    v142 = 0;
  }
  v21 = re::globalAllocators(v20);
  v22 = (re::ecs2::SkeletalPosePreparationSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21[2] + 32))(v21[2], 376, 8);
  v141 = re::ecs2::SkeletalPosePreparationSystem::SkeletalPosePreparationSystem(v22);
  v23 = (re *)(*(uint64_t (**)(_QWORD, re::ecs2::SkeletalPosePreparationSystem **))(**(_QWORD **)(a1 + 32)
                                                                                            + 16))(*(_QWORD *)(a1 + 32), &v141);
  if (v141)
  {

    v141 = 0;
  }
  v24 = re::globalAllocators(v23);
  v25 = (re::ecs2::AnimationUpdateSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24[2]
                                                                                                + 32))(v24[2], 112, 8);
  updated = re::ecs2::AnimationUpdateSystem::AnimationUpdateSystem(v25);
  v26 = (re *)(*(uint64_t (**)(_QWORD, re::ecs2::AnimationUpdateSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &updated);
  if (updated)
  {

    updated = 0;
  }
  v27 = re::globalAllocators(v26);
  v28 = (re::ecs2::AnimationSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27[2] + 32))(v27[2], 736, 8);
  v139 = re::ecs2::AnimationSystem::AnimationSystem(v28);
  v29 = (re *)(*(uint64_t (**)(_QWORD, re::ecs2::AnimationSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v139);
  if (v139)
  {

    v139 = 0;
  }
  v30 = re::globalAllocators(v29);
  v31 = (re::ecs2::TextSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30[2] + 32))(v30[2], 472, 8);
  v138 = re::ecs2::TextSystem::TextSystem(v31);
  v32 = (re *)(*(uint64_t (**)(_QWORD, re::ecs2::TextSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v138);
  if (v138)
  {

    v138 = 0;
  }
  v33 = re::globalAllocators(v32);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33[2] + 32))(v33[2], 112, 8);
  re::ecs2::System::System(v34, 1, 1);
  *v35 = &off_24ED682F0;
  v35[13] = 0;
  v137 = v35;
  v36 = (re *)(*(uint64_t (**)(_QWORD, _QWORD **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v137);
  if (v137)
  {

    v137 = 0;
  }
  v37 = re::globalAllocators(v36);
  v38 = (re::ecs2::PhysicsSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37[2] + 32))(v37[2], 216, 8);
  v136 = re::ecs2::PhysicsSystem::PhysicsSystem(v38);
  v39 = (re *)(*(uint64_t (**)(_QWORD, re::ecs2::PhysicsSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v136);
  if (v136)
  {

    v136 = 0;
  }
  v40 = re::globalAllocators(v39);
  v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v40[2] + 32))(v40[2], 216, 8);
  re::ecs2::System::System(v41, 1, 1);
  *(_QWORD *)v42 = &off_24ED6DF48;
  *(_OWORD *)(v42 + 104) = 0u;
  *(_OWORD *)(v42 + 120) = 0u;
  *(_OWORD *)(v42 + 136) = 0u;
  *(_OWORD *)(v42 + 152) = 0u;
  *(_OWORD *)(v42 + 168) = 0u;
  *(_OWORD *)(v42 + 184) = 0u;
  *(_OWORD *)(v42 + 200) = 0u;
  v135 = v42;
  v43 = (re *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v135);
  if (v135)
  {

    v135 = 0;
  }
  v44 = re::globalAllocators(v43);
  v45 = (re::ecs2::TransformSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v44[2] + 32))(v44[2], 152, 8);
  v134 = re::ecs2::TransformSystem::TransformSystem(v45);
  (*(void (**)(_QWORD, re::ecs2::TransformSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v134);
  if (v134)
  {

    v134 = 0;
  }
  re::make::shared::object<re::ecs2::RayCastSystem>((re *)&v161);
  v133 = v161;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v133);
  if (v133)
  {

    v133 = 0;
  }
  re::make::shared::object<re::ecs2::MaterialOverrideSystem>((re *)&v161);
  v132 = v161;
  v46 = (re *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v132);
  if (v132)
  {

    v132 = 0;
  }
  v47 = re::globalAllocators(v46);
  v48 = (re::ecs2::MaterialParameterBlockArraySystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47[2] + 32))(v47[2], 360, 8);
  v131 = re::ecs2::MaterialParameterBlockArraySystem::MaterialParameterBlockArraySystem(v48);
  (*(void (**)(_QWORD, re::ecs2::MaterialParameterBlockArraySystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v131);
  if (v131)
  {

    v131 = 0;
  }
  re::make::shared::object<re::ecs2::MaterialParametersSystem>((re *)&v161);
  v130 = v161;
  v49 = (re *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v130);
  if (v130)
  {

    v130 = 0;
  }
  v50 = re::globalAllocators(v49);
  v51 = (re::ecs2::IKParametersSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v50[2] + 32))(v50[2], 368, 8);
  v129 = re::ecs2::IKParametersSystem::IKParametersSystem(v51);
  v52 = (re *)(*(uint64_t (**)(_QWORD, re::ecs2::IKParametersSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v129);
  if (v129)
  {

    v129 = 0;
  }
  v53 = re::globalAllocators(v52);
  v54 = (re::ecs2::RigSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53[2] + 32))(v53[2], 384, 8);
  v128 = re::ecs2::RigSystem::RigSystem(v54);
  v55 = (re *)(*(uint64_t (**)(_QWORD, re::ecs2::RigSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v128);
  if (v128)
  {

    v128 = 0;
  }
  v56 = re::globalAllocators(v55);
  v57 = (re::ecs2::SkeletalPoseSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v56[2] + 32))(v56[2], 432, 8);
  v127 = re::ecs2::SkeletalPoseSystem::SkeletalPoseSystem(v57);
  v58 = (re *)(*(uint64_t (**)(_QWORD, re::ecs2::SkeletalPoseSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v127);
  if (v127)
  {

    v127 = 0;
  }
  v59 = re::globalAllocators(v58);
  v60 = (re::ecs2::MeshDeformationSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v59[2]
                                                                                                + 32))(v59[2], 408, 8);
  v126 = re::ecs2::MeshDeformationSystem::MeshDeformationSystem(v60);
  v61 = (re *)(*(uint64_t (**)(_QWORD, re::ecs2::MeshDeformationSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v126);
  if (v126)
  {

    v126 = 0;
  }
  v62 = re::globalAllocators(v61);
  v63 = (re::ecs2::BlendShapeWeightsSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v62[2]
                                                                                                  + 32))(v62[2], 456, 8);
  v125 = re::ecs2::BlendShapeWeightsSystem::BlendShapeWeightsSystem(v63);
  v64 = (re *)(*(uint64_t (**)(_QWORD, re::ecs2::BlendShapeWeightsSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v125);
  if (v125)
  {

    v125 = 0;
  }
  v65 = re::globalAllocators(v64);
  v66 = (re::ecs2::MeshOffsetsSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v65[2] + 32))(v65[2], 408, 8);
  v124 = re::ecs2::MeshOffsetsSystem::MeshOffsetsSystem(v66);
  v67 = (re *)(*(uint64_t (**)(_QWORD, re::ecs2::MeshOffsetsSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v124);
  if (v124)
  {

    v124 = 0;
  }
  v68 = re::globalAllocators(v67);
  v69 = (re::ecs2::SkeletalDebugSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68[2] + 32))(v68[2], 408, 8);
  v123 = re::ecs2::SkeletalDebugSystem::SkeletalDebugSystem(v69);
  v70 = (re *)(*(uint64_t (**)(_QWORD, re::ecs2::SkeletalDebugSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v123);
  if (v123)
  {

    v123 = 0;
  }
  v71 = re::globalAllocators(v70);
  v72 = (re::ecs2::MeshSmoothSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v71[2] + 32))(v71[2], 416, 8);
  v122 = re::ecs2::MeshSmoothSystem::MeshSmoothSystem(v72);
  (*(void (**)(_QWORD, re::ecs2::MeshSmoothSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v122);
  if (v122)
  {

    v122 = 0;
  }
  re::make::shared::object<re::ecs2::AnimationLibrarySystem>((re *)&v161);
  v121 = v161;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v121);
  if (v121)
  {

    v121 = 0;
  }
  re::make::shared::object<re::ecs2::GroundPlaneSystem>((re *)&v161);
  v120 = v161;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v120);
  if (v120)
  {

    v120 = 0;
  }
  v73 = re::make::shared::object<re::ecs2::VideoComponentSystem>((re *)&v161);
  v119 = v161;
  v74 = (re *)(*(uint64_t (**)(_QWORD, uint64_t *, double))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v119, v73);
  if (v119)
  {

    v119 = 0;
  }
  if (a2)
  {
    v165 = *(_QWORD *)(a1 + 24);
    v166 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v164, a1);
    re::ecs2::RenderingSystem::addRenderingSubsystemsUsingLambda((uint64_t)v164);
    v74 = v166;
    if (v166)
    {
      v74 = (re *)(**(uint64_t (***)(re *))v166)(v166);
      if (v166 != (re *)v164)
        v74 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v165 + 40))(v165);
      v166 = 0;
    }
  }
  v75 = re::globalAllocators(v74);
  v76 = (re::ecs2::AudioUpdateSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75[2] + 32))(v75[2], 112, 8);
  v118 = re::ecs2::AudioUpdateSystem::AudioUpdateSystem(v76);
  v77 = (re *)(*(uint64_t (**)(_QWORD, re::ecs2::AudioUpdateSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v118);
  if (v118)
  {

    v118 = 0;
  }
  v78 = re::globalAllocators(v77);
  v79 = (re::ecs2::AudioSessionSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v78[2] + 32))(v78[2], 424, 8);
  v117 = re::ecs2::AudioSessionSystem::AudioSessionSystem(v79);
  v80 = (re *)(*(uint64_t (**)(_QWORD, re::ecs2::AudioSessionSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v117);
  if (v117)
  {

    v117 = 0;
  }
  v81 = re::globalAllocators(v80);
  v82 = (re::ecs2::VideoAudioControlSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v81[2]
                                                                                                  + 32))(v81[2], 112, 8);
  v116 = re::ecs2::VideoAudioControlSystem::VideoAudioControlSystem(v82);
  v83 = (re *)(*(uint64_t (**)(_QWORD, re::ecs2::VideoAudioControlSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v116);
  if (v116)
  {

    v116 = 0;
  }
  v84 = re::globalAllocators(v83);
  v85 = (re::ecs2::AudioPlayerSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v84[2] + 32))(v84[2], 280, 8);
  v115 = re::ecs2::AudioPlayerSystem::AudioPlayerSystem(v85);
  (*(void (**)(_QWORD, re::ecs2::AudioPlayerSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v115);
  if (v115)
  {

    v115 = 0;
  }
  re::make::shared::object<re::ecs2::AudioAnimationSystem>((re *)&v161);
  v114 = v161;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v114);
  if (v114)
  {

    v114 = 0;
  }
  re::make::shared::object<re::ecs2::AudioMixerSystem>((re *)&v161);
  v113 = v161;
  v86 = (re *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v113);
  if (v113)
  {

    v113 = 0;
  }
  v87 = re::globalAllocators(v86);
  v88 = (re::ecs2::ReverbSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v87[2] + 32))(v87[2], 376, 8);
  v112 = re::ecs2::ReverbSystem::ReverbSystem(v88);
  v89 = (re *)(*(uint64_t (**)(_QWORD, re::ecs2::ReverbSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v112);
  if (v112)
  {

    v112 = 0;
  }
  v90 = re::globalAllocators(v89);
  v91 = (re::ecs2::AcousticMeshSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v90[2] + 32))(v90[2], 424, 8);
  v111 = re::ecs2::AcousticMeshSystem::AcousticMeshSystem(v91);
  (*(void (**)(_QWORD, re::ecs2::AcousticMeshSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v111);
  if (v111)
  {

    v111 = 0;
  }
  v92 = re::make::shared::object<re::ecs2::SpatialSceneClassificationSystem>((re *)&v161);
  v110 = v161;
  (*(void (**)(_QWORD, uint64_t *, double))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v110, v92);
  if (v110)
  {

    v110 = 0;
  }
  re::make::shared::object<re::ecs2::VoiceSystem>((re *)&v161);
  v109 = v161;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v109);
  if (v109)
  {

    v109 = 0;
  }
  v93 = re::make::shared::object<re::ecs2::ListenerSystem>((re *)&v161);
  v108 = v161;
  v94 = (re *)(*(uint64_t (**)(_QWORD, uint64_t *, double))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v108, v93);
  if (v108)
  {

    v108 = 0;
  }
  v95 = re::globalAllocators(v94);
  v96 = (re::ecs2::AudioDebugSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v95[2] + 32))(v95[2], 320, 8);
  v107 = re::ecs2::AudioDebugSystem::AudioDebugSystem(v96);
  v97 = (re *)(*(uint64_t (**)(_QWORD, re::ecs2::AudioDebugSystem **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v107);
  if (v107)
  {

    v107 = 0;
  }
  v98 = re::globalAllocators(v97);
  v99 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v98[2] + 32))(v98[2], 232, 8);
  re::ecs2::System::System(v99, 2);
  *(_QWORD *)v100 = &off_24ED69480;
  *(_QWORD *)(v100 + 112) = 0;
  *(_QWORD *)(v100 + 120) = 0;
  *(_QWORD *)(v100 + 104) = 0;
  *(_DWORD *)(v100 + 128) = 0;
  *(_OWORD *)(v100 + 136) = 0u;
  *(_OWORD *)(v100 + 152) = 0u;
  *(_OWORD *)(v100 + 168) = 0u;
  *(_OWORD *)(v100 + 184) = 0u;
  *(_OWORD *)(v100 + 200) = 0u;
  *(_OWORD *)(v100 + 216) = 0u;
  v106 = v100;
  v101 = (re *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v106);
  if (v106)
  {

    v106 = 0;
  }
  v102 = re::globalAllocators(v101);
  v103 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v102[2] + 32))(v102[2], 104, 8);
  *(_OWORD *)v103 = 0u;
  *(_OWORD *)(v103 + 16) = 0u;
  *(_OWORD *)(v103 + 32) = 0u;
  *(_OWORD *)(v103 + 48) = 0u;
  *(_OWORD *)(v103 + 64) = 0u;
  *(_OWORD *)(v103 + 80) = 0u;
  *(_QWORD *)(v103 + 96) = 0;
  re::ecs2::System::System(v103, 1);
  *v104 = &off_24ED66778;
  v105 = v104;
  (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v105);
  if (v105)

}

re *re::ecs2::ComponentHelper::deprecatedAddDefaultSystems(re *this, re::ecs2::Scene *a2)
{
  re *v2;
  uint64_t v3;
  _QWORD v4[3];
  uint64_t v5;
  re *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (this)
  {
    v2 = this;
    v3 = re::globalAllocators(this)[2];
    v4[0] = &off_24ED62798;
    v4[1] = v2;
    v5 = v3;
    v6 = (re *)v4;
    this = v6;
    if (v6)
    {
      this = (re *)(**(uint64_t (***)(re *))v6)(v6);
      if (v6 != (re *)v4)
        return (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    }
  }
  return this;
}

re *re::ecs2::ComponentHelper::addRealityRendererDefaultSystems(re *result, uint64_t a2)
{
  re *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  re *v9;
  uint64_t *v10;
  re::ecs2::DeferredActivationSystem *v11;
  double Trace;
  re *v13;
  uint64_t *v14;
  re::ecs2::AssetMutateTrackingSystem *v15;
  re *v16;
  uint64_t *v17;
  re::ecs2::Static3DTextSystem *v18;
  re *v19;
  uint64_t *v20;
  re::ecs2::MeshSceneSystem *v21;
  re *v22;
  uint64_t *v23;
  re::ecs2::SkeletalPosePreparationSystem *v24;
  re *v25;
  uint64_t *v26;
  re::ecs2::AnimationUpdateSystem *v27;
  re *v28;
  uint64_t *v29;
  re::ecs2::AnimationSystem *v30;
  re *v31;
  uint64_t *v32;
  re::ecs2::TextSystem *v33;
  re *v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  re *v38;
  uint64_t *v39;
  re::ecs2::PhysicsSystem *v40;
  re *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  re *v45;
  uint64_t *v46;
  re::ecs2::TransformSystem *v47;
  re *v48;
  uint64_t *v49;
  re::ecs2::MaterialParameterBlockArraySystem *v50;
  re *v51;
  uint64_t *v52;
  re::ecs2::IKParametersSystem *v53;
  re *v54;
  uint64_t *v55;
  re::ecs2::RigSystem *v56;
  re *v57;
  uint64_t *v58;
  re::ecs2::SkeletalPoseSystem *v59;
  re *v60;
  uint64_t *v61;
  re::ecs2::MeshDeformationSystem *v62;
  re *v63;
  uint64_t *v64;
  re::ecs2::BlendShapeWeightsSystem *v65;
  re *v66;
  uint64_t *v67;
  re::ecs2::MeshOffsetsSystem *v68;
  re *v69;
  uint64_t *v70;
  re::ecs2::SkeletalDebugSystem *v71;
  re *v72;
  uint64_t *v73;
  re::ecs2::MeshSmoothSystem *v74;
  double v75;
  re *v76;
  uint64_t *v77;
  re::ecs2::AudioUpdateSystem *v78;
  re *v79;
  uint64_t *v80;
  re::ecs2::AudioSessionSystem *v81;
  re *v82;
  uint64_t *v83;
  re::ecs2::VideoAudioControlSystem *v84;
  re *v85;
  uint64_t *v86;
  re::ecs2::AudioPlayerSystem *v87;
  re *v88;
  uint64_t *v89;
  re::ecs2::ReverbSystem *v90;
  re *v91;
  uint64_t *v92;
  re::ecs2::AcousticMeshSystem *v93;
  double v94;
  double v95;
  re *v96;
  uint64_t *v97;
  re::ecs2::AudioDebugSystem *v98;
  re::ecs2::AudioDebugSystem *v99;
  re::ecs2::AudioDebugSystem *v100;
  re::ecs2::AudioDebugSystem *v101;
  re::ecs2::AudioDebugSystem *v102;
  re::ecs2::AcousticMeshSystem *v103;
  re::ecs2::ReverbSystem *v104;
  re::ecs2::ReverbSystem *v105;
  re::ecs2::ReverbSystem *v106;
  re::ecs2::AudioPlayerSystem *v107;
  re::ecs2::VideoAudioControlSystem *v108;
  re::ecs2::AudioSessionSystem *v109;
  re::ecs2::AudioUpdateSystem *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  re::ecs2::MeshSmoothSystem *v114;
  re::ecs2::SkeletalDebugSystem *v115;
  re::ecs2::MeshOffsetsSystem *v116;
  re::ecs2::BlendShapeWeightsSystem *v117;
  re::ecs2::MeshDeformationSystem *v118;
  re::ecs2::SkeletalPoseSystem *v119;
  re::ecs2::RigSystem *v120;
  re::ecs2::IKParametersSystem *v121;
  uint64_t v122;
  re::ecs2::MaterialParameterBlockArraySystem *v123;
  uint64_t v124;
  uint64_t v125;
  re::ecs2::TransformSystem *v126;
  uint64_t v127;
  re::ecs2::PhysicsSystem *v128;
  _QWORD *v129;
  re::ecs2::TextSystem *v130;
  re::ecs2::AnimationSystem *v131;
  re::ecs2::AnimationUpdateSystem *updated;
  re::ecs2::SkeletalPosePreparationSystem *v133;
  uint64_t v134;
  re::ecs2::MeshSceneSystem *v135;
  re::ecs2::Static3DTextSystem *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  re::ecs2::AssetMutateTrackingSystem *v148;
  uint64_t v149;
  uint64_t v150;
  re::ecs2::DeferredActivationSystem *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD v155[3];
  uint64_t v156;
  re *v157;
  _QWORD v158[3];
  uint64_t v159;
  re *v160;
  uint64_t v161;

  v161 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = result;
    v4 = re::globalAllocators(result);
    v5 = v4[2];
    v155[0] = &off_24ED627F0;
    v155[1] = a2;
    v155[2] = v3;
    v156 = v5;
    v157 = (re *)v155;
    v6 = re::globalAllocators((re *)v4);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 128, 8);
    re::ecs2::System::System(v7, 1, 1);
    *v8 = &off_24ED697B0;
    v8[14] = 0;
    v8[15] = 0;
    v8[13] = 0;
    v154 = v8;
    (*(void (**)(re *, _QWORD **))(*(_QWORD *)v157 + 16))(v157, &v154);
    if (v154)
    {

      v154 = 0;
    }
    re::make::shared::object<re::ecs2::SceneSystem>((re *)v158);
    v153 = v158[0];
    (*(void (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v153);
    if (v153)
    {

      v153 = 0;
    }
    re::make::shared::object<re::ecs2::TimebaseSystem>((re *)v158);
    v152 = v158[0];
    v9 = (re *)(*(uint64_t (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v152);
    if (v152)
    {

      v152 = 0;
    }
    v10 = re::globalAllocators(v9);
    v11 = (re::ecs2::DeferredActivationSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 368, 8);
    v151 = re::ecs2::DeferredActivationSystem::DeferredActivationSystem(v11);
    (*(void (**)(re *, re::ecs2::DeferredActivationSystem **))(*(_QWORD *)v157 + 16))(v157, &v151);
    if (v151)
    {

      v151 = 0;
    }
    Trace = re::make::shared::object<re::ecs2::LoadTraceSystem>((re *)v158);
    v150 = v158[0];
    (*(void (**)(re *, uint64_t *, double))(*(_QWORD *)v157 + 16))(v157, &v150, Trace);
    if (v150)
    {

      v150 = 0;
    }
    re::make::shared::object<re::ecs2::NetworkAssetComponentSystem>((re *)v158);
    v149 = v158[0];
    v13 = (re *)(*(uint64_t (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v149);
    if (v149)
    {

      v149 = 0;
    }
    v14 = re::globalAllocators(v13);
    v15 = (re::ecs2::AssetMutateTrackingSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 232, 8);
    v148 = re::ecs2::AssetMutateTrackingSystem::AssetMutateTrackingSystem(v15);
    (*(void (**)(re *, re::ecs2::AssetMutateTrackingSystem **))(*(_QWORD *)v157 + 16))(v157, &v148);
    if (v148)
    {

      v148 = 0;
    }
    re::make::shared::object<re::ecs2::CameraMovementSystem>((re *)v158);
    v147 = v158[0];
    (*(void (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v147);
    if (v147)
    {

      v147 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitiveBoxSystem>((re *)v158);
    v146 = v158[0];
    (*(void (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v146);
    if (v146)
    {

      v146 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>((re *)v158);
    v145 = v158[0];
    (*(void (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v145);
    if (v145)
    {

      v145 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitiveCapsuleSystem>((re *)v158);
    v144 = v158[0];
    (*(void (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v144);
    if (v144)
    {

      v144 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitiveConeSystem>((re *)v158);
    v143 = v158[0];
    (*(void (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v143);
    if (v143)
    {

      v143 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitiveCylinderSystem>((re *)v158);
    v142 = v158[0];
    (*(void (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v142);
    if (v142)
    {

      v142 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitivePlaneSystem>((re *)v158);
    v141 = v158[0];
    (*(void (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v141);
    if (v141)
    {

      v141 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitivePyramidSystem>((re *)v158);
    v140 = v158[0];
    (*(void (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v140);
    if (v140)
    {

      v140 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitiveSphereSystem>((re *)v158);
    v139 = v158[0];
    (*(void (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v139);
    if (v139)
    {

      v139 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitiveTetrahedronSystem>((re *)v158);
    v138 = v158[0];
    (*(void (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v138);
    if (v138)
    {

      v138 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitiveTubeSystem>((re *)v158);
    v137 = v158[0];
    v16 = (re *)(*(uint64_t (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v137);
    if (v137)
    {

      v137 = 0;
    }
    v17 = re::globalAllocators(v16);
    v18 = (re::ecs2::Static3DTextSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17[2] + 32))(v17[2], 384, 8);
    v136 = re::ecs2::Static3DTextSystem::Static3DTextSystem(v18);
    v19 = (re *)(*(uint64_t (**)(re *, re::ecs2::Static3DTextSystem **))(*(_QWORD *)v157 + 16))(v157, &v136);
    if (v136)
    {

      v136 = 0;
    }
    v20 = re::globalAllocators(v19);
    v21 = (re::ecs2::MeshSceneSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20[2] + 32))(v20[2], 456, 8);
    v135 = re::ecs2::MeshSceneSystem::MeshSceneSystem(v21);
    (*(void (**)(re *, re::ecs2::MeshSceneSystem **))(*(_QWORD *)v157 + 16))(v157, &v135);
    if (v135)
    {

      v135 = 0;
    }
    re::make::shared::object<re::ecs2::StateMachineSystem>((re *)v158);
    v134 = v158[0];
    v22 = (re *)(*(uint64_t (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v134);
    if (v134)
    {

      v134 = 0;
    }
    v23 = re::globalAllocators(v22);
    v24 = (re::ecs2::SkeletalPosePreparationSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23[2] + 32))(v23[2], 376, 8);
    v133 = re::ecs2::SkeletalPosePreparationSystem::SkeletalPosePreparationSystem(v24);
    v25 = (re *)(*(uint64_t (**)(re *, re::ecs2::SkeletalPosePreparationSystem **))(*(_QWORD *)v157 + 16))(v157, &v133);
    if (v133)
    {

      v133 = 0;
    }
    v26 = re::globalAllocators(v25);
    v27 = (re::ecs2::AnimationUpdateSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26[2]
                                                                                                  + 32))(v26[2], 112, 8);
    updated = re::ecs2::AnimationUpdateSystem::AnimationUpdateSystem(v27);
    v28 = (re *)(*(uint64_t (**)(re *, re::ecs2::AnimationUpdateSystem **))(*(_QWORD *)v157 + 16))(v157, &updated);
    if (updated)
    {

      updated = 0;
    }
    v29 = re::globalAllocators(v28);
    v30 = (re::ecs2::AnimationSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29[2] + 32))(v29[2], 736, 8);
    v131 = re::ecs2::AnimationSystem::AnimationSystem(v30);
    v31 = (re *)(*(uint64_t (**)(re *, re::ecs2::AnimationSystem **))(*(_QWORD *)v157 + 16))(v157, &v131);
    if (v131)
    {

      v131 = 0;
    }
    v32 = re::globalAllocators(v31);
    v33 = (re::ecs2::TextSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32[2] + 32))(v32[2], 472, 8);
    v130 = re::ecs2::TextSystem::TextSystem(v33);
    v34 = (re *)(*(uint64_t (**)(re *, re::ecs2::TextSystem **))(*(_QWORD *)v157 + 16))(v157, &v130);
    if (v130)
    {

      v130 = 0;
    }
    v35 = re::globalAllocators(v34);
    v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35[2] + 32))(v35[2], 112, 8);
    re::ecs2::System::System(v36, 1, 1);
    *v37 = &off_24ED682F0;
    v37[13] = 0;
    v129 = v37;
    v38 = (re *)(*(uint64_t (**)(re *, _QWORD **))(*(_QWORD *)v157 + 16))(v157, &v129);
    if (v129)
    {

      v129 = 0;
    }
    v39 = re::globalAllocators(v38);
    v40 = (re::ecs2::PhysicsSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39[2] + 32))(v39[2], 216, 8);
    v128 = re::ecs2::PhysicsSystem::PhysicsSystem(v40);
    v41 = (re *)(*(uint64_t (**)(re *, re::ecs2::PhysicsSystem **))(*(_QWORD *)v157 + 16))(v157, &v128);
    if (v128)
    {

      v128 = 0;
    }
    v42 = re::globalAllocators(v41);
    v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42[2] + 32))(v42[2], 216, 8);
    re::ecs2::System::System(v43, 1, 1);
    *(_QWORD *)v44 = &off_24ED6DF48;
    *(_OWORD *)(v44 + 104) = 0u;
    *(_OWORD *)(v44 + 120) = 0u;
    *(_OWORD *)(v44 + 136) = 0u;
    *(_OWORD *)(v44 + 152) = 0u;
    *(_OWORD *)(v44 + 168) = 0u;
    *(_OWORD *)(v44 + 184) = 0u;
    *(_OWORD *)(v44 + 200) = 0u;
    v127 = v44;
    v45 = (re *)(*(uint64_t (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v127);
    if (v127)
    {

      v127 = 0;
    }
    v46 = re::globalAllocators(v45);
    v47 = (re::ecs2::TransformSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46[2] + 32))(v46[2], 152, 8);
    v126 = re::ecs2::TransformSystem::TransformSystem(v47);
    (*(void (**)(re *, re::ecs2::TransformSystem **))(*(_QWORD *)v157 + 16))(v157, &v126);
    if (v126)
    {

      v126 = 0;
    }
    re::make::shared::object<re::ecs2::RayCastSystem>((re *)v158);
    v125 = v158[0];
    (*(void (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v125);
    if (v125)
    {

      v125 = 0;
    }
    re::make::shared::object<re::ecs2::MaterialOverrideSystem>((re *)v158);
    v124 = v158[0];
    v48 = (re *)(*(uint64_t (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v124);
    if (v124)
    {

      v124 = 0;
    }
    v49 = re::globalAllocators(v48);
    v50 = (re::ecs2::MaterialParameterBlockArraySystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49[2] + 32))(v49[2], 360, 8);
    v123 = re::ecs2::MaterialParameterBlockArraySystem::MaterialParameterBlockArraySystem(v50);
    (*(void (**)(re *, re::ecs2::MaterialParameterBlockArraySystem **))(*(_QWORD *)v157 + 16))(v157, &v123);
    if (v123)
    {

      v123 = 0;
    }
    re::make::shared::object<re::ecs2::MaterialParametersSystem>((re *)v158);
    v122 = v158[0];
    v51 = (re *)(*(uint64_t (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v122);
    if (v122)
    {

      v122 = 0;
    }
    v52 = re::globalAllocators(v51);
    v53 = (re::ecs2::IKParametersSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v52[2] + 32))(v52[2], 368, 8);
    v121 = re::ecs2::IKParametersSystem::IKParametersSystem(v53);
    v54 = (re *)(*(uint64_t (**)(re *, re::ecs2::IKParametersSystem **))(*(_QWORD *)v157 + 16))(v157, &v121);
    if (v121)
    {

      v121 = 0;
    }
    v55 = re::globalAllocators(v54);
    v56 = (re::ecs2::RigSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55[2] + 32))(v55[2], 384, 8);
    v120 = re::ecs2::RigSystem::RigSystem(v56);
    v57 = (re *)(*(uint64_t (**)(re *, re::ecs2::RigSystem **))(*(_QWORD *)v157 + 16))(v157, &v120);
    if (v120)
    {

      v120 = 0;
    }
    v58 = re::globalAllocators(v57);
    v59 = (re::ecs2::SkeletalPoseSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v58[2] + 32))(v58[2], 432, 8);
    v119 = re::ecs2::SkeletalPoseSystem::SkeletalPoseSystem(v59);
    v60 = (re *)(*(uint64_t (**)(re *, re::ecs2::SkeletalPoseSystem **))(*(_QWORD *)v157 + 16))(v157, &v119);
    if (v119)
    {

      v119 = 0;
    }
    v61 = re::globalAllocators(v60);
    v62 = (re::ecs2::MeshDeformationSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61[2]
                                                                                                  + 32))(v61[2], 408, 8);
    v118 = re::ecs2::MeshDeformationSystem::MeshDeformationSystem(v62);
    v63 = (re *)(*(uint64_t (**)(re *, re::ecs2::MeshDeformationSystem **))(*(_QWORD *)v157 + 16))(v157, &v118);
    if (v118)
    {

      v118 = 0;
    }
    v64 = re::globalAllocators(v63);
    v65 = (re::ecs2::BlendShapeWeightsSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64[2] + 32))(v64[2], 456, 8);
    v117 = re::ecs2::BlendShapeWeightsSystem::BlendShapeWeightsSystem(v65);
    v66 = (re *)(*(uint64_t (**)(re *, re::ecs2::BlendShapeWeightsSystem **))(*(_QWORD *)v157 + 16))(v157, &v117);
    if (v117)
    {

      v117 = 0;
    }
    v67 = re::globalAllocators(v66);
    v68 = (re::ecs2::MeshOffsetsSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v67[2] + 32))(v67[2], 408, 8);
    v116 = re::ecs2::MeshOffsetsSystem::MeshOffsetsSystem(v68);
    v69 = (re *)(*(uint64_t (**)(re *, re::ecs2::MeshOffsetsSystem **))(*(_QWORD *)v157 + 16))(v157, &v116);
    if (v116)
    {

      v116 = 0;
    }
    v70 = re::globalAllocators(v69);
    v71 = (re::ecs2::SkeletalDebugSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70[2]
                                                                                                + 32))(v70[2], 408, 8);
    v115 = re::ecs2::SkeletalDebugSystem::SkeletalDebugSystem(v71);
    v72 = (re *)(*(uint64_t (**)(re *, re::ecs2::SkeletalDebugSystem **))(*(_QWORD *)v157 + 16))(v157, &v115);
    if (v115)
    {

      v115 = 0;
    }
    v73 = re::globalAllocators(v72);
    v74 = (re::ecs2::MeshSmoothSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v73[2] + 32))(v73[2], 416, 8);
    v114 = re::ecs2::MeshSmoothSystem::MeshSmoothSystem(v74);
    (*(void (**)(re *, re::ecs2::MeshSmoothSystem **))(*(_QWORD *)v157 + 16))(v157, &v114);
    if (v114)
    {

      v114 = 0;
    }
    re::make::shared::object<re::ecs2::AnimationLibrarySystem>((re *)v158);
    v113 = v158[0];
    (*(void (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v113);
    if (v113)
    {

      v113 = 0;
    }
    re::make::shared::object<re::ecs2::GroundPlaneSystem>((re *)v158);
    v112 = v158[0];
    (*(void (**)(re *, uint64_t *))(*(_QWORD *)v157 + 16))(v157, &v112);
    if (v112)
    {

      v112 = 0;
    }
    v75 = re::make::shared::object<re::ecs2::VideoComponentSystem>((re *)v158);
    v111 = v158[0];
    (*(void (**)(re *, uint64_t *, double))(*(_QWORD *)v157 + 16))(v157, &v111, v75);
    if (v111)
    {

      v111 = 0;
    }
    v159 = v156;
    v160 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v158, (uint64_t)v155);
    re::ecs2::RenderingSystem::addRenderingSubsystemsUsingLambda((uint64_t)v158);
    v76 = v160;
    if (v160)
    {
      v76 = (re *)(**(uint64_t (***)(re *))v160)(v160);
      if (v160 != (re *)v158)
        v76 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v159 + 40))(v159);
      v160 = 0;
    }
    v77 = re::globalAllocators(v76);
    v78 = (re::ecs2::AudioUpdateSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v77[2] + 32))(v77[2], 112, 8);
    v110 = re::ecs2::AudioUpdateSystem::AudioUpdateSystem(v78);
    v79 = (re *)(*(uint64_t (**)(re *, re::ecs2::AudioUpdateSystem **))(*(_QWORD *)v157 + 16))(v157, &v110);
    if (v110)
    {

      v110 = 0;
    }
    v80 = re::globalAllocators(v79);
    v81 = (re::ecs2::AudioSessionSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80[2] + 32))(v80[2], 424, 8);
    v109 = re::ecs2::AudioSessionSystem::AudioSessionSystem(v81);
    v82 = (re *)(*(uint64_t (**)(re *, re::ecs2::AudioSessionSystem **))(*(_QWORD *)v157 + 16))(v157, &v109);
    if (v109)
    {

      v109 = 0;
    }
    v83 = re::globalAllocators(v82);
    v84 = (re::ecs2::VideoAudioControlSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v83[2] + 32))(v83[2], 112, 8);
    v108 = re::ecs2::VideoAudioControlSystem::VideoAudioControlSystem(v84);
    v85 = (re *)(*(uint64_t (**)(re *, re::ecs2::VideoAudioControlSystem **))(*(_QWORD *)v157 + 16))(v157, &v108);
    if (v108)
    {

      v108 = 0;
    }
    v86 = re::globalAllocators(v85);
    v87 = (re::ecs2::AudioPlayerSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v86[2] + 32))(v86[2], 280, 8);
    v107 = re::ecs2::AudioPlayerSystem::AudioPlayerSystem(v87);
    (*(void (**)(re *, re::ecs2::AudioPlayerSystem **))(*(_QWORD *)v157 + 16))(v157, &v107);
    if (v107)
    {

      v107 = 0;
    }
    re::make::shared::object<re::ecs2::AudioAnimationSystem>((re *)&v105);
    v106 = v105;
    (*(void (**)(re *, re::ecs2::ReverbSystem **))(*(_QWORD *)v157 + 16))(v157, &v106);
    if (v106)
    {

      v106 = 0;
    }
    re::make::shared::object<re::ecs2::AudioMixerSystem>((re *)&v104);
    v105 = v104;
    v88 = (re *)(*(uint64_t (**)(re *, re::ecs2::ReverbSystem **))(*(_QWORD *)v157 + 16))(v157, &v105);
    if (v105)
    {

      v105 = 0;
    }
    v89 = re::globalAllocators(v88);
    v90 = (re::ecs2::ReverbSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89[2] + 32))(v89[2], 376, 8);
    v104 = re::ecs2::ReverbSystem::ReverbSystem(v90);
    v91 = (re *)(*(uint64_t (**)(re *, re::ecs2::ReverbSystem **))(*(_QWORD *)v157 + 16))(v157, &v104);
    if (v104)
    {

      v104 = 0;
    }
    v92 = re::globalAllocators(v91);
    v93 = (re::ecs2::AcousticMeshSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v92[2] + 32))(v92[2], 424, 8);
    v103 = re::ecs2::AcousticMeshSystem::AcousticMeshSystem(v93);
    (*(void (**)(re *, re::ecs2::AcousticMeshSystem **))(*(_QWORD *)v157 + 16))(v157, &v103);
    if (v103)
    {

      v103 = 0;
    }
    v94 = re::make::shared::object<re::ecs2::SpatialSceneClassificationSystem>((re *)&v101);
    v102 = v101;
    (*(void (**)(re *, re::ecs2::AudioDebugSystem **, double))(*(_QWORD *)v157 + 16))(v157, &v102, v94);
    if (v102)
    {

      v102 = 0;
    }
    re::make::shared::object<re::ecs2::VoiceSystem>((re *)&v100);
    v101 = v100;
    (*(void (**)(re *, re::ecs2::AudioDebugSystem **))(*(_QWORD *)v157 + 16))(v157, &v101);
    if (v101)
    {

      v101 = 0;
    }
    v95 = re::make::shared::object<re::ecs2::ListenerSystem>((re *)&v99);
    v100 = v99;
    v96 = (re *)(*(uint64_t (**)(re *, re::ecs2::AudioDebugSystem **, double))(*(_QWORD *)v157 + 16))(v157, &v100, v95);
    if (v100)
    {

      v100 = 0;
    }
    v97 = re::globalAllocators(v96);
    v98 = (re::ecs2::AudioDebugSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v97[2] + 32))(v97[2], 320, 8);
    v99 = re::ecs2::AudioDebugSystem::AudioDebugSystem(v98);
    (*(void (**)(re *, re::ecs2::AudioDebugSystem **))(*(_QWORD *)v157 + 16))(v157, &v99);
    if (v99)

    result = v157;
    if (v157)
    {
      result = (re *)(**(uint64_t (***)(re *))v157)(v157);
      if (v157 != (re *)v155)
        return (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v156 + 40))(v156);
    }
  }
  return result;
}

re::ecs2::Entity *re::ecs2::ComponentHelper::privateSceneDataEntity(re::ecs2::ComponentHelper *this, re::ecs2::Scene *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  re::ecs2::Entity **v6;
  uint64_t v7;
  re::ecs2::Entity *v8;
  char *v9;
  re::ecs2::EntityFactory *v10;
  uint64_t *v11;
  re::ecs2::Entity *v12;
  re::ecs2::Entity *v14;
  uint64_t v15;
  const char *v16;

  v2 = (int)a2;
  v4 = *((_QWORD *)this + 13);
  v15 = 0x4B834A2ABFA269B4;
  v16 = "com.apple.RealityKit.PrivateSceneData";
  v5 = *(_QWORD *)(v4 + 328);
  if (v5)
  {
    v6 = *(re::ecs2::Entity ***)(v4 + 344);
    v7 = 8 * v5;
    while (1)
    {
      v8 = *v6;
      if ((*((_QWORD *)*v6 + 34) ^ 0x4B834A2ABFA269B4uLL) <= 1)
      {
        v9 = (char *)*((_QWORD *)v8 + 35);
        if (v9 == "com.apple.RealityKit.PrivateSceneData" || !strcmp(v9, "com.apple.RealityKit.PrivateSceneData"))
          break;
      }
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v8 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v15);
  if (!v8)
  {
    if (v2)
    {
      v11 = re::ecs2::EntityFactory::instance(v10);
      re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v11, 4uLL, &v14);
      v12 = v14;
      v15 = 0x4B834A2ABFA269B4;
      v16 = "com.apple.RealityKit.PrivateSceneData";
      re::StringID::operator=((unint64_t *)v14 + 34, &v15);
      re::StringID::destroyString((re::StringID *)&v15);
      *((_DWORD *)v12 + 72) |= 0x400u;
      re::Collection<re::SharedPtr<re::ecs2::Scene>>::add((_QWORD *)(*((_QWORD *)this + 13) + 304), (uint64_t *)&v14);
      v8 = v14;
      if (v14)

    }
  }
  return v8;
}

re::ecs2::Entity *makeSceneDataEntity(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t OwnerPeerID;
  re::ecs2::EntityFactory *v18;
  uint64_t v19;
  uint64_t *v20;
  re::ecs2::Entity *v21;
  uint64_t v22;
  re::ecs2::NetworkComponent *v23;
  re::ecs2::Entity *v24;
  uint64_t v26[2];
  re::ecs2::Entity *v27;

  if (*(_BYTE *)a2)
    v10 = *(_QWORD *)(a2 + 8);
  else
    v10 = 0;
  v11 = *(_QWORD *)(a1 + 104);
  v12 = *(_QWORD *)(v11 + 328);
  if (v12)
  {
    v13 = *(uint64_t **)(v11 + 344);
    v14 = 8 * v12;
    while (1)
    {
      v15 = *v13;
      if (re::StringID::operator==((_QWORD *)(*v13 + 272), a4))
      {
        v16 = *(_QWORD *)(v15 + 200);
        if (!v16)
          v16 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v15 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        OwnerPeerID = *(_QWORD *)(v16 + 32);
        if (OwnerPeerID)
          OwnerPeerID = RESyncableGetOwnerPeerID();
        if (OwnerPeerID == v10)
          return (re::ecs2::Entity *)*v13;
      }
      ++v13;
      v14 -= 8;
      if (!v14)
        goto LABEL_13;
    }
  }
  else
  {
    if (!a3)
      return 0;
LABEL_13:
    v18 = *(re::ecs2::EntityFactory **)(a1 + 56);
    if (v18)
    {
      v19 = (*(uint64_t (**)(re::ecs2::EntityFactory *))(*(_QWORD *)v18 + 32))(v18);
      v18 = (re::ecs2::EntityFactory *)re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v19);
      if (v18)
      {
        v18 = (re::ecs2::EntityFactory *)*((_QWORD *)v18 + 303);
        if (v18)
          v18 = (re::ecs2::EntityFactory *)RESyncNetSessionPeerID();
      }
    }
    if (!*(_BYTE *)a2 || *(re::ecs2::EntityFactory **)(a2 + 8) == v18)
    {
      v20 = re::ecs2::EntityFactory::instance(v18);
      re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v20, 4uLL, &v27);
      v21 = v27;
      v22 = a4[1];
      v26[0] = 2 * *a4;
      v26[1] = v22;
      re::StringID::operator=((unint64_t *)v27 + 34, v26);
      re::StringID::destroyString((re::StringID *)v26);
      *((_DWORD *)v21 + 72) |= 0x400u;
      v23 = (re::ecs2::NetworkComponent *)*((_QWORD *)v21 + 25);
      if (!v23)
        v23 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      re::ecs2::NetworkComponent::setNetworkShareMode(v23, a5);
      re::Collection<re::SharedPtr<re::ecs2::Scene>>::add((_QWORD *)(*(_QWORD *)(a1 + 104) + 304), (uint64_t *)&v27);
      v24 = v27;
      if (v27)

    }
    else
    {
      return 0;
    }
  }
  return v24;
}

_QWORD *re::ecs2::ComponentHelper::findAssetHandles(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  const re::IntrospectionBase ***v4;
  uint64_t v5;
  const re::IntrospectionBase **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = result[7];
  if (v2)
  {
    v4 = (const re::IntrospectionBase ***)result[9];
    v5 = 8 * v2;
    while (1)
    {
      v6 = *v4;
      v7 = (*((uint64_t (**)(const re::IntrospectionBase **))**v4 + 5))(*v4);
      v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
      std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100]((uint64_t)v10, a2);
      re::internal::AssetDependencyWalker::findAssetHandles(v8, v6, (uint64_t)v10);
      result = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v9 = 5;
LABEL_7:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
      }
      ++v4;
      v5 -= 8;
      if (!v5)
        return result;
    }
    result = v10;
    v9 = 4;
    goto LABEL_7;
  }
  return result;
}

_QWORD *re::ecs2::ComponentHelper::addToLoadRequest(re::ecs2::ComponentHelper *this, re::AssetLoadRequest *a2, re::ecs2::Entity *a3)
{
  int v3;
  BOOL v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  re::AssetLoadRequest **v10;
  uint64_t v11;
  re::AssetLoadRequest *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v3 = (int)a3;
  v15 = *MEMORY[0x24BDAC8D0];
  v13[0] = &off_24ED62848;
  v13[1] = this;
  v14 = v13;
  re::ecs2::ComponentHelper::findAssetHandles(a2, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v8 = 4;
    result = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v8 = 5;
LABEL_5:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  if (v3)
  {
    v9 = *((_QWORD *)a2 + 41);
    if (v9)
    {
      v10 = (re::AssetLoadRequest **)*((_QWORD *)a2 + 43);
      v11 = 8 * v9;
      do
      {
        v12 = *v10++;
        result = (_QWORD *)re::ecs2::ComponentHelper::addToLoadRequest(this, v12, (re::ecs2::Entity *)1, v6);
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

void re::ecs2::ComponentHelper::getComponentsWithoutAnyExplicitRealityFileSerializationFlag(re::ecs2::ComponentHelper *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  char *v6;
  uint8x8_t v7;
  char *v8;
  uint64_t v9;
  StringID v10;

  v3 = (uint64_t)re::ecs2::ComponentTypeRegistry::instance(this);
  v4 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      v6 = re::ecs2::ComponentTypeRegistry::instance((re::ecs2::ComponentTypeRegistry *)v3);
      v3 = re::ecs2::ComponentTypeRegistry::operator[]((uint64_t)v6, i);
      v7 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v3 + 40));
      v7.i16[0] = vaddlv_u8(v7);
      if (v7.i32[0] != 1)
      {
        v8 = re::ecs2::ComponentTypeRegistry::instance((re::ecs2::ComponentTypeRegistry *)v3);
        v9 = re::ecs2::ComponentTypeRegistry::operator[]((uint64_t)v8, i);
        re::StringID::StringID((re::StringID *)&v10, (const StringID *)(v9 + 24));
        re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)a2, &v10);
        re::StringID::destroyString((re::StringID *)&v10);
      }
    }
  }
}

void re::make::shared::object<re::ecs2::SceneSystem>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 104, 8);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_QWORD *)(v3 + 96) = 0;
  re::ecs2::System::System(v3, 1);
  *v4 = &off_24ED62698;
  *(_QWORD *)a1 = v4;
}

void re::make::shared::object<re::ecs2::TimebaseSystem>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 112, 8);
  re::ecs2::System::System(v3, 1);
  *v4 = &off_24ED70310;
  v4[13] = 0;
  *(_QWORD *)a1 = v4;
}

re::ecs2::DeferredActivationSystem *re::ecs2::DeferredActivationSystem::DeferredActivationSystem(re::ecs2::DeferredActivationSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  uint64_t v12;
  char v13;

  re::ecs2::System::System((uint64_t)this, 1);
  *(_QWORD *)v2 = &off_24ED70C70;
  *(_BYTE *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = off_24ED70CE0;
  v3 = v2 + 112;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  v4 = v2 + 128;
  *(_DWORD *)(v2 + 144) = 1;
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 168) = 0;
  *(_QWORD *)(v2 + 152) = 0;
  *(_DWORD *)(v2 + 176) = 0;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  v5 = (_QWORD *)(v2 + 248);
  *(_OWORD *)(v2 + 184) = 0u;
  v6 = (_QWORD *)(v2 + 184);
  *(_DWORD *)(v2 + 264) = 1;
  v7 = (_QWORD *)(v2 + 296);
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_QWORD *)(v2 + 304) = 0;
  *(_DWORD *)(v2 + 312) = 1;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 345) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 66) += 2;
  *((_QWORD *)this + 36) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 78) += 2;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = this;
  *((_QWORD *)this + 44) = v3;
  *((_BYTE *)this + 360) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

double re::make::shared::object<re::ecs2::LoadTraceSystem>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 264, 8);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_QWORD *)(v3 + 256) = 0;
  re::ecs2::System::System(v3, 1);
  *(_QWORD *)v4 = &off_24ED68E28;
  *(_QWORD *)(v4 + 104) = 2;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_DWORD *)(v4 + 144) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v4 + 148) = 0x7FFFFFFFLL;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 188) = 0u;
  *(_QWORD *)(v4 + 204) = 0x7FFFFFFFLL;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_DWORD *)(v4 + 248) = 0;
  *(_QWORD *)(v4 + 252) = 0x7FFFFFFFLL;
  *(_QWORD *)a1 = v4;
  return result;
}

void re::make::shared::object<re::ecs2::NetworkAssetComponentSystem>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 120, 8);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_QWORD *)(v3 + 112) = 0;
  re::ecs2::System::System(v3, 1);
  *v4 = &off_24ED6A1F0;
  *(_QWORD *)a1 = v4;
}

re::ecs2::AssetMutateTrackingSystem *re::ecs2::AssetMutateTrackingSystem::AssetMutateTrackingSystem(re::ecs2::AssetMutateTrackingSystem *this)
{
  uint64_t v2;
  _QWORD *v3;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)v2 = &off_24ED6F8B8;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  v3 = (_QWORD *)(v2 + 168);
  return this;
}

void re::make::shared::object<re::ecs2::CameraMovementSystem>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 104, 8);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_QWORD *)(v3 + 96) = 0;
  re::ecs2::System::System(v3, 1);
  *v4 = &off_24ED5AB48;
  *(_QWORD *)a1 = v4;
}

_QWORD *re::make::shared::object<re::ecs2::PrimitiveBoxSystem>(re *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  _QWORD *result;

  v2 = re::globalAllocators(a1);
  v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 384, 8);
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *result = &off_24ED628D8;
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD v9[2];
  void *v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System(a1, 1, 1);
  *v2 = off_24ED62978;
  v2[13] = off_24ED629E8;
  v3 = v2 + 13;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(_QWORD *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = a1;
  *(_QWORD *)(a1 + 368) = v3;
  *(_BYTE *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((_QWORD *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitiveBoxSystem::~PrimitiveBoxSystem(re::ecs2::PrimitiveBoxSystem *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED62978;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED629E8;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED62978;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED629E8;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::PrimitiveBoxSystem::typeInfo(re::ecs2::PrimitiveBoxSystem *this)
{
  return re::ecs2::introspect_PrimitiveBoxSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitiveBoxComponent>::addScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>,re::Slice<re::ecs2::PrimitiveBoxComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>*,re::Slice<re::ecs2::PrimitiveBoxComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>,re::Slice<re::ecs2::PrimitiveBoxComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveBoxComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_QWORD *)&v5 = a1 + 104;
  *((_QWORD *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>::deactivateComponent;
  v6 = 0;
  v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>,re::Slice<re::ecs2::PrimitiveBoxComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>*,re::Slice<re::ecs2::PrimitiveBoxComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>,re::Slice<re::ecs2::PrimitiveBoxComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveBoxComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[2];

  v4[0] = a3;
  v4[1] = a4;
  if (a2)
    re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>::dependsOnComponents(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveBoxComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  __n128 v23;
  _QWORD *v24;
  re **v25;
  uint64_t *v26;
  uint64_t *v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40));
  v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v38, a5, 0);
  v52 = a4;
  v53 = v38;
  v54 = v39;
  if (v38 != a5 || (unsigned __int16)v39 != 0xFFFFLL || (v39 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v53);
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      if (v13)
      {
        *(_OWORD *)(v12 + 112) = *(_OWORD *)(v12 + 28);
        *(_OWORD *)(v12 + 123) = *(_OWORD *)(v12 + 39);
        v14 = *(_BYTE *)(v12 + 56);
        *(_BYTE *)(v12 + 140) = v14;
        v15 = *(_BYTE *)(v12 + 57);
        *(_BYTE *)(v12 + 141) = v15;
        re::MeshPrimitiveProvider::makeDescriptor(v12 + 28, v14, v15, (uint64_t)&v38);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v8 + 40))(&v36, v8, &v38);
        v16 = *(_OWORD *)(v12 + 64);
        *(_OWORD *)(v12 + 64) = v36;
        v36 = v16;
        v17 = *(_QWORD *)(v12 + 80);
        *(_QWORD *)(v12 + 80) = v37;
        v37 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v36);
        re::AssetHandle::loadNow(*(_QWORD *)(v12 + 72), 0);
        v18 = *(_QWORD *)(v12 + 72);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          v21 = *(_QWORD **)(v13 + 176);
          if (v21 && v21[5] != *(_QWORD *)(v12 + 72))
          {
            re::AssetHandle::operator=(v21 + 4, (uint64_t *)(v12 + 64));
            re::ecs2::Component::markDirty(v21);
          }
          v20 = (unint64_t *)(a3 + 48);
          if (*(_BYTE *)(v12 + 58))
          {
            v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              v20 = (unint64_t *)(a3 + 48);
              if (!*(_QWORD *)(v12 + 96))
              {
                v24 = (_QWORD *)v22;
                v25 = re::internal::buildCollisionShape(v12 + 28, v23);
                v26 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v25);
                (*(void (**)(__int128 *__return_ptr, uint64_t, re **, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 416))(&v36, v8, v25, v26, 0, 2, 0);
                v28 = *(_OWORD *)(v12 + 88);
                v27 = (uint64_t *)(v12 + 88);
                *(_OWORD *)v27 = v36;
                v36 = v28;
                v29 = v27[2];
                v27[2] = v37;
                v37 = v29;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v36);
                re::AssetHandle::operator=(v24 + 4, v27);
                re::ecs2::Component::markDirty(v24);
                v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        v30 = v52;
        v31 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v53);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v30, v31, *v20);
        if ((_QWORD)v50)
        {
          if ((BYTE8(v50) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v50 + 40))();
          v50 = 0u;
          v51 = 0u;
        }
        if (v45)
        {
          if (v49)
            (*(void (**)(void))(*(_QWORD *)v45 + 40))();
          v49 = 0;
          v46 = 0;
          v47 = 0;
          v45 = 0;
          ++v48;
        }
        if (v40)
        {
          if (v44)
            (*(void (**)(void))(*(_QWORD *)v40 + 40))();
          v44 = 0;
          v41 = 0;
          v42 = 0;
          v40 = 0;
          ++v43;
        }
        if (v38 && (v39 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v38 + 40))();
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v53);
    }
    while (v53 != a5 || (unsigned __int16)v54 != 0xFFFF || WORD1(v54) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveBoxComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveBoxComponent>::processUpdatingComponents()
{
  return 0;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveBoxComponent>::addScene(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  re::ecs2::System *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = a2;
  v4 = (_anonymous_namespace_ *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(a1 + 144);
    else
      v7 = *(_QWORD **)(a1 + 152);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(a1 + 144);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v8 = *(uint64_t **)(a1 + 152);
    if (!v5)
      goto LABEL_17;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(_QWORD *)&v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    v14 = a1 + 168;
    v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  v43 = 0u;
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = -1;
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v48 = 1;
  v49 = 0uLL;
  v50 = 0uLL;
  v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,4ul>::addUninitialized(a1);
  v17 = v44;
  *(_QWORD *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  v19 = *(_QWORD *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::init(v20, a1, v51);
  v42 = *(_QWORD *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 160);
  if ((v21 & 0x3F) != 0)
    v23 = (v21 >> 6) + 1;
  else
    v23 = v21 >> 6;
  *(_QWORD *)(a1 + 160) = v21;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    v24 = 63;
    v25 = *(_QWORD *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63)
      v24 = ~(-1 << v25);
    if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      v26 = a1 + 144;
    else
      v26 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(v26 + 8 * *(_QWORD *)(a1 + 128) - 8) &= v24;
  }
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(a1 + 208);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(a1 + 208) = v27;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
      v32 = a1 + 192;
    else
      v32 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(a1 + 176) - 8) &= v30;
  }
  v15 = v42;
  v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(_BYTE *)(a1 + 232))
    return;
  v33 = *(_QWORD *)(a1 + 176);
  v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if ((v34 & 1) != 0)
      v35 = (_QWORD *)(a1 + 192);
    else
      v35 = *(_QWORD **)(a1 + 200);
    v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37)
        return;
    }
LABEL_59:
    v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((_BYTE *)v41 + 86))
      re::ecs2::System::queueToRun(v41, 0.0);
    return;
  }
  if ((v34 & 1) != 0)
  {
    v36 = (uint64_t *)(a1 + 192);
    if (!v33)
      return;
  }
  else
  {
    v36 = *(uint64_t **)(a1 + 200);
    if (!v33)
      return;
  }
  v38 = 0;
  v39 = 8 * v33;
  do
  {
    v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38)
    goto LABEL_59;
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v5 = 8 * a4;
    do
    {
      v6 = *a3;
      v7 = *(_QWORD *)(*a3 + 64);
      if (v7)
      {

        *(_QWORD *)(v6 + 64) = 0;
      }
      *(_QWORD *)(v6 + 72) = 0;
      v8 = *(_QWORD *)(v6 + 88);
      if (v8)
      {

        *(_QWORD *)(v6 + 88) = 0;
      }
      *(_QWORD *)(v6 + 96) = 0;
      *(_QWORD *)(v6 + 112) = 0x1000100010001;
      *(_OWORD *)(v6 + 120) = xmmword_2260F8390;
      *(_WORD *)(v6 + 136) = 257;
      ++a3;
      *(_BYTE *)(v6 + 138) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED62A50;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED62AA8;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED62B00;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED62B58;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED62A50;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED62AA8;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED62B00;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED62B58;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED62A50;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED62A50;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED62AA8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED62AA8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED62B00;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED62B00;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED62B58;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED62B58;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>,re::Slice<re::ecs2::PrimitiveBoxComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>*,re::Slice<re::ecs2::PrimitiveBoxComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>,re::Slice<re::ecs2::PrimitiveBoxComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveBoxComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

_QWORD *re::make::shared::object<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>(re *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  _QWORD *result;

  v2 = re::globalAllocators(a1);
  v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 384, 8);
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *result = &off_24ED62BB0;
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD v9[2];
  void *v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System(a1, 1, 1);
  *v2 = off_24ED62C50;
  v2[13] = off_24ED62CC0;
  v3 = v2 + 13;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(_QWORD *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = a1;
  *(_QWORD *)(a1 + 368) = v3;
  *(_BYTE *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((_QWORD *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitiveBoxWithRoundedCornersSystem::~PrimitiveBoxWithRoundedCornersSystem(re::ecs2::PrimitiveBoxWithRoundedCornersSystem *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED62C50;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED62CC0;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED62C50;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED62CC0;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::PrimitiveBoxWithRoundedCornersSystem::typeInfo(re::ecs2::PrimitiveBoxWithRoundedCornersSystem *this)
{
  return re::ecs2::introspect_PrimitiveBoxWithRoundedCornersSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::addScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>*,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_QWORD *)&v5 = a1 + 104;
  *((_QWORD *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::deactivateComponent;
  v6 = 0;
  v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>*,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[2];

  v4[0] = a3;
  v4[1] = a4;
  if (a2)
    re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::dependsOnComponents(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  re **v24;
  uint64_t *v25;
  uint64_t *v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40));
  v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v37, a5, 0);
  v51 = a4;
  v52 = v37;
  v53 = v38;
  if (v37 != a5 || (unsigned __int16)v38 != 0xFFFFLL || (v38 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v52);
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      if (v13)
      {
        *(_OWORD *)(v12 + 120) = *(_OWORD *)(v12 + 28);
        *(_OWORD *)(v12 + 136) = *(_OWORD *)(v12 + 44);
        *(_QWORD *)(v12 + 151) = *(_QWORD *)(v12 + 59);
        v14 = *(_BYTE *)(v12 + 68);
        *(_BYTE *)(v12 + 160) = v14;
        v15 = *(_BYTE *)(v12 + 69);
        *(_BYTE *)(v12 + 161) = v15;
        re::MeshPrimitiveProvider::makeDescriptor(v12 + 28, v14, v15, (uint64_t)&v37);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v8 + 40))(&v35, v8, &v37);
        v16 = *(_OWORD *)(v12 + 72);
        *(_OWORD *)(v12 + 72) = v35;
        v35 = v16;
        v17 = *(_QWORD *)(v12 + 88);
        *(_QWORD *)(v12 + 88) = v36;
        v36 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
        re::AssetHandle::loadNow(*(_QWORD *)(v12 + 80), 0);
        v18 = *(_QWORD *)(v12 + 80);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          v21 = *(_QWORD **)(v13 + 176);
          if (v21 && v21[5] != *(_QWORD *)(v12 + 80))
          {
            re::AssetHandle::operator=(v21 + 4, (uint64_t *)(v12 + 72));
            re::ecs2::Component::markDirty(v21);
          }
          v20 = (unint64_t *)(a3 + 48);
          if (*(_BYTE *)(v12 + 70))
          {
            v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              v20 = (unint64_t *)(a3 + 48);
              if (!*(_QWORD *)(v12 + 104))
              {
                v23 = (_QWORD *)v22;
                v24 = re::internal::buildCollisionShape(v12 + 28);
                v25 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v24);
                (*(void (**)(__int128 *__return_ptr, uint64_t, re **, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 416))(&v35, v8, v24, v25, 0, 2, 0);
                v27 = *(_OWORD *)(v12 + 96);
                v26 = (uint64_t *)(v12 + 96);
                *(_OWORD *)v26 = v35;
                v35 = v27;
                v28 = v26[2];
                v26[2] = v36;
                v36 = v28;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
                re::AssetHandle::operator=(v23 + 4, v26);
                re::ecs2::Component::markDirty(v23);
                v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        v29 = v51;
        v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v29, v30, *v20);
        if ((_QWORD)v49)
        {
          if ((BYTE8(v49) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v49 + 40))();
          v49 = 0u;
          v50 = 0u;
        }
        if (v44)
        {
          if (v48)
            (*(void (**)(void))(*(_QWORD *)v44 + 40))();
          v48 = 0;
          v45 = 0;
          v46 = 0;
          v44 = 0;
          ++v47;
        }
        if (v39)
        {
          if (v43)
            (*(void (**)(void))(*(_QWORD *)v39 + 40))();
          v43 = 0;
          v40 = 0;
          v41 = 0;
          v39 = 0;
          ++v42;
        }
        if (v37 && (v38 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v37 + 40))();
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v52);
    }
    while (v52 != a5 || (unsigned __int16)v53 != 0xFFFF || WORD1(v53) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::processUpdatingComponents()
{
  return 0;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::addScene(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  re::ecs2::System *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = a2;
  v4 = (_anonymous_namespace_ *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(a1 + 144);
    else
      v7 = *(_QWORD **)(a1 + 152);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(a1 + 144);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v8 = *(uint64_t **)(a1 + 152);
    if (!v5)
      goto LABEL_17;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(_QWORD *)&v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    v14 = a1 + 168;
    v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  v43 = 0u;
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = -1;
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v48 = 1;
  v49 = 0uLL;
  v50 = 0uLL;
  v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,4ul>::addUninitialized(a1);
  v17 = v44;
  *(_QWORD *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  v19 = *(_QWORD *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::init(v20, a1, v51);
  v42 = *(_QWORD *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 160);
  if ((v21 & 0x3F) != 0)
    v23 = (v21 >> 6) + 1;
  else
    v23 = v21 >> 6;
  *(_QWORD *)(a1 + 160) = v21;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    v24 = 63;
    v25 = *(_QWORD *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63)
      v24 = ~(-1 << v25);
    if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      v26 = a1 + 144;
    else
      v26 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(v26 + 8 * *(_QWORD *)(a1 + 128) - 8) &= v24;
  }
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(a1 + 208);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(a1 + 208) = v27;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
      v32 = a1 + 192;
    else
      v32 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(a1 + 176) - 8) &= v30;
  }
  v15 = v42;
  v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(_BYTE *)(a1 + 232))
    return;
  v33 = *(_QWORD *)(a1 + 176);
  v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if ((v34 & 1) != 0)
      v35 = (_QWORD *)(a1 + 192);
    else
      v35 = *(_QWORD **)(a1 + 200);
    v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37)
        return;
    }
LABEL_59:
    v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((_BYTE *)v41 + 86))
      re::ecs2::System::queueToRun(v41, 0.0);
    return;
  }
  if ((v34 & 1) != 0)
  {
    v36 = (uint64_t *)(a1 + 192);
    if (!v33)
      return;
  }
  else
  {
    v36 = *(uint64_t **)(a1 + 200);
    if (!v33)
      return;
  }
  v38 = 0;
  v39 = 8 * v33;
  do
  {
    v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38)
    goto LABEL_59;
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v5 = 8 * a4;
    do
    {
      v6 = *a3;
      v7 = *(_QWORD *)(*a3 + 72);
      if (v7)
      {

        *(_QWORD *)(v6 + 72) = 0;
      }
      *(_QWORD *)(v6 + 80) = 0;
      v8 = *(_QWORD *)(v6 + 96);
      if (v8)
      {

        *(_QWORD *)(v6 + 96) = 0;
      }
      *(_QWORD *)(v6 + 104) = 0;
      *(_QWORD *)(v6 + 120) = 0x3000100010001;
      *(_WORD *)(v6 + 128) = 4;
      *(_OWORD *)(v6 + 132) = xmmword_2260F83A0;
      *(_DWORD *)(v6 + 148) = 1065353216;
      *(_DWORD *)(v6 + 152) = 16777473;
      *(_WORD *)(v6 + 156) = 1;
      ++a3;
      *(_BYTE *)(v6 + 158) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED62D28;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED62D80;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED62DD8;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED62E30;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED62D28;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED62D80;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED62DD8;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED62E30;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED62D28;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED62D28;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED62D80;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED62D80;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED62DD8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED62DD8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED62E30;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED62E30;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>*,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

_QWORD *re::make::shared::object<re::ecs2::PrimitiveCapsuleSystem>(re *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  _QWORD *result;

  v2 = re::globalAllocators(a1);
  v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 384, 8);
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCapsuleComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *result = &off_24ED62E88;
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCapsuleComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD v9[2];
  void *v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System(a1, 1, 1);
  *v2 = off_24ED62F28;
  v2[13] = off_24ED62F98;
  v3 = v2 + 13;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(_QWORD *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = a1;
  *(_QWORD *)(a1 + 368) = v3;
  *(_BYTE *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((_QWORD *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitiveCapsuleSystem::~PrimitiveCapsuleSystem(re::ecs2::PrimitiveCapsuleSystem *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED62F28;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED62F98;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED62F28;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED62F98;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::PrimitiveCapsuleSystem::typeInfo(re::ecs2::PrimitiveCapsuleSystem *this)
{
  return re::ecs2::introspect_PrimitiveCapsuleSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCapsuleComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitiveCapsuleComponent>::addScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>*,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCapsuleComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_QWORD *)&v5 = a1 + 104;
  *((_QWORD *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>::deactivateComponent;
  v6 = 0;
  v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>*,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCapsuleComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[2];

  v4[0] = a3;
  v4[1] = a4;
  if (a2)
    re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>::dependsOnComponents(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveCapsuleComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  re **v24;
  uint64_t *v25;
  uint64_t *v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40));
  v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v37, a5, 0);
  v51 = a4;
  v52 = v37;
  v53 = v38;
  if (v37 != a5 || (unsigned __int16)v38 != 0xFFFFLL || (v38 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v52);
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      if (v13)
      {
        *(_OWORD *)(v12 + 104) = *(_OWORD *)(v12 + 28);
        *(_DWORD *)(v12 + 119) = *(_DWORD *)(v12 + 43);
        v14 = *(_BYTE *)(v12 + 48);
        *(_BYTE *)(v12 + 124) = v14;
        v15 = *(_BYTE *)(v12 + 49);
        *(_BYTE *)(v12 + 125) = v15;
        re::MeshPrimitiveProvider::makeDescriptor(v12 + 28, v14, v15, (uint64_t)&v37);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v8 + 40))(&v35, v8, &v37);
        v16 = *(_OWORD *)(v12 + 56);
        *(_OWORD *)(v12 + 56) = v35;
        v35 = v16;
        v17 = *(_QWORD *)(v12 + 72);
        *(_QWORD *)(v12 + 72) = v36;
        v36 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
        re::AssetHandle::loadNow(*(_QWORD *)(v12 + 64), 0);
        v18 = *(_QWORD *)(v12 + 64);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          v21 = *(_QWORD **)(v13 + 176);
          if (v21 && v21[5] != *(_QWORD *)(v12 + 64))
          {
            re::AssetHandle::operator=(v21 + 4, (uint64_t *)(v12 + 56));
            re::ecs2::Component::markDirty(v21);
          }
          v20 = (unint64_t *)(a3 + 48);
          if (*(_BYTE *)(v12 + 50))
          {
            v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              v20 = (unint64_t *)(a3 + 48);
              if (!*(_QWORD *)(v12 + 88))
              {
                v23 = (_QWORD *)v22;
                v24 = re::internal::buildCollisionShape((float *)(v12 + 28));
                v25 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v24);
                (*(void (**)(__int128 *__return_ptr, uint64_t, re **, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 416))(&v35, v8, v24, v25, 0, 2, 0);
                v27 = *(_OWORD *)(v12 + 80);
                v26 = (uint64_t *)(v12 + 80);
                *(_OWORD *)v26 = v35;
                v35 = v27;
                v28 = v26[2];
                v26[2] = v36;
                v36 = v28;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
                re::AssetHandle::operator=(v23 + 4, v26);
                re::ecs2::Component::markDirty(v23);
                v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        v29 = v51;
        v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v29, v30, *v20);
        if ((_QWORD)v49)
        {
          if ((BYTE8(v49) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v49 + 40))();
          v49 = 0u;
          v50 = 0u;
        }
        if (v44)
        {
          if (v48)
            (*(void (**)(void))(*(_QWORD *)v44 + 40))();
          v48 = 0;
          v45 = 0;
          v46 = 0;
          v44 = 0;
          ++v47;
        }
        if (v39)
        {
          if (v43)
            (*(void (**)(void))(*(_QWORD *)v39 + 40))();
          v43 = 0;
          v40 = 0;
          v41 = 0;
          v39 = 0;
          ++v42;
        }
        if (v37 && (v38 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v37 + 40))();
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v52);
    }
    while (v52 != a5 || (unsigned __int16)v53 != 0xFFFF || WORD1(v53) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveCapsuleComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveCapsuleComponent>::processUpdatingComponents()
{
  return 0;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveCapsuleComponent>::addScene(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  re::ecs2::System *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = a2;
  v4 = (_anonymous_namespace_ *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(a1 + 144);
    else
      v7 = *(_QWORD **)(a1 + 152);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(a1 + 144);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v8 = *(uint64_t **)(a1 + 152);
    if (!v5)
      goto LABEL_17;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(_QWORD *)&v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    v14 = a1 + 168;
    v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  v43 = 0u;
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = -1;
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v48 = 1;
  v49 = 0uLL;
  v50 = 0uLL;
  v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,4ul>::addUninitialized(a1);
  v17 = v44;
  *(_QWORD *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  v19 = *(_QWORD *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::init(v20, a1, v51);
  v42 = *(_QWORD *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 160);
  if ((v21 & 0x3F) != 0)
    v23 = (v21 >> 6) + 1;
  else
    v23 = v21 >> 6;
  *(_QWORD *)(a1 + 160) = v21;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    v24 = 63;
    v25 = *(_QWORD *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63)
      v24 = ~(-1 << v25);
    if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      v26 = a1 + 144;
    else
      v26 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(v26 + 8 * *(_QWORD *)(a1 + 128) - 8) &= v24;
  }
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(a1 + 208);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(a1 + 208) = v27;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
      v32 = a1 + 192;
    else
      v32 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(a1 + 176) - 8) &= v30;
  }
  v15 = v42;
  v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(_BYTE *)(a1 + 232))
    return;
  v33 = *(_QWORD *)(a1 + 176);
  v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if ((v34 & 1) != 0)
      v35 = (_QWORD *)(a1 + 192);
    else
      v35 = *(_QWORD **)(a1 + 200);
    v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37)
        return;
    }
LABEL_59:
    v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((_BYTE *)v41 + 86))
      re::ecs2::System::queueToRun(v41, 0.0);
    return;
  }
  if ((v34 & 1) != 0)
  {
    v36 = (uint64_t *)(a1 + 192);
    if (!v33)
      return;
  }
  else
  {
    v36 = *(uint64_t **)(a1 + 200);
    if (!v33)
      return;
  }
  v38 = 0;
  v39 = 8 * v33;
  do
  {
    v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38)
    goto LABEL_59;
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v5 = 8 * a4;
    do
    {
      v6 = *a3;
      v7 = *(_QWORD *)(*a3 + 56);
      if (v7)
      {

        *(_QWORD *)(v6 + 56) = 0;
      }
      *(_QWORD *)(v6 + 64) = 0;
      v8 = *(_QWORD *)(v6 + 80);
      if (v8)
      {

        *(_QWORD *)(v6 + 80) = 0;
      }
      *(_QWORD *)(v6 + 88) = 0;
      *(_DWORD *)(v6 + 104) = 65544;
      *(_WORD *)(v6 + 108) = 4;
      *(_QWORD *)(v6 + 112) = 0x400000003F000000;
      *(_WORD *)(v6 + 120) = 257;
      ++a3;
      *(_BYTE *)(v6 + 122) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED63000;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED63058;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED630B0;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED63108;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED63000;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED63058;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED630B0;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED63108;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED63000;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED63000;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED63058;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED63058;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED630B0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED630B0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED63108;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED63108;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>*,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

_QWORD *re::make::shared::object<re::ecs2::PrimitiveConeSystem>(re *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  _QWORD *result;

  v2 = re::globalAllocators(a1);
  v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 384, 8);
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveConeComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *result = &off_24ED63160;
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveConeComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD v9[2];
  void *v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System(a1, 1, 1);
  *v2 = off_24ED63200;
  v2[13] = off_24ED63270;
  v3 = v2 + 13;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(_QWORD *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = a1;
  *(_QWORD *)(a1 + 368) = v3;
  *(_BYTE *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((_QWORD *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitiveConeSystem::~PrimitiveConeSystem(re::ecs2::PrimitiveConeSystem *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED63200;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED63270;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED63200;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED63270;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::PrimitiveConeSystem::typeInfo(re::ecs2::PrimitiveConeSystem *this)
{
  return re::ecs2::introspect_PrimitiveConeSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveConeComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitiveConeComponent>::addScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>,re::Slice<re::ecs2::PrimitiveConeComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>*,re::Slice<re::ecs2::PrimitiveConeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>,re::Slice<re::ecs2::PrimitiveConeComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveConeComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveConeComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_QWORD *)&v5 = a1 + 104;
  *((_QWORD *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>::deactivateComponent;
  v6 = 0;
  v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>,re::Slice<re::ecs2::PrimitiveConeComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>*,re::Slice<re::ecs2::PrimitiveConeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>,re::Slice<re::ecs2::PrimitiveConeComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveConeComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveConeComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[2];

  v4[0] = a3;
  v4[1] = a4;
  if (a2)
    re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>::dependsOnComponents(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveConeComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  re **v24;
  uint64_t *v25;
  uint64_t *v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40));
  v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v37, a5, 0);
  v51 = a4;
  v52 = v37;
  v53 = v38;
  if (v37 != a5 || (unsigned __int16)v38 != 0xFFFFLL || (v38 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v52);
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      if (v13)
      {
        *(_OWORD *)(v12 + 96) = *(_OWORD *)(v12 + 28);
        v14 = *(_BYTE *)(v12 + 44);
        *(_BYTE *)(v12 + 112) = v14;
        v15 = *(_BYTE *)(v12 + 45);
        *(_BYTE *)(v12 + 113) = v15;
        re::MeshPrimitiveProvider::makeDescriptor((_anonymous_namespace_ *)(v12 + 28), v14, v15, (uint64_t)&v37);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v8 + 40))(&v35, v8, &v37);
        v16 = *(_OWORD *)(v12 + 48);
        *(_OWORD *)(v12 + 48) = v35;
        v35 = v16;
        v17 = *(_QWORD *)(v12 + 64);
        *(_QWORD *)(v12 + 64) = v36;
        v36 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
        re::AssetHandle::loadNow(*(_QWORD *)(v12 + 56), 0);
        v18 = *(_QWORD *)(v12 + 56);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          v21 = *(_QWORD **)(v13 + 176);
          if (v21 && v21[5] != *(_QWORD *)(v12 + 56))
          {
            re::AssetHandle::operator=(v21 + 4, (uint64_t *)(v12 + 48));
            re::ecs2::Component::markDirty(v21);
          }
          v20 = (unint64_t *)(a3 + 48);
          if (*(_BYTE *)(v12 + 46))
          {
            v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              v20 = (unint64_t *)(a3 + 48);
              if (!*(_QWORD *)(v12 + 80))
              {
                v23 = (_QWORD *)v22;
                v24 = re::internal::buildCollisionShape((float *)(v12 + 28));
                v25 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v24);
                (*(void (**)(__int128 *__return_ptr, uint64_t, re **, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 416))(&v35, v8, v24, v25, 0, 2, 0);
                v27 = *(_OWORD *)(v12 + 72);
                v26 = (uint64_t *)(v12 + 72);
                *(_OWORD *)v26 = v35;
                v35 = v27;
                v28 = v26[2];
                v26[2] = v36;
                v36 = v28;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
                re::AssetHandle::operator=(v23 + 4, v26);
                re::ecs2::Component::markDirty(v23);
                v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        v29 = v51;
        v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v29, v30, *v20);
        if ((_QWORD)v49)
        {
          if ((BYTE8(v49) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v49 + 40))();
          v49 = 0u;
          v50 = 0u;
        }
        if (v44)
        {
          if (v48)
            (*(void (**)(void))(*(_QWORD *)v44 + 40))();
          v48 = 0;
          v45 = 0;
          v46 = 0;
          v44 = 0;
          ++v47;
        }
        if (v39)
        {
          if (v43)
            (*(void (**)(void))(*(_QWORD *)v39 + 40))();
          v43 = 0;
          v40 = 0;
          v41 = 0;
          v39 = 0;
          ++v42;
        }
        if (v37 && (v38 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v37 + 40))();
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v52);
    }
    while (v52 != a5 || (unsigned __int16)v53 != 0xFFFF || WORD1(v53) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveConeComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveConeComponent>::processUpdatingComponents()
{
  return 0;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveConeComponent>::addScene(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  re::ecs2::System *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = a2;
  v4 = (_anonymous_namespace_ *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(a1 + 144);
    else
      v7 = *(_QWORD **)(a1 + 152);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(a1 + 144);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v8 = *(uint64_t **)(a1 + 152);
    if (!v5)
      goto LABEL_17;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(_QWORD *)&v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    v14 = a1 + 168;
    v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  v43 = 0u;
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = -1;
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v48 = 1;
  v49 = 0uLL;
  v50 = 0uLL;
  v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,4ul>::addUninitialized(a1);
  v17 = v44;
  *(_QWORD *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  v19 = *(_QWORD *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::init(v20, a1, v51);
  v42 = *(_QWORD *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 160);
  if ((v21 & 0x3F) != 0)
    v23 = (v21 >> 6) + 1;
  else
    v23 = v21 >> 6;
  *(_QWORD *)(a1 + 160) = v21;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    v24 = 63;
    v25 = *(_QWORD *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63)
      v24 = ~(-1 << v25);
    if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      v26 = a1 + 144;
    else
      v26 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(v26 + 8 * *(_QWORD *)(a1 + 128) - 8) &= v24;
  }
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(a1 + 208);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(a1 + 208) = v27;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
      v32 = a1 + 192;
    else
      v32 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(a1 + 176) - 8) &= v30;
  }
  v15 = v42;
  v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(_BYTE *)(a1 + 232))
    return;
  v33 = *(_QWORD *)(a1 + 176);
  v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if ((v34 & 1) != 0)
      v35 = (_QWORD *)(a1 + 192);
    else
      v35 = *(_QWORD **)(a1 + 200);
    v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37)
        return;
    }
LABEL_59:
    v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((_BYTE *)v41 + 86))
      re::ecs2::System::queueToRun(v41, 0.0);
    return;
  }
  if ((v34 & 1) != 0)
  {
    v36 = (uint64_t *)(a1 + 192);
    if (!v33)
      return;
  }
  else
  {
    v36 = *(uint64_t **)(a1 + 200);
    if (!v33)
      return;
  }
  v38 = 0;
  v39 = 8 * v33;
  do
  {
    v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38)
    goto LABEL_59;
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v5 = 8 * a4;
    do
    {
      v6 = *a3;
      v7 = *(_QWORD *)(*a3 + 48);
      if (v7)
      {

        *(_QWORD *)(v6 + 48) = 0;
      }
      *(_QWORD *)(v6 + 56) = 0;
      v8 = *(_QWORD *)(v6 + 72);
      if (v8)
      {

        *(_QWORD *)(v6 + 72) = 0;
      }
      *(_QWORD *)(v6 + 80) = 0;
      *(_DWORD *)(v6 + 96) = 65544;
      *(_QWORD *)(v6 + 100) = 0x3F0000003F800000;
      ++a3;
      *(_DWORD *)(v6 + 108) = 65793;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED632D8;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED63330;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED63388;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED633E0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED632D8;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED63330;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED63388;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED633E0;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED632D8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED632D8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED63330;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED63330;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED63388;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED63388;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED633E0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED633E0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>,re::Slice<re::ecs2::PrimitiveConeComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>*,re::Slice<re::ecs2::PrimitiveConeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>,re::Slice<re::ecs2::PrimitiveConeComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveConeComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

_QWORD *re::make::shared::object<re::ecs2::PrimitiveCylinderSystem>(re *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  _QWORD *result;

  v2 = re::globalAllocators(a1);
  v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 384, 8);
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCylinderComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *result = &off_24ED63438;
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCylinderComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD v9[2];
  void *v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System(a1, 1, 1);
  *v2 = off_24ED634D8;
  v2[13] = off_24ED63548;
  v3 = v2 + 13;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(_QWORD *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = a1;
  *(_QWORD *)(a1 + 368) = v3;
  *(_BYTE *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((_QWORD *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitiveCylinderSystem::~PrimitiveCylinderSystem(re::ecs2::PrimitiveCylinderSystem *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED634D8;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED63548;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED634D8;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED63548;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::PrimitiveCylinderSystem::typeInfo(re::ecs2::PrimitiveCylinderSystem *this)
{
  return re::ecs2::introspect_PrimitiveCylinderSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCylinderComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitiveCylinderComponent>::addScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>,re::Slice<re::ecs2::PrimitiveCylinderComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>*,re::Slice<re::ecs2::PrimitiveCylinderComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>,re::Slice<re::ecs2::PrimitiveCylinderComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveCylinderComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCylinderComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_QWORD *)&v5 = a1 + 104;
  *((_QWORD *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>::deactivateComponent;
  v6 = 0;
  v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>,re::Slice<re::ecs2::PrimitiveCylinderComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>*,re::Slice<re::ecs2::PrimitiveCylinderComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>,re::Slice<re::ecs2::PrimitiveCylinderComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveCylinderComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCylinderComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[2];

  v4[0] = a3;
  v4[1] = a4;
  if (a2)
    re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>::dependsOnComponents(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveCylinderComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  re **v24;
  uint64_t *v25;
  uint64_t *v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40));
  v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v37, a5, 0);
  v51 = a4;
  v52 = v37;
  v53 = v38;
  if (v37 != a5 || (unsigned __int16)v38 != 0xFFFFLL || (v38 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v52);
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      if (v13)
      {
        *(_OWORD *)(v12 + 104) = *(_OWORD *)(v12 + 28);
        *(_QWORD *)(v12 + 117) = *(_QWORD *)(v12 + 41);
        v14 = *(_BYTE *)(v12 + 52);
        *(_BYTE *)(v12 + 128) = v14;
        v15 = *(_BYTE *)(v12 + 53);
        *(_BYTE *)(v12 + 129) = v15;
        re::MeshPrimitiveProvider::makeDescriptor(v12 + 28, v14, v15, (uint64_t)&v37);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v8 + 40))(&v35, v8, &v37);
        v16 = *(_OWORD *)(v12 + 56);
        *(_OWORD *)(v12 + 56) = v35;
        v35 = v16;
        v17 = *(_QWORD *)(v12 + 72);
        *(_QWORD *)(v12 + 72) = v36;
        v36 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
        re::AssetHandle::loadNow(*(_QWORD *)(v12 + 64), 0);
        v18 = *(_QWORD *)(v12 + 64);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          v21 = *(_QWORD **)(v13 + 176);
          if (v21 && v21[5] != *(_QWORD *)(v12 + 64))
          {
            re::AssetHandle::operator=(v21 + 4, (uint64_t *)(v12 + 56));
            re::ecs2::Component::markDirty(v21);
          }
          v20 = (unint64_t *)(a3 + 48);
          if (*(_BYTE *)(v12 + 54))
          {
            v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              v20 = (unint64_t *)(a3 + 48);
              if (!*(_QWORD *)(v12 + 88))
              {
                v23 = (_QWORD *)v22;
                v24 = re::internal::buildCollisionShape((float *)(v12 + 28));
                v25 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v24);
                (*(void (**)(__int128 *__return_ptr, uint64_t, re **, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 416))(&v35, v8, v24, v25, 0, 2, 0);
                v27 = *(_OWORD *)(v12 + 80);
                v26 = (uint64_t *)(v12 + 80);
                *(_OWORD *)v26 = v35;
                v35 = v27;
                v28 = v26[2];
                v26[2] = v36;
                v36 = v28;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
                re::AssetHandle::operator=(v23 + 4, v26);
                re::ecs2::Component::markDirty(v23);
                v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        v29 = v51;
        v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v29, v30, *v20);
        if ((_QWORD)v49)
        {
          if ((BYTE8(v49) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v49 + 40))();
          v49 = 0u;
          v50 = 0u;
        }
        if (v44)
        {
          if (v48)
            (*(void (**)(void))(*(_QWORD *)v44 + 40))();
          v48 = 0;
          v45 = 0;
          v46 = 0;
          v44 = 0;
          ++v47;
        }
        if (v39)
        {
          if (v43)
            (*(void (**)(void))(*(_QWORD *)v39 + 40))();
          v43 = 0;
          v40 = 0;
          v41 = 0;
          v39 = 0;
          ++v42;
        }
        if (v37 && (v38 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v37 + 40))();
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v52);
    }
    while (v52 != a5 || (unsigned __int16)v53 != 0xFFFF || WORD1(v53) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveCylinderComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveCylinderComponent>::processUpdatingComponents()
{
  return 0;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveCylinderComponent>::addScene(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  re::ecs2::System *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = a2;
  v4 = (_anonymous_namespace_ *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(a1 + 144);
    else
      v7 = *(_QWORD **)(a1 + 152);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(a1 + 144);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v8 = *(uint64_t **)(a1 + 152);
    if (!v5)
      goto LABEL_17;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(_QWORD *)&v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    v14 = a1 + 168;
    v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  v43 = 0u;
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = -1;
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v48 = 1;
  v49 = 0uLL;
  v50 = 0uLL;
  v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,4ul>::addUninitialized(a1);
  v17 = v44;
  *(_QWORD *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  v19 = *(_QWORD *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::init(v20, a1, v51);
  v42 = *(_QWORD *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 160);
  if ((v21 & 0x3F) != 0)
    v23 = (v21 >> 6) + 1;
  else
    v23 = v21 >> 6;
  *(_QWORD *)(a1 + 160) = v21;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    v24 = 63;
    v25 = *(_QWORD *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63)
      v24 = ~(-1 << v25);
    if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      v26 = a1 + 144;
    else
      v26 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(v26 + 8 * *(_QWORD *)(a1 + 128) - 8) &= v24;
  }
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(a1 + 208);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(a1 + 208) = v27;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
      v32 = a1 + 192;
    else
      v32 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(a1 + 176) - 8) &= v30;
  }
  v15 = v42;
  v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(_BYTE *)(a1 + 232))
    return;
  v33 = *(_QWORD *)(a1 + 176);
  v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if ((v34 & 1) != 0)
      v35 = (_QWORD *)(a1 + 192);
    else
      v35 = *(_QWORD **)(a1 + 200);
    v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37)
        return;
    }
LABEL_59:
    v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((_BYTE *)v41 + 86))
      re::ecs2::System::queueToRun(v41, 0.0);
    return;
  }
  if ((v34 & 1) != 0)
  {
    v36 = (uint64_t *)(a1 + 192);
    if (!v33)
      return;
  }
  else
  {
    v36 = *(uint64_t **)(a1 + 200);
    if (!v33)
      return;
  }
  v38 = 0;
  v39 = 8 * v33;
  do
  {
    v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38)
    goto LABEL_59;
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v5 = 8 * a4;
    do
    {
      v6 = *a3;
      v7 = *(_QWORD *)(*a3 + 56);
      if (v7)
      {

        *(_QWORD *)(v6 + 56) = 0;
      }
      *(_QWORD *)(v6 + 64) = 0;
      v8 = *(_QWORD *)(v6 + 80);
      if (v8)
      {

        *(_QWORD *)(v6 + 80) = 0;
      }
      *(_QWORD *)(v6 + 88) = 0;
      *(_DWORD *)(v6 + 104) = 65544;
      *(_QWORD *)(v6 + 108) = 0x3F0000003F800000;
      *(_QWORD *)(v6 + 116) = 0x10101013F000000;
      ++a3;
      *(_BYTE *)(v6 + 124) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED635B0;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED63608;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED63660;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED636B8;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED635B0;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED63608;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED63660;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED636B8;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED635B0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED635B0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED63608;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED63608;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED63660;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED63660;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED636B8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED636B8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>,re::Slice<re::ecs2::PrimitiveCylinderComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>*,re::Slice<re::ecs2::PrimitiveCylinderComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>,re::Slice<re::ecs2::PrimitiveCylinderComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveCylinderComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

_QWORD *re::make::shared::object<re::ecs2::PrimitivePlaneSystem>(re *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  _QWORD *result;

  v2 = re::globalAllocators(a1);
  v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 384, 8);
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePlaneComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *result = &off_24ED63710;
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePlaneComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD v9[2];
  void *v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System(a1, 1, 1);
  *v2 = off_24ED637B0;
  v2[13] = off_24ED63820;
  v3 = v2 + 13;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(_QWORD *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = a1;
  *(_QWORD *)(a1 + 368) = v3;
  *(_BYTE *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((_QWORD *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitivePlaneSystem::~PrimitivePlaneSystem(re::ecs2::PrimitivePlaneSystem *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED637B0;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED63820;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED637B0;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED63820;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::PrimitivePlaneSystem::typeInfo(re::ecs2::PrimitivePlaneSystem *this)
{
  return re::ecs2::introspect_PrimitivePlaneSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePlaneComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitivePlaneComponent>::addScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>,re::Slice<re::ecs2::PrimitivePlaneComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>*,re::Slice<re::ecs2::PrimitivePlaneComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>,re::Slice<re::ecs2::PrimitivePlaneComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitivePlaneComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePlaneComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_QWORD *)&v5 = a1 + 104;
  *((_QWORD *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>::deactivateComponent;
  v6 = 0;
  v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>,re::Slice<re::ecs2::PrimitivePlaneComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>*,re::Slice<re::ecs2::PrimitivePlaneComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>,re::Slice<re::ecs2::PrimitivePlaneComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitivePlaneComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePlaneComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[2];

  v4[0] = a3;
  v4[1] = a4;
  if (a2)
    re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>::dependsOnComponents(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitivePlaneComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  re **v24;
  uint64_t *v25;
  uint64_t *v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40));
  v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v37, a5, 0);
  v51 = a4;
  v52 = v37;
  v53 = v38;
  if (v37 != a5 || (unsigned __int16)v38 != 0xFFFFLL || (v38 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v52);
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      if (v13)
      {
        *(_OWORD *)(v12 + 112) = *(_OWORD *)(v12 + 28);
        *(_OWORD *)(v12 + 124) = *(_OWORD *)(v12 + 40);
        v14 = *(_BYTE *)(v12 + 56);
        *(_BYTE *)(v12 + 140) = v14;
        v15 = *(_BYTE *)(v12 + 57);
        *(_BYTE *)(v12 + 141) = v15;
        re::MeshPrimitiveProvider::makeDescriptor(v12 + 28, v14, v15, (uint64_t)&v37);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v8 + 40))(&v35, v8, &v37);
        v16 = *(_OWORD *)(v12 + 64);
        *(_OWORD *)(v12 + 64) = v35;
        v35 = v16;
        v17 = *(_QWORD *)(v12 + 80);
        *(_QWORD *)(v12 + 80) = v36;
        v36 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
        re::AssetHandle::loadNow(*(_QWORD *)(v12 + 72), 0);
        v18 = *(_QWORD *)(v12 + 72);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          v21 = *(_QWORD **)(v13 + 176);
          if (v21 && v21[5] != *(_QWORD *)(v12 + 72))
          {
            re::AssetHandle::operator=(v21 + 4, (uint64_t *)(v12 + 64));
            re::ecs2::Component::markDirty(v21);
          }
          v20 = (unint64_t *)(a3 + 48);
          if (*(_BYTE *)(v12 + 58))
          {
            v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              v20 = (unint64_t *)(a3 + 48);
              if (!*(_QWORD *)(v12 + 96))
              {
                v23 = (_QWORD *)v22;
                v24 = re::internal::buildCollisionShape((re *)(v12 + 28));
                v25 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v24);
                (*(void (**)(__int128 *__return_ptr, uint64_t, re **, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 416))(&v35, v8, v24, v25, 0, 2, 0);
                v27 = *(_OWORD *)(v12 + 88);
                v26 = (uint64_t *)(v12 + 88);
                *(_OWORD *)v26 = v35;
                v35 = v27;
                v28 = v26[2];
                v26[2] = v36;
                v36 = v28;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
                re::AssetHandle::operator=(v23 + 4, v26);
                re::ecs2::Component::markDirty(v23);
                v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        v29 = v51;
        v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v29, v30, *v20);
        if ((_QWORD)v49)
        {
          if ((BYTE8(v49) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v49 + 40))();
          v49 = 0u;
          v50 = 0u;
        }
        if (v44)
        {
          if (v48)
            (*(void (**)(void))(*(_QWORD *)v44 + 40))();
          v48 = 0;
          v45 = 0;
          v46 = 0;
          v44 = 0;
          ++v47;
        }
        if (v39)
        {
          if (v43)
            (*(void (**)(void))(*(_QWORD *)v39 + 40))();
          v43 = 0;
          v40 = 0;
          v41 = 0;
          v39 = 0;
          ++v42;
        }
        if (v37 && (v38 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v37 + 40))();
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v52);
    }
    while (v52 != a5 || (unsigned __int16)v53 != 0xFFFF || WORD1(v53) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitivePlaneComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitivePlaneComponent>::processUpdatingComponents()
{
  return 0;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitivePlaneComponent>::addScene(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  re::ecs2::System *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = a2;
  v4 = (_anonymous_namespace_ *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(a1 + 144);
    else
      v7 = *(_QWORD **)(a1 + 152);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(a1 + 144);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v8 = *(uint64_t **)(a1 + 152);
    if (!v5)
      goto LABEL_17;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(_QWORD *)&v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    v14 = a1 + 168;
    v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  v43 = 0u;
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = -1;
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v48 = 1;
  v49 = 0uLL;
  v50 = 0uLL;
  v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,4ul>::addUninitialized(a1);
  v17 = v44;
  *(_QWORD *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  v19 = *(_QWORD *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::init(v20, a1, v51);
  v42 = *(_QWORD *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 160);
  if ((v21 & 0x3F) != 0)
    v23 = (v21 >> 6) + 1;
  else
    v23 = v21 >> 6;
  *(_QWORD *)(a1 + 160) = v21;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    v24 = 63;
    v25 = *(_QWORD *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63)
      v24 = ~(-1 << v25);
    if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      v26 = a1 + 144;
    else
      v26 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(v26 + 8 * *(_QWORD *)(a1 + 128) - 8) &= v24;
  }
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(a1 + 208);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(a1 + 208) = v27;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
      v32 = a1 + 192;
    else
      v32 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(a1 + 176) - 8) &= v30;
  }
  v15 = v42;
  v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(_BYTE *)(a1 + 232))
    return;
  v33 = *(_QWORD *)(a1 + 176);
  v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if ((v34 & 1) != 0)
      v35 = (_QWORD *)(a1 + 192);
    else
      v35 = *(_QWORD **)(a1 + 200);
    v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37)
        return;
    }
LABEL_59:
    v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((_BYTE *)v41 + 86))
      re::ecs2::System::queueToRun(v41, 0.0);
    return;
  }
  if ((v34 & 1) != 0)
  {
    v36 = (uint64_t *)(a1 + 192);
    if (!v33)
      return;
  }
  else
  {
    v36 = *(uint64_t **)(a1 + 200);
    if (!v33)
      return;
  }
  v38 = 0;
  v39 = 8 * v33;
  do
  {
    v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38)
    goto LABEL_59;
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a4)
  {
    v5 = 8 * a4;
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      v11 = *a3;
      v12 = *(_QWORD *)(*a3 + 64);
      if (v12)
      {

        *(_QWORD *)(v11 + 64) = 0;
      }
      *(_QWORD *)(v11 + 72) = 0;
      v13 = *(_QWORD *)(v11 + 88);
      if (v13)
      {

        *(_QWORD *)(v11 + 88) = 0;
      }
      *(_QWORD *)(v11 + 96) = 0;
      *(_DWORD *)(v11 + 112) = 65537;
      *(_WORD *)(v11 + 116) = 0;
      *(_QWORD *)(v11 + 120) = _D8;
      *(_DWORD *)(v11 + 128) = 0;
      *(_WORD *)(v11 + 132) = 257;
      ++a3;
      *(_DWORD *)(v11 + 136) = 2;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED63888;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED638E0;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED63938;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED63990;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED63888;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED638E0;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED63938;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED63990;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED63888;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED63888;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED638E0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED638E0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED63938;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED63938;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED63990;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED63990;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>,re::Slice<re::ecs2::PrimitivePlaneComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>*,re::Slice<re::ecs2::PrimitivePlaneComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>,re::Slice<re::ecs2::PrimitivePlaneComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitivePlaneComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

_QWORD *re::make::shared::object<re::ecs2::PrimitivePyramidSystem>(re *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  _QWORD *result;

  v2 = re::globalAllocators(a1);
  v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 384, 8);
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePyramidComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *result = &off_24ED639E8;
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePyramidComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD v9[2];
  void *v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System(a1, 1, 1);
  *v2 = off_24ED63A88;
  v2[13] = off_24ED63AF8;
  v3 = v2 + 13;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(_QWORD *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = a1;
  *(_QWORD *)(a1 + 368) = v3;
  *(_BYTE *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((_QWORD *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitivePyramidSystem::~PrimitivePyramidSystem(re::ecs2::PrimitivePyramidSystem *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED63A88;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED63AF8;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED63A88;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED63AF8;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::PrimitivePyramidSystem::typeInfo(re::ecs2::PrimitivePyramidSystem *this)
{
  return re::ecs2::introspect_PrimitivePyramidSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePyramidComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitivePyramidComponent>::addScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>,re::Slice<re::ecs2::PrimitivePyramidComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>*,re::Slice<re::ecs2::PrimitivePyramidComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>,re::Slice<re::ecs2::PrimitivePyramidComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitivePyramidComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePyramidComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_QWORD *)&v5 = a1 + 104;
  *((_QWORD *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>::deactivateComponent;
  v6 = 0;
  v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>,re::Slice<re::ecs2::PrimitivePyramidComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>*,re::Slice<re::ecs2::PrimitivePyramidComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>,re::Slice<re::ecs2::PrimitivePyramidComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitivePyramidComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePyramidComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[2];

  v4[0] = a3;
  v4[1] = a4;
  if (a2)
    re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>::dependsOnComponents(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitivePyramidComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  __n128 v27;
  _QWORD *v28;
  re **v29;
  uint64_t *v30;
  uint64_t *v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40));
  v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v42, a5, 0);
  v56 = a4;
  v57 = v42;
  v58 = v43;
  if (v42 != a5 || (unsigned __int16)v43 != 0xFFFFLL || (v43 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v57);
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      if (v13)
      {
        *(_OWORD *)(v12 + 104) = *(_OWORD *)(v12 + 28);
        *(_DWORD *)(v12 + 119) = *(_DWORD *)(v12 + 43);
        v14 = *(_BYTE *)(v12 + 48);
        *(_BYTE *)(v12 + 124) = v14;
        v15 = *(_BYTE *)(v12 + 49);
        *(_BYTE *)(v12 + 125) = v15;
        re::MeshPrimitiveProvider::makeDescriptor(v12 + 28, v14, v15, (uint64_t)&v42);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v8 + 40))(&v40, v8, &v42);
        v16 = *(_OWORD *)(v12 + 56);
        *(_OWORD *)(v12 + 56) = v40;
        v40 = v16;
        v17 = *(_QWORD *)(v12 + 72);
        *(_QWORD *)(v12 + 72) = v41;
        v41 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v40);
        re::AssetHandle::loadNow(*(_QWORD *)(v12 + 64), 0);
        v18 = *(_QWORD *)(v12 + 64);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          v21 = *(_QWORD **)(v13 + 176);
          if (v21 && v21[5] != *(_QWORD *)(v12 + 64))
          {
            re::AssetHandle::operator=(v21 + 4, (uint64_t *)(v12 + 56));
            re::ecs2::Component::markDirty(v21);
          }
          v20 = (unint64_t *)(a3 + 48);
          if (*(_BYTE *)(v12 + 50))
          {
            v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              v20 = (unint64_t *)(a3 + 48);
              if (!*(_QWORD *)(v12 + 88))
              {
                v28 = (_QWORD *)v22;
                v29 = re::internal::buildCollisionShape(v12 + 28, v23, v24, v25, v26, v27);
                v30 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v29);
                (*(void (**)(__int128 *__return_ptr, uint64_t, re **, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 416))(&v40, v8, v29, v30, 0, 2, 0);
                v32 = *(_OWORD *)(v12 + 80);
                v31 = (uint64_t *)(v12 + 80);
                *(_OWORD *)v31 = v40;
                v40 = v32;
                v33 = v31[2];
                v31[2] = v41;
                v41 = v33;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v40);
                re::AssetHandle::operator=(v28 + 4, v31);
                re::ecs2::Component::markDirty(v28);
                v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        v34 = v56;
        v35 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v57);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v34, v35, *v20);
        if ((_QWORD)v54)
        {
          if ((BYTE8(v54) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v54 + 40))();
          v54 = 0u;
          v55 = 0u;
        }
        if (v49)
        {
          if (v53)
            (*(void (**)(void))(*(_QWORD *)v49 + 40))();
          v53 = 0;
          v50 = 0;
          v51 = 0;
          v49 = 0;
          ++v52;
        }
        if (v44)
        {
          if (v48)
            (*(void (**)(void))(*(_QWORD *)v44 + 40))();
          v48 = 0;
          v45 = 0;
          v46 = 0;
          v44 = 0;
          ++v47;
        }
        if (v42 && (v43 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v42 + 40))();
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v57);
    }
    while (v57 != a5 || (unsigned __int16)v58 != 0xFFFF || WORD1(v58) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitivePyramidComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitivePyramidComponent>::processUpdatingComponents()
{
  return 0;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitivePyramidComponent>::addScene(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  re::ecs2::System *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = a2;
  v4 = (_anonymous_namespace_ *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(a1 + 144);
    else
      v7 = *(_QWORD **)(a1 + 152);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(a1 + 144);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v8 = *(uint64_t **)(a1 + 152);
    if (!v5)
      goto LABEL_17;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(_QWORD *)&v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    v14 = a1 + 168;
    v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  v43 = 0u;
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = -1;
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v48 = 1;
  v49 = 0uLL;
  v50 = 0uLL;
  v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,4ul>::addUninitialized(a1);
  v17 = v44;
  *(_QWORD *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  v19 = *(_QWORD *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::init(v20, a1, v51);
  v42 = *(_QWORD *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 160);
  if ((v21 & 0x3F) != 0)
    v23 = (v21 >> 6) + 1;
  else
    v23 = v21 >> 6;
  *(_QWORD *)(a1 + 160) = v21;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    v24 = 63;
    v25 = *(_QWORD *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63)
      v24 = ~(-1 << v25);
    if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      v26 = a1 + 144;
    else
      v26 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(v26 + 8 * *(_QWORD *)(a1 + 128) - 8) &= v24;
  }
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(a1 + 208);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(a1 + 208) = v27;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
      v32 = a1 + 192;
    else
      v32 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(a1 + 176) - 8) &= v30;
  }
  v15 = v42;
  v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(_BYTE *)(a1 + 232))
    return;
  v33 = *(_QWORD *)(a1 + 176);
  v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if ((v34 & 1) != 0)
      v35 = (_QWORD *)(a1 + 192);
    else
      v35 = *(_QWORD **)(a1 + 200);
    v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37)
        return;
    }
LABEL_59:
    v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((_BYTE *)v41 + 86))
      re::ecs2::System::queueToRun(v41, 0.0);
    return;
  }
  if ((v34 & 1) != 0)
  {
    v36 = (uint64_t *)(a1 + 192);
    if (!v33)
      return;
  }
  else
  {
    v36 = *(uint64_t **)(a1 + 200);
    if (!v33)
      return;
  }
  v38 = 0;
  v39 = 8 * v33;
  do
  {
    v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38)
    goto LABEL_59;
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a4)
  {
    v5 = 8 * a4;
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      v11 = *a3;
      v12 = *(_QWORD *)(*a3 + 56);
      if (v12)
      {

        *(_QWORD *)(v11 + 56) = 0;
      }
      *(_QWORD *)(v11 + 64) = 0;
      v13 = *(_QWORD *)(v11 + 80);
      if (v13)
      {

        *(_QWORD *)(v11 + 80) = 0;
      }
      *(_QWORD *)(v11 + 88) = 0;
      *(_WORD *)(v11 + 104) = 1;
      *(_QWORD *)(v11 + 108) = _D8;
      *(_DWORD *)(v11 + 116) = 1065353216;
      *(_WORD *)(v11 + 120) = 257;
      ++a3;
      *(_BYTE *)(v11 + 122) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED63B60;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED63BB8;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED63C10;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED63C68;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED63B60;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED63BB8;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED63C10;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED63C68;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED63B60;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED63B60;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED63BB8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED63BB8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED63C10;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED63C10;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED63C68;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED63C68;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>,re::Slice<re::ecs2::PrimitivePyramidComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>*,re::Slice<re::ecs2::PrimitivePyramidComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>,re::Slice<re::ecs2::PrimitivePyramidComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitivePyramidComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

_QWORD *re::make::shared::object<re::ecs2::PrimitiveSphereSystem>(re *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  _QWORD *result;

  v2 = re::globalAllocators(a1);
  v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 384, 8);
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveSphereComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *result = &off_24ED63CC0;
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveSphereComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD v9[2];
  void *v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System(a1, 1, 1);
  *v2 = off_24ED63D60;
  v2[13] = off_24ED63DD0;
  v3 = v2 + 13;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(_QWORD *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = a1;
  *(_QWORD *)(a1 + 368) = v3;
  *(_BYTE *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((_QWORD *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitiveSphereSystem::~PrimitiveSphereSystem(re::ecs2::PrimitiveSphereSystem *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED63D60;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED63DD0;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED63D60;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED63DD0;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::PrimitiveSphereSystem::typeInfo(re::ecs2::PrimitiveSphereSystem *this)
{
  return re::ecs2::introspect_PrimitiveSphereSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveSphereComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitiveSphereComponent>::addScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>,re::Slice<re::ecs2::PrimitiveSphereComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>*,re::Slice<re::ecs2::PrimitiveSphereComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>,re::Slice<re::ecs2::PrimitiveSphereComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveSphereComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveSphereComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_QWORD *)&v5 = a1 + 104;
  *((_QWORD *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>::deactivateComponent;
  v6 = 0;
  v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>,re::Slice<re::ecs2::PrimitiveSphereComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>*,re::Slice<re::ecs2::PrimitiveSphereComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>,re::Slice<re::ecs2::PrimitiveSphereComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveSphereComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveSphereComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[2];

  v4[0] = a3;
  v4[1] = a4;
  if (a2)
    re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>::dependsOnComponents(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveSphereComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  re **v24;
  uint64_t *v25;
  uint64_t *v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40));
  v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v37, a5, 0);
  v51 = a4;
  v52 = v37;
  v53 = v38;
  if (v37 != a5 || (unsigned __int16)v38 != 0xFFFFLL || (v38 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v52);
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      if (v13)
      {
        *(_QWORD *)(v12 + 96) = *(_QWORD *)(v12 + 28);
        *(_DWORD *)(v12 + 103) = *(_DWORD *)(v12 + 35);
        v14 = *(unsigned __int8 *)(v12 + 40);
        *(_BYTE *)(v12 + 108) = v14;
        v15 = *(unsigned __int8 *)(v12 + 41);
        *(_BYTE *)(v12 + 109) = v15;
        re::MeshPrimitiveProvider::makeDescriptor(v12 + 28, v14, v15, (uint64_t)&v37);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v8 + 40))(&v35, v8, &v37);
        v16 = *(_OWORD *)(v12 + 48);
        *(_OWORD *)(v12 + 48) = v35;
        v35 = v16;
        v17 = *(_QWORD *)(v12 + 64);
        *(_QWORD *)(v12 + 64) = v36;
        v36 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
        re::AssetHandle::loadNow(*(_QWORD *)(v12 + 56), 0);
        v18 = *(_QWORD *)(v12 + 56);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          v21 = *(_QWORD **)(v13 + 176);
          if (v21 && v21[5] != *(_QWORD *)(v12 + 56))
          {
            re::AssetHandle::operator=(v21 + 4, (uint64_t *)(v12 + 48));
            re::ecs2::Component::markDirty(v21);
          }
          v20 = (unint64_t *)(a3 + 48);
          if (*(_BYTE *)(v12 + 42))
          {
            v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              v20 = (unint64_t *)(a3 + 48);
              if (!*(_QWORD *)(v12 + 80))
              {
                v23 = (_QWORD *)v22;
                v24 = re::internal::buildCollisionShape((float *)(v12 + 28));
                v25 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v24);
                (*(void (**)(__int128 *__return_ptr, uint64_t, re **, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 416))(&v35, v8, v24, v25, 0, 2, 0);
                v27 = *(_OWORD *)(v12 + 72);
                v26 = (uint64_t *)(v12 + 72);
                *(_OWORD *)v26 = v35;
                v35 = v27;
                v28 = v26[2];
                v26[2] = v36;
                v36 = v28;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
                re::AssetHandle::operator=(v23 + 4, v26);
                re::ecs2::Component::markDirty(v23);
                v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        v29 = v51;
        v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v29, v30, *v20);
        if ((_QWORD)v49)
        {
          if ((BYTE8(v49) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v49 + 40))();
          v49 = 0u;
          v50 = 0u;
        }
        if (v44)
        {
          if (v48)
            (*(void (**)(void))(*(_QWORD *)v44 + 40))();
          v48 = 0;
          v45 = 0;
          v46 = 0;
          v44 = 0;
          ++v47;
        }
        if (v39)
        {
          if (v43)
            (*(void (**)(void))(*(_QWORD *)v39 + 40))();
          v43 = 0;
          v40 = 0;
          v41 = 0;
          v39 = 0;
          ++v42;
        }
        if (v37 && (v38 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v37 + 40))();
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v52);
    }
    while (v52 != a5 || (unsigned __int16)v53 != 0xFFFF || WORD1(v53) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveSphereComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveSphereComponent>::processUpdatingComponents()
{
  return 0;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveSphereComponent>::addScene(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  re::ecs2::System *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = a2;
  v4 = (_anonymous_namespace_ *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(a1 + 144);
    else
      v7 = *(_QWORD **)(a1 + 152);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(a1 + 144);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v8 = *(uint64_t **)(a1 + 152);
    if (!v5)
      goto LABEL_17;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(_QWORD *)&v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    v14 = a1 + 168;
    v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  v43 = 0u;
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = -1;
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v48 = 1;
  v49 = 0uLL;
  v50 = 0uLL;
  v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,4ul>::addUninitialized(a1);
  v17 = v44;
  *(_QWORD *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  v19 = *(_QWORD *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::init(v20, a1, v51);
  v42 = *(_QWORD *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 160);
  if ((v21 & 0x3F) != 0)
    v23 = (v21 >> 6) + 1;
  else
    v23 = v21 >> 6;
  *(_QWORD *)(a1 + 160) = v21;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    v24 = 63;
    v25 = *(_QWORD *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63)
      v24 = ~(-1 << v25);
    if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      v26 = a1 + 144;
    else
      v26 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(v26 + 8 * *(_QWORD *)(a1 + 128) - 8) &= v24;
  }
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(a1 + 208);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(a1 + 208) = v27;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
      v32 = a1 + 192;
    else
      v32 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(a1 + 176) - 8) &= v30;
  }
  v15 = v42;
  v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(_BYTE *)(a1 + 232))
    return;
  v33 = *(_QWORD *)(a1 + 176);
  v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if ((v34 & 1) != 0)
      v35 = (_QWORD *)(a1 + 192);
    else
      v35 = *(_QWORD **)(a1 + 200);
    v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37)
        return;
    }
LABEL_59:
    v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((_BYTE *)v41 + 86))
      re::ecs2::System::queueToRun(v41, 0.0);
    return;
  }
  if ((v34 & 1) != 0)
  {
    v36 = (uint64_t *)(a1 + 192);
    if (!v33)
      return;
  }
  else
  {
    v36 = *(uint64_t **)(a1 + 200);
    if (!v33)
      return;
  }
  v38 = 0;
  v39 = 8 * v33;
  do
  {
    v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38)
    goto LABEL_59;
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v5 = 8 * a4;
    do
    {
      v6 = *a3;
      v7 = *(_QWORD *)(*a3 + 48);
      if (v7)
      {

        *(_QWORD *)(v6 + 48) = 0;
      }
      *(_QWORD *)(v6 + 56) = 0;
      v8 = *(_QWORD *)(v6 + 72);
      if (v8)
      {

        *(_QWORD *)(v6 + 72) = 0;
      }
      *(_QWORD *)(v6 + 80) = 0;
      *(_WORD *)(v6 + 96) = 8;
      *(_DWORD *)(v6 + 100) = 1056964608;
      *(_WORD *)(v6 + 104) = 257;
      ++a3;
      *(_BYTE *)(v6 + 106) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED63E38;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED63E90;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED63EE8;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED63F40;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED63E38;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED63E90;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED63EE8;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED63F40;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED63E38;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED63E38;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED63E90;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED63E90;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED63EE8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED63EE8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED63F40;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED63F40;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>,re::Slice<re::ecs2::PrimitiveSphereComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>*,re::Slice<re::ecs2::PrimitiveSphereComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>,re::Slice<re::ecs2::PrimitiveSphereComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveSphereComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

_QWORD *re::make::shared::object<re::ecs2::PrimitiveTetrahedronSystem>(re *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  _QWORD *result;

  v2 = re::globalAllocators(a1);
  v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 384, 8);
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTetrahedronComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *result = &off_24ED63F98;
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTetrahedronComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD v9[2];
  void *v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System(a1, 1, 1);
  *v2 = off_24ED64038;
  v2[13] = off_24ED640A8;
  v3 = v2 + 13;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(_QWORD *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = a1;
  *(_QWORD *)(a1 + 368) = v3;
  *(_BYTE *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((_QWORD *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitiveTetrahedronSystem::~PrimitiveTetrahedronSystem(re::ecs2::PrimitiveTetrahedronSystem *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED64038;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED640A8;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED64038;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED640A8;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::PrimitiveTetrahedronSystem::typeInfo(re::ecs2::PrimitiveTetrahedronSystem *this)
{
  return re::ecs2::introspect_PrimitiveTetrahedronSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTetrahedronComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitiveTetrahedronComponent>::addScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>*,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTetrahedronComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_QWORD *)&v5 = a1 + 104;
  *((_QWORD *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>::deactivateComponent;
  v6 = 0;
  v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>*,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTetrahedronComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[2];

  v4[0] = a3;
  v4[1] = a4;
  if (a2)
    re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>::dependsOnComponents(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveTetrahedronComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  int32x4_t v23;
  int32x4_t v24;
  _QWORD *v25;
  re **v26;
  uint64_t *v27;
  uint64_t *v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40));
  v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v39, a5, 0);
  v53 = a4;
  v54 = v39;
  v55 = v40;
  if (v39 != a5 || (unsigned __int16)v40 != 0xFFFFLL || (v40 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v54);
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      if (v13)
      {
        *(_QWORD *)(v12 + 96) = *(_QWORD *)(v12 + 28);
        *(_DWORD *)(v12 + 103) = *(_DWORD *)(v12 + 35);
        v14 = *(unsigned __int8 *)(v12 + 40);
        *(_BYTE *)(v12 + 108) = v14;
        v15 = *(unsigned __int8 *)(v12 + 41);
        *(_BYTE *)(v12 + 109) = v15;
        re::MeshPrimitiveProvider::makeDescriptor(v12 + 28, v14, v15, (uint64_t)&v39);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v8 + 40))(&v37, v8, &v39);
        v16 = *(_OWORD *)(v12 + 48);
        *(_OWORD *)(v12 + 48) = v37;
        v37 = v16;
        v17 = *(_QWORD *)(v12 + 64);
        *(_QWORD *)(v12 + 64) = v38;
        v38 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v37);
        re::AssetHandle::loadNow(*(_QWORD *)(v12 + 56), 0);
        v18 = *(_QWORD *)(v12 + 56);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          v21 = *(_QWORD **)(v13 + 176);
          if (v21 && v21[5] != *(_QWORD *)(v12 + 56))
          {
            re::AssetHandle::operator=(v21 + 4, (uint64_t *)(v12 + 48));
            re::ecs2::Component::markDirty(v21);
          }
          v20 = (unint64_t *)(a3 + 48);
          if (*(_BYTE *)(v12 + 42))
          {
            v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              v20 = (unint64_t *)(a3 + 48);
              if (!*(_QWORD *)(v12 + 80))
              {
                v25 = (_QWORD *)v22;
                v26 = re::internal::buildCollisionShape((re *)(v12 + 28), v23, v24);
                v27 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v26);
                (*(void (**)(__int128 *__return_ptr, uint64_t, re **, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 416))(&v37, v8, v26, v27, 0, 2, 0);
                v29 = *(_OWORD *)(v12 + 72);
                v28 = (uint64_t *)(v12 + 72);
                *(_OWORD *)v28 = v37;
                v37 = v29;
                v30 = v28[2];
                v28[2] = v38;
                v38 = v30;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v37);
                re::AssetHandle::operator=(v25 + 4, v28);
                re::ecs2::Component::markDirty(v25);
                v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        v31 = v53;
        v32 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v54);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v31, v32, *v20);
        if ((_QWORD)v51)
        {
          if ((BYTE8(v51) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v51 + 40))();
          v51 = 0u;
          v52 = 0u;
        }
        if (v46)
        {
          if (v50)
            (*(void (**)(void))(*(_QWORD *)v46 + 40))();
          v50 = 0;
          v47 = 0;
          v48 = 0;
          v46 = 0;
          ++v49;
        }
        if (v41)
        {
          if (v45)
            (*(void (**)(void))(*(_QWORD *)v41 + 40))();
          v45 = 0;
          v42 = 0;
          v43 = 0;
          v41 = 0;
          ++v44;
        }
        if (v39 && (v40 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v39 + 40))();
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v54);
    }
    while (v54 != a5 || (unsigned __int16)v55 != 0xFFFF || WORD1(v55) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveTetrahedronComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveTetrahedronComponent>::processUpdatingComponents()
{
  return 0;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveTetrahedronComponent>::addScene(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  re::ecs2::System *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = a2;
  v4 = (_anonymous_namespace_ *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(a1 + 144);
    else
      v7 = *(_QWORD **)(a1 + 152);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(a1 + 144);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v8 = *(uint64_t **)(a1 + 152);
    if (!v5)
      goto LABEL_17;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(_QWORD *)&v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    v14 = a1 + 168;
    v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  v43 = 0u;
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = -1;
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v48 = 1;
  v49 = 0uLL;
  v50 = 0uLL;
  v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,4ul>::addUninitialized(a1);
  v17 = v44;
  *(_QWORD *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  v19 = *(_QWORD *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::init(v20, a1, v51);
  v42 = *(_QWORD *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 160);
  if ((v21 & 0x3F) != 0)
    v23 = (v21 >> 6) + 1;
  else
    v23 = v21 >> 6;
  *(_QWORD *)(a1 + 160) = v21;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    v24 = 63;
    v25 = *(_QWORD *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63)
      v24 = ~(-1 << v25);
    if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      v26 = a1 + 144;
    else
      v26 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(v26 + 8 * *(_QWORD *)(a1 + 128) - 8) &= v24;
  }
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(a1 + 208);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(a1 + 208) = v27;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
      v32 = a1 + 192;
    else
      v32 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(a1 + 176) - 8) &= v30;
  }
  v15 = v42;
  v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(_BYTE *)(a1 + 232))
    return;
  v33 = *(_QWORD *)(a1 + 176);
  v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if ((v34 & 1) != 0)
      v35 = (_QWORD *)(a1 + 192);
    else
      v35 = *(_QWORD **)(a1 + 200);
    v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37)
        return;
    }
LABEL_59:
    v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((_BYTE *)v41 + 86))
      re::ecs2::System::queueToRun(v41, 0.0);
    return;
  }
  if ((v34 & 1) != 0)
  {
    v36 = (uint64_t *)(a1 + 192);
    if (!v33)
      return;
  }
  else
  {
    v36 = *(uint64_t **)(a1 + 200);
    if (!v33)
      return;
  }
  v38 = 0;
  v39 = 8 * v33;
  do
  {
    v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38)
    goto LABEL_59;
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v5 = 8 * a4;
    do
    {
      v6 = *a3;
      v7 = *(_QWORD *)(*a3 + 48);
      if (v7)
      {

        *(_QWORD *)(v6 + 48) = 0;
      }
      *(_QWORD *)(v6 + 56) = 0;
      v8 = *(_QWORD *)(v6 + 72);
      if (v8)
      {

        *(_QWORD *)(v6 + 72) = 0;
      }
      *(_QWORD *)(v6 + 80) = 0;
      *(_WORD *)(v6 + 96) = 1;
      *(_DWORD *)(v6 + 100) = 1065353216;
      *(_WORD *)(v6 + 104) = 257;
      ++a3;
      *(_BYTE *)(v6 + 106) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED64110;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED64168;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED641C0;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED64218;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED64110;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED64168;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED641C0;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED64218;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED64110;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED64110;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED64168;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED64168;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED641C0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED641C0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED64218;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED64218;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>*,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

_QWORD *re::make::shared::object<re::ecs2::PrimitiveTubeSystem>(re *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  _QWORD *result;

  v2 = re::globalAllocators(a1);
  v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 384, 8);
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTubeComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *result = &off_24ED64270;
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTubeComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD v9[2];
  void *v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System(a1, 1, 1);
  *v2 = off_24ED64310;
  v2[13] = off_24ED64380;
  v3 = v2 + 13;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(_QWORD *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = a1;
  *(_QWORD *)(a1 + 368) = v3;
  *(_BYTE *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((_QWORD *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitiveTubeSystem::~PrimitiveTubeSystem(re::ecs2::PrimitiveTubeSystem *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED64310;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED64380;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED64310;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 18);
  *((_QWORD *)this + 13) = off_24ED64380;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::PrimitiveTubeSystem::typeInfo(re::ecs2::PrimitiveTubeSystem *this)
{
  return re::ecs2::introspect_PrimitiveTubeSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTubeComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitiveTubeComponent>::addScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>,re::Slice<re::ecs2::PrimitiveTubeComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>*,re::Slice<re::ecs2::PrimitiveTubeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>,re::Slice<re::ecs2::PrimitiveTubeComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveTubeComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTubeComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_QWORD *)&v5 = a1 + 104;
  *((_QWORD *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>::deactivateComponent;
  v6 = 0;
  v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>,re::Slice<re::ecs2::PrimitiveTubeComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>*,re::Slice<re::ecs2::PrimitiveTubeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>,re::Slice<re::ecs2::PrimitiveTubeComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveTubeComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTubeComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[2];

  v4[0] = a3;
  v4[1] = a4;
  if (a2)
    re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>::dependsOnComponents(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveTubeComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  re **v24;
  uint64_t *v25;
  uint64_t *v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40));
  v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v37, a5, 0);
  v51 = a4;
  v52 = v37;
  v53 = v38;
  if (v37 != a5 || (unsigned __int16)v38 != 0xFFFFLL || (v38 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v52);
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      if (v13)
      {
        *(_OWORD *)(v12 + 104) = *(_OWORD *)(v12 + 28);
        *(_DWORD *)(v12 + 119) = *(_DWORD *)(v12 + 43);
        v14 = *(_BYTE *)(v12 + 48);
        *(_BYTE *)(v12 + 124) = v14;
        v15 = *(_BYTE *)(v12 + 49);
        *(_BYTE *)(v12 + 125) = v15;
        re::MeshPrimitiveProvider::makeDescriptor(v12 + 28, v14, v15, (uint64_t)&v37);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v8 + 40))(&v35, v8, &v37);
        v16 = *(_OWORD *)(v12 + 56);
        *(_OWORD *)(v12 + 56) = v35;
        v35 = v16;
        v17 = *(_QWORD *)(v12 + 72);
        *(_QWORD *)(v12 + 72) = v36;
        v36 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
        re::AssetHandle::loadNow(*(_QWORD *)(v12 + 64), 0);
        v18 = *(_QWORD *)(v12 + 64);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          v21 = *(_QWORD **)(v13 + 176);
          if (v21 && v21[5] != *(_QWORD *)(v12 + 64))
          {
            re::AssetHandle::operator=(v21 + 4, (uint64_t *)(v12 + 56));
            re::ecs2::Component::markDirty(v21);
          }
          v20 = (unint64_t *)(a3 + 48);
          if (*(_BYTE *)(v12 + 50))
          {
            v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              v20 = (unint64_t *)(a3 + 48);
              if (!*(_QWORD *)(v12 + 88))
              {
                v23 = (_QWORD *)v22;
                v24 = re::internal::buildCollisionShape((float *)(v12 + 28));
                v25 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v24);
                (*(void (**)(__int128 *__return_ptr, uint64_t, re **, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 416))(&v35, v8, v24, v25, 0, 2, 0);
                v27 = *(_OWORD *)(v12 + 80);
                v26 = (uint64_t *)(v12 + 80);
                *(_OWORD *)v26 = v35;
                v35 = v27;
                v28 = v26[2];
                v26[2] = v36;
                v36 = v28;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
                re::AssetHandle::operator=(v23 + 4, v26);
                re::ecs2::Component::markDirty(v23);
                v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        v29 = v51;
        v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v29, v30, *v20);
        if ((_QWORD)v49)
        {
          if ((BYTE8(v49) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v49 + 40))();
          v49 = 0u;
          v50 = 0u;
        }
        if (v44)
        {
          if (v48)
            (*(void (**)(void))(*(_QWORD *)v44 + 40))();
          v48 = 0;
          v45 = 0;
          v46 = 0;
          v44 = 0;
          ++v47;
        }
        if (v39)
        {
          if (v43)
            (*(void (**)(void))(*(_QWORD *)v39 + 40))();
          v43 = 0;
          v40 = 0;
          v41 = 0;
          v39 = 0;
          ++v42;
        }
        if (v37 && (v38 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v37 + 40))();
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v52);
    }
    while (v52 != a5 || (unsigned __int16)v53 != 0xFFFF || WORD1(v53) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveTubeComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveTubeComponent>::processUpdatingComponents()
{
  return 0;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveTubeComponent>::addScene(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  re::ecs2::System *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = a2;
  v4 = (_anonymous_namespace_ *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(a1 + 144);
    else
      v7 = *(_QWORD **)(a1 + 152);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(a1 + 144);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v8 = *(uint64_t **)(a1 + 152);
    if (!v5)
      goto LABEL_17;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(_QWORD *)&v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    v14 = a1 + 168;
    v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  v43 = 0u;
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = -1;
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v48 = 1;
  v49 = 0uLL;
  v50 = 0uLL;
  v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,4ul>::addUninitialized(a1);
  v17 = v44;
  *(_QWORD *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  v19 = *(_QWORD *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::init(v20, a1, v51);
  v42 = *(_QWORD *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 160);
  if ((v21 & 0x3F) != 0)
    v23 = (v21 >> 6) + 1;
  else
    v23 = v21 >> 6;
  *(_QWORD *)(a1 + 160) = v21;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    v24 = 63;
    v25 = *(_QWORD *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63)
      v24 = ~(-1 << v25);
    if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      v26 = a1 + 144;
    else
      v26 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(v26 + 8 * *(_QWORD *)(a1 + 128) - 8) &= v24;
  }
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(a1 + 208);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(a1 + 208) = v27;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
      v32 = a1 + 192;
    else
      v32 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(a1 + 176) - 8) &= v30;
  }
  v15 = v42;
  v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(_BYTE *)(a1 + 232))
    return;
  v33 = *(_QWORD *)(a1 + 176);
  v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if ((v34 & 1) != 0)
      v35 = (_QWORD *)(a1 + 192);
    else
      v35 = *(_QWORD **)(a1 + 200);
    v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37)
        return;
    }
LABEL_59:
    v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((_BYTE *)v41 + 86))
      re::ecs2::System::queueToRun(v41, 0.0);
    return;
  }
  if ((v34 & 1) != 0)
  {
    v36 = (uint64_t *)(a1 + 192);
    if (!v33)
      return;
  }
  else
  {
    v36 = *(uint64_t **)(a1 + 200);
    if (!v33)
      return;
  }
  v38 = 0;
  v39 = 8 * v33;
  do
  {
    v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38)
    goto LABEL_59;
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v5 = 8 * a4;
    do
    {
      v6 = *a3;
      v7 = *(_QWORD *)(*a3 + 56);
      if (v7)
      {

        *(_QWORD *)(v6 + 56) = 0;
      }
      *(_QWORD *)(v6 + 64) = 0;
      v8 = *(_QWORD *)(v6 + 80);
      if (v8)
      {

        *(_QWORD *)(v6 + 80) = 0;
      }
      *(_QWORD *)(v6 + 88) = 0;
      *(_DWORD *)(v6 + 104) = 65544;
      *(_QWORD *)(v6 + 108) = 0x3EC000003F800000;
      *(_DWORD *)(v6 + 116) = 1056964608;
      *(_WORD *)(v6 + 120) = 257;
      ++a3;
      *(_BYTE *)(v6 + 122) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED643E8;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED64440;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED64498;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED644F0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED643E8;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED64440;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED64498;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED644F0;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED643E8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED643E8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED64440;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED64440;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED64498;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED64498;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED644F0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED644F0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>,re::Slice<re::ecs2::PrimitiveTubeComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>*,re::Slice<re::ecs2::PrimitiveTubeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>,re::Slice<re::ecs2::PrimitiveTubeComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveTubeComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

re::ecs2::Static3DTextSystem *re::ecs2::Static3DTextSystem::Static3DTextSystem(re::ecs2::Static3DTextSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System((uint64_t)this, 1);
  *(_QWORD *)v2 = &off_24ED6BDA8;
  v3 = v2 + 344;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  v4 = v2 + 104;
  *(_DWORD *)(v2 + 120) = 1;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  v5 = (_QWORD *)(v2 + 224);
  *(_OWORD *)(v2 + 160) = 0u;
  v6 = (_QWORD *)(v2 + 160);
  *(_DWORD *)(v2 + 240) = 1;
  v7 = (_QWORD *)(v2 + 272);
  *(_OWORD *)(v2 + 248) = 0u;
  *(_QWORD *)(v2 + 280) = 0;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_DWORD *)(v2 + 288) = 1;
  *(_OWORD *)(v2 + 321) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 60) += 2;
  *((_QWORD *)this + 33) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 72) += 2;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = this;
  *((_QWORD *)this + 41) = v3;
  *((_BYTE *)this + 336) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  LOBYTE(v13) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v12);
  *((_QWORD *)this + 43) = &off_24ED6BD40;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  v13 = 1;
  v14[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v12 = v14;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::Static3DTextSystem *)((char *)this + 360), (uint64_t)&v12);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::make::shared::object<re::ecs2::StateMachineSystem>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 104, 8);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_QWORD *)(v3 + 96) = 0;
  re::ecs2::System::System(v3, 1);
  *v4 = &off_24ED6CBD0;
  *(_QWORD *)a1 = v4;
}

re::ecs2::SkeletalPosePreparationSystem *re::ecs2::SkeletalPosePreparationSystem::SkeletalPosePreparationSystem(re::ecs2::SkeletalPosePreparationSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System((uint64_t)this, 1);
  *(_QWORD *)v2 = &off_24ED6C368;
  v3 = v2 + 344;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  v4 = v2 + 104;
  *(_DWORD *)(v2 + 120) = 1;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  v5 = (_QWORD *)(v2 + 224);
  *(_OWORD *)(v2 + 160) = 0u;
  v6 = (_QWORD *)(v2 + 160);
  *(_DWORD *)(v2 + 240) = 1;
  v7 = (_QWORD *)(v2 + 272);
  *(_OWORD *)(v2 + 248) = 0u;
  *(_QWORD *)(v2 + 280) = 0;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_DWORD *)(v2 + 288) = 1;
  *(_OWORD *)(v2 + 321) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 60) += 2;
  *((_QWORD *)this + 33) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 72) += 2;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = this;
  *((_QWORD *)this + 41) = v3;
  *((_BYTE *)this + 336) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  LOBYTE(v13) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v12);
  *((_QWORD *)this + 43) = &off_24ED6C2C0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  v13 = 1;
  v14[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v12 = v14;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::SkeletalPosePreparationSystem *)((char *)this + 352), (uint64_t)&v12);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::AnimationUpdateSystem *re::ecs2::AnimationUpdateSystem::AnimationUpdateSystem(re::ecs2::AnimationUpdateSystem *this)
{
  _QWORD *v2;
  uint64_t v4;
  char v5;

  re::ecs2::System::System((uint64_t)this, 0);
  *v2 = &off_24ED645D8;
  v2[13] = 0;
  LOWORD(v4) = 257;
  HIDWORD(v4) = 1023969417;
  v5 = 0;
  re::ecs2::System::setTaskOptions(v2, &v4);
  return this;
}

re::ecs2::AnimationSystem *re::ecs2::AnimationSystem::AnimationSystem(re::ecs2::AnimationSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  uint64_t *v12;
  _anonymous_namespace_ *v13;
  _anonymous_namespace_ *v14;
  uint64_t v16;
  char v17;

  re::ecs2::System::System((uint64_t)this, 1);
  *(_QWORD *)v2 = &off_24ED6EFA8;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_DWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 140) = 0x7FFFFFFFLL;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 216) = off_24ED6F018;
  v3 = v2 + 216;
  *(_OWORD *)(v2 + 240) = 0u;
  v4 = v2 + 240;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_DWORD *)(v2 + 256) = 1;
  *(_QWORD *)(v2 + 272) = 0;
  *(_QWORD *)(v2 + 280) = 0;
  *(_QWORD *)(v2 + 264) = 0;
  *(_DWORD *)(v2 + 288) = 0;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  v5 = (_QWORD *)(v2 + 360);
  *(_OWORD *)(v2 + 296) = 0u;
  v6 = (_QWORD *)(v2 + 296);
  *(_DWORD *)(v2 + 376) = 1;
  v7 = (_QWORD *)(v2 + 408);
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 400) = 0u;
  *(_QWORD *)(v2 + 416) = 0;
  *(_DWORD *)(v2 + 424) = 1;
  *(_OWORD *)(v2 + 432) = 0u;
  *(_OWORD *)(v2 + 448) = 0u;
  *(_OWORD *)(v2 + 457) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 94) += 2;
  *((_QWORD *)this + 50) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 106) += 2;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = this;
  *((_QWORD *)this + 58) = v3;
  *((_BYTE *)this + 472) = 1;
  LOWORD(v16) = 257;
  HIDWORD(v16) = 1023969417;
  v17 = 0;
  v11 = (_anonymous_namespace_ *)re::ecs2::System::setTaskOptions(this, &v16);
  *((_QWORD *)this + 60) = off_24ED6F058;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_DWORD *)this + 128) = 1;
  *((_QWORD *)this + 65) = 0;
  *((_QWORD *)this + 67) = 0;
  *((_QWORD *)this + 66) = 0;
  *((_DWORD *)this + 136) = 0;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_DWORD *)this + 158) = 1;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_QWORD *)this + 84) = 0;
  *((_DWORD *)this + 170) = 1;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 713) = 0u;
  v14 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 77, 0);
  *((_DWORD *)this + 158) += 2;
  *((_QWORD *)this + 82) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 83, 0);
  *((_DWORD *)this + 170) += 2;
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 89) = this;
  *((_QWORD *)this + 90) = (char *)this + 480;
  *((_BYTE *)this + 728) = 1;
  LOWORD(v16) = 257;
  HIDWORD(v16) = 1023969417;
  v17 = 0;
  re::ecs2::System::setTaskOptions(this, &v16);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::make::shared::object<re::ecs2::RayCastSystem>(re *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  _QWORD *v4;

  v2 = re::globalAllocators(a1);
  v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 112, 8);
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  re::ecs2::System::System((uint64_t)v3, 1);
  *v4 = &off_24ED68480;
  v4[13] = 0;
  *(_QWORD *)a1 = v4;
}

void re::make::shared::object<re::ecs2::MaterialOverrideSystem>(re *a1)
{
  uint64_t *v2;
  _OWORD *v3;
  _QWORD *v4;

  v2 = re::globalAllocators(a1);
  v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 128, 8);
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  re::ecs2::System::System((uint64_t)v3, 1);
  *v4 = &off_24ED70418;
  v4[14] = 0;
  v4[15] = 0;
  v4[13] = 0;
  *(_QWORD *)a1 = v4;
}

re::ecs2::MaterialParameterBlockArraySystem *re::ecs2::MaterialParameterBlockArraySystem::MaterialParameterBlockArraySystem(re::ecs2::MaterialParameterBlockArraySystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  uint64_t v12;
  char v13;

  re::ecs2::System::System((uint64_t)this, 1);
  *(_QWORD *)(v2 + 104) = off_24ED6AC48;
  v3 = v2 + 104;
  *(_QWORD *)v2 = &off_24ED6ACB0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  v4 = v2 + 120;
  *(_DWORD *)(v2 + 136) = 1;
  *(_QWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_DWORD *)(v2 + 168) = 0;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  v5 = (_QWORD *)(v2 + 240);
  *(_OWORD *)(v2 + 176) = 0u;
  v6 = (_QWORD *)(v2 + 176);
  *(_DWORD *)(v2 + 256) = 1;
  v7 = (_QWORD *)(v2 + 288);
  *(_QWORD *)(v2 + 296) = 0;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_DWORD *)(v2 + 304) = 1;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 337) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 64) += 2;
  *((_QWORD *)this + 35) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 76) += 2;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = this;
  *((_QWORD *)this + 43) = v3;
  *((_BYTE *)this + 352) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::make::shared::object<re::ecs2::MaterialParametersSystem>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 104, 8);
  re::ecs2::System::System(v3, 1, 1);
  *v4 = &off_24ED64660;
  *(_QWORD *)a1 = v4;
}

re::ecs2::SkeletalPoseSystem *re::ecs2::SkeletalPoseSystem::SkeletalPoseSystem(re::ecs2::SkeletalPoseSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  uint64_t v14;
  char v15;

  re::ecs2::System::System((uint64_t)this, 0, 1);
  *(_QWORD *)v2 = &off_24ED6C408;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_DWORD *)(v2 + 136) = 0;
  *(_OWORD *)(v2 + 104) = 0u;
  v3 = v2 + 104;
  *(_QWORD *)(v2 + 140) = 0x7FFFFFFFLL;
  v4 = (_QWORD *)(v2 + 392);
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 152) = 0;
  v5 = v2 + 152;
  *(_DWORD *)(v2 + 168) = 1;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 176) = 0;
  *(_DWORD *)(v2 + 200) = 0;
  v6 = (_QWORD *)(v2 + 272);
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  v7 = (_QWORD *)(v2 + 208);
  *(_DWORD *)(v2 + 288) = 1;
  v8 = (_QWORD *)(v2 + 320);
  *(_QWORD *)(v2 + 328) = 0;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_DWORD *)(v2 + 336) = 1;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 369) = 0u;
  v11 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v6, 0);
  *((_DWORD *)this + 72) += 2;
  *((_QWORD *)this + 39) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v8, 0);
  *((_DWORD *)this + 84) += 2;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = this;
  *((_QWORD *)this + 47) = v4;
  *((_BYTE *)this + 384) = 1;
  LOWORD(v14) = 257;
  HIDWORD(v14) = 1023969417;
  v15 = 0;
  re::ecs2::System::setTaskOptions(this, &v14);
  v12 = (_anonymous_namespace_ *)re::ecs2::SkeletalPoseComponentStateImpl::SkeletalPoseComponentStateImpl(v4, (uint64_t)this);
  return this;
}

re::ecs2::MeshDeformationSystem *re::ecs2::MeshDeformationSystem::MeshDeformationSystem(re::ecs2::MeshDeformationSystem *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD v9[2];
  void *v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *v2 = &off_24ED6A6B8;
  v2[14] = 0;
  v2[15] = 0;
  v2[13] = 0;
  v2[16] = &off_24ED6A660;
  v3 = v2 + 16;
  v2[17] = v2;
  v2[19] = 0;
  v2[20] = 0;
  v2[18] = 0;
  v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v11 = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 18), (uint64_t)v9);
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 46) = 1;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 76) = 1;
  *((_QWORD *)this + 43) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_DWORD *)this + 88) = 1;
  *(_OWORD *)((char *)this + 385) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 36, 0);
  *((_DWORD *)this + 76) += 2;
  *((_QWORD *)this + 41) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 42, 0);
  *((_DWORD *)this + 88) += 2;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = this;
  *((_QWORD *)this + 49) = v3;
  *((_BYTE *)this + 400) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v10);
  return this;
}

re::ecs2::BlendShapeWeightsSystem *re::ecs2::BlendShapeWeightsSystem::BlendShapeWeightsSystem(re::ecs2::BlendShapeWeightsSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD v9[2];
  void *v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)v2 = &off_24ED66868;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_DWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 140) = 0x7FFFFFFFLL;
  *(_QWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 160) = &off_24ED66800;
  v3 = v2 + 160;
  *(_QWORD *)(v2 + 168) = v2;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_QWORD *)(v2 + 208) = 0;
  *(_OWORD *)(v2 + 192) = 0u;
  v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v11 = re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 192), (uint64_t)v9);
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_DWORD *)this + 58) = 1;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_DWORD *)this + 66) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_DWORD *)this + 88) = 1;
  *((_QWORD *)this + 49) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_DWORD *)this + 100) = 1;
  *(_OWORD *)((char *)this + 433) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 42, 0);
  *((_DWORD *)this + 88) += 2;
  *((_QWORD *)this + 47) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 48, 0);
  *((_DWORD *)this + 100) += 2;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = this;
  *((_QWORD *)this + 55) = v3;
  *((_BYTE *)this + 448) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v10);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::MeshOffsetsSystem *re::ecs2::MeshOffsetsSystem::MeshOffsetsSystem(re::ecs2::MeshOffsetsSystem *this)
{
  uint64_t v2;
  re::ecs2::MeshOffsetsComponentStateImpl *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  uint64_t v12;
  char v13;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)v2 = &off_24ED68690;
  v3 = (re::ecs2::MeshOffsetsComponentStateImpl *)(v2 + 344);
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  v4 = v2 + 104;
  *(_DWORD *)(v2 + 120) = 1;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  v5 = (_QWORD *)(v2 + 224);
  *(_OWORD *)(v2 + 160) = 0u;
  v6 = (_QWORD *)(v2 + 160);
  *(_DWORD *)(v2 + 240) = 1;
  v7 = (_QWORD *)(v2 + 272);
  *(_OWORD *)(v2 + 248) = 0u;
  *(_QWORD *)(v2 + 280) = 0;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_DWORD *)(v2 + 288) = 1;
  *(_OWORD *)(v2 + 321) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 60) += 2;
  *((_QWORD *)this + 33) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 72) += 2;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = this;
  *((_QWORD *)this + 41) = v3;
  *((_BYTE *)this + 336) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  re::ecs2::MeshOffsetsComponentStateImpl::MeshOffsetsComponentStateImpl(v3);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::SkeletalDebugSystem *re::ecs2::SkeletalDebugSystem::SkeletalDebugSystem(re::ecs2::SkeletalDebugSystem *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  uint64_t v9;
  char v10;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *v2 = &off_24ED6E760;
  v3 = v2 + 16;
  v2[14] = 0;
  v2[15] = 0;
  v2[13] = 0;
  v4 = re::ecs2::SkeletalDebugComponentStateImpl::SkeletalDebugComponentStateImpl((re::ecs2::SkeletalDebugComponentStateImpl *)(v2 + 16), this);
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 46) = 1;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 76) = 1;
  *((_QWORD *)this + 43) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_DWORD *)this + 88) = 1;
  *(_OWORD *)((char *)this + 385) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 36, 0);
  *((_DWORD *)this + 76) += 2;
  *((_QWORD *)this + 41) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 42, 0);
  *((_DWORD *)this + 88) += 2;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = this;
  *((_QWORD *)this + 49) = v3;
  *((_BYTE *)this + 400) = 1;
  LOWORD(v9) = 257;
  HIDWORD(v9) = 1023969417;
  v10 = 0;
  re::ecs2::System::setTaskOptions(this, &v9);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::make::shared::object<re::ecs2::AnimationLibrarySystem>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 104, 8);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_QWORD *)(v3 + 96) = 0;
  re::ecs2::System::System(v3, 1);
  *v4 = &off_24ED499E0;
  *(_QWORD *)a1 = v4;
}

void re::make::shared::object<re::ecs2::GroundPlaneSystem>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 104, 8);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_QWORD *)(v3 + 96) = 0;
  re::ecs2::System::System(v3, 1);
  *v4 = &off_24ED48548;
  *(_QWORD *)a1 = v4;
}

double re::make::shared::object<re::ecs2::VideoComponentSystem>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 216, 8);
  re::ecs2::System::System(v3, 1, 1);
  *(_QWORD *)v4 = &off_24ED6E020;
  *(_BYTE *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 200) = 0;
  *(_DWORD *)(v4 + 208) = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_QWORD *)a1 = v4;
  return result;
}

re::ecs2::AudioUpdateSystem *re::ecs2::AudioUpdateSystem::AudioUpdateSystem(re::ecs2::AudioUpdateSystem *this)
{
  _QWORD *v2;
  uint64_t v4;
  char v5;

  re::ecs2::System::System((uint64_t)this, 0);
  *v2 = &off_24ED6DA18;
  v2[13] = 0;
  LOWORD(v4) = 257;
  HIDWORD(v4) = 1023969417;
  v5 = 0;
  re::ecs2::System::setTaskOptions(v2, &v4);
  return this;
}

re::ecs2::AudioSessionSystem *re::ecs2::AudioSessionSystem::AudioSessionSystem(re::ecs2::AudioSessionSystem *this)
{
  _QWORD *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  uint64_t v9;
  char v10;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *v2 = &off_24ED6C020;
  v3 = MEMORY[0x24BDAC9B8];
  v4 = (_anonymous_namespace_ *)MEMORY[0x24BDAC9B8];
  *((_QWORD *)this + 13) = v3;
  *((_QWORD *)this + 19) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 0;
  *((_QWORD *)this + 20) = off_24ED6BFE0;
  *((_QWORD *)this + 21) = this;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 50) = 1;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_DWORD *)this + 58) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 80) = 1;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_QWORD *)this + 45) = 0;
  *((_DWORD *)this + 92) = 1;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 401) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 38, 0);
  *((_DWORD *)this + 80) += 2;
  *((_QWORD *)this + 43) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 44, 0);
  *((_DWORD *)this + 92) += 2;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = this;
  *((_QWORD *)this + 51) = (char *)this + 160;
  *((_BYTE *)this + 416) = 1;
  LOWORD(v9) = 257;
  HIDWORD(v9) = 1023969417;
  v10 = 0;
  re::ecs2::System::setTaskOptions(this, &v9);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::make::shared::object<re::ecs2::AudioAnimationSystem>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 160, 8);
  re::ecs2::System::System(v3, 1);
  *(_QWORD *)v4 = &off_24ED655B8;
  *(_QWORD *)(v4 + 104) = 0;
  *(_BYTE *)(v4 + 112) = 0;
  *(_BYTE *)(v4 + 136) = 0;
  *(_QWORD *)a1 = v4;
}

void re::make::shared::object<re::ecs2::AudioMixerSystem>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 112, 8);
  re::ecs2::System::System(v3, 1, 1);
  *v4 = &off_24ED61D90;
  v4[13] = 0;
  *(_QWORD *)a1 = v4;
}

re::ecs2::ReverbSystem *re::ecs2::ReverbSystem::ReverbSystem(re::ecs2::ReverbSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  uint64_t v12;
  char v13;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)v2 = &off_24ED64920;
  *(_QWORD *)(v2 + 112) = off_24ED648B8;
  v3 = v2 + 112;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = v2;
  *(_QWORD *)(v2 + 136) = 0;
  v4 = v2 + 136;
  *(_QWORD *)(v2 + 144) = 0;
  *(_DWORD *)(v2 + 152) = 1;
  *(_QWORD *)(v2 + 168) = 0;
  *(_QWORD *)(v2 + 176) = 0;
  *(_QWORD *)(v2 + 160) = 0;
  *(_DWORD *)(v2 + 184) = 0;
  v5 = (_QWORD *)(v2 + 256);
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  v6 = (_QWORD *)(v2 + 192);
  *(_DWORD *)(v2 + 272) = 1;
  v7 = (_QWORD *)(v2 + 304);
  *(_QWORD *)(v2 + 312) = 0;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_DWORD *)(v2 + 320) = 1;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 353) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 68) += 2;
  *((_QWORD *)this + 37) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 80) += 2;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = this;
  *((_QWORD *)this + 45) = v3;
  *((_BYTE *)this + 368) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::AcousticMeshSystem *re::ecs2::AcousticMeshSystem::AcousticMeshSystem(re::ecs2::AcousticMeshSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  uint64_t v12;
  char v13;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)v2 = &off_24ED6E2C8;
  *(_QWORD *)(v2 + 104) = off_24ED6E288;
  v3 = v2 + 104;
  *(_QWORD *)(v2 + 112) = v2;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  v4 = v2 + 128;
  *(_DWORD *)(v2 + 144) = 1;
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 168) = 0;
  *(_QWORD *)(v2 + 152) = 0;
  *(_DWORD *)(v2 + 176) = 0;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  v5 = (_QWORD *)(v2 + 248);
  *(_OWORD *)(v2 + 184) = 0u;
  v6 = (_QWORD *)(v2 + 184);
  *(_DWORD *)(v2 + 264) = 1;
  v7 = (_QWORD *)(v2 + 296);
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_QWORD *)(v2 + 304) = 0;
  *(_DWORD *)(v2 + 312) = 1;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 345) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 66) += 2;
  *((_QWORD *)this + 36) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 78) += 2;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = this;
  *((_QWORD *)this + 44) = v3;
  *((_BYTE *)this + 360) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_DWORD *)this + 104) = 1065353216;
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

double re::make::shared::object<re::ecs2::SpatialSceneClassificationSystem>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 160, 8);
  re::ecs2::System::System(v3, 1, 1);
  *(_QWORD *)v4 = &off_24ED49758;
  *(_QWORD *)(v4 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 132) = 0u;
  *(_QWORD *)a1 = v4;
  return result;
}

void re::make::shared::object<re::ecs2::VoiceSystem>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 104, 8);
  re::ecs2::System::System(v3, 1, 1);
  *v4 = &off_24ED5F170;
  *(_QWORD *)a1 = v4;
}

double re::make::shared::object<re::ecs2::ListenerSystem>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 152, 8);
  re::ecs2::System::System(v3, 1, 1);
  *(_QWORD *)v4 = &off_24ED666F0;
  result = 0.0;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_QWORD *)(v4 + 136) = 0;
  *(_DWORD *)(v4 + 144) = 1065353216;
  *(_QWORD *)a1 = v4;
  return result;
}

void re::internal::Callable<re::ecs2::ComponentHelper::addDefaultSystems(re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ecs2::ComponentHelper::addDefaultSystems(re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = v2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v3 + 48))(v3, &v4, 0xFFFFFFFFLL, 0);
  if (v4)

}

_QWORD *re::internal::Callable<re::ecs2::ComponentHelper::addDefaultSystems(re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED62730;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::ecs2::ComponentHelper::addDefaultSystems(re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED62730;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ComponentHelper::addDefaultSystems(re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::size()
{
  return 16;
}

void re::internal::Callable<re::ecs2::ComponentHelper::deprecatedAddDefaultSystems(re::ecs2::Scene *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ecs2::ComponentHelper::deprecatedAddDefaultSystems(re::ecs2::Scene *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = v2;
  re::ecs2::Scene::deprecatedAddSystem(v3, &v4);
  if (v2)

}

_QWORD *re::internal::Callable<re::ecs2::ComponentHelper::deprecatedAddDefaultSystems(re::ecs2::Scene *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED62798;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::ecs2::ComponentHelper::deprecatedAddDefaultSystems(re::ecs2::Scene *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED62798;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ComponentHelper::deprecatedAddDefaultSystems(re::ecs2::Scene *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::size()
{
  return 16;
}

void re::internal::Callable<re::ecs2::ComponentHelper::addRealityRendererDefaultSystems(re::DynamicArray<re::SharedPtr<re::ecs2::System>> &,re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ecs2::ComponentHelper::addRealityRendererDefaultSystems(re::DynamicArray<re::SharedPtr<re::ecs2::System>> &,re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *a2;
  *a2 = 0;
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(*(_QWORD **)(a1 + 16), &v5);
  v3 = v5;
  *(_BYTE *)(v5 + 85) = 1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = 0;
  v6 = v3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v4 + 48))(v4, &v6, 0xFFFFFFFFLL, 0);
  if (v6)

  if (v5)
}

uint64_t re::internal::Callable<re::ecs2::ComponentHelper::addRealityRendererDefaultSystems(re::DynamicArray<re::SharedPtr<re::ecs2::System>> &,re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED627F0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ComponentHelper::addRealityRendererDefaultSystems(re::DynamicArray<re::SharedPtr<re::ecs2::System>> &,re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED627F0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ComponentHelper::addRealityRendererDefaultSystems(re::DynamicArray<re::SharedPtr<re::ecs2::System>> &,re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::size()
{
  return 24;
}

void std::__function::__func<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0,std::allocator<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0>,void ()(re::AssetHandle *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0,std::allocator<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0>,void ()(re::AssetHandle *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED62848;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0,std::allocator<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0>,void ()(re::AssetHandle *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED62848;
  a2[1] = v2;
  return result;
}

void std::__function::__func<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0,std::allocator<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0>,void ()(re::AssetHandle *)>::operator()(uint64_t a1, const re::AssetHandle **a2)
{
  re::AssetLoadRequest::addAsset(*(re::AssetLoadRequest::Data ***)(a1 + 8), *a2);
}

uint64_t std::__function::__func<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0,std::allocator<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0>,void ()(re::AssetHandle *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0,std::allocator<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0>,void ()(re::AssetHandle *)>::target_type()
{
}

uint64_t re::ecs2::BlurGenerationSystem::updateScenes(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[40];
  _QWORD v9[2];
  uint64_t v10;
  int v11;
  uint64_t v12;

  v2 = result;
  v3 = *(_QWORD *)(result + 104);
  if (!v3 || (*(_BYTE *)(v3 + 424) & 0x10) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(result + 112) + 104);
    if (v4 && re::RenderFrameBox::get(v4 + 344, 0xFFFFFFFFFFFFFFFuLL))
    {
      v5 = *(_QWORD *)(v2 + 112);
      v6 = *(_QWORD *)(v5 + 104);
      if (v6)
      {
        v7 = re::RenderFrameBox::get(v6 + 344, 0xFFFFFFFFFFFFFFFuLL);
        v5 = *(_QWORD *)(v2 + 112);
      }
      else
      {
        v7 = 0;
      }
      v12 = 0;
      v9[1] = 0;
      v10 = 0;
      v9[0] = 0;
      v11 = 0;
      re::TextureManager::dequeueBlurGeneration(*(os_unfair_lock_s **)(v5 + 64), (uint64_t)v8);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v9, (uint64_t)v8);
      re::DynamicArray<re::VirtualEnvironmentProbeSource>::deinit((uint64_t)v8);
      if (v10)
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v7 + 320) + 176))(*(_QWORD *)(v7 + 320), v9);
      return re::DynamicArray<re::VirtualEnvironmentProbeSource>::deinit((uint64_t)v9);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "m_renderManager->renderFrame()", "updateScenes", 19);
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_BlurGenerationSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_228);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_228))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410DA98, 0);
    *(uint64_t *)((char *)&qword_25410DAA8 + 6) = 0;
    qword_25410DAA8 = 0;
    qword_25410DAB8 = 0;
    qword_25410DAC0 = 0xFFFFFFFFLL;
    qword_25410DA98 = (uint64_t)&off_24ED7DAA8;
    qword_25410DAC8 = (uint64_t)"BlurGenerationSystem";
    dword_25410DAD0 = 0;
    unk_25410DAD8 = 0u;
    unk_25410DAE8 = 0u;
    unk_25410DAF8 = 0u;
    qword_25410DB08 = 0;
    __cxa_guard_release(&_MergedGlobals_228);
  }
  return &qword_25410DA98;
}

void re::ecs2::initInfo_BlurGenerationSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xCD17DA683639A01CLL;
  v5[1] = "BlurGenerationSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_BlurGenerationSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::BlurGenerationSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::BlurGenerationSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::BlurGenerationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::BlurGenerationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::BlurGenerationSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::BlurGenerationSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::BlurGenerationSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  double result;

  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED64548;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::BlurGenerationSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::BlurGenerationSystem>(_OWORD *a1)
{
  uint64_t v1;
  double result;

  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = &off_24ED64548;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::BlurGenerationSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_BlurGenerationSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlurGenerationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BlurGenerationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BlurGenerationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BlurGenerationSystem>, this);
}

void re::ecs2::BlurGenerationSystem::~BlurGenerationSystem(re::ecs2::BlurGenerationSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::BlurGenerationSystem::typeInfo(re::ecs2::BlurGenerationSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlurGenerationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BlurGenerationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BlurGenerationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BlurGenerationSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::BlurGenerationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::BlurGenerationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_HierarchicalTintComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410DB18);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410DB18))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410DB30, 0);
    *(uint64_t *)((char *)&qword_25410DB40 + 6) = 0;
    qword_25410DB40 = 0;
    qword_25410DB50 = 0;
    qword_25410DB58 = 0xFFFFFFFFLL;
    qword_25410DB30 = (uint64_t)&off_24ED7DAA8;
    qword_25410DB60 = (uint64_t)"HierarchicalTintComponent";
    dword_25410DB68 = 0;
    unk_25410DB70 = 0u;
    unk_25410DB80 = 0u;
    unk_25410DB90 = 0u;
    qword_25410DBA0 = 0;
    __cxa_guard_release(&qword_25410DB18);
  }
  return &qword_25410DB30;
}

void re::ecs2::initInfo_HierarchicalTintComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x8CA32477D16ED632;
  v14[1] = "HierarchicalTintComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_229);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_229);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410DB20 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "tintAmount";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410DB28 = v12;
      __cxa_guard_release(&_MergedGlobals_229);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410DB20;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::HierarchicalTintComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::HierarchicalTintComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::HierarchicalTintComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::HierarchicalTintComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::HierarchicalTintComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57888;
  *(_DWORD *)(v3 + 28) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::HierarchicalTintComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::HierarchicalTintComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57888;
  *(_DWORD *)(v1 + 28) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::HierarchicalTintComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_HierarchicalTintComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"HierarchicalTintComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_HierarchicalTintComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_HierarchicalTintComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::HierarchicalTintComponent>, this);
}

uint64_t re::ecs2::AnimationUpdateSystem::willAddSystemToECSService(re::ecs2::AnimationUpdateSystem *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v3 = re::ServiceLocator::serviceOrNull<re::ecs2::AnimationSceneService>(v2);
  *((_QWORD *)this + 13) = v3;
  return (*(uint64_t (**)(uint64_t, re::ecs2::AnimationUpdateSystem *))(*(_QWORD *)v3 + 48))(v3, this);
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::AnimationSceneService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::AnimationSceneService>(void)::info = re::ecs2::introspect_AnimationSceneService(0);
  }
  v3 = re::introspect<re::ecs2::AnimationSceneService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t re::ecs2::AnimationUpdateSystem::willRemoveSystemFromECSService(re::ecs2::AnimationUpdateSystem *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, re::ecs2::AnimationUpdateSystem *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), this);
  *((_QWORD *)this + 13) = 0;
  return result;
}

uint64_t re::ecs2::AnimationUpdateSystem::willAddSceneToECSService(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 104);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

uint64_t re::ecs2::AnimationUpdateSystem::willRemoveSceneFromECSService(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 104);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  return result;
}

_QWORD *re::ecs2::AnimationUpdateSystem::update(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x100000000) == 0)
  {
    result = (_QWORD *)result[13];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, float))(*result + 24))(result, *(float *)&a3);
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_AnimationUpdateSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_230);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_230))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410DBB0, 0);
    *(uint64_t *)((char *)&qword_25410DBC0 + 6) = 0;
    qword_25410DBC0 = 0;
    qword_25410DBD0 = 0;
    qword_25410DBD8 = 0xFFFFFFFFLL;
    qword_25410DBB0 = (uint64_t)&off_24ED7DAA8;
    qword_25410DBE0 = (uint64_t)"AnimationUpdateSystem";
    dword_25410DBE8 = 0;
    unk_25410DBF0 = 0u;
    unk_25410DC00 = 0u;
    unk_25410DC10 = 0u;
    qword_25410DC20 = 0;
    __cxa_guard_release(&_MergedGlobals_230);
  }
  return &qword_25410DBB0;
}

void re::ecs2::initInfo_AnimationUpdateSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x793BDA254CA56BB8;
  v5[1] = "AnimationUpdateSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_AnimationUpdateSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnimationUpdateSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnimationUpdateSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::AnimationUpdateSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::AnimationUpdateSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnimationUpdateSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AnimationUpdateSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::AnimationUpdateSystem *re::internal::defaultConstruct<re::ecs2::AnimationUpdateSystem>(int a1, int a2, re::ecs2::AnimationUpdateSystem *this)
{
  return re::ecs2::AnimationUpdateSystem::AnimationUpdateSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::AnimationUpdateSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::AnimationUpdateSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AnimationUpdateSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationUpdateSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnimationUpdateSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnimationUpdateSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnimationUpdateSystem>, this);
}

void re::ecs2::AnimationUpdateSystem::~AnimationUpdateSystem(re::ecs2::AnimationUpdateSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AnimationUpdateSystem::typeInfo(re::ecs2::AnimationUpdateSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationUpdateSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnimationUpdateSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnimationUpdateSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnimationUpdateSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::AnimationUpdateSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AnimationUpdateSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_MaterialParametersSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_231);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_231))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410DC30, 0);
    *(uint64_t *)((char *)&qword_25410DC40 + 6) = 0;
    qword_25410DC40 = 0;
    qword_25410DC50 = 0;
    qword_25410DC58 = 0xFFFFFFFFLL;
    qword_25410DC30 = (uint64_t)&off_24ED7DAA8;
    qword_25410DC60 = (uint64_t)"MaterialParametersSystem";
    dword_25410DC68 = 0;
    unk_25410DC70 = 0u;
    unk_25410DC80 = 0u;
    unk_25410DC90 = 0u;
    qword_25410DCA0 = 0;
    __cxa_guard_release(&_MergedGlobals_231);
  }
  return &qword_25410DC30;
}

void re::ecs2::initInfo_MaterialParametersSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x54BED6764F265040;
  v5[1] = "MaterialParametersSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_MaterialParametersSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MaterialParametersSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MaterialParametersSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::MaterialParametersSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::MaterialParametersSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MaterialParametersSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MaterialParametersSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::MaterialParametersSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  re::ecs2::System::System(a3, 1, 1);
  *v3 = &off_24ED64660;
}

void *re::internal::defaultDestruct<re::ecs2::MaterialParametersSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::MaterialParametersSystem>(uint64_t a1)
{
  _QWORD *v1;

  re::ecs2::System::System(a1, 1, 1);
  *v1 = &off_24ED64660;
}

void *re::internal::defaultDestructV2<re::ecs2::MaterialParametersSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MaterialParametersSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialParametersSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MaterialParametersSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MaterialParametersSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MaterialParametersSystem>, this);
}

uint64_t re::ecs2::MaterialParametersSystem::willAddSceneToECSService(re::ecs2::MaterialParametersSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::MaterialParametersService>(v3);
  if (result)
    return (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(_QWORD *)result + 64))(result, a2);
  return result;
}

uint64_t re::ecs2::MaterialParametersSystem::willRemoveSceneFromECSService(re::ecs2::MaterialParametersSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::MaterialParametersService>(v3);
  if (result)
    return (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(_QWORD *)result + 72))(result, a2);
  return result;
}

void re::ecs2::MaterialParametersSystem::update(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  re::ecs2::SceneComponentTable *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  const re::AssetHandle *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[24];

  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
  v4 = re::ServiceLocator::serviceOrNull<re::MaterialParametersService>(v3);
  v5 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = v5;
    v8 = (re::ecs2::SceneComponentTable *)(a2 + 200);
    v9 = re::ecs2::SceneComponentTable::get(v8, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 24);
      if (v10)
      {
        v11 = *(uint64_t **)(v9 + 40);
        v12 = 8 * v10;
        do
        {
          v13 = *v11;
          v14 = (const re::AssetHandle *)(*v11 + 80);
          v15 = *(_QWORD *)(*v11 + 88);
          if (v15 && (v16 = atomic_load((unsigned int *)(v15 + 704)), v16 == 2))
          {
            v17 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 296);
            v18 = *(unsigned __int8 *)(v13 + 76);
            v19 = *(unsigned __int8 *)(v13 + 77);
            v20 = v13 + 28;
            v21 = *(float *)(v13 + 72);
            re::AssetHandle::AssetHandle((re::AssetHandle *)v33, (const re::AssetHandle *)(v13 + 48));
            re::AssetHandle::AssetHandle((re::AssetHandle *)v32, v14);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, _BYTE *, float))(*(_QWORD *)v4 + 48))(v4, v7, v17, v18, v19, v20, v33, v32, v21);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v32);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v33);
          }
          else
          {
            re::AssetHandle::loadAsync((re::AssetHandle *)(*v11 + 80));
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
    }
    v22 = re::ecs2::SceneComponentTable::get(v8, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 24);
      if (v23)
      {
        v24 = *(uint64_t **)(v22 + 40);
        v25 = 8 * v23;
        do
        {
          v26 = *v24;
          v27 = *(_QWORD *)(*v24 + 536);
          if (v27 && (v28 = atomic_load((unsigned int *)(v27 + 704)), v28 == 2))
          {
            v29 = *(_QWORD *)(*(_QWORD *)(v26 + 16) + 296);
            v30 = v26 + 32;
            re::AssetHandle::AssetHandle((re::AssetHandle *)v31, (const re::AssetHandle *)(*v24 + 528));
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v4 + 40))(v4, v7, v29, v30, v31);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v31);
          }
          else
          {
            re::AssetHandle::loadAsync((re::AssetHandle *)(*v24 + 528));
          }
          ++v24;
          v25 -= 8;
        }
        while (v25);
      }
    }
  }
}

void re::ecs2::MaterialParametersSystem::~MaterialParametersSystem(re::ecs2::MaterialParametersSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::MaterialParametersSystem::typeInfo(re::ecs2::MaterialParametersSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialParametersSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MaterialParametersSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MaterialParametersSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MaterialParametersSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::MaterialParametersSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MaterialParametersSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::ecs2::CameraViewDescriptorsHelper::setCameraViewsRenderGraphFileProviders(re::ecs2::CameraViewDescriptorsHelper *this, re::ecs2::Entity *a2)
{
  re::ecs2::CameraViewDescriptorsHelper *v2;
  re::ecs2::EntityComponentCollection *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  re::ecs2::CameraViewDescriptorsHelper *v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  char *v26;
  uint64_t i;
  void *v28;
  void *v29;
  void *v30;
  uint64_t j;
  uint64_t v32;
  re::ecs2::CameraViewDescriptorsComponent *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  re::ecs2::CameraViewDescriptorsComponent *v37;
  re::ecs2::CameraViewDescriptorsComponent *v38;
  re::RenderGraphAsset *ViewDescriptor;
  re::RenderGraphAsset *v40;
  uint64_t v41;
  unint64_t v42;
  _anonymous_namespace_ *v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v50;
  uint64_t v51;
  int v52;
  re::ecs2::CameraViewDescriptorsComponent *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  char v69;
  __int128 v70;
  _DWORD v71[17];
  __int16 v72;
  char v73;
  _QWORD v74[3];
  int v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[12];
  __int16 v79;
  int v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  unint64_t v84;
  _DWORD v85[12];
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v2 = this;
  v88 = *MEMORY[0x24BDAC8D0];
  v3 = (re::ecs2::CameraViewDescriptorsHelper *)((char *)this + 32);
  v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::CameraViewDescriptorsHelper *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v5 = re::ecs2::EntityComponentCollection::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v5)
  {
    v6 = v5;
    v58 = 0;
    v55 = 0;
    v56 = 0;
    v54 = 0;
    v57 = 0;
    if (*(_QWORD *)(v5 + 40))
    {
      v7 = *(_QWORD *)(v5 + 56);
      v54 = *(_QWORD *)(v5 + 40);
      re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity(&v54, v7);
      ++v57;
      v8 = *(_QWORD *)(v6 + 56);
      if (v8 >= v56)
      {
        re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity(&v54, *(_QWORD *)(v6 + 56));
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::RenderGraphFileProviderEntry *,re::ecs2::RenderGraphFileProviderEntry *,re::ecs2::RenderGraphFileProviderEntry *>(*(_QWORD *)(v6 + 72), *(_QWORD *)(v6 + 72) + 80 * v56, v58);
        if (v56 != v8)
        {
          v13 = *(_QWORD *)(v6 + 72);
          v14 = v58;
          v15 = 80 * v56;
          v16 = 80 * v8;
          do
          {
            v17 = v14 + v15;
            re::AssetHandle::AssetHandle((re::AssetHandle *)(v14 + v15), (const re::AssetHandle *)(v13 + v15));
            re::DynamicString::DynamicString((re::DynamicString *)(v14 + v15 + 24), (const re::DynamicString *)(v13 + v15 + 24));
            v18 = *(_OWORD *)(v13 + v15 + 56);
            *(_BYTE *)(v17 + 72) = *(_BYTE *)(v13 + v15 + 72);
            *(_OWORD *)(v17 + 56) = v18;
            v16 -= 80;
            v13 += 80;
            v14 += 80;
          }
          while (v15 != v16);
        }
      }
      else
      {
        v9 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::RenderGraphFileProviderEntry *,re::ecs2::RenderGraphFileProviderEntry *,re::ecs2::RenderGraphFileProviderEntry *>(*(_QWORD *)(v6 + 72), *(_QWORD *)(v6 + 72) + 80 * v8, v58);
        if (v8 != v56)
        {
          v10 = v58 + 80 * v8;
          v11 = 80 * v56 - 80 * v8;
          do
          {
            v12 = *(_QWORD *)(v10 + 24);
            if (v12)
            {
              if ((*(_BYTE *)(v10 + 32) & 1) != 0)
                (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)(v10 + 40), v9);
              *(_OWORD *)(v10 + 24) = 0u;
              *(_OWORD *)(v10 + 40) = 0u;
            }
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
            v10 += 80;
            v11 -= 80;
          }
          while (v11);
        }
      }
      v56 = v8;
    }
  }
  else
  {
    v58 = 0;
    v55 = 0;
    v56 = 0;
    v54 = 0;
    v57 = 0;
  }
  if (*(_QWORD *)(v4 + 216))
  {
    v50 = 0;
    v19 = 0;
    v51 = v4;
    v53 = 0;
    goto LABEL_48;
  }
  do
  {
    v20 = v2;
    v2 = (re::ecs2::CameraViewDescriptorsHelper *)*((_QWORD *)v2 + 3);
  }
  while (v2);
  v21 = *(_QWORD *)(*((_QWORD *)v20 + 2) + 376);
  if (v21)
    v22 = *(_QWORD *)(v21 + 24) == 1;
  else
    v22 = 1;
  v23 = *(_QWORD *)(v4 + 256);
  if (v23)
    v24 = 0;
  else
    v24 = v22;
  if (v24)
  {
    v25 = 0;
    v60 = 0u;
    v61 = 0u;
    v62 = xmmword_2260E5D70;
    *(_QWORD *)&v63 = 0x70000FF00000000;
    WORD4(v63) = 1;
    BYTE12(v63) = 0;
    v68 = 0;
    v65 = 0;
    v66 = 0;
    *((_QWORD *)&v64 + 1) = 0;
    v67 = 0;
    do
    {
      v26 = (char *)&v60 + v25;
      *((_QWORD *)v26 + 18) = 0;
      *((_QWORD *)v26 + 15) = 0;
      *((_QWORD *)v26 + 16) = 0;
      *((_QWORD *)v26 + 14) = 0;
      v25 += 40;
      *((_DWORD *)v26 + 34) = 0;
    }
    while (v25 != 80);
    v69 = 0;
    *(_OWORD *)v71 = xmmword_22610BC10;
    v70 = xmmword_22610BC10;
    memset(&v71[5], 0, 48);
    v72 = 1;
    v73 = 0;
    v76 = 0;
    memset(v74, 0, sizeof(v74));
    v75 = 0;
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add((_anonymous_namespace_ *)(v4 + 240), (re::ecs2::CameraViewDescriptor *)&v60);
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)v74);
    for (i = 272; i != 256; i -= 8)
    {
      v28 = *(void **)((char *)&v60 + i);
      if (v28)
      {

        *(_QWORD *)((char *)&v60 + i) = 0;
      }
    }
    do
    {
      v29 = *(void **)((char *)&v60 + i);
      if (v29)
      {

        *(_QWORD *)((char *)&v60 + i) = 0;
      }
      i -= 8;
    }
    while (i != 240);
    do
    {
      v30 = *(void **)((char *)&v60 + i);
      if (v30)
      {

        *(_QWORD *)((char *)&v60 + i) = 0;
      }
      i -= 8;
    }
    while (i != 224);
    for (j = 152; j != 72; j -= 40)
      re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v60 + j);
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v64 + 8);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v60);
    v32 = *(_QWORD *)(v4 + 216);
    v51 = v4;
    v53 = 0;
    if (v32)
    {
      v19 = 0;
      v50 = 1;
      goto LABEL_48;
    }
    if (!*(_QWORD *)(v4 + 256))
      goto LABEL_46;
LABEL_44:
    v50 = v24;
    v19 = 1;
    goto LABEL_48;
  }
  v51 = v4;
  v53 = 0;
  if (v23)
    goto LABEL_44;
LABEL_46:
  if (!*(_QWORD *)(v4 + 296))
  {
    v36 = 1;
    if (!v24)
      goto LABEL_71;
    v48 = 0;
    goto LABEL_70;
  }
  v50 = v24;
  v19 = 2;
LABEL_48:
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v52 = v19;
  LODWORD(v36) = 1;
  do
  {
    v37 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v33 + 0x20000);
    if (v19 == 1)
      v33 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v33 + 0x10000);
    if (v19 == 2)
      v38 = v37;
    else
      v38 = v33;
    ViewDescriptor = (re::RenderGraphAsset *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor((re::ecs2::CameraViewDescriptorsComponent *)v4, v38);
    v40 = ViewDescriptor;
    if (*((_BYTE *)ViewDescriptor + 192))
    {
      v41 = v34;
      v42 = *(_QWORD *)(v4 + 96);
      if (v42 <= v34)
      {
        v59 = 0;
        v86 = 0u;
        v87 = 0u;
        memset(v85, 0, sizeof(v85));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v78 = 136315906;
        *(_QWORD *)&v78[4] = "operator[]";
        v79 = 1024;
        v80 = 789;
        v81 = 2048;
        v82 = v34;
        v83 = 2048;
        v84 = v42;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_75:
        *(_QWORD *)v78 = 0;
        v64 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v85[0] = 136315906;
        *(_QWORD *)&v85[1] = "operator[]";
        LOWORD(v85[3]) = 1024;
        *(_DWORD *)((char *)&v85[3] + 2) = 789;
        HIWORD(v85[4]) = 2048;
        *(_QWORD *)&v85[5] = v41;
        LOWORD(v85[7]) = 2048;
        *(_QWORD *)((char *)&v85[7] + 2) = v42;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      ++v34;
      v43 = re::CameraMultiView::CameraMultiView((re::CameraMultiView *)&v60, (const re::CameraMultiView *)(*(_QWORD *)(v4 + 112) + 1360 * v41));
      re::DynamicArray<re::RenderGraphFileProvider>::operator=((uint64_t)&v77, (uint64_t *)&v71[3]);
      v45 = 1344;
      do
      {
        v46 = (_QWORD *)((char *)&v60 + v45 - 672);
        re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v60 + v45 - 400);
        re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)&v60 + v45 - 448);
        if (*v46)
        {
          if ((*((_BYTE *)&v60 + v45 - 664) & 1) != 0)
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v46 + 40))(*v46, *(_QWORD *)((char *)&v60 + v45 - 656));
          *(_OWORD *)v46 = 0u;
          *(__int128 *)((char *)&v60 + v45 - 656) = 0u;
        }
        v45 -= 672;
      }
      while (v45);
    }
    else
    {
      v41 = v35;
      v42 = *(_QWORD *)(v4 + 56);
      if (v42 <= v35)
        goto LABEL_75;
      ++v35;
      v47 = *(_QWORD *)(v4 + 72) + 672 * v41;
    }
    v36 = v36 & v44;
    re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++(&v51);
    v19 = v52;
    v33 = v53;
  }
  while (v51 != v4 || v52 != 3 || v53);
  if (v50)
  {
    v48 = *(_QWORD *)(v4 + 256);
LABEL_70:
    *(_QWORD *)(v4 + 256) = 0;
    re::ObjectHelper::destroy<re::ecs2::CameraViewDescriptor>(*(re::AssetHandle **)(v4 + 272), (re::AssetHandle *)(*(_QWORD *)(v4 + 272) + 336 * v48));
    ++*(_DWORD *)(v4 + 264);
  }
LABEL_71:
  re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::deinit((uint64_t)&v54);
  return v36;
}

uint64_t `anonymous namespace'::setRenderGraphFileProviders(uint64_t a1, re::RenderGraphAsset *a2, uint64_t a3, re::Allocator *a4)
{
  _anonymous_namespace_ *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  re::RenderGraphAsset *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;

  v7 = (_anonymous_namespace_ *)(a1 + 224);
  re::DynamicArray<re::RenderGraphFileProvider>::clear((_QWORD *)(a1 + 224));
  re::DynamicArray<re::RenderGraphFileProvider>::setCapacity(v7, *(_QWORD *)(a3 + 16) + 1);
  if (*((_QWORD *)a2 + 1))
  {
    v8 = re::AssetHandle::asset<re::RenderGraphAsset>(a2);
    if (v8)
    {
      v9 = v8 + 8;
      re::DynamicString::DynamicString((re::DynamicString *)&v24, "Camera", a4);
      v23 = v9;
      v26 = 0;
      re::DynamicArray<re::RenderGraphFileProvider>::add(v7, (uint64_t)&v23);
      if (v24)
      {
        if ((v25 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v24 + 40))();
      }
    }
  }
  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    v11 = 0;
    v12 = *(_QWORD *)(a3 + 32);
    v13 = 80 * v10;
    v14 = 1;
    do
    {
      v15 = (re::RenderGraphAsset *)(v12 + v11);
      if (!*(_BYTE *)(v12 + v11 + 72))
      {
        v16 = *((_QWORD *)v15 + 1);
        if (v16 && (v17 = atomic_load((unsigned int *)(v16 + 704)), v17 == 2))
        {
          ++*(_DWORD *)(*((_QWORD *)v15 + 1) + 260);
          v18 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>(v15);
          v19 = v12 + v11;
          if ((*(_BYTE *)(v12 + v11 + 32) & 1) != 0)
            v20 = *(const char **)(v19 + 40);
          else
            v20 = (const char *)(v19 + 33);
          v21 = v18 + 8;
          v23 = 0;
          re::DynamicString::DynamicString((re::DynamicString *)&v24, v20, a4);
          v23 = v21;
          v26 = *(_DWORD *)(v12 + v11 + 56);
          re::DynamicArray<re::RenderGraphFileProvider>::add(v7, (uint64_t)&v23);
          if (v24 && (v25 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v24 + 40))();
        }
        else
        {
          re::AssetHandle::loadAsync(v15);
          v14 = 0;
        }
      }
      v11 += 80;
    }
    while (v13 != v11);
  }
  else
  {
    v14 = 1;
  }
  return v14 & 1;
}

uint64_t re::ecs2::CameraViewDescriptorsHelper::buildCameraViews<re::ecs2::PerspectiveCameraComponent>(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  re::AssetHandle *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  re::Allocator *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  re::ecs2::CameraViewDescriptorsComponent *v28;
  int v29;
  re::ecs2::CameraViewDescriptorsComponent *v30;
  re::ecs2::CameraViewDescriptorsComponent *v31;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  re::DrawingManager *v44;
  float v45;
  uint64_t v46;
  uint64_t ViewDescriptor;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t i;
  void *v53;
  void *v54;
  void *v55;
  uint64_t j;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v63;
  re::DrawingManager *v64;
  float v65;
  float v66;
  _QWORD v71[3];
  int v72;
  uint64_t v73;
  _QWORD v74[3];
  int v75;
  uint64_t v76;
  _QWORD v77[2];
  uint64_t v78;
  int v79;
  uint64_t v80;
  _QWORD v81[2];
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _BYTE v87[24];
  uint64_t v88;
  _BYTE *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  char v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int16 v105;
  char v106;
  _QWORD v107[3];
  int v108;
  uint64_t v109;
  _BYTE v110[28];
  __int16 v111;
  _BYTE v112[10];
  uint64_t v113;

  v6 = a5;
  v7 = a3;
  v8 = a2;
  v9 = a1;
  v113 = *MEMORY[0x24BDAC8D0];
  if (!a5)
    v6 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a2 + 216))
  {
    v10 = 0;
    v11 = 1;
    v12 = 336;
    v9 = 24;
    do
    {
      v13 = *(_QWORD *)(v8 + 232);
      v14 = (re::AssetHandle *)(v13 + 336 * v10);
      v15 = *((_QWORD *)v14 + 1);
      if (v15)
      {
        v16 = atomic_load((unsigned int *)(v15 + 704));
        if (v16 != 2)
        {
          re::AssetHandle::loadAsync(v14);
          v11 = 0;
        }
      }
      v17 = v13 + 336 * v10;
      if (*(_QWORD *)(v17 + 304))
      {
        v18 = 0;
        v19 = (uint64_t *)(v17 + 304);
        v7 = v13 + 336 * v10 + 320;
        while (2)
        {
          v20 = 0;
          v21 = 1;
          do
          {
            v22 = *v19;
            if (*v19 <= (unint64_t)v18)
            {
              v81[0] = 0;
              v93 = 0u;
              v94 = 0u;
              v91 = 0u;
              v92 = 0u;
              v90 = 0u;
              v8 = MEMORY[0x24BDACB70];
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v110 = 136315906;
              *(_QWORD *)&v110[4] = "operator[]";
              *(_WORD *)&v110[12] = 1024;
              *(_DWORD *)&v110[14] = 797;
              *(_WORD *)&v110[18] = 2048;
              *(_QWORD *)&v110[20] = v18;
              v111 = 2048;
              *(_QWORD *)v112 = v22;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_26;
            }
            v12 = v21;
            v23 = *(_QWORD *)v7 + 136 * (_QWORD)v18 + 24 * v20;
            v24 = *(_QWORD *)(v23 + 40);
            if (v24)
            {
              v25 = atomic_load((unsigned int *)(v24 + 704));
              if (v25 != 2)
              {
                re::AssetHandle::loadAsync((re::AssetHandle *)(v23 + 32));
                v11 = 0;
              }
            }
            v21 = 0;
            v20 = 1;
          }
          while ((v12 & 1) != 0);
          v18 = (re::Allocator *)((char *)v18 + 1);
          if (*v19 > (unint64_t)v18)
            continue;
          break;
        }
      }
      ++v10;
      v12 = 336;
    }
    while (*(_QWORD *)(v8 + 216) > v10);
    v7 = a3;
    v9 = a1;
    if ((v11 & 1) == 0)
      return 1;
  }
  *(_QWORD *)&v112[2] = 0;
  memset(v110, 0, sizeof(v110));
  v26 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v85 = 0;
  v86 = 0;
  re::ecs2::CameraViewDescriptorsComponent::getCameraViewsCount((uint64_t *)v8, &v86, &v85);
  v84 = 0;
  v81[1] = 0;
  v82 = 0;
  v83 = 0;
  v18 = a4;
  v81[0] = a4;
  re::DynamicArray<re::CameraView>::setCapacity(v81, v86);
  ++v83;
  v80 = 0;
  v77[1] = 0;
  v78 = 0;
  v79 = 0;
  v77[0] = a4;
  re::DynamicArray<re::CameraMultiView>::setCapacity(v77, v85);
  ++v79;
  v76 = 0;
  v74[1] = 0;
  v74[2] = 0;
  v75 = 0;
  v74[0] = a4;
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(v74, v86);
  ++v75;
  v73 = 0;
  v71[1] = 0;
  v71[2] = 0;
  v72 = 0;
  v71[0] = a4;
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(v71, v85);
  v27 = 0;
  ++v72;
  if (v26)
    v19 = (uint64_t *)(v26 + 40);
  else
    v19 = (uint64_t *)v110;
  *(_QWORD *)&v90 = v8;
  *(_QWORD *)&v91 = 0;
  v12 = a6;
  if (!*(_QWORD *)(v8 + 216))
  {
    if (*(_QWORD *)(v8 + 256))
    {
      v27 = 1;
    }
    else
    {
LABEL_26:
      if (!*(_QWORD *)(v8 + 296))
      {
        v29 = 1;
LABEL_44:
        v35 = v6;
        do
        {
          v36 = v35;
          v35 = *(_QWORD *)(v35 + 24);
        }
        while (v35);
        v37 = *(_QWORD *)(*(_QWORD *)(v36 + 16) + 376);
        if (v37)
          LOBYTE(v37) = *(_QWORD *)(v37 + 24) != 1;
        if (!*(_QWORD *)(v8 + 256) && (v37 & 1) == 0)
        {
          v38 = 0;
          v90 = 0u;
          v91 = 0u;
          v92 = xmmword_2260E5D70;
          *(_QWORD *)&v93 = 0x70000FF00000000;
          WORD4(v93) = 1;
          BYTE12(v93) = 0;
          v98 = 0;
          v95 = 0;
          v96 = 0;
          *((_QWORD *)&v94 + 1) = 0;
          v97 = 0;
          do
          {
            v39 = (char *)&v90 + v38;
            *((_QWORD *)v39 + 18) = 0;
            *((_QWORD *)v39 + 15) = 0;
            *((_QWORD *)v39 + 16) = 0;
            *((_QWORD *)v39 + 14) = 0;
            v38 += 40;
            *((_DWORD *)v39 + 34) = 0;
          }
          while (v38 != 80);
          v99 = 0;
          v101 = xmmword_22610BC10;
          v100 = xmmword_22610BC10;
          v104 = 0u;
          v102 = 0u;
          v103 = 0u;
          v105 = 1;
          v106 = 0;
          v109 = 0;
          memset(v107, 0, sizeof(v107));
          v108 = 0;
          re::DynamicArray<re::ecs2::CameraViewDescriptor>::add((_anonymous_namespace_ *)(v8 + 240), (re::ecs2::CameraViewDescriptor *)&v90);
          if (*(_BYTE *)(v7 + 44))
          {
            v41 = v7;
            v42 = v84;
            v43 = v82 - 1;
            v44 = *(re::DrawingManager **)(v9 + 104);
            if (v44)
              v45 = re::DrawingManager::layerAspect(v44, 0, v40);
            else
              v45 = 1.0;
            re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(v41, (float *)(v42 + 672 * v43 + 64), v45);
          }
          v51 = *(_QWORD *)(v8 + 256);
          *(_QWORD *)(v8 + 256) = 0;
          re::ObjectHelper::destroy<re::ecs2::CameraViewDescriptor>(*(re::AssetHandle **)(v8 + 272), (re::AssetHandle *)(*(_QWORD *)(v8 + 272) + 336 * v51));
          ++*(_DWORD *)(v8 + 264);
          re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)v107);
          for (i = 272; i != 256; i -= 8)
          {
            v53 = *(void **)((char *)&v90 + i);
            if (v53)
            {

              *(_QWORD *)((char *)&v90 + i) = 0;
            }
          }
          do
          {
            v54 = *(void **)((char *)&v90 + i);
            if (v54)
            {

              *(_QWORD *)((char *)&v90 + i) = 0;
            }
            i -= 8;
          }
          while (i != 240);
          do
          {
            v55 = *(void **)((char *)&v90 + i);
            if (v55)
            {

              *(_QWORD *)((char *)&v90 + i) = 0;
            }
            i -= 8;
          }
          while (i != 224);
          for (j = 152; j != 72; j -= 40)
            re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v90 + j);
          re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v94 + 8);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v90);
        }
        goto LABEL_76;
      }
      v27 = 2;
    }
  }
  v28 = 0;
  DWORD2(v90) = v27;
  v29 = 1;
  do
  {
    v30 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v28 + 0x20000);
    if (v27 == 1)
      v28 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v28 + 0x10000);
    if (v27 == 2)
      v31 = v30;
    else
      v31 = v28;
    re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)&v90);
    v27 = DWORD2(v90);
    v28 = (re::ecs2::CameraViewDescriptorsComponent *)v91;
  }
  while ((_QWORD)v90 != v8 || DWORD2(v90) != 3 || (_QWORD)v91 != 0);
  v34 = *(_QWORD *)(v8 + 216);
  if (v34 == 1)
  {
    if (!*(_QWORD *)(v8 + 256) && !*(_QWORD *)(*(_QWORD *)(v8 + 232) + 304))
    {
      v46 = v7;
      ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor((re::ecs2::CameraViewDescriptorsComponent *)v8, 0);
      v49 = v82 ? v84 + 672 * v82 - 672 : v80 + 1360 * v78 - 1360;
      if (*(_BYTE *)(v46 + 44))
      {
        LODWORD(v48) = *(_DWORD *)(ViewDescriptor + 204);
        v63 = *(float *)(ViewDescriptor + 208);
        v64 = *(re::DrawingManager **)(v9 + 104);
        v65 = *(float *)&v48 / v63;
        if (v64)
          v66 = re::DrawingManager::layerAspect(v64, 0, v48);
        else
          v66 = 1.0;
        re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(v46, (float *)(v49 + 64), v65 * v66);
      }
    }
    goto LABEL_76;
  }
  if (!v34)
    goto LABEL_44;
LABEL_76:
  if (*(_QWORD *)(v8 + 296))
  {
    v57 = 0;
    v58 = 336;
    do
    {
      v59 = *(_QWORD *)(v8 + 312);
      v60 = *(_QWORD *)(v9 + 104);
      if (v60)
        v61 = re::RenderFrameBox::get(v60 + 344, 0xFFFFFFFFFFFFFFFuLL);
      else
        v61 = 0;
      v88 = *(_QWORD *)(v59 + v58 + 24);
      v89 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v87, v59 + v58);
      re::DynamicArray<re::Function<void ()(re::FrameCount)>>::add((_anonymous_namespace_ *)(v61 + 3832), (uint64_t)v87);
      if (v89)
      {
        (**(void (***)(_BYTE *))v89)(v89);
        if (v89 != v87)
          (*(void (**)(uint64_t))(*(_QWORD *)v88 + 40))(v88);
        v89 = 0;
      }
      ++v57;
      v58 += 384;
    }
    while (*(_QWORD *)(v8 + 296) > v57);
  }
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 40, (uint64_t)v81);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 80, (uint64_t)v77);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 120, (uint64_t)v74);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 160, (uint64_t)v71);
  if (v29)
    v50 = 0;
  else
    v50 = 2;
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::deinit(v71);
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::deinit(v74);
  re::DynamicArray<re::CameraMultiView>::deinit((uint64_t)v77);
  re::DynamicArray<re::CameraView>::deinit((uint64_t)v81);
  re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::deinit((uint64_t)v110);
  return v50;
}

uint64_t `anonymous namespace'::buildOneCameraView<re::ecs2::PerspectiveCameraComponent>(_anonymous_namespace_ *a1, re::ecs2::CameraViewDescriptorsComponent *a2, uint64_t a3, re::ecs2::CameraViewDescriptorsComponent *this, _anonymous_namespace_ *a5, _anonymous_namespace_ *a6, _anonymous_namespace_ *a7, _anonymous_namespace_ *a8, uint64_t a9, re::Allocator *a10, re::ecs2::Entity *a11, uint64_t a12)
{
  re::ecs2::CameraViewDescriptorsComponent *v15;
  uint64_t *v16;
  int v17;
  re::Allocator *v18;
  unint64_t v19;
  re::ecs2::CameraViewDescriptorsComponent *v20;
  int *v21;
  re::CameraMultiView *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  re::CameraMultiView *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _BYTE *v71;
  unint64_t v72;
  char v73;
  _anonymous_namespace_ *v74;
  char v75;
  unint64_t v76;
  char *v77;
  float *v78;
  uint64_t v79;
  float v80;
  float v81;
  uint64_t v82;
  double v83;
  float v84;
  uint64_t v85;
  id v86;
  float v87;
  float v88;
  id v89;
  unsigned int v90;
  re::DrawingManager *v91;
  unint64_t v92;
  void *v93;
  id v94;
  id v95;
  float v96;
  void *v97;
  uint64_t *v98;
  id v99;
  float v100;
  uint64_t v101;
  _QWORD *v102;
  re::CameraMultiView *v104;
  double v105;
  _anonymous_namespace_ *v106;
  uint64_t v107;
  float v108;
  float v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  float v114;
  float v115;
  unsigned int v116;
  re::DrawingManager *v117;
  uint64_t v118;
  void *v119;
  id v120;
  void *v121;
  void *v122;
  id v123;
  float v124;
  unsigned int v125;
  uint64_t v126;
  _BYTE *v127;
  re::DynamicString *v128;
  char v129;
  uint64_t v131;
  int *v133;
  re::ecs2::CameraViewDescriptorsComponent *v134;
  _BYTE *v135;
  _anonymous_namespace_ *v137;
  re::ecs2::Entity *v139;
  re::ecs2::Entity *v140;
  re::CameraMultiView *ViewDescriptor;
  _BYTE v142[224];
  uint64_t v143[56];
  uint64_t v144;
  _WORD v145[232];
  uint64_t v146;
  char v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _WORD v160[24];
  _OWORD v161[7];
  re::ecs2::CameraViewDescriptorsComponent *v162;
  char v163;
  BOOL v164;
  char v165;
  BOOL v166;
  int v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  _OWORD v182[2];
  uint64_t v183;
  uint64_t v184;
  __int16 v185;
  __int16 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;

  v15 = a2;
  v191 = *MEMORY[0x24BDAC8D0];
  v139 = a11;
  if (!a11)
    v139 = (re::ecs2::Entity *)*((_QWORD *)this + 2);
  v16 = &v183;
  ViewDescriptor = (re::CameraMultiView *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
  v17 = *((unsigned __int8 *)ViewDescriptor + 192);
  re::CameraView::CameraView((re::CameraView *)&v146, a10);
  re::CameraView::CameraView((re::CameraView *)v142, a10);
  re::CameraView::CameraView((re::CameraView *)&v144, a10);
  v145[224] = 2;
  v148 = 0uLL;
  *((_QWORD *)&v149 + 1) = 0x3F80000000000000;
  *(_QWORD *)&v149 = 0;
  if (v17)
  {
    v19 = *((_QWORD *)a6 + 2);
    if (*((_QWORD *)this + 22) <= v19
      || !re::ecs2::CameraViewDescriptor::operator==((float32x4_t *)ViewDescriptor, (float32x4_t *)(*((_QWORD *)this + 24) + 336 * v19)))
    {
      v22 = ViewDescriptor;
      re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a8, ViewDescriptor);
      goto LABEL_10;
    }
    v20 = v15;
    v21 = (int *)*((_QWORD *)this + 12);
    if ((unint64_t)v21 <= v19)
      goto LABEL_112;
    re::CameraMultiView::operator=((uint64_t)v142, *((_QWORD *)this + 14) + 1360 * v19);
    v21 = (int *)*((_QWORD *)this + 22);
    if ((unint64_t)v21 > v19)
    {
      re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a8, (uint64_t *)(*((_QWORD *)this + 24) + 336 * v19));
      v22 = ViewDescriptor;
      v15 = v20;
LABEL_10:
      re::DynamicArray<re::RenderGraphFileProvider>::operator=((uint64_t)v145, v143);
      goto LABEL_34;
    }
LABEL_113:
    *((_OWORD *)v16 + 6) = 0u;
    *((_OWORD *)v16 + 7) = 0u;
    *((_OWORD *)v16 + 4) = 0u;
    *((_OWORD *)v16 + 5) = 0u;
    *((_OWORD *)v16 + 3) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v183) = 136315906;
    *(uint64_t *)((char *)v16 + 4) = (uint64_t)"operator[]";
    WORD2(v184) = 1024;
    *(_DWORD *)((char *)v16 + 14) = 789;
    v185 = 2048;
    *(uint64_t *)((char *)v16 + 20) = v19;
    v186 = 2048;
    *(uint64_t *)((char *)v16 + 30) = (uint64_t)v21;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_114;
  }
  v19 = *((_QWORD *)a5 + 2);
  if (*((_QWORD *)this + 17) > v19
    && re::ecs2::CameraViewDescriptor::operator==((float32x4_t *)ViewDescriptor, (float32x4_t *)(*((_QWORD *)this + 19) + 336 * v19)))
  {
    v134 = v15;
    v21 = (int *)*((_QWORD *)this + 7);
    if ((unint64_t)v21 <= v19)
    {
LABEL_114:
      *((_OWORD *)v16 + 6) = 0u;
      *((_OWORD *)v16 + 7) = 0u;
      *((_OWORD *)v16 + 4) = 0u;
      *((_OWORD *)v16 + 5) = 0u;
      *((_OWORD *)v16 + 3) = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v183) = 136315906;
      *(uint64_t *)((char *)v16 + 4) = (uint64_t)"operator[]";
      WORD2(v184) = 1024;
      *(_DWORD *)((char *)v16 + 14) = 789;
      v185 = 2048;
      *(uint64_t *)((char *)v16 + 20) = v19;
      v186 = 2048;
      *(uint64_t *)((char *)v16 + 30) = (uint64_t)v21;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_115;
    }
    v23 = *((_QWORD *)this + 9);
    v24 = v23 + 672 * v19;
    re::DynamicString::operator=((re::DynamicString *)&v146, (re::DynamicString *)v24);
    v25 = *(_OWORD *)(v24 + 32);
    v26 = *(_OWORD *)(v24 + 48);
    v27 = *(_OWORD *)(v24 + 80);
    v150 = *(_OWORD *)(v24 + 64);
    v151 = v27;
    v148 = v25;
    v149 = v26;
    v28 = *(_OWORD *)(v24 + 96);
    v29 = *(_OWORD *)(v24 + 112);
    v30 = *(_OWORD *)(v24 + 144);
    v154 = *(_OWORD *)(v24 + 128);
    v155 = v30;
    v152 = v28;
    v153 = v29;
    v31 = *(_OWORD *)(v24 + 160);
    v32 = *(_OWORD *)(v24 + 176);
    v33 = *(_OWORD *)(v24 + 208);
    v158 = *(_OWORD *)(v24 + 192);
    v159 = v33;
    v156 = v31;
    v157 = v32;
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v160, v24 + 224);
    v160[20] = *(_WORD *)(v24 + 264);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v161, v24 + 272);
    v161[3] = *(_OWORD *)(v24 + 320);
    v35 = *(_OWORD *)(v24 + 352);
    v34 = *(_OWORD *)(v24 + 368);
    v36 = *(_OWORD *)(v24 + 336);
    v162 = *(re::ecs2::CameraViewDescriptorsComponent **)(v24 + 384);
    v161[5] = v35;
    v161[6] = v34;
    v161[4] = v36;
    v163 = *(_BYTE *)(v24 + 400);
    if (v164 || *(_BYTE *)(v24 + 401))
    {
      if (!v164 || *(_BYTE *)(v24 + 401))
      {
        if (!v164)
          v164 = *(_BYTE *)(v24 + 401) != 0;
        v165 = *(_BYTE *)(v23 + 672 * v19 + 402);
      }
      else
      {
        v164 = 0;
      }
    }
    if (v166 || *(_BYTE *)(v23 + 672 * v19 + 404))
    {
      if (!v166 || *(_BYTE *)(v23 + 672 * v19 + 404))
      {
        if (!v166)
          v166 = *(_BYTE *)(v23 + 672 * v19 + 404) != 0;
        v167 = *(_DWORD *)(v23 + 672 * v19 + 408);
      }
      else
      {
        v166 = 0;
      }
    }
    v37 = v23 + 672 * v19;
    v38 = *(_OWORD *)(v37 + 416);
    v39 = *(_OWORD *)(v37 + 432);
    v40 = *(_OWORD *)(v37 + 464);
    v170 = *(_OWORD *)(v37 + 448);
    v171 = v40;
    v168 = v38;
    v169 = v39;
    v41 = *(_OWORD *)(v37 + 480);
    v42 = *(_OWORD *)(v37 + 496);
    v43 = *(_OWORD *)(v37 + 528);
    v174 = *(_OWORD *)(v37 + 512);
    v175 = v43;
    v172 = v41;
    v173 = v42;
    v45 = *(_OWORD *)(v37 + 624);
    v44 = *(_OWORD *)(v37 + 640);
    v46 = *(_OWORD *)(v37 + 608);
    *(_QWORD *)((char *)v182 + 13) = *(_QWORD *)(v37 + 653);
    v181 = v45;
    v182[0] = v44;
    v180 = v46;
    v47 = *(_OWORD *)(v37 + 544);
    v48 = *(_OWORD *)(v37 + 560);
    v49 = *(_OWORD *)(v37 + 592);
    v178 = *(_OWORD *)(v37 + 576);
    v179 = v49;
    v176 = v47;
    v177 = v48;
    v21 = (int *)*((_QWORD *)this + 17);
    if ((unint64_t)v21 <= v19)
    {
LABEL_115:
      *((_OWORD *)v16 + 6) = 0u;
      *((_OWORD *)v16 + 7) = 0u;
      *((_OWORD *)v16 + 4) = 0u;
      *((_OWORD *)v16 + 5) = 0u;
      *((_OWORD *)v16 + 3) = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v183) = 136315906;
      *(uint64_t *)((char *)v16 + 4) = (uint64_t)"operator[]";
      WORD2(v184) = 1024;
      *(_DWORD *)((char *)v16 + 14) = 789;
      v185 = 2048;
      *(uint64_t *)((char *)v16 + 20) = v19;
      v186 = 2048;
      *(uint64_t *)((char *)v16 + 30) = (uint64_t)v21;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a7, (uint64_t *)(*((_QWORD *)this + 19) + 336 * v19));
    v22 = ViewDescriptor;
    v15 = v134;
  }
  else
  {
    v22 = ViewDescriptor;
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a7, ViewDescriptor);
  }
LABEL_34:
  if (!*((_BYTE *)v22 + 192))
  {
    re::ecs2::CameraViewDescriptorsComponent::viewScopeName(this, v15, v139, a10, 0, (re::DynamicString *)&v187);
    re::DynamicString::operator=((re::DynamicString *)&v146, (re::DynamicString *)&v187);
    if ((_QWORD)v187 && (BYTE8(v187) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v187 + 40))(v187, v188);
    re::ecs2::PerspectiveCameraComponent::calculateProjection((float *)a3, (uint64_t)&v187, 1.0);
    v172 = v187;
    v173 = v188;
    v174 = v189;
    v175 = v190;
    v104 = ViewDescriptor;
    v176 = *(_OWORD *)((char *)ViewDescriptor + 196);
    re::ecs2::PerspectiveCameraComponent::calculateProjection((float *)a3, (uint64_t)&v187, 1.0);
    v152 = v189;
    v153 = v190;
    v150 = v187;
    v151 = v188;
    v177 = xmmword_22610BC10;
    v156 = v187;
    v157 = v188;
    v158 = v189;
    v159 = v190;
    v162 = v15;
    *(_QWORD *)&v105 = re::DynamicArray<re::CameraView>::add(a5, (re::DynamicString *)&v146).n128_u64[0];
    v106 = a1;
    if (!*((_QWORD *)ViewDescriptor + 38))
      goto LABEL_74;
    v107 = 0;
    v19 = 0;
    v140 = (re::ecs2::Entity *)(*((_QWORD *)a5 + 4) + 672 * (*((_QWORD *)a5 + 2) - 1));
    v21 = (int *)((char *)v140 + 648);
    v16 = (uint64_t *)&selRef_newBufferWithBytes_length_options_;
    while (1)
    {
      v108 = *((float *)v104 + 51);
      v109 = *((float *)v104 + 52);
      v110 = *((_QWORD *)v104 + 40);
      v111 = v110 + v107;
      if (!*(_QWORD *)(v110 + v107 + 40))
        break;
      v112 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v111 + 32));
      if (*(_DWORD *)(v112 + 240))
      {
LABEL_111:
        std::__throw_bad_variant_access[abi:nn180100]();
LABEL_112:
        *((_OWORD *)v16 + 6) = 0u;
        *((_OWORD *)v16 + 7) = 0u;
        *((_OWORD *)v16 + 4) = 0u;
        *((_OWORD *)v16 + 5) = 0u;
        *((_OWORD *)v16 + 3) = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v183) = 136315906;
        *(uint64_t *)((char *)v16 + 4) = (uint64_t)"operator[]";
        WORD2(v184) = 1024;
        *(_DWORD *)((char *)v16 + 14) = 789;
        v185 = 2048;
        *(uint64_t *)((char *)v16 + 20) = v19;
        v186 = 2048;
        *(uint64_t *)((char *)v16 + 30) = (uint64_t)v21;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_113;
      }
      v113 = *(id *)(v112 + 160);
      v114 = (float)(unint64_t)objc_msgSend(v113, sel_width);
      *(float *)&v105 = (float)(unint64_t)objc_msgSend(v113, sel_height);
      v115 = v114 / *(float *)&v105;
      if (v113)

LABEL_106:
      if (*(_BYTE *)(a3 + 44))
      {
        v124 = (float)(v108 / v109) * v115;
        re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(a3, (float *)v140 + 16, v124);
        *(float *)&v105 = re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(a3, (float *)v140 + 40, v124);
      }
      ++v19;
      v107 += 136;
      v106 = a1;
      if (*((_QWORD *)v104 + 38) <= v19)
        goto LABEL_74;
    }
    v116 = *(_DWORD *)(v111 + 80);
    if (v116 != -1)
    {
      v117 = (re::DrawingManager *)*((_QWORD *)v106 + 13);
      if (v117)
      {
        *(float *)&v105 = re::DrawingManager::layerAspect(v117, v116, v105);
        v115 = *(float *)&v105;
      }
      else
      {
        v115 = 1.0;
      }
      goto LABEL_106;
    }
    v118 = v110 + v107;
    v119 = *(void **)(v110 + v107 + 88);
    if (v119)
    {
      v120 = objc_msgSend(v119, sel_width, v105);
      v121 = *(void **)(v118 + 88);
    }
    else
    {
      v122 = *(void **)(v118 + 104);
      if (!v122)
      {
        v115 = 1.0;
LABEL_105:
        v104 = ViewDescriptor;
        goto LABEL_106;
      }
      v120 = objc_msgSend(v122, sel_width, v105);
      v121 = *(void **)(v118 + 104);
    }
    v123 = objc_msgSend(v121, sel_height);
    re::ecs2::PerspectiveCameraComponent::localEyePose((_OWORD *)a3, *v21, (uint64_t)&v187);
    if (a12 && !*(_DWORD *)(a12 + 24))
    {
      re::RenderFrameWorkloadPatchCamera::trackLocalEyePose(a12, &v187, *v21, v140);
      *((_BYTE *)v140 + 347) = *(_BYTE *)(a12 + 28);
    }
    *(float *)&v105 = (float)(unint64_t)v120;
    v115 = (float)(unint64_t)v120 / (float)(unint64_t)v123;
    goto LABEL_105;
  }
  re::DynamicArray<re::CameraMultiView>::add(a6, (uint64_t)v142);
  v50 = *((_QWORD *)a6 + 4);
  v51 = *((_QWORD *)a6 + 2) - 1;
  re::ecs2::CameraViewDescriptorsComponent::viewScopeName(this, v15, v139, a10, 0, (re::DynamicString *)&v187);
  v126 = v50 + 1360 * v51;
  re::DynamicString::operator=((re::DynamicString *)v126, (re::DynamicString *)&v187);
  if ((_QWORD)v187 && (BYTE8(v187) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v187 + 40))();
  re::ecs2::PerspectiveCameraComponent::calculateProjection((float *)a3, (uint64_t)&v187, 1.0);
  v52 = v187;
  v53 = v188;
  v54 = v190;
  *(_OWORD *)(v126 + 512) = v189;
  *(_OWORD *)(v126 + 528) = v54;
  *(_OWORD *)(v126 + 480) = v52;
  *(_OWORD *)(v126 + 496) = v53;
  *(_OWORD *)(v126 + 544) = *(_OWORD *)((char *)ViewDescriptor + 196);
  re::ecs2::PerspectiveCameraComponent::calculateProjection((float *)a3, (uint64_t)&v187, 1.0);
  v55 = v187;
  v56 = v188;
  v57 = v190;
  *(_OWORD *)(v126 + 96) = v189;
  *(_OWORD *)(v126 + 112) = v57;
  *(_OWORD *)(v126 + 64) = v55;
  *(_OWORD *)(v126 + 80) = v56;
  *(_OWORD *)(v126 + 560) = xmmword_22610BC10;
  v58 = *(_OWORD *)(v126 + 80);
  *(_OWORD *)(v126 + 160) = *(_OWORD *)(v126 + 64);
  *(_OWORD *)(v126 + 176) = v58;
  v59 = *(_OWORD *)(v126 + 112);
  *(_OWORD *)(v126 + 192) = *(_OWORD *)(v126 + 96);
  *(_OWORD *)(v126 + 208) = v59;
  *(_QWORD *)(v126 + 384) = v15;
  re::ecs2::CameraViewDescriptorsComponent::viewScopeName(this, v15, v139, a10, 1, (re::DynamicString *)&v187);
  re::DynamicString::operator=((re::DynamicString *)(v126 + 672), (re::DynamicString *)&v187);
  if ((_QWORD)v187 && (BYTE8(v187) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v187 + 40))();
  re::ecs2::PerspectiveCameraComponent::calculateProjection((float *)a3, (uint64_t)&v187, 1.0);
  v60 = v187;
  v61 = v188;
  v62 = v189;
  *(_OWORD *)(v126 + 1200) = v190;
  *(_OWORD *)(v126 + 1184) = v62;
  *(_OWORD *)(v126 + 1168) = v61;
  *(_OWORD *)(v126 + 1152) = v60;
  v63 = ViewDescriptor;
  *(_OWORD *)(v126 + 1216) = *(_OWORD *)((char *)ViewDescriptor + 212);
  re::ecs2::PerspectiveCameraComponent::calculateProjection((float *)a3, (uint64_t)&v187, 1.0);
  v64 = 0;
  v65 = v187;
  v66 = v188;
  v67 = v190;
  *(_OWORD *)(v126 + 768) = v189;
  *(_OWORD *)(v126 + 784) = v67;
  *(_OWORD *)(v126 + 736) = v65;
  *(_OWORD *)(v126 + 752) = v66;
  *(_OWORD *)(v126 + 1232) = xmmword_22610BC10;
  v68 = *(_OWORD *)(v126 + 784);
  *(_OWORD *)(v126 + 864) = *(_OWORD *)(v126 + 768);
  *(_OWORD *)(v126 + 880) = v68;
  v69 = *(_OWORD *)(v126 + 752);
  *(_OWORD *)(v126 + 832) = *(_OWORD *)(v126 + 736);
  *(_OWORD *)(v126 + 848) = v69;
  *(_QWORD *)(v126 + 1056) = v15;
  v70 = v50 + 1360 * v51;
  v71 = (_BYTE *)(v70 + 1344);
  v135 = (_BYTE *)(v70 + 1345);
  v72 = *((_QWORD *)ViewDescriptor + 38);
  v73 = 1;
  v74 = a1;
  do
  {
    v75 = v73;
    if (!v72)
      goto LABEL_73;
    v129 = v73;
    v19 = 0;
    v76 = 0;
    v128 = (re::DynamicString *)(v126 + 672 * v64);
    v77 = (char *)v63 + 16 * v64;
    v21 = (int *)(v77 + 204);
    v78 = (float *)(v77 + 208);
    v133 = (int *)((char *)v128 + 648);
    v127 = (char *)v128 + 347;
    v131 = 8 * v64;
    v137 = (_anonymous_namespace_ *)(4 * v64 + 80);
    v79 = 24 * v64 + 32;
    v16 = (uint64_t *)a3;
    do
    {
      v80 = *(float *)v21;
      v81 = *v78;
      v82 = *((_QWORD *)v63 + 40);
      re::AssetHandle::AssetHandle((re::AssetHandle *)&v183, (const re::AssetHandle *)(v82 + v79 + v19));
      if (*v71 == 1)
        re::AssetHandle::operator=(&v183, (uint64_t *)(v82 + v19 + 32));
      v84 = v80 / v81;
      if (v184)
      {
        v85 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)&v183);
        if (*(_DWORD *)(v85 + 240))
          goto LABEL_111;
        v86 = *(id *)(v85 + 160);
        v87 = (float)(unint64_t)objc_msgSend(v86, sel_width);
        v88 = v87 / (float)(unint64_t)objc_msgSend(v86, sel_height);
        v89 = objc_msgSend(v86, sel_arrayLength);
        if (v86)

LABEL_65:
        if (*v71 == 1 && (unint64_t)v89 >= 2)
        {
          *v135 = 1;
          v84 = *(float *)v21 / *v78;
          if ((objc_msgSend(*((id *)v74 + 23), "supportsTexture2DMultisampleArray") & 1) == 0)
            *((_DWORD *)v128 + 89) = 1;
        }
        goto LABEL_69;
      }
      v90 = *(_DWORD *)((char *)v137 + v82 + v19);
      if (v90 == -1)
      {
        v92 = v82 + v131 + v19;
        v93 = *(void **)(v92 + 88);
        if (v93)
        {
          v94 = objc_msgSend(v93, sel_width);
          v95 = objc_msgSend(*(id *)(v92 + 88), sel_height);
          v89 = objc_msgSend(*(id *)(v92 + 88), sel_arrayLength);
          re::ecs2::PerspectiveCameraComponent::localEyePose(v16, *v133, (uint64_t)&v187);
          if (a12 && !*(_DWORD *)(a12 + 24))
          {
            re::RenderFrameWorkloadPatchCamera::trackLocalEyePose(a12, &v187, *v133, v128);
            *v127 = *(_BYTE *)(a12 + 28);
          }
          v96 = (float)(unint64_t)v94;
        }
        else
        {
          v97 = *(void **)(v92 + 104);
          if (!v97)
            goto LABEL_71;
          v98 = v16;
          v99 = objc_msgSend(v97, sel_width);
          v95 = objc_msgSend(*(id *)(v92 + 104), sel_height);
          v89 = objc_msgSend(*(id *)(v92 + 104), sel_arrayLength);
          re::ecs2::PerspectiveCameraComponent::localEyePose(v98, *v133, (uint64_t)&v187);
          if (a12 && !*(_DWORD *)(a12 + 24))
          {
            re::RenderFrameWorkloadPatchCamera::trackLocalEyePose(a12, &v187, *v133, v128);
            *v127 = *(_BYTE *)(a12 + 28);
          }
          v96 = (float)(unint64_t)v99;
        }
        v88 = v96 / (float)(unint64_t)v95;
        v16 = (uint64_t *)a3;
        v74 = a1;
        goto LABEL_65;
      }
      v91 = (re::DrawingManager *)*((_QWORD *)v74 + 13);
      if (v91)
        v88 = re::DrawingManager::layerAspect(v91, v90, v83);
      else
        v88 = 1.0;
LABEL_69:
      if (*((_BYTE *)v16 + 44))
      {
        v100 = v88 * v84;
        re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect((uint64_t)v16, (float *)v128 + 16, v100);
        re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect((uint64_t)v16, (float *)v128 + 40, v100);
      }
LABEL_71:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v183);
      ++v76;
      v63 = ViewDescriptor;
      v72 = *((_QWORD *)ViewDescriptor + 38);
      v19 += 136;
    }
    while (v72 > v76);
    v75 = v129;
LABEL_73:
    v73 = 0;
    v64 = 1;
  }
  while ((v75 & 1) != 0);
LABEL_74:
  v101 = 1344;
  do
  {
    v102 = &v142[v101 - 672];
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v142[v101 - 400]);
    re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)&v142[v101 - 448]);
    if (*v102)
    {
      if ((v142[v101 - 664] & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v102 + 40))(*v102, *(_QWORD *)&v142[v101 - 656]);
      *(_OWORD *)v102 = 0u;
      *(_OWORD *)&v142[v101 - 656] = 0u;
    }
    v101 -= 672;
  }
  while (v101);
  re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v161);
  re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)v160);
  if (v146 && (v147 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v146 + 40))();
  return v125;
}

uint64_t re::ecs2::CameraViewDescriptorsHelper::buildCameraViews<re::ecs2::OrthographicCameraComponent>(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  re::AssetHandle *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  re::Allocator *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  re::ecs2::CameraViewDescriptorsComponent *v28;
  int v29;
  re::ecs2::CameraViewDescriptorsComponent *v30;
  re::ecs2::CameraViewDescriptorsComponent *v31;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  re::DrawingManager *v44;
  float v45;
  uint64_t v46;
  uint64_t ViewDescriptor;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t i;
  void *v53;
  void *v54;
  void *v55;
  uint64_t j;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v63;
  re::DrawingManager *v64;
  float v65;
  float v66;
  _QWORD v71[3];
  int v72;
  uint64_t v73;
  _QWORD v74[3];
  int v75;
  uint64_t v76;
  _QWORD v77[2];
  uint64_t v78;
  int v79;
  uint64_t v80;
  _QWORD v81[2];
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _BYTE v87[24];
  uint64_t v88;
  _BYTE *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  char v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int16 v105;
  char v106;
  _QWORD v107[3];
  int v108;
  uint64_t v109;
  _BYTE v110[28];
  __int16 v111;
  _BYTE v112[10];
  uint64_t v113;

  v6 = a5;
  v7 = a3;
  v8 = a2;
  v9 = a1;
  v113 = *MEMORY[0x24BDAC8D0];
  if (!a5)
    v6 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a2 + 216))
  {
    v10 = 0;
    v11 = 1;
    v12 = 336;
    v9 = 24;
    do
    {
      v13 = *(_QWORD *)(v8 + 232);
      v14 = (re::AssetHandle *)(v13 + 336 * v10);
      v15 = *((_QWORD *)v14 + 1);
      if (v15)
      {
        v16 = atomic_load((unsigned int *)(v15 + 704));
        if (v16 != 2)
        {
          re::AssetHandle::loadAsync(v14);
          v11 = 0;
        }
      }
      v17 = v13 + 336 * v10;
      if (*(_QWORD *)(v17 + 304))
      {
        v18 = 0;
        v19 = (uint64_t *)(v17 + 304);
        v7 = v13 + 336 * v10 + 320;
        while (2)
        {
          v20 = 0;
          v21 = 1;
          do
          {
            v22 = *v19;
            if (*v19 <= (unint64_t)v18)
            {
              v81[0] = 0;
              v93 = 0u;
              v94 = 0u;
              v91 = 0u;
              v92 = 0u;
              v90 = 0u;
              v8 = MEMORY[0x24BDACB70];
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v110 = 136315906;
              *(_QWORD *)&v110[4] = "operator[]";
              *(_WORD *)&v110[12] = 1024;
              *(_DWORD *)&v110[14] = 797;
              *(_WORD *)&v110[18] = 2048;
              *(_QWORD *)&v110[20] = v18;
              v111 = 2048;
              *(_QWORD *)v112 = v22;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_26;
            }
            v12 = v21;
            v23 = *(_QWORD *)v7 + 136 * (_QWORD)v18 + 24 * v20;
            v24 = *(_QWORD *)(v23 + 40);
            if (v24)
            {
              v25 = atomic_load((unsigned int *)(v24 + 704));
              if (v25 != 2)
              {
                re::AssetHandle::loadAsync((re::AssetHandle *)(v23 + 32));
                v11 = 0;
              }
            }
            v21 = 0;
            v20 = 1;
          }
          while ((v12 & 1) != 0);
          v18 = (re::Allocator *)((char *)v18 + 1);
          if (*v19 > (unint64_t)v18)
            continue;
          break;
        }
      }
      ++v10;
      v12 = 336;
    }
    while (*(_QWORD *)(v8 + 216) > v10);
    v7 = a3;
    v9 = a1;
    if ((v11 & 1) == 0)
      return 1;
  }
  *(_QWORD *)&v112[2] = 0;
  memset(v110, 0, sizeof(v110));
  v26 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v85 = 0;
  v86 = 0;
  re::ecs2::CameraViewDescriptorsComponent::getCameraViewsCount((uint64_t *)v8, &v86, &v85);
  v84 = 0;
  v81[1] = 0;
  v82 = 0;
  v83 = 0;
  v18 = a4;
  v81[0] = a4;
  re::DynamicArray<re::CameraView>::setCapacity(v81, v86);
  ++v83;
  v80 = 0;
  v77[1] = 0;
  v78 = 0;
  v79 = 0;
  v77[0] = a4;
  re::DynamicArray<re::CameraMultiView>::setCapacity(v77, v85);
  ++v79;
  v76 = 0;
  v74[1] = 0;
  v74[2] = 0;
  v75 = 0;
  v74[0] = a4;
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(v74, v86);
  ++v75;
  v73 = 0;
  v71[1] = 0;
  v71[2] = 0;
  v72 = 0;
  v71[0] = a4;
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(v71, v85);
  v27 = 0;
  ++v72;
  if (v26)
    v19 = (uint64_t *)(v26 + 40);
  else
    v19 = (uint64_t *)v110;
  *(_QWORD *)&v90 = v8;
  *(_QWORD *)&v91 = 0;
  v12 = a6;
  if (!*(_QWORD *)(v8 + 216))
  {
    if (*(_QWORD *)(v8 + 256))
    {
      v27 = 1;
    }
    else
    {
LABEL_26:
      if (!*(_QWORD *)(v8 + 296))
      {
        v29 = 1;
LABEL_44:
        v35 = v6;
        do
        {
          v36 = v35;
          v35 = *(_QWORD *)(v35 + 24);
        }
        while (v35);
        v37 = *(_QWORD *)(*(_QWORD *)(v36 + 16) + 376);
        if (v37)
          LOBYTE(v37) = *(_QWORD *)(v37 + 24) != 1;
        if (!*(_QWORD *)(v8 + 256) && (v37 & 1) == 0)
        {
          v38 = 0;
          v90 = 0u;
          v91 = 0u;
          v92 = xmmword_2260E5D70;
          *(_QWORD *)&v93 = 0x70000FF00000000;
          WORD4(v93) = 1;
          BYTE12(v93) = 0;
          v98 = 0;
          v95 = 0;
          v96 = 0;
          *((_QWORD *)&v94 + 1) = 0;
          v97 = 0;
          do
          {
            v39 = (char *)&v90 + v38;
            *((_QWORD *)v39 + 18) = 0;
            *((_QWORD *)v39 + 15) = 0;
            *((_QWORD *)v39 + 16) = 0;
            *((_QWORD *)v39 + 14) = 0;
            v38 += 40;
            *((_DWORD *)v39 + 34) = 0;
          }
          while (v38 != 80);
          v99 = 0;
          v101 = xmmword_22610BC10;
          v100 = xmmword_22610BC10;
          v104 = 0u;
          v102 = 0u;
          v103 = 0u;
          v105 = 1;
          v106 = 0;
          v109 = 0;
          memset(v107, 0, sizeof(v107));
          v108 = 0;
          re::DynamicArray<re::ecs2::CameraViewDescriptor>::add((_anonymous_namespace_ *)(v8 + 240), (re::ecs2::CameraViewDescriptor *)&v90);
          if (*(_BYTE *)(v7 + 44))
          {
            v41 = v7;
            v42 = v84;
            v43 = v82 - 1;
            v44 = *(re::DrawingManager **)(v9 + 104);
            if (v44)
              v45 = re::DrawingManager::layerAspect(v44, 0, v40);
            else
              v45 = 1.0;
            re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(v41, (float *)(v42 + 672 * v43 + 64), v45);
          }
          v51 = *(_QWORD *)(v8 + 256);
          *(_QWORD *)(v8 + 256) = 0;
          re::ObjectHelper::destroy<re::ecs2::CameraViewDescriptor>(*(re::AssetHandle **)(v8 + 272), (re::AssetHandle *)(*(_QWORD *)(v8 + 272) + 336 * v51));
          ++*(_DWORD *)(v8 + 264);
          re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)v107);
          for (i = 272; i != 256; i -= 8)
          {
            v53 = *(void **)((char *)&v90 + i);
            if (v53)
            {

              *(_QWORD *)((char *)&v90 + i) = 0;
            }
          }
          do
          {
            v54 = *(void **)((char *)&v90 + i);
            if (v54)
            {

              *(_QWORD *)((char *)&v90 + i) = 0;
            }
            i -= 8;
          }
          while (i != 240);
          do
          {
            v55 = *(void **)((char *)&v90 + i);
            if (v55)
            {

              *(_QWORD *)((char *)&v90 + i) = 0;
            }
            i -= 8;
          }
          while (i != 224);
          for (j = 152; j != 72; j -= 40)
            re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v90 + j);
          re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v94 + 8);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v90);
        }
        goto LABEL_76;
      }
      v27 = 2;
    }
  }
  v28 = 0;
  DWORD2(v90) = v27;
  v29 = 1;
  do
  {
    v30 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v28 + 0x20000);
    if (v27 == 1)
      v28 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v28 + 0x10000);
    if (v27 == 2)
      v31 = v30;
    else
      v31 = v28;
    re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)&v90);
    v27 = DWORD2(v90);
    v28 = (re::ecs2::CameraViewDescriptorsComponent *)v91;
  }
  while ((_QWORD)v90 != v8 || DWORD2(v90) != 3 || (_QWORD)v91 != 0);
  v34 = *(_QWORD *)(v8 + 216);
  if (v34 == 1)
  {
    if (!*(_QWORD *)(v8 + 256) && !*(_QWORD *)(*(_QWORD *)(v8 + 232) + 304))
    {
      v46 = v7;
      ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor((re::ecs2::CameraViewDescriptorsComponent *)v8, 0);
      v49 = v82 ? v84 + 672 * v82 - 672 : v80 + 1360 * v78 - 1360;
      if (*(_BYTE *)(v46 + 44))
      {
        LODWORD(v48) = *(_DWORD *)(ViewDescriptor + 204);
        v63 = *(float *)(ViewDescriptor + 208);
        v64 = *(re::DrawingManager **)(v9 + 104);
        v65 = *(float *)&v48 / v63;
        if (v64)
          v66 = re::DrawingManager::layerAspect(v64, 0, v48);
        else
          v66 = 1.0;
        re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(v46, (float *)(v49 + 64), v65 * v66);
      }
    }
    goto LABEL_76;
  }
  if (!v34)
    goto LABEL_44;
LABEL_76:
  if (*(_QWORD *)(v8 + 296))
  {
    v57 = 0;
    v58 = 336;
    do
    {
      v59 = *(_QWORD *)(v8 + 312);
      v60 = *(_QWORD *)(v9 + 104);
      if (v60)
        v61 = re::RenderFrameBox::get(v60 + 344, 0xFFFFFFFFFFFFFFFuLL);
      else
        v61 = 0;
      v88 = *(_QWORD *)(v59 + v58 + 24);
      v89 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v87, v59 + v58);
      re::DynamicArray<re::Function<void ()(re::FrameCount)>>::add((_anonymous_namespace_ *)(v61 + 3832), (uint64_t)v87);
      if (v89)
      {
        (**(void (***)(_BYTE *))v89)(v89);
        if (v89 != v87)
          (*(void (**)(uint64_t))(*(_QWORD *)v88 + 40))(v88);
        v89 = 0;
      }
      ++v57;
      v58 += 384;
    }
    while (*(_QWORD *)(v8 + 296) > v57);
  }
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 40, (uint64_t)v81);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 80, (uint64_t)v77);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 120, (uint64_t)v74);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 160, (uint64_t)v71);
  if (v29)
    v50 = 0;
  else
    v50 = 2;
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::deinit(v71);
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::deinit(v74);
  re::DynamicArray<re::CameraMultiView>::deinit((uint64_t)v77);
  re::DynamicArray<re::CameraView>::deinit((uint64_t)v81);
  re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::deinit((uint64_t)v110);
  return v50;
}

uint64_t `anonymous namespace'::buildOneCameraView<re::ecs2::OrthographicCameraComponent>(_anonymous_namespace_ *a1, re::ecs2::CameraViewDescriptorsComponent *a2, uint64_t a3, re::ecs2::CameraViewDescriptorsComponent *this, _anonymous_namespace_ *a5, _anonymous_namespace_ *a6, _anonymous_namespace_ *a7, _anonymous_namespace_ *a8, uint64_t a9, re::Allocator *a10, re::ecs2::Entity *a11, uint64_t a12)
{
  re::ecs2::CameraViewDescriptorsComponent *v15;
  uint64_t *v16;
  int v17;
  re::Allocator *v18;
  unint64_t v19;
  re::ecs2::CameraViewDescriptorsComponent *v20;
  int *v21;
  re::CameraMultiView *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  re::CameraMultiView *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _BYTE *v71;
  unint64_t v72;
  char v73;
  _anonymous_namespace_ *v74;
  char v75;
  unint64_t v76;
  char *v77;
  float *v78;
  uint64_t v79;
  float v80;
  float v81;
  uint64_t v82;
  double v83;
  float v84;
  uint64_t v85;
  id v86;
  float v87;
  float v88;
  id v89;
  unsigned int v90;
  re::DrawingManager *v91;
  unint64_t v92;
  void *v93;
  id v94;
  id v95;
  float v96;
  void *v97;
  uint64_t *v98;
  id v99;
  float v100;
  uint64_t v101;
  _QWORD *v102;
  re::CameraMultiView *v104;
  double v105;
  _anonymous_namespace_ *v106;
  uint64_t v107;
  float v108;
  float v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  float v114;
  float v115;
  unsigned int v116;
  re::DrawingManager *v117;
  uint64_t v118;
  void *v119;
  id v120;
  void *v121;
  void *v122;
  id v123;
  float v124;
  unsigned int v125;
  uint64_t v126;
  _BYTE *v127;
  re::DynamicString *v128;
  char v129;
  uint64_t v131;
  int *v133;
  re::ecs2::CameraViewDescriptorsComponent *v134;
  _BYTE *v135;
  _anonymous_namespace_ *v137;
  re::ecs2::Entity *v139;
  re::ecs2::Entity *v140;
  re::CameraMultiView *ViewDescriptor;
  _BYTE v142[224];
  uint64_t v143[56];
  uint64_t v144;
  _WORD v145[232];
  uint64_t v146;
  char v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _WORD v160[24];
  _OWORD v161[7];
  re::ecs2::CameraViewDescriptorsComponent *v162;
  char v163;
  BOOL v164;
  char v165;
  BOOL v166;
  int v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  _OWORD v182[2];
  uint64_t v183;
  uint64_t v184;
  __int16 v185;
  __int16 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;

  v15 = a2;
  v191 = *MEMORY[0x24BDAC8D0];
  v139 = a11;
  if (!a11)
    v139 = (re::ecs2::Entity *)*((_QWORD *)this + 2);
  v16 = &v183;
  ViewDescriptor = (re::CameraMultiView *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
  v17 = *((unsigned __int8 *)ViewDescriptor + 192);
  re::CameraView::CameraView((re::CameraView *)&v146, a10);
  re::CameraView::CameraView((re::CameraView *)v142, a10);
  re::CameraView::CameraView((re::CameraView *)&v144, a10);
  v145[224] = 2;
  v148 = 0uLL;
  *((_QWORD *)&v149 + 1) = 0x3F80000000000000;
  *(_QWORD *)&v149 = 0;
  if (v17)
  {
    v19 = *((_QWORD *)a6 + 2);
    if (*((_QWORD *)this + 22) <= v19
      || !re::ecs2::CameraViewDescriptor::operator==((float32x4_t *)ViewDescriptor, (float32x4_t *)(*((_QWORD *)this + 24) + 336 * v19)))
    {
      v22 = ViewDescriptor;
      re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a8, ViewDescriptor);
      goto LABEL_10;
    }
    v20 = v15;
    v21 = (int *)*((_QWORD *)this + 12);
    if ((unint64_t)v21 <= v19)
      goto LABEL_112;
    re::CameraMultiView::operator=((uint64_t)v142, *((_QWORD *)this + 14) + 1360 * v19);
    v21 = (int *)*((_QWORD *)this + 22);
    if ((unint64_t)v21 > v19)
    {
      re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a8, (uint64_t *)(*((_QWORD *)this + 24) + 336 * v19));
      v22 = ViewDescriptor;
      v15 = v20;
LABEL_10:
      re::DynamicArray<re::RenderGraphFileProvider>::operator=((uint64_t)v145, v143);
      goto LABEL_34;
    }
LABEL_113:
    *((_OWORD *)v16 + 6) = 0u;
    *((_OWORD *)v16 + 7) = 0u;
    *((_OWORD *)v16 + 4) = 0u;
    *((_OWORD *)v16 + 5) = 0u;
    *((_OWORD *)v16 + 3) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v183) = 136315906;
    *(uint64_t *)((char *)v16 + 4) = (uint64_t)"operator[]";
    WORD2(v184) = 1024;
    *(_DWORD *)((char *)v16 + 14) = 789;
    v185 = 2048;
    *(uint64_t *)((char *)v16 + 20) = v19;
    v186 = 2048;
    *(uint64_t *)((char *)v16 + 30) = (uint64_t)v21;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_114;
  }
  v19 = *((_QWORD *)a5 + 2);
  if (*((_QWORD *)this + 17) > v19
    && re::ecs2::CameraViewDescriptor::operator==((float32x4_t *)ViewDescriptor, (float32x4_t *)(*((_QWORD *)this + 19) + 336 * v19)))
  {
    v134 = v15;
    v21 = (int *)*((_QWORD *)this + 7);
    if ((unint64_t)v21 <= v19)
    {
LABEL_114:
      *((_OWORD *)v16 + 6) = 0u;
      *((_OWORD *)v16 + 7) = 0u;
      *((_OWORD *)v16 + 4) = 0u;
      *((_OWORD *)v16 + 5) = 0u;
      *((_OWORD *)v16 + 3) = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v183) = 136315906;
      *(uint64_t *)((char *)v16 + 4) = (uint64_t)"operator[]";
      WORD2(v184) = 1024;
      *(_DWORD *)((char *)v16 + 14) = 789;
      v185 = 2048;
      *(uint64_t *)((char *)v16 + 20) = v19;
      v186 = 2048;
      *(uint64_t *)((char *)v16 + 30) = (uint64_t)v21;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_115;
    }
    v23 = *((_QWORD *)this + 9);
    v24 = v23 + 672 * v19;
    re::DynamicString::operator=((re::DynamicString *)&v146, (re::DynamicString *)v24);
    v25 = *(_OWORD *)(v24 + 32);
    v26 = *(_OWORD *)(v24 + 48);
    v27 = *(_OWORD *)(v24 + 80);
    v150 = *(_OWORD *)(v24 + 64);
    v151 = v27;
    v148 = v25;
    v149 = v26;
    v28 = *(_OWORD *)(v24 + 96);
    v29 = *(_OWORD *)(v24 + 112);
    v30 = *(_OWORD *)(v24 + 144);
    v154 = *(_OWORD *)(v24 + 128);
    v155 = v30;
    v152 = v28;
    v153 = v29;
    v31 = *(_OWORD *)(v24 + 160);
    v32 = *(_OWORD *)(v24 + 176);
    v33 = *(_OWORD *)(v24 + 208);
    v158 = *(_OWORD *)(v24 + 192);
    v159 = v33;
    v156 = v31;
    v157 = v32;
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v160, v24 + 224);
    v160[20] = *(_WORD *)(v24 + 264);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v161, v24 + 272);
    v161[3] = *(_OWORD *)(v24 + 320);
    v35 = *(_OWORD *)(v24 + 352);
    v34 = *(_OWORD *)(v24 + 368);
    v36 = *(_OWORD *)(v24 + 336);
    v162 = *(re::ecs2::CameraViewDescriptorsComponent **)(v24 + 384);
    v161[5] = v35;
    v161[6] = v34;
    v161[4] = v36;
    v163 = *(_BYTE *)(v24 + 400);
    if (v164 || *(_BYTE *)(v24 + 401))
    {
      if (!v164 || *(_BYTE *)(v24 + 401))
      {
        if (!v164)
          v164 = *(_BYTE *)(v24 + 401) != 0;
        v165 = *(_BYTE *)(v23 + 672 * v19 + 402);
      }
      else
      {
        v164 = 0;
      }
    }
    if (v166 || *(_BYTE *)(v23 + 672 * v19 + 404))
    {
      if (!v166 || *(_BYTE *)(v23 + 672 * v19 + 404))
      {
        if (!v166)
          v166 = *(_BYTE *)(v23 + 672 * v19 + 404) != 0;
        v167 = *(_DWORD *)(v23 + 672 * v19 + 408);
      }
      else
      {
        v166 = 0;
      }
    }
    v37 = v23 + 672 * v19;
    v38 = *(_OWORD *)(v37 + 416);
    v39 = *(_OWORD *)(v37 + 432);
    v40 = *(_OWORD *)(v37 + 464);
    v170 = *(_OWORD *)(v37 + 448);
    v171 = v40;
    v168 = v38;
    v169 = v39;
    v41 = *(_OWORD *)(v37 + 480);
    v42 = *(_OWORD *)(v37 + 496);
    v43 = *(_OWORD *)(v37 + 528);
    v174 = *(_OWORD *)(v37 + 512);
    v175 = v43;
    v172 = v41;
    v173 = v42;
    v45 = *(_OWORD *)(v37 + 624);
    v44 = *(_OWORD *)(v37 + 640);
    v46 = *(_OWORD *)(v37 + 608);
    *(_QWORD *)((char *)v182 + 13) = *(_QWORD *)(v37 + 653);
    v181 = v45;
    v182[0] = v44;
    v180 = v46;
    v47 = *(_OWORD *)(v37 + 544);
    v48 = *(_OWORD *)(v37 + 560);
    v49 = *(_OWORD *)(v37 + 592);
    v178 = *(_OWORD *)(v37 + 576);
    v179 = v49;
    v176 = v47;
    v177 = v48;
    v21 = (int *)*((_QWORD *)this + 17);
    if ((unint64_t)v21 <= v19)
    {
LABEL_115:
      *((_OWORD *)v16 + 6) = 0u;
      *((_OWORD *)v16 + 7) = 0u;
      *((_OWORD *)v16 + 4) = 0u;
      *((_OWORD *)v16 + 5) = 0u;
      *((_OWORD *)v16 + 3) = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v183) = 136315906;
      *(uint64_t *)((char *)v16 + 4) = (uint64_t)"operator[]";
      WORD2(v184) = 1024;
      *(_DWORD *)((char *)v16 + 14) = 789;
      v185 = 2048;
      *(uint64_t *)((char *)v16 + 20) = v19;
      v186 = 2048;
      *(uint64_t *)((char *)v16 + 30) = (uint64_t)v21;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a7, (uint64_t *)(*((_QWORD *)this + 19) + 336 * v19));
    v22 = ViewDescriptor;
    v15 = v134;
  }
  else
  {
    v22 = ViewDescriptor;
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a7, ViewDescriptor);
  }
LABEL_34:
  if (!*((_BYTE *)v22 + 192))
  {
    re::ecs2::CameraViewDescriptorsComponent::viewScopeName(this, v15, v139, a10, 0, (re::DynamicString *)&v187);
    re::DynamicString::operator=((re::DynamicString *)&v146, (re::DynamicString *)&v187);
    if ((_QWORD)v187 && (BYTE8(v187) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v187 + 40))(v187, v188);
    re::ecs2::OrthographicCameraComponent::calculateProjection((float *)a3, (uint64_t)&v187, 1.0);
    v172 = v187;
    v173 = v188;
    v174 = v189;
    v175 = v190;
    v104 = ViewDescriptor;
    v176 = *(_OWORD *)((char *)ViewDescriptor + 196);
    re::ecs2::OrthographicCameraComponent::calculateProjection((float *)a3, (uint64_t)&v187, 1.0);
    v152 = v189;
    v153 = v190;
    v150 = v187;
    v151 = v188;
    v177 = xmmword_22610BC10;
    v156 = v187;
    v157 = v188;
    v158 = v189;
    v159 = v190;
    v162 = v15;
    *(_QWORD *)&v105 = re::DynamicArray<re::CameraView>::add(a5, (re::DynamicString *)&v146).n128_u64[0];
    v106 = a1;
    if (!*((_QWORD *)ViewDescriptor + 38))
      goto LABEL_74;
    v107 = 0;
    v19 = 0;
    v140 = (re::ecs2::Entity *)(*((_QWORD *)a5 + 4) + 672 * (*((_QWORD *)a5 + 2) - 1));
    v21 = (int *)((char *)v140 + 648);
    v16 = (uint64_t *)&selRef_newBufferWithBytes_length_options_;
    while (1)
    {
      v108 = *((float *)v104 + 51);
      v109 = *((float *)v104 + 52);
      v110 = *((_QWORD *)v104 + 40);
      v111 = v110 + v107;
      if (!*(_QWORD *)(v110 + v107 + 40))
        break;
      v112 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v111 + 32));
      if (*(_DWORD *)(v112 + 240))
      {
LABEL_111:
        std::__throw_bad_variant_access[abi:nn180100]();
LABEL_112:
        *((_OWORD *)v16 + 6) = 0u;
        *((_OWORD *)v16 + 7) = 0u;
        *((_OWORD *)v16 + 4) = 0u;
        *((_OWORD *)v16 + 5) = 0u;
        *((_OWORD *)v16 + 3) = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v183) = 136315906;
        *(uint64_t *)((char *)v16 + 4) = (uint64_t)"operator[]";
        WORD2(v184) = 1024;
        *(_DWORD *)((char *)v16 + 14) = 789;
        v185 = 2048;
        *(uint64_t *)((char *)v16 + 20) = v19;
        v186 = 2048;
        *(uint64_t *)((char *)v16 + 30) = (uint64_t)v21;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_113;
      }
      v113 = *(id *)(v112 + 160);
      v114 = (float)(unint64_t)objc_msgSend(v113, sel_width);
      *(float *)&v105 = (float)(unint64_t)objc_msgSend(v113, sel_height);
      v115 = v114 / *(float *)&v105;
      if (v113)

LABEL_106:
      if (*(_BYTE *)(a3 + 44))
      {
        v124 = (float)(v108 / v109) * v115;
        re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(a3, (float *)v140 + 16, v124);
        *(float *)&v105 = re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(a3, (float *)v140 + 40, v124);
      }
      ++v19;
      v107 += 136;
      v106 = a1;
      if (*((_QWORD *)v104 + 38) <= v19)
        goto LABEL_74;
    }
    v116 = *(_DWORD *)(v111 + 80);
    if (v116 != -1)
    {
      v117 = (re::DrawingManager *)*((_QWORD *)v106 + 13);
      if (v117)
      {
        *(float *)&v105 = re::DrawingManager::layerAspect(v117, v116, v105);
        v115 = *(float *)&v105;
      }
      else
      {
        v115 = 1.0;
      }
      goto LABEL_106;
    }
    v118 = v110 + v107;
    v119 = *(void **)(v110 + v107 + 88);
    if (v119)
    {
      v120 = objc_msgSend(v119, sel_width, v105);
      v121 = *(void **)(v118 + 88);
    }
    else
    {
      v122 = *(void **)(v118 + 104);
      if (!v122)
      {
        v115 = 1.0;
LABEL_105:
        v104 = ViewDescriptor;
        goto LABEL_106;
      }
      v120 = objc_msgSend(v122, sel_width, v105);
      v121 = *(void **)(v118 + 104);
    }
    v123 = objc_msgSend(v121, sel_height);
    re::ecs2::OrthographicCameraComponent::localEyePose((_OWORD *)a3, *v21, (uint64_t)&v187);
    if (a12 && !*(_DWORD *)(a12 + 24))
    {
      re::RenderFrameWorkloadPatchCamera::trackLocalEyePose(a12, &v187, *v21, v140);
      *((_BYTE *)v140 + 347) = *(_BYTE *)(a12 + 28);
    }
    *(float *)&v105 = (float)(unint64_t)v120;
    v115 = (float)(unint64_t)v120 / (float)(unint64_t)v123;
    goto LABEL_105;
  }
  re::DynamicArray<re::CameraMultiView>::add(a6, (uint64_t)v142);
  v50 = *((_QWORD *)a6 + 4);
  v51 = *((_QWORD *)a6 + 2) - 1;
  re::ecs2::CameraViewDescriptorsComponent::viewScopeName(this, v15, v139, a10, 0, (re::DynamicString *)&v187);
  v126 = v50 + 1360 * v51;
  re::DynamicString::operator=((re::DynamicString *)v126, (re::DynamicString *)&v187);
  if ((_QWORD)v187 && (BYTE8(v187) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v187 + 40))();
  re::ecs2::OrthographicCameraComponent::calculateProjection((float *)a3, (uint64_t)&v187, 1.0);
  v52 = v187;
  v53 = v188;
  v54 = v190;
  *(_OWORD *)(v126 + 512) = v189;
  *(_OWORD *)(v126 + 528) = v54;
  *(_OWORD *)(v126 + 480) = v52;
  *(_OWORD *)(v126 + 496) = v53;
  *(_OWORD *)(v126 + 544) = *(_OWORD *)((char *)ViewDescriptor + 196);
  re::ecs2::OrthographicCameraComponent::calculateProjection((float *)a3, (uint64_t)&v187, 1.0);
  v55 = v187;
  v56 = v188;
  v57 = v190;
  *(_OWORD *)(v126 + 96) = v189;
  *(_OWORD *)(v126 + 112) = v57;
  *(_OWORD *)(v126 + 64) = v55;
  *(_OWORD *)(v126 + 80) = v56;
  *(_OWORD *)(v126 + 560) = xmmword_22610BC10;
  v58 = *(_OWORD *)(v126 + 80);
  *(_OWORD *)(v126 + 160) = *(_OWORD *)(v126 + 64);
  *(_OWORD *)(v126 + 176) = v58;
  v59 = *(_OWORD *)(v126 + 112);
  *(_OWORD *)(v126 + 192) = *(_OWORD *)(v126 + 96);
  *(_OWORD *)(v126 + 208) = v59;
  *(_QWORD *)(v126 + 384) = v15;
  re::ecs2::CameraViewDescriptorsComponent::viewScopeName(this, v15, v139, a10, 1, (re::DynamicString *)&v187);
  re::DynamicString::operator=((re::DynamicString *)(v126 + 672), (re::DynamicString *)&v187);
  if ((_QWORD)v187 && (BYTE8(v187) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v187 + 40))();
  re::ecs2::OrthographicCameraComponent::calculateProjection((float *)a3, (uint64_t)&v187, 1.0);
  v60 = v187;
  v61 = v188;
  v62 = v189;
  *(_OWORD *)(v126 + 1200) = v190;
  *(_OWORD *)(v126 + 1184) = v62;
  *(_OWORD *)(v126 + 1168) = v61;
  *(_OWORD *)(v126 + 1152) = v60;
  v63 = ViewDescriptor;
  *(_OWORD *)(v126 + 1216) = *(_OWORD *)((char *)ViewDescriptor + 212);
  re::ecs2::OrthographicCameraComponent::calculateProjection((float *)a3, (uint64_t)&v187, 1.0);
  v64 = 0;
  v65 = v187;
  v66 = v188;
  v67 = v190;
  *(_OWORD *)(v126 + 768) = v189;
  *(_OWORD *)(v126 + 784) = v67;
  *(_OWORD *)(v126 + 736) = v65;
  *(_OWORD *)(v126 + 752) = v66;
  *(_OWORD *)(v126 + 1232) = xmmword_22610BC10;
  v68 = *(_OWORD *)(v126 + 784);
  *(_OWORD *)(v126 + 864) = *(_OWORD *)(v126 + 768);
  *(_OWORD *)(v126 + 880) = v68;
  v69 = *(_OWORD *)(v126 + 752);
  *(_OWORD *)(v126 + 832) = *(_OWORD *)(v126 + 736);
  *(_OWORD *)(v126 + 848) = v69;
  *(_QWORD *)(v126 + 1056) = v15;
  v70 = v50 + 1360 * v51;
  v71 = (_BYTE *)(v70 + 1344);
  v135 = (_BYTE *)(v70 + 1345);
  v72 = *((_QWORD *)ViewDescriptor + 38);
  v73 = 1;
  v74 = a1;
  do
  {
    v75 = v73;
    if (!v72)
      goto LABEL_73;
    v129 = v73;
    v19 = 0;
    v76 = 0;
    v128 = (re::DynamicString *)(v126 + 672 * v64);
    v77 = (char *)v63 + 16 * v64;
    v21 = (int *)(v77 + 204);
    v78 = (float *)(v77 + 208);
    v133 = (int *)((char *)v128 + 648);
    v127 = (char *)v128 + 347;
    v131 = 8 * v64;
    v137 = (_anonymous_namespace_ *)(4 * v64 + 80);
    v79 = 24 * v64 + 32;
    v16 = (uint64_t *)a3;
    do
    {
      v80 = *(float *)v21;
      v81 = *v78;
      v82 = *((_QWORD *)v63 + 40);
      re::AssetHandle::AssetHandle((re::AssetHandle *)&v183, (const re::AssetHandle *)(v82 + v79 + v19));
      if (*v71 == 1)
        re::AssetHandle::operator=(&v183, (uint64_t *)(v82 + v19 + 32));
      v84 = v80 / v81;
      if (v184)
      {
        v85 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)&v183);
        if (*(_DWORD *)(v85 + 240))
          goto LABEL_111;
        v86 = *(id *)(v85 + 160);
        v87 = (float)(unint64_t)objc_msgSend(v86, sel_width);
        v88 = v87 / (float)(unint64_t)objc_msgSend(v86, sel_height);
        v89 = objc_msgSend(v86, sel_arrayLength);
        if (v86)

LABEL_65:
        if (*v71 == 1 && (unint64_t)v89 >= 2)
        {
          *v135 = 1;
          v84 = *(float *)v21 / *v78;
          if ((objc_msgSend(*((id *)v74 + 23), "supportsTexture2DMultisampleArray") & 1) == 0)
            *((_DWORD *)v128 + 89) = 1;
        }
        goto LABEL_69;
      }
      v90 = *(_DWORD *)((char *)v137 + v82 + v19);
      if (v90 == -1)
      {
        v92 = v82 + v131 + v19;
        v93 = *(void **)(v92 + 88);
        if (v93)
        {
          v94 = objc_msgSend(v93, sel_width);
          v95 = objc_msgSend(*(id *)(v92 + 88), sel_height);
          v89 = objc_msgSend(*(id *)(v92 + 88), sel_arrayLength);
          re::ecs2::OrthographicCameraComponent::localEyePose(v16, *v133, (uint64_t)&v187);
          if (a12 && !*(_DWORD *)(a12 + 24))
          {
            re::RenderFrameWorkloadPatchCamera::trackLocalEyePose(a12, &v187, *v133, v128);
            *v127 = *(_BYTE *)(a12 + 28);
          }
          v96 = (float)(unint64_t)v94;
        }
        else
        {
          v97 = *(void **)(v92 + 104);
          if (!v97)
            goto LABEL_71;
          v98 = v16;
          v99 = objc_msgSend(v97, sel_width);
          v95 = objc_msgSend(*(id *)(v92 + 104), sel_height);
          v89 = objc_msgSend(*(id *)(v92 + 104), sel_arrayLength);
          re::ecs2::OrthographicCameraComponent::localEyePose(v98, *v133, (uint64_t)&v187);
          if (a12 && !*(_DWORD *)(a12 + 24))
          {
            re::RenderFrameWorkloadPatchCamera::trackLocalEyePose(a12, &v187, *v133, v128);
            *v127 = *(_BYTE *)(a12 + 28);
          }
          v96 = (float)(unint64_t)v99;
        }
        v88 = v96 / (float)(unint64_t)v95;
        v16 = (uint64_t *)a3;
        v74 = a1;
        goto LABEL_65;
      }
      v91 = (re::DrawingManager *)*((_QWORD *)v74 + 13);
      if (v91)
        v88 = re::DrawingManager::layerAspect(v91, v90, v83);
      else
        v88 = 1.0;
LABEL_69:
      if (*((_BYTE *)v16 + 44))
      {
        v100 = v88 * v84;
        re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect((uint64_t)v16, (float *)v128 + 16, v100);
        re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect((uint64_t)v16, (float *)v128 + 40, v100);
      }
LABEL_71:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v183);
      ++v76;
      v63 = ViewDescriptor;
      v72 = *((_QWORD *)ViewDescriptor + 38);
      v19 += 136;
    }
    while (v72 > v76);
    v75 = v129;
LABEL_73:
    v73 = 0;
    v64 = 1;
  }
  while ((v75 & 1) != 0);
LABEL_74:
  v101 = 1344;
  do
  {
    v102 = &v142[v101 - 672];
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v142[v101 - 400]);
    re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)&v142[v101 - 448]);
    if (*v102)
    {
      if ((v142[v101 - 664] & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v102 + 40))(*v102, *(_QWORD *)&v142[v101 - 656]);
      *(_OWORD *)v102 = 0u;
      *(_OWORD *)&v142[v101 - 656] = 0u;
    }
    v101 -= 672;
  }
  while (v101);
  re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v161);
  re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)v160);
  if (v146 && (v147 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v146 + 40))();
  return v125;
}

uint64_t re::ecs2::CameraViewDescriptorsHelper::buildCameraViews<re::ecs2::CustomMatrixCameraComponent>(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  re::AssetHandle *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  re::Allocator *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  re::ecs2::CameraViewDescriptorsComponent *v28;
  int v29;
  re::ecs2::CameraViewDescriptorsComponent *v30;
  re::ecs2::CameraViewDescriptorsComponent *v31;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  re::DrawingManager *v44;
  float v45;
  uint64_t v46;
  uint64_t ViewDescriptor;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t i;
  void *v53;
  void *v54;
  void *v55;
  uint64_t j;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v63;
  re::DrawingManager *v64;
  float v65;
  float v66;
  _QWORD v71[3];
  int v72;
  uint64_t v73;
  _QWORD v74[3];
  int v75;
  uint64_t v76;
  _QWORD v77[2];
  uint64_t v78;
  int v79;
  uint64_t v80;
  _QWORD v81[2];
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _BYTE v87[24];
  uint64_t v88;
  _BYTE *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  char v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int16 v105;
  char v106;
  _QWORD v107[3];
  int v108;
  uint64_t v109;
  _BYTE v110[28];
  __int16 v111;
  _BYTE v112[10];
  uint64_t v113;

  v6 = a5;
  v7 = a3;
  v8 = a2;
  v9 = a1;
  v113 = *MEMORY[0x24BDAC8D0];
  if (!a5)
    v6 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a2 + 216))
  {
    v10 = 0;
    v11 = 1;
    v12 = 336;
    v9 = 24;
    do
    {
      v13 = *(_QWORD *)(v8 + 232);
      v14 = (re::AssetHandle *)(v13 + 336 * v10);
      v15 = *((_QWORD *)v14 + 1);
      if (v15)
      {
        v16 = atomic_load((unsigned int *)(v15 + 704));
        if (v16 != 2)
        {
          re::AssetHandle::loadAsync(v14);
          v11 = 0;
        }
      }
      v17 = v13 + 336 * v10;
      if (*(_QWORD *)(v17 + 304))
      {
        v18 = 0;
        v19 = (uint64_t *)(v17 + 304);
        v7 = v13 + 336 * v10 + 320;
        while (2)
        {
          v20 = 0;
          v21 = 1;
          do
          {
            v22 = *v19;
            if (*v19 <= (unint64_t)v18)
            {
              v81[0] = 0;
              v93 = 0u;
              v94 = 0u;
              v91 = 0u;
              v92 = 0u;
              v90 = 0u;
              v8 = MEMORY[0x24BDACB70];
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v110 = 136315906;
              *(_QWORD *)&v110[4] = "operator[]";
              *(_WORD *)&v110[12] = 1024;
              *(_DWORD *)&v110[14] = 797;
              *(_WORD *)&v110[18] = 2048;
              *(_QWORD *)&v110[20] = v18;
              v111 = 2048;
              *(_QWORD *)v112 = v22;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_26;
            }
            v12 = v21;
            v23 = *(_QWORD *)v7 + 136 * (_QWORD)v18 + 24 * v20;
            v24 = *(_QWORD *)(v23 + 40);
            if (v24)
            {
              v25 = atomic_load((unsigned int *)(v24 + 704));
              if (v25 != 2)
              {
                re::AssetHandle::loadAsync((re::AssetHandle *)(v23 + 32));
                v11 = 0;
              }
            }
            v21 = 0;
            v20 = 1;
          }
          while ((v12 & 1) != 0);
          v18 = (re::Allocator *)((char *)v18 + 1);
          if (*v19 > (unint64_t)v18)
            continue;
          break;
        }
      }
      ++v10;
      v12 = 336;
    }
    while (*(_QWORD *)(v8 + 216) > v10);
    v7 = a3;
    v9 = a1;
    if ((v11 & 1) == 0)
      return 1;
  }
  *(_QWORD *)&v112[2] = 0;
  memset(v110, 0, sizeof(v110));
  v26 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v85 = 0;
  v86 = 0;
  re::ecs2::CameraViewDescriptorsComponent::getCameraViewsCount((uint64_t *)v8, &v86, &v85);
  v84 = 0;
  v81[1] = 0;
  v82 = 0;
  v83 = 0;
  v18 = a4;
  v81[0] = a4;
  re::DynamicArray<re::CameraView>::setCapacity(v81, v86);
  ++v83;
  v80 = 0;
  v77[1] = 0;
  v78 = 0;
  v79 = 0;
  v77[0] = a4;
  re::DynamicArray<re::CameraMultiView>::setCapacity(v77, v85);
  ++v79;
  v76 = 0;
  v74[1] = 0;
  v74[2] = 0;
  v75 = 0;
  v74[0] = a4;
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(v74, v86);
  ++v75;
  v73 = 0;
  v71[1] = 0;
  v71[2] = 0;
  v72 = 0;
  v71[0] = a4;
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(v71, v85);
  v27 = 0;
  ++v72;
  if (v26)
    v19 = (uint64_t *)(v26 + 40);
  else
    v19 = (uint64_t *)v110;
  *(_QWORD *)&v90 = v8;
  *(_QWORD *)&v91 = 0;
  v12 = a6;
  if (!*(_QWORD *)(v8 + 216))
  {
    if (*(_QWORD *)(v8 + 256))
    {
      v27 = 1;
    }
    else
    {
LABEL_26:
      if (!*(_QWORD *)(v8 + 296))
      {
        v29 = 1;
LABEL_44:
        v35 = v6;
        do
        {
          v36 = v35;
          v35 = *(_QWORD *)(v35 + 24);
        }
        while (v35);
        v37 = *(_QWORD *)(*(_QWORD *)(v36 + 16) + 376);
        if (v37)
          LOBYTE(v37) = *(_QWORD *)(v37 + 24) != 1;
        if (!*(_QWORD *)(v8 + 256) && (v37 & 1) == 0)
        {
          v38 = 0;
          v90 = 0u;
          v91 = 0u;
          v92 = xmmword_2260E5D70;
          *(_QWORD *)&v93 = 0x70000FF00000000;
          WORD4(v93) = 1;
          BYTE12(v93) = 0;
          v98 = 0;
          v95 = 0;
          v96 = 0;
          *((_QWORD *)&v94 + 1) = 0;
          v97 = 0;
          do
          {
            v39 = (char *)&v90 + v38;
            *((_QWORD *)v39 + 18) = 0;
            *((_QWORD *)v39 + 15) = 0;
            *((_QWORD *)v39 + 16) = 0;
            *((_QWORD *)v39 + 14) = 0;
            v38 += 40;
            *((_DWORD *)v39 + 34) = 0;
          }
          while (v38 != 80);
          v99 = 0;
          v101 = xmmword_22610BC10;
          v100 = xmmword_22610BC10;
          v104 = 0u;
          v102 = 0u;
          v103 = 0u;
          v105 = 1;
          v106 = 0;
          v109 = 0;
          memset(v107, 0, sizeof(v107));
          v108 = 0;
          re::DynamicArray<re::ecs2::CameraViewDescriptor>::add((_anonymous_namespace_ *)(v8 + 240), (re::ecs2::CameraViewDescriptor *)&v90);
          if (*(_BYTE *)(v7 + 32))
          {
            v41 = v7;
            v42 = v84;
            v43 = v82 - 1;
            v44 = *(re::DrawingManager **)(v9 + 104);
            if (v44)
              v45 = re::DrawingManager::layerAspect(v44, 0, v40);
            else
              v45 = 1.0;
            re::ecs2::CustomMatrixCameraComponent::adjustProjectionAspect(v41, (float *)(v42 + 672 * v43 + 64), v45);
          }
          v51 = *(_QWORD *)(v8 + 256);
          *(_QWORD *)(v8 + 256) = 0;
          re::ObjectHelper::destroy<re::ecs2::CameraViewDescriptor>(*(re::AssetHandle **)(v8 + 272), (re::AssetHandle *)(*(_QWORD *)(v8 + 272) + 336 * v51));
          ++*(_DWORD *)(v8 + 264);
          re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)v107);
          for (i = 272; i != 256; i -= 8)
          {
            v53 = *(void **)((char *)&v90 + i);
            if (v53)
            {

              *(_QWORD *)((char *)&v90 + i) = 0;
            }
          }
          do
          {
            v54 = *(void **)((char *)&v90 + i);
            if (v54)
            {

              *(_QWORD *)((char *)&v90 + i) = 0;
            }
            i -= 8;
          }
          while (i != 240);
          do
          {
            v55 = *(void **)((char *)&v90 + i);
            if (v55)
            {

              *(_QWORD *)((char *)&v90 + i) = 0;
            }
            i -= 8;
          }
          while (i != 224);
          for (j = 152; j != 72; j -= 40)
            re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v90 + j);
          re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v94 + 8);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v90);
        }
        goto LABEL_76;
      }
      v27 = 2;
    }
  }
  v28 = 0;
  DWORD2(v90) = v27;
  v29 = 1;
  do
  {
    v30 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v28 + 0x20000);
    if (v27 == 1)
      v28 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v28 + 0x10000);
    if (v27 == 2)
      v31 = v30;
    else
      v31 = v28;
    re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)&v90);
    v27 = DWORD2(v90);
    v28 = (re::ecs2::CameraViewDescriptorsComponent *)v91;
  }
  while ((_QWORD)v90 != v8 || DWORD2(v90) != 3 || (_QWORD)v91 != 0);
  v34 = *(_QWORD *)(v8 + 216);
  if (v34 == 1)
  {
    if (!*(_QWORD *)(v8 + 256) && !*(_QWORD *)(*(_QWORD *)(v8 + 232) + 304))
    {
      v46 = v7;
      ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor((re::ecs2::CameraViewDescriptorsComponent *)v8, 0);
      v49 = v82 ? v84 + 672 * v82 - 672 : v80 + 1360 * v78 - 1360;
      if (*(_BYTE *)(v46 + 32))
      {
        LODWORD(v48) = *(_DWORD *)(ViewDescriptor + 204);
        v63 = *(float *)(ViewDescriptor + 208);
        v64 = *(re::DrawingManager **)(v9 + 104);
        v65 = *(float *)&v48 / v63;
        if (v64)
          v66 = re::DrawingManager::layerAspect(v64, 0, v48);
        else
          v66 = 1.0;
        re::ecs2::CustomMatrixCameraComponent::adjustProjectionAspect(v46, (float *)(v49 + 64), v65 * v66);
      }
    }
    goto LABEL_76;
  }
  if (!v34)
    goto LABEL_44;
LABEL_76:
  if (*(_QWORD *)(v8 + 296))
  {
    v57 = 0;
    v58 = 336;
    do
    {
      v59 = *(_QWORD *)(v8 + 312);
      v60 = *(_QWORD *)(v9 + 104);
      if (v60)
        v61 = re::RenderFrameBox::get(v60 + 344, 0xFFFFFFFFFFFFFFFuLL);
      else
        v61 = 0;
      v88 = *(_QWORD *)(v59 + v58 + 24);
      v89 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v87, v59 + v58);
      re::DynamicArray<re::Function<void ()(re::FrameCount)>>::add((_anonymous_namespace_ *)(v61 + 3832), (uint64_t)v87);
      if (v89)
      {
        (**(void (***)(_BYTE *))v89)(v89);
        if (v89 != v87)
          (*(void (**)(uint64_t))(*(_QWORD *)v88 + 40))(v88);
        v89 = 0;
      }
      ++v57;
      v58 += 384;
    }
    while (*(_QWORD *)(v8 + 296) > v57);
  }
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 40, (uint64_t)v81);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 80, (uint64_t)v77);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 120, (uint64_t)v74);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 160, (uint64_t)v71);
  if (v29)
    v50 = 0;
  else
    v50 = 2;
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::deinit(v71);
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::deinit(v74);
  re::DynamicArray<re::CameraMultiView>::deinit((uint64_t)v77);
  re::DynamicArray<re::CameraView>::deinit((uint64_t)v81);
  re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::deinit((uint64_t)v110);
  return v50;
}

uint64_t `anonymous namespace'::buildOneCameraView<re::ecs2::CustomMatrixCameraComponent>(uint64_t a1, re::ecs2::CameraViewDescriptorsComponent *a2, uint64_t a3, re::ecs2::CameraViewDescriptorsComponent *this, _anonymous_namespace_ *a5, _anonymous_namespace_ *a6, _anonymous_namespace_ *a7, _anonymous_namespace_ *a8, uint64_t a9, re::Allocator *a10, re::ecs2::Entity *a11, uint64_t a12)
{
  uint64_t *v16;
  uint64_t ViewDescriptor;
  int v18;
  re::Allocator *v19;
  unint64_t v20;
  float *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  char *v66;
  unint64_t v67;
  char v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  float *v72;
  uint64_t v73;
  float v74;
  float v75;
  uint64_t v76;
  double v77;
  float v78;
  uint64_t v79;
  float v80;
  float v81;
  id v82;
  unsigned int v83;
  re::DrawingManager *v84;
  unint64_t v85;
  void *v86;
  float v87;
  uint64_t v88;
  unsigned __int8 *v89;
  int v90;
  float v91;
  void *v92;
  float v93;
  unsigned __int8 *v94;
  int v95;
  double v96;
  char **v97;
  float v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  float v104;
  float v105;
  unsigned int v106;
  re::DrawingManager *v107;
  uint64_t v108;
  void *v109;
  id v110;
  void *v111;
  void *v112;
  id v113;
  float v114;
  uint64_t v115;
  _QWORD *v116;
  unsigned int v118;
  char *v119;
  re::DynamicString *v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  int *v124;
  _anonymous_namespace_ *v127;
  _anonymous_namespace_ *v128;
  uint64_t v129;
  uint64_t v132;
  re::ecs2::Entity *v133;
  int *v134;
  _BYTE v135[224];
  uint64_t v136[56];
  uint64_t v137;
  _WORD v138[232];
  uint64_t v139;
  char v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  _WORD v153[24];
  _OWORD v154[7];
  re::ecs2::CameraViewDescriptorsComponent *v155;
  char v156;
  BOOL v157;
  char v158;
  BOOL v159;
  int v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  _OWORD v175[2];
  uint64_t v176;
  uint64_t v177;
  __int16 v178;
  __int16 v179;
  _BYTE v180[32];
  __int128 v181;
  __int128 v182;
  uint64_t v183;

  v183 = *MEMORY[0x24BDAC8D0];
  v133 = a11;
  if (!a11)
    v133 = (re::ecs2::Entity *)*((_QWORD *)this + 2);
  v16 = &v176;
  ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
  v18 = *(unsigned __int8 *)(ViewDescriptor + 192);
  re::CameraView::CameraView((re::CameraView *)&v139, a10);
  re::CameraView::CameraView((re::CameraView *)v135, a10);
  re::CameraView::CameraView((re::CameraView *)&v137, a10);
  v138[224] = 2;
  v141 = 0uLL;
  *((_QWORD *)&v142 + 1) = 0x3F80000000000000;
  *(_QWORD *)&v142 = 0;
  if (v18)
  {
    v20 = *((_QWORD *)a6 + 2);
    if (*((_QWORD *)this + 22) <= v20
      || !re::ecs2::CameraViewDescriptor::operator==((float32x4_t *)ViewDescriptor, (float32x4_t *)(*((_QWORD *)this + 24) + 336 * v20)))
    {
      re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a8, (re::ecs2::CameraViewDescriptor *)ViewDescriptor);
      goto LABEL_10;
    }
    v21 = (float *)*((_QWORD *)this + 12);
    if ((unint64_t)v21 <= v20)
      goto LABEL_119;
    re::CameraMultiView::operator=((uint64_t)v135, *((_QWORD *)this + 14) + 1360 * v20);
    v21 = (float *)*((_QWORD *)this + 22);
    if ((unint64_t)v21 > v20)
    {
      re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a8, (uint64_t *)(*((_QWORD *)this + 24) + 336 * v20));
LABEL_10:
      re::DynamicArray<re::RenderGraphFileProvider>::operator=((uint64_t)v138, v136);
      goto LABEL_34;
    }
LABEL_120:
    *((_OWORD *)v16 + 6) = 0u;
    *((_OWORD *)v16 + 7) = 0u;
    *((_OWORD *)v16 + 4) = 0u;
    *((_OWORD *)v16 + 5) = 0u;
    *((_OWORD *)v16 + 3) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v176) = 136315906;
    *(uint64_t *)((char *)v16 + 4) = (uint64_t)"operator[]";
    WORD2(v177) = 1024;
    *(_DWORD *)((char *)v16 + 14) = 789;
    v178 = 2048;
    *(uint64_t *)((char *)v16 + 20) = v20;
    v179 = 2048;
    *(uint64_t *)((char *)v16 + 30) = (uint64_t)v21;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_121;
  }
  v20 = *((_QWORD *)a5 + 2);
  if (*((_QWORD *)this + 17) > v20
    && re::ecs2::CameraViewDescriptor::operator==((float32x4_t *)ViewDescriptor, (float32x4_t *)(*((_QWORD *)this + 19) + 336 * v20)))
  {
    a8 = (_anonymous_namespace_ *)*((_QWORD *)this + 7);
    if ((unint64_t)a8 <= v20)
    {
LABEL_121:
      *((_OWORD *)v16 + 6) = 0u;
      *((_OWORD *)v16 + 7) = 0u;
      *((_OWORD *)v16 + 4) = 0u;
      *((_OWORD *)v16 + 5) = 0u;
      *((_OWORD *)v16 + 3) = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v176) = 136315906;
      *(uint64_t *)((char *)v16 + 4) = (uint64_t)"operator[]";
      WORD2(v177) = 1024;
      *(_DWORD *)((char *)v16 + 14) = 789;
      v178 = 2048;
      *(uint64_t *)((char *)v16 + 20) = v20;
      v179 = 2048;
      *(uint64_t *)((char *)v16 + 30) = (uint64_t)a8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_122;
    }
    v123 = *((_QWORD *)this + 9);
    v22 = v123 + 672 * v20;
    re::DynamicString::operator=((re::DynamicString *)&v139, (re::DynamicString *)v22);
    v23 = *(_OWORD *)(v22 + 32);
    v24 = *(_OWORD *)(v22 + 48);
    v25 = *(_OWORD *)(v22 + 80);
    v143 = *(_OWORD *)(v22 + 64);
    v144 = v25;
    v141 = v23;
    v142 = v24;
    v26 = *(_OWORD *)(v22 + 96);
    v27 = *(_OWORD *)(v22 + 112);
    v28 = *(_OWORD *)(v22 + 144);
    v147 = *(_OWORD *)(v22 + 128);
    v148 = v28;
    v145 = v26;
    v146 = v27;
    v29 = *(_OWORD *)(v22 + 160);
    v30 = *(_OWORD *)(v22 + 176);
    v31 = *(_OWORD *)(v22 + 208);
    v151 = *(_OWORD *)(v22 + 192);
    v152 = v31;
    v149 = v29;
    v150 = v30;
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v153, v22 + 224);
    v153[20] = *(_WORD *)(v22 + 264);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v154, v22 + 272);
    v154[3] = *(_OWORD *)(v22 + 320);
    v33 = *(_OWORD *)(v22 + 352);
    v32 = *(_OWORD *)(v22 + 368);
    v34 = *(_OWORD *)(v22 + 336);
    v155 = *(re::ecs2::CameraViewDescriptorsComponent **)(v22 + 384);
    v154[5] = v33;
    v154[6] = v32;
    v154[4] = v34;
    v156 = *(_BYTE *)(v22 + 400);
    if (v157 || *(_BYTE *)(v22 + 401))
    {
      if (!v157 || *(_BYTE *)(v22 + 401))
      {
        if (!v157)
          v157 = *(_BYTE *)(v22 + 401) != 0;
        v158 = *(_BYTE *)(v123 + 672 * v20 + 402);
      }
      else
      {
        v157 = 0;
      }
    }
    if (v159 || *(_BYTE *)(v123 + 672 * v20 + 404))
    {
      if (!v159 || *(_BYTE *)(v123 + 672 * v20 + 404))
      {
        if (!v159)
          v159 = *(_BYTE *)(v123 + 672 * v20 + 404) != 0;
        v160 = *(_DWORD *)(v123 + 672 * v20 + 408);
      }
      else
      {
        v159 = 0;
      }
    }
    v35 = v123 + 672 * v20;
    v36 = *(_OWORD *)(v35 + 416);
    v37 = *(_OWORD *)(v35 + 432);
    v38 = *(_OWORD *)(v35 + 464);
    v163 = *(_OWORD *)(v35 + 448);
    v164 = v38;
    v161 = v36;
    v162 = v37;
    v39 = *(_OWORD *)(v35 + 480);
    v40 = *(_OWORD *)(v35 + 496);
    v41 = *(_OWORD *)(v35 + 528);
    v167 = *(_OWORD *)(v35 + 512);
    v168 = v41;
    v165 = v39;
    v166 = v40;
    v43 = *(_OWORD *)(v35 + 624);
    v42 = *(_OWORD *)(v35 + 640);
    v44 = *(_OWORD *)(v35 + 608);
    *(_QWORD *)((char *)v175 + 13) = *(_QWORD *)(v35 + 653);
    v174 = v43;
    v175[0] = v42;
    v173 = v44;
    v45 = *(_OWORD *)(v35 + 544);
    v46 = *(_OWORD *)(v35 + 560);
    v47 = *(_OWORD *)(v35 + 592);
    v171 = *(_OWORD *)(v35 + 576);
    v172 = v47;
    v169 = v45;
    v170 = v46;
    a8 = (_anonymous_namespace_ *)*((_QWORD *)this + 17);
    if ((unint64_t)a8 <= v20)
    {
LABEL_122:
      *((_OWORD *)v16 + 6) = 0u;
      *((_OWORD *)v16 + 7) = 0u;
      *((_OWORD *)v16 + 4) = 0u;
      *((_OWORD *)v16 + 5) = 0u;
      *((_OWORD *)v16 + 3) = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v176) = 136315906;
      *(uint64_t *)((char *)v16 + 4) = (uint64_t)"operator[]";
      WORD2(v177) = 1024;
      *(_DWORD *)((char *)v16 + 14) = 789;
      v178 = 2048;
      *(uint64_t *)((char *)v16 + 20) = v20;
      v179 = 2048;
      *(uint64_t *)((char *)v16 + 30) = (uint64_t)a8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_123:
      re::internal::assertLog((re::internal *)4, v88, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "buildOneCameraView", 635);
      _os_crash();
      __break(1u);
LABEL_124:
      re::internal::assertLog((re::internal *)4, v88, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "buildOneCameraView", 666);
      _os_crash();
      __break(1u);
    }
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a7, (uint64_t *)(*((_QWORD *)this + 19) + 336 * v20));
  }
  else
  {
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a7, (re::ecs2::CameraViewDescriptor *)ViewDescriptor);
  }
LABEL_34:
  if (!*(_BYTE *)(ViewDescriptor + 192))
  {
    re::ecs2::CameraViewDescriptorsComponent::viewScopeName(this, a2, v133, a10, 0, (re::DynamicString *)v180);
    re::DynamicString::operator=((re::DynamicString *)&v139, (re::DynamicString *)v180);
    if (*(_QWORD *)v180 && (v180[8] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v180 + 40))(*(_QWORD *)v180, *(_QWORD *)&v180[16]);
    *(_DWORD *)v180 = 0;
    *(_OWORD *)&v180[4] = xmmword_226117740;
    *(_QWORD *)&v180[20] = 0xBDCCCCCD3DCCCCCDLL;
    v180[28] = 0;
    v181 = xmmword_2260E5F40;
    LODWORD(v182) = 1;
    *((_QWORD *)&v182 + 1) = 0;
    re::Projection::setFromMatrix4x4F((uint64_t)v180, a3 + 256);
    v165 = *(_OWORD *)v180;
    v166 = *(_OWORD *)&v180[16];
    v167 = v181;
    v168 = v182;
    v169 = *(_OWORD *)(ViewDescriptor + 196);
    *(_DWORD *)v180 = 0;
    *(_OWORD *)&v180[4] = xmmword_226117740;
    *(_QWORD *)&v180[20] = 0xBDCCCCCD3DCCCCCDLL;
    v180[28] = 0;
    v181 = xmmword_2260E5F40;
    LODWORD(v182) = 1;
    *((_QWORD *)&v182 + 1) = 0;
    re::Projection::setFromMatrix4x4F((uint64_t)v180, a3 + 256);
    v145 = v181;
    v146 = v182;
    v143 = *(_OWORD *)v180;
    v144 = *(_OWORD *)&v180[16];
    v170 = xmmword_22610BC10;
    v149 = *(_OWORD *)v180;
    v150 = *(_OWORD *)&v180[16];
    v151 = v181;
    v152 = v182;
    v155 = a2;
    *(_QWORD *)&v96 = re::DynamicArray<re::CameraView>::add(a5, (re::DynamicString *)&v139).n128_u64[0];
    if (!*(_QWORD *)(ViewDescriptor + 304))
      goto LABEL_108;
    v20 = 0;
    v21 = 0;
    v132 = *((_QWORD *)a5 + 4) + 672 * (*((_QWORD *)a5 + 2) - 1);
    v134 = (int *)(v132 + 648);
    a8 = (_anonymous_namespace_ *)(v132 + 160);
    v97 = &selRef_newBufferWithBytes_length_options_;
    v16 = (uint64_t *)&selRef_setRate_;
    while (1)
    {
      v98 = *(float *)(ViewDescriptor + 204);
      v99 = *(float *)(ViewDescriptor + 208);
      v100 = *(_QWORD *)(ViewDescriptor + 320);
      v101 = v100 + v20;
      if (*(_QWORD *)(v100 + v20 + 40))
      {
        v102 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v101 + 32));
        if (*(_DWORD *)(v102 + 240))
        {
LABEL_118:
          std::__throw_bad_variant_access[abi:nn180100]();
LABEL_119:
          *((_OWORD *)v16 + 6) = 0u;
          *((_OWORD *)v16 + 7) = 0u;
          *((_OWORD *)v16 + 4) = 0u;
          *((_OWORD *)v16 + 5) = 0u;
          *((_OWORD *)v16 + 3) = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v176) = 136315906;
          *(uint64_t *)((char *)v16 + 4) = (uint64_t)"operator[]";
          WORD2(v177) = 1024;
          *(_DWORD *)((char *)v16 + 14) = 789;
          v178 = 2048;
          *(uint64_t *)((char *)v16 + 20) = v20;
          v179 = 2048;
          *(uint64_t *)((char *)v16 + 30) = (uint64_t)v21;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_120;
        }
        v103 = *(id *)(v102 + 160);
        v104 = (float)(unint64_t)objc_msgSend(v103, v97[240]);
        *(float *)&v96 = (float)(unint64_t)objc_msgSend(v103, sel_height);
        v105 = v104 / *(float *)&v96;
        if (v103)

      }
      else
      {
        v106 = *(_DWORD *)(v101 + 80);
        if (v106 == -1)
        {
          v108 = v100 + v20;
          v109 = *(void **)(v100 + v20 + 88);
          if (v109)
          {
            v110 = objc_msgSend(v109, v97[240], v96);
            v111 = *(void **)(v108 + 88);
            goto LABEL_100;
          }
          v112 = *(void **)(v108 + 104);
          if (v112)
          {
            v110 = objc_msgSend(v112, v97[240], v96);
            v111 = *(void **)(v108 + 104);
LABEL_100:
            v113 = objc_msgSend(v111, sel_height);
            re::ecs2::CustomMatrixCameraComponent::localEyePose(a3, *v134, (float32x4_t *)v180);
            if (a12 && !*(_DWORD *)(a12 + 24))
            {
              re::RenderFrameWorkloadPatchCamera::trackLocalEyePose(a12, (__int128 *)v180, *v134, (re::DynamicString *)v132);
              *(_BYTE *)(v132 + 347) = *(_BYTE *)(a12 + 28);
            }
            *(float *)&v96 = (float)(unint64_t)v110;
            v105 = (float)(unint64_t)v110 / (float)(unint64_t)v113;
            v97 = &selRef_newBufferWithBytes_length_options_;
            goto LABEL_105;
          }
LABEL_104:
          v105 = 1.0;
          goto LABEL_105;
        }
        v107 = *(re::DrawingManager **)(a1 + 104);
        if (!v107)
          goto LABEL_104;
        *(float *)&v96 = re::DrawingManager::layerAspect(v107, v106, v96);
        v105 = *(float *)&v96;
      }
LABEL_105:
      if (*(_BYTE *)(a3 + 32))
      {
        v114 = (float)(v98 / v99) * v105;
        re::ecs2::CustomMatrixCameraComponent::adjustProjectionAspect(a3, (float *)(v132 + 64), v114);
        *(float *)&v96 = re::ecs2::CustomMatrixCameraComponent::adjustProjectionAspect(a3, (float *)a8, v114);
      }
      v21 = (float *)((char *)v21 + 1);
      v20 += 136;
      if (*(_QWORD *)(ViewDescriptor + 304) <= (unint64_t)v21)
        goto LABEL_108;
    }
  }
  re::DynamicArray<re::CameraMultiView>::add(a6, (uint64_t)v135);
  v48 = *((_QWORD *)a6 + 2) - 1;
  v127 = (_anonymous_namespace_ *)*((_QWORD *)a6 + 4);
  re::ecs2::CameraViewDescriptorsComponent::viewScopeName(this, a2, v133, a10, 0, (re::DynamicString *)v180);
  v119 = (char *)v127 + 1360 * v48;
  re::DynamicString::operator=((re::DynamicString *)v119, (re::DynamicString *)v180);
  if (*(_QWORD *)v180 && (v180[8] & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)v180 + 40))();
  *(_DWORD *)v180 = 0;
  *(_OWORD *)&v180[4] = xmmword_226117740;
  *(_QWORD *)&v180[20] = 0xBDCCCCCD3DCCCCCDLL;
  v180[28] = 0;
  v181 = xmmword_2260E5F40;
  LODWORD(v182) = 1;
  *((_QWORD *)&v182 + 1) = 0;
  re::Projection::setFromMatrix4x4F((uint64_t)v180, a3 + 256);
  v49 = *(_OWORD *)v180;
  v50 = *(_OWORD *)&v180[16];
  v51 = v182;
  *((_OWORD *)v119 + 32) = v181;
  *((_OWORD *)v119 + 33) = v51;
  *((_OWORD *)v119 + 30) = v49;
  *((_OWORD *)v119 + 31) = v50;
  *((_OWORD *)v119 + 34) = *(_OWORD *)(ViewDescriptor + 196);
  *(_DWORD *)v180 = 0;
  *(_OWORD *)&v180[4] = xmmword_226117740;
  *(_QWORD *)&v180[20] = 0xBDCCCCCD3DCCCCCDLL;
  v180[28] = 0;
  v181 = xmmword_2260E5F40;
  LODWORD(v182) = 1;
  *((_QWORD *)&v182 + 1) = 0;
  re::Projection::setFromMatrix4x4F((uint64_t)v180, a3 + 256);
  v52 = *(_OWORD *)v180;
  v53 = *(_OWORD *)&v180[16];
  v54 = v182;
  *((_OWORD *)v119 + 6) = v181;
  *((_OWORD *)v119 + 7) = v54;
  *((_OWORD *)v119 + 4) = v52;
  *((_OWORD *)v119 + 5) = v53;
  *((_OWORD *)v119 + 35) = xmmword_22610BC10;
  v55 = *((_OWORD *)v119 + 5);
  *((_OWORD *)v119 + 10) = *((_OWORD *)v119 + 4);
  *((_OWORD *)v119 + 11) = v55;
  v56 = *((_OWORD *)v119 + 7);
  *((_OWORD *)v119 + 12) = *((_OWORD *)v119 + 6);
  *((_OWORD *)v119 + 13) = v56;
  *((_QWORD *)v119 + 48) = a2;
  re::ecs2::CameraViewDescriptorsComponent::viewScopeName(this, a2, v133, a10, 1, (re::DynamicString *)v180);
  re::DynamicString::operator=((re::DynamicString *)(v119 + 672), (re::DynamicString *)v180);
  if (*(_QWORD *)v180 && (v180[8] & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)v180 + 40))();
  *(_DWORD *)v180 = 0;
  *(_OWORD *)&v180[4] = xmmword_226117740;
  *(_QWORD *)&v180[20] = 0xBDCCCCCD3DCCCCCDLL;
  v180[28] = 0;
  v181 = xmmword_2260E5F40;
  LODWORD(v182) = 1;
  *((_QWORD *)&v182 + 1) = 0;
  re::Projection::setFromMatrix4x4F((uint64_t)v180, a3 + 256);
  v57 = *(_OWORD *)v180;
  v58 = *(_OWORD *)&v180[16];
  v59 = v181;
  *((_OWORD *)v119 + 75) = v182;
  *((_OWORD *)v119 + 74) = v59;
  *((_OWORD *)v119 + 73) = v58;
  *((_OWORD *)v119 + 72) = v57;
  *((_OWORD *)v119 + 76) = *(_OWORD *)(ViewDescriptor + 212);
  *(_DWORD *)v180 = 0;
  *(_OWORD *)&v180[4] = xmmword_226117740;
  *(_QWORD *)&v180[20] = 0xBDCCCCCD3DCCCCCDLL;
  v180[28] = 0;
  v181 = xmmword_2260E5F40;
  LODWORD(v182) = 1;
  *((_QWORD *)&v182 + 1) = 0;
  re::Projection::setFromMatrix4x4F((uint64_t)v180, a3 + 320);
  v60 = 0;
  v61 = *(_OWORD *)v180;
  v62 = *(_OWORD *)&v180[16];
  v63 = v182;
  *((_OWORD *)v119 + 48) = v181;
  *((_OWORD *)v119 + 49) = v63;
  *((_OWORD *)v119 + 46) = v61;
  *((_OWORD *)v119 + 47) = v62;
  *((_OWORD *)v119 + 77) = xmmword_22610BC10;
  v64 = *((_OWORD *)v119 + 49);
  *((_OWORD *)v119 + 54) = *((_OWORD *)v119 + 48);
  *((_OWORD *)v119 + 55) = v64;
  v65 = *((_OWORD *)v119 + 47);
  *((_OWORD *)v119 + 52) = *((_OWORD *)v119 + 46);
  *((_OWORD *)v119 + 53) = v65;
  *((_QWORD *)v119 + 132) = a2;
  v66 = (char *)v127 + 1360 * v48;
  a8 = (_anonymous_namespace_ *)(v66 + 1344);
  v128 = (_anonymous_namespace_ *)(v66 + 1345);
  v67 = *(_QWORD *)(ViewDescriptor + 304);
  v68 = 1;
  do
  {
    v69 = v68;
    if (!v67)
      goto LABEL_82;
    v121 = v68;
    v20 = 0;
    v70 = 0;
    v120 = (re::DynamicString *)&v119[672 * v60];
    v71 = ViewDescriptor + 16 * v60;
    v21 = (float *)(v71 + 204);
    v72 = (float *)(v71 + 208);
    v124 = (int *)((char *)v120 + 648);
    v122 = 8 * v60;
    v129 = 4 * v60 + 80;
    v73 = 24 * v60 + 32;
    do
    {
      v74 = *v21;
      v75 = *v72;
      v76 = *(_QWORD *)(ViewDescriptor + 320);
      re::AssetHandle::AssetHandle((re::AssetHandle *)&v176, (const re::AssetHandle *)(v76 + v73 + v20));
      if (*(_BYTE *)a8 == 1)
        re::AssetHandle::operator=(&v176, (uint64_t *)(v76 + v20 + 32));
      v78 = v74 / v75;
      if (v177)
      {
        v79 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)&v176);
        if (*(_DWORD *)(v79 + 240))
          goto LABEL_118;
        v16 = (uint64_t *)*(id *)(v79 + 160);
        v80 = (float)(unint64_t)objc_msgSend(v16, sel_width);
        v81 = v80 / (float)(unint64_t)objc_msgSend(v16, sel_height);
        v82 = objc_msgSend(v16, sel_arrayLength);
        if (v16)

        goto LABEL_50;
      }
      v83 = *(_DWORD *)(v76 + v129 + v20);
      if (v83 == -1)
      {
        v85 = v76 + v122 + v20;
        v86 = *(void **)(v85 + 88);
        if (v86)
        {
          v87 = (float)(unint64_t)objc_msgSend(v86, sel_width);
          v81 = v87 / (float)(unint64_t)objc_msgSend(*(id *)(v85 + 88), sel_height);
          v82 = objc_msgSend(*(id *)(v85 + 88), sel_arrayLength);
          v88 = *v124;
          v89 = (unsigned __int8 *)(a3 + 240);
          if ((_DWORD)v88 == 1)
            goto LABEL_61;
          if ((_DWORD)v88 == 2)
          {
            v89 = (unsigned __int8 *)(a3 + 241);
LABEL_61:
            v90 = *v89;
            if (v90 != 1)
            {
              if (v90)
                goto LABEL_123;
              goto LABEL_75;
            }
LABEL_78:
            re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(a3, v88, (float32x4_t *)v180);
            v16 = (uint64_t *)a12;
            if (a12 && !*(_DWORD *)(a12 + 24))
            {
              re::RenderFrameWorkloadPatchCamera::trackWorldEyePose(a12, (__int128 *)v180, *v124, v120);
LABEL_81:
              *((_BYTE *)v120 + 347) = *((_BYTE *)v16 + 28);
            }
            goto LABEL_50;
          }
        }
        else
        {
          v92 = *(void **)(v85 + 104);
          if (!v92)
            goto LABEL_67;
          v93 = (float)(unint64_t)objc_msgSend(v92, sel_width);
          v81 = v93 / (float)(unint64_t)objc_msgSend(*(id *)(v85 + 104), sel_height);
          v82 = objc_msgSend(*(id *)(v85 + 104), sel_arrayLength);
          v88 = *v124;
          v94 = (unsigned __int8 *)(a3 + 240);
          if ((_DWORD)v88 != 1)
          {
            if ((_DWORD)v88 != 2)
              goto LABEL_75;
            v94 = (unsigned __int8 *)(a3 + 241);
          }
          v95 = *v94;
          if (v95 == 1)
            goto LABEL_78;
          if (v95)
            goto LABEL_124;
        }
LABEL_75:
        re::ecs2::CustomMatrixCameraComponent::localEyePose(a3, v88, (float32x4_t *)v180);
        v16 = (uint64_t *)a12;
        if (a12 && !*(_DWORD *)(a12 + 24))
        {
          re::RenderFrameWorkloadPatchCamera::trackLocalEyePose(a12, (__int128 *)v180, *v124, v120);
          goto LABEL_81;
        }
LABEL_50:
        if (*(_BYTE *)a8 == 1 && (unint64_t)v82 >= 2)
        {
          *(_BYTE *)v128 = 1;
          v78 = *v21 / *v72;
          if ((objc_msgSend(*(id *)(a1 + 184), "supportsTexture2DMultisampleArray") & 1) == 0)
            *((_DWORD *)v120 + 89) = 1;
        }
        goto LABEL_65;
      }
      v84 = *(re::DrawingManager **)(a1 + 104);
      if (v84)
        v81 = re::DrawingManager::layerAspect(v84, v83, v77);
      else
        v81 = 1.0;
LABEL_65:
      if (*(_BYTE *)(a3 + 32))
      {
        v91 = v81 * v78;
        re::ecs2::CustomMatrixCameraComponent::adjustProjectionAspect(a3, (float *)v120 + 16, v91);
        re::ecs2::CustomMatrixCameraComponent::adjustProjectionAspect(a3, (float *)v120 + 40, v91);
      }
LABEL_67:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v176);
      ++v70;
      v67 = *(_QWORD *)(ViewDescriptor + 304);
      v20 += 136;
    }
    while (v67 > v70);
    v69 = v121;
LABEL_82:
    v68 = 0;
    v60 = 1;
  }
  while ((v69 & 1) != 0);
LABEL_108:
  v115 = 1344;
  do
  {
    v116 = &v135[v115 - 672];
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v135[v115 - 400]);
    re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)&v135[v115 - 448]);
    if (*v116)
    {
      if ((v135[v115 - 664] & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v116 + 40))(*v116, *(_QWORD *)&v135[v115 - 656]);
      *(_OWORD *)v116 = 0u;
      *(_OWORD *)&v135[v115 - 656] = 0u;
    }
    v115 -= 672;
  }
  while (v115);
  re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v154);
  re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)v153);
  if (v139 && (v140 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v139 + 40))();
  return v118;
}

void re::ecs2::CameraViewDescriptorsHelper::updateCameraViewsPerFrameData<re::ecs2::PerspectiveCameraComponent>(_anonymous_namespace_ *a1, re::ecs2::CameraViewDescriptorsComponent *this, _OWORD *a3, re::ecs2::CameraViewDescriptorsComponent *a4)
{
  re::ecs2::CameraViewDescriptorsComponent *v4;
  int v8;
  re::ecs2::CameraViewDescriptorsComponent *v9;
  unint64_t v10;
  unint64_t v11;
  re::ecs2::CameraViewDescriptorsComponent *v12;
  re::ecs2::CameraViewDescriptorsComponent *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  re::ecs2::Entity *v17;
  uint64_t v18;
  re::ecs2::CameraViewDescriptorsComponent *v19;
  re::ecs2::CameraViewDescriptorsComponent *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  re::ecs2::Entity *v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  void *v30;
  void *v31;
  uint64_t j;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int16 v48;
  char v49;
  _QWORD v50[3];
  int v51;
  uint64_t v52;
  _BYTE v53[12];
  __int16 v54;
  _BYTE v55[14];
  __int16 v56;
  unint64_t v57;
  _DWORD v58[12];
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v4 = a4;
  v61 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    v4 = (re::ecs2::CameraViewDescriptorsComponent *)*((_QWORD *)this + 2);
  *(_QWORD *)v53 = this;
  *(_QWORD *)&v55[2] = 0;
  if (*((_QWORD *)this + 27))
  {
    v8 = 0;
  }
  else if (*((_QWORD *)this + 32))
  {
    v8 = 1;
  }
  else
  {
    if (!*((_QWORD *)this + 37))
    {
      v10 = 0;
      v11 = 0;
      goto LABEL_25;
    }
    v8 = 2;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  *(_DWORD *)&v53[8] = v8;
  do
  {
    v12 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v9 + 0x20000);
    if (v8 == 1)
      v9 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v9 + 0x10000);
    if (v8 == 2)
      v13 = v12;
    else
      v13 = v9;
    if (*(_BYTE *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, v13) + 192))
    {
      v14 = *((_QWORD *)this + 12);
      if (v14 <= v11)
      {
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v33 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v58[0] = 136315906;
        *(_QWORD *)&v58[1] = "operator[]";
        LOWORD(v58[3]) = 1024;
        *(_DWORD *)((char *)&v58[3] + 2) = 789;
        HIWORD(v58[4]) = 2048;
        *(_QWORD *)&v58[5] = v11;
        LOWORD(v58[7]) = 2048;
        *(_QWORD *)((char *)&v58[7] + 2) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_57:
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v33 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v58[0] = 136315906;
        *(_QWORD *)&v58[1] = "operator[]";
        LOWORD(v58[3]) = 1024;
        *(_DWORD *)((char *)&v58[3] + 2) = 789;
        HIWORD(v58[4]) = 2048;
        *(_QWORD *)&v58[5] = v10;
        LOWORD(v58[7]) = 2048;
        *(_QWORD *)((char *)&v58[7] + 2) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_58;
      }
      v15 = 0;
      v16 = *((_QWORD *)this + 14) + 1360 * v11++;
    }
    else
    {
      v14 = *((_QWORD *)this + 7);
      if (v14 <= v10)
        goto LABEL_57;
      v16 = 0;
      v15 = *((_QWORD *)this + 9) + 672 * v10++;
    }
    re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)v53);
    v8 = *(_DWORD *)&v53[8];
    v9 = *(re::ecs2::CameraViewDescriptorsComponent **)&v55[2];
  }
  while (*(re::ecs2::CameraViewDescriptorsComponent **)v53 != this || *(_DWORD *)&v53[8] != 3 || *(_QWORD *)&v55[2]);
  v18 = *((_QWORD *)this + 27);
  if (v18 == 1)
  {
    if (!*((_QWORD *)this + 32) && !*(_QWORD *)(*((_QWORD *)this + 29) + 304))
    return;
  }
  if (v18)
    return;
LABEL_25:
  v19 = v4;
  do
  {
    v20 = v19;
    v19 = (re::ecs2::CameraViewDescriptorsComponent *)*((_QWORD *)v19 + 3);
  }
  while (v19);
  v21 = *(_QWORD *)(*((_QWORD *)v20 + 2) + 376);
  if (v21)
    LOBYTE(v21) = *(_QWORD *)(v21 + 24) != 1;
  if (!*((_QWORD *)this + 32) && (v21 & 1) == 0)
  {
    v22 = 0;
    v33 = 0u;
    v34 = 0u;
    v35 = xmmword_2260E5D70;
    *(_QWORD *)&v36 = 0x70000FF00000000;
    WORD4(v36) = 1;
    BYTE12(v36) = 0;
    v41 = 0;
    v38 = 0;
    v39 = 0;
    *((_QWORD *)&v37 + 1) = 0;
    v40 = 0;
    do
    {
      v23 = (char *)&v33 + v22;
      *((_QWORD *)v23 + 18) = 0;
      *((_QWORD *)v23 + 15) = 0;
      *((_QWORD *)v23 + 16) = 0;
      *((_QWORD *)v23 + 14) = 0;
      v22 += 40;
      *((_DWORD *)v23 + 34) = 0;
    }
    while (v22 != 80);
    v42 = 0;
    v44 = xmmword_22610BC10;
    v43 = xmmword_22610BC10;
    v47 = 0u;
    v45 = 0u;
    v46 = 0u;
    v48 = 1;
    v49 = 0;
    v52 = 0;
    memset(v50, 0, sizeof(v50));
    v51 = 0;
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add((re::ecs2::CameraViewDescriptorsComponent *)((char *)this + 240), (re::ecs2::CameraViewDescriptor *)&v33);
    if (*(_BYTE *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, (re::ecs2::CameraViewDescriptorsComponent *)0x10000)+ 192))
    {
      v14 = *((_QWORD *)this + 12);
      if (v14 > v11)
      {
        v24 = 0;
        v25 = *((_QWORD *)this + 14) + 1360 * v11;
LABEL_41:
        v27 = *((_QWORD *)this + 32);
        *((_QWORD *)this + 32) = 0;
        re::ObjectHelper::destroy<re::ecs2::CameraViewDescriptor>(*((re::AssetHandle **)this + 34), (re::AssetHandle *)(*((_QWORD *)this + 34) + 336 * v27));
        ++*((_DWORD *)this + 66);
        re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)v50);
        for (i = 272; i != 256; i -= 8)
        {
          v29 = *(void **)((char *)&v33 + i);
          if (v29)
          {

            *(_QWORD *)((char *)&v33 + i) = 0;
          }
        }
        do
        {
          v30 = *(void **)((char *)&v33 + i);
          if (v30)
          {

            *(_QWORD *)((char *)&v33 + i) = 0;
          }
          i -= 8;
        }
        while (i != 240);
        do
        {
          v31 = *(void **)((char *)&v33 + i);
          if (v31)
          {

            *(_QWORD *)((char *)&v33 + i) = 0;
          }
          i -= 8;
        }
        while (i != 224);
        for (j = 152; j != 72; j -= 40)
          re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v33 + j);
        re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v37 + 8);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v33);
        return;
      }
LABEL_58:
      v59 = 0u;
      v60 = 0u;
      memset(v58, 0, sizeof(v58));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v53 = 136315906;
      *(_QWORD *)&v53[4] = "operator[]";
      v54 = 1024;
      *(_DWORD *)v55 = 789;
      *(_WORD *)&v55[4] = 2048;
      *(_QWORD *)&v55[6] = v11;
      v56 = 2048;
      v57 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      v14 = *((_QWORD *)this + 7);
      if (v14 > v10)
      {
        v25 = 0;
        v24 = *((_QWORD *)this + 9) + 672 * v10;
        goto LABEL_41;
      }
    }
    v59 = 0u;
    v60 = 0u;
    memset(v58, 0, sizeof(v58));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v53 = 136315906;
    *(_QWORD *)&v53[4] = "operator[]";
    v54 = 1024;
    *(_DWORD *)v55 = 789;
    *(_WORD *)&v55[4] = 2048;
    *(_QWORD *)&v55[6] = v10;
    v56 = 2048;
    v57 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void `anonymous namespace'::updateOneViewPerFrameData<re::ecs2::PerspectiveCameraComponent>(uint64_t a1, re::ecs2::CameraViewDescriptorsComponent *a2, re::ecs2::CameraViewDescriptorsComponent *this, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t ViewDescriptor;
  uint64_t v11;
  int v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  __int128 v26;
  float v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  float32x4_t v31;
  float32x4_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  const unsigned int *v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  char v65;
  unsigned __int8 *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  char v75;
  unsigned __int8 *v76;
  int v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  void **v81;
  uint64_t v82;
  char *v83;
  char v84;
  unsigned __int8 *v85;
  int v86;
  uint64_t v87;
  const char *v88;
  const char *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  const unsigned int *v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  re::RenderFrame *v104;
  char v105;
  unsigned __int8 *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  void **v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  re::RenderFrame *v115;
  char v116;
  unsigned __int8 *v117;
  int v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  void **v122;
  uint64_t v123;
  char *v124;
  re::RenderFrame *v125;
  char v126;
  unsigned __int8 *v127;
  int v128;
  uint64_t v129;
  const char *v130;
  const char *v131;
  const char *v132;
  _anonymous_namespace_ *v133;
  re::RenderManager *v134;
  unint64_t v135;
  re::ecs2::CameraViewDescriptorsComponent *v136;
  re::ecs2::Entity *v137;
  char v138;
  __int128 v139;
  re::RenderFrame *v140;
  uint64_t v141;
  id v142;
  id v143[3];
  uint64_t v144;
  int v145;
  _OWORD v146[2];
  float32x4_t __src;
  float32x4_t v148;
  _OWORD v149[2];
  _OWORD v150[2];
  __int128 v151;
  __int128 v152;
  float32x4_t v153;
  float32x4_t v154;

  ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
  v11 = *(_QWORD *)(a1 + 104);
  if (v11)
    v140 = (re::RenderFrame *)re::RenderFrameBox::get(v11 + 344, 0xFFFFFFFFFFFFFFFuLL);
  else
    v140 = 0;
  v12 = *(unsigned __int8 *)(a1 + 300);
  re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)a4, 0, (uint64_t)&__src);
  v13 = vnegq_f32(v148);
  v14 = (int8x16_t)vnegq_f32(__src);
  v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL);
  v16 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL), v148), v15, __src);
  v17 = (int8x16_t)vaddq_f32(v16, v16);
  v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), v17, 0xCuLL);
  v19 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), v148), v18, v15);
  v20 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v18, v148, 3), __src), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), v19, 0xCuLL));
  v18.f32[0] = v13.f32[0] + v13.f32[0];
  v21 = (float)(v13.f32[0] + v13.f32[0]) * v13.f32[0];
  v22 = vmuls_lane_f32(v13.f32[1] + v13.f32[1], *(float32x2_t *)v13.f32, 1);
  v23 = vmuls_lane_f32(v13.f32[2] + v13.f32[2], v13, 2);
  v24 = vmuls_lane_f32(v13.f32[0] + v13.f32[0], *(float32x2_t *)v13.f32, 1);
  v25 = vmuls_lane_f32(v13.f32[0] + v13.f32[0], v13, 2);
  v13.f32[0] = vmuls_lane_f32(v13.f32[1] + v13.f32[1], v13, 2);
  v15.f32[0] = vmuls_lane_f32(v13.f32[1] + v13.f32[1], v148, 3);
  *(float *)v19.i32 = vmuls_lane_f32(v13.f32[2] + v13.f32[2], v148, 3);
  HIDWORD(v26) = 0;
  *(float *)&v26 = 1.0 - (float)(v22 + v23);
  *((float *)&v26 + 1) = v24 + *(float *)v19.i32;
  *((float *)&v26 + 2) = v25 - v15.f32[0];
  v27 = vmuls_lane_f32(v18.f32[0], v148, 3);
  HIDWORD(v28) = 0;
  *(float *)&v28 = v24 - *(float *)v19.i32;
  *((float *)&v28 + 1) = 1.0 - (float)(v21 + v23);
  *((float *)&v28 + 2) = v13.f32[0] + v27;
  v18.i32[3] = 0;
  v18.f32[0] = v25 + v15.f32[0];
  v18.f32[1] = v13.f32[0] - v27;
  v18.f32[2] = 1.0 - (float)(v21 + v22);
  v151 = v26;
  v152 = v28;
  v20.i32[3] = 1.0;
  v153 = v18;
  v154 = v20;
  if (!*(_BYTE *)(ViewDescriptor + 192))
  {
    a4[7] = xmmword_2260E5F10;
    a4[8] = xmmword_2260E5F20;
    a4[9] = xmmword_2260E5F40;
    a4[10] = xmmword_2260E5D70;
    __src.i64[0] = 0;
    __src.i32[2] = 0;
    v139 = *(_OWORD *)(ViewDescriptor + 196);
    if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&__src, v45))
    {
      *((_OWORD *)&__src + ++__src.i64[0]) = v139;
      ++__src.i32[2];
    }
    v144 = 0;
    v145 = 0;
    if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&v144, v46))
    {
      v146[v144++] = xmmword_22610BC10;
      ++v145;
    }
    *(_DWORD *)(a5 + 640) = -1;
    if (*(_QWORD *)(ViewDescriptor + 232))
    {
      *(_DWORD *)(a5 + 640) = re::RenderFrame::addRateMap((uint64_t)v140, (void **)(ViewDescriptor + 232));
      if (__src.i64[0] && *(_BYTE *)(*((_QWORD *)v140 + 1) + 300))
        re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v140 + 4072), (uint64_t *)&__src);
      *(_DWORD *)(a5 + 644) = re::RenderFrame::addRateMap((uint64_t)v140, (void **)(ViewDescriptor + 248));
      if (v144 && *(_BYTE *)(*((_QWORD *)v140 + 1) + 300))
        re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v140 + 4072), &v144);
    }
    else if (*(_QWORD *)(ViewDescriptor + 264))
    {
      if (!v12)
        *(_DWORD *)(a5 + 356) = 1;
      *(_DWORD *)(a5 + 640) = re::RenderFrame::addRateMap((uint64_t)v140, (_QWORD *)(ViewDescriptor + 264));
      if (__src.i64[0] && *(_BYTE *)(*((_QWORD *)v140 + 1) + 300))
        re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v140 + 4072), (uint64_t *)&__src);
      *(_DWORD *)(a5 + 644) = -1;
    }
    if (!*(_QWORD *)(ViewDescriptor + 304))
      return;
    v91 = 0;
    while (1)
    {
      v92 = *(_QWORD *)(ViewDescriptor + 320);
      v93 = v92 + 136 * v91;
      if (!*(_QWORD *)(v93 + 40))
      {
        v98 = v92 + 136 * v91;
        v100 = *(_DWORD *)(v98 + 80);
        v99 = (const unsigned int *)(v98 + 80);
        if (v100 == -1)
        {
          v109 = v92 + 136 * v91;
          v111 = *(_QWORD *)(v109 + 88);
          v110 = (void **)(v109 + 88);
          if (!v111)
          {
            v121 = v92 + 136 * v91;
            v123 = *(_QWORD *)(v121 + 104);
            v122 = (void **)(v121 + 104);
            if (v123)
            {
              if ((*(_BYTE *)(v93 + 8) & 1) != 0)
                v124 = *(char **)(v93 + 16);
              else
                v124 = (char *)(v93 + 9);
              v131 = (const char *)(a5 + 9);
              if ((*(_BYTE *)(a5 + 8) & 1) != 0)
                v131 = *(const char **)(a5 + 16);
              re::RenderFrame::specifyScopeLane(v140, v124, v122, v131, *(_DWORD *)(a5 + 648));
            }
            goto LABEL_178;
          }
          v112 = *(_QWORD *)(v93 + 8);
          if ((v112 & 1) != 0)
          {
            v114 = *(_BYTE **)(v93 + 16);
            if (v114)
            {
              LOBYTE(v113) = *v114;
              goto LABEL_160;
            }
            v129 = 0x7FFFFFFFFFFFFFFFLL;
            v125 = v140;
          }
          else
          {
            v113 = v112 >> 8;
            v114 = (_BYTE *)(v93 + 9);
LABEL_160:
            v125 = v140;
            if ((_BYTE)v113)
            {
              v113 = (char)v113;
              v126 = v114[1];
              if (v126)
              {
                v127 = v114 + 2;
                do
                {
                  v113 = 31 * v113 + v126;
                  v128 = *v127++;
                  v126 = v128;
                }
                while (v128);
              }
              v129 = v113 & 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              v129 = 0;
            }
          }
          v143[0] = (id)v129;
          v132 = (const char *)(a5 + 9);
          if ((*(_BYTE *)(a5 + 8) & 1) != 0)
            v132 = *(const char **)(a5 + 16);
          re::RenderFrame::specifyScopeLane(v125, (uint64_t *)v143, v110, v132);
          goto LABEL_178;
        }
        v101 = *(_QWORD *)(v93 + 8);
        if ((v101 & 1) != 0)
        {
          v103 = *(_BYTE **)(v93 + 16);
          if (v103)
          {
            LOBYTE(v102) = *v103;
            goto LABEL_144;
          }
          v119 = 0x7FFFFFFFFFFFFFFFLL;
          v115 = v140;
        }
        else
        {
          v102 = v101 >> 8;
          v103 = (_BYTE *)(v93 + 9);
LABEL_144:
          v115 = v140;
          if ((_BYTE)v102)
          {
            v102 = (char)v102;
            v116 = v103[1];
            if (v116)
            {
              v117 = v103 + 2;
              do
              {
                v102 = 31 * v102 + v116;
                v118 = *v117++;
                v116 = v118;
              }
              while (v118);
            }
            v119 = v102 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v119 = 0;
          }
        }
        v143[0] = (id)v119;
        v130 = (const char *)(a5 + 9);
        if ((*(_BYTE *)(a5 + 8) & 1) != 0)
          v130 = *(const char **)(a5 + 16);
        re::RenderFrame::specifyScopeLane(v115, (const re::WeakStringID *)v143, v99, v130);
        goto LABEL_178;
      }
      v94 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v93 + 32));
      if (*(_DWORD *)(v94 + 240))
      {
LABEL_180:
        v133 = (_anonymous_namespace_ *)std::__throw_bad_variant_access[abi:nn180100]();
        return;
      }
      v143[0] = *(id *)(v94 + 160);
      v95 = *(_QWORD *)(v93 + 8);
      if ((v95 & 1) == 0)
        break;
      v97 = *(_BYTE **)(v93 + 16);
      if (v97)
      {
        LOBYTE(v96) = *v97;
LABEL_133:
        v104 = v140;
        if ((_BYTE)v96)
        {
          v96 = (char)v96;
          v105 = v97[1];
          if (v105)
          {
            v106 = v97 + 2;
            do
            {
              v96 = 31 * v96 + v105;
              v107 = *v106++;
              v105 = v107;
            }
            while (v107);
          }
          v108 = v96 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v108 = 0;
        }
        goto LABEL_150;
      }
      v108 = 0x7FFFFFFFFFFFFFFFLL;
      v104 = v140;
LABEL_150:
      v142 = (id)v108;
      v120 = (const char *)(a5 + 9);
      if ((*(_BYTE *)(a5 + 8) & 1) != 0)
        v120 = *(const char **)(a5 + 16);
      re::RenderFrame::specifyScopeLane(v104, (uint64_t *)&v142, v143, v120);
      if (v143[0])

LABEL_178:
      if (*(_QWORD *)(ViewDescriptor + 304) <= (unint64_t)++v91)
        return;
    }
    v96 = v95 >> 8;
    v97 = (_BYTE *)(v93 + 9);
    goto LABEL_133;
  }
  v29 = v151;
  v30 = v152;
  *(_OWORD *)(a6 + 416) = v151;
  *(_OWORD *)(a6 + 432) = v30;
  v31 = v153;
  v32 = v154;
  *(float32x4_t *)(a6 + 448) = v153;
  *(float32x4_t *)(a6 + 464) = v32;
  *(_OWORD *)(a6 + 1088) = v29;
  *(_OWORD *)(a6 + 1104) = v30;
  *(float32x4_t *)(a6 + 1120) = v31;
  *(float32x4_t *)(a6 + 1136) = v32;
  re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)a4, 1, (uint64_t)v150);
  v33 = v150[1];
  *(_OWORD *)(a6 + 32) = v150[0];
  *(_OWORD *)(a6 + 48) = v33;
  re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)a4, 2, (uint64_t)v149);
  v34 = v149[1];
  *(_OWORD *)(a6 + 704) = v149[0];
  *(_OWORD *)(a6 + 720) = v34;
  __src.i64[0] = 0;
  __src.i32[2] = 0;
  v35 = *(_QWORD *)(ViewDescriptor + 204);
  v36 = *(_QWORD *)(ViewDescriptor + 196);
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&__src, v37))
  {
    v39 = &__src + __src.i64[0];
    v39[1].i64[0] = v36;
    v39[1].i64[1] = v35;
    ++__src.i64[0];
    ++__src.i32[2];
  }
  v40 = *(_QWORD *)(ViewDescriptor + 220);
  v41 = *(_QWORD *)(ViewDescriptor + 212);
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&__src, v38))
  {
    v43 = &__src + __src.i64[0];
    v43[1].i64[0] = v41;
    v43[1].i64[1] = v40;
    ++__src.i64[0];
    ++__src.i32[2];
  }
  v144 = 0;
  v145 = 0;
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&v144, v42))
  {
    v146[v144++] = xmmword_22610BC10;
    ++v145;
  }
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&v144, v44))
  {
    v146[v144++] = xmmword_22610BC10;
    ++v145;
  }
  *(_DWORD *)(a6 + 640) = -1;
  if (*(_QWORD *)(ViewDescriptor + 232))
  {
    *(_DWORD *)(a6 + 640) = re::RenderFrame::addRateMap((uint64_t)v140, (void **)(ViewDescriptor + 232));
    if (__src.i64[0] && *(_BYTE *)(*((_QWORD *)v140 + 1) + 300))
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v140 + 4072), (uint64_t *)&__src);
    *(_DWORD *)(a6 + 644) = re::RenderFrame::addRateMap((uint64_t)v140, (void **)(ViewDescriptor + 248));
    if (v144 && *(_BYTE *)(*((_QWORD *)v140 + 1) + 300))
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v140 + 4072), &v144);
  }
  else if (*(_QWORD *)(ViewDescriptor + 264))
  {
    if (!v12)
      *(_DWORD *)(a6 + 356) = 1;
    *(_DWORD *)(a6 + 640) = re::RenderFrame::addRateMap((uint64_t)v140, (_QWORD *)(ViewDescriptor + 264));
    if (__src.i64[0] && *(_BYTE *)(*((_QWORD *)v140 + 1) + 300))
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v140 + 4072), (uint64_t *)&__src);
    *(_DWORD *)(a6 + 644) = -1;
  }
  *(_DWORD *)(a6 + 1312) = -1;
  if (*(_QWORD *)(ViewDescriptor + 240))
  {
    *(_DWORD *)(a6 + 1312) = re::RenderFrame::addRateMap((uint64_t)v140, (void **)(ViewDescriptor + 240));
    if (__src.i64[0] && *(_BYTE *)(*((_QWORD *)v140 + 1) + 300))
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v140 + 4072), (uint64_t *)&__src);
    *(_DWORD *)(a6 + 1316) = re::RenderFrame::addRateMap((uint64_t)v140, (void **)(ViewDescriptor + 256));
    if (v144 && *(_BYTE *)(*((_QWORD *)v140 + 1) + 300))
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v140 + 4072), &v144);
  }
  else if (*(_QWORD *)(ViewDescriptor + 272))
  {
    if (!v12)
      *(_DWORD *)(a6 + 1028) = 1;
    *(_DWORD *)(a6 + 1312) = re::RenderFrame::addRateMap((uint64_t)v140, (_QWORD *)(ViewDescriptor + 272));
    if (__src.i64[0] && *(_BYTE *)(*((_QWORD *)v140 + 1) + 300))
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v140 + 4072), (uint64_t *)&__src);
    *(_DWORD *)(a6 + 1316) = -1;
  }
  v47 = 0;
  v48 = *(_QWORD *)(ViewDescriptor + 304);
  v49 = 1;
  do
  {
    v50 = v49;
    if (!v48)
      goto LABEL_113;
    v138 = v49;
    v51 = 0;
    v52 = a6 + 672 * v47;
    do
    {
      v53 = *(_QWORD *)(ViewDescriptor + 320);
      v54 = v53 + 136 * v51;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v143, (const re::AssetHandle *)(v54 + 24 * v47 + 32));
      if (*(_BYTE *)(a6 + 1344) == 1)
        re::AssetHandle::operator=((uint64_t *)v143, (uint64_t *)(v53 + 136 * v51 + 32));
      if (v143[1])
      {
        v55 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v143);
        if (*(_DWORD *)(v55 + 240))
          goto LABEL_180;
        v142 = *(id *)(v55 + 160);
        v56 = *(_QWORD *)(v54 + 8);
        if ((v56 & 1) != 0)
        {
          v58 = *(_BYTE **)(v54 + 16);
          if (!v58)
          {
            v68 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_83:
            v141 = v68;
            v79 = (const char *)(v52 + 9);
            if ((*(_BYTE *)(v52 + 8) & 1) != 0)
              v79 = *(const char **)(v52 + 16);
            re::RenderFrame::specifyScopeLane(v140, &v141, &v142, v79);
            if (v142)

            goto LABEL_111;
          }
          LOBYTE(v57) = *v58;
        }
        else
        {
          v57 = v56 >> 8;
          v58 = (_BYTE *)(v54 + 9);
        }
        if ((_BYTE)v57)
        {
          v57 = (char)v57;
          v65 = v58[1];
          if (v65)
          {
            v66 = v58 + 2;
            do
            {
              v57 = 31 * v57 + v65;
              v67 = *v66++;
              v65 = v67;
            }
            while (v67);
          }
          v68 = v57 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v68 = 0;
        }
        goto LABEL_83;
      }
      v59 = v53 + 136 * v51 + 4 * v47;
      v61 = *(_DWORD *)(v59 + 80);
      v60 = (const unsigned int *)(v59 + 80);
      if (v61 != -1)
      {
        v62 = *(_QWORD *)(v54 + 8);
        if ((v62 & 1) != 0)
        {
          v64 = *(_BYTE **)(v54 + 16);
          if (v64)
          {
            LOBYTE(v63) = *v64;
            goto LABEL_77;
          }
          v78 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v63 = v62 >> 8;
          v64 = (_BYTE *)(v54 + 9);
LABEL_77:
          if ((_BYTE)v63)
          {
            v63 = (char)v63;
            v75 = v64[1];
            if (v75)
            {
              v76 = v64 + 2;
              do
              {
                v63 = 31 * v63 + v75;
                v77 = *v76++;
                v75 = v77;
              }
              while (v77);
            }
            v78 = v63 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v78 = 0;
          }
        }
        v142 = (id)v78;
        v88 = (const char *)(v52 + 9);
        if ((*(_BYTE *)(v52 + 8) & 1) != 0)
          v88 = *(const char **)(v52 + 16);
        re::RenderFrame::specifyScopeLane(v140, (const re::WeakStringID *)&v142, v60, v88);
        goto LABEL_111;
      }
      v69 = v53 + 136 * v51 + 8 * v47;
      v71 = *(_QWORD *)(v69 + 88);
      v70 = (void **)(v69 + 88);
      if (v71)
      {
        v72 = *(_QWORD *)(v54 + 8);
        if ((v72 & 1) != 0)
        {
          v74 = *(_BYTE **)(v54 + 16);
          if (v74)
          {
            LOBYTE(v73) = *v74;
            goto LABEL_93;
          }
          v87 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v73 = v72 >> 8;
          v74 = (_BYTE *)(v54 + 9);
LABEL_93:
          if ((_BYTE)v73)
          {
            v73 = (char)v73;
            v84 = v74[1];
            if (v84)
            {
              v85 = v74 + 2;
              do
              {
                v73 = 31 * v73 + v84;
                v86 = *v85++;
                v84 = v86;
              }
              while (v86);
            }
            v87 = v73 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v87 = 0;
          }
        }
        v142 = (id)v87;
        v90 = (const char *)(v52 + 9);
        if ((*(_BYTE *)(v52 + 8) & 1) != 0)
          v90 = *(const char **)(v52 + 16);
        re::RenderFrame::specifyScopeLane(v140, (uint64_t *)&v142, v70, v90);
        goto LABEL_111;
      }
      v80 = v53 + 136 * v51 + 8 * v47;
      v82 = *(_QWORD *)(v80 + 104);
      v81 = (void **)(v80 + 104);
      if (v82)
      {
        if ((*(_BYTE *)(v54 + 8) & 1) != 0)
          v83 = *(char **)(v54 + 16);
        else
          v83 = (char *)(v54 + 9);
        v89 = (const char *)(v52 + 9);
        if ((*(_BYTE *)(v52 + 8) & 1) != 0)
          v89 = *(const char **)(v52 + 16);
        re::RenderFrame::specifyScopeLane(v140, v83, v81, v89, *(_DWORD *)(v52 + 648));
      }
LABEL_111:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v143);
      ++v51;
      v48 = *(_QWORD *)(ViewDescriptor + 304);
    }
    while (v48 > v51);
    v50 = v138;
LABEL_113:
    v49 = 0;
    v47 = 1;
  }
  while ((v50 & 1) != 0);
}

uint64_t `anonymous namespace'::addDefaultSpecifyLaneCommand(_anonymous_namespace_ *this, re::RenderManager *a2, re::ecs2::CameraViewDescriptorsComponent *a3, re::ecs2::CameraViewDescriptorsComponent *a4, re::ecs2::Entity *a5)
{
  re::Allocator *v9;
  uint64_t v10;
  re::RenderFrame *v11;
  const char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _BYTE v17[23];

  v9 = (re::Allocator *)re::RenderManager::perFrameAllocator(this);
  re::ecs2::CameraViewDescriptorsComponent::viewScopeName(a3, a2, a4, v9, 0, (re::DynamicString *)&v15);
  v10 = *((_QWORD *)this + 13);
  if (v10)
    v11 = (re::RenderFrame *)re::RenderFrameBox::get(v10 + 344, 0xFFFFFFFFFFFFFFFuLL);
  else
    v11 = 0;
  v14 = 65290051;
  if ((v16 & 1) != 0)
    v12 = *(const char **)&v17[7];
  else
    v12 = v17;
  re::RenderFrame::specifyScopeLane(v11, (const re::WeakStringID *)&v14, &re::kLegacyRenderLayerHandle, v12);
  result = v15;
  if (v15)
  {
    if ((v16 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v15 + 40))();
  }
  return result;
}

void re::ecs2::CameraViewDescriptorsHelper::updateCameraViewsPerFrameData<re::ecs2::OrthographicCameraComponent>(_anonymous_namespace_ *a1, re::ecs2::CameraViewDescriptorsComponent *this, _OWORD *a3, re::ecs2::CameraViewDescriptorsComponent *a4)
{
  re::ecs2::CameraViewDescriptorsComponent *v4;
  int v8;
  re::ecs2::CameraViewDescriptorsComponent *v9;
  unint64_t v10;
  unint64_t v11;
  re::ecs2::CameraViewDescriptorsComponent *v12;
  re::ecs2::CameraViewDescriptorsComponent *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  re::ecs2::Entity *v17;
  uint64_t v18;
  re::ecs2::CameraViewDescriptorsComponent *v19;
  re::ecs2::CameraViewDescriptorsComponent *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  re::ecs2::Entity *v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  void *v30;
  void *v31;
  uint64_t j;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int16 v48;
  char v49;
  _QWORD v50[3];
  int v51;
  uint64_t v52;
  _BYTE v53[12];
  __int16 v54;
  _BYTE v55[14];
  __int16 v56;
  unint64_t v57;
  _DWORD v58[12];
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v4 = a4;
  v61 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    v4 = (re::ecs2::CameraViewDescriptorsComponent *)*((_QWORD *)this + 2);
  *(_QWORD *)v53 = this;
  *(_QWORD *)&v55[2] = 0;
  if (*((_QWORD *)this + 27))
  {
    v8 = 0;
  }
  else if (*((_QWORD *)this + 32))
  {
    v8 = 1;
  }
  else
  {
    if (!*((_QWORD *)this + 37))
    {
      v10 = 0;
      v11 = 0;
      goto LABEL_25;
    }
    v8 = 2;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  *(_DWORD *)&v53[8] = v8;
  do
  {
    v12 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v9 + 0x20000);
    if (v8 == 1)
      v9 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v9 + 0x10000);
    if (v8 == 2)
      v13 = v12;
    else
      v13 = v9;
    if (*(_BYTE *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, v13) + 192))
    {
      v14 = *((_QWORD *)this + 12);
      if (v14 <= v11)
      {
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v33 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v58[0] = 136315906;
        *(_QWORD *)&v58[1] = "operator[]";
        LOWORD(v58[3]) = 1024;
        *(_DWORD *)((char *)&v58[3] + 2) = 789;
        HIWORD(v58[4]) = 2048;
        *(_QWORD *)&v58[5] = v11;
        LOWORD(v58[7]) = 2048;
        *(_QWORD *)((char *)&v58[7] + 2) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_57:
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v33 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v58[0] = 136315906;
        *(_QWORD *)&v58[1] = "operator[]";
        LOWORD(v58[3]) = 1024;
        *(_DWORD *)((char *)&v58[3] + 2) = 789;
        HIWORD(v58[4]) = 2048;
        *(_QWORD *)&v58[5] = v10;
        LOWORD(v58[7]) = 2048;
        *(_QWORD *)((char *)&v58[7] + 2) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_58;
      }
      v15 = 0;
      v16 = *((_QWORD *)this + 14) + 1360 * v11++;
    }
    else
    {
      v14 = *((_QWORD *)this + 7);
      if (v14 <= v10)
        goto LABEL_57;
      v16 = 0;
      v15 = *((_QWORD *)this + 9) + 672 * v10++;
    }
    re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)v53);
    v8 = *(_DWORD *)&v53[8];
    v9 = *(re::ecs2::CameraViewDescriptorsComponent **)&v55[2];
  }
  while (*(re::ecs2::CameraViewDescriptorsComponent **)v53 != this || *(_DWORD *)&v53[8] != 3 || *(_QWORD *)&v55[2]);
  v18 = *((_QWORD *)this + 27);
  if (v18 == 1)
  {
    if (!*((_QWORD *)this + 32) && !*(_QWORD *)(*((_QWORD *)this + 29) + 304))
    return;
  }
  if (v18)
    return;
LABEL_25:
  v19 = v4;
  do
  {
    v20 = v19;
    v19 = (re::ecs2::CameraViewDescriptorsComponent *)*((_QWORD *)v19 + 3);
  }
  while (v19);
  v21 = *(_QWORD *)(*((_QWORD *)v20 + 2) + 376);
  if (v21)
    LOBYTE(v21) = *(_QWORD *)(v21 + 24) != 1;
  if (!*((_QWORD *)this + 32) && (v21 & 1) == 0)
  {
    v22 = 0;
    v33 = 0u;
    v34 = 0u;
    v35 = xmmword_2260E5D70;
    *(_QWORD *)&v36 = 0x70000FF00000000;
    WORD4(v36) = 1;
    BYTE12(v36) = 0;
    v41 = 0;
    v38 = 0;
    v39 = 0;
    *((_QWORD *)&v37 + 1) = 0;
    v40 = 0;
    do
    {
      v23 = (char *)&v33 + v22;
      *((_QWORD *)v23 + 18) = 0;
      *((_QWORD *)v23 + 15) = 0;
      *((_QWORD *)v23 + 16) = 0;
      *((_QWORD *)v23 + 14) = 0;
      v22 += 40;
      *((_DWORD *)v23 + 34) = 0;
    }
    while (v22 != 80);
    v42 = 0;
    v44 = xmmword_22610BC10;
    v43 = xmmword_22610BC10;
    v47 = 0u;
    v45 = 0u;
    v46 = 0u;
    v48 = 1;
    v49 = 0;
    v52 = 0;
    memset(v50, 0, sizeof(v50));
    v51 = 0;
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add((re::ecs2::CameraViewDescriptorsComponent *)((char *)this + 240), (re::ecs2::CameraViewDescriptor *)&v33);
    if (*(_BYTE *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, (re::ecs2::CameraViewDescriptorsComponent *)0x10000)+ 192))
    {
      v14 = *((_QWORD *)this + 12);
      if (v14 > v11)
      {
        v24 = 0;
        v25 = *((_QWORD *)this + 14) + 1360 * v11;
LABEL_41:
        v27 = *((_QWORD *)this + 32);
        *((_QWORD *)this + 32) = 0;
        re::ObjectHelper::destroy<re::ecs2::CameraViewDescriptor>(*((re::AssetHandle **)this + 34), (re::AssetHandle *)(*((_QWORD *)this + 34) + 336 * v27));
        ++*((_DWORD *)this + 66);
        re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)v50);
        for (i = 272; i != 256; i -= 8)
        {
          v29 = *(void **)((char *)&v33 + i);
          if (v29)
          {

            *(_QWORD *)((char *)&v33 + i) = 0;
          }
        }
        do
        {
          v30 = *(void **)((char *)&v33 + i);
          if (v30)
          {

            *(_QWORD *)((char *)&v33 + i) = 0;
          }
          i -= 8;
        }
        while (i != 240);
        do
        {
          v31 = *(void **)((char *)&v33 + i);
          if (v31)
          {

            *(_QWORD *)((char *)&v33 + i) = 0;
          }
          i -= 8;
        }
        while (i != 224);
        for (j = 152; j != 72; j -= 40)
          re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v33 + j);
        re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v37 + 8);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v33);
        return;
      }
LABEL_58:
      v59 = 0u;
      v60 = 0u;
      memset(v58, 0, sizeof(v58));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v53 = 136315906;
      *(_QWORD *)&v53[4] = "operator[]";
      v54 = 1024;
      *(_DWORD *)v55 = 789;
      *(_WORD *)&v55[4] = 2048;
      *(_QWORD *)&v55[6] = v11;
      v56 = 2048;
      v57 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      v14 = *((_QWORD *)this + 7);
      if (v14 > v10)
      {
        v25 = 0;
        v24 = *((_QWORD *)this + 9) + 672 * v10;
        goto LABEL_41;
      }
    }
    v59 = 0u;
    v60 = 0u;
    memset(v58, 0, sizeof(v58));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v53 = 136315906;
    *(_QWORD *)&v53[4] = "operator[]";
    v54 = 1024;
    *(_DWORD *)v55 = 789;
    *(_WORD *)&v55[4] = 2048;
    *(_QWORD *)&v55[6] = v10;
    v56 = 2048;
    v57 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void `anonymous namespace'::updateOneViewPerFrameData<re::ecs2::OrthographicCameraComponent>(uint64_t a1, re::ecs2::CameraViewDescriptorsComponent *a2, re::ecs2::CameraViewDescriptorsComponent *this, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t ViewDescriptor;
  uint64_t v11;
  int v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  float32x4_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float32x4_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float32x4_t *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  char v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  const unsigned int *v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  char v102;
  unsigned __int8 *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  void **v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  char v112;
  unsigned __int8 *v113;
  int v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  void **v118;
  uint64_t v119;
  char *v120;
  char v121;
  unsigned __int8 *v122;
  int v123;
  uint64_t v124;
  const char *v125;
  const char *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  const unsigned int *v136;
  int v137;
  unint64_t v138;
  uint64_t v139;
  _BYTE *v140;
  char v141;
  unsigned __int8 *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  void **v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  _BYTE *v150;
  char v151;
  unsigned __int8 *v152;
  int v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  void **v157;
  uint64_t v158;
  char *v159;
  char v160;
  unsigned __int8 *v161;
  int v162;
  uint64_t v163;
  const char *v164;
  const char *v165;
  const char *v166;
  int v167;
  re::ecs2::CameraViewDescriptorsComponent *v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  char v172;
  float32x4_t v173;
  __int128 v174;
  re::RenderFrame *v175;
  _OWORD v176[2];
  _OWORD v177[2];
  id v178[2];
  __int128 v179;
  __int128 v180;
  __int128 v181;
  id v182[2];
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  float32x4_t __src;
  float32x4_t v193;
  __int128 v194;
  __int128 v195;

  ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
  v11 = *(_QWORD *)(a1 + 104);
  if (v11)
    v175 = (re::RenderFrame *)re::RenderFrameBox::get(v11 + 344, 0xFFFFFFFFFFFFFFFuLL);
  else
    v175 = 0;
  v12 = *(unsigned __int8 *)(a1 + 300);
  re::ecs2::OrthographicCameraComponent::calculateWorldPose((uint64_t)a4, 0, (uint64_t)&__src);
  v13 = vnegq_f32(v193);
  v14 = (int8x16_t)vnegq_f32(__src);
  v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL);
  v16 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL), v193), v15, __src);
  v17 = (int8x16_t)vaddq_f32(v16, v16);
  v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), v17, 0xCuLL);
  v19 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), v193), v18, v15);
  v30 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v18, v193, 3), __src), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), v19, 0xCuLL));
  v20 = v13.f32[0] + v13.f32[0];
  *(float *)v19.i32 = (float)(v13.f32[0] + v13.f32[0]) * v13.f32[0];
  v21 = vmuls_lane_f32(v13.f32[1] + v13.f32[1], *(float32x2_t *)v13.f32, 1);
  v22 = vmuls_lane_f32(v13.f32[2] + v13.f32[2], v13, 2);
  v23 = vmuls_lane_f32(v13.f32[0] + v13.f32[0], *(float32x2_t *)v13.f32, 1);
  v24 = vmuls_lane_f32(v13.f32[0] + v13.f32[0], v13, 2);
  v13.f32[0] = vmuls_lane_f32(v13.f32[1] + v13.f32[1], v13, 2);
  v25 = vmuls_lane_f32(v20, v193, 3);
  v18.f32[0] = vmuls_lane_f32(v13.f32[1] + v13.f32[1], v193, 3);
  v26 = vmuls_lane_f32(v13.f32[2] + v13.f32[2], v193, 3);
  HIDWORD(v29) = 0;
  HIDWORD(v27) = 0;
  *(float *)&v27 = 1.0 - (float)(v21 + v22);
  *((float *)&v27 + 1) = v23 + v26;
  *((float *)&v27 + 2) = v24 - v18.f32[0];
  v15.f32[0] = 1.0 - (float)(*(float *)v19.i32 + v22);
  HIDWORD(v28) = 0;
  *(float *)&v28 = v23 - v26;
  DWORD1(v28) = v15.i32[0];
  *((float *)&v28 + 2) = v13.f32[0] + v25;
  *(float *)&v29 = v24 + v18.f32[0];
  *((float *)&v29 + 1) = v13.f32[0] - v25;
  *((float *)&v29 + 2) = 1.0 - (float)(*(float *)v19.i32 + v21);
  v30.i32[3] = 1.0;
  if (!*(_BYTE *)(ViewDescriptor + 192))
  {
    *(_OWORD *)(a5 + 416) = v27;
    *(_OWORD *)(a5 + 432) = v28;
    *(_OWORD *)(a5 + 448) = v29;
    *(float32x4_t *)(a5 + 464) = v30;
    re::ecs2::OrthographicCameraComponent::calculateWorldPose((uint64_t)a4, 0, (uint64_t)&v186);
    v70 = v186;
    v69 = v187;
    *(_OWORD *)(a5 + 32) = v186;
    *(_OWORD *)(a5 + 48) = v69;
    *(_OWORD *)(a5 + 128) = v70;
    *(_OWORD *)(a5 + 144) = v69;
    v71 = a4[6];
    v73 = a4[3];
    v72 = a4[4];
    *(_OWORD *)(a5 + 608) = a4[5];
    *(_OWORD *)(a5 + 624) = v71;
    *(_OWORD *)(a5 + 576) = v73;
    *(_OWORD *)(a5 + 592) = v72;
    re::Projection::computeMatrix4x4F((re::Projection *)(a5 + 64), (uint64_t)v182);
    re::RenderCamera::computeInverseTransform((float32x4_t *)(a5 + 32), (uint64_t)v178);
    v75 = 0;
    v76 = *(float32x4_t *)v182;
    v77 = v183;
    v78 = v184;
    v79 = v185;
    v188 = *(_OWORD *)v178;
    v189 = v179;
    v190 = v180;
    v191 = v181;
    do
    {
      *(float32x4_t *)((char *)&__src + v75) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v76, COERCE_FLOAT(*(__int128 *)((char *)&v188 + v75))), v77, *(float32x2_t *)((char *)&v188 + v75), 1), v78, *(float32x4_t *)((char *)&v188 + v75), 2), v79, *(float32x4_t *)((char *)&v188 + v75), 3);
      v75 += 16;
    }
    while (v75 != 64);
    v80 = v193;
    v81 = v194;
    v82 = v195;
    a4[3] = __src;
    a4[4] = v80;
    a4[5] = v81;
    a4[6] = v82;
    a4[7] = xmmword_2260E5F10;
    a4[8] = xmmword_2260E5F20;
    a4[9] = xmmword_2260E5F40;
    a4[10] = xmmword_2260E5D70;
    __src.i64[0] = 0;
    __src.i32[2] = 0;
    v174 = *(_OWORD *)(ViewDescriptor + 196);
    if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&__src, v74))
    {
      *((_OWORD *)&__src + ++__src.i64[0]) = v174;
      ++__src.i32[2];
    }
    *(_QWORD *)&v188 = 0;
    DWORD2(v188) = 0;
    if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&v188, v83))
    {
      *(&v188 + (_QWORD)v188 + 1) = xmmword_22610BC10;
      *(_QWORD *)&v188 = v188 + 1;
      ++DWORD2(v188);
    }
    *(_DWORD *)(a5 + 640) = -1;
    if (*(_QWORD *)(ViewDescriptor + 232))
    {
      *(_DWORD *)(a5 + 640) = re::RenderFrame::addRateMap((uint64_t)v175, (void **)(ViewDescriptor + 232));
      if (__src.i64[0] && *(_BYTE *)(*((_QWORD *)v175 + 1) + 300))
        re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v175 + 4072), (uint64_t *)&__src);
      *(_DWORD *)(a5 + 644) = re::RenderFrame::addRateMap((uint64_t)v175, (void **)(ViewDescriptor + 248));
      if ((_QWORD)v188 && *(_BYTE *)(*((_QWORD *)v175 + 1) + 300))
        re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v175 + 4072), (uint64_t *)&v188);
    }
    else if (*(_QWORD *)(ViewDescriptor + 264))
    {
      if (!v12)
        *(_DWORD *)(a5 + 356) = 1;
      *(_DWORD *)(a5 + 640) = re::RenderFrame::addRateMap((uint64_t)v175, (_QWORD *)(ViewDescriptor + 264));
      if (__src.i64[0] && *(_BYTE *)(*((_QWORD *)v175 + 1) + 300))
        re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v175 + 4072), (uint64_t *)&__src);
      *(_DWORD *)(a5 + 644) = -1;
    }
    if (!*(_QWORD *)(ViewDescriptor + 304))
      return;
    v128 = 0;
    while (1)
    {
      v129 = *(_QWORD *)(ViewDescriptor + 320);
      v130 = v129 + 136 * v128;
      if (!*(_QWORD *)(v130 + 40))
      {
        v135 = v129 + 136 * v128;
        v137 = *(_DWORD *)(v135 + 80);
        v136 = (const unsigned int *)(v135 + 80);
        if (v137 == -1)
        {
          v145 = v129 + 136 * v128;
          v147 = *(_QWORD *)(v145 + 88);
          v146 = (void **)(v145 + 88);
          if (!v147)
          {
            v156 = v129 + 136 * v128;
            v158 = *(_QWORD *)(v156 + 104);
            v157 = (void **)(v156 + 104);
            if (v158)
            {
              if ((*(_BYTE *)(v130 + 8) & 1) != 0)
                v159 = *(char **)(v130 + 16);
              else
                v159 = (char *)(v130 + 9);
              v165 = (const char *)(a5 + 9);
              if ((*(_BYTE *)(a5 + 8) & 1) != 0)
                v165 = *(const char **)(a5 + 16);
              re::RenderFrame::specifyScopeLane(v175, v159, v157, v165, *(_DWORD *)(a5 + 648));
            }
            goto LABEL_184;
          }
          v148 = *(_QWORD *)(v130 + 8);
          if ((v148 & 1) != 0)
          {
            v150 = *(_BYTE **)(v130 + 16);
            if (v150)
            {
              LOBYTE(v149) = *v150;
              goto LABEL_166;
            }
            v163 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v149 = v148 >> 8;
            v150 = (_BYTE *)(v130 + 9);
LABEL_166:
            if ((_BYTE)v149)
            {
              v149 = (char)v149;
              v160 = v150[1];
              if (v160)
              {
                v161 = v150 + 2;
                do
                {
                  v149 = 31 * v149 + v160;
                  v162 = *v161++;
                  v160 = v162;
                }
                while (v162);
              }
              v163 = v149 & 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              v163 = 0;
            }
          }
          v182[0] = (id)v163;
          v166 = (const char *)(a5 + 9);
          if ((*(_BYTE *)(a5 + 8) & 1) != 0)
            v166 = *(const char **)(a5 + 16);
          re::RenderFrame::specifyScopeLane(v175, (uint64_t *)v182, v146, v166);
          goto LABEL_184;
        }
        v138 = *(_QWORD *)(v130 + 8);
        if ((v138 & 1) != 0)
        {
          v140 = *(_BYTE **)(v130 + 16);
          if (v140)
          {
            LOBYTE(v139) = *v140;
            goto LABEL_150;
          }
          v154 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v139 = v138 >> 8;
          v140 = (_BYTE *)(v130 + 9);
LABEL_150:
          if ((_BYTE)v139)
          {
            v139 = (char)v139;
            v151 = v140[1];
            if (v151)
            {
              v152 = v140 + 2;
              do
              {
                v139 = 31 * v139 + v151;
                v153 = *v152++;
                v151 = v153;
              }
              while (v153);
            }
            v154 = v139 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v154 = 0;
          }
        }
        v182[0] = (id)v154;
        v164 = (const char *)(a5 + 9);
        if ((*(_BYTE *)(a5 + 8) & 1) != 0)
          v164 = *(const char **)(a5 + 16);
        re::RenderFrame::specifyScopeLane(v175, (const re::WeakStringID *)v182, v136, v164);
        goto LABEL_184;
      }
      v131 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v130 + 32));
      if (*(_DWORD *)(v131 + 240))
      {
LABEL_186:
        v167 = std::__throw_bad_variant_access[abi:nn180100]();
        re::ecs2::CameraViewDescriptorsHelper::updateCameraViewsPerFrameData<re::ecs2::CustomMatrixCameraComponent>(v167, v168);
        return;
      }
      v182[0] = *(id *)(v131 + 160);
      v132 = *(_QWORD *)(v130 + 8);
      if ((v132 & 1) == 0)
        break;
      v134 = *(_BYTE **)(v130 + 16);
      if (v134)
      {
        LOBYTE(v133) = *v134;
LABEL_139:
        if ((_BYTE)v133)
        {
          v133 = (char)v133;
          v141 = v134[1];
          if (v141)
          {
            v142 = v134 + 2;
            do
            {
              v133 = 31 * v133 + v141;
              v143 = *v142++;
              v141 = v143;
            }
            while (v143);
          }
          v144 = v133 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v144 = 0;
        }
        goto LABEL_156;
      }
      v144 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_156:
      v178[0] = (id)v144;
      v155 = (const char *)(a5 + 9);
      if ((*(_BYTE *)(a5 + 8) & 1) != 0)
        v155 = *(const char **)(a5 + 16);
      re::RenderFrame::specifyScopeLane(v175, (uint64_t *)v178, v182, v155);
      if (v182[0])

LABEL_184:
      if (*(_QWORD *)(ViewDescriptor + 304) <= (unint64_t)++v128)
        return;
    }
    v133 = v132 >> 8;
    v134 = (_BYTE *)(v130 + 9);
    goto LABEL_139;
  }
  *(_OWORD *)(a6 + 416) = v27;
  *(_OWORD *)(a6 + 432) = v28;
  *(_OWORD *)(a6 + 448) = v29;
  *(float32x4_t *)(a6 + 464) = v30;
  *(_OWORD *)(a6 + 1088) = v27;
  *(_OWORD *)(a6 + 1104) = v28;
  *(_OWORD *)(a6 + 1120) = v29;
  *(float32x4_t *)(a6 + 1136) = v30;
  v171 = v29;
  v173 = v30;
  v169 = v28;
  v170 = v27;
  re::ecs2::OrthographicCameraComponent::calculateWorldPose((uint64_t)a4, 1, (uint64_t)v177);
  v31 = v177[1];
  *(_OWORD *)(a6 + 32) = v177[0];
  *(_OWORD *)(a6 + 48) = v31;
  re::ecs2::OrthographicCameraComponent::calculateWorldPose((uint64_t)a4, 2, (uint64_t)v176);
  v32 = v176[1];
  *(_OWORD *)(a6 + 704) = v176[0];
  *(_OWORD *)(a6 + 720) = v32;
  *(_OWORD *)(a6 + 416) = v170;
  *(_OWORD *)(a6 + 432) = v169;
  *(_OWORD *)(a6 + 448) = v171;
  *(float32x4_t *)(a6 + 464) = v173;
  re::ecs2::OrthographicCameraComponent::calculateWorldPose((uint64_t)a4, 1, (uint64_t)&v186);
  v34 = v186;
  v33 = v187;
  *(_OWORD *)(a6 + 32) = v186;
  *(_OWORD *)(a6 + 48) = v33;
  *(_OWORD *)(a6 + 128) = v34;
  *(_OWORD *)(a6 + 144) = v33;
  v35 = a4[6];
  v37 = a4[3];
  v36 = a4[4];
  *(_OWORD *)(a6 + 608) = a4[5];
  *(_OWORD *)(a6 + 624) = v35;
  *(_OWORD *)(a6 + 576) = v37;
  *(_OWORD *)(a6 + 592) = v36;
  re::Projection::computeMatrix4x4F((re::Projection *)(a6 + 64), (uint64_t)v182);
  re::RenderCamera::computeInverseTransform((float32x4_t *)(a6 + 32), (uint64_t)v178);
  v38 = 0;
  v39 = *(float32x4_t *)v182;
  v40 = v183;
  v41 = v184;
  v42 = v185;
  v188 = *(_OWORD *)v178;
  v189 = v179;
  v190 = v180;
  v191 = v181;
  do
  {
    *(float32x4_t *)((char *)&__src + v38) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(__int128 *)((char *)&v188 + v38))), v40, *(float32x2_t *)((char *)&v188 + v38), 1), v41, *(float32x4_t *)((char *)&v188 + v38), 2), v42, *(float32x4_t *)((char *)&v188 + v38), 3);
    v38 += 16;
  }
  while (v38 != 64);
  v43 = v193;
  v44 = v194;
  v45 = v195;
  a4[3] = __src;
  a4[4] = v43;
  a4[5] = v44;
  a4[6] = v45;
  *(_OWORD *)(a6 + 1088) = v170;
  *(_OWORD *)(a6 + 1104) = v169;
  *(_OWORD *)(a6 + 1120) = v171;
  *(float32x4_t *)(a6 + 1136) = v173;
  re::ecs2::OrthographicCameraComponent::calculateWorldPose((uint64_t)a4, 2, (uint64_t)&v186);
  v47 = v186;
  v46 = v187;
  *(_OWORD *)(a6 + 704) = v186;
  *(_OWORD *)(a6 + 720) = v46;
  *(_OWORD *)(a6 + 800) = v47;
  *(_OWORD *)(a6 + 816) = v46;
  v49 = a4[9];
  v48 = a4[10];
  v50 = a4[8];
  *(_OWORD *)(a6 + 1248) = a4[7];
  *(_OWORD *)(a6 + 1280) = v49;
  *(_OWORD *)(a6 + 1296) = v48;
  *(_OWORD *)(a6 + 1264) = v50;
  re::Projection::computeMatrix4x4F((re::Projection *)(a6 + 736), (uint64_t)v182);
  re::RenderCamera::computeInverseTransform((float32x4_t *)(a6 + 704), (uint64_t)v178);
  v52 = 0;
  v53 = *(float32x4_t *)v182;
  v54 = v183;
  v55 = v184;
  v56 = v185;
  v188 = *(_OWORD *)v178;
  v189 = v179;
  v190 = v180;
  v191 = v181;
  do
  {
    *(float32x4_t *)((char *)&__src + v52) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v53, COERCE_FLOAT(*(__int128 *)((char *)&v188 + v52))), v54, *(float32x2_t *)((char *)&v188 + v52), 1), v55, *(float32x4_t *)((char *)&v188 + v52), 2), v56, *(float32x4_t *)((char *)&v188 + v52), 3);
    v52 += 16;
  }
  while (v52 != 64);
  v57 = v193;
  v58 = v194;
  v59 = v195;
  a4[7] = __src;
  a4[8] = v57;
  a4[9] = v58;
  a4[10] = v59;
  __src.i64[0] = 0;
  __src.i32[2] = 0;
  v60 = *(_QWORD *)(ViewDescriptor + 204);
  v61 = *(_QWORD *)(ViewDescriptor + 196);
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&__src, v51))
  {
    v63 = &__src + __src.i64[0];
    v63[1].i64[0] = v61;
    v63[1].i64[1] = v60;
    ++__src.i64[0];
    ++__src.i32[2];
  }
  v64 = *(_QWORD *)(ViewDescriptor + 220);
  v65 = *(_QWORD *)(ViewDescriptor + 212);
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&__src, v62))
  {
    v67 = &__src + __src.i64[0];
    v67[1].i64[0] = v65;
    v67[1].i64[1] = v64;
    ++__src.i64[0];
    ++__src.i32[2];
  }
  *(_QWORD *)&v188 = 0;
  DWORD2(v188) = 0;
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&v188, v66))
  {
    *(&v188 + (_QWORD)v188 + 1) = xmmword_22610BC10;
    *(_QWORD *)&v188 = v188 + 1;
    ++DWORD2(v188);
  }
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&v188, v68))
  {
    *(&v188 + (_QWORD)v188 + 1) = xmmword_22610BC10;
    *(_QWORD *)&v188 = v188 + 1;
    ++DWORD2(v188);
  }
  *(_DWORD *)(a6 + 640) = -1;
  if (*(_QWORD *)(ViewDescriptor + 232))
  {
    *(_DWORD *)(a6 + 640) = re::RenderFrame::addRateMap((uint64_t)v175, (void **)(ViewDescriptor + 232));
    if (__src.i64[0] && *(_BYTE *)(*((_QWORD *)v175 + 1) + 300))
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v175 + 4072), (uint64_t *)&__src);
    *(_DWORD *)(a6 + 644) = re::RenderFrame::addRateMap((uint64_t)v175, (void **)(ViewDescriptor + 248));
    if ((_QWORD)v188 && *(_BYTE *)(*((_QWORD *)v175 + 1) + 300))
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v175 + 4072), (uint64_t *)&v188);
  }
  else if (*(_QWORD *)(ViewDescriptor + 264))
  {
    if (!v12)
      *(_DWORD *)(a6 + 356) = 1;
    *(_DWORD *)(a6 + 640) = re::RenderFrame::addRateMap((uint64_t)v175, (_QWORD *)(ViewDescriptor + 264));
    if (__src.i64[0] && *(_BYTE *)(*((_QWORD *)v175 + 1) + 300))
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v175 + 4072), (uint64_t *)&__src);
    *(_DWORD *)(a6 + 644) = -1;
  }
  *(_DWORD *)(a6 + 1312) = -1;
  if (*(_QWORD *)(ViewDescriptor + 240))
  {
    *(_DWORD *)(a6 + 1312) = re::RenderFrame::addRateMap((uint64_t)v175, (void **)(ViewDescriptor + 240));
    if (__src.i64[0] && *(_BYTE *)(*((_QWORD *)v175 + 1) + 300))
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v175 + 4072), (uint64_t *)&__src);
    *(_DWORD *)(a6 + 1316) = re::RenderFrame::addRateMap((uint64_t)v175, (void **)(ViewDescriptor + 256));
    if ((_QWORD)v188 && *(_BYTE *)(*((_QWORD *)v175 + 1) + 300))
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v175 + 4072), (uint64_t *)&v188);
  }
  else if (*(_QWORD *)(ViewDescriptor + 272))
  {
    if (!v12)
      *(_DWORD *)(a6 + 1028) = 1;
    *(_DWORD *)(a6 + 1312) = re::RenderFrame::addRateMap((uint64_t)v175, (_QWORD *)(ViewDescriptor + 272));
    if (__src.i64[0] && *(_BYTE *)(*((_QWORD *)v175 + 1) + 300))
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v175 + 4072), (uint64_t *)&__src);
    *(_DWORD *)(a6 + 1316) = -1;
  }
  v84 = 0;
  v85 = *(_QWORD *)(ViewDescriptor + 304);
  v86 = 1;
  do
  {
    v87 = v86;
    if (!v85)
      goto LABEL_119;
    v172 = v86;
    v88 = 0;
    v89 = a6 + 672 * v84;
    do
    {
      v90 = *(_QWORD *)(ViewDescriptor + 320);
      v91 = v90 + 136 * v88;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v182, (const re::AssetHandle *)(v91 + 24 * v84 + 32));
      if (*(_BYTE *)(a6 + 1344) == 1)
        re::AssetHandle::operator=((uint64_t *)v182, (uint64_t *)(v90 + 136 * v88 + 32));
      if (v182[1])
      {
        v92 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v182);
        if (*(_DWORD *)(v92 + 240))
          goto LABEL_186;
        v178[0] = *(id *)(v92 + 160);
        v93 = *(_QWORD *)(v91 + 8);
        if ((v93 & 1) != 0)
        {
          v95 = *(_BYTE **)(v91 + 16);
          if (!v95)
          {
            v105 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_89:
            *(_QWORD *)&v186 = v105;
            v116 = (const char *)(v89 + 9);
            if ((*(_BYTE *)(v89 + 8) & 1) != 0)
              v116 = *(const char **)(v89 + 16);
            re::RenderFrame::specifyScopeLane(v175, (uint64_t *)&v186, v178, v116);
            if (v178[0])

            goto LABEL_117;
          }
          LOBYTE(v94) = *v95;
        }
        else
        {
          v94 = v93 >> 8;
          v95 = (_BYTE *)(v91 + 9);
        }
        if ((_BYTE)v94)
        {
          v94 = (char)v94;
          v102 = v95[1];
          if (v102)
          {
            v103 = v95 + 2;
            do
            {
              v94 = 31 * v94 + v102;
              v104 = *v103++;
              v102 = v104;
            }
            while (v104);
          }
          v105 = v94 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v105 = 0;
        }
        goto LABEL_89;
      }
      v96 = v90 + 136 * v88 + 4 * v84;
      v98 = *(_DWORD *)(v96 + 80);
      v97 = (const unsigned int *)(v96 + 80);
      if (v98 != -1)
      {
        v99 = *(_QWORD *)(v91 + 8);
        if ((v99 & 1) != 0)
        {
          v101 = *(_BYTE **)(v91 + 16);
          if (v101)
          {
            LOBYTE(v100) = *v101;
            goto LABEL_83;
          }
          v115 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v100 = v99 >> 8;
          v101 = (_BYTE *)(v91 + 9);
LABEL_83:
          if ((_BYTE)v100)
          {
            v100 = (char)v100;
            v112 = v101[1];
            if (v112)
            {
              v113 = v101 + 2;
              do
              {
                v100 = 31 * v100 + v112;
                v114 = *v113++;
                v112 = v114;
              }
              while (v114);
            }
            v115 = v100 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v115 = 0;
          }
        }
        v178[0] = (id)v115;
        v125 = (const char *)(v89 + 9);
        if ((*(_BYTE *)(v89 + 8) & 1) != 0)
          v125 = *(const char **)(v89 + 16);
        re::RenderFrame::specifyScopeLane(v175, (const re::WeakStringID *)v178, v97, v125);
        goto LABEL_117;
      }
      v106 = v90 + 136 * v88 + 8 * v84;
      v108 = *(_QWORD *)(v106 + 88);
      v107 = (void **)(v106 + 88);
      if (v108)
      {
        v109 = *(_QWORD *)(v91 + 8);
        if ((v109 & 1) != 0)
        {
          v111 = *(_BYTE **)(v91 + 16);
          if (v111)
          {
            LOBYTE(v110) = *v111;
            goto LABEL_99;
          }
          v124 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v110 = v109 >> 8;
          v111 = (_BYTE *)(v91 + 9);
LABEL_99:
          if ((_BYTE)v110)
          {
            v110 = (char)v110;
            v121 = v111[1];
            if (v121)
            {
              v122 = v111 + 2;
              do
              {
                v110 = 31 * v110 + v121;
                v123 = *v122++;
                v121 = v123;
              }
              while (v123);
            }
            v124 = v110 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v124 = 0;
          }
        }
        v178[0] = (id)v124;
        v127 = (const char *)(v89 + 9);
        if ((*(_BYTE *)(v89 + 8) & 1) != 0)
          v127 = *(const char **)(v89 + 16);
        re::RenderFrame::specifyScopeLane(v175, (uint64_t *)v178, v107, v127);
        goto LABEL_117;
      }
      v117 = v90 + 136 * v88 + 8 * v84;
      v119 = *(_QWORD *)(v117 + 104);
      v118 = (void **)(v117 + 104);
      if (v119)
      {
        if ((*(_BYTE *)(v91 + 8) & 1) != 0)
          v120 = *(char **)(v91 + 16);
        else
          v120 = (char *)(v91 + 9);
        v126 = (const char *)(v89 + 9);
        if ((*(_BYTE *)(v89 + 8) & 1) != 0)
          v126 = *(const char **)(v89 + 16);
        re::RenderFrame::specifyScopeLane(v175, v120, v118, v126, *(_DWORD *)(v89 + 648));
      }
LABEL_117:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v182);
      ++v88;
      v85 = *(_QWORD *)(ViewDescriptor + 304);
    }
    while (v85 > v88);
    v87 = v172;
LABEL_119:
    v86 = 0;
    v84 = 1;
  }
  while ((v87 & 1) != 0);
}

void re::ecs2::CameraViewDescriptorsHelper::updateCameraViewsPerFrameData<re::ecs2::CustomMatrixCameraComponent>(_anonymous_namespace_ *a1, re::ecs2::CameraViewDescriptorsComponent *this, _OWORD *a3, re::ecs2::CameraViewDescriptorsComponent *a4)
{
  re::ecs2::CameraViewDescriptorsComponent *v4;
  int v8;
  re::ecs2::CameraViewDescriptorsComponent *v9;
  unint64_t v10;
  unint64_t v11;
  re::ecs2::CameraViewDescriptorsComponent *v12;
  re::ecs2::CameraViewDescriptorsComponent *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  re::ecs2::Entity *v17;
  uint64_t v18;
  re::ecs2::CameraViewDescriptorsComponent *v19;
  re::ecs2::CameraViewDescriptorsComponent *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  re::ecs2::Entity *v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  void *v30;
  void *v31;
  uint64_t j;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int16 v48;
  char v49;
  _QWORD v50[3];
  int v51;
  uint64_t v52;
  _BYTE v53[12];
  __int16 v54;
  _BYTE v55[14];
  __int16 v56;
  unint64_t v57;
  _DWORD v58[12];
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v4 = a4;
  v61 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    v4 = (re::ecs2::CameraViewDescriptorsComponent *)*((_QWORD *)this + 2);
  *(_QWORD *)v53 = this;
  *(_QWORD *)&v55[2] = 0;
  if (*((_QWORD *)this + 27))
  {
    v8 = 0;
  }
  else if (*((_QWORD *)this + 32))
  {
    v8 = 1;
  }
  else
  {
    if (!*((_QWORD *)this + 37))
    {
      v10 = 0;
      v11 = 0;
      goto LABEL_25;
    }
    v8 = 2;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  *(_DWORD *)&v53[8] = v8;
  do
  {
    v12 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v9 + 0x20000);
    if (v8 == 1)
      v9 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v9 + 0x10000);
    if (v8 == 2)
      v13 = v12;
    else
      v13 = v9;
    if (*(_BYTE *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, v13) + 192))
    {
      v14 = *((_QWORD *)this + 12);
      if (v14 <= v11)
      {
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v33 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v58[0] = 136315906;
        *(_QWORD *)&v58[1] = "operator[]";
        LOWORD(v58[3]) = 1024;
        *(_DWORD *)((char *)&v58[3] + 2) = 789;
        HIWORD(v58[4]) = 2048;
        *(_QWORD *)&v58[5] = v11;
        LOWORD(v58[7]) = 2048;
        *(_QWORD *)((char *)&v58[7] + 2) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_57:
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v33 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v58[0] = 136315906;
        *(_QWORD *)&v58[1] = "operator[]";
        LOWORD(v58[3]) = 1024;
        *(_DWORD *)((char *)&v58[3] + 2) = 789;
        HIWORD(v58[4]) = 2048;
        *(_QWORD *)&v58[5] = v10;
        LOWORD(v58[7]) = 2048;
        *(_QWORD *)((char *)&v58[7] + 2) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_58;
      }
      v15 = 0;
      v16 = *((_QWORD *)this + 14) + 1360 * v11++;
    }
    else
    {
      v14 = *((_QWORD *)this + 7);
      if (v14 <= v10)
        goto LABEL_57;
      v16 = 0;
      v15 = *((_QWORD *)this + 9) + 672 * v10++;
    }
    re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)v53);
    v8 = *(_DWORD *)&v53[8];
    v9 = *(re::ecs2::CameraViewDescriptorsComponent **)&v55[2];
  }
  while (*(re::ecs2::CameraViewDescriptorsComponent **)v53 != this || *(_DWORD *)&v53[8] != 3 || *(_QWORD *)&v55[2]);
  v18 = *((_QWORD *)this + 27);
  if (v18 == 1)
  {
    if (!*((_QWORD *)this + 32) && !*(_QWORD *)(*((_QWORD *)this + 29) + 304))
    return;
  }
  if (v18)
    return;
LABEL_25:
  v19 = v4;
  do
  {
    v20 = v19;
    v19 = (re::ecs2::CameraViewDescriptorsComponent *)*((_QWORD *)v19 + 3);
  }
  while (v19);
  v21 = *(_QWORD *)(*((_QWORD *)v20 + 2) + 376);
  if (v21)
    LOBYTE(v21) = *(_QWORD *)(v21 + 24) != 1;
  if (!*((_QWORD *)this + 32) && (v21 & 1) == 0)
  {
    v22 = 0;
    v33 = 0u;
    v34 = 0u;
    v35 = xmmword_2260E5D70;
    *(_QWORD *)&v36 = 0x70000FF00000000;
    WORD4(v36) = 1;
    BYTE12(v36) = 0;
    v41 = 0;
    v38 = 0;
    v39 = 0;
    *((_QWORD *)&v37 + 1) = 0;
    v40 = 0;
    do
    {
      v23 = (char *)&v33 + v22;
      *((_QWORD *)v23 + 18) = 0;
      *((_QWORD *)v23 + 15) = 0;
      *((_QWORD *)v23 + 16) = 0;
      *((_QWORD *)v23 + 14) = 0;
      v22 += 40;
      *((_DWORD *)v23 + 34) = 0;
    }
    while (v22 != 80);
    v42 = 0;
    v44 = xmmword_22610BC10;
    v43 = xmmword_22610BC10;
    v47 = 0u;
    v45 = 0u;
    v46 = 0u;
    v48 = 1;
    v49 = 0;
    v52 = 0;
    memset(v50, 0, sizeof(v50));
    v51 = 0;
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add((re::ecs2::CameraViewDescriptorsComponent *)((char *)this + 240), (re::ecs2::CameraViewDescriptor *)&v33);
    if (*(_BYTE *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, (re::ecs2::CameraViewDescriptorsComponent *)0x10000)+ 192))
    {
      v14 = *((_QWORD *)this + 12);
      if (v14 > v11)
      {
        v24 = 0;
        v25 = *((_QWORD *)this + 14) + 1360 * v11;
LABEL_41:
        v27 = *((_QWORD *)this + 32);
        *((_QWORD *)this + 32) = 0;
        re::ObjectHelper::destroy<re::ecs2::CameraViewDescriptor>(*((re::AssetHandle **)this + 34), (re::AssetHandle *)(*((_QWORD *)this + 34) + 336 * v27));
        ++*((_DWORD *)this + 66);
        re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)v50);
        for (i = 272; i != 256; i -= 8)
        {
          v29 = *(void **)((char *)&v33 + i);
          if (v29)
          {

            *(_QWORD *)((char *)&v33 + i) = 0;
          }
        }
        do
        {
          v30 = *(void **)((char *)&v33 + i);
          if (v30)
          {

            *(_QWORD *)((char *)&v33 + i) = 0;
          }
          i -= 8;
        }
        while (i != 240);
        do
        {
          v31 = *(void **)((char *)&v33 + i);
          if (v31)
          {

            *(_QWORD *)((char *)&v33 + i) = 0;
          }
          i -= 8;
        }
        while (i != 224);
        for (j = 152; j != 72; j -= 40)
          re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v33 + j);
        re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v37 + 8);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v33);
        return;
      }
LABEL_58:
      v59 = 0u;
      v60 = 0u;
      memset(v58, 0, sizeof(v58));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v53 = 136315906;
      *(_QWORD *)&v53[4] = "operator[]";
      v54 = 1024;
      *(_DWORD *)v55 = 789;
      *(_WORD *)&v55[4] = 2048;
      *(_QWORD *)&v55[6] = v11;
      v56 = 2048;
      v57 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      v14 = *((_QWORD *)this + 7);
      if (v14 > v10)
      {
        v25 = 0;
        v24 = *((_QWORD *)this + 9) + 672 * v10;
        goto LABEL_41;
      }
    }
    v59 = 0u;
    v60 = 0u;
    memset(v58, 0, sizeof(v58));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v53 = 136315906;
    *(_QWORD *)&v53[4] = "operator[]";
    v54 = 1024;
    *(_DWORD *)v55 = 789;
    *(_WORD *)&v55[4] = 2048;
    *(_QWORD *)&v55[6] = v10;
    v56 = 2048;
    v57 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void `anonymous namespace'::updateOneViewPerFrameData<re::ecs2::CustomMatrixCameraComponent>(uint64_t a1, re::ecs2::CameraViewDescriptorsComponent *a2, re::ecs2::CameraViewDescriptorsComponent *this, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t ViewDescriptor;
  uint64_t v11;
  int v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  __int128 v33;
  float32x4_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  float32x4_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float32x4_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float32x4_t *v67;
  uint64_t v68;
  __int128 v69;
  float32x4_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  char v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  const unsigned int *v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  char v102;
  unsigned __int8 *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  void **v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  char v112;
  unsigned __int8 *v113;
  int v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  void **v118;
  uint64_t v119;
  char *v120;
  char v121;
  unsigned __int8 *v122;
  int v123;
  uint64_t v124;
  const char *v125;
  const char *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  const unsigned int *v136;
  int v137;
  unint64_t v138;
  uint64_t v139;
  _BYTE *v140;
  char v141;
  unsigned __int8 *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  void **v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  _BYTE *v150;
  char v151;
  unsigned __int8 *v152;
  int v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  void **v157;
  uint64_t v158;
  char *v159;
  char v160;
  unsigned __int8 *v161;
  int v162;
  uint64_t v163;
  const char *v164;
  const char *v165;
  const char *v166;
  re::RenderGraphAsset *v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  char v171;
  float32x4_t v172;
  __int128 v173;
  re::RenderFrame *v174;
  float32x4_t v175[2];
  float32x4_t v176[2];
  id v177[2];
  __int128 v178;
  __int128 v179;
  __int128 v180;
  id v181[2];
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  float32x4_t __src;
  float32x4_t v192;
  __int128 v193;
  __int128 v194;

  ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
  v11 = *(_QWORD *)(a1 + 104);
  if (v11)
    v174 = (re::RenderFrame *)re::RenderFrameBox::get(v11 + 344, 0xFFFFFFFFFFFFFFFuLL);
  else
    v174 = 0;
  v12 = *(unsigned __int8 *)(a1 + 300);
  re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)a4, 0, &__src);
  v13 = vnegq_f32(v192);
  v14 = (int8x16_t)vnegq_f32(__src);
  v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL);
  v16 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL), v192), v15, __src);
  v17 = (int8x16_t)vaddq_f32(v16, v16);
  v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), v17, 0xCuLL);
  v19 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), v192), v18, v15);
  v30 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v18, v192, 3), __src), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), v19, 0xCuLL));
  v20 = v13.f32[0] + v13.f32[0];
  *(float *)v19.i32 = (float)(v13.f32[0] + v13.f32[0]) * v13.f32[0];
  v21 = vmuls_lane_f32(v13.f32[1] + v13.f32[1], *(float32x2_t *)v13.f32, 1);
  v22 = vmuls_lane_f32(v13.f32[2] + v13.f32[2], v13, 2);
  v23 = vmuls_lane_f32(v13.f32[0] + v13.f32[0], *(float32x2_t *)v13.f32, 1);
  v24 = vmuls_lane_f32(v13.f32[0] + v13.f32[0], v13, 2);
  v13.f32[0] = vmuls_lane_f32(v13.f32[1] + v13.f32[1], v13, 2);
  v25 = vmuls_lane_f32(v20, v192, 3);
  v18.f32[0] = vmuls_lane_f32(v13.f32[1] + v13.f32[1], v192, 3);
  v26 = vmuls_lane_f32(v13.f32[2] + v13.f32[2], v192, 3);
  HIDWORD(v29) = 0;
  HIDWORD(v27) = 0;
  *(float *)&v27 = 1.0 - (float)(v21 + v22);
  *((float *)&v27 + 1) = v23 + v26;
  *((float *)&v27 + 2) = v24 - v18.f32[0];
  v15.f32[0] = 1.0 - (float)(*(float *)v19.i32 + v22);
  HIDWORD(v28) = 0;
  *(float *)&v28 = v23 - v26;
  DWORD1(v28) = v15.i32[0];
  *((float *)&v28 + 2) = v13.f32[0] + v25;
  *(float *)&v29 = v24 + v18.f32[0];
  *((float *)&v29 + 1) = v13.f32[0] - v25;
  *((float *)&v29 + 2) = 1.0 - (float)(*(float *)v19.i32 + v21);
  v30.i32[3] = 1.0;
  if (!*(_BYTE *)(ViewDescriptor + 192))
  {
    *(_OWORD *)(a5 + 416) = v27;
    *(_OWORD *)(a5 + 432) = v28;
    *(_OWORD *)(a5 + 448) = v29;
    *(float32x4_t *)(a5 + 464) = v30;
    re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)a4, 0, &v185);
    v70 = v185;
    v69 = v186;
    *(float32x4_t *)(a5 + 32) = v185;
    *(_OWORD *)(a5 + 48) = v69;
    *(float32x4_t *)(a5 + 128) = v70;
    *(_OWORD *)(a5 + 144) = v69;
    v71 = a4[6];
    v73 = a4[3];
    v72 = a4[4];
    *(_OWORD *)(a5 + 608) = a4[5];
    *(_OWORD *)(a5 + 624) = v71;
    *(_OWORD *)(a5 + 576) = v73;
    *(_OWORD *)(a5 + 592) = v72;
    re::Projection::computeMatrix4x4F((re::Projection *)(a5 + 64), (uint64_t)v181);
    re::RenderCamera::computeInverseTransform((float32x4_t *)(a5 + 32), (uint64_t)v177);
    v75 = 0;
    v76 = *(float32x4_t *)v181;
    v77 = v182;
    v78 = v183;
    v79 = v184;
    v187 = *(_OWORD *)v177;
    v188 = v178;
    v189 = v179;
    v190 = v180;
    do
    {
      *(float32x4_t *)((char *)&__src + v75) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v76, COERCE_FLOAT(*(__int128 *)((char *)&v187 + v75))), v77, *(float32x2_t *)((char *)&v187 + v75), 1), v78, *(float32x4_t *)((char *)&v187 + v75), 2), v79, *(float32x4_t *)((char *)&v187 + v75), 3);
      v75 += 16;
    }
    while (v75 != 64);
    v80 = v192;
    v81 = v193;
    v82 = v194;
    a4[3] = __src;
    a4[4] = v80;
    a4[5] = v81;
    a4[6] = v82;
    a4[7] = xmmword_2260E5F10;
    a4[8] = xmmword_2260E5F20;
    a4[9] = xmmword_2260E5F40;
    a4[10] = xmmword_2260E5D70;
    __src.i64[0] = 0;
    __src.i32[2] = 0;
    v173 = *(_OWORD *)(ViewDescriptor + 196);
    if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&__src, v74))
    {
      *((_OWORD *)&__src + ++__src.i64[0]) = v173;
      ++__src.i32[2];
    }
    *(_QWORD *)&v187 = 0;
    DWORD2(v187) = 0;
    if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&v187, v83))
    {
      *(&v187 + (_QWORD)v187 + 1) = xmmword_22610BC10;
      *(_QWORD *)&v187 = v187 + 1;
      ++DWORD2(v187);
    }
    *(_DWORD *)(a5 + 640) = -1;
    if (*(_QWORD *)(ViewDescriptor + 232))
    {
      *(_DWORD *)(a5 + 640) = re::RenderFrame::addRateMap((uint64_t)v174, (void **)(ViewDescriptor + 232));
      if (__src.i64[0] && *(_BYTE *)(*((_QWORD *)v174 + 1) + 300))
        re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v174 + 4072), (uint64_t *)&__src);
      *(_DWORD *)(a5 + 644) = re::RenderFrame::addRateMap((uint64_t)v174, (void **)(ViewDescriptor + 248));
      if ((_QWORD)v187 && *(_BYTE *)(*((_QWORD *)v174 + 1) + 300))
        re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v174 + 4072), (uint64_t *)&v187);
    }
    else if (*(_QWORD *)(ViewDescriptor + 264))
    {
      if (!v12)
        *(_DWORD *)(a5 + 356) = 1;
      *(_DWORD *)(a5 + 640) = re::RenderFrame::addRateMap((uint64_t)v174, (_QWORD *)(ViewDescriptor + 264));
      if (__src.i64[0] && *(_BYTE *)(*((_QWORD *)v174 + 1) + 300))
        re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v174 + 4072), (uint64_t *)&__src);
      *(_DWORD *)(a5 + 644) = -1;
    }
    if (!*(_QWORD *)(ViewDescriptor + 304))
      return;
    v128 = 0;
    while (1)
    {
      v129 = *(_QWORD *)(ViewDescriptor + 320);
      v130 = v129 + 136 * v128;
      if (!*(_QWORD *)(v130 + 40))
      {
        v135 = v129 + 136 * v128;
        v137 = *(_DWORD *)(v135 + 80);
        v136 = (const unsigned int *)(v135 + 80);
        if (v137 == -1)
        {
          v145 = v129 + 136 * v128;
          v147 = *(_QWORD *)(v145 + 88);
          v146 = (void **)(v145 + 88);
          if (!v147)
          {
            v156 = v129 + 136 * v128;
            v158 = *(_QWORD *)(v156 + 104);
            v157 = (void **)(v156 + 104);
            if (v158)
            {
              if ((*(_BYTE *)(v130 + 8) & 1) != 0)
                v159 = *(char **)(v130 + 16);
              else
                v159 = (char *)(v130 + 9);
              v165 = (const char *)(a5 + 9);
              if ((*(_BYTE *)(a5 + 8) & 1) != 0)
                v165 = *(const char **)(a5 + 16);
              re::RenderFrame::specifyScopeLane(v174, v159, v157, v165, *(_DWORD *)(a5 + 648));
            }
            goto LABEL_184;
          }
          v148 = *(_QWORD *)(v130 + 8);
          if ((v148 & 1) != 0)
          {
            v150 = *(_BYTE **)(v130 + 16);
            if (v150)
            {
              LOBYTE(v149) = *v150;
              goto LABEL_166;
            }
            v163 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v149 = v148 >> 8;
            v150 = (_BYTE *)(v130 + 9);
LABEL_166:
            if ((_BYTE)v149)
            {
              v149 = (char)v149;
              v160 = v150[1];
              if (v160)
              {
                v161 = v150 + 2;
                do
                {
                  v149 = 31 * v149 + v160;
                  v162 = *v161++;
                  v160 = v162;
                }
                while (v162);
              }
              v163 = v149 & 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              v163 = 0;
            }
          }
          v181[0] = (id)v163;
          v166 = (const char *)(a5 + 9);
          if ((*(_BYTE *)(a5 + 8) & 1) != 0)
            v166 = *(const char **)(a5 + 16);
          re::RenderFrame::specifyScopeLane(v174, (uint64_t *)v181, v146, v166);
          goto LABEL_184;
        }
        v138 = *(_QWORD *)(v130 + 8);
        if ((v138 & 1) != 0)
        {
          v140 = *(_BYTE **)(v130 + 16);
          if (v140)
          {
            LOBYTE(v139) = *v140;
            goto LABEL_150;
          }
          v154 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v139 = v138 >> 8;
          v140 = (_BYTE *)(v130 + 9);
LABEL_150:
          if ((_BYTE)v139)
          {
            v139 = (char)v139;
            v151 = v140[1];
            if (v151)
            {
              v152 = v140 + 2;
              do
              {
                v139 = 31 * v139 + v151;
                v153 = *v152++;
                v151 = v153;
              }
              while (v153);
            }
            v154 = v139 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v154 = 0;
          }
        }
        v181[0] = (id)v154;
        v164 = (const char *)(a5 + 9);
        if ((*(_BYTE *)(a5 + 8) & 1) != 0)
          v164 = *(const char **)(a5 + 16);
        re::RenderFrame::specifyScopeLane(v174, (const re::WeakStringID *)v181, v136, v164);
        goto LABEL_184;
      }
      v131 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v130 + 32));
      if (*(_DWORD *)(v131 + 240))
      {
LABEL_186:
        v167 = (re::RenderGraphAsset *)std::__throw_bad_variant_access[abi:nn180100]();
        re::AssetHandle::asset<re::RenderGraphAsset>(v167);
        return;
      }
      v181[0] = *(id *)(v131 + 160);
      v132 = *(_QWORD *)(v130 + 8);
      if ((v132 & 1) == 0)
        break;
      v134 = *(_BYTE **)(v130 + 16);
      if (v134)
      {
        LOBYTE(v133) = *v134;
LABEL_139:
        if ((_BYTE)v133)
        {
          v133 = (char)v133;
          v141 = v134[1];
          if (v141)
          {
            v142 = v134 + 2;
            do
            {
              v133 = 31 * v133 + v141;
              v143 = *v142++;
              v141 = v143;
            }
            while (v143);
          }
          v144 = v133 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v144 = 0;
        }
        goto LABEL_156;
      }
      v144 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_156:
      v177[0] = (id)v144;
      v155 = (const char *)(a5 + 9);
      if ((*(_BYTE *)(a5 + 8) & 1) != 0)
        v155 = *(const char **)(a5 + 16);
      re::RenderFrame::specifyScopeLane(v174, (uint64_t *)v177, v181, v155);
      if (v181[0])

LABEL_184:
      if (*(_QWORD *)(ViewDescriptor + 304) <= (unint64_t)++v128)
        return;
    }
    v133 = v132 >> 8;
    v134 = (_BYTE *)(v130 + 9);
    goto LABEL_139;
  }
  *(_OWORD *)(a6 + 416) = v27;
  *(_OWORD *)(a6 + 432) = v28;
  *(_OWORD *)(a6 + 448) = v29;
  *(float32x4_t *)(a6 + 464) = v30;
  *(_OWORD *)(a6 + 1088) = v27;
  *(_OWORD *)(a6 + 1104) = v28;
  *(_OWORD *)(a6 + 1120) = v29;
  *(float32x4_t *)(a6 + 1136) = v30;
  v170 = v29;
  v172 = v30;
  v168 = v28;
  v169 = v27;
  re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)a4, 1, v176);
  v31 = v176[1];
  *(float32x4_t *)(a6 + 32) = v176[0];
  *(float32x4_t *)(a6 + 48) = v31;
  re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)a4, 2, v175);
  v32 = v175[1];
  *(float32x4_t *)(a6 + 704) = v175[0];
  *(float32x4_t *)(a6 + 720) = v32;
  *(_OWORD *)(a6 + 416) = v169;
  *(_OWORD *)(a6 + 432) = v168;
  *(_OWORD *)(a6 + 448) = v170;
  *(float32x4_t *)(a6 + 464) = v172;
  re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)a4, 1, &v185);
  v34 = v185;
  v33 = v186;
  *(float32x4_t *)(a6 + 32) = v185;
  *(_OWORD *)(a6 + 48) = v33;
  *(float32x4_t *)(a6 + 128) = v34;
  *(_OWORD *)(a6 + 144) = v33;
  v35 = a4[6];
  v37 = a4[3];
  v36 = a4[4];
  *(_OWORD *)(a6 + 608) = a4[5];
  *(_OWORD *)(a6 + 624) = v35;
  *(_OWORD *)(a6 + 576) = v37;
  *(_OWORD *)(a6 + 592) = v36;
  re::Projection::computeMatrix4x4F((re::Projection *)(a6 + 64), (uint64_t)v181);
  re::RenderCamera::computeInverseTransform((float32x4_t *)(a6 + 32), (uint64_t)v177);
  v38 = 0;
  v39 = *(float32x4_t *)v181;
  v40 = v182;
  v41 = v183;
  v42 = v184;
  v187 = *(_OWORD *)v177;
  v188 = v178;
  v189 = v179;
  v190 = v180;
  do
  {
    *(float32x4_t *)((char *)&__src + v38) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(__int128 *)((char *)&v187 + v38))), v40, *(float32x2_t *)((char *)&v187 + v38), 1), v41, *(float32x4_t *)((char *)&v187 + v38), 2), v42, *(float32x4_t *)((char *)&v187 + v38), 3);
    v38 += 16;
  }
  while (v38 != 64);
  v43 = v192;
  v44 = v193;
  v45 = v194;
  a4[3] = __src;
  a4[4] = v43;
  a4[5] = v44;
  a4[6] = v45;
  *(_OWORD *)(a6 + 1088) = v169;
  *(_OWORD *)(a6 + 1104) = v168;
  *(_OWORD *)(a6 + 1120) = v170;
  *(float32x4_t *)(a6 + 1136) = v172;
  re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)a4, 2, &v185);
  v47 = v185;
  v46 = v186;
  *(float32x4_t *)(a6 + 704) = v185;
  *(_OWORD *)(a6 + 720) = v46;
  *(float32x4_t *)(a6 + 800) = v47;
  *(_OWORD *)(a6 + 816) = v46;
  v49 = a4[9];
  v48 = a4[10];
  v50 = a4[8];
  *(_OWORD *)(a6 + 1248) = a4[7];
  *(_OWORD *)(a6 + 1280) = v49;
  *(_OWORD *)(a6 + 1296) = v48;
  *(_OWORD *)(a6 + 1264) = v50;
  re::Projection::computeMatrix4x4F((re::Projection *)(a6 + 736), (uint64_t)v181);
  re::RenderCamera::computeInverseTransform((float32x4_t *)(a6 + 704), (uint64_t)v177);
  v52 = 0;
  v53 = *(float32x4_t *)v181;
  v54 = v182;
  v55 = v183;
  v56 = v184;
  v187 = *(_OWORD *)v177;
  v188 = v178;
  v189 = v179;
  v190 = v180;
  do
  {
    *(float32x4_t *)((char *)&__src + v52) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v53, COERCE_FLOAT(*(__int128 *)((char *)&v187 + v52))), v54, *(float32x2_t *)((char *)&v187 + v52), 1), v55, *(float32x4_t *)((char *)&v187 + v52), 2), v56, *(float32x4_t *)((char *)&v187 + v52), 3);
    v52 += 16;
  }
  while (v52 != 64);
  v57 = v192;
  v58 = v193;
  v59 = v194;
  a4[7] = __src;
  a4[8] = v57;
  a4[9] = v58;
  a4[10] = v59;
  __src.i64[0] = 0;
  __src.i32[2] = 0;
  v60 = *(_QWORD *)(ViewDescriptor + 204);
  v61 = *(_QWORD *)(ViewDescriptor + 196);
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&__src, v51))
  {
    v63 = &__src + __src.i64[0];
    v63[1].i64[0] = v61;
    v63[1].i64[1] = v60;
    ++__src.i64[0];
    ++__src.i32[2];
  }
  v64 = *(_QWORD *)(ViewDescriptor + 220);
  v65 = *(_QWORD *)(ViewDescriptor + 212);
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&__src, v62))
  {
    v67 = &__src + __src.i64[0];
    v67[1].i64[0] = v65;
    v67[1].i64[1] = v64;
    ++__src.i64[0];
    ++__src.i32[2];
  }
  *(_QWORD *)&v187 = 0;
  DWORD2(v187) = 0;
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&v187, v66))
  {
    *(&v187 + (_QWORD)v187 + 1) = xmmword_22610BC10;
    *(_QWORD *)&v187 = v187 + 1;
    ++DWORD2(v187);
  }
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&v187, v68))
  {
    *(&v187 + (_QWORD)v187 + 1) = xmmword_22610BC10;
    *(_QWORD *)&v187 = v187 + 1;
    ++DWORD2(v187);
  }
  *(_DWORD *)(a6 + 640) = -1;
  if (*(_QWORD *)(ViewDescriptor + 232))
  {
    *(_DWORD *)(a6 + 640) = re::RenderFrame::addRateMap((uint64_t)v174, (void **)(ViewDescriptor + 232));
    if (__src.i64[0] && *(_BYTE *)(*((_QWORD *)v174 + 1) + 300))
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v174 + 4072), (uint64_t *)&__src);
    *(_DWORD *)(a6 + 644) = re::RenderFrame::addRateMap((uint64_t)v174, (void **)(ViewDescriptor + 248));
    if ((_QWORD)v187 && *(_BYTE *)(*((_QWORD *)v174 + 1) + 300))
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v174 + 4072), (uint64_t *)&v187);
  }
  else if (*(_QWORD *)(ViewDescriptor + 264))
  {
    if (!v12)
      *(_DWORD *)(a6 + 356) = 1;
    *(_DWORD *)(a6 + 640) = re::RenderFrame::addRateMap((uint64_t)v174, (_QWORD *)(ViewDescriptor + 264));
    if (__src.i64[0] && *(_BYTE *)(*((_QWORD *)v174 + 1) + 300))
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v174 + 4072), (uint64_t *)&__src);
    *(_DWORD *)(a6 + 644) = -1;
  }
  *(_DWORD *)(a6 + 1312) = -1;
  if (*(_QWORD *)(ViewDescriptor + 240))
  {
    *(_DWORD *)(a6 + 1312) = re::RenderFrame::addRateMap((uint64_t)v174, (void **)(ViewDescriptor + 240));
    if (__src.i64[0] && *(_BYTE *)(*((_QWORD *)v174 + 1) + 300))
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v174 + 4072), (uint64_t *)&__src);
    *(_DWORD *)(a6 + 1316) = re::RenderFrame::addRateMap((uint64_t)v174, (void **)(ViewDescriptor + 256));
    if ((_QWORD)v187 && *(_BYTE *)(*((_QWORD *)v174 + 1) + 300))
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v174 + 4072), (uint64_t *)&v187);
  }
  else if (*(_QWORD *)(ViewDescriptor + 272))
  {
    if (!v12)
      *(_DWORD *)(a6 + 1028) = 1;
    *(_DWORD *)(a6 + 1312) = re::RenderFrame::addRateMap((uint64_t)v174, (_QWORD *)(ViewDescriptor + 272));
    if (__src.i64[0] && *(_BYTE *)(*((_QWORD *)v174 + 1) + 300))
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v174 + 4072), (uint64_t *)&__src);
    *(_DWORD *)(a6 + 1316) = -1;
  }
  v84 = 0;
  v85 = *(_QWORD *)(ViewDescriptor + 304);
  v86 = 1;
  do
  {
    v87 = v86;
    if (!v85)
      goto LABEL_119;
    v171 = v86;
    v88 = 0;
    v89 = a6 + 672 * v84;
    do
    {
      v90 = *(_QWORD *)(ViewDescriptor + 320);
      v91 = v90 + 136 * v88;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v181, (const re::AssetHandle *)(v91 + 24 * v84 + 32));
      if (*(_BYTE *)(a6 + 1344) == 1)
        re::AssetHandle::operator=((uint64_t *)v181, (uint64_t *)(v90 + 136 * v88 + 32));
      if (v181[1])
      {
        v92 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v181);
        if (*(_DWORD *)(v92 + 240))
          goto LABEL_186;
        v177[0] = *(id *)(v92 + 160);
        v93 = *(_QWORD *)(v91 + 8);
        if ((v93 & 1) != 0)
        {
          v95 = *(_BYTE **)(v91 + 16);
          if (!v95)
          {
            v105 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_89:
            v185.i64[0] = v105;
            v116 = (const char *)(v89 + 9);
            if ((*(_BYTE *)(v89 + 8) & 1) != 0)
              v116 = *(const char **)(v89 + 16);
            re::RenderFrame::specifyScopeLane(v174, (uint64_t *)&v185, v177, v116);
            if (v177[0])

            goto LABEL_117;
          }
          LOBYTE(v94) = *v95;
        }
        else
        {
          v94 = v93 >> 8;
          v95 = (_BYTE *)(v91 + 9);
        }
        if ((_BYTE)v94)
        {
          v94 = (char)v94;
          v102 = v95[1];
          if (v102)
          {
            v103 = v95 + 2;
            do
            {
              v94 = 31 * v94 + v102;
              v104 = *v103++;
              v102 = v104;
            }
            while (v104);
          }
          v105 = v94 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v105 = 0;
        }
        goto LABEL_89;
      }
      v96 = v90 + 136 * v88 + 4 * v84;
      v98 = *(_DWORD *)(v96 + 80);
      v97 = (const unsigned int *)(v96 + 80);
      if (v98 != -1)
      {
        v99 = *(_QWORD *)(v91 + 8);
        if ((v99 & 1) != 0)
        {
          v101 = *(_BYTE **)(v91 + 16);
          if (v101)
          {
            LOBYTE(v100) = *v101;
            goto LABEL_83;
          }
          v115 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v100 = v99 >> 8;
          v101 = (_BYTE *)(v91 + 9);
LABEL_83:
          if ((_BYTE)v100)
          {
            v100 = (char)v100;
            v112 = v101[1];
            if (v112)
            {
              v113 = v101 + 2;
              do
              {
                v100 = 31 * v100 + v112;
                v114 = *v113++;
                v112 = v114;
              }
              while (v114);
            }
            v115 = v100 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v115 = 0;
          }
        }
        v177[0] = (id)v115;
        v125 = (const char *)(v89 + 9);
        if ((*(_BYTE *)(v89 + 8) & 1) != 0)
          v125 = *(const char **)(v89 + 16);
        re::RenderFrame::specifyScopeLane(v174, (const re::WeakStringID *)v177, v97, v125);
        goto LABEL_117;
      }
      v106 = v90 + 136 * v88 + 8 * v84;
      v108 = *(_QWORD *)(v106 + 88);
      v107 = (void **)(v106 + 88);
      if (v108)
      {
        v109 = *(_QWORD *)(v91 + 8);
        if ((v109 & 1) != 0)
        {
          v111 = *(_BYTE **)(v91 + 16);
          if (v111)
          {
            LOBYTE(v110) = *v111;
            goto LABEL_99;
          }
          v124 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v110 = v109 >> 8;
          v111 = (_BYTE *)(v91 + 9);
LABEL_99:
          if ((_BYTE)v110)
          {
            v110 = (char)v110;
            v121 = v111[1];
            if (v121)
            {
              v122 = v111 + 2;
              do
              {
                v110 = 31 * v110 + v121;
                v123 = *v122++;
                v121 = v123;
              }
              while (v123);
            }
            v124 = v110 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v124 = 0;
          }
        }
        v177[0] = (id)v124;
        v127 = (const char *)(v89 + 9);
        if ((*(_BYTE *)(v89 + 8) & 1) != 0)
          v127 = *(const char **)(v89 + 16);
        re::RenderFrame::specifyScopeLane(v174, (uint64_t *)v177, v107, v127);
        goto LABEL_117;
      }
      v117 = v90 + 136 * v88 + 8 * v84;
      v119 = *(_QWORD *)(v117 + 104);
      v118 = (void **)(v117 + 104);
      if (v119)
      {
        if ((*(_BYTE *)(v91 + 8) & 1) != 0)
          v120 = *(char **)(v91 + 16);
        else
          v120 = (char *)(v91 + 9);
        v126 = (const char *)(v89 + 9);
        if ((*(_BYTE *)(v89 + 8) & 1) != 0)
          v126 = *(const char **)(v89 + 16);
        re::RenderFrame::specifyScopeLane(v174, v120, v118, v126, *(_DWORD *)(v89 + 648));
      }
LABEL_117:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v181);
      ++v88;
      v85 = *(_QWORD *)(ViewDescriptor + 304);
    }
    while (v85 > v88);
    v87 = v171;
LABEL_119:
    v86 = 0;
    v84 = 1;
  }
  while ((v87 & 1) != 0);
}

uint64_t re::AssetHandle::asset<re::RenderGraphAsset>(re::RenderGraphAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = re::RenderGraphAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = re::AssetHandle::assetInfo(a1);
      if ((v6[17] & 1) != 0)
        v7 = (char *)v6[18];
      else
        v7 = (char *)v6 + 137;
      v8 = 136315138;
      v9 = v7;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

re::DynamicString *re::DynamicArray<re::RenderGraphFileProvider>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  re::DynamicString *result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RenderGraphFileProvider>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 48 * v4;
  *(_QWORD *)v5 = *(_QWORD *)a2;
  result = re::DynamicString::DynamicString((re::DynamicString *)(v5 + 8), (const re::DynamicString *)(a2 + 8));
  *(_DWORD *)(v5 + 40) = *(_DWORD *)(a2 + 40);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::RenderGraphFileProvider>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RenderGraphFileProvider>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphFileProvider>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::AssetHandle::loadedAsset<re::RenderGraphAsset>(re::RenderGraphAsset *a1)
{
  uint64_t *v2;

  if (!*((_QWORD *)a1 + 1))
    return 0;
  v2 = re::RenderGraphAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

_QWORD *re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          v2 = 80 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 80 * v9;
        v11 = v7;
        do
        {
          *v11 = 0;
          v11[1] = 0;
          v11[2] = 0;
          v11[1] = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          v12 = *v11;
          *v11 = 0;
          *v11 = *(_QWORD *)v8;
          *(_QWORD *)v8 = v12;
          v13 = v11[2];
          v11[2] = *(_QWORD *)(v8 + 16);
          *(_QWORD *)(v8 + 16) = v13;
          *(_OWORD *)(v11 + 5) = 0u;
          *(_OWORD *)(v11 + 3) = 0u;
          v11[3] = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v8 + 24) = 0;
          v11[6] = *(_QWORD *)(v8 + 48);
          *(_QWORD *)(v8 + 48) = 0;
          v15 = v11[4];
          v14 = v11[5];
          v16 = *(_QWORD *)(v8 + 40);
          v11[4] = *(_QWORD *)(v8 + 32);
          v11[5] = v16;
          *(_QWORD *)(v8 + 32) = v15;
          *(_QWORD *)(v8 + 40) = v14;
          v17 = *(_OWORD *)(v8 + 56);
          *((_BYTE *)v11 + 72) = *(_BYTE *)(v8 + 72);
          *(_OWORD *)(v11 + 7) = v17;
          v18 = *(_QWORD *)(v8 + 24);
          if (v18)
          {
            if ((*(_BYTE *)(v8 + 32) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 40))(v18, *(_QWORD *)(v8 + 40));
            *(_OWORD *)(v8 + 24) = 0u;
            *(_OWORD *)(v8 + 40) = 0u;
          }
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
          v8 += 80;
          v11 += 10;
          v10 -= 80;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

__n128 std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::RenderGraphFileProviderEntry *,re::ecs2::RenderGraphFileProviderEntry *,re::ecs2::RenderGraphFileProviderEntry *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __n128 result;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      re::AssetHandle::operator=((uint64_t *)a3, (uint64_t *)v5);
      re::DynamicString::operator=((re::DynamicString *)(a3 + 24), (re::DynamicString *)(v5 + 24));
      result = *(__n128 *)(v5 + 56);
      *(_BYTE *)(a3 + 72) = *(_BYTE *)(v5 + 72);
      *(__n128 *)(a3 + 56) = result;
      v5 += 80;
      a3 += 80;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t `anonymous namespace'::setCameraViewDescriptorData(_anonymous_namespace_ *this, re::RenderManager *a2, re::CameraView *a3, re::CameraMultiView *a4, const re::ecs2::CameraViewDescriptor *a5, re::Allocator *a6)
{
  char v11;
  uint64_t v12;
  int v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  int v20;
  int v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  const char *v38;
  const char *v39;
  __n128 v40;
  uint64_t result;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char v79;
  char *v80;
  uint64_t *v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  const char *v85;
  const char *v86;
  __n128 v87;
  uint64_t *v88;
  re::CameraMultiView *v89;
  re::CameraView *v90;
  char v91;
  uint64_t v92;
  char v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  const char *v97;
  const char *v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[16];
  unint64_t v102;
  uint64_t v103;

  v11 = *((_BYTE *)a4 + 24);
  v12 = *((_QWORD *)this + 11);
  if (v12)
  {
    LOBYTE(v92) = 1;
    v96 = 0x38BDA0FDF1630EF8;
    v97 = "overrides:enablemsaa";
    v13 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v12, &v96, &v92);
    re::StringID::destroyString((re::StringID *)&v96);
    if (!v13)
      v11 = v92 ^ 1;
  }
  v14 = *((_BYTE *)a4 + 26);
  v15 = *((_BYTE *)a4 + 28);
  v16 = *((_BYTE *)a4 + 25);
  v17 = *((_BYTE *)a4 + 27);
  v18 = *((_BYTE *)a4 + 52);
  v19 = *((_BYTE *)a4 + 53);
  v20 = *((unsigned __int8 *)a4 + 54);
  v21 = *((unsigned __int8 *)a4 + 55);
  *((_BYTE *)a2 + 343) = 0;
  *((_WORD *)a2 + 170) = 0;
  *((_BYTE *)a2 + 265) = 0;
  *((_OWORD *)a2 + 20) = *((_OWORD *)a4 + 2);
  *((_BYTE *)a2 + 342) = *((_BYTE *)a4 + 31);
  *((_DWORD *)a2 + 84) = *((_DWORD *)a4 + 12);
  if (v11)
    v22 = 1;
  else
    v22 = 4;
  *((_DWORD *)a2 + 89) = v22;
  *((_BYTE *)a2 + 345) = v14;
  *((_BYTE *)a2 + 349) = v15;
  *((_BYTE *)a2 + 344) = v17 ^ 1;
  *((_BYTE *)a2 + 348) = v16;
  *((_WORD *)a2 + 132) = *(_WORD *)((char *)a4 + 29);
  *((_BYTE *)a2 + 652) = *((_BYTE *)a4 + 280);
  *((_BYTE *)a2 + 653) = (*((unsigned __int8 *)this + 271) | *((unsigned __int8 *)a4 + 281)) != 0;
  *((_BYTE *)a2 + 654) = *((_BYTE *)a4 + 282);
  if (v20 || v21 != 7)
  {
    *((_BYTE *)a2 + 360) = 1;
    *((_BYTE *)a2 + 376) = v19;
    *((_BYTE *)a2 + 361) = v18;
    *((_BYTE *)a2 + 362) = v18;
    *((_BYTE *)a2 + 366) = v20;
    *((_BYTE *)a2 + 363) = v21;
    *((_BYTE *)a2 + 368) = 1;
    *((_BYTE *)a2 + 369) = v18;
    *((_BYTE *)a2 + 370) = v18;
    *((_BYTE *)a2 + 374) = v20;
    *((_BYTE *)a2 + 371) = v21;
  }
  *((_BYTE *)a2 + 400) = *((_BYTE *)a4 + 56);
  if (*((_BYTE *)a2 + 401) || *((_BYTE *)a4 + 57))
  {
    if (!*((_BYTE *)a2 + 401) || *((_BYTE *)a4 + 57))
    {
      if (!*((_BYTE *)a2 + 401) && *((_BYTE *)a4 + 57))
        *((_BYTE *)a2 + 401) = 1;
      *((_BYTE *)a2 + 402) = *((_BYTE *)a4 + 58);
    }
    else
    {
      *((_BYTE *)a2 + 401) = 0;
    }
  }
  if (*((_BYTE *)a2 + 404) || *((_BYTE *)a4 + 60))
  {
    if (!*((_BYTE *)a2 + 404) || *((_BYTE *)a4 + 60))
    {
      if (!*((_BYTE *)a2 + 404) && *((_BYTE *)a4 + 60))
        *((_BYTE *)a2 + 404) = 1;
      *((_DWORD *)a2 + 102) = *((_DWORD *)a4 + 16);
    }
    else
    {
      *((_BYTE *)a2 + 404) = 0;
    }
  }
  if (*((_BYTE *)a4 + 192))
  {
    *((_BYTE *)a3 + 1344) = *((_BYTE *)a4 + 192);
    re::DynamicString::operator=(a3, a2);
    v23 = *((_OWORD *)a2 + 2);
    v24 = *((_OWORD *)a2 + 3);
    v25 = *((_OWORD *)a2 + 5);
    *((_OWORD *)a3 + 4) = *((_OWORD *)a2 + 4);
    *((_OWORD *)a3 + 5) = v25;
    *((_OWORD *)a3 + 2) = v23;
    *((_OWORD *)a3 + 3) = v24;
    v26 = *((_OWORD *)a2 + 6);
    v27 = *((_OWORD *)a2 + 7);
    v28 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a3 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a3 + 9) = v28;
    *((_OWORD *)a3 + 6) = v26;
    *((_OWORD *)a3 + 7) = v27;
    v29 = *((_OWORD *)a2 + 10);
    v30 = *((_OWORD *)a2 + 11);
    v31 = *((_OWORD *)a2 + 13);
    *((_OWORD *)a3 + 12) = *((_OWORD *)a2 + 12);
    *((_OWORD *)a3 + 13) = v31;
    *((_OWORD *)a3 + 10) = v29;
    *((_OWORD *)a3 + 11) = v30;
    re::DynamicArray<re::RenderGraphFileProvider>::operator=((uint64_t)a3 + 224, (uint64_t *)a2 + 28);
    *((_WORD *)a3 + 132) = *((_WORD *)a2 + 132);
    re::DynamicArray<re::CameraView::PickupScopeLane>::operator=((uint64_t)a3 + 272, (uint64_t *)a2 + 34);
    *((_OWORD *)a3 + 20) = *((_OWORD *)a2 + 20);
    v33 = *((_OWORD *)a2 + 22);
    v32 = *((_OWORD *)a2 + 23);
    v34 = *((_OWORD *)a2 + 21);
    *((_QWORD *)a3 + 48) = *((_QWORD *)a2 + 48);
    *((_OWORD *)a3 + 22) = v33;
    *((_OWORD *)a3 + 23) = v32;
    *((_OWORD *)a3 + 21) = v34;
    *((_BYTE *)a3 + 400) = *((_BYTE *)a2 + 400);
    if (*((_BYTE *)a3 + 401) || *((_BYTE *)a2 + 401))
    {
      if (!*((_BYTE *)a3 + 401) || *((_BYTE *)a2 + 401))
      {
        if (!*((_BYTE *)a3 + 401) && *((_BYTE *)a2 + 401))
          *((_BYTE *)a3 + 401) = 1;
        *((_BYTE *)a3 + 402) = *((_BYTE *)a2 + 402);
      }
      else
      {
        *((_BYTE *)a3 + 401) = 0;
      }
    }
    v90 = a3;
    if (*((_BYTE *)a3 + 404) || *((_BYTE *)a2 + 404))
    {
      if (!*((_BYTE *)a3 + 404) || *((_BYTE *)a2 + 404))
      {
        if (*((_BYTE *)a3 + 404) || !*((_BYTE *)a2 + 404))
        {
          *((_DWORD *)a3 + 102) = *((_DWORD *)a2 + 102);
        }
        else
        {
          *((_BYTE *)a3 + 404) = 1;
          *((_DWORD *)a3 + 102) = *((_DWORD *)a2 + 102);
        }
      }
      else
      {
        *((_BYTE *)a3 + 404) = 0;
      }
    }
    v42 = *((_OWORD *)a2 + 26);
    v43 = *((_OWORD *)a2 + 27);
    v44 = *((_OWORD *)a2 + 29);
    *((_OWORD *)a3 + 28) = *((_OWORD *)a2 + 28);
    *((_OWORD *)a3 + 29) = v44;
    *((_OWORD *)a3 + 26) = v42;
    *((_OWORD *)a3 + 27) = v43;
    v45 = *((_OWORD *)a2 + 30);
    v46 = *((_OWORD *)a2 + 31);
    v47 = *((_OWORD *)a2 + 33);
    *((_OWORD *)a3 + 32) = *((_OWORD *)a2 + 32);
    *((_OWORD *)a3 + 33) = v47;
    *((_OWORD *)a3 + 30) = v45;
    *((_OWORD *)a3 + 31) = v46;
    v49 = *((_OWORD *)a2 + 39);
    v48 = *((_OWORD *)a2 + 40);
    v50 = *((_OWORD *)a2 + 38);
    *(_QWORD *)((char *)a3 + 653) = *(_QWORD *)((char *)a2 + 653);
    *((_OWORD *)a3 + 39) = v49;
    *((_OWORD *)a3 + 40) = v48;
    *((_OWORD *)a3 + 38) = v50;
    v51 = *((_OWORD *)a2 + 34);
    v52 = *((_OWORD *)a2 + 35);
    v53 = *((_OWORD *)a2 + 37);
    *((_OWORD *)a3 + 36) = *((_OWORD *)a2 + 36);
    *((_OWORD *)a3 + 37) = v53;
    *((_OWORD *)a3 + 34) = v51;
    *((_OWORD *)a3 + 35) = v52;
    re::DynamicString::operator=((re::CameraView *)((char *)a3 + 672), a2);
    v54 = *((_OWORD *)a2 + 2);
    v55 = *((_OWORD *)a2 + 3);
    v56 = *((_OWORD *)a2 + 5);
    *((_OWORD *)a3 + 46) = *((_OWORD *)a2 + 4);
    *((_OWORD *)a3 + 47) = v56;
    *((_OWORD *)a3 + 44) = v54;
    *((_OWORD *)a3 + 45) = v55;
    v57 = *((_OWORD *)a2 + 6);
    v58 = *((_OWORD *)a2 + 7);
    v59 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a3 + 50) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a3 + 51) = v59;
    *((_OWORD *)a3 + 48) = v57;
    *((_OWORD *)a3 + 49) = v58;
    v60 = *((_OWORD *)a2 + 10);
    v61 = *((_OWORD *)a2 + 11);
    v62 = *((_OWORD *)a2 + 13);
    *((_OWORD *)a3 + 54) = *((_OWORD *)a2 + 12);
    *((_OWORD *)a3 + 55) = v62;
    *((_OWORD *)a3 + 52) = v60;
    *((_OWORD *)a3 + 53) = v61;
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)a3 + 896, (uint64_t)a2 + 224);
    *((_WORD *)a3 + 468) = *((_WORD *)a2 + 132);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)a3 + 944, (uint64_t)a2 + 272);
    *((_OWORD *)a3 + 62) = *((_OWORD *)a2 + 20);
    v64 = *((_OWORD *)a2 + 22);
    v63 = *((_OWORD *)a2 + 23);
    v65 = *((_OWORD *)a2 + 21);
    *((_QWORD *)a3 + 132) = *((_QWORD *)a2 + 48);
    *((_OWORD *)a3 + 65) = v63;
    *((_OWORD *)a3 + 63) = v65;
    *((_OWORD *)a3 + 64) = v64;
    *((_BYTE *)a3 + 1072) = *((_BYTE *)a2 + 400);
    if (*((_BYTE *)a3 + 1073) || *((_BYTE *)a2 + 401))
    {
      if (!*((_BYTE *)a3 + 1073) || *((_BYTE *)a2 + 401))
      {
        if (!*((_BYTE *)a3 + 1073) && *((_BYTE *)a2 + 401))
          *((_BYTE *)a3 + 1073) = 1;
        *((_BYTE *)a3 + 1074) = *((_BYTE *)a2 + 402);
      }
      else
      {
        *((_BYTE *)a3 + 1073) = 0;
      }
    }
    if (*((_BYTE *)a3 + 1076) || *((_BYTE *)a2 + 404))
    {
      if (!*((_BYTE *)a3 + 1076) || *((_BYTE *)a2 + 404))
      {
        if (!*((_BYTE *)a3 + 1076) && *((_BYTE *)a2 + 404))
          *((_BYTE *)a3 + 1076) = 1;
        *((_DWORD *)a3 + 270) = *((_DWORD *)a2 + 102);
      }
      else
      {
        *((_BYTE *)a3 + 1076) = 0;
      }
    }
    v66 = 0;
    v67 = *((_OWORD *)a2 + 26);
    v68 = *((_OWORD *)a2 + 27);
    v69 = *((_OWORD *)a2 + 28);
    *((_OWORD *)a3 + 71) = *((_OWORD *)a2 + 29);
    *((_OWORD *)a3 + 70) = v69;
    *((_OWORD *)a3 + 69) = v68;
    *((_OWORD *)a3 + 68) = v67;
    v70 = *((_OWORD *)a2 + 30);
    v71 = *((_OWORD *)a2 + 31);
    v72 = *((_OWORD *)a2 + 32);
    *((_OWORD *)a3 + 75) = *((_OWORD *)a2 + 33);
    *((_OWORD *)a3 + 74) = v72;
    *((_OWORD *)a3 + 73) = v71;
    *((_OWORD *)a3 + 72) = v70;
    v74 = *((_OWORD *)a2 + 39);
    v73 = *((_OWORD *)a2 + 40);
    v75 = *(_QWORD *)((char *)a2 + 653);
    *((_OWORD *)a3 + 80) = *((_OWORD *)a2 + 38);
    *(_QWORD *)((char *)a3 + 1325) = v75;
    *((_OWORD *)a3 + 82) = v73;
    *((_OWORD *)a3 + 81) = v74;
    v76 = *((_OWORD *)a2 + 34);
    v77 = *((_OWORD *)a2 + 35);
    v78 = *((_OWORD *)a2 + 36);
    *((_OWORD *)a3 + 79) = *((_OWORD *)a2 + 37);
    v88 = (uint64_t *)((char *)a4 + 72);
    v89 = a4;
    *((_OWORD *)a3 + 78) = v78;
    *((_OWORD *)a3 + 77) = v77;
    *((_OWORD *)a3 + 76) = v76;
    v79 = 1;
    do
    {
      v91 = v79;
      v80 = (char *)v89 + 40 * v66;
      if (*((_QWORD *)v80 + 16))
        v81 = (uint64_t *)(v80 + 112);
      else
        v81 = v88;
      re::DynamicArray<re::CameraView::PickupScopeLane>::DynamicArray((uint64_t)v101, v81);
      v82 = (_QWORD *)((char *)a3 + 672 * v66 + 272);
      re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity(v82, v102);
      if (v102)
      {
        v83 = v103;
        v84 = v102 << 6;
        do
        {
          re::DynamicString::DynamicString((re::DynamicString *)&v96, (const re::DynamicString *)v83);
          re::DynamicString::DynamicString((re::DynamicString *)&v99, (const re::DynamicString *)(v83 + 32));
          if ((v97 & 1) != 0)
            v85 = v98;
          else
            v85 = (char *)&v97 + 1;
          if ((BYTE8(v99) & 1) != 0)
            v86 = (const char *)v100;
          else
            v86 = (char *)&v99 + 9;
          re::DynamicString::DynamicString((re::DynamicString *)&v92, v85, a5);
          re::DynamicString::DynamicString((re::DynamicString *)&v94, v86, a5);
          v87.n128_f64[0] = re::DynamicArray<re::CameraView::PickupScopeLane>::add((uint64_t)v82, &v92);
          if ((_QWORD)v94)
          {
            if ((BYTE8(v94) & 1) != 0)
              (*(void (**)(double))(*(_QWORD *)v94 + 40))(v87.n128_f64[0]);
            v87 = 0uLL;
            v94 = 0u;
            v95 = 0u;
          }
          if (v92 && (v93 & 1) != 0)
            (*(void (**)(__n128))(*(_QWORD *)v92 + 40))(v87);
          if ((_QWORD)v99)
          {
            if ((BYTE8(v99) & 1) != 0)
              (*(void (**)(__n128))(*(_QWORD *)v99 + 40))(v87);
            v87 = 0uLL;
            v99 = 0u;
            v100 = 0u;
          }
          if (v96)
          {
            if ((v97 & 1) != 0)
              (*(void (**)(__n128))(*(_QWORD *)v96 + 40))(v87);
          }
          v83 += 64;
          v84 -= 64;
        }
        while (v84);
      }
      a3 = v90;
      *((_DWORD *)v90 + 168 * v66 + 162) = *((_DWORD *)&qword_22610D2C8 + v66);
      result = re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v101);
      v79 = 0;
      v66 = 1;
    }
    while ((v91 & 1) != 0);
  }
  else
  {
    if (*((_QWORD *)a4 + 16))
      v35 = (uint64_t *)((char *)a4 + 112);
    else
      v35 = (uint64_t *)((char *)a4 + 72);
    re::DynamicArray<re::CameraView::PickupScopeLane>::DynamicArray((uint64_t)v101, v35);
    re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((_QWORD *)a2 + 34, v102);
    if (v102)
    {
      v36 = v103;
      v37 = v102 << 6;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v96, (const re::DynamicString *)v36);
        re::DynamicString::DynamicString((re::DynamicString *)&v99, (const re::DynamicString *)(v36 + 32));
        if ((v97 & 1) != 0)
          v38 = v98;
        else
          v38 = (char *)&v97 + 1;
        if ((BYTE8(v99) & 1) != 0)
          v39 = (const char *)v100;
        else
          v39 = (char *)&v99 + 9;
        re::DynamicString::DynamicString((re::DynamicString *)&v92, v38, a5);
        re::DynamicString::DynamicString((re::DynamicString *)&v94, v39, a5);
        v40.n128_f64[0] = re::DynamicArray<re::CameraView::PickupScopeLane>::add((uint64_t)a2 + 272, &v92);
        if ((_QWORD)v94)
        {
          if ((BYTE8(v94) & 1) != 0)
            (*(void (**)(double))(*(_QWORD *)v94 + 40))(v40.n128_f64[0]);
          v40 = 0uLL;
          v94 = 0u;
          v95 = 0u;
        }
        if (v92 && (v93 & 1) != 0)
          (*(void (**)(__n128))(*(_QWORD *)v92 + 40))(v40);
        if ((_QWORD)v99)
        {
          if ((BYTE8(v99) & 1) != 0)
            (*(void (**)(__n128))(*(_QWORD *)v99 + 40))(v40);
          v40 = 0uLL;
          v99 = 0u;
          v100 = 0u;
        }
        if (v96 && (v97 & 1) != 0)
          (*(void (**)(__n128))(*(_QWORD *)v96 + 40))(v40);
        v36 += 64;
        v37 -= 64;
      }
      while (v37);
    }
    *((_DWORD *)a2 + 162) = 0;
    return re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v101);
  }
  return result;
}

uint64_t re::CameraMultiView::operator=(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v4 = 0;
  v5 = 0;
  do
  {
    v6 = v4;
    v7 = a1 + 672 * v5;
    v8 = a2 + 672 * v5;
    re::DynamicString::operator=((re::DynamicString *)v7, (re::DynamicString *)v8);
    v9 = *(_OWORD *)(v8 + 32);
    v10 = *(_OWORD *)(v8 + 48);
    v11 = *(_OWORD *)(v8 + 80);
    *(_OWORD *)(v7 + 64) = *(_OWORD *)(v8 + 64);
    *(_OWORD *)(v7 + 80) = v11;
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = v10;
    v12 = *(_OWORD *)(v8 + 96);
    v13 = *(_OWORD *)(v8 + 112);
    v14 = *(_OWORD *)(v8 + 144);
    *(_OWORD *)(v7 + 128) = *(_OWORD *)(v8 + 128);
    *(_OWORD *)(v7 + 144) = v14;
    *(_OWORD *)(v7 + 96) = v12;
    *(_OWORD *)(v7 + 112) = v13;
    v15 = *(_OWORD *)(v8 + 160);
    v16 = *(_OWORD *)(v8 + 176);
    v17 = *(_OWORD *)(v8 + 208);
    *(_OWORD *)(v7 + 192) = *(_OWORD *)(v8 + 192);
    *(_OWORD *)(v7 + 208) = v17;
    *(_OWORD *)(v7 + 160) = v15;
    *(_OWORD *)(v7 + 176) = v16;
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v7 + 224, v8 + 224);
    *(_WORD *)(v7 + 264) = *(_WORD *)(v8 + 264);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v7 + 272, v8 + 272);
    *(_OWORD *)(v7 + 320) = *(_OWORD *)(v8 + 320);
    v19 = *(_OWORD *)(v8 + 352);
    v18 = *(_OWORD *)(v8 + 368);
    v20 = *(_OWORD *)(v8 + 336);
    *(_QWORD *)(v7 + 384) = *(_QWORD *)(v8 + 384);
    *(_OWORD *)(v7 + 352) = v19;
    *(_OWORD *)(v7 + 368) = v18;
    *(_OWORD *)(v7 + 336) = v20;
    *(_BYTE *)(v7 + 400) = *(_BYTE *)(v8 + 400);
    if (*(_BYTE *)(v7 + 401) || *(_BYTE *)(v8 + 401))
    {
      v21 = (_BYTE *)(v7 + 401);
      if (!*(_BYTE *)(v7 + 401) || *(_BYTE *)(v8 + 401))
      {
        if (*(_BYTE *)(v7 + 401) || !*(_BYTE *)(v8 + 401))
        {
          *(_BYTE *)(a1 + 672 * v5 + 402) = *(_BYTE *)(a2 + 672 * v5 + 402);
        }
        else
        {
          *v21 = 1;
          *(_BYTE *)(a1 + 672 * v5 + 402) = *(_BYTE *)(a2 + 672 * v5 + 402);
        }
      }
      else
      {
        *v21 = 0;
      }
    }
    v22 = a1 + 672 * v5;
    v23 = *(unsigned __int8 *)(v22 + 404);
    if (*(_BYTE *)(v22 + 404) || *(_BYTE *)(a2 + 672 * v5 + 404))
    {
      v24 = (_BYTE *)(v22 + 404);
      if (!v23 || *(_BYTE *)(a2 + 672 * v5 + 404))
      {
        if (v23 || !*(_BYTE *)(a2 + 672 * v5 + 404))
        {
          *(_DWORD *)(a1 + 672 * v5 + 408) = *(_DWORD *)(a2 + 672 * v5 + 408);
        }
        else
        {
          *v24 = 1;
          *(_DWORD *)(a1 + 672 * v5 + 408) = *(_DWORD *)(a2 + 672 * v5 + 408);
        }
      }
      else
      {
        *v24 = 0;
      }
    }
    v25 = a1 + 672 * v5;
    v26 = a2 + 672 * v5;
    v27 = *(_OWORD *)(v26 + 416);
    v28 = *(_OWORD *)(v26 + 432);
    v29 = *(_OWORD *)(v26 + 464);
    *(_OWORD *)(v25 + 448) = *(_OWORD *)(v26 + 448);
    *(_OWORD *)(v25 + 464) = v29;
    *(_OWORD *)(v25 + 416) = v27;
    *(_OWORD *)(v25 + 432) = v28;
    v30 = *(_OWORD *)(v26 + 480);
    v31 = *(_OWORD *)(v26 + 496);
    v32 = *(_OWORD *)(v26 + 528);
    *(_OWORD *)(v25 + 512) = *(_OWORD *)(v26 + 512);
    *(_OWORD *)(v25 + 528) = v32;
    *(_OWORD *)(v25 + 480) = v30;
    *(_OWORD *)(v25 + 496) = v31;
    v34 = *(_OWORD *)(v26 + 624);
    v33 = *(_OWORD *)(v26 + 640);
    v35 = *(_OWORD *)(v26 + 608);
    *(_QWORD *)(v25 + 653) = *(_QWORD *)(v26 + 653);
    *(_OWORD *)(v25 + 624) = v34;
    *(_OWORD *)(v25 + 640) = v33;
    *(_OWORD *)(v25 + 608) = v35;
    v36 = *(_OWORD *)(v26 + 544);
    v37 = *(_OWORD *)(v26 + 560);
    v38 = *(_OWORD *)(v26 + 592);
    *(_OWORD *)(v25 + 576) = *(_OWORD *)(v26 + 576);
    *(_OWORD *)(v25 + 592) = v38;
    *(_OWORD *)(v25 + 544) = v36;
    *(_OWORD *)(v25 + 560) = v37;
    v4 = 1;
    v5 = 1;
  }
  while ((v6 & 1) == 0);
  *(_WORD *)(a1 + 1344) = *(_WORD *)(a2 + 1344);
  return a1;
}

uint64_t re::DynamicArray<re::CameraMultiView>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::CameraMultiView>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = re::CameraMultiView::CameraMultiView(*((_QWORD *)this + 4) + 1360 * v4, a2);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

double re::DynamicArray<re::CameraView::PickupScopeLane>::add(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = *(_QWORD *)(a1 + 32) + (v5 << 6);
  result = 0.0;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)(v11 + 24) = a2[3];
  v13 = a2[1];
  *(_QWORD *)v11 = *a2;
  *a2 = 0;
  v14 = a2[2];
  a2[3] = 0;
  v16 = *(_QWORD *)(v11 + 8);
  v15 = *(_QWORD *)(v11 + 16);
  *(_QWORD *)(v11 + 8) = v13;
  *(_QWORD *)(v11 + 16) = v14;
  a2[1] = v16;
  a2[2] = v15;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_QWORD *)(v11 + 56) = a2[7];
  v17 = a2[5];
  *(_QWORD *)(v11 + 32) = a2[4];
  a2[4] = 0;
  v18 = a2[6];
  a2[7] = 0;
  v20 = *(_QWORD *)(v11 + 40);
  v19 = *(_QWORD *)(v11 + 48);
  *(_QWORD *)(v11 + 40) = v17;
  *(_QWORD *)(v11 + 48) = v18;
  a2[5] = v20;
  a2[6] = v19;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

double `anonymous namespace'::updateOneViewPerFrameData<re::ecs2::PerspectiveCameraComponent>(re::RenderManager &,unsigned long,re::ecs2::CameraViewDescriptorsComponent *,re::ecs2::PerspectiveCameraComponent *,re::CameraView *,re::CameraMultiView *)::{lambda(re::CameraView&,re::ecs2::PerspectiveCameraComponent*,re::CameraEye)#1}::operator()(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  float32x4_t *v10;
  __int128 v11;
  __int128 v12;
  float32x4_t v13;
  int32x4_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  double result;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  _OWORD v43[4];
  _OWORD v44[4];
  _OWORD v45[2];
  _OWORD v46[4];
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;

  v4 = a4;
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[3];
  *(_OWORD *)(a2 + 448) = a1[2];
  *(_OWORD *)(a2 + 464) = v9;
  *(_OWORD *)(a2 + 416) = v7;
  *(_OWORD *)(a2 + 432) = v8;
  v10 = (float32x4_t *)(a2 + 32);
  re::ecs2::PerspectiveCameraComponent::calculateWorldPose(a3, a4, (uint64_t)v45);
  v12 = v45[0];
  v11 = v45[1];
  *(_OWORD *)(a2 + 32) = v45[0];
  *(_OWORD *)(a2 + 48) = v11;
  *(_OWORD *)(a2 + 128) = v12;
  *(_OWORD *)(a2 + 144) = v11;
  if (*(_BYTE *)(a3 + 176))
  {
    *(_BYTE *)(a2 + 92) = 1;
    *(_BYTE *)(a2 + 188) = 1;
    v41 = *(float32x4_t *)(a3 + 192);
    v42 = vmulq_n_f32(v41, -v41.f32[3]);
    re::RenderCamera::computeInverseTransform(v10, (uint64_t)&v47);
    v13 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, v41.f32[0]), v48, *(float32x2_t *)v41.f32, 1), v49, v41, 2);
    v14 = (int32x4_t)vmulq_f32(v13, v13);
    v14.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1))).u32[0];
    v15 = vrsqrte_f32((float32x2_t)v14.u32[0]);
    v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v15, v15)));
    v17 = vmulq_n_f32(v13, vmul_f32(v16, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v16, v16))).f32[0]);
    v18 = vaddq_f32(v50, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, v42.f32[0]), v48, *(float32x2_t *)v42.f32, 1), v49, v42, 2));
    v19 = vmulq_f32(v17, vdivq_f32(v18, (float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 3)));
    v17.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0];
    *(float32x4_t *)(a2 + 96) = v17;
    re::RenderCamera::computeInverseTransform((float32x4_t *)(a2 + 128), (uint64_t)&v47);
    v20 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, v41.f32[0]), v48, *(float32x2_t *)v41.f32, 1), v49, v41, 2);
    v21 = (int32x4_t)vmulq_f32(v20, v20);
    v21.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v21, 2), vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1))).u32[0];
    v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
    v23 = vmul_f32(v22, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)));
    v24 = vmulq_n_f32(v20, vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23))).f32[0]);
    v25 = vaddq_f32(v50, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, v42.f32[0]), v48, *(float32x2_t *)v42.f32, 1), v49, v42, 2));
    v26 = vmulq_f32(v24, vdivq_f32(v25, (float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 3)));
    v24.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0];
    *(float32x4_t *)(a2 + 192) = v24;
  }
  v27 = (float32x4_t *)(a3 + ((unint64_t)(v4 == 2) << 6));
  v28 = v27 + 3;
  v29 = v27[3];
  v30 = v27[4];
  v31 = v27[6];
  *(float32x4_t *)(a2 + 608) = v27[5];
  *(float32x4_t *)(a2 + 624) = v31;
  *(float32x4_t *)(a2 + 576) = v29;
  *(float32x4_t *)(a2 + 592) = v30;
  re::Projection::computeMatrix4x4F((re::Projection *)(a2 + 64), (uint64_t)v44);
  re::RenderCamera::computeInverseTransform(v10, (uint64_t)v43);
  v32 = 0;
  v33 = (float32x4_t)v44[0];
  v34 = (float32x4_t)v44[1];
  v35 = (float32x4_t)v44[2];
  v36 = (float32x4_t)v44[3];
  v46[0] = v43[0];
  v46[1] = v43[1];
  v46[2] = v43[2];
  v46[3] = v43[3];
  do
  {
    *(float32x4_t *)((char *)&v47 + v32 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, COERCE_FLOAT(v46[v32])), v34, *(float32x2_t *)&v46[v32], 1), v35, (float32x4_t)v46[v32], 2), v36, (float32x4_t)v46[v32], 3);
    ++v32;
  }
  while (v32 != 4);
  result = *(double *)v47.i64;
  v38 = v48;
  v39 = v49;
  v40 = v50;
  *v28 = v47;
  v28[1] = v38;
  v28[2] = v39;
  v28[3] = v40;
  return result;
}

uint64_t re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (*a1 <= 1uLL)
    return 1;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t *re::ecs2::allocInfo_AdaptiveResolutionComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_232);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_232))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410DCE0, 0);
    *(uint64_t *)((char *)&qword_25410DCF0 + 6) = 0;
    qword_25410DCF0 = 0;
    qword_25410DD00 = 0;
    qword_25410DD08 = 0xFFFFFFFFLL;
    qword_25410DCE0 = (uint64_t)&off_24ED7DAA8;
    qword_25410DD10 = (uint64_t)"AdaptiveResolutionComponent";
    dword_25410DD18 = 0;
    unk_25410DD20 = 0u;
    unk_25410DD30 = 0u;
    unk_25410DD40 = 0u;
    qword_25410DD50 = 0;
    __cxa_guard_release(&_MergedGlobals_232);
  }
  return &qword_25410DCE0;
}

void re::ecs2::initInfo_AdaptiveResolutionComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xB5AB72FA376B5E76;
  v10[1] = "AdaptiveResolutionComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410DCB8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410DCB8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410DCB0 = v8;
      __cxa_guard_release(&qword_25410DCB8);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410DCB0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AdaptiveResolutionComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AdaptiveResolutionComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AdaptiveResolutionComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AdaptiveResolutionComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::AdaptiveResolutionComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57908;
}

void *re::internal::defaultDestruct<re::ecs2::AdaptiveResolutionComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::AdaptiveResolutionComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57908;
}

void *re::internal::defaultDestructV2<re::ecs2::AdaptiveResolutionComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AdaptiveResolutionComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AdaptiveResolutionComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AdaptiveResolutionComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AdaptiveResolutionComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AdaptiveResolutionComponent>, this);
}

uint64_t *re::ecs2::allocInfo_AdaptiveResolutionStateComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410DCC0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410DCC0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410DD58, 0);
    *(uint64_t *)((char *)&qword_25410DD68 + 6) = 0;
    qword_25410DD68 = 0;
    qword_25410DD78 = 0;
    qword_25410DD80 = 0xFFFFFFFFLL;
    qword_25410DD58 = (uint64_t)&off_24ED7DAA8;
    qword_25410DD88 = (uint64_t)"AdaptiveResolutionStateComponent";
    dword_25410DD90 = 0;
    unk_25410DD98 = 0u;
    unk_25410DDA8 = 0u;
    unk_25410DDB8 = 0u;
    qword_25410DDC8 = 0;
    __cxa_guard_release(&qword_25410DCC0);
  }
  return &qword_25410DD58;
}

void re::ecs2::initInfo_AdaptiveResolutionStateComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x1125A55C2DBA5FDCLL;
  v14[1] = "AdaptiveResolutionStateComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25410DCC8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410DCC8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410DCD0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "pixelsPerMeter";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410DCD8 = v12;
      __cxa_guard_release(&qword_25410DCC8);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410DCD0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AdaptiveResolutionStateComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AdaptiveResolutionStateComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AdaptiveResolutionStateComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AdaptiveResolutionStateComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::AdaptiveResolutionStateComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57988;
  *(_DWORD *)(v3 + 28) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::AdaptiveResolutionStateComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::AdaptiveResolutionStateComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57988;
  *(_DWORD *)(v1 + 28) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::AdaptiveResolutionStateComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AdaptiveResolutionStateComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AdaptiveResolutionStateComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AdaptiveResolutionStateComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AdaptiveResolutionStateComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AdaptiveResolutionStateComponent>, this);
}

uint64_t *re::ecs2::allocInfo_VideoAudioControlComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_233);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_233))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410DDF0, 0);
    *(uint64_t *)((char *)&qword_25410DE00 + 6) = 0;
    qword_25410DE00 = 0;
    qword_25410DE10 = 0;
    qword_25410DE18 = 0xFFFFFFFFLL;
    qword_25410DDF0 = (uint64_t)&off_24ED7DAA8;
    qword_25410DE20 = (uint64_t)"VideoAudioControlComponent";
    dword_25410DE28 = 0;
    xmmword_25410DE30 = 0u;
    unk_25410DE40 = 0u;
    xmmword_25410DE50 = 0u;
    qword_25410DE60 = 0;
    __cxa_guard_release(&_MergedGlobals_233);
  }
  return &qword_25410DDF0;
}

void re::ecs2::initInfo_VideoAudioControlComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x700C00A660220CF6;
  v10[1] = "VideoAudioControlComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410DDE0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410DDE0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410DDD8 = v8;
      __cxa_guard_release(&qword_25410DDE0);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410DDD8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VideoAudioControlComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VideoAudioControlComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VideoAudioControlComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VideoAudioControlComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::VideoAudioControlComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57A08;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::VideoAudioControlComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::VideoAudioControlComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57A08;
  *(_DWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VideoAudioControlComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VideoAudioControlComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoAudioControlComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoAudioControlComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoAudioControlComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoAudioControlComponent>, this);
}

uint64_t *re::ecs2::allocInfo_VideoAudioControlSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410DDE8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410DDE8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410DE68, 0);
    *(uint64_t *)((char *)&qword_25410DE78 + 6) = 0;
    qword_25410DE78 = 0;
    qword_25410DE88 = 0;
    qword_25410DE90 = 0xFFFFFFFFLL;
    qword_25410DE68 = (uint64_t)&off_24ED7DAA8;
    qword_25410DE98 = (uint64_t)"VideoAudioControlSystem";
    dword_25410DEA0 = 0;
    xmmword_25410DEA8 = 0u;
    unk_25410DEB8 = 0u;
    xmmword_25410DEC8 = 0u;
    qword_25410DED8 = 0;
    __cxa_guard_release(&qword_25410DDE8);
  }
  return &qword_25410DE68;
}

void re::ecs2::initInfo_VideoAudioControlSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x731113394ED252E2;
  v5[1] = "VideoAudioControlSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_VideoAudioControlSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VideoAudioControlSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VideoAudioControlSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::VideoAudioControlSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::VideoAudioControlSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VideoAudioControlSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VideoAudioControlSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::VideoAudioControlSystem *re::internal::defaultConstruct<re::ecs2::VideoAudioControlSystem>(int a1, int a2, re::ecs2::VideoAudioControlSystem *this)
{
  return re::ecs2::VideoAudioControlSystem::VideoAudioControlSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::VideoAudioControlSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::internal::destroyPersistent<re::ecs2::AudioComponentForwarder>(*(re **)(a3 + 104));
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::VideoAudioControlSystem>(uint64_t a1)
{
  re::internal::destroyPersistent<re::ecs2::AudioComponentForwarder>(*(re **)(a1 + 104));
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_VideoAudioControlSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoAudioControlSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoAudioControlSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoAudioControlSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoAudioControlSystem>, this);
}

id re::ecs2::VideoAudioControlComponent::ControlInfo::label(id *this)
{
  if (*(_DWORD *)this)
    return this[1];
  else
    return 0;
}

void re::ecs2::VideoAudioControlComponent::setDeferToSystemAcousticTuning(re::ecs2::VideoAudioControlComponent *this)
{
  uint64_t v1;
  re::ecs2::NetworkComponent *v2;
  uint64_t v3;
  const re::ecs2::Component *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    if (*((_DWORD *)this + 8) == 1)
    {
      v6 = *((_QWORD *)this + 6);
      v2 = *(re::ecs2::NetworkComponent **)(v1 + 200);
      v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v3)
      {
        v4 = (const re::ecs2::Component *)v3;
        v5 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v3 + 32, &v6);
        if (v5)
        {
          if (*(_BYTE *)(v5 + 256))
          {
            *(_BYTE *)(v5 + 256) = 0;
            re::ecs2::Component::markDirty(v4);
            if (v2)
              re::ecs2::NetworkComponent::markDirty(v2, v4);
          }
        }
      }
    }
  }
}

re::ecs2::VideoAudioControlSystem *re::ecs2::VideoAudioControlSystem::VideoAudioControlSystem(re::ecs2::VideoAudioControlSystem *this)
{
  re *v2;
  uint64_t *v3;
  uint64_t v4;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)v2 = &off_24ED646E8;
  v3 = re::globalAllocators(v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 48, 8);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 36) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 13) = v4;
  return this;
}

re *re::internal::destroyPersistent<re::ecs2::AudioComponentForwarder>(re *result)
{
  uint64_t *v1;
  uint64_t v2;
  double v3;

  if (result)
  {
    v1 = (uint64_t *)result;
    v2 = re::globalAllocators(result)[2];
    re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit(v1);
    v3 = re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit(v1);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t *, double))(*(_QWORD *)v2 + 40))(v2, v1, v3);
  }
  return result;
}

void re::ecs2::VideoAudioControlSystem::~VideoAudioControlSystem(re **this)
{
  re::internal::destroyPersistent<re::ecs2::AudioComponentForwarder>(this[13]);
  this[13] = 0;
  *this = (re *)&off_24ED426B8;
  objc_destructInstance(this + 1);
}

{
  re::internal::destroyPersistent<re::ecs2::AudioComponentForwarder>(this[13]);
  this[13] = 0;
  *this = (re *)&off_24ED426B8;
  objc_destructInstance(this + 1);
  JUMPOUT(0x2276933B8);
}

double re::ecs2::VideoAudioControlSystem::willAddSceneToECSService(re::ecs2::VideoAudioControlSystem *this, re::ecs2::Scene *a2)
{
  re::ecs2::SceneComponentTable *v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  re::ecs2::VideoAudioControlSystem *v7;
  uint64_t (*v8)(uint64_t, uint64_t, char *, char *);
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = (re::ecs2::Scene *)((char *)a2 + 200);
    v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v7 = this;
    v8 = re::ecs2::VideoAudioControlSystem::willRemoveComponents<re::ecs2::VideoComponent>;
    v9 = 0;
    v10 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::createSubscription<re::ecs2::VideoAudioControlSystem>(re::ecs2::VideoAudioControlSystem *,REEventHandlerResult (re::ecs2::VideoAudioControlSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Slice<re::ecs2::VideoComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 392), (uint64_t)&v7);
    v5 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v7 = this;
    v8 = re::ecs2::VideoAudioControlSystem::willRemoveComponents<re::ecs2::VideoPlayerComponent>;
    v9 = 0;
    v10 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoAudioControlSystem>(re::ecs2::VideoAudioControlSystem *,REEventHandlerResult (re::ecs2::VideoAudioControlSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v5 + 392), (uint64_t)&v7);
  }
  return result;
}

void re::ecs2::VideoAudioControlSystem::willRemoveSceneFromECSService(re::ecs2::VideoAudioControlSystem *this, re::ecs2::Scene *a2)
{
  re::ecs2::SceneComponentTable *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = (re::ecs2::Scene *)((char *)a2 + 200);
    v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(_QWORD *)&v6 = this;
    *((_QWORD *)&v6 + 1) = re::ecs2::VideoAudioControlSystem::willRemoveComponents<re::ecs2::VideoComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::createSubscription<re::ecs2::VideoAudioControlSystem>(re::ecs2::VideoAudioControlSystem *,REEventHandlerResult (re::ecs2::VideoAudioControlSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Slice<re::ecs2::VideoComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 392, &v6);
    v5 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(_QWORD *)&v6 = this;
    *((_QWORD *)&v6 + 1) = re::ecs2::VideoAudioControlSystem::willRemoveComponents<re::ecs2::VideoPlayerComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoAudioControlSystem>(re::ecs2::VideoAudioControlSystem *,REEventHandlerResult (re::ecs2::VideoAudioControlSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v5 + 392, &v6);
  }
}

uint64_t re::ecs2::VideoAudioControlSystem::getVideoAudioControlComponentUnderneathParent(uint64_t this, re::ecs2::Entity *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD v7[2];

  if (this)
  {
    v7[0] = 0x731113391DD5364ALL;
    v7[1] = "VideoAudioControlEntity";
    v2 = *(_QWORD *)(this + 328);
    if (v2)
    {
      v3 = *(uint64_t **)(this + 344);
      v4 = 8 * v2;
      while (1)
      {
        v5 = *v3;
        if ((*(_QWORD *)(*v3 + 272) ^ 0x731113391DD5364AuLL) <= 1)
        {
          v6 = *(char **)(v5 + 280);
          if (v6 == "VideoAudioControlEntity" || !strcmp(v6, "VideoAudioControlEntity"))
            break;
        }
        ++v3;
        v4 -= 8;
        if (!v4)
          goto LABEL_8;
      }
      re::StringID::destroyString((re::StringID *)v7);
      return re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v5 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoAudioControlComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    }
    else
    {
LABEL_8:
      re::StringID::destroyString((re::StringID *)v7);
      return 0;
    }
  }
  return this;
}

void re::ecs2::VideoAudioControlSystem::ignoreCreateOrCleanUpComponentForAudioControl(uint64_t a1, uint64_t a2, _BYTE *a3, char **a4)
{
  id **v8;
  id **v9;
  void *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  re::ecs2::Entity *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  _QWORD *v49;
  re::ecs2::AudioPlayerComponent **v50;
  const re::ecs2::Component *v51;
  unint64_t v52;
  _anonymous_namespace_ *VideoAudioControlComponentUnderneathParent;
  uint64_t v54;
  uint64_t v55;
  re::ecs2::Entity *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  NSObject *v62;
  uint64_t v63;
  NSObject *v64;
  void *v65;
  uint64_t v66;
  uint64_t *v67;
  int v68;
  uint64_t v69;
  _BYTE buf[22];
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v8 = (id **)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)(a3 + 8));
  if (v8)
  {
    v9 = v8;
    re::VideoAsset::getAVPlayer(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (!v10)
    {
LABEL_80:

      return;
    }
    v12 = v10;
    v13 = (void *)v12;
    v14 = v12 ^ (v12 >> 30);
    if (*(_QWORD *)a2)
    {
      v15 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v14) ^ ((0xBF58476D1CE4E5B9 * v14) >> 27));
      v16 = *(unsigned int *)(*(_QWORD *)(a2 + 8) + 4 * ((v15 ^ (v15 >> 31)) % *(unsigned int *)(a2 + 24)));
      if ((_DWORD)v16 != 0x7FFFFFFF)
      {
        v20 = *(_QWORD *)(a2 + 16);
        if (*(_QWORD *)(v20 + 80 * v16 + 16) == v12)
        {
LABEL_13:
          v21 = v20 + 80 * v16 + 24;
LABEL_29:

          v35 = *a4;
          v34 = a4[1];
          if (v34)
          {
            v36 = 8 * (_QWORD)v34;
            v37 = *a4;
            while (*(_QWORD *)v37 != *(_QWORD *)a3)
            {
              v37 += 8;
              v36 -= 8;
              if (!v36)
              {
                v37 = &v35[8 * (_QWORD)v34];
                break;
              }
            }
          }
          else
          {
            v37 = *a4;
          }
          v38 = v37 - v35;
          v39 = *(_QWORD *)a3;
          if (v34 != (char *)(v38 >> 3))
            goto LABEL_48;
          v40 = *(_QWORD *)(v39 + 16);
          if (!v40)
            goto LABEL_48;
          if ((*(_BYTE *)(v40 + 288) & 1) == 0)
            goto LABEL_48;
          v41 = *(_QWORD *)(v39 + 16);
          do
          {
            v42 = v41;
            v41 = *(_QWORD *)(v41 + 24);
          }
          while (v41);
          v43 = *(_QWORD *)(v42 + 16) && a3[32] == 0;
          if (v43 && *(_DWORD *)(v21 + 40) != 2)
          {
            VideoAudioControlComponentUnderneathParent = (_anonymous_namespace_ *)re::ecs2::VideoAudioControlSystem::getVideoAudioControlComponentUnderneathParent(v40, v33);
            v54 = (uint64_t)VideoAudioControlComponentUnderneathParent;
            if (!VideoAudioControlComponentUnderneathParent)
            {
              v55 = *(_QWORD *)(*(_QWORD *)a3 + 16);
              *(_QWORD *)buf = 0x731113391DD5364ALL;
              *(_QWORD *)&buf[8] = "VideoAudioControlEntity";
              v56 = re::ecs2::EntityChildCollection::getOrAdd((re::ecs2::EntityChildCollection *)(v55 + 304), (const re::StringID *)buf);
              re::StringID::destroyString((re::StringID *)buf);
              *((_DWORD *)v56 + 72) |= 0x1400u;
              if (!*((_QWORD *)v56 + 25))
                re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v56 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              if (!*((_QWORD *)v56 + 30))
                re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v56 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              v54 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)v56 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoAudioControlComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              re::ecs2::AudioComponentForwarder::forwardAudioComponentState(*(re::ecs2::AudioComponentForwarder **)(a1 + 104), v55, v56);
            }
            v58 = *(_QWORD *)(v21 + 8);
            v57 = *(_QWORD *)(v21 + 16);
            if (v57 >= v58)
            {
              v59 = v57 + 1;
              if (v58 < v57 + 1)
              {
                if (*(_QWORD *)v21)
                {
                  v60 = 2 * v58;
                  if (!v58)
                    v60 = 8;
                  if (v60 <= v59)
                    v61 = v59;
                  else
                    v61 = v60;
                  re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)v21, v61);
                }
                else
                {
                  re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)v21, v59);
                  ++*(_DWORD *)(v21 + 24);
                }
              }
              v57 = *(_QWORD *)(v21 + 16);
            }
            v67 = (uint64_t *)(*(_QWORD *)(v21 + 32) + 16 * v57);
            *v67 = v54;
            v67[1] = (uint64_t)v9;
            *(_QWORD *)(v21 + 16) = v57 + 1;
            ++*(_DWORD *)(v21 + 24);
          }
          else
          {
LABEL_48:
            v45 = *(_QWORD *)(v39 + 16);
            v46 = re::ecs2::VideoAudioControlSystem::getVideoAudioControlComponentUnderneathParent(v45, v33);
            if (v46)
            {
              v47 = v46;
              re::ecs2::AudioComponentForwarder::stopForwardingAudioComponentState(*(re::ecs2::AudioComponentForwarder **)(a1 + 104), v45, *(re::ecs2::Entity **)(v46 + 16));
              v48 = (_DWORD *)(v47 + 32);
              if (*(_DWORD *)(v47 + 32) == 1)
              {
                v49 = *(_QWORD **)(v47 + 16);
                v50 = (re::ecs2::AudioPlayerComponent **)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v49 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                if (v50)
                {
                  v51 = (const re::ecs2::Component *)v50;
                  v52 = *v48 ? *(_QWORD *)(v47 + 48) : 0;
                  re::ecs2::AudioPlayerComponent::destroy(v50, v52);
                  v50 = (re::ecs2::AudioPlayerComponent **)v49[25];
                  if (v50)
                    re::ecs2::NetworkComponent::markDirty((re::ecs2::NetworkComponent *)v50, v51);
                }
                v62 = *re::audioLogObjects((re *)v50);
                if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                {
                  if (*v48)
                    v63 = *(_QWORD *)(v47 + 48);
                  else
                    v63 = 0;
                  v64 = v62;
                  re::ecs2::VideoAudioControlComponent::ControlInfo::label((id *)(v47 + 32));
                  v65 = (void *)objc_claimAutoreleasedReturnValue();
                  v66 = v49[35];
                  *(_DWORD *)buf = 134218754;
                  *(_QWORD *)&buf[4] = v63;
                  *(_WORD *)&buf[12] = 2112;
                  *(_QWORD *)&buf[14] = v65;
                  v71 = 2048;
                  v72 = v47;
                  v73 = 2080;
                  v74 = v66;
                  _os_log_impl(&dword_224FE9000, v64, OS_LOG_TYPE_DEFAULT, "Cleaning up audio token %llu for label %@ in VideoAudioControlComponent@%p on entity %s", buf, 0x2Au);

                }
                *v48 = 0;
              }
            }
          }
          goto LABEL_80;
        }
        while (1)
        {
          LODWORD(v16) = *(_DWORD *)(v20 + 80 * v16 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v16 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v20 + 80 * v16 + 16) == v12)
            goto LABEL_13;
        }
      }
    }
    v69 = a1;
    objc_msgSend((id)v12, "_STSLabel");
    v17 = (id)objc_claimAutoreleasedReturnValue();
    v18 = v17;
    if (v17)
    {
      if (objc_msgSend(v17, "hasPrefix:", CFSTR("REVideoAudioControl:")))
        v19 = 1;
      else
        v19 = 2;
      v68 = v19;
    }
    else
    {
      v68 = 0;
    }

    v22 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v14) ^ ((0xBF58476D1CE4E5B9 * v14) >> 27));
    v23 = v22 ^ (v22 >> 31);
    if (*(_QWORD *)a2)
    {
      v24 = v23 % *(unsigned int *)(a2 + 24);
      v25 = *(unsigned int *)(*(_QWORD *)(a2 + 8) + 4 * v24);
      if ((_DWORD)v25 != 0x7FFFFFFF)
      {
        v26 = *(_QWORD *)(a2 + 16);
        if (*(void **)(v26 + 80 * v25 + 16) == v13)
        {
LABEL_20:
          v21 = v26 + 80 * v25 + 24;
LABEL_28:

          a1 = v69;
          goto LABEL_29;
        }
        while (1)
        {
          LODWORD(v25) = *(_DWORD *)(v26 + 80 * v25 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v25 == 0x7FFFFFFF)
            break;
          if (*(void **)(v26 + 80 * v25 + 16) == v13)
            goto LABEL_20;
        }
      }
    }
    else
    {
      LODWORD(v24) = 0;
    }
    v27 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v27 == 0x7FFFFFFF)
    {
      v27 = *(unsigned int *)(a2 + 32);
      v28 = v27;
      if ((_DWORD)v27 == *(_DWORD *)(a2 + 24))
      {
        re::HashTable<AVPlayer * {__strong},re::ecs2::VideoAudioControlSystem::AVPlayerState,re::Hash<AVPlayer * {__strong}>,re::EqualTo<AVPlayer * {__strong}>,true,false>::setCapacity(a2, 2 * *(_DWORD *)(a2 + 28));
        LODWORD(v24) = v23 % *(unsigned int *)(a2 + 24);
        v28 = *(_DWORD *)(a2 + 32);
      }
      *(_DWORD *)(a2 + 32) = v28 + 1;
      v29 = *(_QWORD *)(a2 + 16);
      v30 = *(_DWORD *)(v29 + 80 * v27 + 8);
    }
    else
    {
      v29 = *(_QWORD *)(a2 + 16);
      v30 = *(_DWORD *)(v29 + 80 * v27 + 8);
      *(_DWORD *)(a2 + 36) = v30 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v29 + 80 * v27 + 8) = v30 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a2 + 16) + 80 * v27 + 8) = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 80 * v27 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * v24);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 80 * v27) = v23;
    v31 = *(_QWORD *)(a2 + 16) + 80 * v27;
    *(_QWORD *)(v31 + 16) = v13;
    v32 = *(_QWORD *)(a2 + 16) + 80 * v27;
    *(_QWORD *)(v32 + 56) = 0;
    *(_DWORD *)(v32 + 48) = 0;
    *(_QWORD *)(v32 + 32) = 0;
    *(_QWORD *)(v32 + 40) = 0;
    *(_QWORD *)(v32 + 24) = 0;
    *(_DWORD *)(v32 + 64) = v68;
    *(_QWORD *)(v32 + 72) = v18;
    *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * v24) = v27;
    ++*(_DWORD *)(a2 + 28);
    ++*(_DWORD *)(a2 + 40);
    v21 = *(_QWORD *)(a2 + 16) + 80 * v27 + 24;
    goto LABEL_28;
  }
}

void re::ecs2::VideoAudioControlSystem::updateAudioControllersForAllVideoAssetsInScene(uint64_t a1, uint64_t a2, char **a3)
{
  re::ecs2::SceneComponentTable *v5;
  _anonymous_namespace_ *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  re *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  int v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  __CFString *v34;
  uint64_t v35;
  re::ecs2::AudioPlayerComponent **v36;
  uint64_t v37;
  re::ecs2::NetworkComponent *v38;
  re *v39;
  re *v40;
  int v41;
  NSObject *v42;
  re *v43;
  re *v44;
  NSObject *v45;
  re *v46;
  NSObject *v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  const __int16 *v51;
  int16x8_t *v52;
  int16x8_t v53;
  int v54;
  int16x8_t *v55;
  uint64_t v56;
  uint16x8_t v57;
  const __int16 *v58;
  int16x8_t v59;
  int v60;
  int16x8_t *v61;
  uint64_t v62;
  uint16x8_t v63;
  const __int16 *v64;
  int16x8_t v65;
  int v66;
  uint16x8_t v67;
  uint64_t v68;
  int v69;
  float v70;
  re::ecs2::EntityComponentCollection *v71;
  re::ecs2::NetworkComponent *v72;
  uint64_t v73;
  const re::ecs2::Component *v74;
  uint64_t v75;
  uint64_t v76;
  const re::ecs2::Component *v77;
  uint64_t v78;
  _BYTE *v79;
  NSObject *v80;
  id v81;
  NSObject *v82;
  void *v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  id *v92;
  int *v93;
  uint64_t *v94;
  id *v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE __buf[12];
  __int16 v103;
  re *v104;
  __int16 v105;
  void *v106;
  char v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if ((v5 = (re::ecs2::SceneComponentTable *)(a2 + 200),
          (v6 = (_anonymous_namespace_ *)re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)) != 0)&& *((_QWORD *)v6 + 3)|| (v6 = (_anonymous_namespace_ *)re::ecs2::SceneComponentTable::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)) != 0&& *((_QWORD *)v6 + 3))
    {
      v99 = 0;
      v97 = 0u;
      v98 = 0u;
      v100 = 0x7FFFFFFFLL;
      v7 = re::ecs2::SceneComponentTable::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 24);
        if (v8)
        {
          v9 = *(uint64_t **)(v7 + 40);
          v10 = 8 * v8;
          do
          {
            v11 = *v9++;
            *(_QWORD *)__buf = v11;
            re::AssetHandle::AssetHandle((re::AssetHandle *)&__buf[8], (const re::AssetHandle *)(v11 + 168));
            v107 = *(_BYTE *)(v11 + 267);
            re::ecs2::VideoAudioControlSystem::ignoreCreateOrCleanUpComponentForAudioControl(a1, (uint64_t)&v97, __buf, a3);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&__buf[8]);
            v10 -= 8;
          }
          while (v10);
        }
      }
      v12 = (re *)re::ecs2::SceneComponentTable::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v12)
      {
        v13 = *((_QWORD *)v12 + 3);
        if (v13)
        {
          v14 = (uint64_t *)*((_QWORD *)v12 + 5);
          v15 = 8 * v13;
          do
          {
            v16 = *v14++;
            *(_QWORD *)__buf = v16;
            re::AssetHandle::AssetHandle((re::AssetHandle *)&__buf[8], (const re::AssetHandle *)(v16 + 40));
            v107 = 0;
            re::ecs2::VideoAudioControlSystem::ignoreCreateOrCleanUpComponentForAudioControl(a1, (uint64_t)&v97, __buf, a3);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&__buf[8]);
            v15 -= 8;
          }
          while (v15);
        }
      }
      v90 = a1;
      if (v99)
      {
        v17 = 0;
        v18 = (int *)(v98 + 8);
        while (1)
        {
          v19 = *v18;
          v18 += 20;
          if (v19 < 0)
            break;
          if (v99 == ++v17)
          {
            LODWORD(v17) = v99;
            break;
          }
        }
      }
      else
      {
        LODWORD(v17) = 0;
      }
      if (v99 != (_DWORD)v17)
      {
        v20 = v17;
        v21 = v98;
        v87 = v98;
        v88 = v99;
        while (1)
        {
          v89 = v17;
          v22 = v21 + 80 * v20;
          v95 = (id *)(v22 + 16);
          v23 = *(_QWORD *)(v22 + 40);
          if (v23)
            break;
          if (*(_DWORD *)(v21 + 80 * v20 + 64) == 1)
          {
            v80 = *re::audioLogObjects(v12);
            if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
            {
              v81 = *v95;
              v82 = v80;
              objc_msgSend(v81, "_STSLabel");
              v83 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)__buf = 138412290;
              *(_QWORD *)&__buf[4] = v83;
              _os_log_impl(&dword_224FE9000, v82, OS_LOG_TYPE_DEFAULT, "clearing label %@ for uncontrolled player", __buf, 0xCu);

            }
            v12 = (re *)objc_msgSend(*v95, "_setSTSLabel:", 0);
          }
LABEL_83:
          v84 = v89;
          v21 = v87;
          if (v88 <= v89 + 1)
            v85 = v89 + 1;
          else
            v85 = v88;
          while (1)
          {
            v20 = (v84 + 1);
            if (v85 - 1 == v84)
              break;
            ++v84;
            v86 = v20;
            if ((*(_DWORD *)(v87 + 80 * v20 + 8) & 0x80000000) != 0)
              goto LABEL_90;
          }
          v86 = v85;
LABEL_90:
          LODWORD(v17) = v86;
          if (v88 == v86)
            goto LABEL_91;
        }
        v24 = *(uint64_t **)(v22 + 56);
        v91 = *(_QWORD *)(v22 + 40);
        v25 = v21 + 80 * v20;
        v93 = (int *)(v25 + 64);
        v94 = &v24[2 * v23];
        v92 = (id *)(v25 + 72);
        while (1)
        {
          v27 = *v24;
          v26 = v24[1];
          v28 = *v95;
          v29 = *v93;
          v30 = *v92;
          v31 = v28;
          v96 = v26;
          if (*(_DWORD *)(v27 + 32) == 1)
          {
            re::ecs2::VideoAudioControlComponent::ControlInfo::label((id *)(v27 + 32));
            v32 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v33 = (void *)MEMORY[0x24BDD17C8];
            *(_QWORD *)__buf = 0;
            do
              arc4random_buf(__buf, 8uLL);
            while (*(_QWORD *)__buf < 0x3E8uLL);
            objc_msgSend(v33, "stringWithFormat:", CFSTR("%@%llx"), CFSTR("REVideoAudioControl:"), *(_QWORD *)__buf);
            v34 = (__CFString *)objc_claimAutoreleasedReturnValue();
            v35 = *(_QWORD *)(v27 + 16);
            v36 = (re::ecs2::AudioPlayerComponent **)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v35 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            v37 = re::ecs2::AudioPlayerComponent::prepare(v36, v34);
            v38 = *(re::ecs2::NetworkComponent **)(v35 + 200);
            if (v38)
              re::ecs2::NetworkComponent::markDirty(v38, (const re::ecs2::Component *)v36);
            v39 = v34;
            v40 = v39;
            if (v39 && v37)
            {
              v41 = 1;
            }
            else
            {
              v42 = *re::audioLogObjects(v39);
              if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__buf = 134218242;
                *(_QWORD *)&__buf[4] = v37;
                v103 = 2112;
                v104 = v40;
                _os_log_error_impl(&dword_224FE9000, v42, OS_LOG_TYPE_ERROR, "invalid control info %llu, %@", __buf, 0x16u);
              }
              v41 = 0;
            }

            *(_DWORD *)(v27 + 32) = v41;
            objc_storeStrong((id *)(v27 + 40), v34);
            *(_QWORD *)(v27 + 48) = v37;

            re::ecs2::VideoAudioControlComponent::ControlInfo::label((id *)(v27 + 32));
            v32 = (void *)objc_claimAutoreleasedReturnValue();

          }
          if (!v29)
            break;
          if (v91 == 1 && v29 == 1)
          {
            v44 = (re *)objc_msgSend(v32, "isEqualToString:", v30);
            if ((v44 & 1) == 0)
            {
              v45 = *re::audioLogObjects(v44);
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
              {
                v46 = (re *)v30;
                *(_DWORD *)__buf = 134218498;
                *(_QWORD *)&__buf[4] = v90;
                v103 = 2112;
                v104 = v46;
                v105 = 2112;
                v106 = v32;
                v47 = v45;
                _os_log_impl(&dword_224FE9000, v47, OS_LOG_TYPE_DEFAULT, "VideoAudioControlComponent@%p overwriting AVPlayer's existing STS label %@ to %@", __buf, 0x20u);

              }
LABEL_45:
              objc_msgSend(v31, "_setSTSLabel:", v32);
            }
          }
          v49 = *(_QWORD *)(v27 + 16);
          v50 = *(unsigned __int16 *)(v49 + 82);
          if (*(_WORD *)(v49 + 82))
          {
            v51 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                  + 16);
            v52 = *(int16x8_t **)(v49 + 88);
            v53 = vld1q_dup_s16(v51);
            v54 = 1;
            v55 = v52;
            v56 = *(unsigned __int16 *)(v49 + 82);
            while (1)
            {
              v57 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v53, *v55), (int8x16_t)xmmword_2260F1E80);
              v57.i16[0] = vmaxvq_u16(v57);
              if (v57.i32[0])
                break;
              v54 -= 8;
              ++v55;
              if (!--v56)
                goto LABEL_52;
            }
            if (v57.u16[0] - v54 < *(unsigned __int16 *)(v49 + 80))
            {
LABEL_62:
              re::ecs2::VideoAudioControlComponent::setDeferToSystemAcousticTuning((re::ecs2::VideoAudioControlComponent *)v27);
              goto LABEL_77;
            }
LABEL_52:
            v58 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                  + 16);
            v59 = vld1q_dup_s16(v58);
            v60 = 1;
            v61 = *(int16x8_t **)(v49 + 88);
            v62 = *(unsigned __int16 *)(v49 + 82);
            while (1)
            {
              v63 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v59, *v61), (int8x16_t)xmmword_2260F1E80);
              v63.i16[0] = vmaxvq_u16(v63);
              if (v63.i32[0])
                break;
              v60 -= 8;
              ++v61;
              if (!--v62)
                goto LABEL_57;
            }
            if (v63.u16[0] - v60 < *(unsigned __int16 *)(v49 + 80))
              goto LABEL_62;
LABEL_57:
            v64 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                  + 16);
            v65 = vld1q_dup_s16(v64);
            v66 = 1;
            while (1)
            {
              v67 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v65, *v52), (int8x16_t)xmmword_2260F1E80);
              v67.i16[0] = vmaxvq_u16(v67);
              if (v67.i32[0])
                break;
              v66 -= 8;
              ++v52;
              if (!--v50)
                goto LABEL_63;
            }
            if (v67.u16[0] - v66 < *(unsigned __int16 *)(v49 + 80))
              goto LABEL_62;
          }
LABEL_63:
          re::ecs2::VideoAudioControlComponent::setDeferToSystemAcousticTuning((re::ecs2::VideoAudioControlComponent *)v27);
          v68 = *(_QWORD *)(v27 + 16);
          if (v68)
          {
            if (*(_DWORD *)(v27 + 32) == 1)
            {
              v69 = *(unsigned __int8 *)(v96 + 24);
              v70 = *(float *)(v96 + 28);
              *(_QWORD *)__buf = *(_QWORD *)(v27 + 48);
              v71 = (re::ecs2::EntityComponentCollection *)(v68 + 32);
              v72 = *(re::ecs2::NetworkComponent **)(v68 + 200);
              v73 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v68 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              if (v73)
              {
                v74 = (const re::ecs2::Component *)v73;
                v75 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v73 + 32, (uint64_t *)__buf);
                if (v75)
                {
                  if (*(float *)(v75 + 56) != v70)
                  {
                    *(float *)(v75 + 56) = v70;
                    re::ecs2::Component::markDirty(v74);
                    if (v72)
                      re::ecs2::NetworkComponent::markDirty(v72, v74);
                  }
                  v76 = re::ecs2::EntityComponentCollection::getOrAdd(v71, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
                  if (v76)
                  {
                    v77 = (const re::ecs2::Component *)v76;
                    v78 = v76 + 40;
                    v79 = (_BYTE *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v76 + 40, (uint64_t *)__buf);
                    if (!v79)
                    {
                      HIDWORD(v101) = 6553601;
                      LOBYTE(v101) = v69;
                      re::HashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::ecs2::TransientAudioState&>(v78, (uint64_t *)__buf, &v101);
LABEL_75:
                      re::ecs2::Component::markDirty(v77);
                      if (v72)
                        re::ecs2::NetworkComponent::markDirty(v72, v77);
                      goto LABEL_77;
                    }
                    if (*v79 != v69)
                    {
                      *v79 = v69;
                      goto LABEL_75;
                    }
                  }
                }
              }
            }
          }
LABEL_77:

          v24 += 2;
          if (v24 == v94)
            goto LABEL_83;
        }
        v48 = *re::audioLogObjects(v43);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__buf = 134218242;
          *(_QWORD *)&__buf[4] = v90;
          v103 = 2112;
          v104 = (re *)v32;
          _os_log_impl(&dword_224FE9000, v48, OS_LOG_TYPE_DEFAULT, "VideoAudioControlComponent@%p setting AVPlayer's STS label to %@", __buf, 0x16u);
        }
        goto LABEL_45;
      }
LABEL_91:
      re::HashTable<AVPlayer * {__strong},re::ecs2::VideoAudioControlSystem::AVPlayerState,re::Hash<AVPlayer * {__strong}>,re::EqualTo<AVPlayer * {__strong}>,true,false>::deinit((uint64_t *)&v97);
    }
  }
}

uint64_t re::ecs2::VideoAudioControlSystem::update(uint64_t a1, uint64_t a2)
{
  char *v5[2];
  _BYTE v6[16];
  uint64_t v7[2];

  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v7);
  re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoAudioControlComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v6, 3137, a1);
  v5[0] = 0;
  v5[1] = 0;
  re::ecs2::VideoAudioControlSystem::updateAudioControllersForAllVideoAssetsInScene(a1, a2, v5);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v6);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v7);
}

uint64_t re::ecs2::VideoAudioControlSystem::typeInfo(re::ecs2::VideoAudioControlSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoAudioControlSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoAudioControlSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoAudioControlSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoAudioControlSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::VideoAudioControlSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::VideoAudioControlSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::createSubscription<re::ecs2::VideoAudioControlSystem>(re::ecs2::VideoAudioControlSystem *,REEventHandlerResult (re::ecs2::VideoAudioControlSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Slice<re::ecs2::VideoComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t re::ecs2::VideoAudioControlSystem::willRemoveComponents<re::ecs2::VideoComponent>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  uint64_t v4;
  char *v6[2];

  v4 = *(_QWORD *)(a2 + 120);
  v6[0] = a3;
  v6[1] = a4;
  re::ecs2::VideoAudioControlSystem::updateAudioControllersForAllVideoAssetsInScene(a1, v4, v6);
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoAudioControlSystem>(re::ecs2::VideoAudioControlSystem *,REEventHandlerResult (re::ecs2::VideoAudioControlSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t re::ecs2::VideoAudioControlSystem::willRemoveComponents<re::ecs2::VideoPlayerComponent>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  uint64_t v4;
  char *v6[2];

  v4 = *(_QWORD *)(a2 + 120);
  v6[0] = a3;
  v6[1] = a4;
  re::ecs2::VideoAudioControlSystem::updateAudioControllersForAllVideoAssetsInScene(a1, v4, v6);
  return 0;
}

void re::HashTable<AVPlayer * {__strong},re::ecs2::VideoAudioControlSystem::AVPlayerState,re::Hash<AVPlayer * {__strong}>,re::EqualTo<AVPlayer * {__strong}>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  signed int v26;
  _BYTE v27[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v27, 0, 36);
      *(_QWORD *)&v27[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v27, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v27;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v27[8];
      *(_OWORD *)v27 = v5;
      *(_QWORD *)&v27[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v27[24];
      *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v27[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = v6 + 40;
        do
        {
          if ((*(_DWORD *)(v13 - 32) & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)(v13 - 40);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<AVPlayer * {__strong},re::ecs2::VideoAudioControlSystem::AVPlayerState,re::Hash<AVPlayer * {__strong}>,re::EqualTo<AVPlayer * {__strong}>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 80 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 80 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 80 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v17) = v14;
            v21 = *(_QWORD *)(a1 + 16) + 80 * v17;
            *(_QWORD *)(v21 + 16) = *(id *)(v13 - 24);
            v22 = *(_QWORD *)(a1 + 16) + 80 * v17;
            *(_QWORD *)(v22 + 56) = 0;
            *(_DWORD *)(v22 + 48) = 0;
            *(_QWORD *)(v22 + 32) = 0;
            *(_QWORD *)(v22 + 40) = 0;
            *(_QWORD *)(v22 + 24) = 0;
            *(_QWORD *)(v22 + 24) = *(_QWORD *)(v13 - 16);
            *(_QWORD *)(v13 - 16) = 0;
            *(_QWORD *)(v22 + 32) = *(_QWORD *)(v13 - 8);
            *(_QWORD *)(v13 - 8) = 0;
            v23 = *(_QWORD *)(v22 + 40);
            *(_QWORD *)(v22 + 40) = *(_QWORD *)v13;
            *(_QWORD *)v13 = v23;
            v24 = *(_QWORD *)(v22 + 56);
            *(_QWORD *)(v22 + 56) = *(_QWORD *)(v13 + 16);
            *(_QWORD *)(v13 + 16) = v24;
            ++*(_DWORD *)(v13 + 8);
            ++*(_DWORD *)(v22 + 48);
            *(_DWORD *)(v22 + 64) = *(_DWORD *)(v13 + 24);
            v25 = *(_QWORD *)(v13 + 32);
            *(_QWORD *)(v13 + 32) = 0;
            *(_QWORD *)(v22 + 72) = v25;
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 80;
          --v10;
        }
        while (v10);
      }
      re::HashTable<AVPlayer * {__strong},re::ecs2::VideoAudioControlSystem::AVPlayerState,re::Hash<AVPlayer * {__strong}>,re::EqualTo<AVPlayer * {__strong}>,true,false>::deinit((uint64_t *)v27);
    }
  }
  else
  {
    if (a2)
      v26 = a2;
    else
      v26 = 3;
  }
}

double re::HashTable<AVPlayer * {__strong},re::ecs2::VideoAudioControlSystem::AVPlayerState,re::Hash<AVPlayer * {__strong}>,re::EqualTo<AVPlayer * {__strong}>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        v5 = a1[2];
        v6 = v5 + v3;
        v7 = *(_DWORD *)(v5 + v3 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;

          v10 = *(_QWORD *)(v6 + 24);
          v9 = (_QWORD *)(v6 + 24);
          v8 = v10;
          if (v10)
          {
            v11 = v5 + v3;
            if (*(_QWORD *)(v11 + 56))
              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
            *(_QWORD *)(v11 + 56) = 0;
            v9[1] = 0;
            v9[2] = 0;
            *v9 = 0;
            ++*(_DWORD *)(v11 + 48);
          }
        }
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::ecs2::StateCommandFactoryECS::getCommandIDFromCommandName(re::ecs2::StateCommandFactoryECS *this, const re::StringID *a2)
{
    return 1;
    return 2;
    return 3;
    return 4;
  return 0;
}

uint64_t re::ecs2::StateCommandFactoryECS::createStateCommand(re::ecs2::StateCommandFactoryECS *this, const StringID *a2, const re::StringID *a3)
{
  _BOOL8 v5;
  uint64_t *v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t *v9;
  void (**v10)(re::ecs2::AnimationSetPlaybackTimeCommand *__hidden);
  _BOOL8 v11;
  uint64_t *v12;
  _BOOL8 v13;
  uint64_t *v14;

  if (v5)
  {
    v6 = re::globalAllocators((re *)v5);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 104, 8);
    *(_QWORD *)v7 = &off_24ED64818;
    re::StringID::StringID((re::StringID *)(v7 + 8), a2);
    *(_DWORD *)(v7 + 56) = 0;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_QWORD *)(v7 + 64) = 0;
    *(_QWORD *)(v7 + 72) = 0;
    *(_QWORD *)v7 = &off_24ED705F0;
    *(_QWORD *)(v7 + 80) = 0;
    *(_QWORD *)(v7 + 88) = &str_110;
    *(_BYTE *)(v7 + 96) = 0;
  }
  else
  {
    if (v8)
    {
      v9 = re::globalAllocators((re *)v8);
      v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 80, 8);
      *(_QWORD *)v7 = &off_24ED64818;
      re::StringID::StringID((re::StringID *)(v7 + 8), a2);
      *(_DWORD *)(v7 + 56) = 0;
      *(_OWORD *)(v7 + 40) = 0u;
      *(_OWORD *)(v7 + 24) = 0u;
      *(_QWORD *)(v7 + 64) = 0;
      *(_QWORD *)(v7 + 72) = 0;
      v10 = &off_24ED706A8;
    }
    else
    {
      if (v11)
      {
        v12 = re::globalAllocators((re *)v11);
        v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 80, 8);
        *(_QWORD *)v7 = &off_24ED64818;
        re::StringID::StringID((re::StringID *)(v7 + 8), a2);
        *(_DWORD *)(v7 + 56) = 0;
        *(_OWORD *)(v7 + 40) = 0u;
        *(_OWORD *)(v7 + 24) = 0u;
        *(_QWORD *)(v7 + 64) = 0;
        *(_QWORD *)(v7 + 72) = 0;
        v10 = &off_24ED70760;
      }
      else
      {
        if (!v13)
          return 0;
        v14 = re::globalAllocators((re *)v13);
        v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 88, 8);
        *(_QWORD *)v7 = &off_24ED64818;
        re::StringID::StringID((re::StringID *)(v7 + 8), a2);
        *(_DWORD *)(v7 + 56) = 0;
        *(_OWORD *)(v7 + 40) = 0u;
        *(_OWORD *)(v7 + 24) = 0u;
        *(_QWORD *)(v7 + 64) = 0;
        *(_QWORD *)(v7 + 72) = 0;
        v10 = &off_24ED70818;
      }
    }
    *(_QWORD *)v7 = v10;
  }
  return v7;
}

uint64_t re::ecs2::StateCommandFactoryECS::createStateCommand(re *a1, const StringID *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  void (**v6)(re::ecs2::AnimationSetPlaybackTimeCommand *__hidden);
  uint64_t *v7;
  uint64_t *v8;

  switch((int)a1)
  {
    case 1:
      v3 = re::globalAllocators(a1);
      v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 104, 8);
      *(_QWORD *)v4 = &off_24ED64818;
      re::StringID::StringID((re::StringID *)(v4 + 8), a2);
      *(_DWORD *)(v4 + 56) = 0;
      *(_OWORD *)(v4 + 40) = 0u;
      *(_OWORD *)(v4 + 24) = 0u;
      *(_QWORD *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 0;
      *(_QWORD *)v4 = &off_24ED705F0;
      *(_QWORD *)(v4 + 80) = 0;
      *(_QWORD *)(v4 + 88) = &str_110;
      *(_BYTE *)(v4 + 96) = 0;
      return v4;
    case 2:
      v5 = re::globalAllocators(a1);
      v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 80, 8);
      *(_QWORD *)v4 = &off_24ED64818;
      re::StringID::StringID((re::StringID *)(v4 + 8), a2);
      *(_DWORD *)(v4 + 56) = 0;
      *(_OWORD *)(v4 + 40) = 0u;
      *(_OWORD *)(v4 + 24) = 0u;
      *(_QWORD *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 0;
      v6 = &off_24ED706A8;
      goto LABEL_7;
    case 3:
      v7 = re::globalAllocators(a1);
      v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 80, 8);
      *(_QWORD *)v4 = &off_24ED64818;
      re::StringID::StringID((re::StringID *)(v4 + 8), a2);
      *(_DWORD *)(v4 + 56) = 0;
      *(_OWORD *)(v4 + 40) = 0u;
      *(_OWORD *)(v4 + 24) = 0u;
      *(_QWORD *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 0;
      v6 = &off_24ED70760;
      goto LABEL_7;
    case 4:
      v8 = re::globalAllocators(a1);
      v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 88, 8);
      *(_QWORD *)v4 = &off_24ED64818;
      re::StringID::StringID((re::StringID *)(v4 + 8), a2);
      *(_DWORD *)(v4 + 56) = 0;
      *(_OWORD *)(v4 + 40) = 0u;
      *(_OWORD *)(v4 + 24) = 0u;
      *(_QWORD *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 0;
      v6 = &off_24ED70818;
LABEL_7:
      *(_QWORD *)v4 = v6;
      break;
    default:
      v4 = 0;
      break;
  }
  return v4;
}

uint64_t re::StateCommand::commandID(re::StateCommand *this)
{
  return 0;
}

uint64_t re::StateCommand::getRequiredParameterCount(re::StateCommand *this)
{
  return 0;
}

uint64_t re::StateCommand::getParameterNames(re::StateCommand *this)
{
  return 0;
}

uint64_t re::StateCommand::getParameterDescriptions(re::StateCommand *this)
{
  return 0;
}

uint64_t re::StateCommand::getParameterTypes(re::StateCommand *this)
{
  return 0;
}

void re::ecs2::ECSStateCommand::~ECSStateCommand(re::ecs2::ECSStateCommand *this)
{
  char *v2;

  *(_QWORD *)this = &off_24ED64818;
  v2 = (char *)this + 32;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::ecs2::ECSStateCommand *)((char *)this + 8));
}

{
  char *v2;

  *(_QWORD *)this = &off_24ED64818;
  v2 = (char *)this + 32;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::ecs2::ECSStateCommand *)((char *)this + 8));
  JUMPOUT(0x2276933B8);
}

uint64_t *re::ecsNetworkLogObjects(re *this)
{
  unsigned __int8 v1;

  {
    re::ecsNetworkLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "ECS.Network");
  }
  return &re::ecsNetworkLogObjects(void)::logObjects;
}

uint64_t *re::ecs2::allocInfo_OpacityService(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_234);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_234))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410DEE8, 0);
    *(uint64_t *)((char *)&qword_25410DEF8 + 6) = 0;
    qword_25410DEF8 = 0;
    qword_25410DF08 = 0;
    qword_25410DF10 = 0xFFFFFFFFLL;
    qword_25410DEE8 = (uint64_t)&off_24ED7DAA8;
    qword_25410DF18 = (uint64_t)"OpacityService";
    dword_25410DF20 = 0;
    unk_25410DF28 = 0u;
    unk_25410DF38 = 0u;
    unk_25410DF48 = 0u;
    qword_25410DF58 = 0;
    __cxa_guard_release(&_MergedGlobals_234);
  }
  return &qword_25410DEE8;
}

void re::ecs2::initInfo_OpacityService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xFB68753FBF224094;
  v5[1] = "OpacityService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_OpacityService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_OpacityService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"OpacityService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_OpacityService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_OpacityService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::OpacityService>, this);
}

_QWORD *re::ecs2::PhysicsSimulationData::deinit(_QWORD *this)
{
  void (***v1)(_QWORD);
  _QWORD *v2;
  uint64_t v3;
  void (***v4)(_QWORD);
  uint64_t v5;
  void (***v6)(_QWORD);
  uint64_t v7;
  void (***v8)(_QWORD);
  uint64_t v9;
  void (***v10)(_QWORD);
  uint64_t v11;

  v1 = (void (***)(_QWORD))this[1];
  if (v1)
  {
    v2 = this;
    v3 = re::globalAllocators((re *)this)[2];
    (**v1)(v1);
    this = (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v1);
    v2[1] = 0;
    v4 = (void (***)(_QWORD))v2[2];
    if (v4)
    {
      v5 = re::globalAllocators((re *)this)[2];
      (**v4)(v4);
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v5 + 40))(v5, v4);
    }
    v2[2] = 0;
    v6 = (void (***)(_QWORD))v2[3];
    if (v6)
    {
      v7 = re::globalAllocators((re *)this)[2];
      (**v6)(v6);
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v7 + 40))(v7, v6);
    }
    v2[3] = 0;
    v8 = (void (***)(_QWORD))v2[4];
    if (v8)
    {
      v9 = re::globalAllocators((re *)this)[2];
      (**v8)(v8);
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v9 + 40))(v9, v8);
    }
    v2[4] = 0;
    v10 = (void (***)(_QWORD))v2[5];
    if (v10)
    {
      v11 = re::globalAllocators((re *)this)[2];
      (**v10)(v10);
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v11 + 40))(v11, v10);
    }
    v2[5] = 0;
  }
  return this;
}

uint64_t re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(re::ecs2::PhysicsSimulationData *this)
{
  uint64_t result;
  char *WeakRetained;
  char *v4;
  char *v5;
  NSObject *v6;
  const char *v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  re *v12;
  uint64_t *v13;
  re *v14;
  uint64_t *v15;
  re *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  result = *((_QWORD *)this + 1);
  if (!result)
  {
    WeakRetained = (char *)objc_loadWeakRetained((id *)this + 6);
    v4 = WeakRetained;
    if (WeakRetained)
      v5 = WeakRetained - 8;
    else
      v5 = 0;
    if (WeakRetained)

    v6 = *re::physicsLogObjects((re *)WeakRetained);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if (v4)
        v7 = (const char *)*((_QWORD *)v4 + 34);
      else
        v7 = "null";
      v22 = 136315394;
      v23 = v7;
      v24 = 2048;
      v25 = v5;
      _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "----- CREATING SIMULATION FOR ROOT ENTITY %s (%p) ------ ", (uint8_t *)&v22, 0x16u);
    }
    v8 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)re::PhysicsFactory::m_defaultFactory
                                                                              + 32))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator);
    *((_QWORD *)this + 1) = v8;
    v9 = *(_QWORD *)this;
    v10 = re::ServiceLocator::serviceOrNull<re::JobService>(*(_QWORD *)this);
    v11 = *((_QWORD *)this + 1);
    *(_DWORD *)(v11 + 68) = *((_DWORD *)this + 64);
    *(_DWORD *)(v11 + 64) = *((_DWORD *)this + 65);
    v12 = (re *)re::ServiceLocator::serviceOrNull<re::EventBus>(*(_QWORD *)this);
    v13 = re::globalAllocators(v12);
    v14 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 16, 8);
    *(_QWORD *)v14 = &off_24ED71260;
    *((_QWORD *)v14 + 1) = v12;
    *((_QWORD *)this + 2) = v14;
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 56) + 64) = v14;
    v15 = re::globalAllocators(v14);
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 16, 8);
    *(_QWORD *)v16 = &off_24ED64F00;
    *((_QWORD *)v16 + 1) = v12;
    *((_QWORD *)this + 3) = v16;
    v17 = re::globalAllocators(v16);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17[2] + 32))(v17[2], 192, 16);
    *(_QWORD *)(v18 + 48) = 0;
    *(_QWORD *)(v18 + 56) = 0;
    *(_QWORD *)v18 = &off_24ED69DB0;
    *(_OWORD *)(v18 + 8) = 0u;
    *(_OWORD *)(v18 + 24) = 0u;
    *(_QWORD *)(v18 + 40) = 0x7FFFFFFF00000000;
    *(_OWORD *)(v18 + 64) = xmmword_2260E5F10;
    *(_OWORD *)(v18 + 80) = xmmword_2260E5F20;
    *(_OWORD *)(v18 + 96) = xmmword_2260E5F40;
    *(_OWORD *)(v18 + 112) = xmmword_2260E5D70;
    *(_OWORD *)(v18 + 128) = xmmword_2260E5F10;
    *(_OWORD *)(v18 + 144) = xmmword_2260E5F20;
    *(_OWORD *)(v18 + 160) = xmmword_2260E5F40;
    *(_OWORD *)(v18 + 176) = xmmword_2260E5D70;
    *((_QWORD *)this + 5) = v18;
    v19 = *((_QWORD *)this + 1);
    *(_QWORD *)(v19 + 40) = v18;
    if (!*((_BYTE *)this + 264))
    {
      v20 = re::globalAllocators((re *)v18);
      v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20[2] + 32))(v20[2], 32, 8);
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 8) = 0;
      *(_QWORD *)(v21 + 16) = 0;
      *(_QWORD *)v21 = &off_24ED64B98;
      objc_initWeak((id *)(v21 + 24), 0);
      *((_QWORD *)this + 4) = v21;
      v19 = *((_QWORD *)this + 1);
      *(_QWORD *)(v19 + 32) = v21;
    }
    (*(void (**)(_QWORD, char *))(**(_QWORD **)(v19 + 56) + 120))(*(_QWORD *)(v19 + 56), (char *)this + 112);
    return *((_QWORD *)this + 1);
  }
  return result;
}

__n128 re::ecs2::PhysicsSimulationData::setGravityOverride(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  BOOL v4;
  BOOL v6;
  __n128 *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __n128 v11;

  v3 = *a2;
  if (*(_BYTE *)(a1 + 64))
    v4 = 0;
  else
    v4 = v3 == 0;
  if (v4)
    goto LABEL_18;
  if (*(_BYTE *)(a1 + 64) && v3 == 0)
  {
    *(_BYTE *)(a1 + 64) = 0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 64))
      v6 = 1;
    else
      v6 = v3 == 0;
    if (!v6)
      *(_BYTE *)(a1 + 64) = 1;
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 1);
  }
  if (!*a2)
  {
LABEL_18:
    v8 = re::ServiceLocator::service<re::ecs2::PhysicsSimulationService>(*(_QWORD *)a1);
    v7 = (__n128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8);
  }
  else
  {
    v7 = (__n128 *)(a2 + 16);
  }
  v11 = *v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    (*(void (**)(_QWORD, __n128 *))(*(_QWORD *)v9 + 80))(*(_QWORD *)(a1 + 8), &v11);
  }
  else
  {
    result = *v7;
    *(__n128 *)(a1 + 240) = *v7;
  }
  return result;
}

uint64_t re::ServiceLocator::service<re::ecs2::PhysicsSimulationService>(uint64_t a1)
{
  uint64_t result;
  __objc2_class_ro *v2;
  __objc2_class_ro *v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v6[16];
  _BYTE v7[9];
  _BYTE v8[23];

  result = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(a1);
  if (!result)
  {
    v2 = re::introspect<re::ecs2::PhysicsSimulationService>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage((re::internal *)v2, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    v3 = re::introspect<re::ecs2::PhysicsSimulationService>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage((re::internal *)v3, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    if ((v7[8] & 1) != 0)
      v5 = *(_BYTE **)&v8[7];
    else
      v5 = v8;
    re::internal::assertLog((re::internal *)5, v4, "assertion failure: '%s' (%s:line %i) %s", "service", "service", 69, v5);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::ecs2::PhysicsSimulationData::setFixedTimeStepOverride(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v2 = result;
  v3 = *a2;
  if (*(_BYTE *)(result + 96))
    v4 = 0;
  else
    v4 = v3 == 0;
  if (v4)
    goto LABEL_18;
  if (*(_BYTE *)(result + 96) && v3 == 0)
  {
    *(_BYTE *)(result + 96) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 96))
      v6 = 1;
    else
      v6 = v3 == 0;
    if (!v6)
      *(_BYTE *)(result + 96) = 1;
    *(_DWORD *)(result + 100) = *((_DWORD *)a2 + 1);
  }
  if (!*a2)
  {
LABEL_18:
    v8 = re::ServiceLocator::service<re::ecs2::PhysicsSimulationService>(*(_QWORD *)result);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 152))(v8);
  }
  else
  {
    v7 = *((_DWORD *)a2 + 1);
  }
  v9 = *(_QWORD *)(v2 + 8);
  if (v9)
    *(_DWORD *)(v9 + 68) = v7;
  else
    *(_DWORD *)(v2 + 256) = v7;
  return result;
}

void re::ecs2::PhysicsSimulationData::updatePhysicsOrigin(uint64_t a1, simd_float4x4 *a2)
{
  simd_float4 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v4 = a2->columns[0];
  v5 = (__int128)a2->columns[1];
  v6 = (__int128)a2->columns[3];
  *(simd_float4 *)(a1 + 144) = a2->columns[2];
  *(_OWORD *)(a1 + 160) = v6;
  *(simd_float4 *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 128) = v5;
  *(simd_float4x4 *)(a1 + 176) = __invert_f4(*a2);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
    (*(void (**)(_QWORD, simd_float4x4 *))(**(_QWORD **)(v7 + 56) + 120))(*(_QWORD *)(v7 + 56), a2);
}

double re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace@<D0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  __int128 v8;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[4];
  _OWORD v14[4];

  v3 = 0;
  v4 = a1[11];
  v5 = a1[12];
  v6 = a1[13];
  v7 = a1[14];
  v8 = *(_OWORD *)(a2 + 48);
  v13[2] = *(_OWORD *)(a2 + 32);
  v13[3] = v8;
  do
  {
    v14[v3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, COERCE_FLOAT(v13[v3])), v5, *(float32x2_t *)&v13[v3], 1), v6, (float32x4_t)v13[v3], 2), v7, (float32x4_t)v13[v3], 3);
    ++v3;
  }
  while (v3 != 4);
  result = *(double *)v14;
  v10 = v14[1];
  v11 = v14[2];
  v12 = v14[3];
  *a3 = v14[0];
  a3[1] = v10;
  a3[2] = v11;
  a3[3] = v12;
  return result;
}

uint64_t re::ecs2::PhysicsSimulationData::localTransformFromPhysicsSimulationSpace@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  re::ecs2::TransformComponent **v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  simd_float4x4 v25;
  int32x4_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[4];
  __int128 v31;
  __int128 v32;
  simd_float4x4 v33;

  v7 = *(_QWORD *)(a3 + 24);
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 288) & 0x80) != 0)
      v8 = 0;
    else
      v8 = *(re::ecs2::TransformComponent ***)(a3 + 24);
  }
  else
  {
    v8 = 0;
  }
  re::ecs2::TransformComponent::worldMatrix4x4F(v8, (const re::ecs2::Entity *)1, &v25);
  v33 = __invert_f4(v25);
  v9 = 0;
  v10 = *(_OWORD *)(a1 + 128);
  v11 = *(_OWORD *)(a1 + 144);
  v12 = *(_OWORD *)(a1 + 160);
  v26 = *(int32x4_t *)(a1 + 112);
  v27 = v10;
  v28 = v11;
  v29 = v12;
  do
  {
    v30[v9 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v33.columns[0], COERCE_FLOAT(*(_OWORD *)((char *)&v26 + v9))), (float32x4_t)v33.columns[1], *(float32x2_t *)&v26.i8[v9], 1), (float32x4_t)v33.columns[2], *(float32x4_t *)((char *)&v26 + v9), 2), (float32x4_t)v33.columns[3], *(float32x4_t *)((char *)&v26 + v9), 3);
    v9 += 16;
  }
  while (v9 != 64);
  v13 = 0;
  v14 = (float32x4_t)v30[0];
  v15 = (float32x4_t)v30[1];
  v16 = (float32x4_t)v30[2];
  v17 = (float32x4_t)v30[3];
  v18 = *(_OWORD *)(a2 + 16);
  v19 = *(_OWORD *)(a2 + 32);
  v20 = *(_OWORD *)(a2 + 48);
  v26 = *(int32x4_t *)a2;
  v27 = v18;
  v28 = v19;
  v29 = v20;
  do
  {
    v30[v13 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(*(_OWORD *)((char *)&v26 + v13))), v15, *(float32x2_t *)&v26.i8[v13], 1), v16, *(float32x4_t *)((char *)&v26 + v13), 2), v17, *(float32x4_t *)((char *)&v26 + v13), 3);
    v13 += 16;
  }
  while (v13 != 64);
  v26 = 0u;
  v31 = 0u;
  v32 = xmmword_2260E5D70;
  result = re::decomposeScaleRotationTranslation<float>((uint64_t)v30, &v26, &v32, &v31);
  v22 = v26.i64[1];
  v23 = v32;
  v24 = v31;
  *(_QWORD *)a4 = v26.i64[0];
  *(_QWORD *)(a4 + 8) = v22;
  *(_OWORD *)(a4 + 16) = v23;
  *(_OWORD *)(a4 + 32) = v24;
  return result;
}

__objc2_class_ro *re::introspect<re::ecs2::PhysicsSimulationService>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::ecs2::PhysicsSimulationService>(void)::info = re::ecs2::introspect_PhysicsSimulationService(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[462];
}

uint64_t *re::ecs2::allocInfo_LightGroupComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_235);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_235))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410DF78, 0);
    *(uint64_t *)((char *)&qword_25410DF88 + 6) = 0;
    qword_25410DF88 = 0;
    qword_25410DF98 = 0;
    qword_25410DFA0 = 0xFFFFFFFFLL;
    qword_25410DF78 = (uint64_t)&off_24ED7DAA8;
    qword_25410DFA8 = (uint64_t)"LightGroupComponent";
    dword_25410DFB0 = 0;
    unk_25410DFB8 = 0u;
    unk_25410DFC8 = 0u;
    unk_25410DFD8 = 0u;
    qword_25410DFE8 = 0;
    __cxa_guard_release(&_MergedGlobals_235);
  }
  return &qword_25410DF78;
}

void re::ecs2::initInfo_LightGroupComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xE3D9149F7DF89FA8;
  v10[1] = "LightGroupComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410DF70);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410DF70);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410DF68 = v8;
      __cxa_guard_release(&qword_25410DF70);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410DF68;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::LightGroupComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::LightGroupComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::LightGroupComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::LightGroupComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::LightGroupComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57A88;
}

uint64_t re::internal::defaultDestruct<re::ecs2::LightGroupComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::LightGroupComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57A88;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::LightGroupComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_LightGroupComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LightGroupComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LightGroupComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LightGroupComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LightGroupComponent>, this);
}

uint64_t *re::ecs2::allocInfo_ProjectiveShadowReceiverService(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_236);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_236))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410DFF8, 0);
    *(uint64_t *)((char *)&qword_25410E008 + 6) = 0;
    qword_25410E008 = 0;
    qword_25410E018 = 0;
    qword_25410E020 = 0xFFFFFFFFLL;
    qword_25410DFF8 = (uint64_t)&off_24ED7DAA8;
    qword_25410E028 = (uint64_t)"ProjectiveShadowReceiverService";
    dword_25410E030 = 0;
    unk_25410E038 = 0u;
    unk_25410E048 = 0u;
    unk_25410E058 = 0u;
    qword_25410E068 = 0;
    __cxa_guard_release(&_MergedGlobals_236);
  }
  return &qword_25410DFF8;
}

void re::ecs2::initInfo_ProjectiveShadowReceiverService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x84AD34C2FA98150ELL;
  v5[1] = "ProjectiveShadowReceiverService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_ProjectiveShadowReceiverService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_ProjectiveShadowReceiverService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ProjectiveShadowReceiverService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ProjectiveShadowReceiverService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ProjectiveShadowReceiverService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ProjectiveShadowReceiverService>, this);
}

re::VideoBufferInfo *re::VideoBufferInfo::VideoBufferInfo(re::VideoBufferInfo *this, CVPixelBufferRef pixelBuffer)
{
  re::PeerVideoStreamingUtils *PixelFormatType;
  uint64_t v5;

  *(_QWORD *)this = CVPixelBufferGetWidth(pixelBuffer);
  *((_QWORD *)this + 1) = CVPixelBufferGetHeight(pixelBuffer);
  PixelFormatType = (re::PeerVideoStreamingUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
  re::PeerVideoStreamingUtils::mtlPixelFormatFromCVPixelFormat(PixelFormatType, v5);
  *((_DWORD *)this + 4) = 80;
  return this;
}

uint64_t re::PeerVideoStreamingUtils::mtlPixelFormatFromCVPixelFormat(re::PeerVideoStreamingUtils *this, uint64_t a2)
{
  uint64_t result;

  if ((_DWORD)this == 1111970369)
    return 80;
  re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unsupported CV pixel format %lu", "false", "mtlPixelFormatFromCVPixelFormat", 426, this);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t *re::VideoBufferInfo::debugStr@<X0>(re::VideoBufferInfo *this@<X0>, re::DynamicString *a2@<X8>)
{
  uint64_t v4;
  int v5;
  _anonymous_namespace_ *v6;
  char *v7;
  uint64_t *result;
  const char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char __s[8];

  v12 = 0;
  v13 = 0;
  v14 = 0;
  re::DynamicString::setCapacity(&v11, 0);
  v5 = *((_DWORD *)this + 4);
  if (v5)
  {
    v6 = (_anonymous_namespace_ *)re::PeerVideoStreamingUtils::cvPixelFormatFromMTLPixelFormat(v5, v4);
    strcpy(__s, "ARGB");
    re::DynamicString::operator=((re::DynamicString *)&v11, (re::DynamicString *)&v9);
    if (v9 && (v10 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v9 + 40))();
  }
  else
  {
    v9 = "Invalid";
    v10 = 7;
    re::DynamicString::operator=((re::DynamicString *)&v11, (uint64_t)&v9);
  }
  if ((v12 & 1) != 0)
    v7 = v13;
  else
    v7 = (char *)&v12 + 1;
  re::DynamicString::format((re::DynamicString *)"(Size %lux%lu, Format %s)", a2, *(_QWORD *)this, *((_QWORD *)this + 1), v7);
  result = v11;
  if (v11)
  {
    if ((v12 & 1) != 0)
      return (uint64_t *)(*(uint64_t (**)(void))(*v11 + 40))();
  }
  return result;
}

uint64_t re::PeerVideoStreamingUtils::cvPixelFormatFromMTLPixelFormat(int a1, uint64_t a2)
{
  uint64_t result;

  if ((a1 & 0xFFFFFFFE) == 0x50)
    return 1111970369;
  re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unsupported metal format: %lu", "false", "cvPixelFormatFromMTLPixelFormat", 438, a1);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::PeerVideoStreamingUtils::writeCMSampleBuffer(re::zerocopy **this, re::OPackWriter *a2, opaqueCMSampleBuffer *a3)
{
  const opaqueCMFormatDescription *FormatDescription;
  const opaqueCMFormatDescription *v7;
  unint64_t NumSamples;
  CMItemIndex i;
  size_t SampleSize;
  OpaqueCMBlockBuffer *DataBuffer;
  OpaqueCMBlockBuffer *v12;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v14 = -27;
  re::zerocopy::writeAll(*this, (re::zerocopy::WriteStream *)&v14, (char *)1);
  v15 = 8;
  re::zerocopy::writeAll(*this, (re::zerocopy::WriteStream *)&v15, (char *)1);
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  re::PeerVideoStreamingUtils::writeCMFormatDescription(this, FormatDescription, v7);
  v16 = 9;
  re::zerocopy::writeAll(*this, (re::zerocopy::WriteStream *)&v16, (char *)1);
  NumSamples = CMSampleBufferGetNumSamples(a2);
  re::OPackWriter::writeInteger(this, NumSamples);
  v17 = 10;
  re::zerocopy::writeAll(*this, (re::zerocopy::WriteStream *)&v17, (char *)1);
  re::OPackWriter::writeArrayBegin(this, NumSamples);
  if (NumSamples)
  {
    for (i = 0; i != NumSamples; ++i)
    {
      SampleSize = CMSampleBufferGetSampleSize(a2, i);
      re::OPackWriter::writeInteger(this, SampleSize);
    }
    if (NumSamples >= 0xF)
    {
      v18 = 3;
      re::zerocopy::writeAll(*this, (re::zerocopy::WriteStream *)&v18, (char *)1);
    }
  }
  v19 = 11;
  re::zerocopy::writeAll(*this, (re::zerocopy::WriteStream *)&v19, (char *)1);
  DataBuffer = CMSampleBufferGetDataBuffer(a2);
  re::PeerVideoStreamingUtils::writeCMBlockBuffer(this, DataBuffer, v12);
  v20 = 12;
  re::zerocopy::writeAll(*this, (re::zerocopy::WriteStream *)&v20, (char *)1);
  return re::OPackWriter::writeInteger(this, (uint64_t)a3);
}

uint64_t re::PeerVideoStreamingUtils::writeCMFormatDescription(re::zerocopy **this, CMFormatDescriptionRef videoDesc, const opaqueCMFormatDescription *a3)
{
  re *HEVCParameterSetAtIndex;
  int v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t result;
  size_t i;
  re *v11;
  int v12;
  NSObject *v13;
  size_t parameterSetSizeOut;
  int NALUnitHeaderLengthOut;
  size_t parameterSetCountOut;
  uint8_t buf[4];
  int v18;
  uint8_t *parameterSetPointerOut;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  parameterSetCountOut = 0;
  NALUnitHeaderLengthOut = 0;
  HEVCParameterSetAtIndex = (re *)CMVideoFormatDescriptionGetHEVCParameterSetAtIndex(videoDesc, 0, 0, 0, &parameterSetCountOut, &NALUnitHeaderLengthOut);
  if ((_DWORD)HEVCParameterSetAtIndex)
  {
    v6 = (int)HEVCParameterSetAtIndex;
    v7 = *re::peerVideoStreamingLogObjects(HEVCParameterSetAtIndex);
    HEVCParameterSetAtIndex = (re *)os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if ((_DWORD)HEVCParameterSetAtIndex)
    {
      LODWORD(parameterSetPointerOut) = 67109120;
      HIDWORD(parameterSetPointerOut) = v6;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Error getting parameter set: %d", (uint8_t *)&parameterSetPointerOut, 8u);
    }
  }
  if (NALUnitHeaderLengthOut != 4)
  {
    v8 = *re::peerVideoStreamingLogObjects(HEVCParameterSetAtIndex);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      parameterSetPointerOut = (uint8_t *)0x404000200;
      v20 = 1024;
      v21 = NALUnitHeaderLengthOut;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Expected parameter sets to use NAL header size of %d. Parameters are using %d instead.", (uint8_t *)&parameterSetPointerOut, 0xEu);
    }
  }
  result = re::OPackWriter::writeArrayBegin(this, parameterSetCountOut);
  if (parameterSetCountOut)
  {
    for (i = 0; i < parameterSetCountOut; ++i)
    {
      parameterSetPointerOut = 0;
      parameterSetSizeOut = 0;
      v11 = (re *)CMVideoFormatDescriptionGetHEVCParameterSetAtIndex(videoDesc, i, (const uint8_t **)&parameterSetPointerOut, &parameterSetSizeOut, 0, 0);
      if ((_DWORD)v11)
      {
        v12 = (int)v11;
        v13 = *re::peerVideoStreamingLogObjects(v11);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v18 = v12;
          _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Error getting parameter set, errCode: %d", buf, 8u);
        }
      }
      result = re::OPackWriter::writeData(this, (re::zerocopy::WriteStream *)parameterSetPointerOut, parameterSetSizeOut);
    }
    if (parameterSetCountOut >= 0xF)
    {
      LOBYTE(parameterSetPointerOut) = 3;
      return re::zerocopy::writeAll(*this, (re::zerocopy::WriteStream *)&parameterSetPointerOut, (char *)1);
    }
  }
  return result;
}

void re::PeerVideoStreamingUtils::writeCMBlockBuffer(re::zerocopy **this, CMBlockBufferRef theBuffer, OpaqueCMBlockBuffer *a3)
{
  size_t DataLength;
  re *v6;
  int v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  OSStatus DataPointer;
  OSStatus v12;
  re *v13;
  NSObject *v14;
  uint32_t v15;
  re *v16;
  NSObject *v17;
  char *dataPointerOut;
  size_t totalLengthOut;
  CMBlockBufferRef blockBufferOut;
  uint8_t buf[4];
  OSStatus v22;
  size_t lengthAtOffsetOut[2];

  lengthAtOffsetOut[1] = *MEMORY[0x24BDAC8D0];
  DataLength = CMBlockBufferGetDataLength(theBuffer);
  blockBufferOut = 0;
  v6 = (re *)CMBlockBufferCreateContiguous(0, theBuffer, 0, 0, 0, DataLength, 0, &blockBufferOut);
  if ((_DWORD)v6)
  {
    v7 = (int)v6;
    v8 = *re::peerVideoStreamingLogObjects(v6);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(lengthAtOffsetOut[0]) = 67109120;
      HIDWORD(lengthAtOffsetOut[0]) = v7;
      v9 = "Error creating contiguous CMSampleBuffer, errCode: %d";
      v10 = (uint8_t *)lengthAtOffsetOut;
LABEL_7:
      v14 = v8;
      v15 = 8;
LABEL_8:
      _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, v9, v10, v15);
    }
  }
  else
  {
    lengthAtOffsetOut[0] = 0;
    dataPointerOut = 0;
    totalLengthOut = 0;
    DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
    if (DataPointer)
    {
      v12 = DataPointer;
      CFRelease(blockBufferOut);
      v8 = *re::peerVideoStreamingLogObjects(v13);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v22 = v12;
        v9 = "Error getting CMSampleBuffer data pointer, errCode: %d";
        v10 = buf;
        goto LABEL_7;
      }
    }
    else if (lengthAtOffsetOut[0] == totalLengthOut)
    {
      re::OPackWriter::writeData(this, (re::zerocopy::WriteStream *)dataPointerOut, lengthAtOffsetOut[0]);
      CFRelease(blockBufferOut);
    }
    else
    {
      CFRelease(blockBufferOut);
      v17 = *re::peerVideoStreamingLogObjects(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v9 = "Expected lengthAtOffset == totalLength because buffer is contiguous.";
        v10 = buf;
        v14 = v17;
        v15 = 2;
        goto LABEL_8;
      }
    }
  }
}

BOOL re::PeerVideoStreamingUtils::readCMSampleBuffer(re::PeerVideoStreamingUtils *this, re::OPackReader *a2, CMTimeValue *a3, opaqueCMSampleBuffer **a4, unint64_t *a5)
{
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  OpaqueCMBlockBuffer *v12;
  CMItemCount v13;
  uint64_t v14;
  CMItemCount v15;
  int v16;
  uint64_t v17;
  const size_t *v18;
  const uint8_t *const *v19;
  size_t v20;
  int v21;
  uint64_t v22;
  _anonymous_namespace_ *v23;
  uint64_t v24;
  char v25;
  OpaqueCMBlockBuffer *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  re *v31;
  int v32;
  OSStatus v33;
  re *v34;
  int v35;
  NSObject *v36;
  int64_t v37;
  CMTime *v38;
  int v39;
  uint64_t v40;
  const CMSampleTimingInfo *v41;
  CMSampleTimingInfo *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  OSStatus v46;
  re *v47;
  NSObject *v48;
  const char *v49;
  OSStatus v50;
  re *v51;
  NSObject *v52;
  opaqueCMSampleBuffer **v55;
  re::OPackReader *v56;
  CMBlockBufferRef destinationBuffer[2];
  _BYTE v58[32];
  __int128 v59;
  CMTimeEpoch v60;
  _QWORD v61[2];
  CMItemCount v62;
  int v63;
  const size_t *sampleSizeArray;
  CMFormatDescriptionRef formatDescriptionOut;
  uint8_t v66[4];
  OSStatus v67;
  CMTime buf;
  uint8_t v69[8];
  uint64_t v70;
  uint64_t v71;
  int v72;
  const CMSampleTimingInfo *v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  if (!re::OPackReader::next(this, (uint64_t)a2) || *((_BYTE *)this + 196) != 13)
    return v10;
  v56 = a2;
  sampleSizeArray = 0;
  formatDescriptionOut = 0;
  v61[1] = 0;
  v62 = 0;
  v61[0] = 0;
  v63 = 0;
  v12 = 0;
  if (!re::OPackReader::next(this, v9))
  {
    v13 = 0;
    goto LABEL_64;
  }
  v13 = 0;
  if (*((_BYTE *)this + 196) != 6)
  {
LABEL_64:
    if (*((_BYTE *)this + 184) != 5)
      goto LABEL_83;
    v73 = 0;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v59 = *MEMORY[0x24BDC0D40];
    v60 = *(_QWORD *)(MEMORY[0x24BDC0D40] + 16);
    CMTimeMake((CMTime *)destinationBuffer, 1, 90);
    v37 = (*(_QWORD *)v56)++;
    v38 = CMTimeMake(&buf, v37, 90);
    *(CMTime *)&v58[8] = buf;
    re::DynamicArray<CMSampleTimingInfo>::setCapacity(v69, 1uLL);
    v39 = v72;
    v40 = v71;
    v41 = v73;
    v42 = (CMSampleTimingInfo *)&v73[v71];
    *(_OWORD *)&v42->duration.value = *(_OWORD *)destinationBuffer;
    v43 = v59;
    v44 = *(_OWORD *)&v58[16];
    v45 = *(_OWORD *)v58;
    v42->decodeTimeStamp.epoch = v60;
    *(_OWORD *)&v42->presentationTimeStamp.timescale = v44;
    *(_OWORD *)&v42->decodeTimeStamp.value = v43;
    *(_OWORD *)&v42->duration.epoch = v45;
    v71 = v40 + 1;
    v72 = v39 + 2;
    buf.value = 0;
    v46 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v12, 1u, 0, 0, formatDescriptionOut, v13, v40 + 1, v41, v62, sampleSizeArray, (CMSampleBufferRef *)&buf);
    v10 = v46 == 0;
    v47 = formatDescriptionOut;
    if (v46)
    {
      if (formatDescriptionOut)
        CFRelease(formatDescriptionOut);
      if (v12)
        CFRelease(v12);
      v48 = *re::peerVideoStreamingLogObjects(v47);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v66 = 67109120;
        v67 = v46;
        _os_log_error_impl(&dword_224FE9000, v48, OS_LOG_TYPE_ERROR, "Failed to create CMSampleBuffer, errCode: %d", v66, 8u);
      }
    }
    else
    {
      if (formatDescriptionOut)
        CFRelease(formatDescriptionOut);
      if (v12)
        CFRelease(v12);
      *a3 = buf.value;
    }
    if (*(_QWORD *)v69 && v73)
      (*(void (**)(void))(**(_QWORD **)v69 + 40))();
    goto LABEL_84;
  }
  v13 = 0;
  v12 = 0;
  v55 = a4;
  while (2)
  {
    switch(*((_BYTE *)this + 224))
    {
      case 0:
        v10 = 0;
        if (!re::OPackReader::next(this, v11) || *((_BYTE *)this + 196) != 12)
          goto LABEL_84;
        v15 = v13;
        *(_QWORD *)&v58[16] = 0;
        destinationBuffer[1] = 0;
        *(_QWORD *)v58 = 0;
        destinationBuffer[0] = 0;
        *(_DWORD *)&v58[8] = 0;
        v73 = 0;
        v70 = 0;
        v71 = 0;
        *(_QWORD *)v69 = 0;
        v72 = 0;
        v16 = re::OPackReader::next(this, v14);
        v18 = 0;
        if (v16)
        {
          v19 = 0;
          v20 = 0;
          if (*((_BYTE *)this + 184) != 3)
          {
            v21 = 0;
            v22 = 0;
            v20 = 0;
            do
            {
              *((_BYTE *)this + 2) = 1;
              v23 = (_anonymous_namespace_ *)re::OPackReader::next(this, v17);
              v25 = 0;
              if (!(_DWORD)v23 || *((_BYTE *)this + 196) != 11)
                goto LABEL_53;
              if ((CMBlockBufferRef)v20 >= destinationBuffer[1])
              {
                v26 = (OpaqueCMBlockBuffer *)(v20 + 1);
                if (destinationBuffer[1] < v26)
                {
                  if (destinationBuffer[0])
                  {
                    v27 = 8;
                    if (destinationBuffer[1])
                      v27 = 2 * (uint64_t)destinationBuffer[1];
                    if (v27 <= (unint64_t)v26)
                      v28 = (unint64_t)v26;
                    else
                      v28 = v27;
                    re::DynamicArray<float *>::setCapacity(destinationBuffer, v28);
                    v21 = *(_DWORD *)&v58[8];
                  }
                  else
                  {
                    re::DynamicArray<float *>::setCapacity(destinationBuffer, (unint64_t)v26);
                    v21 = *(_DWORD *)&v58[8] + 1;
                  }
                }
                v20 = *(_QWORD *)v58;
                v22 = *(_QWORD *)&v58[16];
              }
              *(_QWORD *)(v22 + 8 * v20++) = *((_QWORD *)this + 26);
              *(_QWORD *)v58 = v20;
              *(_DWORD *)&v58[8] = ++v21;
              re::DynamicArray<unsigned long>::add(v69, (_QWORD *)this + 27);
            }
            while (re::OPackReader::next(this, v29) && *((_BYTE *)this + 184) != 3);
            v19 = *(const uint8_t *const **)&v58[16];
            v18 = (const size_t *)v73;
          }
        }
        else
        {
          v19 = 0;
          v20 = 0;
        }
        v34 = (re *)CMVideoFormatDescriptionCreateFromHEVCParameterSets(0, v20, v19, v18, 4, 0, &formatDescriptionOut);
        if ((_DWORD)v34)
        {
          v35 = (int)v34;
          v36 = *re::peerVideoStreamingLogObjects(v34);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.value) = 67109120;
            HIDWORD(buf.value) = v35;
            _os_log_error_impl(&dword_224FE9000, v36, OS_LOG_TYPE_ERROR, "Error creating format description from parameters, errCode: %d", (uint8_t *)&buf, 8u);
          }
          v25 = 0;
        }
        else
        {
          v25 = 1;
        }
LABEL_53:
        if (*(_QWORD *)v69)
        {
          v24 = (uint64_t)v73;
          if (v73)
            (*(void (**)(_QWORD))(**(_QWORD **)v69 + 40))(*(_QWORD *)v69);
        }
        v13 = v15;
        if (destinationBuffer[0])
        {
          v24 = *(_QWORD *)&v58[16];
          if (*(_QWORD *)&v58[16])
            (*(void (**)(void))(*(_QWORD *)destinationBuffer[0] + 40))();
        }
        a4 = v55;
        if ((v25 & 1) != 0)
          goto LABEL_60;
        goto LABEL_83;
      case 1:
        v10 = 0;
        if (!re::OPackReader::next(this, v11) || *((_BYTE *)this + 196) != 6)
          goto LABEL_84;
        v13 = *((_QWORD *)this + 28);
        goto LABEL_60;
      case 2:
        v10 = 0;
        if (!re::OPackReader::next(this, v11) || *((_BYTE *)this + 196) != 12)
          goto LABEL_84;
        while (2)
        {
          if (!re::OPackReader::next(this, v30) || *((_BYTE *)this + 184) == 3)
            goto LABEL_60;
          *((_BYTE *)this + 2) = 1;
          v10 = 0;
          if (re::OPackReader::next(this, v24) && *((_BYTE *)this + 196) == 6)
          {
            destinationBuffer[0] = *((CMBlockBufferRef *)this + 28);
            re::DynamicArray<unsigned long>::add(v61, destinationBuffer);
            continue;
          }
          goto LABEL_84;
        }
      case 3:
        v10 = 0;
        if (!re::OPackReader::next(this, v11) || *((_BYTE *)this + 196) != 11)
          goto LABEL_84;
        destinationBuffer[0] = 0;
        v31 = (re *)CMBlockBufferCreateWithMemoryBlock(0, 0, *((_QWORD *)this + 27), 0, 0, 0, *((_QWORD *)this + 27), 1u, destinationBuffer);
        v32 = (int)v31;
        if (destinationBuffer[0] && !(_DWORD)v31)
        {
          v33 = CMBlockBufferReplaceDataBytes(*((const void **)this + 26), destinationBuffer[0], 0, *((_QWORD *)this + 27));
          v12 = destinationBuffer[0];
          if (v33)
          {
            v50 = v33;
            CFRelease(destinationBuffer[0]);
            v52 = *re::peerVideoStreamingLogObjects(v51);
            if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v69 = 67109120;
              *(_DWORD *)&v69[4] = v50;
              v49 = "Failed to copy data to block buffer, errCode: %d";
LABEL_89:
              _os_log_error_impl(&dword_224FE9000, v52, OS_LOG_TYPE_ERROR, v49, v69, 8u);
            }
            goto LABEL_83;
          }
LABEL_60:
          if (!re::OPackReader::next(this, v24) || *((_BYTE *)this + 196) != 6)
            goto LABEL_64;
          continue;
        }
        v52 = *re::peerVideoStreamingLogObjects(v31);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v69 = 67109120;
          *(_DWORD *)&v69[4] = v32;
          v49 = "Failed to create block buffer, errCode: %d";
          goto LABEL_89;
        }
LABEL_83:
        v10 = 0;
LABEL_84:
        if (v61[0] && sampleSizeArray)
          (*(void (**)(void))(*(_QWORD *)v61[0] + 40))();
        return v10;
      case 4:
        v10 = 0;
        if (!re::OPackReader::next(this, v11) || *((_BYTE *)this + 196) != 6)
          goto LABEL_84;
        *a4 = (opaqueCMSampleBuffer *)*((_QWORD *)this + 28);
        goto LABEL_60;
      default:
        goto LABEL_83;
    }
  }
}

_QWORD *re::DynamicArray<CMSampleTimingInfo>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x48uLL))
        {
          v2 = 72 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 72 * a2, 4);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 72 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 72, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<CMSampleTimingInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_ReverbComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_237);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_237))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410E0A8, 0);
    *(uint64_t *)((char *)&qword_25410E0B8 + 6) = 0;
    qword_25410E0B8 = 0;
    qword_25410E0C8 = 0;
    qword_25410E0D0 = 0xFFFFFFFFLL;
    qword_25410E0A8 = (uint64_t)&off_24ED7DAA8;
    qword_25410E0D8 = (uint64_t)"ReverbComponent";
    dword_25410E0E0 = 0;
    unk_25410E0E8 = 0u;
    unk_25410E0F8 = 0u;
    unk_25410E108 = 0u;
    qword_25410E118 = 0;
    __cxa_guard_release(&_MergedGlobals_237);
  }
  return &qword_25410E0A8;
}

void re::ecs2::initInfo_ReverbComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  uint64_t *v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[2];
  __int128 v23;

  v22[0] = 0x53A499A3A873EE56;
  v22[1] = "ReverbComponent";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  v4 = atomic_load((unsigned __int8 *)&qword_25410E078);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410E078);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410E088 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_uint16_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "priority";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2A00000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410E090 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "allowSpaceBlendingWithReverbPreset";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x2800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25410E098 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_ReverbPreset((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "reverbPreset";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x2000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25410E0A0 = v20;
      __cxa_guard_release(&qword_25410E078);
    }
  }
  *((_QWORD *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25410E088;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ReverbComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ReverbComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ReverbComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ReverbComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v21 = v23;
}

void re::internal::defaultConstruct<re::ecs2::ReverbComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED649A8;
  *(_QWORD *)(v3 + 32) = -1;
  *(_BYTE *)(v3 + 40) = 1;
  *(_WORD *)(v3 + 42) = 1;
}

uint64_t re::internal::defaultDestruct<re::ecs2::ReverbComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::ReverbComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED649A8;
  *(_QWORD *)(v1 + 32) = -1;
  *(_BYTE *)(v1 + 40) = 1;
  *(_WORD *)(v1 + 42) = 1;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ReverbComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ReverbComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ReverbComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ReverbComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ReverbComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ReverbComponent>, this);
}

uint64_t *re::ecs2::allocInfo_ReverbSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410E080);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410E080))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410E120, 0);
    *(uint64_t *)((char *)&qword_25410E130 + 6) = 0;
    qword_25410E130 = 0;
    qword_25410E140 = 0;
    qword_25410E148 = 0xFFFFFFFFLL;
    qword_25410E120 = (uint64_t)&off_24ED7DAA8;
    qword_25410E150 = (uint64_t)"ReverbSystem";
    dword_25410E158 = 0;
    xmmword_25410E160 = 0u;
    unk_25410E170 = 0u;
    xmmword_25410E180 = 0u;
    qword_25410E190 = 0;
    __cxa_guard_release(&qword_25410E080);
  }
  return &qword_25410E120;
}

void re::ecs2::initInfo_ReverbSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x3C372182C9CAED82;
  v5[1] = "ReverbSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x17800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_ReverbSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ReverbSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ReverbSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::ReverbSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::ReverbSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ReverbSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ReverbSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::ReverbSystem *re::internal::defaultConstruct<re::ecs2::ReverbSystem>(int a1, int a2, re::ecs2::ReverbSystem *this)
{
  return re::ecs2::ReverbSystem::ReverbSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::ReverbSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 17);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::ReverbSystem>(_QWORD *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 17);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ReverbSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ReverbSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ReverbSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ReverbSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ReverbSystem>, this);
}

void re::ecs2::ReverbComponent::~ReverbComponent(re::ecs2::ReverbComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ReverbComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  re *v18;
  NSObject *v19;
  re::ecs2::Entity *v22;
  NSObject *v23;
  char *v24;
  uint64_t v25;
  _QWORD v26[3];
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a3 + 8);
  if (!v5)
    return 0;
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, *(_QWORD *)(a3 + 8));
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v25, a5, 0);
    v27 = a4;
    v28 = v25;
    v29 = v26[0];
    if (v25 != a5 || LOWORD(v26[0]) != 0xFFFFLL || (v26[0] & 0xFFFF0000) != 4294901760)
    {
      do
      {
        v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v28);
        v15 = *(_QWORD *)v14;
        if (*(_QWORD *)(*(_QWORD *)v14 + 16))
        {
          v16 = v27;
          v17 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v28);
          v18 = (re *)re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v16, v17, *(_QWORD *)(a3 + 48));
          v19 = *re::audioLogObjects(v18);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            v22 = *(re::ecs2::Entity **)(v15 + 16);
            v23 = v19;
            re::ecs2::Entity::debugDescription(v22, (re::DynamicString *)&v25);
            v24 = (char *)v26 + 1;
            if ((v26[0] & 1) != 0)
              v24 = (char *)v26[1];
            *(_DWORD *)buf = 134218242;
            v31 = v15;
            v32 = 2080;
            v33 = v24;
            _os_log_debug_impl(&dword_224FE9000, v23, OS_LOG_TYPE_DEBUG, "[RE/ECS] [Update] ReverbComponentStateImpl::processDirtyComponents: setting state to 'updating' for ReverbComponent %p on entity %s", buf, 0x16u);

            if (v25 && (v26[0] & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v25 + 40))();
          }
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v28);
      }
      while (v28 != a5 || (unsigned __int16)v29 != 0xFFFF || WORD1(v29) != 0xFFFF);
    }
    if (*(_QWORD *)(a1 + 16) && v11)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 544))(v11))
        re::ecs2::ReverbSystem::updateLatestReverbPresetState(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104), v5, 0, 0);
    }
    return *(_DWORD *)(a5 + 40) != 0;
  }
  return result;
}

void re::ecs2::ReverbSystem::updateLatestReverbPresetState(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  re::ecs2::NetworkComponent *v25;
  _BOOL4 v26;
  re *v27;
  NSObject *v28;
  const char *v29;
  NSObject *v30;
  uint32_t v31;
  uint64_t v32;
  re *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint8_t buf[4];
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (a2)
    {
      v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 104) + 272) >> 1;
        v10 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        v11 = *(_QWORD *)(v10 + 24);
        if (!v11)
        {
LABEL_28:
          v27 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 456))(v8, v9, -1, 1);
          v28 = *re::audioLogObjects(v27);
          if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            return;
          *(_WORD *)buf = 0;
          v29 = "[RE/ECS] [Update] Set sceneID to default reverbPreset with no valid reverb components in scene.";
          v30 = v28;
          v31 = 2;
          goto LABEL_32;
        }
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v16 = *(uint64_t **)(v10 + 40);
        v17 = &v16[v11];
        v36 = v9;
        v18 = 1;
        v35 = v8;
LABEL_6:
        v37 = v13;
        v19 = v14;
        v20 = v15;
        do
        {
          v21 = *v16;
          v22 = *(_QWORD *)(*v16 + 16);
          if (v22 && (*(_BYTE *)(v22 + 288) & 1) != 0)
          {
            if (!a4)
              goto LABEL_15;
            v23 = 8 * a4;
            v24 = a3;
            while (*v24 != v21)
            {
              ++v24;
              v23 -= 8;
              if (!v23)
              {
                v24 = &a3[a4];
                break;
              }
            }
            if (a4 == v24 - a3)
            {
LABEL_15:
              v25 = *(re::ecs2::NetworkComponent **)(v22 + 200);
              if (v25)
                LODWORD(v25) = re::ecs2::NetworkComponent::owningProcessType(v25);
              v15 = *(_QWORD *)(v21 + 32);
              v14 = *(unsigned __int16 *)(v21 + 42);
              v13 = *(_BYTE *)(v21 + 40);
              if ((v18 & 1) != 0)
              {
                v18 = 0;
                v12 = (_DWORD)v25 == 0;
                ++v16;
                v8 = v35;
                v9 = v36;
                if (v16 != v17)
                  goto LABEL_6;
                goto LABEL_30;
              }
              v26 = v19 == v14;
              if (v25 | v12)
                v26 = 0;
              if (v19 < v14 || v26)
              {
                v12 = (_DWORD)v25 == 0;
                v37 = *(_BYTE *)(v21 + 40);
                v19 = *(unsigned __int16 *)(v21 + 42);
                v20 = *(_QWORD *)(v21 + 32);
              }
            }
          }
          ++v16;
        }
        while (v16 != v17);
        v13 = v37;
        v15 = v20;
        v8 = v35;
        v9 = v36;
        if ((v18 & 1) != 0)
          goto LABEL_28;
LABEL_30:
        v32 = v13 & 1;
        v33 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 456))(v8, v9, v15, v32);
        v34 = *re::audioLogObjects(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218496;
          v39 = v9;
          v40 = 2048;
          v41 = v15;
          v42 = 1024;
          v43 = v32;
          v29 = "[RE/ECS] [Update] Set sceneID %llu with reverbPreset %lld and allowSpaceBlending %d";
          v30 = v34;
          v31 = 28;
LABEL_32:
          _os_log_impl(&dword_224FE9000, v30, OS_LOG_TYPE_DEFAULT, v29, buf, v31);
        }
      }
    }
  }
}

uint64_t re::ecs2::ReverbSystem::willAddSystemToECSService(re::ecs2::ReverbSystem *this)
{
  uint64_t result;
  uint64_t v3;

  result = *((_QWORD *)this + 5);
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    result = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v3);
    *((_QWORD *)this + 13) = result;
    *((_QWORD *)this + 15) = result;
  }
  return result;
}

uint64_t re::ecs2::ReverbSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(_QWORD *)(this + 104) = 0;
  *(_QWORD *)(this + 120) = 0;
  return this;
}

void re::ecs2::ReverbSystem::willAddSceneToECSService(re::ecs2::ReverbSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  int v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  re::ecs2::System *v47;
  re::ecs2::Scene *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return;
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(_QWORD *)&v50 = this;
  *((_QWORD *)&v50 + 1) = re::ecs2::ReverbSystem::activateComponents;
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::createSubscription<re::ecs2::ReverbSystem>(re::ecs2::ReverbSystem *,REEventHandlerResult (re::ecs2::ReverbSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Slice<re::ecs2::ReverbComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::Subscription const&,re::Slice<re::ecs2::ReverbComponent*>&&)#1}::__invoke;
  re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 216), (uint64_t)&v50);
  *(_QWORD *)&v50 = this;
  *((_QWORD *)&v50 + 1) = re::ecs2::ReverbSystem::deactivateComponents;
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::createSubscription<re::ecs2::ReverbSystem>(re::ecs2::ReverbSystem *,REEventHandlerResult (re::ecs2::ReverbSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Slice<re::ecs2::ReverbComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::Subscription const&,re::Slice<re::ecs2::ReverbComponent*>&&)#1}::__invoke;
  re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)&v50);
  v48 = a2;
  v5 = *((_QWORD *)this + 33);
  v6 = *((_DWORD *)this + 68);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)((char *)this + 280);
    else
      v7 = (_QWORD *)*((_QWORD *)this + 36);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_18;
    }
    goto LABEL_17;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)((char *)this + 280);
    if (!v5)
      goto LABEL_18;
  }
  else
  {
    v8 = (uint64_t *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_18;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (!v10)
  {
LABEL_18:
    v57 = 0u;
    v50 = 0u;
    *(_QWORD *)&v51 = 0;
    *((_QWORD *)&v51 + 1) = -1;
    v52 = 0u;
    v53 = 0u;
    v54 = 0;
    v55 = 1;
    v56 = 0uLL;
    v16 = *((_QWORD *)this + 22);
    *(_QWORD *)&v57 = 0;
    v17 = *((_QWORD *)this + 18);
    DWORD2(v57) = 0;
    if (v16 + 1 > 4 * v17)
    {
      re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 17, (v16 + 4) >> 2);
      v17 = *((_QWORD *)this + 18);
    }
    if (v17 <= v16 >> 2)
    {
      v49 = 0;
      memset(v66, 0, sizeof(v66));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 858;
      v62 = 2048;
      v63 = v16 >> 2;
      v64 = 2048;
      v65 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      if ((*((_BYTE *)this + 152) & 1) != 0)
        v18 = (char *)this + 160;
      else
        v18 = (char *)*((_QWORD *)this + 21);
      v19 = *(_QWORD *)&v18[8 * (v16 >> 2)];
      ++*((_QWORD *)this + 22);
      ++*((_DWORD *)this + 46);
      v20 = v19 + 112 * (v16 & 3);
      v21 = v50;
      v22 = v51;
      v23 = v52;
      *(_QWORD *)(v20 + 48) = v53;
      *(_OWORD *)(v20 + 16) = v22;
      *(_OWORD *)(v20 + 32) = v23;
      *(_OWORD *)v20 = v21;
      re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v20 + 56, (uint64_t)&v53 + 8);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v50);
      v25 = *((_QWORD *)this + 22);
      if (v25)
      {
        v26 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 136, v25 - 1);
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::init(v26, (uint64_t)this + 136, (uint64_t)v48);
        *(_QWORD *)&v66[0] = *((_QWORD *)this + 22) - 1;
        re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::ReverbSystem *)((char *)this + 192), &v48, (uint64_t *)v66);
        v27 = *((_QWORD *)this + 22);
        v28 = *((_QWORD *)this + 37);
        if ((v27 & 0x3F) != 0)
          v29 = (v27 >> 6) + 1;
        else
          v29 = v27 >> 6;
        *((_QWORD *)this + 37) = v27;
        *(_QWORD *)&v50 = 0;
        re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::ReverbSystem *)((char *)this + 256), v29, &v50);
        if (v27 && v28 > v27)
        {
          v30 = 63;
          v31 = *((_QWORD *)this + 37) & 0x3FLL;
          if (v31 && v31 != 63)
            v30 = ~(-1 << v31);
          if ((*((_BYTE *)this + 272) & 1) != 0)
            v32 = (char *)this + 280;
          else
            v32 = (char *)*((_QWORD *)this + 36);
          *(_QWORD *)&v32[8 * *((_QWORD *)this + 33) - 8] &= v30;
        }
        v33 = *((_QWORD *)this + 22);
        v34 = *((_QWORD *)this + 43);
        if ((v33 & 0x3F) != 0)
          v35 = (v33 >> 6) + 1;
        else
          v35 = v33 >> 6;
        *((_QWORD *)this + 43) = v33;
        *(_QWORD *)&v50 = 0;
        re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::ReverbSystem *)((char *)this + 304), v35, &v50);
        if (v33 && v34 > v33)
        {
          v36 = 63;
          v37 = *((_QWORD *)this + 43) & 0x3FLL;
          if (v37 && v37 != 63)
            v36 = ~(-1 << v37);
          if ((*((_BYTE *)this + 320) & 1) != 0)
            v38 = (char *)this + 328;
          else
            v38 = (char *)*((_QWORD *)this + 42);
          *(_QWORD *)&v38[8 * *((_QWORD *)this + 39) - 8] &= v36;
        }
        v15 = *(_QWORD *)&v66[0];
        v14 = (char *)this + 304;
        goto LABEL_50;
      }
    }
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768, v48, v49);
    _os_crash();
    __break(1u);
  }
LABEL_17:
  *(_QWORD *)&v50 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 256, 0);
  v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 136, v50);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::init(v13, (uint64_t)this + 136, (uint64_t)a2);
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::ReverbSystem *)((char *)this + 192), &v48, (uint64_t *)&v50);
  re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 256, v50);
  v14 = (char *)this + 304;
  v15 = v50;
LABEL_50:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v14, v15);
  if (!*((_BYTE *)this + 368))
    return;
  v39 = *((_QWORD *)this + 39);
  v40 = *((_DWORD *)this + 80);
  if (v39 >= 0xB)
  {
    if ((v40 & 1) != 0)
      v41 = (_QWORD *)((char *)this + 328);
    else
      v41 = (_QWORD *)*((_QWORD *)this + 42);
    v43 = 8 * v39;
    while (!*v41)
    {
      ++v41;
      v43 -= 8;
      if (!v43)
        return;
    }
LABEL_66:
    v47 = (re::ecs2::System *)*((_QWORD *)this + 44);
    if (!*((_BYTE *)v47 + 86))
      re::ecs2::System::queueToRun(v47, 0.0);
    return;
  }
  if ((v40 & 1) != 0)
  {
    v42 = (uint64_t *)((char *)this + 328);
    if (!v39)
      return;
  }
  else
  {
    v42 = (uint64_t *)*((_QWORD *)this + 42);
    if (!v39)
      return;
  }
  v44 = 0;
  v45 = 8 * v39;
  do
  {
    v46 = *v42++;
    v44 |= v46;
    v45 -= 8;
  }
  while (v45);
  if (v44)
    goto LABEL_66;
}

uint64_t re::ecs2::ReverbSystem::activateComponents(re *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v5 = 8 * a4;
    do
    {
      v6 = *a3;
      v7 = *(_QWORD *)(*a3 + 16);
      v8 = (id)*re::audioLogObjects(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        if (v7)
        {
          v9 = *(const char **)(v7 + 280);
          v10 = *(_QWORD *)(v7 + 296);
        }
        else
        {
          v10 = 0;
          v9 = "(null)";
        }
        v11 = *(_QWORD *)(v6 + 32);
        v12 = *(unsigned __int8 *)(v6 + 40);
        v13 = *(unsigned __int16 *)(v6 + 42);
        *(_DWORD *)buf = 136316162;
        v16 = v9;
        v17 = 2048;
        v18 = v10;
        v19 = 1024;
        v20 = v11;
        v21 = 1024;
        v22 = v12;
        v23 = 1024;
        v24 = v13;
        _os_log_impl(&dword_224FE9000, v8, OS_LOG_TYPE_DEFAULT, "ReverbSystem::activateComponents() ReverbComponent activating, name='%s', entityId=%llu, preset=%d, allowSpaceBlending=%d, priority=%d", buf, 0x28u);
      }

      ++a3;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t re::ecs2::ReverbSystem::deactivateComponents(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t **v27;
  BOOL v28;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v31 = 0;
  v32 = 0;
  v30 = &v31;
  if (a4)
  {
    v6 = a1;
    v7 = &a3[a4];
    v8 = a3;
    do
    {
      v9 = *v8;
      v10 = *(_QWORD **)(*v8 + 16);
      v11 = (id)*re::audioLogObjects((re *)a1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        if (v10)
        {
          v12 = (const char *)v10[35];
          v13 = v10[37];
        }
        else
        {
          v13 = 0;
          v12 = "(null)";
        }
        v14 = *(_QWORD *)(v9 + 32);
        v15 = *(unsigned __int8 *)(v9 + 40);
        v16 = *(unsigned __int16 *)(v9 + 42);
        *(_DWORD *)buf = 136316162;
        v34 = v12;
        v35 = 2048;
        v36 = v13;
        v37 = 1024;
        v38 = v14;
        v39 = 1024;
        v40 = v15;
        v41 = 1024;
        v42 = v16;
        _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "ReverbSystem::deactivateComponents() ReverbComponent deactivating, name='%s', entityId=%llu, preset=%d, allowSpaceBlending=%d, priority=%d", buf, 0x28u);
      }

      do
      {
        v17 = v10;
        v10 = (_QWORD *)v10[3];
      }
      while (v10);
      v18 = v17[2];
      v19 = v31;
      v20 = &v31;
      v21 = &v31;
      if (v31)
      {
        while (1)
        {
          while (1)
          {
            v21 = (uint64_t **)v19;
            v22 = v19[4];
            if (v22 <= v18)
              break;
            v19 = *v21;
            v20 = v21;
            if (!*v21)
              goto LABEL_17;
          }
          if (v22 >= v18)
            break;
          v19 = v21[1];
          if (!v19)
          {
            v20 = v21 + 1;
            goto LABEL_17;
          }
        }
      }
      else
      {
LABEL_17:
        v23 = (uint64_t *)operator new(0x28uLL);
        v23[4] = v18;
        *v23 = 0;
        v23[1] = 0;
        v23[2] = (uint64_t)v21;
        *v20 = v23;
        if (*v30)
        {
          v30 = (uint64_t **)*v30;
          v24 = *v20;
        }
        else
        {
          v24 = v23;
        }
        a1 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v31, v24);
        ++v32;
      }
      ++v8;
    }
    while (v8 != v7);
    v25 = (uint64_t *)v30;
    if (v30 != &v31)
    {
      do
      {
        re::ecs2::ReverbSystem::updateLatestReverbPresetState(v6[13], v25[4], a3, a4);
        v26 = (uint64_t *)v25[1];
        if (v26)
        {
          do
          {
            v27 = (uint64_t **)v26;
            v26 = (uint64_t *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = (uint64_t **)v25[2];
            v28 = *v27 == v25;
            v25 = (uint64_t *)v27;
          }
          while (!v28);
        }
        v25 = (uint64_t *)v27;
      }
      while (v27 != &v31);
    }
  }
  std::__tree<re::ecs2::Scene *>::destroy(v31);
  return 0;
}

uint64_t re::ecs2::ReverbSystem::willRemoveSceneFromECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  re::ecs2::ComponentBucketsBase *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = this;
    v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(_QWORD *)&v17 = v3;
    *((_QWORD *)&v17 + 1) = re::ecs2::ReverbSystem::activateComponents;
    v18 = 0;
    v19 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::createSubscription<re::ecs2::ReverbSystem>(re::ecs2::ReverbSystem *,REEventHandlerResult (re::ecs2::ReverbSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Slice<re::ecs2::ReverbComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::Subscription const&,re::Slice<re::ecs2::ReverbComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 216, &v17);
    *(_QWORD *)&v17 = v3;
    *((_QWORD *)&v17 + 1) = re::ecs2::ReverbSystem::deactivateComponents;
    v18 = 0;
    v19 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::createSubscription<re::ecs2::ReverbSystem>(re::ecs2::ReverbSystem *,REEventHandlerResult (re::ecs2::ReverbSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Slice<re::ecs2::ReverbComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::Subscription const&,re::Slice<re::ecs2::ReverbComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v17);
    *(_QWORD *)&v17 = a2;
    v5 = (uint64_t *)(v3 + 192);
    this = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v3 + 192), &v17);
    if (this != -1)
    {
      v6 = *(_QWORD *)(v3 + 200) + 16 * this;
      re::DynamicBitset<unsigned long long,256ul>::setBit(v3 + 256, *(_QWORD *)(v6 + 8));
      re::DynamicBitset<unsigned long long,64ul>::clearBit(v3 + 304, *(_QWORD *)(v6 + 8));
      v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v3 + 136, *(_QWORD *)(v6 + 8));
      if (*v7)
      {
        v8 = v7;
        *v7 = 0;
        v9 = v7 + 1;
        v10 = *(_QWORD *)(v7[1] + 288);
        if (v10)
        {
          v11 = v7[12];
          if (v11)
          {
            for (i = 0; i != v11; ++i)
            {
              v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v8 + 7), i);
              re::EventBus::unsubscribe(v10, *(_QWORD *)v13, *(_QWORD *)(v13 + 8));
            }
          }
        }
        re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v8 + 7));
        v14 = 0;
        v15 = v8 + 3;
        do
        {
          v16 = (re::ecs2::ComponentBucketsBase *)v8[2];
          if (*(_QWORD *)v16)
            re::ecs2::ComponentBucketsBase::removeBucket(v16, v15[v14]);
          v15[v14++] = -1;
        }
        while (v14 != 4);
        *v9 = 0;
        v9[1] = 0;
      }
      return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v5, &v17);
    }
  }
  return this;
}

uint64_t re::ecs2::ReverbSystem::update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  re::ecs2::System *v24;
  _BYTE v25[16];
  uint64_t v26[2];
  _QWORD v27[2];
  uint64_t v28;

  v27[0] = a3;
  v27[1] = a4;
  if (a2)
  {
    v4 = result;
    if (*(_QWORD *)(result + 104))
    {
      re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v26);
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v25, 3148, v4);
      v28 = a2;
      v6 = *(_QWORD *)(*(_QWORD *)(v4 + 200)
                     + 16
                     * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 192), &v28)+ 8);
      re::DynamicBitset<unsigned long long,64ul>::clearBit(v4 + 304, v6);
      v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4 + 136, v6);
      v8 = *(_QWORD *)(*v7 + 224);
      v9 = v7[3];
      v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
      if (*(_DWORD *)(v10 + 40))
        v11 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v8 + 24))(v8, v27, v7, v9, v10, 0);
      else
        v11 = 0;
      v12 = v7[5];
      v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
      if (*(_DWORD *)(v13 + 40))
        v11 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, v27, v7, v12, v13, 0);
      v14 = v7[6];
      v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
      if (*(_DWORD *)(v15 + 40))
      {
        if (((v11 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, v27, v7, v14, v15, 0)) & 1) == 0)goto LABEL_11;
      }
      else if (!v11)
      {
LABEL_11:
        if (*(_BYTE *)(v4 + 368))
        {
          v16 = *(_QWORD *)(v4 + 312);
          v17 = *(_DWORD *)(v4 + 320);
          if (v16 >= 0xB)
          {
            if ((v17 & 1) != 0)
              v18 = (_QWORD *)(v4 + 328);
            else
              v18 = *(_QWORD **)(v4 + 336);
            v20 = 8 * v16;
            while (!*v18)
            {
              ++v18;
              v20 -= 8;
              if (!v20)
                goto LABEL_31;
            }
LABEL_29:
            v24 = *(re::ecs2::System **)(v4 + 352);
            if (!*((_BYTE *)v24 + 86))
              re::ecs2::System::queueToRun(v24, 0.0);
            goto LABEL_31;
          }
          if ((v17 & 1) == 0)
          {
            v19 = *(uint64_t **)(v4 + 336);
            if (!v16)
              goto LABEL_31;
LABEL_26:
            v21 = 0;
            v22 = 8 * v16;
            do
            {
              v23 = *v19++;
              v21 |= v23;
              v22 -= 8;
            }
            while (v22);
            if (!v21)
              goto LABEL_31;
            goto LABEL_29;
          }
          v19 = (uint64_t *)(v4 + 328);
          if (v16)
            goto LABEL_26;
        }
LABEL_31:
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v25);
        return re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v26);
      }
      re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 304, v6);
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::ReverbComponent>::dependsOnComponents()
{
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::ReverbComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::ReverbComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::ReverbComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::ReverbSystem::~ReverbSystem(re::ecs2::ReverbSystem *this)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 17);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 17);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ReverbSystem::typeInfo(re::ecs2::ReverbSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ReverbSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ReverbSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ReverbSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ReverbSystem>, 0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

id re::internal::defaultRetain<re::ecs2::ReverbSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ReverbSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::createSubscription<re::ecs2::ReverbSystem>(re::ecs2::ReverbSystem *,REEventHandlerResult (re::ecs2::ReverbSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Slice<re::ecs2::ReverbComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::Subscription const&,re::Slice<re::ecs2::ReverbComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED64A28;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED64A80;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED64AD8;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED64B30;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED64A28;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED64A80;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED64AD8;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED64B30;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED64A28;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED64A28;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED64A80;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED64A80;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED64AD8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED64AD8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED64B30;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED64B30;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void std::__tree<re::ecs2::Scene *>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<re::ecs2::Scene *>::destroy(*a1);
    std::__tree<re::ecs2::Scene *>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t re::ecs2::RigComponentHelper::areExternalDependenciesLoadedForRigGraph(re::ecs2::RigComponentHelper *this, const re::ecs2::RigComponent *a2)
{
  re::RigGraphNode *v2;
  unint64_t v3;
  re::AssetHandle *v5;
  uint64_t v6;
  const re::AssetType *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  re::RigGraphNode *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  const char *v22;
  size_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  re::BindNode *v29[4];
  _BYTE buf[18];
  __int16 v31;
  unint64_t v32;
  __int16 v33;
  re::RigGraphNode *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v5 = (re::ecs2::RigComponentHelper *)((char *)this + 32);
  v6 = *((_QWORD *)this + 5);
  if (v6)
    v7 = *(const re::AssetType **)(v6 + 264);
  else
    v7 = 0;
  v8 = (_QWORD *)re::AssetHandle::assetWithType(v5, v7, 0);
  re::makeBindNode(*((re **)this + 2), (uint64_t)v29);
  v9 = 0;
  if (!((uint64_t)v29[0] | (uint64_t)v29[2]))
    goto LABEL_27;
  v27 = v8[17];
  if (!v27)
  {
LABEL_23:
    v9 = 1;
    goto LABEL_27;
  }
  v10 = 0;
  while (1)
  {
    v11 = v8[12];
    if (v11)
      break;
LABEL_22:
    if (++v10 == v27)
      goto LABEL_23;
  }
  v12 = 0;
  while (1)
  {
    v13 = (re::RigGraphNode *)v8[12];
    if ((unint64_t)v13 <= v12)
    {
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v35 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "operator[]";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 797;
      v31 = 2048;
      v32 = v12;
      v33 = 2048;
      v34 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_29:
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v35 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "operator[]";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 797;
      v31 = 2048;
      v32 = v10;
      v33 = 2048;
      v34 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v14 = v8[14];
    v15 = v14 + 40 * v12;
    if (v10 != *(_DWORD *)(v15 + 32))
      goto LABEL_21;
    v2 = (re::RigGraphNode *)v8[17];
    if ((unint64_t)v2 <= v10)
      goto LABEL_29;
    v2 = (re::RigGraphNode *)(v8[19] + 200 * v10);
    v16 = *((_QWORD *)v2 + 2);
    if (v16)
    {
      v28 = v3;
      v17 = 0;
      v18 = (_QWORD *)*((_QWORD *)v2 + 4);
      while (!re::StringID::operator==((_QWORD *)v15, v18))
      {
        ++v17;
        v18 += 5;
        if (v16 == v17)
        {
          v3 = v28;
          goto LABEL_18;
        }
      }
      v3 = v17;
    }
LABEL_18:
    v19 = (_QWORD *)re::RigGraphNode::inputType(v2, v3);
    if (!re::StringID::operator==(v19, re::ecs2::RigComponentHelper::areExternalDependenciesLoadedForRigGraph(re::ecs2::RigComponent const&)::rigHierarchyStr))goto LABEL_21;
    v20 = v14 + 40 * v12;
    v22 = *(const char **)(v20 + 24);
    v21 = (uint64_t *)(v20 + 24);
    v23 = strlen(v22);
    *(_QWORD *)buf = v22;
    *(_QWORD *)&buf[8] = v23;
    re::BindNode::bindPointWithOverride<re::SkeletalPose>(v29, (uint64_t *)buf, (uint64_t)&v35);
    if (!re::BindPoint::valueUntyped((re::BindPoint *)&v35))
      break;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v35 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v35 + 8);
LABEL_21:
    if (++v12 == v11)
      goto LABEL_22;
  }
  v24 = *re::assetsLogObjects(0);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v25 = *v21;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v25;
    _os_log_impl(&dword_224FE9000, v24, OS_LOG_TYPE_DEFAULT, "RigHierarchy Input Binding path could not be resolved: %s", buf, 0xCu);
  }
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v35 + 8);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v35 + 8);
  v9 = 0;
LABEL_27:
  re::BindNode::deinit((re::BindNode *)v29);
  return v9;
}

uint64_t re::ecs2::RigComponentHelper::areAssetAndDependenciesLoaded(re::ecs2::RigComponentHelper *this, const re::ecs2::RigComponent *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t *v6;
  const re::ecs2::RigComponent *v7;
  uint64_t result;

  v2 = *((_QWORD *)this + 5);
  if (!v2)
    goto LABEL_7;
  v3 = atomic_load((unsigned int *)(v2 + 704));
  if (v3 != 2)
    return 0;
  v5 = *((_QWORD *)this + 5);
  if (!v5)
  {
LABEL_7:
    re::RigGraphAsset::assetType(this);
    return 1;
  }
  v6 = *(uint64_t **)(v5 + 264);
  if (v6 != re::RigGraphAsset::assetType(this))
    return 1;
  result = re::ecs2::RigComponentHelper::areExternalDependenciesLoadedForRigGraph(this, v7);
  if ((_DWORD)result)
    return 1;
  return result;
}

void re::ecs2::ECSSimulationEventDelegate::preSimulation(id *location, __n128 a2, char a3, re::PhysicsSimulation *a4)
{
  id *v7;
  const re::ecs2::Scene *v8;
  unsigned __int32 v9;
  uint64_t v10;
  id WeakRetained;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  re::EventBus *v19;
  uint64_t Type;
  uint64_t v21;
  uint64_t v22;
  unsigned __int32 v23;
  uint64_t v24;

  v7 = location + 3;
  v8 = (const re::ecs2::Scene *)location[2];
  if (!location[3])
    goto LABEL_7;
  v9 = a2.n128_u32[0];
  v10 = *((_QWORD *)v8 + 36);
  WeakRetained = objc_loadWeakRetained(location + 3);
  v12 = WeakRetained;
  if (WeakRetained)
    v13 = (uint64_t)WeakRetained - 8;
  else
    v13 = 0;
  v14 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityPhysicsWillSimulateEvent>(v10, v13);
  v15 = v14;
  if (!v12)
  {
    if (v14)
      goto LABEL_10;
LABEL_7:
    if ((a3 & 1) != 0)
      return;
    goto LABEL_16;
  }
  v16 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityPhysicsWillSimulateEvent>(v10, 0);

  if (!(v16 + v15))
    goto LABEL_7;
LABEL_10:
  v17 = objc_loadWeakRetained(v7);
  if (v17)
    v18 = (uint64_t)v17 - 8;
  else
    v18 = 0;
  if (v17)

  v19 = (re::EventBus *)*((_QWORD *)v8 + 36);
  v23 = v9;
  v24 = v18;
  Type = re::EventBus::getTypeId<REEntityPhysicsWillSimulateEvent>();
  re::EventBus::publish(v19, v18, Type, (uint64_t)&v23, 0x10uLL, 0);
  (*(void (**)(_QWORD))(**((_QWORD **)v8 + 7) + 200))(*((_QWORD *)v8 + 7));
  v21 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v8 + 7) + 32))(*((_QWORD *)v8 + 7));
  v22 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v21);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 56))(v22, 1);
LABEL_16:
  if (location[1])
  {
    (*(void (**)(_QWORD, __n128))(**((_QWORD **)v8 + 7) + 200))(*((_QWORD *)v8 + 7), a2);
    re::ecs2::PhysicsSystem::ecsToSim((re::ecs2::PhysicsSystem *)location[1], v8, a4);
  }
}

void re::ecs2::ECSSimulationEventDelegate::postSimulation(re::ecs2::ECSSimulationEventDelegate *this, float a2, re::PhysicsSimulation *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  uint64_t v13;
  uint64_t v14;
  id WeakRetained;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  re::EventBus *v23;
  uint64_t Type;
  float v25;
  uint64_t v26;

  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 176);
    if (v8)
    {
      v9 = *(uint64_t **)(v6 + 184);
      v10 = 8 * v8;
      do
      {
        v11 = *v9++;
        (*(void (**)(uint64_t, re::PhysicsSimulation *, uint64_t))(*(_QWORD *)v11 + 64))(v11, a3, v7);
        v10 -= 8;
      }
      while (v10);
    }
  }
  if (a2 > 0.0)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)a3 + 7) + 208))(*((_QWORD *)a3 + 7));
    v13 = *((_QWORD *)this + 3);
    v12 = (id *)((char *)this + 24);
    if (v13)
    {
      v14 = *(_QWORD *)(v7 + 288);
      WeakRetained = objc_loadWeakRetained(v12);
      v16 = WeakRetained;
      if (WeakRetained)
        v17 = (uint64_t)WeakRetained - 8;
      else
        v17 = 0;
      v18 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityPhysicsDidSimulateEvent>(v14, v17);
      v19 = v18;
      if (v16)
      {
        v20 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityPhysicsDidSimulateEvent>(v14, 0);

        if (!(v20 + v19))
          return;
      }
      else if (!v18)
      {
        return;
      }
      v21 = objc_loadWeakRetained(v12);
      if (v21)
        v22 = (uint64_t)v21 - 8;
      else
        v22 = 0;
      if (v21)

      v23 = *(re::EventBus **)(v7 + 288);
      v25 = a2;
      v26 = v22;
      Type = re::EventBus::getTypeId<REEntityPhysicsDidSimulateEvent>();
      re::EventBus::publish(v23, v22, Type, (uint64_t)&v25, 0x10uLL, 0);
      (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 56) + 200))(*(_QWORD *)(v7 + 56));
    }
  }
}

uint64_t re::ecs2::ECSSimulationEventDelegate::simulationPausedTick(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 176);
    if (v3)
    {
      v5 = *(_QWORD *)(result + 16);
      v6 = *(uint64_t **)(v2 + 184);
      v7 = 8 * v3;
      do
      {
        v8 = *v6++;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 64))(v8, a2, v5);
        v7 -= 8;
      }
      while (v7);
    }
  }
  return result;
}

void re::ecs2::ECSSimulationEventDelegate::~ECSSimulationEventDelegate(id *this)
{
  *this = &off_24ED64B98;
  objc_destroyWeak(this + 3);
  this[3] = 0;
}

{
  *this = &off_24ED64B98;
  objc_destroyWeak(this + 3);
  this[3] = 0;
  JUMPOUT(0x2276933B8);
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityPhysicsWillSimulateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];

  v9[0] = re::EventBus::getTypeId<REEntityPhysicsWillSimulateEvent>();
  v4 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), v9);
  if (v4 == -1)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48 * v4 + 8);
  if (!v5)
    return 0;
  if (!a2)
  {
    v7 = v5 + 88;
    return *(_QWORD *)(v7 + 120);
  }
  v9[0] = a2;
  v9[1] = 0;
  v6 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(v5 + 216), v9);
  if (v6 == -1)
    return 0;
  v7 = *(_QWORD *)(v5 + 224) + 144 * v6 + 16;
  return *(_QWORD *)(v7 + 120);
}

uint64_t re::EventBus::getTypeId<REEntityPhysicsWillSimulateEvent>()
{
  unsigned __int8 v0;
  const char *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25410E1A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25410E1A0))
  {
    _MergedGlobals_238 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"32REEntityPhysicsWillSimulateEvent" & 0x7FFFFFFFFFFFFFFFLL), v2);
    __cxa_guard_release(&qword_25410E1A0);
  }
  return _MergedGlobals_238;
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityPhysicsDidSimulateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];

  v9[0] = re::EventBus::getTypeId<REEntityPhysicsDidSimulateEvent>();
  v4 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), v9);
  if (v4 == -1)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48 * v4 + 8);
  if (!v5)
    return 0;
  if (!a2)
  {
    v7 = v5 + 88;
    return *(_QWORD *)(v7 + 120);
  }
  v9[0] = a2;
  v9[1] = 0;
  v6 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(v5 + 216), v9);
  if (v6 == -1)
    return 0;
  v7 = *(_QWORD *)(v5 + 224) + 144 * v6 + 16;
  return *(_QWORD *)(v7 + 120);
}

uint64_t re::EventBus::getTypeId<REEntityPhysicsDidSimulateEvent>()
{
  unsigned __int8 v0;
  const char *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25410E1B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25410E1B0))
  {
    qword_25410E1A8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"31REEntityPhysicsDidSimulateEvent" & 0x7FFFFFFFFFFFFFFFLL), v2);
    __cxa_guard_release(&qword_25410E1B0);
  }
  return qword_25410E1A8;
}

uint64_t re::ecs2::MipmapGenerationSystem::updateScenes(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[40];
  _QWORD v9[2];
  uint64_t v10;
  int v11;
  uint64_t v12;

  v2 = result;
  v3 = *(_QWORD *)(result + 104);
  if (!v3 || (*(_BYTE *)(v3 + 424) & 0x10) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(result + 112) + 104);
    if (v4 && re::RenderFrameBox::get(v4 + 344, 0xFFFFFFFFFFFFFFFuLL))
    {
      v5 = *(_QWORD *)(v2 + 112);
      v6 = *(_QWORD *)(v5 + 104);
      if (v6)
      {
        v7 = re::RenderFrameBox::get(v6 + 344, 0xFFFFFFFFFFFFFFFuLL);
        v5 = *(_QWORD *)(v2 + 112);
      }
      else
      {
        v7 = 0;
      }
      v12 = 0;
      v9[1] = 0;
      v10 = 0;
      v9[0] = 0;
      v11 = 0;
      re::TextureManager::dequeueMipmapGeneration(*(os_unfair_lock_s **)(v5 + 64), (uint64_t)v8);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v9, (uint64_t)v8);
      re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v8);
      if (v10)
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v7 + 320) + 16))(*(_QWORD *)(v7 + 320), v9);
      return re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v9);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "m_renderManager->renderFrame()", "updateScenes", 19);
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_MipmapGenerationSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_239);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_239))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410E1C0, 0);
    *(uint64_t *)((char *)&qword_25410E1D0 + 6) = 0;
    qword_25410E1D0 = 0;
    qword_25410E1E0 = 0;
    qword_25410E1E8 = 0xFFFFFFFFLL;
    qword_25410E1C0 = (uint64_t)&off_24ED7DAA8;
    qword_25410E1F0 = (uint64_t)"MipmapGenerationSystem";
    dword_25410E1F8 = 0;
    unk_25410E200 = 0u;
    unk_25410E210 = 0u;
    unk_25410E220 = 0u;
    qword_25410E230 = 0;
    __cxa_guard_release(&_MergedGlobals_239);
  }
  return &qword_25410E1C0;
}

void re::ecs2::initInfo_MipmapGenerationSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x7C4B2F6E5830485ELL;
  v5[1] = "MipmapGenerationSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_MipmapGenerationSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MipmapGenerationSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MipmapGenerationSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::MipmapGenerationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::MipmapGenerationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MipmapGenerationSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MipmapGenerationSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::MipmapGenerationSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  double result;

  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED64BF8;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::MipmapGenerationSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::MipmapGenerationSystem>(_OWORD *a1)
{
  uint64_t v1;
  double result;

  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = &off_24ED64BF8;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::MipmapGenerationSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MipmapGenerationSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MipmapGenerationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MipmapGenerationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MipmapGenerationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MipmapGenerationSystem>, this);
}

void re::ecs2::MipmapGenerationSystem::~MipmapGenerationSystem(re::ecs2::MipmapGenerationSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::MipmapGenerationSystem::typeInfo(re::ecs2::MipmapGenerationSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MipmapGenerationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MipmapGenerationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MipmapGenerationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MipmapGenerationSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::MipmapGenerationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MipmapGenerationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

void re::ecs2::TintManager::updateTintData(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int32 i;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;

  v4 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)(a1 + 72) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 6;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 88);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    v49 = *(_DWORD *)(a1 + 88);
    v50 = (unint64_t *)(a1 + 8);
    v9 = v49;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24 * v8 + 16);
      if (*(_QWORD *)(a1 + 8))
      {
        v11 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
        v12 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * ((v11 ^ (v11 >> 31)) % *(unsigned int *)(a1 + 32)));
        if ((_DWORD)v12 != 0x7FFFFFFF)
        {
          v13 = *(_QWORD *)(a1 + 24);
          while (*(_QWORD *)(v13 + 32 * v12 + 16) != v10)
          {
            v12 = *(_DWORD *)(v13 + 32 * v12 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v12 == 0x7FFFFFFF)
              goto LABEL_14;
          }
          goto LABEL_73;
        }
      }
LABEL_14:
      (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*a2 + 8))(&v58, *a2, v10);
      if ((_BYTE)v58)
        v14 = v59;
      else
        v14 = 0;
      v15 = *(_QWORD *)(v10 + 24);
      for (i = 1.0; v15; v15 = *(_QWORD *)(v15 + 24))
      {
        if ((*(_BYTE *)(v15 + 288) & 0x80) != 0)
          break;
        (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*a2 + 8))(&v58, *a2, v15);
        v17 = (_BYTE)v58 ? v59 : 0;
        if (v14 != v17)
          break;
        if (*v50)
        {
          v18 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
          v19 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * ((v18 ^ (v18 >> 31)) % *(unsigned int *)(a1 + 32)));
          if ((_DWORD)v19 != 0x7FFFFFFF)
          {
            v20 = *(_QWORD *)(a1 + 24);
            while (*(_QWORD *)(v20 + 32 * v19 + 16) != v15)
            {
              v19 = *(_DWORD *)(v20 + 32 * v19 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v19 == 0x7FFFFFFF)
                goto LABEL_28;
            }
            i = *(_DWORD *)(v20 + 32 * v19 + 24);
            break;
          }
        }
LABEL_28:
        v21 = *(_QWORD *)(v15 + 160);
        if (v21 && *(float *)(v21 + 28) != 0.0)
          v10 = v15;
      }
      re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)&v58);
      v51 = 0;
      v52 = 0;
      v53 = 1;
      v55 = 0;
      v56 = 0;
      v54 = 0;
      v57 = 0;
      re::BucketArray<re::ecs2::TintManager::buildTintForEntityHierarchy(re::ecs2::Entity *,re::ecs2::WorldRootProvider const&)::EntityTint,32ul>::init((uint64_t)&v51, (uint64_t)&v58, 1uLL);
      v60.n128_u64[0] = v10;
      v60.n128_u32[2] = i;
      v22 = re::BucketArray<re::ecs2::TintManager::buildTintForEntityHierarchy(re::ecs2::Entity *,re::ecs2::WorldRootProvider const&)::EntityTint,32ul>::add((uint64_t)&v51, &v60);
      v23 = v56;
      while (v23)
      {
        v24 = re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)&v51, --v23);
        v25 = *(_QWORD *)v24;
        v26 = *(float *)(v24 + 8);
        re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)&v51, v23);
        v56 = v23;
        ++v57;
        if ((*(_BYTE *)(v25 + 288) & 1) != 0)
        {
          v27 = *(_QWORD *)(v25 + 160);
          if (v27)
          {
            v22.n128_f32[0] = 1.0 - *(float *)(v27 + 28);
            v26 = v26 * v22.n128_f32[0];
          }
          if (v26 != 1.0)
          {
            v28 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v25 ^ (v25 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v25 ^ (v25 >> 30))) >> 27));
            v29 = v28 ^ (v28 >> 31);
            v30 = *v50;
            if (!*v50
              || (v30 = v29 % *(unsigned int *)(a1 + 32),
                  v31 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v30),
                  (_DWORD)v31 == 0x7FFFFFFF))
            {
LABEL_44:
              v33 = *(unsigned int *)(a1 + 44);
              if ((_DWORD)v33 == 0x7FFFFFFF)
              {
                v33 = *(unsigned int *)(a1 + 40);
                v34 = v33;
                if ((_DWORD)v33 == *(_DWORD *)(a1 + 32))
                {
                  re::HashTable<re::ecs2::Entity const*,float,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)v50, 2 * *(_DWORD *)(a1 + 36));
                  v30 = v29 % *(unsigned int *)(a1 + 32);
                  v34 = *(_DWORD *)(a1 + 40);
                }
                *(_DWORD *)(a1 + 40) = v34 + 1;
                v35 = *(_QWORD *)(a1 + 24);
                v36 = *(_DWORD *)(v35 + 32 * v33 + 8);
              }
              else
              {
                v35 = *(_QWORD *)(a1 + 24);
                v36 = *(_DWORD *)(v35 + 32 * v33 + 8);
                *(_DWORD *)(a1 + 44) = v36 & 0x7FFFFFFF;
              }
              *(_DWORD *)(v35 + 32 * v33 + 8) = v36 | 0x80000000;
              *(_DWORD *)(*(_QWORD *)(a1 + 24) + 32 * v33 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 32 * v33 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v30);
              *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32 * v33) = v29;
              *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32 * v33 + 16) = v25;
              *(float *)(*(_QWORD *)(a1 + 24) + 32 * v33 + 24) = v26;
              *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v30) = v33;
              ++*(_DWORD *)(a1 + 36);
              ++*(_DWORD *)(a1 + 48);
            }
            else
            {
              v32 = *(_QWORD *)(a1 + 24);
              while (*(_QWORD *)(v32 + 32 * v31 + 16) != v25)
              {
                v31 = *(_DWORD *)(v32 + 32 * v31 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v31 == 0x7FFFFFFF)
                  goto LABEL_44;
              }
            }
          }
          v37 = *(_QWORD *)(v25 + 328);
          if (v37)
          {
            v38 = *(unint64_t **)(v25 + 344);
            v39 = 8 * v37;
            do
            {
              v40 = *v38;
              (*(void (**)(__n128 *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*a2 + 8))(&v60, *a2, *v38);
              if (v60.n128_u8[0])
                v41 = v60.n128_u64[1];
              else
                v41 = 0;
              v60.n128_u64[0] = v40;
              if (v14 == v41)
                v60.n128_f32[2] = v26;
              else
                v60.n128_u32[2] = 1065353216;
              v22 = re::BucketArray<re::ecs2::TintManager::buildTintForEntityHierarchy(re::ecs2::Entity *,re::ecs2::WorldRootProvider const&)::EntityTint,32ul>::add((uint64_t)&v51, &v60);
              ++v38;
              v39 -= 8;
            }
            while (v39);
            v23 = v56;
          }
        }
      }
      v42 = v51;
      if (v52)
      {
        v43 = v55;
        v44 = v53;
        v45 = v52 - 1;
        do
        {
          if ((v44 & 1) != 0)
            v46 = &v54;
          else
            v46 = v43;
          (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v42 + 40))(v42, v46[v45], v22);
          v44 += 2;
          v53 = v44;
          --v45;
        }
        while (v45 != -1);
        if ((v44 & 1) != 0)
          goto LABEL_72;
      }
      else if (!v51 || (v53 & 1) != 0)
      {
        goto LABEL_72;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v42 + 40))(v42, v55);
LABEL_72:
      re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)&v58);
      v9 = *(_DWORD *)(a1 + 88);
      LODWORD(v4) = v49;
LABEL_73:
      if (v9 <= (int)v5 + 1)
        v47 = v5 + 1;
      else
        v47 = v9;
      while (1)
      {
        v8 = (v5 + 1);
        if (v47 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v48 = v8;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 72) + 24 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_80;
      }
      v48 = v47;
LABEL_80:
      LODWORD(v5) = v48;
    }
    while ((_DWORD)v4 != v48);
  }
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 56);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 104);
}

uint64_t re::ecs2::TintManager::registerScene(re::ecs2::TintManager *this, re::EventBus **a2)
{
  re::EventBus *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  re *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  re *v12;
  re *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  re *v18;
  re *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  re *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  re *v29;
  re *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  re *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t result;
  _QWORD v42[2];
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  re::ecs2::Scene *v48;
  _BYTE v49[24];
  uint64_t v50;
  _BYTE *v51;
  _BYTE v52[24];
  uint64_t v53;
  re *v54;
  _QWORD v55[2];
  _BYTE v56[24];
  uint64_t v57;
  re *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v48 = (re::ecs2::Scene *)a2;
  v2 = a2[36];
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track tint changes.", "eventBus", "registerScene", 31);
    _os_crash();
    __break(1u);
  }
  v42[0] = 0;
  v42[1] = 0;
  v43 = 1;
  v45 = 0;
  v46 = 0;
  v44 = 0;
  v47 = 0;
  v5 = 0;
  v55[0] = re::ecs2::ComponentImpl<re::ecs2::HierarchicalTintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v55[1] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  do
  {
    v6 = v55[v5];
    v57 = re::globalAllocators((re *)v4)[2];
    v7 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v57 + 32))(v57, 32, 0);
    *(_QWORD *)v7 = &off_24ED64DA0;
    *((_QWORD *)v7 + 1) = this;
    *((_QWORD *)v7 + 2) = re::ecs2::TintManager::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v7 + 3) = 0;
    v58 = v7;
    v8 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v2, (uint64_t)v56, v6, 0);
    v10 = v9;
    v11 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v42);
    *v11 = v8;
    v11[1] = v10;
    v12 = v58;
    if (v58)
    {
      v12 = (re *)(**(uint64_t (***)(re *))v58)(v58);
      if (v58 != (re *)v56)
        v12 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
    }
    v57 = re::globalAllocators(v12)[2];
    v13 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v57 + 32))(v57, 32, 0);
    *(_QWORD *)v13 = &off_24ED64DF8;
    *((_QWORD *)v13 + 1) = this;
    *((_QWORD *)v13 + 2) = re::ecs2::TintManager::invalidateEntityHierarchyEventHandler<REComponentDidAddEvent>;
    *((_QWORD *)v13 + 3) = 0;
    v58 = v13;
    v14 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v2, (uint64_t)v56, v6, 0);
    v16 = v15;
    v17 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v42);
    *v17 = v14;
    v17[1] = v16;
    v18 = v58;
    if (v58)
    {
      v18 = (re *)(**(uint64_t (***)(re *))v58)(v58);
      if (v58 != (re *)v56)
        v18 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
    }
    v57 = re::globalAllocators(v18)[2];
    v19 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v57 + 32))(v57, 32, 0);
    *(_QWORD *)v19 = &off_24ED64E50;
    *((_QWORD *)v19 + 1) = this;
    *((_QWORD *)v19 + 2) = re::ecs2::TintManager::invalidateEntityHierarchyEventHandler<REComponentWillRemoveEvent>;
    *((_QWORD *)v19 + 3) = 0;
    v58 = v19;
    v20 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v2, (uint64_t)v56, v6, 0);
    v22 = v21;
    v23 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v42);
    *v23 = v20;
    v23[1] = v22;
    v4 = (uint64_t *)v58;
    if (v58)
    {
      v4 = (uint64_t *)(**(uint64_t (***)(re *))v58)(v58);
      if (v58 != (re *)v56)
        v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
    }
    ++v5;
  }
  while (v5 != 2);
  v57 = re::globalAllocators((re *)v4)[2];
  v24 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v57 + 32))(v57, 32, 0);
  *(_QWORD *)v24 = &off_24ED64EA8;
  *((_QWORD *)v24 + 1) = this;
  *((_QWORD *)v24 + 2) = re::ecs2::TintManager::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>;
  *((_QWORD *)v24 + 3) = 0;
  v58 = v24;
  v25 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v2, (uint64_t)v56, 0, 0);
  v27 = v26;
  v28 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v42);
  *v28 = v25;
  v28[1] = v27;
  v29 = v58;
  if (v58)
  {
    v29 = (re *)(**(uint64_t (***)(re *))v58)(v58);
    if (v58 != (re *)v56)
      v29 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
  }
  v53 = re::globalAllocators(v29)[2];
  v30 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 32, 0);
  *(_QWORD *)v30 = &off_24ED64CF0;
  *((_QWORD *)v30 + 1) = this;
  *((_QWORD *)v30 + 2) = re::ecs2::TintManager::activateEntityEventHandler;
  *((_QWORD *)v30 + 3) = 0;
  v54 = v30;
  v31 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v2, (uint64_t)v52, 0, 0);
  v33 = v32;
  v34 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v42);
  *v34 = v31;
  v34[1] = v33;
  v35 = v54;
  if (v54)
  {
    v35 = (re *)(**(uint64_t (***)(re *))v54)(v54);
    if (v54 != (re *)v52)
      v35 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 40))(v53);
    v54 = 0;
  }
  v50 = re::globalAllocators(v35)[2];
  v36 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 32, 0);
  *v36 = &off_24ED64D48;
  v36[1] = this;
  v36[2] = re::ecs2::TintManager::deactivateEntityEventHandler;
  v36[3] = 0;
  v51 = v36;
  v37 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v2, (uint64_t)v49, 0, 0);
  v39 = v38;
  v40 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v42);
  *v40 = v37;
  v40[1] = v39;
  if (v51)
  {
    (**(void (***)(_BYTE *))v51)(v51);
    if (v51 != v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50);
    v51 = 0;
  }
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 152, (uint64_t *)&v48, (uint64_t)v42);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)v42);
  result = v42[0];
  if (v42[0])
  {
    if ((v43 & 1) == 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v42[0] + 40))();
  }
  return result;
}

uint64_t re::ecs2::TintManager::activateEntityEventHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1 + 56, &v4);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 104, &v4);
  return 0;
}

uint64_t re::ecs2::TintManager::deactivateEntityEventHandler(uint64_t a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a2;
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove(a1 + 8, a2);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 56, (uint64_t *)&v4);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1 + 104, (uint64_t *)&v4);
  return 0;
}

void re::ecs2::TintManager::unregisterScene(re::ecs2::TintManager *this, re::ecs2::Scene *a2)
{
  uint64_t v4;
  uint64_t v5;
  re::ecs2::Entity **v6;
  re::ecs2::Entity **v7;
  re::ecs2::Entity *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t i;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _BYTE v29[120];
  re::ecs2::Scene *v30;

  v30 = a2;
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v29);
  v23[0] = 0;
  v23[1] = 0;
  v24 = 1;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v28 = 0;
  re::BucketArray<re::ecs2::Entity *,32ul>::init((uint64_t)v23, (uint64_t)v29, 1uLL);
  v4 = *((_QWORD *)a2 + 13);
  v5 = *(_QWORD *)(v4 + 328);
  if (v5)
  {
    v6 = *(re::ecs2::Entity ***)(v4 + 344);
    v7 = &v6[v5];
    do
    {
      v8 = *v6;
      if ((*((_BYTE *)*v6 + 288) & 1) != 0)
      {
        re::ecs2::TintManager::clearEntityHierarchyTint(this, *v6);
        v9 = v27;
        if (v27)
        {
          v10 = 0;
          do
            re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v23, v10++);
          while (v9 != v10);
        }
        v27 = 0;
        ++v28;
        *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v23) = v8;
        while (v27)
        {
          v22 = 0;
          v22 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v23, v27 - 1);
          re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v23, --v27);
          ++v28;
          re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 56, &v22);
          v11 = *(_QWORD *)(v22 + 328);
          if (v11)
          {
            v12 = *(uint64_t **)(v22 + 344);
            v13 = 8 * v11;
            do
            {
              v14 = *v12++;
              *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v23) = v14;
              v13 -= 8;
            }
            while (v13);
          }
        }
      }
      ++v6;
    }
    while (v6 != v7);
  }
  v15 = (char *)this + 152;
  v16 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)v15, (uint64_t *)&v30);
  if (v16)
  {
    v17 = *((_QWORD *)v30 + 36);
    if (v17)
    {
      v18 = v16;
      v19 = *(_QWORD *)(v16 + 40);
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          v21 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v18, i);
          re::EventBus::unsubscribe(v17, *(_QWORD *)v21, *(_QWORD *)(v21 + 8));
        }
      }
    }
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v15, (uint64_t *)&v30);
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v23);
  if (v23[0] && (v24 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v23[0] + 40))();
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v29);
}

void re::ecs2::TintManager::clearEntityHierarchyTint(re::ecs2::TintManager *this, re::ecs2::Entity *a2)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[120];

  if (*((_DWORD *)this + 9))
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v17);
    v11[0] = 0;
    v11[1] = 0;
    v12 = 1;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    v16 = 0;
    re::BucketArray<re::ecs2::Entity *,32ul>::init((uint64_t)v11, (uint64_t)v17, 1uLL);
    *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v11) = a2;
    v4 = v15;
    if (v15)
    {
      v5 = (char *)this + 8;
      do
      {
        v6 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, v4 - 1);
        re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, --v15);
        ++v16;
        re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove((uint64_t)v5, v6);
        v7 = *(_QWORD *)(v6 + 328);
        if (v7)
        {
          v8 = *(uint64_t **)(v6 + 344);
          v9 = 8 * v7;
          do
          {
            v10 = *v8++;
            *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v11) = v10;
            v9 -= 8;
          }
          while (v9);
        }
        v4 = v15;
      }
      while (v15);
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v11);
    if (v11[0])
    {
      if ((v12 & 1) == 0)
        (*(void (**)(void))(*(_QWORD *)v11[0] + 40))();
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v17);
  }
}

__n128 re::BucketArray<re::ecs2::TintManager::buildTintForEntityHierarchy(re::ecs2::Entity *,re::ecs2::WorldRootProvider const&)::EntityTint,32ul>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 8);
  if (v4 + 1 > 32 * v5)
  {
    re::BucketArray<re::ecs2::TintManager::buildTintForEntityHierarchy(re::ecs2::Entity *,re::ecs2::WorldRootProvider const&)::EntityTint,32ul>::setBucketsCapacity((_QWORD *)a1, (v4 + 32) >> 5);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (v5 <= v4 >> 5)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v6 = a1 + 24;
  else
    v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v6 + 8 * (v4 >> 5));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  result = *a2;
  *(__n128 *)(v7 + 16 * (v4 & 0x1F)) = *a2;
  return result;
}

void re::ecs2::TintManager::~TintManager(re::ecs2::TintManager *this)
{
  re::ecs2::TintManager::~TintManager(this);
  JUMPOUT(0x2276933B8);
}

{
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 19);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 13);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 1);
}

uint64_t re::ecs2::TintManager::tintFactorPerEntity(re::ecs2::TintManager *this)
{
  return (uint64_t)this + 8;
}

void re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED64CF0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED64CF0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED64D48;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED64D48;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::TintManager::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>(re::ecs2::TintManager *a1, re::ecs2::Entity *a2)
{
  uint64_t v3;
  re::ecs2::Entity *v5;

  v5 = a2;
  if ((*((_BYTE *)a2 + 288) & 1) != 0)
  {
    v3 = (uint64_t)a1 + 56;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)a1 + 56, (uint64_t *)&v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)a1 + 104, (uint64_t *)&v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, (uint64_t *)&v5);
      re::ecs2::TintManager::clearEntityHierarchyTint(a1, v5);
    }
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED64DA0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED64DA0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::TintManager::invalidateEntityHierarchyEventHandler<REComponentDidAddEvent>(re::ecs2::TintManager *a1, re::ecs2::Entity *a2)
{
  uint64_t v3;
  re::ecs2::Entity *v5;

  v5 = a2;
  if ((*((_BYTE *)a2 + 288) & 1) != 0)
  {
    v3 = (uint64_t)a1 + 56;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)a1 + 56, (uint64_t *)&v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)a1 + 104, (uint64_t *)&v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, (uint64_t *)&v5);
      re::ecs2::TintManager::clearEntityHierarchyTint(a1, v5);
    }
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED64DF8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED64DF8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::TintManager::invalidateEntityHierarchyEventHandler<REComponentWillRemoveEvent>(re::ecs2::TintManager *a1, re::ecs2::Entity *a2)
{
  uint64_t v3;
  re::ecs2::Entity *v5;

  v5 = a2;
  if ((*((_BYTE *)a2 + 288) & 1) != 0)
  {
    v3 = (uint64_t)a1 + 56;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)a1 + 56, (uint64_t *)&v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)a1 + 104, (uint64_t *)&v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, (uint64_t *)&v5);
      re::ecs2::TintManager::clearEntityHierarchyTint(a1, v5);
    }
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED64E50;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED64E50;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::TintManager::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>(re::ecs2::TintManager *a1, re::ecs2::Entity *a2)
{
  uint64_t v3;
  re::ecs2::Entity *v5;

  v5 = a2;
  if ((*((_BYTE *)a2 + 288) & 1) != 0)
  {
    v3 = (uint64_t)a1 + 56;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)a1 + 56, (uint64_t *)&v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)a1 + 104, (uint64_t *)&v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, (uint64_t *)&v5);
      re::ecs2::TintManager::clearEntityHierarchyTint(a1, v5);
    }
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED64EA8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED64EA8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::TintManager::buildTintForEntityHierarchy(re::ecs2::Entity *,re::ecs2::WorldRootProvider const&)::EntityTint,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::TintManager::buildTintForEntityHierarchy(re::ecs2::Entity *,re::ecs2::WorldRootProvider const&)::EntityTint,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::TintManager::buildTintForEntityHierarchy(re::ecs2::Entity *,re::ecs2::WorldRootProvider const&)::EntityTint,32ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      v4 = result[1];
      if (v4 > a2)
      {
        v5 = *((_DWORD *)result + 4);
        do
        {
          v6 = v3 + 3;
          if ((v5 & 1) == 0)
            v6 = (_QWORD *)v3[4];
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v6[v4 - 1]);
          v7 = *((_DWORD *)v3 + 4);
          v4 = v3[1] - 1;
          v3[1] = v4;
          v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        v8 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 512, 0);
          v9 = result;
          if (*v3)
          {
            v10 = v3[1];
            v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              v12 = *v8;
              v14 = v10 >= *v8;
              v13 = v10 + 1;
              v14 = !v14 || v12 >= v13;
              if (v14)
                goto LABEL_24;
              v15 = 2 * v12;
              goto LABEL_20;
            }
            v13 = v10 + 1;
            if (v13 >= 3)
            {
              v15 = 4;
LABEL_20:
              if (v15 <= v13)
                v17 = v13;
              else
                v17 = v15;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v16 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          v18 = v3 + 3;
          if ((v11 & 1) == 0)
            v18 = (_QWORD *)v3[4];
          v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void re::HashTable<re::ecs2::Entity const*,float,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  signed int v23;
  _BYTE v24[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::init((uint64_t)v24, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v24;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(_QWORD *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = 0;
        v13 = v7;
        v14 = DWORD1(v9);
        do
        {
          v15 = (uint64_t *)(*(_QWORD *)&v24[16] + v11);
          if ((*(_DWORD *)(*(_QWORD *)&v24[16] + v11 + 8) & 0x80000000) != 0)
          {
            v16 = *v15;
            v17 = *(unsigned int *)(a1 + 24);
            v18 = *v15 % v17;
            v19 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v19 == 0x7FFFFFFF)
            {
              v19 = *(unsigned int *)(a1 + 32);
              v20 = v19;
              if ((_DWORD)v19 == (_DWORD)v17)
              {
                re::HashTable<re::ecs2::Entity const*,float,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, (2 * v14));
                v18 = v16 % *(unsigned int *)(a1 + 24);
                v20 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + 32 * v19 + 8);
            }
            else
            {
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + 32 * v19 + 8);
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v21 + 32 * v19 + 8) = v22 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v18);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19) = v16;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19 + 16) = v15[2];
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19 + 24) = *((_DWORD *)v15 + 6);
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v18) = v19;
            v14 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v14;
            v10 = *(_DWORD *)&v24[32];
          }
          ++v12;
          v11 += 32;
        }
        while (v12 < v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2)
      v23 = a2;
    else
      v23 = 3;
  }
}

uint64_t re::EngineMotionStateEventDelegate::updateMotionState(uint64_t this, const re::RigidBody *a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  re::EventBus *v9;
  unsigned __int8 v10;
  int v11;
  const char *v12;
  re::EventBus *v13;
  const re::RigidBody *v14;
  char v15;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 40);
  if (v4)
  {
    v5 = v4;
    do
    {
      v6 = v5;
      v5 = *(_QWORD *)(v5 + 24);
    }
    while (v5);
    if (!*(_QWORD *)(v6 + 16))
      goto LABEL_8;
    v7 = v4;
    do
    {
      v8 = v7;
      v7 = *(_QWORD *)(v7 + 24);
    }
    while (v7);
    v9 = *(re::EventBus **)(*(_QWORD *)(v8 + 16) + 288);
    if (!v9)
LABEL_8:
      v9 = *(re::EventBus **)(this + 8);
    v14 = a2;
    v15 = a3;
    v10 = atomic_load((unsigned __int8 *)&qword_25410E240);
    if ((v10 & 1) == 0)
    {
      v12 = (const char *)v4;
      v13 = v9;
      v11 = __cxa_guard_acquire(&qword_25410E240);
      v4 = (uint64_t)v12;
      v9 = v13;
      if (v11)
      {
        _MergedGlobals_240 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"27REMotionStateDidChangeEvent" & 0x7FFFFFFFFFFFFFFFLL), v12);
        __cxa_guard_release(&qword_25410E240);
        v4 = (uint64_t)v12;
        v9 = v13;
      }
    }
    return re::EventBus::publish(v9, v4, _MergedGlobals_240, (uint64_t)&v14, 0x10uLL, 0);
  }
  return this;
}

void re::EngineMotionStateEventDelegate::~EngineMotionStateEventDelegate(re::EngineMotionStateEventDelegate *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t *re::ecs2::allocInfo_PlanarReflectionCaptureComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410E258);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410E258))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410E288, 0);
    *(uint64_t *)((char *)&qword_25410E298 + 6) = 0;
    qword_25410E298 = 0;
    qword_25410E2A8 = 0;
    qword_25410E2B0 = 0xFFFFFFFFLL;
    qword_25410E288 = (uint64_t)&off_24ED7DAA8;
    qword_25410E2B8 = (uint64_t)"PlanarReflectionCaptureComponent";
    dword_25410E2C0 = 0;
    xmmword_25410E2C8 = 0u;
    unk_25410E2D8 = 0u;
    xmmword_25410E2E8 = 0u;
    qword_25410E2F8 = 0;
    __cxa_guard_release(&qword_25410E258);
  }
  return &qword_25410E288;
}

void re::ecs2::initInfo_PlanarReflectionCaptureComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x28414266274E86F8;
  v10[1] = "PlanarReflectionCaptureComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410E250);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410E250);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      _MergedGlobals_241 = v8;
      __cxa_guard_release(&qword_25410E250);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &_MergedGlobals_241;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PlanarReflectionCaptureComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PlanarReflectionCaptureComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PlanarReflectionCaptureComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PlanarReflectionCaptureComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::PlanarReflectionCaptureComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57B08;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PlanarReflectionCaptureComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::PlanarReflectionCaptureComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57B08;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PlanarReflectionCaptureComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PlanarReflectionCaptureComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PlanarReflectionCaptureComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PlanarReflectionCaptureComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PlanarReflectionCaptureComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PlanarReflectionCaptureComponent>, this);
}

uint64_t *re::ecs2::allocInfo_PlanarReflectionReceiverComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410E268);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410E268))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410E300, 0);
    *(uint64_t *)((char *)&qword_25410E310 + 6) = 0;
    qword_25410E310 = 0;
    qword_25410E320 = 0;
    qword_25410E328 = 0xFFFFFFFFLL;
    qword_25410E300 = (uint64_t)&off_24ED7DAA8;
    qword_25410E330 = (uint64_t)"PlanarReflectionReceiverComponent";
    dword_25410E338 = 0;
    unk_25410E340 = 0u;
    unk_25410E350 = 0u;
    unk_25410E360 = 0u;
    qword_25410E370 = 0;
    __cxa_guard_release(&qword_25410E268);
  }
  return &qword_25410E300;
}

void re::ecs2::initInfo_PlanarReflectionReceiverComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x4B7E6CB8AD15EA92;
  v14[1] = "PlanarReflectionReceiverComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25410E260);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410E260);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410E278 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "captureEntity";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410E280 = v12;
      __cxa_guard_release(&qword_25410E260);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410E278;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PlanarReflectionReceiverComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PlanarReflectionReceiverComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PlanarReflectionReceiverComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PlanarReflectionReceiverComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::PlanarReflectionReceiverComponent>(int a1, int a2, ArcSharedObject *this)
{
  id *v4;

  *((_QWORD *)this + 6) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v4 = (id *)((char *)this + 32);
  ArcSharedObject::ArcSharedObject(this, 0);
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  *(_QWORD *)this = &off_24ED57B88;
  objc_initWeak(v4, 0);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  re::ecs2::EntityHandle::reset(v4);
}

uint64_t re::internal::defaultDestruct<re::ecs2::PlanarReflectionReceiverComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::PlanarReflectionReceiverComponent>(uint64_t a1)
{
  id *v2;
  uint64_t v3;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v2 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57B88;
  objc_initWeak(v2, 0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  re::ecs2::EntityHandle::reset(v2);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PlanarReflectionReceiverComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PlanarReflectionReceiverComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PlanarReflectionReceiverComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PlanarReflectionReceiverComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PlanarReflectionReceiverComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PlanarReflectionReceiverComponent>, this);
}

uint64_t *re::ecs2::allocInfo_PlanarReflectionSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410E270);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410E270))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410E378, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410E388 = 0;
    qword_25410E398 = 0;
    qword_25410E3A0 = 0xFFFFFFFFLL;
    qword_25410E378 = (uint64_t)&off_24ED7DAA8;
    qword_25410E3A8 = (uint64_t)"PlanarReflectionSystem";
    dword_25410E3B0 = 0;
    xmmword_25410E3B8 = 0u;
    unk_25410E3C8 = 0u;
    xmmword_25410E3D8 = 0u;
    qword_25410E3E8 = 0;
    __cxa_guard_release(&qword_25410E270);
  }
  return &qword_25410E378;
}

void re::ecs2::initInfo_PlanarReflectionSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x9B1399D5F4C5728;
  v5[1] = "PlanarReflectionSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_PlanarReflectionSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PlanarReflectionSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PlanarReflectionSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::PlanarReflectionSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::PlanarReflectionSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PlanarReflectionSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PlanarReflectionSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::PlanarReflectionSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  double result;

  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED64F50;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 192) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 196) = 0x7FFFFFFFLL;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PlanarReflectionSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a3 + 20);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::PlanarReflectionSystem>(_OWORD *a1)
{
  uint64_t v1;
  double result;

  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = &off_24ED64F50;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_DWORD *)(v1 + 192) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 196) = 0x7FFFFFFFLL;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PlanarReflectionSystem>(_QWORD *a1)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a1 + 20);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PlanarReflectionSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PlanarReflectionSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PlanarReflectionSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PlanarReflectionSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PlanarReflectionSystem>, this);
}

_BYTE *re::ecs2::PlanarReflectionSystem::willAddSceneToECSService(re::ecs2::PlanarReflectionSystem *this, re::EventBus **a2)
{
  re::EventBus *v2;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *result;
  __int128 v8;
  re::ecs2::Scene *v9;
  _BYTE v10[24];
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v9 = (re::ecs2::Scene *)a2;
  v2 = a2[36];
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for PlanarReflectionSystem to track parameter changes.", "eventBus", "willAddSceneToECSService", 62);
    _os_crash();
    __break(1u);
  }
  v4 = (char *)this + 160;
  v11 = re::globalAllocators(this)[2];
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 32, 0);
  *v5 = &off_24ED64FE0;
  v5[1] = this;
  v5[2] = re::ecs2::PlanarReflectionSystem::componentWillDeactivateEventHandler;
  v5[3] = 0;
  v12 = v5;
  *(_QWORD *)&v8 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v2, (uint64_t)v10, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
  *((_QWORD *)&v8 + 1) = v6;
  re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addNew((uint64_t)v4, (uint64_t *)&v9, &v8);
  result = v12;
  if (v12)
  {
    result = (_BYTE *)(**(uint64_t (***)(_BYTE *))v12)(v12);
    if (v12 != v10)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addNew(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 40 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 40 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 40 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 40 * v10;
  return v12 + 24;
}

uint64_t re::ecs2::PlanarReflectionSystem::componentWillDeactivateEventHandler(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t re::ecs2::PlanarReflectionSystem::willRemoveSceneFromECSService(re::ecs2::PlanarReflectionSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v11 = (unint64_t)a2;
  v3 = *((_QWORD *)a2 + 36);
  v4 = (_QWORD *)((char *)this + 160);
  result = re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::containsKey((uint64_t)this + 160, (uint64_t *)&v11);
  if ((_DWORD)result)
  {
    LODWORD(v6) = 0x7FFFFFFF;
    if (*v4)
    {
      v7 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
      v8 = *(unsigned int *)(*((_QWORD *)this + 21) + 4 * ((v7 ^ (v7 >> 31)) % *((unsigned int *)this + 46)));
      if ((_DWORD)v8 != 0x7FFFFFFF)
      {
        v9 = *((_QWORD *)this + 22);
        if (*(_QWORD *)(v9 + 40 * v8 + 16) == v11)
        {
          LODWORD(v6) = v8;
        }
        else
        {
          v6 = v8;
          while (1)
          {
            LODWORD(v6) = *(_DWORD *)(v9 + 40 * v6 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v6 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v9 + 40 * v6 + 16) == v11)
              goto LABEL_11;
          }
          LODWORD(v6) = 0x7FFFFFFF;
        }
      }
    }
LABEL_11:
    v10 = *((_QWORD *)this + 22) + 40 * v6;
    re::EventBus::unsubscribe(v3, *(_QWORD *)(v10 + 24), *(_QWORD *)(v10 + 32));
    return re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v4, (uint64_t *)&v11);
  }
  return result;
}

BOOL re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 40 * v4 + 16) == v2)
    return 1;
  do
  {
    LODWORD(v4) = *(_DWORD *)(v6 + 40 * v4 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v4 != 0x7FFFFFFF;
  }
  while ((_DWORD)v4 != 0x7FFFFFFF && *(_QWORD *)(v6 + 40 * v4 + 16) != v2);
  return result;
}

void `anonymous namespace'::removeParamsFromSystemParameterBlock(_anonymous_namespace_ *this, re::MaterialManager *a2, int a3)
{
  uint64_t *SystemMaterialParameterBlock;
  re::MaterialParameterBlock *v7;
  uint64_t v8;

  SystemMaterialParameterBlock = re::MaterialManager::getSystemMaterialParameterBlock(this, (uint64_t)a2);
  if (SystemMaterialParameterBlock)
  {
    v7 = (re::MaterialParameterBlock *)SystemMaterialParameterBlock;
    v8 = 0x3578C2CBE23A420;
    re::MaterialParameterBlock::removeTexture((uint64_t)SystemMaterialParameterBlock, &v8);
    v8 = 0;
    if (a3)
    {
      if (re::MaterialParameterBlock::isEmpty(v7))
        re::MaterialManager::removeSystemMaterialParameterBlock(this, (uint64_t)a2);
    }
  }
}

uint64_t re::ecs2::PlanarReflectionSystem::updateScenes(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _anonymous_namespace_ *v22;
  int v23;
  signed int v24;
  _anonymous_namespace_ *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  void *v30;
  _anonymous_namespace_ *v31;
  __int32 v32;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __int32 v47;
  __int32 v48;
  float32x4_t *v49;
  re::ecs2::TransformComponent **v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  id v58;
  uint64_t TextureCompressionType;
  id v60;
  uint64_t v61;
  id v62;
  float32x4_t v63;
  uint64_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  _anonymous_namespace_ *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  BOOL v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  re::MaterialParameterBlock *v90;
  unsigned int v91;
  uint64_t v92;
  int *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  _QWORD *v104;
  re::RenderManager **v105;
  re::DynamicString **v106;
  uint64_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  simd_float3x3 v116;
  float32x4_t v117;
  __int128 v118;
  __int128 v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122[2];
  id v123[2];
  float32x4_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  simd_float3x3 v129;

  v2 = result;
  v128 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(result + 104);
  if (!v3 || (*(_BYTE *)(v3 + 424) & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      v5 = *(_QWORD **)a2;
      v6 = *(_QWORD *)a2 + 8 * v4;
      v7 = &unk_255829000;
      v8 = &re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
      v103 = v6;
      do
      {
        v107 = *v5;
        if (*v5)
        {
          re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v122);
          v10 = *(_QWORD *)(v2 + 112);
          if (!v10)
          {
            re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 115);
            _os_crash();
            __break(1u);
LABEL_121:
            std::__throw_bad_variant_access[abi:nn180100]();
          }
          v11 = *(_QWORD *)(v10 + 104);
          if (v11)
          {
            v106 = (re::DynamicString **)re::RenderFrameBox::get(v11 + 344, 0xFFFFFFFFFFFFFFFuLL);
            v10 = *(_QWORD *)(v2 + 112);
          }
          else
          {
            v106 = 0;
          }
          v12 = *(_anonymous_namespace_ **)(v10 + 24);
          if (v7[253] != -1)
            dispatch_once(&re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::onceToken, &__block_literal_global_35);
          if (v8[3368])
          {
            v13 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v107 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v13)
            {
              v14 = *(_QWORD *)(v13 + 24);
              if (v14)
              {
                v15 = *(uint64_t **)(v13 + 40);
                v16 = 8 * v14;
                do
                {
                  v17 = *v15++;
                  v16 -= 8;
                }
                while (v16);
              }
            }
          }
          v18 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v107 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (v18)
          {
            v19 = *(_QWORD *)(v18 + 24);
            if (v19)
            {
              v105 = (re::RenderManager **)v12;
              v104 = v5;
              v20 = *(uint64_t **)(v18 + 40);
              v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 136) + 24))(*(_QWORD *)(v2 + 136));
              v22 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
              v23 = *((_DWORD *)v22 + 31);
              if (!v23)
                v23 = *((_DWORD *)v22 + 4);
              v24 = v23 + 1;
              v120 = 0;
              v118 = 0u;
              v119 = 0u;
              v121 = 0x7FFFFFFFLL;
              memset(&v116, 0, 36);
              *(uint64_t *)((char *)v116.columns[2].i64 + 4) = 0x7FFFFFFFLL;
              v26 = 8 * v19;
              v27 = v20;
              v28 = &v20[v19];
              do
              {
                v29 = *v27++;
                v123[0] = 0;
                (*(void (**)(float32x4_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v21 + 8))(&v124, v21, *(_QWORD *)(v29 + 16));
                if (v124.i8[0])
                  v30 = (void *)v124.i64[1];
                else
                  v30 = 0;
                v123[0] = v30;
                v124.i32[0] = 0;
                v31 = (_anonymous_namespace_ *)re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int>((uint64_t)&v116, (uint64_t *)v123, (int *)&v124);
                ++*(_QWORD *)v31;
                v26 -= 8;
              }
              while (v26);
              v32 = v116.columns[2].i32[0];
              if (v116.columns[2].i32[0])
              {
                v33 = 0;
                v34 = (int *)(v116.columns[1].i64[0] + 8);
                while (1)
                {
                  v35 = *v34;
                  v34 += 8;
                  if (v35 < 0)
                    break;
                  if (v116.columns[2].u32[0] == ++v33)
                  {
                    LODWORD(v33) = v116.columns[2].i32[0];
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v33) = 0;
              }
              if (v116.columns[2].i32[0] != (_DWORD)v33)
              {
                v36 = v33;
                v37 = v116.columns[1].i64[0];
                do
                {
                  v38 = v37 + 32 * v36;
                  v39 = *(_QWORD *)(v38 + 24);
                  v127 = 0;
                  v125 = 0;
                  v124 = 0uLL;
                  v126 = 0;
                  re::DynamicArray<re::PlanarReflectionData>::setCapacity(&v124, v39);
                  v42 = *(_QWORD *)(v38 + 16);
                  v41 = (_QWORD *)(v38 + 16);
                  v40 = v42;
                  ++v126;
                  v43 = 0x94D049BB133111EBLL
                      * ((0xBF58476D1CE4E5B9 * (v42 ^ (v42 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v42 ^ (v42 >> 30))) >> 27));
                  v44 = v43 ^ (v43 >> 31);
                  if ((_QWORD)v118)
                  {
                    v45 = v44 % DWORD2(v119);
                    v46 = *(unsigned int *)(*((_QWORD *)&v118 + 1) + 4 * v45);
                    if ((_DWORD)v46 != 0x7FFFFFFF)
                    {
                      while (*(_QWORD *)(v119 + (v46 << 6) + 16) != v40)
                      {
                        v46 = *(_DWORD *)(v119 + (v46 << 6) + 8) & 0x7FFFFFFF;
                        if ((_DWORD)v46 == 0x7FFFFFFF)
                          goto LABEL_40;
                      }
                      goto LABEL_41;
                    }
                  }
                  else
                  {
                    LODWORD(v45) = 0;
                  }
LABEL_40:
                  re::HashTable<unsigned long long,re::PlanarReflectionContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v118, v45, v44, v41, (uint64_t)&v124);
                  ++HIDWORD(v121);
LABEL_41:
                  v31 = (_anonymous_namespace_ *)re::DynamicArray<re::PlanarReflectionData>::deinit((uint64_t)&v124);
                  v37 = v116.columns[1].i64[0];
                  if (v116.columns[2].i32[0] <= (v33 + 1))
                    v47 = v33 + 1;
                  else
                    v47 = v116.columns[2].i32[0];
                  while (1)
                  {
                    v36 = (v33 + 1);
                    if (v47 - 1 == (_DWORD)v33)
                      break;
                    LODWORD(v33) = v33 + 1;
                    v48 = v36;
                    if ((*(_DWORD *)(v116.columns[1].i64[0] + 32 * v36 + 8) & 0x80000000) != 0)
                      goto LABEL_48;
                  }
                  v48 = v47;
LABEL_48:
                  LODWORD(v33) = v48;
                }
                while (v32 != v48);
              }
              re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v116);
              do
              {
                v49 = (float32x4_t *)*v20;
                v50 = *(re::ecs2::TransformComponent ***)(*v20 + 16);
                re::ecs2::TransformComponent::worldMatrix4x4F(v50, (const re::ecs2::Entity *)1, &v116);
                v110 = v117;
                v129 = __invert_f3(v116);
                v51 = vzip2q_s32((int32x4_t)v129.columns[0], (int32x4_t)v129.columns[2]);
                v52 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v129.columns[0], (int32x4_t)v129.columns[2]), (int32x4_t)v129.columns[1]);
                v129.columns[0] = (simd_float3)vtrn2q_s32((int32x4_t)v129.columns[0], (int32x4_t)v129.columns[1]);
                v129.columns[0].i32[2] = v129.columns[2].i32[1];
                v129.columns[0] = (simd_float3)vmlaq_f32(vaddq_f32((float32x4_t)v129.columns[0], vmulq_f32(v52, (float32x4_t)0)), (float32x4_t)0, (float32x4_t)vzip1q_s32(v51, vdupq_laneq_s32((int32x4_t)v129.columns[1], 2)));
                v129.columns[1] = (simd_float3)vmulq_f32((float32x4_t)v129.columns[0], (float32x4_t)v129.columns[0]);
                v129.columns[1].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v129.columns[1], 2), vadd_f32(*(float32x2_t *)v129.columns[1].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v129.columns[1].f32, 1))).u32[0];
                *(float32x2_t *)v129.columns[2].f32 = vrsqrte_f32((float32x2_t)v129.columns[1].u32[0]);
                *(float32x2_t *)v129.columns[2].f32 = vmul_f32(*(float32x2_t *)v129.columns[2].f32, vrsqrts_f32((float32x2_t)v129.columns[1].u32[0], vmul_f32(*(float32x2_t *)v129.columns[2].f32, *(float32x2_t *)v129.columns[2].f32)));
                v53 = vmulq_n_f32((float32x4_t)v129.columns[0], vmul_f32(*(float32x2_t *)v129.columns[2].f32, vrsqrts_f32((float32x2_t)v129.columns[1].u32[0], vmul_f32(*(float32x2_t *)v129.columns[2].f32, *(float32x2_t *)v129.columns[2].f32))).f32[0]);
                if (v53.f32[0] != 0.0 && (v54 = fabsf(v53.f32[0]), v54 >= (float)((float)(v54 + 1.0) * 0.00001))
                  || v53.f32[1] != 0.0 && (v55 = fabsf(v53.f32[1]), v55 >= (float)((float)(v55 + 1.0) * 0.00001))
                  || v53.f32[2] != 0.0 && (v56 = fabsf(v53.f32[2]), v56 >= (float)((float)(v56 + 1.0) * 0.00001)))
                {
                  if (!v49[2].i64[1])
                  {
                    v108 = v53;
                    v57 = v2;
                    v58 = *(id *)(*(_QWORD *)(v2 + 112) + 184);
                    v123[0] = v58;
                    v115 = 5;
                    v114 = 115;
                    v113 = 2;
                    TextureCompressionType = re::mtl::getTextureCompressionType(v123, &v113, &v114, &v115);
                    v60 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
                    objc_msgSend(v60, sel_setStorageMode_, 2);
                    if ((objc_msgSend(v60, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
                      || objc_msgSend(v60, sel_methodSignatureForSelector_, sel_setCompressionType_))
                    {
                      objc_msgSend(v60, sel_setCompressionType_, TextureCompressionType);
                    }
                    objc_msgSend(v60, sel_setTextureType_, 3);
                    objc_msgSend(v60, sel_setWidth_, 1024);
                    objc_msgSend(v60, sel_setHeight_, 1024);
                    objc_msgSend(v60, sel_setPixelFormat_, 115);
                    objc_msgSend(v60, sel_setMipmapLevelCount_, 1);
                    objc_msgSend(v60, sel_setUsage_, 5);
                    objc_msgSend(v60, sel_setSampleCount_, 1);
                    objc_msgSend(v60, sel_setProtectionOptions_, re::protectionOptions((re *)objc_msgSend(v60, sel_setArrayLength_, 2)));
                    re::mtl::Device::makeTexture(v60, (id *)(*(_QWORD *)(v2 + 112) + 184), &v112);
                    v61 = *(_QWORD *)(v2 + 120);
                    v62 = v112;
                    v111 = v62;
                    re::AssetHelper::makeTextureMemoryAsset(v61, &v111, 0);
                    v63 = v49[2];
                    v49[2] = v124;
                    v124 = v63;
                    v64 = v49[3].i64[0];
                    v49[3].i64[0] = v125;
                    v125 = v64;
                    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v124);
                    if (v62)
                    {

                      v111 = 0;
                    }
                    if (v112)

                    v2 = v57;
                    if (v60)

                    v53 = v108;
                  }
                  v65 = vmulq_f32(v110, v53);
                  v66 = v53;
                  v66.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v65, 2), vaddq_f32(v65, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1))).f32[0];
                  v109 = v66;
                  v67 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)&v49[2]);
                  v125 = 0;
                  v124 = v109;
                  if (*(_DWORD *)(v67 + 240))
                    goto LABEL_121;
                  NS::SharedPtr<MTL::Texture>::operator=((void **)&v125, (void **)(v67 + 160));
                  v68 = (_anonymous_namespace_ *)(*(_QWORD *(**)(id *__return_ptr, uint64_t, re::ecs2::TransformComponent **))(*(_QWORD *)v21 + 8))(v123, v21, v50);
                  if (LOBYTE(v123[0]))
                    v69 = (unint64_t)v123[1];
                  else
                    v69 = 0;
                  if (!(_QWORD)v118
                    || (v70 = 0x94D049BB133111EBLL
                            * ((0xBF58476D1CE4E5B9 * (v69 ^ (v69 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                              * (v69 ^ (v69 >> 30))) >> 27)),
                        v71 = *(unsigned int *)(*((_QWORD *)&v118 + 1) + 4 * ((v70 ^ (v70 >> 31)) % DWORD2(v119))),
                        (_DWORD)v71 == 0x7FFFFFFF))
                  {
LABEL_75:
                    v72 = 0;
                  }
                  else
                  {
                    while (*(_QWORD *)(v119 + (v71 << 6) + 16) != v69)
                    {
                      v71 = *(_DWORD *)(v119 + (v71 << 6) + 8) & 0x7FFFFFFF;
                      if ((_DWORD)v71 == 0x7FFFFFFF)
                        goto LABEL_75;
                    }
                    v72 = v119 + (v71 << 6) + 24;
                  }
                  v73 = *(_QWORD *)(v72 + 8);
                  v74 = *(_QWORD *)(v72 + 16);
                  if (v74 >= v73)
                  {
                    v75 = v74 + 1;
                    if (v73 < v74 + 1)
                    {
                      if (*(_QWORD *)v72)
                      {
                        v76 = 2 * v73;
                        v77 = v73 == 0;
                        v78 = 8;
                        if (!v77)
                          v78 = v76;
                        if (v78 <= v75)
                          v79 = v75;
                        else
                          v79 = v78;
                        re::DynamicArray<re::PlanarReflectionData>::setCapacity((_QWORD *)v72, v79);
                      }
                      else
                      {
                        re::DynamicArray<re::PlanarReflectionData>::setCapacity((_QWORD *)v72, v75);
                        ++*(_DWORD *)(v72 + 24);
                      }
                    }
                    v74 = *(_QWORD *)(v72 + 16);
                  }
                  v80 = *(_QWORD *)(v72 + 32) + 32 * v74;
                  *(float32x4_t *)v80 = v124;
                  *(_QWORD *)(v80 + 16) = v125;
                  ++*(_QWORD *)(v72 + 16);
                  ++*(_DWORD *)(v72 + 24);
                }
                ++v20;
              }
              while (v20 != v28);
              v81 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v107 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              v6 = v103;
              v7 = (_QWORD *)&unk_255829000;
              v8 = (_BYTE *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
              if (v81)
              {
                v82 = *(_QWORD *)(v81 + 24);
                if (v82)
                {
                  v83 = *(_QWORD *)(v81 + 40);
                  v84 = 8 * v82;
                  do
                  {
                    v85 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v83 + 16) + 296);
                    v86 = re::ecs2::EntityHandle::resolve((id *)(*(_QWORD *)v83 + 32), *(_QWORD *)(v2 + 40));
                    if (v86)
                    {
                      v87 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v86 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                      if (v87)
                      {
                        v88 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v87 + 32));
                        if (v88)
                        {
                          v89 = v88;
                          v90 = (re::MaterialParameterBlock *)re::MaterialManager::getOrAddSystemMaterialParameterBlock(v105, v85);
                          v123[0] = (id)0x3578C2CBE23A420;
                          re::MaterialParameterBlock::setTextureHandle(v90, (uint64_t *)v123, (re::TextureHandle *)(v89 + 48), (uint64_t)&v116);
                          v116.columns[0].i64[0] = 0;
                          v123[0] = 0;
                        }
                      }
                    }
                    v83 += 8;
                    v84 -= 8;
                  }
                  while (v84);
                }
              }
              v91 = v120;
              if (v120)
              {
                v92 = 0;
                v93 = (int *)(v119 + 8);
                v5 = v104;
                while (1)
                {
                  v94 = *v93;
                  v93 += 16;
                  if (v94 < 0)
                    break;
                  if (v120 == ++v92)
                  {
                    LODWORD(v92) = v120;
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v92) = 0;
                v5 = v104;
              }
              if (v120 != (_DWORD)v92)
              {
                v95 = v92;
                v96 = v119;
                v97 = v120;
                do
                {
                  v98 = v96 + (v95 << 6);
                  if (*(_QWORD *)(v98 + 40))
                  {
                    v99 = v98 + 24;
                    re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v107, *(const re::ecs2::Scene **)(v98 + 16), v106, &v124);
                    v115 = (unint64_t)v124.i64[0] >> 1;
                    v100 = re::RenderFrameData::stream((re::RenderFrameData *)(v106 + 33), (const re::WeakStringID *)&v115);
                    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v100 + 48) + 944))(*(_QWORD *)(v100 + 48), v99);
                    re::StringID::destroyString((re::StringID *)&v124);
                    v97 = v120;
                    v96 = v119;
                  }
                  if (v97 <= (int)v92 + 1)
                    v101 = v92 + 1;
                  else
                    v101 = v97;
                  while (1)
                  {
                    v95 = (v92 + 1);
                    if (v101 - 1 == (_DWORD)v92)
                      break;
                    LODWORD(v92) = v92 + 1;
                    v102 = v95;
                    if ((*(_DWORD *)(v96 + (v95 << 6) + 8) & 0x80000000) != 0)
                      goto LABEL_115;
                  }
                  v102 = v101;
LABEL_115:
                  LODWORD(v92) = v102;
                }
                while (v91 != v102);
              }
              re::HashTable<unsigned long long,re::PlanarReflectionContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v118);
            }
          }
          result = re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v122);
        }
        ++v5;
      }
      while (v5 != (_QWORD *)v6);
    }
  }
  return result;
}

void re::ecs2::PlanarReflectionSystem::~PlanarReflectionSystem(re::ecs2::PlanarReflectionSystem *this)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::PlanarReflectionSystem::typeInfo(re::ecs2::PlanarReflectionSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PlanarReflectionSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PlanarReflectionSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PlanarReflectionSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PlanarReflectionSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::PlanarReflectionSystem,REEventHandlerResult (re::ecs2::PlanarReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::PlanarReflectionSystem,REEventHandlerResult (re::ecs2::PlanarReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::PlanarReflectionSystem,REEventHandlerResult (re::ecs2::PlanarReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED64FE0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::PlanarReflectionSystem,REEventHandlerResult (re::ecs2::PlanarReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED64FE0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::PlanarReflectionSystem,REEventHandlerResult (re::ecs2::PlanarReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

_QWORD *re::DynamicArray<re::PlanarReflectionData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::PlanarReflectionData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 32 * v9;
        v11 = v7;
        do
        {
          *(_OWORD *)v11 = *(_OWORD *)v8;
          v11[2] = *(_QWORD *)(v8 + 16);
          *(_QWORD *)(v8 + 16) = 0;
          v8 += 32;
          v11 += 4;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::PlanarReflectionData>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 32 * v4;
        v6 = (id *)(v3 + 16);
        do
        {
          if (*v6)
          {

            *v6 = 0;
          }
          v6 += 4;
          v5 -= 32;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::PlanarReflectionSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PlanarReflectionSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _OWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 40 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 16) = *a4;
  *(_OWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 40;
        }
        while (v11 < v9);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

double re::HashTable<unsigned long long,re::PlanarReflectionContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<re::PlanarReflectionData>::deinit(v6 + 24);
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned long long,re::PlanarReflectionContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v13, v12);
          v15 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v28[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::PlanarReflectionContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::PlanarReflectionContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  *(_QWORD *)(v25 + 56) = 0;
  *(_DWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v26 = *(_QWORD *)(v25 + 40);
  *(_QWORD *)(v25 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v26;
  v27 = *(_QWORD *)(v25 + 56);
  *(_QWORD *)(v25 + 56) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v27;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v25 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

BOOL re::ecs2::JiggleSystemComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v19[2];
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v20, a5, 0);
  v8 = v20;
  v9 = v21;
  v20 = a4;
  v21 = v8;
  v22 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v21);
      if (*(_QWORD *)(*(_QWORD *)v14 + 240))
      {
        v19[0] = *(_QWORD *)v14 + 232;
        v19[1] = 17;
        if (re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)v19))
          v15 = (unint64_t *)(a3 + 32);
        else
          v15 = (unint64_t *)(a3 + 48);
      }
      else
      {
        v15 = (unint64_t *)(a3 + 32);
      }
      v16 = v20;
      v17 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v21);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v16, v17, *v15);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v21);
    }
    while (v21 != a5 || (unsigned __int16)v22 != 0xFFFF || WORD1(v22) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty(re::MeshDeformationRuntimeData::MeshDeformationIteration *this)
{
  unint64_t v1;

  v1 = *((unsigned int *)this + 2);
  if (*(_QWORD *)(*(_QWORD *)this + 136) <= v1)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 144) + 96 * v1 + 8) == 0;
}

uint64_t re::ecs2::JiggleSystemComponentStateImpl::processUpdatingComponents(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t result;
  _BYTE v27[12];
  int v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v8 = re::RenderManager::perFrameAllocator(*(re::RenderManager **)(*(_QWORD *)(a1 + 8) + 112));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v34, a5, 0);
  v9 = v34;
  v10 = v35;
  v34 = a4;
  v35 = v9;
  v36 = v10;
  v11 = (unsigned __int16)v10;
  v12 = v10 & 0xFFFF0000;
  if (v9 != a5 || v11 != 0xFFFF || v12 != 4294901760)
  {
    do
    {
      v15 = *(_QWORD *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v35);
      v33[0] = v15 + 232;
      v33[1] = 17;
      v16 = *(_QWORD *)(v15 + 392);
      v17 = *(_QWORD *)(v16 + 88);
      v18 = *(_QWORD *)(v16 + 96);
      v30 = v33[0];
      v31 = 17;
      v32 = 0;
      while (1)
      {
        re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)v33, (uint64_t)v27);
        if (HIDWORD(v31) == v28 && v32 == v29)
          break;
        v19 = re::MeshDeformationRuntimeData::MeshDeformationIterator::absoluteDeformedMeshPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v30);
        v21 = v19;
        if (v17 <= v19)
        {
          re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v19, v17);
          result = _os_crash();
          __break(1u);
          return result;
        }
        v22 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, 4, 4);
        *v22 = *a2;
        v23 = v18 + 168 * v21;
        ++*(_BYTE *)(v23 + 17);
        *(_QWORD *)(v23 + 160) = v22;
        re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)&v30);
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v35);
    }
    while (v35 != a5 || (unsigned __int16)v36 != 0xFFFF || WORD1(v36) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::JiggleSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[2];
  _QWORD v13[2];

  v13[0] = a3;
  v13[1] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v12);
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v7 = *(uint64_t **)a2;
    v8 = a1 + 200;
    v9 = 8 * v6;
    do
    {
      v10 = *v7++;
      re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(v8, v10, (uint64_t)v13, 0);
      v9 -= 8;
    }
    while (v9);
  }
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v12);
}

void re::ecs2::JiggleSystem::willAddSceneToECSService(re::ecs2::JiggleSystem *this, re::ecs2::Scene *a2)
{
  re::ecs2::BasicComponentStates<re::ecs2::MeshDeformationComponent>::addScene((uint64_t)this + 200, (uint64_t)a2);
}

void re::ecs2::BasicComponentStates<re::ecs2::MeshDeformationComponent>::addScene(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  re::ecs2::System *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = a2;
  v4 = (_anonymous_namespace_ *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(a1 + 144);
    else
      v7 = *(_QWORD **)(a1 + 152);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(a1 + 144);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v8 = *(uint64_t **)(a1 + 152);
    if (!v5)
      goto LABEL_17;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(_QWORD *)&v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    v14 = a1 + 168;
    v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  v43 = 0u;
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = -1;
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v48 = 1;
  v49 = 0uLL;
  v50 = 0uLL;
  v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,4ul>::addUninitialized(a1);
  v17 = v44;
  *(_QWORD *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  v19 = *(_QWORD *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::init(v20, a1, v51);
  v42 = *(_QWORD *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 160);
  if ((v21 & 0x3F) != 0)
    v23 = (v21 >> 6) + 1;
  else
    v23 = v21 >> 6;
  *(_QWORD *)(a1 + 160) = v21;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    v24 = 63;
    v25 = *(_QWORD *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63)
      v24 = ~(-1 << v25);
    if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      v26 = a1 + 144;
    else
      v26 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(v26 + 8 * *(_QWORD *)(a1 + 128) - 8) &= v24;
  }
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(a1 + 208);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(a1 + 208) = v27;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
      v32 = a1 + 192;
    else
      v32 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(a1 + 176) - 8) &= v30;
  }
  v15 = v42;
  v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(_BYTE *)(a1 + 232))
    return;
  v33 = *(_QWORD *)(a1 + 176);
  v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if ((v34 & 1) != 0)
      v35 = (_QWORD *)(a1 + 192);
    else
      v35 = *(_QWORD **)(a1 + 200);
    v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37)
        return;
    }
LABEL_59:
    v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((_BYTE *)v41 + 86))
      re::ecs2::System::queueToRun(v41, 0.0);
    return;
  }
  if ((v34 & 1) != 0)
  {
    v36 = (uint64_t *)(a1 + 192);
    if (!v33)
      return;
  }
  else
  {
    v36 = *(uint64_t **)(a1 + 200);
    if (!v33)
      return;
  }
  v38 = 0;
  v39 = 8 * v33;
  do
  {
    v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38)
    goto LABEL_59;
}

uint64_t re::ecs2::JiggleSystem::willRemoveSceneFromECSService(re::ecs2::JiggleSystem *this, re::ecs2::Scene *a2)
{
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 200, (uint64_t)a2);
}

uint64_t *re::ecs2::allocInfo_JiggleSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_242);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_242))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410E3F8, 0);
    *(uint64_t *)((char *)&qword_25410E408 + 6) = 0;
    qword_25410E408 = 0;
    qword_25410E418 = 0;
    qword_25410E420 = 0xFFFFFFFFLL;
    qword_25410E3F8 = (uint64_t)&off_24ED7DAA8;
    qword_25410E428 = (uint64_t)"JiggleSystem";
    dword_25410E430 = 0;
    unk_25410E438 = 0u;
    unk_25410E448 = 0u;
    unk_25410E458 = 0u;
    qword_25410E468 = 0;
    __cxa_guard_release(&_MergedGlobals_242);
  }
  return &qword_25410E3F8;
}

void re::ecs2::initInfo_JiggleSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x36A7507F0523F10ELL;
  v5[1] = "JiggleSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1B800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_JiggleSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::JiggleSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::JiggleSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::JiggleSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::JiggleSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::JiggleSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::JiggleSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::JiggleSystem *re::internal::defaultConstruct<re::ecs2::JiggleSystem>(int a1, int a2, re::ecs2::JiggleSystem *this)
{
  return re::ecs2::JiggleSystem::JiggleSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::JiggleSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 25);
  a3[20] = &off_24ED65038;
  v4 = a3[22];
  if (v4)
  {
    if (a3[23])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[24]);
      a3[23] = 0;
      a3[24] = 0;
    }
    a3[22] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::JiggleSystem>(_QWORD *a1)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 25);
  a1[20] = &off_24ED65038;
  v2 = a1[22];
  if (v2)
  {
    if (a1[23])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[24]);
      a1[23] = 0;
      a1[24] = 0;
    }
    a1[22] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_JiggleSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"JiggleSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_JiggleSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_JiggleSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::JiggleSystem>, this);
}

uint64_t re::ecs2::JiggleSystemComponentStateImpl::dependsOnComponents(re::ecs2::JiggleSystemComponentStateImpl *this)
{
  return *((_QWORD *)this + 4);
}

void re::ecs2::BasicComponentStateImpl<re::ecs2::MeshDeformationComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  re::ecs2::Component *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;

  v3 = *(re::ecs2::Component **)(a3 + 184);
  if (v3)
  {
    v5 = 3;
    v6 = 0xFFFFFFFFLL;
    do
    {
      v7 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v5], v3);
      if (v7 != -1 && (v8 & 0xFFFFFF00000000) != 0)
      {
        v10 = v7;
        v6 = v8;
        goto LABEL_11;
      }
      ++v5;
    }
    while (v5 != 7);
    v10 = -1;
LABEL_11:
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v10, v6, 0);
  }
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::MeshDeformationComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

void re::ecs2::JiggleSystem::~JiggleSystem(re::ecs2::JiggleSystem *this)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 25);
  *((_QWORD *)this + 20) = &off_24ED65038;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    if (*((_QWORD *)this + 23))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 24));
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 25);
  *((_QWORD *)this + 20) = &off_24ED65038;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    if (*((_QWORD *)this + 23))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 24));
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::JiggleSystem::typeInfo(re::ecs2::JiggleSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"JiggleSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_JiggleSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_JiggleSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::JiggleSystem>, 0);
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED65130;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED65188;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED651E0;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED65238;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED65130;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED65188;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED651E0;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED65238;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 184);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v17, v18, 0);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 184);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v17, v18, 0);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 184);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v17, v18, 0);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 184);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v17, v18, 0);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED65130;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED65130;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED65188;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED65188;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED651E0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED651E0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED65238;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED65238;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

id re::internal::defaultRetain<re::ecs2::JiggleSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::JiggleSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_AudioMixGroupsComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_243);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_243))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410E490, 0);
    *(uint64_t *)((char *)&qword_25410E4A0 + 6) = 0;
    qword_25410E4A0 = 0;
    qword_25410E4B0 = 0;
    qword_25410E4B8 = 0xFFFFFFFFLL;
    qword_25410E490 = (uint64_t)&off_24ED7DAA8;
    qword_25410E4C0 = (uint64_t)"AudioMixGroupsComponent";
    dword_25410E4C8 = 0;
    xmmword_25410E4D0 = 0u;
    unk_25410E4E0 = 0u;
    xmmword_25410E4F0 = 0u;
    qword_25410E500 = 0;
    __cxa_guard_release(&_MergedGlobals_243);
  }
  return &qword_25410E490;
}

void re::ecs2::initInfo_AudioMixGroupsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0xAE6F5221A4A0CBC6;
  v14[1] = "AudioMixGroupsComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25410E478);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410E478);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410E480 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "mixGroups";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410E488 = v12;
      __cxa_guard_release(&qword_25410E478);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410E480;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioMixGroupsComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioMixGroupsComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioMixGroupsComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioMixGroupsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

double re::internal::defaultConstruct<re::ecs2::AudioMixGroupsComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED65290;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_DWORD *)(v3 + 64) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 68) = 0x7FFFFFFFLL;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 116) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::AudioMixGroupsComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::AudioMixGroupsComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED65290;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 68) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_DWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 116) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AudioMixGroupsComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AudioMixGroupsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioMixGroupsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioMixGroupsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioMixGroupsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioMixGroupsComponent>, this);
}

uint64_t re::ecs2::AudioMixGroupsComponent::addOrReplaceMixGroup(re::ecs2::AudioMixGroupsComponent *this, uint64_t a2, const char *a3, float a4, float a5, char a6)
{
  size_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _OWORD v17[3];
  _QWORD v18[3];
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  _OWORD v28[2];
  uint64_t v29;
  _BYTE v30[40];
  _QWORD v31[2];

  v29 = 0;
  *(_WORD *)v30 = 0;
  *(_DWORD *)&v30[4] = 0;
  *(_DWORD *)&v30[8] = 0;
  *(_QWORD *)&v30[12] = 0x3F80000000000000;
  v27 = 0u;
  memset(v28, 0, 28);
  *(_QWORD *)&v30[28] = 0;
  *(_QWORD *)&v30[20] = 0;
  *(_DWORD *)&v30[36] = 1;
  v12 = strlen(a3);
  v31[0] = a3;
  v31[1] = v12;
  re::DynamicString::operator=((re::DynamicString *)&v24, (uint64_t)v31);
  v13 = 15.0;
  if (a4 <= 15.0)
    v13 = a4;
  *(_DWORD *)&v30[24] = fmaxf(v13, -60.0);
  *(_DWORD *)&v30[28] = *(_DWORD *)&v30[24];
  *(_DWORD *)&v30[20] = 0;
  *(_DWORD *)&v30[12] = 0;
  ++*(_DWORD *)&v30[36];
  v30[0] = a6;
  *(float *)&v30[16] = a5;
  *(_QWORD *)&v27 = a2;
  re::DynamicString::DynamicString((re::DynamicString *)v17, (const re::DynamicString *)&v24);
  v17[2] = v27;
  re::DynamicArray<char const*>::DynamicArray((uint64_t)v18, (uint64_t *)v28);
  v21 = *(_OWORD *)v30;
  v22 = *(_OWORD *)&v30[16];
  v23 = *(_QWORD *)&v30[32];
  re::ecs2::AudioMixGroupsComponent::updateMixGroupInMixGroupsStructure(this, (uint64_t)v17);
  if (v18[0])
  {
    if (v20)
      (*(void (**)(void))(*(_QWORD *)v18[0] + 40))();
    v20 = 0;
    memset(v18, 0, sizeof(v18));
    ++v19;
  }
  if (*(_QWORD *)&v17[0])
  {
    if ((BYTE8(v17[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v17[0] + 40))();
    memset(v17, 0, 32);
  }
  if (*(_QWORD *)&v28[0])
  {
    if (v29)
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)&v28[0] + 40))(*(_QWORD *)&v28[0], v29, v14, v15);
    v29 = 0;
    memset(v28, 0, 24);
    ++DWORD2(v28[1]);
  }
  result = v24;
  if (v24)
  {
    if ((v25 & 1) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 40))(v24, v26, v14, v15);
  }
  return result;
}

void re::ecs2::AudioMixGroupsComponent::updateMixGroupInMixGroupsStructure(re::ecs2::AudioMixGroupsComponent *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v4 = *(_DWORD *)(a2 + 124);
  v5 = (uint64_t)a1 + 32;
  v6 = (uint64_t *)(a2 + 32);
  v7 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)a1 + 32, (uint64_t *)(a2 + 32));
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 124);
    if (v4 <= v8 + 1)
      v4 = v8 + 1;
  }
  *(_DWORD *)(a2 + 124) = v4;
  re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addInternal<re::AudioMixGroup&>(v5, v6, 2, (re::DynamicString *)a2);
  re::ecs2::AudioMixGroupsComponent::markDirtyAndMarkDirtyForNetwork(a1);
}

void re::ecs2::AudioMixGroupsComponent::markDirtyAndMarkDirtyForNetwork(re::ecs2::AudioMixGroupsComponent *this)
{
  uint64_t v1;
  re::ecs2::NetworkComponent *v3;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    re::ecs2::Component::markDirty(this);
    v3 = *(re::ecs2::NetworkComponent **)(v1 + 200);
    if (v3)
      re::ecs2::NetworkComponent::markDirty(v3, this);
  }
}

BOOL re::ecs2::AudioMixGroupsComponent::isMixGroupGainDirty(re::ecs2::AudioMixGroupsComponent *this, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  _BOOL8 result;
  uint64_t v6;

  v6 = a2;
  v3 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 32, &v6);
  v4 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 80, &v6);
  result = 1;
  if (v3)
  {
    if (v4)
      return *v4 != *(_DWORD *)(v3 + 124);
  }
  return result;
}

void re::ecs2::AudioMixGroupsComponent::~AudioMixGroupsComponent(re::ecs2::AudioMixGroupsComponent *this)
{
  uint64_t *v2;

  *(_QWORD *)this = &off_24ED65290;
  v2 = (uint64_t *)((char *)this + 32);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 10);
  re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::AudioMixGroupsComponent::~AudioMixGroupsComponent(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t *re::ecs2::allocInfo_DrawableQueueSyncComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_244);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_244))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410E538, 0);
    *(uint64_t *)((char *)&qword_25410E548 + 6) = 0;
    qword_25410E548 = 0;
    qword_25410E558 = 0;
    qword_25410E560 = 0xFFFFFFFFLL;
    qword_25410E538 = (uint64_t)&off_24ED7DAA8;
    qword_25410E568 = (uint64_t)"DrawableQueueSyncComponent";
    dword_25410E570 = 0;
    xmmword_25410E578 = 0u;
    unk_25410E588 = 0u;
    xmmword_25410E598 = 0u;
    qword_25410E5A8 = 0;
    __cxa_guard_release(&_MergedGlobals_244);
  }
  return &qword_25410E538;
}

void re::ecs2::initInfo_DrawableQueueSyncComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0x4E59B8C38DB250DELL;
  v18[1] = "DrawableQueueSyncComponent";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_25410E510);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410E510);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410E520 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_int((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "bestToPresentIndex";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410E528 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_AssetHandle((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "textureHandle";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x2000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25410E530 = v16;
      __cxa_guard_release(&qword_25410E510);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25410E520;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::DrawableQueueSyncComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::DrawableQueueSyncComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DrawableQueueSyncComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DrawableQueueSyncComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

void re::internal::defaultConstruct<re::ecs2::DrawableQueueSyncComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED30EF8;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::DrawableQueueSyncComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::DrawableQueueSyncComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED30EF8;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::DrawableQueueSyncComponent>(_QWORD *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_DrawableQueueSyncComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DrawableQueueSyncComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DrawableQueueSyncComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DrawableQueueSyncComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DrawableQueueSyncComponent>, this);
}

uint64_t *re::ecs2::allocInfo_DrawableQueueSyncSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410E518);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410E518))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410E5B0, 0);
    *(uint64_t *)((char *)&qword_25410E5C0 + 6) = 0;
    qword_25410E5C0 = 0;
    qword_25410E5D0 = 0;
    qword_25410E5D8 = 0xFFFFFFFFLL;
    qword_25410E5B0 = (uint64_t)&off_24ED7DAA8;
    qword_25410E5E0 = (uint64_t)"DrawableQueueSyncSystem";
    dword_25410E5E8 = 0;
    unk_25410E5F0 = 0u;
    unk_25410E600 = 0u;
    unk_25410E610 = 0u;
    qword_25410E620 = 0;
    __cxa_guard_release(&qword_25410E518);
  }
  return &qword_25410E5B0;
}

void re::ecs2::initInfo_DrawableQueueSyncSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x61AC455877C2D7FALL;
  v5[1] = "DrawableQueueSyncSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1D800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_DrawableQueueSyncSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::DrawableQueueSyncSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::DrawableQueueSyncSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::DrawableQueueSyncSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::DrawableQueueSyncSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DrawableQueueSyncSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DrawableQueueSyncSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::DrawableQueueSyncSystem *re::internal::defaultConstruct<re::ecs2::DrawableQueueSyncSystem>(int a1, int a2, re::ecs2::DrawableQueueSyncSystem *this)
{
  return re::ecs2::DrawableQueueSyncSystem::DrawableQueueSyncSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::DrawableQueueSyncSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a3 + 53);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 23);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::DrawableQueueSyncSystem>(_QWORD *a1)
{
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 53);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 23);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::DrawableQueueSyncSystem::willAddSystemToECSService(re::ecs2::DrawableQueueSyncSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 20) = re::ServiceLocator::serviceOrNull<re::AssetService>(v2);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::DrawableQueueService>(v3);
  *((_QWORD *)this + 21) = result;
  return result;
}

uint64_t re::ecs2::DrawableQueueSyncSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(_QWORD *)(this + 160) = 0;
  *(_QWORD *)(this + 168) = 0;
  return this;
}

uint64_t re::ecs2::DrawableQueueSyncSystem::willAddSceneToECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  uint64_t v4;
  re::ecs2::Scene *v5;

  v3 = this;
  v5 = a2;
  v4 = *((_QWORD *)a2 + 47);
  if (!v4 || *(_QWORD *)(v4 + 24) == 1)
  {
    re::ecs2::BasicComponentStates<re::ecs2::DrawableQueueSyncComponent>::addScene(this + 184, (uint64_t)a2);
    re::HashSetBase<re::internal::TimelineTree *,re::internal::TimelineTree *,re::internal::ValueAsKey<re::internal::TimelineTree *>,re::Hash<re::internal::TimelineTree *>,re::EqualTo<re::internal::TimelineTree *>,true,false>::add(v3 + 424, (uint64_t *)&v5);
    this = *(_QWORD *)(v3 + 168);
    if (this)
      return (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(_QWORD *)this + 24))(this, a2);
  }
  return this;
}

void re::ecs2::BasicComponentStates<re::ecs2::DrawableQueueSyncComponent>::addScene(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  re::ecs2::System *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56[2];
  int v57;
  const char *v58;
  __int16 v59;
  int v60;
  __int16 v61;
  unint64_t v62;
  __int16 v63;
  unint64_t v64;
  _OWORD v65[5];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v56[0] = a2;
  v4 = (_anonymous_namespace_ *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(a1 + 144);
    else
      v7 = *(_QWORD **)(a1 + 152);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(a1 + 144);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v8 = *(uint64_t **)(a1 + 152);
    if (!v5)
      goto LABEL_17;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(_QWORD *)&v48 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v48);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), v56, (uint64_t *)&v48);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v48);
    v14 = a1 + 168;
    v15 = v48;
    goto LABEL_49;
  }
LABEL_17:
  v55 = 0u;
  v48 = 0u;
  *(_QWORD *)&v49 = 0;
  *((_QWORD *)&v49 + 1) = -1;
  v50 = 0u;
  v51 = 0u;
  v52 = 0;
  v53 = 1;
  v54 = 0uLL;
  v16 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v55 = 0;
  v17 = *(_QWORD *)(a1 + 8);
  DWORD2(v55) = 0;
  if (v16 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v16 + 4) >> 2);
    v17 = *(_QWORD *)(a1 + 8);
  }
  if (v17 <= v16 >> 2)
  {
    v56[1] = 0;
    memset(v65, 0, sizeof(v65));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v57 = 136315906;
    v58 = "operator[]";
    v59 = 1024;
    v60 = 858;
    v61 = 2048;
    v62 = v16 >> 2;
    v63 = 2048;
    v64 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v18 = a1 + 24;
  else
    v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(v18 + 8 * (v16 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  v20 = v19 + 112 * (v16 & 3);
  v21 = v48;
  v22 = v49;
  v23 = v50;
  *(_QWORD *)(v20 + 48) = v51;
  *(_OWORD *)(v20 + 16) = v22;
  *(_OWORD *)(v20 + 32) = v23;
  *(_OWORD *)v20 = v21;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v20 + 56, (uint64_t)&v51 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v48);
  v25 = *(_QWORD *)(a1 + 40);
  if (!v25)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v26 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v25 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::init(v26, a1, v56[0]);
  *(_QWORD *)&v65[0] = *(_QWORD *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), v56, (uint64_t *)v65);
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(a1 + 160);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(a1 + 160) = v27;
  *(_QWORD *)&v48 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v29, &v48);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(a1 + 160) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      v32 = a1 + 144;
    else
      v32 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(a1 + 128) - 8) &= v30;
  }
  v33 = *(_QWORD *)(a1 + 40);
  v34 = *(_QWORD *)(a1 + 208);
  if ((v33 & 0x3F) != 0)
    v35 = (v33 >> 6) + 1;
  else
    v35 = v33 >> 6;
  *(_QWORD *)(a1 + 208) = v33;
  *(_QWORD *)&v48 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v35, &v48);
  if (v33 && v34 > v33)
  {
    v36 = 63;
    v37 = *(_QWORD *)(a1 + 208) & 0x3FLL;
    if (v37 && v37 != 63)
      v36 = ~(-1 << v37);
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
      v38 = a1 + 192;
    else
      v38 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v38 + 8 * *(_QWORD *)(a1 + 176) - 8) &= v36;
  }
  v15 = *(_QWORD *)&v65[0];
  v14 = a1 + 168;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(_BYTE *)(a1 + 232))
    return;
  v39 = *(_QWORD *)(a1 + 176);
  v40 = *(_DWORD *)(a1 + 184);
  if (v39 >= 0xB)
  {
    if ((v40 & 1) != 0)
      v41 = (_QWORD *)(a1 + 192);
    else
      v41 = *(_QWORD **)(a1 + 200);
    v43 = 8 * v39;
    while (!*v41)
    {
      ++v41;
      v43 -= 8;
      if (!v43)
        return;
    }
LABEL_65:
    v47 = *(re::ecs2::System **)(a1 + 216);
    if (!*((_BYTE *)v47 + 86))
      re::ecs2::System::queueToRun(v47, 0.0);
    return;
  }
  if ((v40 & 1) != 0)
  {
    v42 = (uint64_t *)(a1 + 192);
    if (!v39)
      return;
  }
  else
  {
    v42 = *(uint64_t **)(a1 + 200);
    if (!v39)
      return;
  }
  v44 = 0;
  v45 = 8 * v39;
  do
  {
    v46 = *v42++;
    v44 |= v46;
    v45 -= 8;
  }
  while (v45);
  if (v44)
    goto LABEL_65;
}

_QWORD *re::ecs2::DrawableQueueSyncSystem::willRemoveSceneFromECSService(re::ecs2::DrawableQueueSyncSystem *this, unint64_t a2)
{
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  re::ecs2::ComponentBucketsBase *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  int v40;
  int v41;
  _QWORD *result;
  uint64_t v43;
  re::ecs2::Scene **v44;
  uint64_t v45;
  re::ecs2::Scene *v46;
  uint64_t v47;
  uint64_t (*v48)(void);
  unint64_t v49;

  v4 = (char *)this + 184;
  v49 = a2;
  v5 = (uint64_t *)((char *)this + 240);
  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 30, &v49);
  if (v6 != -1)
  {
    v7 = *((_QWORD *)this + 31) + 16 * v6;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 304, *(_QWORD *)(v7 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 352, *(_QWORD *)(v7 + 8));
    v8 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, *(_QWORD *)(v7 + 8));
    if (*v8)
    {
      v9 = v8;
      *v8 = 0;
      v10 = v8 + 1;
      v11 = *(_QWORD *)(v8[1] + 288);
      if (v11)
      {
        v12 = v8[12];
        if (v12)
        {
          for (i = 0; i != v12; ++i)
          {
            v14 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v9 + 7), i);
            re::EventBus::unsubscribe(v11, *(_QWORD *)v14, *(_QWORD *)(v14 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v9 + 7));
      v15 = 0;
      v16 = v9 + 3;
      do
      {
        v17 = (re::ecs2::ComponentBucketsBase *)v9[2];
        if (*(_QWORD *)v17)
          re::ecs2::ComponentBucketsBase::removeBucket(v17, v16[v15]);
        v16[v15++] = -1;
      }
      while (v15 != 4);
      *v10 = 0;
      v10[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v5, &v49);
  }
  v18 = *((unsigned int *)this + 112);
  if ((_DWORD)v18)
  {
    v19 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v20 = (v19 ^ (v19 >> 31)) % v18;
    v21 = *((_QWORD *)this + 54);
    v22 = *(unsigned int *)(v21 + 4 * v20);
    if ((_DWORD)v22 != 0x7FFFFFFF)
    {
      v23 = *((_QWORD *)this + 55);
      if (*(_QWORD *)(v23 + 24 * v22 + 16) == a2)
      {
        *(_DWORD *)(v21 + 4 * v20) = *(_DWORD *)(v23 + 24 * v22 + 8) & 0x7FFFFFFF;
LABEL_20:
        v25 = *((_QWORD *)this + 55);
        v26 = v25 + 24 * v22;
        v29 = *(_DWORD *)(v26 + 8);
        v28 = (int *)(v26 + 8);
        v27 = v29;
        if (v29 < 0)
        {
          *v28 = v27 & 0x7FFFFFFF;
          v25 = *((_QWORD *)this + 55);
          v27 = *(_DWORD *)(v25 + 24 * v22 + 8);
        }
        *(_DWORD *)(v25 + 24 * v22 + 8) = *((_DWORD *)this + 115) | v27 & 0x80000000;
        *((_DWORD *)this + 115) = v22;
        --*((_DWORD *)this + 113);
        ++*((_DWORD *)this + 116);
      }
      else
      {
        while (1)
        {
          v24 = v22;
          LODWORD(v22) = *(_DWORD *)(v23 + 24 * v22 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v22 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v23 + 24 * v22 + 16) == a2)
          {
            *(_DWORD *)(v23 + 24 * v24 + 8) = *(_DWORD *)(v23 + 24 * v24 + 8) & 0x80000000 | *(_DWORD *)(v23 + 24 * v22 + 8) & 0x7FFFFFFF;
            goto LABEL_20;
          }
        }
      }
    }
  }
  if (a2)
  {
    v30 = *((_QWORD *)this + 21);
    if (v30)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v30 + 32))(v30, a2);
  }
  v31 = *((unsigned int *)this + 114);
  if ((_DWORD)v31)
  {
    v32 = 0;
    v33 = (int *)(*((_QWORD *)this + 55) + 8);
    while (1)
    {
      v34 = *v33;
      v33 += 6;
      if (v34 < 0)
        break;
      if (v31 == ++v32)
      {
        LODWORD(v32) = *((_DWORD *)this + 114);
        break;
      }
    }
  }
  else
  {
    LODWORD(v32) = 0;
  }
  if ((_DWORD)v31 == (_DWORD)v32)
  {
LABEL_47:
    result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 104))(*((_QWORD *)this + 5));
    v43 = result[3];
    if (!v43)
      return result;
    v44 = (re::ecs2::Scene **)result[5];
    v45 = 8 * v43;
    while (1)
    {
      v46 = *v44;
      if (*v44 != (re::ecs2::Scene *)a2)
      {
        v47 = *((_QWORD *)v46 + 47);
        if (!v47 || *(_QWORD *)(v47 + 24) == 1)
        {
          if (*((_QWORD *)v46 + 7))
          {
            v49 = (unint64_t)*v44;
            re::ecs2::BasicComponentStates<re::ecs2::DrawableQueueSyncComponent>::addScene((uint64_t)v4, (uint64_t)v46);
            re::HashSetBase<re::internal::TimelineTree *,re::internal::TimelineTree *,re::internal::ValueAsKey<re::internal::TimelineTree *>,re::Hash<re::internal::TimelineTree *>,re::EqualTo<re::internal::TimelineTree *>,true,false>::add((uint64_t)this + 424, (uint64_t *)&v49);
            result = (_QWORD *)*((_QWORD *)this + 21);
            if (result)
              break;
          }
        }
      }
      ++v44;
      v45 -= 8;
      if (!v45)
        return result;
    }
    v48 = *(uint64_t (**)(void))(*result + 24);
  }
  else
  {
    v35 = v32;
    v36 = *((_QWORD *)this + 55);
    while (1)
    {
      v37 = *(_QWORD *)(v36 + 24 * v35 + 16);
      if (v37 && v37 != a2)
      {
        v39 = *((_QWORD *)this + 21);
        if (v39)
          break;
      }
      if (v31 <= (int)v32 + 1)
        v40 = v32 + 1;
      else
        v40 = *((_DWORD *)this + 114);
      while (1)
      {
        v35 = (v32 + 1);
        if (v40 - 1 == (_DWORD)v32)
          break;
        LODWORD(v32) = v32 + 1;
        v41 = v35;
        if ((*(_DWORD *)(v36 + 24 * v35 + 8) & 0x80000000) != 0)
          goto LABEL_46;
      }
      v41 = v40;
LABEL_46:
      LODWORD(v32) = v41;
      if ((_DWORD)v31 == v41)
        goto LABEL_47;
    }
    v48 = *(uint64_t (**)(void))(*(_QWORD *)v39 + 24);
  }
  return (_QWORD *)v48();
}

void re::ecs2::DrawableQueueSyncSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  re::ecs2::System *v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;

  v31[0] = a3;
  v31[1] = a4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v6 = *(uint64_t **)a2;
    v7 = a1 + 184;
    v8 = (_QWORD *)(a1 + 240);
    v9 = a1 + 352;
    v29 = (uint64_t *)(a1 + 376);
    v30 = *(_QWORD *)a2 + 8 * v4;
    while (1)
    {
      v32 = *v6;
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 248)
                      + 16
                      * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v8, &v32)+ 8);
      re::DynamicBitset<unsigned long long,64ul>::clearBit(v9, v10);
      v11 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v7, v10);
      v12 = *(_QWORD *)(*v11 + 224);
      v13 = v11[3];
      v14 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v11[2] + 8, v13);
      if (*(_DWORD *)(v14 + 40))
        v15 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v12 + 24))(v12, v31, v11, v13, v14, 0);
      else
        v15 = 0;
      v16 = v11[5];
      v17 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v11[2] + 8, v16);
      if (*(_DWORD *)(v17 + 40))
        v15 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, v31, v11, v16, v17, 0);
      v18 = v11[6];
      v19 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v11[2] + 8, v18);
      if (*(_DWORD *)(v19 + 40))
        break;
      if (v15)
        goto LABEL_10;
LABEL_11:
      if (*(_BYTE *)(a1 + 416))
      {
        v20 = *(_QWORD *)(a1 + 360);
        v21 = *(_DWORD *)(a1 + 368);
        if (v20 < 0xB)
        {
          v24 = v29;
          if ((v21 & 1) == 0)
            v24 = *(uint64_t **)(a1 + 384);
          if (!v20)
            goto LABEL_29;
          v25 = 0;
          v26 = 8 * v20;
          do
          {
            v27 = *v24++;
            v25 |= v27;
            v26 -= 8;
          }
          while (v26);
          if (!v25)
            goto LABEL_29;
        }
        else
        {
          v22 = v29;
          if ((v21 & 1) == 0)
            v22 = *(uint64_t **)(a1 + 384);
          v23 = 8 * v20;
          while (!*v22)
          {
            ++v22;
            v23 -= 8;
            if (!v23)
              goto LABEL_29;
          }
        }
        v28 = *(re::ecs2::System **)(a1 + 400);
        if (!*((_BYTE *)v28 + 86))
          re::ecs2::System::queueToRun(v28, 0.0);
      }
LABEL_29:
      if (++v6 == (uint64_t *)v30)
        return;
    }
    if (((v15 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v12 + 40))(v12, v31, v11, v18, v19, 0)) & 1) == 0)goto LABEL_11;
LABEL_10:
    re::DynamicBitset<unsigned long long,256ul>::setBit(v9, v10);
    goto LABEL_11;
  }
}

BOOL re::ecs2::DrawableQueueSyncComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int *v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v35, a5, 0);
  v8 = v35;
  v9 = v36;
  v35 = a4;
  v36 = v8;
  v37 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v36);
      v15 = *(_QWORD *)v14;
      v16 = *(_QWORD *)(*(_QWORD *)v14 + 40);
      if (v16)
      {
        v17 = atomic_load((unsigned int *)(v16 + 704));
        if (v17 == 2)
        {
          v18 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v15 + 32));
          v19 = *(_QWORD *)(v18 + 96);
          if (v19 && *(_BYTE *)(v19 + 295))
          {
            v20 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v19 + 360) + 32) + 16 * *(int *)(v15 + 28) + 32);
            while (1)
            {
              v21 = __ldaxr(v20);
              if (v21 != 3)
                break;
              if (!__stlxr(2u, v20))
                goto LABEL_17;
            }
            __clrex();
LABEL_17:
            v22 = 0;
            v23 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 96) + 360) + 32)
                                                 + 16 * *(int *)(v15 + 28)
                                                 + 40));
            v24 = *(_QWORD *)(*(_QWORD *)(v18 + 96) + 360);
            do
            {
              v25 = atomic_load((unsigned int *)(*(_QWORD *)(v24 + 32) + 16 * v22 + 32));
              v26 = atomic_load((unint64_t *)(*(_QWORD *)(v24 + 32) + 16 * v22 + 40));
              if (v25 == 3 && v26 < v23)
              {
                v28 = (unsigned int *)(*(_QWORD *)(v24 + 32) + 16 * v22 + 32);
                while (1)
                {
                  v29 = __ldaxr(v28);
                  if (v29 != 3)
                    break;
                  if (!__stlxr(2u, v28))
                    goto LABEL_27;
                }
                __clrex();
              }
LABEL_27:
              ++v22;
            }
            while (v22 != 3);
          }
          v30 = v35;
          v31 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v36);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v30, v31, *(_QWORD *)(a3 + 32));
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v36);
    }
    while (v36 != a5 || (unsigned __int16)v37 != 0xFFFF || WORD1(v37) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::DrawableQueueSyncComponent>::dependsOnComponents()
{
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::DrawableQueueSyncComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::DrawableQueueSyncComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::DrawableQueueSyncComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::DrawableQueueSyncSystem::~DrawableQueueSyncSystem(re::ecs2::DrawableQueueSyncSystem *this)
{
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 53);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 23);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 53);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 23);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::DrawableQueueSyncSystem::typeInfo(re::ecs2::DrawableQueueSyncSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DrawableQueueSyncSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DrawableQueueSyncSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DrawableQueueSyncSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DrawableQueueSyncSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::DrawableQueueSyncSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::DrawableQueueSyncSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED65350;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED653A8;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED65400;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED65458;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED65350;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED653A8;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED65400;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED65458;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED65350;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED65350;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED653A8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED653A8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED65400;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED65400;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED65458;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED65458;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::ecs2::allocInfo_AudioAnimationComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410E638);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410E638))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410E6E0, 0);
    *(uint64_t *)((char *)&qword_25410E6F0 + 6) = 0;
    qword_25410E6F0 = 0;
    qword_25410E700 = 0;
    qword_25410E708 = 0xFFFFFFFFLL;
    qword_25410E6E0 = (uint64_t)&off_24ED7DAA8;
    qword_25410E710 = (uint64_t)"AudioAnimationComponent";
    dword_25410E718 = 0;
    unk_25410E720 = 0u;
    unk_25410E730 = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_25410E750 = 0;
    __cxa_guard_release(&qword_25410E638);
  }
  return &qword_25410E6E0;
}

void re::ecs2::initInfo_AudioAnimationComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  void *v30;
  uint64_t v31;
  const re::IntrospectionBase *v32;
  uint64_t *v33;
  unsigned __int8 v34;
  _OWORD *v35;
  const re::IntrospectionBase *v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  re::IntrospectionRegistry *v40;
  const re::IntrospectionBase *v41;
  const char *v42;
  __int128 v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  _anonymous_namespace_ *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58[2];
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  const char *v62;
  const char *v63;
  _QWORD v64[2];
  __int128 v65;
  StringID v66;
  const char **v67;

  v61 = 0x2C04ED5A7FFBF85ELL;
  v62 = "AudioAnimationComponent";
  re::StringID::destroyString((re::StringID *)&v61);
  *((_OWORD *)this + 2) = v54;
  v4 = atomic_load((unsigned __int8 *)&qword_25410E630);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410E630);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410E650 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_AudioAnimationState((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "animationState";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_25410E658 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_float((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "animationGain";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x3800000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_25410E660 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_AssetHandle((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "audioAsset";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x4800000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_25410E668 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v22 = re::introspect_float((re *)1, v21);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "mediaOffset";
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x3C00000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_25410E670 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      v26 = re::introspect_float((re *)1, v25);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "additionalLinearGain";
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x4000000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_25410E678 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v30 = re::introspect_BOOL((re *)1, v29);
      v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = "mute";
      *(_QWORD *)(v31 + 16) = v30;
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0x4400000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_QWORD *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_25410E680 = v31;
      v33 = re::introspectionAllocator((re *)v31);
      v34 = atomic_load((unsigned __int8 *)&qword_25410E648);
      if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_25410E648))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_25410E690);
        qword_25410E690 = (uint64_t)&off_24ED656D8;
        __cxa_guard_release(&qword_25410E648);
      }
      if ((_MergedGlobals_245 & 1) == 0)
      {
        v35 = re::IntrospectionInfo<re::StringID>::get(1, v32);
        v37 = re::introspect_AssetHandle((re *)1, v36);
        if ((_MergedGlobals_245 & 1) == 0)
        {
          v38 = (uint64_t)v37;
          _MergedGlobals_245 = 1;
          v39 = v37[6];
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410E690, 0);
          qword_25410E6A0 = 0x3000000007;
          dword_25410E6A8 = v39;
          word_25410E6AC = 0;
          *(_QWORD *)&xmmword_25410E6B0 = 0;
          *((_QWORD *)&xmmword_25410E6B0 + 1) = 0xFFFFFFFFLL;
          qword_25410E6C0 = (uint64_t)v35;
          unk_25410E6C8 = 0;
          qword_25410E6D0 = v38;
          unk_25410E6D8 = 0;
          qword_25410E690 = (uint64_t)&off_24ED656D8;
          re::IntrospectionRegistry::add(v40, v41);
          re::getPrettyTypeName((re *)&qword_25410E690, (const re::IntrospectionBase *)&v61);
          if ((v62 & 1) != 0)
            v42 = v63;
          else
            v42 = (char *)&v62 + 1;
          if (v61 && (v62 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v61 + 40))();
          v43 = v35[2];
          v56 = *(_OWORD *)(v38 + 32);
          v57 = v43;
          v44 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v58);
          if (v44)
          {
            v45 = *v44;
            *((_QWORD *)&v55 + 1) = v45;
          }
          else
          {
            v61 = 0x449AD97C4B77BED4;
            v62 = "_CompareFunc";
            v46 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v61);
            if (v46)
            {
              v47 = *v46;
              re::StringID::destroyString((re::StringID *)&v61);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v61);
              *(_QWORD *)&v66.var0 = 0x449AD97C4B77BED4;
              v66.var1 = "_CompareFunc";
              v48 = (void *)v61;
              v47 = (uint64_t)v62;
              re::StringID::destroyString((re::StringID *)&v66);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v66, (uint64_t)&v62);
            if (!v48
              || (v49 = *v67,
                  v61 = v47,
                  v62 = v49,
                  LODWORD(v63) = -1,
                  (v50 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v66.var0 + 768, &v61)) == 0)|| !*(_QWORD *)v50)
            {
              v65 = v57;
              v64[0] = v48;
              v64[1] = v47;
            }
            v59 = v56;
            v60 = v57;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v61, v58, 1, 0x30uLL, 8uLL, &v60, &v59);
            re::TypeBuilder::setConstructor((uint64_t)&v61, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v61, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v61, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v61, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v61, v51);
          }
          xmmword_25410E6B0 = v55;
          re::StringID::destroyString((re::StringID *)v58);
        }
      }
      v52 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v52 = 1;
      *(_QWORD *)(v52 + 8) = "animationAssets";
      *(_QWORD *)(v52 + 16) = &qword_25410E690;
      *(_QWORD *)(v52 + 24) = 0;
      *(_QWORD *)(v52 + 32) = 0x9800000007;
      *(_DWORD *)(v52 + 40) = 0;
      *(_QWORD *)(v52 + 48) = 0;
      *(_QWORD *)(v52 + 56) = 0;
      *(_DWORD *)(v52 + 64) = 0;
      qword_25410E688 = v52;
      __cxa_guard_release(&qword_25410E630);
    }
  }
  *((_QWORD *)this + 2) = 0xF800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 8;
  *((_QWORD *)this + 8) = &qword_25410E650;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioAnimationComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioAnimationComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioAnimationComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioAnimationComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v53 = v54;
}

double re::internal::defaultConstruct<re::ecs2::AudioAnimationComponent>(int a1, int a2, re::ecs2::AudioAnimationComponent *this)
{
  return re::ecs2::AudioAnimationComponent::AudioAnimationComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::AudioAnimationComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AudioAnimationComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AudioAnimationComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioAnimationComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioAnimationComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioAnimationComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioAnimationComponent>, this);
}

uint64_t *re::ecs2::allocInfo_AudioAnimationSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410E640);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410E640))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410E758, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410E768 = 0;
    qword_25410E778 = 0;
    qword_25410E780 = 0xFFFFFFFFLL;
    qword_25410E758 = (uint64_t)&off_24ED7DAA8;
    qword_25410E788 = (uint64_t)"AudioAnimationSystem";
    dword_25410E790 = 0;
    xmmword_25410E798 = 0u;
    unk_25410E7A8 = 0u;
    xmmword_25410E7B8 = 0u;
    qword_25410E7C8 = 0;
    __cxa_guard_release(&qword_25410E640);
  }
  return &qword_25410E758;
}

void re::ecs2::initInfo_AudioAnimationSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x7DC7B6F774A6607ALL;
  v5[1] = "AudioAnimationSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_AudioAnimationSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioAnimationSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioAnimationSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::AudioAnimationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::AudioAnimationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioAnimationSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioAnimationSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::AudioAnimationSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  re::ecs2::System::System(a3, 1);
  *(_QWORD *)v3 = &off_24ED655B8;
  *(_QWORD *)(v3 + 104) = 0;
  *(_BYTE *)(v3 + 112) = 0;
  *(_BYTE *)(v3 + 136) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::AudioAnimationSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::AudioAnimationSystem>(uint64_t a1)
{
  uint64_t v1;

  re::ecs2::System::System(a1, 1);
  *(_QWORD *)v1 = &off_24ED655B8;
  *(_QWORD *)(v1 + 104) = 0;
  *(_BYTE *)(v1 + 112) = 0;
  *(_BYTE *)(v1 + 136) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::AudioAnimationSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AudioAnimationSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioAnimationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioAnimationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioAnimationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioAnimationSystem>, this);
}

double re::ecs2::AudioAnimationComponent::AudioAnimationComponent(re::ecs2::AudioAnimationComponent *this)
{
  uint64_t v1;
  double result;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED65568;
  *(_QWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 44) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 1065353216;
  *(_DWORD *)(v1 + 64) = 1065353216;
  *(_BYTE *)(v1 + 68) = 0;
  *(_QWORD *)(v1 + 128) = 0;
  *(_BYTE *)(v1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_DWORD *)(v1 + 184) = 0;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)(v1 + 117) = 0;
  *(_QWORD *)(v1 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_DWORD *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 236) = 0x7FFFFFFFLL;
  return result;
}

void re::ecs2::AudioAnimationComponent::~AudioAnimationComponent(re::ecs2::AudioAnimationComponent *this)
{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED65568;
  v2 = (re::ecs2::AudioAnimationComponent *)((char *)this + 72);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 25);
  re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 19);
  re::AssetHandle::~AssetHandle(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::AudioAnimationComponent::~AudioAnimationComponent(this);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::AudioAnimationComponent::setAudioAssetForEvent(re::ecs2::AudioAnimationComponent *this, re::AssetHandle *a2, const re::DynamicString *a3)
{
  const char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *var1;
  const char *v13;
  StringID v14;

  if ((*((_QWORD *)a3 + 1) & 1) != 0)
    v5 = (const char *)*((_QWORD *)a3 + 2);
  else
    v5 = (char *)a3 + 9;
  *(_QWORD *)&v14.var0 = 0;
  v14.var1 = (char *)&str_110;
  v6 = *(_QWORD *)&v14.var0;
  v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * ((*(_QWORD *)&v14.var0 >> 31) ^ (*(_QWORD *)&v14.var0 >> 1))) ^ ((0xBF58476D1CE4E5B9
                                                                                                * ((*(_QWORD *)&v14.var0 >> 31) ^ (*(_QWORD *)&v14.var0 >> 1))) >> 27));
  v8 = v7 ^ (v7 >> 31);
  if (!*((_QWORD *)this + 19))
  {
    LODWORD(v9) = 0;
    goto LABEL_13;
  }
  v9 = v8 % *((unsigned int *)this + 44);
  v10 = *(unsigned int *)(*((_QWORD *)this + 20) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_13:
    re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::AssetHandle&>((uint64_t)this + 152, v9, v8, &v14, a2);
    goto LABEL_14;
  }
  v11 = *((_QWORD *)this + 21);
  var1 = v14.var1;
  while (1)
  {
    if ((*(_QWORD *)(v11 + 48 * v10 + 8) ^ v6) <= 1)
    {
      v13 = *(const char **)(v11 + 48 * v10 + 16);
      if (v13 == var1 || !strcmp(v13, var1))
        break;
    }
    v10 = *(_DWORD *)(v11 + 48 * v10) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF)
      goto LABEL_13;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(v11 + 48 * v10 + 24));
  re::AssetHandle::AssetHandle((re::AssetHandle *)(*((_QWORD *)this + 21) + 48 * v10 + 24), a2);
LABEL_14:
  ++*((_DWORD *)this + 48);
  re::StringID::destroyString((re::StringID *)&v14);
}

void re::ecs2::AudioAnimationComponent::removeAudioAssetForEvent(re::ecs2::AudioAnimationComponent *this, const re::DynamicString *a2)
{
  char *v2;
  const char *v3;
  _QWORD v4[2];

  v2 = (char *)this + 152;
  if ((*((_QWORD *)a2 + 1) & 1) != 0)
    v3 = (const char *)*((_QWORD *)a2 + 2);
  else
    v3 = (char *)a2 + 9;
  v4[0] = 0;
  v4[1] = &str_110;
  re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v2, v4);
  re::StringID::destroyString((re::StringID *)v4);
}

uint64_t re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;

  if (!*(_QWORD *)a1)
    return 0;
  v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (!re::StringID::operator==((_QWORD *)(v9 + 48 * v7 + 8), a2))
  {
    while (1)
    {
      v10 = v7;
      v11 = *(_DWORD *)(v9 + 48 * v7);
      v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (re::StringID::operator==((_QWORD *)(v9 + 48 * v7 + 8), a2))
      {
        *(_DWORD *)(v9 + 48 * v10) = *(_DWORD *)(v9 + 48 * v10) & 0x80000000 | *(_DWORD *)(v9
                                                                                             + 48 * v7) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 48 * v7) & 0x7FFFFFFF;
LABEL_9:
  re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v7));
  v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v7) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v7) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  return 1;
}

uint64_t re::ecs2::AudioAnimationComponent::getPlaybackTokenForEvent(re::ecs2::AudioAnimationComponent *this, const re::DynamicString *a2)
{
  char *v2;
  const char *v3;
  uint64_t v4;
  _QWORD v6[2];

  v2 = (char *)this + 200;
  if ((*((_QWORD *)a2 + 1) & 1) != 0)
    v3 = (const char *)*((_QWORD *)a2 + 2);
  else
    v3 = (char *)a2 + 9;
  v6[0] = 0;
  v6[1] = &str_110;
  v4 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v2, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4)
    return *(_QWORD *)v4;
  else
    return 0;
}

uint64_t re::ecs2::AudioAnimationSystem::willAddSystemToECSService(re::ecs2::AudioAnimationSystem *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v2);
  *((_QWORD *)this + 13) = result;
  return result;
}

uint64_t re::ecs2::AudioAnimationSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(_QWORD *)(this + 104) = 0;
  return this;
}

void re::ecs2::AudioAnimationSystem::willAddSceneToECSService(uint64_t (**this)(), re::ecs2::Scene *a2)
{
  uint64_t v4;
  re *v5;
  re::EventBus *v6;
  uint64_t v7;
  _QWORD *v8;
  void *Type;
  unint64_t EventInfo;
  re *v11;
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t (*v14)();
  _BYTE v15[24];
  uint64_t v16;
  _BYTE *v17;
  _BYTE v18[24];
  uint64_t v19;
  _BYTE *v20;
  _BYTE v21[24];
  uint64_t v22;
  _BYTE *v23;
  uint64_t (**v24)();
  _QWORD v25[5];
  uint64_t v26;
  uint64_t (***v27)();
  _BYTE v28[24];
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v24 = this;
  v25[0] = re::ecs2::AudioAnimationSystem::didAddComponents;
  v25[1] = 0;
  v25[2] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>,re::Slice<re::ecs2::AudioAnimationComponent*>>::createSubscription<re::ecs2::AudioAnimationSystem>(re::ecs2::AudioAnimationSystem *,REEventHandlerResult (re::ecs2::AudioAnimationSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>*,re::Slice<re::ecs2::AudioAnimationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>,re::Slice<re::ecs2::AudioAnimationComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioAnimationComponent*>&&)#1}::__invoke;
  re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 128), (uint64_t)&v24);
  v6 = (re::EventBus *)*((_QWORD *)a2 + 36);
  if (v6)
  {
    v7 = re::globalAllocators(v5)[2];
    v19 = v7;
    v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, 32, 0);
    *v8 = &off_24ED65670;
    v8[1] = this;
    v8[2] = re::ecs2::AudioAnimationSystem::animationTimelineEventDidStart;
    v8[3] = 0;
    v20 = v8;
    v16 = v7;
    v17 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v15, (uint64_t)v18);
    v22 = v16;
    v23 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v21, (uint64_t)v15);
    Type = re::EventBus::getTypeId<REAnimationHasTimelineEventStart>();
    EventInfo = re::EventBus::addOrGetEventInfo(v6, (uint64_t)Type);
    v29 = v22;
    v30 = 0;
    v11 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v28, (uint64_t)v21);
    v26 = re::globalAllocators(v11)[2];
    v27 = 0;
    v24 = &off_24ED65778;
    v25[3] = v29;
    v25[4] = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v25, (uint64_t)v28);
    v27 = &v24;
    if (v30)
    {
      (**(void (***)(_BYTE *))v30)(v30);
      if (v30 != v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
    }
    v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)&v24, 0, 0xE32FFACEFE22CE5);
    v14 = v13;
    if (v27)
    {
      ((void (*)(uint64_t (***)()))**v27)(v27);
      if (v27 != &v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
    }
    if (v23)
    {
      (**(void (***)(_BYTE *))v23)(v23);
      if (v23 != v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
    }
    if (!*((_BYTE *)this + 112))
      *((_BYTE *)this + 112) = 1;
    this[15] = (uint64_t (*)())v12;
    this[16] = v14;
    if (v17)
    {
      (**(void (***)(_BYTE *))v17)(v17);
      if (v17 != v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
      v17 = 0;
    }
    if (v20)
    {
      (**(void (***)(_BYTE *))v20)(v20);
      if (v20 != v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    }
  }
}

uint64_t re::ecs2::AudioAnimationSystem::animationTimelineEventDidStart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::EntityComponentCollection *v4;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  BOOL v7;
  re::ecs2::AudioPlayerComponent **v8;
  uint64_t v9;
  uint64_t v10;
  StringID *v11;
  re *v12;
  char *v13;
  NSObject *v14;
  const re::AssetHandle *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  NSObject *v24;
  NSObject *v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  re *v35;
  re::ecs2::AudioAnimationComponent *v36;
  _BYTE *v37;
  NSObject *v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v47;
  int v48;
  uint64_t v49;
  int *v50;
  int v51;
  int v52;
  NSObject *v53;
  char *var1;
  NSObject *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint8_t v59[24];
  __int128 buf;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v4 = (re::ecs2::EntityComponentCollection *)(a2 + 32);
  v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v6 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
    return 0;
  v8 = (re::ecs2::AudioPlayerComponent **)v6;
  v10 = *(_QWORD *)(a3 + 32);
  v9 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &str_110;
  v11 = (StringID *)re::TimelineEventData::parameter<re::StringID>(v9, v10, &buf);
  re::StringID::destroyString((re::StringID *)&buf);
  if (v11)
  {
    if (*(_QWORD *)&v11->var0 > 1uLL || (v13 = v11->var1) == 0 || *v13)
    {
      v14 = *re::audioLogObjects(v12);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        v53 = v14;
        var1 = v11->var1;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = var1;
        _os_log_debug_impl(&dword_224FE9000, v53, OS_LOG_TYPE_DEBUG, "AudioAnimationSystem: Play audio animation event: %s", (uint8_t *)&buf, 0xCu);

      }
      v15 = (const re::AssetHandle *)re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v5 + 152, v11);
      if (!v15)
      {
        v24 = *re::audioLogObjects(0);
        v23 = 1;
        v12 = (re *)os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
        if ((_DWORD)v12)
        {
          v25 = v24;
          v26 = v11->var1;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v26;
          _os_log_impl(&dword_224FE9000, v25, OS_LOG_TYPE_INFO, "AudioAnimationSystem: no audio asset defined for event: %s", (uint8_t *)&buf, 0xCu);

        }
        goto LABEL_29;
      }
      re::AssetHandle::AssetHandle((re::AssetHandle *)v59, v15);
      v16 = re::ecs2::AudioPlayerComponent::prepare((uint64_t)v8, (re::AssetHandle *)v59);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v59);
      re::ecs2::AudioPlayerComponent::play((uint64_t)v8, v16, 1);
      v17 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&v11->var0 >> 31) ^ (*(_QWORD *)&v11->var0 >> 1));
      v18 = (0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31);
      if (*(_QWORD *)(v5 + 200))
      {
        v19 = v18 % *(unsigned int *)(v5 + 224);
        v20 = *(unsigned int *)(*(_QWORD *)(v5 + 208) + 4 * v19);
        if ((_DWORD)v20 != 0x7FFFFFFF)
        {
          v57 = v18 % *(unsigned int *)(v5 + 224);
          v58 = v16;
          v21 = *(_QWORD *)(v5 + 216);
          while (1)
          {
            v22 = v21 + 32 * v20;
            v12 = (re *)re::StringID::operator==((_QWORD *)(v22 + 8), v11);
            if ((v12 & 1) != 0)
              break;
            v20 = *(_DWORD *)(v21 + 32 * v20) & 0x7FFFFFFF;
            if (v20 == 0x7FFFFFFF)
            {
              v16 = v58;
              LODWORD(v19) = v57;
              goto LABEL_22;
            }
          }
          *(_QWORD *)(v22 + 24) = v58;
          goto LABEL_28;
        }
      }
      else
      {
        LODWORD(v19) = 0;
      }
LABEL_22:
      v27 = *(unsigned int *)(v5 + 236);
      if ((_DWORD)v27 == 0x7FFFFFFF)
      {
        v27 = *(unsigned int *)(v5 + 232);
        v28 = v27;
        if ((_DWORD)v27 == *(_DWORD *)(v5 + 224))
        {
          re::HashTable<re::StringID,unsigned long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(v5 + 200, 2 * *(_DWORD *)(v5 + 228));
          LODWORD(v19) = v18 % *(unsigned int *)(v5 + 224);
          v28 = *(_DWORD *)(v5 + 232);
        }
        *(_DWORD *)(v5 + 232) = v28 + 1;
        v29 = *(_QWORD *)(v5 + 216);
        v30 = *(_DWORD *)(v29 + 32 * v27);
      }
      else
      {
        v29 = *(_QWORD *)(v5 + 216);
        v30 = *(_DWORD *)(v29 + 32 * v27);
        *(_DWORD *)(v5 + 236) = v30 & 0x7FFFFFFF;
      }
      v31 = 32 * v27;
      *(_DWORD *)(v29 + v31) = v30 | 0x80000000;
      v32 = v19;
      *(_DWORD *)(*(_QWORD *)(v5 + 216) + v31) = *(_DWORD *)(*(_QWORD *)(v5 + 216) + 32 * v27) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v5 + 208) + 4 * v19);
      v12 = re::StringID::StringID((re::StringID *)(*(_QWORD *)(v5 + 216) + 32 * v27 + 8), v11);
      *(_QWORD *)(*(_QWORD *)(v5 + 216) + 32 * v27 + 24) = v16;
      *(_DWORD *)(*(_QWORD *)(v5 + 208) + 4 * v32) = v27;
      ++*(_DWORD *)(v5 + 228);
LABEL_28:
      v23 = 0;
      ++*(_DWORD *)(v5 + 240);
      goto LABEL_29;
    }
  }
  v23 = 1;
LABEL_29:
  v33 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &str_110;
  v34 = (_QWORD *)re::TimelineEventData::parameter<re::StringID>(v9, v33, &buf);
  re::StringID::destroyString((re::StringID *)&buf);
  if (v34)
  {
    if (*v34 > 1uLL || (v37 = (_BYTE *)v34[1]) == 0 || *v37)
    {
      v38 = *re::audioLogObjects(v35);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        v55 = v38;
        v56 = v34[1];
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v56;
        _os_log_debug_impl(&dword_224FE9000, v55, OS_LOG_TYPE_DEBUG, "AudioAnimationSystem: Stop audio animation event: %s", (uint8_t *)&buf, 0xCu);

      }
      v39 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v5 + 200, v34);
      if (v39)
      {
        v40 = v39;
        re::ecs2::AudioPlayerComponent::stop(v8, *v39);
        re::ecs2::AudioPlayerComponent::destroy(v8, *v40);
        if (*(_QWORD *)(v5 + 200))
        {
          v41 = 0xBF58476D1CE4E5B9 * ((*v34 >> 31) ^ (*v34 >> 1));
          v42 = ((0x94D049BB133111EBLL * (v41 ^ (v41 >> 27))) ^ ((0x94D049BB133111EBLL * (v41 ^ (v41 >> 27))) >> 31))
              % *(unsigned int *)(v5 + 224);
          v43 = *(_QWORD *)(v5 + 208);
          v44 = *(unsigned int *)(v43 + 4 * v42);
          if ((_DWORD)v44 != 0x7FFFFFFF)
          {
            v45 = *(_QWORD *)(v5 + 216);
            if (re::StringID::operator==((_QWORD *)(v45 + 32 * v44 + 8), v34))
            {
              *(_DWORD *)(v43 + 4 * v42) = *(_DWORD *)(v45 + 32 * v44) & 0x7FFFFFFF;
LABEL_47:
              v49 = *(_QWORD *)(v5 + 216);
              v50 = (int *)(v49 + 32 * v44);
              v51 = *v50;
              if (*v50 < 0)
              {
                *v50 = v51 & 0x7FFFFFFF;
                re::StringID::destroyString((re::StringID *)(v50 + 2));
                v49 = *(_QWORD *)(v5 + 216);
                v51 = *(_DWORD *)(v49 + 32 * v44);
              }
              *(_DWORD *)(v49 + 32 * v44) = *(_DWORD *)(v5 + 236) | v51 & 0x80000000;
              --*(_DWORD *)(v5 + 228);
              v52 = *(_DWORD *)(v5 + 240) + 1;
              *(_DWORD *)(v5 + 236) = v44;
              *(_DWORD *)(v5 + 240) = v52;
            }
            else
            {
              while (1)
              {
                v47 = v44;
                v48 = *(_DWORD *)(v45 + 32 * v44);
                v44 = v48 & 0x7FFFFFFF;
                if ((v48 & 0x7FFFFFFF) == 0x7FFFFFFF)
                  break;
                if (re::StringID::operator==((_QWORD *)(v45 + 32 * v44 + 8), v34))
                {
                  *(_DWORD *)(v45 + 32 * v47) = *(_DWORD *)(v45 + 32 * v47) & 0x80000000 | *(_DWORD *)(v45 + 32 * v44) & 0x7FFFFFFF;
                  goto LABEL_47;
                }
              }
            }
          }
        }
        goto LABEL_41;
      }
    }
  }
  if ((v23 & 1) == 0)
LABEL_41:
    re::ecs2::AudioAnimationSystem::markAudioPlayerDirty((re::ecs2::AudioAnimationSystem *)v5, v36);
  return 0;
}

uint64_t re::ecs2::AudioAnimationSystem::willRemoveSceneFromECSService(re::ecs2::AudioAnimationSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(_QWORD *)&v6 = this;
  *((_QWORD *)&v6 + 1) = re::ecs2::AudioAnimationSystem::didAddComponents;
  v7 = 0;
  v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>,re::Slice<re::ecs2::AudioAnimationComponent*>>::createSubscription<re::ecs2::AudioAnimationSystem>(re::ecs2::AudioAnimationSystem *,REEventHandlerResult (re::ecs2::AudioAnimationSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>*,re::Slice<re::ecs2::AudioAnimationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>,re::Slice<re::ecs2::AudioAnimationComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioAnimationComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 128, &v6);
  result = *((_QWORD *)a2 + 36);
  if (result && *((_BYTE *)this + 112))
  {
    result = re::EventBus::unsubscribe(result, *((_QWORD *)this + 15), *((_QWORD *)this + 16));
    if (*((_BYTE *)this + 112))
      *((_BYTE *)this + 112) = 0;
  }
  return result;
}

uint64_t re::ecs2::AudioAnimationSystem::didAddComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  if (a4)
  {
    v5 = 8 * a4;
    do
    {
      v6 = *a3;
      objc_msgSend(MEMORY[0x24BDBCF50], "standardUserDefaults");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "doubleForKey:", CFSTR("com.apple.re.AudioAnimationSyncThreshold"));
      *(_QWORD *)(v6 + 136) = v8;

      if (*(double *)(v6 + 136) == 0.0)
        *(_QWORD *)(v6 + 136) = 0x3FA5810624DD2F1BLL;
      ++a3;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t re::TimelineEventData::parameter<re::StringID>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 136, a3);
  if (v5 && v5[1] == 3)
    return re::EventParameterArray<re::StringID>::parameter((_QWORD *)(a1 + 280), a2, *v5);
  else
    return 0;
}

uint64_t re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v5 + 48 * v4 + 8), a2))
  {
    v4 = *(_DWORD *)(v5 + 48 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF)
      return 0;
  }
  return v5 + 48 * v4 + 24;
}

void re::ecs2::AudioAnimationSystem::markAudioPlayerDirty(re::ecs2::AudioAnimationSystem *this, re::ecs2::AudioAnimationComponent *a2)
{
  uint64_t v2;
  uint64_t v4;
  const re::ecs2::Component *v5;
  re::ecs2::NetworkComponent *v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v4)
    {
      v5 = (const re::ecs2::Component *)v4;
      v6 = *(re::ecs2::NetworkComponent **)(v2 + 200);
      if (v6)
        re::ecs2::NetworkComponent::markDirty(v6, v5);
    }
    else
    {
      v7 = *re::audioLogObjects(0);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v8 = *((_QWORD *)this + 12);
        v9 = 134217984;
        v10 = v8;
        _os_log_debug_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEBUG, "Expected AudioPlayerComponent on associated Entity for AudioAnimationComponent (token=%llu)", (uint8_t *)&v9, 0xCu);
      }
    }
  }
}

uint64_t re::ecs2::AudioAnimationSystem::update(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t *v7;
  re *isStatisticCollectionEnabled;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64x2_t *v12;
  unint64_t v13;
  unint64_t v14;
  int64x2_t v15;
  re::ecs2::SceneComponentTable *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  re *isPlaying;
  re::ecs2::AudioAnimationComponent *v24;
  re::ecs2::AudioPlayerComponent *v25;
  unint64_t v26;
  _BOOL4 v27;
  unint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  NSObject *v31;
  float v32;
  double v33;
  _BOOL8 v34;
  NSObject *v35;
  float v36;
  long double v37;
  re *v38;
  double v39;
  NSObject *v40;
  double v41;
  re *v42;
  NSObject *v43;
  char v44;
  float v45;
  float v46;
  uint64_t v47;
  float v48;
  char v49;
  NSObject *v50;
  NSObject *v51;
  NSObject *v52;
  char v53;
  _BYTE v54[16];
  uint64_t v55[2];
  uint8_t buf[32];
  _BYTE v57[12];
  __int16 v58;
  double v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  result = *(_QWORD *)(a1 + 104);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    if (a2)
    {
      v7 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v55);
      isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v7);
      if ((_DWORD)isStatisticCollectionEnabled)
      {
        v9 = re::profilerThreadContext(isStatisticCollectionEnabled);
        v10 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        v11 = v10 ? *(_QWORD *)(v10 + 24) : 0;
        v12 = *(int64x2_t **)(v9 + 152);
        if (v12)
        {
          v13 = v12[572].u64[0];
          if (v13 >= v11)
            v13 = v11;
          v12[572].i64[0] = v13;
          v14 = v12[572].u64[1];
          if (v14 <= v11)
            v14 = v11;
          v12[572].i64[1] = v14;
          v15 = vdupq_n_s64(1uLL);
          v15.i64[0] = v11;
          v12[573] = vaddq_s64(v12[573], v15);
          *(_BYTE *)(v9 + 184) = 0;
        }
      }
      v16 = (re::ecs2::SceneComponentTable *)(a2 + 200);
      re::ecs2::SceneComponentTable::get(v16, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v54, 3097, a1);
      v17 = re::ecs2::SceneComponentTable::get(v16, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      v18 = *(_QWORD *)(v17 + 24);
      if (v18)
      {
        v19 = *(uint64_t **)(v17 + 40);
        for (i = 8 * v18; i; i -= 8)
        {
          v21 = *v19;
          if (!*v19)
            goto LABEL_72;
          v22 = *(_QWORD *)(v21 + 16);
          if (!v22)
            goto LABEL_72;
          isPlaying = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v22 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (!isPlaying)
          {
            v31 = *re::audioLogObjects(0);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_224FE9000, v31, OS_LOG_TYPE_DEFAULT, "Expected AudioPlayerComponent on associated Entity", buf, 2u);
            }
            goto LABEL_72;
          }
          v25 = isPlaying;
          v26 = *(_QWORD *)(v21 + 96);
          v27 = v26 == 0;
          v28 = v26;
          if (!v26)
          {
            if (!*(_BYTE *)(v21 + 44))
              goto LABEL_72;
            re::AssetHandle::AssetHandle((re::AssetHandle *)buf, (const re::AssetHandle *)(v21 + 72));
            *(_QWORD *)(v21 + 96) = re::ecs2::AudioPlayerComponent::prepare((uint64_t)v25, (re::AssetHandle *)buf);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
            v28 = *(_QWORD *)(v21 + 96);
            if (!v28)
              goto LABEL_71;
          }
          v29 = (_OWORD *)(v21 + 32);
          v30 = *(_QWORD *)(v21 + 48);
          if (*(_QWORD *)(v21 + 104) == v30)
          {
            *(_DWORD *)(v21 + 40) = 0;
            *(_QWORD *)(v21 + 32) = 0;
            goto LABEL_66;
          }
          *(_QWORD *)(v21 + 104) = v30;
          v32 = *(float *)(v21 + 40);
          if (v32 <= 0.0)
            goto LABEL_65;
          v33 = *(double *)(v21 + 32) - *(float *)(v21 + 60);
          if (v33 >= 0.0)
          {
            v36 = *(float *)(v21 + 120);
            v37 = re::ecs2::AudioPlayerComponent::assetDurationFor(v25, v28);
            if (v37 != 0.0)
            {
              v39 = fmod(v33, v37);
              if (v36 == 0.0)
              {
                v40 = *re::audioLogObjects(v38);
                if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)v57 = 134217984;
                  *(double *)&v57[4] = v39;
                  _os_log_debug_impl(&dword_224FE9000, v40, OS_LOG_TYPE_DEBUG, "AudioAnimationComponent. Seeking on start to %f seconds", v57, 0xCu);
                }
                re::ecs2::AudioPlayerComponent::setPlaybackPositionFor(v25, v28, v39);
                goto LABEL_42;
              }
              v41 = re::ecs2::AudioPlayerComponent::playbackPositionFor((CMTimeValue *)v25, v28);
              if (vabdd_f64(v39, v41) <= *(double *)(v21 + 136) + *(float *)&a3)
              {
                v44 = 0;
              }
              else
              {
                re::ecs2::AudioPlayerComponent::setPlaybackPositionFor(v25, v28, v39);
                v43 = *re::audioLogObjects(v42);
                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)v57 = 134218240;
                  *(double *)&v57[4] = v39;
                  v58 = 2048;
                  v59 = v39 - v41;
                  _os_log_debug_impl(&dword_224FE9000, v43, OS_LOG_TYPE_DEBUG, "AudioAnimationComponent out of sync. Seeking to %5.4f sec, error = %5.4f sec", v57, 0x16u);
                }
LABEL_42:
                v44 = 1;
                v27 = 1;
              }
              v45 = 0.0;
              v46 = 0.0;
              if (!*(_BYTE *)(v21 + 68))
                v46 = *(float *)(v21 + 56) * *(float *)(v21 + 64);
              *(_QWORD *)v57 = v28;
              v47 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v25 + 32, (uint64_t *)v57);
              if (v47)
                v45 = *(float *)(v47 + 84);
              if (v46 != v45)
              {
                if (v36 == 0.0)
                  v48 = 0.0;
                else
                  v48 = *(float *)&a3;
                re::ecs2::AudioPlayerComponent::fadeToGain((re::ecs2::AudioPlayerComponent **)v25, v28, v46, v48);
                v27 = 1;
              }
              isPlaying = (re *)re::ecs2::AudioPlayerComponent::isPlaying(v25, *(_QWORD *)(v21 + 96));
              if ((isPlaying & 1) != 0)
              {
                v49 = 0;
                goto LABEL_63;
              }
              v53 = v44;
              if (!*(_BYTE *)(v21 + 144))
                goto LABEL_58;
              v50 = *re::audioLogObjects(isPlaying);
              isPlaying = (re *)os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG);
              if ((_DWORD)isPlaying)
              {
                *(_WORD *)v57 = 0;
                _os_log_debug_impl(&dword_224FE9000, v50, OS_LOG_TYPE_DEBUG, "AudioAnimationComponent skipping subsequent play command because we already sent a play command.", v57, 2u);
              }
              if (!*(_BYTE *)(v21 + 144))
              {
LABEL_58:
                v51 = *re::audioLogObjects(isPlaying);
                if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)v57 = 134217984;
                  *(_QWORD *)&v57[4] = v28;
                  _os_log_debug_impl(&dword_224FE9000, v51, OS_LOG_TYPE_DEBUG, "AudioAnimationComponent sending play(token=%llu)", v57, 0xCu);
                }
                if ((v53 & 1) == 0)
                  re::ecs2::AudioPlayerComponent::setPlaybackPositionFor(v25, v28, v39);
                v49 = 1;
                re::ecs2::AudioPlayerComponent::play((uint64_t)v25, v28, 1);
                v27 = 1;
LABEL_63:
                *(_BYTE *)(v21 + 144) = v49;
              }
              v32 = *(float *)(v21 + 40);
LABEL_65:
              if (v32 == 0.0)
              {
LABEL_66:
                if (*(_BYTE *)(v21 + 144)
                  || (isPlaying = (re *)re::ecs2::AudioPlayerComponent::isPlaying(v25, *(_QWORD *)(v21 + 96)),
                      (_DWORD)isPlaying))
                {
                  v52 = *re::audioLogObjects(isPlaying);
                  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)v57 = 134217984;
                    *(_QWORD *)&v57[4] = v28;
                    _os_log_debug_impl(&dword_224FE9000, v52, OS_LOG_TYPE_DEBUG, "AudioAnimationComponent sending pause(token=%llu)", v57, 0xCu);
                  }
                  re::ecs2::AudioPlayerComponent::pause((re::ecs2::AudioPlayerComponent **)v25, v28);
                  *(_BYTE *)(v21 + 144) = 0;
                  *(_OWORD *)(v21 + 112) = *v29;
                  *(_QWORD *)(v21 + 128) = *(_QWORD *)(v21 + 48);
                }
                else
                {
                  *(_BYTE *)(v21 + 144) = 0;
                  *(_OWORD *)(v21 + 112) = *v29;
                  *(_QWORD *)(v21 + 128) = *(_QWORD *)(v21 + 48);
                  if (!v27)
                    goto LABEL_72;
                }
              }
              else
              {
                *(_OWORD *)(v21 + 112) = *v29;
                *(_QWORD *)(v21 + 128) = *(_QWORD *)(v21 + 48);
                if (!v27)
                  goto LABEL_72;
              }
LABEL_71:
              re::ecs2::AudioAnimationSystem::markAudioPlayerDirty((re::ecs2::AudioAnimationSystem *)v21, v24);
            }
          }
          else
          {
            v34 = re::ecs2::AudioPlayerComponent::isPlaying(v25, v28);
            if (v34)
            {
              v35 = *re::audioLogObjects((re *)v34);
              if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)v57 = 134217984;
                *(_QWORD *)&v57[4] = v28;
                _os_log_debug_impl(&dword_224FE9000, v35, OS_LOG_TYPE_DEBUG, "AudioAnimationComponent sending stop(token=%llu)", v57, 0xCu);
              }
              re::ecs2::AudioPlayerComponent::stop((re::ecs2::AudioPlayerComponent **)v25, v28);
              goto LABEL_71;
            }
            if (!v26)
              goto LABEL_71;
          }
LABEL_72:
          ++v19;
        }
      }
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v54);
      return re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v55);
    }
  }
  return result;
}

void re::ecs2::AudioAnimationSystem::~AudioAnimationSystem(re::ecs2::AudioAnimationSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AudioAnimationSystem::typeInfo(re::ecs2::AudioAnimationSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioAnimationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioAnimationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioAnimationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioAnimationSystem>, 0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::internal::CallableMemFn<re::ecs2::AudioAnimationSystem,REEventHandlerResult (re::ecs2::AudioAnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioAnimationSystem,REEventHandlerResult (re::ecs2::AudioAnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioAnimationSystem,REEventHandlerResult (re::ecs2::AudioAnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED65670;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioAnimationSystem,REEventHandlerResult (re::ecs2::AudioAnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED65670;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioAnimationSystem,REEventHandlerResult (re::ecs2::AudioAnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::size()
{
  return 32;
}

_QWORD *re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  _QWORD v10[3];

  memset(v10, 0, sizeof(v10));
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 12;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 48 * v10 + 8, *(_QWORD *)(a2 + 16) + 48 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 48 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

double re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 48;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(_DWORD *a1)
{
  if ((*a1 & 0x80000000) != 0)
  {
    *a1 &= ~0x80000000;
    re::StringID::destroyString((re::StringID *)(a1 + 2));
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 6));
  }
}

void re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 48;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 48 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 48 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 48 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8), a4);
  v15 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9);
  v15[3] = 0;
  v15[4] = 0;
  v15[5] = 0;
  v15[4] = a5[1];
  a5[1] = 0;
  v16 = v15[3];
  v15[3] = 0;
  v15[3] = *a5;
  *a5 = v16;
  v17 = v15[5];
  v15[5] = a5[2];
  a5[2] = v17;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(_QWORD *)(a1 + 16) + v3));
        ++v4;
        v3 += 48;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 48 * v11;
    return v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v10 + 48 * v9 + 8), a2))
  {
    v9 = *(_DWORD *)(v10 + 48 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v14 = (_QWORD *)(v10 + 48 * v9);
  v15 = v14[4];
  v14[4] = a3[1];
  a3[1] = v15;
  v16 = v14[3];
  v14[3] = 0;
  v14[3] = *a3;
  *a3 = v16;
  v17 = v14[5];
  v14[5] = a3[2];
  a3[2] = v17;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 48 * v9;
  return v12 + 24;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 48 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 12;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 48 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 48 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

id re::internal::defaultRetain<re::ecs2::AudioAnimationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AudioAnimationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::AssetHandle&>(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, const re::AssetHandle *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 48 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 48 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 48 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8), a4);
  re::AssetHandle::AssetHandle((re::AssetHandle *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 24), a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>,re::Slice<re::ecs2::AudioAnimationComponent*>>::createSubscription<re::ecs2::AudioAnimationSystem>(re::ecs2::AudioAnimationSystem *,REEventHandlerResult (re::ecs2::AudioAnimationSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>*,re::Slice<re::ecs2::AudioAnimationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>,re::Slice<re::ecs2::AudioAnimationComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioAnimationComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

void *re::EventBus::getTypeId<REAnimationHasTimelineEventStart>()
{
  unsigned __int8 v0;
  _UNKNOWN **v1;
  int v3;
  const char *v4;

  v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v0 & 1) == 0)
  {
    v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v3)
    {
      re::EventBus::getTypeId<REAnimationHasTimelineEventStart>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"32REAnimationHasTimelineEventStart" & 0x7FFFFFFFFFFFFFFFLL), v4);
      v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return v1[243];
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTimelineEventStart>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED65778;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTimelineEventStart>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED65778;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTimelineEventStart>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTimelineEventStart>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED65778;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTimelineEventStart>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED65778;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTimelineEventStart>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::EventParameterArray<re::StringID>::parameter(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = a3 + *a1 * a2;
  if (a1[3] <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return a1[5] + 16 * v3;
}

void re::HashTable<re::StringID,unsigned long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        do
        {
          if ((*(_DWORD *)v6 & 0x80000000) != 0)
          {
            v13 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v6 + 8) >> 31) ^ (*(_QWORD *)(v6 + 8) >> 1));
            v14 = (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::StringID,unsigned long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            v21 = 32 * v17;
            *(_DWORD *)(v19 + v21) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v21) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8), (const StringID *)(v6 + 8));
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 24) = *(_QWORD *)(v6 + 24);
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v6 += 32;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

uint64_t *re::ecs2::allocInfo_ThrottleService(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_246);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_246))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410E7D8, 0);
    *(uint64_t *)((char *)&qword_25410E7E8 + 6) = 0;
    qword_25410E7E8 = 0;
    qword_25410E7F8 = 0;
    qword_25410E800 = 0xFFFFFFFFLL;
    qword_25410E7D8 = (uint64_t)&off_24ED7DAA8;
    qword_25410E808 = (uint64_t)"ThrottleService";
    dword_25410E810 = 0;
    unk_25410E818 = 0u;
    unk_25410E828 = 0u;
    unk_25410E838 = 0u;
    qword_25410E848 = 0;
    __cxa_guard_release(&_MergedGlobals_246);
  }
  return &qword_25410E7D8;
}

void re::ecs2::initInfo_ThrottleService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x174E2110AB251016;
  v5[1] = "ThrottleService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::ThrottleService>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::ThrottleService>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_ThrottleService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_ThrottleService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ThrottleService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ThrottleService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ThrottleService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ThrottleService>, this);
}

id re::internal::defaultRetain<re::ecs2::ThrottleService>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ThrottleService>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_PreviewSupportComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_247);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_247))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410E868, 0);
    *(uint64_t *)((char *)&qword_25410E878 + 6) = 0;
    qword_25410E878 = 0;
    qword_25410E888 = 0;
    qword_25410E890 = 0xFFFFFFFFLL;
    qword_25410E868 = (uint64_t)&off_24ED7DAA8;
    qword_25410E898 = (uint64_t)"PreviewSupportComponent";
    dword_25410E8A0 = 0;
    unk_25410E8A8 = 0u;
    unk_25410E8B8 = 0u;
    unk_25410E8C8 = 0u;
    qword_25410E8D8 = 0;
    __cxa_guard_release(&_MergedGlobals_247);
  }
  return &qword_25410E868;
}

void re::ecs2::initInfo_PreviewSupportComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x71CA9DDC24F30B6CLL;
  v10[1] = "PreviewSupportComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410E860);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410E860);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410E858 = v8;
      __cxa_guard_release(&qword_25410E860);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410E858;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PreviewSupportComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PreviewSupportComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PreviewSupportComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PreviewSupportComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::PreviewSupportComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57C08;
}

void *re::internal::defaultDestruct<re::ecs2::PreviewSupportComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::PreviewSupportComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57C08;
}

void *re::internal::defaultDestructV2<re::ecs2::PreviewSupportComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PreviewSupportComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PreviewSupportComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PreviewSupportComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PreviewSupportComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PreviewSupportComponent>, this);
}

void re::ecs2::PinHandle::~PinHandle(id *this)
{
  re::StringID::destroyString((re::StringID *)(this + 3));
  re::ecs2::EntityHandle::reset(this);
  objc_destroyWeak(this);
  *this = 0;
}

void re::ecs2::PinHandle::pin(id *this@<X0>, _BYTE *a2@<X8>)
{
  id WeakRetained;
  char *v5;
  char *v6;
  re::ecs2::PinComponent *v7;
  const StringID *v8;
  _QWORD *v9;
  re::ecs2::PinSkeletalPoseHelper *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  const re::ecs2::SkeletalPoseComponent *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  int32x4_t v23;
  __int128 v24;
  unsigned __int8 v25[8];
  _BYTE v26[16];
  _OWORD v27[2];
  uint64_t v28[3];
  int v29;
  uint64_t v30;
  _BYTE v31[16];
  void (**v32)(_QWORD);
  int32x4_t v33;
  __int128 v34;
  char v35[16];
  void (**v36)(_QWORD);
  __int128 v37;
  __int128 v38;
  unsigned __int8 v39;
  StringID v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained(this);
  if (!WeakRetained)
    goto LABEL_15;

  v5 = (char *)objc_loadWeakRetained(this);
  if (v5)
  {
    v6 = v5 - 8;

  }
  else
  {
    v6 = 0;
  }
  v7 = (re::ecs2::PinComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v7
    && (v8 = (const StringID *)(this + 3),
        re::ecs2::PinComponent::pinByName(v7, (const re::StringID *)(this + 3), (uint64_t)v35),
        v35[0]))
  {
    v27[0] = v37;
    v27[1] = v38;
    v25[0] = v39;
    if (v39)
    {
      re::StringID::StringID((re::StringID *)v26, &v40);
      v9 = objc_loadWeakRetained(this);

      v10 = (re::ecs2::PinSkeletalPoseHelper *)v9[28];
      v11 = objc_loadWeakRetained(this);

      if (v10
        && (v12 = v11[21]) != 0
        && (v13 = *(_QWORD *)(v12 + 40)) != 0
        && (v14 = atomic_load((unsigned int *)(v13 + 704)), v14 == 2)
        && (v15 = (const re::ecs2::SkeletalPoseComponent *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(v12 + 32)),
            re::ecs2::PinSkeletalPoseHelper::pinByName(v10, v15, (const re::MeshAsset *)v8, v31),
            v31[0]))
      {
        v23 = v33;
        v24 = v34;
        *(_QWORD *)&v16 = 0x7F0000007FLL;
        *((_QWORD *)&v16 + 1) = 0x7F0000007FLL;
        v22[0] = vdupq_n_s32(0x7F800000u);
        v22[1] = v16;
        v21 = 0;
        v19 = 0;
        v18 = 0uLL;
        LODWORD(v20) = 0;
        re::ecs2::Pin::Pin((uint64_t)v28, v8, &v23, v27, v25, v22, (uint64_t *)&v18);
        re::Optional<re::ecs2::Pin>::Optional((uint64_t)a2, (uint64_t)v28);
        re::ecs2::Pin::~Pin((re::ecs2::Pin *)v28);
        re::DynamicArray<re::ecs2::PinAlignment>::deinit((uint64_t)&v18);
        if (v31[0])
          (*v32)(&v32);
      }
      else
      {
        *a2 = 0;
      }
    }
    else
    {
      v18 = 0uLL;
      v19 = 0;
      v20 = 0x3F80000000000000;
      LOBYTE(v22[0]) = 0;
      *(_QWORD *)&v17 = 0x7F0000007FLL;
      *((_QWORD *)&v17 + 1) = 0x7F0000007FLL;
      v23 = vdupq_n_s32(0x7F800000u);
      v24 = v17;
      v30 = 0;
      memset(v28, 0, sizeof(v28));
      v29 = 0;
      re::ecs2::Pin::Pin((uint64_t)v31, v8, &v18, v27, (unsigned __int8 *)v22, &v23, v28);
      re::Optional<re::ecs2::Pin>::Optional((uint64_t)a2, (uint64_t)v31);
      re::ecs2::Pin::~Pin((re::ecs2::Pin *)v31);
      re::DynamicArray<re::ecs2::PinAlignment>::deinit((uint64_t)v28);
      if (LOBYTE(v22[0]))
        re::StringID::destroyString((re::StringID *)((char *)v22 + 8));
    }
    if (v25[0])
      re::StringID::destroyString((re::StringID *)v26);
    if (v35[0])
      (*v36)(&v36);
  }
  else
  {
LABEL_15:
    *a2 = 0;
  }
}

void re::ecs2::PinHandle::pinPose(id *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  id WeakRetained;
  float32x4_t v7;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v18;
  float32x4_t v19;
  __int128 v24;
  _BYTE v25[16];
  void (**v26)(_QWORD);
  float32x4_t v27;
  int32x4_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained(this);
  if (WeakRetained)
  {

    re::ecs2::PinHandle::pin(this, v25);
    if (v25[0])
    {
      v7 = v27;
      _Q1 = v28;
      if (a2)
      {
        v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL);
        v10 = *((float32x4_t *)this + 3);
        _Q4 = *((float32x4_t *)this + 4);
        v12 = vnegq_f32((float32x4_t)v28);
        v13 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), v12), v10, v9);
        v14 = (int8x16_t)vaddq_f32(v13, v13);
        v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL);
        v16 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), v12), v15, v9);
        v7 = vaddq_f32(v27, vaddq_f32(vaddq_f32(v10, vmulq_laneq_f32(v15, (float32x4_t)v28, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), v16, 0xCuLL)));
        _Q3 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q4, (int32x4_t)_Q4), (int8x16_t)_Q4, 0xCuLL), v12), _Q4, v9);
        v18 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q3, (int32x4_t)_Q3), _Q3, 0xCuLL), _Q4, (float32x4_t)v28, 3);
        _Q3.i32[0] = _Q4.i32[3];
        v19 = vmlaq_laneq_f32(v18, (float32x4_t)v28, _Q4, 3);
        __asm { FMLA            S4, S3, V1.S[3] }
        v19.i32[3] = _Q4.i32[0];
        _Q1 = (int32x4_t)v19;
      }
      *(_BYTE *)a3 = 1;
      *(float32x4_t *)(a3 + 16) = v7;
      *(int32x4_t *)(a3 + 32) = _Q1;
      (*v26)(&v26);
    }
    else
    {
      *(_BYTE *)a3 = 0;
    }
  }
  else
  {
    *(_BYTE *)a3 = 1;
    v24 = *((_OWORD *)this + 4);
    *(_OWORD *)(a3 + 16) = *((_OWORD *)this + 3);
    *(_OWORD *)(a3 + 32) = v24;
  }
}

BOOL re::ecs2::PinHandle::operator==(uint64_t a1, uint64_t a2)
{
  char *WeakRetained;
  char *v5;
  char *v6;
  char *v7;
  _BOOL8 result;
  uint32x4_t v9;

  WeakRetained = (char *)objc_loadWeakRetained((id *)a1);
  if (WeakRetained)
  {
    v5 = WeakRetained - 8;

  }
  else
  {
    v5 = 0;
  }
  v6 = (char *)objc_loadWeakRetained((id *)a2);
  if (v6)
  {
    v7 = v6 - 8;

  }
  else
  {
    v7 = 0;
  }
  if (v5 != v7)
    return 0;
  result = re::StringID::operator==((_QWORD *)(a1 + 24), (_QWORD *)(a2 + 24));
  if (result)
  {
    v9 = (uint32x4_t)vceqq_f32(*(float32x4_t *)(a1 + 48), *(float32x4_t *)(a2 + 48));
    v9.i32[3] = v9.i32[2];
    if ((vminvq_u32(v9) & 0x80000000) == 0)
      return 0;
    return vminvq_u32((uint32x4_t)vceqq_f32(*(float32x4_t *)(a1 + 64), *(float32x4_t *)(a2 + 64))) >> 31;
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_PinHandle(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410E8E8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410E8E8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410E908, 0);
    *(uint64_t *)((char *)&qword_25410E918 + 6) = 0;
    qword_25410E918 = 0;
    qword_25410E928 = 0;
    qword_25410E930 = 0xFFFFFFFFLL;
    qword_25410E908 = (uint64_t)&off_24ED7DAA8;
    qword_25410E938 = (uint64_t)"PinHandle";
    dword_25410E940 = 0;
    xmmword_25410E948 = 0u;
    unk_25410E958 = 0u;
    xmmword_25410E968 = 0u;
    qword_25410E978 = 0;
    __cxa_guard_release(&qword_25410E8E8);
  }
  return &qword_25410E908;
}

void re::ecs2::initInfo_PinHandle(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0x818C5825CFFALL;
  v18[1] = "PinHandle";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_248);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_248);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "m_entityHandle";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25410E8F0 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::StringID>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "m_pinName";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x1800000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25410E8F8 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v15 = re::introspect_PoseF((re::IntrospectionBase **)1);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "m_offsetFromPin";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x3000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25410E900 = v16;
      __cxa_guard_release(&_MergedGlobals_248);
    }
  }
  *((_QWORD *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25410E8F0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PinHandle>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PinHandle>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PinHandle>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PinHandle>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

void re::internal::defaultConstruct<re::ecs2::PinHandle>(int a1, int a2, id *location)
{
  objc_initWeak(location, 0);
  location[1] = 0;
  location[2] = 0;
  re::ecs2::EntityHandle::reset(location);
  location[3] = 0;
  location[4] = &str_110;
  location[6] = 0;
  location[7] = 0;
  location[8] = 0;
  location[9] = (id)0x3F80000000000000;
}

void re::internal::defaultDestruct<re::ecs2::PinHandle>(uint64_t a1, uint64_t a2, id *a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 3));
  re::ecs2::EntityHandle::reset(a3);
  objc_destroyWeak(a3);
  *a3 = 0;
}

void re::internal::defaultConstructV2<re::ecs2::PinHandle>(uint64_t a1)
{
  objc_initWeak((id *)a1, 0);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  re::ecs2::EntityHandle::reset((id *)a1);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0x3F80000000000000;
}

void re::internal::defaultDestructV2<re::ecs2::PinHandle>(id *a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  re::ecs2::EntityHandle::reset(a1);
  objc_destroyWeak(a1);
  *a1 = 0;
}

uint64_t re::ecs2::introspect_PinHandle(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PinHandle", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PinHandle, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PinHandle, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PinHandle>, this);
}

void re::ecs2::introspect_GroundingShadowFadeBehaviorNearPhysicalObjects(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  StringID v36;
  _QWORD v37[2];
  _QWORD v38[61];

  v2 = atomic_load((unsigned __int8 *)&qword_25410E988);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_25410E988);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Default";
      qword_25410E9A8 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Fade";
      qword_25410E9B0 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 2;
      *(_QWORD *)(v32 + 16) = "Constant";
      qword_25410E9B8 = v32;
      __cxa_guard_release(&qword_25410E988);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25410E990);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25410E990))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25410E9F0, "GroundingShadowFadeBehaviorNearPhysicalObjects", 4, 4, 1, 1);
    qword_25410E9F0 = (uint64_t)&off_24ED7D9E8;
    qword_25410EA30 = (uint64_t)&re::ecs2::introspect_GroundingShadowFadeBehaviorNearPhysicalObjects(BOOL)::enumTable;
    dword_25410EA00 = 9;
    __cxa_guard_release(&qword_25410E990);
  }
  if ((_MergedGlobals_249 & 1) == 0)
  {
    _MergedGlobals_249 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25410E9F0, a2);
    v34 = 0xC6305B05C0246B98;
    v35 = "GroundingShadowFadeBehaviorNearPhysicalObjects";
    v38[0] = 208862;
    v38[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v38);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v38);
      v6 = (unsigned int *)qword_25410EA30;
      v37[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v36.var0 = 2 * v12;
            v36.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v16, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v36.var0 = 2 * v20;
              v36.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v24, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v25);
      xmmword_25410EA10 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "GroundingShadowFadeBehaviorNearPhysicalObjects", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::ecs2::allocInfo_GroundingShadowComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410E998);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410E998))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410EA38, 0);
    *(uint64_t *)((char *)&qword_25410EA48 + 6) = 0;
    qword_25410EA48 = 0;
    qword_25410EA58 = 0;
    qword_25410EA60 = 0xFFFFFFFFLL;
    qword_25410EA38 = (uint64_t)&off_24ED7DAA8;
    qword_25410EA68 = (uint64_t)"GroundingShadowComponent";
    dword_25410EA70 = 0;
    xmmword_25410EA78 = 0u;
    unk_25410EA88 = 0u;
    xmmword_25410EA98 = 0u;
    qword_25410EAA8 = 0;
    __cxa_guard_release(&qword_25410E998);
  }
  return &qword_25410EA38;
}

void re::ecs2::initInfo_GroundingShadowComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  __int128 v30;

  v29[0] = 0xB9FED500E734E2C4;
  v29[1] = "GroundingShadowComponent";
  re::StringID::destroyString((re::StringID *)v29);
  *((_OWORD *)this + 2) = v30;
  v4 = atomic_load((unsigned __int8 *)&qword_25410E9A0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410E9A0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410E9C0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "enableIBLShadow";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410E9C8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "enableMeshShadow";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1B00000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25410E9D0 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_BOOL((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "enableReceiveIBLShadow";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x1A00000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25410E9D8 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_BOOL((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "enableReceiveMeshShadow";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x1C00000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_25410E9E0 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      re::ecs2::introspect_GroundingShadowFadeBehaviorNearPhysicalObjects((re::ecs2 *)v25, v26);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "shadowFadeBehaviorNearPhysicalObjects";
      *(_QWORD *)(v27 + 16) = &qword_25410E9F0;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x2000000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_25410E9E8 = v27;
      __cxa_guard_release(&qword_25410E9A0);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_25410E9C0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::GroundingShadowComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::GroundingShadowComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::GroundingShadowComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::GroundingShadowComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v28 = v30;
}

double re::internal::defaultConstruct<re::ecs2::GroundingShadowComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = &off_24ED57C88;
  *(_QWORD *)&result = 0x1000000010000;
  *(_DWORD *)(v3 + 24) = 0x10000;
  *(_BYTE *)(v3 + 28) = 1;
  *(_DWORD *)(v3 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::GroundingShadowComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::GroundingShadowComponent>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = &off_24ED57C88;
  *(_QWORD *)&result = 0x1000000010000;
  *(_DWORD *)(v1 + 24) = 0x10000;
  *(_BYTE *)(v1 + 28) = 1;
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::GroundingShadowComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_GroundingShadowComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GroundingShadowComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_GroundingShadowComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_GroundingShadowComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::GroundingShadowComponent>, this);
}

uint64_t re::ShadowManager::getMutableShadowParams(re::ShadowManager *this)
{
  return (uint64_t)this + 16;
}

double re::ShadowManager::ShadowManager(re::ShadowManager *this)
{
  double result;

  *(_QWORD *)this = &off_24ED657D0;
  *((_DWORD *)this + 4) = 1065353216;
  *(_OWORD *)((char *)this + 20) = xmmword_22610CC60;
  *(_QWORD *)((char *)this + 36) = 0x3CF5C28F3F800000;
  *((_WORD *)this + 22) = 0;
  *((_OWORD *)this + 3) = xmmword_22610CC70;
  *((_QWORD *)this + 8) = 0x3EB333333F800000;
  *((_BYTE *)this + 72) = 1;
  *(_OWORD *)((char *)this + 76) = xmmword_22610CC80;
  *(_OWORD *)((char *)this + 92) = xmmword_22610CC90;
  *(_QWORD *)((char *)this + 108) = 0x3DCCCCCD41F00000;
  *((_DWORD *)this + 29) = 1100480512;
  *((_BYTE *)this + 120) = 0;
  *((_OWORD *)this + 8) = xmmword_2260E5F50;
  *((_BYTE *)this + 144) = 1;
  *((_QWORD *)this + 20) = 0x3F8000003F2D42C4;
  *((_DWORD *)this + 42) = 10;
  *(_OWORD *)((char *)this + 172) = xmmword_22610CCA0;
  *(_QWORD *)((char *)this + 188) = 1056964608;
  *((_DWORD *)this + 49) = 0x40000000;
  *((_WORD *)this + 100) = 0;
  *((_WORD *)this + 102) = 1;
  *((_BYTE *)this + 206) = 0;
  *((_DWORD *)this + 53) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 52) = 897988541;
  *(_QWORD *)((char *)this + 220) = 0x3DCCCCCD3E800000;
  *((_DWORD *)this + 57) = 16;
  result = 0.0078125;
  *((_DWORD *)this + 70) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_DWORD *)this + 82) = 0;
  *((_QWORD *)this + 43) = 1;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 30) = 0x3F80000000000000;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_QWORD *)((char *)this + 284) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_QWORD *)((char *)this + 332) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 444) = 0u;
  *(_QWORD *)((char *)this + 460) = 0x7FFFFFFFLL;
  return result;
}

void re::ShadowManager::~ShadowManager(re::ShadowManager *this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;
  int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_24ED657D0;

  v2 = *((_QWORD *)this + 53);
  if (v2)
  {
    v3 = (uint64_t *)((char *)this + 424);
    v4 = *((unsigned int *)this + 114);
    if ((_DWORD)v4)
    {
      v5 = 0;
      for (i = 0; i < v4; ++i)
      {
        v7 = *((_QWORD *)this + 55) + v5;
        v8 = *(_DWORD *)(v7 + 8);
        if (v8 < 0)
        {
          *(_DWORD *)(v7 + 8) = v8 & 0x7FFFFFFF;
          v9 = *(_QWORD *)(v7 + 24);
          if (v9)
          {

            *(_QWORD *)(v7 + 24) = 0;
            v4 = *((unsigned int *)this + 114);
          }
        }
        v5 += 32;
      }
      v2 = *v3;
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 54));
    *((_DWORD *)this + 114) = 0;
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)((char *)this + 440) = 0u;
    *(_QWORD *)((char *)this + 460) = 0x7FFFFFFFLL;
  }
  re::AssetHandle::~AssetHandle((re::ShadowManager *)((char *)this + 400));
  re::AssetHandle::~AssetHandle((re::ShadowManager *)((char *)this + 376));
  re::AssetHandle::~AssetHandle((re::ShadowManager *)((char *)this + 352));
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 37);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 31);
}

{
  re::ShadowManager::~ShadowManager(this);
  JUMPOUT(0x2276933B8);
}

void re::ShadowManager::getShadowParams(re::ShadowManager *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned __int8 v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  float v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  char v52;
  char v53;
  char v54;
  int v55;

  v4 = *((_OWORD *)this + 12);
  *(_OWORD *)(a3 + 160) = *((_OWORD *)this + 11);
  *(_OWORD *)(a3 + 176) = v4;
  v5 = *((_OWORD *)this + 14);
  *(_OWORD *)(a3 + 192) = *((_OWORD *)this + 13);
  *(_OWORD *)(a3 + 208) = v5;
  v6 = *((_OWORD *)this + 8);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)this + 7);
  *(_OWORD *)(a3 + 112) = v6;
  v7 = *((_OWORD *)this + 10);
  *(_OWORD *)(a3 + 128) = *((_OWORD *)this + 9);
  *(_OWORD *)(a3 + 144) = v7;
  v8 = *((_OWORD *)this + 4);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 48) = v8;
  v9 = *((_OWORD *)this + 6);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)this + 5);
  *(_OWORD *)(a3 + 80) = v9;
  v10 = *((_OWORD *)this + 2);
  *(_OWORD *)a3 = *((_OWORD *)this + 1);
  *(_OWORD *)(a3 + 16) = v10;
  if (re::ShadowManager::getMutableDeprecatedShadowParams(void)::deprecatedShadowParams)
    *(_BYTE *)(a3 + 188) = byte_255828701;
  if (byte_255828702)
    *(_BYTE *)(a3 + 189) = byte_255828703;
  if (byte_255828704)
    *(_BYTE *)(a3 + 190) = byte_255828705;
  if (byte_255828738)
    *(_DWORD *)(a3 + 212) = dword_25582873C;
  if (byte_255828710)
    *(_DWORD *)(a3 + 196) = dword_255828714;
  if (byte_255828718)
    *(_DWORD *)(a3 + 200) = dword_25582871C;
  if (byte_255828708)
    *(_DWORD *)(a3 + 192) = dword_25582870C;
  if (byte_255828728)
    *(_DWORD *)(a3 + 204) = dword_25582872C;
  if (byte_255828730)
    *(_DWORD *)(a3 + 208) = dword_255828734;
  v11 = atomic_load((unsigned __int8 *)&qword_25410EAB8);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_25410EAB8))
  {
    re::Defaults::BOOLValue((re::Defaults *)"MeshShadow.EnableTweaking", a2, &v53);
    if (v53)
      v52 = v54;
    else
      v52 = 0;
    _MergedGlobals_250 = v52;
    __cxa_guard_release(&qword_25410EAB8);
  }
  if (_MergedGlobals_250)
  {
    re::Defaults::BOOLValue((re::Defaults *)"MeshShadow.ForceShadowUpdate", a2, &v53);
    if (v53)
      *(_BYTE *)(a3 + 28) = v54;
    re::Defaults::uintValue((re::Defaults *)"MeshShadow.TileResolution", v12, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 4) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.BlurSizeScale", v13, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)a3 = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.IntensityMax", v14, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 48) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.IntensityScale", v15, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 44) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.OpacityCurveFactor", v16, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 52) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.BoundsDecayRate", v17, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 32) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.BelowReceiverDecayRate", v18, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 40) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.ReceiverDecayRate", v19, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 36) = v55;
    re::Defaults::BOOLValue((re::Defaults *)"MeshShadow.EnableNearFade", v20, &v53);
    if (v53)
      *(_BYTE *)(a3 + 56) = v54;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.NearFadeStart", v21, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 64) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.NearFadeEnd", v22, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 68) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.NearFadeCameraDistanceMinimum", v23, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 60) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.FalloffBias", v24, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 72) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.DepthErrorMultiplier", v25, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 76) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.OffsetMeshShadow", v26, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 84) = v55;
    re::Defaults::BOOLValue((re::Defaults *)"MeshShadow.DebugClearShadowTextureArray", v27, &v53);
    if (v53)
      *(_BYTE *)(a3 + 29) = v54;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.NormalThresholdForFlatShadow", v28, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 92) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.FadeRangeMultiplier", v29, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 96) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.MaxMipDistance", v30, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 80) = v55;
    re::Defaults::uintValue((re::Defaults *)"MeshShadow.NumMips", v31, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 16) = v55;
    re::Defaults::uintValue((re::Defaults *)"MeshShadow.MinContentWidth", v32, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 12) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.MinBlurRadiusInWorldSpace", v33, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 24) = v55;
    re::Defaults::intValue((re::Defaults *)"MeshShadow.PlaneProxy.Steps", v34, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 152) = v55;
    re::Defaults::BOOLValue((re::Defaults *)"MeshShadow.PlaneProxy.UseCylindricalProxy", v35, &v53);
    if (v53)
      *(_BYTE *)(a3 + 185) = v54;
    re::Defaults::BOOLValue((re::Defaults *)"MeshShadow.PlaneProxy.RegenerateMesh", v36, &v53);
    if (v53)
      *(_BYTE *)(a3 + 184) = v54;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.DepthRatio", v37, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 144) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.WidthRatio", v38, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 148) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.CurveFactor", v39, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 180) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.zTop", v40, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 156) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.zBottom", v41, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 160) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.xTop", v42, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 164) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.xBottom", v43, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 168) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.yTop", v44, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 172) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.yBottom", v45, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 176) = v55;
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.TiltFadeOpacityFalloffExp", v46, (uint64_t)&v53);
    if (v53)
      *(_DWORD *)(a3 + 100) = v55;
    re::Defaults::BOOLValue((re::Defaults *)"MeshShadow.PlaneProxy.EnablePlaneProxyTiltFade", v47, &v53);
    if (v53)
      *(_BYTE *)(a3 + 104) = v54;
  }
  v48 = *(float *)(a3 + 48);
  if (v48 >= *(float *)(a3 + 44))
    v48 = *(float *)(a3 + 44);
  *(float *)(a3 + 48) = v48;
  v49 = *(_DWORD *)(a3 + 4) + (21 << (*(_DWORD *)(a3 + 16) - 1)) - 1;
  v50 = v49 | (v49 >> 1) | ((v49 | (v49 >> 1)) >> 2);
  v51 = v50 | (v50 >> 4) | ((v50 | (v50 >> 4)) >> 8);
  *(_DWORD *)(a3 + 8) = (v51 | HIWORD(v51)) + 1;
}

float re::ShadowManager::getClusterData@<S0>(re::ShadowManager *this@<X0>, uint64_t a2@<X8>)
{
  float result;

  *(_QWORD *)a2 = *((_QWORD *)this + 30);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashSetBase(a2 + 8, (uint64_t)this + 248);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashSetBase(a2 + 56, (uint64_t)this + 296);
  *(_QWORD *)(a2 + 104) = *((_QWORD *)this + 43);
  if (byte_255828720)
  {
    result = *(float *)&dword_255828724;
    *(_DWORD *)a2 = dword_255828724;
  }
  if (byte_255828740)
  {
    result = *(float *)&dword_255828744;
    *(_DWORD *)(a2 + 4) = dword_255828744;
  }
  return result;
}

uint64_t re::ShadowManager::getMutableClusterData(re::ShadowManager *this)
{
  return (uint64_t)this + 240;
}

re::AssetHandle *re::ShadowManager::getDefaultMeshShadowCasterMaterial@<X0>(re::ShadowManager *this@<X0>, re::AssetHandle *a2@<X8>)
{
  return re::AssetHandle::AssetHandle(a2, (re::ShadowManager *)((char *)this + 352));
}

re::AssetHandle *re::ShadowManager::getDefaultMeshShadowReceiverMaterial@<X0>(re::ShadowManager *this@<X0>, re::AssetHandle *a2@<X8>)
{
  return re::AssetHandle::AssetHandle(a2, (re::ShadowManager *)((char *)this + 376));
}

re::AssetHandle *re::ShadowManager::getDefaultMeshShadowPatchReceiverMaterial@<X0>(re::ShadowManager *this@<X0>, re::AssetHandle *a2@<X8>)
{
  return re::AssetHandle::AssetHandle(a2, (re::ShadowManager *)((char *)this + 400));
}

void re::ShadowManager::transformForShadowProxy(re::ShadowManager *a1@<X0>, float32x2_t *a2@<X1>, float32x4_t *a3@<X2>, uint64_t a4@<X8>)
{
  float v7;
  __int32 v8;
  __int32 v9;
  _BYTE v10[232];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  re::ShadowManager::getShadowParams(a1, (const char *)a2, (uint64_t)v10);
  if (v10[185])
  {
    re::internal::shadows::calcCylShadowProxyLocalTransform(a2, a3, (_OWORD *)a4);
  }
  else
  {
    v7 = re::internal::shadows::calcShadowProxyThicknessInLocalCoord(a2, a3);
    v8 = a2->i32[0];
    v9 = a2->i32[1];
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_DWORD *)a4 = v8;
    *(_DWORD *)(a4 + 20) = v9;
    *(float *)(a4 + 40) = v7;
    *(_DWORD *)(a4 + 60) = 1065353216;
  }
}

void re::ShadowManager::setShadowClusterRootUpdateHandler(uint64_t a1, void *aBlock)
{
  void *v3;
  void *v4;

  v3 = _Block_copy(aBlock);
  v4 = *(void **)(a1 + 472);
  *(_QWORD *)(a1 + 472) = v3;

}

void re::ShadowManager::clearShadowClusterRootUpdateHandler(re::ShadowManager *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;

}

void *re::ShadowManager::getShadowClusterRootUpdateHandler(const void **this)
{
  return _Block_copy(this[59]);
}

void re::ShadowManager::init(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  re::internal::shadows *v13;
  const char *v14;
  __int128 v15;
  uint64_t v16;

  v4 = re::ServiceLocator::service<re::AssetService>(a2);
  (*(void (**)(__int128 *__return_ptr, uint64_t, const char *))(*(_QWORD *)v4 + 8))(&v15, v4, "engine:projectiveMeshShadowReceiver.rematerial");
  v5 = *(_OWORD *)(a1 + 47);
  *(_OWORD *)(a1 + 47) = v15;
  v15 = v5;
  v6 = a1[49];
  a1[49] = v16;
  v16 = v6;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
  re::AssetHandle::loadAsync((re::AssetHandle *)(a1 + 47));
  v7 = re::ServiceLocator::service<re::AssetService>(a2);
  (*(void (**)(__int128 *__return_ptr, uint64_t, const char *))(*(_QWORD *)v7 + 8))(&v15, v7, "engine:projectiveMeshShadowCaster.rematerial");
  v8 = *((_OWORD *)a1 + 22);
  *((_OWORD *)a1 + 22) = v15;
  v15 = v8;
  v9 = a1[46];
  a1[46] = v16;
  v16 = v9;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
  re::AssetHandle::loadAsync((re::AssetHandle *)(a1 + 44));
  v10 = re::ServiceLocator::service<re::AssetService>(a2);
  (*(void (**)(__int128 *__return_ptr, uint64_t, const char *))(*(_QWORD *)v10 + 8))(&v15, v10, "engine:projectiveMeshShadowPatchReceiver.rematerial");
  v11 = *((_OWORD *)a1 + 25);
  *((_OWORD *)a1 + 25) = v15;
  v15 = v11;
  v12 = a1[52];
  a1[52] = v16;
  v16 = v12;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
  re::AssetHandle::loadAsync((re::AssetHandle *)(a1 + 50));
  re::internal::shadows::initializeMeshShadowDefaults(v13, v14);
}

uint64_t re::ShadowManager::getMaterialParameterBlockForClusterIds(re::ShadowManager *this)
{
  return (uint64_t)this + 424;
}

void re::ecs2::CustomDeformerComponent::setCustomDeformerDeformationModel(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  unint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v10 = a1[6];
  if (v10 <= a3)
  {
    do
    {
      v17 = 0;
      memset(v16, 0, sizeof(v16));
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v11 = 0u;
      re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::add((_anonymous_namespace_ *)(a1 + 4), (uint64_t)&v11);
      re::DynamicArray<re::MeshDeformationIndex>::deinit((uint64_t)v16);
      re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit((uint64_t)&v13 + 8);
      re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit((uint64_t)&v11);
      ++v10;
    }
    while (v10 <= a3);
    v10 = a1[6];
  }
  if (v10 <= a3)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v18 = 136315906;
    v19 = "operator[]";
    v20 = 1024;
    v21 = 789;
    v22 = 2048;
    v23 = a3;
    v24 = 2048;
    v25 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::ecs2::CustomDeformerComponent::CustomDeformerData::addMappedDeformationDataToArray(a2, a4, a5, a1[8] + 120 * a3);
}

_anonymous_namespace_ *re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::add(_anonymous_namespace_ *result, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  v11 = *((_QWORD *)v3 + 4) + 120 * v5;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = 0;
  *(_DWORD *)(v11 + 24) = 0;
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *(_QWORD *)(v11 + 8) = v12;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v13 = *(_QWORD *)(v11 + 16);
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v13;
  v14 = *(_QWORD *)(v11 + 32);
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v14;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v11 + 24);
  *(_QWORD *)(v11 + 72) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  *(_DWORD *)(v11 + 64) = 0;
  v15 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v11 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v11 + 48) = v15;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v16 = *(_QWORD *)(v11 + 56);
  *(_QWORD *)(v11 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v16;
  v17 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v11 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v17;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(v11 + 64);
  *(_QWORD *)(v11 + 112) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 80) = 0;
  *(_DWORD *)(v11 + 104) = 0;
  v18 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(v11 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v11 + 88) = v18;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v19 = *(_QWORD *)(v11 + 96);
  *(_QWORD *)(v11 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v19;
  v20 = *(_QWORD *)(v11 + 112);
  *(_QWORD *)(v11 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v20;
  ++*(_DWORD *)(a2 + 104);
  ++*(_DWORD *)(v11 + 104);
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

void re::ecs2::CustomDeformerComponent::setCustomDeformerDeformationInput(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  unint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v10 = a1[6];
  if (v10 <= a3)
  {
    do
    {
      v17 = 0;
      memset(v16, 0, sizeof(v16));
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v11 = 0u;
      re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::add((_anonymous_namespace_ *)(a1 + 4), (uint64_t)&v11);
      re::DynamicArray<re::MeshDeformationIndex>::deinit((uint64_t)v16);
      re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit((uint64_t)&v13 + 8);
      re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit((uint64_t)&v11);
      ++v10;
    }
    while (v10 <= a3);
    v10 = a1[6];
  }
  if (v10 <= a3)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v18 = 136315906;
    v19 = "operator[]";
    v20 = 1024;
    v21 = 789;
    v22 = 2048;
    v23 = a3;
    v24 = 2048;
    v25 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::ecs2::CustomDeformerComponent::CustomDeformerData::addMappedDeformationDataToArray(a2, a4, a5, a1[8] + 120 * a3 + 40);
}

void re::ecs2::CustomDeformerComponent::setForceContinuousDeformations(_QWORD *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _anonymous_namespace_ *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[2];
  uint64_t v49;
  int v50;
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  unint64_t v55;
  __int16 v56;
  _QWORD *v57;
  uint64_t v58;

  v7 = a2;
  v58 = *MEMORY[0x24BDAC8D0];
  v9 = (_QWORD *)a1[6];
  if ((unint64_t)v9 <= a2)
  {
    do
    {
      v49 = 0;
      memset(v48, 0, sizeof(v48));
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v43 = 0u;
      re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::add((_anonymous_namespace_ *)(a1 + 4), (uint64_t)&v43);
      re::DynamicArray<re::MeshDeformationIndex>::deinit((uint64_t)v48);
      re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit((uint64_t)&v45 + 8);
      re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit((uint64_t)&v43);
      v9 = (_QWORD *)((char *)v9 + 1);
    }
    while ((unint64_t)v9 <= v7);
    v9 = (_QWORD *)a1[6];
  }
  if ((unint64_t)v9 <= v7)
    goto LABEL_32;
  v42 = a1[8];
  v10 = v42 + 120 * v7;
  v13 = *(_QWORD *)(v10 + 96);
  v12 = (unint64_t *)(v10 + 96);
  v11 = v13;
  if (!v13)
    goto LABEL_18;
  v14 = 0;
  v4 = 0;
  v9 = (_QWORD *)(v42 + 120 * v7 + 112);
  while (1)
  {
    v15 = (_QWORD *)*v12;
    if (*v12 <= v4)
    {
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v43 = 0u;
      v7 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v50 = 136315906;
      v51 = "operator[]";
      v52 = 1024;
      v53 = 789;
      v54 = 2048;
      v55 = v4;
      v56 = 2048;
      v57 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_32:
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v43 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v50 = 136315906;
      v51 = "operator[]";
      v52 = 1024;
      v53 = 789;
      v54 = 2048;
      v55 = v7;
      v56 = 2048;
      v57 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_33:
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v43 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v50 = 136315906;
      v51 = "removeStableAt";
      v52 = 1024;
      v53 = 969;
      v54 = 2048;
      v55 = v4;
      v56 = 2048;
      v57 = (_QWORD *)a4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (re::MeshIdentifierAsset::operator==((unsigned __int8 *)(*v9 + v14), (unsigned __int8 *)a3))
      break;
    ++v4;
    v14 += 48;
    if (v11 == v4)
      goto LABEL_18;
  }
  v40 = a4;
  a4 = *v12;
  if (*v12 <= v4)
    goto LABEL_33;
  v16 = *v9;
  if (a4 - 1 > v4 && 48 * a4 - 48 != v14)
  {
    v17 = 0;
    v41 = 48 * a4 - v14 - 48;
    v18 = v16 + v14;
    do
    {
      *(_BYTE *)(v18 + v17) = *(_BYTE *)(v18 + v17 + 48);
      v19 = v16 + v17 + v14;
      v20 = *(_QWORD *)(v19 + 56);
      v21 = *(_QWORD *)(v19 + 64);
      v22 = v16;
      v23 = *(_QWORD *)(v19 + 16);
      v24 = v20 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v19 + 8) & 1;
      *(_QWORD *)(v19 + 56) = 0;
      *(_QWORD *)(v19 + 64) = &str_110;
      *(_QWORD *)(v19 + 16) = v21;
      *(_QWORD *)&v43 = v24;
      *((_QWORD *)&v43 + 1) = v23;
      *(_QWORD *)(v19 + 8) = v20;
      re::StringID::destroyString((re::StringID *)&v43);
      v25 = *(_QWORD *)(v19 + 72);
      v26 = *(_QWORD *)(v19 + 80);
      *(_QWORD *)(v19 + 72) = 0;
      *(_QWORD *)(v19 + 80) = &str_110;
      v27 = *(_QWORD *)(v19 + 32);
      v28 = v25 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v19 + 24) & 1;
      *(_QWORD *)(v19 + 32) = v26;
      *(_QWORD *)&v43 = v28;
      *((_QWORD *)&v43 + 1) = v27;
      *(_QWORD *)(v19 + 24) = v25;
      re::StringID::destroyString((re::StringID *)&v43);
      v16 = v22;
      *(_BYTE *)(v19 + 40) = *(_BYTE *)(v19 + 88);
      v17 += 48;
    }
    while (v41 != v17);
    a4 = *v12;
    v16 = *v9;
  }
  v29 = v16 + 48 * a4;
  re::StringID::destroyString((re::StringID *)(v29 - 24));
  re::StringID::destroyString((re::StringID *)(v29 - 40));
  --*v12;
  ++*(_DWORD *)(v42 + 120 * v7 + 104);
  LOBYTE(a4) = v40;
  if (v40)
  {
LABEL_18:
    LOBYTE(v43) = *(_BYTE *)a3;
    re::StringID::StringID((re::StringID *)((char *)&v43 + 8), (const StringID *)(a3 + 8));
    v30 = re::StringID::StringID((re::StringID *)((char *)&v44 + 8), (const StringID *)(a3 + 24));
    BYTE8(v45) = a4;
    v31 = *v12;
    v32 = *(_QWORD *)(v42 + 120 * v7 + 88);
    if (*v12 >= v32)
    {
      v33 = v31 + 1;
      if (v32 < v31 + 1)
      {
        if (*(v12 - 2))
        {
          v34 = 2 * v32;
          if (!v32)
            v34 = 8;
          if (v34 <= v33)
            v35 = v33;
          else
            v35 = v34;
          re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::ForcedContinuousDeformations>::setCapacity(v12 - 2, v35);
        }
        else
        {
          re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::ForcedContinuousDeformations>::setCapacity(v12 - 2, v33);
          ++*(_DWORD *)(v42 + 120 * v7 + 104);
        }
      }
      v31 = *v12;
    }
    v36 = v42 + 120 * v7;
    v37 = *(_QWORD *)(v36 + 112) + 48 * v31;
    *(_BYTE *)v37 = v43;
    v38 = BYTE8(v43);
    *(_QWORD *)(v37 + 8) = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFFELL | BYTE8(v43) & 1;
    *(_QWORD *)(v37 + 8) = *((_QWORD *)&v43 + 1) & 0xFFFFFFFFFFFFFFFELL | v38 & 1;
    *(_QWORD *)(v37 + 16) = v44;
    *((_QWORD *)&v43 + 1) = 0;
    *(_QWORD *)&v44 = &str_110;
    v39 = BYTE8(v44);
    *(_QWORD *)(v37 + 24) = *(_QWORD *)(v37 + 24) & 0xFFFFFFFFFFFFFFFELL | BYTE8(v44) & 1;
    *(_QWORD *)(v37 + 24) = *((_QWORD *)&v44 + 1) & 0xFFFFFFFFFFFFFFFELL | v39 & 1;
    *(_QWORD *)(v37 + 32) = v45;
    *((_QWORD *)&v44 + 1) = 0;
    *(_QWORD *)&v45 = &str_110;
    *(_BYTE *)(v37 + 40) = BYTE8(v45);
    ++*v12;
    ++*(_DWORD *)(v36 + 104);
    re::StringID::destroyString((re::StringID *)((char *)&v44 + 8));
    re::StringID::destroyString((re::StringID *)((char *)&v43 + 8));
  }
}

BOOL re::MeshIdentifierAsset::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2
      && re::StringID::operator==((_QWORD *)a1 + 1, (_QWORD *)a2 + 1)
      && re::StringID::operator==((_QWORD *)a1 + 3, (_QWORD *)a2 + 3);
}

void re::ecs2::CustomDeformerComponent::CustomDeformerData::addMappedDeformationDataToArray(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id *v24;
  re *v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  void *v29;
  re *inited;
  id *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  id v47[8];

  v47[7] = *(id *)MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a4 + 16))
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = (96 * v9) | 0x18;
      while (re::MeshIdentifierAsset::operator==((unsigned __int8 *)(*(_QWORD *)(a4 + 32) + v10 - 24), (unsigned __int8 *)a2))
      {
        ++v9;
        v11 = *(_QWORD *)(a4 + 16);
        v10 += 96;
        if (v9 >= v11)
          goto LABEL_10;
      }
      if (v8 != v9)
      {
        v12 = *(_QWORD *)(a4 + 32);
        v13 = (_QWORD *)(v12 + v10);
        v14 = v12 + 96 * v8;
        *(_BYTE *)v14 = *((_BYTE *)v13 - 24);
        v15 = *(v13 - 2);
        v16 = *(v13 - 1);
        *(v13 - 2) = 0;
        *(v13 - 1) = &str_110;
        v17 = *(_QWORD *)(v14 + 16);
        v18 = v15 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v14 + 8) & 1;
        *(_QWORD *)(v14 + 16) = v16;
        v42 = v18;
        v43 = v17;
        *(_QWORD *)(v14 + 8) = v15;
        re::StringID::destroyString((re::StringID *)&v42);
        v19 = *v13;
        v20 = v13[1];
        *v13 = 0;
        v13[1] = &str_110;
        v21 = *(_QWORD *)(v14 + 32);
        v22 = v19 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v14 + 24) & 1;
        *(_QWORD *)(v14 + 32) = v20;
        v42 = v22;
        v43 = v21;
        *(_QWORD *)(v14 + 24) = v19;
        re::StringID::destroyString((re::StringID *)&v42);
        re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::operator=((id *)(v14 + 40), (uint64_t)(v13 + 2));
      }
      ++v9;
      ++v8;
      v11 = *(_QWORD *)(a4 + 16);
    }
    while (v9 < v11);
LABEL_10:
    if (v8 != v11)
    {
      v23 = 96 * v11 - 96 * v8;
      v24 = (id *)(*(_QWORD *)(a4 + 32) + 96 * v8 + 40);
      do
      {
        re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::~FramePersistentPtr(v24);
        re::StringID::destroyString((re::StringID *)(v24 - 2));
        re::StringID::destroyString((re::StringID *)(v24 - 4));
        v24 += 12;
        v23 -= 96;
      }
      while (v23);
      *(_QWORD *)(a4 + 16) = v8;
      ++*(_DWORD *)(a4 + 24);
    }
  }
  LOBYTE(v42) = *(_BYTE *)a2;
  re::StringID::StringID((re::StringID *)&v43, (const StringID *)(a2 + 8));
  v25 = re::StringID::StringID((re::StringID *)&v45, (const StringID *)(a2 + 24));
  v26 = *(_QWORD *)(a1 + 136);
  v27 = re::globalAllocators(v25);
  v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27[2] + 32))(v27[2], 40, 8);
  std::unique_ptr<void,std::function<void ()(void *)>>::unique_ptr[abi:nn180100](v28, a3);
  if (v26)
    v29 = (void *)(v26 + 8);
  else
    v29 = 0;
  inited = (re *)objc_initWeak(v47, v29);
  v47[1] = v28;
  v31 = (id *)re::globalAllocators(inited);
  v47[5] = v31[2];
  v47[6] = 0;
  v32 = *(_QWORD *)(a4 + 8);
  v33 = *(_QWORD *)(a4 + 16);
  if (v33 >= v32)
  {
    v34 = v33 + 1;
    if (v32 < v33 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v35 = 2 * v32;
        v36 = v32 == 0;
        v37 = 8;
        if (!v36)
          v37 = v35;
        if (v37 <= v34)
          v38 = v34;
        else
          v38 = v37;
        re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::setCapacity((_QWORD *)a4, v38);
      }
      else
      {
        re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::setCapacity((_QWORD *)a4, v34);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v33 = *(_QWORD *)(a4 + 16);
  }
  v39 = *(_QWORD *)(a4 + 32) + 96 * v33;
  *(_BYTE *)v39 = v42;
  v40 = v43;
  *(_QWORD *)(v39 + 8) = *(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFFELL | v43 & 1;
  *(_QWORD *)(v39 + 8) = v43 & 0xFFFFFFFFFFFFFFFELL | v40 & 1;
  *(_QWORD *)(v39 + 16) = v44;
  v43 = 0;
  v44 = &str_110;
  v41 = v45;
  *(_QWORD *)(v39 + 24) = *(_QWORD *)(v39 + 24) & 0xFFFFFFFFFFFFFFFELL | v45 & 1;
  *(_QWORD *)(v39 + 24) = v45 & 0xFFFFFFFFFFFFFFFELL | v41 & 1;
  *(_QWORD *)(v39 + 32) = v46;
  v45 = 0;
  v46 = &str_110;
  re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::FramePersistentPtr(v39 + 40, (uint64_t)v47);
  ++*(_QWORD *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::~FramePersistentPtr(v47);
  re::StringID::destroyString((re::StringID *)&v45);
  re::StringID::destroyString((re::StringID *)&v43);
}

BOOL re::ecs2::CustomDeformerSystemComponentStateImpl::processDirtyComponents(re::DeformerFeatureFlags *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  int isCustomDeformerLoggingEnabled;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  re *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  re *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  re *v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _BYTE buf[22];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  isCustomDeformerLoggingEnabled = re::DeformerFeatureFlags::isCustomDeformerLoggingEnabled(a1);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v54, a5, 0);
  v9 = v54;
  v10 = v55;
  v54 = a4;
  v55 = v9;
  v56 = v10;
  v11 = (unsigned __int16)v10;
  v12 = v10 & 0xFFFF0000;
  if (v9 != a5 || v11 != 0xFFFF || v12 != 4294901760)
  {
    do
    {
      v15 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v55);
      v16 = *(_QWORD *)v15;
      v17 = *(_QWORD **)(*(_QWORD *)v15 + 16);
      v18 = v17[22];
      v19 = v17[23];
      if (v18)
        v20 = v19 == 0;
      else
        v20 = 1;
      if (v20)
      {
        v21 = (unint64_t *)(a3 + 32);
        if (!isCustomDeformerLoggingEnabled)
          goto LABEL_36;
        v22 = *(_QWORD *)(*(_QWORD *)v15 + 16);
        do
        {
          v23 = v22;
          v22 = *(_QWORD *)(v22 + 24);
        }
        while (v22);
        v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v23 + 16) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(v23 + 16) + 56));
        v25 = (re *)re::ServiceLocator::service<re::FrameManager>(v24);
        v26 = *re::ecsComponentsLogObjects(v25);
        v21 = (unint64_t *)(a3 + 32);
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          goto LABEL_36;
        v27 = *((_QWORD *)v25 + 3) & 0xFFFFFFFFFFFFFFFLL;
        v28 = v17[35];
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)&buf[4] = v27;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v28;
        v29 = v26;
        v30 = "[DeformerLogging] Frame[%llu]: Custom Deformer skipping, missing mesh or mesh deformation for entity - %s";
      }
      else if (*(_QWORD *)(v19 + 240)
             && (v31 = *(_QWORD *)(v19 + 392),
                 *(_QWORD *)buf = v19 + 232,
                 *(_QWORD *)&buf[8] = 12,
                 !re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)buf))
             && v31
             && *(_QWORD *)(v18 + 40))
      {
        v21 = (unint64_t *)(a3 + 40);
        if (*(_QWORD *)(v16 + 48))
          goto LABEL_36;
        v32 = *(_QWORD *)(v19 + 392);
        v33 = *(_QWORD *)(v32 + 88);
        if (v33)
        {
          v34 = *(_QWORD *)(v32 + 96);
          v35 = 168 * v33;
          v36 = (_QWORD *)(v34 + 120);
          do
          {
            ++*((_BYTE *)v36 - 108);
            *v36 = 0;
            v36 += 21;
            v35 -= 168;
          }
          while (v35);
        }
        v37 = v17;
        v21 = (unint64_t *)(a3 + 32);
        if (!isCustomDeformerLoggingEnabled)
          goto LABEL_36;
        do
        {
          v38 = v37;
          v37 = (_QWORD *)v37[3];
        }
        while (v37);
        v39 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v38[2] + 56) + 32))(*(_QWORD *)(v38[2] + 56));
        v40 = (re *)re::ServiceLocator::service<re::FrameManager>(v39);
        v41 = *re::ecsComponentsLogObjects(v40);
        v21 = (unint64_t *)(a3 + 32);
        if (!os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          goto LABEL_36;
        v42 = *((_QWORD *)v40 + 3) & 0xFFFFFFFFFFFFFFFLL;
        v43 = v17[35];
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)&buf[4] = v42;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v43;
        v29 = v41;
        v30 = "[DeformerLogging] Frame[%llu]: Custom Deformer skipping, not custom deformation data set for entity - %s";
      }
      else
      {
        v21 = (unint64_t *)(a3 + 32);
        if (!isCustomDeformerLoggingEnabled)
          goto LABEL_36;
        v44 = v17;
        do
        {
          v45 = v44;
          v44 = (_QWORD *)v44[3];
        }
        while (v44);
        v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v45[2] + 56) + 32))(*(_QWORD *)(v45[2] + 56));
        v47 = (re *)re::ServiceLocator::service<re::FrameManager>(v46);
        v48 = *re::ecsComponentsLogObjects(v47);
        v21 = (unint64_t *)(a3 + 32);
        if (!os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
          goto LABEL_36;
        v49 = *((_QWORD *)v47 + 3) & 0xFFFFFFFFFFFFFFFLL;
        v50 = v17[35];
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)&buf[4] = v49;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v50;
        v29 = v48;
        v30 = "[DeformerLogging] Frame[%llu]: Custom Deformer skipping, custom deformer not assigned for entity - %s";
      }
      _os_log_impl(&dword_224FE9000, v29, OS_LOG_TYPE_INFO, v30, buf, 0x16u);
      v21 = (unint64_t *)(a3 + 32);
LABEL_36:
      v51 = v54;
      v52 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v55);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v51, v52, *v21);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v55);
    }
    while (v55 != a5 || (unsigned __int16)v56 != 0xFFFF || WORD1(v56) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ServiceLocator::service<re::FrameManager>(uint64_t a1)
{
  uint64_t result;
  __objc2_class_ro *v2;
  __objc2_class_ro *v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v6[16];
  _BYTE v7[9];
  _BYTE v8[23];

  result = re::ServiceLocator::serviceOrNull<re::FrameManager>(a1);
  if (!result)
  {
    v2 = re::introspect<re::FrameManager>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage((re::internal *)v2, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    v3 = re::introspect<re::FrameManager>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage((re::internal *)v3, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    if ((v7[8] & 1) != 0)
      v5 = *(_BYTE **)&v8[7];
    else
      v5 = v8;
    re::internal::assertLog((re::internal *)5, v4, "assertion failure: '%s' (%s:line %i) %s", "service", "service", 69, v5);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

BOOL re::ecs2::CustomDeformerSystemComponentStateImpl::processPreparingComponents(re::DeformerFeatureFlags *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DeformerFeatureFlags *v8;
  unint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  re::AssetHandle *v16;
  uint64_t v17;
  unint64_t i;
  uint64_t v19;
  re::MeshNameMap *v20;
  uint64_t v21;
  void *v22;
  re *inited;
  uint64_t *v24;
  _anonymous_namespace_ *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  re::MeshDeformationRuntimeData *v30;
  unint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  unsigned int v37;
  int started;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  re *v69;
  NSObject *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  re::DeformerFeatureFlags *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  re *v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  re::DeformerFeatureFlags *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD v97[2];
  id location;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[28];
  __int16 v104;
  _BYTE *v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE v108[18];
  __int16 v109;
  unint64_t v110;
  __int16 v111;
  unint64_t v112;
  uint8_t buf[32];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;

  v8 = a1;
  v117 = *MEMORY[0x24BDAC8D0];
  LODWORD(v9) = re::DeformerFeatureFlags::isCustomDeformerLoggingEnabled(a1);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  v99 = a4;
  v100 = *(_QWORD *)buf;
  v101 = *(_QWORD *)&buf[8];
  if (*(_QWORD *)buf != a5
    || *(unsigned __int16 *)&buf[8] != 0xFFFFLL
    || (*(_DWORD *)&buf[8] & 0xFFFF0000) != 4294901760)
  {
    v88 = a3;
    v89 = a5;
    v86 = v8;
    v87 = v9;
    do
    {
      v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v100);
      v13 = *(_QWORD *)v12;
      v14 = *(_QWORD **)(*(_QWORD *)v12 + 16);
      v15 = v14[22];
      v16 = (re::AssetHandle *)(v15 + 32);
      v17 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v15 + 32));
      if (v17)
      {
        i = v17;
        v19 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v14 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v19)
          v20 = (re::MeshNameMap *)(v19 + 216);
        else
          v20 = (re::MeshNameMap *)(i + 448);
        v90 = (unint64_t *)v14[23];
        v9 = v90[32];
        v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 1) + 112) + 136);
        if (v21)
          v22 = (void *)(v21 + 8);
        else
          v22 = 0;
        inited = (re *)objc_initWeak(&location, v22);
        v24 = re::globalAllocators(inited);
        v25 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24[2] + 32))(v24[2], 24, 8);
        *((_QWORD *)v25 + 1) = v9;
        *((_QWORD *)v25 + 2) = 0;
        if (v9)
        {
          if (v9 >= 0x666666666666667)
            goto LABEL_99;
          *((_QWORD *)v25 + 2) = v26;
          if (!v26)
          {
LABEL_100:
            re::internal::assertLog((re::internal *)4, v28, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
            _os_crash();
            __break(1u);
          }
          v29 = v9 - 1;
          if (v9 != 1)
          {
            do
            {
              *(_QWORD *)(v26 + 32) = 0;
              *(_QWORD *)(v26 + 8) = 0;
              *(_QWORD *)(v26 + 16) = 0;
              *(_QWORD *)v26 = 0;
              *(_DWORD *)(v26 + 24) = 0;
              v26 += 40;
              --v29;
            }
            while (v29);
          }
          *(_QWORD *)(v26 + 32) = 0;
          *(_QWORD *)(v26 + 8) = 0;
          *(_QWORD *)(v26 + 16) = 0;
          *(_QWORD *)v26 = 0;
          *(_DWORD *)(v26 + 24) = 0;
        }
        *(_QWORD *)&v114 = 0;
        memset(buf, 0, sizeof(buf));
        *(_QWORD *)&buf[24] = re::globalAllocators((re *)v26)[2];
        *(_QWORD *)&v114 = 0;
        re::FramePersistentPtr<re::ecs2::CustomDeformerComponent::CustomDeformerInputs,re::FrameManager>::reset((id *)(v13 + 72), &location, v25, (uint64_t)buf);
        if ((_QWORD)v114)
        {
          (**(void (***)(_QWORD))v114)(v114);
          if ((uint8_t *)v114 != buf)
            (*(void (**)(_QWORD))(**(_QWORD **)&buf[24] + 40))(*(_QWORD *)&buf[24]);
        }
        v30 = (re::MeshDeformationRuntimeData *)(v90 + 29);
        objc_destroyWeak(&location);
        location = 0;
        v91 = *(_QWORD *)(v13 + 48);
        if (v91)
        {
          v31 = 0;
          v95 = i;
          do
          {
            v32 = *(_BYTE **)(v13 + 48);
            if ((unint64_t)v32 <= v31)
              goto LABEL_98;
            v92 = *(_QWORD *)(v13 + 64);
            v33 = v92 + 120 * v31;
            v34 = *(_QWORD *)(v33 + 16);
            v96 = v31 + 1;
            if (v34)
            {
              v35 = *(_QWORD *)(v33 + 32);
              v93 = v35 + 96 * v34;
              do
              {
                re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v20, (unsigned __int8 *)v35, buf);
                *(_QWORD *)v103 = i;
                *(_QWORD *)&v103[8] = v20;
                *(_QWORD *)&v103[16] = *(_QWORD *)buf;
                v106 = v114;
                v107 = 0;
                re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v103[24], (uint64_t)&buf[8]);
                if (*((_QWORD *)&v114 + 1))
                {
                  (***((void (****)(_QWORD))&v114 + 1))(*((_QWORD *)&v114 + 1));
                  if (*((uint8_t **)&v114 + 1) != &buf[8])
                    (*(void (**)(_QWORD))(*(_QWORD *)v114 + 40))(v114);
                }
                v36 = *(_OWORD **)&v103[16];
                if (*(_QWORD *)&v103[16])
                {
                  for (i = 0; v36 != (_OWORD *)i; ++i)
                  {
                    *(_QWORD *)buf = i;
                    v37 = (*(uint64_t (**)(_BYTE *, uint8_t *))(*(_QWORD *)v107 + 16))(v107, buf);
                    started = re::MeshNameMap::meshPartStartIndexForInstance(v20, v37);
                    *(_QWORD *)buf = i;
                    v39 = (*(uint64_t (**)(_BYTE *, uint8_t *))(*(_QWORD *)v107 + 16))(v107, buf);
                    v40 = re::MeshDeformationRuntimeData::absoluteDeformedMeshPartIndex(v30, started + WORD2(v39));
                    if (v9 > v40)
                    {
                      v41 = v40;
                      v42 = *(_QWORD *)(v13 + 80);
                      v43 = *(_QWORD *)(v42 + 8);
                      if (v43 <= v40)
                      {
                        v97[0] = 0;
                        v115 = 0u;
                        v116 = 0u;
                        v114 = 0u;
                        memset(buf, 0, sizeof(buf));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v108 = 136315906;
                        *(_QWORD *)&v108[4] = "operator[]";
                        *(_WORD *)&v108[12] = 1024;
                        *(_DWORD *)&v108[14] = 468;
                        v109 = 2048;
                        v110 = v41;
                        v111 = 2048;
                        v112 = v43;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_93:
                        v97[0] = 0;
                        v53 = (unint64_t)v108;
                        v115 = 0u;
                        v116 = 0u;
                        v114 = 0u;
                        memset(buf, 0, sizeof(buf));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v108 = 136315906;
                        *(_QWORD *)&v108[4] = "operator[]";
                        *(_WORD *)&v108[12] = 1024;
                        *(_DWORD *)&v108[14] = 789;
                        v109 = 2048;
                        v110 = v31;
                        v111 = 2048;
                        v112 = v43;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_94:
                        v97[0] = 0;
                        v115 = 0u;
                        v116 = 0u;
                        v114 = 0u;
                        memset(buf, 0, sizeof(buf));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v108 = 136315906;
                        *(_QWORD *)&v108[4] = "operator[]";
                        *(_WORD *)&v108[12] = 1024;
                        *(_DWORD *)&v108[14] = 468;
                        v109 = 2048;
                        v110 = v53;
                        v111 = 2048;
                        v112 = v43;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_95:
                        v97[0] = 0;
                        v32 = v108;
                        v115 = 0u;
                        v116 = 0u;
                        v114 = 0u;
                        memset(buf, 0, sizeof(buf));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v108 = 136315906;
                        *(_QWORD *)&v108[4] = "operator[]";
                        *(_WORD *)&v108[12] = 1024;
                        *(_DWORD *)&v108[14] = 789;
                        v109 = 2048;
                        v110 = v31;
                        v111 = 2048;
                        v112 = v43;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_96:
                        re::internal::assertLog((re::internal *)6, v60, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v31, v32);
                        _os_crash();
                        __break(1u);
LABEL_97:
                        v102 = 0;
                        v36[6] = 0u;
                        v36[7] = 0u;
                        v36[4] = 0u;
                        v36[5] = 0u;
                        v36[3] = 0u;
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v103 = 136315906;
                        *(_QWORD *)&v103[4] = "operator[]";
                        *(_WORD *)&v103[12] = 1024;
                        *(_DWORD *)&v103[14] = 468;
                        *(_WORD *)&v103[18] = 2048;
                        *(_QWORD *)&v103[20] = v31;
                        v104 = 2048;
                        v105 = (_BYTE *)i;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_98:
                        *(_QWORD *)v108 = 0;
                        v115 = 0u;
                        v116 = 0u;
                        v114 = 0u;
                        memset(buf, 0, sizeof(buf));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v103 = 136315906;
                        *(_QWORD *)&v103[4] = "operator[]";
                        *(_WORD *)&v103[12] = 1024;
                        *(_DWORD *)&v103[14] = 789;
                        *(_WORD *)&v103[18] = 2048;
                        *(_QWORD *)&v103[20] = v31;
                        v104 = 2048;
                        v105 = v32;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_99:
                        re::internal::assertLog((re::internal *)6, v27, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, v9);
                        _os_crash();
                        __break(1u);
                        goto LABEL_100;
                      }
                      v44 = *(_QWORD *)(v42 + 16) + 40 * v40;
                      v43 = *(_QWORD *)(v44 + 16);
                      if (v31 >= v43)
                      {
                        re::DynamicArray<re::RenderGraphNodeDataPointer>::resize(v44, v96);
                        v43 = *(_QWORD *)(v44 + 16);
                      }
                      if (v43 <= v31)
                        goto LABEL_93;
                      v45 = *(_QWORD **)(v35 + 48);
                      if (v45)
                        *(_QWORD *)(*(_QWORD *)(v44 + 32) + 16 * v31) = *v45;
                    }
                  }
                }
                if (v107)
                {
                  (**(void (***)(_BYTE *))v107)(v107);
                  if (v107 != &v103[24])
                    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 40))(v106);
                }
                v35 += 96;
                i = v95;
              }
              while (v35 != v93);
            }
            v46 = v92 + 120 * v31;
            v47 = *(_QWORD *)(v46 + 56);
            if (v47)
            {
              v48 = *(_QWORD *)(v46 + 72);
              v94 = v48 + 96 * v47;
              do
              {
                re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v20, (unsigned __int8 *)v48, buf);
                *(_QWORD *)v103 = i;
                *(_QWORD *)&v103[8] = v20;
                *(_QWORD *)&v103[16] = *(_QWORD *)buf;
                v106 = v114;
                v107 = 0;
                re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v103[24], (uint64_t)&buf[8]);
                if (*((_QWORD *)&v114 + 1))
                {
                  (***((void (****)(_QWORD))&v114 + 1))(*((_QWORD *)&v114 + 1));
                  if (*((uint8_t **)&v114 + 1) != &buf[8])
                    (*(void (**)(_QWORD))(*(_QWORD *)v114 + 40))(v114);
                }
                v36 = *(_OWORD **)&v103[16];
                if (*(_QWORD *)&v103[16])
                {
                  for (i = 0; v36 != (_OWORD *)i; ++i)
                  {
                    *(_QWORD *)buf = i;
                    v49 = (*(uint64_t (**)(_BYTE *, uint8_t *))(*(_QWORD *)v107 + 16))(v107, buf);
                    v50 = re::MeshNameMap::meshPartStartIndexForInstance(v20, v49);
                    *(_QWORD *)buf = i;
                    v51 = (*(uint64_t (**)(_BYTE *, uint8_t *))(*(_QWORD *)v107 + 16))(v107, buf);
                    v52 = re::MeshDeformationRuntimeData::absoluteDeformedMeshPartIndex(v30, v50 + WORD2(v51));
                    if (v9 > v52)
                    {
                      v53 = v52;
                      v54 = *(_QWORD *)(v13 + 80);
                      v43 = *(_QWORD *)(v54 + 8);
                      if (v43 <= v52)
                        goto LABEL_94;
                      v55 = *(_QWORD *)(v54 + 16) + 40 * v52;
                      v43 = *(_QWORD *)(v55 + 16);
                      if (v31 >= v43)
                      {
                        re::DynamicArray<re::RenderGraphNodeDataPointer>::resize(v55, v96);
                        v43 = *(_QWORD *)(v55 + 16);
                      }
                      if (v43 <= v31)
                        goto LABEL_95;
                      v56 = *(_QWORD **)(v48 + 48);
                      if (v56)
                        *(_QWORD *)(*(_QWORD *)(v55 + 32) + 16 * v31 + 8) = *v56;
                    }
                  }
                }
                if (v107)
                {
                  (**(void (***)(_BYTE *))v107)(v107);
                  if (v107 != &v103[24])
                    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 40))(v106);
                }
                v48 += 96;
                i = v95;
              }
              while (v48 != v94);
            }
            ++v31;
          }
          while (v96 != v91);
        }
        v57 = v90[49];
        v32 = *(_BYTE **)(v57 + 88);
        v58 = *(_QWORD *)(v57 + 96);
        v97[0] = v90 + 29;
        v97[1] = 12;
        *(_QWORD *)v108 = v90 + 29;
        *(_QWORD *)&v108[8] = 12;
        *(_WORD *)&v108[16] = 0;
        v36 = v108;
        a3 = v88;
        a5 = v89;
        v9 = v87;
        while (1)
        {
          re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)v97, (uint64_t)buf);
          if (*(_DWORD *)&v108[12] == *(_DWORD *)&buf[12]
            && *(unsigned __int16 *)&v108[16] == *(unsigned __int16 *)&buf[16])
          {
            break;
          }
          v59 = re::MeshDeformationRuntimeData::MeshDeformationIterator::absoluteDeformedMeshPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)v108);
          v31 = v59;
          if ((unint64_t)v32 <= v59)
            goto LABEL_96;
          v61 = *(_QWORD *)(v13 + 80);
          i = *(_QWORD *)(v61 + 8);
          if (i <= v59)
            goto LABEL_97;
          v62 = *(_QWORD *)(v61 + 16) + 40 * v59;
          v63 = v58 + 168 * v59;
          ++*(_BYTE *)(v63 + 12);
          *(_QWORD *)(v63 + 120) = v62;
          re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)v108);
        }
        v83 = v99;
        v84 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v100);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(v88 + 16), v83, v84, *(_QWORD *)(v88 + 48));
        v8 = v86;
      }
      else
      {
        v64 = *(_QWORD *)(v15 + 40);
        if (v64 && (v65 = atomic_load((unsigned int *)(v64 + 704)), v65 == 3))
        {
          if ((_DWORD)v9)
          {
            v66 = v14;
            do
            {
              v67 = v66;
              v66 = (_QWORD *)v66[3];
            }
            while (v66);
            v68 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v67[2] + 56) + 32))(*(_QWORD *)(v67[2] + 56));
            v69 = (re *)re::ServiceLocator::service<re::FrameManager>(v68);
            v70 = *re::ecsComponentsLogObjects(v69);
            if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
            {
              v71 = *((_QWORD *)v69 + 3) & 0xFFFFFFFFFFFFFFFLL;
              v72 = v14[35];
              *(_DWORD *)buf = 134218242;
              *(_QWORD *)&buf[4] = v71;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v72;
              _os_log_impl(&dword_224FE9000, v70, OS_LOG_TYPE_INFO, "[DeformerLogging] Frame[%llu]: Custom Deformer skipping, mesh failed to load for entity - %s", buf, 0x16u);
            }
          }
          v73 = v99;
          v74 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v100);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v73, v74, *(_QWORD *)(a3 + 32));
        }
        else
        {
          v75 = v8;
          if ((_DWORD)v9)
          {
            v76 = v14;
            do
            {
              v77 = v76;
              v76 = (_QWORD *)v76[3];
            }
            while (v76);
            v78 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v77[2] + 56) + 32))(*(_QWORD *)(v77[2] + 56));
            v79 = (re *)re::ServiceLocator::service<re::FrameManager>(v78);
            v80 = *re::ecsComponentsLogObjects(v79);
            if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
            {
              v81 = *((_QWORD *)v79 + 3) & 0xFFFFFFFFFFFFFFFLL;
              v82 = v14[35];
              *(_DWORD *)buf = 134218242;
              *(_QWORD *)&buf[4] = v81;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v82;
              _os_log_impl(&dword_224FE9000, v80, OS_LOG_TYPE_INFO, "[DeformerLogging] Frame[%llu]: Custom Deformer skipping, mesh still loading for entity - %s", buf, 0x16u);
            }
          }
          re::AssetHandle::loadAsync(v16);
          v8 = v75;
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v100);
    }
    while (v100 != a5 || (unsigned __int16)v101 != 0xFFFF || WORD1(v101) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::CustomDeformerSystemComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::MeshNameMap *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int started;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t i;
  _BYTE *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  re::StringID *v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  re::MeshDeformationRuntimeData *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v68;
  unint64_t FirstBitSet;
  unsigned int v70;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  __int128 v87;
  _BYTE v88[20];
  _BYTE v89[20];
  unint64_t v90;
  _OWORD v91[3];
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _BYTE v95[24];
  unint64_t v96;
  _BYTE *v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v91, a5, 0);
  v86 = a4;
  v87 = v91[0];
  v73 = a5;
  if (*(_QWORD *)&v91[0] != a5 || WORD4(v91[0]) != 0xFFFFLL || (DWORD2(v91[0]) & 0xFFFF0000) != 4294901760)
  {
    while (1)
    {
      v9 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v87);
      v76 = *(_QWORD *)v9;
      v10 = *(_QWORD *)(*(_QWORD *)v9 + 16);
      v11 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(*(_QWORD *)(v10 + 176) + 32));
      if (v11)
        break;
LABEL_96:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v87);
      if ((_QWORD)v87 == v73 && WORD4(v87) == 0xFFFF && WORD5(v87) == 0xFFFF)
        return *(_DWORD *)(v73 + 40) != 0;
    }
    v12 = v11;
    v74 = v10;
    v13 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v10 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v13)
      v14 = (re::MeshNameMap *)(v13 + 216);
    else
      v14 = (re::MeshNameMap *)(v12 + 448);
    v80 = 0;
    v81 = 0;
    v82 = 1;
    v83 = 0;
    v84 = 0;
    v15 = *((_QWORD *)v14 + 42);
    if (v15)
      v15 = *(unsigned int *)(*((_QWORD *)v14 + 43) + 4 * v15 - 4);
    if ((v15 & 0x3F) != 0)
      v16 = (v15 >> 6) + 1;
    else
      v16 = v15 >> 6;
    v85 = v15;
    *(_QWORD *)&v91[0] = 0;
    re::DynamicOverflowArray<unsigned long long,3ul>::resize((_anonymous_namespace_ *)&v80, v16, v91);
    v17 = v76;
    v75 = *(_QWORD *)(v76 + 48);
    if (v75)
    {
      v18 = 0;
      while (1)
      {
        v19 = *(_QWORD *)(v17 + 48);
        if (v19 <= v18)
        {
          v94 = 0;
          v92 = 0u;
          v93 = 0u;
          memset(v91, 0, sizeof(v91));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v88 = 136315906;
          *(_QWORD *)&v88[4] = "operator[]";
          *(_WORD *)&v88[12] = 1024;
          *(_DWORD *)&v88[14] = 789;
          *(_WORD *)&v88[18] = 2048;
          *(_QWORD *)v89 = v18;
          *(_WORD *)&v89[8] = 2048;
          *(_QWORD *)&v89[10] = v19;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v20 = *(_QWORD *)(v17 + 64);
        *(_QWORD *)v88 = 0;
        *(_QWORD *)&v88[8] = 0;
        *(_DWORD *)&v88[16] = 1;
        *(_QWORD *)&v89[4] = 0;
        *(_QWORD *)&v89[12] = 0;
        v21 = *((_QWORD *)v14 + 42);
        if (v21)
          v21 = *(unsigned int *)(*((_QWORD *)v14 + 43) + 4 * v21 - 4);
        if ((v21 & 0x3F) != 0)
          v22 = (v21 >> 6) + 1;
        else
          v22 = v21 >> 6;
        v90 = v21;
        *(_QWORD *)&v91[0] = 0;
        re::DynamicOverflowArray<unsigned long long,3ul>::resize((_anonymous_namespace_ *)v88, v22, v91);
        v23 = v20 + 120 * v18;
        v24 = *(unsigned __int8 **)(v23 + 112);
        v77 = (_QWORD *)(v23 + 112);
        v26 = (uint64_t *)(v23 + 96);
        v25 = *(_QWORD *)(v23 + 96);
        v78 = v26;
        v79 = v20;
        if (v25)
        {
          v27 = &v24[48 * v25];
          do
          {
            re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v14, v24, &v94);
            *(_QWORD *)&v91[0] = v12;
            *((_QWORD *)&v91[0] + 1) = v14;
            *(_QWORD *)&v91[1] = v94;
            v92 = v96;
            re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v91[1] + 8, (uint64_t)v95);
            if (v97)
            {
              (**(void (***)(_BYTE *))v97)(v97);
              if (v97 != v95)
                (*(void (**)(unint64_t))(*(_QWORD *)v96 + 40))(v96);
            }
            v28 = *(_QWORD *)&v91[1];
            if (*(_QWORD *)&v91[1])
            {
              v29 = 0;
              do
              {
                v94 = v29;
                v30 = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)&v92 + 1) + 16))(*((_QWORD *)&v92 + 1), &v94);
                started = re::MeshNameMap::meshPartStartIndexForInstance(v14, v30);
                v94 = v29;
                v32 = started
                    + (unsigned __int16)((unint64_t)(*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)&v92 + 1) + 16))(*((_QWORD *)&v92 + 1), &v94) >> 32);
                if (v24[40])
                  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v88, v32);
                else
                  re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v88, v32);
                ++v29;
              }
              while (v28 != v29);
            }
            if (*((_QWORD *)&v92 + 1))
            {
              (***((void (****)(_QWORD))&v92 + 1))(*((_QWORD *)&v92 + 1));
              if (*((_OWORD **)&v92 + 1) != (_OWORD *)((char *)&v91[1] + 8))
                (*(void (**)(_QWORD))(*(_QWORD *)v92 + 40))(v92);
            }
            v24 += 48;
          }
          while (v24 != v27);
        }
        v33 = *(_QWORD *)&v88[8];
        v34 = *(uint64_t **)&v89[12];
        if ((v88[16] & 1) != 0)
          v34 = (uint64_t *)&v89[4];
        if (*(_QWORD *)&v88[8] >= 0xBuLL)
          break;
        if (*(_QWORD *)&v88[8])
        {
          v36 = 0;
          v37 = 8 * *(_QWORD *)&v88[8];
          do
          {
            v38 = *v34++;
            v36 |= v38;
            v37 -= 8;
          }
          while (v37);
          if (v36)
            goto LABEL_51;
        }
LABEL_68:
        v44 = *v78;
        *v78 = 0;
        if (v44)
        {
          v45 = 48 * v44;
          v46 = (re::StringID *)(*v77 + 24);
          do
          {
            re::StringID::destroyString(v46);
            re::StringID::destroyString((re::StringID *)((char *)v46 - 16));
            v46 = (re::StringID *)((char *)v46 + 48);
            v45 -= 48;
          }
          while (v45);
        }
        ++*(_DWORD *)(v79 + 120 * v18 + 104);
LABEL_72:
        if (*(_QWORD *)v88 && (v88[16] & 1) == 0)
          (*(void (**)(void))(**(_QWORD **)v88 + 40))();
        ++v18;
        v17 = v76;
        if (v18 == v75)
          goto LABEL_76;
      }
      v35 = 8 * *(_QWORD *)&v88[8];
      while (!*v34)
      {
        ++v34;
        v35 -= 8;
        if (!v35)
          goto LABEL_68;
      }
LABEL_51:
      if (v90 > v85)
      {
        if ((v90 & 0x3F) != 0)
          v39 = (v90 >> 6) + 1;
        else
          v39 = v90 >> 6;
        v85 = v90;
        *(_QWORD *)&v91[0] = 0;
        re::DynamicOverflowArray<unsigned long long,3ul>::resize((_anonymous_namespace_ *)&v80, v39, v91);
        v33 = *(_QWORD *)&v88[8];
      }
      if (v33 >= v81)
        v33 = v81;
      if (v33)
      {
        for (i = 0; i != v33; ++i)
        {
          if ((v88[16] & 1) != 0)
            v41 = &v89[4];
          else
            v41 = *(_BYTE **)&v89[12];
          v42 = *(_QWORD *)&v41[8 * i];
          if ((v82 & 1) != 0)
            v43 = &v83;
          else
            v43 = v84;
          v43[i] |= v42;
        }
      }
      goto LABEL_72;
    }
LABEL_76:
    v47 = v81;
    v48 = (unint64_t *)v84;
    if ((v82 & 1) != 0)
      v48 = (unint64_t *)&v83;
    if (v81 < 0xB)
    {
      v51 = v74;
      if (!v81)
        goto LABEL_92;
      v52 = 0;
      v53 = 8 * v81;
      v54 = v48;
      do
      {
        v55 = *v54++;
        v52 |= v55;
        v53 -= 8;
      }
      while (v53);
      if (!v52)
      {
LABEL_92:
        v64 = v86;
        v65 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v87);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v64, v65, *(_QWORD *)(a3 + 32));
LABEL_93:
        if (v80 && (v82 & 1) == 0)
          (*(void (**)(void))(*(_QWORD *)v80 + 40))();
        goto LABEL_96;
      }
    }
    else
    {
      v49 = 8 * v81;
      v50 = v48;
      v51 = v74;
      while (!*v50)
      {
        ++v50;
        v49 -= 8;
        if (!v49)
          goto LABEL_92;
      }
    }
    if ((v81 & 0x3FFFFFFFFFFFFFFLL) != 0)
    {
      v56 = 0;
      v57 = *(_QWORD *)(v51 + 184);
      v58 = (re::MeshDeformationRuntimeData *)(v57 + 232);
      v59 = *(_QWORD *)(v57 + 392);
      v61 = *(_QWORD *)(v59 + 88);
      v60 = *(_QWORD *)(v59 + 96);
      while (1)
      {
        v63 = *v48++;
        v62 = v63;
        if (v63)
          break;
        v56 -= 64;
        if (!--v47)
          goto LABEL_93;
      }
      v68 = __clz(__rbit64(v62));
      if (v68 + 1 != v56)
      {
        FirstBitSet = v68 - v56;
        do
        {
          v70 = re::MeshDeformationRuntimeData::absoluteDeformedMeshPartIndex(v58, FirstBitSet);
          if (v61 > v70)
            ++*(_BYTE *)(v60 + 168 * v70 + 12);
          FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)&v80, FirstBitSet + 1);
        }
        while (FirstBitSet != -1);
      }
    }
    goto LABEL_93;
  }
  return *(_DWORD *)(v73 + 40) != 0;
}

uint64_t re::ecs2::CustomDeformerSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  re::ecs2::System *v26;
  uint64_t v28;
  uint64_t v29[2];
  _QWORD v30[2];
  uint64_t v31;

  v30[0] = a3;
  v30[1] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v29);
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v7 = *(uint64_t **)a2;
    v28 = *(_QWORD *)a2 + 8 * v6;
    while (1)
    {
      v31 = *v7;
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 264)
                     + 16
                     * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 256), &v31)+ 8);
      re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 368, v8);
      v9 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 200, v8);
      v10 = *(_QWORD *)(*v9 + 224);
      v11 = v9[3];
      v12 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v11);
      if (*(_DWORD *)(v12 + 40))
        v13 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v10 + 24))(v10, v30, v9, v11, v12, 0);
      else
        v13 = 0;
      v14 = v9[5];
      v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v14);
      if (*(_DWORD *)(v15 + 40))
        v13 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, v30, v9, v14, v15, 0);
      v16 = v9[6];
      v17 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v16);
      if (*(_DWORD *)(v17 + 40))
        break;
      if (v13)
        goto LABEL_10;
LABEL_11:
      if (*(_BYTE *)(a1 + 432))
      {
        v18 = *(_QWORD *)(a1 + 376);
        v19 = *(_DWORD *)(a1 + 384);
        if (v18 < 0xB)
        {
          v22 = (uint64_t *)(a1 + 392);
          if ((v19 & 1) == 0)
            v22 = *(uint64_t **)(a1 + 400);
          if (!v18)
            goto LABEL_29;
          v23 = 0;
          v24 = 8 * v18;
          do
          {
            v25 = *v22++;
            v23 |= v25;
            v24 -= 8;
          }
          while (v24);
          if (!v23)
            goto LABEL_29;
        }
        else
        {
          v20 = (_QWORD *)(a1 + 392);
          if ((v19 & 1) == 0)
            v20 = *(_QWORD **)(a1 + 400);
          v21 = 8 * v18;
          while (!*v20)
          {
            ++v20;
            v21 -= 8;
            if (!v21)
              goto LABEL_29;
          }
        }
        v26 = *(re::ecs2::System **)(a1 + 416);
        if (!*((_BYTE *)v26 + 86))
          re::ecs2::System::queueToRun(v26, 0.0);
      }
LABEL_29:
      if (++v7 == (uint64_t *)v28)
        return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v29);
    }
    if (((v13 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, v30, v9, v16, v17, 0)) & 1) == 0)goto LABEL_11;
LABEL_10:
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 368, v8);
    goto LABEL_11;
  }
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v29);
}

void re::ecs2::CustomDeformerSystem::willAddSceneToECSService(re::ecs2::CustomDeformerSystem *this, re::ecs2::Scene *a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 200;
  v57[0] = (uint64_t)a2;
  v5 = (re::ecs2::CustomDeformerSystem *)((char *)this + 320);
  v6 = *((_QWORD *)this + 41);
  v7 = *((_DWORD *)this + 84);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 344);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 44);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 344);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 44);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 320, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::CustomDeformerSystem *)((char *)this + 256), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = (char *)this + 368;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *((_QWORD *)this + 30);
  *(_QWORD *)&v56 = 0;
  v18 = *((_QWORD *)this + 26);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 25, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 26);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*((_BYTE *)this + 216) & 1) != 0)
    v19 = (char *)this + 224;
  else
    v19 = (char *)*((_QWORD *)this + 29);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 30);
  ++*((_DWORD *)this + 62);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *((_QWORD *)this + 30);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(_QWORD *)&v66[0] = *((_QWORD *)this + 30) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::CustomDeformerSystem *)((char *)this + 256), v57, (uint64_t *)v66);
  v28 = *((_QWORD *)this + 30);
  v29 = *((_QWORD *)this + 45);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 45) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 45) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 336) & 1) != 0)
      v33 = (char *)this + 344;
    else
      v33 = (char *)*((_QWORD *)this + 44);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 41) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 30);
  v35 = *((_QWORD *)this + 51);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 51) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::CustomDeformerSystem *)((char *)this + 368), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 51) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 384) & 1) != 0)
      v39 = (char *)this + 392;
    else
      v39 = (char *)*((_QWORD *)this + 50);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 47) - 8] &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = (char *)this + 368;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 432))
    return;
  v40 = *((_QWORD *)this + 47);
  v41 = *((_DWORD *)this + 96);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 392);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 50);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 52);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 392);
    if (!v40)
      return;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 50);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::CustomDeformerSystem::willRemoveSceneFromECSService(re::ecs2::CustomDeformerSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  re::ecs2::Scene *v16;

  v16 = a2;
  v3 = (uint64_t *)((char *)this + 256);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 32, &v16);
  if (result != -1)
  {
    v5 = *((_QWORD *)this + 33) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 320, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 368, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 200, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_CustomDeformerComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_251);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_251))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410EAE0, 0);
    *(uint64_t *)((char *)&qword_25410EAF0 + 6) = 0;
    qword_25410EAF0 = 0;
    qword_25410EB00 = 0;
    qword_25410EB08 = 0xFFFFFFFFLL;
    qword_25410EAE0 = (uint64_t)&off_24ED7DAA8;
    qword_25410EB10 = (uint64_t)"CustomDeformerComponent";
    dword_25410EB18 = 0;
    xmmword_25410EB20 = 0u;
    unk_25410EB30 = 0u;
    xmmword_25410EB40 = 0u;
    qword_25410EB50 = 0;
    __cxa_guard_release(&_MergedGlobals_251);
  }
  return &qword_25410EAE0;
}

void re::ecs2::initInfo_CustomDeformerComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xBE4AC62966A262B4;
  v10[1] = "CustomDeformerComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410EAD0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410EAD0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410EAC8 = v8;
      __cxa_guard_release(&qword_25410EAD0);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410EAC8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::CustomDeformerComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::CustomDeformerComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CustomDeformerComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CustomDeformerComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

uint64_t re::internal::defaultConstruct<re::ecs2::CustomDeformerComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::CustomDeformerComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::CustomDeformerComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CustomDeformerComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_CustomDeformerComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CustomDeformerComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CustomDeformerComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CustomDeformerComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CustomDeformerComponent>, this);
}

uint64_t *re::ecs2::allocInfo_CustomDeformerSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410EAD8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410EAD8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410EB58, 0);
    *(uint64_t *)((char *)&qword_25410EB68 + 6) = 0;
    qword_25410EB68 = 0;
    qword_25410EB78 = 0;
    qword_25410EB80 = 0xFFFFFFFFLL;
    qword_25410EB58 = (uint64_t)&off_24ED7DAA8;
    qword_25410EB88 = (uint64_t)"CustomDeformerSystem";
    dword_25410EB90 = 0;
    xmmword_25410EB98 = 0u;
    unk_25410EBA8 = 0u;
    xmmword_25410EBB8 = 0u;
    qword_25410EBC8 = 0;
    __cxa_guard_release(&qword_25410EAD8);
  }
  return &qword_25410EB58;
}

void re::ecs2::initInfo_CustomDeformerSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xCEE3922955205E4;
  v5[1] = "CustomDeformerSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1B800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_CustomDeformerSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::CustomDeformerSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::CustomDeformerSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::CustomDeformerSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::CustomDeformerSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CustomDeformerSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CustomDeformerSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::CustomDeformerSystem *re::internal::defaultConstruct<re::ecs2::CustomDeformerSystem>(int a1, int a2, re::ecs2::CustomDeformerSystem *this)
{
  return re::ecs2::CustomDeformerSystem::CustomDeformerSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::CustomDeformerSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 25);
  a3[20] = &off_24ED65880;
  v4 = a3[22];
  if (v4)
  {
    if (a3[23])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[24]);
      a3[23] = 0;
      a3[24] = 0;
    }
    a3[22] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::CustomDeformerSystem>(_QWORD *a1)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 25);
  a1[20] = &off_24ED65880;
  v2 = a1[22];
  if (v2)
  {
    if (a1[23])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[24]);
      a1[23] = 0;
      a1[24] = 0;
    }
    a1[22] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_CustomDeformerSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CustomDeformerSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CustomDeformerSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CustomDeformerSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CustomDeformerSystem>, this);
}

uint64_t re::ecs2::CustomDeformerSystemComponentStateImpl::dependsOnComponents(re::ecs2::CustomDeformerSystemComponentStateImpl *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::CustomDeformerComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

void re::ecs2::CustomDeformerSystem::~CustomDeformerSystem(re::ecs2::CustomDeformerSystem *this)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 25);
  *((_QWORD *)this + 20) = &off_24ED65880;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    if (*((_QWORD *)this + 23))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 24));
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 25);
  *((_QWORD *)this + 20) = &off_24ED65880;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    if (*((_QWORD *)this + 23))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 24));
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::CustomDeformerSystem::typeInfo(re::ecs2::CustomDeformerSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CustomDeformerSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CustomDeformerSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CustomDeformerSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CustomDeformerSystem>, 0);
}

_QWORD *re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x78uLL))
        {
          v2 = 120 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 120 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 120, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 120 * v9;
        v11 = v7 + 7;
        do
        {
          *(v11 - 3) = 0;
          *(v11 - 6) = 0;
          *(v11 - 5) = 0;
          *(v11 - 7) = 0;
          *((_DWORD *)v11 - 8) = 0;
          v12 = *(_QWORD *)(v8 + 8);
          *(v11 - 7) = *(_QWORD *)v8;
          *(v11 - 6) = v12;
          *(_QWORD *)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
          v13 = *(v11 - 5);
          *(v11 - 5) = *(_QWORD *)(v8 + 16);
          *(_QWORD *)(v8 + 16) = v13;
          v14 = *(v11 - 3);
          *(v11 - 3) = *(_QWORD *)(v8 + 32);
          *(_QWORD *)(v8 + 32) = v14;
          ++*(_DWORD *)(v8 + 24);
          ++*((_DWORD *)v11 - 8);
          v11[2] = 0;
          *(v11 - 1) = 0;
          *v11 = 0;
          *(v11 - 2) = 0;
          *((_DWORD *)v11 + 2) = 0;
          v15 = *(_QWORD *)(v8 + 48);
          *(v11 - 2) = *(_QWORD *)(v8 + 40);
          *(_QWORD *)(v8 + 40) = 0;
          *(v11 - 1) = v15;
          *(_QWORD *)(v8 + 48) = 0;
          v16 = *v11;
          *v11 = *(_QWORD *)(v8 + 56);
          *(_QWORD *)(v8 + 56) = v16;
          v17 = v11[2];
          v11[2] = *(_QWORD *)(v8 + 72);
          *(_QWORD *)(v8 + 72) = v17;
          ++*(_DWORD *)(v8 + 64);
          ++*((_DWORD *)v11 + 2);
          v11[7] = 0;
          v11[4] = 0;
          v11[5] = 0;
          v11[3] = 0;
          *((_DWORD *)v11 + 12) = 0;
          v18 = *(_QWORD *)(v8 + 88);
          v11[3] = *(_QWORD *)(v8 + 80);
          *(_QWORD *)(v8 + 80) = 0;
          v11[4] = v18;
          *(_QWORD *)(v8 + 88) = 0;
          v19 = v11[5];
          v11[5] = *(_QWORD *)(v8 + 96);
          *(_QWORD *)(v8 + 96) = v19;
          v20 = v11[7];
          v11[7] = *(_QWORD *)(v8 + 112);
          *(_QWORD *)(v8 + 112) = v20;
          ++*(_DWORD *)(v8 + 104);
          ++*((_DWORD *)v11 + 12);
          re::DynamicArray<re::MeshDeformationIndex>::deinit(v8 + 80);
          re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit(v8 + 40);
          re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit(v8);
          v11 += 15;
          v8 += 120;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::ForcedContinuousDeformations>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  re::StringID *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::ForcedContinuousDeformations>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 48 * v9;
        v11 = v7;
        do
        {
          *(_BYTE *)v11 = *(_BYTE *)v8;
          v13 = (re::StringID *)(v8 + 8);
          v12 = *(_QWORD *)(v8 + 8);
          v11[1] = v11[1] & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v8 + 8) & 1;
          v11[1] = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[2] = *(_QWORD *)(v8 + 16);
          *(_QWORD *)(v8 + 16) = &str_110;
          *(_QWORD *)(v8 + 8) = 0;
          v15 = *(_QWORD *)(v8 + 24);
          v14 = v8 + 24;
          v11[3] = v11[3] & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
          v11[3] = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
          v11[4] = *(_QWORD *)(v14 + 8);
          *(_QWORD *)v14 = 0;
          *(_QWORD *)(v14 + 8) = &str_110;
          *((_BYTE *)v11 + 40) = *(_BYTE *)(v14 + 16);
          re::StringID::destroyString((re::StringID *)v14);
          re::StringID::destroyString(v13);
          v8 = v14 + 24;
          v11 += 6;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

id *re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::operator=(id *from, uint64_t a2)
{
  id v4;
  id v6[3];
  id v7;
  id *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6[0] = 0;
  objc_moveWeak(v6, from);
  re::ArcWeakPtr<re::VideoHistogram>::operator=(from, (id *)a2);
  re::ArcWeakPtr<re::VideoHistogram>::operator=((id *)a2, v6);
  objc_destroyWeak(v6);
  v4 = from[1];
  from[1] = *(id *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  a2 += 16;
  v7 = from[5];
  v8 = 0;
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)v6, (uint64_t)(from + 2));
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(from + 2), a2);
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(a2, (uint64_t)v6);
  if (v8)
  {
    (*(void (**)(id *))*v8)(v8);
    if (v8 != v6)
      (*(void (**)(id))(*(_QWORD *)v7 + 40))(v7);
  }
  return from;
}

_QWORD *re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  uint64_t v11;
  id *v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  id *v15;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x60uLL))
        {
          v2 = 96 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (id *)(v8 + 96 * v9);
        v11 = (uint64_t)(v7 + 5);
        v12 = (id *)(v8 + 40);
        do
        {
          *(_BYTE *)(v11 - 40) = *((_BYTE *)v12 - 40);
          v13 = *(v12 - 4);
          *(_QWORD *)(v11 - 32) = *(_QWORD *)(v11 - 32) & 0xFFFFFFFFFFFFFFFELL | (unint64_t)*(v12 - 4) & 1;
          *(_QWORD *)(v11 - 32) = (unint64_t)*(v12 - 4) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
          *(_QWORD *)(v11 - 24) = *(v12 - 3);
          *(v12 - 3) = &str_110;
          *(v12 - 4) = 0;
          v14 = *(v12 - 2);
          *(_QWORD *)(v11 - 16) = *(_QWORD *)(v11 - 16) & 0xFFFFFFFFFFFFFFFELL | (unint64_t)*(v12 - 2) & 1;
          *(_QWORD *)(v11 - 16) = (unint64_t)*(v12 - 2) & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
          *(_QWORD *)(v11 - 8) = *(v12 - 1);
          *(v12 - 1) = &str_110;
          *(v12 - 2) = 0;
          re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::FramePersistentPtr(v11, (uint64_t)v12);
          re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::~FramePersistentPtr(v12);
          re::StringID::destroyString((re::StringID *)(v12 - 2));
          re::StringID::destroyString((re::StringID *)(v12 - 4));
          v11 += 96;
          v15 = v12 + 7;
          v12 += 12;
        }
        while (v15 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

id *re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::FramePersistentPtr(uint64_t a1, uint64_t a2)
{
  re *inited;

  inited = (re *)objc_initWeak((id *)a1, 0);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = re::globalAllocators(inited)[2];
  *(_QWORD *)(a1 + 48) = 0;
  return re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::operator=((id *)a1, a2);
}

uint64_t re::ServiceLocator::serviceOrNull<re::FrameManager>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::FrameManager>(void)::info = re::introspect_FrameManager(0);
  }
  v3 = re::introspect<re::FrameManager>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

__objc2_class_ro *re::introspect<re::FrameManager>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::FrameManager>(void)::info = re::introspect_FrameManager(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[488];
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED65978;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED659D0;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED65A28;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED65A80;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED65978;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED659D0;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED65A28;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED65A80;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED65978;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED65978;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED659D0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED659D0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED65A28;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED65A28;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED65A80;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED65A80;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::CustomDeformerComponent>(uint64_t a1)
{
  uint64_t v2;
  re *inited;

  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED57DB8;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  inited = (re *)objc_initWeak((id *)(v2 + 72), 0);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 112) = re::globalAllocators(inited)[2];
  *(_QWORD *)(a1 + 120) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::CustomDeformerSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::CustomDeformerSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_DebugMeshComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_252);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_252))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410EBF0, 0);
    *(uint64_t *)((char *)&qword_25410EC00 + 6) = 0;
    qword_25410EC00 = 0;
    qword_25410EC10 = 0;
    qword_25410EC18 = 0xFFFFFFFFLL;
    qword_25410EBF0 = (uint64_t)&off_24ED7DAA8;
    qword_25410EC20 = (uint64_t)"DebugMeshComponent";
    dword_25410EC28 = 0;
    xmmword_25410EC30 = 0u;
    unk_25410EC40 = 0u;
    xmmword_25410EC50 = 0u;
    qword_25410EC60 = 0;
    __cxa_guard_release(&_MergedGlobals_252);
  }
  return &qword_25410EBF0;
}

void re::ecs2::initInfo_DebugMeshComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0xE189FFFAC063EC3ALL;
  v14[1] = "DebugMeshComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25410EBD8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410EBD8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410EBE0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "shaderDebugMode";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410EBE8 = v12;
      __cxa_guard_release(&qword_25410EBD8);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410EBE0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::DebugMeshComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::DebugMeshComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DebugMeshComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DebugMeshComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::DebugMeshComponent>(int a1, int a2, ArcSharedObject *this)
{
  _QWORD *v3;
  uint64_t v4;

  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v3 = (_QWORD *)((char *)this + 32);
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)v4 = off_24ED57E38;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  return re::DynamicString::setCapacity(v3, 0);
}

uint64_t re::internal::defaultDestruct<re::ecs2::DebugMeshComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::DebugMeshComponent>(_OWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  v1 = a1 + 2;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = off_24ED57E38;
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  return re::DynamicString::setCapacity(v1, 0);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::DebugMeshComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_DebugMeshComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DebugMeshComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DebugMeshComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DebugMeshComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DebugMeshComponent>, this);
}

uint64_t *re::ecs2::allocInfo_InputTargetComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410EC70);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410EC70))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410ED30, 0);
    *(uint64_t *)((char *)&qword_25410ED40 + 6) = 0;
    qword_25410ED40 = 0;
    qword_25410ED50 = 0;
    qword_25410ED58 = 0xFFFFFFFFLL;
    qword_25410ED30 = (uint64_t)&off_24ED7DAA8;
    qword_25410ED60 = (uint64_t)"InputTargetComponent";
    dword_25410ED68 = 0;
    xmmword_25410ED70 = 0u;
    unk_25410ED80 = 0u;
    xmmword_25410ED90 = 0u;
    qword_25410EDA0 = 0;
    __cxa_guard_release(&qword_25410EC70);
  }
  return &qword_25410ED30;
}

void re::ecs2::initInfo_InputTargetComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  uint64_t v31;
  __int128 v32;
  _QWORD v33[2];
  __int128 v34;

  v33[0] = 0xE32789C8E68F8AC4;
  v33[1] = "InputTargetComponent";
  re::StringID::destroyString((re::StringID *)v33);
  *((_OWORD *)this + 2) = v34;
  v4 = atomic_load((unsigned __int8 *)&qword_25410EC78);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410EC78);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410ECB0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "allowsDirectInput";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410ECB8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "allowsIndirectInput";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1A00000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25410ECC0 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_BOOL((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "enabled";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x1B00000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25410ECC8 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_BOOL((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "isHandAnchored";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x1C00000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_25410ECD0 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::ecs2::introspect_AnchoringOrientation((re::ecs2 *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "handAnchoringChirality";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x1D00000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_25410ECD8 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      re::ecs2::introspect_InputTargetHitTestingType((re::ecs2 *)v29, v30);
      v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = "hitTestingType";
      *(_QWORD *)(v31 + 16) = &qword_25410ECE8;
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0x1E00000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_QWORD *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_25410ECE0 = v31;
      __cxa_guard_release(&qword_25410EC78);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_25410ECB0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::InputTargetComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::InputTargetComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::InputTargetComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::InputTargetComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v32 = v34;
}

double re::internal::defaultConstruct<re::ecs2::InputTargetComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = &off_24ED65AD8;
  *(_QWORD *)&result = 16843008;
  *(_DWORD *)(v3 + 24) = 16843008;
  *(_WORD *)(v3 + 28) = -256;
  *(_BYTE *)(v3 + 30) = 1;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::InputTargetComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::InputTargetComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = &off_24ED65AD8;
  *(_QWORD *)&result = 16843008;
  *(_DWORD *)(v1 + 24) = 16843008;
  *(_WORD *)(v1 + 28) = -256;
  *(_BYTE *)(v1 + 30) = 1;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::InputTargetComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_InputTargetComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"InputTargetComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_InputTargetComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_InputTargetComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::InputTargetComponent>, this);
}

void re::ecs2::introspect_InputTargetHitTestingType(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  StringID v38;
  _QWORD v39[2];
  _QWORD v40[61];

  v2 = atomic_load((unsigned __int8 *)&qword_25410EC80);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_25410EC80);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Unknown";
      qword_25410EC90 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Strong";
      qword_25410EC98 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "Weak";
      qword_25410ECA0 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = 3;
      *(_QWORD *)(v34 + 16) = "Hierarchical";
      qword_25410ECA8 = v34;
      __cxa_guard_release(&qword_25410EC80);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25410EC88);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25410EC88))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25410ECE8, "InputTargetHitTestingType", 1, 1, 1, 1);
    qword_25410ECE8 = (uint64_t)&off_24ED7D9E8;
    qword_25410ED28 = (uint64_t)&re::ecs2::introspect_InputTargetHitTestingType(BOOL)::enumTable;
    dword_25410ECF8 = 9;
    __cxa_guard_release(&qword_25410EC88);
  }
  if ((_MergedGlobals_253 & 1) == 0)
  {
    _MergedGlobals_253 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25410ECE8, a2);
    v36 = 0xD9B509DEEBC34D24;
    v37 = "InputTargetHitTestingType";
    v40[0] = 0x31CD534126;
    v40[1] = "uint8_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v40);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v40);
      v6 = (unsigned int *)qword_25410ED28;
      v39[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v40, &v36, 1, 1, (uint64_t)v39);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v38.var0 = 2 * v12;
            v38.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v40, v16, &v38);
            re::StringID::destroyString((re::StringID *)&v38);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v38.var0 = 2 * v20;
              v38.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v40, v24, &v38);
              re::StringID::destroyString((re::StringID *)&v38);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v40, v25);
      xmmword_25410ED08 = (__int128)v38;
      re::StringID::destroyString((re::StringID *)&v36);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v40);
      re::internal::assertLog((re::internal *)5, v35, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "InputTargetHitTestingType", v36, v37);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::InputTargetComponent::~InputTargetComponent(re::ecs2::InputTargetComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 112 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

BOOL re::KeyValueStore::isSupportedValueType(__objc2_class_ro *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  __guard *v4;
  unsigned __int8 v5;
  __objc2_class_ro **p_info;
  unsigned __int8 v7;
  __objc2_class_ro **v8;
  unsigned __int8 v9;
  __guard *v10;
  unsigned __int8 v11;
  __objc2_class_ro **v12;
  unsigned __int8 v13;
  __objc2_class_ro **v14;
  unsigned __int8 v15;
  __objc2_class_ro **v16;
  unsigned __int8 v17;
  __objc2_class_ro **v18;
  unsigned __int8 v19;
  __objc2_class_ro **v20;
  int v22;
  const re::IntrospectionBase *v23;
  int v24;
  const re::IntrospectionBase *v25;
  int v26;
  const re::IntrospectionBase *v27;
  int v28;
  const re::IntrospectionBase *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;

  if ((v3 & 1) == 0)
  {
    if (v22)
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v23);
    }
  }
  if ((__objc2_class_ro *)v4[331] == this)
    return 1;
  p_info = VideoSpillMapMetalSession.info;
  if ((v5 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v24)
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v25);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (p_info[7] == this)
    return 1;
  v8 = VideoSpillMapMetalSession.info;
  if ((v7 & 1) == 0)
  {
    v8 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v26)
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v27);
      v8 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (v8[9] == this)
    return 1;
  if ((v9 & 1) == 0)
  {
    if (v28)
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v29);
    }
  }
  if ((__objc2_class_ro *)v10[454] == this)
    return 1;
  v12 = VideoSpillMapMetalSession.info;
  if ((v11 & 1) == 0)
  {
    v12 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v30)
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
      v12 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (v12[11] == this)
    return 1;
  v14 = VideoSpillMapMetalSession.info;
  if ((v13 & 1) == 0)
  {
    v14 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v31)
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
      v14 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (v14[13] == this)
    return 1;
  v16 = VideoSpillMapMetalSession.info;
  if ((v15 & 1) == 0)
  {
    v16 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v32)
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
      v16 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (v16[15] == this)
    return 1;
  v18 = VideoSpillMapMetalSession.info;
  if ((v17 & 1) == 0)
  {
    v18 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v33)
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
      v18 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (v18[17] == this)
    return 1;
  v20 = VideoSpillMapMetalSession.info;
  if ((v19 & 1) == 0)
  {
    v20 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v34)
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
      v20 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return v20[39] == this
      || (__objc2_class_ro *)re::introspect<re::DynamicString>() == this
      || re::introspect<re::SkeletalPose>() == this
      || re::introspect<re::DynamicArray<float>>() == this
      || re::introspect<re::DynamicArray<re::Vector3<float>>>() == this
      || (__objc2_class_ro *)re::introspect<long long>() == this
      || re::introspect<re::BlendShapeWeights>() == this;
}

__objc2_class_ro *re::introspect<re::Quaternion<float>>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[17];
}

__objc2_class_ro *re::introspect<re::GenericSRT<float>>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[39];
}

__guard re::introspect<re::DynamicString>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  const re::IntrospectionBase *v4;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v4);
    }
  }
  return v1[42];
}

__objc2_class_ro *re::introspect<re::SkeletalPose>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[37];
}

void *re::introspect<re::DynamicArray<float>>()
{
  unsigned __int8 v0;
  _UNKNOWN **v1;
  int v3;
  const re::IntrospectionBase *v4;

  v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v0 & 1) == 0)
  {
    v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v3)
    {
      re::introspect<re::DynamicArray<float>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<float>>::get(0, v4);
      v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return v1[258];
}

void *re::introspect<re::DynamicArray<re::Vector3<float>>>()
{
  unsigned __int8 v0;
  _UNKNOWN **v1;
  int v3;

  v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v0 & 1) == 0)
  {
    v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v3)
    {
      re::introspect<re::DynamicArray<re::Vector3<float>>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<re::Vector3<float>>>::get(0);
      v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return v1[260];
}

__guard re::introspect<long long>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  const re::IntrospectionBase *v4;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v4);
    }
  }
  return v1[402];
}

__objc2_class_ro *re::introspect<re::BlendShapeWeights>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::BlendShapeWeights>(void)::info = re::introspect_BlendShapeWeights(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[129];
}

BOOL re::KeyValueStore::isIntrinsicValueType(re::KeyValueStore *this, __objc2_class_ro *a2)
{
  return re::KeyValueStore::isSupportedValueType(a2, (const re::IntrospectionBase *)a2);
}

unint64_t re::KeyValueStore::addOrReplaceValue(re::KeyValueStore *this, __objc2_class_ro *a2, StringID *a3, __int128 *a4)
{
  unsigned __int8 v7;
  __guard *v9;
  unsigned __int8 v10;
  __objc2_class_ro **p_info;
  unsigned __int8 v12;
  __objc2_class_ro **v13;
  unsigned __int8 v14;
  __guard *v15;
  unsigned __int8 v16;
  __objc2_class_ro **v17;
  unsigned __int8 v18;
  __objc2_class_ro **v19;
  unsigned __int8 v20;
  __objc2_class_ro **v21;
  unsigned __int8 v22;
  __objc2_class_ro **v23;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  const re::IntrospectionBase *v37;
  int v38;
  const re::IntrospectionBase *v39;
  const re::IntrospectionBase *v40;
  int v41;
  const re::IntrospectionBase *v42;
  const re::IntrospectionBase *v43;
  int v44;
  const re::IntrospectionBase *v45;
  const re::IntrospectionBase *v46;
  int v47;
  const re::IntrospectionBase *v48;
  int v49;
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  if (!a4)
  {
    if ((v7 & 1) == 0
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v40);
    }
    if (re::introspect<BOOL>(void)::info != (_UNKNOWN *)a2)
    {
      if ((v25 & 1) == 0
      {
        re::introspect<float>(void)::info = re::introspect_float(0, v43);
      }
      if (re::introspect<float>(void)::info == (_UNKNOWN *)a2)
      {
        LODWORD(v52) = 0;
        return re::KeyValueStore::addOrReplaceValue<float>(this, a3, &v52);
      }
      if ((v26 & 1) == 0
      {
        re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v46);
      }
      if ((__objc2_class_ro *)re::introspect<double>(void)::info == a2)
      {
        *(_QWORD *)&v52 = 0;
        return re::KeyValueStore::addOrReplaceValue<double>(this, a3, &v52);
      }
      if ((v27 & 1) == 0
      {
        re::introspect<int>(void)::info = re::introspect_int(0, v48);
      }
      if (re::introspect<int>(void)::info == (_UNKNOWN *)a2)
      {
        LODWORD(v52) = 0;
        return re::KeyValueStore::addOrReplaceValue<int>(this, a3, &v52);
      }
      if ((v28 & 1) == 0
      {
        re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
      }
      if (re::introspect<re::Vector2<float>>(void)::info == (_UNKNOWN *)a2)
      {
        *(_QWORD *)&v52 = 0;
        return re::KeyValueStore::addOrReplaceValue<re::Vector2<float>>(this, a3, &v52);
      }
      if ((v29 & 1) == 0
      {
        re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
      }
      if (re::introspect<re::Vector3<float>>(void)::info == (_UNKNOWN *)a2)
      {
        v52 = 0u;
        return re::KeyValueStore::addOrReplaceValue<re::Vector3<float>>(this, a3, &v52);
      }
      if ((v30 & 1) == 0
      {
        re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
      }
      if (re::introspect<re::Vector4<float>>(void)::info == (_UNKNOWN *)a2)
      {
        v52 = 0uLL;
        return re::KeyValueStore::addOrReplaceValue<re::Vector4<float>>(this, a3, &v52);
      }
      if (re::introspect<re::Quaternion<float>>() == a2)
      {
        v52 = xmmword_2260E5D70;
        return re::KeyValueStore::addOrReplaceValue<re::Quaternion<float>>(this, a3, &v52);
      }
      if (re::introspect<re::GenericSRT<float>>() == a2)
      {
        *(_QWORD *)&v52 = 0x3F8000003F800000;
        *((_QWORD *)&v52 + 1) = 1065353216;
        *(_QWORD *)&v53 = 0;
        *((_QWORD *)&v53 + 1) = 0x3F80000000000000;
        v54 = 0uLL;
        return re::KeyValueStore::addOrReplaceValue<re::GenericSRT<float>>(this, a3, &v52);
      }
      if ((__objc2_class_ro *)re::introspect<re::DynamicString>() == a2)
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v52);
        v31 = re::KeyValueStore::addOrReplaceValue<re::DynamicString>(this, a3, (const re::DynamicString *)&v52);
        v33 = v52;
        if (!(_QWORD)v52 || (BYTE8(v52) & 1) == 0)
          return v31;
        v34 = v53;
      }
      else
      {
        if (re::introspect<re::SkeletalPose>() == a2)
        {
          v56 = 0;
          v57 = 0;
          v54 = 0u;
          v55 = 0u;
          *(_QWORD *)&v52 = 0;
          v53 = 0u;
          *((_QWORD *)&v52 + 1) = &str_110;
          v58 = 0;
          v31 = re::KeyValueStore::addOrReplaceValue<re::SkeletalPose>((uint64_t)this, a3, (uint64_t *)&v52);
          re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v52);
          return v31;
        }
        if (re::introspect<re::DynamicArray<float>>() == a2)
        {
          *(_QWORD *)&v54 = 0;
          *(_QWORD *)&v53 = 0;
          v52 = 0uLL;
          DWORD2(v53) = 0;
          v35 = re::KeyValueStore::addOrReplaceValue<re::DynamicArray<float>>(this, a3, (uint64_t *)&v52);
        }
        else
        {
          if (re::introspect<re::DynamicArray<re::Vector3<float>>>() != a2)
          {
            if ((__objc2_class_ro *)re::introspect<long long>() != a2)
            {
              if (re::introspect<re::BlendShapeWeights>() == a2)
              {
                v52 = 0u;
                v53 = 0u;
                v31 = re::KeyValueStore::addOrReplaceValue<re::BlendShapeWeights>((uint64_t)this, a3, (uint64_t)&v52);
                re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v52);
                return v31;
              }
              return 0;
            }
            *(_QWORD *)&v52 = 0;
            return re::KeyValueStore::addOrReplaceValue<long long>(this, a3, &v52);
          }
          *(_QWORD *)&v54 = 0;
          *(_QWORD *)&v53 = 0;
          v52 = 0uLL;
          DWORD2(v53) = 0;
          v35 = re::KeyValueStore::addOrReplaceValue<re::DynamicArray<re::Vector3<float>>>(this, a3, (uint64_t *)&v52);
        }
        v31 = v35;
        v33 = v52;
        if (!(_QWORD)v52)
          return v31;
        v34 = v54;
        if (!(_QWORD)v54)
          return v31;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 40))(v33, v34);
      return v31;
    }
    LOBYTE(v52) = 0;
    return re::KeyValueStore::addOrReplaceValue<BOOL>(this, a3, &v52);
  }
  if ((v7 & 1) == 0)
  {
    if (v36)
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v37);
    }
  }
  if ((__objc2_class_ro *)v9[331] == a2)
    return re::KeyValueStore::addOrReplaceValue<BOOL>(this, a3, a4);
  p_info = VideoSpillMapMetalSession.info;
  if ((v10 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v38)
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v39);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (p_info[7] == a2)
    return re::KeyValueStore::addOrReplaceValue<float>(this, a3, a4);
  v13 = VideoSpillMapMetalSession.info;
  if ((v12 & 1) == 0)
  {
    v13 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v41)
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v42);
      v13 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (v13[9] == a2)
    return re::KeyValueStore::addOrReplaceValue<double>(this, a3, a4);
  if ((v14 & 1) == 0)
  {
    if (v44)
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v45);
    }
  }
  if ((__objc2_class_ro *)v15[454] == a2)
    return re::KeyValueStore::addOrReplaceValue<int>(this, a3, a4);
  v17 = VideoSpillMapMetalSession.info;
  if ((v16 & 1) == 0)
  {
    v17 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v47)
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
      v17 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (v17[11] == a2)
    return re::KeyValueStore::addOrReplaceValue<re::Vector2<float>>(this, a3, a4);
  v19 = VideoSpillMapMetalSession.info;
  if ((v18 & 1) == 0)
  {
    v19 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v49)
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
      v19 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (v19[13] == a2)
    return re::KeyValueStore::addOrReplaceValue<re::Vector3<float>>(this, a3, a4);
  v21 = VideoSpillMapMetalSession.info;
  if ((v20 & 1) == 0)
  {
    v21 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v50)
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
      v21 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (v21[15] == a2)
    return re::KeyValueStore::addOrReplaceValue<re::Vector4<float>>(this, a3, a4);
  v23 = VideoSpillMapMetalSession.info;
  if ((v22 & 1) == 0)
  {
    v23 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v51)
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
      v23 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (v23[17] == a2)
    return re::KeyValueStore::addOrReplaceValue<re::Quaternion<float>>(this, a3, a4);
  if (re::introspect<re::GenericSRT<float>>() == a2)
    return re::KeyValueStore::addOrReplaceValue<re::GenericSRT<float>>(this, a3, a4);
  if ((__objc2_class_ro *)re::introspect<re::DynamicString>() == a2)
    return re::KeyValueStore::addOrReplaceValue<re::DynamicString>(this, a3, (const re::DynamicString *)a4);
  if (re::introspect<re::SkeletalPose>() == a2)
    return re::KeyValueStore::addOrReplaceValue<re::SkeletalPose>((uint64_t)this, a3, (uint64_t *)a4);
  if (re::introspect<re::DynamicArray<float>>() == a2)
    return re::KeyValueStore::addOrReplaceValue<re::DynamicArray<float>>(this, a3, (uint64_t *)a4);
  if (re::introspect<re::DynamicArray<re::Vector3<float>>>() == a2)
    return re::KeyValueStore::addOrReplaceValue<re::DynamicArray<re::Vector3<float>>>(this, a3, (uint64_t *)a4);
  if ((__objc2_class_ro *)re::introspect<long long>() != a2)
  {
    if (re::introspect<re::BlendShapeWeights>() == a2)
      return re::KeyValueStore::addOrReplaceValue<re::BlendShapeWeights>((uint64_t)this, a3, (uint64_t)a4);
    return 0;
  }
  return re::KeyValueStore::addOrReplaceValue<long long>(this, a3, a4);
}

uint64_t re::KeyValueStore::addOrReplaceValue<double>(re::KeyValueStore *a1, StringID *a2, _QWORD *a3)
{
  uint64_t v6;
  __objc2_class_ro **v7;
  __objc2_class_ro **v8;
  __objc2_class_ro *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  const re::IntrospectionBase *v13;
  int v14;
  const re::IntrospectionBase *v15;
  __objc2_class_ro *v16;
  uint64_t v17;

  v6 = (uint64_t)a1 + 8;
  v7 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (v7)
  {
    v8 = v7;
    v9 = *v7;
    if ((v10 & 1) == 0)
    {
      v16 = *v7;
      v9 = v16;
      if (v14)
      {
        re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v15);
        v9 = v16;
      }
    }
    if (v9 == (__objc2_class_ro *)re::introspect<double>(void)::info)
      return re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 152, a2, a3);
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, (const re::StringID *)a2);
  }
  if ((v11 & 1) == 0)
  {
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v13);
    }
  }
  v17 = re::introspect<double>(void)::info;
  re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v17);
  return re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 152, a2, a3);
}

uint64_t re::KeyValueStore::addOrReplaceValue<int>(re::KeyValueStore *a1, StringID *a2, _DWORD *a3)
{
  uint64_t v6;
  void **v7;
  __objc2_class_ro **v8;
  void *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  const re::IntrospectionBase *v13;
  int v14;
  const re::IntrospectionBase *v15;
  void *v16;
  void *v17;

  v6 = (uint64_t)a1 + 8;
  v7 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (v7)
  {
    v8 = (__objc2_class_ro **)v7;
    v9 = *v7;
    if ((v10 & 1) == 0)
    {
      v16 = *v7;
      v9 = v16;
      if (v14)
      {
        re::introspect<int>(void)::info = re::introspect_int(0, v15);
        v9 = v16;
      }
    }
    if (v9 == re::introspect<int>(void)::info)
      return re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 200, a2, a3);
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, (const re::StringID *)a2);
  }
  if ((v11 & 1) == 0)
  {
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v13);
    }
  }
  v17 = re::introspect<int>(void)::info;
  re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v17);
  return re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 200, a2, a3);
}

uint64_t re::KeyValueStore::addOrReplaceValue<re::Vector2<float>>(re::KeyValueStore *a1, StringID *a2, _QWORD *a3)
{
  uint64_t v6;
  void **v7;
  __objc2_class_ro **v8;
  void *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  int v13;
  void *v14;
  void *v15;

  v6 = (uint64_t)a1 + 8;
  v7 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (v7)
  {
    v8 = (__objc2_class_ro **)v7;
    v9 = *v7;
    if ((v10 & 1) == 0)
    {
      v14 = *v7;
      v9 = v14;
      if (v13)
      {
        re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
        v9 = v14;
      }
    }
    if (v9 == re::introspect<re::Vector2<float>>(void)::info)
      return re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 248, a2, a3);
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, (const re::StringID *)a2);
  }
  if ((v11 & 1) == 0)
  {
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
    }
  }
  v15 = re::introspect<re::Vector2<float>>(void)::info;
  re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v15);
  return re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 248, a2, a3);
}

uint64_t re::KeyValueStore::addOrReplaceValue<re::Vector3<float>>(re::KeyValueStore *a1, StringID *a2, _OWORD *a3)
{
  uint64_t v6;
  void **v7;
  __objc2_class_ro **v8;
  void *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  int v13;
  void *v14;
  void *v15;

  v6 = (uint64_t)a1 + 8;
  v7 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (v7)
  {
    v8 = (__objc2_class_ro **)v7;
    v9 = *v7;
    if ((v10 & 1) == 0)
    {
      v14 = *v7;
      v9 = v14;
      if (v13)
      {
        re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
        v9 = v14;
      }
    }
    if (v9 == re::introspect<re::Vector3<float>>(void)::info)
      return re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 296, a2, a3);
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, (const re::StringID *)a2);
  }
  if ((v11 & 1) == 0)
  {
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
    }
  }
  v15 = re::introspect<re::Vector3<float>>(void)::info;
  re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v15);
  return re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 296, a2, a3);
}

uint64_t re::KeyValueStore::addOrReplaceValue<re::Vector4<float>>(re::KeyValueStore *a1, StringID *a2, _OWORD *a3)
{
  uint64_t v6;
  void **v7;
  __objc2_class_ro **v8;
  void *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  int v13;
  void *v14;
  void *v15;

  v6 = (uint64_t)a1 + 8;
  v7 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (v7)
  {
    v8 = (__objc2_class_ro **)v7;
    v9 = *v7;
    if ((v10 & 1) == 0)
    {
      v14 = *v7;
      v9 = v14;
      if (v13)
      {
        re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
        v9 = v14;
      }
    }
    if (v9 == re::introspect<re::Vector4<float>>(void)::info)
      return re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 344, a2, a3);
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, (const re::StringID *)a2);
  }
  if ((v11 & 1) == 0)
  {
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
    }
  }
  v15 = re::introspect<re::Vector4<float>>(void)::info;
  re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v15);
  return re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 344, a2, a3);
}

uint64_t re::KeyValueStore::addOrReplaceValue<re::Quaternion<float>>(re::KeyValueStore *a1, StringID *a2, _OWORD *a3)
{
  uint64_t v6;
  __objc2_class_ro **v7;
  __objc2_class_ro **v8;
  __objc2_class_ro *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  int v13;
  __objc2_class_ro *v14;
  uint64_t v15;

  v6 = (uint64_t)a1 + 8;
  v7 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (v7)
  {
    v8 = v7;
    v9 = *v7;
    if ((v10 & 1) == 0)
    {
      v14 = *v7;
      v9 = v14;
      if (v13)
      {
        re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
        v9 = v14;
      }
    }
    if (v9 == (__objc2_class_ro *)re::introspect<re::Quaternion<float>>(void)::info)
      return re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 392, a2, a3);
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, (const re::StringID *)a2);
  }
  if ((v11 & 1) == 0)
  {
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
    }
  }
  v15 = re::introspect<re::Quaternion<float>>(void)::info;
  re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v15);
  return re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 392, a2, a3);
}

uint64_t re::KeyValueStore::addOrReplaceValue<re::GenericSRT<float>>(re::KeyValueStore *a1, StringID *a2, __int128 *a3)
{
  uint64_t v6;
  __objc2_class_ro **v7;
  __objc2_class_ro **v8;
  __objc2_class_ro *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  int v13;
  __objc2_class_ro *v14;
  uint64_t v15;

  v6 = (uint64_t)a1 + 8;
  v7 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (v7)
  {
    v8 = v7;
    v9 = *v7;
    if ((v10 & 1) == 0)
    {
      v14 = *v7;
      v9 = v14;
      if (v13)
      {
        re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
        v9 = v14;
      }
    }
    if (v9 == (__objc2_class_ro *)re::introspect<re::GenericSRT<float>>(void)::info)
      return re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 440, a2, a3);
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, (const re::StringID *)a2);
  }
  if ((v11 & 1) == 0)
  {
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
    }
  }
  v15 = re::introspect<re::GenericSRT<float>>(void)::info;
  re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v15);
  return re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 440, a2, a3);
}

uint64_t re::KeyValueStore::addOrReplaceValue<re::DynamicString>(re::KeyValueStore *a1, StringID *a2, const re::DynamicString *a3)
{
  uint64_t v6;
  __objc2_class_ro **v7;
  __objc2_class_ro **v8;
  __objc2_class_ro *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  const re::IntrospectionBase *v13;
  int v14;
  const re::IntrospectionBase *v15;
  __objc2_class_ro *v16;
  uint64_t v17;

  v6 = (uint64_t)a1 + 8;
  v7 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (v7)
  {
    v8 = v7;
    v9 = *v7;
    if ((v10 & 1) == 0)
    {
      v16 = *v7;
      v9 = v16;
      if (v14)
      {
        re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v15);
        v9 = v16;
      }
    }
    if (v9 == (__objc2_class_ro *)re::introspect<re::DynamicString>(void)::info)
      return re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 488, a2, a3);
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, (const re::StringID *)a2);
  }
  if ((v11 & 1) == 0)
  {
    {
      re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v13);
    }
  }
  v17 = re::introspect<re::DynamicString>(void)::info;
  re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v17);
  return re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<re::DynamicString&>((uint64_t)a1 + 488, a2, a3);
}

uint64_t re::KeyValueStore::addOrReplaceValue<re::SkeletalPose>(uint64_t a1, StringID *a2, uint64_t *a3)
{
  uint64_t v6;
  __objc2_class_ro **v7;
  __objc2_class_ro **v8;
  __objc2_class_ro *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v23;
  __objc2_class_ro *v24;
  int v25;
  uint64_t v26;

  v6 = a1 + 8;
  v7 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
  {
LABEL_5:
    if ((v11 & 1) == 0
    {
      re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
    }
    v26 = re::introspect<re::SkeletalPose>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v26);
    v12 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
    if (*(_QWORD *)(a1 + 536))
    {
      v14 = v13 % *(unsigned int *)(a1 + 560);
      v15 = *(unsigned int *)(*(_QWORD *)(a1 + 544) + 4 * v14);
      if ((_DWORD)v15 != 0x7FFFFFFF)
      {
        v16 = *(_QWORD *)(a1 + 552);
        while (!re::StringID::operator==((_QWORD *)(v16 + 112 * v15 + 8), a2))
        {
          v15 = *(_DWORD *)(v16 + 112 * v15) & 0x7FFFFFFF;
          if (v15 == 0x7FFFFFFF)
            goto LABEL_19;
        }
        v21 = v16 + 112 * v15;
        return v21 + 24;
      }
LABEL_19:
      v20 = re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1 + 536, v14, v13, a2, (uint64_t)a3);
      ++*(_DWORD *)(a1 + 576);
      v21 = *(_QWORD *)(a1 + 552) + 112 * v20;
      return v21 + 24;
    }
LABEL_18:
    LODWORD(v14) = 0;
    goto LABEL_19;
  }
  v8 = v7;
  v9 = *v7;
  if ((v10 & 1) == 0)
  {
    v24 = *v7;
    v9 = v24;
    if (v25)
    {
      re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
      v9 = v24;
    }
  }
  if (v9 != (__objc2_class_ro *)re::introspect<re::SkeletalPose>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, (const re::StringID *)a2);
    goto LABEL_5;
  }
  v17 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v13 = (0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31);
  if (!*(_QWORD *)(a1 + 536))
    goto LABEL_18;
  v14 = v13 % *(unsigned int *)(a1 + 560);
  v18 = *(unsigned int *)(*(_QWORD *)(a1 + 544) + 4 * v14);
  if ((_DWORD)v18 == 0x7FFFFFFF)
    goto LABEL_19;
  v19 = *(_QWORD *)(a1 + 552);
  while (!re::StringID::operator==((_QWORD *)(v19 + 112 * v18 + 8), a2))
  {
    v18 = *(_DWORD *)(v19 + 112 * v18) & 0x7FFFFFFF;
    if (v18 == 0x7FFFFFFF)
      goto LABEL_19;
  }
  v23 = (_QWORD *)(v19 + 112 * v18);
  re::StringID::operator=(v23 + 3, a3);
  re::FixedArray<re::GenericSRT<float>>::operator=(v23 + 5, (uint64_t)(a3 + 2));
  re::DynamicArray<BOOL>::operator=((uint64_t)(v23 + 8), a3 + 5);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v23 + 13, a3[10]);
  ++*(_DWORD *)(a1 + 576);
  v21 = *(_QWORD *)(a1 + 552) + 112 * v18;
  return v21 + 24;
}

unint64_t re::KeyValueStore::addOrReplaceValue<re::DynamicArray<float>>(re::KeyValueStore *a1, StringID *a2, uint64_t *a3)
{
  uint64_t v6;
  __objc2_class_ro **v7;
  __objc2_class_ro **v8;
  __objc2_class_ro *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  const re::IntrospectionBase *v13;
  int v14;
  const re::IntrospectionBase *v15;
  __objc2_class_ro *v16;
  uint64_t v17;

  v6 = (uint64_t)a1 + 8;
  v7 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (v7)
  {
    v8 = v7;
    v9 = *v7;
    if ((v10 & 1) == 0)
    {
      v16 = *v7;
      v9 = v16;
      if (v14)
      {
        re::introspect<re::DynamicArray<float>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<float>>::get(0, v15);
        v9 = v16;
      }
    }
    if (v9 == (__objc2_class_ro *)re::introspect<re::DynamicArray<float>>(void)::info)
      return re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 584, a2, a3);
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, (const re::StringID *)a2);
  }
  if ((v11 & 1) == 0)
  {
    {
      re::introspect<re::DynamicArray<float>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<float>>::get(0, v13);
    }
  }
  v17 = re::introspect<re::DynamicArray<float>>(void)::info;
  re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v17);
  return re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 584, a2, a3);
}

unint64_t re::KeyValueStore::addOrReplaceValue<re::DynamicArray<re::Vector3<float>>>(re::KeyValueStore *a1, StringID *a2, uint64_t *a3)
{
  uint64_t v6;
  __objc2_class_ro **v7;
  __objc2_class_ro **v8;
  __objc2_class_ro *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  int v13;
  __objc2_class_ro *v14;
  uint64_t v15;

  v6 = (uint64_t)a1 + 8;
  v7 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (v7)
  {
    v8 = v7;
    v9 = *v7;
    if ((v10 & 1) == 0)
    {
      v14 = *v7;
      v9 = v14;
      if (v13)
      {
        re::introspect<re::DynamicArray<re::Vector3<float>>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<re::Vector3<float>>>::get(0);
        v9 = v14;
      }
    }
    if (v9 == (__objc2_class_ro *)re::introspect<re::DynamicArray<re::Vector3<float>>>(void)::info)
      return re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 632, a2, a3);
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, (const re::StringID *)a2);
  }
  if ((v11 & 1) == 0)
  {
    {
      re::introspect<re::DynamicArray<re::Vector3<float>>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<re::Vector3<float>>>::get(0);
    }
  }
  v15 = re::introspect<re::DynamicArray<re::Vector3<float>>>(void)::info;
  re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v15);
  return re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 632, a2, a3);
}

uint64_t re::KeyValueStore::addOrReplaceValue<re::BlendShapeWeights>(uint64_t a1, StringID *a2, uint64_t a3)
{
  uint64_t v6;
  __objc2_class_ro **v7;
  __objc2_class_ro **v8;
  __objc2_class_ro *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v23;
  __objc2_class_ro *v24;
  int v25;
  uint64_t v26;

  v6 = a1 + 8;
  v7 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
  {
LABEL_5:
    if ((v11 & 1) == 0
    {
      re::introspect<re::BlendShapeWeights>(void)::info = re::introspect_BlendShapeWeights(0);
    }
    v26 = re::introspect<re::BlendShapeWeights>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v26);
    v12 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
    if (*(_QWORD *)(a1 + 728))
    {
      v14 = v13 % *(unsigned int *)(a1 + 752);
      v15 = *(unsigned int *)(*(_QWORD *)(a1 + 736) + 4 * v14);
      if ((_DWORD)v15 != 0x7FFFFFFF)
      {
        v16 = *(_QWORD *)(a1 + 744);
        while (!re::StringID::operator==((_QWORD *)(v16 + 56 * v15 + 8), a2))
        {
          v15 = *(_DWORD *)(v16 + 56 * v15) & 0x7FFFFFFF;
          if (v15 == 0x7FFFFFFF)
            goto LABEL_19;
        }
        v21 = v16 + 56 * v15;
        return v21 + 24;
      }
LABEL_19:
      v20 = re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1 + 728, v14, v13, a2, a3);
      ++*(_DWORD *)(a1 + 768);
      v21 = *(_QWORD *)(a1 + 744) + 56 * v20;
      return v21 + 24;
    }
LABEL_18:
    LODWORD(v14) = 0;
    goto LABEL_19;
  }
  v8 = v7;
  v9 = *v7;
  if ((v10 & 1) == 0)
  {
    v24 = *v7;
    v9 = v24;
    if (v25)
    {
      re::introspect<re::BlendShapeWeights>(void)::info = re::introspect_BlendShapeWeights(0);
      v9 = v24;
    }
  }
  if (v9 != (__objc2_class_ro *)re::introspect<re::BlendShapeWeights>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, (const re::StringID *)a2);
    goto LABEL_5;
  }
  v17 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v13 = (0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31);
  if (!*(_QWORD *)(a1 + 728))
    goto LABEL_18;
  v14 = v13 % *(unsigned int *)(a1 + 752);
  v18 = *(unsigned int *)(*(_QWORD *)(a1 + 736) + 4 * v14);
  if ((_DWORD)v18 == 0x7FFFFFFF)
    goto LABEL_19;
  v19 = *(_QWORD *)(a1 + 744);
  while (!re::StringID::operator==((_QWORD *)(v19 + 56 * v18 + 8), a2))
  {
    v18 = *(_DWORD *)(v19 + 56 * v18) & 0x7FFFFFFF;
    if (v18 == 0x7FFFFFFF)
      goto LABEL_19;
  }
  v23 = v19 + 56 * v18;
  re::FixedArray<float>::operator=((uint64_t *)(v23 + 24), a3);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v23 + 48), *(_QWORD *)(a3 + 24));
  ++*(_DWORD *)(a1 + 768);
  v21 = *(_QWORD *)(a1 + 744) + 56 * v18;
  return v21 + 24;
}

uint64_t re::KeyValueStore::addAndSwapValue(re::KeyValueStore *this, const re::IntrospectionBase *a2, const re::StringID *a3, __int128 *a4)
{
  re::KeyValueStore *v4;
  __int128 *v5;
  const re::StringID *v6;
  const re::IntrospectionBase *v7;
  __guard *v8;
  unsigned __int8 *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t result;
  __objc2_class_ro **v20;
  __objc2_class_ro **v21;
  __objc2_class_ro *v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  __objc2_class_ro **v31;
  void *v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __objc2_class_ro **v40;
  __objc2_class_ro **v41;
  __objc2_class_ro *v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  void **v55;
  __objc2_class_ro **v56;
  void *v57;
  unsigned __int8 v58;
  unsigned __int8 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  void **v74;
  __objc2_class_ro **v75;
  void *v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  void **v93;
  __objc2_class_ro **v94;
  void *v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  void **v112;
  __objc2_class_ro **v113;
  void *v114;
  unsigned __int8 v115;
  unsigned __int8 v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  const re::IntrospectionBase *v164;
  const re::IntrospectionBase *v165;
  const re::IntrospectionBase *v166;
  const re::IntrospectionBase *v167;
  const re::IntrospectionBase *v168;
  __objc2_class_ro *v169;
  int v170;
  const re::IntrospectionBase *v171;
  const re::IntrospectionBase *v172;
  void *v173;
  int v174;
  const re::IntrospectionBase *v175;
  const re::IntrospectionBase *v176;
  __objc2_class_ro *v177;
  int v178;
  const re::IntrospectionBase *v179;
  const re::IntrospectionBase *v180;
  void *v181;
  int v182;
  const re::IntrospectionBase *v183;
  void *v184;
  int v185;
  void *v186;
  int v187;
  void *v188;
  int v189;
  void *v190;

  if (a4)
  {
    v5 = a4;
    v6 = a3;
    v7 = a2;
    v4 = this;
    if ((v10 & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, a3, "assertion failure: '%s' (%s:line %i) ", "swapValue", "addAndSwapValue", 67);
    _os_crash();
    __break(1u);
  }
  {
    v8[331] = (__guard)re::introspect_BOOL(0, v164);
  }
LABEL_3:
  if ((const re::IntrospectionBase *)v8[331] == v7)
  {
    v20 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4 + 8, v6);
    if (v20)
    {
      v21 = v20;
      v22 = *v20;
      v23 = atomic_load(v9);
      if ((v23 & 1) == 0)
      {
        v169 = *v20;
        v22 = v169;
        if (v170)
        {
          v8[331] = (__guard)re::introspect_BOOL(0, v171);
          v22 = v169;
        }
      }
      if (v22 == (__objc2_class_ro *)v8[331])
      {
        v65 = 0x7FFFFFFFLL;
        if (*((_QWORD *)v4 + 7))
        {
          v66 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)v6 >> 31) ^ (*(_QWORD *)v6 >> 1));
          v67 = *(unsigned int *)(*((_QWORD *)v4 + 8)
                                + 4
                                * (((0x94D049BB133111EBLL * (v66 ^ (v66 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                   * (v66 ^ (v66 >> 27))) >> 31))
                                 % *((unsigned int *)v4 + 20)));
          if ((_DWORD)v67 != 0x7FFFFFFF)
          {
            v68 = *((_QWORD *)v4 + 9);
            v65 = 0x7FFFFFFFLL;
            while (!re::StringID::operator==((_QWORD *)(v68 + 32 * v67 + 8), v6))
            {
              v67 = *(_DWORD *)(v68 + 32 * v67) & 0x7FFFFFFF;
              if (v67 == 0x7FFFFFFF)
                goto LABEL_165;
            }
            v65 = v67;
          }
        }
LABEL_165:
        v131 = *((_QWORD *)v4 + 9) + 32 * v65;
        v132 = *(_BYTE *)(v131 + 24);
        *(_BYTE *)(v131 + 24) = *(_BYTE *)v5;
        *(_BYTE *)v5 = v132;
        return 1;
      }
      re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4 + 8, v6);
      re::KeyValueStore::removeValue(v4, *v21, v6);
    }
    v24 = atomic_load(v9);
    if ((v24 & 1) == 0
    {
      v8[331] = (__guard)re::introspect_BOOL(0, v167);
    }
    v190 = (void *)v8[331];
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v4 + 8, (StringID *)v6, &v190);
    v25 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)v6 >> 31) ^ (*(_QWORD *)v6 >> 1));
    v26 = (0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) ^ ((0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) >> 31);
    if (*((_QWORD *)v4 + 7))
    {
      v27 = v26 % *((unsigned int *)v4 + 20);
      v28 = *(unsigned int *)(*((_QWORD *)v4 + 8) + 4 * v27);
      if ((_DWORD)v28 != 0x7FFFFFFF)
      {
        v29 = *((_QWORD *)v4 + 9);
        while (!re::StringID::operator==((_QWORD *)(v29 + 32 * v28 + 8), v6))
        {
          v28 = *(_DWORD *)(v29 + 32 * v28) & 0x7FFFFFFF;
          if (v28 == 0x7FFFFFFF)
            goto LABEL_61;
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v27) = 0;
    }
LABEL_61:
    v50 = *((unsigned int *)v4 + 23);
    if ((_DWORD)v50 == 0x7FFFFFFF)
    {
      v50 = *((unsigned int *)v4 + 22);
      v51 = v50;
      if ((_DWORD)v50 == *((_DWORD *)v4 + 20))
      {
        re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity((uint64_t)v4 + 56, 2 * *((_DWORD *)v4 + 21));
        LODWORD(v27) = v26 % *((unsigned int *)v4 + 20);
        v51 = *((_DWORD *)v4 + 22);
      }
      *((_DWORD *)v4 + 22) = v51 + 1;
      v52 = *((_QWORD *)v4 + 9);
      v53 = *(_DWORD *)(v52 + 32 * v50);
    }
    else
    {
      v52 = *((_QWORD *)v4 + 9);
      v53 = *(_DWORD *)(v52 + 32 * v50);
      *((_DWORD *)v4 + 23) = v53 & 0x7FFFFFFF;
    }
    v54 = 32 * v50;
    *(_DWORD *)(v52 + v54) = v53 | 0x80000000;
    *(_DWORD *)(*((_QWORD *)v4 + 9) + v54) = *(_DWORD *)(*((_QWORD *)v4 + 9) + 32 * v50) & 0x80000000 | *(_DWORD *)(*((_QWORD *)v4 + 8) + 4 * v27);
    re::StringID::StringID((re::StringID *)(*((_QWORD *)v4 + 9) + 32 * v50 + 8), (const StringID *)v6);
    result = 0;
    *(_BYTE *)(*((_QWORD *)v4 + 9) + 32 * v50 + 24) = *(_BYTE *)v5;
    *(_DWORD *)(*((_QWORD *)v4 + 8) + 4 * v27) = v50;
    ++*((_DWORD *)v4 + 21);
    ++*((_DWORD *)v4 + 24);
    return result;
  }
  if ((v11 & 1) == 0
  {
    re::introspect<float>(void)::info = re::introspect_float(0, v165);
  }
  if (re::introspect<float>(void)::info == (_UNKNOWN *)v7)
  {
    v30 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4 + 8, v6);
    if (v30)
    {
      v31 = (__objc2_class_ro **)v30;
      v32 = *v30;
      if ((v33 & 1) == 0)
      {
        v173 = *v30;
        v32 = v173;
        if (v174)
        {
          re::introspect<float>(void)::info = re::introspect_float(0, v175);
          v32 = v173;
        }
      }
      if (v32 == re::introspect<float>(void)::info)
      {
        v84 = 0x7FFFFFFFLL;
        if (*((_QWORD *)v4 + 13))
        {
          v85 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)v6 >> 31) ^ (*(_QWORD *)v6 >> 1));
          v86 = *(unsigned int *)(*((_QWORD *)v4 + 14)
                                + 4
                                * (((0x94D049BB133111EBLL * (v85 ^ (v85 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                   * (v85 ^ (v85 >> 27))) >> 31))
                                 % *((unsigned int *)v4 + 32)));
          if ((_DWORD)v86 != 0x7FFFFFFF)
          {
            v87 = *((_QWORD *)v4 + 15);
            v84 = 0x7FFFFFFFLL;
            while (!re::StringID::operator==((_QWORD *)(v87 + 32 * v86 + 8), v6))
            {
              v86 = *(_DWORD *)(v87 + 32 * v86) & 0x7FFFFFFF;
              if (v86 == 0x7FFFFFFF)
                goto LABEL_181;
            }
            v84 = v86;
          }
        }
LABEL_181:
        v142 = *((_QWORD *)v4 + 15) + 32 * v84;
        v143 = *(_DWORD *)(v142 + 24);
        *(_DWORD *)(v142 + 24) = *(_DWORD *)v5;
        *(_DWORD *)v5 = v143;
        return 1;
      }
      re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4 + 8, v6);
      re::KeyValueStore::removeValue(v4, *v31, v6);
    }
    if ((v34 & 1) == 0
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v172);
    }
    v190 = re::introspect<float>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v4 + 8, (StringID *)v6, &v190);
    v35 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)v6 >> 31) ^ (*(_QWORD *)v6 >> 1));
    v36 = (0x94D049BB133111EBLL * (v35 ^ (v35 >> 27))) ^ ((0x94D049BB133111EBLL * (v35 ^ (v35 >> 27))) >> 31);
    if (*((_QWORD *)v4 + 13))
    {
      v37 = v36 % *((unsigned int *)v4 + 32);
      v38 = *(unsigned int *)(*((_QWORD *)v4 + 14) + 4 * v37);
      if ((_DWORD)v38 != 0x7FFFFFFF)
      {
        v39 = *((_QWORD *)v4 + 15);
        while (!re::StringID::operator==((_QWORD *)(v39 + 32 * v38 + 8), v6))
        {
          v38 = *(_DWORD *)(v39 + 32 * v38) & 0x7FFFFFFF;
          if (v38 == 0x7FFFFFFF)
            goto LABEL_85;
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v37) = 0;
    }
LABEL_85:
    v69 = *((unsigned int *)v4 + 35);
    if ((_DWORD)v69 == 0x7FFFFFFF)
    {
      v69 = *((unsigned int *)v4 + 34);
      v70 = v69;
      if ((_DWORD)v69 == *((_DWORD *)v4 + 32))
      {
        re::HashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity((uint64_t)v4 + 104, 2 * *((_DWORD *)v4 + 33));
        LODWORD(v37) = v36 % *((unsigned int *)v4 + 32);
        v70 = *((_DWORD *)v4 + 34);
      }
      *((_DWORD *)v4 + 34) = v70 + 1;
      v71 = *((_QWORD *)v4 + 15);
      v72 = *(_DWORD *)(v71 + 32 * v69);
    }
    else
    {
      v71 = *((_QWORD *)v4 + 15);
      v72 = *(_DWORD *)(v71 + 32 * v69);
      *((_DWORD *)v4 + 35) = v72 & 0x7FFFFFFF;
    }
    v73 = 32 * v69;
    *(_DWORD *)(v71 + v73) = v72 | 0x80000000;
    *(_DWORD *)(*((_QWORD *)v4 + 15) + v73) = *(_DWORD *)(*((_QWORD *)v4 + 15) + 32 * v69) & 0x80000000 | *(_DWORD *)(*((_QWORD *)v4 + 14) + 4 * v37);
    re::StringID::StringID((re::StringID *)(*((_QWORD *)v4 + 15) + 32 * v69 + 8), (const StringID *)v6);
    result = 0;
    *(_DWORD *)(*((_QWORD *)v4 + 15) + 32 * v69 + 24) = *(_DWORD *)v5;
    *(_DWORD *)(*((_QWORD *)v4 + 14) + 4 * v37) = v69;
    ++*((_DWORD *)v4 + 33);
    ++*((_DWORD *)v4 + 36);
    return result;
  }
  if ((v12 & 1) == 0
  {
    re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v166);
  }
  if ((const re::IntrospectionBase *)re::introspect<double>(void)::info == v7)
  {
    v40 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4 + 8, v6);
    if (v40)
    {
      v41 = v40;
      v42 = *v40;
      if ((v43 & 1) == 0)
      {
        v177 = *v40;
        v42 = v177;
        if (v178)
        {
          re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v179);
          v42 = v177;
        }
      }
      if (v42 == (__objc2_class_ro *)re::introspect<double>(void)::info)
      {
        v103 = 0x7FFFFFFFLL;
        if (*((_QWORD *)v4 + 19))
        {
          v104 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)v6 >> 31) ^ (*(_QWORD *)v6 >> 1));
          v105 = *(unsigned int *)(*((_QWORD *)v4 + 20)
                                 + 4
                                 * (((0x94D049BB133111EBLL * (v104 ^ (v104 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                      * (v104 ^ (v104 >> 27))) >> 31))
                                  % *((unsigned int *)v4 + 44)));
          if ((_DWORD)v105 != 0x7FFFFFFF)
          {
            v106 = *((_QWORD *)v4 + 21);
            v103 = 0x7FFFFFFFLL;
            while (!re::StringID::operator==((_QWORD *)(v106 + 32 * v105 + 8), v6))
            {
              v105 = *(_DWORD *)(v106 + 32 * v105) & 0x7FFFFFFF;
              if (v105 == 0x7FFFFFFF)
                goto LABEL_197;
            }
            v103 = v105;
          }
        }
LABEL_197:
        v153 = *((_QWORD *)v4 + 21) + 32 * v103;
        v154 = *(_QWORD *)(v153 + 24);
        *(_QWORD *)(v153 + 24) = *(_QWORD *)v5;
        goto LABEL_210;
      }
      re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4 + 8, v6);
      re::KeyValueStore::removeValue(v4, *v41, v6);
    }
    if ((v44 & 1) == 0
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v176);
    }
    v190 = (void *)re::introspect<double>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v4 + 8, (StringID *)v6, &v190);
    v45 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)v6 >> 31) ^ (*(_QWORD *)v6 >> 1));
    v46 = (0x94D049BB133111EBLL * (v45 ^ (v45 >> 27))) ^ ((0x94D049BB133111EBLL * (v45 ^ (v45 >> 27))) >> 31);
    if (*((_QWORD *)v4 + 19))
    {
      v47 = v46 % *((unsigned int *)v4 + 44);
      v48 = *(unsigned int *)(*((_QWORD *)v4 + 20) + 4 * v47);
      if ((_DWORD)v48 != 0x7FFFFFFF)
      {
        v49 = *((_QWORD *)v4 + 21);
        while (!re::StringID::operator==((_QWORD *)(v49 + 32 * v48 + 8), v6))
        {
          v48 = *(_DWORD *)(v49 + 32 * v48) & 0x7FFFFFFF;
          if (v48 == 0x7FFFFFFF)
            goto LABEL_109;
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v47) = 0;
    }
LABEL_109:
    v88 = *((unsigned int *)v4 + 47);
    if ((_DWORD)v88 == 0x7FFFFFFF)
    {
      v88 = *((unsigned int *)v4 + 46);
      v89 = v88;
      if ((_DWORD)v88 == *((_DWORD *)v4 + 44))
      {
        re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity((uint64_t)v4 + 152, 2 * *((_DWORD *)v4 + 45));
        LODWORD(v47) = v46 % *((unsigned int *)v4 + 44);
        v89 = *((_DWORD *)v4 + 46);
      }
      *((_DWORD *)v4 + 46) = v89 + 1;
      v90 = *((_QWORD *)v4 + 21);
      v91 = *(_DWORD *)(v90 + 32 * v88);
    }
    else
    {
      v90 = *((_QWORD *)v4 + 21);
      v91 = *(_DWORD *)(v90 + 32 * v88);
      *((_DWORD *)v4 + 47) = v91 & 0x7FFFFFFF;
    }
    v92 = 32 * v88;
    *(_DWORD *)(v90 + v92) = v91 | 0x80000000;
    *(_DWORD *)(*((_QWORD *)v4 + 21) + v92) = *(_DWORD *)(*((_QWORD *)v4 + 21) + 32 * v88) & 0x80000000 | *(_DWORD *)(*((_QWORD *)v4 + 20) + 4 * v47);
    re::StringID::StringID((re::StringID *)(*((_QWORD *)v4 + 21) + 32 * v88 + 8), (const StringID *)v6);
    result = 0;
    *(_QWORD *)(*((_QWORD *)v4 + 21) + 32 * v88 + 24) = *(_QWORD *)v5;
    *(_DWORD *)(*((_QWORD *)v4 + 20) + 4 * v47) = v88;
    ++*((_DWORD *)v4 + 45);
    ++*((_DWORD *)v4 + 48);
    return result;
  }
  if ((v13 & 1) == 0
  {
    re::introspect<int>(void)::info = re::introspect_int(0, v168);
  }
  if (re::introspect<int>(void)::info == (_UNKNOWN *)v7)
  {
    v55 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4 + 8, v6);
    if (v55)
    {
      v56 = (__objc2_class_ro **)v55;
      v57 = *v55;
      if ((v58 & 1) == 0)
      {
        v181 = *v55;
        v57 = v181;
        if (v182)
        {
          re::introspect<int>(void)::info = re::introspect_int(0, v183);
          v57 = v181;
        }
      }
      if (v57 == re::introspect<int>(void)::info)
      {
        v122 = 0x7FFFFFFFLL;
        if (*((_QWORD *)v4 + 25))
        {
          v123 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)v6 >> 31) ^ (*(_QWORD *)v6 >> 1));
          v124 = *(unsigned int *)(*((_QWORD *)v4 + 26)
                                 + 4
                                 * (((0x94D049BB133111EBLL * (v123 ^ (v123 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                      * (v123 ^ (v123 >> 27))) >> 31))
                                  % *((unsigned int *)v4 + 56)));
          if ((_DWORD)v124 != 0x7FFFFFFF)
          {
            v125 = *((_QWORD *)v4 + 27);
            v122 = 0x7FFFFFFFLL;
            while (!re::StringID::operator==((_QWORD *)(v125 + 32 * v124 + 8), v6))
            {
              v124 = *(_DWORD *)(v125 + 32 * v124) & 0x7FFFFFFF;
              if (v124 == 0x7FFFFFFF)
                goto LABEL_206;
            }
            v122 = v124;
          }
        }
LABEL_206:
        v158 = *((_QWORD *)v4 + 27) + 32 * v122;
        v159 = *(_DWORD *)(v158 + 24);
        *(_DWORD *)(v158 + 24) = *(_DWORD *)v5;
        *(_DWORD *)v5 = v159;
        return 1;
      }
      re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4 + 8, v6);
      re::KeyValueStore::removeValue(v4, *v56, v6);
    }
    if ((v59 & 1) == 0
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v180);
    }
    v190 = re::introspect<int>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v4 + 8, (StringID *)v6, &v190);
    v60 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)v6 >> 31) ^ (*(_QWORD *)v6 >> 1));
    v61 = (0x94D049BB133111EBLL * (v60 ^ (v60 >> 27))) ^ ((0x94D049BB133111EBLL * (v60 ^ (v60 >> 27))) >> 31);
    if (*((_QWORD *)v4 + 25))
    {
      v62 = v61 % *((unsigned int *)v4 + 56);
      v63 = *(unsigned int *)(*((_QWORD *)v4 + 26) + 4 * v62);
      if ((_DWORD)v63 != 0x7FFFFFFF)
      {
        v64 = *((_QWORD *)v4 + 27);
        while (!re::StringID::operator==((_QWORD *)(v64 + 32 * v63 + 8), v6))
        {
          v63 = *(_DWORD *)(v64 + 32 * v63) & 0x7FFFFFFF;
          if (v63 == 0x7FFFFFFF)
            goto LABEL_133;
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v62) = 0;
    }
LABEL_133:
    v107 = *((unsigned int *)v4 + 59);
    if ((_DWORD)v107 == 0x7FFFFFFF)
    {
      v107 = *((unsigned int *)v4 + 58);
      v108 = v107;
      if ((_DWORD)v107 == *((_DWORD *)v4 + 56))
      {
        re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity((uint64_t)v4 + 200, 2 * *((_DWORD *)v4 + 57));
        LODWORD(v62) = v61 % *((unsigned int *)v4 + 56);
        v108 = *((_DWORD *)v4 + 58);
      }
      *((_DWORD *)v4 + 58) = v108 + 1;
      v109 = *((_QWORD *)v4 + 27);
      v110 = *(_DWORD *)(v109 + 32 * v107);
    }
    else
    {
      v109 = *((_QWORD *)v4 + 27);
      v110 = *(_DWORD *)(v109 + 32 * v107);
      *((_DWORD *)v4 + 59) = v110 & 0x7FFFFFFF;
    }
    v111 = 32 * v107;
    *(_DWORD *)(v109 + v111) = v110 | 0x80000000;
    *(_DWORD *)(*((_QWORD *)v4 + 27) + v111) = *(_DWORD *)(*((_QWORD *)v4 + 27) + 32 * v107) & 0x80000000 | *(_DWORD *)(*((_QWORD *)v4 + 26) + 4 * v62);
    re::StringID::StringID((re::StringID *)(*((_QWORD *)v4 + 27) + 32 * v107 + 8), (const StringID *)v6);
    result = 0;
    *(_DWORD *)(*((_QWORD *)v4 + 27) + 32 * v107 + 24) = *(_DWORD *)v5;
    *(_DWORD *)(*((_QWORD *)v4 + 26) + 4 * v62) = v107;
    ++*((_DWORD *)v4 + 57);
    ++*((_DWORD *)v4 + 60);
    return result;
  }
  if ((v14 & 1) == 0
  {
    re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
  }
  if (re::introspect<re::Vector2<float>>(void)::info == (_UNKNOWN *)v7)
  {
    v74 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4 + 8, v6);
    if (!v74)
      goto LABEL_95;
    v75 = (__objc2_class_ro **)v74;
    v76 = *v74;
    if ((v77 & 1) == 0)
    {
      v184 = *v74;
      v76 = v184;
      if (v185)
      {
        re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
        v76 = v184;
      }
    }
    if (v76 != re::introspect<re::Vector2<float>>(void)::info)
    {
      re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4 + 8, v6);
      re::KeyValueStore::removeValue(v4, *v75, v6);
LABEL_95:
      if ((v78 & 1) == 0
      {
        re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
      }
      v190 = re::introspect<re::Vector2<float>>(void)::info;
      re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v4 + 8, (StringID *)v6, &v190);
      v79 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)v6 >> 31) ^ (*(_QWORD *)v6 >> 1));
      v80 = (0x94D049BB133111EBLL * (v79 ^ (v79 >> 27))) ^ ((0x94D049BB133111EBLL * (v79 ^ (v79 >> 27))) >> 31);
      if (*((_QWORD *)v4 + 31))
      {
        v81 = v80 % *((unsigned int *)v4 + 68);
        v82 = *(unsigned int *)(*((_QWORD *)v4 + 32) + 4 * v81);
        if ((_DWORD)v82 != 0x7FFFFFFF)
        {
          v83 = *((_QWORD *)v4 + 33);
          while (!re::StringID::operator==((_QWORD *)(v83 + 32 * v82 + 8), v6))
          {
            v82 = *(_DWORD *)(v83 + 32 * v82) & 0x7FFFFFFF;
            if (v82 == 0x7FFFFFFF)
              goto LABEL_157;
          }
          return 0;
        }
      }
      else
      {
        LODWORD(v81) = 0;
      }
LABEL_157:
      v126 = *((unsigned int *)v4 + 71);
      if ((_DWORD)v126 == 0x7FFFFFFF)
      {
        v126 = *((unsigned int *)v4 + 70);
        v127 = v126;
        if ((_DWORD)v126 == *((_DWORD *)v4 + 68))
        {
          re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity((uint64_t)v4 + 248, 2 * *((_DWORD *)v4 + 69));
          LODWORD(v81) = v80 % *((unsigned int *)v4 + 68);
          v127 = *((_DWORD *)v4 + 70);
        }
        *((_DWORD *)v4 + 70) = v127 + 1;
        v128 = *((_QWORD *)v4 + 33);
        v129 = *(_DWORD *)(v128 + 32 * v126);
      }
      else
      {
        v128 = *((_QWORD *)v4 + 33);
        v129 = *(_DWORD *)(v128 + 32 * v126);
        *((_DWORD *)v4 + 71) = v129 & 0x7FFFFFFF;
      }
      v130 = 32 * v126;
      *(_DWORD *)(v128 + v130) = v129 | 0x80000000;
      *(_DWORD *)(*((_QWORD *)v4 + 33) + v130) = *(_DWORD *)(*((_QWORD *)v4 + 33) + 32 * v126) & 0x80000000 | *(_DWORD *)(*((_QWORD *)v4 + 32) + 4 * v81);
      re::StringID::StringID((re::StringID *)(*((_QWORD *)v4 + 33) + 32 * v126 + 8), (const StringID *)v6);
      result = 0;
      *(_QWORD *)(*((_QWORD *)v4 + 33) + 32 * v126 + 24) = *(_QWORD *)v5;
      *(_DWORD *)(*((_QWORD *)v4 + 32) + 4 * v81) = v126;
      ++*((_DWORD *)v4 + 69);
      ++*((_DWORD *)v4 + 72);
      return result;
    }
    v133 = 0x7FFFFFFFLL;
    if (*((_QWORD *)v4 + 31))
    {
      v134 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)v6 >> 31) ^ (*(_QWORD *)v6 >> 1));
      v135 = *(unsigned int *)(*((_QWORD *)v4 + 32)
                             + 4
                             * (((0x94D049BB133111EBLL * (v134 ^ (v134 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                  * (v134 ^ (v134 >> 27))) >> 31))
                              % *((unsigned int *)v4 + 68)));
      if ((_DWORD)v135 != 0x7FFFFFFF)
      {
        v136 = *((_QWORD *)v4 + 33);
        v133 = 0x7FFFFFFFLL;
        while (!re::StringID::operator==((_QWORD *)(v136 + 32 * v135 + 8), v6))
        {
          v135 = *(_DWORD *)(v136 + 32 * v135) & 0x7FFFFFFF;
          if (v135 == 0x7FFFFFFF)
            goto LABEL_209;
        }
        v133 = v135;
      }
    }
LABEL_209:
    v160 = *((_QWORD *)v4 + 33) + 32 * v133;
    v154 = *(_QWORD *)(v160 + 24);
    *(_QWORD *)(v160 + 24) = *(_QWORD *)v5;
LABEL_210:
    *(_QWORD *)v5 = v154;
    return 1;
  }
  if ((v15 & 1) == 0
  {
    re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
  }
  if (re::introspect<re::Vector3<float>>(void)::info == (_UNKNOWN *)v7)
  {
    v93 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4 + 8, v6);
    if (v93)
    {
      v94 = (__objc2_class_ro **)v93;
      v95 = *v93;
      if ((v96 & 1) == 0)
      {
        v186 = *v93;
        v95 = v186;
        if (v187)
        {
          re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
          v95 = v186;
        }
      }
      if (v95 == re::introspect<re::Vector3<float>>(void)::info)
      {
        v144 = 0x7FFFFFFFLL;
        if (*((_QWORD *)v4 + 37))
        {
          v145 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)v6 >> 31) ^ (*(_QWORD *)v6 >> 1));
          v146 = *(unsigned int *)(*((_QWORD *)v4 + 38)
                                 + 4
                                 * (((0x94D049BB133111EBLL * (v145 ^ (v145 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                      * (v145 ^ (v145 >> 27))) >> 31))
                                  % *((unsigned int *)v4 + 80)));
          if ((_DWORD)v146 != 0x7FFFFFFF)
          {
            v147 = *((_QWORD *)v4 + 39);
            v144 = 0x7FFFFFFFLL;
            while (!re::StringID::operator==((_QWORD *)(v147 + 48 * v146 + 8), v6))
            {
              v146 = *(_DWORD *)(v147 + 48 * v146) & 0x7FFFFFFF;
              if (v146 == 0x7FFFFFFF)
                goto LABEL_213;
            }
            v144 = v146;
          }
        }
LABEL_213:
        v161 = *((_QWORD *)v4 + 39);
LABEL_217:
        v162 = v161 + 48 * v144;
        v163 = *(_OWORD *)(v162 + 32);
        *(_OWORD *)(v162 + 32) = *v5;
        *v5 = v163;
        return 1;
      }
      re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4 + 8, v6);
      re::KeyValueStore::removeValue(v4, *v94, v6);
    }
    if ((v97 & 1) == 0
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
    }
    v190 = re::introspect<re::Vector3<float>>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v4 + 8, (StringID *)v6, &v190);
    v98 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)v6 >> 31) ^ (*(_QWORD *)v6 >> 1));
    v99 = (0x94D049BB133111EBLL * (v98 ^ (v98 >> 27))) ^ ((0x94D049BB133111EBLL * (v98 ^ (v98 >> 27))) >> 31);
    if (*((_QWORD *)v4 + 37))
    {
      v100 = v99 % *((unsigned int *)v4 + 80);
      v101 = *(unsigned int *)(*((_QWORD *)v4 + 38) + 4 * v100);
      if ((_DWORD)v101 != 0x7FFFFFFF)
      {
        v102 = *((_QWORD *)v4 + 39);
        while (!re::StringID::operator==((_QWORD *)(v102 + 48 * v101 + 8), v6))
        {
          v101 = *(_DWORD *)(v102 + 48 * v101) & 0x7FFFFFFF;
          if (v101 == 0x7FFFFFFF)
            goto LABEL_173;
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v100) = 0;
    }
LABEL_173:
    v137 = *((unsigned int *)v4 + 83);
    if ((_DWORD)v137 == 0x7FFFFFFF)
    {
      v137 = *((unsigned int *)v4 + 82);
      v138 = v137;
      if ((_DWORD)v137 == *((_DWORD *)v4 + 80))
      {
        re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity((uint64_t)v4 + 296, 2 * *((_DWORD *)v4 + 81));
        LODWORD(v100) = v99 % *((unsigned int *)v4 + 80);
        v138 = *((_DWORD *)v4 + 82);
      }
      *((_DWORD *)v4 + 82) = v138 + 1;
      v139 = *((_QWORD *)v4 + 39);
      v140 = *(_DWORD *)(v139 + 48 * v137);
    }
    else
    {
      v139 = *((_QWORD *)v4 + 39);
      v140 = *(_DWORD *)(v139 + 48 * v137);
      *((_DWORD *)v4 + 83) = v140 & 0x7FFFFFFF;
    }
    v141 = 48 * v137;
    *(_DWORD *)(v139 + v141) = v140 | 0x80000000;
    *(_DWORD *)(*((_QWORD *)v4 + 39) + v141) = *(_DWORD *)(*((_QWORD *)v4 + 39) + 48 * v137) & 0x80000000 | *(_DWORD *)(*((_QWORD *)v4 + 38) + 4 * v100);
    re::StringID::StringID((re::StringID *)(*((_QWORD *)v4 + 39) + 48 * v137 + 8), (const StringID *)v6);
    result = 0;
    *(_OWORD *)(*((_QWORD *)v4 + 39) + 48 * v137 + 32) = *v5;
    *(_DWORD *)(*((_QWORD *)v4 + 38) + 4 * v100) = v137;
    ++*((_DWORD *)v4 + 81);
    ++*((_DWORD *)v4 + 84);
    return result;
  }
  if ((v16 & 1) == 0
  {
    re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
  }
  if (re::introspect<re::Vector4<float>>(void)::info != (_UNKNOWN *)v7)
  {
    if ((v17 & 1) == 0
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
    }
    if ((const re::IntrospectionBase *)re::introspect<re::Quaternion<float>>(void)::info == v7)
      return re::KeyValueStore::addAndSwapValue<re::Quaternion<float>>((uint64_t)v4, (StringID *)v6, v5);
    if ((v18 & 1) == 0)
    {
      {
        re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
      }
    }
    if ((const re::IntrospectionBase *)re::introspect<re::GenericSRT<float>>(void)::info == v7)
      return re::KeyValueStore::addAndSwapValue<re::GenericSRT<float>>((uint64_t)v4, (StringID *)v6, v5);
    if ((const re::IntrospectionBase *)re::introspect<re::DynamicString>() == v7)
      return re::KeyValueStore::addAndSwapValue<re::DynamicString>((uint64_t)v4, v6, (const re::DynamicString *)v5);
    if (re::introspect<re::SkeletalPose>() == (__objc2_class_ro *)v7)
      return re::KeyValueStore::addAndSwapValue<re::SkeletalPose>((uint64_t)v4, (StringID *)v6, (uint64_t)v5);
    if (re::introspect<re::DynamicArray<float>>() == v7)
      return re::KeyValueStore::addAndSwapValue<re::DynamicArray<float>>((uint64_t)v4, (StringID *)v6, (uint64_t *)v5);
    if (re::introspect<re::DynamicArray<re::Vector3<float>>>() == v7)
      return re::KeyValueStore::addAndSwapValue<re::DynamicArray<re::Vector3<float>>>((uint64_t)v4, (StringID *)v6, (uint64_t *)v5);
    if ((const re::IntrospectionBase *)re::introspect<long long>() == v7)
      return re::KeyValueStore::addAndSwapValue<long long>((uint64_t)v4, (StringID *)v6, v5);
    if (re::introspect<re::BlendShapeWeights>() != (__objc2_class_ro *)v7)
      return 0;
    return re::KeyValueStore::addAndSwapValue<re::BlendShapeWeights>((uint64_t)v4, (StringID *)v6, (uint64_t *)v5);
  }
  v112 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4 + 8, v6);
  if (v112)
  {
    v113 = (__objc2_class_ro **)v112;
    v114 = *v112;
    if ((v115 & 1) == 0)
    {
      v188 = *v112;
      v114 = v188;
      if (v189)
      {
        re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
        v114 = v188;
      }
    }
    if (v114 != re::introspect<re::Vector4<float>>(void)::info)
    {
      re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4 + 8, v6);
      re::KeyValueStore::removeValue(v4, *v113, v6);
      goto LABEL_143;
    }
    v144 = 0x7FFFFFFFLL;
    if (*((_QWORD *)v4 + 43))
    {
      v155 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)v6 >> 31) ^ (*(_QWORD *)v6 >> 1));
      v156 = *(unsigned int *)(*((_QWORD *)v4 + 44)
                             + 4
                             * (((0x94D049BB133111EBLL * (v155 ^ (v155 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                  * (v155 ^ (v155 >> 27))) >> 31))
                              % *((unsigned int *)v4 + 92)));
      if ((_DWORD)v156 != 0x7FFFFFFF)
      {
        v157 = *((_QWORD *)v4 + 45);
        v144 = 0x7FFFFFFFLL;
        while (!re::StringID::operator==((_QWORD *)(v157 + 48 * v156 + 8), v6))
        {
          v156 = *(_DWORD *)(v157 + 48 * v156) & 0x7FFFFFFF;
          if (v156 == 0x7FFFFFFF)
            goto LABEL_216;
        }
        v144 = v156;
      }
    }
LABEL_216:
    v161 = *((_QWORD *)v4 + 45);
    goto LABEL_217;
  }
LABEL_143:
  if ((v116 & 1) == 0
  {
    re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
  }
  v190 = re::introspect<re::Vector4<float>>(void)::info;
  re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v4 + 8, (StringID *)v6, &v190);
  v117 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)v6 >> 31) ^ (*(_QWORD *)v6 >> 1));
  v118 = (0x94D049BB133111EBLL * (v117 ^ (v117 >> 27))) ^ ((0x94D049BB133111EBLL * (v117 ^ (v117 >> 27))) >> 31);
  if (*((_QWORD *)v4 + 43))
  {
    v119 = v118 % *((unsigned int *)v4 + 92);
    v120 = *(unsigned int *)(*((_QWORD *)v4 + 44) + 4 * v119);
    if ((_DWORD)v120 != 0x7FFFFFFF)
    {
      v121 = *((_QWORD *)v4 + 45);
      while (!re::StringID::operator==((_QWORD *)(v121 + 48 * v120 + 8), v6))
      {
        v120 = *(_DWORD *)(v121 + 48 * v120) & 0x7FFFFFFF;
        if (v120 == 0x7FFFFFFF)
          goto LABEL_189;
      }
      return 0;
    }
  }
  else
  {
    LODWORD(v119) = 0;
  }
LABEL_189:
  v148 = *((unsigned int *)v4 + 95);
  if ((_DWORD)v148 == 0x7FFFFFFF)
  {
    v148 = *((unsigned int *)v4 + 94);
    v149 = v148;
    if ((_DWORD)v148 == *((_DWORD *)v4 + 92))
    {
      re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity((uint64_t)v4 + 344, 2 * *((_DWORD *)v4 + 93));
      LODWORD(v119) = v118 % *((unsigned int *)v4 + 92);
      v149 = *((_DWORD *)v4 + 94);
    }
    *((_DWORD *)v4 + 94) = v149 + 1;
    v150 = *((_QWORD *)v4 + 45);
    v151 = *(_DWORD *)(v150 + 48 * v148);
  }
  else
  {
    v150 = *((_QWORD *)v4 + 45);
    v151 = *(_DWORD *)(v150 + 48 * v148);
    *((_DWORD *)v4 + 95) = v151 & 0x7FFFFFFF;
  }
  v152 = 48 * v148;
  *(_DWORD *)(v150 + v152) = v151 | 0x80000000;
  *(_DWORD *)(*((_QWORD *)v4 + 45) + v152) = *(_DWORD *)(*((_QWORD *)v4 + 45) + 48 * v148) & 0x80000000 | *(_DWORD *)(*((_QWORD *)v4 + 44) + 4 * v119);
  re::StringID::StringID((re::StringID *)(*((_QWORD *)v4 + 45) + 48 * v148 + 8), (const StringID *)v6);
  result = 0;
  *(_OWORD *)(*((_QWORD *)v4 + 45) + 48 * v148 + 32) = *v5;
  *(_DWORD *)(*((_QWORD *)v4 + 44) + 4 * v119) = v148;
  ++*((_DWORD *)v4 + 93);
  ++*((_DWORD *)v4 + 96);
  return result;
}

uint64_t re::KeyValueStore::addAndSwapValue<re::Quaternion<float>>(uint64_t a1, StringID *a2, _OWORD *a3)
{
  uint64_t v6;
  __objc2_class_ro **v7;
  __objc2_class_ro **v8;
  __objc2_class_ro *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __objc2_class_ro *v29;
  int v30;
  uint64_t v31;

  v6 = a1 + 8;
  v7 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
  {
LABEL_5:
    if ((v11 & 1) == 0
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
    }
    v31 = re::introspect<re::Quaternion<float>>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v31);
    v12 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
    if (*(_QWORD *)(a1 + 392))
    {
      v14 = v13 % *(unsigned int *)(a1 + 416);
      v15 = *(unsigned int *)(*(_QWORD *)(a1 + 400) + 4 * v14);
      if ((_DWORD)v15 != 0x7FFFFFFF)
      {
        v16 = *(_QWORD *)(a1 + 408);
        while (!re::StringID::operator==((_QWORD *)(v16 + 48 * v15 + 8), a2))
        {
          v15 = *(_DWORD *)(v16 + 48 * v15) & 0x7FFFFFFF;
          if (v15 == 0x7FFFFFFF)
            goto LABEL_13;
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v14) = 0;
    }
LABEL_13:
    v17 = *(unsigned int *)(a1 + 428);
    if ((_DWORD)v17 == 0x7FFFFFFF)
    {
      v17 = *(unsigned int *)(a1 + 424);
      v18 = v17;
      if ((_DWORD)v17 == *(_DWORD *)(a1 + 416))
      {
        re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1 + 392, 2 * *(_DWORD *)(a1 + 420));
        LODWORD(v14) = v13 % *(unsigned int *)(a1 + 416);
        v18 = *(_DWORD *)(a1 + 424);
      }
      *(_DWORD *)(a1 + 424) = v18 + 1;
      v19 = *(_QWORD *)(a1 + 408);
      v20 = *(_DWORD *)(v19 + 48 * v17);
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 408);
      v20 = *(_DWORD *)(v19 + 48 * v17);
      *(_DWORD *)(a1 + 428) = v20 & 0x7FFFFFFF;
    }
    v21 = 48 * v17;
    *(_DWORD *)(v19 + v21) = v20 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 408) + v21) = *(_DWORD *)(*(_QWORD *)(a1 + 408) + 48 * v17) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4 * v14);
    re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 408) + 48 * v17 + 8), a2);
    result = 0;
    *(_OWORD *)(*(_QWORD *)(a1 + 408) + 48 * v17 + 32) = *a3;
    *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4 * v14) = v17;
    ++*(_DWORD *)(a1 + 420);
    ++*(_DWORD *)(a1 + 432);
    return result;
  }
  v8 = v7;
  v9 = *v7;
  if ((v10 & 1) == 0)
  {
    v29 = *v7;
    v9 = v29;
    if (v30)
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
      v9 = v29;
    }
  }
  if (v9 != (__objc2_class_ro *)re::introspect<re::Quaternion<float>>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, (const re::StringID *)a2);
    goto LABEL_5;
  }
  v23 = 0x7FFFFFFFLL;
  if (*(_QWORD *)(a1 + 392))
  {
    v24 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v25 = *(unsigned int *)(*(_QWORD *)(a1 + 400)
                          + 4
                          * (((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) ^ ((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 416)));
    if ((_DWORD)v25 != 0x7FFFFFFF)
    {
      v26 = *(_QWORD *)(a1 + 408);
      v23 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((_QWORD *)(v26 + 48 * v25 + 8), a2))
      {
        v25 = *(_DWORD *)(v26 + 48 * v25) & 0x7FFFFFFF;
        if (v25 == 0x7FFFFFFF)
          goto LABEL_27;
      }
      v23 = v25;
    }
  }
LABEL_27:
  v27 = *(_QWORD *)(a1 + 408) + 48 * v23;
  v28 = *(_OWORD *)(v27 + 32);
  *(_OWORD *)(v27 + 32) = *a3;
  *a3 = v28;
  return 1;
}

uint64_t re::KeyValueStore::addAndSwapValue<re::GenericSRT<float>>(uint64_t a1, StringID *a2, __int128 *a3)
{
  uint64_t v6;
  __objc2_class_ro **v7;
  __objc2_class_ro **v8;
  __objc2_class_ro *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __objc2_class_ro *v36;
  int v37;
  uint64_t v38[7];

  v6 = a1 + 8;
  v7 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
  {
LABEL_5:
    if ((v11 & 1) == 0
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
    }
    v38[0] = re::introspect<re::GenericSRT<float>>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, v38);
    v12 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
    if (*(_QWORD *)(a1 + 440))
    {
      v14 = v13 % *(unsigned int *)(a1 + 464);
      v15 = *(unsigned int *)(*(_QWORD *)(a1 + 448) + 4 * v14);
      if ((_DWORD)v15 != 0x7FFFFFFF)
      {
        v16 = *(_QWORD *)(a1 + 456);
        while (!re::StringID::operator==((_QWORD *)(v16 + 80 * v15 + 8), a2))
        {
          v15 = *(_DWORD *)(v16 + 80 * v15) & 0x7FFFFFFF;
          if (v15 == 0x7FFFFFFF)
            goto LABEL_13;
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v14) = 0;
    }
LABEL_13:
    v17 = *(unsigned int *)(a1 + 476);
    if ((_DWORD)v17 == 0x7FFFFFFF)
    {
      v17 = *(unsigned int *)(a1 + 472);
      v18 = v17;
      if ((_DWORD)v17 == *(_DWORD *)(a1 + 464))
      {
        re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1 + 440, 2 * *(_DWORD *)(a1 + 468));
        LODWORD(v14) = v13 % *(unsigned int *)(a1 + 464);
        v18 = *(_DWORD *)(a1 + 472);
      }
      *(_DWORD *)(a1 + 472) = v18 + 1;
      v19 = *(_QWORD *)(a1 + 456);
      v20 = *(_DWORD *)(v19 + 80 * v17);
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 456);
      v20 = *(_DWORD *)(v19 + 80 * v17);
      *(_DWORD *)(a1 + 476) = v20 & 0x7FFFFFFF;
    }
    v21 = 80 * v17;
    *(_DWORD *)(v19 + v21) = v20 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 456) + v21) = *(_DWORD *)(*(_QWORD *)(a1 + 456) + 80 * v17) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 448) + 4 * v14);
    re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 456) + 80 * v17 + 8), a2);
    result = 0;
    v23 = (_OWORD *)(*(_QWORD *)(a1 + 456) + 80 * v17);
    v24 = *a3;
    v25 = a3[2];
    v23[3] = a3[1];
    v23[4] = v25;
    v23[2] = v24;
    *(_DWORD *)(*(_QWORD *)(a1 + 448) + 4 * v14) = v17;
    ++*(_DWORD *)(a1 + 468);
    ++*(_DWORD *)(a1 + 480);
    return result;
  }
  v8 = v7;
  v9 = *v7;
  if ((v10 & 1) == 0)
  {
    v36 = *v7;
    v9 = v36;
    if (v37)
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
      v9 = v36;
    }
  }
  if (v9 != (__objc2_class_ro *)re::introspect<re::GenericSRT<float>>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, (const re::StringID *)a2);
    goto LABEL_5;
  }
  v26 = 0x7FFFFFFFLL;
  if (*(_QWORD *)(a1 + 440))
  {
    v27 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v28 = *(unsigned int *)(*(_QWORD *)(a1 + 448)
                          + 4
                          * (((0x94D049BB133111EBLL * (v27 ^ (v27 >> 27))) ^ ((0x94D049BB133111EBLL * (v27 ^ (v27 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 464)));
    if ((_DWORD)v28 != 0x7FFFFFFF)
    {
      v29 = *(_QWORD *)(a1 + 456);
      v26 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((_QWORD *)(v29 + 80 * v28 + 8), a2))
      {
        v28 = *(_DWORD *)(v29 + 80 * v28) & 0x7FFFFFFF;
        if (v28 == 0x7FFFFFFF)
          goto LABEL_27;
      }
      v26 = v28;
    }
  }
LABEL_27:
  v30 = (_OWORD *)(*(_QWORD *)(a1 + 456) + 80 * v26);
  v31 = v30[2];
  v32 = v30[3];
  v33 = v30[4];
  v35 = a3[1];
  v34 = a3[2];
  v30[2] = *a3;
  v30[3] = v35;
  v30[4] = v34;
  a3[1] = v32;
  a3[2] = v33;
  *a3 = v31;
  return 1;
}

uint64_t re::KeyValueStore::addAndSwapValue<re::DynamicString>(uint64_t a1, const re::StringID *a2, const re::DynamicString *a3)
{
  uint64_t v6;
  __objc2_class_ro **v7;
  __objc2_class_ro **v8;
  __objc2_class_ro *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  re::DynamicString *v17;
  uint64_t v18;
  const re::IntrospectionBase *v19;
  int v20;
  const re::IntrospectionBase *v21;
  __objc2_class_ro *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a1 + 8;
  v7 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
    goto LABEL_5;
  v8 = v7;
  v9 = *v7;
  if ((v10 & 1) == 0)
  {
    v22 = *v7;
    v9 = v22;
    if (v20)
    {
      re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v21);
      v9 = v22;
    }
  }
  if (v9 != (__objc2_class_ro *)re::introspect<re::DynamicString>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, a2);
LABEL_5:
    if ((v11 & 1) == 0)
    {
      {
        re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v19);
      }
    }
    v23 = re::introspect<re::DynamicString>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, (StringID *)a2, &v23);
    re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<re::DynamicString&>(a1 + 488, (StringID *)a2, a3);
    return 0;
  }
  v13 = 0x7FFFFFFFLL;
  if (*(_QWORD *)(a1 + 488))
  {
    v14 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)a2 >> 31) ^ (*(_QWORD *)a2 >> 1));
    v15 = *(unsigned int *)(*(_QWORD *)(a1 + 496)
                          + 4
                          * (((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 512)));
    if ((_DWORD)v15 != 0x7FFFFFFF)
    {
      v16 = *(_QWORD *)(a1 + 504);
      v13 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((_QWORD *)(v16 + 56 * v15 + 8), a2))
      {
        v15 = *(_DWORD *)(v16 + 56 * v15) & 0x7FFFFFFF;
        if (v15 == 0x7FFFFFFF)
          goto LABEL_14;
      }
      v13 = v15;
    }
  }
LABEL_14:
  v17 = (re::DynamicString *)(*(_QWORD *)(a1 + 504) + 56 * v13);
  v18 = *((_QWORD *)v17 + 3);
  v17 = (re::DynamicString *)((char *)v17 + 24);
  v23 = v18;
  *(_QWORD *)v17 = 0;
  v25 = *((_QWORD *)v17 + 2);
  *((_QWORD *)v17 + 2) = 0;
  v26 = *((_QWORD *)v17 + 3);
  *((_QWORD *)v17 + 3) = 0;
  v24 = *((_QWORD *)v17 + 1);
  *((_QWORD *)v17 + 1) = 0;
  re::DynamicString::operator=(v17, a3);
  re::DynamicString::operator=(a3, (re::DynamicString *)&v23);
  if (v23 && (v24 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v23 + 40))();
  return 1;
}

uint64_t re::KeyValueStore::addAndSwapValue<re::SkeletalPose>(uint64_t a1, StringID *a2, uint64_t a3)
{
  uint64_t v6;
  __objc2_class_ro **v7;
  __objc2_class_ro **v8;
  __objc2_class_ro *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  uint64_t result;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  id v37;
  __objc2_class_ro *v38;
  int v39;
  uint64_t v40[2];
  _QWORD v41[3];
  uint64_t v42[5];
  uint64_t v43;

  v6 = a1 + 8;
  v7 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
  {
LABEL_5:
    if ((v11 & 1) == 0
    {
      re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
    }
    v40[0] = re::introspect<re::SkeletalPose>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, v40);
    v12 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
    if (*(_QWORD *)(a1 + 536))
    {
      v14 = v13 % *(unsigned int *)(a1 + 560);
      v15 = *(unsigned int *)(*(_QWORD *)(a1 + 544) + 4 * v14);
      if ((_DWORD)v15 != 0x7FFFFFFF)
      {
        v16 = *(_QWORD *)(a1 + 552);
        while (!re::StringID::operator==((_QWORD *)(v16 + 112 * v15 + 8), a2))
        {
          v15 = *(_DWORD *)(v16 + 112 * v15) & 0x7FFFFFFF;
          if (v15 == 0x7FFFFFFF)
            goto LABEL_13;
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v14) = 0;
    }
LABEL_13:
    v17 = *(unsigned int *)(a1 + 572);
    if ((_DWORD)v17 == 0x7FFFFFFF)
    {
      v17 = *(unsigned int *)(a1 + 568);
      v18 = v17;
      if ((_DWORD)v17 == *(_DWORD *)(a1 + 560))
      {
        re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1 + 536, 2 * *(_DWORD *)(a1 + 564));
        LODWORD(v14) = v13 % *(unsigned int *)(a1 + 560);
        v18 = *(_DWORD *)(a1 + 568);
      }
      *(_DWORD *)(a1 + 568) = v18 + 1;
      v19 = *(_QWORD *)(a1 + 552);
      v20 = *(_DWORD *)(v19 + 112 * v17);
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 552);
      v20 = *(_DWORD *)(v19 + 112 * v17);
      *(_DWORD *)(a1 + 572) = v20 & 0x7FFFFFFF;
    }
    v21 = 112 * v17;
    *(_DWORD *)(v19 + v21) = v20 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 552) + v21) = *(_DWORD *)(*(_QWORD *)(a1 + 552) + 112 * v17) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 544) + 4 * v14);
    re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 552) + 112 * v17 + 8), a2);
    v22 = (_QWORD *)(*(_QWORD *)(a1 + 552) + 112 * v17);
    re::StringID::StringID((re::StringID *)(v22 + 3), (const StringID *)a3);
    re::FixedArray<re::GenericSRT<float>>::FixedArray(v22 + 5, a3 + 16);
    re::DynamicArray<BOOL>::DynamicArray((uint64_t)(v22 + 8), (uint64_t *)(a3 + 40));
    v23 = *(_QWORD *)(a3 + 80);
    v22[13] = v23;
    if (v23)
      v24 = (id)(v23 + 8);
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 544) + 4 * v14) = v17;
    ++*(_DWORD *)(a1 + 564);
    ++*(_DWORD *)(a1 + 576);
    return result;
  }
  v8 = v7;
  v9 = *v7;
  if ((v10 & 1) == 0)
  {
    v38 = *v7;
    v9 = v38;
    if (v39)
    {
      re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
      v9 = v38;
    }
  }
  if (v9 != (__objc2_class_ro *)re::introspect<re::SkeletalPose>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, (const re::StringID *)a2);
    goto LABEL_5;
  }
  v26 = 0x7FFFFFFFLL;
  if (*(_QWORD *)(a1 + 536))
  {
    v27 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v28 = *(unsigned int *)(*(_QWORD *)(a1 + 544)
                          + 4
                          * (((0x94D049BB133111EBLL * (v27 ^ (v27 >> 27))) ^ ((0x94D049BB133111EBLL * (v27 ^ (v27 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 560)));
    if ((_DWORD)v28 != 0x7FFFFFFF)
    {
      v29 = *(_QWORD *)(a1 + 552);
      v26 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((_QWORD *)(v29 + 112 * v28 + 8), a2))
      {
        v28 = *(_DWORD *)(v29 + 112 * v28) & 0x7FFFFFFF;
        if (v28 == 0x7FFFFFFF)
          goto LABEL_29;
      }
      v26 = v28;
    }
  }
LABEL_29:
  v30 = *(_QWORD *)(a1 + 552) + 112 * v26;
  v31 = (unint64_t *)(v30 + 24);
  re::StringID::StringID((re::StringID *)v40, (const StringID *)(v30 + 24));
  v32 = (_QWORD *)(v30 + 40);
  re::FixedArray<re::GenericSRT<float>>::FixedArray(v41, v30 + 40);
  v33 = v30 + 64;
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v42, (uint64_t *)(v30 + 64));
  v36 = *(_QWORD *)(v30 + 104);
  v35 = (uint64_t *)(v30 + 104);
  v34 = v36;
  v43 = v36;
  if (v36)
    v37 = (id)(v34 + 8);
  re::StringID::operator=(v31, (uint64_t *)a3);
  re::FixedArray<re::GenericSRT<float>>::operator=(v32, a3 + 16);
  re::DynamicArray<BOOL>::operator=(v33, (uint64_t *)(a3 + 40));
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v35, *(_QWORD *)(a3 + 80));
  re::StringID::operator=((unint64_t *)a3, v40);
  re::FixedArray<re::GenericSRT<float>>::operator=((_QWORD *)(a3 + 16), (uint64_t)v41);
  re::DynamicArray<BOOL>::operator=(a3 + 40, v42);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a3 + 80), v43);
  re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)v40);
  return 1;
}

uint64_t re::KeyValueStore::addAndSwapValue<re::DynamicArray<float>>(uint64_t a1, StringID *a2, uint64_t *a3)
{
  uint64_t v6;
  __objc2_class_ro **v7;
  __objc2_class_ro **v8;
  __objc2_class_ro *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  const re::IntrospectionBase *v29;
  __objc2_class_ro *v30;
  int v31;
  const re::IntrospectionBase *v32;
  _QWORD v33[3];
  int v34;
  uint64_t v35;

  v6 = a1 + 8;
  v7 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
  {
LABEL_5:
    if ((v11 & 1) == 0
    {
      re::introspect<re::DynamicArray<float>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<float>>::get(0, v29);
    }
    v33[0] = re::introspect<re::DynamicArray<float>>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, v33);
    v12 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
    if (*(_QWORD *)(a1 + 584))
    {
      v14 = v13 % *(unsigned int *)(a1 + 608);
      v15 = *(unsigned int *)(*(_QWORD *)(a1 + 592) + 4 * v14);
      if ((_DWORD)v15 != 0x7FFFFFFF)
      {
        v16 = *(_QWORD *)(a1 + 600);
        while (!re::StringID::operator==((_QWORD *)(v16 + (v15 << 6) + 8), a2))
        {
          v15 = *(_DWORD *)(v16 + (v15 << 6)) & 0x7FFFFFFF;
          if (v15 == 0x7FFFFFFF)
            goto LABEL_13;
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v14) = 0;
    }
LABEL_13:
    v17 = *(unsigned int *)(a1 + 620);
    if ((_DWORD)v17 == 0x7FFFFFFF)
    {
      v17 = *(unsigned int *)(a1 + 616);
      v18 = v17;
      if ((_DWORD)v17 == *(_DWORD *)(a1 + 608))
      {
        re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1 + 584, 2 * *(_DWORD *)(a1 + 612));
        LODWORD(v14) = v13 % *(unsigned int *)(a1 + 608);
        v18 = *(_DWORD *)(a1 + 616);
      }
      *(_DWORD *)(a1 + 616) = v18 + 1;
      v19 = *(_QWORD *)(a1 + 600);
      v20 = *(_DWORD *)(v19 + (v17 << 6));
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 600);
      v20 = *(_DWORD *)(v19 + (v17 << 6));
      *(_DWORD *)(a1 + 620) = v20 & 0x7FFFFFFF;
    }
    v21 = v17 << 6;
    *(_DWORD *)(v19 + v21) = v20 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 600) + v21) = *(_DWORD *)(*(_QWORD *)(a1 + 600) + (v17 << 6)) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 592) + 4 * v14);
    re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 600) + (v17 << 6) + 8), a2);
    re::DynamicArray<float>::DynamicArray(*(_QWORD *)(a1 + 600) + (v17 << 6) + 24, a3);
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 592) + 4 * v14) = v17;
    ++*(_DWORD *)(a1 + 612);
    ++*(_DWORD *)(a1 + 624);
    return result;
  }
  v8 = v7;
  v9 = *v7;
  if ((v10 & 1) == 0)
  {
    v30 = *v7;
    v9 = v30;
    if (v31)
    {
      re::introspect<re::DynamicArray<float>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<float>>::get(0, v32);
      v9 = v30;
    }
  }
  if (v9 != (__objc2_class_ro *)re::introspect<re::DynamicArray<float>>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, (const re::StringID *)a2);
    goto LABEL_5;
  }
  v23 = 0x7FFFFFFFLL;
  if (*(_QWORD *)(a1 + 584))
  {
    v24 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v25 = *(unsigned int *)(*(_QWORD *)(a1 + 592)
                          + 4
                          * (((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) ^ ((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 608)));
    if ((_DWORD)v25 != 0x7FFFFFFF)
    {
      v26 = *(_QWORD *)(a1 + 600);
      v23 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((_QWORD *)(v26 + (v25 << 6) + 8), a2))
      {
        v25 = *(_DWORD *)(v26 + (v25 << 6)) & 0x7FFFFFFF;
        if (v25 == 0x7FFFFFFF)
          goto LABEL_27;
      }
      v23 = v25;
    }
  }
LABEL_27:
  v27 = (_QWORD *)(*(_QWORD *)(a1 + 600) + (v23 << 6));
  v28 = v27[3];
  v27 += 3;
  v33[0] = v28;
  *v27 = 0;
  v33[1] = v27[1];
  v27[1] = 0;
  v33[2] = v27[2];
  v27[2] = 0;
  v35 = v27[4];
  v27[4] = 0;
  ++*((_DWORD *)v27 + 6);
  v34 = 1;
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)v27, (uint64_t)a3);
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)a3, (uint64_t)v33);
  if (v33[0] && v35)
    (*(void (**)(void))(*(_QWORD *)v33[0] + 40))();
  return 1;
}

uint64_t re::KeyValueStore::addAndSwapValue<re::DynamicArray<re::Vector3<float>>>(uint64_t a1, StringID *a2, uint64_t *a3)
{
  uint64_t v6;
  __objc2_class_ro **v7;
  __objc2_class_ro **v8;
  __objc2_class_ro *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  __objc2_class_ro *v29;
  int v30;
  _QWORD v31[3];
  int v32;
  uint64_t v33;

  v6 = a1 + 8;
  v7 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
  {
LABEL_5:
    if ((v11 & 1) == 0
    {
      re::introspect<re::DynamicArray<re::Vector3<float>>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<re::Vector3<float>>>::get(0);
    }
    v31[0] = re::introspect<re::DynamicArray<re::Vector3<float>>>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, v31);
    v12 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
    if (*(_QWORD *)(a1 + 632))
    {
      v14 = v13 % *(unsigned int *)(a1 + 656);
      v15 = *(unsigned int *)(*(_QWORD *)(a1 + 640) + 4 * v14);
      if ((_DWORD)v15 != 0x7FFFFFFF)
      {
        v16 = *(_QWORD *)(a1 + 648);
        while (!re::StringID::operator==((_QWORD *)(v16 + (v15 << 6) + 8), a2))
        {
          v15 = *(_DWORD *)(v16 + (v15 << 6)) & 0x7FFFFFFF;
          if (v15 == 0x7FFFFFFF)
            goto LABEL_13;
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v14) = 0;
    }
LABEL_13:
    v17 = *(unsigned int *)(a1 + 668);
    if ((_DWORD)v17 == 0x7FFFFFFF)
    {
      v17 = *(unsigned int *)(a1 + 664);
      v18 = v17;
      if ((_DWORD)v17 == *(_DWORD *)(a1 + 656))
      {
        re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1 + 632, 2 * *(_DWORD *)(a1 + 660));
        LODWORD(v14) = v13 % *(unsigned int *)(a1 + 656);
        v18 = *(_DWORD *)(a1 + 664);
      }
      *(_DWORD *)(a1 + 664) = v18 + 1;
      v19 = *(_QWORD *)(a1 + 648);
      v20 = *(_DWORD *)(v19 + (v17 << 6));
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 648);
      v20 = *(_DWORD *)(v19 + (v17 << 6));
      *(_DWORD *)(a1 + 668) = v20 & 0x7FFFFFFF;
    }
    v21 = v17 << 6;
    *(_DWORD *)(v19 + v21) = v20 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 648) + v21) = *(_DWORD *)(*(_QWORD *)(a1 + 648) + (v17 << 6)) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 640) + 4 * v14);
    re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 648) + (v17 << 6) + 8), a2);
    re::DynamicArray<re::Vector3<float>>::DynamicArray(*(_QWORD *)(a1 + 648) + (v17 << 6) + 24, a3);
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 640) + 4 * v14) = v17;
    ++*(_DWORD *)(a1 + 660);
    ++*(_DWORD *)(a1 + 672);
    return result;
  }
  v8 = v7;
  v9 = *v7;
  if ((v10 & 1) == 0)
  {
    v29 = *v7;
    v9 = v29;
    if (v30)
    {
      re::introspect<re::DynamicArray<re::Vector3<float>>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<re::Vector3<float>>>::get(0);
      v9 = v29;
    }
  }
  if (v9 != (__objc2_class_ro *)re::introspect<re::DynamicArray<re::Vector3<float>>>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, (const re::StringID *)a2);
    goto LABEL_5;
  }
  v23 = 0x7FFFFFFFLL;
  if (*(_QWORD *)(a1 + 632))
  {
    v24 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v25 = *(unsigned int *)(*(_QWORD *)(a1 + 640)
                          + 4
                          * (((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) ^ ((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 656)));
    if ((_DWORD)v25 != 0x7FFFFFFF)
    {
      v26 = *(_QWORD *)(a1 + 648);
      v23 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((_QWORD *)(v26 + (v25 << 6) + 8), a2))
      {
        v25 = *(_DWORD *)(v26 + (v25 << 6)) & 0x7FFFFFFF;
        if (v25 == 0x7FFFFFFF)
          goto LABEL_27;
      }
      v23 = v25;
    }
  }
LABEL_27:
  v27 = (_QWORD *)(*(_QWORD *)(a1 + 648) + (v23 << 6));
  v28 = v27[3];
  v27 += 3;
  v31[0] = v28;
  *v27 = 0;
  v31[1] = v27[1];
  v27[1] = 0;
  v31[2] = v27[2];
  v27[2] = 0;
  v33 = v27[4];
  v27[4] = 0;
  ++*((_DWORD *)v27 + 6);
  v32 = 1;
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)v27, (uint64_t)a3);
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)a3, (uint64_t)v31);
  if (v31[0] && v33)
    (*(void (**)(void))(*(_QWORD *)v31[0] + 40))();
  return 1;
}

uint64_t re::KeyValueStore::addAndSwapValue<long long>(uint64_t a1, StringID *a2, _QWORD *a3)
{
  uint64_t v6;
  __objc2_class_ro **v7;
  __objc2_class_ro **v8;
  __objc2_class_ro *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const re::IntrospectionBase *v29;
  __objc2_class_ro *v30;
  int v31;
  const re::IntrospectionBase *v32;
  uint64_t v33;

  v6 = a1 + 8;
  v7 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
  {
LABEL_5:
    if ((v11 & 1) == 0
    {
      re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v29);
    }
    v33 = re::introspect<long long>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v33);
    v12 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
    if (*(_QWORD *)(a1 + 680))
    {
      v14 = v13 % *(unsigned int *)(a1 + 704);
      v15 = *(unsigned int *)(*(_QWORD *)(a1 + 688) + 4 * v14);
      if ((_DWORD)v15 != 0x7FFFFFFF)
      {
        v16 = *(_QWORD *)(a1 + 696);
        while (!re::StringID::operator==((_QWORD *)(v16 + 32 * v15 + 8), a2))
        {
          v15 = *(_DWORD *)(v16 + 32 * v15) & 0x7FFFFFFF;
          if (v15 == 0x7FFFFFFF)
            goto LABEL_13;
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v14) = 0;
    }
LABEL_13:
    v17 = *(unsigned int *)(a1 + 716);
    if ((_DWORD)v17 == 0x7FFFFFFF)
    {
      v17 = *(unsigned int *)(a1 + 712);
      v18 = v17;
      if ((_DWORD)v17 == *(_DWORD *)(a1 + 704))
      {
        re::HashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1 + 680, 2 * *(_DWORD *)(a1 + 708));
        LODWORD(v14) = v13 % *(unsigned int *)(a1 + 704);
        v18 = *(_DWORD *)(a1 + 712);
      }
      *(_DWORD *)(a1 + 712) = v18 + 1;
      v19 = *(_QWORD *)(a1 + 696);
      v20 = *(_DWORD *)(v19 + 32 * v17);
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 696);
      v20 = *(_DWORD *)(v19 + 32 * v17);
      *(_DWORD *)(a1 + 716) = v20 & 0x7FFFFFFF;
    }
    v21 = 32 * v17;
    *(_DWORD *)(v19 + v21) = v20 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 696) + v21) = *(_DWORD *)(*(_QWORD *)(a1 + 696) + 32 * v17) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 688) + 4 * v14);
    re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 696) + 32 * v17 + 8), a2);
    result = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 696) + 32 * v17 + 24) = *a3;
    *(_DWORD *)(*(_QWORD *)(a1 + 688) + 4 * v14) = v17;
    ++*(_DWORD *)(a1 + 708);
    ++*(_DWORD *)(a1 + 720);
    return result;
  }
  v8 = v7;
  v9 = *v7;
  if ((v10 & 1) == 0)
  {
    v30 = *v7;
    v9 = v30;
    if (v31)
    {
      re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v32);
      v9 = v30;
    }
  }
  if (v9 != (__objc2_class_ro *)re::introspect<long long>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, (const re::StringID *)a2);
    goto LABEL_5;
  }
  v23 = 0x7FFFFFFFLL;
  if (*(_QWORD *)(a1 + 680))
  {
    v24 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v25 = *(unsigned int *)(*(_QWORD *)(a1 + 688)
                          + 4
                          * (((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) ^ ((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 704)));
    if ((_DWORD)v25 != 0x7FFFFFFF)
    {
      v26 = *(_QWORD *)(a1 + 696);
      v23 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((_QWORD *)(v26 + 32 * v25 + 8), a2))
      {
        v25 = *(_DWORD *)(v26 + 32 * v25) & 0x7FFFFFFF;
        if (v25 == 0x7FFFFFFF)
          goto LABEL_27;
      }
      v23 = v25;
    }
  }
LABEL_27:
  v27 = *(_QWORD *)(a1 + 696) + 32 * v23;
  v28 = *(_QWORD *)(v27 + 24);
  *(_QWORD *)(v27 + 24) = *a3;
  *a3 = v28;
  return 1;
}

uint64_t re::KeyValueStore::addAndSwapValue<re::BlendShapeWeights>(uint64_t a1, StringID *a2, uint64_t *a3)
{
  uint64_t v6;
  __objc2_class_ro **v7;
  __objc2_class_ro **v8;
  __objc2_class_ro *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t result;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  id v35;
  __objc2_class_ro *v36;
  int v37;
  uint64_t v38[3];
  uint64_t v39;

  v6 = a1 + 8;
  v7 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
  {
LABEL_5:
    if ((v11 & 1) == 0
    {
      re::introspect<re::BlendShapeWeights>(void)::info = re::introspect_BlendShapeWeights(0);
    }
    v38[0] = re::introspect<re::BlendShapeWeights>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, v38);
    v12 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
    if (*(_QWORD *)(a1 + 728))
    {
      v14 = v13 % *(unsigned int *)(a1 + 752);
      v15 = *(unsigned int *)(*(_QWORD *)(a1 + 736) + 4 * v14);
      if ((_DWORD)v15 != 0x7FFFFFFF)
      {
        v16 = *(_QWORD *)(a1 + 744);
        while (!re::StringID::operator==((_QWORD *)(v16 + 56 * v15 + 8), a2))
        {
          v15 = *(_DWORD *)(v16 + 56 * v15) & 0x7FFFFFFF;
          if (v15 == 0x7FFFFFFF)
            goto LABEL_13;
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v14) = 0;
    }
LABEL_13:
    v17 = *(unsigned int *)(a1 + 764);
    if ((_DWORD)v17 == 0x7FFFFFFF)
    {
      v17 = *(unsigned int *)(a1 + 760);
      v18 = v17;
      if ((_DWORD)v17 == *(_DWORD *)(a1 + 752))
      {
        re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1 + 728, 2 * *(_DWORD *)(a1 + 756));
        LODWORD(v14) = v13 % *(unsigned int *)(a1 + 752);
        v18 = *(_DWORD *)(a1 + 760);
      }
      *(_DWORD *)(a1 + 760) = v18 + 1;
      v19 = *(_QWORD *)(a1 + 744);
      v20 = *(_DWORD *)(v19 + 56 * v17);
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 744);
      v20 = *(_DWORD *)(v19 + 56 * v17);
      *(_DWORD *)(a1 + 764) = v20 & 0x7FFFFFFF;
    }
    v21 = 56 * v17;
    *(_DWORD *)(v19 + v21) = v20 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 744) + v21) = *(_DWORD *)(*(_QWORD *)(a1 + 744) + 56 * v17) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 736) + 4 * v14);
    re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 744) + 56 * v17 + 8), a2);
    v22 = *(_QWORD *)(a1 + 744) + 56 * v17;
    re::FixedArray<float>::FixedArray((uint64_t *)(v22 + 24), (uint64_t)a3);
    v23 = a3[3];
    *(_QWORD *)(v22 + 48) = v23;
    if (v23)
      v24 = (id)(v23 + 8);
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 736) + 4 * v14) = v17;
    ++*(_DWORD *)(a1 + 756);
    ++*(_DWORD *)(a1 + 768);
    return result;
  }
  v8 = v7;
  v9 = *v7;
  if ((v10 & 1) == 0)
  {
    v36 = *v7;
    v9 = v36;
    if (v37)
    {
      re::introspect<re::BlendShapeWeights>(void)::info = re::introspect_BlendShapeWeights(0);
      v9 = v36;
    }
  }
  if (v9 != (__objc2_class_ro *)re::introspect<re::BlendShapeWeights>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, (const re::StringID *)a2);
    goto LABEL_5;
  }
  v26 = 0x7FFFFFFFLL;
  if (*(_QWORD *)(a1 + 728))
  {
    v27 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v28 = *(unsigned int *)(*(_QWORD *)(a1 + 736)
                          + 4
                          * (((0x94D049BB133111EBLL * (v27 ^ (v27 >> 27))) ^ ((0x94D049BB133111EBLL * (v27 ^ (v27 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 752)));
    if ((_DWORD)v28 != 0x7FFFFFFF)
    {
      v29 = *(_QWORD *)(a1 + 744);
      v26 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((_QWORD *)(v29 + 56 * v28 + 8), a2))
      {
        v28 = *(_DWORD *)(v29 + 56 * v28) & 0x7FFFFFFF;
        if (v28 == 0x7FFFFFFF)
          goto LABEL_29;
      }
      v26 = v28;
    }
  }
LABEL_29:
  v30 = *(_QWORD *)(a1 + 744) + 56 * v26;
  v31 = (uint64_t *)(v30 + 24);
  re::FixedArray<float>::FixedArray(v38, v30 + 24);
  v34 = *(_QWORD *)(v30 + 48);
  v33 = (uint64_t *)(v30 + 48);
  v32 = v34;
  v39 = v34;
  if (v34)
    v35 = (id)(v32 + 8);
  re::FixedArray<float>::operator=(v31, (uint64_t)a3);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v33, a3[3]);
  re::FixedArray<float>::operator=(a3, (uint64_t)v38);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(a3 + 3, v39);
  re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v38);
  return 1;
}

uint64_t re::KeyValueStore::getValue(re::KeyValueStore *this, __objc2_class_ro *a2, const re::StringID *a3)
{
  __objc2_class_ro *v4;
  __objc2_class_ro **v6;
  unsigned __int8 v7;
  __guard *v8;
  unsigned __int8 v9;
  __objc2_class_ro **p_info;
  unsigned __int8 v11;
  __objc2_class_ro **v12;
  unsigned __int8 v13;
  __guard *v14;
  unsigned __int8 v15;
  __objc2_class_ro **v16;
  unsigned __int8 v17;
  __objc2_class_ro **v18;
  unsigned __int8 v19;
  __objc2_class_ro **v20;
  unsigned __int8 v21;
  __objc2_class_ro **v22;
  unsigned __int8 v23;
  __objc2_class_ro **v24;
  int v26;
  const re::IntrospectionBase *v27;
  int v28;
  const re::IntrospectionBase *v29;
  int v30;
  const re::IntrospectionBase *v31;
  int v32;
  const re::IntrospectionBase *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;

  v4 = a2;
  if (!a2)
  {
    v6 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 8, a3);
    if (!v6)
      return 0;
    v4 = *v6;
  }
  if ((v7 & 1) == 0)
  {
    if (v26)
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v27);
    }
  }
  if (v4 == (__objc2_class_ro *)v8[331])
    return re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 56, a3);
  p_info = VideoSpillMapMetalSession.info;
  if ((v9 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v28)
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v29);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (v4 == p_info[7])
    return re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 104, a3);
  v12 = VideoSpillMapMetalSession.info;
  if ((v11 & 1) == 0)
  {
    v12 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v30)
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v31);
      v12 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (v4 == v12[9])
    return re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 152, a3);
  if ((v13 & 1) == 0)
  {
    if (v32)
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v33);
    }
  }
  if (v4 == (__objc2_class_ro *)v14[454])
    return re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 200, a3);
  v16 = VideoSpillMapMetalSession.info;
  if ((v15 & 1) == 0)
  {
    v16 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v34)
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
      v16 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (v4 == v16[11])
    return re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 248, a3);
  v18 = VideoSpillMapMetalSession.info;
  if ((v17 & 1) == 0)
  {
    v18 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v35)
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
      v18 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (v4 == v18[13])
    return re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 296, a3);
  v20 = VideoSpillMapMetalSession.info;
  if ((v19 & 1) == 0)
  {
    v20 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v36)
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
      v20 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (v4 == v20[15])
    return re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 344, a3);
  v22 = VideoSpillMapMetalSession.info;
  if ((v21 & 1) == 0)
  {
    v22 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v37)
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
      v22 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (v4 == v22[17])
    return re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 392, a3);
  v24 = VideoSpillMapMetalSession.info;
  if ((v23 & 1) == 0)
  {
    v24 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v38)
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
      v24 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  if (v4 == v24[39])
    return re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 440, a3);
  if (v4 == (__objc2_class_ro *)re::introspect<re::DynamicString>())
    return re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 488, a3);
  if (v4 == re::introspect<re::SkeletalPose>())
    return re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 536, a3);
  if (v4 == re::introspect<re::DynamicArray<float>>())
    return re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 584, a3);
  if (v4 == re::introspect<re::DynamicArray<re::Vector3<float>>>())
    return re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 632, a3);
  if (v4 == (__objc2_class_ro *)re::introspect<long long>())
    return re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 680, a3);
  if (v4 != re::introspect<re::BlendShapeWeights>())
    return 0;
  return re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 728, a3);
}

uint64_t re::KeyValueStore::typeInfo(re::KeyValueStore *this, const re::StringID *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*((_QWORD *)this + 1))
    return 0;
  v3 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)a2 >> 31) ^ (*(_QWORD *)a2 >> 1));
  v4 = *(unsigned int *)(*((_QWORD *)this + 2)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *((unsigned int *)this + 8)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v5 = *((_QWORD *)this + 3);
  while (1)
  {
    v6 = v5 + 32 * v4;
    if (re::StringID::operator==((_QWORD *)(v6 + 8), a2))
      break;
    v4 = *(_DWORD *)(v5 + 32 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF)
      return 0;
  }
  return *(_QWORD *)(v6 + 24);
}

void re::KeyValueStore::removeValue(re::KeyValueStore *this, __objc2_class_ro *a2, const re::StringID *a3)
{
  unsigned __int8 v6;
  __guard *v7;
  unsigned __int8 v8;
  __objc2_class_ro **p_info;
  unsigned __int8 v10;
  __objc2_class_ro **v11;
  unsigned __int8 v12;
  __guard *v13;
  unsigned __int8 v14;
  __objc2_class_ro **v15;
  unsigned __int8 v16;
  __objc2_class_ro **v17;
  unsigned __int8 v18;
  __objc2_class_ro **v19;
  unsigned __int8 v20;
  __objc2_class_ro **v21;
  unsigned __int8 v22;
  __objc2_class_ro **v23;
  int v24;
  const re::IntrospectionBase *v25;
  int v26;
  const re::IntrospectionBase *v27;
  int v28;
  const re::IntrospectionBase *v29;
  int v30;
  const re::IntrospectionBase *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;

  if ((v6 & 1) == 0)
  {
    if (v24)
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v25);
    }
  }
  if ((__objc2_class_ro *)v7[331] == a2)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 56, a3);
  }
  else
  {
    p_info = VideoSpillMapMetalSession.info;
    if ((v8 & 1) == 0)
    {
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      if (v26)
      {
        re::introspect<float>(void)::info = re::introspect_float(0, v27);
        p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      }
    }
    if (p_info[7] == a2)
    {
      re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 104, a3);
    }
    else
    {
      v11 = VideoSpillMapMetalSession.info;
      if ((v10 & 1) == 0)
      {
        v11 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        if (v28)
        {
          re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v29);
          v11 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        }
      }
      if (v11[9] == a2)
      {
        re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 152, a3);
      }
      else
      {
        if ((v12 & 1) == 0)
        {
          if (v30)
          {
            re::introspect<int>(void)::info = re::introspect_int(0, v31);
          }
        }
        if ((__objc2_class_ro *)v13[454] == a2)
        {
          re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 200, a3);
        }
        else
        {
          v15 = VideoSpillMapMetalSession.info;
          if ((v14 & 1) == 0)
          {
            v15 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
            if (v32)
            {
              re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
              v15 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
            }
          }
          if (v15[11] == a2)
          {
            re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 248, a3);
          }
          else
          {
            v17 = VideoSpillMapMetalSession.info;
            if ((v16 & 1) == 0)
            {
              v17 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
              if (v33)
              {
                re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
                v17 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
              }
            }
            if (v17[13] == a2)
            {
              re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 296, a3);
            }
            else
            {
              v19 = VideoSpillMapMetalSession.info;
              if ((v18 & 1) == 0)
              {
                v19 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
                if (v34)
                {
                  re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
                  v19 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
                }
              }
              if (v19[15] == a2)
              {
                re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 344, a3);
              }
              else
              {
                v21 = VideoSpillMapMetalSession.info;
                if ((v20 & 1) == 0)
                {
                  v21 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
                  if (v35)
                  {
                    re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
                    v21 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
                  }
                }
                if (v21[17] == a2)
                {
                  re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 392, a3);
                }
                else
                {
                  v23 = VideoSpillMapMetalSession.info;
                  if ((v22 & 1) == 0)
                  {
                    v23 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
                    if (v36)
                    {
                      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
                      v23 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
                    }
                  }
                  if (v23[39] == a2)
                  {
                    re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 440, a3);
                  }
                  else if ((__objc2_class_ro *)re::introspect<re::DynamicString>() == a2)
                  {
                    re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 488, a3);
                  }
                  else if (re::introspect<re::SkeletalPose>() == a2)
                  {
                    re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 536, a3);
                  }
                  else if (re::introspect<re::DynamicArray<float>>() == a2)
                  {
                    re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 584, a3);
                  }
                  else if (re::introspect<re::DynamicArray<re::Vector3<float>>>() == a2)
                  {
                    re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 632, a3);
                  }
                  else if ((__objc2_class_ro *)re::introspect<long long>() == a2)
                  {
                    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 680, a3);
                  }
                  else if (re::introspect<re::BlendShapeWeights>() == a2)
                  {
                    re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 728, a3);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t *re::allocInfo_KeyValueStore(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410EDC0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410EDC0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410F2C0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410F2D0 = 0;
    qword_25410F2E0 = 0;
    qword_25410F2E8 = 0xFFFFFFFFLL;
    qword_25410F2C0 = (uint64_t)&off_24ED7DAA8;
    qword_25410F2F0 = (uint64_t)"KeyValueStore";
    dword_25410F2F8 = 0;
    xmmword_25410F300 = 0u;
    xmmword_25410F310 = 0u;
    xmmword_25410F320 = 0u;
    qword_25410F330 = 0;
    __cxa_guard_release(&qword_25410EDC0);
  }
  return &qword_25410F2C0;
}

void re::initInfo_KeyValueStore(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  const re::IntrospectionBase *v9;
  uint64_t *v10;
  unsigned __int8 v11;
  _OWORD *v12;
  const re::IntrospectionBase *v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  re::IntrospectionRegistry *v17;
  const re::IntrospectionBase *v18;
  const char *v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  _anonymous_namespace_ *v27;
  uint64_t v28;
  uint64_t v29;
  const re::IntrospectionBase *v30;
  uint64_t *v31;
  unsigned __int8 v32;
  _OWORD *v33;
  const re::IntrospectionBase *v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  re::IntrospectionRegistry *v38;
  const re::IntrospectionBase *v39;
  const char *v40;
  __int128 v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  _anonymous_namespace_ *v48;
  uint64_t v49;
  uint64_t v50;
  const re::IntrospectionBase *v51;
  uint64_t *v52;
  unsigned __int8 v53;
  _OWORD *v54;
  const re::IntrospectionBase *v55;
  _DWORD *v56;
  uint64_t v57;
  int v58;
  re::IntrospectionRegistry *v59;
  const re::IntrospectionBase *v60;
  const char *v61;
  __int128 v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  _anonymous_namespace_ *v69;
  uint64_t v70;
  uint64_t v71;
  const re::IntrospectionBase *v72;
  uint64_t *v73;
  unsigned __int8 v74;
  _OWORD *v75;
  const re::IntrospectionBase *v76;
  _DWORD *v77;
  uint64_t v78;
  int v79;
  re::IntrospectionRegistry *v80;
  const re::IntrospectionBase *v81;
  const char *v82;
  __int128 v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  _anonymous_namespace_ *v90;
  uint64_t v91;
  uint64_t v92;
  const re::IntrospectionBase *v93;
  uint64_t *v94;
  unsigned __int8 v95;
  _OWORD *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  re::IntrospectionRegistry *v100;
  const re::IntrospectionBase *v101;
  const char *v102;
  __int128 v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  _anonymous_namespace_ *v110;
  uint64_t v111;
  uint64_t v112;
  const re::IntrospectionBase *v113;
  uint64_t *v114;
  unsigned __int8 v115;
  _OWORD *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  re::IntrospectionRegistry *v120;
  const re::IntrospectionBase *v121;
  const char *v122;
  __int128 v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  void *v128;
  const char *v129;
  _anonymous_namespace_ *v130;
  uint64_t v131;
  uint64_t v132;
  const re::IntrospectionBase *v133;
  uint64_t *v134;
  unsigned __int8 v135;
  _OWORD *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  re::IntrospectionRegistry *v140;
  const re::IntrospectionBase *v141;
  const char *v142;
  __int128 v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  void *v148;
  const char *v149;
  _anonymous_namespace_ *v150;
  uint64_t v151;
  uint64_t v152;
  const re::IntrospectionBase *v153;
  uint64_t *v154;
  unsigned __int8 v155;
  _OWORD *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  re::IntrospectionRegistry *v160;
  const re::IntrospectionBase *v161;
  const char *v162;
  __int128 v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  void *v168;
  const char *v169;
  _anonymous_namespace_ *v170;
  uint64_t v171;
  uint64_t v172;
  const re::IntrospectionBase *v173;
  uint64_t *v174;
  unsigned __int8 v175;
  _OWORD *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  re::IntrospectionRegistry *v180;
  const re::IntrospectionBase *v181;
  const char *v182;
  __int128 v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  void *v188;
  const char *v189;
  _anonymous_namespace_ *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  const re::IntrospectionBase *v194;
  uint64_t *v195;
  uint64_t v196;
  const re::IntrospectionBase *v197;
  uint64_t *v198;
  unsigned __int8 v199;
  _OWORD *v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  re::IntrospectionRegistry *v204;
  const re::IntrospectionBase *v205;
  const char *v206;
  __int128 v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  void *v212;
  const char *v213;
  _anonymous_namespace_ *v214;
  uint64_t v215;
  uint64_t v216;
  const re::IntrospectionBase *v217;
  uint64_t *v218;
  unsigned __int8 v219;
  _OWORD *v220;
  const re::IntrospectionBase *v221;
  uint64_t *v222;
  uint64_t v223;
  int v224;
  re::IntrospectionRegistry *v225;
  const re::IntrospectionBase *v226;
  const char *v227;
  __int128 v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  void *v233;
  const char *v234;
  _anonymous_namespace_ *v235;
  uint64_t v236;
  uint64_t v237;
  const re::IntrospectionBase *v238;
  uint64_t *v239;
  unsigned __int8 v240;
  _OWORD *v241;
  uint64_t *v242;
  uint64_t v243;
  int v244;
  re::IntrospectionRegistry *v245;
  const re::IntrospectionBase *v246;
  const char *v247;
  __int128 v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  void *v253;
  const char *v254;
  _anonymous_namespace_ *v255;
  uint64_t v256;
  uint64_t v257;
  const re::IntrospectionBase *v258;
  uint64_t *v259;
  unsigned __int8 v260;
  _OWORD *v261;
  const re::IntrospectionBase *v262;
  _DWORD *v263;
  uint64_t v264;
  int v265;
  re::IntrospectionRegistry *v266;
  const re::IntrospectionBase *v267;
  const char *v268;
  __int128 v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  void *v274;
  const char *v275;
  _anonymous_namespace_ *v276;
  uint64_t v277;
  uint64_t v278;
  const re::IntrospectionBase *v279;
  uint64_t *v280;
  unsigned __int8 v281;
  _OWORD *v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  re::IntrospectionRegistry *v286;
  const re::IntrospectionBase *v287;
  const char *v288;
  __int128 v289;
  uint64_t *v290;
  uint64_t v291;
  uint64_t *v292;
  uint64_t v293;
  void *v294;
  const char *v295;
  _anonymous_namespace_ *v296;
  uint64_t v297;
  uint64_t v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  uint64_t v304[2];
  __int128 v305;
  __int128 v306;
  uint64_t v307;
  const char *v308;
  const char *v309;
  void *v310;
  uint64_t v311;
  __int128 v312;
  StringID v313;
  const char **v314;

  v307 = 0xB1B2D880730A6B1ELL;
  v308 = "KeyValueStore";
  re::StringID::destroyString((re::StringID *)&v307);
  *((_OWORD *)this + 2) = v300;
  v4 = atomic_load((unsigned __int8 *)&qword_25410EDB8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410EDB8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_KeyValueStoreInterface((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "KeyValueStoreInterface";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410F3B0 = v8;
      v10 = re::introspectionAllocator((re *)v8);
      v11 = atomic_load((unsigned __int8 *)&qword_25410EDE0);
      if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_25410EDE0))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_25410EE60);
        qword_25410EE60 = (uint64_t)&off_24ED65BB0;
        __cxa_guard_release(&qword_25410EDE0);
      }
      if ((_MergedGlobals_254 & 1) == 0)
      {
        v12 = re::IntrospectionInfo<re::StringID>::get(1, v9);
        v14 = re::introspect_BOOL((re *)1, v13);
        if ((_MergedGlobals_254 & 1) == 0)
        {
          v15 = (uint64_t)v14;
          _MergedGlobals_254 = 1;
          v16 = v14[6];
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410EE60, 0);
          qword_25410EE70 = 0x3000000007;
          dword_25410EE78 = v16;
          word_25410EE7C = 0;
          *(_QWORD *)&xmmword_25410EE80 = 0;
          *((_QWORD *)&xmmword_25410EE80 + 1) = 0xFFFFFFFFLL;
          qword_25410EE90 = (uint64_t)v12;
          unk_25410EE98 = 0;
          qword_25410EEA0 = v15;
          unk_25410EEA8 = 0;
          qword_25410EE60 = (uint64_t)&off_24ED65BB0;
          re::IntrospectionRegistry::add(v17, v18);
          re::getPrettyTypeName((re *)&qword_25410EE60, (const re::IntrospectionBase *)&v307);
          if ((v308 & 1) != 0)
            v19 = v309;
          else
            v19 = (char *)&v308 + 1;
          if (v307 && (v308 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v307 + 40))();
          v20 = v12[2];
          v302 = *(_OWORD *)(v15 + 32);
          v303 = v20;
          v21 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v304);
          if (v21)
          {
            v22 = *v21;
            *((_QWORD *)&v301 + 1) = v22;
          }
          else
          {
            v307 = 0x449AD97C4B77BED4;
            v308 = "_CompareFunc";
            v23 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v307);
            if (v23)
            {
              v24 = *v23;
              re::StringID::destroyString((re::StringID *)&v307);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v307);
              *(_QWORD *)&v313.var0 = 0x449AD97C4B77BED4;
              v313.var1 = "_CompareFunc";
              v25 = (void *)v307;
              v24 = (uint64_t)v308;
              re::StringID::destroyString((re::StringID *)&v313);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v313, (uint64_t)&v308);
            if (!v25
              || (v26 = *v314,
                  v307 = v24,
                  v308 = v26,
                  LODWORD(v309) = -1,
                  (v27 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v313.var0 + 768, &v307)) == 0)|| !*(_QWORD *)v27)
            {
              v312 = v303;
              v310 = v25;
              v311 = v24;
            }
            v305 = v302;
            v306 = v303;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v307, v304, 1, 0x30uLL, 8uLL, &v306, &v305);
            re::TypeBuilder::setConstructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v307, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v307, v28);
          }
          xmmword_25410EE80 = v301;
          re::StringID::destroyString((re::StringID *)v304);
        }
      }
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "BOOLValues";
      *(_QWORD *)(v29 + 16) = &qword_25410EE60;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x3800000001;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_25410F3B8 = v29;
      v31 = re::introspectionAllocator((re *)v29);
      v32 = atomic_load((unsigned __int8 *)&qword_25410EDE8);
      if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_25410EDE8))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_25410EEB0);
        qword_25410EEB0 = (uint64_t)&off_24ED65C50;
        __cxa_guard_release(&qword_25410EDE8);
      }
      if ((byte_25410EDA9 & 1) == 0)
      {
        v33 = re::IntrospectionInfo<re::StringID>::get(1, v30);
        v35 = re::introspect_float((re *)1, v34);
        if ((byte_25410EDA9 & 1) == 0)
        {
          v36 = (uint64_t)v35;
          byte_25410EDA9 = 1;
          v37 = v35[6];
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410EEB0, 0);
          qword_25410EEC0 = 0x3000000007;
          dword_25410EEC8 = v37;
          word_25410EECC = 0;
          *(_QWORD *)&xmmword_25410EED0 = 0;
          *((_QWORD *)&xmmword_25410EED0 + 1) = 0xFFFFFFFFLL;
          qword_25410EEE0 = (uint64_t)v33;
          unk_25410EEE8 = 0;
          qword_25410EEF0 = v36;
          unk_25410EEF8 = 0;
          qword_25410EEB0 = (uint64_t)&off_24ED65C50;
          re::IntrospectionRegistry::add(v38, v39);
          re::getPrettyTypeName((re *)&qword_25410EEB0, (const re::IntrospectionBase *)&v307);
          if ((v308 & 1) != 0)
            v40 = v309;
          else
            v40 = (char *)&v308 + 1;
          if (v307 && (v308 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v307 + 40))();
          v41 = v33[2];
          v302 = *(_OWORD *)(v36 + 32);
          v303 = v41;
          v42 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v304);
          if (v42)
          {
            v43 = *v42;
            *((_QWORD *)&v301 + 1) = v43;
          }
          else
          {
            v307 = 0x449AD97C4B77BED4;
            v308 = "_CompareFunc";
            v44 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v307);
            if (v44)
            {
              v45 = *v44;
              re::StringID::destroyString((re::StringID *)&v307);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v307);
              *(_QWORD *)&v313.var0 = 0x449AD97C4B77BED4;
              v313.var1 = "_CompareFunc";
              v46 = (void *)v307;
              v45 = (uint64_t)v308;
              re::StringID::destroyString((re::StringID *)&v313);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v313, (uint64_t)&v308);
            if (!v46
              || (v47 = *v314,
                  v307 = v45,
                  v308 = v47,
                  LODWORD(v309) = -1,
                  (v48 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v313.var0 + 768, &v307)) == 0)|| !*(_QWORD *)v48)
            {
              v312 = v303;
              v310 = v46;
              v311 = v45;
            }
            v305 = v302;
            v306 = v303;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v307, v304, 1, 0x30uLL, 8uLL, &v306, &v305);
            re::TypeBuilder::setConstructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v307, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v307, v49);
          }
          xmmword_25410EED0 = v301;
          re::StringID::destroyString((re::StringID *)v304);
        }
      }
      v50 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v50 = 1;
      *(_QWORD *)(v50 + 8) = "floatValues";
      *(_QWORD *)(v50 + 16) = &qword_25410EEB0;
      *(_QWORD *)(v50 + 24) = 0;
      *(_QWORD *)(v50 + 32) = 0x6800000002;
      *(_DWORD *)(v50 + 40) = 0;
      *(_QWORD *)(v50 + 48) = 0;
      *(_QWORD *)(v50 + 56) = 0;
      *(_DWORD *)(v50 + 64) = 0;
      qword_25410F3C0 = v50;
      v52 = re::introspectionAllocator((re *)v50);
      v53 = atomic_load((unsigned __int8 *)&qword_25410EDF0);
      if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_25410EDF0))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_25410EF00);
        qword_25410EF00 = (uint64_t)&off_24ED65CF0;
        __cxa_guard_release(&qword_25410EDF0);
      }
      if ((byte_25410EDAA & 1) == 0)
      {
        v54 = re::IntrospectionInfo<re::StringID>::get(1, v51);
        v56 = re::introspect_double((re *)1, v55);
        if ((byte_25410EDAA & 1) == 0)
        {
          v57 = (uint64_t)v56;
          byte_25410EDAA = 1;
          v58 = v56[6];
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410EF00, 0);
          qword_25410EF10 = 0x3000000007;
          dword_25410EF18 = v58;
          word_25410EF1C = 0;
          *(_QWORD *)&xmmword_25410EF20 = 0;
          *((_QWORD *)&xmmword_25410EF20 + 1) = 0xFFFFFFFFLL;
          qword_25410EF30 = (uint64_t)v54;
          unk_25410EF38 = 0;
          qword_25410EF40 = v57;
          unk_25410EF48 = 0;
          qword_25410EF00 = (uint64_t)&off_24ED65CF0;
          re::IntrospectionRegistry::add(v59, v60);
          re::getPrettyTypeName((re *)&qword_25410EF00, (const re::IntrospectionBase *)&v307);
          if ((v308 & 1) != 0)
            v61 = v309;
          else
            v61 = (char *)&v308 + 1;
          if (v307 && (v308 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v307 + 40))();
          v62 = v54[2];
          v302 = *(_OWORD *)(v57 + 32);
          v303 = v62;
          v63 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v304);
          if (v63)
          {
            v64 = *v63;
            *((_QWORD *)&v301 + 1) = v64;
          }
          else
          {
            v307 = 0x449AD97C4B77BED4;
            v308 = "_CompareFunc";
            v65 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v307);
            if (v65)
            {
              v66 = *v65;
              re::StringID::destroyString((re::StringID *)&v307);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v307);
              *(_QWORD *)&v313.var0 = 0x449AD97C4B77BED4;
              v313.var1 = "_CompareFunc";
              v67 = (void *)v307;
              v66 = (uint64_t)v308;
              re::StringID::destroyString((re::StringID *)&v313);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v313, (uint64_t)&v308);
            if (!v67
              || (v68 = *v314,
                  v307 = v66,
                  v308 = v68,
                  LODWORD(v309) = -1,
                  (v69 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v313.var0 + 768, &v307)) == 0)|| !*(_QWORD *)v69)
            {
              v312 = v303;
              v310 = v67;
              v311 = v66;
            }
            v305 = v302;
            v306 = v303;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v307, v304, 1, 0x30uLL, 8uLL, &v306, &v305);
            re::TypeBuilder::setConstructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v307, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v307, v70);
          }
          xmmword_25410EF20 = v301;
          re::StringID::destroyString((re::StringID *)v304);
        }
      }
      v71 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 72, 8);
      *(_DWORD *)v71 = 1;
      *(_QWORD *)(v71 + 8) = "doubleValues";
      *(_QWORD *)(v71 + 16) = &qword_25410EF00;
      *(_QWORD *)(v71 + 24) = 0;
      *(_QWORD *)(v71 + 32) = 0x9800000003;
      *(_DWORD *)(v71 + 40) = 0;
      *(_QWORD *)(v71 + 48) = 0;
      *(_QWORD *)(v71 + 56) = 0;
      *(_DWORD *)(v71 + 64) = 0;
      qword_25410F3C8 = v71;
      v73 = re::introspectionAllocator((re *)v71);
      v74 = atomic_load((unsigned __int8 *)&qword_25410EDF8);
      if ((v74 & 1) == 0 && __cxa_guard_acquire(&qword_25410EDF8))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_25410EF50);
        qword_25410EF50 = (uint64_t)&off_24ED65D90;
        __cxa_guard_release(&qword_25410EDF8);
      }
      if ((byte_25410EDAB & 1) == 0)
      {
        v75 = re::IntrospectionInfo<re::StringID>::get(1, v72);
        v77 = re::introspect_int((re *)1, v76);
        if ((byte_25410EDAB & 1) == 0)
        {
          v78 = (uint64_t)v77;
          byte_25410EDAB = 1;
          v79 = v77[6];
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410EF50, 0);
          qword_25410EF60 = 0x3000000007;
          dword_25410EF68 = v79;
          word_25410EF6C = 0;
          *(_QWORD *)&xmmword_25410EF70 = 0;
          *((_QWORD *)&xmmword_25410EF70 + 1) = 0xFFFFFFFFLL;
          qword_25410EF80 = (uint64_t)v75;
          unk_25410EF88 = 0;
          qword_25410EF90 = v78;
          unk_25410EF98 = 0;
          qword_25410EF50 = (uint64_t)&off_24ED65D90;
          re::IntrospectionRegistry::add(v80, v81);
          re::getPrettyTypeName((re *)&qword_25410EF50, (const re::IntrospectionBase *)&v307);
          if ((v308 & 1) != 0)
            v82 = v309;
          else
            v82 = (char *)&v308 + 1;
          if (v307 && (v308 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v307 + 40))();
          v83 = v75[2];
          v302 = *(_OWORD *)(v78 + 32);
          v303 = v83;
          v84 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v304);
          if (v84)
          {
            v85 = *v84;
            *((_QWORD *)&v301 + 1) = v85;
          }
          else
          {
            v307 = 0x449AD97C4B77BED4;
            v308 = "_CompareFunc";
            v86 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v307);
            if (v86)
            {
              v87 = *v86;
              re::StringID::destroyString((re::StringID *)&v307);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v307);
              *(_QWORD *)&v313.var0 = 0x449AD97C4B77BED4;
              v313.var1 = "_CompareFunc";
              v88 = (void *)v307;
              v87 = (uint64_t)v308;
              re::StringID::destroyString((re::StringID *)&v313);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v313, (uint64_t)&v308);
            if (!v88
              || (v89 = *v314,
                  v307 = v87,
                  v308 = v89,
                  LODWORD(v309) = -1,
                  (v90 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v313.var0 + 768, &v307)) == 0)|| !*(_QWORD *)v90)
            {
              v312 = v303;
              v310 = v88;
              v311 = v87;
            }
            v305 = v302;
            v306 = v303;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v307, v304, 1, 0x30uLL, 8uLL, &v306, &v305);
            re::TypeBuilder::setConstructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v307, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v307, v91);
          }
          xmmword_25410EF70 = v301;
          re::StringID::destroyString((re::StringID *)v304);
        }
      }
      v92 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v73 + 32))(v73, 72, 8);
      *(_DWORD *)v92 = 1;
      *(_QWORD *)(v92 + 8) = "intValues";
      *(_QWORD *)(v92 + 16) = &qword_25410EF50;
      *(_QWORD *)(v92 + 24) = 0;
      *(_QWORD *)(v92 + 32) = 0xC800000004;
      *(_DWORD *)(v92 + 40) = 0;
      *(_QWORD *)(v92 + 48) = 0;
      *(_QWORD *)(v92 + 56) = 0;
      *(_DWORD *)(v92 + 64) = 0;
      qword_25410F3D0 = v92;
      v94 = re::introspectionAllocator((re *)v92);
      v95 = atomic_load((unsigned __int8 *)&qword_25410EE00);
      if ((v95 & 1) == 0 && __cxa_guard_acquire(&qword_25410EE00))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_25410EFA0);
        qword_25410EFA0 = (uint64_t)&off_24ED65E30;
        __cxa_guard_release(&qword_25410EE00);
      }
      if ((byte_25410EDAC & 1) == 0)
      {
        v96 = re::IntrospectionInfo<re::StringID>::get(1, v93);
        v97 = re::introspect_Vector2F((re::IntrospectionBase **)1);
        if ((byte_25410EDAC & 1) == 0)
        {
          v98 = v97;
          byte_25410EDAC = 1;
          v99 = *(_DWORD *)(v97 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410EFA0, 0);
          qword_25410EFB0 = 0x3000000007;
          dword_25410EFB8 = v99;
          word_25410EFBC = 0;
          *(_QWORD *)&xmmword_25410EFC0 = 0;
          *((_QWORD *)&xmmword_25410EFC0 + 1) = 0xFFFFFFFFLL;
          qword_25410EFD0 = (uint64_t)v96;
          qword_25410EFD8 = 0;
          qword_25410EFE0 = v98;
          qword_25410EFE8 = 0;
          qword_25410EFA0 = (uint64_t)&off_24ED65E30;
          re::IntrospectionRegistry::add(v100, v101);
          re::getPrettyTypeName((re *)&qword_25410EFA0, (const re::IntrospectionBase *)&v307);
          if ((v308 & 1) != 0)
            v102 = v309;
          else
            v102 = (char *)&v308 + 1;
          if (v307 && (v308 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v307 + 40))();
          v103 = v96[2];
          v302 = *(_OWORD *)(v98 + 32);
          v303 = v103;
          v104 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v304);
          if (v104)
          {
            v105 = *v104;
            *((_QWORD *)&v301 + 1) = v105;
          }
          else
          {
            v307 = 0x449AD97C4B77BED4;
            v308 = "_CompareFunc";
            v106 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v307);
            if (v106)
            {
              v107 = *v106;
              re::StringID::destroyString((re::StringID *)&v307);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v307);
              *(_QWORD *)&v313.var0 = 0x449AD97C4B77BED4;
              v313.var1 = "_CompareFunc";
              v108 = (void *)v307;
              v107 = (uint64_t)v308;
              re::StringID::destroyString((re::StringID *)&v313);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v313, (uint64_t)&v308);
            if (!v108
              || (v109 = *v314,
                  v307 = v107,
                  v308 = v109,
                  LODWORD(v309) = -1,
                  (v110 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v313.var0 + 768, &v307)) == 0)|| !*(_QWORD *)v110)
            {
              v312 = v303;
              v310 = v108;
              v311 = v107;
            }
            v305 = v302;
            v306 = v303;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v307, v304, 1, 0x30uLL, 8uLL, &v306, &v305);
            re::TypeBuilder::setConstructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v307, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v307, v111);
          }
          xmmword_25410EFC0 = v301;
          re::StringID::destroyString((re::StringID *)v304);
        }
      }
      v112 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v94 + 32))(v94, 72, 8);
      *(_DWORD *)v112 = 1;
      *(_QWORD *)(v112 + 8) = "Vector2FValues";
      *(_QWORD *)(v112 + 16) = &qword_25410EFA0;
      *(_QWORD *)(v112 + 24) = 0;
      *(_QWORD *)(v112 + 32) = 0xF800000005;
      *(_DWORD *)(v112 + 40) = 0;
      *(_QWORD *)(v112 + 48) = 0;
      *(_QWORD *)(v112 + 56) = 0;
      *(_DWORD *)(v112 + 64) = 0;
      qword_25410F3D8 = v112;
      v114 = re::introspectionAllocator((re *)v112);
      v115 = atomic_load((unsigned __int8 *)&qword_25410EE08);
      if ((v115 & 1) == 0 && __cxa_guard_acquire(&qword_25410EE08))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_25410EFF0);
        qword_25410EFF0 = (uint64_t)&off_24ED65ED0;
        __cxa_guard_release(&qword_25410EE08);
      }
      if ((byte_25410EDAD & 1) == 0)
      {
        v116 = re::IntrospectionInfo<re::StringID>::get(1, v113);
        v117 = re::introspect_Vector3F((re::IntrospectionBase **)1);
        if ((byte_25410EDAD & 1) == 0)
        {
          v118 = v117;
          byte_25410EDAD = 1;
          v119 = *(_DWORD *)(v117 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410EFF0, 0);
          qword_25410F000 = 0x3000000007;
          dword_25410F008 = v119;
          word_25410F00C = 0;
          *(_QWORD *)&xmmword_25410F010 = 0;
          *((_QWORD *)&xmmword_25410F010 + 1) = 0xFFFFFFFFLL;
          qword_25410F020 = (uint64_t)v116;
          qword_25410F028 = 0;
          qword_25410F030 = v118;
          qword_25410F038 = 0;
          qword_25410EFF0 = (uint64_t)&off_24ED65ED0;
          re::IntrospectionRegistry::add(v120, v121);
          re::getPrettyTypeName((re *)&qword_25410EFF0, (const re::IntrospectionBase *)&v307);
          if ((v308 & 1) != 0)
            v122 = v309;
          else
            v122 = (char *)&v308 + 1;
          if (v307 && (v308 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v307 + 40))();
          v123 = v116[2];
          v302 = *(_OWORD *)(v118 + 32);
          v303 = v123;
          v124 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v304);
          if (v124)
          {
            v125 = *v124;
            *((_QWORD *)&v301 + 1) = v125;
          }
          else
          {
            v307 = 0x449AD97C4B77BED4;
            v308 = "_CompareFunc";
            v126 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v307);
            if (v126)
            {
              v127 = *v126;
              re::StringID::destroyString((re::StringID *)&v307);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v307);
              *(_QWORD *)&v313.var0 = 0x449AD97C4B77BED4;
              v313.var1 = "_CompareFunc";
              v128 = (void *)v307;
              v127 = (uint64_t)v308;
              re::StringID::destroyString((re::StringID *)&v313);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v313, (uint64_t)&v308);
            if (!v128
              || (v129 = *v314,
                  v307 = v127,
                  v308 = v129,
                  LODWORD(v309) = -1,
                  (v130 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v313.var0 + 768, &v307)) == 0)|| !*(_QWORD *)v130)
            {
              v312 = v303;
              v310 = v128;
              v311 = v127;
            }
            v305 = v302;
            v306 = v303;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v307, v304, 1, 0x30uLL, 8uLL, &v306, &v305);
            re::TypeBuilder::setConstructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v307, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v307, v131);
          }
          xmmword_25410F010 = v301;
          re::StringID::destroyString((re::StringID *)v304);
        }
      }
      v132 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v114 + 32))(v114, 72, 8);
      *(_DWORD *)v132 = 1;
      *(_QWORD *)(v132 + 8) = "Vector3FValues";
      *(_QWORD *)(v132 + 16) = &qword_25410EFF0;
      *(_QWORD *)(v132 + 24) = 0;
      *(_QWORD *)(v132 + 32) = 0x12800000006;
      *(_DWORD *)(v132 + 40) = 0;
      *(_QWORD *)(v132 + 48) = 0;
      *(_QWORD *)(v132 + 56) = 0;
      *(_DWORD *)(v132 + 64) = 0;
      qword_25410F3E0 = v132;
      v134 = re::introspectionAllocator((re *)v132);
      v135 = atomic_load((unsigned __int8 *)&qword_25410EE10);
      if ((v135 & 1) == 0 && __cxa_guard_acquire(&qword_25410EE10))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_25410F040);
        qword_25410F040 = (uint64_t)&off_24ED65F70;
        __cxa_guard_release(&qword_25410EE10);
      }
      if ((byte_25410EDAE & 1) == 0)
      {
        v136 = re::IntrospectionInfo<re::StringID>::get(1, v133);
        v137 = re::introspect_Vector4F((re::IntrospectionBase **)1);
        if ((byte_25410EDAE & 1) == 0)
        {
          v138 = v137;
          byte_25410EDAE = 1;
          v139 = *(_DWORD *)(v137 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410F040, 0);
          qword_25410F050 = 0x3000000007;
          dword_25410F058 = v139;
          word_25410F05C = 0;
          *(_QWORD *)&xmmword_25410F060 = 0;
          *((_QWORD *)&xmmword_25410F060 + 1) = 0xFFFFFFFFLL;
          qword_25410F070 = (uint64_t)v136;
          qword_25410F078 = 0;
          qword_25410F080 = v138;
          qword_25410F088 = 0;
          qword_25410F040 = (uint64_t)&off_24ED65F70;
          re::IntrospectionRegistry::add(v140, v141);
          re::getPrettyTypeName((re *)&qword_25410F040, (const re::IntrospectionBase *)&v307);
          if ((v308 & 1) != 0)
            v142 = v309;
          else
            v142 = (char *)&v308 + 1;
          if (v307 && (v308 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v307 + 40))();
          v143 = v136[2];
          v302 = *(_OWORD *)(v138 + 32);
          v303 = v143;
          v144 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v304);
          if (v144)
          {
            v145 = *v144;
            *((_QWORD *)&v301 + 1) = v145;
          }
          else
          {
            v307 = 0x449AD97C4B77BED4;
            v308 = "_CompareFunc";
            v146 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v307);
            if (v146)
            {
              v147 = *v146;
              re::StringID::destroyString((re::StringID *)&v307);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v307);
              *(_QWORD *)&v313.var0 = 0x449AD97C4B77BED4;
              v313.var1 = "_CompareFunc";
              v148 = (void *)v307;
              v147 = (uint64_t)v308;
              re::StringID::destroyString((re::StringID *)&v313);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v313, (uint64_t)&v308);
            if (!v148
              || (v149 = *v314,
                  v307 = v147,
                  v308 = v149,
                  LODWORD(v309) = -1,
                  (v150 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v313.var0 + 768, &v307)) == 0)|| !*(_QWORD *)v150)
            {
              v312 = v303;
              v310 = v148;
              v311 = v147;
            }
            v305 = v302;
            v306 = v303;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v307, v304, 1, 0x30uLL, 8uLL, &v306, &v305);
            re::TypeBuilder::setConstructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v307, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v307, v151);
          }
          xmmword_25410F060 = v301;
          re::StringID::destroyString((re::StringID *)v304);
        }
      }
      v152 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v134 + 32))(v134, 72, 8);
      *(_DWORD *)v152 = 1;
      *(_QWORD *)(v152 + 8) = "Vector4FValues";
      *(_QWORD *)(v152 + 16) = &qword_25410F040;
      *(_QWORD *)(v152 + 24) = 0;
      *(_QWORD *)(v152 + 32) = 0x15800000007;
      *(_DWORD *)(v152 + 40) = 0;
      *(_QWORD *)(v152 + 48) = 0;
      *(_QWORD *)(v152 + 56) = 0;
      *(_DWORD *)(v152 + 64) = 0;
      qword_25410F3E8 = v152;
      v154 = re::introspectionAllocator((re *)v152);
      v155 = atomic_load((unsigned __int8 *)&qword_25410EE18);
      if ((v155 & 1) == 0 && __cxa_guard_acquire(&qword_25410EE18))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_25410F090);
        qword_25410F090 = (uint64_t)&off_24ED66010;
        __cxa_guard_release(&qword_25410EE18);
      }
      if ((byte_25410EDAF & 1) == 0)
      {
        v156 = re::IntrospectionInfo<re::StringID>::get(1, v153);
        v157 = re::introspect_QuaternionF((re::IntrospectionBase **)1);
        if ((byte_25410EDAF & 1) == 0)
        {
          v158 = v157;
          byte_25410EDAF = 1;
          v159 = *(_DWORD *)(v157 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410F090, 0);
          qword_25410F0A0 = 0x3000000007;
          dword_25410F0A8 = v159;
          word_25410F0AC = 0;
          *(_QWORD *)&xmmword_25410F0B0 = 0;
          *((_QWORD *)&xmmword_25410F0B0 + 1) = 0xFFFFFFFFLL;
          qword_25410F0C0 = (uint64_t)v156;
          qword_25410F0C8 = 0;
          qword_25410F0D0 = v158;
          qword_25410F0D8 = 0;
          qword_25410F090 = (uint64_t)&off_24ED66010;
          re::IntrospectionRegistry::add(v160, v161);
          re::getPrettyTypeName((re *)&qword_25410F090, (const re::IntrospectionBase *)&v307);
          if ((v308 & 1) != 0)
            v162 = v309;
          else
            v162 = (char *)&v308 + 1;
          if (v307 && (v308 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v307 + 40))();
          v163 = v156[2];
          v302 = *(_OWORD *)(v158 + 32);
          v303 = v163;
          v164 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v304);
          if (v164)
          {
            v165 = *v164;
            *((_QWORD *)&v301 + 1) = v165;
          }
          else
          {
            v307 = 0x449AD97C4B77BED4;
            v308 = "_CompareFunc";
            v166 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v307);
            if (v166)
            {
              v167 = *v166;
              re::StringID::destroyString((re::StringID *)&v307);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v307);
              *(_QWORD *)&v313.var0 = 0x449AD97C4B77BED4;
              v313.var1 = "_CompareFunc";
              v168 = (void *)v307;
              v167 = (uint64_t)v308;
              re::StringID::destroyString((re::StringID *)&v313);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v313, (uint64_t)&v308);
            if (!v168
              || (v169 = *v314,
                  v307 = v167,
                  v308 = v169,
                  LODWORD(v309) = -1,
                  (v170 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v313.var0 + 768, &v307)) == 0)|| !*(_QWORD *)v170)
            {
              v312 = v303;
              v310 = v168;
              v311 = v167;
            }
            v305 = v302;
            v306 = v303;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v307, v304, 1, 0x30uLL, 8uLL, &v306, &v305);
            re::TypeBuilder::setConstructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v307, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v307, v171);
          }
          xmmword_25410F0B0 = v301;
          re::StringID::destroyString((re::StringID *)v304);
        }
      }
      v172 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v154 + 32))(v154, 72, 8);
      *(_DWORD *)v172 = 1;
      *(_QWORD *)(v172 + 8) = "QuaternionFValues";
      *(_QWORD *)(v172 + 16) = &qword_25410F090;
      *(_QWORD *)(v172 + 24) = 0;
      *(_QWORD *)(v172 + 32) = 0x18800000008;
      *(_DWORD *)(v172 + 40) = 0;
      *(_QWORD *)(v172 + 48) = 0;
      *(_QWORD *)(v172 + 56) = 0;
      *(_DWORD *)(v172 + 64) = 0;
      qword_25410F3F0 = v172;
      v174 = re::introspectionAllocator((re *)v172);
      v175 = atomic_load((unsigned __int8 *)&qword_25410EE20);
      if ((v175 & 1) == 0 && __cxa_guard_acquire(&qword_25410EE20))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_25410F0E0);
        qword_25410F0E0 = (uint64_t)&off_24ED660B0;
        __cxa_guard_release(&qword_25410EE20);
      }
      if ((byte_25410EDB0 & 1) == 0)
      {
        v176 = re::IntrospectionInfo<re::StringID>::get(1, v173);
        v177 = re::introspect_SRT((re::IntrospectionBase **)1);
        if ((byte_25410EDB0 & 1) == 0)
        {
          v178 = v177;
          byte_25410EDB0 = 1;
          v179 = *(_DWORD *)(v177 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410F0E0, 0);
          qword_25410F0F0 = 0x3000000007;
          dword_25410F0F8 = v179;
          word_25410F0FC = 0;
          *(_QWORD *)&xmmword_25410F100 = 0;
          *((_QWORD *)&xmmword_25410F100 + 1) = 0xFFFFFFFFLL;
          qword_25410F110 = (uint64_t)v176;
          qword_25410F118 = 0;
          qword_25410F120 = v178;
          qword_25410F128 = 0;
          qword_25410F0E0 = (uint64_t)&off_24ED660B0;
          re::IntrospectionRegistry::add(v180, v181);
          re::getPrettyTypeName((re *)&qword_25410F0E0, (const re::IntrospectionBase *)&v307);
          if ((v308 & 1) != 0)
            v182 = v309;
          else
            v182 = (char *)&v308 + 1;
          if (v307 && (v308 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v307 + 40))();
          v183 = v176[2];
          v302 = *(_OWORD *)(v178 + 32);
          v303 = v183;
          v184 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v304);
          if (v184)
          {
            v185 = *v184;
            *((_QWORD *)&v301 + 1) = v185;
          }
          else
          {
            v307 = 0x449AD97C4B77BED4;
            v308 = "_CompareFunc";
            v186 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v307);
            if (v186)
            {
              v187 = *v186;
              re::StringID::destroyString((re::StringID *)&v307);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v307);
              *(_QWORD *)&v313.var0 = 0x449AD97C4B77BED4;
              v313.var1 = "_CompareFunc";
              v188 = (void *)v307;
              v187 = (uint64_t)v308;
              re::StringID::destroyString((re::StringID *)&v313);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v313, (uint64_t)&v308);
            if (!v188
              || (v189 = *v314,
                  v307 = v187,
                  v308 = v189,
                  LODWORD(v309) = -1,
                  (v190 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v313.var0 + 768, &v307)) == 0)|| !*(_QWORD *)v190)
            {
              v312 = v303;
              v310 = v188;
              v311 = v187;
            }
            v305 = v302;
            v306 = v303;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v307, v304, 1, 0x30uLL, 8uLL, &v306, &v305);
            re::TypeBuilder::setConstructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v307, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v307, v191);
          }
          xmmword_25410F100 = v301;
          re::StringID::destroyString((re::StringID *)v304);
        }
      }
      v192 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v174 + 32))(v174, 72, 8);
      *(_DWORD *)v192 = 1;
      *(_QWORD *)(v192 + 8) = "SRTValues";
      *(_QWORD *)(v192 + 16) = &qword_25410F0E0;
      *(_QWORD *)(v192 + 24) = 0;
      *(_QWORD *)(v192 + 32) = 0x1B800000009;
      *(_DWORD *)(v192 + 40) = 0;
      *(_QWORD *)(v192 + 48) = 0;
      *(_QWORD *)(v192 + 56) = 0;
      *(_DWORD *)(v192 + 64) = 0;
      qword_25410F3F8 = v192;
      v193 = re::introspectionAllocator((re *)v192);
      v195 = re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(1, v194);
      v196 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v193 + 32))(v193, 72, 8);
      *(_DWORD *)v196 = 1;
      *(_QWORD *)(v196 + 8) = "DynamicStringValues";
      *(_QWORD *)(v196 + 16) = v195;
      *(_QWORD *)(v196 + 24) = 0;
      *(_QWORD *)(v196 + 32) = 0x1E80000000ALL;
      *(_DWORD *)(v196 + 40) = 0;
      *(_QWORD *)(v196 + 48) = 0;
      *(_QWORD *)(v196 + 56) = 0;
      *(_DWORD *)(v196 + 64) = 0;
      qword_25410F400 = v196;
      v198 = re::introspectionAllocator((re *)v196);
      v199 = atomic_load((unsigned __int8 *)&qword_25410EE28);
      if ((v199 & 1) == 0 && __cxa_guard_acquire(&qword_25410EE28))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_25410F130);
        qword_25410F130 = (uint64_t)&off_24ED66150;
        __cxa_guard_release(&qword_25410EE28);
      }
      if ((byte_25410EDB1 & 1) == 0)
      {
        v200 = re::IntrospectionInfo<re::StringID>::get(1, v197);
        v201 = re::introspect_SkeletalPose((re::IntrospectionBase **)1);
        if ((byte_25410EDB1 & 1) == 0)
        {
          v202 = v201;
          byte_25410EDB1 = 1;
          v203 = *(_DWORD *)(v201 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410F130, 0);
          qword_25410F140 = 0x3000000007;
          dword_25410F148 = v203;
          word_25410F14C = 0;
          *(_QWORD *)&xmmword_25410F150 = 0;
          *((_QWORD *)&xmmword_25410F150 + 1) = 0xFFFFFFFFLL;
          qword_25410F160 = (uint64_t)v200;
          qword_25410F168 = 0;
          qword_25410F170 = v202;
          qword_25410F178 = 0;
          qword_25410F130 = (uint64_t)&off_24ED66150;
          re::IntrospectionRegistry::add(v204, v205);
          re::getPrettyTypeName((re *)&qword_25410F130, (const re::IntrospectionBase *)&v307);
          if ((v308 & 1) != 0)
            v206 = v309;
          else
            v206 = (char *)&v308 + 1;
          if (v307 && (v308 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v307 + 40))();
          v207 = v200[2];
          v302 = *(_OWORD *)(v202 + 32);
          v303 = v207;
          v208 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v304);
          if (v208)
          {
            v209 = *v208;
            *((_QWORD *)&v301 + 1) = v209;
          }
          else
          {
            v307 = 0x449AD97C4B77BED4;
            v308 = "_CompareFunc";
            v210 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v307);
            if (v210)
            {
              v211 = *v210;
              re::StringID::destroyString((re::StringID *)&v307);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v307);
              *(_QWORD *)&v313.var0 = 0x449AD97C4B77BED4;
              v313.var1 = "_CompareFunc";
              v212 = (void *)v307;
              v211 = (uint64_t)v308;
              re::StringID::destroyString((re::StringID *)&v313);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v313, (uint64_t)&v308);
            if (!v212
              || (v213 = *v314,
                  v307 = v211,
                  v308 = v213,
                  LODWORD(v309) = -1,
                  (v214 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v313.var0 + 768, &v307)) == 0)|| !*(_QWORD *)v214)
            {
              v312 = v303;
              v310 = v212;
              v311 = v211;
            }
            v305 = v302;
            v306 = v303;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v307, v304, 1, 0x30uLL, 8uLL, &v306, &v305);
            re::TypeBuilder::setConstructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v307, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v307, v215);
          }
          xmmword_25410F150 = v301;
          re::StringID::destroyString((re::StringID *)v304);
        }
      }
      v216 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v198 + 32))(v198, 72, 8);
      *(_DWORD *)v216 = 1;
      *(_QWORD *)(v216 + 8) = "SkeletalPoseValues";
      *(_QWORD *)(v216 + 16) = &qword_25410F130;
      *(_QWORD *)(v216 + 24) = 0;
      *(_QWORD *)(v216 + 32) = 0x2180000000BLL;
      *(_DWORD *)(v216 + 40) = 0;
      *(_QWORD *)(v216 + 48) = 0;
      *(_QWORD *)(v216 + 56) = 0;
      *(_DWORD *)(v216 + 64) = 0;
      qword_25410F408 = v216;
      v218 = re::introspectionAllocator((re *)v216);
      v219 = atomic_load((unsigned __int8 *)&qword_25410EE30);
      if ((v219 & 1) == 0 && __cxa_guard_acquire(&qword_25410EE30))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_25410F180);
        qword_25410F180 = (uint64_t)&off_24ED661F0;
        __cxa_guard_release(&qword_25410EE30);
      }
      if ((byte_25410EDB2 & 1) == 0)
      {
        v220 = re::IntrospectionInfo<re::StringID>::get(1, v217);
        v222 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v221);
        if ((byte_25410EDB2 & 1) == 0)
        {
          v223 = (uint64_t)v222;
          byte_25410EDB2 = 1;
          v224 = *((_DWORD *)v222 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410F180, 0);
          qword_25410F190 = 0x3000000007;
          dword_25410F198 = v224;
          word_25410F19C = 0;
          *(_QWORD *)&xmmword_25410F1A0 = 0;
          *((_QWORD *)&xmmword_25410F1A0 + 1) = 0xFFFFFFFFLL;
          qword_25410F1B0 = (uint64_t)v220;
          qword_25410F1B8 = 0;
          qword_25410F1C0 = v223;
          qword_25410F1C8 = 0;
          qword_25410F180 = (uint64_t)&off_24ED661F0;
          re::IntrospectionRegistry::add(v225, v226);
          re::getPrettyTypeName((re *)&qword_25410F180, (const re::IntrospectionBase *)&v307);
          if ((v308 & 1) != 0)
            v227 = v309;
          else
            v227 = (char *)&v308 + 1;
          if (v307 && (v308 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v307 + 40))();
          v228 = v220[2];
          v302 = *(_OWORD *)(v223 + 32);
          v303 = v228;
          v229 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v304);
          if (v229)
          {
            v230 = *v229;
            *((_QWORD *)&v301 + 1) = v230;
          }
          else
          {
            v307 = 0x449AD97C4B77BED4;
            v308 = "_CompareFunc";
            v231 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v307);
            if (v231)
            {
              v232 = *v231;
              re::StringID::destroyString((re::StringID *)&v307);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v307);
              *(_QWORD *)&v313.var0 = 0x449AD97C4B77BED4;
              v313.var1 = "_CompareFunc";
              v233 = (void *)v307;
              v232 = (uint64_t)v308;
              re::StringID::destroyString((re::StringID *)&v313);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v313, (uint64_t)&v308);
            if (!v233
              || (v234 = *v314,
                  v307 = v232,
                  v308 = v234,
                  LODWORD(v309) = -1,
                  (v235 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v313.var0 + 768, &v307)) == 0)|| !*(_QWORD *)v235)
            {
              v312 = v303;
              v310 = v233;
              v311 = v232;
            }
            v305 = v302;
            v306 = v303;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v307, v304, 1, 0x30uLL, 8uLL, &v306, &v305);
            re::TypeBuilder::setConstructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v307, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v307, v236);
          }
          xmmword_25410F1A0 = v301;
          re::StringID::destroyString((re::StringID *)v304);
        }
      }
      v237 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v218 + 32))(v218, 72, 8);
      *(_DWORD *)v237 = 1;
      *(_QWORD *)(v237 + 8) = "FloatArrayValues";
      *(_QWORD *)(v237 + 16) = &qword_25410F180;
      *(_QWORD *)(v237 + 24) = 0;
      *(_QWORD *)(v237 + 32) = 0x2480000000CLL;
      *(_DWORD *)(v237 + 40) = 0;
      *(_QWORD *)(v237 + 48) = 0;
      *(_QWORD *)(v237 + 56) = 0;
      *(_DWORD *)(v237 + 64) = 0;
      qword_25410F410 = v237;
      v239 = re::introspectionAllocator((re *)v237);
      v240 = atomic_load((unsigned __int8 *)&qword_25410EE38);
      if ((v240 & 1) == 0 && __cxa_guard_acquire(&qword_25410EE38))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_25410F1D0);
        qword_25410F1D0 = (uint64_t)&off_24ED66290;
        __cxa_guard_release(&qword_25410EE38);
      }
      if ((byte_25410EDB3 & 1) == 0)
      {
        v241 = re::IntrospectionInfo<re::StringID>::get(1, v238);
        v242 = re::IntrospectionInfo<re::DynamicArray<re::Vector3<float>>>::get(1);
        if ((byte_25410EDB3 & 1) == 0)
        {
          v243 = (uint64_t)v242;
          byte_25410EDB3 = 1;
          v244 = *((_DWORD *)v242 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410F1D0, 0);
          qword_25410F1E0 = 0x3000000007;
          dword_25410F1E8 = v244;
          word_25410F1EC = 0;
          *(_QWORD *)&xmmword_25410F1F0 = 0;
          *((_QWORD *)&xmmword_25410F1F0 + 1) = 0xFFFFFFFFLL;
          qword_25410F200 = (uint64_t)v241;
          qword_25410F208 = 0;
          qword_25410F210 = v243;
          qword_25410F218 = 0;
          qword_25410F1D0 = (uint64_t)&off_24ED66290;
          re::IntrospectionRegistry::add(v245, v246);
          re::getPrettyTypeName((re *)&qword_25410F1D0, (const re::IntrospectionBase *)&v307);
          if ((v308 & 1) != 0)
            v247 = v309;
          else
            v247 = (char *)&v308 + 1;
          if (v307 && (v308 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v307 + 40))();
          v248 = v241[2];
          v302 = *(_OWORD *)(v243 + 32);
          v303 = v248;
          v249 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v304);
          if (v249)
          {
            v250 = *v249;
            *((_QWORD *)&v301 + 1) = v250;
          }
          else
          {
            v307 = 0x449AD97C4B77BED4;
            v308 = "_CompareFunc";
            v251 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v307);
            if (v251)
            {
              v252 = *v251;
              re::StringID::destroyString((re::StringID *)&v307);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v307);
              *(_QWORD *)&v313.var0 = 0x449AD97C4B77BED4;
              v313.var1 = "_CompareFunc";
              v253 = (void *)v307;
              v252 = (uint64_t)v308;
              re::StringID::destroyString((re::StringID *)&v313);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v313, (uint64_t)&v308);
            if (!v253
              || (v254 = *v314,
                  v307 = v252,
                  v308 = v254,
                  LODWORD(v309) = -1,
                  (v255 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v313.var0 + 768, &v307)) == 0)|| !*(_QWORD *)v255)
            {
              v312 = v303;
              v310 = v253;
              v311 = v252;
            }
            v305 = v302;
            v306 = v303;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v307, v304, 1, 0x30uLL, 8uLL, &v306, &v305);
            re::TypeBuilder::setConstructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v307, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v307, v256);
          }
          xmmword_25410F1F0 = v301;
          re::StringID::destroyString((re::StringID *)v304);
        }
      }
      v257 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v239 + 32))(v239, 72, 8);
      *(_DWORD *)v257 = 1;
      *(_QWORD *)(v257 + 8) = "Vector3ArrayValues";
      *(_QWORD *)(v257 + 16) = &qword_25410F1D0;
      *(_QWORD *)(v257 + 24) = 0;
      *(_QWORD *)(v257 + 32) = 0x2780000000DLL;
      *(_DWORD *)(v257 + 40) = 0;
      *(_QWORD *)(v257 + 48) = 0;
      *(_QWORD *)(v257 + 56) = 0;
      *(_DWORD *)(v257 + 64) = 0;
      qword_25410F418 = v257;
      v259 = re::introspectionAllocator((re *)v257);
      v260 = atomic_load((unsigned __int8 *)&qword_25410EE40);
      if ((v260 & 1) == 0 && __cxa_guard_acquire(&qword_25410EE40))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_25410F220);
        qword_25410F220 = (uint64_t)&off_24ED66330;
        __cxa_guard_release(&qword_25410EE40);
      }
      if ((byte_25410EDB4 & 1) == 0)
      {
        v261 = re::IntrospectionInfo<re::StringID>::get(1, v258);
        v263 = re::introspect_int64_t((re *)1, v262);
        if ((byte_25410EDB4 & 1) == 0)
        {
          v264 = (uint64_t)v263;
          byte_25410EDB4 = 1;
          v265 = v263[6];
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410F220, 0);
          qword_25410F230 = 0x3000000007;
          dword_25410F238 = v265;
          word_25410F23C = 0;
          *(_QWORD *)&xmmword_25410F240 = 0;
          *((_QWORD *)&xmmword_25410F240 + 1) = 0xFFFFFFFFLL;
          qword_25410F250 = (uint64_t)v261;
          qword_25410F258 = 0;
          qword_25410F260 = v264;
          qword_25410F268 = 0;
          qword_25410F220 = (uint64_t)&off_24ED66330;
          re::IntrospectionRegistry::add(v266, v267);
          re::getPrettyTypeName((re *)&qword_25410F220, (const re::IntrospectionBase *)&v307);
          if ((v308 & 1) != 0)
            v268 = v309;
          else
            v268 = (char *)&v308 + 1;
          if (v307 && (v308 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v307 + 40))();
          v269 = v261[2];
          v302 = *(_OWORD *)(v264 + 32);
          v303 = v269;
          v270 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v304);
          if (v270)
          {
            v271 = *v270;
            *((_QWORD *)&v301 + 1) = v271;
          }
          else
          {
            v307 = 0x449AD97C4B77BED4;
            v308 = "_CompareFunc";
            v272 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v307);
            if (v272)
            {
              v273 = *v272;
              re::StringID::destroyString((re::StringID *)&v307);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v307);
              *(_QWORD *)&v313.var0 = 0x449AD97C4B77BED4;
              v313.var1 = "_CompareFunc";
              v274 = (void *)v307;
              v273 = (uint64_t)v308;
              re::StringID::destroyString((re::StringID *)&v313);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v313, (uint64_t)&v308);
            if (!v274
              || (v275 = *v314,
                  v307 = v273,
                  v308 = v275,
                  LODWORD(v309) = -1,
                  (v276 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v313.var0 + 768, &v307)) == 0)|| !*(_QWORD *)v276)
            {
              v312 = v303;
              v310 = v274;
              v311 = v273;
            }
            v305 = v302;
            v306 = v303;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v307, v304, 1, 0x30uLL, 8uLL, &v306, &v305);
            re::TypeBuilder::setConstructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v307, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v307, v277);
          }
          xmmword_25410F240 = v301;
          re::StringID::destroyString((re::StringID *)v304);
        }
      }
      v278 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v259 + 32))(v259, 72, 8);
      *(_DWORD *)v278 = 1;
      *(_QWORD *)(v278 + 8) = "int64Values";
      *(_QWORD *)(v278 + 16) = &qword_25410F220;
      *(_QWORD *)(v278 + 24) = 0;
      *(_QWORD *)(v278 + 32) = 0x2A80000000ELL;
      *(_DWORD *)(v278 + 40) = 0;
      *(_QWORD *)(v278 + 48) = 0;
      *(_QWORD *)(v278 + 56) = 0;
      *(_DWORD *)(v278 + 64) = 0;
      qword_25410F420 = v278;
      v280 = re::introspectionAllocator((re *)v278);
      v281 = atomic_load((unsigned __int8 *)&qword_25410EE48);
      if ((v281 & 1) == 0 && __cxa_guard_acquire(&qword_25410EE48))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_25410F270);
        qword_25410F270 = (uint64_t)&off_24ED663D0;
        __cxa_guard_release(&qword_25410EE48);
      }
      if ((byte_25410EDB5 & 1) == 0)
      {
        v282 = re::IntrospectionInfo<re::StringID>::get(1, v279);
        v283 = re::introspect_BlendShapeWeights((re::IntrospectionBase **)1);
        if ((byte_25410EDB5 & 1) == 0)
        {
          v284 = v283;
          byte_25410EDB5 = 1;
          v285 = *(_DWORD *)(v283 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410F270, 0);
          qword_25410F280 = 0x3000000007;
          dword_25410F288 = v285;
          word_25410F28C = 0;
          *(_QWORD *)&xmmword_25410F290 = 0;
          *((_QWORD *)&xmmword_25410F290 + 1) = 0xFFFFFFFFLL;
          qword_25410F2A0 = (uint64_t)v282;
          qword_25410F2A8 = 0;
          qword_25410F2B0 = v284;
          qword_25410F2B8 = 0;
          qword_25410F270 = (uint64_t)&off_24ED663D0;
          re::IntrospectionRegistry::add(v286, v287);
          re::getPrettyTypeName((re *)&qword_25410F270, (const re::IntrospectionBase *)&v307);
          if ((v308 & 1) != 0)
            v288 = v309;
          else
            v288 = (char *)&v308 + 1;
          if (v307 && (v308 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v307 + 40))();
          v289 = v282[2];
          v302 = *(_OWORD *)(v284 + 32);
          v303 = v289;
          v290 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v304);
          if (v290)
          {
            v291 = *v290;
            *((_QWORD *)&v301 + 1) = v291;
          }
          else
          {
            v307 = 0x449AD97C4B77BED4;
            v308 = "_CompareFunc";
            v292 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v307);
            if (v292)
            {
              v293 = *v292;
              re::StringID::destroyString((re::StringID *)&v307);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v307);
              *(_QWORD *)&v313.var0 = 0x449AD97C4B77BED4;
              v313.var1 = "_CompareFunc";
              v294 = (void *)v307;
              v293 = (uint64_t)v308;
              re::StringID::destroyString((re::StringID *)&v313);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v313, (uint64_t)&v308);
            if (!v294
              || (v295 = *v314,
                  v307 = v293,
                  v308 = v295,
                  LODWORD(v309) = -1,
                  (v296 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v313.var0 + 768, &v307)) == 0)|| !*(_QWORD *)v296)
            {
              v312 = v303;
              v310 = v294;
              v311 = v293;
            }
            v305 = v302;
            v306 = v303;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v307, v304, 1, 0x30uLL, 8uLL, &v306, &v305);
            re::TypeBuilder::setConstructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v307, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v307, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v307, v297);
          }
          xmmword_25410F290 = v301;
          re::StringID::destroyString((re::StringID *)v304);
        }
      }
      v298 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v280 + 32))(v280, 72, 8);
      *(_DWORD *)v298 = 1;
      *(_QWORD *)(v298 + 8) = "BlendShapeWeightsValues";
      *(_QWORD *)(v298 + 16) = &qword_25410F270;
      *(_QWORD *)(v298 + 24) = 0;
      *(_QWORD *)(v298 + 32) = 0x2D80000000FLL;
      *(_DWORD *)(v298 + 40) = 0;
      *(_QWORD *)(v298 + 48) = 0;
      *(_QWORD *)(v298 + 56) = 0;
      *(_DWORD *)(v298 + 64) = 0;
      qword_25410F428 = v298;
      __cxa_guard_release(&qword_25410EDB8);
    }
  }
  *((_QWORD *)this + 2) = 0x30800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 16;
  *((_QWORD *)this + 8) = &qword_25410F3B0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::KeyValueStore>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::KeyValueStore>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::KeyValueStore>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::KeyValueStore>;
  re::IntrospectionRegistry::add(this, v3);
  v299 = v300;
}

double re::internal::defaultConstruct<re::KeyValueStore>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;
  uint64_t v4;

  *(_QWORD *)a3 = &off_24ED65B58;
  result = 0.0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_DWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_DWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_DWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_DWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_DWORD *)(a3 + 232) = 0;
  *(_OWORD *)(a3 + 248) = 0u;
  v4 = a3 + 248;
  *(_OWORD *)(v4 + 192) = 0u;
  v4 += 192;
  *(_OWORD *)(v4 - 48) = 0u;
  v4 -= 48;
  *(_OWORD *)(v4 - 48) = 0u;
  v4 -= 48;
  *(_OWORD *)(v4 - 48) = 0u;
  v4 -= 48;
  *(_QWORD *)(v4 - 60) = 0x7FFFFFFFLL;
  *(_DWORD *)(v4 - 16) = 0;
  *(_OWORD *)(v4 - 32) = 0u;
  *(_QWORD *)(v4 - 12) = 0x7FFFFFFFLL;
  *(_DWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 36) = 0x7FFFFFFFLL;
  *(_DWORD *)(v4 + 80) = 0;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 84) = 0x7FFFFFFFLL;
  *(_DWORD *)(v4 + 128) = 0;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_QWORD *)(v4 + 132) = 0x7FFFFFFFLL;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_DWORD *)(v4 + 176) = 0;
  *(_OWORD *)(v4 + 192) = 0u;
  v4 += 192;
  *(_OWORD *)(v4 + 144) = 0u;
  v4 += 144;
  *(_QWORD *)(v4 - 156) = 0x7FFFFFFFLL;
  *(_DWORD *)(v4 - 112) = 0;
  *(_OWORD *)(v4 - 128) = 0u;
  *(_QWORD *)(v4 - 108) = 0x7FFFFFFFLL;
  *(_DWORD *)(v4 - 64) = 0;
  *(_OWORD *)(v4 - 96) = 0u;
  *(_OWORD *)(v4 - 80) = 0u;
  *(_QWORD *)(v4 - 60) = 0x7FFFFFFFLL;
  *(_DWORD *)(v4 - 16) = 0;
  *(_OWORD *)(v4 - 48) = 0u;
  *(_OWORD *)(v4 - 32) = 0u;
  *(_QWORD *)(v4 - 12) = 0x7FFFFFFFLL;
  *(_DWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 36) = 0x7FFFFFFFLL;
  *(_OWORD *)(v4 + 48) = 0u;
  v4 += 48;
  *(_OWORD *)(v4 + 48) = 0u;
  v4 += 48;
  *(_DWORD *)(v4 - 16) = 0;
  *(_OWORD *)(v4 - 32) = 0u;
  *(_QWORD *)(v4 - 12) = 0x7FFFFFFFLL;
  *(_DWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 36) = 0x7FFFFFFFLL;
  return result;
}

void re::internal::defaultDestruct<re::KeyValueStore>(int a1, int a2, re::KeyValueStore *this)
{
  re::KeyValueStore::~KeyValueStore(this);
}

uint64_t re::internal::defaultConstructV2<re::KeyValueStore>(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  *(_QWORD *)a1 = &off_24ED65B58;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  v1 = a1 + 248;
  *(_OWORD *)(v1 + 192) = 0u;
  v1 += 192;
  *(_OWORD *)(v1 - 48) = 0u;
  v1 -= 48;
  *(_OWORD *)(v1 - 48) = 0u;
  v1 -= 48;
  *(_OWORD *)(v1 - 48) = 0u;
  v1 -= 48;
  *(_QWORD *)(v1 - 60) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 - 16) = 0;
  *(_OWORD *)(v1 - 32) = 0u;
  *(_QWORD *)(v1 - 12) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 + 32) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_QWORD *)(v1 + 36) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 + 80) = 0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_QWORD *)(v1 + 84) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 + 128) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_QWORD *)(v1 + 132) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_DWORD *)(v1 + 176) = 0;
  *(_OWORD *)(v1 + 192) = 0u;
  v1 += 192;
  *(_OWORD *)(v1 + 144) = 0u;
  v1 += 144;
  *(_QWORD *)(v1 - 156) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 - 112) = 0;
  *(_OWORD *)(v1 - 128) = 0u;
  *(_QWORD *)(v1 - 108) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 - 64) = 0;
  *(_OWORD *)(v1 - 96) = 0u;
  *(_OWORD *)(v1 - 80) = 0u;
  *(_QWORD *)(v1 - 60) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 - 16) = 0;
  *(_OWORD *)(v1 - 48) = 0u;
  *(_OWORD *)(v1 - 32) = 0u;
  *(_QWORD *)(v1 - 12) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 + 32) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_QWORD *)(v1 + 36) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 48) = 0u;
  v1 += 48;
  *(_OWORD *)(v1 + 48) = 0u;
  result = v1 + 48;
  *(_DWORD *)(result - 16) = 0;
  *(_OWORD *)(result - 32) = 0u;
  *(_QWORD *)(result - 12) = 0x7FFFFFFFLL;
  *(_DWORD *)(result + 32) = 0;
  *(_OWORD *)(result + 16) = 0u;
  *(_QWORD *)(result + 36) = 0x7FFFFFFFLL;
  return result;
}

uint64_t *re::ecs2::allocInfo_KeyValueComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410EDD0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410EDD0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410F338, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410F348 = 0;
    qword_25410F358 = 0;
    qword_25410F360 = 0xFFFFFFFFLL;
    qword_25410F338 = (uint64_t)&off_24ED7DAA8;
    qword_25410F368 = (uint64_t)"KeyValueComponent";
    dword_25410F370 = 0;
    xmmword_25410F378 = 0u;
    xmmword_25410F388 = 0u;
    xmmword_25410F398 = 0u;
    qword_25410F3A8 = 0;
    __cxa_guard_release(&qword_25410EDD0);
  }
  return &qword_25410F338;
}

void re::ecs2::initInfo_KeyValueComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  re::IntrospectionBase *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0x7398D48E533EA556;
  v15[1] = "KeyValueComponent";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_25410EDD8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410EDD8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410EE50 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = v9;
      v11 = (uint64_t *)qword_25410EDC8;
      if (!qword_25410EDC8)
      {
        v11 = re::allocInfo_KeyValueStore((re *)v9);
        qword_25410EDC8 = (uint64_t)v11;
        re::initInfo_KeyValueStore((re *)v11, v12);
      }
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "keyValueStore";
      *(_QWORD *)(v13 + 16) = v11;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25410EE58 = v13;
      __cxa_guard_release(&qword_25410EDD8);
    }
  }
  *((_QWORD *)this + 2) = 0x32800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410EE50;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::KeyValueComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::KeyValueComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::KeyValueComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::KeyValueComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

double re::internal::defaultConstruct<re::ecs2::KeyValueComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::KeyValueComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::KeyValueComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::KeyValueComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_KeyValueComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"KeyValueComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_KeyValueComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_KeyValueComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::KeyValueComponent>, this);
}

uint64_t re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + 32 * v12;
    return v13 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      break;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_QWORD *)(v11 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 16) + 32 * v9;
  return v13 + 24;
}

uint64_t re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 32 * v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  v15 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v15 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + 32 * v12;
    return v13 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      break;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_DWORD *)(v11 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 16) + 32 * v9;
  return v13 + 24;
}

uint64_t re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 32 * v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  v15 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v15 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + 32 * v12;
    return v13 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      break;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_QWORD *)(v11 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 16) + 32 * v9;
  return v13 + 24;
}

uint64_t re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 32 * v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, _OWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 48 * v11;
    return v12 + 32;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v10 + 48 * v9 + 8), a2))
  {
    v9 = *(_DWORD *)(v10 + 48 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_OWORD *)(v10 + 48 * v9 + 32) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 48 * v9;
  return v12 + 32;
}

uint64_t re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _OWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 48 * v11;
    return v12 + 32;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v10 + 48 * v9 + 8), a2))
  {
    v9 = *(_DWORD *)(v10 + 48 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v10 + 48 * v9;
  return v12 + 32;
}

uint64_t re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _OWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 48 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 48 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 48 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8), a4);
  *(_OWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 32) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 48;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, _OWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 48 * v11;
    return v12 + 32;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v10 + 48 * v9 + 8), a2))
  {
    v9 = *(_DWORD *)(v10 + 48 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_OWORD *)(v10 + 48 * v9 + 32) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 48 * v9;
  return v12 + 32;
}

uint64_t re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _OWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 48 * v11;
    return v12 + 32;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v10 + 48 * v9 + 8), a2))
  {
    v9 = *(_DWORD *)(v10 + 48 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v10 + 48 * v9;
  return v12 + 32;
}

uint64_t re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _OWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 48 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 48 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 48 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8), a4);
  *(_OWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 32) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 48;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, _OWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 48 * v11;
    return v12 + 32;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v10 + 48 * v9 + 8), a2))
  {
    v9 = *(_DWORD *)(v10 + 48 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_OWORD *)(v10 + 48 * v9 + 32) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 48 * v9;
  return v12 + 32;
}

uint64_t re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _OWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 48 * v11;
    return v12 + 32;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v10 + 48 * v9 + 8), a2))
  {
    v9 = *(_DWORD *)(v10 + 48 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v10 + 48 * v9;
  return v12 + 32;
}

uint64_t re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _OWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 48 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 48 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 48 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8), a4);
  *(_OWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 32) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 48;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, __int128 *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 80 * v11;
    return v12 + 32;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v10 + 80 * v9 + 8), a2))
  {
    v9 = *(_DWORD *)(v10 + 80 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v14 = (_OWORD *)(v10 + 80 * v9);
  v15 = *a3;
  v16 = a3[2];
  v14[3] = a3[1];
  v14[4] = v16;
  v14[2] = v15;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 80 * v9;
  return v12 + 32;
}

uint64_t re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, __int128 *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 80 * v11;
    return v12 + 32;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v10 + 80 * v9 + 8), a2))
  {
    v9 = *(_DWORD *)(v10 + 80 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v10 + 80 * v9;
  return v12 + 32;
}

uint64_t re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, __int128 *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 80 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 80 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 80 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 8), a4);
  v15 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9);
  v16 = *a5;
  v17 = a5[2];
  v15[3] = a5[1];
  v15[4] = v17;
  v15[2] = v16;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 80;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, const re::DynamicString *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::DynamicString&>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 56 * v11;
    return v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v10 + 56 * v9 + 8), a2))
  {
    v9 = *(_DWORD *)(v10 + 56 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  re::DynamicString::operator=((re::DynamicString *)(v10 + 56 * v9 + 24), a3);
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 56 * v9;
  return v12 + 24;
}

uint64_t re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 112 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 112 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 112 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  v14 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 112 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 112 * v8 + 8), a4);
  v15 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 112 * v8);
  re::StringID::StringID((re::StringID *)(v15 + 3), (const StringID *)a5);
  re::FixedArray<re::GenericSRT<float>>::FixedArray(v15 + 5, a5 + 16);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)(v15 + 8), (uint64_t *)(a5 + 40));
  v16 = *(_QWORD *)(a5 + 80);
  v15[13] = v16;
  if (v16)
    v17 = (id)(v16 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v14) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  signed int v15;
  _BYTE v16[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v16, 0, 36);
      *(_QWORD *)&v16[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v16, v4, a2);
      v5 = *(_OWORD *)v16;
      *(_OWORD *)v16 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v16[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v16[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v16[24];
      *(_OWORD *)&v16[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v16[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = v7 + 24;
        do
        {
          if ((*(_DWORD *)(v12 - 24) & 0x80000000) != 0)
          {
            v13 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v12 - 16) >> 31) ^ (*(_QWORD *)(v12 - 16) >> 1));
            v14 = (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31);
            re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v14 % *(unsigned int *)(a1 + 24), v14, (StringID *)(v12 - 16));
          }
          ++v11;
          v12 += 112;
        }
        while (v11 < v10);
      }
      re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v16);
    }
  }
  else
  {
    if (a2)
      v15 = a2;
    else
      v15 = 3;
  }
}

unint64_t re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + ((unint64_t)v12 << 6);
    return v13 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + (v9 << 6);
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      break;
    v9 = *(_DWORD *)(v10 + (v9 << 6)) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  re::DynamicArray<float>::operator=(v11 + 24, a3);
  ++*(_DWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  return v13 + 24;
}

unint64_t re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + ((unint64_t)v12 << 6) + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + (v9 << 6);
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + (v9 << 6)) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, uint64_t *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v9 << 6));
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v9 << 6));
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = v9 << 6;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6)) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8), a4);
  re::DynamicArray<float>::DynamicArray(*(_QWORD *)(a1 + 16) + (v9 << 6) + 24, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 64;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v9 << 6));
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v9 << 6));
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = v9 << 6;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6)) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8), a4);
  v15 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  *(_QWORD *)(v15 + 56) = 0;
  *(_DWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  v16 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(v15 + 24) = *(_QWORD *)a5;
  *(_QWORD *)(v15 + 32) = v16;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v17 = *(_QWORD *)(v15 + 40);
  *(_QWORD *)(v15 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v17;
  v18 = *(_QWORD *)(v15 + 56);
  *(_QWORD *)(v15 + 56) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v18;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v15 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

unint64_t re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + ((unint64_t)v12 << 6);
    return v13 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + (v9 << 6);
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      break;
    v9 = *(_DWORD *)(v10 + (v9 << 6)) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  re::DynamicArray<re::Vector3<float>>::operator=(v11 + 24, a3);
  ++*(_DWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  return v13 + 24;
}

unint64_t re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + ((unint64_t)v12 << 6) + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + (v9 << 6);
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + (v9 << 6)) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, uint64_t *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v9 << 6));
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v9 << 6));
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = v9 << 6;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6)) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8), a4);
  re::DynamicArray<re::Vector3<float>>::DynamicArray(*(_QWORD *)(a1 + 16) + (v9 << 6) + 24, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 64;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v9 << 6));
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v9 << 6));
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = v9 << 6;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6)) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8), a4);
  v15 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  *(_QWORD *)(v15 + 56) = 0;
  *(_DWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  v16 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(v15 + 24) = *(_QWORD *)a5;
  *(_QWORD *)(v15 + 32) = v16;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v17 = *(_QWORD *)(v15 + 40);
  *(_QWORD *)(v15 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v17;
  v18 = *(_QWORD *)(v15 + 56);
  *(_QWORD *)(v15 + 56) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v18;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v15 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 56 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 56 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 56 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  v14 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 56 * v8 + 8), a4);
  v15 = *(_QWORD *)(a1 + 16) + 56 * v8;
  re::FixedArray<float>::FixedArray((uint64_t *)(v15 + 24), a5);
  v16 = *(_QWORD *)(a5 + 24);
  *(_QWORD *)(v15 + 48) = v16;
  if (v16)
    v17 = (id)(v16 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v14) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  signed int v15;
  _BYTE v16[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v16, 0, 36);
      *(_QWORD *)&v16[36] = 0x7FFFFFFFLL;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v16, v4, a2);
      v5 = *(_OWORD *)v16;
      *(_OWORD *)v16 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v16[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v16[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v16[24];
      *(_OWORD *)&v16[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v16[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = v7 + 24;
        do
        {
          if ((*(_DWORD *)(v12 - 24) & 0x80000000) != 0)
          {
            v13 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v12 - 16) >> 31) ^ (*(_QWORD *)(v12 - 16) >> 1));
            v14 = (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31);
            re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v14 % *(unsigned int *)(a1 + 24), v14, (StringID *)(v12 - 16));
          }
          ++v11;
          v12 += 56;
        }
        while (v11 < v10);
      }
      re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v16);
    }
  }
  else
  {
    if (a2)
      v15 = a2;
    else
      v15 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v5 + 48 * v4 + 8), a2))
  {
    v4 = *(_DWORD *)(v5 + 48 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF)
      return 0;
  }
  return v5 + 48 * v4 + 32;
}

uint64_t re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v5 + 80 * v4 + 8), a2))
  {
    v4 = *(_DWORD *)(v5 + 80 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF)
      return 0;
  }
  return v5 + 80 * v4 + 32;
}

uint64_t re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v5 + 112 * v4 + 8), a2))
  {
    v4 = *(_DWORD *)(v5 + 112 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF)
      return 0;
  }
  return v5 + 112 * v4 + 24;
}

uint64_t re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v6 = v5 + (v4 << 6);
    if (re::StringID::operator==((_QWORD *)(v6 + 8), a2))
      break;
    v4 = *(_DWORD *)(v5 + (v4 << 6)) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 24;
}

uint64_t re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;

  if (!*(_QWORD *)a1)
    return 0;
  v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (!re::StringID::operator==((_QWORD *)(v9 + 48 * v7 + 8), a2))
  {
    while (1)
    {
      v10 = v7;
      v11 = *(_DWORD *)(v9 + 48 * v7);
      v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (re::StringID::operator==((_QWORD *)(v9 + 48 * v7 + 8), a2))
      {
        *(_DWORD *)(v9 + 48 * v10) = *(_DWORD *)(v9 + 48 * v10) & 0x80000000 | *(_DWORD *)(v9
                                                                                             + 48 * v7) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 48 * v7) & 0x7FFFFFFF;
LABEL_9:
  v12 = *(_QWORD *)(a1 + 16);
  v13 = (int *)(v12 + 48 * v7);
  v14 = *v13;
  if (*v13 < 0)
  {
    *v13 = v14 & 0x7FFFFFFF;
    re::StringID::destroyString((re::StringID *)(v12 + 48 * v7 + 8));
    v12 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v12 + 48 * v7);
  }
  v15 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v12 + 48 * v7) = *(_DWORD *)(a1 + 36) | v14 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v15 + 1;
  return 1;
}

uint64_t re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;

  if (!*(_QWORD *)a1)
    return 0;
  v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (!re::StringID::operator==((_QWORD *)(v9 + 80 * v7 + 8), a2))
  {
    while (1)
    {
      v10 = v7;
      v11 = *(_DWORD *)(v9 + 80 * v7);
      v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (re::StringID::operator==((_QWORD *)(v9 + 80 * v7 + 8), a2))
      {
        *(_DWORD *)(v9 + 80 * v10) = *(_DWORD *)(v9 + 80 * v10) & 0x80000000 | *(_DWORD *)(v9
                                                                                             + 80 * v7) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 80 * v7) & 0x7FFFFFFF;
LABEL_9:
  v12 = *(_QWORD *)(a1 + 16);
  v13 = (int *)(v12 + 80 * v7);
  v14 = *v13;
  if (*v13 < 0)
  {
    *v13 = v14 & 0x7FFFFFFF;
    re::StringID::destroyString((re::StringID *)(v12 + 80 * v7 + 8));
    v12 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v12 + 80 * v7);
  }
  v15 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v12 + 80 * v7) = *(_DWORD *)(a1 + 36) | v14 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v15 + 1;
  return 1;
}

void re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;

  if (*(_QWORD *)a1)
  {
    v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
    v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
       % *(unsigned int *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(v6 + 4 * v5);
    if ((_DWORD)v7 != 0x7FFFFFFF)
    {
      v8 = *(_QWORD *)(a1 + 16);
      if (re::StringID::operator==((_QWORD *)(v8 + 112 * v7 + 8), a2))
      {
        *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v8 + 112 * v7) & 0x7FFFFFFF;
LABEL_8:
        re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(_QWORD *)(a1 + 16) + 112 * v7));
        v11 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 112 * v7) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 112 * v7) & 0x80000000 | *(_DWORD *)(a1 + 36);
        --*(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 36) = v7;
        *(_DWORD *)(a1 + 40) = v11 + 1;
      }
      else
      {
        while (1)
        {
          v9 = v7;
          v10 = *(_DWORD *)(v8 + 112 * v7);
          v7 = v10 & 0x7FFFFFFF;
          if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          if (re::StringID::operator==((_QWORD *)(v8 + 112 * v7 + 8), a2))
          {
            *(_DWORD *)(v8 + 112 * v9) = *(_DWORD *)(v8 + 112 * v9) & 0x80000000 | *(_DWORD *)(v8
                                                                                                 + 112
                                                                                                 * v7) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

uint64_t re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;

  if (!*(_QWORD *)a1)
    return 0;
  v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (!re::StringID::operator==((_QWORD *)(v9 + (v7 << 6) + 8), a2))
  {
    while (1)
    {
      v10 = v7;
      v11 = *(_DWORD *)(v9 + (v7 << 6));
      v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (re::StringID::operator==((_QWORD *)(v9 + (v7 << 6) + 8), a2))
      {
        *(_DWORD *)(v9 + ((unint64_t)v10 << 6)) = *(_DWORD *)(v9 + ((unint64_t)v10 << 6)) & 0x80000000 | *(_DWORD *)(v9 + (v7 << 6)) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + (v7 << 6)) & 0x7FFFFFFF;
LABEL_9:
  re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(*(_QWORD *)(a1 + 16) + (v7 << 6));
  v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v7 << 6)) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v7 << 6)) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  return 1;
}

void re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;

  if (*(_QWORD *)a1)
  {
    v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
    v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
       % *(unsigned int *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(v6 + 4 * v5);
    if ((_DWORD)v7 != 0x7FFFFFFF)
    {
      v8 = *(_QWORD *)(a1 + 16);
      if (re::StringID::operator==((_QWORD *)(v8 + 56 * v7 + 8), a2))
      {
        *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v8 + 56 * v7) & 0x7FFFFFFF;
LABEL_8:
        re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v7));
        v11 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v7) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v7) & 0x80000000 | *(_DWORD *)(a1 + 36);
        --*(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 36) = v7;
        *(_DWORD *)(a1 + 40) = v11 + 1;
      }
      else
      {
        while (1)
        {
          v9 = v7;
          v10 = *(_DWORD *)(v8 + 56 * v7);
          v7 = v10 & 0x7FFFFFFF;
          if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          if (re::StringID::operator==((_QWORD *)(v8 + 56 * v7 + 8), a2))
          {
            *(_DWORD *)(v8 + 56 * v9) = *(_DWORD *)(v8 + 56 * v9) & 0x80000000 | *(_DWORD *)(v8
                                                                                               + 56 * v7) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

_QWORD *re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  char v10;

  v10 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 8;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 32 * v10 + 8, *(_QWORD *)(a2 + 16) + 32 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 32 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

void re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 32;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 8;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  int v10;

  v10 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 8;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 32 * v10 + 8, *(_QWORD *)(a2 + 16) + 32 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 32 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 8;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

