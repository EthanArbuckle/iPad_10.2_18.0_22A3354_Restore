uint64_t physx::Cm::operator<<(_DWORD *a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  int v34;
  int v35;
  float *v36;
  int v37;
  uint64_t v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  float v68[3];
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  float v77[3];
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  float v84[3];
  uint64_t v85;
  int v86;
  int v87;
  float v88[3];
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  float v93[3];
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  float v102[3];
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  float v107[3];
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;

  if (*((_BYTE *)a2 + 24))
  {
    *a1 = 2;
    a1[8] = 0;
    v3 = *((_DWORD *)a2 + 2);
    v112 = *a2;
    v113 = v3;
    v4 = physx::Cm::RenderOutput::operator<<((uint64_t)a1, (float *)&v112);
    v110 = *((_DWORD *)a2 + 3);
    v111 = *(uint64_t *)((char *)a2 + 4);
    v5 = physx::Cm::RenderOutput::operator<<(v4, (float *)&v110);
    v6 = *((_DWORD *)a2 + 2);
    v108 = *(uint64_t *)((char *)a2 + 12);
    v109 = v6;
    v7 = physx::Cm::RenderOutput::operator<<(v5, (float *)&v108);
    v8 = *((float *)a2 + 4);
    v9 = *((float *)a2 + 2);
    v107[0] = *(float *)a2;
    v107[1] = v8;
    v107[2] = v9;
    v10 = physx::Cm::RenderOutput::operator<<(v7, v107);
    v11 = *((_DWORD *)a2 + 2);
    v105 = *a2;
    v106 = v11;
    v12 = physx::Cm::RenderOutput::operator<<(v10, (float *)&v105);
    v13 = *((_DWORD *)a2 + 5);
    v103 = *a2;
    v104 = v13;
    v14 = physx::Cm::RenderOutput::operator<<(v12, (float *)&v103);
    v15 = *((float *)a2 + 1);
    v16 = *((float *)a2 + 5);
    v102[0] = *((float *)a2 + 3);
    v102[1] = v15;
    v102[2] = v16;
    v17 = physx::Cm::RenderOutput::operator<<(v14, v102);
    v18 = *((_DWORD *)a2 + 5);
    v100 = *(uint64_t *)((char *)a2 + 12);
    v101 = v18;
    v19 = physx::Cm::RenderOutput::operator<<(v17, (float *)&v100);
    v98 = *(_DWORD *)a2;
    v99 = a2[2];
    v20 = physx::Cm::RenderOutput::operator<<(v19, (float *)&v98);
    v21 = *((_DWORD *)a2 + 5);
    v96 = *a2;
    v97 = v21;
    v22 = (_DWORD *)physx::Cm::RenderOutput::operator<<(v20, (float *)&v96);
    *v22 = 1;
    v22[8] = 0;
    v94 = *((_DWORD *)a2 + 3);
    v95 = *(uint64_t *)((char *)a2 + 4);
    v23 = physx::Cm::RenderOutput::operator<<((uint64_t)v22, (float *)&v94);
    v24 = *((float *)a2 + 1);
    v25 = *((float *)a2 + 5);
    v93[0] = *((float *)a2 + 3);
    v93[1] = v24;
    v93[2] = v25;
    v26 = physx::Cm::RenderOutput::operator<<(v23, v93);
    v27 = *((_DWORD *)a2 + 2);
    v91 = *(uint64_t *)((char *)a2 + 12);
    v92 = v27;
    v28 = physx::Cm::RenderOutput::operator<<(v26, (float *)&v91);
    v29 = *((_DWORD *)a2 + 5);
    v89 = *(uint64_t *)((char *)a2 + 12);
    v90 = v29;
    v30 = physx::Cm::RenderOutput::operator<<(v28, (float *)&v89);
    v31 = *((float *)a2 + 4);
    v32 = *((float *)a2 + 2);
    v88[0] = *(float *)a2;
    v88[1] = v31;
    v88[2] = v32;
    v33 = physx::Cm::RenderOutput::operator<<(v30, v88);
    v34 = *((_DWORD *)a2 + 4);
    v35 = *((_DWORD *)a2 + 5);
    v87 = *(_DWORD *)a2;
    v36 = (float *)&v87;
  }
  else
  {
    *a1 = 4;
    a1[8] = 0;
    v37 = *((_DWORD *)a2 + 2);
    v85 = *a2;
    v86 = v37;
    v38 = physx::Cm::RenderOutput::operator<<((uint64_t)a1, (float *)&v85);
    v39 = *((float *)a2 + 4);
    v40 = *((float *)a2 + 2);
    v84[0] = *(float *)a2;
    v84[1] = v39;
    v84[2] = v40;
    v41 = physx::Cm::RenderOutput::operator<<(v38, v84);
    v82 = *((_DWORD *)a2 + 3);
    v83 = *(uint64_t *)((char *)a2 + 4);
    v42 = physx::Cm::RenderOutput::operator<<(v41, (float *)&v82);
    v43 = *((_DWORD *)a2 + 2);
    v80 = *(uint64_t *)((char *)a2 + 12);
    v81 = v43;
    v44 = physx::Cm::RenderOutput::operator<<(v42, (float *)&v80);
    v45 = *((_DWORD *)a2 + 5);
    v78 = *(uint64_t *)((char *)a2 + 12);
    v79 = v45;
    v46 = physx::Cm::RenderOutput::operator<<(v44, (float *)&v78);
    v47 = *((float *)a2 + 4);
    v48 = *((float *)a2 + 2);
    v77[0] = *(float *)a2;
    v77[1] = v47;
    v77[2] = v48;
    v49 = physx::Cm::RenderOutput::operator<<(v46, v77);
    v75 = *(_DWORD *)a2;
    v76 = a2[2];
    v50 = physx::Cm::RenderOutput::operator<<(v49, (float *)&v75);
    v51 = *((_DWORD *)a2 + 2);
    v73 = *a2;
    v74 = v51;
    v52 = physx::Cm::RenderOutput::operator<<(v50, (float *)&v73);
    v53 = *((_DWORD *)a2 + 5);
    v71 = *a2;
    v72 = v53;
    v54 = physx::Cm::RenderOutput::operator<<(v52, (float *)&v71);
    v69 = *((_DWORD *)a2 + 3);
    v70 = *(uint64_t *)((char *)a2 + 4);
    v55 = physx::Cm::RenderOutput::operator<<(v54, (float *)&v69);
    v56 = *((float *)a2 + 1);
    v57 = *((float *)a2 + 5);
    v68[0] = *((float *)a2 + 3);
    v68[1] = v56;
    v68[2] = v57;
    v58 = physx::Cm::RenderOutput::operator<<(v55, v68);
    v59 = *((_DWORD *)a2 + 5);
    v66 = *(uint64_t *)((char *)a2 + 12);
    v67 = v59;
    v60 = physx::Cm::RenderOutput::operator<<(v58, (float *)&v66);
    v61 = *((_DWORD *)a2 + 5);
    v64 = *a2;
    v65 = v61;
    v33 = physx::Cm::RenderOutput::operator<<(v60, (float *)&v64);
    v34 = *((_DWORD *)a2 + 4);
    v35 = *((_DWORD *)a2 + 5);
    v63 = *(_DWORD *)a2;
    v36 = (float *)&v63;
  }
  *((_DWORD *)v36 + 1) = v34;
  *((_DWORD *)v36 + 2) = v35;
  return physx::Cm::RenderOutput::operator<<(v33, v36);
}

uint64_t physx::Cm::operator<<(_DWORD *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48[3];
  uint64_t v49;
  int v50;
  float v51[3];
  float v52[3];
  float v53[3];
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  float v58[3];

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = v6 - *a2;
  v9 = a2[4];
  v8 = a2[5];
  v10 = v9 - v4;
  v11 = v8 - v5;
  v12 = sqrtf((float)((float)(v10 * v10) + (float)(v7 * v7)) + (float)(v11 * v11));
  if (v12 > 0.0)
  {
    v13 = 1.0 / v12;
    v7 = v7 * v13;
    v10 = v10 * v13;
    v11 = v11 * v13;
  }
  v14 = fabsf(v7);
  v15 = v14 < 0.70711;
  v16 = 0.0;
  if (v14 >= 0.70711)
    v17 = -v10;
  else
    v17 = 0.0;
  if (v15)
    v18 = -v11;
  else
    v18 = v7;
  if (v15)
    v16 = v10;
  v19 = sqrtf((float)((float)(v18 * v18) + (float)(v17 * v17)) + (float)(v16 * v16));
  if (v19 > 0.0)
  {
    v20 = 1.0 / v19;
    v17 = v17 * v20;
    v18 = v18 * v20;
    v16 = v16 * v20;
  }
  v21 = (float)(v11 * v17) - (float)(v7 * v16);
  v22 = (float)(v17 * (float)-v10) + (float)(v7 * v18);
  v23 = a2[6];
  v24 = v17 * (float)(v23 * 0.25);
  v25 = v18 * (float)(v23 * 0.25);
  v26 = v16 * (float)(v23 * 0.25);
  v27 = (float)(v23 * 0.25) * 1.7321;
  v46 = v21 * v27;
  v47 = (float)((float)(v18 * (float)-v11) + (float)(v10 * v16)) * v27;
  v28 = v22 * v27;
  v29 = v6 - (float)(v7 * v23);
  v30 = v9 - (float)(v10 * v23);
  *a1 = 1;
  a1[8] = 0;
  v31 = v8 - (float)(v11 * v23);
  v58[0] = v3;
  v58[1] = v4;
  v58[2] = v5;
  v32 = physx::Cm::RenderOutput::operator<<((uint64_t)a1, v58);
  v56 = *(_QWORD *)(a2 + 3);
  v57 = *((_DWORD *)a2 + 5);
  v33 = (_DWORD *)physx::Cm::RenderOutput::operator<<(v32, (float *)&v56);
  *v33 = 4;
  v33[8] = 0;
  v54 = *(_QWORD *)(a2 + 3);
  v55 = *((_DWORD *)a2 + 5);
  v34 = physx::Cm::RenderOutput::operator<<((uint64_t)v33, (float *)&v54);
  v44 = v25 + (float)(v30 + v25);
  v45 = v24 + (float)(v29 + v24);
  v35 = v26 + (float)(v31 + v26);
  v53[0] = v45;
  v53[1] = v44;
  v53[2] = v35;
  v36 = physx::Cm::RenderOutput::operator<<(v34, v53);
  v37 = v29 - v24;
  v38 = v30 - v25;
  v39 = v31 - v26;
  v52[0] = v37 - v47;
  v52[1] = v38 - v46;
  v52[2] = v39 - v28;
  v40 = physx::Cm::RenderOutput::operator<<(v36, v52);
  v51[0] = v37 + v47;
  v51[1] = v38 + v46;
  v51[2] = v39 + v28;
  v41 = physx::Cm::RenderOutput::operator<<(v40, v51);
  v49 = *(_QWORD *)(a2 + 3);
  v50 = *((_DWORD *)a2 + 5);
  v42 = physx::Cm::RenderOutput::operator<<(v41, (float *)&v49);
  v48[0] = v45;
  v48[1] = v44;
  v48[2] = v35;
  return physx::Cm::RenderOutput::operator<<(v42, v48);
}

uint64_t physx::Cm::operator<<(_DWORD *a1, uint64_t a2)
{
  float v3;
  float v4;
  float v5;
  _DWORD *v6;
  unsigned int v7;
  _DWORD *v8;
  float v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;

  v3 = *(float *)a2;
  v4 = sqrtf((float)((float)(*(float *)(a2 + 4) * *(float *)(a2 + 4)) + (float)(v3 * v3))+ (float)(*(float *)(a2 + 8) * *(float *)(a2 + 8)));
  a1[1] = *(_DWORD *)(a2 + 12);
  *((float *)&v12 + 1) = v3 + 0.0;
  v11 = 0;
  LODWORD(v12) = 0;
  v5 = v4 * 0.15;
  v13 = 0;
  v14 = v4 * 0.15;
  v6 = (_DWORD *)physx::Cm::operator<<(a1, (float *)&v11);
  v6[1] = *(_DWORD *)(a2 + 16);
  *(float *)&v7 = *(float *)(a2 + 4) + 0.0;
  v11 = 0;
  v12 = 0;
  v13 = v7;
  v14 = v5;
  v8 = (_DWORD *)physx::Cm::operator<<(v6, (float *)&v11);
  v8[1] = *(_DWORD *)(a2 + 20);
  v9 = *(float *)(a2 + 8) + 0.0;
  v11 = 0;
  v12 = 0;
  LODWORD(v13) = 0;
  *((float *)&v13 + 1) = v9;
  v14 = v5;
  return physx::Cm::operator<<(v8, (float *)&v11);
}

{
  unsigned int v4;
  unsigned int v5;
  float v6;
  float v7;
  float v8;
  __float2 v9;
  float v10;
  float v12[3];
  float v13[3];

  v4 = *(_DWORD *)a2;
  *a1 = 2;
  a1[8] = 0;
  if (v4)
  {
    v5 = 0;
    v6 = 6.2832 / (float)v4;
    v7 = 0.0;
    do
    {
      v8 = *(float *)(a2 + 4);
      v9 = __sincosf_stret(v7);
      v13[0] = v9.__sinval * v8;
      v13[1] = v9.__cosval * v8;
      v13[2] = 0.0;
      physx::Cm::RenderOutput::operator<<((uint64_t)a1, v13);
      ++v5;
      v7 = v6 + v7;
    }
    while (v5 < *(_DWORD *)a2);
  }
  v10 = *(float *)(a2 + 4);
  v12[0] = 0.0;
  v12[1] = v10;
  v12[2] = 0.0;
  return physx::Cm::RenderOutput::operator<<((uint64_t)a1, v12);
}

{
  float v4;
  float v5;
  unsigned int v6;
  unsigned int v7;
  float v8;
  float v9;
  __float2 v10;
  float v11;
  __float2 v12;
  float v14[3];
  float v15[3];

  v5 = *(float *)(a2 + 8);
  v4 = *(float *)(a2 + 12);
  v6 = *(_DWORD *)a2;
  *a1 = 2;
  a1[8] = 0;
  if (v6)
  {
    v7 = 0;
    v8 = (float)(v4 - v5) / (float)v6;
    do
    {
      v9 = *(float *)(a2 + 4);
      v10 = __sincosf_stret(v5);
      v15[0] = v10.__sinval * v9;
      v15[1] = v10.__cosval * v9;
      v15[2] = 0.0;
      physx::Cm::RenderOutput::operator<<((uint64_t)a1, v15);
      ++v7;
      v5 = v8 + v5;
    }
    while (v7 < *(_DWORD *)a2);
    v4 = *(float *)(a2 + 12);
  }
  v11 = *(float *)(a2 + 4);
  v12 = __sincosf_stret(v4);
  v14[0] = v11 * v12.__sinval;
  v14[1] = v11 * v12.__cosval;
  v14[2] = 0.0;
  return physx::Cm::RenderOutput::operator<<((uint64_t)a1, v14);
}

uint64_t physx::Cm::RenderOutput::outputCapsule(uint64_t a1, float32x2_t *a2, float a3, float a4)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float32x2_t v13;
  float32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float32x2_t v23;
  float32x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  float v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  uint64_t v100;
  float32x2_t v102;
  float v103;
  float32x2_t v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float32x2_t v113;
  float v114;
  float32x2_t v115;
  float v116;
  __int32 v117;
  __int32 v118;
  float v119;
  float v122;
  int v123;
  float v124;
  uint64_t v125;

  v6 = a2[1].f32[0];
  v117 = a2[1].i32[1];
  v8 = a2[3].f32[0];
  v7 = a2[3].f32[1];
  v10 = a2[5].f32[0];
  v9 = a2[5].f32[1];
  v109 = a2[7].f32[1] + 0.0;
  v111 = (float)((float)((float)(v8 * 0.0) - (float)(v6 * a4)) + (float)(v10 * 0.0)) + a2[7].f32[0];
  *(float *)(a1 + 44) = v6;
  *(_DWORD *)(a1 + 48) = v117;
  v11 = v6;
  v105 = v6;
  *(float *)(a1 + 60) = v8;
  *(float *)(a1 + 64) = v7;
  *(float *)(a1 + 76) = v10;
  *(float *)(a1 + 80) = v9;
  *(float *)(a1 + 92) = v111;
  *(float *)(a1 + 96) = v109;
  v123 = 100;
  v124 = a3;
  v125 = 0x40C90FDB40490FDBLL;
  v12 = -v10;
  v103 = -v10;
  v107 = -v9;
  v13 = *a2;
  v115 = a2[2];
  v102 = a2[4];
  v14 = vadd_f32(vadd_f32(vsub_f32(vmul_f32(v115, 0), vmul_n_f32(*a2, a4)), vmul_f32(v102, 0)), a2[6]);
  *(float32x2_t *)(a1 + 36) = *a2;
  *(float32x2_t *)(a1 + 52) = v115;
  *(float32x2_t *)(a1 + 68) = v102;
  *(float32x2_t *)(a1 + 84) = v14;
  v15 = physx::Cm::operator<<((_DWORD *)a1, (uint64_t)&v123);
  *(float32x2_t *)(v15 + 36) = v13;
  *(float *)(v15 + 44) = v11;
  *(_DWORD *)(v15 + 48) = v117;
  *(float *)(v15 + 52) = -v102.f32[0];
  *(float *)(v15 + 56) = -v102.f32[1];
  *(float *)(v15 + 60) = v12;
  *(float *)(v15 + 64) = v107;
  *(float32x2_t *)(v15 + 68) = v115;
  *(float *)(v15 + 76) = v8;
  *(float *)(v15 + 80) = v7;
  *(float32x2_t *)(v15 + 84) = v14;
  *(float *)(v15 + 92) = v111;
  *(float *)(v15 + 96) = v109;
  v123 = 100;
  v124 = a3;
  v125 = 0x40C90FDB40490FDBLL;
  v16 = physx::Cm::operator<<((_DWORD *)v15, (uint64_t)&v123);
  *(float *)(v16 + 36) = -v115.f32[0];
  *(float *)(v16 + 40) = -v115.f32[1];
  *(float *)(v16 + 44) = -v8;
  *(float *)(v16 + 48) = -v7;
  *(float *)(v16 + 52) = -v102.f32[0];
  *(float *)(v16 + 56) = -v102.f32[1];
  *(float *)(v16 + 60) = v103;
  *(float *)(v16 + 64) = v107;
  *(float32x2_t *)(v16 + 68) = v13;
  *(float *)(v16 + 76) = v105;
  *(_DWORD *)(v16 + 80) = v117;
  *(float32x2_t *)(v16 + 84) = v14;
  *(float *)(v16 + 92) = v111;
  *(float *)(v16 + 96) = v109;
  v123 = 100;
  v124 = a3;
  v17 = physx::Cm::operator<<((_DWORD *)v16, (uint64_t)&v123);
  v115.i32[0] = a2[1].i32[0];
  v118 = a2[1].i32[1];
  v13.i32[0] = a2[3].i32[0];
  v18 = a2[3].f32[1];
  v19 = a2[5].f32[0];
  v20 = a2[5].f32[1];
  v110 = (float)((float)((float)(v115.f32[0] * a4) + (float)(v13.f32[0] * 0.0)) + (float)(v19 * 0.0)) + a2[7].f32[0];
  v108 = a2[7].f32[1] + 0.0;
  *(_DWORD *)(v17 + 44) = v115.i32[0];
  *(_DWORD *)(v17 + 48) = v118;
  *(_DWORD *)(v17 + 60) = v13.i32[0];
  *(float *)(v17 + 64) = v18;
  *(float *)(v17 + 76) = v19;
  *(float *)(v17 + 80) = v20;
  *(float *)(v17 + 92) = v110;
  *(float *)(v17 + 96) = v108;
  v123 = 100;
  v124 = a3;
  v125 = 0x40490FDB00000000;
  v21 = -v19;
  v22 = -v20;
  v106 = -v20;
  v23 = *a2;
  v113 = a2[2];
  v104 = a2[4];
  v24 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*a2, a4), vmul_f32(v113, 0)), vmul_f32(v104, 0)), a2[6]);
  *(float32x2_t *)(v17 + 36) = *a2;
  *(float32x2_t *)(v17 + 52) = v113;
  *(float32x2_t *)(v17 + 68) = v104;
  *(float32x2_t *)(v17 + 84) = v24;
  v25 = physx::Cm::operator<<((_DWORD *)v17, (uint64_t)&v123);
  *(float32x2_t *)(v25 + 36) = v23;
  *(_DWORD *)(v25 + 44) = v115.i32[0];
  *(_DWORD *)(v25 + 48) = v118;
  *(float *)(v25 + 52) = -v104.f32[0];
  *(float *)(v25 + 56) = -v104.f32[1];
  *(float *)(v25 + 60) = v21;
  *(float *)(v25 + 64) = v22;
  *(float32x2_t *)(v25 + 68) = v113;
  *(_DWORD *)(v25 + 76) = v13.i32[0];
  *(float *)(v25 + 80) = v18;
  *(float32x2_t *)(v25 + 84) = v24;
  *(float *)(v25 + 92) = v110;
  *(float *)(v25 + 96) = v108;
  v123 = 100;
  v124 = a3;
  v125 = 0x40490FDB00000000;
  v26 = physx::Cm::operator<<((_DWORD *)v25, (uint64_t)&v123);
  *(float *)(v26 + 36) = -v113.f32[0];
  *(float *)(v26 + 40) = -v113.f32[1];
  *(float *)(v26 + 44) = -v13.f32[0];
  *(float *)(v26 + 48) = -v18;
  *(float *)(v26 + 52) = -v104.f32[0];
  *(float *)(v26 + 56) = -v104.f32[1];
  *(float *)(v26 + 60) = v21;
  *(float *)(v26 + 64) = v106;
  *(float32x2_t *)(v26 + 68) = v23;
  *(_DWORD *)(v26 + 76) = v115.i32[0];
  *(_DWORD *)(v26 + 80) = v118;
  *(float32x2_t *)(v26 + 84) = v24;
  *(float *)(v26 + 92) = v110;
  *(float *)(v26 + 96) = v108;
  v123 = 100;
  v124 = a3;
  v27 = physx::Cm::operator<<((_DWORD *)v26, (uint64_t)&v123);
  physx::Cm::RenderOutput::operator<<(v27, (uint64_t)a2);
  v29 = a4;
  v30 = a2->f32[0];
  v31 = a2->f32[1];
  v32 = a2[1].f32[0];
  v33 = a2[2].f32[0];
  v34 = a2[2].f32[1];
  v35 = a2[3].f32[0];
  v36 = a2->f32[0] * a4;
  v37 = v31 * a4;
  v38 = v32 * a4;
  v39 = a2[4].f32[0];
  v40 = a2[4].f32[1];
  v41 = v39 * 0.0;
  v42 = v40 * 0.0;
  v43 = a2[5].f32[0];
  v44 = v43 * 0.0;
  v45 = a2[6].f32[0];
  v46 = a2[6].f32[1];
  v47 = a2[7].f32[0];
  v48 = (float)((float)((float)(v33 * a3) - v36) + (float)(v39 * 0.0)) + v45;
  v49 = (float)((float)((float)(v34 * a3) - (float)(v31 * a4)) + (float)(v40 * 0.0)) + v46;
  v50 = (float)((float)((float)(v35 * a3) - (float)(v32 * a4)) + (float)(v43 * 0.0)) + v47;
  v51 = (float)((float)(v36 + (float)(v33 * a3)) + (float)(v39 * 0.0)) + v45;
  v52 = (float)((float)((float)(v31 * a4) + (float)(v34 * a3)) + (float)(v40 * 0.0)) + v46;
  v53 = (float)((float)((float)(v32 * a4) + (float)(v35 * a3)) + (float)(v43 * 0.0)) + v47;
  v54 = *(_QWORD *)(v28 + 104);
  v55 = *(_DWORD *)(v54 + 32);
  v56 = *(_DWORD *)(v54 + 36) & 0x7FFFFFFF;
  v57 = v55 + 1;
  if (v55 + 1 <= v56)
  {
    v61 = *(_QWORD *)(v28 + 104);
  }
  else
  {
    if (v56)
      v58 = 2 * *(_DWORD *)(v54 + 36);
    else
      v58 = 2;
    if (v57 <= v58)
      v59 = v58;
    else
      v59 = v55 + 1;
    v60 = (float)((float)((float)(v32 * a4) + (float)(v35 * a3)) + (float)(v43 * 0.0)) + v47;
    physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v54 + 24, v59);
    v53 = v60;
    v29 = a4;
    v55 = *(_DWORD *)(v54 + 32);
    v30 = a2->f32[0];
    v31 = a2->f32[1];
    v32 = a2[1].f32[0];
    v33 = a2[2].f32[0];
    v34 = a2[2].f32[1];
    v35 = a2[3].f32[0];
    v39 = a2[4].f32[0];
    v40 = a2[4].f32[1];
    v43 = a2[5].f32[0];
    v45 = a2[6].f32[0];
    v46 = a2[6].f32[1];
    v47 = a2[7].f32[0];
    v61 = *(_QWORD *)(a1 + 104);
    v36 = a2->f32[0] * a4;
    v37 = v31 * a4;
    v38 = v32 * a4;
    v41 = v39 * 0.0;
    v42 = v40 * 0.0;
    v44 = v43 * 0.0;
    v56 = *(_DWORD *)(v61 + 36) & 0x7FFFFFFF;
  }
  v62 = *(_QWORD *)(v54 + 24) + 32 * v55;
  *(_DWORD *)(v54 + 32) = v57;
  *(float *)v62 = v48;
  *(float *)(v62 + 4) = v49;
  *(float *)(v62 + 8) = v50;
  *(float *)(v62 + 16) = v51;
  *(float *)(v62 + 20) = v52;
  *(float *)(v62 + 24) = v53;
  v63 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v62 + 28) = v63;
  *(_DWORD *)(v62 + 12) = v63;
  v64 = v45 + (float)(v41 + (float)((float)-(float)(a3 * v33) - v36));
  v65 = v46 + (float)(v42 + (float)((float)-(float)(a3 * v34) - v37));
  v66 = v47 + (float)(v44 + (float)((float)-(float)(a3 * v35) - v38));
  v67 = v45 + (float)(v41 + (float)(v36 - (float)(a3 * v33)));
  v68 = v46 + (float)(v42 + (float)(v37 - (float)(a3 * v34)));
  v69 = v47 + (float)(v44 + (float)(v38 - (float)(a3 * v35)));
  v70 = *(_DWORD *)(v61 + 32);
  v71 = v70 + 1;
  if (v70 + 1 <= v56)
  {
    v74 = v61;
  }
  else
  {
    if (v56)
      v72 = 2 * v56;
    else
      v72 = 2;
    if (v71 <= v72)
      v73 = v72;
    else
      v73 = v70 + 1;
    physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v61 + 24, v73);
    v29 = a4;
    v70 = *(_DWORD *)(v61 + 32);
    v63 = *(_DWORD *)(a1 + 4);
    v30 = a2->f32[0];
    v31 = a2->f32[1];
    v32 = a2[1].f32[0];
    v33 = a2[2].f32[0];
    v34 = a2[2].f32[1];
    v35 = a2[3].f32[0];
    v39 = a2[4].f32[0];
    v40 = a2[4].f32[1];
    v43 = a2[5].f32[0];
    v45 = a2[6].f32[0];
    v46 = a2[6].f32[1];
    v47 = a2[7].f32[0];
    v74 = *(_QWORD *)(a1 + 104);
    v36 = a2->f32[0] * a4;
    v37 = v31 * a4;
    v38 = v32 * a4;
    v56 = *(_DWORD *)(v74 + 36) & 0x7FFFFFFF;
  }
  v75 = *(_QWORD *)(v61 + 24) + 32 * v70;
  *(_DWORD *)(v61 + 32) = v71;
  *(float *)v75 = v64;
  *(float *)(v75 + 4) = v65;
  *(float *)(v75 + 8) = v66;
  *(float *)(v75 + 16) = v67;
  *(float *)(v75 + 20) = v68;
  *(float *)(v75 + 24) = v69;
  *(_DWORD *)(v75 + 28) = v63;
  *(_DWORD *)(v75 + 12) = v63;
  v76 = v45 + (float)((float)(v39 * a3) + (float)((float)(v33 * 0.0) - v36));
  v77 = v46 + (float)((float)(v40 * a3) + (float)((float)(v34 * 0.0) - v37));
  v78 = v47 + (float)((float)(v43 * a3) + (float)((float)(v35 * 0.0) - v38));
  v79 = v45 + (float)((float)(v39 * a3) + (float)(v36 + (float)(v33 * 0.0)));
  v80 = v46 + (float)((float)(v40 * a3) + (float)(v37 + (float)(v34 * 0.0)));
  v81 = v47 + (float)((float)(v43 * a3) + (float)(v38 + (float)(v35 * 0.0)));
  v82 = *(_DWORD *)(v74 + 32);
  v83 = v82 + 1;
  if (v82 + 1 <= v56)
  {
    v86 = v74;
  }
  else
  {
    if (v56)
      v84 = 2 * v56;
    else
      v84 = 2;
    if (v83 <= v84)
      v85 = v84;
    else
      v85 = v82 + 1;
    physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v74 + 24, v85);
    v29 = a4;
    v82 = *(_DWORD *)(v74 + 32);
    v63 = *(_DWORD *)(a1 + 4);
    v30 = a2->f32[0];
    v31 = a2->f32[1];
    v32 = a2[1].f32[0];
    v33 = a2[2].f32[0];
    v34 = a2[2].f32[1];
    v35 = a2[3].f32[0];
    v39 = a2[4].f32[0];
    v40 = a2[4].f32[1];
    v43 = a2[5].f32[0];
    v45 = a2[6].f32[0];
    v46 = a2[6].f32[1];
    v47 = a2[7].f32[0];
    v86 = *(_QWORD *)(a1 + 104);
    v56 = *(_DWORD *)(v86 + 36) & 0x7FFFFFFF;
  }
  v87 = -a3;
  v88 = *(_QWORD *)(v74 + 24) + 32 * v82;
  *(_DWORD *)(v74 + 32) = v83;
  *(float *)v88 = v76;
  *(float *)(v88 + 4) = v77;
  *(float *)(v88 + 8) = v78;
  *(float *)(v88 + 16) = v79;
  *(float *)(v88 + 20) = v80;
  *(float *)(v88 + 24) = v81;
  *(_DWORD *)(v88 + 28) = v63;
  *(_DWORD *)(v88 + 12) = v63;
  v89 = *(_DWORD *)(v86 + 32);
  v90 = v89 + 1;
  if (v89 + 1 > v56)
  {
    if (v56)
      v91 = 2 * v56;
    else
      v91 = 2;
    if (v90 <= v91)
      v92 = v91;
    else
      v92 = v89 + 1;
    v93 = v30;
    v112 = v43;
    v114 = v31;
    v94 = v33;
    v95 = v32;
    v96 = v34;
    v119 = v39;
    v97 = v35;
    v122 = v47;
    v98 = v45;
    v116 = v40;
    v99 = v46;
    physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v86 + 24, v92);
    v46 = v99;
    v40 = v116;
    v45 = v98;
    v47 = v122;
    v35 = v97;
    v39 = v119;
    v34 = v96;
    v43 = v112;
    v31 = v114;
    v32 = v95;
    v33 = v94;
    v30 = v93;
    v29 = a4;
    v89 = *(_DWORD *)(v86 + 32);
    v63 = *(_DWORD *)(a1 + 4);
  }
  v100 = *(_QWORD *)(v86 + 24) + 32 * v89;
  *(_DWORD *)(v86 + 32) = v90;
  *(float *)v100 = v45 + (float)((float)(v39 * v87) + (float)((float)(v33 * 0.0) - (float)(v30 * v29)));
  *(float *)(v100 + 4) = v46 + (float)((float)(v40 * v87) + (float)((float)(v34 * 0.0) - (float)(v31 * v29)));
  *(float *)(v100 + 8) = v47 + (float)((float)(v43 * v87) + (float)((float)(v35 * 0.0) - (float)(v32 * v29)));
  *(float *)(v100 + 16) = v45 + (float)((float)(v39 * v87) + (float)((float)(v33 * 0.0) + (float)(v30 * v29)));
  *(float *)(v100 + 20) = v46 + (float)((float)(v40 * v87) + (float)((float)(v34 * 0.0) + (float)(v31 * v29)));
  *(float *)(v100 + 24) = v47 + (float)((float)(v43 * v87) + (float)((float)(v35 * 0.0) + (float)(v32 * v29)));
  *(_DWORD *)(v100 + 28) = v63;
  *(_DWORD *)(v100 + 12) = v63;
  return a1;
}

uint64_t physx::Cm::visualizeJointFrames(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  float v13;
  float v14;
  float v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a4 != 0.0)
  {
    v18 = v7;
    v19 = v6;
    v20 = v4;
    v21 = v5;
    v10 = (_DWORD *)physx::Cm::RenderOutput::operator<<(result, a2);
    v13 = a4 * 1.5;
    v14 = a4 * 1.5;
    v15 = a4 * 1.5;
    v16 = 0x8800880088880000;
    v17 = -2013265784;
    v11 = physx::Cm::operator<<(v10, (uint64_t)&v13);
    v12 = (_DWORD *)physx::Cm::RenderOutput::operator<<(v11, a3);
    v13 = a4;
    v14 = a4;
    v15 = a4;
    v16 = 0xFF00FF00FFFF0000;
    v17 = -16776961;
    return physx::Cm::operator<<(v12, (uint64_t)&v13);
  }
  return result;
}

uint64_t physx::Cm::visualizeLinearLimit(uint64_t result, uint64_t a2, float a3, float a4, double a5, double a6, double a7, float32x4_t _Q5, uint64_t a9, int a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v18;
  float v19;
  float v26;
  float v27;
  float v28;
  float32_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int v33;
  _DWORD *v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  _DWORD *v39;
  __int128 v40;
  uint64_t v41;
  float v42;
  float32x4_t v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if (a3 != 0.0)
  {
    v47 = v15;
    v48 = v14;
    v49 = v13;
    v50 = v12;
    v51 = v10;
    v52 = v11;
    v19 = *(float *)(a2 + 8);
    v18 = *(float *)(a2 + 12);
    _S3 = v18 + v18;
    _Q5.i64[0] = *(_QWORD *)a2;
    __asm { FMLS            S6, S3, V5.S[1] }
    v26 = *(float *)(a2 + 16)
        + (float)(vmlas_n_f32((float)(v18 * (float)(v18 + v18)) + -1.0, _Q5.f32[0] + _Q5.f32[0], _Q5.f32[0]) * a4);
    v27 = *(float *)(a2 + 20)
        + (float)((float)(vmuls_lane_f32(_Q5.f32[0] + _Q5.f32[0], *(float32x2_t *)_Q5.f32, 1)
                        + (float)(v19 * (float)(v18 + v18)))
                * a4);
    v28 = (float)(_S6 * a4) + *(float *)(a2 + 24);
    v29 = -v19;
    v30 = _Q5;
    v30.f32[2] = v19;
    v31 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v30, (int8x16_t)v30, 0xCuLL), (int8x16_t)v30, 8uLL);
    v30.i32[3] = *(_QWORD *)a2;
    v32 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v31, (int8x16_t)v31, 0xCuLL), (int8x16_t)v31, 8uLL);
    v31.f32[3] = -COERCE_FLOAT(HIDWORD(*(_QWORD *)a2));
    v32.f32[3] = v29;
    v43 = vmlaq_f32(vmlaq_f32(vmlaq_n_f32(vmulq_f32(v30, (float32x4_t)xmmword_2261A9330), (float32x4_t)xmmword_2261A9340, v18), (float32x4_t)xmmword_2261A9350, v31), (float32x4_t)xmmword_22610BB60, v32);
    v44 = v26;
    v45 = v27;
    v46 = v28;
    if (a10)
      v33 = -65536;
    else
      v33 = -8355712;
    *(_DWORD *)(result + 4) = v33;
    v40 = xmmword_2260E5D70;
    v41 = 0;
    v42 = 0.0;
    v34 = (_DWORD *)physx::Cm::RenderOutput::operator<<(result, (uint64_t)&v40);
    v36 = *(float *)(a2 + 20);
    v37 = *(float *)(a2 + 24);
    LODWORD(v40) = *(_DWORD *)(a2 + 16);
    v35 = *(float *)&v40;
    *(_QWORD *)((char *)&v40 + 4) = __PAIR64__(LODWORD(v37), LODWORD(v36));
    *((float *)&v40 + 3) = v35 + (float)(v26 - v35);
    *(float *)&v41 = v36 + (float)(v27 - v36);
    *((float *)&v41 + 1) = v37 + (float)(v28 - v37);
    v42 = sqrtf((float)((float)((float)(v27 - v36) * (float)(v27 - v36)) + (float)((float)(v26 - v35) * (float)(v26 - v35)))+ (float)((float)(v28 - v37) * (float)(v28 - v37)))* 0.15;
    v38 = physx::Cm::operator<<(v34, (float *)&v40);
    v39 = (_DWORD *)physx::Cm::RenderOutput::operator<<(v38, (uint64_t)&v43);
    LODWORD(v40) = 20;
    *((float *)&v40 + 1) = a3 * 0.3;
    return physx::Cm::operator<<(v39, (uint64_t)&v40);
  }
  return result;
}

uint64_t physx::Cm::visualizeAngularLimit(uint64_t result, uint64_t a2, int a3, float a4, float a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  __float2 v21;
  uint64_t v22;
  __float2 v23;
  int v24;
  float v25;
  __float2 v26;
  float v27[3];
  float v28[3];
  uint64_t v29;
  int v30;
  float v31[3];
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (a4 != 0.0)
  {
    v34 = v13;
    v35 = v12;
    v36 = v11;
    v37 = v10;
    v38 = v9;
    v39 = v8;
    v40 = v6;
    v41 = v7;
    v18 = (_DWORD *)result;
    v19 = (_DWORD *)physx::Cm::RenderOutput::operator<<(result, a2);
    if (a3)
      v20 = -65536;
    else
      v20 = -8355712;
    *v19 = 1;
    v19[1] = v20;
    v19[8] = 0;
    v32 = 0;
    v33 = 0;
    physx::Cm::RenderOutput::operator<<((uint64_t)v19, (float *)&v32);
    v21 = __sincosf_stret(a5);
    v31[0] = a4 * 0.0;
    v31[1] = v21.__cosval * a4;
    v31[2] = v21.__sinval * a4;
    v22 = physx::Cm::RenderOutput::operator<<((uint64_t)v18, v31);
    v29 = 0;
    v30 = 0;
    physx::Cm::RenderOutput::operator<<(v22, (float *)&v29);
    v23 = __sincosf_stret(a6);
    v28[0] = a4 * 0.0;
    v28[1] = v23.__cosval * a4;
    v28[2] = v23.__sinval * a4;
    physx::Cm::RenderOutput::operator<<((uint64_t)v18, v28);
    *v18 = 2;
    v18[8] = 0;
    v24 = 21;
    v25 = (float)(a6 - a5) / 20.0;
    do
    {
      v26 = __sincosf_stret(a5);
      v27[0] = a4 * 0.0;
      v27[1] = v26.__cosval * a4;
      v27[2] = v26.__sinval * a4;
      result = physx::Cm::RenderOutput::operator<<((uint64_t)v18, v27);
      a5 = v25 + a5;
      --v24;
    }
    while (v24);
  }
  return result;
}

uint64_t physx::Cm::visualizeLimitCone(uint64_t result, uint64_t a2, int a3, float a4, float a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v20;
  _DWORD *v21;
  unsigned int v22;
  int v23;
  float v24;
  float v25;
  float v26;
  __float2 v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46[3];
  uint64_t v47;
  int v48;
  float v49[3];
  float v50[3];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (a4 != 0.0)
  {
    v51 = v15;
    v52 = v14;
    v53 = v13;
    v54 = v12;
    v55 = v11;
    v56 = v10;
    v57 = v9;
    v58 = v8;
    v59 = v6;
    v60 = v7;
    v20 = result;
    v21 = (_DWORD *)physx::Cm::RenderOutput::operator<<(result, a2);
    v22 = 0;
    if (a3)
      v23 = -65536;
    else
      v23 = -8355712;
    *v21 = 1;
    v21[1] = v23;
    v21[8] = 0;
    v45 = -a6;
    v24 = 0.0;
    v25 = 0.0;
    v26 = 0.0;
    do
    {
      v27 = __sincosf_stret((float)v22 * 0.19635);
      v28 = v27.__sinval * v45;
      v29 = v27.__cosval * a5;
      v30 = (float)(v28 * v28) + (float)(v29 * v29);
      v31 = 1.0 - v30;
      v32 = 1.0 / (float)(v30 + 1.0);
      v33 = v32 * 0.0;
      v34 = (float)(v28 + v28) * v32;
      v35 = (float)(v29 + v29) * v32;
      v36 = v31 * v32;
      v37 = (float)(v36 * v36) + -0.5;
      v38 = (float)((float)(v34 * 0.0) + (float)(v33 * 2.0)) + (float)(v35 * 0.0);
      v39 = (float)((float)((float)(v36 * (float)((float)(v35 * -0.0) + (float)(v34 * 0.0))) + (float)(v37 * 2.0))
                  + (float)(v33 * v38))
          * a4;
      v40 = (float)((float)((float)(v36 * (float)((float)(v33 * -0.0) + (float)(v35 * 2.0))) + (float)(v37 * 0.0))
                  + (float)(v34 * v38))
          * a4;
      v41 = (float)((float)((float)(v36 * (float)((float)(v34 * -2.0) + (float)(v33 * 0.0))) + (float)(v37 * 0.0))
                  + (float)(v35 * v38))
          * a4;
      v50[0] = v26;
      v50[1] = v25;
      v50[2] = v24;
      v42 = physx::Cm::RenderOutput::operator<<(v20, v50);
      v49[0] = v39;
      v49[1] = v40;
      v49[2] = v41;
      v43 = physx::Cm::RenderOutput::operator<<(v42, v49);
      v47 = 0;
      v48 = 0;
      v44 = physx::Cm::RenderOutput::operator<<(v43, (float *)&v47);
      v46[0] = v39;
      v46[1] = v40;
      v46[2] = v41;
      result = physx::Cm::RenderOutput::operator<<(v44, v46);
      ++v22;
      v24 = v41;
      v25 = v40;
      v26 = v39;
    }
    while (v22 != 33);
  }
  return result;
}

uint64_t physx::Cm::visualizeDoubleCone(uint64_t result, uint64_t a2, int a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  float v21;
  unsigned int v22;
  float v23;
  __float2 v24;
  unsigned int v25;
  float v26;
  __float2 v27;
  unsigned int v28;
  __float2 v29;
  uint64_t v30;
  uint64_t v31;
  float v32[3];
  uint64_t v33;
  int v34;
  float v35[3];
  uint64_t v36;
  int v37;
  float v38[3];
  float v39[3];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (a4 != 0.0)
  {
    v40 = v14;
    v41 = v13;
    v42 = v12;
    v43 = v11;
    v44 = v10;
    v45 = v9;
    v46 = v8;
    v47 = v7;
    v48 = v5;
    v49 = v6;
    v18 = (_DWORD *)result;
    v19 = physx::Cm::RenderOutput::operator<<(result, a2);
    if (a3)
      v20 = -65536;
    else
      v20 = -8355712;
    *(_DWORD *)(v19 + 4) = v20;
    v21 = tanf(a5);
    v22 = 0;
    *v18 = 2;
    v18[8] = 0;
    v23 = v21 * a4;
    do
    {
      v24 = __sincosf_stret((float)v22 * 0.19635);
      v39[0] = v21 * a4;
      v39[1] = v24.__cosval * a4;
      v39[2] = v24.__sinval * a4;
      physx::Cm::RenderOutput::operator<<((uint64_t)v18, v39);
      ++v22;
    }
    while (v22 != 33);
    v25 = 0;
    *v18 = 2;
    v18[8] = 0;
    v26 = -(float)(v21 * a4);
    do
    {
      v27 = __sincosf_stret((float)v25 * 0.19635);
      v38[0] = v26;
      v38[1] = v27.__cosval * a4;
      v38[2] = v27.__sinval * a4;
      physx::Cm::RenderOutput::operator<<((uint64_t)v18, v38);
      ++v25;
    }
    while (v25 != 33);
    v28 = 0;
    *v18 = 1;
    v18[8] = 0;
    do
    {
      v36 = 0;
      v37 = 0;
      physx::Cm::RenderOutput::operator<<((uint64_t)v18, (float *)&v36);
      v29 = __sincosf_stret((float)v28 * 0.19635);
      v35[0] = v26;
      v35[1] = v29.__cosval * a4;
      v35[2] = v29.__sinval * a4;
      v30 = physx::Cm::RenderOutput::operator<<((uint64_t)v18, v35);
      v33 = 0;
      v34 = 0;
      v31 = physx::Cm::RenderOutput::operator<<(v30, (float *)&v33);
      v32[0] = v23;
      v32[1] = v29.__cosval * a4;
      v32[2] = v29.__sinval * a4;
      result = physx::Cm::RenderOutput::operator<<(v31, v32);
      ++v28;
    }
    while (v28 != 32);
  }
  return result;
}

BOOL physx::Gu::contactCapsuleMesh(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  float v49;
  double v50;
  float v51;
  float v52;
  __n128 v53;
  float v54;
  float v55;
  double v56;
  uint64_t (**v58)();
  int v59;
  float v60;
  _DWORD v61[28];
  uint64_t v62;
  _BYTE *v63;
  _BYTE v64[76];
  float v65[9];
  float v66;
  float v67;
  uint64_t (**v68)();
  float v69;
  float v70;
  float v71;
  float v72;

  v12 = *a3;
  v13 = a3[1];
  v15 = a3[2];
  v14 = a3[3];
  v16 = v14 + v14;
  v17 = (float)((float)(v14 * (float)(v14 + v14)) + -1.0) + (float)(v12 * (float)(v12 + v12));
  v18 = (float)((float)(v12 + v12) * v13) + (float)(v15 * v16);
  v19 = (float)((float)(v12 + v12) * v15) - (float)(v13 * v16);
  v20 = *(float *)(a1 + 4);
  v21 = *(float *)(a1 + 8);
  v22 = a4[4] - a3[4];
  v23 = a4[5] - a3[5];
  v24 = a4[6] - a3[6];
  v25 = (float)((float)(v17 * v21) - v22) + (float)((float)(v17 * v21) - v22);
  v26 = (float)((float)(v21 * v18) - v23) + (float)((float)(v21 * v18) - v23);
  v27 = (float)((float)(v19 * v21) - v24) + (float)((float)(v19 * v21) - v24);
  v29 = a4[2];
  v28 = a4[3];
  v30 = (float)(v28 * v28) + -0.5;
  v31 = a4[1];
  v32 = (float)(v26 * v31) + (float)(*a4 * v25);
  v33 = (float)(v25 * v30) - (float)((float)((float)(v31 * v27) - (float)(v29 * v26)) * v28);
  v34 = (float)(v26 * v30) - (float)((float)((float)(v29 * v25) - (float)(*a4 * v27)) * v28);
  v35 = (float)(*a4 * v26) - (float)(v31 * v25);
  v36 = *a5;
  v37 = v32 + (float)(v29 * v27);
  v38 = (float)((float)(v27 * v30) - (float)(v35 * v28)) + (float)(v29 * v37);
  v39 = -(float)(v21 * v18);
  v40 = -(float)(v19 * v21);
  v41 = (float)((float)-(float)(v17 * v21) - v22) + (float)((float)-(float)(v17 * v21) - v22);
  v42 = (float)(v39 - v23) + (float)(v39 - v23);
  v43 = (float)(v40 - v24) + (float)(v40 - v24);
  v44 = (float)((float)(v42 * v31) + (float)(*a4 * v41)) + (float)(v29 * v43);
  v45 = (float)((float)(v41 * v30) - (float)((float)((float)(v31 * v43) - (float)(v29 * v42)) * v28))
      + (float)(*a4 * v44);
  v46 = (float)((float)(v42 * v30) - (float)((float)((float)(v29 * v41) - (float)(*a4 * v43)) * v28))
      + (float)(v31 * v44);
  v47 = -(float)((float)((float)(*a4 * v42) - (float)(v31 * v41)) * v28);
  *(float *)&v68 = v33 + (float)(*a4 * v37);
  *((float *)&v68 + 1) = v34 + (float)(v31 * v37);
  v69 = v38;
  v70 = v45;
  v71 = v46;
  v72 = (float)(v47 + (float)(v43 * v30)) + (float)(v29 * v44);
  v48 = *(_QWORD *)(a2 + 48);
  v58 = v68;
  v59 = LODWORD(v38);
  v60 = v45;
  v49 = v20 + v36;
  *(float *)v61 = v46;
  *(float *)&v61[1] = v72;
  *(float *)&v61[2] = v20 + v36;
  physx::Gu::Box::create((physx::Gu::Box *)v65, (const Capsule *)&v58);
  if (*(float *)(a2 + 4) == 1.0 && *(float *)(a2 + 8) == 1.0 && *(float *)(a2 + 12) == 1.0)
  {
    v51 = *a5;
    v52 = *(float *)(a1 + 4);
    v59 = 2;
    v58 = &off_24ED90D98;
    *(float *)&v50 = v49;
    v62 = v48;
  }
  else
  {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v64, (float *)(a2 + 4), (float *)(a2 + 16));
    v54 = *a5;
    v55 = *(float *)(a1 + 4);
    v59 = 2;
    *(float *)&v56 = v49;
    v62 = v48;
    v63 = v64;
    v58 = &off_24ED90DE8;
    v53.n128_f32[0] = physx::Cm::FastVertex2ShapeScaling::transformQueryBounds((uint64_t)v64, &v66, &v67, v65);
  }
  ((void (*)(uint64_t, float *, uint64_t (***)(), uint64_t, uint64_t, __n128))*(&physx::Gu::gMidphaseBoxCBOverlapTable
                                                                                                + *(unsigned __int16 *)(v48 + 8)
                                                                                                - 3))(v48, v65, &v58, 1, 1, v53);
  return *(_DWORD *)(a7 + 4096) != 0;
}

float physx::Cm::FastVertex2ShapeScaling::transformQueryBounds(uint64_t a1, float *a2, float *a3, float *a4)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float result;
  uint64_t v24;
  float v25;

  v5 = *a3 * *a4;
  v6 = *a3 * a4[1];
  v7 = a4[3];
  v8 = *a3 * a4[2];
  v9 = (float)((float)(v5 * *(float *)(a1 + 44)) + (float)(v6 * *(float *)(a1 + 56)))
     + (float)(v8 * *(float *)(a1 + 68));
  *(float32x2_t *)a4 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a1 + 36), v5), vmul_n_f32(*(float32x2_t *)(a1 + 48), v6)), vmul_n_f32(*(float32x2_t *)(a1 + 60), v8));
  a4[2] = v9;
  v10 = a3[1];
  v11 = v10 * v7;
  v12 = v10 * a4[4];
  v13 = v10 * a4[5];
  v14 = (float)((float)(v11 * *(float *)(a1 + 44)) + (float)(v12 * *(float *)(a1 + 56)))
      + (float)(v13 * *(float *)(a1 + 68));
  *(float32x2_t *)(a4 + 3) = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a1 + 36), v11), vmul_n_f32(*(float32x2_t *)(a1 + 48), v12)), vmul_n_f32(*(float32x2_t *)(a1 + 60), v13));
  a4[5] = v14;
  v15 = a3[2];
  v16 = v15 * a4[6];
  v17 = v15 * a4[7];
  v18 = v15 * a4[8];
  v19 = (float)((float)(v16 * *(float *)(a1 + 44)) + (float)(v17 * *(float *)(a1 + 56)))
      + (float)(v18 * *(float *)(a1 + 68));
  *((float32x2_t *)a4 + 3) = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a1 + 36), v16), vmul_n_f32(*(float32x2_t *)(a1 + 48), v17)), vmul_n_f32(*(float32x2_t *)(a1 + 60), v18));
  a4[8] = v19;
  v20 = a2[1];
  v21 = a2[2];
  v22 = (float)((float)(*a2 * *(float *)(a1 + 44)) + (float)(v20 * *(float *)(a1 + 56)))
      + (float)(v21 * *(float *)(a1 + 68));
  *(float32x2_t *)a2 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a1 + 36), *a2), vmul_n_f32(*(float32x2_t *)(a1 + 48), v20)), vmul_n_f32(*(float32x2_t *)(a1 + 60), v21));
  a2[2] = v22;
  physx::shdfnd::optimizeBoundingBox(a4, (float *)&v24);
  *(_QWORD *)a3 = v24;
  result = v25;
  a3[2] = v25;
  return result;
}

BOOL physx::Gu::contactCapsuleHeightfield(uint64_t a1, float32x2_t *a2, float *a3, float *a4, float *a5, double a6, uint64_t a7, uint64_t a8)
{
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v105[6];
  void (**v106)(_anonymous_namespace_::CapsuleHeightfieldContactGenerationCallback *__hidden);
  _QWORD v107[16];
  int32x2_t v108;
  float v109;
  float32x2_t v110;
  float32x2_t *v111;
  _DWORD v112[6];

  v12 = *a5;
  v13 = *(float *)(a1 + 4);
  LODWORD(a6) = *(_DWORD *)(a1 + 8);
  v14 = v13 + *a5;
  v15 = *a3;
  v16 = a3[1];
  v17 = v15 + v15;
  v19 = a3[2];
  v18 = a3[3];
  v20 = v18 + v18;
  v21 = (float)((float)(v18 * (float)(v18 + v18)) + -1.0) + (float)(v15 * (float)(v15 + v15));
  v22 = (float)(v17 * v16) + (float)(v19 * (float)(v18 + v18));
  v23 = (float)(v17 * v19) - (float)(v16 * v20);
  v24 = a4[4] - a3[4];
  v25 = a4[5] - a3[5];
  v26 = a4[6] - a3[6];
  v27 = (float)((float)(v21 * *(float *)&a6) - v24) + (float)((float)(v21 * *(float *)&a6) - v24);
  v28 = (float)((float)(*(float *)&a6 * v22) - v25) + (float)((float)(*(float *)&a6 * v22) - v25);
  v29 = (float)((float)(v23 * *(float *)&a6) - v26) + (float)((float)(v23 * *(float *)&a6) - v26);
  v31 = a4[2];
  v30 = a4[3];
  v32 = (float)(v30 * v30) + -0.5;
  v33 = a4[1];
  v34 = (float)((float)(v28 * v33) + (float)(*a4 * v27)) + (float)(v31 * v29);
  v35 = (float)((float)(v27 * v32) - (float)((float)((float)(v33 * v29) - (float)(v31 * v28)) * v30))
      + (float)(*a4 * v34);
  v36 = (float)((float)(v28 * v32) - (float)((float)((float)(v31 * v27) - (float)(*a4 * v29)) * v30))
      + (float)(v33 * v34);
  v37 = (float)((float)(v29 * v32) - (float)((float)((float)(*a4 * v28) - (float)(v33 * v27)) * v30))
      + (float)(v31 * v34);
  v38 = -(float)(v21 * *(float *)&a6);
  v39 = -(float)(*(float *)&a6 * v22);
  *(float *)&a6 = -(float)(v23 * *(float *)&a6);
  v40 = (float)(v38 - v24) + (float)(v38 - v24);
  v41 = (float)(v39 - v25) + (float)(v39 - v25);
  *(float *)&a6 = (float)(*(float *)&a6 - v26) + (float)(*(float *)&a6 - v26);
  v42 = (float)((float)(v41 * v33) + (float)(*a4 * v40)) + (float)(v31 * *(float *)&a6);
  v43 = (float)((float)(v40 * v32) - (float)((float)((float)(v33 * *(float *)&a6) - (float)(v31 * v41)) * v30))
      + (float)(*a4 * v42);
  v44 = (float)((float)(v41 * v32) - (float)((float)((float)(v31 * v40) - (float)(*a4 * *(float *)&a6)) * v30))
      + (float)(v33 * v42);
  *(float *)&a6 = (float)((float)(*(float *)&a6 * v32) - (float)((float)((float)(*a4 * v41) - (float)(v33 * v40)) * v30))
                + (float)(v31 * v42);
  *(float *)v112 = v35;
  *(float *)&v112[1] = v36;
  *(float *)&v112[2] = v37;
  *(float *)&v112[3] = v43;
  *(float *)&v112[4] = v44;
  v112[5] = LODWORD(a6);
  v110 = a2[1];
  v111 = a2;
  LODWORD(a6) = a2[3].i32[0];
  __asm { FMOV            V4.2S, #1.0 }
  v108 = vrev64_s32((int32x2_t)vdiv_f32(_D4, a2[2]));
  v109 = 1.0 / *(float *)&a6;
  v106 = &off_24ED90E28;
  *(float *)&a6 = v14;
  v107[14] = &v108;
  v107[15] = a4;
  v50 = v14 + *(float *)(a1 + 8);
  v51 = a4[1];
  v52 = a4[2];
  v53 = a4[3];
  v54 = a3[4] - a4[4];
  v55 = a3[5] - a4[5];
  v56 = a3[6] - a4[6];
  v57 = v54 + v54;
  v58 = v55 + v55;
  v59 = v56 + v56;
  v60 = (float)(v53 * v53) + -0.5;
  v61 = (float)((float)-(float)(v51 * v58) - (float)(*a4 * v57)) - (float)(v52 * v59);
  v62 = (float)((float)(v53 * (float)((float)(v52 * v58) - (float)(v51 * v59))) + (float)(v57 * v60))
      - (float)(*a4 * v61);
  v63 = (float)((float)(v53 * (float)((float)(*a4 * v59) - (float)(v52 * v57))) + (float)(v58 * v60))
      - (float)(v51 * v61);
  v64 = (float)((float)(v53 * (float)((float)(v51 * v57) - (float)(*a4 * v58))) + (float)(v59 * v60))
      - (float)(v52 * v61);
  v66 = a3[2];
  v65 = a3[3];
  v67 = a3[1];
  v68 = (float)((float)((float)(v53 * *a3) - (float)(*a4 * v65)) - (float)(v51 * v66)) + (float)(v67 * v52);
  v69 = (float)((float)((float)(v53 * v67) - (float)(v51 * v65)) - (float)(v52 * *a3)) + (float)(v66 * *a4);
  v70 = (float)((float)((float)(v53 * v66) - (float)(v52 * v65)) - (float)(*a4 * v67)) + (float)(*a3 * v51);
  v71 = (float)((float)((float)(*a4 * *a3) + (float)(v53 * v65)) + (float)(v51 * v67)) + (float)(v52 * v66);
  v72 = (float)((float)(v50 - v50) * 0.5) + (float)((float)(v50 - v50) * 0.5);
  v73 = (float)((float)(v14 - v14) * 0.5) + (float)((float)(v14 - v14) * 0.5);
  v74 = (float)(v71 * v71) + -0.5;
  v75 = (float)((float)(v73 * v69) + (float)(v68 * v72)) + (float)(v70 * v73);
  v76 = (float)((float)(v71 * (float)((float)(v69 * v73) - (float)(v70 * v73))) + (float)(v72 * v74))
      + (float)(v68 * v75);
  v77 = (float)((float)(v71 * (float)((float)(v70 * v72) - (float)(v68 * v73))) + (float)(v73 * v74))
      + (float)(v69 * v75);
  v78 = (float)((float)(v71 * (float)((float)(v68 * v73) - (float)(v69 * v72))) + (float)(v73 * v74))
      + (float)(v70 * v75);
  v79 = v62 + v76;
  v80 = v63 + v77;
  v81 = v64 + v78;
  v82 = v69 + v69;
  v83 = v70 + v70;
  v84 = v69 * (float)(v69 + v69);
  v85 = v70 * (float)(v70 + v70);
  v86 = (float)(v68 + v68) * v69;
  v87 = v70 * (float)(v68 + v68);
  v88 = v71 * (float)(v68 + v68);
  v89 = v70 * v82;
  v90 = v71 * v82;
  v91 = v71 * v83;
  v92 = (float)(1.0 - v84) - v85;
  v93 = 1.0 - (float)(v68 * (float)(v68 + v68));
  v94 = v93 - v85;
  v95 = v93 - v84;
  v96 = (float)(v50 + v50) * 0.5;
  v97 = (float)(v14 + v14) * 0.5;
  v98 = v96 * (float)(v86 + v91);
  v99 = v97 * (float)(v86 - v91);
  v100 = v97 * (float)(v88 + v89);
  v101 = fabsf(v97 * (float)(v87 + v90)) + (float)(fabsf(v99) + fabsf(v96 * v92));
  v102 = fabsf(v97 * (float)(v89 - v88)) + (float)(fabsf(v98) + fabsf(v97 * v94));
  v103 = fabsf(v97 * v95) + (float)(fabsf(v96 * (float)(v87 - v90)) + fabsf(v100));
  v105[0] = v79 - v101;
  v105[1] = v80 - v102;
  v105[2] = v81 - v103;
  v105[3] = v79 + v101;
  v105[4] = v80 + v102;
  v105[5] = v81 + v103;
  physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v108, a4, v105, 0, (uint64_t)&v106);
  return *(_DWORD *)(a8 + 4096) != 0;
}

double physx::PxMat44::PxMat44(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  double result;

  v2 = *(float *)a2;
  v3 = *(float *)(a2 + 4);
  v4 = *(float *)(a2 + 8);
  v5 = *(float *)(a2 + 12);
  v6 = v3 + v3;
  v7 = v4 + v4;
  v8 = v3 * (float)(v3 + v3);
  v9 = v4 * (float)(v4 + v4);
  v10 = (float)(v2 + v2) * v3;
  v11 = (float)(v2 + v2) * v4;
  v12 = (float)(v2 + v2) * v5;
  v13 = v6 * v4;
  v14 = v6 * v5;
  v15 = v7 * v5;
  v16 = 1.0 - (float)(v2 * (float)(v2 + v2));
  v17 = v13 + v12;
  v18 = v13 - v12;
  v19 = *(_DWORD *)(a2 + 24);
  *(float *)a1 = (float)(1.0 - v8) - v9;
  *(float *)(a1 + 4) = v10 + v15;
  *(float *)(a1 + 8) = v11 - v14;
  *(_DWORD *)(a1 + 12) = 0;
  *(float *)(a1 + 16) = v10 - v15;
  *(float *)(a1 + 20) = v16 - v9;
  *(float *)(a1 + 24) = v17;
  *(_DWORD *)(a1 + 28) = 0;
  *(float *)(a1 + 32) = v11 + v14;
  *(float *)(a1 + 36) = v18;
  *(float *)(a1 + 40) = v16 - v8;
  *(_DWORD *)(a1 + 44) = 0;
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 48) = result;
  *(_DWORD *)(a1 + 56) = v19;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return result;
}

float `anonymous namespace'::CapsuleMeshContactGeneration::CapsuleMeshContactGeneration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, float a6, float a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float result;

  *(_QWORD *)a1 = a2;
  v7 = *(float *)a3;
  v8 = *(float *)(a3 + 4);
  v9 = *(float *)(a3 + 8);
  v10 = *(float *)(a3 + 12);
  v11 = v8 + v8;
  v12 = v9 + v9;
  v13 = v8 * (float)(v8 + v8);
  v14 = v9 * (float)(v9 + v9);
  v15 = (float)(v7 + v7) * v8;
  v16 = (float)(v7 + v7) * v9;
  v17 = (float)(v7 + v7) * v10;
  v18 = v11 * v9;
  v19 = v11 * v10;
  v20 = v12 * v10;
  *(float *)(a1 + 8) = (float)(1.0 - v13) - v14;
  *(float *)(a1 + 12) = v15 + v20;
  v21 = 1.0 - (float)(v7 * (float)(v7 + v7));
  *(float *)(a1 + 16) = v16 - v19;
  *(float *)(a1 + 20) = v15 - v20;
  *(float *)(a1 + 24) = v21 - v14;
  *(float *)(a1 + 28) = v18 + v17;
  *(float *)(a1 + 32) = v16 + v19;
  *(float *)(a1 + 36) = v18 - v17;
  *(float *)(a1 + 40) = v21 - v13;
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a3 + 16);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 56) = a4;
  *(_DWORD *)(a1 + 96) = LODWORD(a5);
  *(float *)(a1 + 100) = a6;
  *(float *)(a1 + 104) = a7;
  v22 = (float)(*(float *)(a4 + 8) + *(float *)(a4 + 20)) * 0.5;
  *(float32x2_t *)(a1 + 64) = vmul_f32(vadd_f32(*(float32x2_t *)a4, *(float32x2_t *)(a4 + 12)), (float32x2_t)0x3F0000003F000000);
  *(float *)(a1 + 72) = v22;
  v23 = (float)(*(float *)(a4 + 8) - *(float *)(a4 + 20)) * 0.5;
  *(float32x2_t *)(a1 + 80) = vadd_f32(vabs_f32(vmul_f32(vsub_f32(*(float32x2_t *)a4, *(float32x2_t *)(a4 + 12)), (float32x2_t)0x3F0000003F000000)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0));
  result = fabsf(v23) + *(float *)&a5;
  *(float *)(a1 + 88) = result;
  return result;
}

uint64_t `anonymous namespace'::CapsuleMeshContactGenerationCallback_NoScale::processHit(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t *a5)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  int v14;

  v10 = *a3;
  *(_QWORD *)&v5 = *(_QWORD *)(a3 + 1);
  *((_QWORD *)&v5 + 1) = *(_QWORD *)a4;
  v11 = v5;
  v12 = *(_DWORD *)(a4 + 8);
  v13 = *a5;
  v14 = *((_DWORD *)a5 + 2);
  v6 = *(unsigned int *)(a2 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 80);
  if (v7)
    v8 = *(unsigned __int8 *)(v7 + v6);
  else
    v8 = 56;
  return 1;
}

void `anonymous namespace'::CapsuleMeshContactGenerationCallback_NoScale::~CapsuleMeshContactGenerationCallback_NoScale(_anonymous_namespace_::CapsuleMeshContactGenerationCallback_NoScale *this)
{
  JUMPOUT(0x2276933B8);
}

void `anonymous namespace'::CapsuleMeshContactGeneration::processTriangle(uint64_t a1, __int32 a2, uint64_t a3, physx::Gu *a4)
{
  float v8;
  float v9;
  float32x2_t v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float *v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float *v65;
  uint64_t v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  _QWORD *v83;
  uint64_t v84;
  float v85;
  float v86;
  float v87;
  float v88;
  uint64_t v89;
  float *v90;
  uint64_t v91;
  float v92;
  float32x2_t v93;
  float v94;
  float v95;
  float v96;
  float32_t v97;
  float v98;
  float32x2_t *v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  uint64_t v104;
  uint64_t v105;
  float v106;
  float v107;
  float *v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float *v113;
  float v114;
  float v115;
  float v116;
  float v117;
  uint64_t v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  uint64_t v126;
  float v127;
  float *v128;
  uint64_t v129;
  float v130;
  float32x2_t v131;
  float v132;
  float v133;
  float v134;
  float32_t v135;
  float32_t v136;
  float32x2_t v137;
  float v138;
  float v139;
  float32_t v140;
  float32x2_t *v141;
  float32x2_t v142;
  float32x2_t v143;
  float32x2_t v144;
  float32x2_t v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166[3];
  float32x2_t v167;
  float v168;
  float32x2_t v169;
  float v170;
  float v171;
  uint64_t v172;
  unint64_t v173;
  float v174;
  float32x2_t v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  unint64_t v181;
  float v182;

  if (physx::Gu::intersectTriangleBox_Unsafe((float32x4_t *)(a1 + 64), (float32x4_t *)(a1 + 80), (float32x4_t *)a3, (float32x4_t *)(a3 + 12), (float32x4_t *)(a3 + 24)))
  {
    v172 = 0;
    v171 = 0.0;
    v8 = *(float *)(a3 + 8);
    v9 = *(float *)(a3 + 20) - v8;
    v10 = *(float32x2_t *)a3;
    v169 = vsub_f32(*(float32x2_t *)(a3 + 12), *(float32x2_t *)a3);
    v170 = v9;
    v11 = *(float *)(a3 + 32) - v8;
    v167 = vsub_f32(*(float32x2_t *)(a3 + 24), v10);
    v168 = v11;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(float *)(v12 + 20) - *(float *)(v12 + 8);
    v181 = (unint64_t)vsub_f32(*(float32x2_t *)(v12 + 12), *(float32x2_t *)v12);
    v182 = v13;
    physx::Gu::distanceSegmentTriangleSquared((float32x2_t *)v12, (float32x2_t *)&v181, (float32x2_t *)a3, &v169, &v167, (_DWORD *)&v172 + 1, &v172, &v171);
    v15 = *(float *)(a1 + 96);
    if (v14 < (float)(v15 * v15))
    {
      v16 = (float)(v169.f32[1] * v168) - (float)(v170 * v167.f32[1]);
      v17 = (float)(v170 * v167.f32[0]) - (float)(v169.f32[0] * v168);
      v18 = (float)(v169.f32[0] * v167.f32[1]) - (float)(v169.f32[1] * v167.f32[0]);
      v20 = *(float *)a3;
      v19 = *(float *)(a3 + 4);
      v164 = *(float *)(a3 + 8);
      if ((float)((float)((float)(v17 * *(float *)(a1 + 68)) + (float)(v16 * *(float *)(a1 + 64)))
                 + (float)(v18 * *(float *)(a1 + 72))) >= (float)((float)((float)(v17 * v19)
                                                                        + (float)(v16 * *(float *)a3))
                                                                + (float)(v18 * v164)))
      {
        if (v14 > 0.000001)
        {
          v22 = v171;
          v21 = *(float *)&v172;
          if (physx::Gu::selectNormal(a4, *(float *)&v172, v171))
          {
            v23 = (float)((float)(v17 * v17) + (float)(v16 * v16)) + (float)(v18 * v18);
            v24 = 0.0;
            v25 = 0.0;
            v26 = 0.0;
            if (v23 > 0.0)
            {
              v27 = 1.0 / sqrtf(v23);
              v24 = v16 * v27;
              v25 = v17 * v27;
              v26 = v18 * v27;
            }
            v173 = __PAIR64__(LODWORD(v25), LODWORD(v24));
            v174 = v26;
            v28 = *(float **)(a1 + 56);
            v29 = *v28;
            v30 = v28[1];
            v32 = v28[2];
            v31 = v28[3];
            v34 = v28[4];
            v33 = v28[5];
            v35 = v31 - *v28;
            v36 = v34 - v30;
            v37 = v33 - v32;
          }
          else
          {
            v109 = (float)(1.0 - v21) - v22;
            v110 = (float)((float)(v21 * *(float *)(a3 + 12)) + (float)(v109 * v20))
                 + (float)(v22 * *(float *)(a3 + 24));
            v111 = (float)((float)(v21 * *(float *)(a3 + 16)) + (float)(v109 * v19))
                 + (float)(v22 * *(float *)(a3 + 28));
            v112 = (float)((float)(v21 * *(float *)(a3 + 20)) + (float)(v109 * v164))
                 + (float)(v22 * *(float *)(a3 + 32));
            v113 = *(float **)(a1 + 56);
            v29 = *v113;
            v30 = v113[1];
            v32 = v113[2];
            v31 = v113[3];
            v35 = v31 - *v113;
            v34 = v113[4];
            v33 = v113[5];
            v36 = v34 - v30;
            v37 = v33 - v32;
            v114 = (float)(*v113 + (float)(*((float *)&v172 + 1) * v35)) - v110;
            v115 = (float)(v30 + (float)(*((float *)&v172 + 1) * (float)(v34 - v30))) - v111;
            v116 = (float)(v32 + (float)(*((float *)&v172 + 1) * (float)(v33 - v32))) - v112;
            v117 = sqrtf((float)((float)(v115 * v115) + (float)(v114 * v114)) + (float)(v116 * v116));
            if (v117 == 0.0)
              return;
            *(float *)&v173 = v114 * (float)(1.0 / v117);
            *((float *)&v173 + 1) = v115 * (float)(1.0 / v117);
            v174 = v116 * (float)(1.0 / v117);
          }
          v83 = (_QWORD *)(a1 + 8);
          v118 = *(_QWORD *)a1;
          v120 = *(float *)(a1 + 100);
          v119 = *(float *)(a1 + 104);
          v181 = __PAIR64__(LODWORD(v30), LODWORD(v29));
          v182 = v32;
          v178 = v31;
          v179 = v34;
          v180 = v33;
          v121 = sqrtf((float)((float)(v36 * v36) + (float)(v35 * v35)) + (float)(v37 * v37));
          if (v121 > 0.0)
          {
            v122 = 0.01 / v121;
            v123 = v35 * v122;
            v124 = v36 * v122;
            v125 = v37 * v122;
            *(float *)&v181 = v29 - v123;
            *((float *)&v181 + 1) = v30 - v124;
            v182 = v32 - v125;
            v178 = v31 + v123;
            v179 = v34 + v124;
            v180 = v33 + v125;
          }
          v126 = 0;
          v127 = v119 + v120;
          v128 = (float *)a3;
          do
          {
            v166[0] = 0.0;
            if (physx::Gu::intersectEdgeEdge(v128, (float *)(a3 + 12 * (((_BYTE)v126 + (v126 >> 1) + 1) & 3)), (float32x2_t *)&v173, (float *)&v181, &v178, v166, &v175)&& v166[0] < v127)
            {
              v129 = *(unsigned int *)(v118 + 4096);
              if (v129 <= 0x3F)
              {
                v130 = *(float *)(a1 + 16);
                v131 = v175;
                v132 = *(float *)(a1 + 28);
                v133 = v176;
                v134 = *(float *)(a1 + 40);
                v135 = *(float *)(a1 + 52)
                     + (float)((float)((float)(v175.f32[0] * v130) + (float)(v175.f32[1] * v132)) + (float)(v176 * v134));
                v136 = v166[0] - v119;
                v137 = (float32x2_t)v173;
                v138 = (float)(v130 * *(float *)&v173) + (float)(v132 * *((float *)&v173 + 1));
                v139 = v174;
                v140 = v138 + (float)(v134 * v174);
                *(_DWORD *)(v118 + 4096) = v129 + 1;
                v141 = (float32x2_t *)(v118 + (v129 << 6));
                v141[1].f32[0] = v140;
                v142 = *(float32x2_t *)(a1 + 8);
                v143 = *(float32x2_t *)(a1 + 20);
                v144 = *(float32x2_t *)(a1 + 32);
                v145 = *(float32x2_t *)(a1 + 44);
                v141->f32[0] = (float)((float)(v137.f32[0] * v142.f32[0]) + (float)(v137.f32[1] * v143.f32[0]))
                             + (float)(v139 * v144.f32[0]);
                v141->f32[1] = (float)(vmuls_lane_f32(v137.f32[0], v142, 1) + vmuls_lane_f32(v137.f32[1], v143, 1))
                             + vmuls_lane_f32(v139, v144, 1);
                v141[2] = vadd_f32(v145, vadd_f32(vadd_f32(vmul_n_f32(v142, v131.f32[0]), vmul_n_f32(v143, v131.f32[1])), vmul_n_f32(v144, v133)));
                v141[3].f32[0] = v135;
                v141[1].f32[1] = v136;
                v141[6].i32[1] = a2;
              }
            }
            ++v126;
            v128 += 3;
          }
          while (v126 != 3);
          v104 = *(_QWORD *)a1;
          v105 = *(_QWORD *)(a1 + 56);
          v107 = *(float *)(a1 + 100);
          v106 = *(float *)(a1 + 104);
          v108 = (float *)&v173;
          goto LABEL_56;
        }
        v38 = *(float **)(a1 + 56);
        v175.i32[0] = 2139095039;
        v40 = *(float *)(a3 + 12);
        v39 = *(float *)(a3 + 16);
        v41 = *(float *)(a3 + 24);
        v160 = *(float *)(a3 + 20);
        v42 = *(float *)(a3 + 28);
        v159 = *(float *)(a3 + 32);
        v43 = (float)((float)(v19 - v39) * (float)(v164 - v159)) - (float)((float)(v164 - v160) * (float)(v19 - v42));
        v44 = (float)((float)(v164 - v160) * (float)(v20 - v41)) - (float)((float)(v20 - v40) * (float)(v164 - v159));
        v45 = (float)((float)(v20 - v40) * (float)(v19 - v42)) - (float)((float)(v19 - v39) * (float)(v20 - v41));
        v46 = (float)((float)(v44 * v44) + (float)(v43 * v43)) + (float)(v45 * v45);
        v47 = 0.0;
        v48 = 0.0;
        v49 = 0.0;
        if (v46 > 0.0)
        {
          v50 = 1.0 / sqrtf(v46);
          v47 = v43 * v50;
          v48 = v44 * v50;
          v49 = v45 * v50;
        }
        v161 = v48;
        v162 = v47;
        v181 = __PAIR64__(LODWORD(v48), LODWORD(v47));
        v51 = v49;
        v182 = v49;
        v163 = v15;
        if (PxcTestAxis((float *)&v181, v38, (float *)a3, (float *)&v175, v15))
        {
          v154 = v42;
          v155 = v40;
          v156 = v39;
          v157 = v20;
          v158 = v19;
          v152 = v38[3];
          v149 = v38[1];
          v150 = *v38;
          v52 = v152 - *v38;
          v151 = v38[4];
          v53 = v151 - v149;
          v153 = v38[5];
          v148 = v38[2];
          v54 = v153 - v148;
          v55 = (float)((float)(v53 * v53) + (float)(v52 * v52)) + (float)(v54 * v54);
          v56 = 0.0;
          v57 = sqrtf(v55);
          v58 = 0.0;
          v59 = 0.0;
          if (v55 > 0.0)
          {
            v56 = v52 * (float)(1.0 / v57);
            v58 = v53 * (float)(1.0 / v57);
            v59 = v54 * (float)(1.0 / v57);
          }
          v147 = v57;
          v146 = v152 - *v38;
          v60 = 0;
          v165 = v175.f32[0];
          v61 = -v59;
          v62 = -v56;
          v63 = -v58;
          v64 = v51;
          do
          {
            if ((*(_DWORD *)&asc_2261A93DC[4 * v60] & a4) != 0)
            {
              v65 = (float *)(a3 + 12 * v60);
              v66 = v60 + 1;
              v67 = (float *)(a3 + 12 * (((_BYTE)v60 + 1 + (v60 >> 1)) & 3));
              v68 = *v65 - *v67;
              v69 = v65[1] - v67[1];
              v70 = v65[2] - v67[2];
              v71 = (float)(v69 * v61) + (float)(v58 * v70);
              v72 = (float)(v70 * v62) + (float)(v59 * v68);
              v73 = (float)(v68 * v63) + (float)(v56 * v69);
              if (fabsf(v71) > 0.000001 || fabsf(v72) > 0.000001 || fabsf(v73) > 0.000001)
              {
                v74 = (float)((float)(v72 * v72) + (float)(v71 * v71)) + (float)(v73 * v73);
                v75 = 0.0;
                v76 = 0.0;
                v77 = 0.0;
                if (v74 > 0.0)
                {
                  v78 = 1.0 / sqrtf(v74);
                  v75 = v71 * v78;
                  v76 = v72 * v78;
                  v77 = v73 * v78;
                }
                v178 = v75;
                v179 = v76;
                v180 = v77;
                LODWORD(v173) = 0;
                if (!PxcTestAxis(&v178, v38, (float *)a3, (float *)&v173, v163))
                  return;
                if (*(float *)&v173 < v165)
                {
                  v64 = v77;
                  v161 = v76;
                  v162 = v75;
                  v165 = *(float *)&v173;
                }
                v62 = -v56;
                v61 = -v59;
                v63 = -v58;
              }
              v60 = v66;
            }
            else
            {
              ++v60;
            }
          }
          while (v60 != 3);
          v79 = (float)((float)((float)((float)((float)(v151 + v149) * 0.5)
                                      - (float)((float)((float)(v158 + v156) + v154) * 0.33333))
                              * v161)
                      + (float)(v162
                              * (float)((float)((float)(v152 + v150) * 0.5)
                                      - (float)((float)((float)(v157 + v155) + v41) * 0.33333))))
              + (float)(v64
                      * (float)((float)((float)(v153 + v148) * 0.5)
                              - (float)((float)((float)(v164 + v160) + v159) * 0.33333)));
          if (v79 >= 0.0)
            v80 = v162;
          else
            v80 = -v162;
          if (v79 >= 0.0)
            v81 = v161;
          else
            v81 = -v161;
          if (v79 >= 0.0)
            v82 = v64;
          else
            v82 = -v64;
          v166[0] = v80;
          v166[1] = v81;
          v166[2] = v82;
          v83 = (_QWORD *)(a1 + 8);
          v84 = *(_QWORD *)a1;
          v85 = *(float *)(a1 + 104);
          v181 = __PAIR64__(LODWORD(v149), LODWORD(v150));
          v182 = v148;
          v178 = v152;
          v179 = v151;
          v180 = v153;
          if (v147 > 0.0)
          {
            v86 = v146 * (float)(0.01 / v147);
            v87 = (float)(v151 - v149) * (float)(0.01 / v147);
            v88 = (float)(v153 - v148) * (float)(0.01 / v147);
            *(float *)&v181 = v150 - v86;
            *((float *)&v181 + 1) = v149 - v87;
            v182 = v148 - v88;
            v178 = v152 + v86;
            v179 = v151 + v87;
            v180 = v153 + v88;
          }
          v89 = 0;
          v90 = (float *)a3;
          do
          {
            v177 = 0.0;
            *(float *)&v173 = -v80;
            *((float *)&v173 + 1) = -v81;
            v174 = -v82;
            if (physx::Gu::intersectEdgeEdge(v90, (float *)(a3 + 12 * (((_BYTE)v89 + (v89 >> 1) + 1) & 3)), (float32x2_t *)&v173, (float *)&v181, &v178, &v177, &v175))
            {
              v91 = *(unsigned int *)(v84 + 4096);
              if (v91 <= 0x3F)
              {
                v92 = *(float *)(a1 + 16);
                v93 = v175;
                v94 = *(float *)(a1 + 28);
                v95 = v176;
                v96 = *(float *)(a1 + 40);
                v97 = *(float *)(a1 + 52)
                    + (float)((float)((float)(v175.f32[0] * v92) + (float)(v175.f32[1] * v94)) + (float)(v176 * v96));
                v98 = v85 + v177;
                *(_DWORD *)(v84 + 4096) = v91 + 1;
                v99 = (float32x2_t *)(v84 + (v91 << 6));
                v99[1].f32[0] = (float)((float)(v80 * v92) + (float)(v81 * v94)) + (float)(v82 * v96);
                v100 = *(float32x2_t *)(a1 + 8);
                v101 = *(float32x2_t *)(a1 + 20);
                v102 = *(float32x2_t *)(a1 + 32);
                v103 = vadd_f32(*(float32x2_t *)(a1 + 44), vadd_f32(vadd_f32(vmul_n_f32(v100, v93.f32[0]), vmul_n_f32(v101, v93.f32[1])), vmul_n_f32(v102, v95)));
                v99->f32[0] = (float)((float)(v80 * v100.f32[0]) + (float)(v81 * v101.f32[0]))
                            + (float)(v82 * v102.f32[0]);
                v99->f32[1] = (float)(vmuls_lane_f32(v80, v100, 1) + vmuls_lane_f32(v81, v101, 1))
                            + vmuls_lane_f32(v82, v102, 1);
                v99[2] = v103;
                v99[3].f32[0] = v97;
                v99[1].f32[1] = -v98;
                v99[6].i32[1] = a2;
              }
            }
            ++v89;
            v90 += 3;
          }
          while (v89 != 3);
          v104 = *(_QWORD *)a1;
          v105 = *(_QWORD *)(a1 + 56);
          v107 = *(float *)(a1 + 100);
          v106 = *(float *)(a1 + 104);
          v108 = v166;
LABEL_56:
          PxcGenerateVFContacts(v83, v104, v105, (float *)a3, v108, a2, v106, v107);
        }
      }
    }
  }
}

_QWORD *PxcGenerateVFContacts(_QWORD *result, uint64_t a2, uint64_t a3, float *a4, float *a5, __int32 a6, float a7, float a8)
{
  uint64_t v8;
  float v9;
  unint64_t v10;
  float v11;
  float v12;
  char v13;
  char v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  BOOL v38;
  float v39;
  float v40;
  float v41;
  float v42;
  BOOL v44;
  float v45;
  BOOL v46;
  float32_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float32_t v54;
  float32x2_t *v55;
  float32x2_t v56;
  float v57;
  float32x2_t v58;
  float v59;
  float32_t v60;
  float32x2_t v61;

  v8 = 0;
  v9 = a7 + a8;
  v10 = *(unsigned int *)(a2 + 4096);
  v11 = *a5;
  v12 = *a4;
  v13 = 1;
  do
  {
    v14 = v13;
    v16 = a5[1];
    v15 = a5[2];
    v17 = a4[3] - v12;
    v18 = a4[1];
    v19 = a4[2];
    v20 = a4[4] - v18;
    v21 = a4[5] - v19;
    v22 = a4[6] - v12;
    v23 = a4[7] - v18;
    v24 = a4[8] - v19;
    v25 = (float)(v15 * v23) - (float)(v16 * v24);
    v26 = (float)(v11 * v24) - (float)(v15 * v22);
    v27 = (float)(v16 * v22) - (float)(v11 * v23);
    v28 = (float)((float)(v20 * v26) + (float)(v17 * v25)) + (float)(v21 * v27);
    if (v28 >= 1.4211e-14)
    {
      v29 = (float *)(a3 + 12 * v8);
      v30 = v29[1];
      v31 = *v29 - v12;
      v32 = v30 - v18;
      v33 = v29[2];
      v34 = v33 - v19;
      v35 = (float)((float)(v26 * v32) + (float)(v31 * v25)) + (float)(v34 * v27);
      v36 = -(float)(v28 * 0.001);
      v37 = v28 + (float)(v28 * 0.001);
      v38 = v35 >= v36 && v35 <= v37;
      v39 = (float)(v32 * v21) - (float)(v34 * v20);
      v40 = (float)(v34 * v17) - (float)(v31 * v21);
      v41 = (float)(v31 * v20) - (float)(v32 * v17);
      v42 = (float)((float)(v40 * (float)-v16) + (float)((float)-v11 * v39)) + (float)((float)-v15 * v41);
      v44 = v38 && v42 >= v36 && (float)(v35 + v42) <= v37;
      v45 = (float)(1.0 / v28) * (float)((float)((float)(v23 * v40) + (float)(v22 * v39)) + (float)(v24 * v41));
      v46 = v44 && v45 < v9;
      if (v46 && v10 <= 0x3F)
      {
        v47 = v45 - a7;
        v48 = *((float *)result + 2);
        v49 = *((float *)result + 5);
        v50 = *((float *)result + 8);
        v51 = *v29 - (float)(v11 * v45);
        v52 = v30 - (float)(v16 * v45);
        v53 = v33 - (float)(v15 * v45);
        v54 = (float)((float)((float)(v51 * v48) + (float)(v52 * v49)) + (float)(v53 * v50)) + *((float *)result + 11);
        v55 = (float32x2_t *)(a2 + (v10++ << 6));
        *(_DWORD *)(a2 + 4096) = v10;
        v55[1].f32[0] = (float)((float)(v11 * v48) + (float)(v16 * v49)) + (float)(v15 * v50);
        v56 = *(float32x2_t *)((char *)result + 12);
        v57 = vmuls_lane_f32(v11, *(float32x2_t *)result, 1) + vmuls_lane_f32(v16, v56, 1);
        v58 = (float32x2_t)result[3];
        v59 = vmuls_lane_f32(v15, v58, 1);
        v60 = (float)((float)(v11 * COERCE_FLOAT(*result)) + (float)(v16 * v56.f32[0])) + (float)(v15 * v58.f32[0]);
        v61 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)result, v51), vmul_n_f32(v56, v52)), vmul_n_f32(v58, v53)), *(float32x2_t *)((char *)result + 36));
        v55->f32[0] = v60;
        v55->f32[1] = v57 + v59;
        v55[2] = v61;
        v55[3].f32[0] = v54;
        v55[1].f32[1] = v47;
        v55[6].i32[1] = a6;
        v11 = *a5;
        v12 = *a4;
      }
    }
    v13 = 0;
    v8 = 1;
  }
  while ((v14 & 1) != 0);
  return result;
}

BOOL PxcTestAxis(float *a1, float *a2, float *a3, float *a4, float a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  _BOOL8 result;
  float v23;
  float v24;

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a2[3];
  v9 = (float)((float)(a2[1] * v6) + (float)(*a2 * *a1)) + (float)(a2[2] * v7);
  v10 = a2[5];
  v11 = (float)((float)(v6 * a2[4]) + (float)(v8 * *a1)) + (float)(v10 * v7);
  if (v9 <= v11)
    v12 = (float)((float)(a2[1] * v6) + (float)(*a2 * *a1)) + (float)(a2[2] * v7);
  else
    v12 = (float)((float)(v6 * a2[4]) + (float)(v8 * *a1)) + (float)(v10 * v7);
  if (v9 > v11)
    v11 = (float)((float)(a2[1] * v6) + (float)(*a2 * *a1)) + (float)(a2[2] * v7);
  v13 = v12 - a5;
  v14 = v11 + a5;
  v15 = a3[3];
  v16 = (float)((float)(v6 * a3[1]) + (float)(*a3 * v5)) + (float)(a3[2] * v7);
  v17 = a3[5];
  v18 = (float)((float)(v6 * a3[4]) + (float)(v15 * v5)) + (float)(v17 * v7);
  if (v16 >= v18)
    v19 = (float)((float)(v6 * a3[4]) + (float)(v15 * v5)) + (float)(v17 * v7);
  else
    v19 = (float)((float)(v6 * a3[1]) + (float)(*a3 * v5)) + (float)(a3[2] * v7);
  if (v16 <= v18)
    v16 = v18;
  v20 = (float)((float)(v6 * a3[7]) + (float)(a3[6] * v5)) + (float)(a3[8] * v7);
  if (v19 >= v20)
    v21 = v20;
  else
    v21 = v19;
  if (v16 > v20)
    v20 = v16;
  result = v20 >= v13 && v14 >= v21;
  if (result)
  {
    v23 = v14 - v21;
    v24 = v20 - v13;
    if (v23 >= v24)
      v23 = v24;
    *a4 = v23;
  }
  return result;
}

{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  _BOOL8 result;
  float v20;
  float v21;

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a2[3];
  v9 = (float)((float)(a2[1] * v6) + (float)(*a2 * *a1)) + (float)(a2[2] * v7);
  v10 = a2[5];
  v11 = (float)((float)(v6 * a2[4]) + (float)(v8 * *a1)) + (float)(v10 * v7);
  if (v9 <= v11)
    v12 = (float)((float)(v6 * a2[4]) + (float)(v8 * *a1)) + (float)(v10 * v7);
  else
    v12 = (float)((float)(a2[1] * v6) + (float)(*a2 * *a1)) + (float)(a2[2] * v7);
  if (v9 > v11)
    v9 = v11;
  v13 = v9 - a5;
  v14 = v12 + a5;
  v15 = (float)((float)(v6 * a3[10]) + (float)(a3[9] * v5)) + (float)(a3[11] * v7);
  v16 = (float)((float)(a3[13] * fabsf((float)((float)(v6 * a3[4]) + (float)(a3[3] * v5)) + (float)(a3[5] * v7)))
              + (float)(fabsf((float)((float)(v6 * a3[1]) + (float)(*a3 * v5)) + (float)(a3[2] * v7)) * a3[12]))
      + (float)(fabsf((float)((float)(v6 * a3[7]) + (float)(a3[6] * v5)) + (float)(a3[8] * v7)) * a3[14]);
  v17 = v15 - v16;
  v18 = v15 + v16;
  result = v18 >= v13 && v14 >= v17;
  if (result)
  {
    v20 = v14 - v17;
    v21 = v18 - v13;
    if (v20 >= v21)
      v20 = v21;
    *a4 = v20;
  }
  return result;
}

uint64_t physx::Gu::unsupportedBoxCBOverlapMidphase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

{
  uint64_t result;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

{
  uint64_t result;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

{
  uint64_t result;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

{
  uint64_t result;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

{
  uint64_t result;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

{
  uint64_t result;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

{
  uint64_t result;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

{
  uint64_t result;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

uint64_t physx::Cm::FastVertex2ShapeScaling::init(uint64_t result, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  v6 = a3[3];
  v7 = v4 + v4;
  v8 = v3 * (float)(v3 + v3);
  v9 = v4 * (float)(v4 + v4);
  v10 = v5 * (float)(v5 + v5);
  v11 = (float)(v3 + v3) * v4;
  v12 = (float)(v3 + v3) * v5;
  v13 = (float)(v3 + v3) * v6;
  v14 = v7 * v5;
  v15 = v7 * v6;
  v16 = (float)(v5 + v5) * v6;
  v17 = 1.0;
  v18 = (float)(1.0 - v9) - v10;
  v19 = v11 + v16;
  v20 = v12 - v15;
  v21 = v11 - v16;
  v22 = (float)(1.0 - v8) - v10;
  v23 = v14 + v13;
  v24 = v12 + v15;
  v25 = v14 - v13;
  v26 = (float)(1.0 - v8) - v9;
  *(float *)result = v18;
  *(float *)(result + 4) = v21;
  *(float *)(result + 8) = v24;
  *(float *)(result + 12) = v19;
  *(float *)(result + 16) = v22;
  *(float *)(result + 20) = v14 - v13;
  *(float *)(result + 24) = v20;
  *(float *)(result + 28) = v14 + v13;
  *(float *)(result + 32) = v26;
  v27 = a2[1];
  v28 = a2[2];
  v29 = 0.0;
  v30 = (float)(v20 * 0.0) + (float)((float)(v19 * 0.0) + (float)(v18 * *a2));
  v31 = (float)(v23 * 0.0) + (float)((float)(v22 * 0.0) + (float)(v21 * *a2));
  v32 = (float)(v26 * 0.0) + (float)((float)(v25 * 0.0) + (float)(v24 * *a2));
  v33 = (float)(v20 * 0.0) + (float)((float)(v18 * 0.0) + (float)(v19 * v27));
  v34 = (float)(v23 * 0.0) + (float)((float)(v21 * 0.0) + (float)(v22 * v27));
  v35 = (float)(v26 * 0.0) + (float)((float)(v24 * 0.0) + (float)(v25 * v27));
  v36 = (float)((float)(v18 * 0.0) + (float)(v19 * 0.0)) + (float)(v20 * v28);
  v37 = (float)((float)(v21 * 0.0) + (float)(v22 * 0.0)) + (float)(v23 * v28);
  v38 = (float)((float)(v24 * 0.0) + (float)(v25 * 0.0)) + (float)(v26 * v28);
  v39 = v20 * v37;
  v40 = v20 * v38;
  v41 = (float)(v20 * v36) + (float)((float)(v18 * v30) + (float)(v19 * v33));
  v42 = v39 + (float)((float)(v18 * v31) + (float)(v19 * v34));
  v43 = v40 + (float)((float)(v18 * v32) + (float)(v19 * v35));
  v44 = (float)(v21 * v30) + (float)(v22 * v33);
  v45 = (float)(v21 * v31) + (float)(v22 * v34);
  v46 = (float)(v21 * v32) + (float)(v22 * v35);
  v47 = v23 * v38;
  v48 = (float)(v23 * v36) + v44;
  v49 = (float)(v23 * v37) + v45;
  v50 = v47 + v46;
  v51 = v24 * v30;
  v52 = v24 * v31;
  v53 = (float)(v24 * v32) + (float)(v25 * v35);
  v54 = v26 * v37;
  v55 = v26 * v38;
  v56 = (float)(v26 * v36) + (float)(v51 + (float)(v25 * v33));
  v57 = v54 + (float)(v52 + (float)(v25 * v34));
  v58 = v55 + v53;
  *(float *)result = v41;
  *(float *)(result + 4) = v42;
  *(float *)(result + 8) = v43;
  *(float *)(result + 12) = v48;
  *(float *)(result + 16) = v49;
  *(float *)(result + 20) = v50;
  *(float *)(result + 24) = v56;
  *(float *)(result + 28) = v57;
  *(float *)(result + 32) = v58;
  v59 = (float)(v48 * v57) - (float)(v49 * v56);
  v60 = (float)((float)(v42 * (float)((float)(v50 * v56) - (float)(v48 * v58)))
              + (float)(v41 * (float)((float)(v49 * v58) - (float)(v50 * v57))))
      + (float)(v43 * v59);
  v61 = 0.0;
  v62 = 0.0;
  v63 = 1.0;
  v64 = 0.0;
  v65 = 0.0;
  v66 = 0.0;
  v67 = 1.0;
  if (v60 != 0.0)
  {
    v68 = 1.0 / v60;
    v17 = (float)((float)(v49 * v58) - (float)(v57 * v50)) * v68;
    v29 = -(float)((float)((float)(v42 * v58) - (float)(v57 * v43)) * v68);
    v61 = (float)((float)(v42 * v50) - (float)(v43 * v49)) * v68;
    v62 = -(float)((float)((float)(v56 * (float)-v50) + (float)(v48 * v58)) * v68);
    v63 = (float)((float)(v41 * v58) - (float)(v43 * v56)) * v68;
    v64 = -(float)((float)((float)(v41 * v50) - (float)(v43 * v48)) * v68);
    v65 = v59 * v68;
    v66 = -(float)((float)((float)(v41 * v57) - (float)(v42 * v56)) * v68);
    v67 = (float)((float)(v42 * (float)-v48) + (float)(v41 * v49)) * v68;
  }
  *(float *)(result + 36) = v17;
  *(float *)(result + 40) = v29;
  *(float *)(result + 44) = v61;
  *(float *)(result + 48) = v62;
  *(float *)(result + 52) = v63;
  *(float *)(result + 56) = v64;
  *(float *)(result + 60) = v65;
  *(float *)(result + 64) = v66;
  *(float *)(result + 68) = v67;
  *(_BYTE *)(result + 72) = (float)((float)(*a2 * a2[1]) * a2[2]) < 0.0;
  return result;
}

uint64_t `anonymous namespace'::CapsuleMeshContactGenerationCallback_Scale::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float32x2_t *v23;
  float v24;
  float32x2_t *v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x2_t v33;
  float v34;

  v6 = *(_QWORD *)(a1 + 128);
  v5 = *(_QWORD *)(a1 + 136);
  v7 = *(unsigned __int8 *)(v5 + 72);
  v8 = *(float *)(v5 + 8);
  v9 = *a3;
  v10 = a3[1];
  v11 = *(float *)(v5 + 20);
  v12 = a3[2];
  v13 = *(float *)(v5 + 32);
  v34 = (float)((float)(*a3 * v8) + (float)(v10 * v11)) + (float)(v12 * v13);
  v14 = *a4;
  v15 = a4[1];
  v16 = a4[2];
  v17 = v7 == 0;
  v18 = 24;
  if (v17)
    v19 = 12;
  else
    v19 = 24;
  v20 = *a5;
  v21 = a5[1];
  v22 = a5[2];
  v23 = (float32x2_t *)((char *)&v33 + v19);
  v23[1].f32[0] = (float)((float)(v8 * *a4) + (float)(v11 * v15)) + (float)(v13 * v16);
  v24 = (float)((float)(v8 * v20) + (float)(v11 * v21)) + (float)(v13 * v22);
  if (!v17)
    v18 = 12;
  v25 = (float32x2_t *)((char *)&v33 + v18);
  v26 = *(float32x2_t *)v5;
  v27 = *(float32x2_t *)(v5 + 12);
  v28 = *(float32x2_t *)(v5 + 24);
  v33 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v5, v9), vmul_n_f32(v27, v10)), vmul_n_f32(v28, v12));
  *v23 = vadd_f32(vadd_f32(vmul_n_f32(v26, v14), vmul_n_f32(v27, v15)), vmul_n_f32(v28, v16));
  *v25 = vadd_f32(vadd_f32(vmul_n_f32(v26, v20), vmul_n_f32(v27, v21)), vmul_n_f32(v28, v22));
  v25[1].f32[0] = v24;
  v29 = *(unsigned int *)(a2 + 16);
  v30 = *(_QWORD *)(v6 + 80);
  if (v30)
    v31 = *(unsigned __int8 *)(v30 + v29);
  else
    v31 = 56;
  return 1;
}

void `anonymous namespace'::CapsuleMeshContactGenerationCallback_Scale::~CapsuleMeshContactGenerationCallback_Scale(_anonymous_namespace_::CapsuleMeshContactGenerationCallback_Scale *this)
{
  JUMPOUT(0x2276933B8);
}

void `anonymous namespace'::CapsuleHeightfieldContactGenerationCallback::~CapsuleHeightfieldContactGenerationCallback(_anonymous_namespace_::CapsuleHeightfieldContactGenerationCallback *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t `anonymous namespace'::CapsuleHeightfieldContactGenerationCallback::onEvent(_anonymous_namespace_::CapsuleHeightfieldContactGenerationCallback *this, int a2, unsigned int *a3)
{
  __int32 v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  float v14;
  float v15;
  float v16;
  float *v17;
  float v18;
  float v19;
  int v20;
  char *v22;
  unsigned int *v23;
  int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  _DWORD v43[3];
  _BYTE v44[12];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v24 = a2;
  if (a2)
  {
    v22 = (char *)this + 8;
    do
    {
      v5 = *a3;
      physx::Gu::HeightFieldUtil::getTriangle(*((_QWORD *)this + 15), *((float **)this + 16), (uint64_t)&v34, (uint64_t)v44, (uint64_t)v43, *a3, 0, 0);
      v6 = (float)((float)(v38 - v35) * (float)(v42 - v36)) - (float)((float)(v39 - v36) * (float)(v41 - v35));
      v7 = (float)((float)(v39 - v36) * (float)(v40 - v34)) - (float)((float)(v37 - v34) * (float)(v42 - v36));
      v8 = (float)((float)(v37 - v34) * (float)(v41 - v35)) - (float)((float)(v38 - v35) * (float)(v40 - v34));
      v9 = sqrtf((float)((float)(v7 * v7) + (float)(v6 * v6)) + (float)(v8 * v8));
      v23 = a3 + 1;
      if (v9 > 0.0)
      {
        v10 = 1.0 / v9;
        v6 = v6 * v10;
        v7 = v7 * v10;
        v8 = v8 * v10;
      }
      v11 = 0;
      v12 = 0;
      --v24;
      do
      {
        v13 = v43[v11];
        if (v13 == -1)
        {
          v12 |= 8 << v11;
        }
        else
        {
          physx::Gu::HeightFieldUtil::getTriangle(*((_QWORD *)this + 15), *((float **)this + 16), (uint64_t)&v25, 0, 0, v13, 0, 0);
          v14 = (float)((float)(v29 - v26) * (float)(v33 - v27)) - (float)((float)(v30 - v27) * (float)(v32 - v26));
          v15 = (float)((float)(v30 - v27) * (float)(v31 - v25)) - (float)((float)(v28 - v25) * (float)(v33 - v27));
          v16 = (float)((float)(v28 - v25) * (float)(v32 - v26)) - (float)((float)(v29 - v26) * (float)(v31 - v25));
          v17 = &v34 + 3 * byte_2261A9463[v11];
          if ((float)((float)((float)(v15 * (float)(v17[1] - v26)) + (float)(v14 * (float)(*v17 - v25)))
                     + (float)(v16 * (float)(v17[2] - v27))) < 0.0)
          {
            v18 = sqrtf((float)((float)(v15 * v15) + (float)(v14 * v14)) + (float)(v16 * v16));
            if (v18 > 0.0)
            {
              v19 = 1.0 / v18;
              v14 = v14 * v19;
              v15 = v15 * v19;
              v16 = v16 * v19;
            }
            v20 = 8 << v11;
            if ((float)((float)((float)(v7 * v15) + (float)(v14 * v6)) + (float)(v16 * v8)) >= 0.999)
              v20 = 0;
            v12 |= v20;
          }
        }
        ++v11;
      }
      while (v11 != 3);
      a3 = v23;
    }
    while (v24);
  }
  return 1;
}

void physx::Gu::computeBounds(float32x2_t *a1, uint64_t a2, uint64_t a3, _OWORD *a4, float32x4_t a5, int8x16_t a6, double a7, double a8, double a9, double a10, double a11, int32x4_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  int32x2_t v17;
  float v18;
  _OWORD *v19;
  float32_t v22;
  float32x2_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float32_t v50;
  _DWORD *v51;
  int32x2_t *v52;
  _OWORD *v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v71;
  uint64_t v72;
  int32x2_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int8x16_t v77;
  uint64_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  double v98;
  uint64_t v99;
  int32x2_t v100;
  int32x2_t v101;
  int8x16_t v102;
  float32x2_t v103;
  float32x4_t v104;
  uint64_t v105;
  uint64_t v106;
  float32x4_t v107;
  int v108;
  _OWORD *v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float v113;
  float v114;
  BOOL v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int8x16_t v124;
  float32x4_t v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  int32x2_t v135;
  int32x2_t v136;
  int32x2_t v137;
  float v138;
  float v139;
  float v140;
  float32x4_t v141;
  float32x4_t v142;
  _BYTE v143[40];

  v18 = *(float *)a6.i32;
  v19 = a4;
  v17.i32[0] = a5.i32[0];
  switch(*(_DWORD *)a2)
  {
    case 0xFFFFFFFF:
    case 7:
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuBounds.cpp", 364, "Gu::GeometryUnion::computeBounds: Unknown shape type.", a14, a15, a16, a17);
      return;
    case 0:
      a5.f32[0] = (float)(*(float *)(a2 + 4) + a5.f32[0]) * *(float *)a6.i32;
      v22 = *(float *)(a3 + 24) - a5.f32[0];
      v23 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5.f32, 0);
      *a1 = vsub_f32(*(float32x2_t *)(a3 + 16), v23);
      a1[1].f32[0] = v22;
      a5.f32[0] = a5.f32[0] + *(float *)(a3 + 24);
      goto LABEL_12;
    case 1:
      v24 = *(float *)a3;
      v25 = *(float *)(a3 + 4);
      v26 = v24 + v24;
      v28 = *(float *)(a3 + 8);
      v27 = *(float *)(a3 + 12);
      v29 = v27 + v27;
      v30 = (float)((float)(v27 * (float)(v27 + v27)) + -1.0) + (float)(v24 * (float)(v24 + v24));
      v31 = (float)((float)(v24 + v24) * v25) + (float)(v28 * v29);
      v32 = (float)(v26 * v28) - (float)(v25 * v29);
      v33 = (float)((float)(*(float *)(a3 + 20) * v31) + (float)(*(float *)(a3 + 16) * v30))
          + (float)(*(float *)(a3 + 24) * v32);
      v34 = -v33;
      v35 = fabsf(v30);
      v36 = fabsf(v31);
      v37 = fabsf(v32);
      if (v35 > 1.0 && v36 < 0.000001 && v37 < 0.000001)
      {
        if (v30 <= 0.0)
        {
          v39 = v34 - *(float *)v17.i32;
          v113 = -8.5071e37;
          v38 = 8.5071e37;
          v40 = 8.5071e37;
          v41 = 8.5071e37;
          v114 = -8.5071e37;
          goto LABEL_52;
        }
        v38 = v33 + *(float *)v17.i32;
        v39 = -8.5071e37;
        v40 = 8.5071e37;
        v41 = 8.5071e37;
        goto LABEL_50;
      }
      if (v35 < 0.000001 && v36 > 1.0 && v37 < 0.000001)
      {
        if (v31 <= 0.0)
        {
          v113 = v34 - *(float *)v17.i32;
          v39 = -8.5071e37;
          v38 = 8.5071e37;
          v40 = 8.5071e37;
          v41 = 8.5071e37;
LABEL_51:
          v114 = -8.5071e37;
          goto LABEL_52;
        }
        v40 = v33 + *(float *)v17.i32;
        v39 = -8.5071e37;
        v38 = 8.5071e37;
        goto LABEL_49;
      }
      v39 = -8.5071e37;
      v38 = 8.5071e37;
      if (v35 >= 0.000001 || v36 >= 0.000001)
      {
        v40 = 8.5071e37;
LABEL_49:
        v41 = 8.5071e37;
        goto LABEL_50;
      }
      v115 = v37 <= 1.0;
      v40 = 8.5071e37;
      v41 = 8.5071e37;
      v113 = -8.5071e37;
      v114 = -8.5071e37;
      if (v115)
        goto LABEL_52;
      if (v32 > 0.0)
      {
        v41 = v33 + *(float *)v17.i32;
        v39 = -8.5071e37;
        v38 = 8.5071e37;
        v40 = 8.5071e37;
LABEL_50:
        v113 = -8.5071e37;
        goto LABEL_51;
      }
      v114 = v34 - *(float *)v17.i32;
      v39 = -8.5071e37;
      v38 = 8.5071e37;
      v40 = 8.5071e37;
      v41 = 8.5071e37;
      v113 = -8.5071e37;
LABEL_52:
      if (v18 != 1.0)
      {
        v126 = (float)(v38 + v39) * 0.5;
        v127 = (float)(v40 + v113) * 0.5;
        v128 = (float)(v41 + v114) * 0.5;
        v129 = v38 - v39;
        v130 = v40 - v113;
        v131 = (float)(v41 - v114) * 0.5;
        v132 = (float)(v129 * 0.5) * v18;
        v133 = (float)(v130 * 0.5) * v18;
        v134 = v131 * v18;
        v39 = v126 - v132;
        v113 = v127 - v133;
        v114 = v128 - (float)(v131 * v18);
        v38 = v126 + v132;
        v40 = v127 + v133;
        v41 = v128 + v134;
      }
      a1->f32[0] = v39;
      a1->f32[1] = v113;
      a1[1].f32[0] = v114;
      a1[1].f32[1] = v38;
      a1[2].f32[0] = v40;
      a1[2].f32[1] = v41;
      return;
    case 2:
      v42 = 0;
      v44 = *(float *)(a3 + 8);
      v43 = *(float *)(a3 + 12);
      v45 = *(float *)a3;
      v46 = *(float *)(a3 + 4);
      *(float *)v143 = (float)((float)(v43 * (float)(v43 + v43)) + -1.0) + (float)(v45 * (float)(v45 + v45));
      *(float *)&v143[4] = (float)((float)(v45 + v45) * v46) + (float)(v44 * (float)(v43 + v43));
      *(float *)&v143[8] = (float)((float)(v45 + v45) * v44) - (float)(v46 * (float)(v43 + v43));
      v48 = *(float *)(a2 + 4);
      v47 = *(float *)(a2 + 8);
      do
      {
        v142.f32[v42] = (float)((float)(v48 + (float)(fabsf(*(float *)&v143[v42 * 4]) * v47)) + *(float *)v17.i32) * v18;
        ++v42;
      }
      while (v42 != 3);
      v49 = v142.f32[2];
      v50 = *(float *)(a3 + 24) - v142.f32[2];
      v23 = *(float32x2_t *)v142.f32;
      *a1 = vsub_f32(*(float32x2_t *)(a3 + 16), *(float32x2_t *)v142.f32);
      a1[1].f32[0] = v50;
      a5.f32[0] = v49 + *(float *)(a3 + 24);
LABEL_12:
      *(float32x2_t *)((char *)a1 + 12) = vadd_f32(v23, *(float32x2_t *)(a3 + 16));
      a1[2].i32[1] = a5.i32[0];
      return;
    case 3:
      a5.i64[0] = *(_QWORD *)(a3 + 16);
      a5.i32[2] = *(_DWORD *)(a3 + 24);
      v54 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a3, 1);
      v55 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 2);
      v56 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 3);
      _Q5 = vaddq_f32(*(float32x4_t *)a3, *(float32x4_t *)a3);
      v58 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a3, *(float32x2_t *)_Q5.f32), 0);
      v59 = vmul_lane_f32(v54, *(float32x2_t *)_Q5.f32, 1);
      v60 = vmul_laneq_f32(v55, _Q5, 2);
      v61 = vmul_n_f32(v54, _Q5.f32[0]);
      v62 = vmul_n_f32(v55, _Q5.f32[0]);
      v63 = vmul_n_f32(v56, _Q5.f32[0]);
      v64 = vmul_lane_f32(v55, *(float32x2_t *)_Q5.f32, 1);
      v65 = vmul_lane_f32(v56, *(float32x2_t *)_Q5.f32, 1);
      v66 = vmul_laneq_f32(v56, _Q5, 2);
      __asm { FMOV            V5.2S, #1.0 }
      v71 = vsub_f32(*(float32x2_t *)_Q5.f32, v58);
      LODWORD(v72) = vsub_f32(v62, v65).u32[0];
      v73 = (int32x2_t)vadd_f32(v64, v63);
      *(int8x8_t *)v74.f32 = vext_s8((int8x8_t)vadd_f32(v62, v65), (int8x8_t)vsub_f32(v64, v63), 4uLL);
      v74.i64[1] = vsub_f32(v71, v59).u32[0];
      *(float *)v143 = (float)(1.0 - v59.f32[1]) - v60.f32[1];
      *(_DWORD *)&v143[4] = vadd_f32(v61, v66).u32[0];
      HIDWORD(v72) = vsub_f32(v61, v66).i32[1];
      *(_QWORD *)&v143[8] = v72;
      *(int32x2_t *)&v143[16] = vzip1_s32((int32x2_t)vsub_f32(v71, v60), v73);
      *(float32x4_t *)&v143[24] = v74;
      v75 = vmulq_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v17, 0), vaddq_f32(vaddq_f32(vabsq_f32(vmulq_n_f32(*(float32x4_t *)v143, *(float *)(a2 + 4))), vabsq_f32(vmulq_n_f32(*(float32x4_t *)&v143[12], *(float *)(a2 + 8)))), vabsq_f32(vmulq_n_f32(v74, *(float *)(a2 + 12))))), v18);
      v76 = vsubq_f32(a5, v75);
      v77 = (int8x16_t)vaddq_f32(a5, v75);
      goto LABEL_26;
    case 4:
      v78 = *(_QWORD *)(a2 + 32);
      if ((*(_BYTE *)(a2 + 40) & 1) != 0)
      {
        v84 = *(_DWORD *)(a2 + 4);
        v85 = *(_DWORD *)(a2 + 8);
        v83 = a2 + 4;
        v86 = *(_DWORD *)(v83 + 8);
        v104 = *(float32x4_t *)a3;
        v87 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a3, 1);
        v88 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 2);
        v89 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 3);
        _Q4 = vaddq_f32(v104, v104);
        *(int32x2_t *)v104.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a3, *(float32x2_t *)_Q4.f32), 0);
        v103 = vmul_lane_f32(v87, *(float32x2_t *)_Q4.f32, 1);
        v91 = vmul_laneq_f32(v88, _Q4, 2);
        v92 = vmul_n_f32(v87, _Q4.f32[0]);
        v93 = vmul_n_f32(v88, _Q4.f32[0]);
        v94 = vmul_n_f32(v89, _Q4.f32[0]);
        v95 = vmul_lane_f32(v88, *(float32x2_t *)_Q4.f32, 1);
        v96 = vmul_lane_f32(v89, *(float32x2_t *)_Q4.f32, 1);
        v97 = vmul_laneq_f32(v89, _Q4, 2);
        __asm { FMOV            V4.2S, #1.0 }
        *(float32x2_t *)v104.f32 = vsub_f32(*(float32x2_t *)_Q4.f32, *(float32x2_t *)v104.f32);
        v98 = COERCE_DOUBLE(vadd_f32(v92, v97));
        LODWORD(v99) = vsub_f32(v93, v96).u32[0];
        *(float32x2_t *)a6.i8 = vsub_f32(v92, v97);
        v100 = (int32x2_t)vsub_f32(*(float32x2_t *)v104.f32, v91);
        v101 = (int32x2_t)vadd_f32(v95, v94);
        *(float32x2_t *)a12.i8 = vadd_f32(v93, v96);
        *(int8x8_t *)v102.i8 = vext_s8(*(int8x8_t *)a12.i8, (int8x8_t)vsub_f32(v95, v94), 4uLL);
        v102.i64[1] = vsub_f32(*(float32x2_t *)v104.f32, v103).u32[0];
        v103.i32[0] = v91.i32[1];
        *(float *)v143 = (float)(1.0 - v103.f32[1]) - v91.f32[1];
        *(_DWORD *)&v143[4] = LODWORD(v98);
        HIDWORD(v99) = a6.i32[1];
        *(int32x2_t *)v104.f32 = vzip1_s32(v100, v101);
        *(_QWORD *)&v143[8] = v99;
        *(_QWORD *)&v143[16] = v104.i64[0];
        *(int8x16_t *)&v143[24] = v102;
        if ((v85 - 1065353216) | (v84 - 1065353216) | (v86 - 1065353216))
        {
          v137 = v17;
          v140 = v18;
          computeScaledMatrix((uint64_t)v143, v83, (int8x16_t)v104, a6, v102, *(double *)&v100, v98, *(double *)&v103, *(double *)&v91, a12);
          v17 = v137;
          v18 = v140;
        }
        v105 = *(_QWORD *)(v78 + 72);
        v106 = 20 * *(unsigned __int8 *)(v78 + 71);
        v107 = vaddq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)v143, COERCE_FLOAT(*(_OWORD *)(v105 + v106))), vmulq_lane_f32(*(float32x4_t *)&v143[12], *(float32x2_t *)(v105 + v106), 1)), vmulq_laneq_f32(*(float32x4_t *)&v143[24], *(float32x4_t *)(v105 + v106), 2));
        v108 = *(unsigned __int8 *)(v78 + 70) - 1;
        if (*(_BYTE *)(v78 + 70) == 1)
        {
          v110 = v107;
        }
        else
        {
          v109 = (_OWORD *)(v106 + v105 + 12);
          v110 = v107;
          do
          {
            v111 = *(float32x4_t *)v109;
            v109 = (_OWORD *)((char *)v109 + 12);
            v112 = vaddq_f32(vmulq_laneq_f32(*(float32x4_t *)&v143[24], v111, 2), vaddq_f32(vmulq_n_f32(*(float32x4_t *)v143, v111.f32[0]), vmulq_lane_f32(*(float32x4_t *)&v143[12], *(float32x2_t *)v111.f32, 1)));
            v107 = vminq_f32(v107, v112);
            v110 = vmaxq_f32(v110, v112);
            --v108;
          }
          while (v108);
        }
        v116 = (float32x4_t)vdupq_lane_s32(v17, 0);
        v117 = vsubq_f32(v107, v116);
        v118.i64[0] = *(_QWORD *)(a3 + 16);
        v118.i64[1] = *(unsigned int *)(a3 + 24);
        v119 = vaddq_f32(vaddq_f32(v116, v110), v118);
        v120 = vaddq_f32(v117, v118);
        v121.i64[0] = 0x3F0000003F000000;
        v121.i64[1] = 0x3F0000003F000000;
        v122 = vmulq_f32(vaddq_f32(v119, v120), v121);
        v123 = vmulq_n_f32(vsubq_f32(v119, v120), v18 * 0.5);
        v124 = (int8x16_t)vaddq_f32(v122, v123);
        v125 = vsubq_f32(v122, v123);
        v125.i32[3] = v124.i32[0];
        *(float32x4_t *)a1->f32 = v125;
        v82 = vextq_s8(v124, v124, 4uLL).u64[0];
      }
      else
      {
        if (!a4)
          v19 = (_OWORD *)(v78 + 32);
        v51 = (_DWORD *)(a2 + 4);
        v52 = (int32x2_t *)a3;
        v53 = v19;
        v135 = v17;
        v138 = *(float *)a6.i32;
LABEL_21:
        computeMeshBounds(v52, v53, v51, (float32x4_t *)v143, &v142, *(double *)a5.i64, a6, a7, a8, a9, a10, a11, a12);
        v79 = vmulq_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v135, 0), v142), v138);
        v80 = *(float32x4_t *)v143;
LABEL_25:
        v76 = vsubq_f32(v80, v79);
        v77 = (int8x16_t)vaddq_f32(v80, v79);
LABEL_26:
        v76.i32[3] = v77.i32[0];
        *(float32x4_t *)a1->f32 = v76;
        v82 = vextq_s8(v77, v77, 4uLL).u64[0];
      }
      a1[2] = (float32x2_t)v82;
      return;
    case 5:
      v135 = v17;
      v138 = *(float *)a6.i32;
      if (!a4)
        v19 = (_OWORD *)(*(_QWORD *)(a2 + 40) + 56);
      v51 = (_DWORD *)(a2 + 4);
      v52 = (int32x2_t *)a3;
      v53 = v19;
      goto LABEL_21;
    case 6:
      v136 = v17;
      v139 = *(float *)a6.i32;
      v81 = *(_DWORD *)(a2 + 24);
      *(int32x2_t *)a6.i8 = vrev64_s32(*(int32x2_t *)(a2 + 16));
      *(_QWORD *)v143 = a6.i64[0];
      *(_DWORD *)&v143[8] = v81;
      *(_OWORD *)&v143[12] = xmmword_2260E5D70;
      if (!a4)
        v19 = (_OWORD *)(*(_QWORD *)(a2 + 8) + 32);
      computeMeshBounds((int32x2_t *)a3, v19, v143, &v142, &v141, 0.0, a6, a7, a8, a9, a10, a11, a12);
      v79 = vmulq_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v136, 0), v141), v139);
      v80 = v142;
      goto LABEL_25;
    default:
      return;
  }
}

float32x2_t computeScaledMatrix(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4, int8x16_t a5, double a6, double a7, double a8, double a9, int32x4_t a10)
{
  int8x16_t v10;
  int8x16_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int32x4_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float v23;
  float v24;
  float v25;
  float32x2_t v26;
  float32x2_t v27;
  float v28;
  float v29;
  float v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float v34;
  float v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t result;

  a5.i32[0] = *(_DWORD *)(a1 + 8);
  a4.i32[0] = *(_DWORD *)(a1 + 20);
  a3.i32[0] = *(_DWORD *)(a1 + 32);
  a10.i64[0] = *(_QWORD *)(a2 + 12);
  v15 = *(float32x2_t *)(a2 + 20);
  v16 = vadd_f32(*(float32x2_t *)a10.i8, *(float32x2_t *)a10.i8);
  *(float32x2_t *)v11.i8 = vadd_f32(*(float32x2_t *)a10.i8, (float32x2_t)__PAIR64__(v16.u32[1], a10.u32[0]));
  v17 = (float32x2_t)vext_s8((int8x8_t)vmul_f32(*(float32x2_t *)a10.i8, v16), *(int8x8_t *)v11.i8, 4uLL);
  *(float *)v12.i32 = vmul_f32(*(float32x2_t *)a10.i8, *(float32x2_t *)v11.i8).f32[0];
  v18 = vmul_n_f32(v15, *(float *)v11.i32);
  v19 = vmul_lane_f32(v15, v16, 1);
  *(int32x2_t *)v11.i8 = vrev64_s32((int32x2_t)v19);
  v20 = vmul_n_f32(v15, vadd_f32(v15, v15).f32[0]);
  a10.i32[0] = 1.0;
  v13.i32[0] = vsub_f32(*(float32x2_t *)a10.i8, v17).u32[0];
  *(float32x2_t *)a10.i8 = vmul_f32(*(float32x2_t *)a10.i8, v17);
  v13.i32[1] = a10.i32[1];
  *(int32x2_t *)a10.i8 = vdup_lane_s32(*(int32x2_t *)a10.i8, 1);
  *(float *)v10.i32 = 1.0 - *(float *)v12.i32;
  *(int32x2_t *)v12.i8 = vrev64_s32((int32x2_t)v20);
  v21.i32[0] = vadd_f32(*(float32x2_t *)a10.i8, *(float32x2_t *)v12.i8).u32[0];
  a10.i32[1] = v10.i32[0];
  v22 = vsub_f32(*(float32x2_t *)v13.i8, v20);
  v21.i32[1] = vsub_f32(*(float32x2_t *)&a10, *(float32x2_t *)&v12).i32[1];
  a10.i32[0] = vsub_f32(v18, *(float32x2_t *)v11.i8).u32[0];
  *(float32x2_t *)v11.i8 = vadd_f32(v18, *(float32x2_t *)v11.i8);
  v12.i64[0] = *(_QWORD *)(a2 + 4);
  *(float *)v13.i32 = vmuls_lane_f32(*(float *)a10.i32, *(float32x2_t *)v12.i8, 1);
  a10.i32[1] = v11.i32[1];
  v23 = *(float *)a2 * v22.f32[0];
  v24 = vmuls_lane_f32(*(float *)a2, v22, 1);
  v25 = *(float *)a2 * *(float *)v11.i32;
  *(float32x2_t *)v14.i8 = vmul_n_f32(v22, v23);
  v26 = vmul_n_f32(v22, v24);
  v27 = vmul_n_f32(v22, v25);
  v28 = v23 * *(float *)v11.i32;
  v29 = v24 * *(float *)v11.i32;
  v30 = v25 * *(float *)v11.i32;
  v19.i32[1] = v10.i32[0];
  v31 = vsub_f32(v19, (float32x2_t)vext_s8((int8x8_t)v18, (int8x8_t)v17, 4uLL));
  v32 = vmul_f32(v21, *(float32x2_t *)v12.i8);
  v33 = vmul_f32(v31, *(float32x2_t *)v12.i8);
  *(float32x2_t *)v10.i8 = vmul_f32((float32x2_t)vzip2_s32((int32x2_t)v21, *(int32x2_t *)a10.i8), *(float32x2_t *)v12.i8);
  *(float *)v11.i32 = vmuls_lane_f32(v31.f32[1], *(float32x2_t *)v12.i8, 1);
  *(float32x2_t *)v12.i8 = vadd_f32(vadd_f32(*(float32x2_t *)v14.i8, vmul_n_f32(v21, v32.f32[0])), vmul_n_f32(*(float32x2_t *)a10.i8, *(float *)v13.i32));
  *(float32x2_t *)v14.i8 = vadd_f32(vadd_f32(v26, vmul_n_f32(v21, *(float *)v10.i32)), vmul_lane_f32(*(float32x2_t *)a10.i8, *(float32x2_t *)v10.i8, 1));
  *(float32x2_t *)a10.i8 = vadd_f32(vadd_f32(v27, vmul_n_f32(v21, v33.f32[0])), vmul_n_f32(*(float32x2_t *)a10.i8, *(float *)v11.i32));
  *(float32x2_t *)v10.i8 = vmul_f32(v31, *(float32x2_t *)v10.i8);
  v34 = v30 + vmul_f32(v31, v33).f32[0];
  v32.f32[0] = (float)(v28 + vmul_f32(v31, v32).f32[0]) + vmuls_lane_f32(*(float *)v13.i32, v31, 1);
  v33.f32[0] = (float)(v29 + *(float *)v10.i32) + *(float *)&v10.i32[1];
  v35 = v34 + vmuls_lane_f32(*(float *)v11.i32, v31, 1);
  v31.f32[0] = (float)((float)(*(float *)a5.i32 * v32.f32[0]) + (float)(v33.f32[0] * *(float *)a4.i32))
             + (float)(v35 * *(float *)a3.i32);
  v10.i64[0] = *(_QWORD *)a1;
  v11.i64[0] = *(_QWORD *)(a1 + 12);
  v13.i64[0] = *(_QWORD *)(a1 + 24);
  v36 = (float32x4_t)vextq_s8(vextq_s8(a5, a5, 4uLL), v10, 0xCuLL);
  v36.i32[3] = v36.i32[0];
  v37 = (float32x4_t)vextq_s8(vextq_s8(a4, a4, 4uLL), v11, 0xCuLL);
  v37.i32[3] = v37.i32[0];
  v38 = (float32x4_t)vextq_s8(vextq_s8(a3, a3, 4uLL), v13, 0xCuLL);
  v38.i32[3] = v38.i32[0];
  *(float32x2_t *)a1 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a1, *(float *)v12.i32), vmul_n_f32(*(float32x2_t *)v11.i8, *(float *)v14.i32)), vmul_n_f32(*(float32x2_t *)v13.i8, *(float *)a10.i32));
  *(float32x4_t *)(a1 + 8) = vaddq_f32(vaddq_f32(vmulq_f32(v36, (float32x4_t)vzip1q_s32(v12, vdupq_lane_s32(*(int32x2_t *)v12.i8, 1))), vmulq_f32((float32x4_t)vzip1q_s32(v14, vdupq_lane_s32(*(int32x2_t *)v14.i8, 1)), v37)), vmulq_f32((float32x4_t)vzip1q_s32(a10, vdupq_lane_s32(*(int32x2_t *)a10.i8, 1)), v38));
  result = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v10.i8, v32.f32[0]), vmul_n_f32(*(float32x2_t *)v11.i8, v33.f32[0])), vmul_n_f32(*(float32x2_t *)v13.i8, v35));
  *(float32x2_t *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 32) = v31.i32[0];
  return result;
}

float32x4_t computeMeshBounds(int32x2_t *a1, _OWORD *a2, _DWORD *a3, float32x4_t *a4, float32x4_t *a5, double a6, int8x16_t a7, double a8, double a9, double a10, double a11, double a12, int32x4_t a13)
{
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  double v32;
  uint64_t v33;
  int32x2_t v34;
  int32x2_t v35;
  int8x16_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t result;
  _BYTE v44[40];

  v38 = *(float32x4_t *)a1->i8;
  v17 = (float32x2_t)vdup_lane_s32(*a1, 1);
  v18 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a1->i8, 2);
  v19 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a1->i8, 3);
  _Q4 = vaddq_f32(v38, v38);
  *(int32x2_t *)v38.f32 = vdup_lane_s32((int32x2_t)vmul_f32((float32x2_t)*a1, *(float32x2_t *)_Q4.f32), 0);
  v37 = vmul_lane_f32(v17, *(float32x2_t *)_Q4.f32, 1);
  v21 = vmul_laneq_f32(v18, _Q4, 2);
  v22 = vmul_n_f32(v17, _Q4.f32[0]);
  v23 = vmul_n_f32(v18, _Q4.f32[0]);
  v24 = vmul_n_f32(v19, _Q4.f32[0]);
  v25 = vmul_lane_f32(v18, *(float32x2_t *)_Q4.f32, 1);
  v26 = vmul_lane_f32(v19, *(float32x2_t *)_Q4.f32, 1);
  v27 = vmul_laneq_f32(v19, _Q4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  *(float32x2_t *)v38.f32 = vsub_f32(*(float32x2_t *)_Q4.f32, *(float32x2_t *)v38.f32);
  v32 = COERCE_DOUBLE(vadd_f32(v22, v27));
  LODWORD(v33) = vsub_f32(v23, v26).u32[0];
  *(float32x2_t *)a7.i8 = vsub_f32(v22, v27);
  v34 = (int32x2_t)vsub_f32(*(float32x2_t *)v38.f32, v21);
  v35 = (int32x2_t)vadd_f32(v25, v24);
  *(float32x2_t *)a13.i8 = vadd_f32(v23, v26);
  *(int8x8_t *)v36.i8 = vext_s8(*(int8x8_t *)a13.i8, (int8x8_t)vsub_f32(v25, v24), 4uLL);
  v36.i64[1] = vsub_f32(*(float32x2_t *)v38.f32, v37).u32[0];
  v37.i32[0] = v21.i32[1];
  *(float *)v44 = (float)(1.0 - v37.f32[1]) - v21.f32[1];
  *(_DWORD *)&v44[4] = LODWORD(v32);
  HIDWORD(v33) = a7.i32[1];
  *(int32x2_t *)v38.f32 = vzip1_s32(v34, v35);
  *(_QWORD *)&v44[8] = v33;
  *(_QWORD *)&v44[16] = v38.i64[0];
  *(int8x16_t *)&v44[24] = v36;
  if ((a3[1] - 1065353216) | (*a3 - 1065353216) | (a3[2] - 1065353216))
    computeScaledMatrix((uint64_t)v44, (uint64_t)a3, (int8x16_t)v38, a7, v36, *(double *)&v34, v32, *(double *)&v37, *(double *)&v21, a13);
  *(int32x2_t *)v39.f32 = a1[2];
  v39.i64[1] = a1[3].u32[0];
  v40 = *(float32x4_t *)v44;
  v41 = *(float32x4_t *)&v44[12];
  v42 = *(float32x4_t *)&v44[24];
  *a4 = vaddq_f32(v39, vaddq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)v44, COERCE_FLOAT(*a2)), vmulq_lane_f32(*(float32x4_t *)&v44[12], *(float32x2_t *)a2, 1)), vmulq_laneq_f32(*(float32x4_t *)&v44[24], *(float32x4_t *)a2, 2)));
  result = vaddq_f32(vabsq_f32(vmulq_laneq_f32(v42, *(float32x4_t *)((char *)a2 + 12), 2)), vaddq_f32(vabsq_f32(vmulq_n_f32(v40, COERCE_FLOAT(*(_OWORD *)((char *)a2 + 12)))), vabsq_f32(vmulq_lane_f32(v41, *(float32x2_t *)((char *)a2 + 12), 1))));
  *a5 = result;
  return result;
}

float physx::Gu::computeBoundsWithCCDThreshold(float *a1, float *a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, int8x16_t a10, double a11, double a12, double a13, double a14, double a15, int32x4_t a16)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float result;
  float v31;
  float v32;
  float v33;
  char v34;
  char v35;
  float32x2_t v36;
  float v37;
  float v38;
  float v39;
  float v40;

  a9.i32[0] = 0;
  a10.i32[0] = 1.0;
  physx::Gu::computeBounds(&v36, a3, a4, a5, a9, a10, a11, a12, a13, a14, a15, a16, (uint64_t)a5, a6, a7, a8, v34);
  v23 = v36.f32[1];
  v22 = v36.f32[0];
  v25 = v37;
  v24 = v38;
  v26 = v39;
  v27 = v40;
  v28 = (float)(v36.f32[1] + v39) * 0.5;
  v29 = (float)(v37 + v40) * 0.5;
  *a1 = (float)(v36.f32[0] + v38) * 0.5;
  a1[1] = v28;
  a1[2] = v29;
  *a2 = (float)(v24 - v22) * 0.5;
  a2[1] = (float)(v26 - v23) * 0.5;
  a2[2] = (float)(v27 - v25) * 0.5;
  result = 3.4028e38;
  switch(*(_DWORD *)a3)
  {
    case 0xFFFFFFFF:
    case 7:
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuBounds.cpp", 440, "Gu::GeometryUnion::computeBounds: Unknown shape type.", v19, v20, v21, v35);
      return 3.4028e38;
    case 0:
    case 2:
      v31 = *(float *)(a3 + 4);
      goto LABEL_15;
    case 3:
      v31 = *(float *)(a3 + 4);
      if (v31 >= *(float *)(a3 + 8))
        v31 = *(float *)(a3 + 8);
      if (v31 >= *(float *)(a3 + 12))
        v31 = *(float *)(a3 + 12);
      goto LABEL_15;
    case 4:
      v32 = *(float *)(a3 + 12);
      v33 = *(float *)(a3 + 4);
      if (v33 >= *(float *)(a3 + 8))
        v33 = *(float *)(a3 + 8);
      if (v32 >= v33)
        v32 = v33;
      v31 = *(float *)(*(_QWORD *)(a3 + 32) + 88) * v32;
LABEL_15:
      result = v31 * 0.75;
      break;
    case 5:
    case 6:
      result = 0.0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t physx::Gu::ShapeData::ShapeData(uint64_t a1, uint64_t a2, uint64_t a3, double a4, float32x4_t a5, double a6, float32x4_t _Q3, double a8, float32x4_t a9)
{
  float v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int8x8_t v28;
  int8x8_t v29;
  float v30;
  float32x2_t v31;
  float v32;
  float32x2_t v33;
  float32x2_t v34;
  float v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int v39;
  float v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float32x2_t v76;
  float v77;
  float32x2_t v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  unsigned int v94;
  float v95;
  float v96;
  int32x2_t v97;
  float v98;
  float32x2_t v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  float32x2_t v120;
  float v121;
  float32x2_t v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float32x4_t v129;
  float32x4_t v130;
  int8x16_t v131;
  __int128 v132;
  float v133;
  float32x4_t v135;
  _OWORD v136[3];
  float32x2_t v137;
  float v138;

  v12 = fabsf(*(float *)(a3 + 12));
  if (v12 >= 1.0)
  {
    v34 = (float32x2_t)0x3F80000000000000;
    v33 = (float32x2_t)1065353216;
    v31 = 0;
    v32 = 1.0;
    _Q3.i32[0] = 0;
    v30 = 0.0;
  }
  else
  {
    v13 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a3, 1);
    v14 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 2);
    v15 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 3);
    a9 = vaddq_f32(*(float32x4_t *)a3, *(float32x4_t *)a3);
    v16 = vmul_lane_f32(v13, *(float32x2_t *)a9.f32, 1);
    v17 = vmul_laneq_f32(v14, a9, 2);
    v18 = vmul_n_f32(v13, a9.f32[0]);
    v19 = vmul_n_f32(v14, a9.f32[0]);
    v20 = vmul_n_f32(v15, a9.f32[0]);
    v21 = vmul_lane_f32(v14, *(float32x2_t *)a9.f32, 1);
    v22 = vmul_lane_f32(v15, *(float32x2_t *)a9.f32, 1);
    v23 = vmul_laneq_f32(v15, a9, 2);
    __asm { FMOV            V3.2S, #1.0 }
    *(float32x2_t *)a5.f32 = vsub_f32(*(float32x2_t *)_Q3.f32, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a3, *(float32x2_t *)a9.f32), 0));
    *(float32x2_t *)a9.f32 = vadd_f32(v18, v23);
    _Q3.i32[0] = vsub_f32(v19, v22).u32[0];
    v28 = (int8x8_t)vsub_f32(v18, v23);
    v29 = (int8x8_t)vsub_f32(*(float32x2_t *)a5.f32, v17);
    LODWORD(v30) = vadd_f32(v21, v20).u32[0];
    v31 = (float32x2_t)vext_s8((int8x8_t)vadd_f32(v19, v22), (int8x8_t)vsub_f32(v21, v20), 4uLL);
    a5.i64[1] = vsub_f32(*(float32x2_t *)a5.f32, v16).u32[0];
    v17.f32[0] = (float)(1.0 - v16.f32[1]) - v17.f32[1];
    *(_DWORD *)(a1 + 48) = 0;
    v32 = a5.f32[2];
    v33 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a9.f32, 0);
    v33.i32[0] = v17.i32[0];
    v34 = (float32x2_t)vext_s8(v28, v29, 4uLL);
  }
  *(float32x2_t *)(a1 + 12) = v33;
  *(_DWORD *)(a1 + 20) = _Q3.i32[0];
  *(float32x2_t *)(a1 + 24) = v34;
  *(float *)(a1 + 32) = v30;
  *(float32x2_t *)(a1 + 36) = v31;
  *(float *)(a1 + 44) = v32;
  a5.i64[0] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 48) = a5.i64[0];
  v35 = *(float *)(a3 + 24);
  *(float *)(a1 + 56) = v35;
  switch(*(_DWORD *)a2)
  {
    case 0:
      a5.f32[2] = v35;
      *(float *)&a4 = *(float *)(a2 + 4) + *(float *)&a4;
      v36 = vmulq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0), (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x3F8147AEu));
      v37 = vsubq_f32(a5, v36);
      v38 = (int8x16_t)vaddq_f32(a5, v36);
      v37.i32[3] = v38.i32[0];
      *(float32x4_t *)(a1 + 72) = v37;
      *(_QWORD *)(a1 + 88) = vextq_s8(v38, v38, 4uLL).u64[0];
      *(_DWORD *)(a1 + 96) = v38.i32[3];
      v38.i32[0] = *(_DWORD *)(a2 + 4);
      v39 = *(_DWORD *)(a3 + 24);
      *(_QWORD *)(a1 + 100) = *(_QWORD *)(a3 + 16);
      *(_DWORD *)(a1 + 108) = v39;
      *(_DWORD *)(a1 + 112) = v38.i32[0];
      break;
    case 2:
      v40 = fabsf(_Q3.f32[0]);
      v33.i32[0] = *(_DWORD *)(a1 + 12);
      v41 = *(float *)(a2 + 8);
      *(float32x2_t *)_Q3.f32 = vmul_n_f32(vabs_f32(v33), v41);
      _Q3.f32[2] = v40 * v41;
      a5.f32[2] = v35;
      *(float *)&a4 = *(float *)(a2 + 4) + *(float *)&a4;
      v42 = vmulq_f32(vaddq_f32(_Q3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0)), (float32x4_t)vdupq_n_s32(0x3F8147AEu));
      v43 = vsubq_f32(a5, v42);
      v44 = (int8x16_t)vaddq_f32(a5, v42);
      v43.i32[3] = v44.i32[0];
      *(float32x4_t *)(a1 + 72) = v43;
      *(_QWORD *)(a1 + 88) = vextq_s8(v44, v44, 4uLL).u64[0];
      *(_DWORD *)(a1 + 96) = v44.i32[3];
      v44.i32[0] = *(_DWORD *)a3;
      v45 = *(float *)(a3 + 4);
      v43.f32[0] = *(float *)v44.i32 + *(float *)v44.i32;
      v47 = *(float *)(a3 + 8);
      v46 = *(float *)(a3 + 12);
      v48 = v46 + v46;
      *(float *)v44.i32 = (float)((float)(v46 * (float)(v46 + v46)) + -1.0)
                        + (float)(*(float *)v44.i32 * (float)(*(float *)v44.i32 + *(float *)v44.i32));
      v49 = (float)(v43.f32[0] * v45) + (float)(v47 * (float)(v46 + v46));
      v50 = (float)(v43.f32[0] * v47) - (float)(v45 * v48);
      v43.i32[0] = *(_DWORD *)(a2 + 8);
      *(float *)v44.i32 = *(float *)v44.i32 * v43.f32[0];
      v51 = v43.f32[0] * v49;
      v52 = v50 * v43.f32[0];
      v53 = *(float *)(a3 + 20) + v51;
      v54 = v52 + *(float *)(a3 + 24);
      *(float *)(a1 + 100) = *(float *)(a3 + 16) + *(float *)v44.i32;
      *(float *)(a1 + 104) = v53;
      *(float *)(a1 + 108) = v54;
      v55 = *(float *)(a3 + 20) - v51;
      v56 = *(float *)(a3 + 24);
      *(float *)(a1 + 112) = *(float *)(a3 + 16) - *(float *)v44.i32;
      *(float *)(a1 + 116) = v55;
      *(float *)(a1 + 120) = v56 - v52;
      v44.i32[0] = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a1 + 124) = v44.i32[0];
      *(_DWORD *)(a1 + 60) = v43.i32[0];
      v57 = v43.f32[0] + *(float *)v44.i32;
      v58 = *(float *)v44.i32 * 1.01;
      *(float *)a1 = v57 * 1.01;
      *(float *)(a1 + 4) = v58;
      goto LABEL_8;
    case 3:
      v59 = (float32x4_t)vdupq_n_s32(0x3F8147AEu);
      v60 = vmulq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0), vaddq_f32(vaddq_f32(vabsq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 12), *(float *)(a2 + 4))), vabsq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 24), *(float *)(a2 + 8)))), vabsq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 36), *(float *)(a2 + 12))))), v59);
      v61 = *(float32x4_t *)(a1 + 48);
      v62 = vsubq_f32(v61, v60);
      v63 = (int8x16_t)vaddq_f32(v61, v60);
      v62.i32[3] = v63.i32[0];
      *(float32x4_t *)(a1 + 72) = v62;
      *(_QWORD *)(a1 + 88) = vextq_s8(v63, v63, 4uLL).u64[0];
      *(_DWORD *)(a1 + 96) = v63.i32[3];
      *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 4);
      *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 12);
      v58 = *(float *)(a2 + 12) * 1.01;
      *(float32x2_t *)a1 = vmul_f32(*(float32x2_t *)(a2 + 4), *(float32x2_t *)v59.f32);
LABEL_8:
      *(float *)(a1 + 8) = v58;
      break;
    case 4:
      _X2 = *(float **)(a2 + 32);
      __asm { PRFM            #0, [X2,#0x20] }
      v67 = *(float *)(a2 + 4);
      v66 = *(float *)(a2 + 8);
      v68 = *(float *)(a2 + 12);
      if (v67 == 1.0 && v66 == 1.0 && v68 == 1.0)
      {
        v69 = _X2[8];
        v70 = _X2[9];
        v71 = _X2[10];
        v72 = _X2[11];
        *(float32x2_t *)a5.f32 = vadd_f32(*(float32x2_t *)a5.f32, vadd_f32(vadd_f32(vmul_n_f32(v33, v69), vmul_n_f32(v34, v70)), vmul_n_f32(v31, v71)));
        a5.f32[2] = v35 + (float)((float)((float)(_Q3.f32[0] * v69) + (float)(v30 * v70)) + (float)(v32 * v71));
        *(float32x2_t *)a9.f32 = vmul_n_f32(v33, v72);
        v73 = _Q3.f32[0] * v72;
        v74 = _X2[12];
        v75 = _X2[13];
        v76 = vmul_n_f32(v34, v74);
        v77 = v30 * v74;
        v78 = vmul_n_f32(v31, v75);
        v79 = v32 * v75;
      }
      else
      {
        v80 = *(float *)(a2 + 16);
        v81 = *(float *)(a2 + 20);
        v82 = *(float *)(a2 + 24);
        v83 = *(float *)(a2 + 28);
        v84 = v81 + v81;
        v85 = v82 + v82;
        v86 = v81 * (float)(v81 + v81);
        v87 = v82 * (float)(v82 + v82);
        v88 = (float)(v80 + v80) * v81;
        v89 = (float)(v80 + v80) * v82;
        v90 = (float)(v80 + v80) * v83;
        v91 = v84 * v82;
        v92 = v84 * v83;
        v93 = v85 * v83;
        *(float *)&v94 = (float)(1.0 - v86) - v87;
        v95 = v88 + v93;
        v96 = v89 - v92;
        *(float *)v97.i32 = v88 - v93;
        v98 = 1.0 - (float)(v80 * (float)(v80 + v80));
        v99.f32[0] = v98 - v87;
        v100 = v91 + v90;
        v101 = v89 + v92;
        v102 = v91 - v90;
        v103 = v98 - v86;
        v104 = v66 * (float)(v91 - v90);
        v105 = (float)(v96 * (float)(v68 * (float)(v98 - v86)))
             + (float)((float)(*(float *)&v94 * (float)(v67 * v101)) + (float)(v95 * v104));
        v106 = (float)(v100 * (float)(v68 * (float)(v98 - v86)))
             + (float)((float)(*(float *)v97.i32 * (float)(v67 * v101)) + (float)(v99.f32[0] * v104));
        v107 = (float)(v103 * (float)(v68 * v103)) + (float)((float)(v101 * (float)(v67 * v101)) + (float)(v102 * v104));
        v108 = v32 * v106;
        v109 = vmul_n_f32((float32x2_t)__PAIR64__(v94, v97.u32[0]), v67);
        v97.i32[1] = v99.i32[0];
        v99.f32[1] = v95;
        v110 = vmul_n_f32(v99, v66);
        v111 = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v96), LODWORD(v100)), v68);
        v112 = vadd_f32(vmul_lane_f32(v109, (float32x2_t)__PAIR64__(v94, v97.u32[0]), 1), vmul_n_f32(v110, v95));
        v113 = (float32x2_t)__PAIR64__(v109.u32[1], v110.u32[0]);
        v114 = vmul_n_f32(v109, v101);
        v109.i32[1] = v110.i32[1];
        v115 = vadd_f32(vmul_n_f32(v111, v96), v112);
        v116 = vadd_f32(vmul_n_f32(v111, v100), vadd_f32(vmul_f32((float32x2_t)vrev64_s32(v97), v113), vmul_f32((float32x2_t)v97, v109)));
        v117 = vadd_f32(vmul_n_f32(v111, v103), vadd_f32(v114, vmul_n_f32(v110, v102)));
        v118 = (float32x2_t)__PAIR64__(v33.u32[1], v34.u32[0]);
        v33.i32[1] = v34.i32[1];
        v119 = vadd_f32(vmul_n_f32(v31, v105), vadd_f32(vmul_f32(v118, v115), vmul_f32(v33, (float32x2_t)vrev64_s32((int32x2_t)v115))));
        v110.f32[0] = (float)(v32 * v105) + (float)(vmuls_lane_f32(_Q3.f32[0], v115, 1) + (float)(v30 * v115.f32[0]));
        v120 = vadd_f32(vmul_n_f32(v31, v106), vadd_f32(vmul_f32(v118, v116), vmul_f32(v33, (float32x2_t)vrev64_s32((int32x2_t)v116))));
        v121 = v108 + (float)(vmuls_lane_f32(_Q3.f32[0], v116, 1) + (float)(v30 * v116.f32[0]));
        v122 = vadd_f32(vmul_n_f32(v31, v107), vadd_f32(vmul_f32(v118, v117), vmul_f32(v33, (float32x2_t)vrev64_s32((int32x2_t)v117))));
        v123 = (float)(v32 * v107) + (float)(vmuls_lane_f32(_Q3.f32[0], v117, 1) + (float)(v30 * v117.f32[0]));
        v124 = _X2[8];
        v125 = _X2[9];
        v126 = _X2[10];
        v117.f32[0] = _X2[11];
        *(float32x2_t *)a5.f32 = vadd_f32(*(float32x2_t *)a5.f32, vadd_f32(vmul_n_f32(v122, v126), vadd_f32(vmul_n_f32(v119, v124), vmul_n_f32(v120, v125))));
        a5.f32[2] = v35 + (float)((float)(v126 * v123) + (float)((float)(v124 * v110.f32[0]) + (float)(v125 * v121)));
        *(float32x2_t *)a9.f32 = vmul_n_f32(v119, v117.f32[0]);
        v73 = v117.f32[0] * v110.f32[0];
        v127 = _X2[12];
        v128 = _X2[13];
        v76 = vmul_n_f32(v120, v127);
        v77 = v127 * v121;
        v78 = vmul_n_f32(v122, v128);
        v79 = v128 * v123;
      }
      *(float32x2_t *)a9.f32 = vadd_f32(vadd_f32(vabs_f32(*(float32x2_t *)a9.f32), vabs_f32(v76)), vabs_f32(v78));
      a9.f32[2] = (float)(fabsf(v73) + fabsf(v77)) + fabsf(v79);
      v135 = (float32x4_t)vdupq_n_s32(0x3F8147AEu);
      v129 = vmulq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0), a9), v135);
      v130 = vsubq_f32(a5, v129);
      v131 = (int8x16_t)vaddq_f32(a5, v129);
      v130.i32[3] = v131.i32[0];
      *(float32x4_t *)(a1 + 72) = v130;
      *(_QWORD *)(a1 + 88) = vextq_s8(v131, v131, 4uLL).u64[0];
      *(_DWORD *)(a1 + 96) = v131.i32[3];
      physx::Gu::computeOBBAroundConvex((float *)v136, (float *)a2, _X2, (float *)a3);
      v132 = v136[1];
      *(_OWORD *)(a1 + 12) = v136[0];
      *(_OWORD *)(a1 + 28) = v132;
      v133 = v138 * 1.01;
      *(float32x2_t *)a1 = vmul_f32(v137, *(float32x2_t *)v135.f32);
      *(float *)(a1 + 8) = v133;
      *(_OWORD *)(a1 + 44) = v136[2];
      break;
    default:
      break;
  }
  *(_WORD *)(a1 + 96) = v12 < 1.0;
  *(_WORD *)(a1 + 98) = *(_DWORD *)a2;
  return a1;
}

float physx::Gu::Box::create(physx::Gu::Box *this, const Capsule *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float32x2_t v15;
  float v16;
  float v17;
  float result;

  v2 = (float)(*((float *)a2 + 2) + *((float *)a2 + 5)) * 0.5;
  *(float32x2_t *)((char *)this + 36) = vmul_f32(vadd_f32(*(float32x2_t *)a2, *(float32x2_t *)((char *)a2 + 12)), (float32x2_t)0x3F0000003F000000);
  *((float *)this + 11) = v2;
  v3 = *((float *)a2 + 3) - *(float *)a2;
  v4 = *((float *)a2 + 4) - *((float *)a2 + 1);
  v5 = *((float *)a2 + 5) - *((float *)a2 + 2);
  v6 = sqrtf((float)((float)(v4 * v4) + (float)(v3 * v3)) + (float)(v5 * v5));
  if (v6 == 0.0)
  {
    *(_OWORD *)this = xmmword_2260E5F10;
    *((_OWORD *)this + 1) = xmmword_2260E5F10;
    *((_DWORD *)this + 8) = 1065353216;
  }
  else
  {
    v7 = v3 * (float)(1.0 / v6);
    v8 = v4 * (float)(1.0 / v6);
    v9 = v5 * (float)(1.0 / v6);
    *(float *)this = v7;
    *((float *)this + 1) = v8;
    *((float *)this + 2) = v9;
    if (fabsf(v8) <= 0.9999)
    {
      v13 = -v7;
      *((float *)this + 3) = v9;
      *((_DWORD *)this + 4) = 0;
      *((float *)this + 5) = -v7;
      v14 = sqrtf((float)((float)(v9 * v9) + 0.0) + (float)(v7 * v7));
      v15.f32[0] = v9;
      v16 = v13;
      if (v14 > 0.0)
      {
        v15 = vmul_n_f32((float32x2_t)LODWORD(v9), 1.0 / v14);
        *(float32x2_t *)((char *)this + 12) = v15;
        v16 = (float)(1.0 / v14) * v13;
        *((float *)this + 5) = v16;
      }
      *((float *)this + 6) = v8 * v16;
      *((float *)this + 7) = (float)(v16 * v13) + (float)(v9 * v15.f32[0]);
      *((float *)this + 8) = -(float)(v8 * v15.f32[0]);
    }
    else
    {
      v10 = -v8;
      *(_OWORD *)((char *)this + 12) = xmmword_2260E5F10;
      *((float *)this + 7) = v9;
      *((float *)this + 8) = -v8;
      v11 = sqrtf((float)(v9 * v9) + (float)(v8 * v8));
      if (v11 > 0.0)
      {
        v12 = 1.0 / v11;
        *((float *)this + 6) = v12 * 0.0;
        *((float *)this + 7) = v9 * v12;
        *((float *)this + 8) = v12 * v10;
      }
    }
  }
  v17 = *((float *)a2 + 6);
  result = v17 + (float)(v6 * 0.5);
  *((float *)this + 12) = result;
  *((float *)this + 13) = v17;
  *((float *)this + 14) = v17;
  return result;
}

float physx::Gu::computeOBBPoints(float *a1, float *a2, float *a3, float *a4, float *a5, float *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float result;

  v6 = a3[1];
  v7 = *a3 * *a4;
  v8 = *a3 * a4[1];
  v9 = *a3 * a4[2];
  v10 = v6 * *a5;
  v11 = v6 * a5[1];
  v12 = v6 * a5[2];
  v13 = a3[2];
  v14 = v13 * *a6;
  v15 = v13 * a6[1];
  v16 = v13 * a6[2];
  v17 = *a2 - v7;
  v18 = a2[1] - v8;
  v19 = a2[2] - v9;
  a1[21] = v17;
  a1[22] = v18;
  a1[12] = v17;
  a1[13] = v18;
  a1[9] = v17;
  a1[10] = v18;
  *a1 = v17;
  a1[1] = v18;
  v20 = *a2;
  v21 = a2[1];
  v22 = v11 + v15;
  v23 = (float)(v11 + v15) + v18;
  a1[23] = v19;
  v24 = v11 - v15;
  a1[14] = v19;
  a1[11] = v19;
  v25 = v7 + v20;
  a1[2] = v19;
  v26 = v8 + v21;
  v27 = v9 + a2[2];
  *a1 = v17 - (float)(v10 + v14);
  a1[1] = v18 - v22;
  a1[2] = v19 - (float)(v12 + v16);
  a1[3] = v25 - (float)(v10 + v14);
  a1[4] = v26 - v22;
  a1[5] = v27 - (float)(v12 + v16);
  a1[18] = (float)(v10 + v14) + v25;
  a1[19] = v22 + v26;
  a1[20] = (float)(v12 + v16) + v27;
  a1[21] = (float)(v10 + v14) + v17;
  a1[22] = v23;
  a1[23] = (float)(v12 + v16) + v19;
  v28 = v10 - v14;
  v29 = v12 - v16;
  a1[6] = v28 + v25;
  a1[7] = v24 + v26;
  a1[8] = v29 + v27;
  a1[9] = v28 + v17;
  a1[10] = v24 + v18;
  a1[11] = v29 + v19;
  a1[12] = v17 - v28;
  a1[13] = v18 - v24;
  a1[14] = v19 - v29;
  a1[15] = v25 - v28;
  result = v26 - v24;
  a1[16] = v26 - v24;
  a1[17] = v27 - v29;
  return result;
}

uint64_t physx::Gu::computeBoxAroundCapsule(uint64_t this, const Capsule *a2, physx::Gu::Box *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;

  v3 = (float)(*(float *)(this + 8) + *(float *)(this + 20)) * 0.5;
  *(float32x2_t *)((char *)a2 + 36) = vmul_f32(vadd_f32(*(float32x2_t *)this, *(float32x2_t *)(this + 12)), (float32x2_t)0x3F0000003F000000);
  *((float *)a2 + 11) = v3;
  v4 = *(float *)(this + 4) - *(float *)(this + 16);
  v5 = sqrtf((float)((float)(v4 * v4)+ (float)((float)(*(float *)this - *(float *)(this + 12))* (float)(*(float *)this - *(float *)(this + 12))))+ (float)((float)(*(float *)(this + 8) - *(float *)(this + 20))* (float)(*(float *)(this + 8) - *(float *)(this + 20))));
  v6 = *(float *)(this + 24);
  *((float *)a2 + 12) = v6 + (float)(v5 * 0.5);
  *((float *)a2 + 13) = v6;
  *((float *)a2 + 14) = v6;
  v7 = 0.0;
  if (v5 == 0.0)
  {
    v8 = (float32x2_t)0x3F80000000000000;
    v9 = 1.0;
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
    v14 = 1.0;
  }
  else
  {
    v9 = *(float *)(this + 12) - *(float *)this;
    v10 = *(float *)(this + 16) - *(float *)(this + 4);
    v11 = *(float *)(this + 20) - *(float *)(this + 8);
    v15 = sqrtf((float)((float)(v10 * v10) + (float)(v9 * v9)) + (float)(v11 * v11));
    if (v15 > 0.0)
    {
      v16 = 1.0 / v15;
      v9 = v9 * v16;
      v10 = v10 * v16;
      v11 = v11 * v16;
    }
    if (fabsf(v10) <= 0.9999)
    {
      v19 = -v9;
      v20 = sqrtf((float)((float)(v11 * v11) + 0.0) + (float)(v9 * v9));
      v8 = (float32x2_t)LODWORD(v11);
      if (v20 <= 0.0)
      {
        v7 = -v9;
      }
      else
      {
        v21 = 1.0 / v20;
        v8 = vmul_n_f32((float32x2_t)LODWORD(v11), v21);
        v7 = v21 * v19;
      }
      v12 = v10 * v7;
      v13 = vmlas_n_f32(v7 * v19, v11, v8.f32[0]);
      v14 = (float)-v10 * v8.f32[0];
    }
    else
    {
      v14 = -v10;
      v17 = sqrtf((float)(v11 * v11) + (float)(v10 * v10));
      v8 = (float32x2_t)1065353216;
      if (v17 <= 0.0)
      {
        v12 = 0.0;
        v13 = v11;
      }
      else
      {
        v18 = 1.0 / v17;
        v7 = 0.0;
        v12 = (float)(1.0 / v17) * 0.0;
        v13 = v11 * v18;
        v14 = v18 * v14;
      }
    }
  }
  *(float *)a2 = v9;
  *((float *)a2 + 1) = v10;
  *((float *)a2 + 2) = v11;
  *(float32x2_t *)((char *)a2 + 12) = v8;
  *((float *)a2 + 5) = v7;
  *((float *)a2 + 6) = v12;
  *((float *)a2 + 7) = v13;
  *((float *)a2 + 8) = v14;
  return this;
}

uint64_t sweepCapsule_BoxGeom_Precise(uint64_t a1, uint64_t a2, int32x4_t a3, uint64_t a4, uint64_t a5, float32x2_t *a6, float32x2_t *a7, uint64_t a8, __int16 *a9)
{
  float v11;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  float *v37;
  uint64_t result;
  float v39;
  float v40;
  float v41;
  float v42;
  __int16 v43;
  float *v44;
  float v45;
  unsigned int v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float32x2_t v74;
  _QWORD v75[2];
  __int32 v76;
  __int16 v77;
  float32x2_t v78;
  float v79;
  __int16 v80;
  float32x2_t v81;
  _BYTE v82[12];
  __int128 v83;
  _BYTE v84[20];
  int v85;

  v11 = *(float *)a3.i32;
  if (a6->f32[0] == a6[1].f32[1] && a6->f32[1] == a6[2].f32[0] && a6[1].f32[0] == a6[2].f32[1])
  {
    v16 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2, 1);
    v17 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 2);
    v18 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 3);
    _Q5 = vaddq_f32(*(float32x4_t *)a2, *(float32x4_t *)a2);
    v20 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a2, *(float32x2_t *)_Q5.f32), 0);
    v21 = vmul_lane_f32(v16, *(float32x2_t *)_Q5.f32, 1);
    v22 = vmul_laneq_f32(v17, _Q5, 2);
    v23 = vmul_n_f32(v16, _Q5.f32[0]);
    v24 = vmul_n_f32(v17, _Q5.f32[0]);
    v25 = vmul_n_f32(v18, _Q5.f32[0]);
    v26 = vmul_lane_f32(v17, *(float32x2_t *)_Q5.f32, 1);
    v27 = vmul_lane_f32(v18, *(float32x2_t *)_Q5.f32, 1);
    v28 = vmul_laneq_f32(v18, _Q5, 2);
    __asm { FMOV            V5.2S, #1.0 }
    v33 = vsub_f32(*(float32x2_t *)_Q5.f32, v20);
    LODWORD(v34) = vsub_f32(v24, v27).u32[0];
    LODWORD(v35) = vadd_f32(v26, v25).u32[0];
    v81.f32[0] = (float)(1.0 - v21.f32[1]) - v22.f32[1];
    v81.i32[1] = vadd_f32(v23, v28).u32[0];
    HIDWORD(v34) = vsub_f32(v23, v28).i32[1];
    *(_QWORD *)v82 = v34;
    *(_DWORD *)&v82[8] = vsub_f32(v33, v22).u32[0];
    HIDWORD(v35) = vadd_f32(v24, v27).i32[1];
    *(_QWORD *)&v83 = v35;
    *((int32x2_t *)&v83 + 1) = vzip1_s32((int32x2_t)vsub_f32(v26, v25), (int32x2_t)vsub_f32(v33, v21));
    *(_DWORD *)v84 = *(_DWORD *)(a2 + 16);
    *(_QWORD *)&v36 = *(_QWORD *)(a2 + 20);
    *((_QWORD *)&v36 + 1) = *(_QWORD *)(a1 + 4);
    *(_OWORD *)&v84[4] = v36;
    v85 = *(_DWORD *)(a1 + 12);
    LODWORD(v36) = a6[3].i32[0];
    v37 = (float *)(a8 + 48);
    v80 = *a9;
    result = physx::Gu::sweepBoxSphere((Sphere *)&v81, a6, a7, (float *)(a8 + 48), (float *)(a8 + 36), &v80, *(float *)&v36, v11);
    if (!(_DWORD)result)
      return result;
    v39 = -*(float *)(a8 + 44);
    *(float32x2_t *)(a8 + 36) = vneg_f32(*(float32x2_t *)(a8 + 36));
    *(float *)(a8 + 44) = v39;
    *(_WORD *)(a8 + 20) = 2;
    if ((*(_BYTE *)a9 & 1) == 0)
      return 1;
    v40 = *v37;
    if (*v37 == 0.0)
      return 1;
    v41 = (float)(v40 * a7[1].f32[0]) + a6[1].f32[0];
    v74 = vadd_f32(vmul_n_f32(*a7, v40), *a6);
    *(float *)v75 = v41;
    physx::Gu::distancePointBoxSquared((float *)&v74, (float *)v84, (uint64_t)&v84[12], (float *)&v81, (uint64_t)&v78);
    v42 = (float)((float)((float)(v78.f32[0] * *(float *)v82) + (float)(v78.f32[1] * *(float *)&v83))
                + (float)(v79 * *((float *)&v83 + 3)))
        + *(float *)&v84[8];
    *(float32x2_t *)(a8 + 24) = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(v81, v78.f32[0]), vmul_n_f32(*(float32x2_t *)&v82[4], v78.f32[1])), vmul_n_f32(*(float32x2_t *)((char *)&v83 + 4), v79)), *(float32x2_t *)v84);
    *(float *)(a8 + 32) = v42;
    v43 = 3;
    goto LABEL_12;
  }
  v44 = (float *)(a8 + 48);
  v77 = *a9;
  result = physx::Gu::sweepCapsuleBox((uint64_t)a6, a2, a1 + 4, a7, a8 + 24, (float *)(a8 + 48), a8 + 36, &v77, a3);
  if (!(_DWORD)result)
    return result;
  *(_WORD *)(a8 + 20) = 2;
  if ((*a9 & 1) != 0)
  {
    v45 = *v44;
    if (*v44 != 0.0)
    {
      v76 = a6[3].i32[0];
      *(float *)&v46 = v45 * a7[1].f32[0];
      v47 = vmul_n_f32(*a7, v45);
      v48 = (float32x2_t)vrev64_s32((int32x2_t)v47);
      v49 = vadd_f32(a6[1], (float32x2_t)__PAIR64__(v48.u32[1], v46));
      v74 = vadd_f32(*a6, v47);
      v75[0] = v49;
      v48.i32[1] = v46;
      v75[1] = vadd_f32(a6[2], v48);
      v50 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2, 1);
      v51 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 2);
      v52 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 3);
      _Q4 = vaddq_f32(*(float32x4_t *)a2, *(float32x4_t *)a2);
      v54 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a2, *(float32x2_t *)_Q4.f32), 0);
      v55 = vmul_lane_f32(v50, *(float32x2_t *)_Q4.f32, 1);
      v56 = vmul_laneq_f32(v51, _Q4, 2);
      v57 = vmul_n_f32(v50, _Q4.f32[0]);
      v58 = vmul_n_f32(v51, _Q4.f32[0]);
      v59 = vmul_n_f32(v52, _Q4.f32[0]);
      v60 = vmul_lane_f32(v51, *(float32x2_t *)_Q4.f32, 1);
      v61 = vmul_lane_f32(v52, *(float32x2_t *)_Q4.f32, 1);
      v62 = vmul_laneq_f32(v52, _Q4, 2);
      __asm { FMOV            V4.2S, #1.0 }
      v63 = vsub_f32(*(float32x2_t *)_Q4.f32, v54);
      LODWORD(v64) = vsub_f32(v58, v61).u32[0];
      LODWORD(v65) = vadd_f32(v60, v59).u32[0];
      v81.f32[0] = (float)(1.0 - v55.f32[1]) - v56.f32[1];
      v81.i32[1] = vadd_f32(v57, v62).u32[0];
      HIDWORD(v64) = vsub_f32(v57, v62).i32[1];
      *(_QWORD *)v82 = v64;
      *(_DWORD *)&v82[8] = vsub_f32(v63, v56).u32[0];
      HIDWORD(v65) = vadd_f32(v58, v61).i32[1];
      *(_QWORD *)&v83 = v65;
      *((int32x2_t *)&v83 + 1) = vzip1_s32((int32x2_t)vsub_f32(v60, v59), (int32x2_t)vsub_f32(v63, v55));
      *(_DWORD *)v84 = *(_DWORD *)(a2 + 16);
      *(_QWORD *)&v66 = *(_QWORD *)(a2 + 20);
      *((_QWORD *)&v66 + 1) = *(_QWORD *)(a1 + 4);
      *(_OWORD *)&v84[4] = v66;
      v85 = *(_DWORD *)(a1 + 12);
      physx::Gu::distanceSegmentBoxSquared((float *)&v74, (float *)v75 + 1, (float *)v84, (float32x2_t *)&v84[12], (float *)&v81, 0, &v78);
      v68 = *(float *)(a2 + 8);
      v67 = *(float *)(a2 + 12);
      v69 = (float)(v67 * v67) + -0.5;
      v70 = *(float *)(a2 + 4);
      v71 = (float)((float)((float)(v78.f32[1] + v78.f32[1]) * v70)
                  + (float)(*(float *)a2 * (float)(v78.f32[0] + v78.f32[0])))
          + (float)(v68 * (float)(v79 + v79));
      v72 = *(float *)(a2 + 20)
          + (float)((float)((float)(v67
                                  * (float)((float)(v68 * (float)(v78.f32[0] + v78.f32[0]))
                                          - (float)(*(float *)a2 * (float)(v79 + v79))))
                          + (float)((float)(v78.f32[1] + v78.f32[1]) * v69))
                  + (float)(v70 * v71));
      v73 = *(float *)(a2 + 24)
          + (float)((float)((float)(v67
                                  * (float)((float)(*(float *)a2 * (float)(v78.f32[1] + v78.f32[1]))
                                          - (float)(v70 * (float)(v78.f32[0] + v78.f32[0]))))
                          + (float)((float)(v79 + v79) * v69))
                  + (float)(v68 * v71));
      *(float *)(a8 + 24) = *(float *)(a2 + 16)
                          + (float)((float)((float)(v67
                                                  * (float)((float)(v70 * (float)(v79 + v79))
                                                          - (float)(v68 * (float)(v78.f32[1] + v78.f32[1]))))
                                          + (float)((float)(v78.f32[0] + v78.f32[0]) * v69))
                                  + (float)(*(float *)a2 * v71));
      *(float *)(a8 + 28) = v72;
      *(float *)(a8 + 32) = v73;
      v43 = *(_WORD *)(a8 + 20) | 1;
LABEL_12:
      *(_WORD *)(a8 + 20) = v43;
    }
  }
  return 1;
}

uint64_t sweepBox_SphereGeom_Precise(uint64_t a1, float32x2_t *a2, float a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, float32x2_t *a8, float32x2_t *a9, __int16 *a10)
{
  float v15;
  __int128 v16;
  float v17;
  float v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  float32x2_t v23;
  float32_t v24;
  __int16 v26;
  float32x2_t v27;
  float v28;
  float32x2_t v29;
  float v30;
  _BYTE v31[32];
  float v32;
  float32x2_t v33;
  float v34;
  uint64_t v35;
  int v36;

  v15 = *(float *)(a7 + 44) - a2[3].f32[0];
  v16 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)v31 = *(_OWORD *)a7;
  *(_OWORD *)&v31[16] = v16;
  v32 = *(float *)(a7 + 32);
  v33 = vsub_f32(*(float32x2_t *)(a7 + 36), a2[2]);
  v34 = v15;
  v35 = *(_QWORD *)(a7 + 48);
  v36 = *(_DWORD *)(a7 + 56);
  v17 = *(float *)(a1 + 4) + a4;
  v29 = 0;
  v30 = 0.0;
  v18 = -a8[1].f32[0];
  v27 = vneg_f32(*a8);
  v28 = v18;
  v19 = (float *)&a9[6];
  v26 = *a10;
  v20 = physx::Gu::sweepBoxSphere((Sphere *)v31, &v29, &v27, (float *)&a9[6], (float *)&a9[4] + 1, &v26, v17, a3);
  if ((_DWORD)v20)
  {
    a9[2].i16[2] = 2;
    if ((*a10 & 1) != 0)
    {
      v21 = *v19;
      if (*v19 != 0.0)
      {
        v22 = v21 * a8[1].f32[0];
        v23 = vmul_n_f32(*a8, v21);
        v29 = vneg_f32(v23);
        v30 = -v22;
        physx::Gu::distancePointBoxSquared((float *)&v29, (float *)&v33, (uint64_t)&v35, (float *)v31, (uint64_t)&v27);
        v24 = v22
            + (float)((float)((float)((float)(v27.f32[0] * *(float *)&v31[8]) + (float)(v27.f32[1] * *(float *)&v31[20]))
                            + (float)(v28 * v32))
                    + *(float *)(a7 + 44));
        a9[3] = vadd_f32(v23, vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v31, v27.f32[0]), vmul_n_f32(*(float32x2_t *)&v31[12], v27.f32[1])), vmul_n_f32(*(float32x2_t *)&v31[24], v28)), *(float32x2_t *)(a7 + 36)));
        a9[4].f32[0] = v24;
        a9[2].i16[2] = 3;
      }
    }
  }
  return v20;
}

uint64_t sweepBox_CapsuleGeom_Precise(uint64_t a1, float32x2_t *a2, int32x4_t a3, uint64_t a4, __int128 *a5, uint64_t a6, float32x2_t *a7, uint64_t a8, __int16 *a9)
{
  float v13;
  __int128 v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  __int16 v32;
  float32x2_t v33;
  float v34;
  float32x2_t v35;
  float v36;
  __int128 v37;
  float32x2_t v38;
  float v39;
  float v40[3];
  float v41[4];
  _BYTE v42[32];
  float v43;
  float32x2_t v44;
  float v45;
  float32x2_t v46;
  int v47;

  v13 = *(float *)(a6 + 44) - a2[3].f32[0];
  v14 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)v42 = *(_OWORD *)a6;
  *(_OWORD *)&v42[16] = v14;
  v43 = *(float *)(a6 + 32);
  v44 = vsub_f32(*(float32x2_t *)(a6 + 36), a2[2]);
  v45 = v13;
  v46 = *(float32x2_t *)(a6 + 48);
  v47 = *(_DWORD *)(a6 + 56);
  LODWORD(v14) = a2->i32[0];
  v15 = a2->f32[1];
  v16 = *(float *)&v14 + *(float *)&v14;
  v18 = a2[1].f32[0];
  v17 = a2[1].f32[1];
  v19 = v17 + v17;
  *(float *)&v14 = (float)((float)(v17 * (float)(v17 + v17)) + -1.0)
                 + (float)(*(float *)&v14 * (float)(*(float *)&v14 + *(float *)&v14));
  v20 = (float)(v16 * v15) + (float)(v18 * (float)(v17 + v17));
  v21 = (float)(v16 * v18) - (float)(v15 * v19);
  v23 = *(float *)(a1 + 4);
  v22 = *(float *)(a1 + 8);
  v40[0] = *(float *)&v14 * v22;
  v40[1] = v22 * v20;
  v40[2] = v21 * v22;
  v41[0] = -(float)(*(float *)&v14 * v22);
  v41[1] = -(float)(v22 * v20);
  v41[2] = -(float)(v21 * v22);
  v41[3] = v23;
  v37 = *a5;
  v38 = v44;
  v39 = v13;
  v24 = -a7[1].f32[0];
  v33 = vneg_f32(*a7);
  v34 = v24;
  v25 = (float *)(a8 + 48);
  v32 = *a9;
  v26 = physx::Gu::sweepCapsuleBox((uint64_t)v40, (uint64_t)&v37, (uint64_t)&v46, &v33, a8 + 24, (float *)(a8 + 48), (uint64_t)&v35, &v32, a3);
  if ((_DWORD)v26)
  {
    v27 = -v36;
    *(float32x2_t *)(a8 + 36) = vneg_f32(v35);
    *(float *)(a8 + 44) = v27;
    *(_WORD *)(a8 + 20) = 2;
    if ((*(_BYTE *)a9 & 1) != 0)
    {
      v28 = *v25;
      if (*v25 != 0.0)
      {
        v29 = v28 * a7[1].f32[0];
        v44 = vadd_f32(vmul_n_f32(*a7, v28), v44);
        v45 = v29 + v45;
        physx::Gu::distanceSegmentBoxSquared(v40, v41, (float *)&v44, &v46, (float *)v42, 0, &v33);
        v30 = (float)((float)((float)((float)(v33.f32[0] * *(float *)&v42[8]) + (float)(v33.f32[1] * *(float *)&v42[20]))
                            + (float)(v34 * v43))
                    + v45)
            + a2[3].f32[0];
        *(float32x2_t *)(a8 + 24) = vadd_f32(vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v42, v33.f32[0]), vmul_n_f32(*(float32x2_t *)&v42[12], v33.f32[1])), vmul_n_f32(*(float32x2_t *)&v42[24], v34)), v44), a2[2]);
        *(float *)(a8 + 32) = v30;
        *(_WORD *)(a8 + 20) |= 1u;
      }
    }
  }
  return v26;
}

float32_t sweepBox_BoxGeom_Precise(uint64_t a1, uint64_t a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6, float32x2_t *a7, float32x2_t *a8, __int16 *a9)
{
  float v11;
  __int128 v12;
  float32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  uint64_t v28;
  uint64_t v29;
  float32_t result;
  __int16 v31;
  float v32[2];
  uint64_t v33;
  unsigned __int32 v34;
  uint64_t v35;
  int32x2_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  _OWORD v41[2];
  int v42;
  float32x2_t v43;
  float v44;
  uint64_t v45;
  int v46;

  v11 = *(float *)(a6 + 44) - *(float *)(a2 + 24);
  v12 = *(_OWORD *)(a6 + 16);
  v41[0] = *(_OWORD *)a6;
  v41[1] = v12;
  v42 = *(_DWORD *)(a6 + 32);
  v43 = vsub_f32(*(float32x2_t *)(a6 + 36), *(float32x2_t *)(a2 + 16));
  v44 = v11;
  v45 = *(_QWORD *)(a6 + 48);
  v13 = *(float32x4_t *)a2;
  *(int32x2_t *)&v12 = vdup_lane_s32(*(int32x2_t *)a2, 1);
  v14 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 2);
  v15 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 3);
  v46 = *(_DWORD *)(a6 + 56);
  v16 = vaddq_f32(v13, v13);
  *(int32x2_t *)v13.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v16.f32), 0);
  v17 = vmul_lane_f32(*(float32x2_t *)&v12, *(float32x2_t *)v16.f32, 1);
  v18 = vmul_laneq_f32(v14, v16, 2);
  *(float32x2_t *)&v12 = vmul_n_f32(*(float32x2_t *)&v12, v16.f32[0]);
  v19 = vmul_n_f32(v14, v16.f32[0]);
  v20 = vmul_n_f32(v15, v16.f32[0]);
  v21 = vmul_lane_f32(v14, *(float32x2_t *)v16.f32, 1);
  v22 = vmul_lane_f32(v15, *(float32x2_t *)v16.f32, 1);
  *(float32x2_t *)v16.f32 = vmul_laneq_f32(v15, v16, 2);
  __asm { FMOV            V5.2S, #1.0 }
  *(float32x2_t *)v13.f32 = vsub_f32(_D5, *(float32x2_t *)v13.f32);
  LODWORD(v28) = vsub_f32(v19, v22).u32[0];
  LODWORD(v29) = vadd_f32(v21, v20).u32[0];
  v32[0] = (float)(1.0 - v17.f32[1]) - v18.f32[1];
  LODWORD(v32[1]) = vadd_f32(*(float32x2_t *)&v12, *(float32x2_t *)v16.f32).u32[0];
  HIDWORD(v28) = vsub_f32(*(float32x2_t *)&v12, *(float32x2_t *)&v16).i32[1];
  v33 = v28;
  v34 = vsub_f32(*(float32x2_t *)v13.f32, v18).u32[0];
  HIDWORD(v29) = vadd_f32(v19, v22).i32[1];
  v35 = v29;
  v36 = vzip1_s32((int32x2_t)vsub_f32(v21, v20), (int32x2_t)vsub_f32(*(float32x2_t *)v13.f32, v17));
  v37 = 0;
  v38 = 0;
  v39 = *(_QWORD *)(a1 + 4);
  v40 = *(_DWORD *)(a1 + 12);
  v31 = *a9;
  if (physx::Gu::sweepBoxBox((uint64_t)v41, (uint64_t)v32, a7, &v31, (uint64_t)a8, a3))
  {
    result = a8[6].f32[0];
    if (result != 0.0)
    {
      a8[3] = vadd_f32(*(float32x2_t *)(a2 + 16), a8[3]);
      result = *(float *)(a2 + 24) + a8[4].f32[0];
      a8[4].f32[0] = result;
    }
  }
  return result;
}

uint64_t sweepBox_HeightFieldGeom_Precise(float32x2_t *a1, float *a2, float a3, uint64_t a4, uint64_t a5, __int128 *a6, float32x2_t *a7, uint64_t a8, __int16 *a9)
{
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  __int128 v54;
  __int128 v55;
  int32x2_t v57;
  float v58;
  float32x2_t v59;
  float32x2_t *v60;
  _QWORD v61[4];
  unsigned __int8 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  int v66;
  __int128 v67;
  __int32 v68;
  float v69;
  __int16 v70;
  BOOL v71;
  float v72[6];
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;

  physx::Gu::computeSweptBox((uint64_t)&v73, (float *)a6 + 12, (float32x2_t *)((char *)a6 + 36), (float *)a6, a7, a3);
  if (v81 >= 0.0)
  {
    v18 = v74 - v76;
    if (v73 >= (float)-v77)
    {
      v27 = v81 + (float)((float)(v73 + 1.0) + v77);
      v28 = 0.5 / sqrtf(v27);
      v20 = v28 * (float)(v78 - v80);
      v21 = v28 * (float)(v79 - v75);
      v22 = v28 * v18;
      v24 = v27 * v28;
      goto LABEL_9;
    }
    v23 = v81 + (float)((float)(1.0 - v73) - v77);
    v19 = 0.5 / sqrtf(v23);
    v20 = v19 * (float)(v79 + v75);
    v21 = v19 * (float)(v78 + v80);
    v22 = v23 * v19;
  }
  else
  {
    v16 = v74 + v76;
    if (v73 <= v77)
    {
      v25 = (float)((float)(1.0 - v73) + v77) - v81;
      v26 = 0.5 / sqrtf(v25);
      v20 = v26 * v16;
      v21 = v25 * v26;
      v22 = v26 * (float)(v78 + v80);
      v24 = v26 * (float)(v79 - v75);
      goto LABEL_9;
    }
    v17 = (float)((float)(v73 + 1.0) - v77) - v81;
    v18 = v78 - v80;
    v19 = 0.5 / sqrtf(v17);
    v20 = v17 * v19;
    v21 = v19 * v16;
    v22 = v19 * (float)(v79 + v75);
  }
  v24 = v19 * v18;
LABEL_9:
  v29 = v21 + v21;
  v30 = v22 + v22;
  v31 = v21 * (float)(v21 + v21);
  v32 = v22 * (float)(v22 + v22);
  v33 = (float)(v20 + v20) * v21;
  v34 = (float)(v20 + v20) * v22;
  v35 = (float)(v20 + v20) * v24;
  v36 = v29 * v22;
  v37 = v29 * v24;
  v38 = v30 * v24;
  v39 = (float)(1.0 - v31) - v32;
  v40 = v33 + v38;
  v41 = v33 - v38;
  v42 = 1.0 - (float)(v20 * (float)(v20 + v20));
  v43 = v42 - v32;
  v44 = v36 + v35;
  v45 = (float)(fabsf(v39 * v85) + fabsf(v41 * v86)) + fabsf((float)(v34 + v37) * v87);
  v46 = (float)(fabsf(v40 * v85) + fabsf(v43 * v86)) + fabsf((float)(v36 - v35) * v87);
  v47 = (float)(fabsf((float)(v34 - v37) * v85) + fabsf(v44 * v86)) + fabsf((float)(v42 - v31) * v87);
  v72[0] = v82 - v45;
  v72[1] = v83 - v46;
  v72[2] = v84 - v47;
  v72[3] = v82 + v45;
  v72[4] = v83 + v46;
  v72[5] = v84 + v47;
  *(_DWORD *)(a8 + 48) = 2139095039;
  v59 = a1[1];
  v60 = a1;
  v48 = a1[3].f32[0];
  __asm { FMOV            V2.2S, #1.0 }
  v57 = vrev64_s32((int32x2_t)vdiv_f32(_D2, a1[2]));
  v58 = 1.0 / v48;
  v54 = a6[1];
  v63 = *a6;
  v64 = v54;
  v65 = a6[2];
  v66 = *((_DWORD *)a6 + 12);
  *(_QWORD *)&v55 = *(_QWORD *)((char *)a6 + 52);
  *((float32x2_t *)&v55 + 1) = *a7;
  v67 = v55;
  v68 = a7[1].i32[0];
  v69 = a3;
  v70 = *a9;
  v61[0] = &off_24ED90EC0;
  v61[1] = &v57;
  v62 = 0;
  v61[2] = a2;
  v61[3] = a8;
  v71 = (a1[3].i8[4] & 2 | v70 & 0x80) != 0;
  physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v57, a2, v72, 1, (uint64_t)v61);
  return v62;
}

float32x2_t physx::Gu::computeSweptBox(uint64_t a1, float *a2, float32x2_t *a3, float *a4, float32x2_t *a5, float a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  _BOOL4 v12;
  int v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float32x2_t result;
  _DWORD v39[3];
  _DWORD v40[3];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v7 = a5->f32[0];
  v6 = a5->f32[1];
  v8 = a5[1].f32[0];
  v9 = fabsf((float)((float)(v6 * a4[1]) + (float)(*a4 * a5->f32[0])) + (float)(a4[2] * v8));
  v10 = fabsf((float)((float)(v6 * a4[4]) + (float)(a4[3] * a5->f32[0])) + (float)(a4[5] * v8));
  *(float *)v40 = v9;
  *(float *)&v40[1] = v10;
  v11 = fabsf((float)((float)(v6 * a4[7]) + (float)(a4[6] * v7)) + (float)(a4[8] * v8));
  *(float *)&v40[2] = v11;
  v12 = v10 <= v9;
  if (v10 > v9)
    v9 = v10;
  if (v11 > v9)
    v13 = 1;
  else
    v13 = 2;
  if (v11 > v9)
    v12 = 0;
  if (*(float *)&v40[v13] < *(float *)&v40[v12])
    v12 = v13;
  v14 = &a4[3 * v12];
  v15 = v14[1];
  v16 = v14[2];
  v17 = (float)((float)(v6 * v15) + (float)(*v14 * v7)) + (float)(v16 * v8);
  v18 = v8 * v17;
  v19 = *v14 - (float)(v7 * v17);
  v20 = v15 - (float)(v6 * v17);
  v21 = v16 - v18;
  v22 = sqrtf((float)((float)(v20 * v20) + (float)(v19 * v19)) + (float)(v21 * v21));
  if (v22 > 0.0)
  {
    v23 = 1.0 / v22;
    v19 = v19 * v23;
    v20 = v20 * v23;
    v21 = v21 * v23;
  }
  v24 = 0;
  v25 = (float)(v6 * v21) - (float)(v8 * v20);
  v26 = (float)(v8 * v19) - (float)(v7 * v21);
  v27 = (float)(v7 * v20) - (float)(v6 * v19);
  *(float *)a1 = v7;
  *(float *)(a1 + 4) = v6;
  *(float *)(a1 + 8) = v8;
  *(float *)(a1 + 12) = v19;
  *(float *)(a1 + 16) = v20;
  *(float *)(a1 + 20) = v21;
  *(float *)(a1 + 24) = v25;
  *(float *)(a1 + 28) = v26;
  *(float *)(a1 + 32) = v27;
  v28 = a5->f32[0];
  v29 = a5->f32[1];
  v30 = (float)(v20 * v29) + (float)(a5->f32[0] * v19);
  v31 = a5[1].f32[0];
  *(float *)v39 = a6;
  *(float *)&v39[1] = (float)(v30 + (float)(v31 * v21)) * a6;
  *(float *)&v39[2] = (float)((float)((float)(v26 * v29) + (float)(v28 * v25)) + (float)(v31 * v27)) * a6;
  v32 = a1 + 48;
  v33 = -36;
  do
  {
    v34 = *(float *)(v32 + v33 - 12);
    v35 = *(float *)(v32 + v33 - 8);
    v36 = *(float *)(v32 + v33 - 4);
    *(float *)(v32 + v24 * 4) = (float)((float)((float)(*a2
                                                      * fabsf((float)((float)(a4[1] * v35) + (float)(*a4 * v34))+ (float)(a4[2] * v36)))+ (float)(*(float *)&v39[v24] * 0.5))+ (float)(fabsf((float)((float)(v35 * a4[4]) + (float)(a4[3] * v34))+ (float)(a4[5] * v36))* a2[1]))+ (float)(fabsf((float)((float)(v35 * a4[7]) + (float)(a4[6] * v34)) + (float)(a4[8] * v36))* a2[2]);
    ++v24;
    v33 += 12;
  }
  while (v33);
  v37 = (float)((float)(a5[1].f32[0] * a6) * 0.5) + a3[1].f32[0];
  result = vadd_f32(vmul_f32(vmul_n_f32(*a5, a6), (float32x2_t)0x3F0000003F000000), *a3);
  *(float32x2_t *)(a1 + 36) = result;
  *(float *)(a1 + 44) = v37;
  return result;
}

uint64_t physx::Gu::sweepBoxTriangles_Precise(int a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, float32x2_t *a6, uint64_t a7, unsigned int *a8, double a9, double a10, double a11, __n128 a12, double a13, double a14, double a15, __n128 a16, __int16 *a17)
{
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v31;
  uint64_t v32;
  float32x2_t v33;
  double v34;
  uint64_t v35;
  int32x2_t v36;
  double v37;
  __int128 v38;
  __int16 v40;
  float v41[2];
  uint64_t v42;
  int v43;
  uint64_t v44;
  double v45;
  int v46;
  __int128 v47;
  int v48;

  v17 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5, 1);
  a12.n128_u64[0] = (unint64_t)vdup_laneq_s32(*(int32x4_t *)a5, 2);
  v18 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a5, 3);
  _Q5 = vaddq_f32(*(float32x4_t *)a5, *(float32x4_t *)a5);
  v20 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a5, *(float32x2_t *)_Q5.f32), 0);
  v21 = vmul_lane_f32(v17, *(float32x2_t *)_Q5.f32, 1);
  a16.n128_u64[0] = (unint64_t)vmul_laneq_f32((float32x2_t)a12.n128_u64[0], _Q5, 2);
  v22 = vmul_n_f32(v17, _Q5.f32[0]);
  v23 = vmul_n_f32((float32x2_t)a12.n128_u64[0], _Q5.f32[0]);
  v24 = vmul_n_f32(v18, _Q5.f32[0]);
  a12.n128_u64[0] = (unint64_t)vmul_lane_f32((float32x2_t)a12.n128_u64[0], *(float32x2_t *)_Q5.f32, 1);
  v25 = vmul_lane_f32(v18, *(float32x2_t *)_Q5.f32, 1);
  v26 = vmul_laneq_f32(v18, _Q5, 2);
  __asm { FMOV            V5.2S, #1.0 }
  v31 = vsub_f32(*(float32x2_t *)_Q5.f32, v20);
  *(float32x2_t *)_Q5.f32 = vadd_f32(v22, v26);
  LODWORD(v32) = vsub_f32(v23, v25).u32[0];
  v33 = vsub_f32(v22, v26);
  v34 = COERCE_DOUBLE(vsub_f32(v31, (float32x2_t)a16.n128_u64[0]));
  LODWORD(v35) = vadd_f32((float32x2_t)a12.n128_u64[0], v24).u32[0];
  v36 = (int32x2_t)vsub_f32(v31, v21);
  a16.n128_u32[0] = a16.n128_u32[1];
  v21.f32[0] = (float)(1.0 - v21.f32[1]) - a16.n128_f32[1];
  v41[0] = v21.f32[0];
  v41[1] = _Q5.f32[0];
  HIDWORD(v32) = v33.i32[1];
  v42 = v32;
  v43 = LODWORD(v34);
  HIDWORD(v35) = vadd_f32(v23, v25).i32[1];
  v37 = COERCE_DOUBLE(vzip1_s32((int32x2_t)vsub_f32((float32x2_t)a12.n128_u64[0], v24), v36));
  v44 = v35;
  v45 = v37;
  *(_QWORD *)&v38 = *(_QWORD *)(a5 + 20);
  a12.n128_u64[0] = *(_QWORD *)(a4 + 4);
  *((_QWORD *)&v38 + 1) = a12.n128_u64[0];
  v46 = *(_DWORD *)(a5 + 16);
  v47 = v38;
  v48 = *(_DWORD *)(a4 + 12);
  LODWORD(v37) = v48;
  v40 = *a17;
  return sweepBoxVsTriangles(a1, a2, (uint64_t)v41, a6, a7, &v40, a3, a8, a9, v37, *(double *)&v38, a12, v34, *(double *)_Q5.i64, *(double *)&v21, a16);
}

uint64_t sweepBoxVsTriangles(int a1, uint64_t a2, uint64_t a3, float32x2_t *a4, uint64_t a5, __int16 *a6, char a7, unsigned int *a8, double a9, double a10, double a11, __n128 a12, double a13, double a14, double a15, __n128 a16)
{
  float v16;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float32x2_t *v43;
  float v44;
  float v45;
  unsigned int v46;
  char v47;
  unsigned int v48;
  char v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  unsigned int v55;
  unsigned int v56;
  float *v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  BOOL v73;
  float v75;
  int v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  __int16 v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v97;
  __int16 v99;
  float v100;
  float v101;
  float v102;
  char v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125[3];
  float v126[3];
  unint64_t v127;
  float v128;

  if (!a1)
  {
    v47 = 0;
    return v47 & 1;
  }
  v16 = *(float *)&a9;
  v99 = *a6;
  v105 = ((*a6 & 0x80) == 0) & ~a7;
  v21 = *(float *)(a3 + 4);
  v22 = *(float *)(a3 + 12);
  v23 = *(float *)(a3 + 16);
  v24 = *(float *)(a3 + 24);
  v25 = *(float *)(a3 + 28);
  v26 = *(float *)(a3 + 36);
  v28 = *(float *)(a3 + 40);
  v27 = *(float *)(a3 + 44);
  v29 = (float)-(float)(v28 * v21) - (float)(*(float *)a3 * v26);
  v30 = (float)-(float)(v28 * v23) - (float)(v22 * v26);
  v31 = (float)-(float)(v28 * v25) - (float)(v24 * v26);
  v32 = a4->f32[0];
  v33 = a4->f32[1];
  v110 = v21;
  v111 = *(float *)a3;
  v108 = v23;
  v109 = v22;
  v106 = v24;
  v107 = v25;
  v34 = (float)(*(float *)a3 * a4->f32[0]) + (float)(v21 * v33);
  v35 = a4[1].f32[0];
  v113 = *(float *)(a3 + 20);
  v114 = *(float *)(a3 + 8);
  v112 = *(float *)(a3 + 32);
  v36 = v34 + (float)(v114 * v35);
  v37 = (float)((float)(v22 * a4->f32[0]) + (float)(v23 * v33)) + (float)(v113 * v35);
  v38 = (float)((float)(v24 * a4->f32[0]) + (float)(v25 * v33)) + (float)(v112 * v35);
  v127 = __PAIR64__(LODWORD(v37), LODWORD(v36));
  v128 = v38;
  v126[0] = v36 * v16;
  v126[1] = v37 * v16;
  v126[2] = v38 * v16;
  *(float *)(a5 + 48) = v16;
  v39 = 1.0;
  v40 = 1.0 / (float)(v36 * v16);
  if (v36 == 0.0)
    v40 = 0.0;
  v41 = 1.0 / (float)(v37 * v16);
  if (v37 == 0.0)
    v41 = 0.0;
  v42 = 1.0 / (float)(v38 * v16);
  v102 = 0.0;
  if (v38 == 0.0)
    v42 = 0.0;
  v125[0] = v40;
  v125[1] = v41;
  v125[2] = v42;
  v43 = (float32x2_t *)(a3 + 48);
  v44 = (float)((float)(fabsf(v37) * *(float *)(a3 + 52)) + (float)(fabsf(v36) * *(float *)(a3 + 48)))
      + (float)(fabsf(v38) * *(float *)(a3 + 56));
  v45 = (float)((float)(v28 * v33) + (float)(v26 * v32)) + (float)(v27 * v35);
  if (a8)
    v46 = *a8;
  else
    v46 = 0;
  v48 = 0;
  v49 = 0;
  v50 = v29 - (float)(v114 * v27);
  v51 = v30 - (float)(v113 * v27);
  v52 = v31 - (float)(v112 * v27);
  v53 = v44 + 0.002;
  v54 = v45 - (float)(v44 + 0.002);
  v100 = 0.0;
  v101 = 0.0;
  while (1)
  {
    if (v46 == v48)
      v55 = 0;
    else
      v55 = v48;
    if (v48)
      v56 = v55;
    else
      v56 = v46;
    v57 = (float *)(a2 + 36 * v56);
    v58 = *v57;
    v59 = v57[1];
    v60 = a4->f32[1];
    v61 = a4[1].f32[0];
    v63 = v57[2];
    v62 = v57[3];
    v64 = (float)((float)(v59 * v60) + (float)(*v57 * a4->f32[0])) + (float)(v63 * v61);
    v65 = v57[4];
    v66 = v57[5];
    v67 = (float)((float)(v60 * v65) + (float)(v62 * a4->f32[0])) + (float)(v66 * v61);
    v68 = v57[6];
    v69 = v57[7];
    v70 = v57[8];
    v71 = (float)((float)(v60 * v69) + (float)(v68 * a4->f32[0])) + (float)(v70 * v61);
    if (v64 >= v67)
      v72 = v67;
    else
      v72 = v64;
    if (v72 >= v71)
      v72 = v71;
    if (v72 > (float)(v53 + (float)(v45 + (float)(v39 * v16))))
      goto LABEL_37;
    v73 = v64 < v54 && v67 < v54;
    if (v73 && v71 < v54)
      goto LABEL_37;
    v116 = v50 + (float)((float)((float)(v111 * v58) + (float)(v110 * v59)) + (float)(v114 * v63));
    v117 = v51 + (float)((float)((float)(v109 * v58) + (float)(v108 * v59)) + (float)(v113 * v63));
    v118 = v52 + (float)((float)((float)(v106 * v58) + (float)(v107 * v59)) + (float)(v112 * v63));
    v119 = v50 + (float)((float)((float)(v111 * v62) + (float)(v110 * v65)) + (float)(v114 * v66));
    v120 = v51 + (float)((float)((float)(v109 * v62) + (float)(v108 * v65)) + (float)(v113 * v66));
    v121 = v52 + (float)((float)((float)(v106 * v62) + (float)(v107 * v65)) + (float)(v112 * v66));
    v122 = v50 + (float)((float)((float)(v111 * v68) + (float)(v110 * v69)) + (float)(v114 * v70));
    v123 = v51 + (float)((float)((float)(v109 * v68) + (float)(v108 * v69)) + (float)(v113 * v70));
    v124 = v52 + (float)((float)((float)(v106 * v68) + (float)(v107 * v69)) + (float)(v112 * v70));
    v115 = 3.4028e38;
    if (!physx::Gu::triBoxSweepTestBoxSpace(&v116, (float *)v43, v126, v125, &v115, v105, v39))
      goto LABEL_37;
    v75 = v115;
    if (v115 >= v39)
      goto LABEL_37;
    if (v115 == 0.0)
      break;
    *(float *)(a5 + 48) = v115 * v16;
    *(_DWORD *)(a5 + 16) = v56;
    v100 = (float)((float)(v121 - v118) * (float)(v122 - v116)) - (float)((float)(v119 - v116) * (float)(v124 - v118));
    v101 = (float)((float)(v120 - v117) * (float)(v124 - v118)) - (float)((float)(v121 - v118) * (float)(v123 - v117));
    v102 = (float)((float)(v119 - v116) * (float)(v123 - v117)) - (float)((float)(v120 - v117) * (float)(v122 - v116));
    v49 = 1;
    if ((*(_BYTE *)a6 & 0x40) != 0)
      goto LABEL_38;
    v39 = v75;
LABEL_37:
    if (a1 == ++v48)
    {
LABEL_38:
      v76 = 2;
      v77 = a5;
      goto LABEL_39;
    }
  }
  v77 = a5;
  *(_DWORD *)(a5 + 16) = v56;
  *(_WORD *)(a5 + 20) = 1026;
  v97 = -a4[1].f32[0];
  a10 = COERCE_DOUBLE(vneg_f32(*a4));
  *(double *)(a5 + 36) = a10;
  *(float *)(a5 + 44) = v97;
  *(_DWORD *)(a5 + 48) = 0;
  v76 = 1;
LABEL_39:
  v78 = v76 == 2;
  v47 = (v76 != 2) | v49;
  if (v78 && (v49 & 1) != 0)
  {
    *(_WORD *)(v77 + 20) = 0;
    if ((*a6 & 3) != 0)
    {
      v79 = a2 + 36 * *(unsigned int *)(v77 + 16);
      LODWORD(a10) = *(_DWORD *)(v79 + 4);
      LODWORD(a13) = *(_DWORD *)(v79 + 8);
      LODWORD(a14) = *(_DWORD *)(v79 + 12);
      *(float *)&a11 = v51
                     + (float)((float)((float)(v109 * *(float *)v79) + (float)(v108 * *(float *)&a10))
                             + (float)(v113 * *(float *)&a13));
      v80 = *(float *)(v79 + 16);
      v81 = *(float *)(v79 + 20);
      *(float *)&a15 = v51
                     + (float)((float)((float)(v109 * *(float *)&a14) + (float)(v108 * v80)) + (float)(v113 * v81));
      v82 = *(float *)(v79 + 24);
      v83 = *(float *)(v79 + 28);
      v84 = *(float *)(v79 + 32);
      *(float *)&a9 = v50
                    + (float)((float)((float)(v111 * *(float *)v79) + (float)(v110 * *(float *)&a10))
                            + (float)(v114 * *(float *)&a13));
      *(float *)&a10 = v52
                     + (float)((float)((float)(v106 * *(float *)v79) + (float)(v107 * *(float *)&a10))
                             + (float)(v112 * *(float *)&a13));
      a12.n128_f32[0] = v50
                      + (float)((float)((float)(v111 * *(float *)&a14) + (float)(v110 * v80)) + (float)(v114 * v81));
      *(float *)&a13 = v52
                     + (float)((float)((float)(v106 * *(float *)&a14) + (float)(v107 * v80)) + (float)(v112 * v81));
      a16.n128_f32[0] = v114 * v84;
      *(float *)&a14 = v50 + (float)((float)((float)(v111 * v82) + (float)(v110 * v83)) + (float)(v114 * v84));
      v116 = *(float *)&a9;
      v117 = *(float *)&a11;
      v118 = *(float *)&a10;
      v119 = a12.n128_f32[0];
      v120 = *(float *)&a15;
      v121 = *(float *)&a13;
      v122 = *(float *)&a14;
      v123 = v51 + (float)((float)((float)(v109 * v82) + (float)(v108 * v83)) + (float)(v113 * v84));
      v124 = v52 + (float)((float)((float)(v106 * v82) + (float)(v107 * v83)) + (float)(v112 * v84));
      LODWORD(a9) = *(_DWORD *)(v77 + 48);
      physx::Gu::computeBoxTriImpactData((float32x2_t *)(v77 + 24), (float32x2_t *)(v77 + 36), v43, (float32x2_t *)&v127, (uint64_t)&v116, a9, a10, a11, a12, a13, a14, a15, a16);
      v85 = *a6;
      if ((*a6 & 2) != 0)
      {
        v87 = *(float *)(v77 + 36);
        v86 = *(float *)(v77 + 40);
        v88 = *(float *)(v77 + 44);
        v89 = sqrtf((float)((float)(v86 * v86) + (float)(v87 * v87)) + (float)(v88 * v88));
        if (v89 > 0.0)
        {
          v90 = 1.0 / v89;
          v87 = v87 * v90;
          v86 = v86 * v90;
          v88 = v88 * v90;
        }
        if ((v99 & 0x80) != 0
          && (a7 & 1) == 0
          && (float)((float)((float)(v100 * *((float *)&v127 + 1)) + (float)(v101 * *(float *)&v127))
                   + (float)(v102 * v128)) > 0.0)
        {
          v87 = -v87;
          v86 = -v86;
          v88 = -v88;
        }
        v91 = (float)((float)(v87 * *(float *)(a3 + 8)) + (float)(v86 * *(float *)(a3 + 20)))
            + (float)(v88 * *(float *)(a3 + 32));
        *(float32x2_t *)(v77 + 36) = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a3, v87), vmul_n_f32(*(float32x2_t *)(a3 + 12), v86)), vmul_n_f32(*(float32x2_t *)(a3 + 24), v88));
        *(float *)(v77 + 44) = v91;
        *(_WORD *)(v77 + 20) |= 2u;
        v85 = *a6;
      }
      if ((v85 & 1) != 0)
      {
        v92 = *(float *)(v77 + 24);
        v93 = *(float *)(v77 + 28);
        v94 = *(float *)(v77 + 32);
        v95 = (float)((float)((float)(v92 * *(float *)(a3 + 8)) + (float)(v93 * *(float *)(a3 + 20)))
                    + (float)(v94 * *(float *)(a3 + 32)))
            + *(float *)(a3 + 44);
        *(float32x2_t *)(v77 + 24) = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a3, v92), vmul_n_f32(*(float32x2_t *)(a3 + 12), v93)), vmul_n_f32(*(float32x2_t *)(a3 + 24), v94)), *(float32x2_t *)(a3 + 36));
        *(float *)(v77 + 32) = v95;
        *(_WORD *)(v77 + 20) |= 1u;
      }
    }
    v47 = v49;
  }
  return v47 & 1;
}

uint64_t physx::PxGeometryQuery::sweep(uint64_t a1, uint64_t a2, float32x4_t *a3, int *a4, uint64_t a5, uint64_t a6, __int16 *a7, double a8, double a9, double a10, int8x16_t a11, int8x16_t a12)
{
  uint64_t result;
  int v15;
  int8x16_t v16;
  uint64_t (**v17)();
  uint64_t (*v18)();
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t (**v36)();
  uint64_t (*v37)();
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t (**v59)();
  uint64_t (**v60)();
  uint64_t (**v61)();
  uint64_t (*v62)();
  uint64_t (*v63)();
  __int16 v64;
  __int16 v65;
  unint64_t v66;
  _BYTE v67[20];
  int32x2_t v68;
  __int32 v69;
  __int128 v70;
  int v71;
  __int16 v72;
  __int16 v73;
  _DWORD v74[3];

  result = 0;
  switch(*(_DWORD *)a2)
  {
    case 0:
      v15 = *(_DWORD *)(a2 + 4);
      v74[0] = 2;
      v74[1] = v15;
      v74[2] = 0;
      v66 = a3[1].u64[0];
      a11.i64[0] = v66;
      a12.i32[0] = a3[1].i32[2];
      v16 = vextq_s8(vextq_s8(a12, a12, 4uLL), a11, 0xCuLL);
      v16.i32[3] = v16.i32[0];
      *(int8x16_t *)v67 = v16;
      *(_DWORD *)&v67[16] = v15;
      v17 = &gGeomSweepFuncs[*a4];
      if ((*a7 & 0x100) != 0)
        v17 += 7;
      v18 = *v17;
      v73 = *a7;
      result = ((uint64_t (*)(int *, uint64_t, _DWORD *, float32x4_t *, unint64_t *, uint64_t, uint64_t, __int16 *))v18)(a4, a5, v74, a3, &v66, a1, a6, &v73);
      break;
    case 2:
      v19 = a3->f32[0];
      v20 = a3->f32[1];
      v21 = v19 + v19;
      v23 = a3->f32[2];
      v22 = a3->f32[3];
      v24 = v22 + v22;
      v25 = (float)((float)(v22 * (float)(v22 + v22)) + -1.0) + (float)(v19 * (float)(v19 + v19));
      v26 = (float)(v21 * v20) + (float)(v23 * (float)(v22 + v22));
      v27 = (float)(v21 * v23) - (float)(v20 * v24);
      v29 = *(_DWORD *)(a2 + 4);
      v28 = *(float *)(a2 + 8);
      v30 = v25 * v28;
      v31 = v28 * v26;
      v32 = v27 * v28;
      v33 = a3[1].f32[0];
      v34 = a3[1].f32[1];
      v35 = a3[1].f32[2];
      *(float *)&v66 = v33 + v30;
      *((float *)&v66 + 1) = v34 + v31;
      *(float *)v67 = v32 + v35;
      *(float *)&v67[4] = v33 - v30;
      *(float *)&v67[8] = v34 - v31;
      *(float *)&v67[12] = v35 - v32;
      *(_DWORD *)&v67[16] = v29;
      v36 = &gGeomSweepFuncs[*a4];
      if ((*a7 & 0x100) != 0)
        v36 += 7;
      v37 = *v36;
      v72 = *a7;
      result = ((uint64_t (*)(int *, uint64_t, uint64_t, float32x4_t *, unint64_t *, uint64_t, uint64_t, __int16 *))v37)(a4, a5, a2, a3, &v66, a1, a6, &v72);
      break;
    case 3:
      v38 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a3->f32, 1);
      v39 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 2);
      v40 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 3);
      _Q6 = vaddq_f32(*a3, *a3);
      v42 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a3->f32, *(float32x2_t *)_Q6.f32), 0);
      v43 = vmul_lane_f32(v38, *(float32x2_t *)_Q6.f32, 1);
      v44 = vmul_laneq_f32(v39, _Q6, 2);
      v45 = vmul_n_f32(v38, _Q6.f32[0]);
      v46 = vmul_n_f32(v39, _Q6.f32[0]);
      v47 = vmul_n_f32(v40, _Q6.f32[0]);
      v48 = vmul_lane_f32(v39, *(float32x2_t *)_Q6.f32, 1);
      v49 = vmul_lane_f32(v40, *(float32x2_t *)_Q6.f32, 1);
      v50 = vmul_laneq_f32(v40, _Q6, 2);
      __asm { FMOV            V6.2S, #1.0 }
      v55 = vsub_f32(*(float32x2_t *)_Q6.f32, v42);
      LODWORD(v56) = vsub_f32(v46, v49).u32[0];
      LODWORD(v57) = vadd_f32(v48, v47).u32[0];
      *(float *)&v66 = (float)(1.0 - v43.f32[1]) - v44.f32[1];
      HIDWORD(v66) = vadd_f32(v45, v50).u32[0];
      HIDWORD(v56) = vsub_f32(v45, v50).i32[1];
      *(_QWORD *)v67 = v56;
      HIDWORD(v57) = vadd_f32(v46, v49).i32[1];
      *(_DWORD *)&v67[8] = vsub_f32(v55, v44).u32[0];
      *(_QWORD *)&v67[12] = v57;
      v68 = vzip1_s32((int32x2_t)vsub_f32(v48, v47), (int32x2_t)vsub_f32(v55, v43));
      v69 = a3[1].i32[0];
      *(_QWORD *)&v58 = *(uint64_t *)((char *)a3[1].i64 + 4);
      *((_QWORD *)&v58 + 1) = *(_QWORD *)(a2 + 4);
      v70 = v58;
      v71 = *(_DWORD *)(a2 + 12);
      v59 = &gGeomSweepFuncs[*a4];
      v60 = v59 + 21;
      v61 = v59 + 14;
      if ((*a7 & 0x100) != 0)
        v61 = v60;
      v62 = *v61;
      v65 = *a7;
      result = ((uint64_t (*)(int *, uint64_t, uint64_t, float32x4_t *, unint64_t *, uint64_t, uint64_t, __int16 *))v62)(a4, a5, a2, a3, &v66, a1, a6, &v65);
      break;
    case 4:
      v63 = gGeomSweepFuncs[*a4 + 28];
      v64 = *a7;
      result = ((uint64_t (*)(int *, uint64_t, uint64_t, float32x4_t *, uint64_t, uint64_t, __int16 *))v63)(a4, a5, a2, a3, a1, a6, &v64);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t physx::PxGeometryQuery::overlap(int *a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = *a3;
  if ((int)v4 <= (int)v5)
    return ((uint64_t (*)(int *, uint64_t))*(&gGeomOverlapMethodTable[7 * (int)v4] + v5))(a1, a2);
  else
    return ((uint64_t (*)(int *, uint64_t, int *, uint64_t, _QWORD))*(&gGeomOverlapMethodTable[7 * (int)v5] + v4))(a3, a4, a1, a2, 0);
}

float32x2_t *physx::PxGeometryQuery::pointDistance(float32x2_t *result, uint64_t a2, uint64_t a3, float32x2_t *a4, double a5, double a6, double a7, int32x4_t a8)
{
  float v9;
  float32x2_t v10;
  float32x2_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  float32x2_t v74;
  float v75;
  float v76;
  float32x2_t v77;
  float32_t v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  int8x8_t v89;
  float32x2_t v90;
  int32x2_t v91;
  int8x8_t v92;
  float32x2_t v93;
  int8x8_t v94;
  int8x8_t v95;
  int v96;
  float32x2_t v97;
  float v98;
  float v99;
  int32x4_t v100;
  int32x4_t v101;
  float32x2_t v102;
  float v103;
  uint64_t v104;
  int v105;

  LODWORD(a5) = -1.0;
  switch(*(_DWORD *)a2)
  {
    case 0:
      v9 = *(float *)(a2 + 4);
      v10 = *(float32x2_t *)(a3 + 16);
      v11 = vsub_f32(*result, v10);
      v12 = *(float *)(a3 + 24);
      v13 = result[1].f32[0] - v12;
      v14 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v11, v11).i32[1]), v11.f32[0], v11.f32[0]) + (float)(v13 * v13));
      if (v14 > v9)
      {
        if (a4)
        {
          *a4 = vadd_f32(v10, vmul_n_f32(vmul_n_f32(v11, 1.0 / v14), v9));
          a4[1].f32[0] = v12 + (float)(v9 * (float)(v13 * (float)(1.0 / v14)));
        }
      }
      break;
    case 2:
      v15 = *(float *)a3;
      v16 = *(float *)(a3 + 4);
      v17 = v15 + v15;
      v19 = *(float *)(a3 + 8);
      v18 = *(float *)(a3 + 12);
      v20 = v18 + v18;
      v21 = (float)((float)(v18 * (float)(v18 + v18)) + -1.0) + (float)(v15 * (float)(v15 + v15));
      v22 = (float)(v17 * v16) + (float)(v19 * (float)(v18 + v18));
      v23 = (float)(v17 * v19) - (float)(v16 * v20);
      v24 = *(float *)(a2 + 4);
      v25 = *(float *)(a2 + 8);
      v26 = v21 * v25;
      v27 = v25 * v22;
      v28 = v23 * v25;
      v29 = *(float *)(a3 + 16);
      v30 = *(float *)(a3 + 20);
      v31 = v29 + v26;
      v32 = v30 + v27;
      v33 = *(float *)(a3 + 24);
      v34 = v28 + v33;
      v35 = v33 - v28;
      v36 = (float)(v29 - v26) - (float)(v29 + v26);
      v37 = (float)(v30 - v27) - (float)(v30 + v27);
      v38 = v35 - v34;
      v39 = result->f32[1];
      v40 = result->f32[0] - (float)(v29 + v26);
      v41 = v39 - v32;
      v42 = result[1].f32[0];
      v43 = v42 - v34;
      v44 = (float)((float)(v37 * (float)(v39 - v32)) + (float)(v40 * v36)) + (float)((float)(v42 - v34) * v38);
      if (v44 <= 0.0)
      {
        v46 = 0.0;
      }
      else
      {
        v45 = (float)((float)(v37 * v37) + (float)(v36 * v36)) + (float)(v38 * v38);
        if (v44 >= v45)
        {
          v40 = v40 - v36;
          v41 = v41 - v37;
          v43 = v43 - v38;
          v46 = 1.0;
        }
        else
        {
          v46 = v44 / v45;
          v40 = v40 - (float)(v36 * v46);
          v41 = v41 - (float)(v37 * v46);
          v43 = v43 - (float)(v38 * v46);
        }
      }
      if ((float)((float)((float)(v41 * v41) + (float)(v40 * v40)) + (float)(v43 * v43)) > (float)(v24 * v24) && a4)
      {
        v79 = v31 + (float)(v36 * v46);
        v80 = v32 + (float)(v37 * v46);
        v81 = v34 + (float)(v38 * v46);
        v82 = result->f32[0] - v79;
        v83 = v39 - v80;
        v84 = v42 - v81;
        v85 = sqrtf((float)((float)(v83 * v83) + (float)(v82 * v82)) + (float)(v84 * v84));
        if (v85 > 0.0)
        {
          v86 = 1.0 / v85;
          v82 = v82 * v86;
          v83 = v83 * v86;
          v84 = v84 * v86;
        }
        a4->f32[0] = v79 + (float)(v24 * v82);
        a4->f32[1] = v80 + (float)(v24 * v83);
        a4[1].f32[0] = v81 + (float)(v24 * v84);
      }
      break;
    case 3:
      v47 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a3, 1);
      v48 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 2);
      v49 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 3);
      _Q4 = vaddq_f32(*(float32x4_t *)a3, *(float32x4_t *)a3);
      v51 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a3, *(float32x2_t *)_Q4.f32), 0);
      v52 = vmul_lane_f32(v47, *(float32x2_t *)_Q4.f32, 1);
      v53 = vmul_laneq_f32(v48, _Q4, 2);
      v54 = vmul_n_f32(v47, _Q4.f32[0]);
      v55 = vmul_n_f32(v48, _Q4.f32[0]);
      v56 = vmul_n_f32(v49, _Q4.f32[0]);
      v57 = vmul_lane_f32(v48, *(float32x2_t *)_Q4.f32, 1);
      v58 = vmul_lane_f32(v49, *(float32x2_t *)_Q4.f32, 1);
      v59 = vmul_laneq_f32(v49, _Q4, 2);
      __asm { FMOV            V4.2S, #1.0 }
      v64 = vsub_f32(*(float32x2_t *)_Q4.f32, v51);
      v65 = vadd_f32(v54, v59);
      v66 = vsub_f32(v55, v58);
      v67 = vsub_f32(v54, v59);
      v68 = vadd_f32(v55, v58);
      v69 = vsub_f32(v64, v52);
      v88 = (float)(1.0 - v52.f32[1]) - v53.f32[1];
      v89 = (int8x8_t)v67;
      v99 = v88;
      v91 = (int32x2_t)vsub_f32(v64, v53);
      v92 = (int8x8_t)v65;
      *(float32x2_t *)v70.i8 = v65;
      v90 = v66;
      v70.u64[1] = (unint64_t)v66;
      *(float32x2_t *)v71.i8 = v67;
      v71.u64[1] = (unint64_t)v91;
      v72 = vuzp1q_s32(v70, v71);
      v72.i32[2] = v67.i32[1];
      v100 = v72;
      v93 = vadd_f32(v57, v56);
      v94 = (int8x8_t)vsub_f32(v57, v56);
      *(float32x2_t *)v72.i8 = v93;
      v72.u64[1] = (unint64_t)v68;
      *(int8x8_t *)v71.i8 = v94;
      v87 = v69.f32[0];
      v71.u64[1] = (unint64_t)v69;
      v73 = vuzp1q_s32(v72, v71);
      v95 = (int8x8_t)v68;
      v73.i32[1] = v68.i32[1];
      v101 = v73;
      v74 = *(float32x2_t *)(a3 + 16);
      v102 = v74;
      v75 = *(float *)(a3 + 24);
      v103 = v75;
      v104 = *(_QWORD *)(a2 + 4);
      v105 = *(_DWORD *)(a2 + 12);
      result = (float32x2_t *)physx::Gu::distancePointBoxSquared((float *)result, (float *)&v102, (uint64_t)&v104, &v99, (uint64_t)&v97);
      if (a4 && v76 != 0.0)
      {
        v77 = (float32x2_t)vdup_lane_s32(v91, 0);
        v77.f32[0] = v88;
        v78 = v75 + (float)(vadd_f32(vmul_f32(v90, v97), vmul_lane_f32(v93, v97, 1)).f32[0] + (float)(v87 * v98));
        *a4 = vadd_f32(v74, vadd_f32(vadd_f32(vmul_f32((float32x2_t)vext_s8(v89, v92, 4uLL), (float32x2_t)vrev64_s32((int32x2_t)v97)), vmul_f32(v77, v97)), vmul_n_f32((float32x2_t)vext_s8(v95, v94, 4uLL), v98)));
        a4[1].f32[0] = v78;
      }
      break;
    case 4:
      v96 = 0;
      result = (float32x2_t *)pointConvexDistance((uint64_t)&v99, (uint64_t)&v97, &v96, (uint64_t)result, *(_QWORD *)(a2 + 32), (_OWORD *)(a2 + 4), (float *)a3, a5, a6, a7, a8);
      if (a4 && (result & 1) == 0)
      {
        *a4 = v97;
        a4[1].f32[0] = v98;
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL pointConvexDistance(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _OWORD *a6, float *a7, double a8, double a9, double a10, int32x4_t a11)
{
  float32x4_t v11;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  _BOOL4 v21;
  float32x4_t v23;
  int32x4_t v24;
  float32x4_t v29;
  int v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x4_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x4_t v50;
  int32x2_t v51;
  int8x8_t v52;
  float32x4_t v53;
  int8x8_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  int32x2_t v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float v99;
  float v100;
  float v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  __int128 v110;
  __int128 v111;
  double v112;
  int v113;
  uint64_t v114;
  __int32 v115;
  __int32 v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  double v137;
  _QWORD v138[2];
  _QWORD v139[2];
  __int128 v140;
  __int128 v141;
  __int128 v142;
  float32x4_t v143;
  float32x2_t v144;
  float32x4_t v145;
  int8x16_t v146;
  int8x16_t v147;
  float32x4_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  float32x4_t v152;
  float32x4_t v153;
  uint64_t v154;
  float32x4_t v155;
  __int128 v156;
  char v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;

  v168 = *MEMORY[0x24BDAC8D0];
  LODWORD(a10) = *(_DWORD *)a4;
  a11.i32[0] = *(_DWORD *)(a4 + 4);
  v16 = *(float *)(a4 + 8);
  v17 = *(float32x4_t *)a6;
  v18 = *(float32x4_t *)a6;
  v18.i32[3] = 0;
  v19 = *(float32x4_t *)((char *)a6 + 12);
  v20 = *(_QWORD *)(a5 + 72) + 20 * *(unsigned __int8 *)(a5 + 71);
  v21 = COERCE_FLOAT(*((_QWORD *)a6 + 1)) == 1.0;
  if (COERCE_FLOAT(*a6) != 1.0 || COERCE_FLOAT(HIDWORD(*(_QWORD *)a6)) != 1.0)
    v21 = 0;
  v157 = 0;
  v155 = 0u;
  v156 = 0u;
  v164 = a5 + 32;
  v166 = v20;
  v23.i64[0] = *(_QWORD *)(a5 + 92);
  v23.i64[1] = *(unsigned int *)(a5 + 100);
  v24 = (int32x4_t)vmulq_f32(v18, v23);
  v167 = *(_BYTE *)(a5 + 70);
  *(float32x2_t *)v24.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v24, 2), *(float32x2_t *)v24.i8);
  *(float *)v24.i32 = vpmin_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8).f32[0];
  *(float32x2_t *)&v156 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v24.i32);
  *((float *)&v156 + 2) = 0.025 * *(float *)v24.i32;
  __asm { FMOV            V0.2S, #1.0 }
  if (v21)
  {
    v158 = xmmword_2260E5F10;
    v159 = xmmword_2260E5F20;
    v160 = xmmword_2260E5F40;
    v161 = xmmword_2260E5F10;
    v162 = xmmword_2260E5F20;
    v163 = xmmword_2260E5F40;
  }
  else
  {
    v29 = vrecpeq_f32(v18);
    v30 = 4;
    do
    {
      v29 = vmulq_f32(v29, vrecpsq_f32(v29, v18));
      --v30;
    }
    while (v30);
    *(int32x2_t *)v31.f32 = vdup_lane_s32(*(int32x2_t *)v17.f32, 0);
    v31.i64[1] = v31.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v31, v18)), (int8x8_t)_D0).u32[0] & 0xFFFFFF) != 0)
    {
      v38 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.f32, 1);
      v39 = (float32x2_t)vdup_laneq_s32((int32x4_t)v19, 2);
      v40 = (float32x2_t)vdup_laneq_s32((int32x4_t)v19, 3);
      v41 = vaddq_f32(v19, v19);
      v42 = vmul_lane_f32(v38, *(float32x2_t *)v41.f32, 1);
      v43 = vmul_laneq_f32(v39, v41, 2);
      v44 = vmul_n_f32(v38, v41.f32[0]);
      v45 = vmul_n_f32(v39, v41.f32[0]);
      v46 = vmul_n_f32(v40, v41.f32[0]);
      v47 = vmul_lane_f32(v39, *(float32x2_t *)v41.f32, 1);
      v48 = vmul_lane_f32(v40, *(float32x2_t *)v41.f32, 1);
      v49 = vmul_laneq_f32(v40, v41, 2);
      *(float32x2_t *)v41.f32 = vsub_f32(_D0, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v41.f32), 0));
      *(int8x8_t *)v50.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D0, v42), v43), (int8x8_t)vadd_f32(v44, v49), 4uLL);
      v50.i64[1] = vsub_f32(v45, v48).u32[0];
      v51 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v44, v49), (int8x8_t)vsub_f32(*(float32x2_t *)v41.f32, v43), 4uLL);
      v52 = (int8x8_t)vadd_f32(v45, v48);
      *(int8x8_t *)v53.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v50.f32, 0), (int8x8_t)v51, 4uLL);
      v54 = (int8x8_t)vdup_lane_s32(v51, 1);
      *(int32x2_t *)v55.f32 = v51;
      v55.i64[1] = vadd_f32(v47, v46).u32[0];
      *(int8x8_t *)v56.f32 = vext_s8(v52, (int8x8_t)vsub_f32(v47, v46), 4uLL);
      *(int8x8_t *)v57.f32 = vext_s8(*(int8x8_t *)v50.f32, v54, 4uLL);
      v56.i64[1] = vsub_f32(*(float32x2_t *)v41.f32, v42).u32[0];
      v53.i64[1] = vdup_lane_s32(*(int32x2_t *)v56.f32, 0).u32[0];
      v57.i64[1] = vdup_lane_s32(*(int32x2_t *)v56.f32, 1).u32[0];
      *(int8x8_t *)v58.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v50.u32[2], 0), *(int8x8_t *)&v55.u32[2], 4uLL);
      v58.i64[1] = vdup_lane_s32(*(int32x2_t *)&v56.u32[2], 0).u32[0];
      v59 = vmulq_n_f32(v53, v17.f32[0]);
      v59.i32[3] = 0;
      v60 = vmulq_lane_f32(v57, *(float32x2_t *)v17.f32, 1);
      v60.i32[3] = 0;
      v61 = vmulq_laneq_f32(v58, v17, 2);
      v61.i32[3] = 0;
      v62 = vmulq_n_f32(v59, v50.f32[0]);
      v62.i32[3] = 0;
      v63 = vmulq_lane_f32(v60, *(float32x2_t *)v50.f32, 1);
      v63.i32[3] = 0;
      v64 = vmulq_laneq_f32(v61, v50, 2);
      v64.i32[3] = 0;
      v32 = vaddq_f32(v64, vaddq_f32(v62, v63));
      v65 = vmulq_n_f32(v59, v55.f32[0]);
      v65.i32[3] = 0;
      v66 = vmulq_lane_f32(v60, *(float32x2_t *)v55.f32, 1);
      v66.i32[3] = 0;
      v67 = vmulq_laneq_f32(v61, v55, 2);
      v67.i32[3] = 0;
      v68 = vaddq_f32(v65, v66);
      v69 = vmulq_n_f32(v59, v56.f32[0]);
      v69.i32[3] = 0;
      v70 = vmulq_lane_f32(v60, *(float32x2_t *)v56.f32, 1);
      v70.i32[3] = 0;
      v71 = vmulq_laneq_f32(v61, v56, 2);
      v71.i32[3] = 0;
      v33 = vaddq_f32(v67, v68);
      v34 = vaddq_f32(v71, vaddq_f32(v69, v70));
      v158 = (__int128)v32;
      v159 = (__int128)v33;
      v160 = (__int128)v34;
      v72 = vmulq_n_f32(v53, v29.f32[0]);
      v72.i32[3] = 0;
      v73 = vmulq_lane_f32(v57, *(float32x2_t *)v29.f32, 1);
      v73.i32[3] = 0;
      v74 = vmulq_laneq_f32(v58, v29, 2);
      v74.i32[3] = 0;
      v75 = vmulq_n_f32(v72, v50.f32[0]);
      v75.i32[3] = 0;
      v76 = vmulq_lane_f32(v73, *(float32x2_t *)v50.f32, 1);
      v76.i32[3] = 0;
      v77 = vmulq_laneq_f32(v74, v50, 2);
      v77.i32[3] = 0;
      v35 = vaddq_f32(v77, vaddq_f32(v75, v76));
      v78 = vmulq_n_f32(v72, v55.f32[0]);
      v78.i32[3] = 0;
      v79 = vmulq_lane_f32(v73, *(float32x2_t *)v55.f32, 1);
      v79.i32[3] = 0;
      v80 = vmulq_laneq_f32(v74, v55, 2);
      v80.i32[3] = 0;
      v11 = vmulq_n_f32(v72, v56.f32[0]);
      v11.i32[3] = 0;
      v81 = vmulq_lane_f32(v73, *(float32x2_t *)v56.f32, 1);
      v81.i32[3] = 0;
      v36 = vaddq_f32(v80, vaddq_f32(v78, v79));
      v82 = vmulq_laneq_f32(v74, v56, 2);
      v82.i32[3] = 0;
      v37 = vaddq_f32(v82, vaddq_f32(v11, v81));
    }
    else
    {
      v29.i32[3] = 0;
      v32 = vmulq_f32(v18, (float32x4_t)xmmword_2260E5F10);
      v33 = vmulq_f32(v18, (float32x4_t)xmmword_2260E5F20);
      v11.i32[1] = 0;
      v34 = vmulq_f32(v18, (float32x4_t)xmmword_2260E5F40);
      v158 = (__int128)v32;
      v159 = (__int128)v33;
      v160 = (__int128)v34;
      v35 = vmulq_f32(v29, (float32x4_t)xmmword_2260E5F10);
      v36 = vmulq_f32(v29, (float32x4_t)xmmword_2260E5F20);
      v37 = vmulq_f32(v29, (float32x4_t)xmmword_2260E5F40);
    }
    v161 = (__int128)v35;
    v162 = (__int128)v36;
    v163 = (__int128)v37;
    v83 = vmulq_f32(v32, (float32x4_t)0);
    v83.i32[3] = 0;
    v84 = vmulq_f32(v33, (float32x4_t)0);
    v84.i32[3] = 0;
    v85 = vmulq_f32(v34, (float32x4_t)0);
    v85.i32[3] = 0;
    v155 = vaddq_f32(v85, vaddq_f32(v84, v83));
  }
  v146 = 0u;
  v147 = 0u;
  v145 = 0u;
  v144 = 0;
  v165 = *(_QWORD *)(a5 + 80);
  v86 = a7[1];
  v87 = a7[2];
  v88 = a7[3];
  *(float *)&a10 = (float)(*(float *)&a10 - a7[4]) + (float)(*(float *)&a10 - a7[4]);
  *(float *)a11.i32 = (float)(*(float *)a11.i32 - a7[5]) + (float)(*(float *)a11.i32 - a7[5]);
  v89 = (float)(v16 - a7[6]) + (float)(v16 - a7[6]);
  v90 = (float)(v88 * v88) + -0.5;
  v11.f32[0] = (float)((float)-(float)(v86 * *(float *)a11.i32) - (float)(*a7 * *(float *)&a10)) - (float)(v87 * v89);
  *(float *)&v91 = (float)((float)(v88 * (float)((float)(v87 * *(float *)a11.i32) - (float)(v86 * v89)))
                         + (float)(*(float *)&a10 * v90))
                 - (float)(*a7 * v11.f32[0]);
  *(float *)&v92 = (float)((float)(v88 * (float)((float)(*a7 * v89) - (float)(v87 * *(float *)&a10)))
                         + (float)(*(float *)a11.i32 * v90))
                 - (float)(v86 * v11.f32[0]);
  *(float *)&v93 = (float)((float)(v88 * (float)((float)(v86 * *(float *)&a10) - (float)(*a7 * *(float *)a11.i32)))
                         + (float)(v89 * v90))
                 - (float)(v87 * v11.f32[0]);
  v94.i32[1] = 0x80000000;
  *(float *)a11.i32 = (float)((float)(v86 * -0.0) - (float)(*a7 - (float)(v88 * 0.0))) + (float)(v87 * 0.0);
  v11.f32[0] = (float)((float)(v87 * -0.0) - (float)(v86 - (float)(v88 * 0.0))) + (float)(*a7 * 0.0);
  *(float *)v94.i32 = (float)((float)(*a7 * -0.0) - (float)(v87 - (float)(v88 * 0.0))) + (float)(v86 * 0.0);
  v95.i64[0] = __PAIR64__(v92, v91);
  *(float *)&a10 = (float)((float)((float)(*a7 * 0.0) + v88) + (float)(v86 * 0.0)) + (float)(v87 * 0.0);
  v95.i64[1] = v93;
  v96 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.f32, 0);
  v97 = (float32x2_t)vdup_lane_s32(v94, 0);
  v98 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a10, 0);
  v99 = *(float *)a11.i32 + *(float *)a11.i32;
  v100 = v11.f32[0] + v11.f32[0];
  v101 = *(float *)v94.i32 + *(float *)v94.i32;
  *(float *)a11.i32 = *(float *)a11.i32 * (float)(*(float *)a11.i32 + *(float *)a11.i32);
  v102 = vmul_n_f32(v96, v11.f32[0] + v11.f32[0]);
  v103 = vmul_n_f32(v97, v101);
  v104 = vmul_n_f32(v96, v99);
  v105 = vmul_n_f32(v97, v99);
  v106 = vmul_n_f32(v98, v99);
  v107 = vmul_n_f32(v97, v100);
  v108 = vmul_n_f32(v98, v100);
  v109 = vmul_n_f32(v98, v101);
  *(float32x2_t *)a11.i8 = vsub_f32(_D0, (float32x2_t)vdup_lane_s32(*(int32x2_t *)a11.i8, 0));
  *(int8x8_t *)&v110 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D0, v102), v103), (int8x8_t)vadd_f32(v104, v109), 4uLL);
  *((_QWORD *)&v110 + 1) = vsub_f32(v105, v108).u32[0];
  *(int8x8_t *)&v111 = vext_s8((int8x8_t)vsub_f32(v104, v109), (int8x8_t)vsub_f32(*(float32x2_t *)a11.i8, v103), 4uLL);
  *((_QWORD *)&v111 + 1) = vadd_f32(v107, v106).u32[0];
  v140 = v110;
  v141 = v111;
  *(float32x2_t *)&v111 = vsub_f32(v107, v106);
  *(_QWORD *)&v112 = vsub_f32(*(float32x2_t *)a11.i8, v102).u32[0];
  *(int8x8_t *)&v110 = vext_s8((int8x8_t)vadd_f32(v105, v108), *(int8x8_t *)&v111, 4uLL);
  *((_QWORD *)&v110 + 1) = LODWORD(v112);
  v142 = v110;
  v143 = v95;
  v148 = v95;
  v154 = 0;
  v152 = v95;
  v153 = v95;
  v149 = 0;
  v150 = 0x400000000;
  v151 = 1;
  v139[0] = off_24ED91108;
  v139[1] = &v148;
  v138[0] = off_24ED91168;
  v138[1] = &v155;
  v137 = COERCE_DOUBLE(vdup_n_s32(0x7F7FFFFFu));
  v113 = physx::Gu::gjk<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)v139, (uint64_t)v138, &v143, &v137, &v147, &v146, &v145, &v144, v137, *(double *)&v111, v112, a11);
  if (v113 == 2)
  {
    *a3 = 0;
  }
  else
  {
    v114 = v145.i64[0];
    *a3 = vmul_f32(v144, v144).u32[0];
    v115 = v145.i32[2];
    *(_QWORD *)a1 = v114;
    *(_DWORD *)(a1 + 8) = v115;
    v116 = v146.i32[2];
    *(_QWORD *)a2 = v146.i64[0];
    *(_DWORD *)(a2 + 8) = v116;
    v117 = *(float *)a1 + *(float *)a1;
    *(float *)&v114 = *(float *)(a1 + 4) + *(float *)(a1 + 4);
    v118 = *(float *)(a1 + 8) + *(float *)(a1 + 8);
    v120 = a7[2];
    v119 = a7[3];
    v121 = (float)(v119 * v119) + -0.5;
    v122 = *a7;
    v123 = a7[1];
    v124 = (float)((float)(*(float *)&v114 * v123) + (float)(*a7 * v117)) + (float)(v120 * v118);
    v125 = (float)((float)(v119 * (float)((float)(v123 * v118) - (float)(v120 * *(float *)&v114))) + (float)(v117 * v121))
         + (float)(*a7 * v124);
    v126 = (float)((float)(v119 * (float)((float)(v120 * v117) - (float)(*a7 * v118))) + (float)(*(float *)&v114 * v121))
         + (float)(v123 * v124);
    v127 = (float)((float)(v119 * (float)((float)(*a7 * *(float *)&v114) - (float)(v123 * v117))) + (float)(v118 * v121))
         + (float)(v120 * v124);
    *(float *)a1 = v125;
    *(float *)(a1 + 4) = v126;
    *(float *)(a1 + 8) = v127;
    v128 = *(float *)a2 + *(float *)a2;
    *(float *)&v114 = *(float *)(a2 + 4) + *(float *)(a2 + 4);
    v129 = *(float *)(a2 + 8) + *(float *)(a2 + 8);
    v130 = (float)((float)(v123 * *(float *)&v114) + (float)(v122 * v128)) + (float)(v120 * v129);
    v131 = (float)((float)(v119 * (float)((float)(v123 * v129) - (float)(v120 * *(float *)&v114))) + (float)(v128 * v121))
         + (float)(v122 * v130);
    v132 = (float)((float)(v119 * (float)((float)(v120 * v128) - (float)(v122 * v129))) + (float)(*(float *)&v114 * v121))
         + (float)(v123 * v130);
    v133 = (float)((float)(v119 * (float)((float)(v122 * *(float *)&v114) - (float)(v123 * v128))) + (float)(v129 * v121))
         + (float)(v120 * v130);
    v134 = a7[5] + v132;
    v135 = a7[6] + v133;
    *(float *)a2 = a7[4] + v131;
    *(float *)(a2 + 4) = v134;
    *(float *)(a2 + 8) = v135;
  }
  return v113 == 2;
}

uint64_t physx::PxGeometryQuery::computePenetration(float32x2_t *a1, uint64_t a2, int *a3, uint64_t a4, int *a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  float32_t v10;

  v7 = *a3;
  v8 = *a5;
  if ((int)v7 <= (int)v8)
    return ((uint64_t (*)(float32x2_t *, uint64_t, int *, uint64_t))*(&gGeomMTDMethodTable[7 * (int)v7] + v8))(a1, a2, a3, a4);
  result = ((uint64_t (*)(float32x2_t *, uint64_t, int *, uint64_t, int *, uint64_t))*(&gGeomMTDMethodTable[7 * (int)v8]
                                                                                            + v7))(a1, a2, a5, a6, a3, a4);
  if ((_DWORD)result)
  {
    v10 = -a1[1].f32[0];
    *a1 = vneg_f32(*a1);
    a1[1].f32[0] = v10;
    return 1;
  }
  return result;
}

__n128 physx::Gu::GeometryUnion::set(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __n128 result;
  uint64_t *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;

  switch(*(_DWORD *)a2)
  {
    case 0:
      *(_QWORD *)a1 = *a2;
      *(_DWORD *)(a1 + 8) = 0;
      break;
    case 1:
      *(_DWORD *)a1 = 1;
      break;
    case 2:
      v3 = *a2;
      *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
      *(_QWORD *)a1 = v3;
      break;
    case 3:
      *(_DWORD *)a1 = 3;
      result.n128_u64[0] = *(uint64_t *)((char *)a2 + 4);
      *(_QWORD *)(a1 + 4) = result.n128_u64[0];
      result.n128_u32[0] = *((_DWORD *)a2 + 3);
      *(_DWORD *)(a1 + 12) = result.n128_u32[0];
      break;
    case 4:
      *(_DWORD *)a1 = 4;
      *(_OWORD *)(a1 + 4) = *(_OWORD *)((char *)a2 + 4);
      *(_QWORD *)(a1 + 20) = *(uint64_t *)((char *)a2 + 20);
      *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 + 7);
      v5 = (uint64_t *)a2[4];
      *(_QWORD *)(a1 + 32) = v5;
      *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
      v6 = *(_WORD *)((char *)a2 + 41);
      *(_BYTE *)(a1 + 43) = *((_BYTE *)a2 + 43);
      *(_WORD *)(a1 + 41) = v6;
      v7 = *v5;
      *(_QWORD *)(a1 + 48) = v5 + 4;
      *(_BYTE *)(a1 + 56) = (*(uint64_t (**)(void))(v7 + 120))();
      break;
    case 5:
      *(_DWORD *)a1 = 5;
      *(_OWORD *)(a1 + 4) = *(_OWORD *)((char *)a2 + 4);
      result.n128_u64[0] = *(uint64_t *)((char *)a2 + 20);
      *(_QWORD *)(a1 + 20) = result.n128_u64[0];
      result.n128_u32[0] = *((_DWORD *)a2 + 7);
      *(_DWORD *)(a1 + 28) = result.n128_u32[0];
      *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
      v8 = *(uint64_t *)((char *)a2 + 33);
      *(_QWORD *)(a1 + 40) = a2[5];
      *(_QWORD *)(a1 + 33) = v8;
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(_QWORD *)(v9 + 96);
      *(_QWORD *)(a1 + 48) = v9;
      *(_QWORD *)(a1 + 56) = v10;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0xCDCDCDCDCDCD0000;
      break;
    case 6:
      *(_DWORD *)a1 = 6;
      result = *(__n128 *)(a2 + 1);
      *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
      *(__n128 *)(a1 + 8) = result;
      *(_BYTE *)(a1 + 28) = *((_BYTE *)a2 + 28);
      v11 = *(_WORD *)((char *)a2 + 29);
      *(_BYTE *)(a1 + 31) = *((_BYTE *)a2 + 31);
      *(_WORD *)(a1 + 29) = v11;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 8) + 32;
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0xCDCDCDCDCDCD0000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t physx::Gu::computeBoundsAroundVertices(uint64_t result, int a2, _OWORD *a3)
{
  int v3;
  char *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x2_t v8;

  if (a2)
  {
    v3 = a2 - 1;
    v4 = (char *)a3 + 12 * (a2 - 1);
    v5.i64[0] = *(_QWORD *)v4;
    v5.i64[1] = *((unsigned int *)v4 + 2);
    v6 = v5;
    if (a2 != 1)
    {
      do
      {
        v7 = *(float32x4_t *)a3;
        a3 = (_OWORD *)((char *)a3 + 12);
        v6 = vminq_f32(v6, v7);
        v5 = vmaxq_f32(v5, v7);
        --v3;
      }
      while (v3);
    }
    v6.i32[3] = v5.i32[0];
    *(float32x4_t *)result = v6;
    v8 = (int32x2_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 4uLL).u64[0];
  }
  else
  {
    *(_OWORD *)result = xmmword_2261A6E10;
    v8 = vdup_n_s32(0xFE7FFFFF);
  }
  *(int32x2_t *)(result + 16) = v8;
  return result;
}

physx::GuMeshFactory *physx::GuMeshFactory::GuMeshFactory(physx::GuMeshFactory *this)
{
  uint64_t v2;
  const char *v3;
  pthread_mutex_t *v4;

  *(_QWORD *)this = off_24ED90E88;
  v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v3 = "<allocation names disabled>";
  v4 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v2 + 24) + 16))(v2 + 24, 72, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *((_QWORD *)this + 1) = v4;
  physx::shdfnd::MutexImpl::MutexImpl(v4);
  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 14) = 1061158912;
  *(_QWORD *)((char *)this + 60) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 17) = 0;
  physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 16, 0x40u, 0);
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 28) = 1061158912;
  *(_QWORD *)((char *)this + 116) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 31) = 0;
  physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 72, 0x40u, 0);
  *((_QWORD *)this + 20) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 42) = 1061158912;
  *(_QWORD *)((char *)this + 172) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 45) = 0;
  physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 128, 0x40u, 0);
  *((_QWORD *)this + 27) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 56) = 1061158912;
  *(_QWORD *)((char *)this + 228) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 59) = 0;
  physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 184, 0x40u, 0);
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  return this;
}

void physx::GuMeshFactory::~GuMeshFactory(physx::GuMeshFactory *this)
{
  int v2;

  *(_QWORD *)this = off_24ED90E88;
  v2 = *((_DWORD *)this + 63);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 30) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 23))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 16))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 9))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 2))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 1);
}

{
  uint64_t v2;

  physx::GuMeshFactory::~GuMeshFactory(this);
  if (v2)
    (*(void (**)(uint64_t, physx::GuMeshFactory *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                            + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::GuMeshFactory::release(physx::GuMeshFactory *this)
{
  while (*((_DWORD *)this + 17))
    (****((void (*****)(_QWORD))this + 3))(**((_QWORD **)this + 3));
  while (*((_DWORD *)this + 31))
    (****((void (*****)(_QWORD))this + 10))(**((_QWORD **)this + 10));
  while (*((_DWORD *)this + 45))
    (****((void (*****)(_QWORD))this + 17))(**((_QWORD **)this + 17));
  while (*((_DWORD *)this + 59))
    (****((void (*****)(_QWORD))this + 24))(**((_QWORD **)this + 24));
  return (*(uint64_t (**)(physx::GuMeshFactory *))(*(_QWORD *)this + 8))(this);
}

uint64_t physx::GuMeshFactory::addTriangleMesh(uint64_t this, physx::Gu::TriangleMesh *a2, int a3, int8x8_t a4)
{
  uint64_t v4;
  int32x2_t *v5;
  physx::Gu::TriangleMesh *v6;
  char v7;
  char v8;

  v6 = a2;
  if (a2)
  {
    v4 = this;
    v5 = (int32x2_t *)(this + 16);
    if (a3)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
      v7 = 0;
      this = physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v5, &v6, &v7, a4);
      if (!v7)
        *(_QWORD *)this = v6;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        return pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 8));
    }
    else
    {
      v8 = 0;
      this = physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create((int32x2_t *)(this + 16), &v6, &v8, a4);
      if (!v8)
        *(_QWORD *)this = v6;
    }
  }
  return this;
}

physx::Gu::BV4TriangleMesh *physx::GuMeshFactory::createTriangleMesh(physx::GuMeshFactory *this, physx::Gu::TriangleMeshData *a2)
{
  int v4;
  uint64_t v5;
  const char *v6;
  physx::Gu::BV4TriangleMesh *v7;
  int8x8_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;

  v4 = *((_DWORD *)a2 + 2);
  if (v4 == 1)
  {
    v10 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::BV4TriangleMesh>::getName() [T = physx::Gu:"
            ":BV4TriangleMesh]";
    else
      v11 = "<allocation names disabled>";
    v7 = (physx::Gu::BV4TriangleMesh *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v10 + 24) + 16))(v10 + 24, 280, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 119);
    if (!physx::Gu::BV4TriangleMesh::BV4TriangleMesh(v7, this, a2))
      return v7;
LABEL_12:
    physx::GuMeshFactory::addTriangleMesh((uint64_t)this, v7, 1, v8);
    return v7;
  }
  if (v4)
    return 0;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::RTreeTriangleMesh>::getName() [T = physx::Gu::"
         "RTreeTriangleMesh]";
  else
    v6 = "<allocation names disabled>";
  v7 = (physx::Gu::BV4TriangleMesh *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, 256, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 115);
  v8 = (int8x8_t)physx::Gu::RTreeTriangleMesh::RTreeTriangleMesh(v7, this, a2).n128_u64[0];
  if (v9)
    goto LABEL_12;
  return v7;
}

physx::Gu::BV4TriangleMesh *physx::GuMeshFactory::createTriangleMesh(physx::GuMeshFactory *a1, void (***a2)(_QWORD, unsigned __int32 *, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  char Dword;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const char *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint8x8_t *v21;
  uint8x8_t v22;
  int16x8_t v23;
  int v24;
  uint8x8_t v25;
  int v26;
  uint64_t v27;
  __int32 *v28;
  int16x8_t v29;
  int v30;
  _DWORD *v31;
  int v32;
  _DWORD *v33;
  char v34;
  int v35;
  _WORD *v36;
  int v37;
  _WORD *v38;
  uint8x8_t v39;
  int16x8_t v40;
  int v41;
  uint64_t v42;
  _BYTE *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  __int32 *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint8x8_t v64;
  unint64_t v65;
  int16x8_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BOOL4 v75;
  uint8x8_t v76;
  int16x8_t v77;
  uint64_t v78;
  uint8x8_t v79;
  uint64_t i;
  int16x8_t v81;
  _BOOL4 v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  _DWORD *v89;
  int v90;
  unsigned __int32 *v91;
  uint8x8_t v92;
  uint64_t v93;
  int16x8_t v94;
  _WORD *v95;
  int v96;
  _DWORD *v97;
  int v98;
  char v99;
  _WORD *v100;
  int v101;
  uint8x8_t v102;
  int16x8_t v103;
  uint64_t v104;
  _BYTE *v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  uint8x8_t v120;
  unint64_t v121;
  uint64_t v122;
  int16x8_t v123;
  int v124;
  unint64_t v125;
  uint64_t v126;
  int16x8_t v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  physx::Gu::BV4TriangleMesh *TriangleMesh;
  char v133;
  unsigned int v134;
  physx::GuMeshFactory *v135;
  int v136;
  unsigned int v137;
  uint64_t Triangles;
  int v139;
  BOOL v140;
  unsigned int v141;
  unsigned __int32 v142;

  v141 = 0;
  v140 = 0;
  if (!physx::readHeader(0x4Du, 0x45u, 0x53u, 0x48u, &v141, &v140, a2))
    return 0;
  v7 = v141;
  if (v141 <= 0xD)
  {
    if (v141 <= 9)
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 152, "Loading triangle mesh failed: Deprecated mesh cooking format. Please recook your mesh in a new cooking format.", v4, v5, v6, v133);
      return 0;
    }
    v8 = v140;
    v9 = v140;
    Dword = physx::readDword(v9, a2);
    if (v7 <= 0xC)
      (**a2)(a2, &v142, 4);
    goto LABEL_10;
  }
  v8 = v140;
  v9 = v140;
  v10 = physx::readDword(v140, a2);
  Dword = physx::readDword(v8, a2);
  if (v10 != 1)
  {
    if (v10)
      return 0;
LABEL_10:
    v135 = a1;
    v12 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v13 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::RTreeTriangleData>::getName() [T = physx::G"
            "u::RTreeTriangleData]";
    else
      v13 = "<allocation names disabled>";
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v12 + 24) + 16))(v12 + 24, 240, v13, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 170);
    v15 = 0;
    *(_BYTE *)(v14 + 12) = 0;
    *(_DWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    *(_OWORD *)(v14 + 32) = xmmword_2261A6E10;
    *(int32x2_t *)(v14 + 48) = vdup_n_s32(0xFE7FFFFF);
    *(_DWORD *)(v14 + 56) = 0;
    *(_OWORD *)(v14 + 112) = 0u;
    *(_OWORD *)(v14 + 128) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    *(_OWORD *)(v14 + 80) = 0u;
    *(_OWORD *)(v14 + 92) = 0u;
    *(_QWORD *)v14 = off_24ED90F00;
    *(_DWORD *)(v14 + 228) = 0;
    *(_QWORD *)(v14 + 232) = 0;
    *(_QWORD *)(v14 + 216) = 0;
    *(_DWORD *)(v14 + 208) = 4;
    v139 = 1;
    *(_DWORD *)(v14 + 8) = 0;
    goto LABEL_18;
  }
  v135 = a1;
  v16 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v17 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::BV4TriangleData>::getName() [T = physx::Gu::BV4TriangleData]";
  else
    v17 = "<allocation names disabled>";
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v16 + 24) + 16))(v16 + 24, 264, v17, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 172);
  v139 = 0;
  *(_BYTE *)(v14 + 12) = 0;
  *(_DWORD *)(v14 + 16) = 0;
  *(_OWORD *)(v14 + 32) = xmmword_2261A6E10;
  *(_QWORD *)(v14 + 24) = 0;
  *(int32x2_t *)(v14 + 48) = vdup_n_s32(0xFE7FFFFF);
  *(_DWORD *)(v14 + 56) = 0;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 92) = 0u;
  *(_QWORD *)v14 = off_24ED90FA8;
  *(_DWORD *)(v14 + 144) = 0;
  *(_QWORD *)(v14 + 152) = 0;
  *(_QWORD *)(v14 + 160) = 0;
  *(_DWORD *)(v14 + 168) = 0;
  *(_OWORD *)(v14 + 224) = 0u;
  *(_OWORD *)(v14 + 240) = 0u;
  *(_QWORD *)(v14 + 254) = 0;
  *(_OWORD *)(v14 + 204) = 0u;
  *(_OWORD *)(v14 + 176) = 0u;
  *(_OWORD *)(v14 + 192) = 0u;
  v15 = 1;
  *(_DWORD *)(v14 + 8) = 1;
LABEL_18:
  v18 = physx::readDword(v9, a2);
  v136 = v15;
  if (v18 == -1)
    v19 = 0;
  else
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * (v18 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 148);
  *(_QWORD *)(v14 + 24) = v19;
  *(_DWORD *)(v14 + 16) = v18;
  v134 = physx::readDword(v9, a2);
  Triangles = physx::Gu::TriangleMeshData::allocateTriangles((physx::Gu::TriangleMeshData *)v14, v134, (Dword & 0xC) == 0, Dword & 0x20);
  (**a2)(a2, (unsigned __int32 *)v19, (12 * *(_DWORD *)(v14 + 16)));
  if (v8 && *(_DWORD *)(v14 + 16))
  {
    v20 = 0;
    v21 = (uint8x8_t *)(v19 + 8);
    do
    {
      v22 = (uint8x8_t)vrev32_s8((int8x8_t)v21[-1]);
      v21[-1] = v22;
      v22.i32[0] = v21->i32[0];
      v23 = (int16x8_t)vmovl_u8(v22);
      *(int16x4_t *)v23.i8 = vrev64_s16(*(int16x4_t *)v23.i8);
      v21->i32[0] = vmovn_s16(v23).u32[0];
      v21 = (uint8x8_t *)((char *)v21 + 12);
      ++v20;
    }
    while (v20 < *(unsigned int *)(v14 + 16));
  }
  v24 = *(_DWORD *)(v14 + 104);
  v137 = 3 * v24;
  if ((Dword & 4) != 0)
  {
    LOBYTE(v142) = 0;
    if ((*(_BYTE *)(v14 + 12) & 2) != 0)
    {
      if (v24)
      {
        if (v137 <= 1)
          v35 = 1;
        else
          v35 = 3 * v24;
        v36 = (_WORD *)Triangles;
        do
        {
          (**a2)(a2, &v142, 1);
          *v36++ = v142;
          --v35;
        }
        while (v35);
      }
    }
    else if (v24)
    {
      if (v137 <= 1)
        v30 = 1;
      else
        v30 = 3 * v24;
      v31 = (_DWORD *)Triangles;
      do
      {
        (**a2)(a2, &v142, 1);
        *v31++ = v142;
        --v30;
      }
      while (v30);
    }
  }
  else if ((Dword & 8) != 0)
  {
    if ((*(_BYTE *)(v14 + 12) & 2) != 0)
    {
      (**a2)(a2, (unsigned __int32 *)Triangles, (6 * v24));
      if (v24)
        v41 = v9;
      else
        v41 = 0;
      if (v41 == 1)
      {
        if (v137 <= 1)
          v42 = 1;
        else
          v42 = v137;
        v43 = (_BYTE *)(Triangles + 1);
        do
        {
          v44 = *(v43 - 1);
          *(v43 - 1) = *v43;
          *v43 = v44;
          v43 += 2;
          --v42;
        }
        while (v42);
      }
    }
    else
    {
      LOWORD(v142) = 0;
      if (v24)
      {
        if (v137 <= 1)
          v32 = 1;
        else
          v32 = 3 * v24;
        v33 = (_DWORD *)Triangles;
        do
        {
          (**a2)(a2, &v142, 2);
          if (v8)
          {
            v34 = v142;
            LOBYTE(v142) = BYTE1(v142);
            BYTE1(v142) = v34;
          }
          *v33++ = (unsigned __int16)v142;
          --v32;
        }
        while (v32);
      }
    }
  }
  else if ((*(_BYTE *)(v14 + 12) & 2) != 0)
  {
    v142 = 0;
    if (v24)
    {
      if (v137 <= 1)
        v37 = 1;
      else
        v37 = 3 * v24;
      v38 = (_WORD *)Triangles;
      do
      {
        (**a2)(a2, &v142, 4);
        if (v8)
        {
          v39.i32[0] = v142;
          v40 = (int16x8_t)vmovl_u8(v39);
          *(int16x4_t *)v40.i8 = vrev64_s16(*(int16x4_t *)v40.i8);
          v142 = vmovn_s16(v40).u32[0];
        }
        *v38++ = v142;
        --v37;
      }
      while (v37);
    }
  }
  else
  {
    (**a2)(a2, (unsigned __int32 *)Triangles, (12 * v24));
    if (v24)
      v26 = v9;
    else
      v26 = 0;
    if (v26 == 1)
    {
      if (v137 <= 1)
        v27 = 1;
      else
        v27 = v137;
      v28 = (__int32 *)Triangles;
      do
      {
        v25.i32[0] = *v28;
        v29 = (int16x8_t)vmovl_u8(v25);
        *(int16x4_t *)v29.i8 = vrev64_s16(*(int16x4_t *)v29.i8);
        v25 = (uint8x8_t)vmovn_s16(v29);
        *v28++ = v25.i32[0];
        --v27;
      }
      while (v27);
    }
  }
  if ((Dword & 1) != 0)
  {
    v45 = *(unsigned int *)(v14 + 104);
    if ((_DWORD)v45)
    {
      v46 = 2 * v45;
      v47 = physx::shdfnd::Foundation::mInstance;
      v48 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
          ? "static const char *physx::shdfnd::ReflectionAllocator<unsigned short>::getName() [T = unsigned short]"
          : "<allocation names disabled>";
      v49 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v47 + 24) + 16))(v47 + 24, v46, v48, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 239);
      LODWORD(v45) = *(_DWORD *)(v14 + 104);
    }
    else
    {
      v49 = 0;
    }
    *(_QWORD *)(v14 + 128) = v49;
    (**a2)(a2, (unsigned __int32 *)v49, (2 * v45));
    if (v8)
    {
      if (*(_DWORD *)(v14 + 104))
      {
        v50 = 0;
        v51 = (_BYTE *)(v49 + 1);
        do
        {
          v52 = *(v51 - 1);
          *(v51 - 1) = *v51;
          *v51 = v52;
          v51 += 2;
          ++v50;
        }
        while (v50 < *(unsigned int *)(v14 + 104));
      }
    }
  }
  if ((Dword & 2) != 0)
  {
    v53 = *(unsigned int *)(v14 + 104);
    if ((_DWORD)v53)
    {
      v54 = 4 * v53;
      v55 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v56 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
      else
        v56 = "<allocation names disabled>";
      v57 = (__int32 *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v55 + 24) + 16))(v55 + 24, v54, v56, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 215);
    }
    else
    {
      v57 = 0;
    }
    *(_QWORD *)(v14 + 64) = v57;
    v58 = physx::readDword(v8 != 0, a2);
    physx::readIndices(v58, *(_DWORD *)(v14 + 104), v57, (uint64_t (***)(_QWORD, unsigned __int8 *, uint64_t))a2, v8 != 0);
  }
  if ((Dword & 0x10) != 0)
  {
    v59 = *(_DWORD *)(v14 + 104);
    if (v59)
    {
      v60 = 4 * (3 * v59);
      v61 = physx::shdfnd::Foundation::mInstance;
      v62 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
          ? "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]"
          : "<allocation names disabled>";
      v63 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v61 + 24) + 16))(v61 + 24, v60, v62, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 206);
      v59 = *(_DWORD *)(v14 + 104);
    }
    else
    {
      v63 = 0;
    }
    *(_QWORD *)(v14 + 72) = v63;
    *(_BYTE *)(v14 + 12) |= 4u;
    (**a2)(a2, (unsigned __int32 *)v63, (12 * v59));
    if (v8)
    {
      if (*(_DWORD *)(v14 + 104))
      {
        v65 = 0;
        do
        {
          v64.i32[0] = *(_DWORD *)(v63 + 4 * v65);
          v66 = (int16x8_t)vmovl_u8(v64);
          *(int16x4_t *)v66.i8 = vrev64_s16(*(int16x4_t *)v66.i8);
          v64 = (uint8x8_t)vmovn_s16(v66);
          *(_DWORD *)(v63 + 4 * v65++) = v64.i32[0];
        }
        while (v65 < (3 * *(_DWORD *)(v14 + 104)));
      }
    }
  }
  if (v139)
  {
    if ((physx::Gu::RTree::load(v14 + 144, a2, v7, v8 != 0) & 1) == 0)
    {
      v70 = physx::shdfnd::Foundation::mInstance;
      v71 = "RTree binary image load error.";
      v72 = 303;
LABEL_220:
      physx::shdfnd::Foundation::error(v70, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", v72, v71, v67, v68, v69, v133);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      return 0;
    }
  }
  else if (v136)
  {
    if ((physx::Gu::BV4Tree::load(v14 + 192, a2, v8 != 0) & 1) == 0)
    {
      v70 = physx::shdfnd::Foundation::mInstance;
      v71 = "BV4 binary image load error.";
      v72 = 313;
      goto LABEL_220;
    }
    *(_DWORD *)(v14 + 144) = *(_DWORD *)(v14 + 16);
    *(_DWORD *)(v14 + 168) = v134;
    v73 = Triangles;
    if ((*(_BYTE *)(v14 + 12) & 2) != 0)
      v74 = 0;
    else
      v74 = Triangles;
    if ((*(_BYTE *)(v14 + 12) & 2) == 0)
      v73 = 0;
    *(_QWORD *)(v14 + 176) = v74;
    *(_QWORD *)(v14 + 184) = v73;
    *(_QWORD *)(v14 + 152) = v19;
    *(_QWORD *)(v14 + 192) = v14 + 144;
  }
  v75 = v140;
  (**a2)(a2, &v142, 4);
  if (v75)
  {
    v76.i32[0] = v142;
    v77 = (int16x8_t)vmovl_u8(v76);
    *(int16x4_t *)v77.i8 = vrev64_s16(*(int16x4_t *)v77.i8);
    v142 = vmovn_s16(v77).u32[0];
  }
  *(_DWORD *)(v14 + 56) = v142;
  v78 = v14 + 32;
  (**a2)(a2, (unsigned __int32 *)(v14 + 32), 24);
  if (v75)
  {
    for (i = 0; i != 24; i += 4)
    {
      v79.i32[0] = *(_DWORD *)(v78 + i);
      v81 = (int16x8_t)vmovl_u8(v79);
      *(int16x4_t *)v81.i8 = vrev64_s16(*(int16x4_t *)v81.i8);
      v79 = (uint8x8_t)vmovn_s16(v81);
      *(_DWORD *)(v78 + i) = v79.i32[0];
    }
  }
  v82 = v140;
  if (physx::readDword(v140, a2))
  {
    v83 = *(unsigned int *)(v14 + 104);
    if ((_DWORD)v83)
    {
      v84 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v85 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned char>::getName() [T = unsigned char]";
      else
        v85 = "<allocation names disabled>";
      v86 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v84 + 24)
                                                                                             + 16))(v84 + 24, v83, v85, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 247);
    }
    else
    {
      v86 = 0;
    }
    *(_QWORD *)(v14 + 120) = v86;
    ((void (*)(void (***)(_QWORD, unsigned __int32 *, uint64_t)))**a2)(a2);
  }
  if ((Dword & 0x20) != 0)
  {
    v87 = v141;
    if (v141 > 0xE)
    {
      v88 = 0;
      if ((Dword & 4) != 0)
      {
LABEL_138:
        LOBYTE(v142) = 0;
        if ((*(_BYTE *)(v14 + 12) & 2) != 0)
        {
          if (v24)
          {
            v95 = *(_WORD **)(v14 + 80);
            if (v137 <= 1)
              v96 = 1;
            else
              v96 = 3 * v24;
            do
            {
              (**a2)(a2, &v142, 1);
              *v95++ = v142;
              --v96;
            }
            while (v96);
          }
        }
        else if (v24)
        {
          v89 = *(_DWORD **)(v14 + 80);
          if (v137 <= 1)
            v90 = 1;
          else
            v90 = 3 * v24;
          do
          {
            (**a2)(a2, &v142, 1);
            *v89++ = v142;
            --v90;
          }
          while (v90);
        }
        goto LABEL_186;
      }
    }
    else
    {
      v88 = physx::readDword(v82, a2);
      if ((Dword & 4) != 0)
        goto LABEL_138;
    }
    if ((Dword & 8) != 0)
    {
      v97 = *(_DWORD **)(v14 + 80);
      if ((*(_BYTE *)(v14 + 12) & 2) != 0)
      {
        (**a2)(a2, *(unsigned __int32 **)(v14 + 80), (6 * v24));
        if (v82 && v24)
        {
          if (v137 <= 1)
            v104 = 1;
          else
            v104 = v137;
          v105 = (char *)v97 + 1;
          do
          {
            v106 = *(v105 - 1);
            *(v105 - 1) = *v105;
            *v105 = v106;
            v105 += 2;
            --v104;
          }
          while (v104);
        }
      }
      else
      {
        LOWORD(v142) = 0;
        if (v24)
        {
          if (v137 <= 1)
            v98 = 1;
          else
            v98 = 3 * v24;
          do
          {
            (**a2)(a2, &v142, 2);
            if (v82)
            {
              v99 = v142;
              LOBYTE(v142) = BYTE1(v142);
              BYTE1(v142) = v99;
            }
            *v97++ = (unsigned __int16)v142;
            --v98;
          }
          while (v98);
        }
      }
    }
    else if ((*(_BYTE *)(v14 + 12) & 2) != 0)
    {
      v142 = 0;
      if (v24)
      {
        v100 = *(_WORD **)(v14 + 80);
        if (v137 <= 1)
          v101 = 1;
        else
          v101 = 3 * v24;
        do
        {
          (**a2)(a2, &v142, 4);
          if (v82)
          {
            v102.i32[0] = v142;
            v103 = (int16x8_t)vmovl_u8(v102);
            *(int16x4_t *)v103.i8 = vrev64_s16(*(int16x4_t *)v103.i8);
            v142 = vmovn_s16(v103).u32[0];
          }
          *v100++ = v142;
          --v101;
        }
        while (v101);
      }
    }
    else
    {
      v91 = *(unsigned __int32 **)(v14 + 80);
      (**a2)(a2, v91, (12 * v24));
      if (v82 && v24)
      {
        if (v137 <= 1)
          v93 = 1;
        else
          v93 = v137;
        do
        {
          v92.i32[0] = *v91;
          v94 = (int16x8_t)vmovl_u8(v92);
          *(int16x4_t *)v94.i8 = vrev64_s16(*(int16x4_t *)v94.i8);
          v92 = (uint8x8_t)vmovn_s16(v94);
          *v91++ = v92.i32[0];
          --v93;
        }
        while (v93);
      }
    }
LABEL_186:
    v107 = *(_DWORD *)(v14 + 104);
    if (4 * v107)
    {
      v108 = 16 * v107;
      v109 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v110 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
      else
        v110 = "<allocation names disabled>";
      v111 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v109 + 24)
                                                                                              + 16))(v109 + 24, v108, v110, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 427);
      v107 = *(_DWORD *)(v14 + 104);
    }
    else
    {
      v111 = 0;
    }
    *(_QWORD *)(v14 + 88) = v111;
    if (v107)
    {
      v112 = 4 * v107;
      v113 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v114 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
      else
        v114 = "<allocation names disabled>";
      v115 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v113 + 24)
                                                                                              + 16))(v113 + 24, v112, v114, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 428);
      v111 = *(_QWORD *)(v14 + 88);
      v116 = (16 * *(_DWORD *)(v14 + 104));
    }
    else
    {
      v116 = 0;
      v115 = 0;
    }
    *(_QWORD *)(v14 + 96) = v115;
    (**a2)(a2, (unsigned __int32 *)v111, v116);
    if (v87 <= 0xE)
    {
      if (*(_DWORD *)(v14 + 16))
      {
        v117 = 0;
        do
        {
          physx::readDword(v82, a2);
          ++v117;
          v118 = *(_DWORD *)(v14 + 16);
        }
        while (v117 < v118);
        if (v118)
        {
          v119 = 0;
          do
          {
            physx::readDword(v82, a2);
            ++v119;
          }
          while (v119 < *(_DWORD *)(v14 + 16));
        }
      }
      for (; v88; --v88)
        physx::readDword(v82, a2);
    }
    (**a2)(a2, *(unsigned __int32 **)(v14 + 96), (4 * *(_DWORD *)(v14 + 104)));
    if (v82 && (*(_DWORD *)(v14 + 104) & 0x3FFFFFFF) != 0)
    {
      v121 = 0;
      do
      {
        v122 = *(_QWORD *)(v14 + 80);
        v120.i32[0] = *(_DWORD *)(v122 + 4 * v121);
        v123 = (int16x8_t)vmovl_u8(v120);
        *(int16x4_t *)v123.i8 = vrev64_s16(*(int16x4_t *)v123.i8);
        v120 = (uint8x8_t)vmovn_s16(v123);
        *(_DWORD *)(v122 + 4 * v121++) = v120.i32[0];
        v124 = *(_DWORD *)(v14 + 104);
      }
      while (v121 < (4 * v124));
      if ((v124 & 0x3FFFFFFF) != 0)
      {
        v125 = 0;
        do
        {
          v126 = *(_QWORD *)(v14 + 88);
          v120.i32[0] = *(_DWORD *)(v126 + 4 * v125);
          v127 = (int16x8_t)vmovl_u8(v120);
          *(int16x4_t *)v127.i8 = vrev64_s16(*(int16x4_t *)v127.i8);
          v120 = (uint8x8_t)vmovn_s16(v127);
          *(_DWORD *)(v126 + 4 * v125++) = v120.i32[0];
        }
        while (v125 < (4 * *(_DWORD *)(v14 + 104)));
      }
    }
    v128 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v129 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::BV32Tree>::getName() [T = physx::Gu::BV32Tree]";
    else
      v129 = "<allocation names disabled>";
    v130 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v128 + 24)
                                                                                            + 16))(v128 + 24, 64, v129, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 455);
    *(_QWORD *)(v130 + 40) = 0;
    *(_QWORD *)(v130 + 48) = 0;
    *(_QWORD *)(v130 + 32) = 0;
    *(_BYTE *)(v130 + 56) = 0;
    *(_QWORD *)(v130 + 8) = 0;
    *(_QWORD *)(v130 + 16) = 0;
    *(_QWORD *)v130 = 0;
    *(_DWORD *)(v130 + 24) = 0;
    *(_QWORD *)(v14 + 136) = v130;
    if ((physx::Gu::BV32Tree::load(v130, a2, v82) & 1) == 0)
    {
      v70 = physx::shdfnd::Foundation::mInstance;
      v71 = "BV32 binary image load error.";
      v72 = 459;
      goto LABEL_220;
    }
  }
  TriangleMesh = physx::GuMeshFactory::createTriangleMesh(v135, (physx::Gu::TriangleMeshData *)v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return TriangleMesh;
}

uint64_t physx::GuMeshFactory::removeTriangleMesh(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  v6 = a2;
  v4 = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(a1 + 16, &v6);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v4;
}

uint64_t physx::GuMeshFactory::getNbTriangleMeshes(pthread_mutex_t **this)
{
  uint64_t v2;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled)
    return *((unsigned int *)this + 17);
  pthread_mutex_lock(this[1]);
  v2 = *((unsigned int *)this + 17);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(this[1]);
  return v2;
}

uint64_t physx::GuMeshFactory::getTriangleMeshes(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v5;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  LODWORD(v5) = a3;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  v8 = (*(_DWORD *)(a1 + 68) - a4) & ~((int)(*(_DWORD *)(a1 + 68) - a4) >> 31);
  if (v8 >= v5)
    v5 = v5;
  else
    v5 = v8;
  if ((_DWORD)v5)
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 8 * a4);
    v10 = v5;
    do
    {
      v11 = *v9++;
      *a2++ = v11;
      --v10;
    }
    while (v10);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v5;
}

uint64_t physx::GuMeshFactory::addConvexMesh(uint64_t this, physx::Gu::ConvexMesh *a2, int a3, int8x8_t a4)
{
  uint64_t v4;
  int32x2_t *v5;
  physx::Gu::ConvexMesh *v6;
  char v7;
  char v8;

  v6 = a2;
  if (a2)
  {
    v4 = this;
    v5 = (int32x2_t *)(this + 72);
    if (a3)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
      v7 = 0;
      this = physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v5, &v6, &v7, a4);
      if (!v7)
        *(_QWORD *)this = v6;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        return pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 8));
    }
    else
    {
      v8 = 0;
      this = physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create((int32x2_t *)(this + 72), &v6, &v8, a4);
      if (!v8)
        *(_QWORD *)this = v6;
    }
  }
  return this;
}

physx::Gu::ConvexMesh *physx::GuMeshFactory::createConvexMesh(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const char *v5;
  physx::Gu::ConvexMesh *v6;
  int8x8_t v7;
  uint64_t v8;

  v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::ConvexMesh>::getName() [T = physx::Gu::ConvexMesh]";
  else
    v5 = "<allocation names disabled>";
  v6 = (physx::Gu::ConvexMesh *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 168, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 514);
  v7 = (int8x8_t)physx::Gu::ConvexMesh::ConvexMesh((uint64_t)v6, a1, a2).n128_u64[0];
  if (v8)
    physx::GuMeshFactory::addConvexMesh(a1, v6, 1, v7);
  return v6;
}

uint64_t physx::GuMeshFactory::createConvexMesh(uint64_t a1, void (***a2)(_QWORD, unsigned __int32 *, uint64_t))
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int *v7;
  int8x8_t v8;
  unsigned int v9;

  v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::ConvexMesh>::getName() [T = physx::Gu::ConvexMesh]";
  else
    v5 = "<allocation names disabled>";
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 168, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 524);
  *(_DWORD *)(v6 + 8) = 196610;
  *(_QWORD *)(v6 + 16) = &unk_24ED917F0;
  *(_DWORD *)(v6 + 24) = 1;
  v7 = (unsigned int *)(v6 + 24);
  *(_QWORD *)v6 = off_24ED91748;
  *(_DWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_OWORD *)(v6 + 120) = xmmword_2260E5F20;
  *(_OWORD *)(v6 + 136) = xmmword_2260E5F20;
  *(_QWORD *)(v6 + 152) = 0x3F80000000000000;
  *(int32x2_t *)(v6 + 44) = vdup_n_s32(0xFE7FFFFF);
  *(_DWORD *)(v6 + 52) = -25165825;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_QWORD *)(v6 + 160) = a1;
  if ((physx::Gu::ConvexMesh::load(v6, a2) & 1) != 0)
  {
    physx::GuMeshFactory::addConvexMesh(a1, (physx::Gu::ConvexMesh *)v6, 1, v8);
  }
  else
  {
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (v9 == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 16) + 16))(v6 + 16);
    return 0;
  }
  return v6;
}

uint64_t physx::GuMeshFactory::removeConvexMesh(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  v6 = a2;
  v4 = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(a1 + 72, &v6);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v4;
}

uint64_t physx::GuMeshFactory::getNbConvexMeshes(pthread_mutex_t **this)
{
  uint64_t v2;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled)
    return *((unsigned int *)this + 31);
  pthread_mutex_lock(this[1]);
  v2 = *((unsigned int *)this + 31);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(this[1]);
  return v2;
}

uint64_t physx::GuMeshFactory::getConvexMeshes(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v5;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  LODWORD(v5) = a3;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  v8 = (*(_DWORD *)(a1 + 124) - a4) & ~((int)(*(_DWORD *)(a1 + 124) - a4) >> 31);
  if (v8 >= v5)
    v5 = v5;
  else
    v5 = v8;
  if ((_DWORD)v5)
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 8 * a4);
    v10 = v5;
    do
    {
      v11 = *v9++;
      *a2++ = v11;
      --v10;
    }
    while (v10);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v5;
}

uint64_t physx::GuMeshFactory::addHeightField(uint64_t this, physx::Gu::HeightField *a2, int a3, int8x8_t a4)
{
  uint64_t v4;
  int32x2_t *v5;
  physx::Gu::HeightField *v6;
  char v7;
  char v8;

  v6 = a2;
  if (a2)
  {
    v4 = this;
    v5 = (int32x2_t *)(this + 128);
    if (a3)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
      v7 = 0;
      this = physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v5, &v6, &v7, a4);
      if (!v7)
        *(_QWORD *)this = v6;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        return pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 8));
    }
    else
    {
      v8 = 0;
      this = physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create((int32x2_t *)(this + 128), &v6, &v8, a4);
      if (!v8)
        *(_QWORD *)this = v6;
    }
  }
  return this;
}

physx::Gu::HeightField *physx::GuMeshFactory::createHeightField(physx::GuMeshFactory *this, uint64_t a2)
{
  uint64_t v4;
  const char *v5;
  physx::Gu::HeightField *v6;
  int8x8_t v7;
  uint64_t v8;

  v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::HeightField>::getName() [T = physx::Gu::HeightField]";
  else
    v5 = "<allocation names disabled>";
  v6 = (physx::Gu::HeightField *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 136, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 570);
  v7 = (int8x8_t)physx::Gu::HeightField::HeightField((uint64_t)v6, (uint64_t)this, a2).n128_u64[0];
  if (v8)
    physx::GuMeshFactory::addHeightField((uint64_t)this, v6, 1, v7);
  return v6;
}

uint64_t physx::GuMeshFactory::createHeightField(uint64_t a1, void (***a2)(_QWORD, unsigned __int32 *, uint64_t))
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int *v7;
  int8x8_t v8;
  unsigned int v9;

  v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::HeightField>::getName() [T = physx::Gu::HeightField]";
  else
    v5 = "<allocation names disabled>";
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 136, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 580);
  *(_DWORD *)(v6 + 8) = 196609;
  *(_QWORD *)(v6 + 16) = &unk_24ED91A18;
  *(_DWORD *)(v6 + 24) = 1;
  v7 = (unsigned int *)(v6 + 24);
  *(_QWORD *)v6 = off_24ED91948;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_DWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = a1;
  *(_DWORD *)(v6 + 96) = 1;
  *(_QWORD *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 88) = 0;
  *(_WORD *)(v6 + 92) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  if ((physx::Gu::HeightField::load(v6, a2) & 1) != 0)
  {
    physx::GuMeshFactory::addHeightField(a1, (physx::Gu::HeightField *)v6, 1, v8);
  }
  else
  {
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (v9 == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 16) + 16))(v6 + 16);
    return 0;
  }
  return v6;
}

uint64_t physx::GuMeshFactory::removeHeightField(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  v6 = a2;
  v4 = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(a1 + 128, &v6);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v4;
}

uint64_t physx::GuMeshFactory::getNbHeightFields(pthread_mutex_t **this)
{
  uint64_t v2;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled)
    return *((unsigned int *)this + 45);
  pthread_mutex_lock(this[1]);
  v2 = *((unsigned int *)this + 45);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(this[1]);
  return v2;
}

uint64_t physx::GuMeshFactory::getHeightFields(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v5;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  LODWORD(v5) = a3;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  v8 = (*(_DWORD *)(a1 + 180) - a4) & ~((int)(*(_DWORD *)(a1 + 180) - a4) >> 31);
  if (v8 >= v5)
    v5 = v5;
  else
    v5 = v8;
  if ((_DWORD)v5)
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 136) + 8 * a4);
    v10 = v5;
    do
    {
      v11 = *v9++;
      *a2++ = v11;
      --v10;
    }
    while (v10);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v5;
}

uint64_t physx::GuMeshFactory::addFactoryListener(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 8));
  v5 = a2;
  v4 = *(unsigned int *)(v3 + 248);
  if ((*(_DWORD *)(v3 + 252) & 0x7FFFFFFFu) <= v4)
  {
    result = physx::shdfnd::Array<physx::GuMeshFactoryListener *,physx::shdfnd::ReflectionAllocator<physx::GuMeshFactoryListener *>>::growAndPushBack(v3 + 240, &v5);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v3 + 240) + 8 * v4) = a2;
    *(_DWORD *)(v3 + 248) = v4 + 1;
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 8));
  return result;
}

uint64_t physx::GuMeshFactory::addBVHStructure(uint64_t this, physx::Gu::BVHStructure *a2, int a3, int8x8_t a4)
{
  uint64_t v4;
  int32x2_t *v5;
  physx::Gu::BVHStructure *v6;
  char v7;
  char v8;

  v6 = a2;
  if (a2)
  {
    v4 = this;
    v5 = (int32x2_t *)(this + 184);
    if (a3)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
      v7 = 0;
      this = physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v5, &v6, &v7, a4);
      if (!v7)
        *(_QWORD *)this = v6;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        return pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 8));
    }
    else
    {
      v8 = 0;
      this = physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create((int32x2_t *)(this + 184), &v6, &v8, a4);
      if (!v8)
        *(_QWORD *)this = v6;
    }
  }
  return this;
}

uint64_t physx::GuMeshFactory::createBVHStructure(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::BVHStructure>::getName() [T = physx::Gu::BVHStructure]";
  else
    v5 = "<allocation names disabled>";
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 80, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 658);
  *(_DWORD *)(v6 + 8) = 196625;
  *(_DWORD *)(v6 + 24) = 1;
  *(_QWORD *)v6 = off_24ED911C8;
  *(_QWORD *)(v6 + 16) = &unk_24ED91238;
  *(_QWORD *)(v6 + 32) = a1;
  *(_QWORD *)(v6 + 40) = *(_QWORD *)a2;
  v7 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v6 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = v8;
  physx::GuMeshFactory::addBVHStructure(a1, (physx::Gu::BVHStructure *)v6, 1, *(int8x8_t *)&v7);
  return v6;
}

uint64_t physx::GuMeshFactory::createBVHStructure(uint64_t a1, void (***a2)(_QWORD, unsigned __int32 *, uint64_t))
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int *v7;
  int8x8_t v8;
  unsigned int v9;

  v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::BVHStructure>::getName() [T = physx::Gu::BVHStructure]";
  else
    v5 = "<allocation names disabled>";
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 80, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 668);
  *(_DWORD *)(v6 + 8) = 196625;
  *(_QWORD *)(v6 + 16) = &unk_24ED91238;
  *(_DWORD *)(v6 + 24) = 1;
  v7 = (unsigned int *)(v6 + 24);
  *(_QWORD *)v6 = off_24ED911C8;
  *(_QWORD *)(v6 + 32) = a1;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)(v6 + 72) = 0;
  if ((physx::Gu::BVHStructure::load(v6, a2) & 1) != 0)
  {
    physx::GuMeshFactory::addBVHStructure(a1, (physx::Gu::BVHStructure *)v6, 1, v8);
  }
  else
  {
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (v9 == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 16) + 16))(v6 + 16);
    return 0;
  }
  return v6;
}

uint64_t physx::GuMeshFactory::removeBVHStructure(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  v6 = a2;
  v4 = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(a1 + 184, &v6);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v4;
}

uint64_t physx::GuMeshFactory::getNbBVHStructures(pthread_mutex_t **this)
{
  uint64_t v2;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled)
    return *((unsigned int *)this + 59);
  pthread_mutex_lock(this[1]);
  v2 = *((unsigned int *)this + 59);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(this[1]);
  return v2;
}

uint64_t physx::GuMeshFactory::getBVHStructures(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v5;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  LODWORD(v5) = a3;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  v8 = (*(_DWORD *)(a1 + 236) - a4) & ~((int)(*(_DWORD *)(a1 + 236) - a4) >> 31);
  if (v8 >= v5)
    v5 = v5;
  else
    v5 = v8;
  if ((_DWORD)v5)
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 192) + 8 * a4);
    v10 = v5;
    do
    {
      v11 = *v9++;
      *a2++ = v11;
      --v10;
    }
    while (v10);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v5;
}

uint64_t physx::Gu::gjk<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(uint64_t a1, uint64_t a2, float32x4_t *a3, _QWORD *a4, int8x16_t *a5, int8x16_t *a6, float32x4_t *a7, _QWORD *a8, double a9, double a10, double a11, int32x4_t a12)
{
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  int v21;
  float32x2_t v27;
  float32x2_t v28;
  int v29;
  float32x4_t v30;
  uint64_t v31;
  const float *v32;
  float32x2_t v33;
  uint64_t v34;
  const float *v35;
  float32x2_t v36;
  int32x4_t v37;
  float32x2_t v38;
  int32x4_t v39;
  float v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x4_t v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x2_t v53;
  uint64_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x2_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x2_t v60;
  float32x2_t v61;
  int v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x8_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  int8x8_t v73;
  float32x4_t v74;
  float32x2_t v75;
  float32x2_t v76;
  int8x8_t v77;
  float32x4_t v78;
  int8x8_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x2_t v82;
  float32x4_t v83;
  float32x2_t v84;
  float32x4_t v85;
  float32x2_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x4_t v91;
  float32x2_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x2_t v97;
  float32x4_t v98;
  float32x2_t v99;
  float32x4_t v100;
  float32x2_t v101;
  __int32 v102;
  uint64_t v103;
  uint64_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x2_t v110;
  int v111;
  int8x16_t v112;
  float32x2_t v113;
  float32x2_t v114;
  int v115;
  float32x2_t v116;
  float32x2_t v117;
  float32x2_t v118;
  int v119;
  unsigned int v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  int v124;
  int8x16_t v125;
  float32x2_t v126;
  float32x2_t v127;
  int v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x2_t v135;
  float32x2_t v136;
  int v137;
  float32x2_t v138;
  int v139;
  int16x4_t v140;
  int8x8_t v141;
  float32x4_t v142;
  const float *v143;
  float32x2_t v144;
  float32x2_t v145;
  float32x4_t v146;
  float32x4_t v147;
  int8x16_t *v148;
  int8x16_t *v149;
  float32x4_t v150;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  int8x16_t *v155;
  int8x16_t *v156;
  int8x16_t v157;
  int8x16_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x2_t v167;
  float32x2_t v168;
  int v169;
  float32x4_t v170;
  float32x4_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x2_t v181;
  float32x2_t v182;
  int v183;
  float32x4_t v184;
  float32x4_t v185;
  int8x16_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int32x4_t v189;
  int8x16_t v190;
  int8x16_t v191;
  float32x4_t v194;
  float32x2_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  unsigned int v202;
  float32x2_t v203;
  float32x2_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213[2];
  uint64_t v214;

  v214 = *MEMORY[0x24BDAC8D0];
  v202 = 0;
  v16 = vmulq_f32(*a3, *a3);
  v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
  v17 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32)), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_2260E5F10);
  v201 = v17;
  v18 = vmulq_f32(v17, v17);
  v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
  v19 = vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32);
  v20 = vrsqrte_f32(v19);
  v21 = 4;
  do
  {
    v20 = vmul_f32(v20, vrsqrts_f32(vmul_f32(v20, v20), v19));
    --v21;
  }
  while (v21);
  __asm { FMOV            V9.2S, #1.0 }
  v27 = vmul_f32(v19, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v19), 0), (int8x8_t)_D9, (int8x8_t)v20));
  v28 = vrecpe_f32(v27);
  v29 = 4;
  do
  {
    v28 = vmul_f32(v28, vrecps_f32(v27, v28));
    --v29;
  }
  while (v29);
  v30 = vmulq_n_f32(v17, v28.f32[0]);
  v30.i32[3] = 0;
  v31 = *(_QWORD *)(a1 + 8);
  v32 = (const float *)(v31 + 20);
  v33 = vld1_dup_f32(v32);
  v34 = *(_QWORD *)(a2 + 8);
  v35 = (const float *)(v34 + 20);
  *(float32x2_t *)a12.i8 = vld1_dup_f32(v35);
  v36 = vmul_f32(vmin_f32(v33, *(float32x2_t *)a12.i8), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  *(int32x2_t *)a12.i8 = vdup_n_s32(0x358637BDu);
  v37 = vdupq_n_s32(-*(char *)(v31 + 32));
  v38 = vmax_f32(v36, *(float32x2_t *)a12.i8);
  v39 = vdupq_n_s32(-*(char *)(v34 + 32));
  v190 = (int8x16_t)v37;
  v191 = (int8x16_t)v39;
  v39.i32[0] = *(_DWORD *)(v31 + 16);
  a12.i32[0] = -*(char *)(v31 + 32);
  *(int32x2_t *)v39.i8 = vdup_lane_s32((int32x2_t)vand_s8(*(int8x8_t *)v39.i8, *(int8x8_t *)a12.i8), 0);
  a12.i32[0] = *(_DWORD *)(v34 + 16);
  v37.i32[0] = -*(char *)(v34 + 32);
  *(float32x2_t *)a12.i8 = vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8(*(int8x8_t *)a12.i8, *(int8x8_t *)v37.i8), 0));
  v195 = *(float32x2_t *)a12.i8;
  v40 = COERCE_FLOAT(*a4) + *(float *)a12.i32;
  v41 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  v42 = (float32x2_t)vdup_n_s32(0x3F7FF141u);
  a12.i32[0] = -1;
  v189 = a12;
  while (1)
  {
    v197 = v30;
    v200 = v17;
    v43 = v41;
    v194 = v17;
    v44 = vnegq_f32(v17);
    v44.i32[3] = 0;
    v45 = *(float32x4_t **)(a1 + 8);
    v46 = v45[3];
    v47 = v45[4];
    v48 = vmulq_f32(v44, v46);
    v48.i64[0] = vpaddq_f32(v48, v48).u64[0];
    v49 = vmulq_f32(v44, v47);
    v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
    v196 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32), vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32)), 0), (int8x16_t)v46, (int8x16_t)v47);
    *(double *)v50.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v201);
    v51 = v50;
    v17 = vsubq_f32(v196, v50);
    v52 = vmulq_f32(v197, v17);
    v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
    v53 = vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32);
    if (v53.f32[0] > v40)
      return 0;
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v53, v195), (int8x8_t)vcgt_f32(v53, vmul_f32(v43, v42))), 0), *(int8x8_t *)v17.f32).u32[0] == -1)break;
    v54 = v202;
    *(&v208 + v202) = v196;
    *(&v205 + v54) = v51;
    v202 = v54 + 1;
    *(&v211 + v54) = v17;
    switch((_DWORD)v54)
    {
      case 3:
        physx::Gu::closestPtPointTetrahedron(&v211, &v208, &v205, (int *)&v202);
        goto LABEL_48;
      case 2:
        v17 = v211;
        v63 = vsubq_f32(v212, v211);
        v64 = vsubq_f32(v213[0], v211);
        v66 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v63.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v63, (int8x16_t)v63, 4uLL), *(float32x2_t *)v64.f32);
        *(int8x8_t *)v65.f32 = vext_s8(v66, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL), *(float32x2_t *)v64.f32), *(float32x2_t *)v63.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL)), 4uLL);
        v66.i32[1] = 0;
        v202 = 3;
        v67 = vpadd_f32(vmul_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32), vmul_f32((float32x2_t)v66.u32[0], (float32x2_t)v66.u32[0]));
        v68 = vpadd_f32(v67, v67);
        if (v68.f32[0] > 0.00000011921)
        {
          if (v68.f32[0] == 0.0)
          {
            v17 = 0uLL;
          }
          else
          {
            *(int8x8_t *)&v65.u32[2] = v66;
            v69 = (float32x2_t)vextq_s8((int8x16_t)v212, (int8x16_t)v212, 8uLL).u64[0];
            v70 = (float32x2_t)vextq_s8((int8x16_t)v213[0], (int8x16_t)v213[0], 8uLL).u64[0];
            v71 = (float32x2_t)vextq_s8((int8x16_t)v213[0], (int8x16_t)v213[0], 4uLL).u64[0];
            v72 = (float32x2_t)vextq_s8((int8x16_t)v212, (int8x16_t)v212, 4uLL).u64[0];
            v73 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v212.f32, v71), v72, *(float32x2_t *)v213[0].f32);
            *(int8x8_t *)v74.f32 = vext_s8(v73, (int8x8_t)vmls_f32(vmul_f32(v69, *(float32x2_t *)v213[0].f32), *(float32x2_t *)v212.f32, v70), 4uLL);
            v74.i64[1] = v73.u32[0];
            v75 = (float32x2_t)vextq_s8((int8x16_t)v211, (int8x16_t)v211, 8uLL).u64[0];
            v76 = (float32x2_t)vextq_s8((int8x16_t)v211, (int8x16_t)v211, 4uLL).u64[0];
            v77 = (int8x8_t)vmls_f32(vmul_f32(v76, *(float32x2_t *)v213[0].f32), v71, *(float32x2_t *)v211.f32);
            *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v211.f32, v70), *(float32x2_t *)v213[0].f32, v75), 4uLL);
            v78.i64[1] = v77.u32[0];
            v79 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v211.f32, v72), v76, *(float32x2_t *)v212.f32);
            *(int8x8_t *)v80.f32 = vext_s8(v79, (int8x8_t)vmls_f32(vmul_f32(v75, *(float32x2_t *)v212.f32), *(float32x2_t *)v211.f32, v69), 4uLL);
            v80.i64[1] = v79.u32[0];
            v81 = vmulq_f32(v74, v65);
            v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
            v82 = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32);
            v83 = vmulq_f32(v78, v65);
            v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
            v84 = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32);
            v85 = vmulq_f32(v80, v65);
            v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
            v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v84), (int8x8_t)vcgez_f32(v82)), (int8x8_t)vcgez_f32(v86)), 0), *(int8x8_t *)v211.f32).u32[0] == -1)
            {
              v112 = (int8x16_t)vmulq_f32(v211, v65);
              v113 = (float32x2_t)vextq_s8(v112, v112, 8uLL).u64[0];
              v114 = vrecpe_f32(v68);
              v115 = 4;
              do
              {
                v114 = vmul_f32(v114, vrecps_f32(v68, v114));
                --v115;
              }
              while (v115);
              v116 = vpadd_f32(*(float32x2_t *)v112.i8, v113);
              v17 = vmulq_n_f32(v65, vmul_f32(v114, vpadd_f32(v116, v116)).f32[0]);
              v17.i32[3] = 0;
            }
            else
            {
              v87 = vnegq_f32(v211);
              v87.i32[3] = 0;
              v88 = vnegq_f32(v212);
              v88.i32[3] = 0;
              v89 = vmulq_f32(v87, v63);
              v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
              v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
              v91 = vmulq_f32(v63, v88);
              v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
              v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v90), (int8x8_t)vclez_f32(v92)), (int8x8_t)vclez_f32(v86)), 0), *(int8x8_t *)v211.f32).u32[0] == -1)
              {
                v117 = vsub_f32(v90, v92);
                v118 = vrecpe_f32(v117);
                v119 = 4;
                do
                {
                  v118 = vmul_f32(v118, vrecps_f32(v117, v118));
                  --v119;
                }
                while (v119);
                v104 = 0;
                v17 = vmlaq_n_f32(v211, v63, vmul_f32(v90, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v117), (float32x2_t)0x3400000034000000), (int8x8_t)v118, 0)).f32[0]);
                v17.i64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u32[0];
                v120 = 2;
                v103 = 1;
              }
              else
              {
                v93 = vnegq_f32(v213[0]);
                v93.i32[3] = 0;
                v94 = vmulq_f32(v88, v64);
                v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
                v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
                v96 = vmulq_f32(v63, v93);
                v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
                v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
                v98 = vmulq_f32(v64, v93);
                v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
                v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v95, v92), (int8x8_t)vcge_f32(v97, v99)), (int8x8_t)vclez_f32(v82)), 0), *(int8x8_t *)v211.f32).u32[0] == -1)
                {
                  v121 = vsub_f32(v95, v92);
                  v122 = vadd_f32(v121, vsub_f32(v97, v99));
                  v123 = vrecpe_f32(v122);
                  v124 = 4;
                  do
                  {
                    v123 = vmul_f32(v123, vrecps_f32(v122, v123));
                    --v124;
                  }
                  while (v124);
                  v125 = (int8x16_t)vmlaq_n_f32(v212, vsubq_f32(v213[0], v212), vmul_f32(v121, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v122), (float32x2_t)0x3400000034000000), (int8x8_t)v123, 0)).f32[0]);
                  v125.i64[1] = vextq_s8(v125, v125, 8uLL).u32[0];
                  v120 = 2;
                  v103 = 2;
                  v104 = 1;
                  v17 = (float32x4_t)v125;
                }
                else
                {
                  v100 = vmulq_f32(v87, v64);
                  v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
                  v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
                  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v101), (int8x8_t)vclez_f32(v99)), (int8x8_t)vclez_f32(v84)), 0), *(int8x8_t *)v211.f32).u32[0] == -1)
                  {
                    v126 = vsub_f32(v101, v99);
                    v127 = vrecpe_f32(v126);
                    v128 = 4;
                    do
                    {
                      v127 = vmul_f32(v127, vrecps_f32(v126, v127));
                      --v128;
                    }
                    while (v128);
                    v104 = 0;
                    v17 = vmlaq_n_f32(v211, v64, vmul_f32(v101, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v126), (float32x2_t)0x3400000034000000), (int8x8_t)v127, 0)).f32[0]);
                    v17.i64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u32[0];
                    v103 = 2;
                  }
                  else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v101), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v211.f32).u32[0] == -1)
                  {
                    v104 = 0;
                    v103 = 1;
                  }
                  else
                  {
                    *(int16x4_t *)v17.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v92, v95), (int8x8_t)vcgez_f32(v92)), 0);
                    *(int8x8_t *)v17.f32 = vuzp1_s8(*(int8x8_t *)v17.f32, *(int8x8_t *)v17.f32);
                    v102 = v17.i32[0];
                    v17 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v17, v189), 0), (int8x16_t)v212, (int8x16_t)v213[0]);
                    v103 = 1;
                    if (v102 == -1)
                      v104 = 1;
                    else
                      v104 = 2;
                  }
                  v120 = v103;
                }
              }
              v129 = *(&v211 + v103);
              v130 = *(&v208 + v104);
              v131 = *(&v208 + v103);
              v132 = *(&v205 + v104);
              v133 = *(&v205 + v103);
              v211 = *(&v211 + v104);
              v212 = v129;
              v208 = v130;
              v209 = v131;
              v205 = v132;
              v206 = v133;
              v202 = v120;
            }
          }
          goto LABEL_48;
        }
        v202 = 2;
        v105 = vmulq_f32(v63, v63);
        v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
        v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v106), 0), *(int8x8_t *)v211.f32).u32[0] != -1)
        {
          v107 = vnegq_f32(v211);
          v107.i32[3] = 0;
          v108 = vmulq_f32(v107, v63);
          v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
          v109 = vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32);
          v110 = vrecpe_f32(v106);
          v111 = 4;
          do
          {
            v110 = vmul_f32(v110, vrecps_f32(v106, v110));
            --v111;
          }
          while (v111);
          v17 = vmlaq_n_f32(v211, v63, vmax_f32(vmin_f32(vmul_f32(v109, v110), _D9), 0).f32[0]);
          goto LABEL_30;
        }
        break;
      case 1:
        v17 = v211;
        v55 = vsubq_f32(v212, v211);
        v56 = vmulq_f32(v55, v55);
        v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
        v57 = vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v57), 0), *(int8x8_t *)v211.f32).u32[0] != -1)
        {
          v58 = vnegq_f32(v211);
          v58.i32[3] = 0;
          v59 = vmulq_f32(v58, v55);
          v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
          v60 = vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32);
          v61 = vrecpe_f32(v57);
          v62 = 4;
          do
          {
            v61 = vmul_f32(v61, vrecps_f32(v57, v61));
            --v62;
          }
          while (v62);
          v17 = vmlaq_n_f32(v211, v55, vmax_f32(vmin_f32(vmul_f32(v60, v61), _D9), 0).f32[0]);
LABEL_30:
          v17.i64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u32[0];
          goto LABEL_48;
        }
        break;
      default:
        goto LABEL_48;
    }
    v202 = 1;
LABEL_48:
    v201 = v17;
    v134 = vmulq_f32(v17, v17);
    v134.i64[0] = vpaddq_f32(v134, v134).u64[0];
    v135 = vpadd_f32(*(float32x2_t *)v134.f32, *(float32x2_t *)v134.f32);
    v136 = vrsqrte_f32(v135);
    v137 = 4;
    do
    {
      v136 = vmul_f32(v136, vrsqrts_f32(vmul_f32(v136, v136), v135));
      --v137;
    }
    while (v137);
    v41 = vmul_f32(v135, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v135), 0), (int8x8_t)_D9, (int8x8_t)v136));
    v138 = vrecpe_f32(v41);
    v139 = 4;
    do
    {
      v138 = vmul_f32(v138, vrecps_f32(v41, v138));
      --v139;
    }
    while (v139);
    v30 = vmulq_n_f32(v17, v138.f32[0]);
    v30.i32[3] = 0;
    v140 = (int16x4_t)vcgt_f32(v43, v41);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v41, v38), (int8x8_t)v140), 0), *(int8x8_t *)v17.f32).u32[0] != -1)
    {
      v141 = (int8x8_t)vdup_lane_s16(v140, 0);
      *(int8x8_t *)v142.f32 = vuzp1_s8(v141, v141);
      if (v142.i32[0] == -1)
      {
        *a8 = 0;
        return 2;
      }
      else
      {
        v142.i32[0] = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 16);
        v143 = (const float *)(*(_QWORD *)(a2 + 8) + 16);
        v144 = vld1_dup_f32(v143);
        v145 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v195), 0), (int8x8_t)v195, (int8x8_t)vmul_f32(vmin_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v142.f32, 0), v144), (float32x2_t)vdup_n_s32(0x3E4CCCCDu)));
        v146 = vnegq_f32(v197);
        v146.i32[3] = 0;
        if (v202 == 3)
        {
          v203 = 0;
          v204 = 0;
          v199 = v146;
          physx::Gu::barycentricCoordinates(&v200, &v211, &v212, v213, &v204, &v203);
          v175 = vmulq_n_f32(vsubq_f32(v209, v208), v204.f32[0]);
          v175.i32[3] = 0;
          v176 = vmulq_n_f32(vsubq_f32(v210, v208), v203.f32[0]);
          v176.i32[3] = 0;
          v147 = vaddq_f32(v208, vaddq_f32(v175, v176));
          v142 = vmulq_n_f32(vsubq_f32(v206, v205), v204.f32[0]);
          v146 = v199;
          v142.i32[3] = 0;
          v177 = vmulq_n_f32(vsubq_f32(v207, v205), v203.f32[0]);
          v177.i32[3] = 0;
          v150 = vaddq_f32(v205, vaddq_f32(v142, v177));
          v142.i32[0] = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 16);
          v148 = a5;
          v149 = a6;
        }
        else if (v202 == 2)
        {
          v178 = vsubq_f32(v211, v194);
          v179 = vsubq_f32(vsubq_f32(v212, v194), v178);
          v180 = vmulq_f32(v179, v179);
          v180.i64[0] = vpaddq_f32(v180, v180).u64[0];
          v181 = vpadd_f32(*(float32x2_t *)v180.f32, *(float32x2_t *)v180.f32);
          v182 = vrecpe_f32(v181);
          v183 = 4;
          v148 = a5;
          v149 = a6;
          do
          {
            v182 = vmul_f32(v182, vrecps_f32(v181, v182));
            --v183;
          }
          while (v183);
          v184 = vnegq_f32(v178);
          v184.i32[3] = 0;
          v185 = vmulq_f32(v184, v179);
          v185.i64[0] = vpaddq_f32(v185, v185).u64[0];
          v184.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v181), (int8x8_t)v182, 0), vpadd_f32(*(float32x2_t *)v185.f32, *(float32x2_t *)v185.f32)).u32[0];
          v147 = vmlaq_n_f32(v208, vsubq_f32(v209, v208), v184.f32[0]);
          v147.i64[1] = vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL).u32[0];
          v150 = vmlaq_n_f32(v205, vsubq_f32(v206, v205), v184.f32[0]);
          v150.i64[1] = vextq_s8((int8x16_t)v150, (int8x16_t)v150, 8uLL).u32[0];
        }
        else
        {
          v147 = 0uLL;
          v148 = a5;
          v149 = a6;
          if (v202 == 1)
          {
            v147 = v208;
            v150 = v205;
          }
          else
          {
            v150 = 0uLL;
          }
        }
        v186 = (int8x16_t)vmlaq_n_f32(v147, v146, v142.f32[0]);
        v186.i64[1] = vextq_s8(v186, v186, 8uLL).u32[0];
        v187 = vbslq_s8(v190, v186, (int8x16_t)v147);
        *v148 = v187;
        v187.i32[0] = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
        v188 = (int8x16_t)vmlsq_lane_f32(v150, v146, *(float32x2_t *)v187.i8, 0);
        v188.i64[1] = vextq_s8(v188, v188, 8uLL).u32[0];
        *v149 = vbslq_s8(v191, v188, (int8x16_t)v150);
        *a7 = v146;
        *(float32x2_t *)v187.i8 = vmax_f32(vsub_f32(v43, v195), 0);
        *a8 = v187.i64[0];
        if ((vcgt_f32(*(float32x2_t *)v187.i8, v145).u8[0] & 1) != 0)
          return 1;
        else
          return 2;
      }
    }
  }
  v152 = vnegq_f32(v197);
  v152.i32[3] = 0;
  if (v202 == 3)
  {
    v203 = 0;
    v204 = 0;
    v198 = v152;
    physx::Gu::barycentricCoordinates(&v201, &v211, &v212, v213, &v204, &v203);
    v159 = vmulq_n_f32(vsubq_f32(v209, v208), v204.f32[0]);
    v159.i32[3] = 0;
    v160 = vmulq_n_f32(vsubq_f32(v210, v208), v203.f32[0]);
    v160.i32[3] = 0;
    v161 = vaddq_f32(v159, v160);
    v162 = vmulq_n_f32(vsubq_f32(v206, v205), v204.f32[0]);
    v162.i32[3] = 0;
    v153 = vaddq_f32(v208, v161);
    v163 = vmulq_n_f32(vsubq_f32(v207, v205), v203.f32[0]);
    v152 = v198;
    v163.i32[3] = 0;
    v154 = vaddq_f32(v205, vaddq_f32(v162, v163));
    v155 = a5;
    v156 = a6;
    v158 = v190;
    v157 = v191;
  }
  else if (v202 == 2)
  {
    v164 = vsubq_f32(v211, v201);
    v165 = vsubq_f32(vsubq_f32(v212, v201), v164);
    v166 = vmulq_f32(v165, v165);
    v166.i64[0] = vpaddq_f32(v166, v166).u64[0];
    v167 = vpadd_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v166.f32);
    v168 = vrecpe_f32(v167);
    v169 = 4;
    v155 = a5;
    v156 = a6;
    v158 = v190;
    v157 = v191;
    do
    {
      v168 = vmul_f32(v168, vrecps_f32(v167, v168));
      --v169;
    }
    while (v169);
    v170 = vnegq_f32(v164);
    v170.i32[3] = 0;
    v171 = vmulq_f32(v170, v165);
    v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
    v170.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v167), (int8x8_t)v168, 0), vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32)).u32[0];
    v153 = vmlaq_n_f32(v208, vsubq_f32(v209, v208), v170.f32[0]);
    v153.i64[1] = vextq_s8((int8x16_t)v153, (int8x16_t)v153, 8uLL).u32[0];
    v154 = vmlaq_n_f32(v205, vsubq_f32(v206, v205), v170.f32[0]);
    v154.i64[1] = vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL).u32[0];
  }
  else
  {
    v153 = 0uLL;
    v154 = 0uLL;
    v155 = a5;
    v156 = a6;
    v158 = v190;
    v157 = v191;
    if (v202 == 1)
    {
      v153 = v208;
      v154 = v205;
    }
  }
  v172 = (int8x16_t)vmlaq_n_f32(v153, v152, *(float *)(*(_QWORD *)(a1 + 8) + 16));
  v172.i64[1] = vextq_s8(v172, v172, 8uLL).u32[0];
  v173 = vbslq_s8(v158, v172, (int8x16_t)v153);
  *v155 = v173;
  v173.i32[0] = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
  v174 = (int8x16_t)vmlsq_lane_f32(v154, v152, *(float32x2_t *)v173.i8, 0);
  v174.i64[1] = vextq_s8(v174, v174, 8uLL).u32[0];
  *v156 = vbslq_s8(v157, v174, (int8x16_t)v154);
  *a8 = vmax_f32(vsub_f32(v43, v195), 0);
  *a7 = v152;
  return 1;
}

BOOL GeomMTDCallback_SphereSphere(float32x2_t *a1, float *a2, uint64_t a3, float32x2_t *a4, uint64_t a5, float32x2_t *a6)
{
  float32x2_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float32x2_t v11;
  float v12;

  v6 = vsub_f32(a4[2], a6[2]);
  v7 = a4[3].f32[0] - a6[3].f32[0];
  v8 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v6, v6).i32[1]), v6.f32[0], v6.f32[0]) + (float)(v7 * v7);
  v9 = *(float *)(a3 + 4) + *(float *)(a5 + 4);
  if (v8 <= (float)(v9 * v9))
  {
    v10 = sqrtf(v8);
    if (v8 >= 0.000001)
    {
      v11 = vmul_n_f32(v6, 1.0 / v10);
      v12 = v7 * (float)(1.0 / v10);
    }
    else
    {
      v11 = (float32x2_t)1065353216;
      v12 = 0.0;
    }
    *a1 = v11;
    a1[1].f32[0] = v12;
    *a2 = fmaxf(v9 - v10, 0.0);
  }
  return v8 <= (float)(v9 * v9);
}

BOOL GeomMTDCallback_SpherePlane(float *a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  v6 = *(float *)(a3 + 4);
  v8 = a6[2];
  v7 = a6[3];
  v9 = v7 + v7;
  v10 = *a6;
  v11 = a6[1];
  v12 = v10 + v10;
  v13 = (float)((float)(v7 * (float)(v7 + v7)) + -1.0) + (float)(v10 * (float)(v10 + v10));
  v14 = (float)((float)(v10 + v10) * v11) + (float)(v8 * v9);
  v15 = (float)(v12 * v8) - (float)(v11 * v9);
  v16 = (float)((float)((float)(a4[5] * v14) + (float)(a4[4] * v13)) + (float)(a4[6] * v15))
      - (float)((float)((float)(a6[5] * v14) + (float)(a6[4] * v13)) + (float)(a6[6] * v15));
  if (v16 <= v6)
  {
    *a1 = v13;
    a1[1] = v14;
    a1[2] = v15;
    *a2 = fmaxf(v6 - v16, 0.0);
  }
  return v16 <= v6;
}

BOOL GeomMTDCallback_SphereCapsule(float *a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  BOOL v48;
  float v49;
  float v50;

  v6 = *a6;
  v7 = a6[1];
  v8 = v6 + v6;
  v10 = a6[2];
  v9 = a6[3];
  v11 = v9 + v9;
  v12 = (float)((float)(v9 * (float)(v9 + v9)) + -1.0) + (float)(v6 * (float)(v6 + v6));
  v13 = (float)(v8 * v7) + (float)(v10 * (float)(v9 + v9));
  v14 = (float)(v8 * v10) - (float)(v7 * v11);
  v15 = *(float *)(a5 + 8);
  v16 = v12 * v15;
  v17 = v15 * v13;
  v18 = v14 * v15;
  v19 = a6[4];
  v20 = a6[5];
  v21 = v19 + v16;
  v22 = v20 + v17;
  v23 = a6[6];
  v24 = v18 + v23;
  v25 = v19 - v16;
  v26 = v20 - v17;
  v27 = v23 - v18;
  v29 = a4[4];
  v28 = a4[5];
  v30 = a4[6];
  v31 = *(float *)(a5 + 4) + *(float *)(a3 + 4);
  v32 = v25 - v21;
  v33 = v26 - v22;
  v34 = v27 - v24;
  v35 = v29 - v21;
  v36 = v28 - v22;
  v37 = v30 - v24;
  v38 = (float)((float)(v33 * (float)(v28 - v22)) + (float)((float)(v29 - v21) * v32))
      + (float)((float)(v30 - v24) * v34);
  v39 = 0.0;
  if (v38 > 0.0)
  {
    v40 = (float)((float)(v33 * v33) + (float)(v32 * v32)) + (float)(v34 * v34);
    if (v38 >= v40)
    {
      v35 = v35 - v32;
      v36 = v36 - v33;
      v37 = v37 - v34;
      v39 = 1.0;
    }
    else
    {
      v39 = v38 / v40;
      v35 = v35 - (float)(v32 * v39);
      v36 = v36 - (float)(v33 * v39);
      v37 = v37 - (float)(v34 * v39);
    }
  }
  v41 = (float)((float)(v36 * v36) + (float)(v35 * v35)) + (float)(v37 * v37);
  if (v41 <= (float)(v31 * v31))
  {
    v42 = v29 - (float)(v21 + (float)(v32 * v39));
    v43 = v28 - (float)(v22 + (float)(v33 * v39));
    v44 = v30 - (float)(v24 + (float)(v34 * v39));
    v45 = (float)((float)(v43 * v43) + (float)(v42 * v42)) + (float)(v44 * v44);
    v46 = sqrtf(v45);
    v47 = 1.0;
    v48 = v45 < 0.000001;
    v49 = 0.0;
    v50 = 0.0;
    if (!v48)
    {
      v47 = v42 * (float)(1.0 / v46);
      v49 = v43 * (float)(1.0 / v46);
      v50 = v44 * (float)(1.0 / v46);
    }
    *a1 = v47;
    a1[1] = v49;
    a1[2] = v50;
    *a2 = fmaxf(v31 - v46, 0.0);
  }
  return v41 <= (float)(v31 * v31);
}

uint64_t GeomMTDCallback_SphereBox(float32x2_t *a1, float *a2, uint64_t a3, float *a4, float *a5, uint64_t a6)
{
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float v22;
  float v23;
  float32x2_t v24;
  float v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  BOOL v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  int v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float32_t v80;
  float v81;
  float v82;
  float v83;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;

  v6 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6, 1);
  v7 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a6, 2);
  v8 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a6, 3);
  _Q4 = vaddq_f32(*(float32x4_t *)a6, *(float32x4_t *)a6);
  v10 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a6, *(float32x2_t *)_Q4.f32), 0);
  v11 = vmul_lane_f32(v6, *(float32x2_t *)_Q4.f32, 1);
  v12 = vmul_laneq_f32(v7, _Q4, 2);
  v13 = vmul_n_f32(v6, _Q4.f32[0]);
  v14 = vmul_n_f32(v7, _Q4.f32[0]);
  v15 = vmul_n_f32(v8, _Q4.f32[0]);
  v16 = vmul_lane_f32(v7, *(float32x2_t *)_Q4.f32, 1);
  v17 = vmul_lane_f32(v8, *(float32x2_t *)_Q4.f32, 1);
  v18 = vmul_laneq_f32(v8, _Q4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  *(float32x2_t *)_Q4.f32 = vsub_f32(*(float32x2_t *)_Q4.f32, v10);
  LODWORD(v22) = vadd_f32(v13, v18).u32[0];
  LODWORD(v23) = vsub_f32(v14, v17).u32[0];
  v24 = vsub_f32(v13, v18);
  LODWORD(v25) = vsub_f32(*(float32x2_t *)_Q4.f32, v12).u32[0];
  v26 = vadd_f32(v16, v15);
  v27 = vadd_f32(v14, v17);
  v28 = vsub_f32(v16, v15);
  v29 = vsub_f32(*(float32x2_t *)_Q4.f32, v11).f32[0];
  v30 = (float)(1.0 - v11.f32[1]) - v12.f32[1];
  v31 = a5[1];
  if (v29 >= 0.0)
  {
    v47 = v22 - v24.f32[1];
    _NF = v30 < (float)-v25;
    v49 = v29 + (float)(v25 + (float)(v30 + 1.0));
    v50 = 0.5 / sqrtf(v49);
    v51 = v50 * vsub_f32(v26, v28).f32[0];
    v52 = (float)(v27.f32[1] - v23) * v50;
    v53 = v49 * v50;
    v54 = v29 + (float)((float)(1.0 - v30) - v25);
    v55 = vadd_f32(v26, v28).f32[0];
    v56 = 0.5 / sqrtf(v54);
    v57 = (float)(v27.f32[1] + v23) * v56;
    v58 = v56 * v55;
    v44 = v54 * v56;
    v45 = v47 * v56;
    if (_NF)
    {
      v43 = v58;
    }
    else
    {
      v44 = v47 * v50;
      v43 = v52;
    }
    if (_NF)
      v46 = v57;
    else
      v46 = v51;
    if (!_NF)
      v45 = v53;
  }
  else
  {
    v32 = v22 + v24.f32[1];
    v33 = v30 <= v25;
    v34 = (float)(v25 + (float)(1.0 - v30)) - v29;
    v35 = 0.5 / sqrtf(v34);
    v36 = v34 * v35;
    v37 = v35 * vadd_f32(v26, v28).f32[0];
    v38 = (float)(v27.f32[1] - v23) * v35;
    v39 = (float)((float)(v30 + 1.0) - v25) - v29;
    v40 = vsub_f32(v26, v28).f32[0];
    v41 = 0.5 / sqrtf(v39);
    v42 = v39 * v41;
    v43 = v32 * v41;
    v44 = (float)(v27.f32[1] + v23) * v41;
    v45 = v41 * v40;
    if (v33)
    {
      v44 = v37;
      v43 = v36;
      v46 = v32 * v35;
    }
    else
    {
      v46 = v42;
    }
    if (v33)
      v45 = v38;
  }
  v59 = a5[2];
  v60 = a4[4] - *(float *)(a6 + 16);
  v61 = a4[5] - *(float *)(a6 + 20);
  v62 = a4[6] - *(float *)(a6 + 24);
  v63 = (float)(v45 * v45) + -0.5;
  v64 = (float)((float)((float)(v61 + v61) * v43) + (float)(v46 * (float)(v60 + v60)))
      + (float)(v44 * (float)(v62 + v62));
  v65 = (float)((float)((float)(v60 + v60) * v63)
              - (float)((float)((float)(v43 * (float)(v62 + v62)) - (float)(v44 * (float)(v61 + v61))) * v45))
      + (float)(v46 * v64);
  v66 = (float)((float)((float)(v61 + v61) * v63)
              - (float)((float)((float)(v44 * (float)(v60 + v60)) - (float)(v46 * (float)(v62 + v62))) * v45))
      + (float)(v43 * v64);
  v67 = -v31;
  if (v65 >= (float)-v31)
  {
    if (v65 <= v31)
    {
      v68 = 0;
      v67 = (float)((float)((float)(v60 + v60) * v63)
                  - (float)((float)((float)(v43 * (float)(v62 + v62)) - (float)(v44 * (float)(v61 + v61))) * v45))
          + (float)(v46 * v64);
    }
    else
    {
      v68 = 1;
      v67 = a5[1];
    }
  }
  else
  {
    v68 = 1;
  }
  v69 = a5[3];
  v70 = (float)((float)((float)(v62 + v62) * v63)
              - (float)((float)((float)(v46 * (float)(v61 + v61)) - (float)(v43 * (float)(v60 + v60))) * v45))
      + (float)(v44 * v64);
  if (v66 >= (float)-v59)
  {
    if (v66 > v59)
    {
      v68 = 1;
      v66 = a5[2];
    }
  }
  else
  {
    v68 = 1;
    v66 = -v59;
  }
  v71 = *(float *)(a3 + 4);
  v72 = -v44;
  v73 = -v46;
  v74 = -v43;
  v75 = -v69;
  if (v70 >= (float)-v69)
  {
    if (v70 <= v69)
    {
      v75 = v70;
    }
    else
    {
      v68 = 1;
      v75 = a5[3];
    }
    if (v68 != 1)
    {
      v85 = v31 - fabsf(v67);
      v86 = v59 - fabsf(v66);
      v87 = v69 - fabsf(v70);
      if (v86 >= v85)
      {
        if (v85 < v87)
        {
          *a2 = -v85;
          v89 = -2.0;
          if (v67 > 0.0)
            v89 = 2.0;
          v88 = 0.0;
          goto LABEL_42;
        }
      }
      else if (v86 < v87)
      {
        *a2 = -v86;
        v88 = 2.0;
        if (v66 <= 0.0)
          v88 = -2.0;
        v89 = 0.0;
LABEL_42:
        v90 = 0.0;
LABEL_46:
        v91 = v90 + v90;
        v92 = (float)((float)(v43 * v88) + (float)(v46 * v89)) + (float)(v44 * v91);
        a1->f32[0] = (float)((float)(v45 * (float)((float)(v88 * v72) + (float)(v43 * v91))) + (float)(v89 * v63))
                   + (float)(v46 * v92);
        a1->f32[1] = (float)((float)(v45 * (float)((float)(v91 * v73) + (float)(v44 * v89))) + (float)(v88 * v63))
                   + (float)(v43 * v92);
        a1[1].f32[0] = (float)((float)(v45 * (float)((float)(v89 * v74) + (float)(v46 * v88))) + (float)(v91 * v63))
                     + (float)(v44 * v92);
        v83 = *a2;
        goto LABEL_47;
      }
      v90 = 1.0;
      if (v70 <= 0.0)
        v90 = -1.0;
      *a2 = -v87;
      v89 = 0.0;
      v88 = 0.0;
      goto LABEL_46;
    }
  }
  v76 = v67 + v67;
  v77 = (float)((float)(v43 * (float)(v66 + v66)) + (float)(v46 * (float)(v67 + v67)))
      + (float)(v44 * (float)(v75 + v75));
  v78 = (float)((float)(v45 * (float)((float)((float)(v66 + v66) * v72) + (float)(v43 * (float)(v75 + v75))))
              + (float)(v76 * v63))
      + (float)(v46 * v77);
  v79 = (float)((float)(v45 * (float)((float)((float)(v75 + v75) * v73) + (float)(v44 * v76)))
              + (float)((float)(v66 + v66) * v63))
      + (float)(v43 * v77);
  v80 = v62
      - (float)((float)((float)(v45 * (float)((float)(v76 * v74) + (float)(v46 * (float)(v66 + v66))))
                      + (float)((float)(v75 + v75) * v63))
              + (float)(v44 * v77));
  a1->f32[0] = v60 - v78;
  a1->f32[1] = v61 - v79;
  a1[1].f32[0] = v80;
  v81 = (float)((float)((float)(v61 - v79) * (float)(v61 - v79)) + (float)((float)(v60 - v78) * (float)(v60 - v78)))
      + (float)(v80 * v80);
  if (v81 > (float)((float)(v71 + 0.0) * (float)(v71 + 0.0)))
    return 0;
  v82 = 1.0 / sqrtf(v81);
  *a2 = v82;
  *a1 = vmul_n_f32(*a1, v82);
  a1[1].f32[0] = v82 * a1[1].f32[0];
  v83 = v81 * *a2;
LABEL_47:
  *a2 = fmaxf(-(float)(v83 - v71), 0.0);
  return 1;
}

uint64_t GeomMTDCallback_SphereConvex(float32x2_t *a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6, double a7, double a8, double a9, int32x4_t a10)
{
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float32_t v42;
  _DWORD v43[4];
  _BYTE v44[12];
  float v45;

  v13 = *(float *)(a3 + 4);
  v14 = a4[4];
  v15 = a4[5];
  *(float *)v43 = v14;
  *(float *)&v43[1] = v15;
  v16 = a4[6];
  *(float *)&v43[2] = v16;
  *(float *)&v43[3] = v13;
  v45 = 0.0;
  v17 = *(_QWORD *)(a5 + 32);
  if (pointConvexDistance((uint64_t)a1, (uint64_t)v44, &v45, (uint64_t)v43, v17, (_OWORD *)(a5 + 4), a6, a7, a8, a9, a10))
  {
    v18 = *(unsigned __int8 *)(v17 + 71);
    if (*(_BYTE *)(v17 + 71))
    {
      v19 = (float)(v14 - a6[4]) + (float)(v14 - a6[4]);
      v20 = (float)(v15 - a6[5]) + (float)(v15 - a6[5]);
      v21 = (float)(v16 - a6[6]) + (float)(v16 - a6[6]);
      v23 = a6[2];
      v22 = a6[3];
      v24 = (float)(v22 * v22) + -0.5;
      v25 = *a6;
      v26 = a6[1];
      v27 = (float)((float)(v20 * v26) + (float)(*a6 * v19)) + (float)(v23 * v21);
      v28 = (float)((float)(v19 * v24) - (float)((float)((float)(v26 * v21) - (float)(v23 * v20)) * v22))
          + (float)(*a6 * v27);
      v29 = -*a6;
      v30 = (float)((float)(v20 * v24) - (float)((float)((float)(v23 * v19) - (float)(*a6 * v21)) * v22))
          + (float)(v26 * v27);
      v31 = (float)((float)(v21 * v24) - (float)((float)((float)(*a6 * v20) - (float)(v26 * v19)) * v22))
          + (float)(v23 * v27);
      v32 = *(float **)(v17 + 72);
      v33 = -3.4028e38;
      do
      {
        v34 = v32[1];
        v35 = v32[2];
        v36 = v32[3] + (float)((float)((float)(v30 * v34) + (float)(v28 * *v32)) + (float)(v31 * v35));
        if (v36 > v33)
        {
          v37 = *v32 + *v32;
          v38 = v34 + v34;
          v39 = v35 + v35;
          v40 = (float)((float)(v26 * v38) + (float)(v25 * v37)) + (float)(v23 * (float)(v35 + v35));
          a1->f32[0] = (float)((float)(v22 * (float)((float)(v38 * (float)-v23) + (float)(v26 * v39)))
                             + (float)(v37 * v24))
                     + (float)(v25 * v40);
          a1->f32[1] = (float)((float)(v22 * (float)((float)(v39 * v29) + (float)(v23 * v37))) + (float)(v38 * v24))
                     + (float)(v26 * v40);
          a1[1].f32[0] = (float)((float)(v22 * (float)((float)(v37 * (float)-v26) + (float)(v25 * v38)))
                               + (float)(v39 * v24))
                       + (float)(v23 * v40);
          v33 = v36;
        }
        v32 += 5;
        --v18;
      }
      while (v18);
    }
    else
    {
      v33 = -3.4028e38;
    }
    *a2 = fmaxf(v13 - v33, 0.0);
  }
  else
  {
    if (v45 > (float)(v13 * v13))
      return 0;
    *a2 = fmaxf(v13 - sqrtf(v45), 0.0);
    v42 = -a1[1].f32[0];
    *a1 = vneg_f32(*a1);
    a1[1].f32[0] = v42;
  }
  return 1;
}

uint64_t GeomMTDCallback_SphereMesh(uint64_t a1)
{
  float *v1;
  float *v2;
  uint64_t *v3;
  uint64_t *v4;
  float *v5;
  float *v6;
  float32x2_t *v7;
  float32x2_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t result;
  unsigned int v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24[512];
  unsigned int v25;
  _DWORD v26[20];
  _DWORD v27[20];
  uint64_t v28;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v28 = *MEMORY[0x24BDAC8D0];
  v10 = *(_DWORD *)(v9 + 4);
  v12 = *(_DWORD *)(v11 + 24);
  v27[0] = -1;
  LODWORD(v24[0]) = 0;
  HIDWORD(v24[0]) = v10;
  v13 = *(_QWORD *)(v11 + 16);
  physx::Gu::GeometryUnion::set((uint64_t)v27, v24);
  v26[0] = -1;
  physx::Gu::GeometryUnion::set((uint64_t)v26, v4);
  v23 = 0;
  v22 = 0;
  v25 = 0;
  v19 = xmmword_2260E5D70;
  v20 = v13;
  v21 = v12;
  v17 = 0;
  v18 = 1065353216;
  v14 = physx::Gu::contactSphereMesh((uint64_t)v27, (uint64_t)v26, (float *)&v19, v2, (float *)&v17, (uint64_t)&v22, (uint64_t)v24, 0);
  result = 0;
  if (v14)
  {
    v16 = v25;
    LODWORD(result) = processContacts(v8, v6, v25, (uint64_t)v24);
    if (v16)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t GeomMTDCallback_SphereHeightField(uint64_t a1)
{
  float *v1;
  float *v2;
  uint64_t *v3;
  uint64_t *v4;
  float *v5;
  float *v6;
  float32x2_t *v7;
  float32x2_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t result;
  unsigned int v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24[512];
  unsigned int v25;
  float32x2_t v26[10];
  _DWORD v27[20];
  uint64_t v28;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v28 = *MEMORY[0x24BDAC8D0];
  v10 = *(_DWORD *)(v9 + 4);
  v12 = *(_DWORD *)(v11 + 24);
  v27[0] = -1;
  LODWORD(v24[0]) = 0;
  HIDWORD(v24[0]) = v10;
  v13 = *(_QWORD *)(v11 + 16);
  physx::Gu::GeometryUnion::set((uint64_t)v27, v24);
  v26[0].i32[0] = -1;
  physx::Gu::GeometryUnion::set((uint64_t)v26, v4);
  v23 = 0;
  v22 = 0;
  v25 = 0;
  v19 = xmmword_2260E5D70;
  v20 = v13;
  v21 = v12;
  v17 = 0;
  v18 = 1065353216;
  v14 = physx::Gu::contactSphereHeightfield((uint64_t)v27, v26, (float *)&v19, v2, (float *)&v17, (uint64_t)&v22, (uint64_t)v24, 0);
  result = 0;
  if (v14)
  {
    v16 = v25;
    LODWORD(result) = processContacts(v8, v6, v25, (uint64_t)v24);
    if (v16)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t GeomMTDCallback_NotSupported()
{
  return 0;
}

BOOL GeomMTDCallback_PlaneCapsule(float *a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;

  v6 = *a6;
  v7 = a6[1];
  v8 = v6 + v6;
  v10 = a6[2];
  v9 = a6[3];
  v11 = v9 + v9;
  v12 = (float)((float)(v9 * (float)(v9 + v9)) + -1.0) + (float)(v6 * (float)(v6 + v6));
  v13 = (float)(v8 * v7) + (float)(v10 * (float)(v9 + v9));
  v14 = (float)(v8 * v10) - (float)(v7 * v11);
  v15 = *(float *)(a5 + 8);
  v16 = v12 * v15;
  v17 = v15 * v13;
  v18 = v14 * v15;
  v19 = a6[4];
  v20 = a6[5];
  v21 = v19 + v16;
  v22 = v20 + v17;
  v23 = a6[6];
  v24 = v18 + v23;
  v25 = v19 - v16;
  v26 = v20 - v17;
  v27 = v23 - v18;
  v29 = a4[2];
  v28 = a4[3];
  v30 = v28 + v28;
  v31 = *a4;
  v32 = a4[1];
  v33 = v31 + v31;
  v34 = (float)((float)(v28 * (float)(v28 + v28)) + -1.0) + (float)(v31 * (float)(v31 + v31));
  v35 = (float)((float)(v31 + v31) * v32) + (float)(v29 * v30);
  v36 = (float)(v33 * v29) - (float)(v32 * v30);
  v37 = (float)((float)(a4[5] * v35) + (float)(a4[4] * v34)) + (float)(a4[6] * v36);
  v38 = (float)((float)((float)(v22 * v35) + (float)(v21 * v34)) + (float)(v24 * v36)) - v37;
  v39 = (float)((float)((float)(v26 * v35) + (float)(v25 * v34)) + (float)(v27 * v36)) - v37;
  if (v38 < v39)
    v39 = v38;
  v40 = v39 - *(float *)(a5 + 4);
  if (v40 <= 0.0)
  {
    *a1 = -v34;
    a1[1] = -v35;
    a1[2] = -v36;
    *a2 = fmaxf(-v40, 0.0);
  }
  return v40 <= 0.0;
}

BOOL GeomMTDCallback_PlaneBox(float *a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  float v34;
  float v36[2];
  uint64_t v37;
  unsigned __int32 v38;
  _QWORD v39[2];
  int v40;
  __int128 v41;
  int v42;
  float v43[24];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v8 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6, 1);
  v9 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a6, 2);
  v10 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a6, 3);
  _Q4 = vaddq_f32(*(float32x4_t *)a6, *(float32x4_t *)a6);
  v12 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a6, *(float32x2_t *)_Q4.f32), 0);
  v13 = vmul_lane_f32(v8, *(float32x2_t *)_Q4.f32, 1);
  v14 = vmul_laneq_f32(v9, _Q4, 2);
  v15 = vmul_n_f32(v8, _Q4.f32[0]);
  v16 = vmul_n_f32(v9, _Q4.f32[0]);
  v17 = vmul_n_f32(v10, _Q4.f32[0]);
  v18 = vmul_lane_f32(v9, *(float32x2_t *)_Q4.f32, 1);
  v19 = vmul_lane_f32(v10, *(float32x2_t *)_Q4.f32, 1);
  v20 = vmul_laneq_f32(v10, _Q4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  v25 = vsub_f32(*(float32x2_t *)_Q4.f32, v12);
  LODWORD(v26) = vsub_f32(v16, v19).u32[0];
  LODWORD(v27) = vadd_f32(v18, v17).u32[0];
  v36[0] = (float)(1.0 - v13.f32[1]) - v14.f32[1];
  LODWORD(v36[1]) = vadd_f32(v15, v20).u32[0];
  HIDWORD(v26) = vsub_f32(v15, v20).i32[1];
  v37 = v26;
  v38 = vsub_f32(v25, v14).u32[0];
  HIDWORD(v27) = vadd_f32(v16, v19).i32[1];
  v39[0] = v27;
  v39[1] = vzip1_s32((int32x2_t)vsub_f32(v18, v17), (int32x2_t)vsub_f32(v25, v13));
  v40 = *(_DWORD *)(a6 + 16);
  *(_QWORD *)&v28 = *(_QWORD *)(a6 + 20);
  *((_QWORD *)&v28 + 1) = *(_QWORD *)(a5 + 4);
  v41 = v28;
  v42 = *(_DWORD *)(a5 + 12);
  LODWORD(v28) = *(_DWORD *)a4;
  v15.i32[0] = *(_DWORD *)(a4 + 4);
  _Q4.i32[0] = *(_DWORD *)(a4 + 8);
  v20.i32[0] = *(_DWORD *)(a4 + 12);
  v29 = (float)((float)(v20.f32[0] * (float)(v20.f32[0] + v20.f32[0])) + -1.0)
      + (float)(*(float *)&v28 * (float)(*(float *)&v28 + *(float *)&v28));
  v30 = (float)((float)(*(float *)&v28 + *(float *)&v28) * v15.f32[0])
      + (float)(_Q4.f32[0] * (float)(v20.f32[0] + v20.f32[0]));
  v31 = (float)((float)(*(float *)&v28 + *(float *)&v28) * _Q4.f32[0])
      - (float)(v15.f32[0] * (float)(v20.f32[0] + v20.f32[0]));
  v32 = (float)((float)(*(float *)(a4 + 20) * v30) + (float)(*(float *)(a4 + 16) * v29))
      + (float)(*(float *)(a4 + 24) * v31);
  physx::Gu::computeOBBPoints(v43, (float *)&v40, (float *)&v41 + 2, v36, (float *)&v37 + 1, (float *)v39 + 1);
  v33 = 0;
  v34 = (float)((float)((float)(v30 * v43[1]) + (float)(v43[0] * v29)) + (float)(v43[2] * v31)) - v32;
  do
  {
    if (v34 >= (float)((float)((float)((float)(v30 * v43[v33 + 4]) + (float)(v43[v33 + 3] * v29))
                              + (float)(v43[v33 + 5] * v31))
                      - v32))
      v34 = (float)((float)((float)(v30 * v43[v33 + 4]) + (float)(v43[v33 + 3] * v29)) + (float)(v43[v33 + 5] * v31))
          - v32;
    v33 += 3;
  }
  while (v33 != 21);
  if (v34 <= 0.0)
  {
    *a1 = -v29;
    a1[1] = -v30;
    a1[2] = -v31;
    *a2 = fmaxf(-v34, 0.0);
  }
  return v34 <= 0.0;
}

BOOL GeomMTDCallback_PlaneConvex(float *a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unint64_t v37;
  float *v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;

  v6 = *a4;
  v7 = a4[1];
  v8 = v6 + v6;
  v10 = a4[2];
  v9 = a4[3];
  v11 = v9 + v9;
  v12 = (float)((float)(v9 * (float)(v9 + v9)) + -1.0) + (float)(v6 * (float)(v6 + v6));
  v13 = (float)(v8 * v7) + (float)(v10 * (float)(v9 + v9));
  v14 = (float)(v8 * v10) - (float)(v7 * v11);
  v15 = (float)((float)(a4[5] * v13) + (float)(a4[4] * v12)) + (float)(a4[6] * v14);
  v16 = *(_QWORD *)(a5 + 32);
  v17 = *(unsigned __int8 *)(v16 + 70);
  v18 = *(_QWORD *)(v16 + 72);
  v19 = 5 * *(unsigned __int8 *)(v16 + 71);
  v20 = (float *)(v18 + 4 * v19);
  v21 = *v20 + *v20;
  v22 = v20[1] + v20[1];
  v23 = v20[2] + v20[2];
  v25 = a6[2];
  v24 = a6[3];
  v26 = (float)(v24 * v24) + -0.5;
  v27 = *a6;
  v28 = a6[1];
  v29 = (float)((float)(v22 * v28) + (float)(*a6 * v21)) + (float)(v25 * v23);
  v30 = (float)((float)(v24 * (float)((float)(v28 * v23) - (float)(v25 * v22))) + (float)(v21 * v26))
      + (float)(*a6 * v29);
  v31 = (float)((float)(v24 * (float)((float)(v25 * v21) - (float)(*a6 * v23))) + (float)(v22 * v26))
      + (float)(v28 * v29);
  v32 = (float)((float)(v24 * (float)((float)(*a6 * v22) - (float)(v28 * v21))) + (float)(v23 * v26))
      + (float)(v25 * v29);
  v33 = a6[4];
  v34 = a6[5];
  v35 = a6[6];
  v36 = (float)((float)((float)(v13 * (float)(v34 + v31)) + (float)((float)(v33 + v30) * v12))
              + (float)((float)(v35 + v32) * v14))
      - v15;
  if (v17 >= 2)
  {
    v37 = v17 - 1;
    v38 = (float *)(4 * v19 + v18 + 20);
    do
    {
      v39 = *(v38 - 1);
      v40 = *(v38 - 2) + *(v38 - 2);
      v41 = *v38;
      v38 += 3;
      v42 = v39 + v39;
      v43 = (float)((float)(v28 * v42) + (float)(v27 * v40)) + (float)(v25 * (float)(v41 + v41));
      v44 = (float)((float)((float)(v13
                                  * (float)(v34
                                          + (float)((float)((float)(v24
                                                                  * (float)((float)((float)(v41 + v41) * (float)-v27)
                                                                          + (float)(v25 * v40)))
                                                          + (float)(v42 * v26))
                                                  + (float)(v28 * v43))))
                          + (float)((float)(v33
                                          + (float)((float)((float)(v24
                                                                  * (float)((float)(v42 * (float)-v25)
                                                                          + (float)(v28 * (float)(v41 + v41))))
                                                          + (float)(v40 * v26))
                                                  + (float)(v27 * v43)))
                                  * v12))
                  + (float)((float)(v35
                                  + (float)((float)((float)(v24
                                                          * (float)((float)(v40 * (float)-v28) + (float)(v27 * v42)))
                                                  + (float)((float)(v41 + v41) * v26))
                                          + (float)(v25 * v43)))
                          * v14))
          - v15;
      if (v36 >= v44)
        v36 = v44;
      --v37;
    }
    while (v37);
  }
  if (v36 <= 0.0)
  {
    *a1 = -v12;
    a1[1] = -v13;
    a1[2] = -v14;
    *a2 = fmaxf(-v36, 0.0);
  }
  return v36 <= 0.0;
}

BOOL GeomMTDCallback_CapsuleCapsule(float32x2_t *a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float32_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float32x2_t v47;
  float v48;
  float v49;
  float v50;
  float32x2_t v51;
  float v52;
  float32x2_t v54;
  float v55;
  float32x2_t v56;
  float v57;
  float v58;
  float32x2_t v59;
  float v60;
  float32x2_t v61;
  float v62;
  float v63;
  uint64_t v64;
  float v65[3];
  float v66[3];

  v8 = *a4;
  v9 = a4[1];
  v10 = v8 + v8;
  v12 = a4[2];
  v11 = a4[3];
  v13 = v11 + v11;
  v14 = (float)((float)(v11 * (float)(v11 + v11)) + -1.0) + (float)(v8 * (float)(v8 + v8));
  v15 = (float)(v10 * v9) + (float)(v12 * (float)(v11 + v11));
  v16 = (float)(v10 * v12) - (float)(v9 * v13);
  v18 = *(float *)(a3 + 4);
  v17 = *(float *)(a3 + 8);
  v19 = v14 * v17;
  v20 = v17 * v15;
  v21 = v16 * v17;
  v22 = a4[4];
  v23 = a4[5];
  v24 = v22 + v19;
  v25 = v23 + v20;
  v26 = a4[6];
  v59.f32[0] = v22 + v19;
  v59.f32[1] = v23 + v20;
  v27 = v22 - v19;
  v28 = v23 - v20;
  v60 = v21 + v26;
  v61.f32[0] = v27;
  v61.f32[1] = v23 - v20;
  v62 = v26 - v21;
  v63 = v18;
  v29 = *a6;
  v30 = a6[1];
  v31 = v29 + v29;
  v33 = a6[2];
  v32 = a6[3];
  v34 = (float)((float)(v32 * (float)(v32 + v32)) + -1.0) + (float)(v29 * (float)(v29 + v29));
  v35 = (float)(v31 * v30) + (float)(v33 * (float)(v32 + v32));
  v36 = (float)(v31 * v33) - (float)(v30 * (float)(v32 + v32));
  v38 = *(float *)(a5 + 4);
  v37 = *(float *)(a5 + 8);
  v39 = v34 * v37;
  v40 = v37 * v35;
  v41 = v36 * v37;
  v42 = a6[4];
  v43 = a6[5];
  v44 = a6[6];
  v54.f32[0] = v42 + v39;
  v54.f32[1] = v43 + v40;
  v55 = v41 + v44;
  v56.f32[0] = v42 - v39;
  v56.f32[1] = v43 - v40;
  v57 = v44 - v41;
  v58 = v38;
  v64 = 0;
  v66[0] = v27 - v24;
  v66[1] = v28 - v25;
  v66[2] = v62 - v60;
  v65[0] = (float)(v42 - v39) - (float)(v42 + v39);
  v65[1] = (float)(v43 - v40) - (float)(v43 + v40);
  v65[2] = (float)(v44 - v41) - (float)(v41 + v44);
  v45 = physx::Gu::distanceSegmentSegmentSquared((float *)&v59, v66, (float *)&v54, v65, (float *)&v64 + 1, (float *)&v64);
  v46 = v63 + v58;
  if (v45 <= (float)(v46 * v46))
  {
    v47 = vsub_f32(vadd_f32(v59, vmul_n_f32(vsub_f32(v61, v59), *((float *)&v64 + 1))), vadd_f32(v54, vmul_n_f32(vsub_f32(v56, v54), *(float *)&v64)));
    v48 = (float)(v60 + (float)(*((float *)&v64 + 1) * (float)(v62 - v60)))
        - (float)(v55 + (float)(*(float *)&v64 * (float)(v57 - v55)));
    v49 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v47, v47).i32[1]), v47.f32[0], v47.f32[0]) + (float)(v48 * v48);
    v50 = sqrtf(v49);
    if (v49 >= 0.000001)
    {
      v51 = vmul_n_f32(v47, 1.0 / v50);
      v52 = v48 * (float)(1.0 / v50);
    }
    else
    {
      v51 = (float32x2_t)1065353216;
      v52 = 0.0;
    }
    *a1 = v51;
    a1[1].f32[0] = v52;
    *a2 = fmaxf(v46 - v50, 0.0);
  }
  return v45 <= (float)(v46 * v46);
}

BOOL GeomMTDCallback_CapsuleBox(float *a1, float *a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  float v45;
  _BOOL8 result;
  float v47;
  float32x2_t v48;
  float v49;
  float v50;
  uint64_t v51;
  float v52;
  float v53;
  __int32 v54;
  __int32 v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float32x2_t v95;
  _BYTE v96[12];
  __int128 v97;
  _BYTE v98[20];
  int v99;
  float32x2_t v100;
  float v101;
  float32x2_t v102;
  float v103;
  float v104;
  float32x2_t v105;
  float v106;
  float v107;
  float v108;
  float v109[3];

  v8 = *a4;
  v9 = a4[1];
  v10 = v8 + v8;
  v12 = a4[2];
  v11 = a4[3];
  v13 = v11 + v11;
  v14 = (float)((float)(v11 * (float)(v11 + v11)) + -1.0) + (float)(v8 * (float)(v8 + v8));
  v15 = (float)(v10 * v9) + (float)(v12 * (float)(v11 + v11));
  v16 = (float)(v10 * v12) - (float)(v9 * v13);
  v18 = *(float *)(a3 + 4);
  v17 = *(float *)(a3 + 8);
  v19 = v14 * v17;
  v20 = v17 * v15;
  v21 = v16 * v17;
  v22 = a4[4];
  v23 = a4[5];
  v24 = a4[6];
  v100.f32[0] = v22 + v19;
  v100.f32[1] = v23 + v20;
  v101 = v21 + v24;
  v102.f32[0] = v22 - v19;
  v102.f32[1] = v23 - v20;
  v103 = v24 - v21;
  v25 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6, 1);
  v26 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a6, 2);
  v27 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a6, 3);
  _Q5 = vaddq_f32(*(float32x4_t *)a6, *(float32x4_t *)a6);
  v29 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a6, *(float32x2_t *)_Q5.f32), 0);
  v104 = v18;
  v30 = vmul_lane_f32(v25, *(float32x2_t *)_Q5.f32, 1);
  v31 = vmul_laneq_f32(v26, _Q5, 2);
  v32 = vmul_n_f32(v25, _Q5.f32[0]);
  v33 = vmul_n_f32(v26, _Q5.f32[0]);
  v34 = vmul_n_f32(v27, _Q5.f32[0]);
  v35 = vmul_lane_f32(v26, *(float32x2_t *)_Q5.f32, 1);
  v36 = vmul_lane_f32(v27, *(float32x2_t *)_Q5.f32, 1);
  v37 = vmul_laneq_f32(v27, _Q5, 2);
  __asm { FMOV            V5.2S, #1.0 }
  v41 = vsub_f32(*(float32x2_t *)_Q5.f32, v29);
  LODWORD(v42) = vsub_f32(v33, v36).u32[0];
  LODWORD(v43) = vadd_f32(v35, v34).u32[0];
  v95.f32[0] = (float)(1.0 - v30.f32[1]) - v31.f32[1];
  v95.i32[1] = vadd_f32(v32, v37).u32[0];
  HIDWORD(v42) = vsub_f32(v32, v37).i32[1];
  *(_QWORD *)v96 = v42;
  *(_DWORD *)&v96[8] = vsub_f32(v41, v31).u32[0];
  HIDWORD(v43) = vadd_f32(v33, v36).i32[1];
  *(_QWORD *)&v97 = v43;
  *((int32x2_t *)&v97 + 1) = vzip1_s32((int32x2_t)vsub_f32(v35, v34), (int32x2_t)vsub_f32(v41, v30));
  *(_DWORD *)v98 = *(_DWORD *)(a6 + 16);
  *(_QWORD *)&v44 = *(_QWORD *)(a6 + 20);
  *((_QWORD *)&v44 + 1) = *(_QWORD *)(a5 + 4);
  *(_OWORD *)&v98[4] = v44;
  v99 = *(_DWORD *)(a5 + 12);
  v107 = 0.0;
  physx::Gu::distanceSegmentBoxSquared((float *)&v100, (float *)&v102, (float *)v98, (float32x2_t *)&v98[12], (float *)&v95, &v107, &v105);
  result = 0;
  v47 = v104;
  if (v45 <= (float)(v47 * v47))
  {
    if (v45 == 0.0
      || (v48 = vsub_f32(vadd_f32(v100, vmul_n_f32(vsub_f32(v102, v100), v107)), vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(v95, v105.f32[0]), vmul_n_f32(*(float32x2_t *)&v96[4], v105.f32[1])), vmul_n_f32(*(float32x2_t *)((char *)&v97 + 4), v106)), *(float32x2_t *)v98)), v49 = (float)(v101 + (float)(v107 * (float)(v103 - v101)))- (float)((float)((float)((float)(v105.f32[0] * *(float *)v96) + (float)(v105.f32[1] * *(float *)&v97))+ (float)(v106 * *((float *)&v97 + 3)))+ *(float *)&v98[8]), v50 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v48, v48).i32[1]), v48.f32[0], v48.f32[0]) + (float)(v49 * v49)), v50 == 0.0))
    {
      v51 = 0;
      v52 = 0.0;
      v53 = 3.4028e38;
      *(float *)&v54 = 0.0;
      *(float *)&v55 = 0.0;
      while (1)
      {
        v109[0] = 0.0;
        result = PxcTestAxis((float *)((char *)&v95 + v51 * 4), (float *)&v100, (float *)&v95, v109, v47);
        if (!result)
          break;
        if (v109[0] < v53)
        {
          v55 = v95.i32[v51];
          v54 = v95.i32[v51 + 1];
          v52 = *(float *)((char *)&v95 + v51 * 4 + 8);
          v53 = v109[0];
        }
        v51 += 3;
        if (v51 == 9)
        {
          v94 = v47;
          v91 = *(float *)&v55;
          v92 = *(float *)&v54;
          v93 = v52;
          v89 = v100.f32[1];
          v90 = v100.f32[0];
          v87 = v101;
          v88 = v102.f32[0];
          v56 = v102.f32[0] - v100.f32[0];
          v85 = v102.f32[1];
          v86 = v103;
          v57 = v102.f32[1] - v100.f32[1];
          v58 = v103 - v101;
          v59 = (float)((float)(v57 * v57) + (float)(v56 * v56)) + (float)(v58 * v58);
          v60 = 0.0;
          v61 = 0.0;
          v62 = 0.0;
          if (v59 > 0.0)
          {
            v63 = 1.0 / sqrtf(v59);
            v62 = v56 * v63;
            v61 = v57 * v63;
            v60 = v58 * v63;
          }
          v64 = 0;
          v65 = -v60;
          v66 = -v62;
          v67 = -v61;
          do
          {
            v69 = v95.f32[v64 + 1];
            v68 = *(float *)((char *)&v95 + v64 * 4 + 8);
            v70 = v95.f32[v64];
            v71 = (float)(v69 * v65) + (float)(v61 * v68);
            v72 = (float)(v68 * v66) + (float)(v60 * v70);
            v73 = (float)(v70 * v67) + (float)(v62 * v69);
            if (fabsf(v71) > 0.000001 || fabsf(v72) > 0.000001 || fabsf(v73) > 0.000001)
            {
              v74 = (float)((float)(v72 * v72) + (float)(v71 * v71)) + (float)(v73 * v73);
              v75 = 0.0;
              v76 = 0.0;
              v77 = 0.0;
              if (v74 > 0.0)
              {
                v78 = 1.0 / sqrtf(v74);
                v77 = v71 * v78;
                v76 = v72 * v78;
                v75 = v73 * v78;
              }
              v109[0] = v77;
              v109[1] = v76;
              v109[2] = v75;
              v108 = 0.0;
              result = PxcTestAxis(v109, (float *)&v100, (float *)&v95, &v108, v94);
              if (!result)
                return result;
              if (v108 < v53)
              {
                v91 = v77;
                v92 = v76;
                v93 = v75;
                v53 = v108;
              }
              v66 = -v62;
              v65 = -v60;
              v67 = -v61;
            }
            v64 += 3;
          }
          while (v64 != 9);
          v79 = (float)((float)(v92 * (float)((float)((float)(v85 + v89) * 0.5) - *(float *)&v98[4]))
                      + (float)(v91 * (float)((float)((float)(v88 + v90) * 0.5) - *(float *)v98)))
              + (float)(v93 * (float)((float)((float)(v86 + v87) * 0.5) - *(float *)&v98[8]));
          _NF = v79 < 0.0;
          if (v79 >= 0.0)
            v81 = v91;
          else
            v81 = -v91;
          if (_NF)
            v82 = -v92;
          else
            v82 = v92;
          *a2 = fmaxf(v53, 0.0);
          if (_NF)
            v83 = -v93;
          else
            v83 = v93;
          *a1 = v81;
          a1[1] = v82;
          a1[2] = v83;
          return 1;
        }
      }
    }
    else
    {
      v84 = 1.0 / v50;
      *(float32x2_t *)a1 = vmul_n_f32(v48, v84);
      a1[2] = v49 * v84;
      *a2 = fmaxf(v47 - sqrtf(v45), 0.0);
      return 1;
    }
  }
  return result;
}

float GeomMTDCallback_CapsuleConvex(uint64_t a1, float *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6, double a7)
{
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int32x2_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  _BOOL4 v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x2_t v32;
  float32x4_t v38;
  int v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x4_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int32x2_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  _BOOL4 v93;
  float32x4_t v94;
  int8x16_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x2_t v100;
  float32x4_t v101;
  float32x2_t v102;
  float32x2_t v103;
  int8x8_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  int8x8_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x2_t v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  float32x2_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  uint64_t (**v128)();
  double v129;
  int v130;
  float32x2_t v132;
  float32x4_t v133;
  _OWORD v134[2];
  _BYTE v135[104];
  float32x4_t v136;
  int v137;
  int v138;
  int v139;
  int v140;
  char v141;
  float32x4_t v142;
  float32x4_t v143;
  int32x2_t v144;
  float32x4_t v145;
  __int128 v146;
  char v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  _QWORD v158[7];
  BOOL v159;
  float32x4_t *v160;
  uint64_t v161;

  v161 = *MEMORY[0x24BDAC8D0];
  LODWORD(a7) = a4->i32[0];
  v9 = a4->f32[1];
  v11 = a4->f32[2];
  v10 = a4->f32[3];
  v12 = v10 + v10;
  v13 = (float)((float)(v10 * (float)(v10 + v10)) + -1.0)
      + (float)(*(float *)&a7 * (float)(*(float *)&a7 + *(float *)&a7));
  v14 = (float)((float)(*(float *)&a7 + *(float *)&a7) * v9) + (float)(v11 * v12);
  v15 = (float)((float)(*(float *)&a7 + *(float *)&a7) * v11) - (float)(v9 * v12);
  LODWORD(a7) = *(_DWORD *)(a3 + 4);
  v16 = *(float *)(a3 + 8);
  v17 = v16 * v14;
  v18 = v15 * v16;
  v20 = a4[1].f32[0];
  v19 = a4[1].f32[1];
  v21 = a4[1].f32[2];
  v22 = (float)(v20 - (float)(v13 * v16)) - (float)(v20 + (float)(v13 * v16));
  v23 = sqrtf((float)((float)((float)((float)(v19 - v17) - (float)(v19 + v17))* (float)((float)(v19 - v17) - (float)(v19 + v17)))+ (float)(v22 * v22))+ (float)((float)((float)(v21 - v18) - (float)(v18 + v21)) * (float)((float)(v21 - v18) - (float)(v18 + v21))))* 0.5;
  v24 = vdup_lane_s32(*(int32x2_t *)&a7, 0);
  v25 = *(_QWORD *)(a5 + 32);
  v26 = *(float32x4_t *)(a5 + 4);
  v27 = v26;
  v27.i32[3] = 0;
  v28 = *(float32x4_t *)(a5 + 16);
  v29 = COERCE_FLOAT(*(_QWORD *)(a5 + 12)) == 1.0;
  if (COERCE_FLOAT(HIDWORD(*(_QWORD *)(a5 + 4))) != 1.0)
    v29 = 0;
  if (v26.f32[0] != 1.0)
    v29 = 0;
  v147 = 0;
  v154 = v25 + 32;
  v156 = *(_QWORD *)(v25 + 72) + 20 * *(unsigned __int8 *)(v25 + 71);
  v157 = *(_BYTE *)(v25 + 70);
  v30.i64[0] = *(_QWORD *)(v25 + 92);
  v30.i64[1] = *(unsigned int *)(v25 + 100);
  v31 = (int32x4_t)vmulq_f32(v27, v30);
  v145 = 0u;
  v146 = 0u;
  v32 = vpmin_f32((float32x2_t)vdup_laneq_s32(v31, 2), *(float32x2_t *)v31.i8);
  v32.f32[0] = vpmin_f32(v32, v32).f32[0];
  *(float32x2_t *)&v146 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v32.f32[0]);
  *((float *)&v146 + 2) = 0.025 * v32.f32[0];
  __asm { FMOV            V4.2S, #1.0 }
  if (v29)
  {
    v148 = xmmword_2260E5F10;
    v149 = xmmword_2260E5F20;
    v150 = xmmword_2260E5F40;
    v151 = xmmword_2260E5F10;
    v152 = xmmword_2260E5F20;
    v153 = xmmword_2260E5F40;
  }
  else
  {
    v38 = vrecpeq_f32(v27);
    v39 = 4;
    do
    {
      v38 = vmulq_f32(v38, vrecpsq_f32(v38, v27));
      --v39;
    }
    while (v39);
    *(int32x2_t *)v40.f32 = vdup_lane_s32(*(int32x2_t *)v26.f32, 0);
    v40.i64[1] = v40.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v40, v27)), *(int8x8_t *)&a7).u32[0] & 0xFFFFFF) != 0)
    {
      v47 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.f32, 1);
      v48 = (float32x2_t)vdup_laneq_s32((int32x4_t)v28, 2);
      v49 = (float32x2_t)vdup_laneq_s32((int32x4_t)v28, 3);
      v50 = vaddq_f32(v28, v28);
      v51 = vmul_lane_f32(v47, *(float32x2_t *)v50.f32, 1);
      v52 = vmul_laneq_f32(v48, v50, 2);
      v53 = vmul_n_f32(v47, v50.f32[0]);
      v54 = vmul_n_f32(v48, v50.f32[0]);
      v55 = vmul_n_f32(v49, v50.f32[0]);
      v56 = vmul_lane_f32(v48, *(float32x2_t *)v50.f32, 1);
      v57 = vmul_lane_f32(v49, *(float32x2_t *)v50.f32, 1);
      v58 = vmul_laneq_f32(v49, v50, 2);
      v59 = vsub_f32(_D4, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v50.f32), 0));
      *(int8x8_t *)v50.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D4, v51), v52), (int8x8_t)vadd_f32(v53, v58), 4uLL);
      v50.i64[1] = vsub_f32(v54, v57).u32[0];
      *(int8x8_t *)v60.f32 = vext_s8((int8x8_t)vsub_f32(v53, v58), (int8x8_t)vsub_f32(v59, v52), 4uLL);
      *(int8x8_t *)v61.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v50.f32, 0), *(int8x8_t *)v60.f32, 4uLL);
      v60.i64[1] = vadd_f32(v56, v55).u32[0];
      v62 = (int32x2_t)vext_s8((int8x8_t)vadd_f32(v54, v57), (int8x8_t)vsub_f32(v56, v55), 4uLL);
      *(int8x8_t *)v63.f32 = vext_s8(*(int8x8_t *)v50.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v60.f32, 1), 4uLL);
      *(int32x2_t *)v64.f32 = v62;
      v64.i64[1] = vsub_f32(v59, v51).u32[0];
      v61.i64[1] = vdup_lane_s32(v62, 0).u32[0];
      v63.i64[1] = vdup_lane_s32(v62, 1).u32[0];
      *(int8x8_t *)v65.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v50.u32[2], 0), *(int8x8_t *)&v60.u32[2], 4uLL);
      v65.i64[1] = vdup_lane_s32(*(int32x2_t *)&v64.u32[2], 0).u32[0];
      v66 = vmulq_n_f32(v61, v26.f32[0]);
      v66.i32[3] = 0;
      v67 = vmulq_lane_f32(v63, *(float32x2_t *)v26.f32, 1);
      v67.i32[3] = 0;
      v68 = vmulq_laneq_f32(v65, v26, 2);
      v68.i32[3] = 0;
      v69 = vmulq_n_f32(v66, v50.f32[0]);
      v69.i32[3] = 0;
      v70 = vmulq_lane_f32(v67, *(float32x2_t *)v50.f32, 1);
      v70.i32[3] = 0;
      v71 = vmulq_laneq_f32(v68, v50, 2);
      v71.i32[3] = 0;
      v41 = vaddq_f32(v71, vaddq_f32(v69, v70));
      v72 = vmulq_n_f32(v66, v60.f32[0]);
      v72.i32[3] = 0;
      v73 = vmulq_lane_f32(v67, *(float32x2_t *)v60.f32, 1);
      v73.i32[3] = 0;
      v74 = vmulq_laneq_f32(v68, v60, 2);
      v74.i32[3] = 0;
      v42 = vaddq_f32(v74, vaddq_f32(v72, v73));
      v75 = vmulq_n_f32(v66, v64.f32[0]);
      v75.i32[3] = 0;
      v76 = vmulq_lane_f32(v67, *(float32x2_t *)v64.f32, 1);
      v76.i32[3] = 0;
      v77 = vmulq_laneq_f32(v68, v64, 2);
      v77.i32[3] = 0;
      v43 = vaddq_f32(v77, vaddq_f32(v75, v76));
      v148 = (__int128)v41;
      v149 = (__int128)v42;
      v78 = vmulq_n_f32(v61, v38.f32[0]);
      v78.i32[3] = 0;
      v79 = vmulq_lane_f32(v63, *(float32x2_t *)v38.f32, 1);
      v79.i32[3] = 0;
      v80 = vmulq_laneq_f32(v65, v38, 2);
      v80.i32[3] = 0;
      v81 = vmulq_n_f32(v78, v50.f32[0]);
      v81.i32[3] = 0;
      v82 = vmulq_lane_f32(v79, *(float32x2_t *)v50.f32, 1);
      v82.i32[3] = 0;
      v83 = vmulq_laneq_f32(v80, v50, 2);
      v83.i32[3] = 0;
      v44 = vaddq_f32(v83, vaddq_f32(v81, v82));
      v84 = vmulq_n_f32(v78, v60.f32[0]);
      v84.i32[3] = 0;
      v85 = vmulq_lane_f32(v79, *(float32x2_t *)v60.f32, 1);
      v85.i32[3] = 0;
      v86 = vmulq_laneq_f32(v80, v60, 2);
      v86.i32[3] = 0;
      v87 = vmulq_n_f32(v78, v64.f32[0]);
      v87.i32[3] = 0;
      v88 = vmulq_lane_f32(v79, *(float32x2_t *)v64.f32, 1);
      v88.i32[3] = 0;
      v45 = vaddq_f32(v86, vaddq_f32(v84, v85));
      v89 = vmulq_laneq_f32(v80, v64, 2);
      v89.i32[3] = 0;
      v46 = vaddq_f32(v89, vaddq_f32(v87, v88));
    }
    else
    {
      v38.i32[3] = 0;
      v41 = vmulq_f32(v27, (float32x4_t)xmmword_2260E5F10);
      v42 = vmulq_f32(v27, (float32x4_t)xmmword_2260E5F20);
      v43 = vmulq_f32(v27, (float32x4_t)xmmword_2260E5F40);
      v148 = (__int128)v41;
      v149 = (__int128)v42;
      v44 = vmulq_f32(v38, (float32x4_t)xmmword_2260E5F10);
      v45 = vmulq_f32(v38, (float32x4_t)xmmword_2260E5F20);
      v46 = vmulq_f32(v38, (float32x4_t)xmmword_2260E5F40);
    }
    v150 = (__int128)v43;
    v151 = (__int128)v44;
    v152 = (__int128)v45;
    v153 = (__int128)v46;
    v90 = vmulq_f32(v41, (float32x4_t)0);
    v90.i32[3] = 0;
    v91 = vmulq_f32(v42, (float32x4_t)0);
    v91.i32[3] = 0;
    v92 = vmulq_f32(v43, (float32x4_t)0);
    v92.i32[3] = 0;
    v145 = vaddq_f32(v92, vaddq_f32(v91, v90));
  }
  v93 = 0;
  v94.i64[0] = __PAIR64__(LODWORD(v19), LODWORD(v20));
  v94.i64[1] = LODWORD(v21);
  v95 = *(int8x16_t *)a6;
  v96.i64[0] = a6[1].i64[0];
  v96.i64[1] = a6[1].u32[2];
  v97 = vnegq_f32(*a6);
  v98 = v97;
  v98.i32[3] = 0;
  v99 = vsubq_f32(v94, v96);
  v100 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a6, 3).u64[0];
  v101 = vmulq_n_f32(v99, vmla_f32((float32x2_t)0xBF000000BF000000, v100, v100).f32[0]);
  v101.i32[3] = 0;
  v102 = (float32x2_t)vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u64[0];
  v103 = (float32x2_t)vext_s8(*(int8x8_t *)v97.f32, (int8x8_t)v102, 4uLL);
  v104 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v97.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 4uLL)), v103, *(float32x2_t *)v99.f32);
  *(int8x8_t *)v105.f32 = vext_s8(v104, (int8x8_t)vmls_f32(vmul_f32(v102, *(float32x2_t *)v99.f32), *(float32x2_t *)v97.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL)), 4uLL);
  v105.i64[1] = v104.u32[0];
  v106 = vmlaq_laneq_f32(v101, v105, *a6, 3);
  v106.i64[1] = vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u32[0];
  v107 = vmulq_f32(v98, v99);
  v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
  v108 = vmlaq_n_f32(v106, v98, vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32).f32[0]);
  v109 = *a4;
  v109.i32[3] = 0;
  v110 = vmulq_f32(v109, v98);
  v110.i64[0] = vpaddq_f32(v110, v110).u64[0];
  v111 = vmulq_laneq_f32(v109, *a6, 3);
  v109.i64[0] = vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL).u64[0];
  v112 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v97.f32, (float32x2_t)vext_s8(*(int8x8_t *)a4->f32, *(int8x8_t *)v109.f32, 4uLL)), v103, *(float32x2_t *)a4->f32);
  *(int8x8_t *)v113.f32 = vext_s8(v112, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->f32, v102), *(float32x2_t *)v97.f32, *(float32x2_t *)v109.f32), 4uLL);
  *(int8x8_t *)&v113.u32[2] = v112;
  v114 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v98, *a4, 3), v111), v113);
  *(int32x2_t *)v97.f32 = vdup_lane_s32(*(int32x2_t *)v114.f32, 1);
  *(int32x2_t *)v109.f32 = vdup_laneq_s32((int32x4_t)v114, 2);
  v115 = vaddq_f32(v114, v114);
  *(float32x2_t *)v98.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a4, *(int8x16_t *)a4, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL)), vpadd_f32(*(float32x2_t *)v110.f32, *(float32x2_t *)v110.f32));
  v116 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.f32, 1);
  *(int32x2_t *)v111.f32 = vdup_laneq_s32((int32x4_t)v115, 2);
  *(int32x2_t *)v114.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v115.f32), 0);
  v117 = vmul_lane_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v115.f32, 1);
  v118 = vmul_laneq_f32(*(float32x2_t *)v109.f32, v115, 2);
  *(float32x2_t *)v97.f32 = vmul_n_f32(*(float32x2_t *)v97.f32, v115.f32[0]);
  v119 = vmul_n_f32(*(float32x2_t *)v109.f32, v115.f32[0]);
  *(float32x2_t *)v109.f32 = vmul_lane_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v115.f32, 1);
  *(float32x2_t *)v115.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.f32, 0), *(float32x2_t *)v98.f32, 1);
  v120 = vmul_lane_f32(v116, *(float32x2_t *)v98.f32, 1);
  *(float32x2_t *)v98.f32 = vmul_lane_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v98.f32, 1);
  *(float32x2_t *)v114.f32 = vsub_f32(_D4, *(float32x2_t *)v114.f32);
  *(int8x8_t *)v121.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D4, v117), v118), (int8x8_t)vadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v98.f32), 4uLL);
  *(float32x2_t *)&v121.u32[2] = vsub_f32(v119, v120);
  v155 = *(_QWORD *)(v25 + 80);
  v122 = vaddq_f32(v108, v108);
  v122.i32[3] = 0;
  *(int8x8_t *)v97.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v98.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v114.f32, v118), 4uLL);
  *(float32x2_t *)&v97.u32[2] = vadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v115.f32);
  *(int8x8_t *)v98.f32 = vext_s8((int8x8_t)vadd_f32(v119, v120), (int8x8_t)vsub_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v115.f32), 4uLL);
  *(float32x2_t *)&v98.u32[2] = vsub_f32(*(float32x2_t *)v114.f32, v117);
  v134[0] = v95;
  v134[1] = v96;
  v133 = 0uLL;
  v123 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, v23);
  v124 = vmulq_n_f32(v121, v123.f32[0]);
  v124.i32[3] = 0;
  v125 = vmulq_lane_f32(v97, *(float32x2_t *)v123.f32, 1);
  v125.i32[3] = 0;
  v126 = vmulq_laneq_f32(v98, v123, 2);
  v126.i32[3] = 0;
  v132 = 0;
  v127 = vaddq_f32(v126, vaddq_f32(v124, v125));
  v140 = 4;
  v136 = v122;
  v144 = v24;
  v142 = vaddq_f32(v122, v127);
  v143 = vsubq_f32(v122, v127);
  v137 = LODWORD(a7);
  v138 = LODWORD(a7);
  v139 = LODWORD(a7);
  v141 = 1;
  if (v26.f32[0] == 1.0 && *(float *)(a5 + 8) == 1.0)
    v93 = *(float *)(a5 + 12) == 1.0;
  physx::Gu::getPCMConvexData(&v145, v93, (uint64_t)v135);
  v158[5] = &v148;
  v158[6] = &v151;
  v128 = &off_24ED91090;
  v159 = v93;
  if (v93)
    v128 = &off_24ED91040;
  v158[4] = v134;
  v158[0] = v128;
  v160 = &v145;
  v129 = physx::Gu::computeMTD(&v136, (uint64_t)v135, v158, &v132, &v133);
  if (v130)
  {
    *a2 = fmaxf(v132.f32[0], 0.0);
    LODWORD(v129) = v133.i32[2];
    *(_QWORD *)a1 = v133.i64[0];
    *(_DWORD *)(a1 + 8) = LODWORD(v129);
  }
  return *(float *)&v129;
}

uint64_t GeomMTDCallback_CapsuleMesh(uint64_t a1)
{
  float *v1;
  float *v2;
  uint64_t *v3;
  uint64_t *v4;
  float *v5;
  float *v6;
  float32x2_t *v7;
  float32x2_t *v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  _BOOL4 v28;
  uint64_t result;
  unsigned int v30;
  float32x2_t v31;
  float v32;
  float32x2_t v33;
  float v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  float v40[7];
  int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  _DWORD v45[20];
  _DWORD v46[20];
  uint64_t v47;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v47 = *MEMORY[0x24BDAC8D0];
  v10 = *v9;
  v11 = v9[1];
  v12 = v10 + v10;
  v14 = v9[2];
  v13 = v9[3];
  v15 = v13 + v13;
  v16 = (float)((float)(v13 * (float)(v13 + v13)) + -1.0) + (float)(v10 * (float)(v10 + v10));
  v17 = (float)(v12 * v11) + (float)(v14 * (float)(v13 + v13));
  v18 = (float)(v12 * v14) - (float)(v11 * v15);
  v21 = *(_DWORD *)(v19 + 4);
  v20 = *(float *)(v19 + 8);
  v22 = v16 * v20;
  v23 = v20 * v17;
  v24 = v18 * v20;
  v25 = v9[4];
  v26 = v9[5];
  v27 = v9[6];
  v31.f32[0] = v25 + v22;
  v31.f32[1] = v26 + v23;
  v32 = v24 + v27;
  v33.f32[0] = v25 - v22;
  v33.f32[1] = v26 - v23;
  v34 = v27 - v24;
  v35 = v21;
  v41 = 0;
  physx::PxTransformFromSegment(&v31, &v33, (float *)&v41, (uint64_t)v40);
  v46[0] = -1;
  LODWORD(v42) = 2;
  HIDWORD(v42) = v21;
  v43 = v41;
  physx::Gu::GeometryUnion::set((uint64_t)v46, &v42);
  v45[0] = -1;
  physx::Gu::GeometryUnion::set((uint64_t)v45, v4);
  v39 = 0;
  v38 = 0;
  v44 = 0;
  v36 = 0;
  v37 = 1065353216;
  v28 = physx::Gu::contactCapsuleMesh((uint64_t)v46, (uint64_t)v45, v40, v2, (float *)&v36, (uint64_t)&v38, (uint64_t)&v42);
  result = 0;
  if (v28)
  {
    v30 = v44;
    LODWORD(result) = processContacts(v8, v6, v44, (uint64_t)&v42);
    if (v30)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t GeomMTDCallback_CapsuleHeightField(uint64_t a1)
{
  float *v1;
  float *v2;
  uint64_t *v3;
  uint64_t *v4;
  float *v5;
  float *v6;
  float32x2_t *v7;
  float32x2_t *v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  double v28;
  _BOOL4 v29;
  uint64_t result;
  unsigned int v31;
  float32x2_t v32;
  float v33;
  float32x2_t v34;
  float v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  float v41[7];
  int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  float32x2_t v46[10];
  _DWORD v47[20];
  uint64_t v48;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v48 = *MEMORY[0x24BDAC8D0];
  v10 = *v9;
  v11 = v9[1];
  v12 = v10 + v10;
  v14 = v9[2];
  v13 = v9[3];
  v15 = v13 + v13;
  v16 = (float)((float)(v13 * (float)(v13 + v13)) + -1.0) + (float)(v10 * (float)(v10 + v10));
  v17 = (float)(v12 * v11) + (float)(v14 * (float)(v13 + v13));
  v18 = (float)(v12 * v14) - (float)(v11 * v15);
  v21 = *(_DWORD *)(v19 + 4);
  v20 = *(float *)(v19 + 8);
  v22 = v16 * v20;
  v23 = v20 * v17;
  v24 = v18 * v20;
  v25 = v9[4];
  v26 = v9[5];
  v27 = v9[6];
  v32.f32[0] = v25 + v22;
  v32.f32[1] = v26 + v23;
  v33 = v24 + v27;
  v34.f32[0] = v25 - v22;
  v34.f32[1] = v26 - v23;
  v35 = v27 - v24;
  v36 = v21;
  v42 = 0;
  physx::PxTransformFromSegment(&v32, &v34, (float *)&v42, (uint64_t)v41);
  v47[0] = -1;
  LODWORD(v43) = 2;
  HIDWORD(v43) = v21;
  v44 = v42;
  physx::Gu::GeometryUnion::set((uint64_t)v47, &v43);
  v46[0].i32[0] = -1;
  *(_QWORD *)&v28 = physx::Gu::GeometryUnion::set((uint64_t)v46, v4).n128_u64[0];
  v40 = 0;
  v39 = 0;
  v45 = 0;
  v37 = 0;
  v38 = 1065353216;
  v29 = physx::Gu::contactCapsuleHeightfield((uint64_t)v47, v46, v41, v2, (float *)&v37, v28, (uint64_t)&v39, (uint64_t)&v43);
  result = 0;
  if (v29)
  {
    v31 = v45;
    LODWORD(result) = processContacts(v8, v6, v45, (uint64_t)&v43);
    if (v31)
      return result;
    else
      return 0;
  }
  return result;
}

BOOL GeomMTDCallback_BoxBox(float *a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x4_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  _BOOL8 result;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v64;
  float v65;
  BOOL v66;
  float v67;
  float v68;
  float v69;
  uint64_t i;
  uint64_t v71;
  float *v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  BOOL v90;
  float v91;
  float v92;
  float v93;
  float32x2_t v94;
  float32x2_t v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  __int32 v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  int32x4_t v117;
  int32x4_t v118;
  int v119;
  int32x4_t v120;
  int v121;
  float v122;
  int32x4_t v123;
  int32x4_t v124;
  int v125;
  int32x4_t v126;
  int v127;
  float v128[3];
  float v129;

  v8 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a4, 1);
  v9 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a4, 2);
  v10 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a4, 3);
  v11 = vaddq_f32(*(float32x4_t *)a4, *(float32x4_t *)a4);
  v12 = vmul_lane_f32(v8, *(float32x2_t *)v11.f32, 1);
  v13 = vmul_laneq_f32(v9, v11, 2);
  v14 = vmul_n_f32(v8, v11.f32[0]);
  v15 = vmul_n_f32(v9, v11.f32[0]);
  v16 = vmul_n_f32(v10, v11.f32[0]);
  v17 = vmul_lane_f32(v9, *(float32x2_t *)v11.f32, 1);
  v18 = vmul_lane_f32(v10, *(float32x2_t *)v11.f32, 1);
  v19 = vmul_laneq_f32(v10, v11, 2);
  __asm { FMOV            V0.2S, #1.0 }
  *(float32x2_t *)v11.f32 = vsub_f32(_D0, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a4, *(float32x2_t *)v11.f32), 0));
  v24 = vadd_f32(v14, v19);
  v25 = vsub_f32(v15, v18);
  v26 = vsub_f32(*(float32x2_t *)v11.f32, v13);
  v27 = vadd_f32(v17, v16);
  v28 = vadd_f32(v15, v18);
  v29 = vsub_f32(v17, v16);
  v30 = vsub_f32(*(float32x2_t *)v11.f32, v12);
  v31 = (float)(1.0 - v12.f32[1]) - v13.f32[1];
  v122 = v31;
  v112 = v25.f32[0];
  v114 = v24.f32[0];
  *(float32x2_t *)v32.i8 = v24;
  v32.u64[1] = (unint64_t)v25;
  *(float32x2_t *)v33.i8 = vsub_f32(v14, v19);
  v108 = v27.f32[0];
  v110 = v26.f32[0];
  v33.u64[1] = (unint64_t)v26;
  v34 = vuzp1q_s32(v32, v33);
  v106 = v33.i32[1];
  v107 = v28.f32[1];
  v34.i32[2] = v33.i32[1];
  *(float32x2_t *)v33.i8 = v27;
  v33.u64[1] = (unint64_t)v28;
  v102 = v30.f32[0];
  v103 = v29.f32[0];
  *(float32x2_t *)v11.f32 = v29;
  *(float32x2_t *)&v11.u32[2] = v30;
  v35 = vuzp1q_s32(v33, (int32x4_t)v11);
  v35.i32[1] = v28.i32[1];
  v123 = v34;
  v124 = v35;
  v125 = *(_DWORD *)(a4 + 16);
  v35.i64[0] = *(_QWORD *)(a4 + 20);
  v95 = *(float32x2_t *)v35.i8;
  v35.i64[1] = *(_QWORD *)(a3 + 4);
  v126 = v35;
  v36 = *(float32x4_t *)a6;
  *(int32x2_t *)v11.f32 = vdup_lane_s32(*(int32x2_t *)a6, 1);
  v37 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a6, 2);
  v38 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a6, 3);
  v127 = *(_DWORD *)(a3 + 12);
  v39 = vaddq_f32(v36, v36);
  *(int32x2_t *)v36.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v39.f32), 0);
  v40 = vmul_lane_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v39.f32, 1);
  v41 = vmul_laneq_f32(v37, v39, 2);
  *(float32x2_t *)v11.f32 = vmul_n_f32(*(float32x2_t *)v11.f32, v39.f32[0]);
  v42 = vmul_n_f32(v37, v39.f32[0]);
  v43 = vmul_n_f32(v38, v39.f32[0]);
  v44 = vmul_lane_f32(v37, *(float32x2_t *)v39.f32, 1);
  v45 = vmul_lane_f32(v38, *(float32x2_t *)v39.f32, 1);
  *(float32x2_t *)v39.f32 = vmul_laneq_f32(v38, v39, 2);
  v46 = vsub_f32(_D0, *(float32x2_t *)v36.f32);
  v47 = vadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v39.f32);
  v48 = vsub_f32(v42, v45);
  v49 = vsub_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v39.f32);
  *(float32x2_t *)v11.f32 = vsub_f32(v46, v41);
  v50 = vadd_f32(v44, v43);
  v51 = vadd_f32(v42, v45);
  *(float32x2_t *)v39.f32 = vsub_f32(v44, v43);
  *(float32x2_t *)v36.f32 = vsub_f32(v46, v40);
  v52 = (float)(1.0 - v40.f32[1]) - v41.f32[1];
  v116 = v52;
  v100 = v48.f32[0];
  v101 = v47.f32[0];
  *(float32x2_t *)v53.i8 = v47;
  v53.u64[1] = (unint64_t)v48;
  *(float32x2_t *)v54.i8 = v49;
  v98 = v50.f32[0];
  v99 = v11.f32[0];
  v54.i64[1] = v11.i64[0];
  v55 = vuzp1q_s32(v53, v54);
  v104 = v49.f32[1];
  v105 = v51.f32[1];
  v55.i32[2] = v49.i32[1];
  *(float32x2_t *)v54.i8 = v50;
  v54.u64[1] = (unint64_t)v51;
  v96 = v36.f32[0];
  v97 = v39.f32[0];
  v39.i64[1] = v36.i64[0];
  v117 = v55;
  v56 = vuzp1q_s32(v54, (int32x4_t)v39);
  v56.i32[1] = v51.i32[1];
  v118 = v56;
  v119 = *(_DWORD *)(a6 + 16);
  v54.i64[0] = *(_QWORD *)(a6 + 20);
  v94 = *(float32x2_t *)v54.i8;
  v54.i64[1] = *(_QWORD *)(a5 + 4);
  v120 = v54;
  v121 = *(_DWORD *)(a5 + 12);
  v128[0] = 0.0;
  result = PxcTestAxis(&v122, &v122, &v116, v128);
  if (!result)
    return result;
  v58 = v128[0];
  v128[0] = 0.0;
  if (!PxcTestAxis((float *)&v123.i32[2], &v122, &v116, v128))
    return 0;
  v59 = fminf(v58, 3.4028e38);
  if (v128[0] < v59)
    v60 = v128[0];
  else
    v60 = v59;
  if (v128[0] >= v59)
  {
    v61 = v114;
  }
  else
  {
    v31 = *(float *)&v106;
    v61 = v110;
  }
  if (v128[0] < v59)
    v62 = v108;
  else
    v62 = v112;
  v128[0] = 0.0;
  result = PxcTestAxis((float *)&v124.i32[1], &v122, &v116, v128);
  if (!result)
    return result;
  if (v128[0] < v60)
  {
    v60 = v128[0];
    v31 = v107;
    v61 = v103;
    v62 = v102;
  }
  v128[0] = 0.0;
  result = PxcTestAxis(&v116, &v122, &v116, v128);
  if (!result)
    return result;
  _NF = v128[0] < v60;
  if (v128[0] >= v60)
  {
    v64 = v61;
  }
  else
  {
    v60 = v128[0];
    v31 = v52;
    v64 = v101;
  }
  if (_NF)
    v62 = v100;
  v128[0] = 0.0;
  result = PxcTestAxis((float *)&v117.i32[2], &v122, &v116, v128);
  if (!result)
    return result;
  v65 = v128[0];
  v66 = v128[0] < v60;
  if (v128[0] >= v60)
    v65 = v60;
  v115 = v65;
  v67 = v128[0] < v60 ? v104 : v31;
  v68 = v66 ? v99 : v64;
  v69 = v66 ? v98 : v62;
  v128[0] = 0.0;
  if (!PxcTestAxis((float *)&v118.i32[1], &v122, &v116, v128))
    return 0;
  if (v128[0] < v115)
  {
    v115 = v128[0];
    v67 = v105;
    v68 = v97;
    v69 = v96;
  }
  v109 = v69;
  v111 = v68;
  v113 = v67;
  for (i = 0; i != 3; ++i)
  {
    v71 = 0;
    v72 = &v116 + 3 * i;
    v73 = v72[1];
    v74 = v72[2];
    v75 = *v72;
    do
    {
      v77 = *(float *)((char *)&v122 + v71 * 4 + 4);
      v76 = *(float *)&v123.i32[v71 + 1];
      v78 = *(float *)((char *)&v122 + v71 * 4);
      v79 = (float)(v77 * v74) - (float)(v76 * v73);
      v80 = (float)(v76 * v75) - (float)(v78 * v74);
      v81 = (float)(v78 * v73) - (float)(v77 * v75);
      if (fabsf(v79) > 0.000001 || fabsf(v80) > 0.000001 || fabsf(v81) > 0.000001)
      {
        v82 = (float)((float)(v80 * v80) + (float)(v79 * v79)) + (float)(v81 * v81);
        v83 = 0.0;
        v84 = 0.0;
        v85 = 0.0;
        if (v82 > 0.0)
        {
          v86 = 1.0 / sqrtf(v82);
          v85 = v79 * v86;
          v84 = v80 * v86;
          v83 = v81 * v86;
        }
        v128[0] = v85;
        v128[1] = v84;
        v128[2] = v83;
        v129 = 0.0;
        result = PxcTestAxis(v128, &v122, &v116, &v129);
        if (!result)
          return result;
        if (v129 < v115)
        {
          v115 = v129;
          v113 = v85;
          v111 = v84;
          v109 = v83;
        }
      }
      v71 += 3;
    }
    while (v71 != 9);
  }
  _D1 = vsub_f32(v94, v95);
  _S5 = v109;
  __asm { FMLA            S0, S5, V1.S[1] }
  v90 = _S0 < 0.0;
  if (_S0 >= 0.0)
    v91 = -v113;
  else
    v91 = v113;
  v92 = -v111;
  if (v90)
    v92 = v111;
  v93 = -v109;
  if (v90)
    v93 = v109;
  *a1 = v91;
  a1[1] = v92;
  a1[2] = v93;
  *a2 = fmaxf(v115, 0.0);
  return 1;
}

float GeomMTDCallback_BoxConvex(uint64_t a1, float *a2, uint64_t a3, int32x2_t *a4, uint64_t a5, __int128 *a6, double a7, int32x4_t a8)
{
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float v25;
  float v26;
  float v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float v31;
  float v32;
  float32x4_t v33;
  float v34;
  BOOL v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  __int128 v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  _BOOL4 v61;
  __int128 v62;
  unsigned __int32 v63;
  int32x4_t v64;
  float32x2_t v65;
  uint64_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float v69;
  float32x4_t v70;
  float32x4_t v71;
  int32x4_t v72;
  float32x4_t v73;
  int v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x4_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  _BOOL4 v129;
  __int128 v130;
  __int128 v131;
  uint64_t (**v132)();
  float result;
  uint64_t v135;
  unsigned __int32 v136;
  int32x2_t v137;
  float32x4_t v138;
  _OWORD v139[2];
  _OWORD v140[2];
  _QWORD v141[2];
  float v142;
  float v143;
  float v144;
  int v145;
  char v146;
  int32x4_t v147;
  _OWORD v148[3];
  _BYTE v149[104];
  _BYTE v150[8];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t *v157;
  uint64_t *v158;
  void *v159;
  __int128 v160;
  __int128 v161;
  float32x4_t v162;
  __int128 v163;
  char v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  _QWORD v175[7];
  BOOL v176;
  float32x4_t *v177;
  _QWORD v178[7];
  char v179;
  _QWORD *v180;
  uint64_t v181;

  v181 = *MEMORY[0x24BDAC8D0];
  v33 = *(float32x4_t *)a4->i8;
  v9 = (float32x2_t)vdup_lane_s32(*a4, 1);
  v10 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a4->i8, 2);
  v11 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a4->i8, 3);
  v12 = vaddq_f32(v33, v33);
  v13 = vmul_lane_f32(v9, *(float32x2_t *)v12.f32, 1);
  v14 = vmul_laneq_f32(v10, v12, 2);
  v15 = vmul_n_f32(v9, v12.f32[0]);
  v16 = vmul_n_f32(v10, v12.f32[0]);
  v17 = vmul_n_f32(v11, v12.f32[0]);
  v18 = vmul_lane_f32(v10, *(float32x2_t *)v12.f32, 1);
  v19 = vmul_lane_f32(v11, *(float32x2_t *)v12.f32, 1);
  v20 = vmul_laneq_f32(v11, v12, 2);
  __asm { FMOV            V6.2S, #1.0 }
  *(float32x2_t *)v33.f32 = vsub_f32(_D6, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32((float32x2_t)*a4, *(float32x2_t *)v12.f32), 0));
  LODWORD(v25) = vadd_f32(v15, v20).u32[0];
  LODWORD(v26) = vsub_f32(v16, v19).u32[0];
  *(float32x2_t *)a8.i8 = vsub_f32(v15, v20);
  LODWORD(v27) = vsub_f32(*(float32x2_t *)v33.f32, v14).u32[0];
  v28 = vadd_f32(v18, v17);
  v29 = vadd_f32(v16, v19);
  v30 = vsub_f32(v18, v17);
  v31 = vsub_f32(*(float32x2_t *)v33.f32, v13).f32[0];
  v32 = (float)(1.0 - v13.f32[1]) - v14.f32[1];
  v33.i64[0] = *(_QWORD *)(a3 + 4);
  a8.i32[0] = *(_DWORD *)(a3 + 12);
  if (v31 >= 0.0)
  {
    v50 = v25 - *(float *)&a8.i32[1];
    _NF = v32 < (float)-v27;
    v52 = v31 + (float)(v27 + (float)(v32 + 1.0));
    v53 = 0.5 / sqrtf(v52);
    v29.f32[0] = v53 * vsub_f32(v28, v30).f32[0];
    v54 = (float)(v29.f32[1] - v26) * v53;
    v55 = v52 * v53;
    v56 = v31 + (float)((float)(1.0 - v32) - v27);
    v57 = vadd_f32(v28, v30).f32[0];
    v58 = 0.5 / sqrtf(v56);
    *(float *)&v46 = (float)(v29.f32[1] + v26) * v58;
    v59 = v58 * v57;
    v48 = v56 * v58;
    v60 = v50 * v58;
    if (_NF)
    {
      v47 = v59;
    }
    else
    {
      *(float *)&v46 = v29.f32[0];
      v47 = v54;
    }
    if (_NF)
    {
      v49 = v60;
    }
    else
    {
      v48 = v50 * v53;
      v49 = v55;
    }
  }
  else
  {
    v34 = v25 + *(float *)&a8.i32[1];
    v35 = v32 <= v27;
    v36 = (float)(v27 + (float)(1.0 - v32)) - v31;
    v37 = 0.5 / sqrtf(v36);
    v38 = v36 * v37;
    v29.f32[0] = v37 * vadd_f32(v28, v30).f32[0];
    v39 = (float)(v29.f32[1] - v26) * v37;
    v40 = (float)((float)(v32 + 1.0) - v27) - v31;
    v41 = vsub_f32(v28, v30).f32[0];
    v42 = 0.5 / sqrtf(v40);
    v43 = v40 * v42;
    v44 = (float)(v29.f32[1] + v26) * v42;
    v45 = v42 * v41;
    if (v35)
      *(float *)&v46 = v34 * v37;
    else
      *(float *)&v46 = v43;
    if (v35)
      v47 = v38;
    else
      v47 = v34 * v42;
    if (v35)
      v48 = v29.f32[0];
    else
      v48 = v44;
    if (v35)
      v49 = v39;
    else
      v49 = v45;
  }
  v61 = 0;
  *(int32x2_t *)&v62 = a4[2];
  *((float *)&v46 + 1) = v47;
  v63 = a4[3].u32[0];
  *((float *)&v46 + 2) = v48;
  v64 = (int32x4_t)v33;
  v64.i32[2] = *(_DWORD *)(a3 + 12);
  v65 = (float32x2_t)vdup_laneq_s32(v64, 2);
  v64.i32[3] = 0;
  v145 = 3;
  v146 = 0;
  v141[0] = 0;
  v141[1] = 0;
  v147 = v64;
  *(float32x2_t *)v64.i8 = vpmin_f32(v65, *(float32x2_t *)v33.f32);
  *(float *)v64.i32 = vpmin_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8).f32[0];
  v142 = 0.15 * *(float *)v64.i32;
  v143 = 0.05 * *(float *)v64.i32;
  v144 = 0.05 * *(float *)v64.i32;
  v66 = *(_QWORD *)(a5 + 32);
  v67 = *(float32x4_t *)(a5 + 4);
  v68 = v67;
  v68.i32[3] = 0;
  LODWORD(v69) = HIDWORD(*(_QWORD *)(a5 + 4));
  if (v67.f32[0] == 1.0 && v69 == 1.0)
    v61 = v67.f32[2] == 1.0;
  *((float *)&v46 + 3) = v49;
  v70 = *(float32x4_t *)(a5 + 16);
  v163 = 0u;
  v164 = 0;
  v162 = 0u;
  v171 = v66 + 32;
  v173 = *(_QWORD *)(v66 + 72) + 20 * *(unsigned __int8 *)(v66 + 71);
  v174 = *(_BYTE *)(v66 + 70);
  v71.i64[0] = *(_QWORD *)(v66 + 92);
  v71.i64[1] = *(unsigned int *)(v66 + 100);
  v72 = (int32x4_t)vmulq_f32(v68, v71);
  *(float32x2_t *)v72.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v72, 2), *(float32x2_t *)v72.i8);
  *(float *)v72.i32 = vpmin_f32(*(float32x2_t *)v72.i8, *(float32x2_t *)v72.i8).f32[0];
  *(float32x2_t *)&v163 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v72.i32);
  *((float *)&v163 + 2) = 0.025 * *(float *)v72.i32;
  if (v61)
  {
    v165 = xmmword_2260E5F10;
    v166 = xmmword_2260E5F20;
    v167 = xmmword_2260E5F40;
    v168 = xmmword_2260E5F10;
    v169 = xmmword_2260E5F20;
    v170 = xmmword_2260E5F40;
  }
  else
  {
    v73 = vrecpeq_f32(v68);
    v74 = 4;
    do
    {
      v73 = vmulq_f32(v73, vrecpsq_f32(v73, v68));
      --v74;
    }
    while (v74);
    *(int32x2_t *)v75.f32 = vdup_lane_s32(*(int32x2_t *)v67.f32, 0);
    v75.i64[1] = v75.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v75, v68)), *(int8x8_t *)v33.f32).u32[0] & 0xFFFFFF) != 0)
    {
      v82 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.f32, 1);
      v83 = (float32x2_t)vdup_laneq_s32((int32x4_t)v70, 2);
      v84 = (float32x2_t)vdup_laneq_s32((int32x4_t)v70, 3);
      v85 = vaddq_f32(v70, v70);
      v86 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v85.f32), 0);
      v87 = vmul_lane_f32(v82, *(float32x2_t *)v85.f32, 1);
      v88 = vmul_laneq_f32(v83, v85, 2);
      v89 = vmul_n_f32(v82, v85.f32[0]);
      v90 = vmul_n_f32(v83, v85.f32[0]);
      v91 = vmul_n_f32(v84, v85.f32[0]);
      v92 = vmul_lane_f32(v83, *(float32x2_t *)v85.f32, 1);
      v93 = vmul_lane_f32(v84, *(float32x2_t *)v85.f32, 1);
      v94 = vmul_laneq_f32(v84, v85, 2);
      *(float32x2_t *)v85.f32 = vsub_f32(_D6, v86);
      *(int8x8_t *)v95.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D6, v87), v88), (int8x8_t)vadd_f32(v89, v94), 4uLL);
      v95.i64[1] = vsub_f32(v90, v93).u32[0];
      *(int8x8_t *)v96.f32 = vext_s8((int8x8_t)vsub_f32(v89, v94), (int8x8_t)vsub_f32(*(float32x2_t *)v85.f32, v88), 4uLL);
      *(int8x8_t *)v97.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v95.f32, 0), *(int8x8_t *)v96.f32, 4uLL);
      v96.i64[1] = vadd_f32(v92, v91).u32[0];
      *(int8x8_t *)v98.f32 = vext_s8(*(int8x8_t *)v95.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v96.f32, 1), 4uLL);
      v85.i32[0] = vsub_f32(*(float32x2_t *)v85.f32, v87).u32[0];
      *(int8x8_t *)v99.f32 = vext_s8((int8x8_t)vadd_f32(v90, v93), (int8x8_t)vsub_f32(v92, v91), 4uLL);
      v99.i64[1] = v85.u32[0];
      v97.i64[1] = vdup_lane_s32(*(int32x2_t *)v99.f32, 0).u32[0];
      v98.i64[1] = vdup_lane_s32(*(int32x2_t *)v99.f32, 1).u32[0];
      v90.i32[0] = vdup_lane_s32((int32x2_t)v85.u32[0], 0).u32[0];
      *(int8x8_t *)v85.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v95.u32[2], 0), *(int8x8_t *)&v96.u32[2], 4uLL);
      v85.i64[1] = v90.u32[0];
      v100 = vmulq_n_f32(v97, v67.f32[0]);
      v100.i32[3] = 0;
      v101 = vmulq_lane_f32(v98, *(float32x2_t *)v67.f32, 1);
      v101.i32[3] = 0;
      v102 = vmulq_laneq_f32(v85, v67, 2);
      v102.i32[3] = 0;
      v103 = vmulq_n_f32(v100, v95.f32[0]);
      v103.i32[3] = 0;
      v104 = vmulq_lane_f32(v101, *(float32x2_t *)v95.f32, 1);
      v104.i32[3] = 0;
      v105 = vmulq_laneq_f32(v102, v95, 2);
      v105.i32[3] = 0;
      v106 = vaddq_f32(v103, v104);
      v107 = vmulq_n_f32(v100, v96.f32[0]);
      v107.i32[3] = 0;
      v108 = vmulq_lane_f32(v101, *(float32x2_t *)v96.f32, 1);
      v108.i32[3] = 0;
      v109 = vmulq_laneq_f32(v102, v96, 2);
      v109.i32[3] = 0;
      v76 = vaddq_f32(v105, v106);
      v77 = vaddq_f32(v109, vaddq_f32(v107, v108));
      v110 = vmulq_n_f32(v100, v99.f32[0]);
      v110.i32[3] = 0;
      v111 = vmulq_lane_f32(v101, *(float32x2_t *)v99.f32, 1);
      v111.i32[3] = 0;
      v112 = vmulq_laneq_f32(v102, v99, 2);
      v112.i32[3] = 0;
      v78 = vaddq_f32(v112, vaddq_f32(v110, v111));
      v165 = (__int128)v76;
      v166 = (__int128)v77;
      v167 = (__int128)v78;
      v113 = vmulq_n_f32(v97, v73.f32[0]);
      v113.i32[3] = 0;
      v114 = vmulq_lane_f32(v98, *(float32x2_t *)v73.f32, 1);
      v114.i32[3] = 0;
      v115 = vmulq_laneq_f32(v85, v73, 2);
      v115.i32[3] = 0;
      v116 = vmulq_n_f32(v113, v95.f32[0]);
      v116.i32[3] = 0;
      v117 = vmulq_lane_f32(v114, *(float32x2_t *)v95.f32, 1);
      v117.i32[3] = 0;
      v118 = vmulq_laneq_f32(v115, v95, 2);
      v118.i32[3] = 0;
      v119 = vaddq_f32(v116, v117);
      v120 = vmulq_n_f32(v113, v96.f32[0]);
      v120.i32[3] = 0;
      v121 = vmulq_lane_f32(v114, *(float32x2_t *)v96.f32, 1);
      v121.i32[3] = 0;
      v79 = vaddq_f32(v118, v119);
      v122 = vmulq_laneq_f32(v115, v96, 2);
      v122.i32[3] = 0;
      v80 = vaddq_f32(v122, vaddq_f32(v120, v121));
      v123 = vmulq_n_f32(v113, v99.f32[0]);
      v123.i32[3] = 0;
      v124 = vmulq_lane_f32(v114, *(float32x2_t *)v99.f32, 1);
      v124.i32[3] = 0;
      v125 = vmulq_laneq_f32(v115, v99, 2);
      v125.i32[3] = 0;
      v81 = vaddq_f32(v125, vaddq_f32(v123, v124));
      v69 = *(float *)(a5 + 8);
    }
    else
    {
      v73.i32[3] = 0;
      v76 = vmulq_f32(v68, (float32x4_t)xmmword_2260E5F10);
      v77 = vmulq_f32(v68, (float32x4_t)xmmword_2260E5F20);
      v78 = vmulq_f32(v68, (float32x4_t)xmmword_2260E5F40);
      v165 = (__int128)v76;
      v166 = (__int128)v77;
      v167 = (__int128)v78;
      v79 = vmulq_f32(v73, (float32x4_t)xmmword_2260E5F10);
      v80 = vmulq_f32(v73, (float32x4_t)xmmword_2260E5F20);
      v81 = vmulq_f32(v73, (float32x4_t)xmmword_2260E5F40);
    }
    v168 = (__int128)v79;
    v169 = (__int128)v80;
    v170 = (__int128)v81;
    v126 = vmulq_f32(v76, (float32x4_t)0);
    v126.i32[3] = 0;
    v127 = vmulq_f32(v77, (float32x4_t)0);
    v127.i32[3] = 0;
    v128 = vmulq_f32(v78, (float32x4_t)0);
    v128.i32[3] = 0;
    v162 = vaddq_f32(v128, vaddq_f32(v127, v126));
  }
  v129 = 0;
  v172 = *(_QWORD *)(v66 + 80);
  *((_QWORD *)&v62 + 1) = v63;
  v130 = *a6;
  *(_QWORD *)&v131 = *((_QWORD *)a6 + 2);
  *((_QWORD *)&v131 + 1) = *((unsigned int *)a6 + 6);
  v140[0] = v46;
  v140[1] = v62;
  v139[0] = v130;
  v139[1] = v131;
  v138 = 0uLL;
  v137 = 0;
  if (v67.f32[0] == 1.0 && v69 == 1.0)
    v129 = *(float *)(a5 + 12) == 1.0;
  v135 = v33.i64[0];
  v136 = a8.i32[0];
  physx::Gu::PolygonalBox::PolygonalBox((uint64_t)v150, (uint64_t)&v135, *(double *)v33.i64, a8);
  v153 = 0;
  v155 = 0x600000008;
  v154 = 0;
  v156 = 0;
  v157 = &v152;
  v158 = &v151;
  v160 = 0u;
  v161 = 0u;
  v159 = &physx::Gu::gPCMBoxPolygonData;
  physx::Gu::getPCMConvexData(&v162, v129, (uint64_t)v149);
  v148[0] = xmmword_2260E5F10;
  v148[1] = xmmword_2260E5F20;
  v148[2] = xmmword_2260E5F40;
  v178[5] = v148;
  v178[6] = v148;
  v179 = 1;
  v178[4] = v140;
  v178[0] = &off_24ED90FE0;
  v180 = v141;
  v175[5] = &v165;
  v175[6] = &v168;
  v132 = &off_24ED91090;
  if (v129)
    v132 = &off_24ED91040;
  v176 = v129;
  v175[4] = v139;
  v175[0] = v132;
  v177 = &v162;
  if (physx::Gu::computeMTD((uint64_t)&v153, (uint64_t)v149, (uint64_t)v178, (uint64_t)v175, &v137, &v138))
  {
    *a2 = fmaxf(*(float *)v137.i32, 0.0);
    result = v138.f32[2];
    *(_QWORD *)a1 = v138.i64[0];
    *(float *)(a1 + 8) = result;
  }
  return result;
}

uint64_t GeomMTDCallback_BoxMesh(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  float *v5;
  float *v6;
  float32x2_t *v7;
  float32x2_t *v8;
  int32x2_t *v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v26;
  float v27;
  float v28;
  float v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float v33;
  int32x2_t v34;
  float32x2_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x2_t v38;
  float v39;
  BOOL v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  double v68;
  int32x4_t v69;
  _BOOL4 v70;
  uint64_t result;
  unsigned int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  _DWORD v77[4];
  int32x2_t v78;
  __int32 v79;
  int v80;
  uint64_t v81;
  __int32 v82;
  unsigned int v83;
  float v84[20];
  float v85[20];
  uint64_t v86;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v86 = *MEMORY[0x24BDAC8D0];
  v10 = (float32x2_t)vdup_lane_s32(*v9, 1);
  v11 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)v9->i8, 2);
  v12 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)v9->i8, 3);
  _Q4 = vaddq_f32(*(float32x4_t *)v9->i8, *(float32x4_t *)v9->i8);
  v14 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32((float32x2_t)*v9, *(float32x2_t *)_Q4.f32), 0);
  v15 = vmul_lane_f32(v10, *(float32x2_t *)_Q4.f32, 1);
  v16 = vmul_laneq_f32(v11, _Q4, 2);
  v17 = vmul_n_f32(v10, _Q4.f32[0]);
  v18 = vmul_n_f32(v11, _Q4.f32[0]);
  v19 = vmul_n_f32(v12, _Q4.f32[0]);
  v20 = vmul_lane_f32(v11, *(float32x2_t *)_Q4.f32, 1);
  v21 = vmul_lane_f32(v12, *(float32x2_t *)_Q4.f32, 1);
  v22 = vmul_laneq_f32(v12, _Q4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  v26 = vsub_f32(*(float32x2_t *)_Q4.f32, v14);
  LODWORD(v27) = vadd_f32(v17, v22).u32[0];
  LODWORD(v28) = vsub_f32(v18, v21).u32[0];
  v38 = vsub_f32(v17, v22);
  LODWORD(v29) = vsub_f32(v26, v16).u32[0];
  v30 = vadd_f32(v20, v19);
  v35 = vadd_f32(v18, v21);
  v31 = vsub_f32(v20, v19);
  v32 = vsub_f32(v26, v15).f32[0];
  v33 = (float)(1.0 - v15.f32[1]) - v16.f32[1];
  v34 = v9[2];
  v35.i32[0] = v9[3].i32[0];
  v37 = *(_QWORD *)(v36 + 4);
  v38.i32[0] = *(_DWORD *)(v36 + 12);
  if (v32 >= 0.0)
  {
    v56 = v27 - v38.f32[1];
    _NF = v33 < (float)-v29;
    v58 = v32 + (float)(v29 + (float)(v33 + 1.0));
    v59 = 0.5 / sqrtf(v58);
    v60 = v59 * vsub_f32(v30, v31).f32[0];
    v61 = (float)(v35.f32[1] - v28) * v59;
    v62 = v58 * v59;
    v63 = v32 + (float)((float)(1.0 - v33) - v29);
    v64 = vadd_f32(v30, v31).f32[0];
    v65 = 0.5 / sqrtf(v63);
    v52 = (float)(v35.f32[1] + v28) * v65;
    v53 = v65 * v64;
    v66 = v63 * v65;
    v67 = v56 * v65;
    if (_NF)
    {
      v54 = v66;
    }
    else
    {
      v52 = v60;
      v53 = v61;
      v54 = v56 * v59;
    }
    if (_NF)
      v55 = v67;
    else
      v55 = v62;
  }
  else
  {
    v39 = v27 + v38.f32[1];
    v40 = v33 <= v29;
    v41 = (float)(v29 + (float)(1.0 - v33)) - v32;
    v42 = 0.5 / sqrtf(v41);
    v43 = v41 * v42;
    v44 = v42 * vadd_f32(v30, v31).f32[0];
    v45 = (float)(v35.f32[1] - v28) * v42;
    v46 = (float)((float)(v33 + 1.0) - v29) - v32;
    v47 = vsub_f32(v30, v31).f32[0];
    v48 = 0.5 / sqrtf(v46);
    v49 = v46 * v48;
    v50 = (float)(v35.f32[1] + v28) * v48;
    v51 = v48 * v47;
    if (v40)
      v52 = v39 * v42;
    else
      v52 = v49;
    if (v40)
      v53 = v43;
    else
      v53 = v39 * v48;
    if (v40)
      v54 = v44;
    else
      v54 = v50;
    if (v40)
      v55 = v45;
    else
      v55 = v51;
  }
  *(float *)v77 = v52;
  *(float *)&v77[1] = v53;
  *(float *)&v77[2] = v54;
  *(float *)&v77[3] = v55;
  v78 = v34;
  v79 = v35.i32[0];
  v85[0] = NAN;
  v80 = 3;
  v81 = v37;
  v82 = v38.i32[0];
  physx::Gu::GeometryUnion::set((uint64_t)v85, (uint64_t *)&v80);
  v84[0] = NAN;
  *(_QWORD *)&v68 = physx::Gu::GeometryUnion::set((uint64_t)v84, v4).n128_u64[0];
  v76 = 0;
  v75 = 0;
  v83 = 0;
  v73 = 0;
  v74 = 1065353216;
  v70 = physx::Gu::contactBoxMesh(v85, v84, (uint64_t)v77, v2, (uint64_t)&v73, v68, v69, (uint64_t)&v75, (uint64_t)&v80);
  result = 0;
  if (v70)
  {
    v72 = v83;
    LODWORD(result) = processContacts(v8, v6, v83, (uint64_t)&v80);
    if (v72)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t GeomMTDCallback_BoxHeightField(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  float *v5;
  float *v6;
  float32x2_t *v7;
  float32x2_t *v8;
  int32x2_t *v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v26;
  float v27;
  float v28;
  float v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float v33;
  int32x2_t v34;
  float32x2_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x2_t v38;
  float v39;
  BOOL v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  double v68;
  int32x4_t v69;
  _BOOL4 v70;
  uint64_t result;
  unsigned int v72;
  uint64_t v73;
  int v74;
  char v75[20];
  _DWORD v76[4];
  int32x2_t v77;
  __int32 v78;
  int v79;
  uint64_t v80;
  __int32 v81;
  unsigned int v82;
  _DWORD v83[20];
  float v84[20];
  uint64_t v85;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v85 = *MEMORY[0x24BDAC8D0];
  v10 = (float32x2_t)vdup_lane_s32(*v9, 1);
  v11 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)v9->i8, 2);
  v12 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)v9->i8, 3);
  _Q4 = vaddq_f32(*(float32x4_t *)v9->i8, *(float32x4_t *)v9->i8);
  v14 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32((float32x2_t)*v9, *(float32x2_t *)_Q4.f32), 0);
  v15 = vmul_lane_f32(v10, *(float32x2_t *)_Q4.f32, 1);
  v16 = vmul_laneq_f32(v11, _Q4, 2);
  v17 = vmul_n_f32(v10, _Q4.f32[0]);
  v18 = vmul_n_f32(v11, _Q4.f32[0]);
  v19 = vmul_n_f32(v12, _Q4.f32[0]);
  v20 = vmul_lane_f32(v11, *(float32x2_t *)_Q4.f32, 1);
  v21 = vmul_lane_f32(v12, *(float32x2_t *)_Q4.f32, 1);
  v22 = vmul_laneq_f32(v12, _Q4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  v26 = vsub_f32(*(float32x2_t *)_Q4.f32, v14);
  LODWORD(v27) = vadd_f32(v17, v22).u32[0];
  LODWORD(v28) = vsub_f32(v18, v21).u32[0];
  v38 = vsub_f32(v17, v22);
  LODWORD(v29) = vsub_f32(v26, v16).u32[0];
  v30 = vadd_f32(v20, v19);
  v35 = vadd_f32(v18, v21);
  v31 = vsub_f32(v20, v19);
  v32 = vsub_f32(v26, v15).f32[0];
  v33 = (float)(1.0 - v15.f32[1]) - v16.f32[1];
  v34 = v9[2];
  v35.i32[0] = v9[3].i32[0];
  v37 = *(_QWORD *)(v36 + 4);
  v38.i32[0] = *(_DWORD *)(v36 + 12);
  if (v32 >= 0.0)
  {
    v56 = v27 - v38.f32[1];
    _NF = v33 < (float)-v29;
    v58 = v32 + (float)(v29 + (float)(v33 + 1.0));
    v59 = 0.5 / sqrtf(v58);
    v60 = v59 * vsub_f32(v30, v31).f32[0];
    v61 = (float)(v35.f32[1] - v28) * v59;
    v62 = v58 * v59;
    v63 = v32 + (float)((float)(1.0 - v33) - v29);
    v64 = vadd_f32(v30, v31).f32[0];
    v65 = 0.5 / sqrtf(v63);
    v52 = (float)(v35.f32[1] + v28) * v65;
    v53 = v65 * v64;
    v66 = v63 * v65;
    v67 = v56 * v65;
    if (_NF)
    {
      v54 = v66;
    }
    else
    {
      v52 = v60;
      v53 = v61;
      v54 = v56 * v59;
    }
    if (_NF)
      v55 = v67;
    else
      v55 = v62;
  }
  else
  {
    v39 = v27 + v38.f32[1];
    v40 = v33 <= v29;
    v41 = (float)(v29 + (float)(1.0 - v33)) - v32;
    v42 = 0.5 / sqrtf(v41);
    v43 = v41 * v42;
    v44 = v42 * vadd_f32(v30, v31).f32[0];
    v45 = (float)(v35.f32[1] - v28) * v42;
    v46 = (float)((float)(v33 + 1.0) - v29) - v32;
    v47 = vsub_f32(v30, v31).f32[0];
    v48 = 0.5 / sqrtf(v46);
    v49 = v46 * v48;
    v50 = (float)(v35.f32[1] + v28) * v48;
    v51 = v48 * v47;
    if (v40)
      v52 = v39 * v42;
    else
      v52 = v49;
    if (v40)
      v53 = v43;
    else
      v53 = v39 * v48;
    if (v40)
      v54 = v44;
    else
      v54 = v50;
    if (v40)
      v55 = v45;
    else
      v55 = v51;
  }
  *(float *)v76 = v52;
  *(float *)&v76[1] = v53;
  *(float *)&v76[2] = v54;
  *(float *)&v76[3] = v55;
  v77 = v34;
  v78 = v35.i32[0];
  v84[0] = NAN;
  v79 = 3;
  v80 = v37;
  v81 = v38.i32[0];
  physx::Gu::GeometryUnion::set((uint64_t)v84, (uint64_t *)&v79);
  v83[0] = -1;
  *(_QWORD *)&v68 = physx::Gu::GeometryUnion::set((uint64_t)v83, v4).n128_u64[0];
  v82 = 0;
  v73 = 0;
  v74 = 1065353216;
  v70 = physx::Gu::contactBoxHeightfield(v84, (uint64_t)v83, (uint64_t)v76, v2, (float *)&v73, v68, v69, (uint64_t)v75, (uint64_t)&v79);
  result = 0;
  if (v70)
  {
    v72 = v82;
    LODWORD(result) = processContacts(v8, v6, v82, (uint64_t)&v79);
    if (v72)
      return result;
    else
      return 0;
  }
  return result;
}

float GeomMTDCallback_ConvexConvex(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6)
{
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  _BOOL4 v12;
  float32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  int v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v41;
  float32x2_t v42;
  int8x8_t v43;
  float32x4_t v44;
  int32x2_t v45;
  int8x8_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  _BOOL4 v78;
  uint64_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int32x4_t v84;
  float32x4_t v85;
  int v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x4_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int32x2_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  _BOOL4 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _BOOL4 v146;
  uint64_t (**v147)();
  uint64_t (**v148)();
  float result;
  int32x2_t v150;
  float32x4_t v151;
  _OWORD v152[2];
  _OWORD v153[2];
  _BYTE v154[104];
  _BYTE v155[104];
  float32x4_t v156;
  __int128 v157;
  char v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  float32x4_t v169;
  __int128 v170;
  char v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  _QWORD v182[7];
  BOOL v183;
  float32x4_t *v184;
  _QWORD v185[7];
  BOOL v186;
  float32x4_t *v187;
  uint64_t v188;

  v188 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a3 + 32);
  v9 = *(float32x4_t *)(a3 + 4);
  v10 = v9;
  v10.i32[3] = 0;
  v11 = *(float32x4_t *)(a3 + 16);
  v12 = COERCE_FLOAT(*(_QWORD *)(a3 + 12)) == 1.0;
  if (v9.f32[0] != 1.0 || COERCE_FLOAT(HIDWORD(*(_QWORD *)(a3 + 4))) != 1.0)
    v12 = 0;
  v171 = 0;
  v169 = 0u;
  v170 = 0u;
  v178 = v8 + 32;
  v180 = *(_QWORD *)(v8 + 72) + 20 * *(unsigned __int8 *)(v8 + 71);
  v181 = *(_BYTE *)(v8 + 70);
  v14.i64[0] = *(_QWORD *)(v8 + 92);
  v14.i64[1] = *(unsigned int *)(v8 + 100);
  v15 = (int32x4_t)vmulq_f32(v10, v14);
  *(float32x2_t *)v15.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v15, 2), *(float32x2_t *)v15.i8);
  *(float *)v15.i32 = vpmin_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8).f32[0];
  *(float32x2_t *)&v170 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v15.i32);
  *((float *)&v170 + 2) = 0.025 * *(float *)v15.i32;
  if (v12)
  {
    v172 = xmmword_2260E5F10;
    v173 = xmmword_2260E5F20;
    v174 = xmmword_2260E5F40;
    v175 = xmmword_2260E5F10;
    v176 = xmmword_2260E5F20;
    v177 = xmmword_2260E5F40;
  }
  else
  {
    v16 = vrecpeq_f32(v10);
    v17 = 4;
    do
    {
      v16 = vmulq_f32(v16, vrecpsq_f32(v16, v10));
      --v17;
    }
    while (v17);
    *(int32x2_t *)v18.f32 = vdup_lane_s32(*(int32x2_t *)v9.f32, 0);
    v18.i64[1] = v18.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v18, v10)), *(int8x8_t *)v16.f32).u32[0] & 0xFFFFFF) != 0)
    {
      v25 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.f32, 1);
      v26 = (float32x2_t)vdup_laneq_s32((int32x4_t)v11, 2);
      v27 = (float32x2_t)vdup_laneq_s32((int32x4_t)v11, 3);
      _Q17 = vaddq_f32(v11, v11);
      v29 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)_Q17.f32), 0);
      v30 = vmul_lane_f32(v25, *(float32x2_t *)_Q17.f32, 1);
      v31 = vmul_laneq_f32(v26, _Q17, 2);
      v32 = vmul_n_f32(v25, _Q17.f32[0]);
      v33 = vmul_n_f32(v26, _Q17.f32[0]);
      v34 = vmul_n_f32(v27, _Q17.f32[0]);
      v35 = vmul_lane_f32(v26, *(float32x2_t *)_Q17.f32, 1);
      v36 = vmul_lane_f32(v27, *(float32x2_t *)_Q17.f32, 1);
      v37 = vmul_laneq_f32(v27, _Q17, 2);
      __asm { FMOV            V17.2S, #1.0 }
      v41 = vsub_f32(*(float32x2_t *)_Q17.f32, v29);
      v42 = (float32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q17.f32, v30), v31), (int8x8_t)vadd_f32(v32, v37), 4uLL);
      v43 = (int8x8_t)vsub_f32(v32, v37);
      *(float32x2_t *)v44.f32 = v42;
      v44.i64[1] = vsub_f32(v33, v36).u32[0];
      v45 = (int32x2_t)vext_s8(v43, (int8x8_t)vsub_f32(v41, v31), 4uLL);
      v46 = (int8x8_t)vadd_f32(v33, v36);
      *(int8x8_t *)_Q17.f32 = vext_s8((int8x8_t)vdup_lane_s32((int32x2_t)v42, 0), (int8x8_t)v45, 4uLL);
      *(int32x2_t *)v47.f32 = v45;
      v47.i64[1] = vadd_f32(v35, v34).u32[0];
      v41.i32[0] = vsub_f32(v41, v30).u32[0];
      *(int8x8_t *)v48.f32 = vext_s8(v46, (int8x8_t)vsub_f32(v35, v34), 4uLL);
      *(int8x8_t *)v49.f32 = vext_s8((int8x8_t)v42, (int8x8_t)vdup_lane_s32(v45, 1), 4uLL);
      v48.i64[1] = v41.u32[0];
      _Q17.i64[1] = vdup_lane_s32(*(int32x2_t *)v48.f32, 0).u32[0];
      v49.i64[1] = vdup_lane_s32(*(int32x2_t *)v48.f32, 1).u32[0];
      *(int8x8_t *)v50.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v44.u32[2], 0), *(int8x8_t *)&v47.u32[2], 4uLL);
      v50.i64[1] = vdup_lane_s32((int32x2_t)v41.u32[0], 0).u32[0];
      v51 = vmulq_n_f32(_Q17, v9.f32[0]);
      v51.i32[3] = 0;
      v52 = vmulq_lane_f32(v49, *(float32x2_t *)v9.f32, 1);
      v52.i32[3] = 0;
      v53 = vmulq_laneq_f32(v50, v9, 2);
      v53.i32[3] = 0;
      v54 = vmulq_n_f32(v51, v42.f32[0]);
      v54.i32[3] = 0;
      v55 = vmulq_lane_f32(v52, v42, 1);
      v55.i32[3] = 0;
      v56 = vmulq_laneq_f32(v53, v44, 2);
      v56.i32[3] = 0;
      v19 = vaddq_f32(v56, vaddq_f32(v54, v55));
      v57 = vmulq_n_f32(v51, v47.f32[0]);
      v57.i32[3] = 0;
      v58 = vmulq_lane_f32(v52, *(float32x2_t *)v47.f32, 1);
      v58.i32[3] = 0;
      v59 = vmulq_laneq_f32(v53, v47, 2);
      v59.i32[3] = 0;
      v20 = vaddq_f32(v59, vaddq_f32(v57, v58));
      v60 = vmulq_n_f32(v51, v48.f32[0]);
      v60.i32[3] = 0;
      v61 = vmulq_lane_f32(v52, *(float32x2_t *)v48.f32, 1);
      v61.i32[3] = 0;
      v62 = vmulq_laneq_f32(v53, v48, 2);
      v62.i32[3] = 0;
      v21 = vaddq_f32(v62, vaddq_f32(v60, v61));
      v172 = (__int128)v19;
      v173 = (__int128)v20;
      v63 = vmulq_n_f32(_Q17, v16.f32[0]);
      v63.i32[3] = 0;
      v64 = vmulq_lane_f32(v49, *(float32x2_t *)v16.f32, 1);
      v64.i32[3] = 0;
      v65 = vmulq_laneq_f32(v50, v16, 2);
      v65.i32[3] = 0;
      v66 = vmulq_n_f32(v63, v44.f32[0]);
      v66.i32[3] = 0;
      v67 = vmulq_lane_f32(v64, *(float32x2_t *)v44.f32, 1);
      v67.i32[3] = 0;
      v68 = vmulq_laneq_f32(v65, v44, 2);
      v68.i32[3] = 0;
      v22 = vaddq_f32(v68, vaddq_f32(v66, v67));
      v69 = vmulq_n_f32(v63, v47.f32[0]);
      v69.i32[3] = 0;
      v70 = vmulq_lane_f32(v64, *(float32x2_t *)v47.f32, 1);
      v70.i32[3] = 0;
      v71 = vmulq_laneq_f32(v65, v47, 2);
      v71.i32[3] = 0;
      v72 = vmulq_n_f32(v63, v48.f32[0]);
      v72.i32[3] = 0;
      v73 = vmulq_lane_f32(v64, *(float32x2_t *)v48.f32, 1);
      v73.i32[3] = 0;
      v23 = vaddq_f32(v71, vaddq_f32(v69, v70));
      v74 = vmulq_laneq_f32(v65, v48, 2);
      v74.i32[3] = 0;
      v24 = vaddq_f32(v74, vaddq_f32(v72, v73));
    }
    else
    {
      v16.i32[3] = 0;
      v19 = vmulq_f32(v10, (float32x4_t)xmmword_2260E5F10);
      v20 = vmulq_f32(v10, (float32x4_t)xmmword_2260E5F20);
      v21 = vmulq_f32(v10, (float32x4_t)xmmword_2260E5F40);
      v172 = (__int128)v19;
      v173 = (__int128)v20;
      v22 = vmulq_f32(v16, (float32x4_t)xmmword_2260E5F10);
      v23 = vmulq_f32(v16, (float32x4_t)xmmword_2260E5F20);
      v24 = vmulq_f32(v16, (float32x4_t)xmmword_2260E5F40);
    }
    v174 = (__int128)v21;
    v175 = (__int128)v22;
    v176 = (__int128)v23;
    v177 = (__int128)v24;
    v75 = vmulq_f32(v19, (float32x4_t)0);
    v75.i32[3] = 0;
    v76 = vmulq_f32(v20, (float32x4_t)0);
    v76.i32[3] = 0;
    v77 = vmulq_f32(v21, (float32x4_t)0);
    v77.i32[3] = 0;
    v169 = vaddq_f32(v77, vaddq_f32(v76, v75));
  }
  v78 = 0;
  v179 = *(_QWORD *)(v8 + 80);
  v79 = *(_QWORD *)(a5 + 32);
  v80 = *(float32x4_t *)(a5 + 4);
  v81 = v80;
  v81.i32[3] = 0;
  if (v80.f32[0] == 1.0 && v80.f32[1] == 1.0)
    v78 = v80.f32[2] == 1.0;
  v82 = *(float32x4_t *)(a5 + 16);
  v158 = 0;
  v165 = v79 + 32;
  v167 = *(_QWORD *)(v79 + 72) + 20 * *(unsigned __int8 *)(v79 + 71);
  v168 = *(_BYTE *)(v79 + 70);
  v83.i64[0] = *(_QWORD *)(v79 + 92);
  v83.i32[2] = *(_DWORD *)(v79 + 100);
  v156 = 0u;
  v157 = 0u;
  v83.i64[1] = v83.u32[2];
  v84 = (int32x4_t)vmulq_f32(v81, v83);
  *(float32x2_t *)v84.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v84, 2), *(float32x2_t *)v84.i8);
  *(float *)v84.i32 = vpmin_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v84.i8).f32[0];
  *(float32x2_t *)&v157 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v84.i32);
  *((float *)&v157 + 2) = 0.025 * *(float *)v84.i32;
  if (v78)
  {
    v159 = xmmword_2260E5F10;
    v160 = xmmword_2260E5F20;
    v161 = xmmword_2260E5F40;
    v162 = xmmword_2260E5F10;
    v163 = xmmword_2260E5F20;
    v164 = xmmword_2260E5F40;
  }
  else
  {
    v85 = vrecpeq_f32(v81);
    v86 = 4;
    do
    {
      v85 = vmulq_f32(v85, vrecpsq_f32(v85, v81));
      --v86;
    }
    while (v86);
    *(int32x2_t *)v87.f32 = vdup_lane_s32(*(int32x2_t *)v80.f32, 0);
    v87.i64[1] = v87.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v87, v81)), *(int8x8_t *)v80.f32).u32[0] & 0xFFFFFF) != 0)
    {
      v94 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v82.f32, 1);
      v95 = (float32x2_t)vdup_laneq_s32((int32x4_t)v82, 2);
      v96 = (float32x2_t)vdup_laneq_s32((int32x4_t)v82, 3);
      v97 = vaddq_f32(v82, v82);
      v98 = vmul_lane_f32(v94, *(float32x2_t *)v97.f32, 1);
      v99 = vmul_laneq_f32(v95, v97, 2);
      v100 = vmul_n_f32(v94, v97.f32[0]);
      v101 = vmul_n_f32(v95, v97.f32[0]);
      v102 = vmul_n_f32(v96, v97.f32[0]);
      v103 = vmul_lane_f32(v95, *(float32x2_t *)v97.f32, 1);
      v104 = vmul_lane_f32(v96, *(float32x2_t *)v97.f32, 1);
      v105 = vmul_laneq_f32(v96, v97, 2);
      __asm { FMOV            V6.2S, #1.0 }
      v107 = vsub_f32(_D6, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v97.f32), 0));
      *(int8x8_t *)v108.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D6, v98), v99), (int8x8_t)vadd_f32(v100, v105), 4uLL);
      v108.i64[1] = vsub_f32(v101, v104).u32[0];
      *(int8x8_t *)v109.f32 = vext_s8((int8x8_t)vsub_f32(v100, v105), (int8x8_t)vsub_f32(v107, v99), 4uLL);
      *(int8x8_t *)v110.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v108.f32, 0), *(int8x8_t *)v109.f32, 4uLL);
      v109.i64[1] = vadd_f32(v103, v102).u32[0];
      v98.i32[0] = vsub_f32(v107, v98).u32[0];
      v111 = (int32x2_t)vext_s8((int8x8_t)vadd_f32(v101, v104), (int8x8_t)vsub_f32(v103, v102), 4uLL);
      *(int8x8_t *)v112.f32 = vext_s8(*(int8x8_t *)v108.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v109.f32, 1), 4uLL);
      *(int32x2_t *)v113.f32 = v111;
      v113.i64[1] = v98.u32[0];
      v110.i64[1] = vdup_lane_s32(v111, 0).u32[0];
      v112.i64[1] = vdup_lane_s32(v111, 1).u32[0];
      *(int8x8_t *)v114.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v108.u32[2], 0), *(int8x8_t *)&v109.u32[2], 4uLL);
      v114.i64[1] = vdup_lane_s32((int32x2_t)v98.u32[0], 0).u32[0];
      v115 = vmulq_n_f32(v110, v80.f32[0]);
      v115.i32[3] = 0;
      v116 = vmulq_lane_f32(v112, *(float32x2_t *)v80.f32, 1);
      v116.i32[3] = 0;
      v117 = vmulq_laneq_f32(v114, v80, 2);
      v117.i32[3] = 0;
      v118 = vmulq_n_f32(v115, v108.f32[0]);
      v118.i32[3] = 0;
      v119 = vmulq_lane_f32(v116, *(float32x2_t *)v108.f32, 1);
      v119.i32[3] = 0;
      v120 = vmulq_laneq_f32(v117, v108, 2);
      v120.i32[3] = 0;
      v88 = vaddq_f32(v120, vaddq_f32(v118, v119));
      v121 = vmulq_n_f32(v115, v109.f32[0]);
      v121.i32[3] = 0;
      v122 = vmulq_lane_f32(v116, *(float32x2_t *)v109.f32, 1);
      v122.i32[3] = 0;
      v123 = vmulq_laneq_f32(v117, v109, 2);
      v123.i32[3] = 0;
      v89 = vaddq_f32(v123, vaddq_f32(v121, v122));
      v124 = vmulq_n_f32(v115, v113.f32[0]);
      v124.i32[3] = 0;
      v125 = vmulq_lane_f32(v116, *(float32x2_t *)v113.f32, 1);
      v125.i32[3] = 0;
      v126 = vmulq_laneq_f32(v117, v113, 2);
      v126.i32[3] = 0;
      v90 = vaddq_f32(v126, vaddq_f32(v124, v125));
      v159 = (__int128)v88;
      v160 = (__int128)v89;
      v127 = vmulq_n_f32(v110, v85.f32[0]);
      v127.i32[3] = 0;
      v128 = vmulq_lane_f32(v112, *(float32x2_t *)v85.f32, 1);
      v128.i32[3] = 0;
      v129 = vmulq_laneq_f32(v114, v85, 2);
      v129.i32[3] = 0;
      v130 = vmulq_n_f32(v127, v108.f32[0]);
      v130.i32[3] = 0;
      v131 = vmulq_lane_f32(v128, *(float32x2_t *)v108.f32, 1);
      v131.i32[3] = 0;
      v132 = vmulq_laneq_f32(v129, v108, 2);
      v132.i32[3] = 0;
      v91 = vaddq_f32(v132, vaddq_f32(v130, v131));
      v133 = vmulq_n_f32(v127, v109.f32[0]);
      v133.i32[3] = 0;
      v134 = vmulq_lane_f32(v128, *(float32x2_t *)v109.f32, 1);
      v134.i32[3] = 0;
      v135 = vmulq_laneq_f32(v129, v109, 2);
      v135.i32[3] = 0;
      v136 = vmulq_n_f32(v127, v113.f32[0]);
      v136.i32[3] = 0;
      v137 = vmulq_lane_f32(v128, *(float32x2_t *)v113.f32, 1);
      v137.i32[3] = 0;
      v92 = vaddq_f32(v135, vaddq_f32(v133, v134));
      v138 = vmulq_laneq_f32(v129, v113, 2);
      v138.i32[3] = 0;
      v93 = vaddq_f32(v138, vaddq_f32(v136, v137));
    }
    else
    {
      v85.i32[3] = 0;
      v88 = vmulq_f32(v81, (float32x4_t)xmmword_2260E5F10);
      v89 = vmulq_f32(v81, (float32x4_t)xmmword_2260E5F20);
      v90 = vmulq_f32(v81, (float32x4_t)xmmword_2260E5F40);
      v159 = (__int128)v88;
      v160 = (__int128)v89;
      v91 = vmulq_f32(v85, (float32x4_t)xmmword_2260E5F10);
      v92 = vmulq_f32(v85, (float32x4_t)xmmword_2260E5F20);
      v93 = vmulq_f32(v85, (float32x4_t)xmmword_2260E5F40);
    }
    v161 = (__int128)v90;
    v162 = (__int128)v91;
    v163 = (__int128)v92;
    v164 = (__int128)v93;
    v139 = vmulq_f32(v88, (float32x4_t)0);
    v139.i32[3] = 0;
    v140 = vmulq_f32(v89, (float32x4_t)0);
    v140.i32[3] = 0;
    v141 = vmulq_f32(v90, (float32x4_t)0);
    v141.i32[3] = 0;
    v156 = vaddq_f32(v141, vaddq_f32(v140, v139));
  }
  v142 = 0;
  v166 = *(_QWORD *)(v79 + 80);
  *(_QWORD *)&v143 = *(_QWORD *)(a4 + 16);
  *((_QWORD *)&v143 + 1) = *(unsigned int *)(a4 + 24);
  v144 = *a6;
  *(_QWORD *)&v145 = *((_QWORD *)a6 + 2);
  *((_QWORD *)&v145 + 1) = *((unsigned int *)a6 + 6);
  v153[0] = *(_OWORD *)a4;
  v153[1] = v143;
  v152[0] = v144;
  v152[1] = v145;
  v151 = 0uLL;
  v150 = 0;
  if (*(float *)(a3 + 4) == 1.0 && *(float *)(a3 + 8) == 1.0)
    v142 = *(float *)(a3 + 12) == 1.0;
  v146 = 0;
  if (v80.f32[0] == 1.0 && *(float *)(a5 + 8) == 1.0)
    v146 = *(float *)(a5 + 12) == 1.0;
  physx::Gu::getPCMConvexData(&v169, v142, (uint64_t)v155);
  physx::Gu::getPCMConvexData(&v156, v146, (uint64_t)v154);
  v147 = &off_24ED91090;
  v185[5] = &v172;
  v185[6] = &v175;
  v186 = v142;
  if (v142)
    v148 = &off_24ED91040;
  else
    v148 = &off_24ED91090;
  v185[4] = v153;
  v185[0] = v148;
  v187 = &v169;
  v182[5] = &v159;
  v182[6] = &v162;
  if (v146)
    v147 = &off_24ED91040;
  v183 = v146;
  v182[4] = v152;
  v182[0] = v147;
  v184 = &v156;
  if (physx::Gu::computeMTD((uint64_t)v155, (uint64_t)v154, (uint64_t)v185, (uint64_t)v182, &v150, &v151))
  {
    *a2 = fmaxf(*(float *)v150.i32, 0.0);
    result = v151.f32[2];
    *(_QWORD *)a1 = v151.i64[0];
    *(float *)(a1 + 8) = result;
  }
  return result;
}

uint64_t GeomMTDCallback_ConvexMesh(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float *v8;
  float32x2_t *v9;
  float32x2_t *v10;
  uint64_t *v11;
  _BOOL4 v12;
  uint64_t result;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  _BYTE v19[4096];
  unsigned int v20;
  float v21[20];
  _DWORD v22[20];
  uint64_t v23;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v23 = *MEMORY[0x24BDAC8D0];
  v22[0] = -1;
  physx::Gu::GeometryUnion::set((uint64_t)v22, v11);
  v21[0] = NAN;
  physx::Gu::GeometryUnion::set((uint64_t)v21, v4);
  v18 = 0;
  v17 = 0;
  v20 = 0;
  v15 = 0;
  v16 = 1065353216;
  v12 = physx::Gu::contactConvexMesh((uint64_t)v22, v21, v6, v2, (uint64_t)&v15, (uint64_t)&v17, (uint64_t)v19);
  result = 0;
  if (v12)
  {
    v14 = v20;
    LODWORD(result) = processContacts(v10, v8, v20, (uint64_t)v19);
    if (v14)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t GeomMTDCallback_ConvexHeightField(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float *v8;
  float32x2_t *v9;
  float32x2_t *v10;
  uint64_t *v11;
  _BOOL4 v12;
  uint64_t result;
  unsigned int v14;
  uint64_t v15;
  int v16;
  _BYTE v17[16];
  _BYTE v18[4096];
  unsigned int v19;
  _DWORD v20[20];
  _DWORD v21[20];
  uint64_t v22;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v22 = *MEMORY[0x24BDAC8D0];
  v21[0] = -1;
  physx::Gu::GeometryUnion::set((uint64_t)v21, v11);
  v20[0] = -1;
  physx::Gu::GeometryUnion::set((uint64_t)v20, v4);
  v19 = 0;
  v15 = 0;
  v16 = 1065353216;
  v12 = physx::Gu::contactConvexHeightfield((uint64_t)v21, (uint64_t)v20, v6, v2, (const float *)&v15, (uint64_t)v17, (uint64_t)v18);
  result = 0;
  if (v12)
  {
    v14 = v19;
    LODWORD(result) = processContacts(v10, v8, v19, (uint64_t)v18);
    if (v14)
      return result;
    else
      return 0;
  }
  return result;
}

void sweepBox_HeightFieldGeom_Precise(physx::PxGeometry const&,physx::PxTransform const&,physx::PxBoxGeometry const&,physx::PxTransform const&,physx::Gu::Box const&,physx::PxVec3 const&,float,physx::PxSweepHit &,physx::PxFlags<physx::PxHitFlag::Enum,unsigned short>,float)::LocalReport::~LocalReport()
{
  JUMPOUT(0x2276933B8);
}

uint64_t sweepBox_HeightFieldGeom_Precise(physx::PxGeometry const&,physx::PxTransform const&,physx::PxBoxGeometry const&,physx::PxTransform const&,physx::Gu::Box const&,physx::PxVec3 const&,float,physx::PxSweepHit &,physx::PxFlags<physx::PxHitFlag::Enum,unsigned short>,float)::LocalReport::onEvent(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v5;
  float32x2_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  double v10;
  double v11;
  double v12;
  __n128 v13;
  double v14;
  double v15;
  double v16;
  __n128 v17;
  uint64_t v18;
  __int128 v19;
  __int16 v21;
  __int128 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  _BYTE v26[20];
  int v27;
  _BYTE v28[36];

  if (a2)
  {
    v5 = a1 + 36;
    v6 = (float32x2_t *)(a1 + 96);
    v7 = a2;
    do
    {
      v9 = *a3++;
      v8 = v9;
      physx::Gu::HeightFieldUtil::getTriangle(*(_QWORD *)(a1 + 8), *(float **)(a1 + 16), (uint64_t)v28, 0, 0, v9, 1, 1);
      v22 = 0uLL;
      v23 = -1;
      v24 = 0;
      *(_QWORD *)v26 = 0;
      *(_QWORD *)&v26[8] = 0;
      v25 = 0;
      *(_DWORD *)&v26[16] = 2139095039;
      LODWORD(v10) = *(_DWORD *)(a1 + 108);
      v21 = *(_WORD *)(a1 + 112);
      if (sweepBoxVsTriangles(1, (uint64_t)v28, v5, v6, (uint64_t)&v22, &v21, *(_BYTE *)(a1 + 114), 0, v10, v11, v12, v13, v14, v15, v16, v17))
      {
        v18 = *(_QWORD *)(a1 + 24);
        if (*(float *)&v26[16] < *(float *)(v18 + 48))
        {
          v19 = v22;
          *(_DWORD *)(v18 + 16) = v23;
          *(_OWORD *)v18 = v19;
          *(_WORD *)(v18 + 20) = v24;
          *(_QWORD *)(v18 + 24) = v25;
          *(_DWORD *)(v18 + 32) = *(_DWORD *)v26;
          *(_OWORD *)(v18 + 36) = *(_OWORD *)&v26[4];
          *(_DWORD *)(v18 + 52) = v27;
          *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) = v8;
          *(_BYTE *)(a1 + 32) = 1;
        }
      }
      --v7;
    }
    while (v7);
  }
  return 1;
}

uint64_t physx::Gu::TriangleMeshData::allocateTriangles(physx::Gu::TriangleMeshData *this, unsigned int a2, char a3, int a4)
{
  unsigned int v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v7 = 4;
  if (!*((_WORD *)this + 9) && (a3 & 1) == 0)
  {
    *((_BYTE *)this + 12) |= 2u;
    v7 = 2;
  }
  if (a2)
  {
    v8 = 3 * v7 * (unint64_t)a2;
    result = (*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 228);
    *((_QWORD *)this + 14) = result;
    if (a4)
    {
      v10 = (*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 230);
      v11 = *((_QWORD *)this + 14);
LABEL_8:
      *((_QWORD *)this + 10) = v10;
      result = v11;
    }
  }
  else
  {
    v11 = 0;
    v10 = 0;
    result = 0;
    *((_QWORD *)this + 14) = 0;
    if (a4)
      goto LABEL_8;
  }
  *((_DWORD *)this + 26) = a2;
  return result;
}

void physx::Gu::RTreeTriangleData::~RTreeTriangleData(physx::Gu::RTreeTriangleData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED90F00;
  if ((*((_BYTE *)this + 228) & 1) == 0)
  {
    v2 = *((_QWORD *)this + 29);
    if (v2)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2 - *(_QWORD *)(v2 - 8));
      *((_QWORD *)this + 29) = 0;
    }
  }
  physx::Gu::TriangleMeshData::~TriangleMeshData(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED90F00;
  if ((*((_BYTE *)this + 228) & 1) == 0)
  {
    v2 = *((_QWORD *)this + 29);
    if (v2)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2 - *(_QWORD *)(v2 - 8));
      *((_QWORD *)this + 29) = 0;
    }
  }
  physx::Gu::TriangleMeshData::~TriangleMeshData(this);
  (*(void (**)(uint64_t, physx::Gu::RTreeTriangleData *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

void physx::Gu::TriangleMeshData::~TriangleMeshData(physx::Gu::TriangleMeshData *this)
{
  uint64_t v2;

  physx::Gu::TriangleMeshData::~TriangleMeshData(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Gu::TriangleMeshData *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                               + 24)
                                                                   + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED90F68;
  if (*((_QWORD *)this + 14))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 16))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 16) = 0;
  }
  if (*((_QWORD *)this + 15))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 15) = 0;
  }
  v2 = *((_QWORD *)this + 17);
  if (v2)
  {
    physx::Gu::BV32Tree::release(*((_QWORD *)this + 17));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
    *((_QWORD *)this + 17) = 0;
  }
  physx::Gu::MeshDataBase::~MeshDataBase(this);
}

void physx::Gu::MeshDataBase::~MeshDataBase(physx::Gu::MeshDataBase *this)
{
  uint64_t v2;

  physx::Gu::MeshDataBase::~MeshDataBase(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Gu::MeshDataBase *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

{
  *(_QWORD *)this = off_24ED90F88;
  if (*((_QWORD *)this + 3))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 8))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 8) = 0;
  }
  if (*((_QWORD *)this + 9))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 9) = 0;
  }
  if (*((_QWORD *)this + 10))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 11))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 11) = 0;
  }
  if (*((_QWORD *)this + 12))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 12) = 0;
  }
}

void physx::Gu::BV4TriangleData::~BV4TriangleData(physx::Gu::BV4TriangleData *this)
{
  uint64_t v2;

  physx::Gu::BV4TriangleData::~BV4TriangleData(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Gu::BV4TriangleData *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

{
  *(_QWORD *)this = off_24ED90FA8;
  if (!*((_BYTE *)this + 260) && *((_QWORD *)this + 28))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 24) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *(_QWORD *)((char *)this + 254) = 0;
  if (*((_QWORD *)this + 20))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 20) = 0;
  physx::Gu::TriangleMeshData::~TriangleMeshData(this);
}

uint64_t processContacts(float32x2_t *a1, float *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  float32x2_t v6;
  float v7;
  float v8;
  float32x2_t v9;
  __int32 *v10;
  float32x2_t v11;
  float v12;
  float v13;
  float32x2_t v14;
  float32x2_t v15;
  int8x8_t v16;
  float v17;
  int8x8_t v18;
  float32x2_t v19;
  float v20;
  float v21;
  BOOL v23;
  float v24;
  float32x2_t v25;
  float v26;

  if (a3)
  {
    v4 = a3;
    v5 = a4 + 8;
    v6 = 0;
    v7 = 0.0;
    v8 = 0.0;
    v9 = 0;
    do
    {
      v14.i32[0] = *(_DWORD *)(v5 - 8);
      v10 = (__int32 *)(v5 - 4);
      v12 = *(float *)v5;
      v11.i32[0] = *(_DWORD *)(v5 + 4);
      v5 += 64;
      v13 = v11.f32[0] * v12;
      v14.i32[1] = v11.i32[0];
      if (v7 >= v13)
        v7 = v13;
      v11.i32[1] = *v10;
      v15 = vmul_f32(v14, v11);
      v9 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v15, v9), (int8x8_t)v9, (int8x8_t)v15);
      v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v6, v15), (int8x8_t)v6, (int8x8_t)v15);
      if (v8 <= v13)
        v8 = v13;
      --v4;
    }
    while (v4);
    v16 = (int8x8_t)vceqz_f32(v9);
    if (v7 == 0.0)
      v17 = v8;
    else
      v17 = v7;
    v18 = (int8x8_t)vceqz_f32(v6);
    if (v8 != 0.0)
      v7 = v8;
    v19 = vmul_f32(vadd_f32((float32x2_t)vbsl_s8(v18, (int8x8_t)v9, (int8x8_t)v6), (float32x2_t)vbsl_s8(v16, (int8x8_t)v6, (int8x8_t)v9)), (float32x2_t)0x3F0000003F000000);
    v20 = (float)(v7 + v17) * 0.5;
    v21 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v19, v19).i32[1]), v19.f32[0], v19.f32[0]) + (float)(v20 * v20);
    if (v21 < 1.0e-10)
      return 0;
    v23 = v21 <= 0.0;
    v24 = sqrtf(v21);
    if (v23)
    {
      v25 = 0;
      v26 = 0.0;
    }
    else
    {
      v25 = vmul_n_f32(v19, 1.0 / v24);
      v26 = v20 * (float)(1.0 / v24);
    }
    *a1 = vneg_f32(v25);
    a1[1].f32[0] = -v26;
    *a2 = v24;
  }
  return 1;
}

void physx::Gu::SupportLocalImpl<physx::Gu::ConvexHullNoScaleV>::~SupportLocalImpl()
{
  JUMPOUT(0x2276933B8);
}

__n128 physx::Gu::SupportLocalImpl<physx::Gu::ConvexHullNoScaleV>::doSupport(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 64);
  return *(__n128 *)(*(_QWORD *)(v2 + 160) + 12 * physx::Gu::ConvexHullV::supportVertexIndex(v2, a2));
}

uint64_t physx::Gu::SupportLocalImpl<physx::Gu::ConvexHullNoScaleV>::doSupport(uint64_t result, float32x4_t *a2, float32x2_t *a3, float32x2_t *a4)
{
  uint64_t v7;
  unsigned int v8;
  float32x4_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x2_t v15;
  float32x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  unint64_t v19;
  unint64_t v20;
  float32x2_t v22;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;

  v7 = *(_QWORD *)(result + 64);
  if (*(_QWORD *)(v7 + 152))
  {
    v8 = physx::Gu::ConvexHullV::hillClimbing(*(_QWORD *)(result + 64), a2);
    v9 = vnegq_f32(*a2);
    v9.i32[3] = 0;
    v30 = v9;
    result = physx::Gu::ConvexHullV::hillClimbing(v7, &v30);
    v10 = *(_QWORD *)(v7 + 160);
    v11 = *(float32x4_t *)(v10 + 12 * v8);
    v11.i32[3] = 0;
    v12 = *(float32x4_t *)(v10 + 12 * result);
    v12.i32[3] = 0;
    v13 = vmulq_f32(*a2, v12);
    v13.i64[0] = vpaddq_f32(v13, v13).u64[0];
    *a3 = vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32);
    v14 = vmulq_f32(v11, *a2);
    v14.i64[0] = vpaddq_f32(v14, v14).u64[0];
    v15 = vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32);
  }
  else
  {
    v16 = *(float32x4_t **)(v7 + 160);
    v17 = *v16;
    v17.i32[3] = 0;
    v18 = vmulq_f32(v17, *a2);
    v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
    v15 = vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32);
    v19 = *(unsigned __int8 *)(v7 + 168);
    if (v19 < 2)
    {
      v22 = v15;
    }
    else
    {
      v20 = v19 - 1;
      _X9 = (float32x4_t *)((char *)v16 + 140);
      v22 = v15;
      do
      {
        __asm { PRFM            #0, [X9] }
        v28 = _X9[-8];
        v28.i32[3] = 0;
        v29 = vmulq_f32(*a2, v28);
        v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
        *(float32x2_t *)v29.f32 = vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32);
        v15 = vmax_f32(*(float32x2_t *)v29.f32, v15);
        v22 = vmin_f32(*(float32x2_t *)v29.f32, v22);
        _X9 = (float32x4_t *)((char *)_X9 + 12);
        --v20;
      }
      while (v20);
    }
    *a3 = v22;
  }
  *a4 = v15;
  return result;
}

__n128 physx::Gu::SupportLocalImpl<physx::Gu::ConvexHullNoScaleV>::populateVerts(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, __n128 *a5)
{
  uint64_t v5;
  unsigned int v6;
  __n128 result;

  if (a3)
  {
    v5 = a3;
    do
    {
      v6 = *a2++;
      result = *(__n128 *)(a4 + 12 * v6);
      result.n128_u32[3] = 0;
      *a5++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t physx::Gu::ConvexHullV::supportVertexIndex(uint64_t a1, float32x4_t *a2)
{
  uint64_t result;
  unint64_t v4;
  float v5;
  float v6;
  float *v7;
  float v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  uint64_t i;
  float v14;
  float v15;
  float v16;

  if (*(_QWORD *)(a1 + 152))
    return physx::Gu::ConvexHullV::hillClimbing(a1, a2);
  v4 = *(unsigned __int8 *)(a1 + 168);
  if (v4 < 2)
    return 0;
  LODWORD(result) = 0;
  v5 = a2->f32[1];
  v6 = a2->f32[2];
  v7 = *(float **)(a1 + 160);
  v9 = v7[1];
  v8 = v7[2];
  v11 = *v7;
  v10 = v7 + 5;
  v12 = (float)((float)(v5 * v9) + (float)(v11 * a2->f32[0])) + (float)(v8 * v6);
  for (i = 1; i != v4; ++i)
  {
    v14 = (float)(v5 * *(v10 - 1)) + (float)(*(v10 - 2) * a2->f32[0]);
    v15 = *v10;
    v10 += 3;
    v16 = v14 + (float)(v15 * v6);
    if (v16 <= v12)
    {
      result = result;
    }
    else
    {
      v12 = v16;
      result = i;
    }
  }
  return result;
}

uint64_t physx::Gu::ConvexHullV::hillClimbing(uint64_t a1, float32x4_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  float32x4_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  float v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  unsigned int v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x2_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int32 v33;
  _OWORD v34[2];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 152);
  v3 = v2[3];
  v4 = v2[4];
  memset(v34, 0, sizeof(v34));
  v5 = *a2;
  v6 = a2->i64[1];
  v32 = a2->i64[0];
  v33 = v5.i32[2];
  v8 = v6 & 0x7FFFFFFF;
  if ((v5.i32[1] & 0x7FFFFFFFu) > (v5.i32[0] & 0x7FFFFFFFu) && (v5.i32[1] & 0x7FFFFFFFu) > v8)
  {
    v12 = 0;
    v13 = 1;
    v10 = 2;
  }
  else
  {
    v10 = 1;
    v11 = v8 > (v5.i32[0] & 0x7FFFFFFFu);
    v12 = 1;
    if (v11)
      v13 = 2;
    else
      v13 = 0;
    if (v11)
      v10 = 0;
    if (!v11)
      v12 = 2;
  }
  v14 = 1.0 / fabsf(*((float *)&v32 + v13));
  HIDWORD(v15) = v13;
  LODWORD(v15) = *((_DWORD *)&v32 + v13);
  v7 = *(unsigned __int16 *)v2;
  v16 = *(unsigned __int8 *)(v2[1]
                           + (float)((float)((float)((float)(v7 - 1) * 0.5)
                                                         * (float)((float)(v14 * *((float *)&v32 + v12)) + 1.0))
                                                 + 0.5)
                           + ((float)((float)((float)((float)(v7 - 1) * 0.5)
                                                          * (float)((float)(*((float *)&v32 + v10) * v14) + 1.0))
                                                  + 0.5)
                            + (v15 >> 31) * v7)
                           * v7);
  v17 = *(_QWORD *)(a1 + 160);
  v18 = *(float32x4_t *)(v17 + 12 * v16);
  v18.i32[3] = 0;
  v19 = vmulq_f32(v5, v18);
  v19.i64[0] = vpaddq_f32(v19, v19).u64[0];
  v20 = vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32);
  do
  {
    result = v16;
    v22 = 4 * v16;
    v23 = *(unsigned __int16 *)(v3 + v22);
    if (!*(_WORD *)(v3 + v22))
      break;
    v24 = (unsigned __int8 *)(v4 + *(unsigned __int16 *)(v3 + 4 * result + 2));
    v16 = result;
    do
    {
      v26 = *v24++;
      v25 = v26;
      v27 = *(float32x4_t *)(v17 + 12 * v26);
      v27.i32[3] = 0;
      v28 = vmulq_f32(v5, v27);
      v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
      v29 = vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32);
      if ((vcgt_f32(v29, v20).u8[0] & 1) != 0)
      {
        v30 = 1 << (v25 & 0x1F);
        v31 = *((unsigned int *)v34 + (v25 >> 5));
        if ((v31 & v30) == 0)
        {
          *((_DWORD *)v34 + (v25 >> 5)) = v31 | v30;
          v16 = v25;
          v20 = v29;
        }
      }
      --v23;
    }
    while (v23);
  }
  while (v16 != result);
  return result;
}

void physx::Gu::SupportLocalImpl<physx::Gu::ConvexHullV>::~SupportLocalImpl()
{
  JUMPOUT(0x2276933B8);
}

double physx::Gu::SupportLocalImpl<physx::Gu::ConvexHullV>::doSupport(uint64_t a1, float32x4_t *a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  double result;
  float32x4_t v11;

  v2 = *(float32x4_t **)(a1 + 64);
  v3 = vmulq_f32(*a2, v2[3]);
  v3.i64[0] = vpaddq_f32(v3, v3).u64[0];
  v4 = vmulq_f32(*a2, v2[4]);
  v4.i64[0] = vpaddq_f32(v4, v4).u64[0];
  v5 = vmulq_f32(*a2, v2[5]);
  v5.i64[0] = vpaddq_f32(v5, v5).u64[0];
  *(int8x8_t *)v3.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)v3.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)v4.f32), 4uLL);
  v3.i64[1] = vpadd_f32(*(float32x2_t *)v5.f32, *(float32x2_t *)v5.f32).u32[0];
  v11 = v3;
  v6 = *(float32x4_t *)(v2[10].i64[0]
                      + 12 * physx::Gu::ConvexHullV::supportVertexIndex((uint64_t)v2, &v11));
  v7 = vmulq_n_f32(v2[3], v6.f32[0]);
  v7.i32[3] = 0;
  v8 = vmulq_lane_f32(v2[4], *(float32x2_t *)v6.f32, 1);
  v8.i32[3] = 0;
  v9 = vmulq_laneq_f32(v2[5], v6, 2);
  v9.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(vaddq_f32(v7, v8), v9).u64[0];
  return result;
}

uint64_t physx::Gu::SupportLocalImpl<physx::Gu::ConvexHullV>::doSupport(uint64_t result, float32x4_t *a2, float32x2_t *a3, float32x2_t *a4, double a5, double a6, double a7, double a8, double a9)
{
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v14;
  float32x4_t v15;
  float v16;
  unsigned int v19;
  float32x4_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x2_t v36;
  uint64_t v37;
  unint64_t v43;
  unint64_t v44;
  float *v45;
  float v46;
  float v47;
  float v48;
  float32x4_t v49;
  float32x4_t v50;

  v11 = *(float32x4_t **)(result + 64);
  v12 = vmulq_f32(*a2, v11[3]);
  v12.i64[0] = vpaddq_f32(v12, v12).u64[0];
  _D1 = (int32x2_t)vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
  v14 = vmulq_f32(*a2, v11[4]);
  v14.i64[0] = vpaddq_f32(v14, v14).u64[0];
  v15 = vmulq_f32(*a2, v11[5]);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  LODWORD(v16) = vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32).u32[0];
  *(int8x8_t *)_Q0.f32 = vext_s8((int8x8_t)_D1, (int8x8_t)vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32), 4uLL);
  _Q0.i64[1] = LODWORD(v16);
  v50 = _Q0;
  if (v11[9].i64[1])
  {
    v19 = physx::Gu::ConvexHullV::hillClimbing((uint64_t)v11, &v50);
    v20 = vnegq_f32(v50);
    v20.i32[3] = 0;
    v49 = v20;
    result = physx::Gu::ConvexHullV::hillClimbing((uint64_t)v11, &v49);
    v21 = v11[10].i64[0];
    v22 = *(float32x4_t *)(v21 + 12 * v19);
    v23 = v11[3];
    v24 = v11[4];
    v25 = vmulq_n_f32(v23, v22.f32[0]);
    v25.i32[3] = 0;
    v26 = vmulq_lane_f32(v24, *(float32x2_t *)v22.f32, 1);
    v26.i32[3] = 0;
    v27 = v11[5];
    v28 = vmulq_laneq_f32(v27, v22, 2);
    v28.i32[3] = 0;
    v29 = vaddq_f32(v25, v26);
    v30 = *(float32x4_t *)(v21 + 12 * result);
    v31 = vmulq_n_f32(v23, v30.f32[0]);
    v31.i32[3] = 0;
    v32 = vmulq_lane_f32(v24, *(float32x2_t *)v30.f32, 1);
    v32.i32[3] = 0;
    v33 = vmulq_laneq_f32(v27, v30, 2);
    v33.i32[3] = 0;
    v34 = vmulq_f32(*a2, vaddq_f32(v33, vaddq_f32(v31, v32)));
    v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
    *a3 = vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32);
    v35 = vmulq_f32(vaddq_f32(v29, v28), *a2);
    v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
    v36 = vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32);
  }
  else
  {
    v37 = v11[10].i64[0];
    _S2 = *(_DWORD *)(v37 + 8);
    __asm { FMLA            S1, S2, V0.S[2] }
    v43 = v11[10].u8[8];
    if (v43 < 2)
    {
      LODWORD(a9) = _D1.i32[0];
    }
    else
    {
      v44 = v43 - 1;
      v45 = (float *)(v37 + 20);
      LODWORD(a9) = _D1.i32[0];
      do
      {
        v46 = (float)(_Q0.f32[1] * *(v45 - 1)) + (float)(*(v45 - 2) * _Q0.f32[0]);
        v47 = *v45;
        v45 += 3;
        v48 = v46 + (float)(v47 * v16);
        if (v48 > *(float *)_D1.i32)
          *(float *)_D1.i32 = v48;
        if (v48 < *(float *)&a9)
          *(float *)&a9 = v48;
        --v44;
      }
      while (v44);
    }
    *a3 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
    v36 = (float32x2_t)vdup_lane_s32(_D1, 0);
  }
  *a4 = v36;
  return result;
}

float32x4_t physx::Gu::SupportLocalImpl<physx::Gu::ConvexHullV>::populateVerts(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, float32x4_t *a5)
{
  float32x4_t *v5;
  uint64_t v6;
  unsigned int v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t result;

  if (a3)
  {
    v5 = *(float32x4_t **)(a1 + 64);
    v6 = a3;
    do
    {
      v7 = *a2++;
      v8 = *(float32x4_t *)(a4 + 12 * v7);
      v9 = vmulq_n_f32(v5[3], v8.f32[0]);
      v9.i32[3] = 0;
      v10 = vmulq_lane_f32(v5[4], *(float32x2_t *)v8.f32, 1);
      v10.i32[3] = 0;
      v11 = vmulq_laneq_f32(v5[5], v8, 2);
      v11.i32[3] = 0;
      result = vaddq_f32(vaddq_f32(v9, v10), v11);
      *a5++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

BOOL PxcTestAxis(float *a1, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  _BOOL8 result;
  float v15;
  float v16;

  v4 = a1[1];
  v5 = a1[2];
  v6 = (float)((float)(a2[10] * v4) + (float)(a2[9] * *a1)) + (float)(a2[11] * v5);
  v7 = (float)((float)(a2[13] * fabsf((float)((float)(v4 * a2[4]) + (float)(a2[3] * *a1)) + (float)(a2[5] * v5)))
             + (float)(fabsf((float)((float)(v4 * a2[1]) + (float)(*a2 * *a1)) + (float)(a2[2] * v5)) * a2[12]))
     + (float)(fabsf((float)((float)(v4 * a2[7]) + (float)(a2[6] * *a1)) + (float)(a2[8] * v5)) * a2[14]);
  v8 = v6 - v7;
  v9 = v6 + v7;
  v10 = (float)((float)(v4 * a3[10]) + (float)(a3[9] * *a1)) + (float)(a3[11] * v5);
  v11 = (float)((float)(a3[13] * fabsf((float)((float)(v4 * a3[4]) + (float)(a3[3] * *a1)) + (float)(a3[5] * v5)))
              + (float)(fabsf((float)((float)(v4 * a3[1]) + (float)(*a3 * *a1)) + (float)(a3[2] * v5)) * a3[12]))
      + (float)(fabsf((float)((float)(v4 * a3[7]) + (float)(a3[6] * *a1)) + (float)(a3[8] * v5)) * a3[14]);
  v12 = v10 - v11;
  v13 = v10 + v11;
  result = v13 >= v8 && v9 >= v12;
  if (result)
  {
    v15 = v9 - v12;
    v16 = v13 - v8;
    if (v15 >= v16)
      v15 = v16;
    *a4 = v15;
  }
  return result;
}

void physx::Gu::SupportLocalImpl<physx::Gu::BoxV>::~SupportLocalImpl()
{
  JUMPOUT(0x2276933B8);
}

double physx::Gu::SupportLocalImpl<physx::Gu::BoxV>::doSupport(uint64_t a1, float32x4_t *a2)
{
  float32x4_t v2;
  int8x16_t v3;
  double result;

  v2 = *(float32x4_t *)(*(_QWORD *)(a1 + 64) + 48);
  v3 = (int8x16_t)vnegq_f32(v2);
  v3.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcgtzq_f32(*a2), (int8x16_t)v2, v3).u64[0];
  return result;
}

float32x2_t physx::Gu::SupportLocalImpl<physx::Gu::BoxV>::doSupport(uint64_t a1, float32x4_t *a2, float32x2_t *a3, _QWORD *a4)
{
  float32x4_t v4;
  int8x16_t v5;
  float32x4_t v6;
  float32x2_t result;

  v4 = *(float32x4_t *)(*(_QWORD *)(a1 + 64) + 48);
  v5 = (int8x16_t)vnegq_f32(v4);
  v5.i32[3] = 0;
  v6 = vmulq_f32(*a2, (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(*a2), (int8x16_t)v4, v5));
  v6.i64[0] = vpaddq_f32(v6, v6).u64[0];
  *(float32x2_t *)v6.f32 = vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32);
  *a4 = v6.i64[0];
  result = vneg_f32(*(float32x2_t *)v6.f32);
  *a3 = result;
  return result;
}

__n128 physx::Gu::SupportLocalImpl<physx::Gu::BoxV>::populateVerts(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, __n128 *a5)
{
  uint64_t v5;
  unsigned int v6;
  __n128 result;

  if (a3)
  {
    v5 = a3;
    do
    {
      v6 = *a2++;
      result = *(__n128 *)(a4 + 12 * v6);
      result.n128_u32[3] = 0;
      *a5++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void *result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 32);
  v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if ((_DWORD)v10 + 8 * v9)
    v11 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v11 = 0;
  v12 = &v11[4 * v3];
  v13 = &v11[v10];
  result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15);
      v17 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      LODWORD(v19) = (v3 - 1) & ((v19 >> 31) ^ v19);
      *(_DWORD *)&v12[4 * v15] = *(_DWORD *)&v11[4 * v19];
      *(_DWORD *)&v11[4 * v19] = v15;
      *(_QWORD *)&v13[8 * v15++] = v16;
    }
    while (v15 < *(unsigned int *)(a1 + 52));
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1)
    *(_DWORD *)(a1 + 44) = v8;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, _QWORD *a2, _BYTE *a3, int8x8_t a4)
{
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int32x2_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int32x2_t v18;
  int32x2_t v19;
  uint64_t result;

  v6 = a1[4].u32[1];
  if (!v6)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v7 = ~(*a2 << 32) + *a2;
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = (v6 - 1) & ((v9 >> 31) ^ v9);
  v11 = *(unsigned int *)(*(_QWORD *)&a1[3] + 4 * v10);
  if ((_DWORD)v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6)
        v13 = 2 * v6;
      else
        v13 = 16;
      if (v6 < v13)
      {
        physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v13, a4);
        v6 = a1[4].u32[1];
      }
      v14 = ~(*a2 << 32) + *a2;
      v15 = 9
          * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v10 = (v6 - 1) & ((v16 >> 31) ^ v16);
    }
    v17 = a1[5].u32[1];
    a1[5].i32[1] = v17 + 1;
    v18 = a1[3];
    v19 = a1[1];
    *(_DWORD *)(*(_QWORD *)&a1[2] + 4 * v17) = *(_DWORD *)(*(_QWORD *)&v18 + 4 * v10);
    *(_DWORD *)(*(_QWORD *)&v18 + 4 * v10) = v17;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(_QWORD *)&v19 + 8 * v17;
  }
  v12 = a1[1];
  while (*(_QWORD *)(*(_QWORD *)&v12 + 8 * v11) != *a2)
  {
    v11 = *(unsigned int *)(*(_QWORD *)&a1[2] + 4 * v11);
    if ((_DWORD)v11 == -1)
      goto LABEL_8;
  }
  result = *(_QWORD *)&v12 + 8 * v11;
  *a3 = 1;
  return result;
}

uint64_t physx::shdfnd::Array<physx::GuMeshFactoryListener *,physx::shdfnd::ReflectionAllocator<physx::GuMeshFactoryListener *>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::GuMeshFactoryListener *>::getName() [T = physx::"
           "GuMeshFactoryListener *]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  v10 = (_QWORD *)(v8 + 8 * v9);
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)a1;
    v12 = (_QWORD *)v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(_QWORD *)a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *(unsigned int *)(a1 + 8);
  }
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v9;
}

__n128 physx::Gu::LocalConvex<physx::Gu::CapsuleV>::supportPoint(uint64_t a1, int a2)
{
  return *(__n128 *)(*(_QWORD *)(a1 + 8) + 16 * (1 - a2) + 48);
}

double physx::Gu::LocalConvex<physx::Gu::CapsuleV>::support(uint64_t a1, float32x4_t *a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  double result;

  v2 = *(float32x4_t **)(a1 + 8);
  v3 = v2[3];
  v4 = v2[4];
  v5 = vmulq_f32(v3, *a2);
  v5.i64[0] = vpaddq_f32(v5, v5).u64[0];
  v6 = vmulq_f32(*a2, v4);
  v6.i64[0] = vpaddq_f32(v6, v6).u64[0];
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v5.f32, *(float32x2_t *)v5.f32), vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32)), 0), (int8x16_t)v3, (int8x16_t)v4).u64[0];
  return result;
}

double physx::Gu::LocalConvex<physx::Gu::CapsuleV>::support(uint64_t a1, float32x4_t *a2, _DWORD *a3)
{
  float32x4_t *v3;
  float32x4_t v4;
  float32x4_t v5;
  double result;

  v3 = *(float32x4_t **)(a1 + 8);
  v4 = vmulq_f32(v3[3], *a2);
  v4.i64[0] = vpaddq_f32(v4, v4).u64[0];
  v5 = vmulq_f32(*a2, v3[4]);
  v5.i64[0] = vpaddq_f32(v5, v5).u64[0];
  *(int8x8_t *)v5.f32 = vand_s8((int8x8_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)v4.f32), vpadd_f32(*(float32x2_t *)v5.f32, *(float32x2_t *)v5.f32)), (int8x8_t)0x100000001);
  *a3 = v5.i32[0];
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(*(int32x2_t *)v5.f32, 0), 0x1FuLL)), (int8x16_t)v3[3], (int8x16_t)v3[4]).u64[0];
  return result;
}

double physx::Gu::LocalConvex<physx::Gu::CapsuleV>::getSweepMargin()
{
  return 0.0;
}

__n128 physx::Gu::LocalConvex<physx::Gu::CapsuleV>::getCenter(uint64_t a1)
{
  return *(__n128 *)*(_QWORD *)(a1 + 8);
}

void physx::Gu::LocalConvex<physx::Gu::CapsuleV>::~LocalConvex()
{
  JUMPOUT(0x2276933B8);
}

double physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::supportPoint(uint64_t a1, int a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  double result;

  v2 = *(float32x4_t **)(a1 + 8);
  v3 = *(float32x4_t *)(v2[10].i64[0] + 12 * a2);
  v4 = vmulq_n_f32(v2[3], v3.f32[0]);
  v4.i32[3] = 0;
  v5 = vmulq_lane_f32(v2[4], *(float32x2_t *)v3.f32, 1);
  v5.i32[3] = 0;
  v6 = vmulq_laneq_f32(v2[5], v3, 2);
  v6.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(vaddq_f32(v4, v5), v6).u64[0];
  return result;
}

double physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(uint64_t a1, float32x4_t *a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  double result;
  float32x4_t v11;

  v2 = *(float32x4_t **)(a1 + 8);
  v3 = vmulq_f32(*a2, v2[3]);
  v3.i64[0] = vpaddq_f32(v3, v3).u64[0];
  v4 = vmulq_f32(*a2, v2[4]);
  v4.i64[0] = vpaddq_f32(v4, v4).u64[0];
  v5 = vmulq_f32(*a2, v2[5]);
  v5.i64[0] = vpaddq_f32(v5, v5).u64[0];
  *(int8x8_t *)v3.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)v3.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)v4.f32), 4uLL);
  v3.i64[1] = vpadd_f32(*(float32x2_t *)v5.f32, *(float32x2_t *)v5.f32).u32[0];
  v11 = v3;
  v6 = *(float32x4_t *)(v2[10].i64[0]
                      + 12 * physx::Gu::ConvexHullV::supportVertexIndex((uint64_t)v2, &v11));
  v7 = vmulq_n_f32(v2[3], v6.f32[0]);
  v7.i32[3] = 0;
  v8 = vmulq_lane_f32(v2[4], *(float32x2_t *)v6.f32, 1);
  v8.i32[3] = 0;
  v9 = vmulq_laneq_f32(v2[5], v6, 2);
  v9.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(vaddq_f32(v7, v8), v9).u64[0];
  return result;
}

double physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(uint64_t a1, float32x4_t *a2, _DWORD *a3)
{
  float32x4_t *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  double result;
  float32x4_t v14;

  v4 = *(float32x4_t **)(a1 + 8);
  v5 = vmulq_f32(*a2, v4[3]);
  v5.i64[0] = vpaddq_f32(v5, v5).u64[0];
  v6 = vmulq_f32(*a2, v4[4]);
  v6.i64[0] = vpaddq_f32(v6, v6).u64[0];
  v7 = vmulq_f32(*a2, v4[5]);
  v7.i64[0] = vpaddq_f32(v7, v7).u64[0];
  *(int8x8_t *)v5.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v5.f32, *(float32x2_t *)v5.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32), 4uLL);
  v5.i64[1] = vpadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32).u32[0];
  v14 = v5;
  v8 = physx::Gu::ConvexHullV::supportVertexIndex((uint64_t)v4, &v14);
  *a3 = v8;
  v9 = *(float32x4_t *)(v4[10].i64[0] + 12 * v8);
  v10 = vmulq_n_f32(v4[3], v9.f32[0]);
  v10.i32[3] = 0;
  v11 = vmulq_lane_f32(v4[4], *(float32x2_t *)v9.f32, 1);
  v11.i32[3] = 0;
  v12 = vmulq_laneq_f32(v4[5], v9, 2);
  v12.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(vaddq_f32(v10, v11), v12).u64[0];
  return result;
}

float32x2_t physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::getSweepMargin(uint64_t a1)
{
  const float *v1;

  v1 = (const float *)(*(_QWORD *)(a1 + 8) + 24);
  return vld1_dup_f32(v1);
}

__n128 physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::getCenter(uint64_t a1)
{
  return *(__n128 *)*(_QWORD *)(a1 + 8);
}

void physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::~LocalConvex()
{
  JUMPOUT(0x2276933B8);
}

BOOL GeomOverlapCallback_SphereSphere(uint64_t a1, float *a2, uint64_t a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;

  v4 = a4[4] - a2[4];
  v5 = a4[5] - a2[5];
  v6 = a4[6] - a2[6];
  v7 = *(float *)(a1 + 4) + *(float *)(a3 + 4);
  return (float)((float)((float)(v5 * v5) + (float)(v4 * v4)) + (float)(v6 * v6)) <= (float)(v7 * v7);
}

BOOL GeomOverlapCallback_SpherePlane(uint64_t a1, float *a2, uint64_t a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v5 = a4[2];
  v4 = a4[3];
  v6 = v4 + v4;
  v7 = *a4;
  v8 = a4[1];
  v9 = (float)((float)(v4 * (float)(v4 + v4)) + -1.0) + (float)(v7 * (float)(v7 + v7));
  return (float)((float)((float)((float)((float)((float)((float)(v7 + v7) * v8) + (float)(v5 * v6)) * a2[5])
                               + (float)(a2[4] * v9))
                       + (float)(a2[6] * (float)((float)((float)(v7 + v7) * v5) - (float)(v8 * v6))))
               - (float)((float)((float)(a4[5] * (float)((float)((float)(v7 + v7) * v8) + (float)(v5 * v6)))
                               + (float)(a4[4] * v9))
                       + (float)(a4[6] * (float)((float)((float)(v7 + v7) * v5) - (float)(v8 * v6))))) <= *(float *)(a1 + 4);
}

BOOL GeomOverlapCallback_SphereCapsule(uint64_t a1, float *a2, uint64_t a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;

  v4 = *a4;
  v5 = a4[1];
  v7 = a4[2];
  v6 = a4[3];
  v8 = v6 + v6;
  v9 = (float)((float)(v6 * (float)(v6 + v6)) + -1.0) + (float)(v4 * (float)(v4 + v4));
  v10 = (float)((float)(v4 + v4) * v5) + (float)(v7 * v8);
  v11 = (float)((float)(v4 + v4) * v7) - (float)(v5 * v8);
  v12 = *(float *)(a3 + 8);
  v13 = v12 * v10;
  v14 = v11 * v12;
  v15 = (float)-(float)(v9 * v12) - (float)(v9 * v12);
  v16 = (float)-(float)(v12 * v10) - (float)(v12 * v10);
  v17 = (float)-(float)(v11 * v12) - (float)(v11 * v12);
  v18 = (float)(a2[4] - a4[4]) - (float)(v9 * v12);
  v19 = (float)(a2[5] - a4[5]) - v13;
  v20 = (float)(a2[6] - a4[6]) - v14;
  v21 = (float)((float)(v16 * v19) + (float)(v18 * v15)) + (float)(v20 * v17);
  if (v21 > 0.0)
  {
    v22 = (float)((float)(v16 * v16) + (float)(v15 * v15)) + (float)(v17 * v17);
    if (v21 < v22)
    {
      v23 = v21 / v22;
      v15 = v15 * v23;
      v16 = v16 * v23;
      v17 = v17 * v23;
    }
    v18 = v18 - v15;
    v19 = v19 - v16;
    v20 = v20 - v17;
  }
  v24 = *(float *)(a1 + 4) + *(float *)(a3 + 4);
  return (float)((float)((float)(v19 * v19) + (float)(v18 * v18)) + (float)(v20 * v20)) <= (float)(v24 * v24);
}

BOOL GeomOverlapCallback_SphereBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float32x4_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v26;
  int v27;
  int v28;
  float v29[2];
  uint64_t v30;
  unsigned __int32 v31;
  uint64_t v32;
  int32x2_t v33;
  int v34;
  __int128 v35;
  int v36;

  v4 = vaddq_f32(*(float32x4_t *)a4, *(float32x4_t *)a4);
  v5 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a4, 1);
  v6 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a4, 2);
  v7 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a4, 3);
  v8 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a4, *(float32x2_t *)v4.f32), 0);
  v9 = vmul_lane_f32(v5, *(float32x2_t *)v4.f32, 1);
  v10 = vmul_laneq_f32(v6, v4, 2);
  v11 = vmul_n_f32(v5, v4.f32[0]);
  v12 = vmul_n_f32(v6, v4.f32[0]);
  v13 = vmul_n_f32(v7, v4.f32[0]);
  v14 = vmul_lane_f32(v6, *(float32x2_t *)v4.f32, 1);
  v15 = vmul_lane_f32(v7, *(float32x2_t *)v4.f32, 1);
  *(float32x2_t *)v4.f32 = vmul_laneq_f32(v7, v4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  v21 = vsub_f32(_D4, v8);
  LODWORD(v22) = vsub_f32(v12, v15).u32[0];
  LODWORD(v23) = vadd_f32(v14, v13).u32[0];
  v29[0] = (float)(1.0 - v9.f32[1]) - v10.f32[1];
  LODWORD(v29[1]) = vadd_f32(v11, *(float32x2_t *)v4.f32).u32[0];
  HIDWORD(v22) = vsub_f32(v11, *(float32x2_t *)&v4).i32[1];
  v30 = v22;
  v31 = vsub_f32(v21, v10).u32[0];
  HIDWORD(v23) = vadd_f32(v12, v15).i32[1];
  v32 = v23;
  v33 = vzip1_s32((int32x2_t)vsub_f32(v14, v13), (int32x2_t)vsub_f32(v21, v9));
  v34 = *(_DWORD *)(a4 + 16);
  *(_QWORD *)&v24 = *(_QWORD *)(a4 + 20);
  *((_QWORD *)&v24 + 1) = *(_QWORD *)(a3 + 4);
  v35 = v24;
  v36 = *(_DWORD *)(a3 + 12);
  LODWORD(v24) = *(_DWORD *)(a1 + 4);
  v26 = *(_QWORD *)(a2 + 16);
  v27 = *(_DWORD *)(a2 + 24);
  v28 = v24;
  return physx::Gu::intersectSphereBox((physx::Gu *)&v26, (const Sphere *)v29, (const physx::Gu::Box *)a3);
}

BOOL GeomOverlapCallback_SphereConvex(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, float *a5, int8x8_t a6, double a7, double a8, int32x4_t a9)
{
  uint64_t v10;
  uint64_t v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  _BOOL4 v25;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  float32x4_t v30;
  int v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v55;
  float32x2_t v56;
  int8x8_t v57;
  float32x4_t v58;
  int32x2_t v59;
  int8x8_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  unsigned int v97;
  float32_t v98;
  float32x4_t v99;
  int v100;
  __int16 v101;
  uint64_t v103;
  float32x4_t v104;
  _QWORD v105[2];
  _QWORD v106[2];
  uint64_t v107;
  float32x4_t v108;
  int8x16_t v109;
  int8x16_t v110;
  float32x4_t v111;
  __int32 v112;
  __int32 v113;
  __int32 v114;
  int v115;
  char v116;
  float32x4_t v117;
  float32x4_t v118;
  int32x2_t v119;
  float32x4_t v120;
  __int128 v121;
  char v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;

  v133 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a3 + 32);
  v11 = 0;
  if (a5)
  {
    v12 = 1.0;
    if (*((_WORD *)a5 + 6) == 2)
    {
      v11 = *(_QWORD *)a5;
      v12 = a5[2];
    }
  }
  else
  {
    v12 = 1.0;
  }
  a6.i32[0] = *(_DWORD *)(a1 + 4);
  v13 = *(float32x4_t *)(a3 + 4);
  v14 = v13;
  v14.i32[3] = 0;
  v15 = *(float32x4_t *)(a3 + 16);
  v16 = *(float *)a4;
  v17 = *(float *)(a4 + 4);
  v18 = *(float *)(a4 + 8);
  a9.i32[0] = *(_DWORD *)(a4 + 12);
  v19 = a2[4];
  v20 = a2[5];
  v22 = *(float *)(a4 + 16);
  v21 = *(float *)(a4 + 20);
  v23 = a2[6];
  v24 = *(float *)(a4 + 24);
  v25 = COERCE_FLOAT(*(_QWORD *)(a3 + 12)) == 1.0;
  if (v13.f32[0] != 1.0 || COERCE_FLOAT(HIDWORD(*(_QWORD *)(a3 + 4))) != 1.0)
    v25 = 0;
  v27 = 0uLL;
  v122 = 0;
  v120 = 0u;
  v121 = 0u;
  v129 = v10 + 32;
  v131 = *(_QWORD *)(v10 + 72) + 20 * *(unsigned __int8 *)(v10 + 71);
  v132 = *(_BYTE *)(v10 + 70);
  v28.i64[0] = *(_QWORD *)(v10 + 92);
  v28.i64[1] = *(unsigned int *)(v10 + 100);
  v29 = (int32x4_t)vmulq_f32(v14, v28);
  *(float32x2_t *)v29.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v29, 2), *(float32x2_t *)v29.i8);
  *(float *)v29.i32 = vpmin_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8).f32[0];
  *(float32x2_t *)&v121 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v29.i32);
  *((float *)&v121 + 2) = 0.025 * *(float *)v29.i32;
  if (v25)
  {
    v123 = xmmword_2260E5F10;
    v124 = xmmword_2260E5F20;
    v125 = xmmword_2260E5F40;
    v126 = xmmword_2260E5F10;
    v127 = xmmword_2260E5F20;
    v128 = xmmword_2260E5F40;
  }
  else
  {
    v30 = vrecpeq_f32(v14);
    v31 = 4;
    do
    {
      v30 = vmulq_f32(v30, vrecpsq_f32(v30, v14));
      --v31;
    }
    while (v31);
    *(int32x2_t *)v32.f32 = vdup_lane_s32(*(int32x2_t *)v13.f32, 0);
    v32.i64[1] = v32.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v32, v14)), a6).u32[0] & 0xFFFFFF) != 0)
    {
      v39 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 1);
      v40 = (float32x2_t)vdup_laneq_s32((int32x4_t)v15, 2);
      v41 = (float32x2_t)vdup_laneq_s32((int32x4_t)v15, 3);
      _Q26 = vaddq_f32(v15, v15);
      v43 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)_Q26.f32), 0);
      v44 = vmul_lane_f32(v39, *(float32x2_t *)_Q26.f32, 1);
      v45 = vmul_laneq_f32(v40, _Q26, 2);
      v46 = vmul_n_f32(v39, _Q26.f32[0]);
      v47 = vmul_n_f32(v40, _Q26.f32[0]);
      v48 = vmul_n_f32(v41, _Q26.f32[0]);
      v49 = vmul_lane_f32(v40, *(float32x2_t *)_Q26.f32, 1);
      v50 = vmul_lane_f32(v41, *(float32x2_t *)_Q26.f32, 1);
      v51 = vmul_laneq_f32(v41, _Q26, 2);
      __asm { FMOV            V26.2S, #1.0 }
      v55 = vsub_f32(*(float32x2_t *)_Q26.f32, v43);
      v56 = (float32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q26.f32, v44), v45), (int8x8_t)vadd_f32(v46, v51), 4uLL);
      v57 = (int8x8_t)vsub_f32(v46, v51);
      *(float32x2_t *)v58.f32 = v56;
      v58.i64[1] = vsub_f32(v47, v50).u32[0];
      v59 = (int32x2_t)vext_s8(v57, (int8x8_t)vsub_f32(v55, v45), 4uLL);
      v60 = (int8x8_t)vadd_f32(v47, v50);
      *(int8x8_t *)_Q26.f32 = vext_s8((int8x8_t)vdup_lane_s32((int32x2_t)v56, 0), (int8x8_t)v59, 4uLL);
      *(int32x2_t *)v61.f32 = v59;
      v61.i64[1] = vadd_f32(v49, v48).u32[0];
      v55.i32[0] = vsub_f32(v55, v44).u32[0];
      *(int8x8_t *)v62.f32 = vext_s8(v60, (int8x8_t)vsub_f32(v49, v48), 4uLL);
      *(int8x8_t *)v63.f32 = vext_s8((int8x8_t)v56, (int8x8_t)vdup_lane_s32(v59, 1), 4uLL);
      v62.i64[1] = v55.u32[0];
      _Q26.i64[1] = vdup_lane_s32(*(int32x2_t *)v62.f32, 0).u32[0];
      v63.i64[1] = vdup_lane_s32(*(int32x2_t *)v62.f32, 1).u32[0];
      *(int8x8_t *)v64.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v58.u32[2], 0), *(int8x8_t *)&v61.u32[2], 4uLL);
      v64.i64[1] = vdup_lane_s32((int32x2_t)v55.u32[0], 0).u32[0];
      v65 = vmulq_n_f32(_Q26, v13.f32[0]);
      v65.i32[3] = 0;
      v66 = vmulq_lane_f32(v63, *(float32x2_t *)v13.f32, 1);
      v66.i32[3] = 0;
      v67 = vmulq_laneq_f32(v64, v13, 2);
      v67.i32[3] = 0;
      v68 = vmulq_n_f32(v65, v56.f32[0]);
      v68.i32[3] = 0;
      v69 = vmulq_lane_f32(v66, v56, 1);
      v69.i32[3] = 0;
      v70 = vmulq_laneq_f32(v67, v58, 2);
      v70.i32[3] = 0;
      v33 = vaddq_f32(v70, vaddq_f32(v68, v69));
      v71 = vmulq_n_f32(v65, v61.f32[0]);
      v71.i32[3] = 0;
      v72 = vmulq_lane_f32(v66, *(float32x2_t *)v61.f32, 1);
      v72.i32[3] = 0;
      v73 = vmulq_laneq_f32(v67, v61, 2);
      v73.i32[3] = 0;
      v34 = vaddq_f32(v73, vaddq_f32(v71, v72));
      v74 = vmulq_n_f32(v65, v62.f32[0]);
      v74.i32[3] = 0;
      v75 = vmulq_lane_f32(v66, *(float32x2_t *)v62.f32, 1);
      v75.i32[3] = 0;
      v76 = vmulq_laneq_f32(v67, v62, 2);
      v76.i32[3] = 0;
      v35 = vaddq_f32(v76, vaddq_f32(v74, v75));
      v123 = (__int128)v33;
      v124 = (__int128)v34;
      v77 = vmulq_n_f32(_Q26, v30.f32[0]);
      v77.i32[3] = 0;
      v78 = vmulq_lane_f32(v63, *(float32x2_t *)v30.f32, 1);
      v78.i32[3] = 0;
      v79 = vmulq_laneq_f32(v64, v30, 2);
      v79.i32[3] = 0;
      v80 = vmulq_n_f32(v77, v58.f32[0]);
      v80.i32[3] = 0;
      v81 = vmulq_lane_f32(v78, *(float32x2_t *)v58.f32, 1);
      v81.i32[3] = 0;
      v82 = vmulq_laneq_f32(v79, v58, 2);
      v82.i32[3] = 0;
      v36 = vaddq_f32(v82, vaddq_f32(v80, v81));
      v83 = vmulq_n_f32(v77, v61.f32[0]);
      v83.i32[3] = 0;
      v84 = vmulq_lane_f32(v78, *(float32x2_t *)v61.f32, 1);
      v84.i32[3] = 0;
      v85 = vmulq_laneq_f32(v79, v61, 2);
      v85.i32[3] = 0;
      v86 = vmulq_n_f32(v77, v62.f32[0]);
      v86.i32[3] = 0;
      v87 = vmulq_lane_f32(v78, *(float32x2_t *)v62.f32, 1);
      v87.i32[3] = 0;
      v37 = vaddq_f32(v85, vaddq_f32(v83, v84));
      v88 = vmulq_laneq_f32(v79, v62, 2);
      v88.i32[3] = 0;
      v38 = vaddq_f32(v88, vaddq_f32(v86, v87));
    }
    else
    {
      v30.i32[3] = 0;
      v33 = vmulq_f32(v14, (float32x4_t)xmmword_2260E5F10);
      v34 = vmulq_f32(v14, (float32x4_t)xmmword_2260E5F20);
      v35 = vmulq_f32(v14, (float32x4_t)xmmword_2260E5F40);
      v123 = (__int128)v33;
      v124 = (__int128)v34;
      v36 = vmulq_f32(v30, (float32x4_t)xmmword_2260E5F10);
      v37 = vmulq_f32(v30, (float32x4_t)xmmword_2260E5F20);
      v38 = vmulq_f32(v30, (float32x4_t)xmmword_2260E5F40);
    }
    v125 = (__int128)v35;
    v126 = (__int128)v36;
    v127 = (__int128)v37;
    v128 = (__int128)v38;
    v89 = vmulq_f32(v33, (float32x4_t)0);
    v89.i32[3] = 0;
    v90 = vmulq_f32(v34, (float32x4_t)0);
    v90.i32[3] = 0;
    v91 = vmulq_f32(v35, (float32x4_t)0);
    v91.i32[3] = 0;
    v27 = vaddq_f32(v91, vaddq_f32(v90, v89));
    v120 = v27;
  }
  v92 = (float)(v23 - v24) + (float)(v23 - v24);
  v93 = (float)(v19 - v22) + (float)(v19 - v22);
  v94 = (float)(v20 - v21) + (float)(v20 - v21);
  v95 = (float)((float)-(float)(v17 * v94) - (float)(v16 * v93)) - (float)(v18 * v92);
  v96 = (float)(*(float *)a9.i32 * *(float *)a9.i32) + -0.5;
  *(float *)&v97 = (float)((float)(*(float *)a9.i32 * (float)((float)(v17 * v93) - (float)(v16 * v94)))
                         + (float)(v92 * v96))
                 - (float)(v18 * v95);
  v98 = (float)((float)(*(float *)a9.i32 * (float)((float)(v16 * v92) - (float)(v18 * v93))) + (float)(v94 * v96))
      - (float)(v17 * v95);
  v99.f32[0] = (float)((float)(*(float *)a9.i32 * (float)((float)(v18 * v94) - (float)(v17 * v92))) + (float)(v93 * v96))
             - (float)(v16 * v95);
  v99.f32[1] = v98;
  v99.i64[1] = v97;
  v130 = *(_QWORD *)(v10 + 80);
  v115 = 4;
  v119 = vdup_lane_s32((int32x2_t)a6, 0);
  v117 = v99;
  v118 = v99;
  v112 = a6.i32[0];
  v113 = a6.i32[0];
  v114 = a6.i32[0];
  v116 = 1;
  v110 = 0u;
  v111 = v99;
  v108 = 0u;
  v109 = 0u;
  v107 = 0;
  v106[0] = off_24ED91108;
  v106[1] = &v111;
  v105[0] = off_24ED91168;
  v105[1] = &v120;
  v104 = vsubq_f32(v99, v27);
  v103 = 0;
  v100 = physx::Gu::gjk<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)v106, (uint64_t)v105, &v104, &v103, &v110, &v109, &v108, &v107, 0.0, *(double *)v104.i64, *(double *)v99.i64, a9);
  if (a5 && v100 == 2)
  {
    *(_QWORD *)a5 = v11;
    a5[2] = v12;
    v101 = 2;
LABEL_23:
    *((_WORD *)a5 + 6) = v101;
    return v100 == 2;
  }
  if (a5)
  {
    v101 = 2 * (v100 == 2);
    goto LABEL_23;
  }
  return v100 == 2;
}

uint64_t GeomOverlapCallback_HeightfieldUnregistered(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuOverlapTests.cpp", 586, "Height Field Overlap test called with height fields unregistered ", a6, a7, a8, vars0);
  return 0;
}

uint64_t GeomOverlapCallback_NotSupported()
{
  return 0;
}

BOOL GeomOverlapCallback_PlaneCapsule(uint64_t a1, float *a2, uint64_t a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;

  v4 = *a4;
  v5 = a4[1];
  v7 = a4[2];
  v6 = a4[3];
  v8 = v6 + v6;
  v9 = (float)((float)(v6 * (float)(v6 + v6)) + -1.0) + (float)(v4 * (float)(v4 + v4));
  v10 = (float)((float)(v4 + v4) * v5) + (float)(v7 * v8);
  v11 = (float)((float)(v4 + v4) * v7) - (float)(v5 * v8);
  v12 = *(float *)(a3 + 4);
  v13 = *(float *)(a3 + 8);
  v14 = v9 * v13;
  v15 = v13 * v10;
  v16 = v11 * v13;
  v17 = a4[4];
  v18 = a4[5];
  v19 = a4[6];
  v21 = a2[2];
  v20 = a2[3];
  v22 = v20 + v20;
  v23 = (float)(v20 * (float)(v20 + v20)) + -1.0;
  v24 = *a2;
  v25 = a2[1];
  v26 = v23 + (float)(v24 * (float)(v24 + v24));
  v27 = (float)((float)(v24 + v24) * v25) + (float)(v21 * v22);
  v28 = (float)((float)(v24 + v24) * v21) - (float)(v25 * v22);
  v29 = (float)((float)(a2[5] * v27) + (float)(a2[4] * v26)) + (float)(a2[6] * v28);
  return (float)((float)((float)((float)((float)(v18 + v15) * v27) + (float)((float)(v17 + v14) * v26))
                       + (float)((float)(v16 + v19) * v28))
               - v29) <= v12
      || (float)((float)((float)((float)((float)(v18 - v15) * v27) + (float)((float)(v17 - v14) * v26))
                       + (float)((float)(v19 - v16) * v28))
               - v29) <= v12;
}

BOOL GeomOverlapCallback_PlaneBox(uint64_t a1, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  int v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  int v42;
  int v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  int v50;
  float v51;
  int v52;

  v4 = *a4;
  v5 = a4[1];
  v6 = a4[2];
  v7 = a4[3];
  v8 = v4 * (float)(v4 + v4);
  v9 = v5 * (float)(v5 + v5);
  v10 = v6 * (float)(v6 + v6);
  v11 = (float)(v4 + v4) * v5;
  v12 = (float)(v4 + v4) * v6;
  v13 = (float)(v4 + v4) * v7;
  v14 = (float)(v5 + v5) * v6;
  v15 = (float)(v5 + v5) * v7;
  v16 = (float)(v6 + v6) * v7;
  v17 = (float)(1.0 - v9) - v10;
  v18 = v11 + v16;
  v19 = v12 - v15;
  v20 = v11 - v16;
  v21 = 1.0 - v8;
  v22 = (float)(1.0 - v8) - v10;
  v23 = v14 + v13;
  v24 = v12 + v15;
  v25 = v14 - v13;
  v26 = v21 - v9;
  v27 = *a2;
  v28 = a2[1];
  v29 = v27 + v27;
  v31 = a2[2];
  v30 = a2[3];
  v32 = v30 + v30;
  v33 = (float)((float)(v30 * (float)(v30 + v30)) + -1.0) + (float)(v27 * (float)(v27 + v27));
  v34 = (float)(v29 * v28) + (float)(v31 * (float)(v30 + v30));
  v35 = (float)(v29 * v31) - (float)(v28 * v32);
  v36 = -1;
LABEL_2:
  v37 = v36;
  v38 = a3[1] * (float)v36;
  v39 = v17 * v38;
  v40 = v18 * v38;
  v41 = v19 * v38;
  v42 = -1;
LABEL_3:
  v43 = v42;
  v44 = a3[2] * (float)v42;
  v45 = v22 * v44;
  v46 = v23 * v44;
  v47 = v39 + (float)(v20 * v44);
  v48 = v40 + v45;
  v49 = v41 + v46;
  v50 = -1;
  while (1)
  {
    v51 = (float)((float)((float)(v34 * (float)(a4[5] + (float)(v48 + (float)(v25 * (float)(a3[3] * (float)v50)))))
                        + (float)((float)(a4[4] + (float)(v47 + (float)(v24 * (float)(a3[3] * (float)v50)))) * v33))
                + (float)((float)(a4[6] + (float)(v49 + (float)(v26 * (float)(a3[3] * (float)v50)))) * v35))
        - (float)((float)((float)(a2[5] * v34) + (float)(a2[4] * v33)) + (float)(a2[6] * v35));
    if (v51 <= 0.0)
      return v51 <= 0.0;
    v52 = v50;
    v50 += 2;
    if ((v52 & 0x80000000) == 0)
    {
      v42 = v43 + 2;
      if (v43 < 0)
        goto LABEL_3;
      v36 = v37 + 2;
      if (v37 < 0)
        goto LABEL_2;
      return v51 <= 0.0;
    }
  }
}

BOOL GeomOverlapCallback_PlaneConvex(uint64_t a1, float *a2, uint64_t a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  uint64_t v75;
  unsigned __int16 *v76;
  float *v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  BOOL v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  float v101;
  float v102;
  unint64_t v103;
  unsigned __int8 *v104;
  int v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124[3];
  int v125;
  int v126;
  float v127[3];

  v4 = *a4;
  v5 = a4[1];
  v7 = a4[2];
  v6 = a4[3];
  v9 = a2[2];
  v8 = a2[3];
  v10 = a2[1];
  v11 = (float)((float)((float)(v6 * *a2) - (float)(*a4 * v8)) - (float)(v5 * v9)) + (float)(v10 * v7);
  v12 = (float)((float)((float)(v6 * v10) - (float)(v5 * v8)) - (float)(v7 * *a2)) + (float)(v9 * *a4);
  v13 = (float)((float)((float)(v6 * v9) - (float)(v7 * v8)) - (float)(*a4 * v10)) + (float)(*a2 * v5);
  v14 = (float)((float)((float)(*a4 * *a2) + (float)(v6 * v8)) + (float)(v5 * v10)) + (float)(v7 * v9);
  v15 = (float)((float)(v14 * (float)(v14 + v14)) + -1.0) + (float)(v11 * (float)(v11 + v11));
  v16 = (float)((float)(v11 + v11) * v12) + (float)(v13 * (float)(v14 + v14));
  v17 = (float)(v13 * (float)(v11 + v11)) - (float)(v12 * (float)(v14 + v14));
  v18 = *(float *)(a3 + 20);
  v19 = *(float *)(a3 + 24);
  v20 = *(float *)(a3 + 28);
  v22 = *(float *)(a3 + 12);
  v21 = *(float *)(a3 + 16);
  v23 = v18 + v18;
  v24 = v19 + v19;
  v25 = v18 * (float)(v18 + v18);
  v26 = v19 * (float)(v19 + v19);
  v27 = (float)(v21 + v21) * v18;
  v28 = (float)(v21 + v21) * v19;
  v29 = (float)(v21 + v21) * v20;
  v30 = v23 * v19;
  v31 = v23 * v20;
  v32 = v24 * v20;
  v33 = (float)(1.0 - v25) - v26;
  v34 = v27 + v32;
  v35 = v28 - v31;
  v36 = v27 - v32;
  v37 = 1.0 - (float)(v21 * (float)(v21 + v21));
  v38 = v37 - v26;
  v39 = v30 + v29;
  v40 = v28 + v31;
  v41 = v30 - v29;
  v42 = v37 - v25;
  v43 = *(float *)(a3 + 4);
  v44 = *(float *)(a3 + 8);
  v45 = v43 * v33;
  v46 = v43 * v36;
  v47 = v43 * v40;
  v48 = v34 * v44;
  v49 = v38 * v44;
  v50 = v41 * v44;
  v51 = v35 * v22;
  v52 = v39 * v22;
  v53 = v42 * v22;
  v54 = (float)(v33 * v45) + (float)(v34 * v48);
  v55 = (float)(v33 * v46) + (float)(v34 * v49);
  v56 = (float)(v33 * v47) + (float)(v34 * v50);
  v57 = v54 + (float)(v35 * v51);
  v58 = v55 + (float)(v35 * v52);
  v59 = v56 + (float)(v35 * v53);
  v60 = (float)(v36 * v45) + (float)(v38 * v48);
  v61 = (float)(v36 * v46) + (float)(v38 * v49);
  v62 = (float)(v36 * v47) + (float)(v38 * v50);
  v63 = v60 + (float)(v39 * v51);
  v64 = v61 + (float)(v39 * v52);
  v65 = v62 + (float)(v39 * v53);
  v66 = v40 * v45;
  v67 = v40 * v46;
  v68 = v40 * v47;
  v69 = v41 * v49;
  v70 = v66 + (float)(v41 * v48);
  v71 = v68 + (float)(v41 * v50);
  v72 = v42 * v51;
  v73 = v42 * v52;
  v74 = v42 * v53;
  v75 = *(_QWORD *)(a3 + 32);
  v76 = *(unsigned __int16 **)(v75 + 80);
  v77 = (float *)(*(_QWORD *)(v75 + 72) + 20 * *(unsigned __int8 *)(v75 + 71));
  v78 = v70 + v72;
  v79 = (float)(v67 + v69) + v73;
  v81 = a4[4];
  v80 = a4[5];
  v82 = v71 + v74;
  v83 = a4[6];
  v84 = -v7;
  v85 = -*a4;
  v86 = (float)(v17 * v78) + (float)((float)(v15 * v57) + (float)(v16 * v63));
  v87 = a2[4];
  v88 = a2[5];
  v89 = (float)(v17 * v79) + (float)((float)(v15 * v58) + (float)(v16 * v64));
  v90 = a2[6];
  v91 = (float)(v17 * v82) + (float)((float)(v15 * v59) + (float)(v16 * v65));
  v92 = -v5;
  v127[0] = v86;
  v127[1] = v89;
  v127[2] = v91;
  if (v76)
  {
    v94 = fabs((float)(v17 * v78) + (float)((float)(v15 * v57) + (float)(v16 * v63)));
    v95 = fabs((float)(v17 * v82) + (float)((float)(v15 * v59) + (float)(v16 * v65)));
    v96 = (LODWORD(v89) & 0x7FFFFFFFu) > v94 && (LODWORD(v89) & 0x7FFFFFFFu) > v95;
    v122 = v16;
    v123 = v15;
    v121 = v17;
    v120 = v88;
    v118 = v90;
    v119 = v87;
    v116 = v81;
    v117 = v80;
    v115 = v83;
    if (v96)
    {
      v99 = 0;
      v98 = 1;
      v97 = 2;
    }
    else if (v95 <= v94)
    {
      v98 = 0;
      v99 = 2;
      v97 = 1;
    }
    else
    {
      v97 = 0;
      v98 = 2;
      v99 = 1;
    }
    v102 = 1.0 / fabsf(v127[v98]);
    HIDWORD(v103) = v98;
    *(float *)&v103 = v127[v98];
    v93 = *v76;
    v104 = (unsigned __int8 *)(*((_QWORD *)v76 + 1)
                             + (float)((float)((float)((float)(v93 - 1) * 0.5)
                                                           * (float)((float)(v102 * v127[v99]) + 1.0))
                                                   + 0.5)
                             + ((float)((float)((float)((float)(v93 - 1) * 0.5)
                                                            * (float)((float)(v127[v97] * v102) + 1.0))
                                                    + 0.5)
                              + (v103 >> 31) * v93)
                             * v93);
    v105 = *v104;
    v125 = v104[v76[1]];
    v126 = v105;
    v124[0] = -v86;
    v124[1] = -v89;
    v124[2] = -v91;
    physx::localSearch(&v126, v124, (uint64_t)v77, (uint64_t)v76);
    physx::localSearch(&v125, v127, (uint64_t)v77, (uint64_t)v76);
    v101 = (float)((float)(v89 * v77[3 * v126 + 1]) + (float)(v77[3 * v126] * v86)) + (float)(v77[3 * v126 + 2] * v91);
    v16 = v122;
    v15 = v123;
    v84 = -v7;
    v17 = v121;
    v88 = v120;
    v92 = -v5;
    v90 = v118;
    v87 = v119;
    v81 = v116;
    v80 = v117;
    v83 = v115;
  }
  else
  {
    v100 = *(unsigned __int8 *)(v75 + 70);
    v101 = 3.4028e38;
    do
    {
      if (v101 >= (float)((float)((float)(v89 * v77[1]) + (float)(*v77 * v86)) + (float)(v77[2] * v91)))
        v101 = (float)((float)(v89 * v77[1]) + (float)(*v77 * v86)) + (float)(v77[2] * v91);
      v77 += 3;
      --v100;
    }
    while (v100);
  }
  v106 = v80 * -2.0;
  v107 = (float)((float)((float)(v80 * -2.0) * v5) + (float)(v4 * (float)(v81 * -2.0)))
       + (float)(v7 * (float)(v83 * -2.0));
  v108 = (float)(v6 * v6) + -0.5;
  v109 = (float)((float)((float)(v83 * -2.0) * v108)
               - (float)((float)((float)((float)(v81 * -2.0) * v92) + (float)(v4 * (float)(v80 * -2.0))) * v6))
       + (float)(v7 * v107);
  v110 = v90 + v90;
  v111 = v87 + v87;
  v112 = v88 + v88;
  v113 = (float)((float)(v112 * v92) + (float)(v85 * v111)) + (float)(v84 * v110);
  return v101 <= (float)((float)((float)((float)((float)((float)((float)(v106 * v108)
                                                               - (float)((float)((float)((float)(v83 * -2.0) * v85)
                                                                               + (float)(v7 * (float)(v81 * -2.0)))
                                                                       * v6))
                                                       + (float)(v5 * v107))
                                               + (float)((float)((float)(v6
                                                                       * (float)((float)(v4 * v110) + (float)(v84 * v111)))
                                                               + (float)(v112 * v108))
                                                       + (float)(v92 * v113)))
                                       * v16)
                               + (float)((float)((float)((float)((float)((float)(v81 * -2.0) * v108)
                                                               - (float)((float)((float)(v106 * v84)
                                                                               + (float)(v5 * (float)(v83 * -2.0)))
                                                                       * v6))
                                                       + (float)(v4 * v107))
                                               + (float)((float)((float)(v6
                                                                       * (float)((float)(v7 * v112) + (float)(v92 * v110)))
                                                               + (float)(v111 * v108))
                                                       + (float)(v85 * v113)))
                                       * v15))
                       + (float)((float)(v109
                                       + (float)((float)((float)(v6 * (float)((float)(v5 * v111) + (float)(v85 * v112)))
                                                       + (float)(v110 * v108))
                                               + (float)(v84 * v113)))
                               * v17));
}

BOOL GeomOverlapCallback_CapsuleCapsule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float32_t v19;
  float32x2_t v20;
  float32_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float v24;
  float32x2_t v25;
  float32x2_t v27;
  float v28;
  float v29;
  float32x2_t v30;
  float v31[3];
  float v32[3];

  v4 = *(float *)(a2 + 12);
  v5 = *(float *)(a4 + 12);
  v6 = *(float *)(a4 + 16) - *(float *)(a2 + 16);
  v7 = *(float *)a2;
  v8 = *(float *)(a2 + 4);
  v9 = v7 + v7;
  v10 = *(float *)(a2 + 8);
  v11 = v4 + v4;
  v12 = (float)((float)(v4 * (float)(v4 + v4)) + -1.0) + (float)(v7 * (float)(v7 + v7));
  v13 = (float)(v9 * v8) + (float)(v10 * (float)(v4 + v4));
  v14 = (float)(v9 * v10) - (float)(v8 * v11);
  v15 = *(float *)(a1 + 8);
  v16 = *(float *)a4;
  v17 = v5 + v5;
  v18 = *(float *)(a3 + 8);
  v19 = (float)((float)((float)(v5 * (float)(v5 + v5)) + -1.0) + (float)(v16 * (float)(v16 + v16))) * v18;
  v32[0] = -(float)(v12 * v15);
  v32[1] = -(float)(v15 * v13);
  v32[2] = -(float)(v14 * v15);
  v31[0] = (float)(v12 * v15) + (float)(v12 * v15);
  v31[1] = (float)(v15 * v13) + (float)(v15 * v13);
  v31[2] = (float)(v14 * v15) + (float)(v14 * v15);
  v29 = v6 - v19;
  v20 = *(float32x2_t *)(a4 + 4);
  v21 = -v20.f32[0];
  v22 = vmul_n_f32(v20, v16 + v16);
  v20.i32[0] = vdup_lane_s32((int32x2_t)v20, 1).u32[0];
  v20.f32[1] = v21;
  v23 = vmul_n_f32(vmla_n_f32(v22, v20, v17), v18);
  v30 = vsub_f32(vsub_f32(*(float32x2_t *)(a4 + 20), *(float32x2_t *)(a2 + 20)), v23);
  v24 = v23.f32[1];
  v25 = (float32x2_t)vdup_lane_s32((int32x2_t)v23, 0);
  v25.f32[0] = v19;
  v27 = vadd_f32(v25, v25);
  v28 = v24 + v24;
  return physx::Gu::distanceSegmentSegmentSquared(v32, v31, &v29, (float *)&v27, 0, 0) <= (float)((float)(*(float *)(a1 + 4) + *(float *)(a3 + 4)) * (float)(*(float *)(a1 + 4) + *(float *)(a3 + 4)));
}

BOOL GeomOverlapCallback_CapsuleBox(uint64_t a1, float32x2_t *a2, uint64_t a3, float32x2_t *a4)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v33[3];
  float v34[9];
  float v35[3];
  float32x2_t v36;
  float v37;

  v5 = a4[3].f32[0] - a2[3].f32[0];
  v36 = vsub_f32(a4[2], a2[2]);
  v37 = v5;
  v6 = a2->f32[0];
  v7 = a2->f32[1];
  v8 = v6 + v6;
  v10 = a2[1].f32[0];
  v9 = a2[1].f32[1];
  v11 = v9 + v9;
  v12 = (float)((float)(v9 * (float)(v9 + v9)) + -1.0) + (float)(v6 * (float)(v6 + v6));
  v13 = (float)(v8 * v7) + (float)(v10 * (float)(v9 + v9));
  v14 = (float)(v8 * v10) - (float)(v7 * v11);
  v15 = *(float *)(a1 + 8);
  v35[0] = v12 * v15;
  v35[1] = v15 * v13;
  v35[2] = v14 * v15;
  v16 = a4->f32[0];
  v17 = a4->f32[1];
  v18 = a4[1].f32[0];
  v19 = a4[1].f32[1];
  v20 = v17 + v17;
  v21 = v18 + v18;
  v22 = v17 * (float)(v17 + v17);
  v23 = v18 * (float)(v18 + v18);
  v24 = (float)(v16 + v16) * v17;
  v25 = (float)(v16 + v16) * v18;
  v26 = (float)(v16 + v16) * v19;
  v27 = v20 * v18;
  v28 = v20 * v19;
  v29 = v21 * v19;
  v34[0] = (float)(1.0 - v22) - v23;
  v34[1] = v24 + v29;
  v30 = 1.0 - (float)(v16 * (float)(v16 + v16));
  v34[2] = v25 - v28;
  v34[3] = v24 - v29;
  v34[4] = v30 - v23;
  v34[5] = v27 + v26;
  v34[6] = v25 + v28;
  v34[7] = v27 - v26;
  v34[8] = v30 - v22;
  v33[0] = -(float)(v12 * v15);
  v33[1] = -(float)(v15 * v13);
  v33[2] = -(float)(v14 * v15);
  physx::Gu::distanceSegmentBoxSquared(v35, v33, (float *)&v36, (float32x2_t *)(a3 + 4), v34, 0, 0);
  return v31 <= (float)(*(float *)(a1 + 4) * *(float *)(a1 + 4));
}

BOOL GeomOverlapCallback_CapsuleConvex(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5, int8x8_t a6)
{
  int32x2_t v6;
  float32x4_t v7;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  _BOOL4 v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x2_t v32;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x4_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  int8x8_t v60;
  float32x4_t v61;
  int32x2_t v62;
  int8x8_t v63;
  float32x4_t v64;
  int8x8_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  unsigned int v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int v126;
  __int16 v127;
  float v129;
  uint64_t v130;
  uint64_t v131;
  float32x4_t v132;
  _QWORD v133[2];
  _QWORD v134[2];
  uint64_t v135;
  float32x4_t v136;
  int8x16_t v137;
  int8x16_t v138;
  float32x4_t v139;
  __int32 v140;
  __int32 v141;
  __int32 v142;
  int v143;
  char v144;
  float32x4_t v145;
  float32x4_t v146;
  int32x2_t v147;
  float32x4_t v148;
  __int128 v149;
  char v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;

  v161 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a3 + 32);
  v10 = 0;
  if (a5)
  {
    v11 = 1.0;
    if (*((_WORD *)a5 + 6) == 2)
    {
      v10 = *(_QWORD *)a5;
      v11 = a5[2];
    }
  }
  else
  {
    v11 = 1.0;
  }
  a6.i32[0] = *(_DWORD *)(a1 + 4);
  v12 = *(float *)(a1 + 8);
  v13 = *(float32x4_t *)(a3 + 4);
  v14 = v13;
  v14.i32[3] = 0;
  v15 = *(float32x4_t *)(a3 + 16);
  v16 = *a4;
  v17 = a4[1];
  v19 = a4[2];
  v18 = a4[3];
  v20 = *(float *)(a2 + 16);
  v21 = *(float *)(a2 + 20);
  v23 = a4[4];
  v22 = a4[5];
  v24 = *(float *)(a2 + 24);
  v25 = a4[6];
  v6.i32[0] = *(_DWORD *)(a2 + 8);
  v26 = *(float *)(a2 + 12);
  v28 = *(float *)a2;
  v27 = *(float *)(a2 + 4);
  v29 = COERCE_FLOAT(*(_QWORD *)(a3 + 12)) == 1.0;
  if (COERCE_FLOAT(HIDWORD(*(_QWORD *)(a3 + 4))) != 1.0)
    v29 = 0;
  if (v13.f32[0] != 1.0)
    v29 = 0;
  v150 = 0;
  v157 = v9 + 32;
  v159 = *(_QWORD *)(v9 + 72) + 20 * *(unsigned __int8 *)(v9 + 71);
  v160 = *(_BYTE *)(v9 + 70);
  v30.i64[0] = *(_QWORD *)(v9 + 92);
  v30.i64[1] = *(unsigned int *)(v9 + 100);
  v31 = (int32x4_t)vmulq_f32(v14, v30);
  v148 = 0u;
  v149 = 0u;
  v32 = vpmin_f32((float32x2_t)vdup_laneq_s32(v31, 2), *(float32x2_t *)v31.i8);
  v32.f32[0] = vpmin_f32(v32, v32).f32[0];
  *(float32x2_t *)&v149 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v32.f32[0]);
  *((float *)&v149 + 2) = 0.025 * v32.f32[0];
  __asm { FMOV            V24.2S, #1.0 }
  if (v29)
  {
    v38.i32[1] = 0;
    v39.i32[1] = 1065353216;
    v151 = xmmword_2260E5F10;
    v152 = xmmword_2260E5F20;
    v153 = xmmword_2260E5F40;
    v154 = xmmword_2260E5F10;
    v155 = xmmword_2260E5F20;
    v156 = xmmword_2260E5F40;
  }
  else
  {
    v40 = vrecpeq_f32(v14);
    v41 = 4;
    do
    {
      v40 = vmulq_f32(v40, vrecpsq_f32(v40, v14));
      --v41;
    }
    while (v41);
    *(int32x2_t *)v42.f32 = vdup_lane_s32(*(int32x2_t *)v13.f32, 0);
    v42.i64[1] = v42.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v42, v14)), a6).u32[0] & 0xFFFFFF) != 0)
    {
      v47 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 1);
      v48 = (float32x2_t)vdup_laneq_s32((int32x4_t)v15, 2);
      v49 = (float32x2_t)vdup_laneq_s32((int32x4_t)v15, 3);
      v50 = vaddq_f32(v15, v15);
      v130 = v10;
      v51 = vmul_lane_f32(v47, *(float32x2_t *)v50.f32, 1);
      v52 = vmul_laneq_f32(v48, v50, 2);
      v53 = vmul_n_f32(v47, v50.f32[0]);
      v129 = v11;
      v54 = vmul_n_f32(v48, v50.f32[0]);
      v55 = vmul_n_f32(v49, v50.f32[0]);
      v56 = vmul_lane_f32(v48, *(float32x2_t *)v50.f32, 1);
      v57 = vmul_lane_f32(v49, *(float32x2_t *)v50.f32, 1);
      v58 = vmul_laneq_f32(v49, v50, 2);
      v59 = vsub_f32(_D24, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v50.f32), 0));
      *(int8x8_t *)v50.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D24, v51), v52), (int8x8_t)vadd_f32(v53, v58), 4uLL);
      v60 = (int8x8_t)vsub_f32(v53, v58);
      v61.i64[0] = v50.i64[0];
      v61.i64[1] = vsub_f32(v54, v57).u32[0];
      v62 = (int32x2_t)vext_s8(v60, (int8x8_t)vsub_f32(v59, v52), 4uLL);
      v63 = (int8x8_t)vadd_f32(v54, v57);
      *(int8x8_t *)v64.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v50.f32, 0), (int8x8_t)v62, 4uLL);
      v65 = (int8x8_t)vdup_lane_s32(v62, 1);
      *(int32x2_t *)v66.f32 = v62;
      v66.i64[1] = vadd_f32(v56, v55).u32[0];
      *(int8x8_t *)v67.f32 = vext_s8(v63, (int8x8_t)vsub_f32(v56, v55), 4uLL);
      *(int8x8_t *)v68.f32 = vext_s8(*(int8x8_t *)v50.f32, v65, 4uLL);
      v67.i64[1] = vsub_f32(v59, v51).u32[0];
      v64.i64[1] = vdup_lane_s32(*(int32x2_t *)v67.f32, 0).u32[0];
      v68.i64[1] = vdup_lane_s32(*(int32x2_t *)v67.f32, 1).u32[0];
      *(int8x8_t *)v69.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v61.u32[2], 0), *(int8x8_t *)&v66.u32[2], 4uLL);
      v69.i64[1] = vdup_lane_s32(*(int32x2_t *)&v67.u32[2], 0).u32[0];
      v70 = vmulq_n_f32(v64, v13.f32[0]);
      v70.i32[3] = 0;
      v71 = vmulq_lane_f32(v68, *(float32x2_t *)v13.f32, 1);
      v71.i32[3] = 0;
      v72 = vmulq_laneq_f32(v69, v13, 2);
      v72.i32[3] = 0;
      v73 = vmulq_n_f32(v70, v61.f32[0]);
      v73.i32[3] = 0;
      v74 = vmulq_lane_f32(v71, *(float32x2_t *)v61.f32, 1);
      v74.i32[3] = 0;
      v75 = vmulq_laneq_f32(v72, v61, 2);
      v75.i32[3] = 0;
      v43 = vaddq_f32(v75, vaddq_f32(v73, v74));
      v76 = vmulq_n_f32(v70, v66.f32[0]);
      v76.i32[3] = 0;
      v77 = vmulq_lane_f32(v71, *(float32x2_t *)v66.f32, 1);
      v77.i32[3] = 0;
      v78 = vmulq_laneq_f32(v72, v66, 2);
      v78.i32[3] = 0;
      v79 = vaddq_f32(v76, v77);
      v11 = v129;
      v15 = vaddq_f32(v78, v79);
      v80 = vmulq_n_f32(v70, v67.f32[0]);
      v80.i32[3] = 0;
      v81 = vmulq_lane_f32(v71, *(float32x2_t *)v67.f32, 1);
      v81.i32[3] = 0;
      v82 = vmulq_laneq_f32(v72, v67, 2);
      v82.i32[3] = 0;
      v7 = vaddq_f32(v82, vaddq_f32(v80, v81));
      v151 = (__int128)v43;
      v152 = (__int128)v15;
      v83 = vmulq_n_f32(v64, v40.f32[0]);
      v83.i32[3] = 0;
      v84 = vmulq_lane_f32(v68, *(float32x2_t *)v40.f32, 1);
      v84.i32[3] = 0;
      v85 = vmulq_laneq_f32(v69, v40, 2);
      v85.i32[3] = 0;
      v86 = vmulq_n_f32(v83, v61.f32[0]);
      v86.i32[3] = 0;
      v87 = vmulq_lane_f32(v84, *(float32x2_t *)v61.f32, 1);
      v87.i32[3] = 0;
      v88 = vmulq_laneq_f32(v85, v61, 2);
      v88.i32[3] = 0;
      v44 = vaddq_f32(v88, vaddq_f32(v86, v87));
      v89 = vmulq_n_f32(v83, v66.f32[0]);
      v89.i32[3] = 0;
      v90 = vmulq_lane_f32(v84, *(float32x2_t *)v66.f32, 1);
      v90.i32[3] = 0;
      v91 = vmulq_laneq_f32(v85, v66, 2);
      v91.i32[3] = 0;
      v92 = vaddq_f32(v89, v90);
      v10 = v130;
      v93 = vmulq_n_f32(v83, v67.f32[0]);
      v93.i32[3] = 0;
      v94 = vmulq_lane_f32(v84, *(float32x2_t *)v67.f32, 1);
      v94.i32[3] = 0;
      v45 = vaddq_f32(v91, v92);
      v95 = vmulq_laneq_f32(v85, v67, 2);
      v95.i32[3] = 0;
      v46 = vaddq_f32(v95, vaddq_f32(v93, v94));
    }
    else
    {
      v40.i32[3] = 0;
      v43 = vmulq_f32(v14, (float32x4_t)xmmword_2260E5F10);
      v15 = vmulq_f32(v14, (float32x4_t)xmmword_2260E5F20);
      v7 = vmulq_f32(v14, (float32x4_t)xmmword_2260E5F40);
      v151 = (__int128)v43;
      v152 = (__int128)v15;
      v44 = vmulq_f32(v40, (float32x4_t)xmmword_2260E5F10);
      v45 = vmulq_f32(v40, (float32x4_t)xmmword_2260E5F20);
      v46 = vmulq_f32(v40, (float32x4_t)xmmword_2260E5F40);
    }
    v153 = (__int128)v7;
    v154 = (__int128)v44;
    v155 = (__int128)v45;
    v156 = (__int128)v46;
    v96 = vmulq_f32(v43, (float32x4_t)0);
    v96.i32[3] = 0;
    v97 = vmulq_f32(v15, (float32x4_t)0);
    v97.i32[3] = 0;
    v39 = vmulq_f32(v7, (float32x4_t)0);
    v39.i32[3] = 0;
    v38 = vaddq_f32(v39, vaddq_f32(v97, v96));
    v148 = v38;
  }
  v38.f32[0] = (float)((float)((float)(v18 * v28) - (float)(v16 * v26)) - (float)(v17 * *(float *)v6.i32))
             + (float)(v27 * v19);
  v39.f32[0] = v38.f32[0] + v38.f32[0];
  v98 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 0);
  v15.f32[0] = (float)((float)((float)(v18 * *(float *)v6.i32) - (float)(v19 * v26)) - (float)(v16 * v27))
             + (float)(v28 * v17);
  v99 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 0);
  v100 = vmul_n_f32(v99, v38.f32[0] + v38.f32[0]);
  v7.f32[0] = (float)((float)((float)(v18 * v27) - (float)(v17 * v26)) - (float)(v19 * v28))
            + (float)(*(float *)v6.i32 * v16);
  *(float *)v6.i32 = (float)((float)((float)(v16 * v28) + (float)(v18 * v26)) + (float)(v17 * v27))
                   + (float)(v19 * *(float *)v6.i32);
  v101 = (float32x2_t)vdup_lane_s32(v6, 0);
  v102 = vmul_n_f32(v101, v7.f32[0] + v7.f32[0]);
  v103 = vmul_n_f32(v99, v7.f32[0] + v7.f32[0]);
  v104 = vmul_n_f32(v101, v38.f32[0] + v38.f32[0]);
  *(int8x8_t *)v105.f32 = vext_s8((int8x8_t)vadd_f32(v100, v102), (int8x8_t)vsub_f32(v103, v104), 4uLL);
  v38.f32[0] = v38.f32[0] * (float)(v38.f32[0] + v38.f32[0]);
  v106 = vsub_f32(_D24, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 0));
  v107 = vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 0), v7.f32[0] + v7.f32[0]);
  *(float32x2_t *)&v105.u32[2] = vsub_f32(v106, v107);
  v108 = vmul_n_f32(v98, v7.f32[0]);
  v109 = v15.f32[0] + v15.f32[0];
  v110 = vmul_n_f32(v101, v109);
  v111 = vmul_n_f32(v99, v109);
  *(int8x8_t *)v112.f32 = vext_s8((int8x8_t)vsub_f32(v108, v110), (int8x8_t)vsub_f32(v106, v111), 4uLL);
  *(float32x2_t *)&v112.u32[2] = vadd_f32(v104, v103);
  *(int8x8_t *)v113.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D24, v107), v111), (int8x8_t)vadd_f32(v108, v110), 4uLL);
  *(float32x2_t *)&v113.u32[2] = vsub_f32(v100, v102);
  v114 = (float)(v24 - v25) + (float)(v24 - v25);
  v115 = (float)(v20 - v23) + (float)(v20 - v23);
  v116 = (float)(v21 - v22) + (float)(v21 - v22);
  v117 = (float)((float)-(float)(v17 * v116) - (float)(v16 * v115)) - (float)(v19 * v114);
  v118 = (float)(v18 * v18) + -0.5;
  *(float *)&v119 = (float)((float)(v18 * (float)((float)(v17 * v115) - (float)(v16 * v116))) + (float)(v114 * v118))
                  - (float)(v19 * v117);
  v102.f32[0] = (float)((float)(v18 * (float)((float)(v16 * v114) - (float)(v19 * v115))) + (float)(v116 * v118))
              - (float)(v17 * v117);
  v120.f32[0] = (float)((float)(v18 * (float)((float)(v19 * v116) - (float)(v17 * v114))) + (float)(v115 * v118))
              - (float)(v16 * v117);
  v120.i32[1] = v102.i32[0];
  v120.i64[1] = v119;
  v158 = *(_QWORD *)(v9 + 80);
  v121 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, v12);
  v122 = vmulq_n_f32(v113, v121.f32[0]);
  v122.i32[3] = 0;
  v123 = vmulq_lane_f32(v112, *(float32x2_t *)v121.f32, 1);
  v123.i32[3] = 0;
  v124 = vmulq_laneq_f32(v105, v121, 2);
  v124.i32[3] = 0;
  v143 = 4;
  v138 = 0u;
  v139 = v120;
  v125 = vaddq_f32(v124, vaddq_f32(v123, v122));
  v147 = vdup_lane_s32((int32x2_t)a6, 0);
  v145 = vaddq_f32(v120, v125);
  v146 = vsubq_f32(v120, v125);
  v140 = a6.i32[0];
  v141 = a6.i32[0];
  v142 = a6.i32[0];
  v144 = 1;
  v136 = 0u;
  v137 = 0u;
  v135 = 0;
  v134[0] = off_24ED91108;
  v134[1] = &v139;
  v133[0] = off_24ED91168;
  v133[1] = &v148;
  v132 = vsubq_f32(v120, v148);
  v131 = 0;
  v126 = physx::Gu::gjk<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)v134, (uint64_t)v133, &v132, &v131, &v138, &v137, &v136, &v135, 0.0, *(double *)v132.i64, *(double *)v145.i64, (int32x4_t)0);
  if (a5 && v126 == 2)
  {
    *(_QWORD *)a5 = v10;
    a5[2] = v11;
    v127 = 2;
LABEL_22:
    *((_WORD *)a5 + 6) = v127;
    return v126 == 2;
  }
  if (a5)
  {
    v127 = 2 * (v126 == 2);
    goto LABEL_22;
  }
  return v126 == 2;
}

uint64_t GeomOverlapCallback_BoxBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v21;
  uint64_t v22;
  int32x2_t v23;
  __int128 v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int32x2_t v36;
  float v38[2];
  uint64_t v39;
  int32x2_t v40;
  __int128 v41;
  float v42[2];
  uint64_t v43;
  int32x2_t v44;
  __int128 v45;

  v4 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2, 1);
  v5 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 2);
  v6 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 3);
  _Q4 = vaddq_f32(*(float32x4_t *)a2, *(float32x4_t *)a2);
  v8 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a2, *(float32x2_t *)_Q4.f32), 0);
  v9 = vmul_lane_f32(v4, *(float32x2_t *)_Q4.f32, 1);
  v10 = vmul_laneq_f32(v5, _Q4, 2);
  v11 = vmul_n_f32(v4, _Q4.f32[0]);
  v12 = vmul_n_f32(v5, _Q4.f32[0]);
  v13 = vmul_n_f32(v6, _Q4.f32[0]);
  v14 = vmul_lane_f32(v5, *(float32x2_t *)_Q4.f32, 1);
  v15 = vmul_lane_f32(v6, *(float32x2_t *)_Q4.f32, 1);
  v16 = vmul_laneq_f32(v6, _Q4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  v21 = vsub_f32(*(float32x2_t *)_Q4.f32, v8);
  LODWORD(v22) = vsub_f32(v12, v15).u32[0];
  v23 = (int32x2_t)vadd_f32(v14, v13);
  *(int8x8_t *)&v24 = vext_s8((int8x8_t)vadd_f32(v12, v15), (int8x8_t)vsub_f32(v14, v13), 4uLL);
  *((_QWORD *)&v24 + 1) = vsub_f32(v21, v9).u32[0];
  v42[0] = (float)(1.0 - v9.f32[1]) - v10.f32[1];
  LODWORD(v42[1]) = vadd_f32(v11, v16).u32[0];
  HIDWORD(v22) = vsub_f32(v11, v16).i32[1];
  v43 = v22;
  v44 = vzip1_s32((int32x2_t)vsub_f32(v21, v10), v23);
  v45 = v24;
  v25 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a4, 1);
  *(int32x2_t *)&v24 = vdup_laneq_s32(*(int32x4_t *)a4, 2);
  v26 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a4, 3);
  v27 = vaddq_f32(*(float32x4_t *)a4, *(float32x4_t *)a4);
  v28 = vmul_lane_f32(v25, *(float32x2_t *)v27.f32, 1);
  v29 = vmul_laneq_f32(*(float32x2_t *)&v24, v27, 2);
  v30 = vmul_n_f32(v25, v27.f32[0]);
  v31 = vmul_n_f32(*(float32x2_t *)&v24, v27.f32[0]);
  v32 = vmul_n_f32(v26, v27.f32[0]);
  *(float32x2_t *)&v24 = vmul_lane_f32(*(float32x2_t *)&v24, *(float32x2_t *)v27.f32, 1);
  v33 = vmul_lane_f32(v26, *(float32x2_t *)v27.f32, 1);
  v34 = vmul_laneq_f32(v26, v27, 2);
  v35 = vsub_f32(*(float32x2_t *)_Q4.f32, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a4, *(float32x2_t *)v27.f32), 0));
  v27.i32[0] = vsub_f32(v31, v33).u32[0];
  v36 = (int32x2_t)vadd_f32(*(float32x2_t *)&v24, v32);
  *(int8x8_t *)&v24 = vext_s8((int8x8_t)vadd_f32(v31, v33), (int8x8_t)vsub_f32(*(float32x2_t *)&v24, v32), 4uLL);
  *((_QWORD *)&v24 + 1) = vsub_f32(v35, v28).u32[0];
  v38[0] = (float)(1.0 - v28.f32[1]) - v29.f32[1];
  LODWORD(v38[1]) = vadd_f32(v30, v34).u32[0];
  v27.i32[1] = vsub_f32(v30, v34).i32[1];
  v39 = v27.i64[0];
  v40 = vzip1_s32((int32x2_t)vsub_f32(v35, v29), v36);
  v41 = v24;
  return physx::Gu::intersectOBBOBB((float *)(a1 + 4), (float *)(a2 + 16), v42, (float *)(a3 + 4), (float *)(a4 + 16), (uint64_t)v38, 1);
}

uint64_t GeomOverlapCallback_BoxConvex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, int32x4_t a6, double a7, double a8, double a9, double a10, double a11)
{
  int32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  uint64_t v16;
  uint64_t v17;
  float v18;
  _BOOL4 v19;
  float v20;
  float v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  unsigned int v29;
  unsigned int v30;
  float v31;
  float v32;
  float v33;
  float32x2_t v34;
  float32x2_t v35;
  float v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v50;
  unsigned __int32 v51;
  int8x8_t v52;
  int8x8_t v53;
  unsigned __int32 v54;
  int8x8_t v55;
  int8x8_t v56;
  unsigned __int32 v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  __int32 v61;
  float32x4_t v62;
  int32x4_t v63;
  float32x2_t v64;
  int32x2_t v65;
  float32x4_t v66;
  int v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x4_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  int8x8_t v88;
  float32x4_t v89;
  int32x2_t v90;
  int8x8_t v91;
  float32x4_t v92;
  int8x8_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  int32x4_t v125;
  float32x2_t v126;
  float32x2_t v127;
  int32x2_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x2_t v135;
  float32x2_t v136;
  int v137;
  float32x2_t v138;
  float32x2_t v139;
  int v140;
  float32x4_t v141;
  float32x2_t v142;
  float32x2_t v143;
  float32x2_t v144;
  float32x4_t v145;
  float32x2_t v146;
  float32x2_t v147;
  float32x2_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x2_t v160;
  int8x8_t v161;
  uint64_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x2_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x2_t v168;
  float32x2_t v169;
  int v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  int8x8_t v174;
  float32x2_t v175;
  float32x2_t v176;
  float32x2_t v177;
  float32x2_t v178;
  float32x2_t v179;
  float32x2_t v180;
  int8x8_t v181;
  float32x4_t v182;
  float32x2_t v183;
  float32x2_t v184;
  int8x8_t v185;
  float32x4_t v186;
  int8x8_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x2_t v190;
  float32x4_t v191;
  float32x2_t v192;
  float32x4_t v193;
  float32x2_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x2_t v198;
  float32x4_t v199;
  float32x2_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x2_t v203;
  float32x4_t v204;
  float32x2_t v205;
  float32x4_t v206;
  float32x2_t v207;
  float32x4_t v208;
  float32x2_t v209;
  __int32 v210;
  uint64_t v211;
  uint64_t v212;
  float32x4_t v213;
  float32x2_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x2_t v217;
  float32x2_t v218;
  int v219;
  float32x4_t v220;
  float32x2_t v221;
  int v222;
  float32x2_t v223;
  float32x2_t v224;
  float32x2_t v225;
  int v226;
  unsigned int v227;
  float32x2_t v228;
  float32x2_t v229;
  float32x2_t v230;
  int v231;
  int8x16_t v232;
  float32x2_t v233;
  float32x2_t v234;
  int v235;
  float32x4_t v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  float32x4_t v241;
  float32x2_t v242;
  float32x2_t v243;
  int v244;
  float32x2_t v245;
  int v246;
  int16x4_t v247;
  int8x8_t v248;
  const float *f32;
  float32x2_t v250;
  float32x2_t v251;
  char v252;
  __int16 v253;
  int32x4_t v255;
  int32x2_t v256;
  uint64_t v257;
  int8x16_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  int8x8_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  int8x8_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  uint64_t (**v272)();
  float32x4_t *v273;
  float32x4_t v274;
  float32x4_t v275;
  unsigned int v276;
  float32x2_t v277;
  float32x2_t v278;
  float32x4_t v279;
  int32x2_t v280;
  float v281;
  int v282;
  char v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  char v293;
  _OWORD v294[4];
  _OWORD v295[4];
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298[2];
  uint64_t v299;

  v299 = *MEMORY[0x24BDAC8D0];
  v16 = *(_QWORD *)(a3 + 32);
  v17 = 0;
  if (a5)
  {
    v18 = 1.0;
    if (*((_WORD *)a5 + 6) == 2)
    {
      v17 = *(_QWORD *)a5;
      v18 = a5[2];
    }
  }
  else
  {
    v18 = 1.0;
  }
  v257 = v17;
  v19 = 0;
  LODWORD(a11) = *(_DWORD *)(a4 + 4);
  v20 = *(float *)(a4 + 8);
  v21 = *(float *)(a4 + 12);
  v22 = *(float32x4_t *)(a3 + 4);
  v23 = v22;
  v23.i32[3] = 0;
  v24 = *(float *)(a2 + 16) - *(float *)(a4 + 16);
  *(float *)v11.i32 = *(float *)(a2 + 20) - *(float *)(a4 + 20);
  v25 = *(float *)(a2 + 24) - *(float *)(a4 + 24);
  v26 = v24 + v24;
  *(float *)v11.i32 = *(float *)v11.i32 + *(float *)v11.i32;
  v27 = v25 + v25;
  *(float *)v12.i32 = (float)(v21 * v21) + -0.5;
  v28 = (float)((float)-(float)(*(float *)&a11 * *(float *)v11.i32) - (float)(*(float *)a4 * v26)) - (float)(v20 * v27);
  *(float *)&v29 = (float)((float)(v21 * (float)((float)(v20 * *(float *)v11.i32) - (float)(*(float *)&a11 * v27)))
                         + (float)(v26 * *(float *)v12.i32))
                 - (float)(*(float *)a4 * v28);
  *(float *)&v30 = (float)((float)(v21 * (float)((float)(*(float *)a4 * v27) - (float)(v20 * v26)))
                         + (float)(*(float *)v11.i32 * *(float *)v12.i32))
                 - (float)(*(float *)&a11 * v28);
  v31 = (float)((float)(v21 * (float)((float)(*(float *)&a11 * v26) - (float)(*(float *)a4 * *(float *)v11.i32)))
              + (float)(v27 * *(float *)v12.i32))
      - (float)(v20 * v28);
  v32 = *(float *)(a2 + 8);
  v11.i32[0] = *(_DWORD *)(a2 + 12);
  v33 = *(float *)(a2 + 4);
  *(float *)v12.i32 = (float)((float)((float)(v21 * *(float *)a2) - (float)(*(float *)a4 * *(float *)v11.i32))
                            - (float)(*(float *)&a11 * v32))
                    + (float)(v33 * v20);
  *(float *)v13.i32 = (float)((float)((float)(v21 * v33) - (float)(*(float *)&a11 * *(float *)v11.i32))
                            - (float)(v20 * *(float *)a2))
                    + (float)(v32 * *(float *)a4);
  *(float *)v14.i32 = (float)((float)((float)(v21 * v32) - (float)(v20 * *(float *)v11.i32))
                            - (float)(*(float *)a4 * v33))
                    + (float)(*(float *)a2 * *(float *)&a11);
  *(float *)&a11 = (float)((float)((float)(*(float *)a4 * *(float *)a2) + (float)(v21 * *(float *)v11.i32))
                         + (float)(*(float *)&a11 * v33))
                 + (float)(v20 * v32);
  v265 = (float32x4_t)__PAIR64__(v30, v29);
  v34 = (float32x2_t)vdup_lane_s32(v14, 0);
  v35 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a11, 0);
  *(float *)v11.i32 = *(float *)v12.i32 + *(float *)v12.i32;
  v36 = *(float *)v13.i32 + *(float *)v13.i32;
  *(float *)v12.i32 = *(float *)v12.i32 * (float)(*(float *)v12.i32 + *(float *)v12.i32);
  v37 = vmul_n_f32((float32x2_t)vdup_lane_s32(v13, 0), *(float *)v13.i32 + *(float *)v13.i32);
  v38 = vmul_n_f32(v34, *(float *)v14.i32 + *(float *)v14.i32);
  v39 = vmul_n_f32((float32x2_t)vdup_lane_s32(v11, 0), *(float *)v13.i32);
  v40 = vmul_n_f32(v34, *(float *)v11.i32);
  v41 = vmul_n_f32(v35, *(float *)v11.i32);
  v42 = vmul_n_f32(v34, *(float *)v13.i32 + *(float *)v13.i32);
  v43 = vmul_n_f32(v35, v36);
  v44 = vmul_n_f32(v35, *(float *)v14.i32 + *(float *)v14.i32);
  __asm { FMOV            V10.2S, #1.0 }
  v50 = vsub_f32(_D10, (float32x2_t)vdup_lane_s32(v12, 0));
  v51 = vsub_f32(v40, v43).u32[0];
  v52 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D10, v37), v38), (int8x8_t)vadd_f32(v39, v44), 4uLL);
  v53 = (int8x8_t)vsub_f32(v39, v44);
  v54 = vadd_f32(v41, v42).u32[0];
  v263 = vext_s8(v53, (int8x8_t)vsub_f32(v50, v38), 4uLL);
  v55 = (int8x8_t)vadd_f32(v40, v43);
  v56 = (int8x8_t)vsub_f32(v42, v41);
  v57 = vsub_f32(v50, v37).u32[0];
  v267 = vext_s8(v55, v56, 4uLL);
  if (*(float *)(a3 + 4) == 1.0 && *(float *)(a3 + 8) == 1.0)
    v19 = *(float *)(a3 + 12) == 1.0;
  v58 = *(float32x4_t *)(a3 + 16);
  a6.i64[0] = *(_QWORD *)(a1 + 4);
  v59 = v265;
  v59.f32[2] = v31;
  *(int8x8_t *)v60.f32 = v52;
  v60.i64[1] = v51;
  v269 = v60;
  v61 = *(_DWORD *)(a1 + 12);
  *(int8x8_t *)v62.f32 = v263;
  v62.i64[1] = v54;
  v264 = v62;
  v266 = v59;
  *(int8x8_t *)v62.f32 = v267;
  v62.i64[1] = v57;
  v268 = v62;
  v283 = 0;
  v290 = v16 + 32;
  v292 = *(_QWORD *)(v16 + 72) + 20 * *(unsigned __int8 *)(v16 + 71);
  v293 = *(_BYTE *)(v16 + 70);
  v62.i64[0] = *(_QWORD *)(v16 + 92);
  v62.i64[1] = *(unsigned int *)(v16 + 100);
  v63 = (int32x4_t)vmulq_f32(v23, v62);
  v279 = 0uLL;
  v282 = (unsigned __int128)0 >> 96;
  v64 = vpmin_f32((float32x2_t)vdup_laneq_s32(v63, 2), *(float32x2_t *)v63.i8);
  *(float *)v63.i32 = vpmin_f32(v64, v64).f32[0];
  v65 = (int32x2_t)vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v63.i32);
  v280 = v65;
  v281 = 0.025 * *(float *)v63.i32;
  if (v19)
  {
    v284 = xmmword_2260E5F10;
    v285 = xmmword_2260E5F20;
    v286 = xmmword_2260E5F40;
    v287 = xmmword_2260E5F10;
    v288 = xmmword_2260E5F20;
    v289 = xmmword_2260E5F40;
  }
  else
  {
    v66 = vrecpeq_f32(v23);
    v67 = 4;
    do
    {
      v66 = vmulq_f32(v66, vrecpsq_f32(v66, v23));
      --v67;
    }
    while (v67);
    *(int32x2_t *)v68.f32 = vdup_lane_s32(*(int32x2_t *)v22.f32, 0);
    v68.i64[1] = v68.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v68, v23)), *(int8x8_t *)a6.i8).u32[0] & 0xFFFFFF) != 0)
    {
      v75 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v58.f32, 1);
      v76 = (float32x2_t)vdup_laneq_s32((int32x4_t)v58, 2);
      v77 = (float32x2_t)vdup_laneq_s32((int32x4_t)v58, 3);
      v78 = vaddq_f32(v58, v58);
      v79 = vmul_lane_f32(v75, *(float32x2_t *)v78.f32, 1);
      v80 = vmul_laneq_f32(v76, v78, 2);
      v81 = vmul_n_f32(v75, v78.f32[0]);
      v82 = vmul_n_f32(v76, v78.f32[0]);
      v83 = vmul_n_f32(v77, v78.f32[0]);
      v84 = vmul_lane_f32(v76, *(float32x2_t *)v78.f32, 1);
      v85 = vmul_lane_f32(v77, *(float32x2_t *)v78.f32, 1);
      v86 = vmul_laneq_f32(v77, v78, 2);
      v87 = vsub_f32(_D10, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v78.f32), 0));
      *(int8x8_t *)v78.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D10, v79), v80), (int8x8_t)vadd_f32(v81, v86), 4uLL);
      v88 = (int8x8_t)vsub_f32(v81, v86);
      v89.i64[0] = v78.i64[0];
      v89.i64[1] = vsub_f32(v82, v85).u32[0];
      v90 = (int32x2_t)vext_s8(v88, (int8x8_t)vsub_f32(v87, v80), 4uLL);
      v91 = (int8x8_t)vadd_f32(v82, v85);
      *(int8x8_t *)v92.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v78.f32, 0), (int8x8_t)v90, 4uLL);
      v93 = (int8x8_t)vdup_lane_s32(v90, 1);
      *(int32x2_t *)v94.f32 = v90;
      v94.i64[1] = vadd_f32(v84, v83).u32[0];
      *(int8x8_t *)v95.f32 = vext_s8(v91, (int8x8_t)vsub_f32(v84, v83), 4uLL);
      *(int8x8_t *)v96.f32 = vext_s8(*(int8x8_t *)v78.f32, v93, 4uLL);
      v95.i64[1] = vsub_f32(v87, v79).u32[0];
      v92.i64[1] = vdup_lane_s32(*(int32x2_t *)v95.f32, 0).u32[0];
      v96.i64[1] = vdup_lane_s32(*(int32x2_t *)v95.f32, 1).u32[0];
      *(int8x8_t *)v97.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v89.u32[2], 0), (int8x8_t)v94.u32[2], 4uLL);
      v97.i64[1] = vdup_lane_s32(*(int32x2_t *)&v95.u32[2], 0).u32[0];
      v98 = vmulq_n_f32(v92, v22.f32[0]);
      v98.i32[3] = 0;
      v99 = vmulq_lane_f32(v96, *(float32x2_t *)v22.f32, 1);
      v99.i32[3] = 0;
      v100 = vmulq_laneq_f32(v97, v22, 2);
      v100.i32[3] = 0;
      v101 = vmulq_n_f32(v98, v89.f32[0]);
      v101.i32[3] = 0;
      v102 = vmulq_lane_f32(v99, *(float32x2_t *)v89.f32, 1);
      v102.i32[3] = 0;
      v103 = vmulq_laneq_f32(v100, v89, 2);
      v103.i32[3] = 0;
      v69 = vaddq_f32(v103, vaddq_f32(v101, v102));
      v104 = vmulq_n_f32(v98, v94.f32[0]);
      v104.i32[3] = 0;
      v105 = vmulq_lane_f32(v99, *(float32x2_t *)v94.f32, 1);
      v105.i32[3] = 0;
      v106 = vmulq_laneq_f32(v100, v94, 2);
      v106.i32[3] = 0;
      v70 = vaddq_f32(v106, vaddq_f32(v104, v105));
      v107 = vmulq_n_f32(v98, v95.f32[0]);
      v107.i32[3] = 0;
      v108 = vmulq_lane_f32(v99, *(float32x2_t *)v95.f32, 1);
      v108.i32[3] = 0;
      v109 = vmulq_laneq_f32(v100, v95, 2);
      v109.i32[3] = 0;
      v71 = vaddq_f32(v109, vaddq_f32(v107, v108));
      v284 = (__int128)v69;
      v285 = (__int128)v70;
      v110 = vmulq_n_f32(v92, v66.f32[0]);
      v110.i32[3] = 0;
      v111 = vmulq_lane_f32(v96, *(float32x2_t *)v66.f32, 1);
      v111.i32[3] = 0;
      v112 = vmulq_laneq_f32(v97, v66, 2);
      v112.i32[3] = 0;
      v113 = vmulq_n_f32(v110, v89.f32[0]);
      v113.i32[3] = 0;
      v114 = vmulq_lane_f32(v111, *(float32x2_t *)v89.f32, 1);
      v114.i32[3] = 0;
      v115 = vmulq_laneq_f32(v112, v89, 2);
      v115.i32[3] = 0;
      v72 = vaddq_f32(v115, vaddq_f32(v113, v114));
      v116 = vmulq_n_f32(v110, v94.f32[0]);
      v116.i32[3] = 0;
      v117 = vmulq_lane_f32(v111, *(float32x2_t *)v94.f32, 1);
      v117.i32[3] = 0;
      v118 = vmulq_laneq_f32(v112, v94, 2);
      v118.i32[3] = 0;
      v119 = vmulq_n_f32(v110, v95.f32[0]);
      v119.i32[3] = 0;
      v120 = vmulq_lane_f32(v111, *(float32x2_t *)v95.f32, 1);
      v120.i32[3] = 0;
      v73 = vaddq_f32(v118, vaddq_f32(v116, v117));
      v121 = vmulq_laneq_f32(v112, v95, 2);
      v121.i32[3] = 0;
      v74 = vaddq_f32(v121, vaddq_f32(v119, v120));
    }
    else
    {
      v66.i32[3] = 0;
      v69 = vmulq_f32(v23, (float32x4_t)xmmword_2260E5F10);
      v70 = vmulq_f32(v23, (float32x4_t)xmmword_2260E5F20);
      v71 = vmulq_f32(v23, (float32x4_t)xmmword_2260E5F40);
      v284 = (__int128)v69;
      v285 = (__int128)v70;
      v72 = vmulq_f32(v66, (float32x4_t)xmmword_2260E5F10);
      v73 = vmulq_f32(v66, (float32x4_t)xmmword_2260E5F20);
      v74 = vmulq_f32(v66, (float32x4_t)xmmword_2260E5F40);
    }
    v287 = (__int128)v72;
    v288 = (__int128)v73;
    v289 = (__int128)v74;
    v122 = vmulq_f32(v69, (float32x4_t)0);
    v122.i32[3] = 0;
    v123 = vmulq_f32(v70, (float32x4_t)0);
    v123.i32[3] = 0;
    v124 = vmulq_f32(v71, (float32x4_t)0);
    v124.i32[3] = 0;
    v286 = (__int128)v71;
    v279 = vaddq_f32(v124, vaddq_f32(v123, v122));
  }
  v125 = a6;
  v125.i32[2] = v61;
  v291 = *(_QWORD *)(v16 + 80);
  v126 = (float32x2_t)vdup_laneq_s32(v125, 2);
  v125.i32[3] = 0;
  v262 = (float32x4_t)v125;
  v127 = vpmin_f32(v126, *(float32x2_t *)a6.i8);
  v128 = (int32x2_t)vpmin_f32(v127, v127);
  v127.f32[0] = 0.15 * *(float *)v128.i32;
  v256 = (int32x2_t)v127;
  v129 = vzip1q_s32((int32x4_t)v269, (int32x4_t)v268);
  v130 = vzip1q_s32((int32x4_t)v264, (int32x4_t)0);
  v131 = vdupq_laneq_s32((int32x4_t)v264, 2);
  v261 = (float32x4_t)vzip2q_s32(v129, v130);
  v272 = off_24ED91168;
  v273 = &v279;
  v276 = 0;
  v132 = vmulq_f32(v266, v266);
  v132.i64[0] = vpaddq_f32(v132, v132).u64[0];
  v133 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v132.f32, *(float32x2_t *)v132.f32)), 0), (int8x16_t)v266, (int8x16_t)xmmword_2260E5F10);
  v275 = v133;
  v134 = vmulq_f32(v133, v133);
  v134.i64[0] = vpaddq_f32(v134, v134).u64[0];
  v135 = vpadd_f32(*(float32x2_t *)v134.f32, *(float32x2_t *)v134.f32);
  v136 = vrsqrte_f32(v135);
  v137 = 4;
  do
  {
    v136 = vmul_f32(v136, vrsqrts_f32(vmul_f32(v136, v136), v135));
    --v137;
  }
  while (v137);
  *(float *)v128.i32 = *(float *)v128.i32 * 0.05;
  v260 = (float32x4_t)vzip1q_s32(v129, v130);
  v138 = vmul_f32(v135, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v135), 0), (int8x8_t)_D10, (int8x8_t)v136));
  v139 = vrecpe_f32(v138);
  v140 = 4;
  do
  {
    v139 = vmul_f32(v139, vrecps_f32(v138, v139));
    --v140;
  }
  while (v140);
  v141 = vmulq_n_f32(v133, v139.f32[0]);
  v141.i32[3] = 0;
  v259 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v269, (int32x4_t)v268), v131);
  v142 = vmul_f32(vmin_f32((float32x2_t)vdup_lane_s32(v128, 0), (float32x2_t)vdup_lane_s32(v65, 1)), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  v143 = vmax_f32(v142, (float32x2_t)vdup_n_s32(0x358637BDu));
  v142.i32[0] = -v283;
  v144 = vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v142, (int8x8_t)v65), 0), 0);
  v145 = vnegq_f32(v262);
  v146 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  v145.i32[3] = 0;
  v258 = (int8x16_t)v145;
  v147 = (float32x2_t)vdup_n_s32(0x3F7FF141u);
  v145.i32[0] = -1;
  v255 = (int32x4_t)v145;
  do
  {
    v271 = v141;
    v148 = v146;
    v274 = v133;
    v149 = vnegq_f32(v133);
    v150 = vmulq_n_f32(v260, v149.f32[0]);
    v150.i32[3] = 0;
    v151 = vmulq_lane_f32(v261, *(float32x2_t *)v149.f32, 1);
    v151.i32[3] = 0;
    v152 = vmulq_laneq_f32(v259, v149, 2);
    v152.i32[3] = 0;
    v153 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vaddq_f32(v152, vaddq_f32(v150, v151))), (int8x16_t)v262, v258);
    v154 = vmulq_n_f32(v269, v153.f32[0]);
    v154.i32[3] = 0;
    v155 = vmulq_lane_f32(v264, *(float32x2_t *)v153.f32, 1);
    v155.i32[3] = 0;
    v156 = vmulq_laneq_f32(v268, v153, 2);
    v156.i32[3] = 0;
    v270 = vaddq_f32(v266, vaddq_f32(v156, vaddq_f32(v154, v155)));
    *(double *)v157.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support((uint64_t)&v272, &v275);
    v158 = v157;
    v133 = vsubq_f32(v270, v157);
    v159 = vmulq_f32(v271, v133);
    v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
    v160 = vpadd_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32);
    v161 = (int8x8_t)vcgt_f32(v160, v144);
    if ((vmvn_s8(v161).u8[0] & 1) == 0)
      goto LABEL_74;
    v162 = v276;
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(v161, (int8x8_t)vcgt_f32(v160, vmul_f32(v148, v147))), 0), *(int8x8_t *)v133.f32).u32[0] == -1)
    {
      if (v276 == 3)
      {
        v277 = 0;
        v278 = 0;
        physx::Gu::barycentricCoordinates(&v275, &v296, &v297, v298, &v278, &v277);
      }
LABEL_74:
      v252 = 0;
      goto LABEL_75;
    }
    v295[v276] = v270;
    v294[v162] = v158;
    v276 = v162 + 1;
    *(&v296 + v162) = v133;
    switch((_DWORD)v162)
    {
      case 3:
        physx::Gu::closestPtPointTetrahedron(&v296, v295, v294, (int *)&v276);
        break;
      case 2:
        v133 = v296;
        v171 = vsubq_f32(v297, v296);
        v172 = vsubq_f32(v298[0], v296);
        v174 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v171.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v172, (int8x16_t)v172, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v171, (int8x16_t)v171, 4uLL), *(float32x2_t *)v172.f32);
        *(int8x8_t *)v173.f32 = vext_s8(v174, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v171, (int8x16_t)v171, 8uLL), *(float32x2_t *)v172.f32), *(float32x2_t *)v171.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v172, (int8x16_t)v172, 8uLL)), 4uLL);
        v174.i32[1] = 0;
        v276 = 3;
        v175 = vpadd_f32(vmul_f32(*(float32x2_t *)v173.f32, *(float32x2_t *)v173.f32), vmul_f32((float32x2_t)v174.u32[0], (float32x2_t)v174.u32[0]));
        v176 = vpadd_f32(v175, v175);
        if (v176.f32[0] <= 0.00000011921)
        {
          v276 = 2;
          v213 = vmulq_f32(v171, v171);
          v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
          v214 = vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v214), 0), *(int8x8_t *)v296.f32).u32[0] == -1)
          {
LABEL_46:
            v276 = 1;
            break;
          }
          v215 = vnegq_f32(v296);
          v215.i32[3] = 0;
          v216 = vmulq_f32(v215, v171);
          v216.i64[0] = vpaddq_f32(v216, v216).u64[0];
          v217 = vpadd_f32(*(float32x2_t *)v216.f32, *(float32x2_t *)v216.f32);
          v218 = vrecpe_f32(v214);
          v219 = 4;
          do
          {
            v218 = vmul_f32(v218, vrecps_f32(v214, v218));
            --v219;
          }
          while (v219);
          v133 = vmlaq_n_f32(v296, v171, vmax_f32(vmin_f32(vmul_f32(v217, v218), _D10), 0).f32[0]);
          goto LABEL_45;
        }
        if (v176.f32[0] == 0.0)
        {
          v133 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v173.u32[2] = v174;
          v177 = (float32x2_t)vextq_s8((int8x16_t)v297, (int8x16_t)v297, 8uLL).u64[0];
          v178 = (float32x2_t)vextq_s8((int8x16_t)v298[0], (int8x16_t)v298[0], 8uLL).u64[0];
          v179 = (float32x2_t)vextq_s8((int8x16_t)v298[0], (int8x16_t)v298[0], 4uLL).u64[0];
          v180 = (float32x2_t)vextq_s8((int8x16_t)v297, (int8x16_t)v297, 4uLL).u64[0];
          v181 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v297.f32, v179), v180, *(float32x2_t *)v298[0].f32);
          *(int8x8_t *)v182.f32 = vext_s8(v181, (int8x8_t)vmls_f32(vmul_f32(v177, *(float32x2_t *)v298[0].f32), *(float32x2_t *)v297.f32, v178), 4uLL);
          v182.i64[1] = v181.u32[0];
          v183 = (float32x2_t)vextq_s8((int8x16_t)v296, (int8x16_t)v296, 8uLL).u64[0];
          v184 = (float32x2_t)vextq_s8((int8x16_t)v296, (int8x16_t)v296, 4uLL).u64[0];
          v185 = (int8x8_t)vmls_f32(vmul_f32(v184, *(float32x2_t *)v298[0].f32), v179, *(float32x2_t *)v296.f32);
          *(int8x8_t *)v186.f32 = vext_s8(v185, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v296.f32, v178), *(float32x2_t *)v298[0].f32, v183), 4uLL);
          v186.i64[1] = v185.u32[0];
          v187 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v296.f32, v180), v184, *(float32x2_t *)v297.f32);
          *(int8x8_t *)v188.f32 = vext_s8(v187, (int8x8_t)vmls_f32(vmul_f32(v183, *(float32x2_t *)v297.f32), *(float32x2_t *)v296.f32, v177), 4uLL);
          v188.i64[1] = v187.u32[0];
          v189 = vmulq_f32(v182, v173);
          v189.i64[0] = vpaddq_f32(v189, v189).u64[0];
          v190 = vpadd_f32(*(float32x2_t *)v189.f32, *(float32x2_t *)v189.f32);
          v191 = vmulq_f32(v186, v173);
          v191.i64[0] = vpaddq_f32(v191, v191).u64[0];
          v192 = vpadd_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32);
          v193 = vmulq_f32(v188, v173);
          v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
          v194 = vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v192), (int8x8_t)vcgez_f32(v190)), (int8x8_t)vcgez_f32(v194)), 0), *(int8x8_t *)v296.f32).u32[0] == -1)
          {
            v220 = vmulq_f32(v296, v173);
            v221 = vrecpe_f32(v176);
            v222 = 4;
            do
            {
              v221 = vmul_f32(v221, vrecps_f32(v176, v221));
              --v222;
            }
            while (v222);
            v223 = (float32x2_t)vpaddq_f32(v220, v220).u64[0];
            v133 = vmulq_n_f32(v173, vmul_f32(v221, vpadd_f32(v223, v223)).f32[0]);
            v133.i32[3] = 0;
          }
          else
          {
            v195 = vnegq_f32(v296);
            v195.i32[3] = 0;
            v196 = vnegq_f32(v297);
            v196.i32[3] = 0;
            v197 = vmulq_f32(v195, v171);
            v197.i64[0] = vpaddq_f32(v197, v197).u64[0];
            v198 = vpadd_f32(*(float32x2_t *)v197.f32, *(float32x2_t *)v197.f32);
            v199 = vmulq_f32(v171, v196);
            v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
            v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v198), (int8x8_t)vclez_f32(v200)), (int8x8_t)vclez_f32(v194)), 0), *(int8x8_t *)v296.f32).u32[0] == -1)
            {
              v224 = vsub_f32(v198, v200);
              v225 = vrecpe_f32(v224);
              v226 = 4;
              do
              {
                v225 = vmul_f32(v225, vrecps_f32(v224, v225));
                --v226;
              }
              while (v226);
              v212 = 0;
              v133 = vmlaq_n_f32(v296, v171, vmul_f32(v198, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v224), (float32x2_t)0x3400000034000000), (int8x8_t)v225, 0)).f32[0]);
              v133.i64[1] = vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u32[0];
              v227 = 2;
              v211 = 1;
            }
            else
            {
              v201 = vnegq_f32(v298[0]);
              v201.i32[3] = 0;
              v202 = vmulq_f32(v196, v172);
              v202.i64[0] = vpaddq_f32(v202, v202).u64[0];
              v203 = vpadd_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v202.f32);
              v204 = vmulq_f32(v171, v201);
              v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
              v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
              v206 = vmulq_f32(v172, v201);
              v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
              v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v203, v200), (int8x8_t)vcge_f32(v205, v207)), (int8x8_t)vclez_f32(v190)), 0), *(int8x8_t *)v296.f32).u32[0] == -1)
              {
                v228 = vsub_f32(v203, v200);
                v229 = vadd_f32(v228, vsub_f32(v205, v207));
                v230 = vrecpe_f32(v229);
                v231 = 4;
                do
                {
                  v230 = vmul_f32(v230, vrecps_f32(v229, v230));
                  --v231;
                }
                while (v231);
                v232 = (int8x16_t)vmlaq_n_f32(v297, vsubq_f32(v298[0], v297), vmul_f32(v228, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v229), (float32x2_t)0x3400000034000000), (int8x8_t)v230, 0)).f32[0]);
                v232.i64[1] = vextq_s8(v232, v232, 8uLL).u32[0];
                v227 = 2;
                v211 = 2;
                v212 = 1;
                v133 = (float32x4_t)v232;
              }
              else
              {
                v208 = vmulq_f32(v195, v172);
                v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
                v209 = vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v209), (int8x8_t)vclez_f32(v207)), (int8x8_t)vclez_f32(v192)), 0), *(int8x8_t *)v296.f32).u32[0] == -1)
                {
                  v233 = vsub_f32(v209, v207);
                  v234 = vrecpe_f32(v233);
                  v235 = 4;
                  do
                  {
                    v234 = vmul_f32(v234, vrecps_f32(v233, v234));
                    --v235;
                  }
                  while (v235);
                  v212 = 0;
                  v133 = vmlaq_n_f32(v296, v172, vmul_f32(v209, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v233), (float32x2_t)0x3400000034000000), (int8x8_t)v234, 0)).f32[0]);
                  v133.i64[1] = vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u32[0];
                  v211 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v209), (int8x8_t)vclez_f32(v198)), 0), *(int8x8_t *)v296.f32).u32[0] == -1)
                {
                  v212 = 0;
                  v211 = 1;
                }
                else
                {
                  *(int16x4_t *)v133.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v200, v203), (int8x8_t)vcgez_f32(v200)), 0);
                  *(int8x8_t *)v133.f32 = vuzp1_s8(*(int8x8_t *)v133.f32, *(int8x8_t *)v133.f32);
                  v210 = v133.i32[0];
                  v133 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v133, v255), 0), (int8x16_t)v297, (int8x16_t)v298[0]);
                  v211 = 1;
                  if (v210 == -1)
                    v212 = 1;
                  else
                    v212 = 2;
                }
                v227 = v211;
              }
            }
            v236 = *(&v296 + v211);
            v237 = v295[v212];
            v238 = v295[v211];
            v239 = v294[v212];
            v240 = v294[v211];
            v296 = *(&v296 + v212);
            v297 = v236;
            v295[0] = v237;
            v295[1] = v238;
            v294[0] = v239;
            v294[1] = v240;
            v276 = v227;
          }
        }
        break;
      case 1:
        v133 = v296;
        v163 = vsubq_f32(v297, v296);
        v164 = vmulq_f32(v163, v163);
        v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
        v165 = vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v165), 0), *(int8x8_t *)v296.f32).u32[0] == -1)goto LABEL_46;
        v166 = vnegq_f32(v296);
        v166.i32[3] = 0;
        v167 = vmulq_f32(v166, v163);
        v167.i64[0] = vpaddq_f32(v167, v167).u64[0];
        v168 = vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32);
        v169 = vrecpe_f32(v165);
        v170 = 4;
        do
        {
          v169 = vmul_f32(v169, vrecps_f32(v165, v169));
          --v170;
        }
        while (v170);
        v133 = vmlaq_n_f32(v296, v163, vmax_f32(vmin_f32(vmul_f32(v168, v169), _D10), 0).f32[0]);
LABEL_45:
        v133.i64[1] = vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u32[0];
        break;
    }
    v275 = v133;
    v241 = vmulq_f32(v133, v133);
    v241.i64[0] = vpaddq_f32(v241, v241).u64[0];
    v242 = vpadd_f32(*(float32x2_t *)v241.f32, *(float32x2_t *)v241.f32);
    v243 = vrsqrte_f32(v242);
    v244 = 4;
    do
    {
      v243 = vmul_f32(v243, vrsqrts_f32(vmul_f32(v243, v243), v242));
      --v244;
    }
    while (v244);
    v146 = vmul_f32(v242, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v242), 0), (int8x8_t)_D10, (int8x8_t)v243));
    v245 = vrecpe_f32(v146);
    v246 = 4;
    do
    {
      v245 = vmul_f32(v245, vrecps_f32(v146, v245));
      --v246;
    }
    while (v246);
    v141 = vmulq_n_f32(v133, v245.f32[0]);
    v141.i32[3] = 0;
    v247 = (int16x4_t)vcgt_f32(v148, v146);
  }
  while (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v146, v143), (int8x8_t)v247), 0), *(int8x8_t *)v133.f32).u32[0] == -1);
  v248 = (int8x8_t)vdup_lane_s16(v247, 0);
  if (vuzp1_s8(v248, v248).u32[0] == -1)
  {
    v252 = 1;
  }
  else
  {
    f32 = v273[1].f32;
    v250 = vld1_dup_f32(f32);
    v251 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v144), 0), (int8x8_t)v144, (int8x8_t)vmul_f32(vmin_f32((float32x2_t)vdup_lane_s32(v256, 0), v250), (float32x2_t)vdup_n_s32(0x3E4CCCCDu)));
    if (v276 == 3)
    {
      v277 = 0;
      v278 = 0;
      physx::Gu::barycentricCoordinates(&v274, &v296, &v297, v298, &v278, &v277);
    }
    v252 = vcgt_f32(vmax_f32(vsub_f32(v148, v144), 0), v251).u8[0] ^ 1;
  }
  if (a5 && (v252 & 1) != 0)
  {
    *(_QWORD *)a5 = v257;
    a5[2] = v18;
    v253 = 2;
    v252 = 1;
    goto LABEL_83;
  }
LABEL_75:
  if (!a5)
    return v252 & 1;
  if ((v252 & 1) != 0)
    v253 = 2;
  else
    v253 = 0;
LABEL_83:
  *((_WORD *)a5 + 6) = v253;
  return v252 & 1;
}

uint64_t GeomOverlapCallback_ConvexConvex(uint64_t a1, int8x8_t *a2, uint64_t a3, float32x4_t *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  int8x8_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x8_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  int32x4_t v45;
  _BOOL4 v46;
  float32x4_t v47;
  int32x4_t v48;
  float32x2_t v49;
  float v50;
  int32x2_t v51;
  float32x4_t v52;
  int v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x4_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x4_t v73;
  int32x2_t v74;
  int8x8_t v75;
  float32x4_t v76;
  int8x8_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  _BOOL4 v111;
  float32x4_t v112;
  int32x4_t v113;
  int32x2_t v114;
  float32x4_t v115;
  int v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x2_t v124;
  float32x2_t v125;
  float32x2_t v126;
  float32x4_t v127;
  float32x2_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x2_t v131;
  float32x2_t v132;
  float32x2_t v133;
  float32x2_t v134;
  float32x2_t v135;
  float32x2_t v136;
  int8x8_t v137;
  float32x4_t v138;
  int32x2_t v139;
  int8x8_t v140;
  float32x4_t v141;
  int8x8_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x2x2_t v176;
  int32x4_t v177;
  float *v178;
  float *v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x2_t v184;
  int v185;
  float32x2_t v186;
  int v187;
  float32x4_t v188;
  float32x2_t v189;
  float32x2_t v190;
  float v191;
  float32x2_t v192;
  float32x2_t v193;
  float32x2_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x2_t v200;
  uint64_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x2_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x2_t v207;
  float32x2_t v208;
  int v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  int8x8_t v213;
  float32x2_t v214;
  float32x2_t v215;
  float32x2_t v216;
  float32x2_t v217;
  float32x2_t v218;
  float32x2_t v219;
  int8x8_t v220;
  float32x4_t v221;
  float32x2_t v222;
  float32x2_t v223;
  int8x8_t v224;
  float32x4_t v225;
  int8x8_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x2_t v229;
  float32x4_t v230;
  float32x2_t v231;
  float32x4_t v232;
  float32x2_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x2_t v237;
  float32x4_t v238;
  float32x2_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x2_t v242;
  float32x4_t v243;
  float32x2_t v244;
  float32x4_t v245;
  float32x2_t v246;
  float32x4_t v247;
  float32x2_t v248;
  __int32 v249;
  uint64_t v250;
  uint64_t v251;
  float32x4_t v252;
  float32x2_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x2_t v256;
  float32x2_t v257;
  int v258;
  float32x4_t v259;
  float32x2_t v260;
  int v261;
  float32x2_t v262;
  float32x2_t v263;
  float32x2_t v264;
  int v265;
  unsigned int v266;
  float32x2_t v267;
  float32x2_t v268;
  float32x2_t v269;
  int v270;
  int8x16_t v271;
  float32x2_t v272;
  float32x2_t v273;
  int v274;
  float32x4_t v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  float32x4_t v280;
  float32x2_t v281;
  float32x2_t v282;
  int v283;
  float32x2_t v284;
  int v285;
  int16x4_t v286;
  int8x8_t v287;
  const float *v288;
  float32x2_t v289;
  const float *f32;
  float32x2_t v291;
  float32x2_t v292;
  char v293;
  __int16 v294;
  int32x4_t v296;
  float32x2_t v297;
  float32x4_t v298;
  float32x4_t v299;
  uint64_t (**v300)();
  float32x4_t *v301;
  float32x4_t v302;
  int32x4_t *v303;
  int32x4_t v304;
  int32x4_t v305;
  _OWORD v306[2];
  int32x4_t v307;
  int32x4_t v308;
  int32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  unsigned int v314;
  float32x2_t v315;
  float32x4_t v316;
  int32x2_t v317;
  float v318;
  int v319;
  char v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  char v330;
  float32x4_t v331;
  int32x2_t v332;
  uint64_t v333;
  char v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  char v344;
  _OWORD v345[4];
  _OWORD v346[4];
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349[2];
  uint64_t v350;
  float32x2x2_t v351;

  v350 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a3 + 32);
  v8 = *(float32x4_t *)(a1 + 4);
  v9 = v8;
  v9.i32[3] = 0;
  v10 = *(float32x4_t *)(a1 + 16);
  v11 = *(float32x4_t *)(a3 + 4);
  v12 = *(float32x4_t *)(a3 + 16);
  *(int8x8_t *)v13.f32 = a2[2];
  v13.i64[1] = a2[3].u32[0];
  v14.i64[0] = a4[1].i64[0];
  v14.i64[1] = a4[1].u32[2];
  v15 = vnegq_f32(*a4);
  v16 = vsubq_f32(v13, v14);
  v17 = v15;
  v17.i32[3] = 0;
  v18 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3).u64[0];
  v19 = vmulq_n_f32(v16, vmla_f32((float32x2_t)0xBF000000BF000000, v18, v18).f32[0]);
  v19.i32[3] = 0;
  v20 = (float32x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  v21 = (float32x2_t)vext_s8(*(int8x8_t *)v15.f32, (int8x8_t)v20, 4uLL);
  v22 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v15.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL)), v21, *(float32x2_t *)v16.f32);
  *(int8x8_t *)v23.f32 = vext_s8(v22, (int8x8_t)vmls_f32(vmul_f32(v20, *(float32x2_t *)v16.f32), *(float32x2_t *)v15.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL)), 4uLL);
  v23.i64[1] = v22.u32[0];
  v24 = vmlaq_laneq_f32(v19, v23, *a4, 3);
  v24.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u32[0];
  v25 = vmulq_f32(v17, v16);
  v25.i64[0] = vpaddq_f32(v25, v25).u64[0];
  v26 = vmlaq_n_f32(v24, v17, vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0]);
  v27 = vaddq_f32(v26, v26);
  v27.i32[3] = 0;
  v28 = *(float32x4_t *)a2->i8;
  v28.i32[3] = 0;
  v29 = vmulq_f32(v28, v17);
  v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
  v30 = vmulq_laneq_f32(v28, *a4, 3);
  v28.i64[0] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
  v31 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a2, *(int8x8_t *)v28.f32, 4uLL), *(float32x2_t *)v15.f32), v21, (float32x2_t)*a2);
  *(int8x8_t *)v32.f32 = vext_s8(v31, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a2, v20), *(float32x2_t *)v15.f32, *(float32x2_t *)v28.f32), 4uLL);
  *(int8x8_t *)&v32.u32[2] = v31;
  v33 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v17, *(float32x4_t *)a2->i8, 3), v30), v32);
  *(int32x2_t *)v15.f32 = vdup_lane_s32(*(int32x2_t *)v33.f32, 1);
  *(int32x2_t *)v30.f32 = vdup_laneq_s32((int32x4_t)v33, 2);
  v34 = vaddq_f32(v33, v33);
  *(float32x2_t *)v17.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a4, *(int8x16_t *)a4, 8uLL)), vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32));
  v35 = (float32x2_t)vdup_laneq_s32((int32x4_t)v34, 2);
  *(int32x2_t *)v33.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v34.f32), 0);
  v36 = vmul_lane_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v34.f32, 1);
  v37 = vmul_laneq_f32(*(float32x2_t *)v30.f32, v34, 2);
  *(float32x2_t *)v15.f32 = vmul_n_f32(*(float32x2_t *)v15.f32, v34.f32[0]);
  v38 = vmul_n_f32(*(float32x2_t *)v30.f32, v34.f32[0]);
  v39 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.f32, 0), *(float32x2_t *)v17.f32, 1);
  *(float32x2_t *)v30.f32 = vmul_lane_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v34.f32, 1);
  *(float32x2_t *)v34.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.f32, 1), *(float32x2_t *)v17.f32, 1);
  *(float32x2_t *)v17.f32 = vmul_lane_f32(v35, *(float32x2_t *)v17.f32, 1);
  __asm { FMOV            V8.2S, #1.0 }
  *(int8x8_t *)v45.i8 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v36), v37), (int8x8_t)vadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v17.f32), 4uLL);
  v45.i64[1] = vsub_f32(v38, *(float32x2_t *)v34.f32).u32[0];
  *(float32x2_t *)v33.f32 = vsub_f32(_D8, *(float32x2_t *)v33.f32);
  *(int8x8_t *)v15.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v17.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v33.f32, v37), 4uLL);
  v15.i64[1] = vadd_f32(*(float32x2_t *)v30.f32, v39).u32[0];
  *(int8x8_t *)v30.f32 = vext_s8((int8x8_t)vadd_f32(v38, *(float32x2_t *)v34.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v30.f32, v39), 4uLL);
  v30.i64[1] = vsub_f32(*(float32x2_t *)v33.f32, v36).u32[0];
  v307 = v45;
  v308 = (int32x4_t)v15;
  v309 = (int32x4_t)v30;
  v310 = v27;
  v46 = *(float *)(a1 + 4) == 1.0 && *(float *)(a1 + 8) == 1.0 && *(float *)(a1 + 12) == 1.0;
  v334 = 0;
  v341 = v6 + 32;
  v343 = *(_QWORD *)(v6 + 72) + 20 * *(unsigned __int8 *)(v6 + 71);
  v344 = *(_BYTE *)(v6 + 70);
  v47.i64[0] = *(_QWORD *)(v6 + 92);
  v47.i64[1] = *(unsigned int *)(v6 + 100);
  v48 = (int32x4_t)vmulq_f32(v9, v47);
  v331 = 0u;
  v49 = vpmin_f32((float32x2_t)vdup_laneq_s32(v48, 2), *(float32x2_t *)v48.i8);
  v50 = vpmin_f32(v49, v49).f32[0];
  v51 = (int32x2_t)vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v50);
  v332 = v51;
  v333 = COERCE_UNSIGNED_INT(0.025 * v50);
  if (v46)
  {
    v335 = xmmword_2260E5F10;
    v336 = xmmword_2260E5F20;
    v337 = xmmword_2260E5F40;
    v338 = xmmword_2260E5F10;
    v339 = xmmword_2260E5F20;
    v340 = xmmword_2260E5F40;
  }
  else
  {
    v52 = vrecpeq_f32(v9);
    v53 = 4;
    do
    {
      v52 = vmulq_f32(v52, vrecpsq_f32(v52, v9));
      --v53;
    }
    while (v53);
    *(int32x2_t *)v54.f32 = vdup_lane_s32(*(int32x2_t *)v8.f32, 0);
    v54.i64[1] = v54.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v54, v9)), *(int8x8_t *)v11.f32).u32[0] & 0xFFFFFF) != 0)
    {
      v61 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.f32, 1);
      v62 = (float32x2_t)vdup_laneq_s32((int32x4_t)v10, 2);
      v63 = (float32x2_t)vdup_laneq_s32((int32x4_t)v10, 3);
      v64 = vaddq_f32(v10, v10);
      v65 = vmul_lane_f32(v61, *(float32x2_t *)v64.f32, 1);
      v66 = vmul_laneq_f32(v62, v64, 2);
      v67 = vmul_n_f32(v61, v64.f32[0]);
      v68 = vmul_n_f32(v62, v64.f32[0]);
      v69 = vmul_n_f32(v63, v64.f32[0]);
      v70 = vmul_lane_f32(v62, *(float32x2_t *)v64.f32, 1);
      v71 = vmul_lane_f32(v63, *(float32x2_t *)v64.f32, 1);
      v72 = vmul_laneq_f32(v63, v64, 2);
      *(float32x2_t *)v64.f32 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v64.f32), 0));
      *(int8x8_t *)v73.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v65), v66), (int8x8_t)vadd_f32(v67, v72), 4uLL);
      v73.i64[1] = vsub_f32(v68, v71).u32[0];
      v74 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v67, v72), (int8x8_t)vsub_f32(*(float32x2_t *)v64.f32, v66), 4uLL);
      v75 = (int8x8_t)vadd_f32(v68, v71);
      *(int8x8_t *)v76.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v73.f32, 0), (int8x8_t)v74, 4uLL);
      v77 = (int8x8_t)vdup_lane_s32(v74, 1);
      *(int32x2_t *)v78.f32 = v74;
      v78.i64[1] = vadd_f32(v70, v69).u32[0];
      *(int8x8_t *)v79.f32 = vext_s8(v75, (int8x8_t)vsub_f32(v70, v69), 4uLL);
      *(int8x8_t *)v80.f32 = vext_s8(*(int8x8_t *)v73.f32, v77, 4uLL);
      v79.i64[1] = vsub_f32(*(float32x2_t *)v64.f32, v65).u32[0];
      v76.i64[1] = vdup_lane_s32(*(int32x2_t *)v79.f32, 0).u32[0];
      v80.i64[1] = vdup_lane_s32(*(int32x2_t *)v79.f32, 1).u32[0];
      *(int8x8_t *)v81.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v73.u32[2], 0), (int8x8_t)v78.u32[2], 4uLL);
      v81.i64[1] = vdup_lane_s32(*(int32x2_t *)&v79.u32[2], 0).u32[0];
      v82 = vmulq_n_f32(v76, v8.f32[0]);
      v82.i32[3] = 0;
      v83 = vmulq_lane_f32(v80, *(float32x2_t *)v8.f32, 1);
      v83.i32[3] = 0;
      v84 = vmulq_laneq_f32(v81, v8, 2);
      v84.i32[3] = 0;
      v85 = vmulq_n_f32(v82, v73.f32[0]);
      v85.i32[3] = 0;
      v86 = vmulq_lane_f32(v83, *(float32x2_t *)v73.f32, 1);
      v86.i32[3] = 0;
      v87 = vmulq_laneq_f32(v84, v73, 2);
      v87.i32[3] = 0;
      v55 = vaddq_f32(v87, vaddq_f32(v85, v86));
      v88 = vmulq_n_f32(v82, v78.f32[0]);
      v88.i32[3] = 0;
      v89 = vmulq_lane_f32(v83, *(float32x2_t *)v78.f32, 1);
      v89.i32[3] = 0;
      v90 = vmulq_laneq_f32(v84, v78, 2);
      v90.i32[3] = 0;
      v91 = vaddq_f32(v88, v89);
      v92 = vmulq_n_f32(v82, v79.f32[0]);
      v92.i32[3] = 0;
      v93 = vmulq_lane_f32(v83, *(float32x2_t *)v79.f32, 1);
      v93.i32[3] = 0;
      v94 = vmulq_laneq_f32(v84, v79, 2);
      v94.i32[3] = 0;
      v56 = vaddq_f32(v90, v91);
      v57 = vaddq_f32(v94, vaddq_f32(v92, v93));
      v335 = (__int128)v55;
      v336 = (__int128)v56;
      v337 = (__int128)v57;
      v95 = vmulq_n_f32(v76, v52.f32[0]);
      v95.i32[3] = 0;
      v96 = vmulq_lane_f32(v80, *(float32x2_t *)v52.f32, 1);
      v96.i32[3] = 0;
      v97 = vmulq_laneq_f32(v81, v52, 2);
      v97.i32[3] = 0;
      v98 = vmulq_n_f32(v95, v73.f32[0]);
      v98.i32[3] = 0;
      v99 = vmulq_lane_f32(v96, *(float32x2_t *)v73.f32, 1);
      v99.i32[3] = 0;
      v100 = vmulq_laneq_f32(v97, v73, 2);
      v100.i32[3] = 0;
      v58 = vaddq_f32(v100, vaddq_f32(v98, v99));
      v101 = vmulq_n_f32(v95, v78.f32[0]);
      v101.i32[3] = 0;
      v102 = vmulq_lane_f32(v96, *(float32x2_t *)v78.f32, 1);
      v102.i32[3] = 0;
      v103 = vmulq_laneq_f32(v97, v78, 2);
      v103.i32[3] = 0;
      v104 = vmulq_n_f32(v95, v79.f32[0]);
      v104.i32[3] = 0;
      v105 = vmulq_lane_f32(v96, *(float32x2_t *)v79.f32, 1);
      v105.i32[3] = 0;
      v59 = vaddq_f32(v103, vaddq_f32(v101, v102));
      v106 = vmulq_laneq_f32(v97, v79, 2);
      v106.i32[3] = 0;
      v60 = vaddq_f32(v106, vaddq_f32(v104, v105));
    }
    else
    {
      v52.i32[3] = 0;
      v55 = vmulq_f32(v9, (float32x4_t)xmmword_2260E5F10);
      v56 = vmulq_f32(v9, (float32x4_t)xmmword_2260E5F20);
      v57 = vmulq_f32(v9, (float32x4_t)xmmword_2260E5F40);
      v335 = (__int128)v55;
      v336 = (__int128)v56;
      v337 = (__int128)v57;
      v58 = vmulq_f32(v52, (float32x4_t)xmmword_2260E5F10);
      v59 = vmulq_f32(v52, (float32x4_t)xmmword_2260E5F20);
      v60 = vmulq_f32(v52, (float32x4_t)xmmword_2260E5F40);
    }
    v339 = (__int128)v59;
    v340 = (__int128)v60;
    v107 = vmulq_f32(v55, (float32x4_t)0);
    v107.i32[3] = 0;
    v108 = vmulq_f32(v56, (float32x4_t)0);
    v108.i32[3] = 0;
    v109 = vmulq_f32(v57, (float32x4_t)0);
    v109.i32[3] = 0;
    v338 = (__int128)v58;
    v331 = vaddq_f32(v109, vaddq_f32(v108, v107));
  }
  v110 = v11;
  v110.i32[3] = 0;
  v342 = *(_QWORD *)(v6 + 80);
  v111 = *(float *)(a3 + 4) == 1.0 && *(float *)(a3 + 8) == 1.0 && *(float *)(a3 + 12) == 1.0;
  v320 = 0;
  v327 = v7 + 32;
  v329 = *(_QWORD *)(v7 + 72) + 20 * *(unsigned __int8 *)(v7 + 71);
  v330 = *(_BYTE *)(v7 + 70);
  v112.i64[0] = *(_QWORD *)(v7 + 92);
  v112.i32[2] = *(_DWORD *)(v7 + 100);
  v316 = 0u;
  v319 = 0;
  v112.i64[1] = v112.u32[2];
  v113 = (int32x4_t)vmulq_f32(v110, v112);
  *(float32x2_t *)v113.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v113, 2), *(float32x2_t *)v113.i8);
  v112.f32[0] = vpmin_f32(*(float32x2_t *)v113.i8, *(float32x2_t *)v113.i8).f32[0];
  v114 = (int32x2_t)vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v112.f32[0]);
  v317 = v114;
  v318 = 0.025 * v112.f32[0];
  if (v111)
  {
    v321 = xmmword_2260E5F10;
    v322 = xmmword_2260E5F20;
    v323 = xmmword_2260E5F40;
    v324 = xmmword_2260E5F10;
    v325 = xmmword_2260E5F20;
    v326 = xmmword_2260E5F40;
  }
  else
  {
    v115 = vrecpeq_f32(v110);
    v116 = 4;
    do
    {
      v115 = vmulq_f32(v115, vrecpsq_f32(v115, v110));
      --v116;
    }
    while (v116);
    *(int32x2_t *)v117.f32 = vdup_lane_s32(*(int32x2_t *)v11.f32, 0);
    v117.i64[1] = v117.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v117, v110)), *(int8x8_t *)v11.f32).u32[0] & 0xFFFFFF) != 0)
    {
      v124 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.f32, 1);
      v125 = (float32x2_t)vdup_laneq_s32((int32x4_t)v12, 2);
      v126 = (float32x2_t)vdup_laneq_s32((int32x4_t)v12, 3);
      v127 = vaddq_f32(v12, v12);
      v128 = vmul_lane_f32(v124, *(float32x2_t *)v127.f32, 1);
      v129 = vmul_laneq_f32(v125, v127, 2);
      v130 = vmul_n_f32(v124, v127.f32[0]);
      v131 = vmul_n_f32(v125, v127.f32[0]);
      v132 = vmul_n_f32(v126, v127.f32[0]);
      v133 = vmul_lane_f32(v125, *(float32x2_t *)v127.f32, 1);
      v134 = vmul_lane_f32(v126, *(float32x2_t *)v127.f32, 1);
      v135 = vmul_laneq_f32(v126, v127, 2);
      v136 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v127.f32), 0));
      *(int8x8_t *)v127.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v128), v129), (int8x8_t)vadd_f32(v130, v135), 4uLL);
      v137 = (int8x8_t)vsub_f32(v130, v135);
      v138.i64[0] = v127.i64[0];
      v138.i64[1] = vsub_f32(v131, v134).u32[0];
      v139 = (int32x2_t)vext_s8(v137, (int8x8_t)vsub_f32(v136, v129), 4uLL);
      v140 = (int8x8_t)vadd_f32(v131, v134);
      *(int8x8_t *)v141.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v127.f32, 0), (int8x8_t)v139, 4uLL);
      v142 = (int8x8_t)vdup_lane_s32(v139, 1);
      *(int32x2_t *)v143.f32 = v139;
      v143.i64[1] = vadd_f32(v133, v132).u32[0];
      v139.i32[0] = vsub_f32(v136, v128).u32[0];
      *(int8x8_t *)v144.f32 = vext_s8(v140, (int8x8_t)vsub_f32(v133, v132), 4uLL);
      *(int8x8_t *)v145.f32 = vext_s8(*(int8x8_t *)v127.f32, v142, 4uLL);
      v144.i64[1] = v139.u32[0];
      v141.i64[1] = vdup_lane_s32(*(int32x2_t *)v144.f32, 0).u32[0];
      v145.i64[1] = vdup_lane_s32(*(int32x2_t *)v144.f32, 1).u32[0];
      *(int8x8_t *)v146.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v138.u32[2], 0), (int8x8_t)v143.u32[2], 4uLL);
      v146.i64[1] = vdup_lane_s32((int32x2_t)v139.u32[0], 0).u32[0];
      v147 = vmulq_n_f32(v141, v11.f32[0]);
      v147.i32[3] = 0;
      v148 = vmulq_lane_f32(v145, *(float32x2_t *)v11.f32, 1);
      v148.i32[3] = 0;
      v149 = vmulq_laneq_f32(v146, v11, 2);
      v149.i32[3] = 0;
      v150 = vmulq_n_f32(v147, v138.f32[0]);
      v150.i32[3] = 0;
      v151 = vmulq_lane_f32(v148, *(float32x2_t *)v138.f32, 1);
      v151.i32[3] = 0;
      v152 = vmulq_laneq_f32(v149, v138, 2);
      v152.i32[3] = 0;
      v118 = vaddq_f32(v152, vaddq_f32(v150, v151));
      v153 = vmulq_n_f32(v147, v143.f32[0]);
      v153.i32[3] = 0;
      v154 = vmulq_lane_f32(v148, *(float32x2_t *)v143.f32, 1);
      v154.i32[3] = 0;
      v155 = vmulq_laneq_f32(v149, v143, 2);
      v155.i32[3] = 0;
      v156 = vaddq_f32(v153, v154);
      v157 = vmulq_n_f32(v147, v144.f32[0]);
      v157.i32[3] = 0;
      v158 = vmulq_lane_f32(v148, *(float32x2_t *)v144.f32, 1);
      v158.i32[3] = 0;
      v159 = vmulq_laneq_f32(v149, v144, 2);
      v159.i32[3] = 0;
      v119 = vaddq_f32(v155, v156);
      v120 = vaddq_f32(v159, vaddq_f32(v157, v158));
      v321 = (__int128)v118;
      v322 = (__int128)v119;
      v323 = (__int128)v120;
      v160 = vmulq_n_f32(v141, v115.f32[0]);
      v160.i32[3] = 0;
      v161 = vmulq_lane_f32(v145, *(float32x2_t *)v115.f32, 1);
      v161.i32[3] = 0;
      v162 = vmulq_laneq_f32(v146, v115, 2);
      v162.i32[3] = 0;
      v163 = vmulq_n_f32(v160, v138.f32[0]);
      v163.i32[3] = 0;
      v164 = vmulq_lane_f32(v161, *(float32x2_t *)v138.f32, 1);
      v164.i32[3] = 0;
      v165 = vmulq_laneq_f32(v162, v138, 2);
      v165.i32[3] = 0;
      v121 = vaddq_f32(v165, vaddq_f32(v163, v164));
      v166 = vmulq_n_f32(v160, v143.f32[0]);
      v166.i32[3] = 0;
      v167 = vmulq_lane_f32(v161, *(float32x2_t *)v143.f32, 1);
      v167.i32[3] = 0;
      v168 = vmulq_laneq_f32(v162, v143, 2);
      v168.i32[3] = 0;
      v169 = vmulq_n_f32(v160, v144.f32[0]);
      v169.i32[3] = 0;
      v170 = vmulq_lane_f32(v161, *(float32x2_t *)v144.f32, 1);
      v170.i32[3] = 0;
      v122 = vaddq_f32(v168, vaddq_f32(v166, v167));
      v171 = vmulq_laneq_f32(v162, v144, 2);
      v171.i32[3] = 0;
      v123 = vaddq_f32(v171, vaddq_f32(v169, v170));
    }
    else
    {
      v115.i32[3] = 0;
      v118 = vmulq_f32(v110, (float32x4_t)xmmword_2260E5F10);
      v119 = vmulq_f32(v110, (float32x4_t)xmmword_2260E5F20);
      v120 = vmulq_f32(v110, (float32x4_t)xmmword_2260E5F40);
      v321 = (__int128)v118;
      v322 = (__int128)v119;
      v323 = (__int128)v120;
      v121 = vmulq_f32(v115, (float32x4_t)xmmword_2260E5F10);
      v122 = vmulq_f32(v115, (float32x4_t)xmmword_2260E5F20);
      v123 = vmulq_f32(v115, (float32x4_t)xmmword_2260E5F40);
    }
    v325 = (__int128)v122;
    v326 = (__int128)v123;
    v172 = vmulq_f32(v118, (float32x4_t)0);
    v172.i32[3] = 0;
    v173 = vmulq_f32(v119, (float32x4_t)0);
    v173.i32[3] = 0;
    v174 = vmulq_f32(v120, (float32x4_t)0);
    v174.i32[3] = 0;
    v324 = (__int128)v121;
    v316 = vaddq_f32(v174, vaddq_f32(v173, v172));
  }
  v175 = v310;
  v304 = v307;
  v305 = v308;
  v306[0] = v309;
  v176 = (float32x2x2_t)vzip1q_s32(v307, v309);
  v351.val[0] = (float32x2_t)vzip2q_s32(v307, v309).u64[0];
  v177 = vzip1q_s32(v308, (int32x4_t)0);
  v351.val[1] = (float32x2_t)vzip2q_s32(v308, (int32x4_t)0).u64[0];
  v328 = *(_QWORD *)(v7 + 80);
  v302.i64[0] = (uint64_t)off_24ED91490;
  v302.i64[1] = (uint64_t)&v331;
  v303 = &v307;
  v178 = (float *)&v304;
  v179 = (float *)v306;
  vst2_f32(v178, v176);
  v306[1] = v175;
  v305 = vzip2q_s32((int32x4_t)v176, v177);
  vst2_f32(v179, v351);
  v300 = off_24ED91168;
  v301 = &v316;
  v314 = 0;
  v180 = vmulq_f32(v310, v310);
  v180.i64[0] = vpaddq_f32(v180, v180).u64[0];
  v181 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v180.f32, *(float32x2_t *)v180.f32)), 0), (int8x16_t)v310, (int8x16_t)xmmword_2260E5F10);
  v313 = v181;
  v182 = vmulq_f32(v181, v181);
  v183 = vpaddq_f32(v182, v182);
  *(float32x2_t *)v183.f32 = vpadd_f32(*(float32x2_t *)v183.f32, *(float32x2_t *)v183.f32);
  v184 = vrsqrte_f32(*(float32x2_t *)v183.f32);
  v185 = 4;
  do
  {
    v184 = vmul_f32(v184, vrsqrts_f32(vmul_f32(v184, v184), *(float32x2_t *)v183.f32));
    --v185;
  }
  while (v185);
  v186 = vmul_f32(*(float32x2_t *)v183.f32, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(*(float32x2_t *)v183.f32), 0), (int8x8_t)_D8, (int8x8_t)v184));
  *(float32x2_t *)v183.f32 = vrecpe_f32(v186);
  v187 = 4;
  do
  {
    *(float32x2_t *)v183.f32 = vmul_f32(*(float32x2_t *)v183.f32, vrecps_f32(v186, *(float32x2_t *)v183.f32));
    --v187;
  }
  while (v187);
  v188 = vmulq_n_f32(v181, v183.f32[0]);
  v188.i32[3] = 0;
  *(float32x2_t *)v183.f32 = vmul_f32(vmin_f32((float32x2_t)vdup_lane_s32(v51, 1), (float32x2_t)vdup_lane_s32(v114, 1)), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  v189 = vmax_f32(*(float32x2_t *)v183.f32, (float32x2_t)vdup_n_s32(0x358637BDu));
  v183.i32[0] = -v334;
  v190 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8(*(int8x8_t *)v183.f32, (int8x8_t)v51), 0);
  v183.i32[0] = -v320;
  *(float32x2_t *)v183.f32 = vadd_f32(v190, (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8(*(int8x8_t *)v183.f32, (int8x8_t)v114), 0));
  v297 = *(float32x2_t *)v183.f32;
  v191 = v183.f32[0] + 0.0;
  v192 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  v193 = (float32x2_t)vdup_n_s32(0x3F7FF141u);
  v183.i32[0] = -1;
  v296 = (int32x4_t)v183;
  do
  {
    v299 = v188;
    v194 = v192;
    v312 = v181;
    v195 = vnegq_f32(v181);
    v195.i32[3] = 0;
    v311 = v195;
    *(double *)v196.i64 = physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::support(&v302, (float32x2_t *)&v311);
    v298 = v196;
    *(double *)v197.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support((uint64_t)&v300, &v313);
    v198 = v197;
    v181 = vsubq_f32(v298, v197);
    v199 = vmulq_f32(v299, v181);
    v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
    v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
    if (v200.f32[0] > v191)
      goto LABEL_84;
    v201 = v314;
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v200, v297), (int8x8_t)vcgt_f32(v200, vmul_f32(v194, v193))), 0), *(int8x8_t *)v181.f32).u32[0] == -1)
    {
      if (v314 == 3)
      {
        v311.i64[0] = 0;
        v315 = 0;
        physx::Gu::barycentricCoordinates(&v313, &v347, &v348, v349, (float32x2_t *)&v311, &v315);
      }
LABEL_84:
      v293 = 0;
      if (!a5)
        return v293 & 1;
      goto LABEL_85;
    }
    v346[v314] = v298;
    v345[v201] = v198;
    v314 = v201 + 1;
    *(&v347 + v201) = v181;
    switch((_DWORD)v201)
    {
      case 3:
        physx::Gu::closestPtPointTetrahedron(&v347, v346, v345, (int *)&v314);
        break;
      case 2:
        v181 = v347;
        v210 = vsubq_f32(v348, v347);
        v211 = vsubq_f32(v349[0], v347);
        v213 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v210.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v211, (int8x16_t)v211, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v210, (int8x16_t)v210, 4uLL), *(float32x2_t *)v211.f32);
        *(int8x8_t *)v212.f32 = vext_s8(v213, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v210, (int8x16_t)v210, 8uLL), *(float32x2_t *)v211.f32), *(float32x2_t *)v210.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v211, (int8x16_t)v211, 8uLL)), 4uLL);
        v213.i32[1] = 0;
        v314 = 3;
        v214 = vpadd_f32(vmul_f32(*(float32x2_t *)v212.f32, *(float32x2_t *)v212.f32), vmul_f32((float32x2_t)v213.u32[0], (float32x2_t)v213.u32[0]));
        v215 = vpadd_f32(v214, v214);
        if (v215.f32[0] <= 0.00000011921)
        {
          v314 = 2;
          v252 = vmulq_f32(v210, v210);
          v252.i64[0] = vpaddq_f32(v252, v252).u64[0];
          v253 = vpadd_f32(*(float32x2_t *)v252.f32, *(float32x2_t *)v252.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v253), 0), *(int8x8_t *)v347.f32).u32[0] == -1)
          {
LABEL_55:
            v314 = 1;
            break;
          }
          v254 = vnegq_f32(v347);
          v254.i32[3] = 0;
          v255 = vmulq_f32(v254, v210);
          v255.i64[0] = vpaddq_f32(v255, v255).u64[0];
          v256 = vpadd_f32(*(float32x2_t *)v255.f32, *(float32x2_t *)v255.f32);
          v257 = vrecpe_f32(v253);
          v258 = 4;
          do
          {
            v257 = vmul_f32(v257, vrecps_f32(v253, v257));
            --v258;
          }
          while (v258);
          v181 = vmlaq_n_f32(v347, v210, vmax_f32(vmin_f32(vmul_f32(v256, v257), _D8), 0).f32[0]);
          goto LABEL_54;
        }
        if (v215.f32[0] == 0.0)
        {
          v181 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v212.u32[2] = v213;
          v216 = (float32x2_t)vextq_s8((int8x16_t)v348, (int8x16_t)v348, 8uLL).u64[0];
          v217 = (float32x2_t)vextq_s8((int8x16_t)v349[0], (int8x16_t)v349[0], 8uLL).u64[0];
          v218 = (float32x2_t)vextq_s8((int8x16_t)v349[0], (int8x16_t)v349[0], 4uLL).u64[0];
          v219 = (float32x2_t)vextq_s8((int8x16_t)v348, (int8x16_t)v348, 4uLL).u64[0];
          v220 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v348.f32, v218), v219, *(float32x2_t *)v349[0].f32);
          *(int8x8_t *)v221.f32 = vext_s8(v220, (int8x8_t)vmls_f32(vmul_f32(v216, *(float32x2_t *)v349[0].f32), *(float32x2_t *)v348.f32, v217), 4uLL);
          v221.i64[1] = v220.u32[0];
          v222 = (float32x2_t)vextq_s8((int8x16_t)v347, (int8x16_t)v347, 8uLL).u64[0];
          v223 = (float32x2_t)vextq_s8((int8x16_t)v347, (int8x16_t)v347, 4uLL).u64[0];
          v224 = (int8x8_t)vmls_f32(vmul_f32(v223, *(float32x2_t *)v349[0].f32), v218, *(float32x2_t *)v347.f32);
          *(int8x8_t *)v225.f32 = vext_s8(v224, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v347.f32, v217), *(float32x2_t *)v349[0].f32, v222), 4uLL);
          v225.i64[1] = v224.u32[0];
          v226 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v347.f32, v219), v223, *(float32x2_t *)v348.f32);
          *(int8x8_t *)v227.f32 = vext_s8(v226, (int8x8_t)vmls_f32(vmul_f32(v222, *(float32x2_t *)v348.f32), *(float32x2_t *)v347.f32, v216), 4uLL);
          v227.i64[1] = v226.u32[0];
          v228 = vmulq_f32(v221, v212);
          v228.i64[0] = vpaddq_f32(v228, v228).u64[0];
          v229 = vpadd_f32(*(float32x2_t *)v228.f32, *(float32x2_t *)v228.f32);
          v230 = vmulq_f32(v225, v212);
          v230.i64[0] = vpaddq_f32(v230, v230).u64[0];
          v231 = vpadd_f32(*(float32x2_t *)v230.f32, *(float32x2_t *)v230.f32);
          v232 = vmulq_f32(v227, v212);
          v232.i64[0] = vpaddq_f32(v232, v232).u64[0];
          v233 = vpadd_f32(*(float32x2_t *)v232.f32, *(float32x2_t *)v232.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v231), (int8x8_t)vcgez_f32(v229)), (int8x8_t)vcgez_f32(v233)), 0), *(int8x8_t *)v347.f32).u32[0] == -1)
          {
            v259 = vmulq_f32(v347, v212);
            v260 = vrecpe_f32(v215);
            v261 = 4;
            do
            {
              v260 = vmul_f32(v260, vrecps_f32(v215, v260));
              --v261;
            }
            while (v261);
            v262 = (float32x2_t)vpaddq_f32(v259, v259).u64[0];
            v181 = vmulq_n_f32(v212, vmul_f32(v260, vpadd_f32(v262, v262)).f32[0]);
            v181.i32[3] = 0;
          }
          else
          {
            v234 = vnegq_f32(v347);
            v234.i32[3] = 0;
            v235 = vnegq_f32(v348);
            v235.i32[3] = 0;
            v236 = vmulq_f32(v234, v210);
            v236.i64[0] = vpaddq_f32(v236, v236).u64[0];
            v237 = vpadd_f32(*(float32x2_t *)v236.f32, *(float32x2_t *)v236.f32);
            v238 = vmulq_f32(v210, v235);
            v238.i64[0] = vpaddq_f32(v238, v238).u64[0];
            v239 = vpadd_f32(*(float32x2_t *)v238.f32, *(float32x2_t *)v238.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v237), (int8x8_t)vclez_f32(v239)), (int8x8_t)vclez_f32(v233)), 0), *(int8x8_t *)v347.f32).u32[0] == -1)
            {
              v263 = vsub_f32(v237, v239);
              v264 = vrecpe_f32(v263);
              v265 = 4;
              do
              {
                v264 = vmul_f32(v264, vrecps_f32(v263, v264));
                --v265;
              }
              while (v265);
              v251 = 0;
              v181 = vmlaq_n_f32(v347, v210, vmul_f32(v237, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v263), (float32x2_t)0x3400000034000000), (int8x8_t)v264, 0)).f32[0]);
              v181.i64[1] = vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL).u32[0];
              v266 = 2;
              v250 = 1;
            }
            else
            {
              v240 = vnegq_f32(v349[0]);
              v240.i32[3] = 0;
              v241 = vmulq_f32(v235, v211);
              v241.i64[0] = vpaddq_f32(v241, v241).u64[0];
              v242 = vpadd_f32(*(float32x2_t *)v241.f32, *(float32x2_t *)v241.f32);
              v243 = vmulq_f32(v210, v240);
              v243.i64[0] = vpaddq_f32(v243, v243).u64[0];
              v244 = vpadd_f32(*(float32x2_t *)v243.f32, *(float32x2_t *)v243.f32);
              v245 = vmulq_f32(v211, v240);
              v245.i64[0] = vpaddq_f32(v245, v245).u64[0];
              v246 = vpadd_f32(*(float32x2_t *)v245.f32, *(float32x2_t *)v245.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v242, v239), (int8x8_t)vcge_f32(v244, v246)), (int8x8_t)vclez_f32(v229)), 0), *(int8x8_t *)v347.f32).u32[0] == -1)
              {
                v267 = vsub_f32(v242, v239);
                v268 = vadd_f32(v267, vsub_f32(v244, v246));
                v269 = vrecpe_f32(v268);
                v270 = 4;
                do
                {
                  v269 = vmul_f32(v269, vrecps_f32(v268, v269));
                  --v270;
                }
                while (v270);
                v271 = (int8x16_t)vmlaq_n_f32(v348, vsubq_f32(v349[0], v348), vmul_f32(v267, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v268), (float32x2_t)0x3400000034000000), (int8x8_t)v269, 0)).f32[0]);
                v271.i64[1] = vextq_s8(v271, v271, 8uLL).u32[0];
                v266 = 2;
                v250 = 2;
                v251 = 1;
                v181 = (float32x4_t)v271;
              }
              else
              {
                v247 = vmulq_f32(v234, v211);
                v247.i64[0] = vpaddq_f32(v247, v247).u64[0];
                v248 = vpadd_f32(*(float32x2_t *)v247.f32, *(float32x2_t *)v247.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v248), (int8x8_t)vclez_f32(v246)), (int8x8_t)vclez_f32(v231)), 0), *(int8x8_t *)v347.f32).u32[0] == -1)
                {
                  v272 = vsub_f32(v248, v246);
                  v273 = vrecpe_f32(v272);
                  v274 = 4;
                  do
                  {
                    v273 = vmul_f32(v273, vrecps_f32(v272, v273));
                    --v274;
                  }
                  while (v274);
                  v251 = 0;
                  v181 = vmlaq_n_f32(v347, v211, vmul_f32(v248, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v272), (float32x2_t)0x3400000034000000), (int8x8_t)v273, 0)).f32[0]);
                  v181.i64[1] = vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL).u32[0];
                  v250 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v248), (int8x8_t)vclez_f32(v237)), 0), *(int8x8_t *)v347.f32).u32[0] == -1)
                {
                  v251 = 0;
                  v250 = 1;
                }
                else
                {
                  *(int16x4_t *)v181.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v239, v242), (int8x8_t)vcgez_f32(v239)), 0);
                  *(int8x8_t *)v181.f32 = vuzp1_s8(*(int8x8_t *)v181.f32, *(int8x8_t *)v181.f32);
                  v249 = v181.i32[0];
                  v181 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v181, v296), 0), (int8x16_t)v348, (int8x16_t)v349[0]);
                  v250 = 1;
                  if (v249 == -1)
                    v251 = 1;
                  else
                    v251 = 2;
                }
                v266 = v250;
              }
            }
            v275 = *(&v347 + v250);
            v276 = v346[v251];
            v277 = v346[v250];
            v278 = v345[v251];
            v279 = v345[v250];
            v347 = *(&v347 + v251);
            v348 = v275;
            v346[0] = v276;
            v346[1] = v277;
            v345[0] = v278;
            v345[1] = v279;
            v314 = v266;
          }
        }
        break;
      case 1:
        v181 = v347;
        v202 = vsubq_f32(v348, v347);
        v203 = vmulq_f32(v202, v202);
        v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
        v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v204), 0), *(int8x8_t *)v347.f32).u32[0] == -1)goto LABEL_55;
        v205 = vnegq_f32(v347);
        v205.i32[3] = 0;
        v206 = vmulq_f32(v205, v202);
        v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
        v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
        v208 = vrecpe_f32(v204);
        v209 = 4;
        do
        {
          v208 = vmul_f32(v208, vrecps_f32(v204, v208));
          --v209;
        }
        while (v209);
        v181 = vmlaq_n_f32(v347, v202, vmax_f32(vmin_f32(vmul_f32(v207, v208), _D8), 0).f32[0]);
LABEL_54:
        v181.i64[1] = vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL).u32[0];
        break;
    }
    v313 = v181;
    v280 = vmulq_f32(v181, v181);
    v280.i64[0] = vpaddq_f32(v280, v280).u64[0];
    v281 = vpadd_f32(*(float32x2_t *)v280.f32, *(float32x2_t *)v280.f32);
    v282 = vrsqrte_f32(v281);
    v283 = 4;
    do
    {
      v282 = vmul_f32(v282, vrsqrts_f32(vmul_f32(v282, v282), v281));
      --v283;
    }
    while (v283);
    v192 = vmul_f32(v281, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v281), 0), (int8x8_t)_D8, (int8x8_t)v282));
    v284 = vrecpe_f32(v192);
    v285 = 4;
    do
    {
      v284 = vmul_f32(v284, vrecps_f32(v192, v284));
      --v285;
    }
    while (v285);
    v188 = vmulq_n_f32(v181, v284.f32[0]);
    v188.i32[3] = 0;
    v286 = (int16x4_t)vcgt_f32(v194, v192);
  }
  while (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v192, v189), (int8x8_t)v286), 0), *(int8x8_t *)v181.f32).u32[0] == -1);
  v287 = (int8x8_t)vdup_lane_s16(v286, 0);
  if (vuzp1_s8(v287, v287).u32[0] == -1)
  {
    v293 = 1;
    if (!a5)
      return v293 & 1;
    goto LABEL_85;
  }
  v288 = (const float *)(v302.i64[1] + 16);
  v289 = vld1_dup_f32(v288);
  f32 = v301[1].f32;
  v291 = vld1_dup_f32(f32);
  v292 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v297), 0), (int8x8_t)v297, (int8x8_t)vmul_f32(vmin_f32(v289, v291), (float32x2_t)vdup_n_s32(0x3E4CCCCDu)));
  if (v314 == 3)
  {
    v311.i64[0] = 0;
    v315 = 0;
    physx::Gu::barycentricCoordinates(&v312, &v347, &v348, v349, (float32x2_t *)&v311, &v315);
  }
  v293 = vcgt_f32(vmax_f32(vsub_f32(v194, v297), 0), v292).u8[0] ^ 1;
  if (a5)
  {
LABEL_85:
    if ((v293 & 1) != 0)
      v294 = 2;
    else
      v294 = 0;
    *(_WORD *)(a5 + 12) = v294;
  }
  return v293 & 1;
}

uint64_t raycast_box(uint64_t a1, float *a2, float *a3, float32x2_t *a4, __int16 *a5, float a6, uint64_t a7, uint64_t a8)
{
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float32x2_t v32;
  float v33;
  uint64_t result;
  float v35;
  __int16 v36;
  __int16 v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float32x2_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60[3];
  _DWORD v61[3];

  v14 = a3[1] - a2[5];
  v15 = a3[2] - a2[6];
  v16 = (float)(*a3 - a2[4]) + (float)(*a3 - a2[4]);
  v17 = v14 + v14;
  v18 = v15 + v15;
  v20 = a2[2];
  v19 = a2[3];
  v21 = (float)(v19 * v19) + -0.5;
  v22 = *a2;
  v23 = a2[1];
  v24 = (float)((float)(v17 * v23) + (float)(*a2 * v16)) + (float)(v20 * v18);
  v25 = (float)((float)(v16 * v21) - (float)((float)((float)(v23 * v18) - (float)(v20 * v17)) * v19))
      + (float)(*a2 * v24);
  v26 = (float)((float)(v17 * v21) - (float)((float)((float)(v20 * v16) - (float)(*a2 * v18)) * v19))
      + (float)(v23 * v24);
  v27 = (float)((float)(v18 * v21) - (float)((float)((float)(*a2 * v17) - (float)(v23 * v16)) * v19))
      + (float)(v20 * v24);
  *(float *)v61 = v25;
  *(float *)&v61[1] = v26;
  *(float *)&v61[2] = v27;
  v28 = a4->f32[0] + a4->f32[0];
  v29 = a4->f32[1] + a4->f32[1];
  v30 = a4[1].f32[0] + a4[1].f32[0];
  v31 = (float)((float)(v23 * v29) + (float)(v22 * v28)) + (float)(v20 * v30);
  v60[0] = (float)((float)(v28 * v21) - (float)((float)((float)(v23 * v30) - (float)(v20 * v29)) * v19))
         + (float)(v22 * v31);
  v60[1] = (float)((float)(v29 * v21) - (float)((float)((float)(v20 * v28) - (float)(v22 * v30)) * v19))
         + (float)(v23 * v31);
  v60[2] = (float)((float)(v30 * v21) - (float)((float)((float)(v22 * v29) - (float)(v23 * v28)) * v19))
         + (float)(v20 * v31);
  v32 = *(float32x2_t *)(a1 + 4);
  v56 = 0.0;
  v33 = -*(float *)(a1 + 12);
  v54 = vneg_f32(v32);
  v55 = v33;
  result = physx::Gu::rayAABBIntersect2((uint64_t)&v54, a1 + 4, (uint64_t)v61, (uint64_t)v60, (uint64_t)&v57, &v56);
  if ((_DWORD)result)
  {
    v35 = v56;
    if (v56 <= a6)
    {
      v36 = 0;
      *(float *)(a8 + 48) = v56;
      *(_DWORD *)(a8 + 16) = -1;
      *(_DWORD *)(a8 + 52) = 0;
      *(_DWORD *)(a8 + 56) = 0;
      v37 = *a5;
      if ((*a5 & 1) != 0)
      {
        if (v35 == 0.0)
        {
          v43 = *a3;
          v44 = a3[1];
          v45 = a3[2];
        }
        else
        {
          v39 = a2[2];
          v38 = a2[3];
          v40 = (float)(v38 * v38) + -0.5;
          v41 = a2[1];
          v42 = (float)((float)((float)(v58 + v58) * v41) + (float)(*a2 * (float)(v57 + v57)))
              + (float)(v39 * (float)(v59 + v59));
          v43 = a2[4]
              + (float)((float)((float)(v38
                                      * (float)((float)(v41 * (float)(v59 + v59)) - (float)(v39 * (float)(v58 + v58))))
                              + (float)((float)(v57 + v57) * v40))
                      + (float)(*a2 * v42));
          v44 = a2[5]
              + (float)((float)((float)(v38
                                      * (float)((float)(v39 * (float)(v57 + v57)) - (float)(*a2 * (float)(v59 + v59))))
                              + (float)((float)(v58 + v58) * v40))
                      + (float)(v41 * v42));
          v45 = a2[6]
              + (float)((float)((float)(v38
                                      * (float)((float)(*a2 * (float)(v58 + v58)) - (float)(v41 * (float)(v57 + v57))))
                              + (float)((float)(v59 + v59) * v40))
                      + (float)(v39 * v42));
        }
        *(float *)(a8 + 24) = v43;
        *(float *)(a8 + 28) = v44;
        v36 = 1;
        *(float *)(a8 + 32) = v45;
      }
      if ((v37 & 2) != 0)
      {
        v36 |= 2u;
        if (v35 == 0.0)
        {
          v46 = -a4[1].f32[0];
          *(float32x2_t *)(a8 + 36) = vneg_f32(*a4);
        }
        else
        {
          v54 = 0;
          v55 = 0.0;
          v47 = -1.0;
          if (*(&v57 + (result - 1)) > 0.0)
            v47 = 1.0;
          v54.f32[(result - 1)] = v47;
          v49 = a2[2];
          v48 = a2[3];
          v50 = (float)(v48 * v48) + -0.5;
          v51 = a2[1];
          v52 = (float)((float)((float)(v54.f32[1] + v54.f32[1]) * v51) + (float)(*a2 * (float)(v54.f32[0] + v54.f32[0])))
              + (float)(v49 * (float)(v55 + v55));
          v53 = (float)((float)(v48
                              * (float)((float)(v49 * (float)(v54.f32[0] + v54.f32[0]))
                                      - (float)(*a2 * (float)(v55 + v55))))
                      + (float)((float)(v54.f32[1] + v54.f32[1]) * v50))
              + (float)(v51 * v52);
          v46 = (float)((float)(v48
                              * (float)((float)(*a2 * (float)(v54.f32[1] + v54.f32[1]))
                                      - (float)(v51 * (float)(v54.f32[0] + v54.f32[0]))))
                      + (float)((float)(v55 + v55) * v50))
              + (float)(v49 * v52);
          *(float *)(a8 + 36) = (float)((float)(v48
                                              * (float)((float)(v51 * (float)(v55 + v55))
                                                      - (float)(v49 * (float)(v54.f32[1] + v54.f32[1]))))
                                      + (float)((float)(v54.f32[0] + v54.f32[0]) * v50))
                              + (float)(*a2 * v52);
          *(float *)(a8 + 40) = v53;
        }
        *(float *)(a8 + 44) = v46;
      }
      else
      {
        *(_QWORD *)(a8 + 40) = 0;
        *(_DWORD *)(a8 + 36) = 0;
      }
      *(_WORD *)(a8 + 20) = v36;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void raycast_sphere(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, _BYTE *a5, float a6, uint64_t a7, float32x2_t *a8)
{
  float *v12;
  int v13;
  __int16 v14;
  float v15;
  float32x2_t v16;
  float v17;
  float v18;
  float v19;

  v12 = (float *)&a8[6];
  physx::Gu::intersectRaySphere(a3, a4, (float *)&a2[2], (float *)&a8[6], (uint64_t)&a8[3], a6, *(float *)(a1 + 4));
  if (v13)
  {
    a8[2].i32[0] = -1;
    a8[6].i32[1] = 0;
    a8[7].i32[0] = 0;
    if ((*a5 & 2) == 0)
    {
      a8[5] = 0;
      a8[4].i32[1] = 0;
      v14 = 1;
LABEL_10:
      a8[2].i16[2] = v14;
      return;
    }
    if (*v12 == 0.0)
    {
      v15 = -a4[1].f32[0];
      *(float32x2_t *)((char *)a8 + 36) = vneg_f32(*a4);
    }
    else
    {
      v16 = vsub_f32(a8[3], a2[2]);
      v17 = a8[4].f32[0] - a2[3].f32[0];
      *(float32x2_t *)((char *)a8 + 36) = v16;
      a8[5].f32[1] = v17;
      v18 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v16, v16).i32[1]), v16.f32[0], v16.f32[0]) + (float)(v17 * v17));
      if (v18 <= 0.0)
      {
LABEL_9:
        v14 = 3;
        goto LABEL_10;
      }
      v19 = 1.0 / v18;
      *(float32x2_t *)((char *)a8 + 36) = vmul_n_f32(v16, v19);
      v15 = v17 * v19;
    }
    a8[5].f32[1] = v15;
    goto LABEL_9;
  }
}

void raycast_capsule(uint64_t a1, float *a2, float32x2_t *a3, float32x2_t *a4, _BYTE *a5, float a6, uint64_t a7, float32x2_t *a8)
{
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  BOOL v42;
  float v43;
  float v44;
  int v45;
  float v46;
  float v47;
  float32x2_t v48;
  __int16 v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float32x2_t v70;
  float v71;
  float v72;
  float v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v13 = *a2;
  v14 = a2[1];
  v16 = a2[2];
  v15 = a2[3];
  v17 = v15 + v15;
  v18 = (float)((float)(v15 * (float)(v15 + v15)) + -1.0) + (float)(v13 * (float)(v13 + v13));
  v19 = (float)((float)(v13 + v13) * v14) + (float)(v16 * v17);
  v20 = (float)((float)(v13 + v13) * v16) - (float)(v14 * v17);
  v21 = *(float *)(a1 + 4);
  v22 = *(float *)(a1 + 8);
  v23 = v18 * v22;
  v24 = v22 * v19;
  v25 = v20 * v22;
  v26 = a2[4];
  v27 = a2[5];
  v28 = a2[6];
  v63 = v26 + v23;
  v64 = v27 + v24;
  v65 = v25 + v28;
  v66 = v26 - v23;
  v67 = v27 - v24;
  v68 = v28 - v25;
  v69 = v21;
  v29 = (float)(v26 - v23) - (float)(v26 + v23);
  v30 = (float)(v27 - v24) - (float)(v27 + v24);
  v31 = (float)(v28 - v25) - (float)(v25 + v28);
  v32 = COERCE_FLOAT(*a3) - (float)(v26 + v23);
  v33 = COERCE_FLOAT(HIDWORD(*(unint64_t *)a3)) - (float)(v27 + v24);
  v34 = a3[1].f32[0];
  v35 = v34 - v65;
  v36 = (float)((float)(v30 * v33) + (float)(v32 * v29)) + (float)((float)(v34 - v65) * v31);
  if (v36 > 0.0)
  {
    v37 = (float)((float)(v30 * v30) + (float)(v29 * v29)) + (float)(v31 * v31);
    if (v36 < v37)
    {
      v38 = v36 / v37;
      v29 = v29 * v38;
      v30 = v30 * v38;
      v31 = v31 * v38;
    }
    v32 = v32 - v29;
    v33 = v33 - v30;
    v35 = v35 - v31;
  }
  v39 = sqrtf((float)((float)(v33 * v33) + (float)(v32 * v32)) + (float)(v35 * v35)) - v21;
  v40 = 0.0;
  if (v39 > 0.0)
  {
    v41 = v39 + -10.0;
    v42 = v39 <= 10.0;
    v43 = 0.0;
    if (!v42)
      v43 = v41;
    v44 = v34 + (float)(v43 * a4[1].f32[0]);
    v62 = v43;
    v70 = vadd_f32(*a3, vmul_n_f32(*a4, v43));
    v71 = v44;
    physx::Gu::intersectRayCapsuleInternal(&v70, a4, &v63, &v66, &v72, v21);
    if (!v45)
      return;
    if (v45 == 1)
    {
      v46 = v72;
    }
    else
    {
      v46 = v72;
      if (v72 >= v73)
        v46 = v73;
    }
    v40 = v62 + v46;
  }
  if (v40 >= 0.0 && v40 <= a6)
  {
    v47 = (float)(v40 * a4[1].f32[0]) + a3[1].f32[0];
    v48 = vadd_f32(vmul_n_f32(*a4, v40), *a3);
    a8[3] = v48;
    a8[4].f32[0] = v47;
    a8[6].f32[0] = v40;
    a8[2].i32[0] = -1;
    a8[6].i32[1] = 0;
    a8[7].i32[0] = 0;
    if ((*a5 & 2) == 0)
    {
      a8[5] = 0;
      a8[4].i32[1] = 0;
      v49 = 1;
LABEL_27:
      a8[2].i16[2] = v49;
      return;
    }
    if (v40 == 0.0)
    {
      v50 = -a4[1].f32[0];
      *(float32x2_t *)((char *)a8 + 36) = vneg_f32(*a4);
    }
    else
    {
      v51 = v66 - v63;
      v52 = v67 - v64;
      v53 = v68 - v65;
      v54 = (float)((float)((float)(v67 - v64) * (float)(v48.f32[1] - v64))
                  + (float)((float)(v48.f32[0] - v63) * (float)(v66 - v63)))
          + (float)((float)(v47 - v65) * (float)(v68 - v65));
      v55 = 0.0;
      if (v54 > 0.0)
      {
        v56 = (float)((float)(v52 * v52) + (float)(v51 * v51)) + (float)(v53 * v53);
        v55 = 1.0;
        if (v54 < v56)
          v55 = v54 / v56;
      }
      v57 = v48.f32[0] - (float)(v63 + (float)(v51 * v55));
      v58 = v48.f32[1] - (float)(v64 + (float)(v52 * v55));
      v59 = v47 - (float)(v65 + (float)(v53 * v55));
      a8[4].f32[1] = v57;
      a8[5].f32[0] = v58;
      a8[5].f32[1] = v59;
      v60 = sqrtf((float)((float)(v58 * v58) + (float)(v57 * v57)) + (float)(v59 * v59));
      if (v60 <= 0.0)
        goto LABEL_26;
      v61 = 1.0 / v60;
      a8[4].f32[1] = v57 * v61;
      a8[5].f32[0] = v58 * v61;
      v50 = v59 * v61;
    }
    a8[5].f32[1] = v50;
LABEL_26:
    v49 = 3;
    goto LABEL_27;
  }
}

uint64_t raycast_plane(float a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t result;

  v8 = *a3;
  v9 = a3[1];
  v11 = a3[2];
  v10 = a3[3];
  v12 = v10 + v10;
  v13 = (float)((float)(v10 * (float)(v10 + v10)) + -1.0) + (float)(v8 * (float)(v8 + v8));
  v14 = (float)((float)(v8 + v8) * v9) + (float)(v11 * v12);
  v15 = (float)((float)(v8 + v8) * v11) - (float)(v9 * v12);
  v16 = a5[1];
  v17 = a5[2];
  v18 = (float)((float)(v14 * v16) + (float)(*a5 * v13)) + (float)(v17 * v15);
  if (v18 >= 0.0 || v18 > -0.0000001 && v18 < 0.0000001)
    return 0;
  v19 = a4[1];
  v20 = a4[2];
  v21 = (float)-(float)((float)((float)((float)(v14 * v19) + (float)(*a4 * v13)) + (float)(v20 * v15))
                      - (float)((float)((float)(a3[5] * v14) + (float)(a3[4] * v13)) + (float)(a3[6] * v15)))
      / v18;
  *(float *)(a8 + 24) = *a4 + (float)(*a5 * v21);
  *(float *)(a8 + 28) = v19 + (float)(v16 * v21);
  *(float *)(a8 + 32) = v20 + (float)(v17 * v21);
  if (v21 < 0.0 || v21 > a1)
    return 0;
  *(_DWORD *)(a8 + 16) = -1;
  *(_DWORD *)(a8 + 52) = 0;
  *(_DWORD *)(a8 + 56) = 0;
  *(_WORD *)(a8 + 20) = 3;
  *(float *)(a8 + 36) = v13;
  *(float *)(a8 + 40) = v14;
  result = 1;
  *(float *)(a8 + 44) = v15;
  *(float *)(a8 + 48) = v21;
  return result;
}

uint64_t raycast_convexMesh(uint64_t a1, float *a2, float *a3, float32x2_t *a4, __int16 *a5, float a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  float v16;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float *v61;
  int v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  __int16 v71;
  uint64_t result;
  __int16 v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float *v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132[7];
  float32x2_t v133;
  float v134;
  __int128 v135;
  float v136[12];

  v15 = *(_QWORD *)(a1 + 32);
  v16 = 1.0 / *(float *)(a1 + 12);
  __asm { FMOV            V2.2S, #1.0 }
  v133 = vdiv_f32(_D2, *(float32x2_t *)(a1 + 4));
  v134 = v16;
  v135 = *(_OWORD *)(a1 + 16);
  v22 = a2[4] * -2.0;
  v23 = a2[5] * -2.0;
  _D2.f32[0] = a2[6] * -2.0;
  v25 = a2[2];
  v24 = a2[3];
  v26 = (float)(v24 * v24) + -0.5;
  v27 = a2[1];
  v28 = (float)((float)(v23 * v27) + (float)(*a2 * v22)) + (float)(v25 * _D2.f32[0]);
  v29 = (float)((float)(v22 * v26) - (float)((float)((float)(v27 * _D2.f32[0]) - (float)(v25 * v23)) * v24))
      + (float)(*a2 * v28);
  v30 = (float)((float)(v23 * v26) - (float)((float)((float)(v25 * v22) - (float)(*a2 * _D2.f32[0])) * v24))
      + (float)(v27 * v28);
  v31 = (float)(_D2.f32[0] * v26) - (float)((float)((float)(*a2 * v23) - (float)(v27 * v22)) * v24);
  v132[0] = -*a2;
  v132[1] = -v27;
  v132[2] = -v25;
  v132[3] = v24;
  v132[4] = v29;
  v132[5] = v30;
  v132[6] = v31 + (float)(v25 * v28);
  physx::operator*((float *)&v133, v132, v136);
  v32 = *(unsigned __int8 *)(v15 + 71);
  v33 = *(_QWORD *)(v15 + 72);
  v34 = v136[0];
  v35 = v136[1];
  v36 = *a3;
  v37 = a3[1];
  v39 = v136[2];
  v38 = v136[3];
  v41 = v136[4];
  v40 = v136[5];
  v42 = a3[2];
  v43 = v136[6];
  v44 = v136[7];
  v45 = v136[8];
  v46 = v136[9];
  v47 = v136[10];
  v48 = v136[11];
  v50 = a4->f32[0];
  v49 = a4->f32[1];
  v51 = a4[1].f32[0];
  *(_DWORD *)(a8 + 16) = -1;
  if (!v32)
  {
LABEL_13:
    *(_DWORD *)(a8 + 16) = -1;
    *(_QWORD *)(a8 + 48) = 0;
    *(_DWORD *)(a8 + 56) = 0;
    *(float *)(a8 + 24) = v36;
    *(float *)(a8 + 28) = v37;
    *(float *)(a8 + 32) = v42;
    v70 = -a4[1].f32[0];
    *(float32x2_t *)(a8 + 36) = vneg_f32(*a4);
    *(float *)(a8 + 44) = v70;
    v71 = 3;
LABEL_14:
    *(_WORD *)(a8 + 20) = v71;
    return 1;
  }
  v52 = 0;
  v53 = (float)((float)((float)(v36 * v34) + (float)(v37 * v38)) + (float)(v42 * v43)) + v46;
  v54 = (float)((float)((float)(v36 * v35) + (float)(v37 * v41)) + (float)(v42 * v44)) + v47;
  v55 = (float)((float)((float)(v36 * v39) + (float)(v37 * v40)) + (float)(v42 * v45)) + v48;
  v56 = v41 * v49;
  v57 = (float)(v39 * v50) + (float)(v40 * v49);
  v58 = (float)((float)(v34 * v50) + (float)(v38 * v49)) + (float)(v43 * v51);
  v59 = (float)((float)(v35 * v50) + v56) + (float)(v44 * v51);
  v60 = v57 + (float)(v45 * v51);
  v61 = (float *)(v33 + 8);
  LOBYTE(v62) = 1;
  v63 = -3.4028e38;
  v64 = 3.4028e38;
  do
  {
    v65 = *(v61 - 2);
    v66 = *(v61 - 1);
    v67 = v61[1] + (float)((float)((float)(v54 * v66) + (float)(v53 * v65)) + (float)(v55 * *v61));
    v68 = (float)((float)(v59 * v66) + (float)(v65 * v58)) + (float)(*v61 * v60);
    v69 = (float)-v67 / v68;
    if (v68 <= 0.0000001)
    {
      if (v68 >= -0.0000001)
      {
        if (v67 > 0.0)
          return 0;
      }
      else if (v69 > v63)
      {
        *(_DWORD *)(a8 + 16) = v52;
        v63 = (float)-v67 / v68;
      }
    }
    else if (v64 >= v69)
    {
      v64 = (float)-v67 / v68;
    }
    v62 = (v67 <= 0.0) & v62;
    ++v52;
    v61 += 5;
  }
  while (v32 != v52);
  if (v62)
    goto LABEL_13;
  result = 0;
  if (v63 < (float)(a6 + -0.00001) && v63 > 0.0 && v63 < v64)
  {
    v73 = *a5;
    if ((*a5 & 1) != 0)
    {
      v129 = v53 + (float)(v58 * v63);
      v130 = v54 + (float)(v59 * v63);
      v131 = v55 + (float)(v60 * v63);
      v74 = *(float *)(a1 + 20);
      v75 = *(float *)(a1 + 24);
      v76 = *(float *)(a1 + 28);
      v78 = *(float *)(a1 + 12);
      v77 = *(float *)(a1 + 16);
      v79 = v74 + v74;
      v80 = v75 + v75;
      v81 = v74 * (float)(v74 + v74);
      v82 = v75 * (float)(v75 + v75);
      v83 = (float)(v77 + v77) * v74;
      v84 = (float)(v77 + v77) * v75;
      v85 = (float)(v77 + v77) * v76;
      v86 = v79 * v75;
      v87 = v79 * v76;
      v88 = v80 * v76;
      v89 = (float)(1.0 - v81) - v82;
      v90 = v83 + v88;
      v91 = v84 - v87;
      v92 = v83 - v88;
      v93 = 1.0 - (float)(v77 * (float)(v77 + v77));
      v94 = v93 - v82;
      v95 = v86 + v85;
      v96 = v84 + v87;
      v97 = v86 - v85;
      v98 = v93 - v81;
      v99 = *(float *)(a1 + 4);
      v100 = *(float *)(a1 + 8);
      v101 = v99 * v89;
      v102 = v90 * v100;
      v103 = v91 * v78;
      v104 = (float)((float)(v89 * (float)(v99 * v89)) + (float)(v90 * (float)(v90 * v100)))
           + (float)(v91 * (float)(v91 * v78));
      v105 = (float)(v131
                   * (float)((float)((float)(v96 * (float)(v99 * v92)) + (float)(v97 * (float)(v94 * v100)))
                           + (float)(v98 * (float)(v95 * v78))))
           + (float)((float)(v129
                           * (float)((float)((float)(v89 * (float)(v99 * v92)) + (float)(v90 * (float)(v94 * v100)))
                                   + (float)(v91 * (float)(v95 * v78))))
                   + (float)(v130
                           * (float)((float)((float)(v92 * (float)(v99 * v92)) + (float)(v94 * (float)(v94 * v100)))
                                   + (float)(v95 * (float)(v95 * v78)))));
      v106 = (float)(v131
                   * (float)((float)((float)(v96 * (float)(v99 * v96)) + (float)(v97 * (float)(v97 * v100)))
                           + (float)(v98 * (float)(v98 * v78))))
           + (float)((float)(v129
                           * (float)((float)((float)(v89 * (float)(v99 * v96)) + (float)(v90 * (float)(v97 * v100)))
                                   + (float)(v91 * (float)(v98 * v78))))
                   + (float)(v130
                           * (float)((float)((float)(v92 * (float)(v99 * v96)) + (float)(v94 * (float)(v97 * v100)))
                                   + (float)(v95 * (float)(v98 * v78)))));
      v107 = (float)((float)(v131 * (float)((float)((float)(v96 * v101) + (float)(v97 * v102)) + (float)(v98 * v103)))
                   + (float)((float)(v129 * v104)
                           + (float)(v130
                                   * (float)((float)((float)(v92 * v101) + (float)(v94 * v102)) + (float)(v95 * v103)))))
           + (float)((float)(v131 * (float)((float)((float)(v96 * v101) + (float)(v97 * v102)) + (float)(v98 * v103)))
                   + (float)((float)(v129 * v104)
                           + (float)(v130
                                   * (float)((float)((float)(v92 * v101) + (float)(v94 * v102)) + (float)(v95 * v103)))));
      v108 = v105 + v105;
      v109 = v106 + v106;
      v111 = a2[2];
      v110 = a2[3];
      v112 = (float)(v110 * v110) + -0.5;
      v113 = a2[1];
      v114 = (float)((float)(v113 * v108) + (float)(*a2 * v107)) + (float)(v111 * v109);
      v115 = (float)((float)(v110 * (float)((float)(v113 * v109) - (float)(v111 * v108))) + (float)(v107 * v112))
           + (float)(*a2 * v114);
      v116 = (float)((float)(v110 * (float)((float)(v111 * v107) - (float)(*a2 * v109))) + (float)(v108 * v112))
           + (float)(v113 * v114);
      v117 = (float)((float)(v110 * (float)((float)(*a2 * v108) - (float)(v113 * v107))) + (float)(v109 * v112))
           + (float)(v111 * v114);
      v118 = a2[5] + v116;
      v119 = a2[6] + v117;
      *(float *)(a8 + 24) = a2[4] + v115;
      *(float *)(a8 + 28) = v118;
      *(float *)(a8 + 32) = v119;
      v71 = 1025;
    }
    else
    {
      v71 = 1024;
    }
    *(float *)(a8 + 48) = v63;
    *(_QWORD *)(a8 + 52) = 0;
    *(_QWORD *)(a8 + 36) = 0;
    *(_DWORD *)(a8 + 44) = 0;
    if ((v73 & 2) != 0)
    {
      v71 |= 2u;
      v120 = (float *)(v33 + 20 * *(unsigned int *)(a8 + 16));
      v121 = v120[1];
      v122 = (float)(v35 * v121) + (float)(v34 * *v120);
      v123 = v120[2];
      v124 = v122 + (float)(v39 * v123);
      v125 = (float)((float)(v41 * v121) + (float)(v38 * *v120)) + (float)(v40 * v123);
      v126 = (float)((float)(v44 * v121) + (float)(v43 * *v120)) + (float)(v45 * v123);
      *(float *)(a8 + 36) = v124;
      *(float *)(a8 + 40) = v125;
      *(float *)(a8 + 44) = v126;
      v127 = sqrtf((float)((float)(v125 * v125) + (float)(v124 * v124)) + (float)(v126 * v126));
      if (v127 > 0.0)
      {
        v128 = 1.0 / v127;
        *(float *)(a8 + 36) = v124 * v128;
        *(float *)(a8 + 40) = v125 * v128;
        *(float *)(a8 + 44) = v126 * v128;
      }
    }
    goto LABEL_14;
  }
  return result;
}

float physx::operator*@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float result;

  v4 = a1[2];
  v3 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = v5 + v5;
  v8 = v6 + v6;
  v9 = v5 * (float)(v5 + v5);
  v10 = v6 * (float)(v6 + v6);
  v11 = (float)(v3 + v3) * v5;
  v12 = (float)(v3 + v3) * v6;
  v13 = a1[6];
  v14 = (float)(v3 + v3) * v13;
  v15 = v7 * v6;
  v16 = v7 * v13;
  v17 = v8 * v13;
  v18 = (float)(1.0 - v9) - v10;
  v19 = v11 + v17;
  v20 = v12 - v16;
  v21 = v11 - v17;
  v22 = 1.0 - (float)(v3 * (float)(v3 + v3));
  v23 = v22 - v10;
  v24 = v15 + v14;
  v25 = v12 + v16;
  v26 = v15 - v14;
  v27 = v22 - v9;
  v28 = a1[1];
  v29 = *a1 * v18;
  v30 = *a1 * v21;
  v31 = *a1 * v25;
  v32 = v19 * v28;
  v33 = v23 * v28;
  v34 = v26 * v28;
  v35 = v20 * v4;
  v36 = v24 * v4;
  v37 = (float)(v22 - v9) * v4;
  v38 = (float)(v18 * v31) + (float)(v19 * (float)(v26 * v28));
  v39 = (float)((float)(v18 * v29) + (float)(v19 * (float)(v19 * v28))) + (float)(v20 * (float)(v20 * v4));
  v40 = (float)((float)(v18 * v30) + (float)(v19 * v33)) + (float)(v20 * (float)(v24 * v4));
  v41 = v38 + (float)(v20 * v37);
  v42 = (float)(v21 * v29) + (float)(v23 * v32);
  v43 = (float)(v21 * v30) + (float)(v23 * v33);
  v44 = (float)(v21 * v31) + (float)(v23 * v34);
  v45 = v42 + (float)(v24 * v35);
  v46 = v43 + (float)(v24 * v36);
  v47 = v44 + (float)(v24 * v37);
  v48 = (float)(v25 * v29) + (float)(v26 * v32);
  v49 = (float)(v25 * v30) + (float)(v26 * v33);
  v50 = (float)(v25 * v31) + (float)(v26 * v34);
  v51 = v27 * v36;
  v52 = v27 * v37;
  v53 = v48 + (float)(v27 * v35);
  v54 = v49 + v51;
  v55 = v50 + v52;
  v56 = *a2;
  v57 = a2[1];
  v58 = a2[2];
  v59 = a2[3];
  v60 = v57 + v57;
  v61 = v58 + v58;
  v62 = v57 * (float)(v57 + v57);
  v63 = v58 * (float)(v58 + v58);
  v64 = (float)(v56 + v56) * v57;
  v65 = (float)(v56 + v56) * v58;
  v66 = (float)(v56 + v56) * v59;
  v67 = v60 * v58;
  v68 = v60 * v59;
  v69 = v61 * v59;
  v70 = (float)(1.0 - v62) - v63;
  v71 = v64 + v69;
  v72 = v65 - v68;
  v73 = v64 - v69;
  v74 = 1.0 - (float)(v56 * (float)(v56 + v56));
  v75 = v74 - v63;
  v76 = v67 + v66;
  v77 = v65 + v68;
  v78 = v67 - v66;
  v79 = v74 - v62;
  v80 = (float)(v53 * v72) + (float)((float)(v39 * v70) + (float)(v45 * v71));
  v81 = (float)(v54 * v72) + (float)((float)(v40 * v70) + (float)(v46 * v71));
  v82 = (float)(v55 * v72) + (float)((float)(v41 * v70) + (float)(v47 * v71));
  v83 = v40 * v73;
  v84 = v46 * v75;
  v85 = (float)(v39 * v73) + (float)(v45 * v75);
  v86 = (float)(v41 * v73) + (float)(v47 * v75);
  v87 = (float)(v53 * v76) + v85;
  v88 = (float)(v54 * v76) + (float)(v83 + v84);
  v89 = (float)(v55 * v76) + v86;
  v90 = v46 * v78;
  v91 = (float)(v39 * v77) + (float)(v45 * v78);
  v92 = (float)(v41 * v77) + (float)(v47 * v78);
  v93 = (float)(v53 * v79) + v91;
  v94 = (float)(v54 * v79) + (float)((float)(v40 * v77) + v90);
  v95 = (float)(v55 * v79) + v92;
  v96 = a2[4];
  v97 = a2[5];
  v98 = v39 * v96;
  v99 = v40 * v96;
  v100 = v41 * v96;
  v101 = a2[6];
  *a3 = v80;
  a3[1] = v81;
  a3[2] = v82;
  a3[3] = v87;
  a3[4] = v88;
  a3[5] = v89;
  a3[6] = v93;
  a3[7] = v94;
  a3[8] = v95;
  a3[9] = (float)(v98 + (float)(v45 * v97)) + (float)(v53 * v101);
  result = (float)(v100 + (float)(v47 * v97)) + (float)(v55 * v101);
  a3[10] = (float)(v99 + (float)(v46 * v97)) + (float)(v54 * v101);
  a3[11] = result;
  return result;
}

uint64_t raycast_triangleMesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 *a5)
{
  uint64_t (*v5)(void);
  __int16 v7;

  v5 = physx::Gu::gMidphaseRaycastTable[*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 8) - 3];
  v7 = *a5;
  return v5();
}

uint64_t raycast_heightField(float32x2_t *a1, float *a2, float *a3, float *a4, __int16 *a5, int a6, uint64_t a7, float a8)
{
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  __int8 v40;
  _BOOL4 v41;
  float v42;
  float v47;
  float v48;
  float v49;
  float32x2_t v50;
  float32x2_t v51;
  int v52;
  uint64_t result;
  __int16 v54;
  int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  _BOOL4 v64;
  _BOOL4 v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float32x2_t v70;
  int v71;
  int v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  BOOL v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  int v109;
  int v110;
  float v111;
  int v112;
  int v113;
  float v114;
  float v115;
  float v116;
  float v117;
  int v118;
  float v119;
  int v120;
  float v121;
  float v122;
  char *v123;
  float v124;
  float v125;
  int v126;
  uint64_t v127;
  float v128;
  float v129;
  int v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  int v147;
  int v148;
  uint64_t v149;
  int v150;
  float *v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  int v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  BOOL v204;
  float v205;
  float v206;
  float v207;
  float v208;
  BOOL v209;
  float v210;
  float v211;
  float v212;
  float v213;
  int v214;
  char v215;
  int v216;
  char v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  BOOL v229;
  float v230;
  float v231;
  float v232;
  float v233;
  BOOL v234;
  BOOL v235;
  float v236;
  float v237;
  float v238;
  float32x2_t v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  float v250;
  float v251;
  _BOOL4 v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float32x2_t v265;
  float v266;
  uint64_t v267;
  int v268;
  unsigned int v269;
  int32x2_t *v270;
  float *v271;
  float *v272;
  float *v273;
  float32x2_t *v274;
  __int16 v275;
  char v276;
  float v277;
  char v278[12];
  float32x2_t v279;
  float v280;
  float32x2_t v281;
  float v282;
  unint64_t v283;
  float v284;
  int32x2_t v285;
  float v286;
  float32x2_t v287;
  float *v288;
  float v289[3];
  float32x2_t v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  _DWORD v298[3];
  _DWORD v299[3];
  uint64_t v300;
  float v301[4];
  uint64_t v302;

  v302 = *MEMORY[0x24BDAC8D0];
  v14 = a2[4] * -2.0;
  v15 = a2[5] * -2.0;
  v16 = a2[6] * -2.0;
  v18 = a2[2];
  v17 = a2[3];
  v19 = (float)(v17 * v17) + -0.5;
  v20 = *a2;
  v21 = a2[1];
  v22 = (float)((float)(v15 * v21) + (float)(*a2 * v14)) + (float)(v18 * v16);
  v23 = (float)((float)(v14 * v19) - (float)((float)((float)(v21 * v16) - (float)(v18 * v15)) * v17))
      + (float)(*a2 * v22);
  v24 = (float)((float)(v15 * v19) - (float)((float)((float)(v18 * v14) - (float)(*a2 * v16)) * v17))
      + (float)(v21 * v22);
  v25 = (float)((float)(v16 * v19) - (float)((float)((float)(*a2 * v15) - (float)(v21 * v14)) * v17))
      + (float)(v18 * v22);
  v26 = *a3 + *a3;
  v27 = a3[1] + a3[1];
  v28 = a3[2] + a3[2];
  v29 = (float)((float)-(float)(v21 * v27) - (float)(*a2 * v26)) - (float)(v18 * v28);
  v30 = (float)((float)(v17 * (float)((float)(v18 * v27) - (float)(v21 * v28))) + (float)(v26 * v19))
      - (float)(*a2 * v29);
  v31 = (float)((float)(v17 * (float)((float)(*a2 * v28) - (float)(v18 * v26))) + (float)(v27 * v19))
      - (float)(v21 * v29);
  v32 = (float)((float)(v17 * (float)((float)(v21 * v26) - (float)(*a2 * v27))) + (float)(v28 * v19))
      - (float)(v18 * v29);
  v290.f32[0] = v23 + v30;
  v290.f32[1] = v24 + v31;
  v291 = v25 + v32;
  v33 = *a4 + *a4;
  v34 = a4[1] + a4[1];
  v35 = a4[2] + a4[2];
  v36 = (float)((float)-(float)(v21 * v34) - (float)(v20 * v33)) - (float)(v18 * v35);
  v37 = (float)((float)(v17 * (float)((float)(v18 * v34) - (float)(v21 * v35))) + (float)(v33 * v19))
      - (float)(v20 * v36);
  v38 = (float)((float)(v17 * (float)((float)(v20 * v35) - (float)(v18 * v33))) + (float)(v34 * v19))
      - (float)(v21 * v36);
  v39 = (float)((float)(v17 * (float)((float)(v21 * v33) - (float)(v20 * v34))) + (float)(v35 * v19))
      - (float)(v18 * v36);
  v289[0] = v37;
  v289[1] = v38;
  v289[2] = v39;
  v40 = a1[3].i8[4];
  v41 = (v40 & 2) == 0 && (*a5 & 0x80) == 0;
  v252 = v41;
  v287 = a1[1];
  v288 = (float *)a1;
  v42 = a1[3].f32[0];
  __asm { FMOV            V2.2S, #1.0 }
  v285 = vrev64_s32((int32x2_t)vdiv_f32(_D2, a1[2]));
  v286 = 1.0 / v42;
  v283 = __PAIR64__(LODWORD(v38), LODWORD(v37));
  v284 = v39;
  v47 = sqrtf((float)((float)(v38 * v38) + (float)(v37 * v37)) + (float)(v39 * v39));
  if (v47 >= 1.0e-20)
  {
    v37 = v37 * (float)(1.0 / v47);
    v38 = v38 * (float)(1.0 / v47);
    v283 = __PAIR64__(LODWORD(v38), LODWORD(v37));
    v39 = v39 * (float)(1.0 / v47);
    v284 = v39;
  }
  physx::Gu::HeightFieldUtil::computeLocalBounds((uint64_t)&v285, (float *)&v279);
  v48 = (float)(v280 + v282) * 0.5;
  v49 = (float)((float)(v282 - v280) * 0.5) * 1.01;
  v50 = vmul_f32(vadd_f32(v279, v281), (float32x2_t)0x3F0000003F000000);
  v51 = vmul_f32(vmul_f32(vsub_f32(v281, v279), (float32x2_t)0x3F0000003F000000), (float32x2_t)vdup_n_s32(0x3F8147AEu));
  v279 = vsub_f32(v50, v51);
  v280 = v48 - v49;
  v281 = vadd_f32(v50, v51);
  v282 = v48 + v49;
  v277 = 0.0;
  v52 = physx::Gu::rayAABBIntersect2((uint64_t)&v279, (uint64_t)&v281, (uint64_t)&v290, (uint64_t)v289, (uint64_t)v278, &v277);
  result = 0;
  if (v52 && v277 <= a8)
  {
    v54 = *a5;
    if ((*a5 & 0x20) != 0)
      v55 = a6;
    else
      v55 = 1;
    v267 = a7;
    v268 = v55;
    v269 = 0;
    v270 = &v285;
    v271 = a2;
    v272 = a4;
    v273 = v289;
    v274 = &v290;
    v275 = v54;
    v276 = (v40 & 2) >> 1;
    v56 = v290.f32[0];
    v57 = 0.0;
    v265 = v290;
    v58 = v291;
    v266 = v291;
    if (v277 <= 0.0)
    {
      v253 = v290.f32[1];
    }
    else
    {
      v57 = v277 + -10.0;
      v56 = v290.f32[0] + (float)((float)(v277 + -10.0) * v37);
      v58 = v291 + (float)((float)(v277 + -10.0) * v39);
      v265.f32[0] = v56;
      v265.f32[1] = v290.f32[1] + (float)((float)(v277 + -10.0) * v38);
      v253 = v265.f32[1];
      v266 = v58;
    }
    v59 = a8 - v57;
    v60 = v281.f32[0] - v279.f32[0];
    v61 = v281.f32[1] - v279.f32[1];
    if ((float)(v281.f32[1] - v279.f32[1]) <= (float)(v282 - v280))
      v61 = v282 - v280;
    if (v60 <= v61)
      v60 = v61;
    v62 = (float)(v60 * 2.0) + 10.0;
    if (v59 >= v62)
      v63 = v62;
    else
      v63 = v59;
    v300 = 0;
    v64 = physx::Gu::intersectRayAABB2(&v279, &v281, &v265, (float32x2_t *)&v283, (float *)&v300 + 1, (float *)&v300, v63);
    v65 = v252;
    v66 = v253;
    if (v64)
    {
      v67 = (float)(*((float *)&v300 + 1) * v38) + v253;
      v68 = (float)(*((float *)&v300 + 1) * v39) + v58;
      v69 = v56;
      v70 = v287;
      v71 = *(_DWORD *)(*(_QWORD *)&v287 + 56);
      v72 = *(_DWORD *)(*(_QWORD *)&v287 + 60);
      v73 = (float)((float)(*((float *)&v300 + 1) * v37) + v56) * *(float *)v285.i32;
      v74 = fmaxf(v73, 0.0000001);
      v75 = (float)((float)(v71 - 1) * 1.0) + 0.0;
      if (v74 < v75)
        v75 = v74;
      v76 = v68 * v286;
      v77 = fmaxf(v68 * v286, 0.0000001);
      v78 = (float)((float)(v72 - 1) * 1.0) + 0.0;
      if (v77 < v78)
        v78 = v77;
      v79 = (float)(v56 + (float)(v37 * *(float *)&v300)) * *(float *)v285.i32;
      v80 = (float)(v58 + (float)(v39 * *(float *)&v300)) * v286;
      if ((float)(v79 - v73) < 0.0)
        v81 = -1.0;
      else
        v81 = 1.0;
      if ((float)(v80 - v76) < 0.0)
        v82 = -1.0;
      else
        v82 = 1.0;
      v258 = v82;
      v259 = v81;
      v83 = v81 * 1.0e-10;
      if (vabds_f32(v79, v73) >= 1.0e-10)
        v84 = v79 - v73;
      else
        v84 = v83;
      if (vabds_f32(v80, v76) >= 1.0e-10)
        v85 = v80 - v76;
      else
        v85 = v82 * 1.0e-10;
      v86 = (float)(v63 * v37) * *(float *)v285.i32;
      v87 = v63 * v38;
      v88 = (float)(v63 * v39) * v286;
      v89 = sqrtf((float)((float)(v87 * v87) + (float)(v86 * v86)) + (float)(v88 * v88));
      v90 = v89 <= 1.0e-20;
      v236 = v89;
      v91 = 1.0 / v89;
      v92 = v86 * v91;
      v93 = (float)(v63 * v38) * v91;
      v94 = v88 * v91;
      if (v90)
        v95 = (float)(v63 * v39) * v286;
      else
        v95 = v94;
      if (!v90)
      {
        v87 = v93;
        v86 = v92;
      }
      v263 = v86;
      v264 = v87;
      v96 = floorf(v75);
      v97 = ceilf(v75);
      v98 = floorf(v78);
      v99 = ceilf(v78);
      if (v85 <= 0.0)
        v100 = v99;
      else
        v100 = v98;
      v101 = v96 + -1.0;
      if (v96 != v75)
        v101 = v96;
      v102 = v97 + 1.0;
      if (v97 != v75)
        v102 = v97;
      if (v84 <= 0.0)
        v103 = v97;
      else
        v103 = v96;
      if (v84 > 0.0)
        v104 = v102;
      else
        v104 = v101;
      v105 = v98 + -1.0;
      if (v98 != v78)
        v105 = v98;
      if (v99 == v78)
        v106 = v99 + 1.0;
      else
        v106 = v99;
      if (v85 <= 0.0)
        v106 = v105;
      v107 = (float)(v104 - v73) / v84;
      v108 = (float)(v106 - v76) / v85;
      if (v107 < 0.0)
        v107 = fabsf(0.0000001 / v84);
      v109 = (int)v103;
      v110 = (int)v100;
      v111 = (float)(v253 + (float)(v38 * *(float *)&v300)) - v67;
      v112 = (int)v259;
      v113 = (int)v258;
      if (v108 < 0.0)
        v108 = fabsf(0.0000001 / v85);
      v114 = v288[4];
      v250 = v288[5];
      v251 = v288[6];
      v260 = v58 * v286;
      v261 = v69 * *(float *)v285.i32;
      v242 = 1.0 / fabsf(v84);
      v115 = fabsf(v85);
      v116 = (float)v109;
      v117 = (float)v110;
      v118 = 1 - v113;
      if (v113 > 1)
        v118 = 2 - v113;
      v119 = v67 + (float)(v111 * 0.0);
      v249 = (v118 >> 1) - v112 + 1;
      v120 = v112 + (v118 >> 1);
      v248 = 2 - v120;
      v246 = v112 - (v118 >> 1) + 2;
      v247 = v120 + 1;
      v121 = -v95;
      v122 = -v263;
      v257 = -v264;
      v245 = (float)v71;
      v123 = "N2re23IntrospectionFixedArrayINS_7Vector3IfEEEE" + 30;
      v240 = v67;
      v241 = 1.0 / v115;
      v239 = v287;
      v256 = v95;
      v243 = -v95;
      v244 = v111;
      v237 = v288[4];
      do
      {
        v124 = v119;
        if (v107 >= v108)
          v125 = v108;
        else
          v125 = v107;
        v119 = v67 + (float)(v125 * v111);
        v126 = v109 + v112;
        v127 = *(_QWORD *)(*(_QWORD *)&v70 + 80);
        v128 = v114 * (float)*(__int16 *)(v127 + 4 * (v110 + v109 * v72));
        v129 = v114 * (float)*(__int16 *)(v127 + 4 * (v110 + v109 * v72 + v113));
        v130 = *(__int16 *)(v127 + 4 * (v110 + (v109 + v112) * v72));
        v301[0] = v128;
        v301[1] = v129;
        v131 = v114 * (float)v130;
        v132 = v114 * (float)*(__int16 *)(v127 + 4 * (v110 + (v109 + v112) * v72 + v113));
        v301[2] = v131;
        v301[3] = v132;
        if (v131 >= v132)
          v133 = v132;
        else
          v133 = v114 * (float)v130;
        if (v131 <= v132)
          v131 = v132;
        if (v128 >= v129)
          v134 = v129;
        else
          v134 = v128;
        if (v128 <= v129)
          v128 = v129;
        if (v134 >= v133)
          v135 = v133;
        else
          v135 = v134;
        if (v128 <= v131)
          v128 = v131;
        if (v124 >= v119)
          v136 = v67 + (float)(v125 * v111);
        else
          v136 = v124;
        if (v124 <= v119)
          v124 = v67 + (float)(v125 * v111);
        v137 = v124 + 0.0001;
        if ((float)(v136 + -0.0001) > v128 || v137 < v135)
          goto LABEL_161;
        v139 = v301[v249];
        v140 = v301[v248];
        v141 = v301[v247];
        v142 = v301[v246];
        v143 = v259 + v116;
        if (v116 >= (float)(v259 + v116))
          v144 = v259 + v116;
        else
          v144 = v116;
        if (v116 > (float)(v259 + v116))
          v143 = v116;
        v145 = v258 + v117;
        if (v117 >= (float)(v258 + v117))
          v146 = v258 + v117;
        else
          v146 = v117;
        if (v117 > v145)
          v145 = v117;
        *(float *)v299 = v144;
        *(float *)&v299[1] = v140;
        *(float *)&v299[2] = v145;
        *(float *)v298 = v143;
        *(float *)&v298[1] = v142;
        *(float *)&v298[2] = v145;
        if (v126 >= v109)
          v147 = v109;
        else
          v147 = v109 + v112;
        v148 = v110 + v113;
        if (v110 + v113 >= v110)
          v148 = v110;
        v149 = (v148 + v147 * v72);
        v150 = *(unsigned __int8 *)(v127 + 4 * v149 + 2);
        v262 = v125;
        if ((v150 & 0x80) != 0)
        {
          v151 = (float *)v299;
          v152 = v145;
          v145 = v146;
          v153 = v143;
        }
        else
        {
          v151 = (float *)v298;
          v152 = v146;
          v142 = v141;
          v141 = v139;
          v139 = v140;
          v153 = v144;
        }
        v154 = v144 - v153;
        v155 = v139 - v141;
        v156 = v145 - v146;
        v157 = v143 - v153;
        v158 = v142 - v141;
        v159 = v152 - v146;
        v160 = (float)((float)(v142 - v141) * v121) + (float)(v264 * (float)(v152 - v146));
        v161 = (float)((float)(v152 - v146) * v122) + (float)(v95 * (float)(v143 - v153));
        v162 = (float)((float)(v143 - v153) * v257) + (float)(v263 * (float)(v142 - v141));
        v163 = (float)((float)((float)(v139 - v141) * v161) + (float)((float)(v144 - v153) * v160))
             + (float)((float)(v145 - v146) * v162);
        v255 = v116;
        if (v65)
        {
          v164 = 0.0;
          if (v163 < 1.4211e-14)
            goto LABEL_117;
          v176 = v261 - v153;
          v177 = v66 - v141;
          v178 = v260 - v146;
          v179 = (float)((float)((float)(v66 - v141) * v161) + (float)(v176 * v160))
               + (float)((float)(v260 - v146) * v162);
          v180 = -(float)(v163 * 0.0001);
          v181 = v163 + (float)(v163 * 0.0001);
          if (v179 < v180 || v179 > v181)
          {
LABEL_128:
            v165 = 0.0;
            v95 = v256;
            goto LABEL_129;
          }
          v230 = (float)(v177 * v156) - (float)(v178 * v155);
          v231 = (float)(v178 * v154) - (float)(v176 * v156);
          v232 = (float)(v176 * v155) - (float)(v177 * v154);
          v95 = v256;
          v233 = (float)((float)(v264 * v231) + (float)(v263 * v230)) + (float)(v256 * v232);
          v234 = v233 >= v180 && (float)(v179 + v233) <= v181;
          v165 = 0.0;
          if (!v234)
            goto LABEL_129;
          v175 = (float)(1.0 / v163)
               * (float)((float)((float)(v158 * v231) + (float)(v157 * v230)) + (float)(v159 * v232));
          v170 = v179 * (float)(1.0 / v163);
          v174 = (float)(1.0 / v163) * v233;
        }
        else
        {
          v164 = 0.0;
          if (fabsf(v163) < 1.4211e-14)
            goto LABEL_128;
          v166 = 1.0 / v163;
          v167 = v261 - v153;
          v168 = v66 - v141;
          v169 = v260 - v146;
          v170 = (float)((float)((float)((float)(v66 - v141) * v161) + (float)(v167 * v160))
                       + (float)((float)(v260 - v146) * v162))
               * v166;
          if (v170 < -0.0001 || v170 > 1.0001)
            goto LABEL_128;
          v171 = (float)(v168 * v156) - (float)(v169 * v155);
          v172 = (float)(v169 * v154) - (float)(v167 * v156);
          v173 = (float)(v167 * v155) - (float)(v168 * v154);
          v95 = v256;
          v174 = v166 * (float)((float)((float)(v264 * v172) + (float)(v263 * v171)) + (float)(v256 * v173));
          if (v174 < -0.0001)
          {
LABEL_117:
            v165 = 0.0;
LABEL_129:
            v183 = 0;
            v175 = 3.4028e38;
            v174 = v164;
            v170 = v165;
            goto LABEL_130;
          }
          v165 = 0.0;
          if ((float)(v170 + v174) > 1.0001)
            goto LABEL_129;
          v175 = v166 * (float)((float)((float)(v158 * v172) + (float)(v157 * v171)) + (float)(v159 * v173));
        }
        if ((~v150 & 0x7F) == 0 || (v175 >= 0.0 ? (v235 = v175 > v236) : (v235 = 1), v235))
        {
          v164 = v174;
          v165 = v170;
          goto LABEL_129;
        }
        v183 = 1;
LABEL_130:
        v184 = *v151;
        v185 = v151[1];
        v186 = v143 - *v151;
        v187 = v142 - v185;
        v188 = v151[2];
        v189 = v152 - v188;
        v190 = v144 - *v151;
        v191 = v139 - v185;
        v192 = v145 - v188;
        v193 = (float)((float)(v139 - v185) * v121) + (float)(v264 * (float)(v145 - v188));
        v194 = (float)((float)(v145 - v188) * v122) + (float)(v95 * v190);
        v195 = (float)(v190 * v257) + (float)(v263 * (float)(v139 - v185));
        v196 = (float)((float)(v187 * v194) + (float)(v186 * v193)) + (float)(v189 * v195);
        v254 = v117;
        if (v65)
        {
          v197 = 0.0;
          if (v196 < 1.4211e-14
            || ((v198 = v261 - v184,
                 v199 = v66 - v185,
                 v200 = v260 - v188,
                 v201 = (float)((float)((float)(v66 - v185) * v194) + (float)((float)(v261 - v184) * v193))
                      + (float)((float)(v260 - v188) * v195),
                 v202 = -(float)(v196 * 0.0001),
                 v203 = v196 + (float)(v196 * 0.0001),
                 v201 >= v202)
              ? (v204 = v201 <= v203)
              : (v204 = 0),
                !v204))
          {
LABEL_144:
            v210 = 0.0;
            v125 = v262;
            goto LABEL_145;
          }
          v205 = (float)(v199 * v189) - (float)(v200 * v187);
          v206 = (float)(v200 * v186) - (float)(v198 * v189);
          v207 = (float)(v198 * v187) - (float)(v199 * v186);
          v208 = (float)((float)(v264 * v206) + (float)(v263 * v205)) + (float)(v95 * v207);
          v209 = v208 >= v202 && (float)(v208 + v201) <= v203;
          v210 = 0.0;
          v125 = v262;
          if (!v209)
            goto LABEL_145;
          v211 = (float)((float)((float)(v191 * v206) + (float)(v190 * v205)) + (float)(v192 * v207))
               * (float)(1.0 / v196);
          v212 = v201 * (float)(1.0 / v196);
          v213 = v208 * (float)(1.0 / v196);
        }
        else
        {
          v197 = 0.0;
          if (fabsf(v196) < 1.4211e-14)
            goto LABEL_144;
          v222 = 1.0 / v196;
          v223 = v261 - v184;
          v224 = v66 - v185;
          v225 = v260 - v188;
          v212 = (float)((float)((float)((float)(v66 - v185) * v194) + (float)((float)(v261 - v184) * v193))
                       + (float)(v225 * v195))
               * v222;
          if (v212 < -0.0001)
            goto LABEL_144;
          if (v212 > 1.0001)
            goto LABEL_144;
          v226 = (float)(v224 * v189) - (float)(v225 * v187);
          v227 = (float)(v225 * v186) - (float)(v223 * v189);
          v228 = (float)(v223 * v187) - (float)(v224 * v186);
          v213 = (float)((float)((float)(v264 * v227) + (float)(v263 * v226)) + (float)(v95 * v228)) * v222;
          if (v213 < -0.0001)
            goto LABEL_144;
          v210 = 0.0;
          v125 = v262;
          if ((float)(v212 + v213) > 1.0001)
            goto LABEL_145;
          v211 = (float)((float)((float)(v191 * v227) + (float)(v190 * v226)) + (float)(v192 * v228)) * v222;
        }
        v229 = v211 < 0.0 || v211 > v236;
        if (!v229 && (~*(unsigned __int8 *)(v127 + 4 * v149 + 3) & 0x7F) != 0)
        {
          v214 = 1;
          goto LABEL_146;
        }
        v197 = v213;
        v210 = v212;
LABEL_145:
        v214 = 0;
        v211 = 3.4028e38;
        v213 = v197;
        v212 = v210;
LABEL_146:
        v215 = v183 ^ 1;
        if (v175 > v211)
          v215 = 1;
        if ((v215 & 1) != 0)
        {
          v217 = v214 ^ 1;
          if (v211 > v175)
            v217 = 1;
          if ((v217 & 1) == 0)
          {
            v218 = v107;
            v219 = v174;
            v238 = v108;
            v220 = v218;
            v221 = v170;
            v295 = v250 * (float)(v261 + (float)(v263 * v211));
            v296 = v66 + (float)(v264 * v211);
            v297 = v251 * (float)(v260 + (float)(v95 * v211));
              return v269;
            if (v183)
            {
              v292 = v250 * (float)(v261 + (float)(v263 * v175));
              v293 = v253 + (float)(v264 * v175);
              v294 = v251 * (float)(v260 + (float)(v256 * v175));
                return v269;
            }
            v65 = v252;
            v66 = v253;
            v67 = v240;
            v70 = v239;
            v95 = v256;
            v123 = "NS_7Vector3IfEEEE";
            v125 = v262;
            v107 = v220;
            v114 = v237;
            v108 = v238;
          }
        }
        else
        {
          v295 = v250 * (float)(v261 + (float)(v263 * v175));
          v296 = v66 + (float)(v264 * v175);
          v297 = v251 * (float)(v260 + (float)(v95 * v175));
          v216 = 2 * v149;
            return v269;
          if (v214)
          {
            v292 = v250 * (float)(v261 + (float)(v263 * v211));
            v293 = v253 + (float)(v264 * v211);
            v294 = v251 * (float)(v260 + (float)(v256 * v211));
              return v269;
          }
          v65 = v252;
          v66 = v253;
          v67 = v240;
          v70 = v239;
          v95 = v256;
          v123 = "N2re23IntrospectionFixedArrayINS_7Vector3IfEEEE" + 30;
          v125 = v262;
        }
        v121 = v243;
        v111 = v244;
        v117 = v254;
        v116 = v255;
        v122 = -v263;
LABEL_161:
        if (v107 >= v108)
        {
          v110 += v113;
          if (v110 + v113 < 0 || (float)(v110 + v113) >= (float)v72)
            return v269;
          v117 = v258 + v117;
          v108 = v241 + v108;
        }
        else
        {
          if (v126 + v112 < 0 || (float)(v126 + v112) >= v245)
            return v269;
          v116 = v259 + v116;
          v107 = v242 + v107;
          v109 += v112;
        }
      }
      while (v125 < *((float *)v123 + 78));
    }
    return v269;
  }
  return result;
}

uint64_t raycast_heightField_unregistered(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuRaycastTests.cpp", 538, "Height Field Raycast test called with height fields unregistered ", a6, a7, a8, vars0);
  return 0;
}

uint64_t physx::readDword(int a1, void (***a2)(_QWORD, unsigned __int32 *, uint64_t))
{
  uint8x8_t v3;
  int16x8_t v4;
  unsigned __int32 v6;

  v6 = 0;
  (**a2)(a2, &v6, 4);
  if (a1)
  {
    v3.i32[0] = v6;
    v4 = (int16x8_t)vmovl_u8(v3);
    *(int16x4_t *)v4.i8 = vrev64_s16(*(int16x4_t *)v4.i8);
    return vmovn_s16(v4).u32[0];
  }
  return v6;
}

uint64_t physx::readFloatBuffer(__int32 *a1, unsigned int a2, int a3, void (***a4)(_QWORD, __int32 *, _QWORD))
{
  __int32 *v6;
  uint8x8_t v7;
  uint64_t v8;
  int16x8_t v9;

  v6 = a1;
  (**a4)(a4, a1, 4 * a2);
  if (a2 && a3)
  {
    v8 = a2;
    do
    {
      v7.i32[0] = *v6;
      v9 = (int16x8_t)vmovl_u8(v7);
      *(int16x4_t *)v9.i8 = vrev64_s16(*(int16x4_t *)v9.i8);
      v7 = (uint8x8_t)vmovn_s16(v9);
      *v6++ = v7.i32[0];
      --v8;
    }
    while (v8);
  }
  return 1;
}

uint64_t physx::writeFloatBuffer(uint64_t result, int a2, int a3, uint64_t (***a4)(_QWORD, _QWORD, _QWORD))
{
  int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v5 = a2;
  v6 = (unsigned int *)result;
  if (!a3)
    return (**a4)(a4, result, (4 * a2));
  if (a2)
  {
    do
    {
      --v5;
      v7 = *v6++;
      v8 = bswap32(v7);
      result = (**a4)(a4, &v8, 4);
    }
    while (v5);
  }
  return result;
}

uint64_t physx::writeWordBuffer(uint64_t result, int a2, int a3, uint64_t (***a4)(_QWORD, _QWORD, _QWORD))
{
  int v5;
  unsigned __int16 *v6;
  unsigned int v7;
  __int16 v8;

  v5 = a2;
  v6 = (unsigned __int16 *)result;
  if (!a3)
    return (**a4)(a4, result, (2 * a2));
  if (a2)
  {
    do
    {
      v7 = *v6++;
      --v5;
      v8 = bswap32(v7) >> 16;
      result = (**a4)(a4, &v8, 2);
    }
    while (v5);
  }
  return result;
}

uint64_t physx::writeHeader(char a1, char a2, char a3, char a4, unsigned int a5, char a6, void (***a7)(_QWORD, _QWORD, _QWORD))
{
  char v13;
  char v15;
  _BYTE v16[3];
  char v17;
  char v18;
  char v19;
  char v20;
  unsigned int v21;

  v13 = a6 ^ 1;
  qmemcpy(v16, "SXN", sizeof(v16));
  v15 = a6 ^ 1;
  (**a7)(a7, &v16[2], 1);
  (**a7)(a7, &v16[1], 1);
  (**a7)(a7, v16, 1);
  (**a7)(a7, &v15, 1);
  v20 = a1;
  v19 = a2;
  v18 = a3;
  v17 = a4;
  (**a7)(a7, &v20, 1);
  (**a7)(a7, &v19, 1);
  (**a7)(a7, &v18, 1);
  (**a7)(a7, &v17, 1);
  v21 = a5;
  if ((v13 & 1) == 0)
    v21 = bswap32(a5);
  (**a7)(a7, &v21, 4);
  return 1;
}

uint64_t physx::Gu::WriteHeader(char a1, char a2, char a3, char a4, unsigned int a5, char a6, void (***a7)(_QWORD, _QWORD, _QWORD))
{
  char v13;
  char v15;
  _BYTE v16[3];
  char v17;
  char v18;
  char v19;
  char v20;
  unsigned int v21;

  v13 = a6 ^ 1;
  qmemcpy(v16, "ECI", sizeof(v16));
  v15 = a6 ^ 1;
  (**a7)(a7, &v16[2], 1);
  (**a7)(a7, &v16[1], 1);
  (**a7)(a7, v16, 1);
  (**a7)(a7, &v15, 1);
  v20 = a1;
  v19 = a2;
  v18 = a3;
  v17 = a4;
  (**a7)(a7, &v20, 1);
  (**a7)(a7, &v19, 1);
  (**a7)(a7, &v18, 1);
  (**a7)(a7, &v17, 1);
  v21 = a5;
  if ((v13 & 1) == 0)
    v21 = bswap32(a5);
  (**a7)(a7, &v21, 4);
  return 1;
}

uint64_t physx::readHeader(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, _DWORD *a5, BOOL *a6, void (***a7)(_QWORD, unsigned __int32 *, uint64_t))
{
  uint64_t result;
  int v15;

  v15 = 0;
  (**a7)(a7, (unsigned __int32 *)((char *)&v15 + 3), 1);
  (**a7)(a7, (unsigned __int32 *)((char *)&v15 + 2), 1);
  (**a7)(a7, (unsigned __int32 *)((char *)&v15 + 1), 1);
  (**a7)(a7, (unsigned __int32 *)&v15, 1);
  result = 0;
  if (HIBYTE(v15) == 78 && BYTE2(v15) == 88 && BYTE1(v15) == 83)
  {
    *a6 = (v15 & 1) == 0;
    (**a7)(a7, (unsigned __int32 *)((char *)&v15 + 3), 1);
    (**a7)(a7, (unsigned __int32 *)((char *)&v15 + 2), 1);
    (**a7)(a7, (unsigned __int32 *)((char *)&v15 + 1), 1);
    (**a7)(a7, (unsigned __int32 *)&v15, 1);
    result = 0;
    if (HIBYTE(v15) == a1 && BYTE2(v15) == a2 && BYTE1(v15) == a3 && v15 == a4)
    {
      *a5 = physx::readDword(*a6, a7);
      return 1;
    }
  }
  return result;
}

uint64_t physx::Gu::ReadHeader(int a1, int a2, int a3, int a4, _DWORD *a5, BOOL *a6, void (***a7)(_QWORD, unsigned __int32 *, uint64_t))
{
  uint64_t result;
  int v15;

  v15 = 0;
  (**a7)(a7, (unsigned __int32 *)((char *)&v15 + 3), 1);
  (**a7)(a7, (unsigned __int32 *)((char *)&v15 + 2), 1);
  (**a7)(a7, (unsigned __int32 *)((char *)&v15 + 1), 1);
  (**a7)(a7, (unsigned __int32 *)&v15, 1);
  result = 0;
  if (HIBYTE(v15) == 73 && BYTE2(v15) == 67 && BYTE1(v15) == 69)
  {
    *a6 = (v15 & 1) == 0;
    (**a7)(a7, (unsigned __int32 *)((char *)&v15 + 3), 1);
    (**a7)(a7, (unsigned __int32 *)((char *)&v15 + 2), 1);
    (**a7)(a7, (unsigned __int32 *)((char *)&v15 + 1), 1);
    (**a7)(a7, (unsigned __int32 *)&v15, 1);
    if (SHIBYTE(v15) == a1 && SBYTE2(v15) == a2 && SBYTE1(v15) == a3 && (char)v15 == a4)
    {
      *a5 = physx::readDword(*a6, a7);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t physx::storeIndices(uint64_t result, unsigned int a2, uint64_t a3, uint64_t (***a4)(_QWORD, __int16 *, uint64_t), int a5)
{
  unsigned int *v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  __int16 v14;

  v6 = (unsigned int *)a3;
  if (result > 0xFF)
  {
    if (WORD1(result))
    {
      return physx::writeFloatBuffer(a3, a2, a5, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a4);
    }
    else if (a2)
    {
      v10 = a2;
      do
      {
        v12 = *v6++;
        v11 = v12;
        v14 = v12;
        if (a5)
          v14 = bswap32(v11) >> 16;
        result = (**a4)(a4, &v14, 2);
        --v10;
      }
      while (v10);
    }
  }
  else if (a2)
  {
    v7 = a2;
    do
    {
      v8 = *v6++;
      v13 = v8;
      result = (**a4)(a4, (__int16 *)&v13, 1);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t physx::readIndices(uint64_t result, unsigned int a2, __int32 *a3, uint64_t (***a4)(_QWORD, unsigned __int8 *, uint64_t), int a5)
{
  __int32 *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  unsigned __int8 v11;
  unsigned __int16 v12;

  v6 = a3;
  if (result > 0xFF)
  {
    if (WORD1(result))
    {
      return physx::readFloatBuffer(a3, a2, a5, (void (***)(_QWORD, __int32 *, _QWORD))a4);
    }
    else if (a2)
    {
      v9 = a2;
      do
      {
        v12 = 0;
        result = (**a4)(a4, (unsigned __int8 *)&v12, 2);
        if (a5)
        {
          v10 = v12;
          LOBYTE(v12) = HIBYTE(v12);
          HIBYTE(v12) = v10;
        }
        *v6++ = v12;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    v11 = 0;
    if (a2)
    {
      v7 = a2;
      do
      {
        result = (**a4)(a4, &v11, 1);
        *v6++ = v11;
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t physx::Gu::StoreIndices(uint64_t result, unsigned int a2, char *a3, uint64_t (***a4)(_QWORD, __int16 *, uint64_t), int a5)
{
  uint64_t v7;
  char v8;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  __int16 v14;

  if (result >= 0x100)
  {
    if (a2)
    {
      v10 = a2;
      do
      {
        v12 = *(unsigned __int16 *)a3;
        a3 += 2;
        v11 = v12;
        v14 = v12;
        if (a5)
          v14 = __rev16(v11);
        result = (**a4)(a4, &v14, 2);
        --v10;
      }
      while (v10);
    }
  }
  else if (a2)
  {
    v7 = a2;
    do
    {
      v8 = *a3;
      a3 += 2;
      v13 = v8;
      result = (**a4)(a4, (__int16 *)&v13, 1);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t physx::Gu::ReadIndices(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t (***a4)(_QWORD, char *, uint64_t), int a5)
{
  _WORD *v6;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t result;
  __int16 v11;
  uint64_t v13;
  _BYTE *v14;
  char v15;
  _QWORD v16[2];

  v6 = a3;
  v16[1] = *MEMORY[0x24BDAC8D0];
  if (a1 > 0xFF)
  {
    result = (**a4)(a4, (char *)a3, (2 * a2));
    if ((_DWORD)a2 && a5)
    {
      v13 = a2;
      v14 = (char *)v6 + 1;
      do
      {
        v15 = *(v14 - 1);
        *(v14 - 1) = *v14;
        *v14 = v15;
        v14 += 2;
        --v13;
      }
      while (v13);
    }
  }
  else
  {
    v8 = a2;
    MEMORY[0x24BDAC7A8](a1);
    v9 = (unsigned __int8 *)v16 - ((a2 + 15) & 0x1FFFFFFF0);
    bzero(v9, a2);
    result = (**a4)(a4, (char *)v16 - ((v8 + 15) & 0x1FFFFFFF0), a2);
    if ((_DWORD)a2)
    {
      do
      {
        v11 = *v9++;
        *v6++ = v11;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t physx::Gu::computeCapsule_TriangleMeshMTD(uint64_t a1)
{
  double v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  physx::Gu::Box *v11;
  int v12;
  char v13;
  float32x4_t v14;
  unint64_t v15;
  float32x4_t v16;
  int32x2_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  int v29;
  unsigned int *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  unsigned int *v53;
  float32x4_t *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned __int16 *v61;
  unsigned int v62;
  int32x2_t *v63;
  int32x2_t v64;
  __int32 *v65;
  __int32 v66;
  __int32 v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x2_t *v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  char v78;
  unsigned int v79;
  float v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x2_t v86;
  float32x2_t v87;
  int v88;
  float32x2_t v93;
  float32x2_t v94;
  int v95;
  int8x16_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  __int128 v102;
  __int32 v103;
  uint64_t v104;
  char v105;
  float *v106;
  unsigned int *v107;
  int v108;
  float32x4_t v109;
  uint64_t v110;
  char v111;
  _BYTE v112[60];
  float32x4_t v113;
  unint64_t v114;
  int v115;
  float32x2_t v116;
  unsigned int v117;
  float32x4_t v118;
  __int128 v119;
  __int128 v120;
  unsigned int *v121;
  uint64_t v122;
  __int32 v123;
  uint64_t v124;
  __int32 v125;
  uint64_t v126;
  uint64_t v127;
  float v128;
  uint64_t v129;
  float v130;
  int32x2_t v131;
  unsigned int v132;
  char v133[32];
  uint64_t v134;
  int32x2_t v135[516];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v104 = v2;
  v111 = v3;
  v5 = v4;
  v6 = LODWORD(v1);
  v135[513] = *(int32x2_t *)MEMORY[0x24BDAC8D0];
  v110 = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 80);
  v9 = (float)(*(float *)(v7 + 4) * *(float *)(v7 + 8)) * *(float *)(v7 + 12);
  v132 = 0;
  *(float *)&v1 = *(float *)&v1 * 1.15;
  v131 = vdup_lane_s32(*(int32x2_t *)&v1, 0);
  v106 = (float *)v10;
  physx::operator*(v10, (float *)(v7 + 4), (uint64_t)&v123);
  v121 = 0;
  v122 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)&v121, 0x80u);
  v12 = 0;
  v13 = 0;
  v14 = 0uLL;
  v120 = 0u;
  v118 = 0u;
  v119 = 0u;
  v117 = 0xFFFFFFF;
  v16 = *(float32x4_t *)(v5 + 48);
  v15 = *(_QWORD *)(v5 + 68);
  v16.i32[2] = *(_DWORD *)(v5 + 56);
  v16.i32[3] = *(_DWORD *)(v5 + 64);
  v17 = vdup_n_s32(0x7F7FFFFFu);
  while (1)
  {
    v109 = v14;
    LODWORD(v122) = 0;
    v113 = v16;
    v114 = v15;
    v115 = v6;
    physx::Gu::computeBoxAroundCapsule((uint64_t)&v113, (const Capsule *)v112, v11);
    midPhaseQuery(v110, v106, (uint64_t)v112, (uint64_t)&v121, v18, v19, v20);
    v29 = v122;
    if (!(_DWORD)v122)
    {
      v14 = v109;
      goto LABEL_34;
    }
    v105 = v13;
    v30 = v121;
    v116 = (float32x2_t)v17;
    if ((v122 + 31) < 0x20)
    {
      v14 = v109;
      goto LABEL_33;
    }
    v108 = v12;
    v31 = 0;
    v32 = 0;
    v33 = (v122 + 31) >> 5;
    v107 = v121;
    v34 = v122;
    do
    {
      v35 = v34;
      if (v34 >= 0x20uLL)
        v35 = 32;
      if ((v29 - 32 * v31) >= 0x20)
        v36 = 32;
      else
        v36 = v29 - 32 * v31;
      if (v36)
      {
        v37 = *(_QWORD *)(v110 + 40);
        v38 = *(_BYTE *)(v37 + 92);
        v21.i64[0] = v124;
        v26.i32[0] = v123;
        v24.i32[0] = v125;
        v22.i64[0] = v126;
        v25.i64[0] = v127;
        v23.i64[0] = v129;
        v39 = v128;
        v40 = v130;
        v41 = *(_QWORD *)(v37 + 40);
        v42 = *(_QWORD *)(v37 + 48);
        v43.i64[0] = vzip1q_s32(v26, v22).u64[0];
        v44.i64[0] = vzip1q_s32(v24, v21).u64[0];
        v43.i64[1] = __PAIR64__(v43.u32[0], HIDWORD(v124));
        v44.i64[1] = __PAIR64__(v44.u32[0], HIDWORD(v126));
        v45.i64[0] = v129;
        v45.i64[1] = __PAIR64__(v129, LODWORD(v130));
        v46 = vuzp2q_s32(v23, vzip1q_s32(v23, v23));
        v47.i64[0] = v124;
        v47.i64[1] = __PAIR64__(v125, v124);
        v48.i64[0] = v127;
        v48.i64[1] = __PAIR64__(v127, LODWORD(v128));
        v49 = vuzp2q_s32(v25, vzip1q_s32(v25, v25));
        v50.i64[0] = v126;
        v50.i64[1] = __PAIR64__(v126, v123);
        v51 = (float32x4_t)v49;
        v51.f32[1] = v128;
        v51.i32[3] = v49.i32[0];
        v52 = (float32x4_t)v46;
        v52.f32[1] = v130;
        v52.i32[3] = v46.i32[0];
        v53 = v30;
        v54 = (float32x4_t *)&v134;
        do
        {
          v56 = *v53++;
          v55 = v56;
          if ((v38 & 2) != 0)
          {
            v61 = (unsigned __int16 *)(v42 + 6 * v55);
            v58 = *v61;
            v59 = v61[1];
            v60 = v61[2];
          }
          else
          {
            v57 = (unsigned int *)(v42 + 12 * v55);
            v58 = *v57;
            v59 = v57[1];
            v60 = v57[2];
          }
          if (v9 >= 0.0)
            v62 = v60;
          else
            v62 = v59;
          if (v9 < 0.0)
            v59 = v60;
          v63 = (int32x2_t *)(v41 + 12 * v58);
          v64 = *v63;
          v27.i32[0] = v63[1].i32[0];
          v65 = (__int32 *)(v41 + 12 * v59);
          v66 = *v65;
          v67 = v65[1];
          *(int32x2_t *)v68.f32 = v64;
          v68.i32[2] = v64.i32[0];
          v68.i32[3] = *v65;
          v28.i32[0] = v65[2];
          *(int32x2_t *)v69.f32 = vrev64_s32(v64);
          v69.i64[1] = __PAIR64__(v67, v69.u32[0]);
          v70 = vaddq_f32(vmulq_f32(v43, v68), vmulq_f32(v44, v69));
          v71 = (int32x4_t)v27;
          v71.i32[1] = v28.i32[0];
          v72 = (float32x4_t)vzip1q_s32(v71, v71);
          v72.i32[2] = v27.i32[0];
          v27 = vmulq_f32(v48, v72);
          v73 = vaddq_f32(v70, v27);
          v74 = (float32x2_t *)(v41 + 12 * v62);
          *(float32x2_t *)v27.f32 = *v74;
          v75.i32[0] = v66;
          *(float32x2_t *)&v75.u32[2] = *v74;
          v75.i32[1] = v66;
          v76 = vmulq_f32(v47, v75);
          v77 = (float32x4_t)vrev64q_s32((int32x4_t)v76);
          v77.i64[0] = v76.i64[0];
          v76.i32[0] = v67;
          *(float32x2_t *)&v76.u32[2] = *v74;
          v76.i32[1] = v67;
          v27.f32[0] = v40
                     + (float)(vadd_f32(vmul_lane_f32(*v74, *(float32x2_t *)v21.i8, 1), (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v22.i8, *v74), 1)).f32[0]+ (float)(v39 * v74[1].f32[0]));
          v28.i32[1] = v74[1].i32[0];
          v54[-2] = vaddq_f32(v45, v73);
          v54[-1] = vaddq_f32(v52, vaddq_f32(vaddq_f32(v77, vmulq_f32(v50, v76)), vmulq_f32(v51, (float32x4_t)vzip1q_s32(v28, v28))));
          v54->f32[0] = v27.f32[0];
          if (v8)
            v78 = *(_BYTE *)(v8 + v55);
          else
            v78 = 56;
          v54->i8[4] = v78;
          v54 = (float32x4_t *)((char *)v54 + 40);
          --v35;
        }
        while (v35);
      }
      v32 |= calculateMTD((float32x4_t *)v5, (float32x2_t *)&v131, v111, (uint64_t)v133, v36, 32 * (int)v31++, v135, &v132, &v118, &v120, &v119, &v117, &v116);
      v34 -= 32;
      v30 += 32;
    }
    while (v31 != v33);
    v14 = v109;
    if ((v32 & 1) == 0)
      goto LABEL_33;
    v79 = v107[v117];
    v117 = v79;
    v80 = vsub_f32(v116, *(float32x2_t *)(v5 + 80)).f32[0];
    if (v80 > 0.0)
      break;
    v81 = vmulq_n_f32(v118, v80);
    v81.i32[3] = 0;
    v14 = vsubq_f32(v109, v81);
    v82 = vsubq_f32(*(float32x4_t *)v5, v81);
    v83 = vsubq_f32(v82, *(float32x4_t *)v5);
    *(float32x4_t *)v5 = v82;
    v16 = vaddq_f32(*(float32x4_t *)(v5 + 48), v83);
    v84 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v5 + 64), v83);
    *(float32x4_t *)(v5 + 48) = v16;
    *(int8x16_t *)(v5 + 64) = v84;
    v12 = v108 + 1;
    v16.i32[3] = v84.i32[0];
    v15 = vextq_s8(v84, v84, 4uLL).u64[0];
    v13 = 1;
    if (v108 == 3)
      goto LABEL_34;
  }
  if (!v108)
  {
    v97 = v104;
    *(_DWORD *)(v104 + 48) = 0;
    *(_QWORD *)&v102 = *(_QWORD *)((char *)&v120 + 4);
    *(_DWORD *)(v104 + 24) = v120;
    v103 = v118.i32[2];
    *((_QWORD *)&v102 + 1) = v118.i64[0];
    *(_OWORD *)(v104 + 28) = v102;
    *(_DWORD *)(v104 + 44) = v103;
    goto LABEL_40;
  }
  v105 = 1;
LABEL_33:
  v13 = v105;
LABEL_34:
  v85 = vmulq_f32(v14, v14);
  v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
  v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
  v87 = vrsqrte_f32(v86);
  v88 = 4;
  do
  {
    v87 = vmul_f32(v87, vrsqrts_f32(vmul_f32(v87, v87), v86));
    --v88;
  }
  while (v88);
  __asm { FMOV            V3.2S, #1.0 }
  v93 = vmul_f32(v86, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v86), 0), _D3, (int8x8_t)v87));
  v94 = vrecpe_f32(v93);
  v95 = 4;
  do
  {
    v94 = vmul_f32(v94, vrecps_f32(v93, v94));
    --v95;
  }
  while (v95);
  if ((v13 & 1) != 0)
  {
    v96 = vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v93), 0), (int8x16_t)vmulq_n_f32(v14, v94.f32[0]));
    v97 = v104;
    *(float *)(v104 + 48) = -v93.f32[0];
    v98 = DWORD2(v120);
    *(_QWORD *)(v104 + 24) = v120;
    *(_DWORD *)(v104 + 32) = v98;
    *(_QWORD *)(v104 + 36) = v96.i64[0];
    *(_DWORD *)(v104 + 44) = v96.i32[2];
    v79 = v117;
LABEL_40:
    *(_DWORD *)(v97 + 16) = v79;
    v99 = 1;
    goto LABEL_42;
  }
  v99 = 0;
LABEL_42:
  if ((v122 & 0x8000000000000000) == 0 && (v122 & 0x7FFFFFFF00000000) != 0 && v121 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v99;
}

float physx::operator*@<S0>(uint64_t a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float result;

  v3 = *(float *)a1;
  v4 = *(float *)(a1 + 4);
  v5 = *(float *)(a1 + 8);
  v6 = *(float *)(a1 + 12);
  v7 = v4 + v4;
  v8 = v5 + v5;
  v9 = v4 * (float)(v4 + v4);
  v10 = v5 * (float)(v5 + v5);
  v11 = (float)(v3 + v3) * v4;
  v12 = (float)(v3 + v3) * v5;
  v13 = (float)(v3 + v3) * v6;
  v14 = v7 * v5;
  v15 = v7 * v6;
  v16 = v8 * v6;
  v17 = (float)(1.0 - v9) - v10;
  v18 = v11 + v16;
  v19 = v12 - v15;
  v20 = v11 - v16;
  v21 = 1.0 - (float)(v3 * (float)(v3 + v3));
  v22 = v21 - v10;
  v23 = v14 + v13;
  v24 = v12 + v15;
  v25 = v14 - v13;
  v26 = v21 - v9;
  v27 = a2[4];
  v28 = a2[5];
  v29 = a2[6];
  v31 = a2[2];
  v30 = a2[3];
  v32 = v27 + v27;
  v33 = v28 + v28;
  v34 = v27 * (float)(v27 + v27);
  v35 = v28 * (float)(v28 + v28);
  v36 = (float)(v30 + v30) * v27;
  v37 = (float)(v30 + v30) * v28;
  v38 = (float)(v30 + v30) * v29;
  v39 = v32 * v28;
  v40 = v32 * v29;
  v41 = v33 * v29;
  v42 = (float)(1.0 - v34) - v35;
  v43 = v36 + v41;
  v44 = v37 - v40;
  v45 = v36 - v41;
  v46 = 1.0 - (float)(v30 * (float)(v30 + v30));
  v47 = v46 - v35;
  v48 = v39 + v38;
  v49 = v37 + v40;
  v50 = v39 - v38;
  v51 = v46 - v34;
  v52 = a2[1];
  v53 = *a2 * v42;
  v54 = *a2 * v45;
  v55 = *a2 * v49;
  v56 = v43 * v52;
  v57 = v47 * v52;
  v58 = v50 * v52;
  v59 = v44 * v31;
  v60 = v48 * v31;
  v61 = v51 * v31;
  v62 = v42 * v54;
  v63 = v43 * v57;
  v64 = (float)(v42 * v53) + (float)(v43 * v56);
  v65 = (float)(v42 * v55) + (float)(v43 * v58);
  v66 = v64 + (float)(v44 * v59);
  v67 = (float)(v62 + v63) + (float)(v44 * v60);
  v68 = v65 + (float)(v44 * v61);
  v69 = v45 * v54;
  v70 = v47 * v57;
  v71 = (float)(v45 * v53) + (float)(v47 * v56);
  v72 = (float)(v45 * v55) + (float)(v47 * v58);
  v73 = v71 + (float)(v48 * v59);
  v74 = (float)(v69 + v70) + (float)(v48 * v60);
  v75 = v72 + (float)(v48 * v61);
  v76 = v49 * v53;
  v77 = v49 * v54;
  v78 = v50 * v57;
  v79 = v76 + (float)(v50 * v56);
  v80 = (float)(v49 * v55) + (float)(v50 * v58);
  v81 = v51 * v59;
  v82 = v51 * v60;
  v83 = v51 * v61;
  v84 = v79 + v81;
  v85 = (float)(v77 + v78) + v82;
  v86 = v80 + v83;
  *(float *)a3 = (float)(v24 * v68) + (float)((float)(v17 * v66) + (float)(v20 * v67));
  *(float *)(a3 + 4) = (float)(v25 * v68) + (float)((float)(v18 * v66) + (float)(v22 * v67));
  *(float *)(a3 + 8) = (float)(v26 * v68) + (float)((float)(v19 * v66) + (float)(v23 * v67));
  *(float *)(a3 + 12) = (float)(v24 * v75) + (float)((float)(v17 * v73) + (float)(v20 * v74));
  *(float *)(a3 + 16) = (float)(v25 * v75) + (float)((float)(v18 * v73) + (float)(v22 * v74));
  *(float *)(a3 + 20) = (float)(v26 * v75) + (float)((float)(v19 * v73) + (float)(v23 * v74));
  *(float *)(a3 + 24) = (float)(v24 * v86) + (float)((float)(v17 * v84) + (float)(v20 * v85));
  *(float *)(a3 + 28) = (float)(v25 * v86) + (float)((float)(v18 * v84) + (float)(v22 * v85));
  *(float *)(a3 + 32) = (float)(v26 * v86) + (float)((float)(v19 * v84) + (float)(v23 * v85));
  *(_QWORD *)(a3 + 36) = *(_QWORD *)(a1 + 16);
  result = *(float *)(a1 + 24);
  *(float *)(a3 + 44) = result;
  return result;
}

uint64_t midPhaseQuery(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, int8x16_t a5, int8x16_t a6, int32x4_t a7)
{
  uint64_t v8;
  float v9;
  uint64_t (**v11)();
  int v12;
  uint64_t v13;
  float32x4_t v14[3];

  v8 = *(_QWORD *)(a1 + 40);
  v9 = physx::Gu::computeVertexSpaceOBB(v14, a3, a2, (float *)(a1 + 4), a5, a6, a7);
  v12 = 2;
  v11 = &off_24ED912D0;
  v13 = a4;
  return ((uint64_t (*)(uint64_t, float32x4_t *, uint64_t (***)(), uint64_t, uint64_t, float))*(&physx::Gu::gMidphaseBoxCBOverlapTable + *(unsigned __int16 *)(v8 + 8) - 3))(v8, v14, &v11, 1, 1, v9);
}

uint64_t calculateMTD(float32x4_t *a1, float32x2_t *a2, char a3, uint64_t a4, unsigned int a5, int a6, int32x2_t *a7, unsigned int *a8, _OWORD *a9, _OWORD *a10, _OWORD *a11, _DWORD *a12, float32x2_t *a13)
{
  float32x2_t v13;
  uint64_t v21;
  uint64_t v22;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x8_t v34;
  float32x4_t v35;
  char v36;
  float32x2_t v37;
  float32x2_t v38;
  int v39;
  float32x2_t v40;
  float32x2_t v41;
  int v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  float32x2_t v46;
  uint64_t v47;
  int32x2_t *v48;
  uint64_t i;
  float32x2_t v50;
  unsigned __int8 v51;
  unsigned int v52;
  int32x2_t *v53;
  __int128 v54;
  int32x2_t *v56;
  char v57;
  float32x4_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;

  v13 = *a13;
  if (a5)
  {
    v21 = 0;
    v57 = 0;
    v22 = a5;
    v56 = a7 + 12;
    __asm { FMOV            V9.2S, #1.0 }
    do
    {
      *a8 = 0;
      v28 = a4 + 40 * v21;
      v61 = 0;
      v58 = 0uLL;
      v59 = 0x7F7FFFFF3CA3D70ALL;
      v60 = 0x57F7FFFFFLL;
      v29.i64[0] = *(_QWORD *)v28;
      v29.i64[1] = *(unsigned int *)(v28 + 8);
      v30.i64[0] = *(_QWORD *)(v28 + 12);
      v30.i64[1] = *(unsigned int *)(v28 + 20);
      v62 = v29;
      v63 = v30;
      v31.i64[0] = *(_QWORD *)(v28 + 24);
      v31.i64[1] = *(unsigned int *)(v28 + 32);
      v64 = v31;
      v32 = (int8x16_t)vsubq_f32(v30, v29);
      v33 = (int8x16_t)vsubq_f32(v31, v29);
      v34 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 4uLL), *(float32x2_t *)v33.i8);
      *(int8x8_t *)v35.f32 = vext_s8(v34, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), *(float32x2_t *)v33.i8), *(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)), 4uLL);
      v35.i64[1] = v34.u32[0];
      v36 = *(_BYTE *)(v28 + 36);
      *(float32x2_t *)v33.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32), vmul_f32((float32x2_t)v34.u32[0], (float32x2_t)v34.u32[0]));
      v37 = vpadd_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8);
      v38 = vrsqrte_f32(v37);
      v39 = 4;
      do
      {
        v38 = vmul_f32(v38, vrsqrts_f32(vmul_f32(v38, v38), v37));
        --v39;
      }
      while (v39);
      v40 = vmul_f32(v37, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v37), 0), _D9, (int8x8_t)v38));
      v41 = vrecpe_f32(v40);
      v42 = 4;
      do
      {
        v41 = vmul_f32(v41, vrecps_f32(v40, v41));
        --v42;
      }
      while (v42);
      if ((a3 & 1) != 0
        || (v43 = vmulq_n_f32(v35, v41.f32[0]),
            v43.i32[3] = 0,
            v44 = vmulq_f32(v43, vsubq_f32(*a1, v29)),
            v44.i64[0] = vpaddq_f32(v44, v44).u64[0],
            vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32).f32[0] >= 0.0))
      {
        physx::Gu::PCMCapsuleVsMeshContactGeneration::processTriangle(&v58, v21 + a6, a1, a2, v36, (uint64_t)a7, a8);
        v45 = *a8;
        if ((_DWORD)v45)
        {
          v46 = (float32x2_t)vdup_lane_s32(a7[5], 1);
          if ((_DWORD)v45 == 1)
          {
            v47 = 0;
          }
          else
          {
            LODWORD(v47) = 0;
            v48 = v56;
            for (i = 1; i != v45; ++i)
            {
              v50 = (float32x2_t)vdup_lane_s32(v48[1], 1);
              v51 = vcgt_f32(v46, v50).u8[0];
              if ((v51 & 1) != 0)
                v52 = -1;
              else
                v52 = 0;
              v46 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v52), (int8x8_t)v50, (int8x8_t)v46);
              if ((v51 & 1) != 0)
                v47 = i;
              else
                v47 = v47;
              v48 += 8;
            }
          }
          if ((vcgt_f32(v13, v46).u8[0] & 1) != 0)
          {
            *a12 = v21 + a6;
            v53 = &a7[8 * v47];
            v54 = *(_OWORD *)v53[4].i8;
            HIDWORD(v54) = 0;
            *a9 = v54;
            *a10 = *(_OWORD *)v53[2].i8;
            *a11 = *(_OWORD *)v53->i8;
            v57 = 1;
            v13 = v46;
          }
          else
          {
            v57 = 1;
          }
        }
      }
      ++v21;
    }
    while (v21 != v22);
  }
  else
  {
    v57 = 0;
  }
  *a13 = v13;
  return v57 & 1;
}

uint64_t physx::Gu::computeCapsule_HeightFieldMTD(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  float32x2_t *v11;
  int32x2_t v12;
  physx::Gu::Box *v13;
  char v14;
  int v15;
  float v16;
  float32x4_t v21;
  unint64_t v22;
  float32x4_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  _QWORD *v63;
  uint64_t v64;
  unsigned int v65;
  float v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  float32x2_t v72;
  float32x2_t v73;
  int v74;
  float32x2_t v75;
  float32x2_t v76;
  int v77;
  int8x16_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  __int128 v84;
  __int32 v85;
  uint64_t v86;
  char v87;
  char v88;
  int v89;
  float32x4_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  float v96[6];
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float32x4_t v112;
  unint64_t v113;
  float v114;
  float32x2_t v115;
  unsigned int v116;
  float32x4_t v117;
  __int128 v118;
  __int128 v119;
  int32x2_t v120;
  float v121;
  float32x2_t v122;
  float32x2_t *v123;
  uint64_t v124;
  uint64_t v125;
  int32x2_t v126;
  unsigned int v127;
  _QWORD v128[160];
  int32x2_t v129[516];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v86 = v2;
  v88 = v3;
  v92 = v4;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = (float32x2_t *)v1;
  v129[513] = *(int32x2_t *)MEMORY[0x24BDAC8D0];
  v127 = 0;
  *(float *)v12.i32 = v7 * 1.01;
  v126 = vdup_lane_s32(v12, 0);
  v124 = 0;
  v125 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)&v124, 0x80u);
  v14 = 0;
  v15 = 0;
  v122 = v11[1];
  v123 = v11;
  v16 = v11[3].f32[0];
  __asm { FMOV            V9.2S, #1.0 }
  v120 = vrev64_s32((int32x2_t)vdiv_f32(_D9, v11[2]));
  v121 = 1.0 / v16;
  v21 = 0uLL;
  v118 = 0u;
  v119 = 0u;
  v117 = 0u;
  v116 = 0xFFFFFFF;
  v115 = 0;
  v23 = *(float32x4_t *)(v6 + 48);
  v22 = *(_QWORD *)(v6 + 68);
  v23.i32[2] = *(_DWORD *)(v6 + 56);
  v23.i32[3] = *(_DWORD *)(v6 + 64);
  v91 = v6;
  while (1)
  {
    v90 = v21;
    v112 = v23;
    v113 = v22;
    v114 = v8;
    physx::Gu::computeBoxAroundCapsule((uint64_t)&v112, (const Capsule *)&v97, v13);
    if (v105 >= 0.0)
    {
      v26 = v98 - v100;
      if (v97 < (float)-v101)
      {
        v31 = v105 + (float)((float)(1.0 - v97) - v101);
        v27 = 0.5 / sqrtf(v31);
        v28 = v27 * (float)(v103 + v99);
        v29 = v27 * (float)(v102 + v104);
        v30 = v31 * v27;
        goto LABEL_7;
      }
      v35 = v105 + (float)((float)(v97 + 1.0) + v101);
      v36 = 0.5 / sqrtf(v35);
      v28 = v36 * (float)(v102 - v104);
      v29 = v36 * (float)(v103 - v99);
      v30 = v36 * v26;
      v32 = v35 * v36;
    }
    else
    {
      v24 = v98 + v100;
      if (v97 > v101)
      {
        v25 = (float)((float)(v97 + 1.0) - v101) - v105;
        v26 = v102 - v104;
        v27 = 0.5 / sqrtf(v25);
        v28 = v25 * v27;
        v29 = v27 * v24;
        v30 = v27 * (float)(v103 + v99);
LABEL_7:
        v32 = v27 * v26;
        goto LABEL_10;
      }
      v33 = (float)((float)(1.0 - v97) + v101) - v105;
      v34 = 0.5 / sqrtf(v33);
      v28 = v34 * v24;
      v29 = v33 * v34;
      v30 = v34 * (float)(v102 + v104);
      v32 = v34 * (float)(v103 - v99);
    }
LABEL_10:
    v37 = v29 + v29;
    v38 = v30 + v30;
    v39 = v29 * (float)(v29 + v29);
    v40 = v30 * (float)(v30 + v30);
    v41 = (float)(v28 + v28) * v29;
    v42 = (float)(v28 + v28) * v30;
    v43 = (float)(v28 + v28) * v32;
    v44 = v37 * v30;
    v45 = v37 * v32;
    v46 = v38 * v32;
    v47 = (float)(1.0 - v39) - v40;
    v48 = v41 + v46;
    v49 = v41 - v46;
    v50 = 1.0 - (float)(v28 * (float)(v28 + v28));
    v51 = v50 - v40;
    v52 = v44 + v43;
    v53 = (float)(fabsf(v47 * v109) + fabsf(v49 * v110)) + fabsf((float)(v42 + v45) * v111);
    v54 = (float)(fabsf(v48 * v109) + fabsf(v51 * v110)) + fabsf((float)(v44 - v43) * v111);
    v55 = (float)(fabsf((float)(v42 - v45) * v109) + fabsf(v52 * v110)) + fabsf((float)(v50 - v39) * v111);
    v96[0] = v106 - v53;
    v96[1] = v107 - v54;
    v96[2] = v108 - v55;
    v96[3] = v106 + v53;
    v96[4] = v107 + v54;
    v96[5] = v108 + v55;
    v128[0] = &off_24ED91320;
    v128[1] = &v124;
    physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v120, v10, v96, v88, (uint64_t)v128);
    v56 = v125;
    if (!(_DWORD)v125)
    {
      v21 = v90;
      goto LABEL_31;
    }
    v87 = v14;
    v115 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    if ((v125 + 31) < 0x20)
    {
      v21 = v90;
      goto LABEL_30;
    }
    v89 = v15;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v93 = (v125 + 31) >> 5;
    v60 = v125;
    v94 = v125;
    do
    {
      if (v60 >= 0x20uLL)
        v61 = 32;
      else
        v61 = v60;
      v62 = v56 - 32 * v58;
      if (v62 >= 0x20)
        v62 = 32;
      v95 = v62;
      if (v62)
      {
        v63 = v128;
        v64 = v57;
        do
        {
          physx::Gu::HeightFieldUtil::getTriangle((uint64_t)&v120, v10, (uint64_t)v63, 0, 0, *(_DWORD *)(v124 + v64), 1, 1);
          *((_BYTE *)v63 + 36) = 56;
          v63 += 5;
          v64 += 4;
          --v61;
        }
        while (v61);
      }
      v59 |= calculateMTD((float32x4_t *)v91, (float32x2_t *)&v126, v92, (uint64_t)v128, v95, 32 * (int)v58++, v129, &v127, &v117, &v119, &v118, &v116, &v115);
      v60 -= 32;
      v57 += 128;
      v56 = v94;
    }
    while (v58 != v93);
    v21 = v90;
    if ((v59 & 1) == 0)
      goto LABEL_30;
    v65 = *(_DWORD *)(v124 + 4 * v116);
    v116 = v65;
    v66 = vsub_f32(v115, *(float32x2_t *)(v91 + 80)).f32[0];
    if (v66 > 0.0)
      break;
    v67 = vmulq_n_f32(v117, v66);
    v67.i32[3] = 0;
    v21 = vsubq_f32(v90, v67);
    v68 = vsubq_f32(*(float32x4_t *)v91, v67);
    v69 = vsubq_f32(v68, *(float32x4_t *)v91);
    *(float32x4_t *)v91 = v68;
    v23 = vaddq_f32(*(float32x4_t *)(v91 + 48), v69);
    v70 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v91 + 64), v69);
    *(float32x4_t *)(v91 + 48) = v23;
    *(int8x16_t *)(v91 + 64) = v70;
    v15 = v89 + 1;
    v23.i32[3] = v70.i32[0];
    v22 = vextq_s8(v70, v70, 4uLL).u64[0];
    v14 = 1;
    if (v89 == 3)
      goto LABEL_31;
  }
  if (!v89)
  {
    v79 = v86;
    *(_DWORD *)(v86 + 48) = 0;
    *(_QWORD *)&v84 = *(_QWORD *)((char *)&v119 + 4);
    *(_DWORD *)(v86 + 24) = v119;
    v85 = v117.i32[2];
    *((_QWORD *)&v84 + 1) = v117.i64[0];
    *(_OWORD *)(v86 + 28) = v84;
    *(_DWORD *)(v86 + 44) = v85;
    goto LABEL_37;
  }
  v87 = 1;
LABEL_30:
  v14 = v87;
LABEL_31:
  v71 = vmulq_f32(v21, v21);
  v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
  v72 = vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32);
  v73 = vrsqrte_f32(v72);
  v74 = 4;
  do
  {
    v73 = vmul_f32(v73, vrsqrts_f32(vmul_f32(v73, v73), v72));
    --v74;
  }
  while (v74);
  v75 = vmul_f32(v72, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v72), 0), (int8x8_t)_D9, (int8x8_t)v73));
  v76 = vrecpe_f32(v75);
  v77 = 4;
  do
  {
    v76 = vmul_f32(v76, vrecps_f32(v75, v76));
    --v77;
  }
  while (v77);
  if ((v14 & 1) != 0)
  {
    v78 = vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v75), 0), (int8x16_t)vmulq_n_f32(v21, v76.f32[0]));
    v79 = v86;
    *(float *)(v86 + 48) = -v75.f32[0];
    v80 = DWORD2(v119);
    *(_QWORD *)(v86 + 24) = v119;
    *(_DWORD *)(v86 + 32) = v80;
    *(_QWORD *)(v86 + 36) = v78.i64[0];
    *(_DWORD *)(v86 + 44) = v78.i32[2];
    v65 = v116;
LABEL_37:
    *(_DWORD *)(v79 + 16) = v65;
    v81 = 1;
    goto LABEL_39;
  }
  v81 = 0;
LABEL_39:
  if ((v125 & 0x8000000000000000) == 0 && (v125 & 0x7FFFFFFF00000000) != 0 && v124 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v81;
}

uint64_t physx::Gu::computeBox_TriangleMeshMTD(uint64_t a1)
{
  int32x2_t v1;
  uint64_t v2;
  char v3;
  int32x4_t *v4;
  int32x4_t *v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  float32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  int8x16_t v19;
  int8x16_t v20;
  char v21;
  int v22;
  int32x4_t v23;
  int32x2_t v24;
  float32x4_t v25;
  int v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  float v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  int *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned __int16 *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  float32x4_t v57;
  float32x2_t v58;
  float v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  int8x8_t v64;
  float32x2_t v65;
  int8x8_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x2_t v78;
  float32x2_t v79;
  int v80;
  float32x2_t v85;
  float32x2_t v86;
  int v87;
  int8x16_t v88;
  uint64_t v89;
  float32x4_t v90;
  uint64_t v91;
  uint64_t v94;
  char v95;
  float32x4_t v96;
  float *v97;
  int32x4_t v98;
  int v99;
  float32x4_t v100;
  int32x2_t v101;
  float32x4_t v102;
  float32x4_t v103;
  uint64_t v104;
  char v105;
  float32x4_t v106[4];
  float32x2_t v107;
  int32x4_t v108;
  float32x4_t v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  _OWORD v122[3];
  char v123[8];
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t *v130;
  uint64_t *v131;
  void *v132;
  __int128 v133;
  __int128 v134;
  _QWORD v135[2];
  float v136;
  float v137;
  float v138;
  int v139;
  char v140;
  int32x4_t v141;
  int32x2_t v142;
  __int128 v143;
  float32x4_t v144;
  int8x16_t v145;
  float32x2_t v146;
  float v147;
  unsigned int v148;
  float32x4_t v149;
  __int128 v150;
  int8x16_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  char v155[20];
  int v156;
  float32x4_t v157;
  uint64_t v158;
  uint64_t v159;
  int32x4_t *v160;
  _OWORD *v161;
  _OWORD *v162;
  char v163;
  _QWORD *v164;
  int32x2_t v165[516];

  *(double *)&v1 = MEMORY[0x24BDAC7A8](a1);
  v94 = v2;
  v105 = v3;
  v5 = v4;
  v7 = v6;
  v101 = v1;
  v9 = v8;
  v11 = (float *)v10;
  v165[513] = *(int32x2_t *)MEMORY[0x24BDAC8D0];
  v104 = *(_QWORD *)(v10 + 40);
  v12 = *(_QWORD *)(v104 + 80);
  v154 = 0;
  v153 = 0;
  v152 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)&v152, 0x80u);
  v150 = 0u;
  v151 = 0u;
  v149 = 0u;
  v148 = 0xFFFFFFF;
  v13 = (float32x4_t)v7[1];
  v143 = *v7;
  v144 = v13;
  v145 = (int8x16_t)v7[2];
  v13.i64[0] = v5[1].i64[0];
  v13.i64[1] = v5[1].u32[2];
  v103 = v13;
  v14.i64[0] = *((_QWORD *)v7 + 6);
  v15 = v14;
  v15.i32[2] = *((_DWORD *)v7 + 14);
  v98 = *v5;
  v16 = (float32x2_t)vdup_laneq_s32(v15, 2);
  v15.i32[3] = 0;
  v17 = vpmin_f32(v16, *(float32x2_t *)v14.i8);
  v18 = vpmin_f32(v17, v17);
  v142 = (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32(v101, 0), vmul_f32(v18, (float32x2_t)vdup_n_s32(0x3E19999Au)));
  v146 = vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(v142, 0));
  v147 = *(float *)&v15.i32[2] + *(float *)v142.i32;
  v139 = 3;
  v140 = 0;
  v135[1] = 0;
  v135[0] = 0;
  v141 = v15;
  v136 = 0.15 * v18.f32[0];
  v137 = 0.05 * v18.f32[0];
  v138 = 0.05 * v18.f32[0];
  v19 = vextq_s8((int8x16_t)0, (int8x16_t)0, 0xCuLL);
  v102 = (float32x4_t)vextq_s8(v145, v19, 4uLL);
  physx::Gu::PolygonalBox::PolygonalBox((uint64_t)v123, (uint64_t)(v7 + 3), *(double *)v102.i64, (int32x4_t)v19);
  v126 = 0;
  v128 = 0x600000008;
  v127 = 0;
  v129 = 0;
  v130 = &v125;
  v131 = &v124;
  v132 = &physx::Gu::gPCMBoxPolygonData;
  v133 = 0u;
  v134 = 0u;
  v100 = 0u;
  v122[0] = xmmword_2260E5F10;
  v122[1] = xmmword_2260E5F20;
  v122[2] = xmmword_2260E5F40;
  v97 = (float *)v9;
  physx::operator*(v9, v11 + 1, (uint64_t)&v110);
  v21 = 0;
  v22 = 0;
  v23 = v98;
  v108 = v98;
  v109 = v103;
  v24 = vdup_n_s32(0x7F7FFFFFu);
  v25 = 0uLL;
  v96 = 0u;
  while (1)
  {
    LODWORD(v153) = 0;
    midPhaseQuery((uint64_t)v11, v97, (uint64_t)&v143, (uint64_t)&v152, (int8x16_t)v25, v20, v23);
    v26 = v153;
    if (!(_DWORD)v153)
      goto LABEL_32;
    v95 = v21;
    v109 = v102;
    v160 = &v108;
    v161 = v122;
    v162 = v122;
    v163 = 1;
    v157.i64[0] = (uint64_t)&off_24ED90FE0;
    v164 = v135;
    v159 = 0;
    v158 = 0;
    v27.i32[3] = 0;
    v27.f32[0] = (float)((float)(*(float *)&v143 * v110) + (float)(*((float *)&v143 + 1) * v111))
               + (float)(*((float *)&v143 + 2) * v112);
    v27.f32[1] = (float)((float)(*((float *)&v143 + 3) * v110) + (float)(v144.f32[0] * v111))
               + (float)(v144.f32[1] * v112);
    v27.f32[2] = (float)((float)(v144.f32[2] * v110) + (float)(v144.f32[3] * v111)) + (float)(*(float *)v145.i32 * v112);
    v28.i32[3] = 0;
    v28.f32[0] = (float)((float)(*(float *)&v143 * v113) + (float)(*((float *)&v143 + 1) * v114))
               + (float)(*((float *)&v143 + 2) * v115);
    v28.f32[1] = (float)((float)(*((float *)&v143 + 3) * v113) + (float)(v144.f32[0] * v114))
               + (float)(v144.f32[1] * v115);
    v28.f32[2] = (float)((float)(v144.f32[2] * v113) + (float)(v144.f32[3] * v114)) + (float)(*(float *)v145.i32 * v115);
    v29.i32[3] = 0;
    v29.f32[0] = (float)((float)(*(float *)&v143 * v116) + (float)(*((float *)&v143 + 1) * v117))
               + (float)(*((float *)&v143 + 2) * v118);
    v29.f32[1] = (float)((float)(*((float *)&v143 + 3) * v116) + (float)(v144.f32[0] * v117))
               + (float)(v144.f32[1] * v118);
    v29.f32[2] = (float)((float)(v144.f32[2] * v116) + (float)(v144.f32[3] * v117)) + (float)(*(float *)v145.i32 * v118);
    v30.i32[3] = 0;
    v30.f32[0] = (float)((float)((float)-(float)(*(float *)&v145.i32[2] * *((float *)&v143 + 1))
                               - (float)(*(float *)&v143 * *(float *)&v145.i32[1]))
                       - (float)(*((float *)&v143 + 2) * *(float *)&v145.i32[3]))
               + (float)((float)((float)(*(float *)&v143 * v119) + (float)(*((float *)&v143 + 1) * v120))
                       + (float)(*((float *)&v143 + 2) * v121));
    v30.f32[1] = (float)((float)((float)-(float)(*(float *)&v145.i32[2] * v144.f32[0])
                               - (float)(*((float *)&v143 + 3) * *(float *)&v145.i32[1]))
                       - (float)(v144.f32[1] * *(float *)&v145.i32[3]))
               + (float)((float)((float)(*((float *)&v143 + 3) * v119) + (float)(v144.f32[0] * v120))
                       + (float)(v144.f32[1] * v121));
    v30.f32[2] = (float)((float)((float)-(float)(*(float *)&v145.i32[2] * v144.f32[3])
                               - (float)(v144.f32[2] * *(float *)&v145.i32[1]))
                       - (float)(*(float *)v145.i32 * *(float *)&v145.i32[3]))
               + (float)((float)((float)(v144.f32[2] * v119) + (float)(v144.f32[3] * v120))
                       + (float)(*(float *)v145.i32 * v121));
    v106[0] = v27;
    v106[1] = v28;
    v106[2] = v29;
    v106[3] = v30;
    v107 = (float32x2_t)v24;
    if ((v153 + 31) < 0x20)
      goto LABEL_31;
    v99 = v22;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = (v153 + 31) >> 5;
    v35 = v153;
    do
    {
      v36 = v35;
      if (v35 >= 0x20uLL)
        v36 = 32;
      if ((v26 - 32 * v32) >= 0x20)
        v37 = 32;
      else
        v37 = v26 - 32 * v32;
      if (v37)
      {
        v38 = (float)(v11[1] * v11[2]) * v11[3];
        v39 = *(_BYTE *)(v104 + 92);
        v40 = *(_QWORD *)(v104 + 40);
        v41 = *(_QWORD *)(v104 + 48);
        v42 = (unsigned int *)(v152 + v31);
        v43 = &v156;
        do
        {
          v45 = *v42++;
          v44 = v45;
          if ((v39 & 2) != 0)
          {
            v50 = (unsigned __int16 *)(v41 + 6 * v44);
            v47 = *v50;
            v48 = v50[1];
            v49 = v50[2];
          }
          else
          {
            v46 = (unsigned int *)(v41 + 12 * v44);
            v47 = *v46;
            v48 = v46[1];
            v49 = v46[2];
          }
          if (v38 >= 0.0)
            v51 = v49;
          else
            v51 = v48;
          if (v38 < 0.0)
            v48 = v49;
          v52 = v40 + 12 * v47;
          *(_QWORD *)(v43 - 5) = *(_QWORD *)v52;
          *(v43 - 3) = *(_DWORD *)(v52 + 8);
          v53 = v40 + 12 * v48;
          *((_QWORD *)v43 - 1) = *(_QWORD *)v53;
          *v43 = *(_DWORD *)(v53 + 8);
          v54 = v40 + 12 * v51;
          *(_QWORD *)(v43 + 1) = *(_QWORD *)v54;
          v43[3] = *(_DWORD *)(v54 + 8);
          if (v12)
            v55 = *(_BYTE *)(v12 + v44);
          else
            v55 = 56;
          *((_BYTE *)v43 + 16) = v55;
          v43 += 10;
          --v36;
        }
        while (v36);
      }
      v33 |= calculateMTD((uint64_t)&v126, &v157, (uint64_t)&v108, v106, v105, (float32x2_t *)&v142, (uint64_t)v155, v37, 32 * (int)v32++, v165, &v154, &v149, &v151, &v150, &v148, &v107);
      v35 -= 32;
      v31 += 128;
    }
    while (v32 != v34);
    if ((v33 & 1) == 0)
      goto LABEL_31;
    v56 = *(_DWORD *)(v152 + 4 * v148);
    v148 = v56;
    v57 = (float32x4_t)v108;
    v57.i32[3] = 0;
    v58 = (float32x2_t)vdupq_laneq_s32(v108, 3).u64[0];
    LODWORD(v59) = vmla_f32((float32x2_t)0xBF000000BF000000, v58, v58).u32[0];
    v60 = vmulq_n_f32(v149, v59);
    v60.i32[3] = 0;
    v61 = (float32x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u64[0];
    v62 = (float32x2_t)vextq_s8((int8x16_t)v149, (int8x16_t)v149, 8uLL).u64[0];
    v63 = (float32x2_t)vext_s8(*(int8x8_t *)v149.f32, (int8x8_t)v62, 4uLL);
    v64 = (int8x8_t)vmls_f32(vmul_f32(v61, *(float32x2_t *)v149.f32), *(float32x2_t *)v108.i8, v62);
    v65 = (float32x2_t)vext_s8(*(int8x8_t *)v108.i8, (int8x8_t)v61, 4uLL);
    v66 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v108.i8, v63), v65, *(float32x2_t *)v149.f32);
    *(int8x8_t *)v67.f32 = vext_s8(v66, v64, 4uLL);
    v67.i64[1] = v66.u32[0];
    v68 = vmlaq_laneq_f32(v60, v67, (float32x4_t)v108, 3);
    v68.i64[1] = vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL).u32[0];
    v69 = vmulq_f32(v57, v149);
    v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
    v70 = vmulq_n_f32((float32x4_t)v151, v59);
    v70.i32[3] = 0;
    v71 = vmlaq_n_f32(v68, v57, vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32).f32[0]);
    v69.i64[0] = vextq_s8(v151, v151, 8uLL).u64[0];
    *(float32x2_t *)v67.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v108.i8, (float32x2_t)vext_s8(*(int8x8_t *)v151.i8, *(int8x8_t *)v69.f32, 4uLL)), v65, *(float32x2_t *)v151.i8);
    *(int8x8_t *)v69.f32 = vext_s8(*(int8x8_t *)v67.f32, (int8x8_t)vmls_f32(vmul_f32(v61, *(float32x2_t *)v151.i8), *(float32x2_t *)v108.i8, *(float32x2_t *)v69.f32), 4uLL);
    v69.i64[1] = v67.u32[0];
    v72 = vmlaq_laneq_f32(v70, v69, (float32x4_t)v108, 3);
    v72.i64[1] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u32[0];
    v73 = vaddq_f32(v71, v71);
    v74 = vmulq_f32(v57, (float32x4_t)v151);
    v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
    v75 = vmlaq_n_f32(v72, v57, vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32).f32[0]);
    v75.i64[1] = vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u32[0];
    v74.i64[0] = 0x4000000040000000;
    v74.i64[1] = 0x4000000040000000;
    v76 = (int8x16_t)vmlaq_f32(v109, v74, v75);
    v57.i64[0] = v76.i64[0];
    v57.i64[1] = vextq_s8(v76, v76, 8uLL).u32[0];
    v96 = v57;
    if (v107.f32[0] > 0.0)
      break;
    v25 = vmulq_n_f32(v73, v107.f32[0]);
    v25.i32[3] = 0;
    v23 = (int32x4_t)vsubq_f32(v100, v25);
    v20 = (int8x16_t)vsubq_f32(v102, v25);
    *(uint64_t *)((char *)v145.i64 + 4) = v20.i64[0];
    v100 = (float32x4_t)v23;
    v102 = (float32x4_t)v20;
    v145.i32[3] = v20.i32[2];
    v22 = v99 + 1;
    v21 = 1;
    if (v99 == 3)
      goto LABEL_32;
  }
  if (!v99)
  {
    v76.i32[3] = v73.i32[0];
    v89 = v94;
    *(_DWORD *)(v94 + 48) = 0;
    *(int8x16_t *)(v94 + 24) = v76;
    *(_QWORD *)(v94 + 40) = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 4uLL).u64[0];
    goto LABEL_38;
  }
  v95 = 1;
LABEL_31:
  v21 = v95;
LABEL_32:
  v77 = vmulq_f32(v100, v100);
  v77.i64[0] = vpaddq_f32(v77, v77).u64[0];
  v78 = vpadd_f32(*(float32x2_t *)v77.f32, *(float32x2_t *)v77.f32);
  v79 = vrsqrte_f32(v78);
  v80 = 4;
  do
  {
    v79 = vmul_f32(v79, vrsqrts_f32(vmul_f32(v79, v79), v78));
    --v80;
  }
  while (v80);
  __asm { FMOV            V3.2S, #1.0 }
  v85 = vmul_f32(v78, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v78), 0), _D3, (int8x8_t)v79));
  v86 = vrecpe_f32(v85);
  v87 = 4;
  do
  {
    v86 = vmul_f32(v86, vrecps_f32(v85, v86));
    --v87;
  }
  while (v87);
  if ((v21 & 1) != 0)
  {
    v88 = vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v85), 0), (int8x16_t)vmulq_n_f32(v100, v86.f32[0]));
    v89 = v94;
    *(float *)(v94 + 48) = -v85.f32[0];
    v90 = v96;
    v90.i32[3] = v88.i32[0];
    *(float32x4_t *)(v94 + 24) = v90;
    *(int8x8_t *)(v94 + 40) = vext_s8(*(int8x8_t *)v88.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL), 4uLL);
    v56 = v148;
LABEL_38:
    *(_DWORD *)(v89 + 16) = v56;
    v91 = 1;
    goto LABEL_40;
  }
  v91 = 0;
LABEL_40:
  if ((v153 & 0x8000000000000000) == 0 && (v153 & 0x7FFFFFFF00000000) != 0 && v152 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v91;
}

uint64_t calculateMTD(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t *a4, char a5, float32x2_t *a6, uint64_t a7, unsigned int a8, int a9, int32x2_t *a10, unsigned int *a11, _OWORD *a12, _OWORD *a13, _OWORD *a14, _DWORD *a15, float32x2_t *a16)
{
  float32x2_t v16;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  float32x2_t v24;
  uint64_t v25;
  int32x2_t *v26;
  uint64_t i;
  float32x2_t v28;
  unsigned __int8 v29;
  unsigned int v30;
  int32x2_t *v31;
  __int128 v32;

  v16 = *a16;
  if (a8)
  {
    v20 = 0;
    v21 = 0;
    v22 = a8;
    do
    {
      *a11 = 0;
      physx::Gu::PCMConvexVsMeshContactGeneration::processTriangle(a1, a2, (float *)(a7 + 40 * v20), v20 + a9, *(unsigned __int8 *)(a7 + 40 * v20 + 36), a6, a5, a3, a4, (uint64_t)a10, a11);
      v23 = *a11;
      if ((_DWORD)v23)
      {
        v24 = (float32x2_t)vdup_lane_s32(a10[5], 1);
        if ((_DWORD)v23 == 1)
        {
          v25 = 0;
        }
        else
        {
          LODWORD(v25) = 0;
          v26 = a10 + 12;
          for (i = 1; i != v23; ++i)
          {
            v28 = (float32x2_t)vdup_lane_s32(v26[1], 1);
            v29 = vcgt_f32(v24, v28).u8[0];
            if ((v29 & 1) != 0)
              v30 = -1;
            else
              v30 = 0;
            v24 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v30), (int8x8_t)v28, (int8x8_t)v24);
            if ((v29 & 1) != 0)
              v25 = i;
            else
              v25 = v25;
            v26 += 8;
          }
        }
        if ((vcgt_f32(v16, v24).u8[0] & 1) != 0)
        {
          *a15 = v20 + a9;
          v31 = &a10[8 * v25];
          v32 = *(_OWORD *)v31[4].i8;
          HIDWORD(v32) = 0;
          *a12 = v32;
          *a13 = *(_OWORD *)v31[2].i8;
          *a14 = *(_OWORD *)v31->i8;
          v21 = 1;
          v16 = v24;
        }
        else
        {
          v21 = 1;
        }
      }
      ++v20;
    }
    while (v20 != v22);
  }
  else
  {
    v21 = 0;
  }
  *a16 = v16;
  return v21 & 1;
}

uint64_t physx::Gu::computeBox_HeightFieldMTD(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  int32x2_t v5;
  int32x4_t *v6;
  int32x4_t *v7;
  float32x2_t *v8;
  float32x2_t *v9;
  float *v10;
  float *v11;
  float32x2_t *v12;
  float v13;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  int32x4_t v25;
  float32x2_t v26;
  unint64_t v27;
  int32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x4_t v31;
  char v32;
  int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  float v85;
  float v86;
  float v87;
  unsigned int v88;
  unsigned int v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float32x4_t v96;
  float32x4_t v97;
  float v98;
  float v99;
  float32x4_t v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  unint64_t v131;
  float v132;
  float v133;
  float32x4_t v134;
  float v135;
  int v136;
  float32x4_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  unsigned int v141;
  uint64_t v142;
  unsigned int v143;
  _QWORD *v144;
  uint64_t v145;
  unsigned int v146;
  float32x4_t v147;
  float32x2_t v148;
  float v149;
  float32x4_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32x2_t v153;
  int8x8_t v154;
  float32x2_t v155;
  int8x8_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  int8x16_t v166;
  float32x4_t v167;
  int8x16_t v168;
  float32x4_t v169;
  float32x2_t v170;
  float32x2_t v171;
  int v172;
  float32x2_t v173;
  float32x2_t v174;
  int v175;
  int8x16_t v176;
  uint64_t v177;
  float32x4_t v178;
  uint64_t v179;
  uint64_t v182;
  int8x8_t v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  char v190;
  float32x4_t v191;
  float v192;
  float32x4_t v193;
  float32x4_t v194;
  float v195;
  float v196;
  float v197;
  float v198;
  int32x4_t v199;
  float v200;
  float32x4_t v201;
  float v202;
  float v203;
  float32x4_t v204;
  char v205;
  float v206;
  float v207;
  float v208;
  float32x4_t v209;
  unint64_t v210;
  float v211;
  int v212;
  float32x4_t v213;
  char v214;
  float v215;
  float v216;
  uint64_t v217;
  int32x2_t v218;
  float v219;
  int v220;
  float32x4_t v221[4];
  float v222[6];
  int32x2_t v223;
  int32x4_t v224;
  float32x4_t v225;
  _OWORD v226[3];
  char v227[8];
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  int v233;
  uint64_t *v234;
  uint64_t *v235;
  void *v236;
  __int128 v237;
  __int128 v238;
  _QWORD v239[2];
  float v240;
  float v241;
  float v242;
  int v243;
  char v244;
  int32x4_t v245;
  float32x2_t v246;
  unsigned int v247;
  float32x4_t v248;
  __int128 v249;
  int8x16_t v250;
  int32x2_t v251;
  float v252;
  float32x2_t v253;
  float32x2_t *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  _QWORD v258[160];
  float32x4_t v259;
  uint64_t v260;
  uint64_t v261;
  int32x4_t *v262;
  _OWORD *v263;
  _OWORD *v264;
  char v265;
  _QWORD *v266;
  int32x2_t v267[516];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v182 = v2;
  v205 = v3;
  v214 = v4;
  v218 = v5;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = (float32x2_t *)v1;
  v267[513] = *(int32x2_t *)MEMORY[0x24BDAC8D0];
  v257 = 0;
  v256 = 0;
  v255 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)&v255, 0x80u);
  v253 = v12[1];
  v254 = v12;
  v13 = v12[3].f32[0];
  __asm { FMOV            V2.2S, #1.0 }
  v183 = (int8x8_t)_D2;
  v251 = vrev64_s32((int32x2_t)vdiv_f32(_D2, v12[2]));
  v252 = 1.0 / v13;
  v249 = 0u;
  v250 = 0u;
  v248 = 0u;
  v247 = 0xFFFFFFF;
  v18 = v9->f32[0];
  v19 = v9[1].f32[1];
  v206 = v9[1].f32[0];
  v207 = v9->f32[1];
  v20 = v9[2].f32[0];
  v188 = v9[2].f32[1];
  v22 = v9[3].f32[0];
  v21 = v9[3].f32[1];
  v23 = v9[4].f32[0];
  v215 = v9[4].f32[1];
  v24 = v9[6].f32[0];
  v25.i64[0] = v7[1].i64[0];
  v25.i64[1] = v7[1].u32[2];
  v201 = (float32x4_t)v25;
  v25.i32[0] = v9[6].i32[1];
  v26 = v9[6];
  v27 = (unint64_t)v9[5];
  v28 = (int32x4_t)(unint64_t)v26;
  v28.i32[2] = v9[7].i32[0];
  v199 = *v7;
  v29 = vpmin_f32((float32x2_t)vdup_laneq_s32(v28, 2), v26);
  v30 = vpmin_f32(v29, v29);
  v246 = vadd_f32((float32x2_t)vdup_lane_s32(v218, 0), vmul_f32(v30, (float32x2_t)vdup_n_s32(0x3E19999Au)));
  v203 = v24 + v246.f32[0];
  v208 = *(float *)v25.i32 + v246.f32[0];
  v219 = *(float *)&v28.i32[2] + v246.f32[0];
  v243 = 3;
  v244 = 0;
  v239[1] = 0;
  v239[0] = 0;
  v245 = v28;
  *(float *)v25.i32 = 0.05 * v30.f32[0];
  v240 = 0.15 * v30.f32[0];
  v241 = 0.05 * v30.f32[0];
  v242 = 0.05 * v30.f32[0];
  v31.i32[3] = 0;
  v31.f32[0] = v215;
  *(uint64_t *)((char *)v31.i64 + 4) = v27;
  v210 = v27;
  v213 = v31;
  physx::Gu::PolygonalBox::PolygonalBox((uint64_t)v227, (uint64_t)&v9[6], *(double *)v31.i64, v25);
  v32 = 0;
  v33 = 0;
  v184 = v18;
  v34 = (float)((float)(v18 + 1.0) + v20) + v23;
  v35 = 0.5 / sqrtf(v34);
  v36 = (float)((float)(1.0 - v18) - v20) + v23;
  v37 = 0.5 / sqrtf(v36);
  v38 = v23;
  v39 = (float)((float)(1.0 - v18) + v20) - v23;
  v40 = 0.5 / sqrtf(v39);
  v41 = (float)((float)(v18 + 1.0) - v20) - v23;
  v42 = 0.5 / sqrtf(v41);
  v43 = *v11;
  v44 = v11[1];
  v45 = v44 + v44;
  v46 = v11[2];
  v47 = v11[3];
  v48 = v46 + v46;
  v49 = v44 * (float)(v44 + v44);
  v50 = v46 * (float)(v46 + v46);
  v51 = (float)(v43 + v43) * v44;
  v52 = (float)(v43 + v43) * v46;
  v53 = (float)(v43 + v43) * v47;
  v54 = v45 * v46;
  v55 = v45 * v47;
  v56 = v48 * v47;
  v57 = (float)(1.0 - v49) - v50;
  v58 = v51 + v56;
  v59 = v52 - v55;
  v60 = v51 - v56;
  v61 = 1.0 - (float)(v43 * (float)(v43 + v43));
  v62 = v61 - v50;
  v63 = v54 + v53;
  v64 = v52 + v55;
  v65 = v54 - v53;
  v66 = v61 - v49;
  v186 = (float)(v22 - v206) * v35;
  v187 = (float)(v188 - v21) * v35;
  v189 = (float)(v207 - v19) * v35;
  v197 = v34 * v35;
  v232 = 0x600000008;
  v226[0] = xmmword_2260E5F10;
  v226[1] = xmmword_2260E5F20;
  v67 = (float)(v206 + v22) * v37;
  v68 = v36 * v37;
  v69 = (float)(v207 - v19) * v37;
  v70 = (float)(v188 + v21) * v37;
  v226[2] = xmmword_2260E5F40;
  v71 = v39 * v40;
  v72 = (float)(v188 + v21) * v40;
  v185 = (float)(v22 - v206) * v40;
  v73 = (float)(v207 + v19) * v40;
  v74 = v41 * v42;
  v75 = (float)(v207 + v19) * v42;
  v76 = (float)(v206 + v22) * v42;
  v224 = v199;
  v225 = v201;
  v77 = (float)(v188 - v21) * v42;
  v78 = v18;
  *(float *)&v79 = (float)(v206 * v59) + (float)((float)(v18 * v57) + (float)(v207 * v58));
  *(float *)&v80 = (float)(v188 * v59) + (float)((float)(v19 * v57) + (float)(v20 * v58));
  *(float *)&v81 = (float)(v38 * v59) + (float)((float)(v22 * v57) + (float)(v21 * v58));
  *(float *)&v82 = (float)(v206 * v63) + (float)((float)(v18 * v60) + (float)(v207 * v62));
  *(float *)&v83 = (float)(v188 * v63) + (float)((float)(v19 * v60) + (float)(v20 * v62));
  *(float *)&v84 = (float)(v38 * v63) + (float)((float)(v22 * v60) + (float)(v21 * v62));
  v85 = v18 * v64;
  v86 = v19 * v64;
  v87 = (float)(v22 * v64) + (float)(v21 * v65);
  *(float *)&v88 = (float)(v206 * v66) + (float)(v85 + (float)(v207 * v65));
  *(float *)&v89 = (float)(v188 * v66) + (float)(v86 + (float)(v20 * v65));
  v91 = v11[4];
  v90 = v11[5];
  v92 = (float)(v18 * v91) + (float)(v207 * v90);
  v202 = v19;
  v93 = (float)(v19 * v91) + (float)(v20 * v90);
  v200 = v21;
  v94 = (float)(v22 * v91) + (float)(v21 * v90);
  v95 = v11[6];
  v195 = v93 + (float)(v188 * v95);
  v196 = v92 + (float)(v206 * v95);
  v96.i64[0] = __PAIR64__(v80, v79);
  v96.i64[1] = v81;
  v97.i64[0] = __PAIR64__(v83, v82);
  v98 = v38 * v95;
  v99 = v78;
  v192 = v94 + v98;
  v97.i64[1] = v84;
  v193 = v97;
  v194 = v96;
  v100.i32[3] = 0;
  v100.i64[0] = __PAIR64__(v89, v88);
  v100.f32[2] = (float)(v38 * v66) + v87;
  v191 = v100;
  v102 = v186;
  v101 = v187;
  if (v78 < (float)-v20)
  {
    v101 = v67;
    v102 = v70;
  }
  v103 = v189;
  if (v184 < (float)-v20)
    v103 = v68;
  v104 = v197;
  if (v184 < (float)-v20)
    v104 = v69;
  if (v184 <= v20)
    v105 = v73;
  else
    v105 = v74;
  if (v78 <= v20)
    v106 = v71;
  else
    v106 = v75;
  if (v78 <= v20)
    v107 = v72;
  else
    v107 = v76;
  v108 = v185;
  if (v184 > v20)
    v108 = v77;
  v198 = v38;
  if (v38 < 0.0)
  {
    v101 = v105;
    v102 = v106;
    v103 = v107;
    v104 = v108;
  }
  v109 = v102 + v102;
  v110 = v103 + v103;
  v111 = v102 * (float)(v102 + v102);
  v112 = v103 * (float)(v103 + v103);
  v113 = v102 * (float)(v101 + v101);
  v114 = v103 * (float)(v101 + v101);
  v115 = v104 * (float)(v101 + v101);
  v116 = v103 * v109;
  v117 = v104 * v109;
  v118 = v104 * v110;
  v119 = v113 + v118;
  v120 = v113 - v118;
  v121 = v114 - v117;
  v122 = v114 + v117;
  v123 = v116 + v115;
  v124 = v116 - v115;
  v125 = 1.0 - (float)(v101 * (float)(v101 + v101));
  v126 = v121 * v203;
  v127 = fabsf(v122 * v219);
  v128 = v215;
  v129 = v127 + (float)(fabsf((float)((float)(1.0 - v111) - v112) * v203) + fabsf(v120 * v208));
  v130 = fabsf(v119 * v203);
  v131 = v210;
  v132 = fabsf(v124 * v219) + (float)(v130 + fabsf((float)(v125 - v112) * v208));
  v230 = 0;
  v231 = 0;
  v233 = 0;
  v234 = &v229;
  v235 = &v228;
  v236 = &physx::Gu::gPCMBoxPolygonData;
  v237 = 0u;
  v238 = 0u;
  v204 = 0u;
  v133 = fabsf((float)(v125 - v111) * v219) + (float)(fabsf(v126) + fabsf(v123 * v208));
  v134 = 0uLL;
  while (1)
  {
    v209 = v134;
    v211 = *(float *)&v131;
    LODWORD(v256) = 0;
    v135 = *((float *)&v131 + 1);
    v216 = v128;
    v222[0] = v128 - v129;
    v222[1] = *(float *)&v131 - v132;
    v222[2] = *((float *)&v131 + 1) - v133;
    v222[3] = v129 + v128;
    v222[4] = v132 + *(float *)&v131;
    v222[5] = v133 + *((float *)&v131 + 1);
    v258[0] = &off_24ED91320;
    v258[1] = &v255;
    physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v251, v11, v222, v205, (uint64_t)v258);
    v136 = v256;
    if (!(_DWORD)v256)
      goto LABEL_41;
    v190 = v32;
    v225 = v213;
    v262 = &v224;
    v263 = v226;
    v264 = v226;
    v265 = 1;
    v259.i64[0] = (uint64_t)&off_24ED90FE0;
    v266 = v239;
    v261 = 0;
    v260 = 0;
    v137.i32[3] = 0;
    v137.f32[0] = v196 + (float)((float)((float)-(float)(v211 * v207) - (float)(v99 * v216)) - (float)(v206 * v135));
    v137.f32[1] = v195 + (float)((float)((float)-(float)(v211 * v20) - (float)(v202 * v216)) - (float)(v188 * v135));
    v137.f32[2] = v192 + (float)((float)((float)-(float)(v211 * v200) - (float)(v22 * v216)) - (float)(v198 * v135));
    v221[0] = v194;
    v221[1] = v193;
    v221[2] = v191;
    v221[3] = v137;
    v223 = vdup_n_s32(0x7F7FFFFFu);
    if ((v256 + 31) < 0x20)
      goto LABEL_40;
    v212 = v33;
    v138 = 0;
    v139 = 0;
    v140 = 0;
    v217 = (v256 + 31) >> 5;
    v141 = v256;
    v220 = v256;
    do
    {
      if (v141 >= 0x20uLL)
        v142 = 32;
      else
        v142 = v141;
      if ((v136 - 32 * v139) >= 0x20)
        v143 = 32;
      else
        v143 = v136 - 32 * v139;
      if (v143)
      {
        v144 = v258;
        v145 = v138;
        do
        {
          physx::Gu::HeightFieldUtil::getTriangle((uint64_t)&v251, v11, (uint64_t)v144, 0, 0, *(_DWORD *)(v255 + v145), 0, 0);
          *((_BYTE *)v144 + 36) = 56;
          v144 += 5;
          v145 += 4;
          --v142;
        }
        while (v142);
      }
      v140 |= calculateMTD((uint64_t)&v230, &v259, (uint64_t)&v224, v221, v214, &v246, (uint64_t)v258, v143, 32 * (int)v139++, v267, &v257, &v248, &v250, &v249, &v247, (float32x2_t *)&v223);
      v141 -= 32;
      v138 += 128;
      v136 = v220;
    }
    while (v139 != v217);
    if ((v140 & 1) == 0)
      goto LABEL_40;
    v146 = *(_DWORD *)(v255 + 4 * v247);
    v247 = v146;
    v147 = (float32x4_t)v224;
    v147.i32[3] = 0;
    v148 = (float32x2_t)vdupq_laneq_s32(v224, 3).u64[0];
    LODWORD(v149) = vmla_f32((float32x2_t)0xBF000000BF000000, v148, v148).u32[0];
    v150 = vmulq_n_f32(v248, v149);
    v150.i32[3] = 0;
    v151 = (float32x2_t)vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL).u64[0];
    v152 = (float32x2_t)vextq_s8((int8x16_t)v248, (int8x16_t)v248, 8uLL).u64[0];
    v153 = (float32x2_t)vext_s8(*(int8x8_t *)v248.f32, (int8x8_t)v152, 4uLL);
    v154 = (int8x8_t)vmls_f32(vmul_f32(v151, *(float32x2_t *)v248.f32), *(float32x2_t *)v224.i8, v152);
    v155 = (float32x2_t)vext_s8(*(int8x8_t *)v224.i8, (int8x8_t)v151, 4uLL);
    v156 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v224.i8, v153), v155, *(float32x2_t *)v248.f32);
    *(int8x8_t *)v157.f32 = vext_s8(v156, v154, 4uLL);
    v157.i64[1] = v156.u32[0];
    v158 = vmlaq_laneq_f32(v150, v157, (float32x4_t)v224, 3);
    v158.i64[1] = vextq_s8((int8x16_t)v158, (int8x16_t)v158, 8uLL).u32[0];
    v159 = vmulq_f32(v147, v248);
    v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
    v160 = vmulq_n_f32((float32x4_t)v250, v149);
    v160.i32[3] = 0;
    v161 = vmlaq_n_f32(v158, v147, vpadd_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32).f32[0]);
    v159.i64[0] = vextq_s8(v250, v250, 8uLL).u64[0];
    *(float32x2_t *)v157.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v224.i8, (float32x2_t)vext_s8(*(int8x8_t *)v250.i8, *(int8x8_t *)v159.f32, 4uLL)), v155, *(float32x2_t *)v250.i8);
    *(int8x8_t *)v159.f32 = vext_s8(*(int8x8_t *)v157.f32, (int8x8_t)vmls_f32(vmul_f32(v151, *(float32x2_t *)v250.i8), *(float32x2_t *)v224.i8, *(float32x2_t *)v159.f32), 4uLL);
    v159.i64[1] = v157.u32[0];
    v162 = vmlaq_laneq_f32(v160, v159, (float32x4_t)v224, 3);
    v162.i64[1] = vextq_s8((int8x16_t)v162, (int8x16_t)v162, 8uLL).u32[0];
    v163 = vaddq_f32(v161, v161);
    v164 = vmulq_f32(v147, (float32x4_t)v250);
    v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
    v165 = vmlaq_n_f32(v162, v147, vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32).f32[0]);
    v165.i64[1] = vextq_s8((int8x16_t)v165, (int8x16_t)v165, 8uLL).u32[0];
    v164.i64[0] = 0x4000000040000000;
    v164.i64[1] = 0x4000000040000000;
    v166 = (int8x16_t)vmlaq_f32(v225, v164, v165);
    v147.i64[0] = v166.i64[0];
    v147.i64[1] = vextq_s8(v166, v166, 8uLL).u32[0];
    v204 = v147;
    if (*(float *)v223.i32 > 0.0)
      break;
    v167 = vmulq_n_f32(v163, *(float *)v223.i32);
    v167.i32[3] = 0;
    v134 = vsubq_f32(v209, v167);
    v168 = (int8x16_t)vsubq_f32(v213, v167);
    v33 = v212 + 1;
    v131 = vextq_s8(v168, v168, 4uLL).u64[0];
    v32 = 1;
    v213 = (float32x4_t)v168;
    v128 = *(float *)v168.i32;
    if (v212 == 3)
      goto LABEL_42;
  }
  if (!v212)
  {
    v166.i32[3] = v163.i32[0];
    v177 = v182;
    *(_DWORD *)(v182 + 48) = 0;
    *(int8x16_t *)(v182 + 24) = v166;
    *(_QWORD *)(v182 + 40) = vextq_s8((int8x16_t)v163, (int8x16_t)v163, 4uLL).u64[0];
    goto LABEL_48;
  }
  v190 = 1;
LABEL_40:
  v32 = v190;
LABEL_41:
  v134 = v209;
LABEL_42:
  v169 = vmulq_f32(v134, v134);
  v169.i64[0] = vpaddq_f32(v169, v169).u64[0];
  v170 = vpadd_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v169.f32);
  v171 = vrsqrte_f32(v170);
  v172 = 4;
  do
  {
    v171 = vmul_f32(v171, vrsqrts_f32(vmul_f32(v171, v171), v170));
    --v172;
  }
  while (v172);
  v173 = vmul_f32(v170, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v170), 0), v183, (int8x8_t)v171));
  v174 = vrecpe_f32(v173);
  v175 = 4;
  do
  {
    v174 = vmul_f32(v174, vrecps_f32(v173, v174));
    --v175;
  }
  while (v175);
  if ((v32 & 1) != 0)
  {
    v176 = vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v173), 0), (int8x16_t)vmulq_n_f32(v134, v174.f32[0]));
    v177 = v182;
    *(float *)(v182 + 48) = -v173.f32[0];
    v178 = v204;
    v178.i32[3] = v176.i32[0];
    *(float32x4_t *)(v182 + 24) = v178;
    *(int8x8_t *)(v182 + 40) = vext_s8(*(int8x8_t *)v176.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v176, v176, 8uLL), 4uLL);
    v146 = v247;
LABEL_48:
    *(_DWORD *)(v177 + 16) = v146;
    v179 = 1;
    goto LABEL_50;
  }
  v179 = 0;
LABEL_50:
  if ((v256 & 0x8000000000000000) == 0 && (v256 & 0x7FFFFFFF00000000) != 0 && v255 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v179;
}

uint64_t physx::Gu::computeConvex_TriangleMeshMTD(uint64_t a1)
{
  uint64_t v1;
  int8x16_t v2;
  uint64_t v3;
  char v4;
  float32x4_t *v5;
  float32x4_t *v6;
  float *v7;
  uint64_t v8;
  float *v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  unint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  float32x2_t v38;
  uint64_t (**v43)();
  float32x4_t v44;
  int v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x4_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  int8x8_t v67;
  float32x4_t v68;
  int32x2_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  char v104;
  float32x2_t v105;
  char v106;
  int32x2_t v107;
  float32x4_t v108;
  float32x4_t v109;
  char v110;
  int8x16_t v111;
  int32x4_t v112;
  int v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  float v144;
  float v145;
  float32x4_t v146;
  float v147;
  float32x4_t v148;
  unsigned int v149;
  float32x4_t v150;
  float32x4_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  float v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int *v163;
  int *v164;
  uint64_t v165;
  unsigned int v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned __int16 *v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  unsigned int v177;
  float32x4_t v178;
  float32x2_t v179;
  float v180;
  float32x4_t v181;
  float32x2_t v182;
  float32x2_t v183;
  float32x2_t v184;
  int8x8_t v185;
  float32x2_t v186;
  int8x8_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  int8x16_t v197;
  float32x4_t v198;
  uint64_t v199;
  float32x4_t v200;
  float32x2_t v201;
  float32x2_t v202;
  int v203;
  float32x2_t v204;
  float32x2_t v205;
  int v206;
  int8x16_t v207;
  float32x4_t v208;
  uint64_t v209;
  uint64_t v212;
  BOOL v213;
  char v214;
  float32x4_t v215;
  uint64_t v216;
  int8x16_t v217;
  float *v218;
  float32x4_t v219;
  float32x4_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  int8x16_t v227;
  uint64_t v228;
  char v229;
  float32x4_t v230[4];
  float v231[12];
  float32x2_t v232;
  float v233;
  float32x4_t v234;
  uint64_t v235;
  float v236;
  float32x2_t v237;
  _BYTE v238[108];
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  unsigned int v251;
  float32x4_t v252;
  __int128 v253;
  int8x16_t v254;
  uint64_t v255;
  uint64_t v256;
  float32x2_t v257;
  float32x4_t v258;
  float32x4_t v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  char v265;
  unsigned int v266;
  char v267[20];
  int v268;
  float32x4_t v269[2];
  float32x4_t *v270;
  float32x4_t *v271;
  float32x4_t *v272;
  BOOL v273;
  float32x4_t *v274;
  float32x4_t v275;
  float32x2_t v276;
  float v277;
  int v278;
  char v279;
  float32x4_t v280;
  float32x4_t v281;
  __int128 v282;
  float32x4_t v283;
  float32x4_t v284;
  __int128 v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char v289;
  int32x2_t v290[514];

  *(double *)v2.i64 = MEMORY[0x24BDAC7A8](a1);
  v212 = v3;
  v229 = v4;
  v6 = v5;
  v218 = v7;
  v9 = (float *)v8;
  v10 = 0;
  v290[512] = *(int32x2_t *)MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(v1 + 32);
  v228 = *(_QWORD *)(v8 + 40);
  v12 = *(_QWORD *)(v228 + 80);
  v266 = 0;
  v221 = v1;
  v222 = v11;
  v13 = v11 + 32;
  v14 = 1.0;
  if (*(float *)(v1 + 4) == 1.0 && *(float *)(v1 + 8) == 1.0)
    v10 = *(float *)(v1 + 12) == 1.0;
  v16 = (float32x4_t)xmmword_2260E5F10;
  v260 = xmmword_2260E5F10;
  v261 = xmmword_2260E5F10;
  v17 = (float32x4_t)xmmword_2260E5F20;
  v262 = xmmword_2260FD430;
  v263 = xmmword_2260E5F20;
  v18 = 0.0;
  v19 = 0.0;
  v264 = 0x3F80000000000000;
  v265 = 0;
  v20 = 0.0;
  v21 = 1.0;
  v22 = 0.0;
  v23 = 0.0;
  v24 = 0.0;
  v25 = 1.0;
  if (!v10)
  {
    v227 = v2;
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)&v260, (float *)(v1 + 4), (float *)(v1 + 16));
    v17 = (float32x4_t)xmmword_2260E5F20;
    v16 = (float32x4_t)xmmword_2260E5F10;
    v2 = v227;
    v24 = *((float *)&v260 + 1);
    v25 = *(float *)&v260;
    v22 = *((float *)&v260 + 3);
    v23 = *((float *)&v260 + 2);
    v20 = *((float *)&v261 + 1);
    v21 = *(float *)&v261;
    v18 = *((float *)&v261 + 3);
    v19 = *((float *)&v261 + 2);
    v14 = *(float *)&v262;
  }
  v26 = *(float *)(v222 + 56);
  v27 = *(float *)(v222 + 60);
  v28 = (float)(v23 * v26) + (float)(v20 * v27);
  v29 = *(float *)(v222 + 64);
  v30 = v28 + (float)(v14 * v29);
  *(float *)&v31 = (float)((float)(v25 * v26) + (float)(v22 * v27)) + (float)(v19 * v29);
  *((float *)&v31 + 1) = (float)((float)(v24 * v26) + (float)(v21 * v27)) + (float)(v18 * v29);
  v219 = (float32x4_t)v31;
  v32.i64[0] = v6[1].i64[0];
  v32.i64[1] = v6[1].u32[2];
  v33 = *(float32x4_t *)(v221 + 4);
  v34 = v33;
  v34.i32[3] = 0;
  v258 = *v6;
  v259 = v32;
  v225 = v32;
  v35 = *(float32x4_t *)(v221 + 16);
  v279 = 0;
  v286 = v13;
  v288 = *(_QWORD *)(v222 + 72) + 20 * *(unsigned __int8 *)(v222 + 71);
  v289 = *(_BYTE *)(v222 + 70);
  v36.i64[0] = *(_QWORD *)(v222 + 92);
  v36.i64[1] = *(unsigned int *)(v222 + 100);
  v37 = (int32x4_t)vmulq_f32(v34, v36);
  v278 = 0;
  v275 = 0u;
  *(float32x2_t *)v37.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v37, 2), *(float32x2_t *)v37.i8);
  v38 = vpmin_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v37.i8);
  v276 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v38.f32[0]);
  v277 = 0.025 * v38.f32[0];
  __asm { FMOV            V8.2S, #1.0 }
  if (v10)
  {
    v280 = v16;
    v281 = v17;
    v282 = xmmword_2260E5F40;
    v283 = v16;
    v284 = v17;
    v285 = xmmword_2260E5F40;
    v43 = &off_24ED91040;
  }
  else
  {
    v44 = vrecpeq_f32(v34);
    v45 = 4;
    do
    {
      v44 = vmulq_f32(v44, vrecpsq_f32(v44, v34));
      --v45;
    }
    while (v45);
    *(int32x2_t *)v46.f32 = vdup_lane_s32(*(int32x2_t *)v33.f32, 0);
    v46.i64[1] = v46.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v46, v34)), *(int8x8_t *)v2.i8).u32[0] & 0xFFFFFF) != 0)
    {
      v53 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.f32, 1);
      v54 = (float32x2_t)vdup_laneq_s32((int32x4_t)v35, 2);
      v55 = (float32x2_t)vdup_laneq_s32((int32x4_t)v35, 3);
      v56 = vaddq_f32(v35, v35);
      v57 = vmul_lane_f32(v53, *(float32x2_t *)v56.f32, 1);
      v58 = vmul_laneq_f32(v54, v56, 2);
      v59 = vmul_n_f32(v53, v56.f32[0]);
      v60 = vmul_n_f32(v54, v56.f32[0]);
      v61 = vmul_n_f32(v55, v56.f32[0]);
      v62 = vmul_lane_f32(v54, *(float32x2_t *)v56.f32, 1);
      v63 = vmul_lane_f32(v55, *(float32x2_t *)v56.f32, 1);
      v64 = vmul_laneq_f32(v55, v56, 2);
      v65 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v56.f32), 0));
      v66 = (float32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v57), v58), (int8x8_t)vadd_f32(v59, v64), 4uLL);
      v67 = (int8x8_t)vsub_f32(v59, v64);
      *(float32x2_t *)v68.f32 = v66;
      v68.i64[1] = vsub_f32(v60, v63).u32[0];
      v69 = (int32x2_t)vext_s8(v67, (int8x8_t)vsub_f32(v65, v58), 4uLL);
      *(int8x8_t *)v56.f32 = vext_s8((int8x8_t)vdup_lane_s32((int32x2_t)v66, 0), (int8x8_t)v69, 4uLL);
      *(int32x2_t *)v70.f32 = v69;
      v70.i64[1] = vadd_f32(v62, v61).u32[0];
      v65.i32[0] = vsub_f32(v65, v57).u32[0];
      *(int8x8_t *)v71.f32 = vext_s8((int8x8_t)vadd_f32(v60, v63), (int8x8_t)vsub_f32(v62, v61), 4uLL);
      *(int8x8_t *)v72.f32 = vext_s8((int8x8_t)v66, (int8x8_t)vdup_lane_s32(v69, 1), 4uLL);
      v71.i64[1] = v65.u32[0];
      v56.i64[1] = vdup_lane_s32(*(int32x2_t *)v71.f32, 0).u32[0];
      v72.i64[1] = vdup_lane_s32(*(int32x2_t *)v71.f32, 1).u32[0];
      *(int8x8_t *)v73.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v68.u32[2], 0), *(int8x8_t *)&v70.u32[2], 4uLL);
      v73.i64[1] = vdup_lane_s32((int32x2_t)v65.u32[0], 0).u32[0];
      v74 = vmulq_n_f32(v56, v33.f32[0]);
      v74.i32[3] = 0;
      v75 = vmulq_lane_f32(v72, *(float32x2_t *)v33.f32, 1);
      v75.i32[3] = 0;
      v76 = vmulq_laneq_f32(v73, v33, 2);
      v76.i32[3] = 0;
      v77 = vmulq_n_f32(v74, v66.f32[0]);
      v77.i32[3] = 0;
      v78 = vmulq_lane_f32(v75, v66, 1);
      v78.i32[3] = 0;
      v79 = vmulq_laneq_f32(v76, v68, 2);
      v79.i32[3] = 0;
      v47 = vaddq_f32(v79, vaddq_f32(v77, v78));
      v80 = vmulq_n_f32(v74, v70.f32[0]);
      v80.i32[3] = 0;
      v81 = vmulq_lane_f32(v75, *(float32x2_t *)v70.f32, 1);
      v81.i32[3] = 0;
      v82 = vmulq_laneq_f32(v76, v70, 2);
      v82.i32[3] = 0;
      v48 = vaddq_f32(v82, vaddq_f32(v80, v81));
      v83 = vmulq_n_f32(v74, v71.f32[0]);
      v83.i32[3] = 0;
      v84 = vmulq_lane_f32(v75, *(float32x2_t *)v71.f32, 1);
      v84.i32[3] = 0;
      v85 = vmulq_laneq_f32(v76, v71, 2);
      v85.i32[3] = 0;
      v49 = vaddq_f32(v85, vaddq_f32(v83, v84));
      v280 = v47;
      v281 = v48;
      v86 = vmulq_n_f32(v56, v44.f32[0]);
      v86.i32[3] = 0;
      v87 = vmulq_lane_f32(v72, *(float32x2_t *)v44.f32, 1);
      v87.i32[3] = 0;
      v88 = vmulq_laneq_f32(v73, v44, 2);
      v88.i32[3] = 0;
      v89 = vmulq_n_f32(v86, v66.f32[0]);
      v89.i32[3] = 0;
      v90 = vmulq_lane_f32(v87, v66, 1);
      v90.i32[3] = 0;
      v91 = vmulq_laneq_f32(v88, v68, 2);
      v91.i32[3] = 0;
      v92 = vaddq_f32(v91, vaddq_f32(v89, v90));
      v93 = vmulq_n_f32(v86, v70.f32[0]);
      v93.i32[3] = 0;
      v94 = vmulq_lane_f32(v87, *(float32x2_t *)v70.f32, 1);
      v94.i32[3] = 0;
      v95 = vmulq_laneq_f32(v88, v70, 2);
      v95.i32[3] = 0;
      v96 = vmulq_n_f32(v86, v71.f32[0]);
      v96.i32[3] = 0;
      v97 = vmulq_lane_f32(v87, *(float32x2_t *)v71.f32, 1);
      v97.i32[3] = 0;
      v98 = vmulq_laneq_f32(v88, v71, 2);
      v98.i32[3] = 0;
      v282 = (__int128)v49;
      v283 = v92;
      v285 = (__int128)v88;
      v284 = vaddq_f32(v95, vaddq_f32(v93, v94));
      v92.i64[0] = *(_QWORD *)(v222 + 92);
      v92.i64[1] = *(unsigned int *)(v222 + 100);
      v52 = vaddq_f32(v98, vaddq_f32(v96, v97));
      v99 = (int32x4_t)vmulq_f32(v34, v92);
      *(float32x2_t *)v99.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v99, 2), *(float32x2_t *)v99.i8);
      v38 = vpmin_f32(*(float32x2_t *)v99.i8, *(float32x2_t *)v99.i8);
    }
    else
    {
      v44.i32[3] = 0;
      v47 = vmulq_f32(v34, v16);
      v48 = vmulq_f32(v34, v17);
      v49 = vmulq_f32(v34, (float32x4_t)xmmword_2260E5F40);
      v280 = v47;
      v281 = v48;
      v50 = vmulq_f32(v44, v16);
      v51 = vmulq_f32(v44, v17);
      v52 = vmulq_f32(v44, (float32x4_t)xmmword_2260E5F40);
      v282 = (__int128)v49;
      v283 = v50;
      v284 = v51;
    }
    v100 = vmulq_f32(v47, (float32x4_t)0);
    v100.i32[3] = 0;
    v101 = vmulq_f32(v48, (float32x4_t)0);
    v101.i32[3] = 0;
    v102 = vmulq_f32(v49, (float32x4_t)0);
    v102.i32[3] = 0;
    v285 = (__int128)v52;
    v275 = vaddq_f32(v102, vaddq_f32(v101, v100));
    v43 = &off_24ED91090;
  }
  v216 = (uint64_t)v43;
  _Q1 = v219;
  _Q1.f32[2] = v30;
  v220 = _Q1;
  v287 = *(_QWORD *)(v222 + 80);
  __asm { FMOV            V1.2S, #0.25 }
  *(float32x2_t *)v2.i8 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 0), vmul_f32(v38, *(float32x2_t *)_Q1.f32));
  v217 = v2;
  v257 = *(float32x2_t *)v2.i8;
  v256 = 0;
  v255 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)&v255, 0x80u);
  v253 = 0u;
  v254 = 0u;
  v215 = 0u;
  v252 = 0u;
  v251 = 0xFFFFFFF;
  physx::operator*((uint64_t)v218, v9 + 1, (uint64_t)&v239);
  physx::Gu::getPCMConvexData(&v275, v10, (uint64_t)v238);
  v104 = 0;
  v237 = 0;
  v105 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v217.i8, 0);
  v234 = *v6;
  v106 = 1;
  v107 = vdup_n_s32(0x7F7FFFFFu);
  v108 = 0uLL;
  v109 = v225;
  v213 = v10;
  while (1)
  {
    v224 = v108;
    v226 = v109;
    v110 = v106;
    LODWORD(v256) = 0;
    v235 = v109.i64[0];
    v236 = v109.f32[2];
    v259 = v109;
    v270 = &v258;
    v271 = &v280;
    v272 = &v283;
    v273 = v10;
    v269[0].i64[0] = v216;
    v274 = &v275;
    v269[1] = v220;
    physx::Gu::computeOBBAroundConvex(v231, (float *)v221, (float *)v222, v234.f32);
    *(float32x2_t *)v111.i8 = vadd_f32(v105, v232);
    v232 = *(float32x2_t *)v111.i8;
    v233 = *(float *)v217.i32 + v233;
    *(float *)v111.i32 = v233;
    midPhaseQuery((uint64_t)v9, v218, (uint64_t)v231, (uint64_t)&v255, v111, v217, v112);
    v113 = v256;
    if (!(_DWORD)v256)
    {
      v108 = v224;
      goto LABEL_50;
    }
    v214 = v104;
    v114 = (float)(v234.f32[3] * v234.f32[3]) + -0.5;
    v115 = (float)((float)((float)(*((float *)&v235 + 1) * -2.0) * v234.f32[1])
                 + (float)(v234.f32[0] * (float)(*(float *)&v235 * -2.0)))
         + (float)(v234.f32[2] * (float)(v236 * -2.0));
    v116 = (float)((float)((float)(*(float *)&v235 * -2.0) * v114)
                 - (float)((float)((float)(v234.f32[1] * (float)(v236 * -2.0))
                                 - (float)(v234.f32[2] * (float)(*((float *)&v235 + 1) * -2.0)))
                         * v234.f32[3]))
         + (float)(v234.f32[0] * v115);
    v117 = (float)((float)((float)(*((float *)&v235 + 1) * -2.0) * v114)
                 - (float)((float)((float)(v234.f32[2] * (float)(*(float *)&v235 * -2.0))
                                 - (float)(v234.f32[0] * (float)(v236 * -2.0)))
                         * v234.f32[3]))
         + (float)(v234.f32[1] * v115);
    v118 = (float)((float)((float)(v236 * -2.0) * v114)
                 - (float)((float)((float)(v234.f32[0] * (float)(*((float *)&v235 + 1) * -2.0))
                                 - (float)(v234.f32[1] * (float)(*(float *)&v235 * -2.0)))
                         * v234.f32[3]))
         + (float)(v234.f32[2] * v115);
    v119 = (float)-v234.f32[0] - v234.f32[0];
    v120 = (float)-v234.f32[1] - v234.f32[1];
    v121 = (float)-v234.f32[2] - v234.f32[2];
    v122 = -(float)(v234.f32[1] * v120);
    v123 = -(float)(v234.f32[2] * v121);
    v124 = v234.f32[3] * v119;
    v125 = -(float)(v234.f32[2] * v120);
    v126 = v234.f32[3] * v120;
    v127 = (float)(1.0 - v122) - v123;
    v128 = (float)(v234.f32[3] * v121) - (float)(v234.f32[1] * v119);
    v129 = (float)-(float)(v234.f32[2] * v119) - (float)(v234.f32[3] * v120);
    v130 = (float)-(float)(v234.f32[1] * v119) - (float)(v234.f32[3] * v121);
    v131 = (float)(v234.f32[0] * v119) + 1.0;
    v132 = v131 - v123;
    v133 = (float)(v234.f32[3] * v119) + v125;
    v134 = v126 - (float)(v234.f32[2] * v119);
    v135 = v125 - v124;
    v136 = v131 - v122;
    *(float *)&v137 = (float)(v134 * v241) + (float)((float)(v239 * v127) + (float)(v240 * v130));
    *(float *)&v138 = (float)((float)(v127 * v242) + (float)(v130 * v243)) + (float)(v134 * v244);
    *(float *)&v139 = (float)((float)(v128 * v242) + (float)(v132 * v243)) + (float)(v135 * v244);
    *(float *)&v140 = (float)((float)(v129 * v242) + (float)(v133 * v243)) + (float)(v136 * v244);
    *(float *)&v141 = (float)((float)(v127 * v245) + (float)(v130 * v246)) + (float)(v134 * v247);
    *(float *)&v142 = (float)((float)(v128 * v245) + (float)(v132 * v246)) + (float)(v135 * v247);
    *(float *)&v143 = (float)((float)(v129 * v245) + (float)(v133 * v246)) + (float)(v136 * v247);
    v144 = (float)((float)(v127 * v248) + (float)(v130 * v249)) + (float)(v134 * v250);
    v145 = (float)((float)(v128 * v248) + (float)(v132 * v249)) + (float)(v135 * v250);
    v146.i32[3] = 0;
    v146.i64[0] = __PAIR64__((float)(v135 * v241) + (float)((float)(v239 * v128) + (float)(v240 * v132)), v137);
    v147 = (float)((float)(v129 * v248) + (float)(v133 * v249)) + (float)(v136 * v250);
    v146.f32[2] = (float)((float)(v239 * v129) + (float)(v133 * v240)) + (float)(v136 * v241);
    v148.i64[0] = __PAIR64__(v139, v138);
    v148.i64[1] = v140;
    *(float *)&v149 = v116 + v144;
    v150.i64[0] = __PAIR64__(v142, v141);
    v150.i64[1] = v143;
    v151.i32[3] = 0;
    v151.i64[0] = __PAIR64__(v117 + v145, v149);
    v151.f32[2] = v118 + v147;
    v230[0] = v146;
    v230[1] = v148;
    v230[2] = v150;
    v230[3] = v151;
    v237 = (float32x2_t)v107;
    if ((v256 + 31) < 0x20)
      goto LABEL_49;
    v223 = v110;
    v152 = 0;
    v153 = 0;
    v154 = 0;
    v155 = (v256 + 31) >> 5;
    v156 = v256;
    do
    {
      v157 = v156;
      if (v156 >= 0x20uLL)
        v157 = 32;
      if ((v113 - 32 * v153) >= 0x20)
        v158 = 32;
      else
        v158 = v113 - 32 * v153;
      if (v158)
      {
        v159 = (float)(v9[1] * v9[2]) * v9[3];
        v160 = *(_BYTE *)(v228 + 92);
        v161 = *(_QWORD *)(v228 + 40);
        v162 = *(_QWORD *)(v228 + 48);
        v163 = (unsigned int *)(v255 + v152);
        v164 = &v268;
        do
        {
          v166 = *v163++;
          v165 = v166;
          if ((v160 & 2) != 0)
          {
            v171 = (unsigned __int16 *)(v162 + 6 * v165);
            v168 = *v171;
            v169 = v171[1];
            v170 = v171[2];
          }
          else
          {
            v167 = (unsigned int *)(v162 + 12 * v165);
            v168 = *v167;
            v169 = v167[1];
            v170 = v167[2];
          }
          if (v159 >= 0.0)
            v172 = v170;
          else
            v172 = v169;
          if (v159 < 0.0)
            v169 = v170;
          v173 = v161 + 12 * v168;
          *(_QWORD *)(v164 - 5) = *(_QWORD *)v173;
          *(v164 - 3) = *(_DWORD *)(v173 + 8);
          v174 = v161 + 12 * v169;
          *((_QWORD *)v164 - 1) = *(_QWORD *)v174;
          *v164 = *(_DWORD *)(v174 + 8);
          v175 = v161 + 12 * v172;
          *(_QWORD *)(v164 + 1) = *(_QWORD *)v175;
          v164[3] = *(_DWORD *)(v175 + 8);
          if (v12)
            v176 = *(_BYTE *)(v12 + v165);
          else
            v176 = 56;
          *((_BYTE *)v164 + 16) = v176;
          v164 += 10;
          --v157;
        }
        while (v157);
      }
      v154 |= calculateMTD((uint64_t)v238, v269, (uint64_t)&v258, v230, v229, &v257, (uint64_t)v267, v158, 32 * (int)v153++, v290, &v266, &v252, &v254, &v253, &v251, &v237);
      v156 -= 32;
      v152 += 128;
    }
    while (v153 != v155);
    if ((v154 & 1) == 0)
      goto LABEL_49;
    v177 = *(_DWORD *)(v255 + 4 * v251);
    v251 = v177;
    v178 = v258;
    v178.i32[3] = 0;
    v179 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v258, 3).u64[0];
    LODWORD(v180) = vmla_f32((float32x2_t)0xBF000000BF000000, v179, v179).u32[0];
    v181 = vmulq_n_f32(v252, v180);
    v181.i32[3] = 0;
    v182 = (float32x2_t)vextq_s8((int8x16_t)v178, (int8x16_t)v178, 8uLL).u64[0];
    v183 = (float32x2_t)vextq_s8((int8x16_t)v252, (int8x16_t)v252, 8uLL).u64[0];
    v184 = (float32x2_t)vext_s8(*(int8x8_t *)v252.f32, (int8x8_t)v183, 4uLL);
    v185 = (int8x8_t)vmls_f32(vmul_f32(v182, *(float32x2_t *)v252.f32), *(float32x2_t *)v258.f32, v183);
    v186 = (float32x2_t)vext_s8(*(int8x8_t *)v258.f32, (int8x8_t)v182, 4uLL);
    v187 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v258.f32, v184), v186, *(float32x2_t *)v252.f32);
    *(int8x8_t *)v188.f32 = vext_s8(v187, v185, 4uLL);
    v188.i64[1] = v187.u32[0];
    v189 = vmlaq_laneq_f32(v181, v188, v258, 3);
    v189.i64[1] = vextq_s8((int8x16_t)v189, (int8x16_t)v189, 8uLL).u32[0];
    v190 = vmulq_f32(v178, v252);
    v190.i64[0] = vpaddq_f32(v190, v190).u64[0];
    v191 = vmulq_n_f32((float32x4_t)v254, v180);
    v191.i32[3] = 0;
    v192 = vmlaq_n_f32(v189, v178, vpadd_f32(*(float32x2_t *)v190.f32, *(float32x2_t *)v190.f32).f32[0]);
    v190.i64[0] = vextq_s8(v254, v254, 8uLL).u64[0];
    *(float32x2_t *)v188.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v258.f32, (float32x2_t)vext_s8(*(int8x8_t *)v254.i8, *(int8x8_t *)v190.f32, 4uLL)), v186, *(float32x2_t *)v254.i8);
    *(int8x8_t *)v190.f32 = vext_s8(*(int8x8_t *)v188.f32, (int8x8_t)vmls_f32(vmul_f32(v182, *(float32x2_t *)v254.i8), *(float32x2_t *)v258.f32, *(float32x2_t *)v190.f32), 4uLL);
    v190.i64[1] = v188.u32[0];
    v193 = vmlaq_laneq_f32(v191, v190, v258, 3);
    v193.i64[1] = vextq_s8((int8x16_t)v193, (int8x16_t)v193, 8uLL).u32[0];
    v194 = vaddq_f32(v192, v192);
    v195 = vmulq_f32(v178, (float32x4_t)v254);
    v195.i64[0] = vpaddq_f32(v195, v195).u64[0];
    v196 = vmlaq_n_f32(v193, v178, vpadd_f32(*(float32x2_t *)v195.f32, *(float32x2_t *)v195.f32).f32[0]);
    v196.i64[1] = vextq_s8((int8x16_t)v196, (int8x16_t)v196, 8uLL).u32[0];
    v195.i64[0] = 0x4000000040000000;
    v195.i64[1] = 0x4000000040000000;
    v197 = (int8x16_t)vmlaq_f32(v259, v195, v196);
    v178.i64[0] = v197.i64[0];
    v178.i64[1] = vextq_s8(v197, v197, 8uLL).u32[0];
    v215 = v178;
    if (v237.f32[0] > 0.0)
      break;
    v106 = 0;
    v198 = vmulq_n_f32(v194, v237.f32[0]);
    v198.i32[3] = 0;
    v108 = vsubq_f32(v224, v198);
    v109 = vsubq_f32(v226, v198);
    v104 = 1;
    LOBYTE(v10) = v213;
    if ((v223 & 1) == 0)
      goto LABEL_50;
  }
  if ((v223 & 1) != 0)
  {
    v197.i32[3] = v194.i32[0];
    v199 = v212;
    *(_DWORD *)(v212 + 48) = 0;
    *(int8x16_t *)(v212 + 24) = v197;
    *(_QWORD *)(v212 + 40) = vextq_s8((int8x16_t)v194, (int8x16_t)v194, 4uLL).u64[0];
LABEL_56:
    *(_DWORD *)(v199 + 16) = v177;
    v209 = 1;
    goto LABEL_58;
  }
  v214 = 1;
LABEL_49:
  v108 = v224;
  v104 = v214;
LABEL_50:
  v200 = vmulq_f32(v108, v108);
  v200.i64[0] = vpaddq_f32(v200, v200).u64[0];
  v201 = vpadd_f32(*(float32x2_t *)v200.f32, *(float32x2_t *)v200.f32);
  v202 = vrsqrte_f32(v201);
  v203 = 4;
  do
  {
    v202 = vmul_f32(v202, vrsqrts_f32(vmul_f32(v202, v202), v201));
    --v203;
  }
  while (v203);
  v204 = vmul_f32(v201, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v201), 0), (int8x8_t)_D8, (int8x8_t)v202));
  v205 = vrecpe_f32(v204);
  v206 = 4;
  do
  {
    v205 = vmul_f32(v205, vrecps_f32(v204, v205));
    --v206;
  }
  while (v206);
  if ((v104 & 1) != 0)
  {
    v207 = vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v204), 0), (int8x16_t)vmulq_n_f32(v108, v205.f32[0]));
    v199 = v212;
    *(float *)(v212 + 48) = -v204.f32[0];
    v208 = v215;
    v208.i32[3] = v207.i32[0];
    *(float32x4_t *)(v212 + 24) = v208;
    *(int8x8_t *)(v212 + 40) = vext_s8(*(int8x8_t *)v207.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v207, v207, 8uLL), 4uLL);
    v177 = v251;
    goto LABEL_56;
  }
  v209 = 0;
LABEL_58:
  if ((v256 & 0x8000000000000000) == 0 && (v256 & 0x7FFFFFFF00000000) != 0 && v255 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v209;
}

uint64_t physx::Gu::computeConvex_HeightFieldMTD(uint64_t a1)
{
  float32x2_t *v1;
  uint64_t v2;
  int32x2_t v3;
  uint64_t v4;
  char v5;
  char v6;
  float32x4_t *v7;
  float32x4_t *v8;
  float *v9;
  float *v10;
  float v11;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  unint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x2_t v39;
  uint64_t (**v40)();
  float32x4_t v41;
  int v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x4_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  int8x8_t v64;
  float32x4_t v65;
  int32x2_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x2_t v101;
  char v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  char v125;
  float v126;
  float32x4_t v127;
  float *v128;
  char v129;
  float v130;
  float32x2_t v131;
  int v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  float v163;
  float v164;
  float32x4_t v165;
  float32x4_t v166;
  unsigned int v167;
  float32x4_t v168;
  float32x4_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  unsigned int v173;
  uint64_t v174;
  unsigned int v175;
  _QWORD *v176;
  uint64_t v177;
  unsigned int v178;
  float32x4_t v179;
  float32x2_t v180;
  float v181;
  float32x4_t v182;
  float32x2_t v183;
  float32x2_t v184;
  float32x2_t v185;
  int8x8_t v186;
  float32x2_t v187;
  int8x8_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  int8x16_t v198;
  float32x4_t v199;
  uint64_t v200;
  float32x4_t v201;
  float32x2_t v202;
  float32x2_t v203;
  int v204;
  float32x2_t v205;
  float32x2_t v206;
  int v207;
  int8x16_t v208;
  float32x4_t v209;
  uint64_t v210;
  uint64_t v213;
  int8x8_t v214;
  char v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float32x4_t v220;
  float v221;
  uint64_t v222;
  char v223;
  float32x4_t v224;
  float32x4_t v225;
  uint64_t v226;
  uint64_t v227;
  _BOOL4 v228;
  char v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  char v233;
  uint64_t v234;
  int32x2_t v235;
  int v236;
  float *v237;
  float32x4_t v238[4];
  float32x2_t v239;
  float v240;
  float32x2_t v241;
  float v242;
  float32x2_t v243;
  float v244;
  float32x2_t v245;
  float v246;
  float32x2_t v247;
  float v248;
  float32x2_t v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float32x4_t v254;
  uint64_t v255;
  float v256;
  int32x2_t v257;
  _BYTE v258[108];
  unsigned int v259;
  float32x4_t v260;
  __int128 v261;
  int8x16_t v262;
  uint64_t v263;
  uint64_t v264;
  float32x2_t v265;
  float32x4_t v266;
  float32x4_t v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  uint64_t v272;
  char v273;
  unsigned int v274;
  int32x2_t v275;
  float v276;
  float32x2_t v277;
  float32x2_t *v278;
  _QWORD v279[160];
  float32x4_t v280[2];
  float32x4_t *v281;
  float32x4_t *v282;
  float32x4_t *v283;
  BOOL v284;
  float32x4_t *v285;
  float32x4_t v286;
  __int128 v287;
  char v288;
  float32x4_t v289;
  float32x4_t v290;
  __int128 v291;
  float32x4_t v292;
  float32x4_t v293;
  __int128 v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char v298;
  int32x2_t v299[514];

  v1 = (float32x2_t *)MEMORY[0x24BDAC7A8](a1);
  v213 = v4;
  v223 = v5;
  v233 = v6;
  v8 = v7;
  v10 = v9;
  v228 = 0;
  v299[512] = *(int32x2_t *)MEMORY[0x24BDAC8D0];
  v277 = v1[1];
  v278 = v1;
  v11 = v1[3].f32[0];
  __asm { FMOV            V8.2S, #1.0 }
  v275 = vrev64_s32((int32x2_t)vdiv_f32(_D8, v1[2]));
  v16 = 1.0;
  v276 = 1.0 / v11;
  v274 = 0;
  v226 = v2;
  v227 = *(_QWORD *)(v2 + 32);
  if (*(float *)(v2 + 4) == 1.0 && *(float *)(v2 + 8) == 1.0)
    v228 = *(float *)(v2 + 12) == 1.0;
  v17 = (float32x4_t)xmmword_2260E5F10;
  v268 = xmmword_2260E5F10;
  v269 = xmmword_2260E5F10;
  v18 = (float32x4_t)xmmword_2260E5F20;
  v270 = xmmword_2260FD430;
  v271 = xmmword_2260E5F20;
  v19 = 0.0;
  v20 = 0.0;
  v272 = 0x3F80000000000000;
  v273 = 0;
  v21 = 0.0;
  v22 = 1.0;
  v23 = 0.0;
  v24 = 0.0;
  v25 = 0.0;
  v26 = 1.0;
  if (!v228)
  {
    v235 = v3;
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)&v268, (float *)(v2 + 4), (float *)(v2 + 16));
    v18 = (float32x4_t)xmmword_2260E5F20;
    v17 = (float32x4_t)xmmword_2260E5F10;
    v3 = v235;
    v25 = *((float *)&v268 + 1);
    v26 = *(float *)&v268;
    v23 = *((float *)&v268 + 3);
    v24 = *((float *)&v268 + 2);
    v21 = *((float *)&v269 + 1);
    v22 = *(float *)&v269;
    v19 = *((float *)&v269 + 3);
    v20 = *((float *)&v269 + 2);
    v16 = *(float *)&v270;
  }
  v27 = *(float *)(v227 + 56);
  v28 = *(float *)(v227 + 60);
  v29 = (float)(v24 * v27) + (float)(v21 * v28);
  v30 = *(float *)(v227 + 64);
  v31 = v29 + (float)(v16 * v30);
  *(float *)&v32 = (float)((float)(v26 * v27) + (float)(v23 * v28)) + (float)(v20 * v30);
  *((float *)&v32 + 1) = (float)((float)(v25 * v27) + (float)(v22 * v28)) + (float)(v19 * v30);
  v224 = (float32x4_t)v32;
  v33.i64[0] = v8[1].i64[0];
  v33.i64[1] = v8[1].u32[2];
  v266 = *v8;
  v267 = v33;
  v231 = v33;
  v34 = *(float32x4_t *)(v226 + 4);
  v35 = v34;
  v35.i32[3] = 0;
  v36 = *(float32x4_t *)(v226 + 16);
  v288 = 0;
  v287 = 0u;
  v286 = 0u;
  v295 = v227 + 32;
  v297 = *(_QWORD *)(v227 + 72) + 20 * *(unsigned __int8 *)(v227 + 71);
  v298 = *(_BYTE *)(v227 + 70);
  v37.i64[0] = *(_QWORD *)(v227 + 92);
  v37.i64[1] = *(unsigned int *)(v227 + 100);
  v38 = (int32x4_t)vmulq_f32(v35, v37);
  *(float32x2_t *)v38.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v38, 2), *(float32x2_t *)v38.i8);
  v39 = vpmin_f32(*(float32x2_t *)v38.i8, *(float32x2_t *)v38.i8);
  *(float32x2_t *)&v287 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v39.f32[0]);
  *((float *)&v287 + 2) = 0.025 * v39.f32[0];
  v214 = (int8x8_t)_D8;
  if (v228)
  {
    v289 = v17;
    v290 = v18;
    v291 = xmmword_2260E5F40;
    v292 = v17;
    v293 = v18;
    v294 = xmmword_2260E5F40;
    v40 = &off_24ED91040;
  }
  else
  {
    v41 = vrecpeq_f32(v35);
    v42 = 4;
    do
    {
      v41 = vmulq_f32(v41, vrecpsq_f32(v41, v35));
      --v42;
    }
    while (v42);
    *(int32x2_t *)v43.f32 = vdup_lane_s32(*(int32x2_t *)v34.f32, 0);
    v43.i64[1] = v43.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v43, v35)), (int8x8_t)v3).u32[0] & 0xFFFFFF) != 0)
    {
      v50 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.f32, 1);
      v51 = (float32x2_t)vdup_laneq_s32((int32x4_t)v36, 2);
      v52 = (float32x2_t)vdup_laneq_s32((int32x4_t)v36, 3);
      v53 = vaddq_f32(v36, v36);
      v54 = vmul_lane_f32(v50, *(float32x2_t *)v53.f32, 1);
      v55 = vmul_laneq_f32(v51, v53, 2);
      v56 = vmul_n_f32(v50, v53.f32[0]);
      v57 = vmul_n_f32(v51, v53.f32[0]);
      v58 = vmul_n_f32(v52, v53.f32[0]);
      v59 = vmul_lane_f32(v51, *(float32x2_t *)v53.f32, 1);
      v60 = vmul_lane_f32(v52, *(float32x2_t *)v53.f32, 1);
      v61 = vmul_laneq_f32(v52, v53, 2);
      v62 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v53.f32), 0));
      v63 = (float32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v54), v55), (int8x8_t)vadd_f32(v56, v61), 4uLL);
      v64 = (int8x8_t)vsub_f32(v56, v61);
      *(float32x2_t *)v65.f32 = v63;
      v65.i64[1] = vsub_f32(v57, v60).u32[0];
      v66 = (int32x2_t)vext_s8(v64, (int8x8_t)vsub_f32(v62, v55), 4uLL);
      *(int8x8_t *)v53.f32 = vext_s8((int8x8_t)vdup_lane_s32((int32x2_t)v63, 0), (int8x8_t)v66, 4uLL);
      *(int32x2_t *)v67.f32 = v66;
      v67.i64[1] = vadd_f32(v59, v58).u32[0];
      v62.i32[0] = vsub_f32(v62, v54).u32[0];
      *(int8x8_t *)v68.f32 = vext_s8((int8x8_t)vadd_f32(v57, v60), (int8x8_t)vsub_f32(v59, v58), 4uLL);
      *(int8x8_t *)v69.f32 = vext_s8((int8x8_t)v63, (int8x8_t)vdup_lane_s32(v66, 1), 4uLL);
      v68.i64[1] = v62.u32[0];
      v53.i64[1] = vdup_lane_s32(*(int32x2_t *)v68.f32, 0).u32[0];
      v69.i64[1] = vdup_lane_s32(*(int32x2_t *)v68.f32, 1).u32[0];
      *(int8x8_t *)v70.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v65.u32[2], 0), *(int8x8_t *)&v67.u32[2], 4uLL);
      v70.i64[1] = vdup_lane_s32((int32x2_t)v62.u32[0], 0).u32[0];
      v71 = vmulq_n_f32(v53, v34.f32[0]);
      v71.i32[3] = 0;
      v72 = vmulq_lane_f32(v69, *(float32x2_t *)v34.f32, 1);
      v72.i32[3] = 0;
      v73 = vmulq_laneq_f32(v70, v34, 2);
      v73.i32[3] = 0;
      v74 = vmulq_n_f32(v71, v63.f32[0]);
      v74.i32[3] = 0;
      v75 = vmulq_lane_f32(v72, v63, 1);
      v75.i32[3] = 0;
      v76 = vmulq_laneq_f32(v73, v65, 2);
      v76.i32[3] = 0;
      v44 = vaddq_f32(v76, vaddq_f32(v74, v75));
      v77 = vmulq_n_f32(v71, v67.f32[0]);
      v77.i32[3] = 0;
      v78 = vmulq_lane_f32(v72, *(float32x2_t *)v67.f32, 1);
      v78.i32[3] = 0;
      v79 = vmulq_laneq_f32(v73, v67, 2);
      v79.i32[3] = 0;
      v45 = vaddq_f32(v79, vaddq_f32(v77, v78));
      v80 = vmulq_n_f32(v71, v68.f32[0]);
      v80.i32[3] = 0;
      v81 = vmulq_lane_f32(v72, *(float32x2_t *)v68.f32, 1);
      v81.i32[3] = 0;
      v82 = vmulq_laneq_f32(v73, v68, 2);
      v82.i32[3] = 0;
      v46 = vaddq_f32(v82, vaddq_f32(v80, v81));
      v289 = v44;
      v290 = v45;
      v83 = vmulq_n_f32(v53, v41.f32[0]);
      v83.i32[3] = 0;
      v84 = vmulq_lane_f32(v69, *(float32x2_t *)v41.f32, 1);
      v84.i32[3] = 0;
      v85 = vmulq_laneq_f32(v70, v41, 2);
      v85.i32[3] = 0;
      v86 = vmulq_n_f32(v83, v63.f32[0]);
      v86.i32[3] = 0;
      v87 = vmulq_lane_f32(v84, v63, 1);
      v87.i32[3] = 0;
      v88 = vmulq_laneq_f32(v85, v65, 2);
      v88.i32[3] = 0;
      v89 = vaddq_f32(v88, vaddq_f32(v86, v87));
      v90 = vmulq_n_f32(v83, v67.f32[0]);
      v90.i32[3] = 0;
      v91 = vmulq_lane_f32(v84, *(float32x2_t *)v67.f32, 1);
      v91.i32[3] = 0;
      v92 = vmulq_laneq_f32(v85, v67, 2);
      v92.i32[3] = 0;
      v93 = vmulq_n_f32(v83, v68.f32[0]);
      v93.i32[3] = 0;
      v94 = vmulq_lane_f32(v84, *(float32x2_t *)v68.f32, 1);
      v94.i32[3] = 0;
      v95 = vmulq_laneq_f32(v85, v68, 2);
      v95.i32[3] = 0;
      v291 = (__int128)v46;
      v292 = v89;
      v294 = (__int128)v85;
      v293 = vaddq_f32(v92, vaddq_f32(v90, v91));
      v89.i64[0] = *(_QWORD *)(v227 + 92);
      v89.i64[1] = *(unsigned int *)(v227 + 100);
      v49 = vaddq_f32(v95, vaddq_f32(v93, v94));
      v96 = (int32x4_t)vmulq_f32(v35, v89);
      *(float32x2_t *)v96.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v96, 2), *(float32x2_t *)v96.i8);
      v39 = vpmin_f32(*(float32x2_t *)v96.i8, *(float32x2_t *)v96.i8);
    }
    else
    {
      v41.i32[3] = 0;
      v44 = vmulq_f32(v35, v17);
      v45 = vmulq_f32(v35, v18);
      v46 = vmulq_f32(v35, (float32x4_t)xmmword_2260E5F40);
      v289 = v44;
      v290 = v45;
      v47 = vmulq_f32(v41, v17);
      v48 = vmulq_f32(v41, v18);
      v49 = vmulq_f32(v41, (float32x4_t)xmmword_2260E5F40);
      v291 = (__int128)v46;
      v292 = v47;
      v293 = v48;
    }
    v97 = vmulq_f32(v44, (float32x4_t)0);
    v97.i32[3] = 0;
    v98 = vmulq_f32(v45, (float32x4_t)0);
    v98.i32[3] = 0;
    v99 = vmulq_f32(v46, (float32x4_t)0);
    v99.i32[3] = 0;
    v294 = (__int128)v49;
    v286 = vaddq_f32(v99, vaddq_f32(v98, v97));
    v40 = &off_24ED91090;
  }
  v222 = (uint64_t)v40;
  _Q1 = v224;
  _Q1.f32[2] = v31;
  v225 = _Q1;
  v296 = *(_QWORD *)(v227 + 80);
  __asm { FMOV            V1.2S, #0.25 }
  v101 = vadd_f32((float32x2_t)vdup_lane_s32(v3, 0), vmul_f32(v39, *(float32x2_t *)_Q1.f32));
  v221 = v101.f32[0];
  v265 = v101;
  v264 = 0;
  v263 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)&v263, 0x80u);
  v261 = 0u;
  v262 = 0u;
  v230 = 0u;
  v260 = 0u;
  v259 = 0xFFFFFFF;
  physx::Gu::getPCMConvexData(&v286, v228, (uint64_t)v258);
  v102 = 0;
  v257 = 0;
  v254 = *v8;
  v103 = *v10;
  v104 = v10[1];
  v105 = v10[2];
  v106 = v10[3];
  v107 = v104 + v104;
  v108 = v105 + v105;
  v109 = v104 * (float)(v104 + v104);
  v110 = v105 * (float)(v105 + v105);
  v111 = (float)(v103 + v103) * v104;
  v112 = (float)(v103 + v103) * v105;
  v113 = (float)(v103 + v103) * v106;
  v114 = v107 * v105;
  v115 = v107 * v106;
  v116 = v108 * v106;
  v219 = (float)(1.0 - v109) - v110;
  v218 = v111 + v116;
  v216 = v111 - v116;
  v217 = v112 - v115;
  v117 = 1.0 - (float)(v103 * (float)(v103 + v103));
  v118 = v117 - v110;
  v119 = v114 + v113;
  v120 = v112 + v115;
  v121 = v114 - v113;
  v122 = v117 - v109;
  v123 = v10[4];
  v124 = v10[5];
  v125 = 1;
  v126 = v10[6];
  v220 = 0u;
  v127 = v231;
  v237 = v10;
  v128 = v10;
  while (1)
  {
    v129 = v125;
    LODWORD(v264) = 0;
    v255 = v127.i64[0];
    v256 = v127.f32[2];
    v232 = v127;
    v267 = v127;
    v281 = &v266;
    v282 = &v289;
    v283 = &v292;
    v284 = v228;
    v280[0].i64[0] = v222;
    v285 = &v286;
    v280[1] = v225;
    physx::Gu::computeOBBAroundConvex((float *)&v243, (float *)v226, (float *)v227, v254.f32);
    v251 = v221 + v251;
    v252 = v221 + v252;
    v253 = v221 + v253;
    v130 = (float)(fabsf(v251 * v244) + fabsf(v252 * v246)) + fabsf(v253 * v248);
    v131 = vadd_f32(vadd_f32(vabs_f32(vmul_n_f32(v243, v251)), vabs_f32(vmul_n_f32(v245, v252))), vabs_f32(vmul_n_f32(v247, v253)));
    v239 = vsub_f32(v249, v131);
    v240 = v250 - v130;
    v241 = vadd_f32(v249, v131);
    v242 = v250 + v130;
    v279[0] = &off_24ED91320;
    v279[1] = &v263;
    physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v275, v10, (float *)&v239, v223, (uint64_t)v279);
    v132 = v264;
    if (!(_DWORD)v264)
      goto LABEL_36;
    v215 = v102;
    v133 = (float)(v254.f32[3] * v254.f32[3]) + -0.5;
    v134 = (float)((float)((float)(*((float *)&v255 + 1) * -2.0) * v254.f32[1])
                 + (float)(v254.f32[0] * (float)(*(float *)&v255 * -2.0)))
         + (float)(v254.f32[2] * (float)(v256 * -2.0));
    v135 = (float)((float)((float)(*(float *)&v255 * -2.0) * v133)
                 - (float)((float)((float)(v254.f32[1] * (float)(v256 * -2.0))
                                 - (float)(v254.f32[2] * (float)(*((float *)&v255 + 1) * -2.0)))
                         * v254.f32[3]))
         + (float)(v254.f32[0] * v134);
    v136 = (float)((float)((float)(*((float *)&v255 + 1) * -2.0) * v133)
                 - (float)((float)((float)(v254.f32[2] * (float)(*(float *)&v255 * -2.0))
                                 - (float)(v254.f32[0] * (float)(v256 * -2.0)))
                         * v254.f32[3]))
         + (float)(v254.f32[1] * v134);
    v137 = (float)((float)((float)(v256 * -2.0) * v133)
                 - (float)((float)((float)(v254.f32[0] * (float)(*((float *)&v255 + 1) * -2.0))
                                 - (float)(v254.f32[1] * (float)(*(float *)&v255 * -2.0)))
                         * v254.f32[3]))
         + (float)(v254.f32[2] * v134);
    v138 = (float)-v254.f32[0] - v254.f32[0];
    v139 = (float)-v254.f32[1] - v254.f32[1];
    v140 = (float)-v254.f32[2] - v254.f32[2];
    v141 = -(float)(v254.f32[1] * v139);
    v142 = -(float)(v254.f32[2] * v140);
    v143 = -(float)(v254.f32[2] * v138);
    v144 = v254.f32[3] * v138;
    v145 = -(float)(v254.f32[2] * v139);
    v146 = v254.f32[3] * v139;
    v147 = v254.f32[3] * v140;
    v148 = (float)(1.0 - v141) - v142;
    v149 = v147 - (float)(v254.f32[1] * v138);
    v150 = v143 - v146;
    v151 = (float)-(float)(v254.f32[1] * v138) - v147;
    v152 = (float)(v254.f32[0] * v138) + 1.0;
    v153 = v152 - v142;
    v154 = v144 + v145;
    v155 = v143 + v146;
    v156 = v145 - v144;
    v157 = v152 - v141;
    *(float *)&v158 = (float)(v217 * v155) + (float)((float)(v219 * v148) + (float)(v218 * v151));
    *(float *)&v159 = (float)(v119 * v155) + (float)((float)(v216 * v148) + (float)(v118 * v151));
    *(float *)&v160 = (float)(v119 * v156) + (float)((float)(v216 * v149) + (float)(v118 * v153));
    *(float *)&v161 = (float)(v122 * v155) + (float)((float)(v120 * v148) + (float)(v121 * v151));
    *(float *)&v162 = (float)(v122 * v156) + (float)((float)(v120 * v149) + (float)(v121 * v153));
    v163 = (float)(v126 * v155) + (float)((float)(v123 * v148) + (float)(v124 * v151));
    v164 = (float)(v126 * v156) + (float)((float)(v123 * v149) + (float)(v124 * v153));
    v165.i32[3] = 0;
    v165.i64[0] = __PAIR64__((float)(v217 * v156) + (float)((float)(v219 * v149) + (float)(v218 * v153)), v158);
    v165.f32[2] = (float)(v217 * v157) + (float)((float)(v219 * v150) + (float)(v218 * v154));
    v166.i32[3] = 0;
    v166.i64[0] = __PAIR64__(v160, v159);
    *(float *)&v167 = v135 + v163;
    v166.f32[2] = (float)(v119 * v157) + (float)((float)(v216 * v150) + (float)(v118 * v154));
    v168.i32[3] = 0;
    v168.i64[0] = __PAIR64__(v162, v161);
    v168.f32[2] = (float)(v122 * v157) + (float)((float)(v120 * v150) + (float)(v121 * v154));
    v169.i32[3] = 0;
    v169.i64[0] = __PAIR64__(v136 + v164, v167);
    v169.f32[2] = v137 + (float)((float)(v126 * v157) + (float)((float)(v123 * v150) + (float)(v124 * v154)));
    v238[0] = v165;
    v238[1] = v166;
    v238[2] = v168;
    v238[3] = v169;
    v257 = vdup_n_s32(0x7F7FFFFFu);
    if ((v264 + 31) < 0x20)
      goto LABEL_35;
    v229 = v129;
    v170 = 0;
    v171 = 0;
    v172 = 0;
    v234 = (v264 + 31) >> 5;
    v173 = v264;
    v236 = v264;
    do
    {
      if (v173 >= 0x20uLL)
        v174 = 32;
      else
        v174 = v173;
      if ((v132 - 32 * v171) >= 0x20)
        v175 = 32;
      else
        v175 = v132 - 32 * v171;
      if (v175)
      {
        v176 = v279;
        v177 = v170;
        do
        {
          physx::Gu::HeightFieldUtil::getTriangle((uint64_t)&v275, v128, (uint64_t)v176, 0, 0, *(_DWORD *)(v263 + v177), 0, 0);
          *((_BYTE *)v176 + 36) = 56;
          v176 += 5;
          v177 += 4;
          --v174;
        }
        while (v174);
      }
      v172 |= calculateMTD((uint64_t)v258, v280, (uint64_t)&v266, v238, v233, &v265, (uint64_t)v279, v175, 32 * (int)v171++, v299, &v274, &v260, &v262, &v261, &v259, (float32x2_t *)&v257);
      v173 -= 32;
      v170 += 128;
      v132 = v236;
    }
    while (v171 != v234);
    if ((v172 & 1) == 0)
      goto LABEL_35;
    v178 = *(_DWORD *)(v263 + 4 * v259);
    v259 = v178;
    v179 = v266;
    v179.i32[3] = 0;
    v180 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v266, 3).u64[0];
    LODWORD(v181) = vmla_f32((float32x2_t)0xBF000000BF000000, v180, v180).u32[0];
    v182 = vmulq_n_f32(v260, v181);
    v182.i32[3] = 0;
    v183 = (float32x2_t)vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL).u64[0];
    v184 = (float32x2_t)vextq_s8((int8x16_t)v260, (int8x16_t)v260, 8uLL).u64[0];
    v185 = (float32x2_t)vext_s8(*(int8x8_t *)v260.f32, (int8x8_t)v184, 4uLL);
    v186 = (int8x8_t)vmls_f32(vmul_f32(v183, *(float32x2_t *)v260.f32), *(float32x2_t *)v266.f32, v184);
    v187 = (float32x2_t)vext_s8(*(int8x8_t *)v266.f32, (int8x8_t)v183, 4uLL);
    v188 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v266.f32, v185), v187, *(float32x2_t *)v260.f32);
    *(int8x8_t *)v189.f32 = vext_s8(v188, v186, 4uLL);
    v189.i64[1] = v188.u32[0];
    v190 = vmlaq_laneq_f32(v182, v189, v266, 3);
    v190.i64[1] = vextq_s8((int8x16_t)v190, (int8x16_t)v190, 8uLL).u32[0];
    v191 = vmulq_f32(v179, v260);
    v191.i64[0] = vpaddq_f32(v191, v191).u64[0];
    v192 = vmulq_n_f32((float32x4_t)v262, v181);
    v192.i32[3] = 0;
    v193 = vmlaq_n_f32(v190, v179, vpadd_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32).f32[0]);
    v191.i64[0] = vextq_s8(v262, v262, 8uLL).u64[0];
    *(float32x2_t *)v189.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v266.f32, (float32x2_t)vext_s8(*(int8x8_t *)v262.i8, *(int8x8_t *)v191.f32, 4uLL)), v187, *(float32x2_t *)v262.i8);
    *(int8x8_t *)v191.f32 = vext_s8(*(int8x8_t *)v189.f32, (int8x8_t)vmls_f32(vmul_f32(v183, *(float32x2_t *)v262.i8), *(float32x2_t *)v266.f32, *(float32x2_t *)v191.f32), 4uLL);
    v191.i64[1] = v189.u32[0];
    v194 = vmlaq_laneq_f32(v192, v191, v266, 3);
    v194.i64[1] = vextq_s8((int8x16_t)v194, (int8x16_t)v194, 8uLL).u32[0];
    v195 = vaddq_f32(v193, v193);
    v196 = vmulq_f32(v179, (float32x4_t)v262);
    v196.i64[0] = vpaddq_f32(v196, v196).u64[0];
    v197 = vmlaq_n_f32(v194, v179, vpadd_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32).f32[0]);
    v197.i64[1] = vextq_s8((int8x16_t)v197, (int8x16_t)v197, 8uLL).u32[0];
    v196.i64[0] = 0x4000000040000000;
    v196.i64[1] = 0x4000000040000000;
    v198 = (int8x16_t)vmlaq_f32(v267, v196, v197);
    v179.i64[0] = v198.i64[0];
    v179.i64[1] = vextq_s8(v198, v198, 8uLL).u32[0];
    v220 = v179;
    if (*(float *)v257.i32 > 0.0)
      break;
    v125 = 0;
    v199 = vmulq_n_f32(v195, *(float *)v257.i32);
    v199.i32[3] = 0;
    v230 = vsubq_f32(v230, v199);
    v127 = vsubq_f32(v232, v199);
    v102 = 1;
    v10 = v237;
    if ((v229 & 1) == 0)
      goto LABEL_36;
  }
  if ((v229 & 1) != 0)
  {
    v198.i32[3] = v195.i32[0];
    v200 = v213;
    *(_DWORD *)(v213 + 48) = 0;
    *(int8x16_t *)(v213 + 24) = v198;
    *(_QWORD *)(v213 + 40) = vextq_s8((int8x16_t)v195, (int8x16_t)v195, 4uLL).u64[0];
LABEL_42:
    *(_DWORD *)(v200 + 16) = v178;
    v210 = 1;
    goto LABEL_44;
  }
  v215 = 1;
LABEL_35:
  v102 = v215;
LABEL_36:
  v201 = vmulq_f32(v230, v230);
  v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
  v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
  v203 = vrsqrte_f32(v202);
  v204 = 4;
  do
  {
    v203 = vmul_f32(v203, vrsqrts_f32(vmul_f32(v203, v203), v202));
    --v204;
  }
  while (v204);
  v205 = vmul_f32(v202, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v202), 0), v214, (int8x8_t)v203));
  v206 = vrecpe_f32(v205);
  v207 = 4;
  do
  {
    v206 = vmul_f32(v206, vrecps_f32(v205, v206));
    --v207;
  }
  while (v207);
  if ((v102 & 1) != 0)
  {
    v208 = vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v205), 0), (int8x16_t)vmulq_n_f32(v230, v206.f32[0]));
    v200 = v213;
    *(float *)(v213 + 48) = -v205.f32[0];
    v209 = v220;
    v209.i32[3] = v208.i32[0];
    *(float32x4_t *)(v213 + 24) = v209;
    *(int8x8_t *)(v213 + 40) = vext_s8(*(int8x8_t *)v208.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v208, v208, 8uLL), 4uLL);
    v178 = v259;
    goto LABEL_42;
  }
  v210 = 0;
LABEL_44:
  if ((v264 & 0x8000000000000000) == 0 && (v264 & 0x7FFFFFFF00000000) != 0 && v263 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v210;
}

float sweepCapsule_SphereGeom(uint64_t a1, float32x2_t *a2, float a3, float a4, uint64_t a5, uint64_t a6, float32x2_t *a7, float32x2_t *a8, uint64_t a9, __int16 *a10)
{
  float v13;
  float v14;
  float result;
  __int16 v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float32x2_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float32x2_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  BOOL v53;
  float v54;
  __int16 v55;
  float32x2_t v56;
  float v57;
  float32x2_t v58;
  float v59;
  float v60;

  v13 = *(float *)(a1 + 4) + a4;
  v58 = a2[2];
  v59 = a2[3].f32[0];
  v60 = v13;
  v14 = -a8[1].f32[0];
  v56 = vneg_f32(*a8);
  v57 = v14;
  v55 = *a10;
  if (!physx::Gu::sweepSphereCapsule(&v58, a7, &v56, (float *)(a9 + 48), (float32x2_t *)(a9 + 24), (float32x2_t *)(a9 + 36), &v55, a3))return result;
  if ((*a10 & 0x200) == 0)
  {
    result = *(float *)(a9 + 48);
    if (result == 0.0)
      v16 = 2;
    else
      v16 = 3;
    *(_WORD *)(a9 + 20) = v16;
    return result;
  }
  *(_WORD *)(a9 + 20) = 3;
  result = *(float *)(a9 + 48);
  if (result != 0.0)
    return result;
  v17 = a7->f32[0];
  v18 = a7[1].f32[1];
  if (a7->f32[0] == v18)
  {
    v19 = a7->f32[1];
    v20 = a7[2].f32[0];
    if (v19 == v20)
    {
      v21 = a7[1].f32[0];
      if (v21 == a7[2].f32[1])
      {
        v22 = a7[3].f32[0];
        v23 = v58;
        v24 = v17 - v58.f32[0];
        v25 = v19 - v58.f32[1];
        v26 = v59;
        v27 = v60;
        v28 = v21 - v59;
        v29 = (float)((float)(v25 * v25) + (float)(v24 * v24)) + (float)(v28 * v28);
        v30 = sqrtf(v29);
        if (v29 >= 0.000001)
        {
          v32 = v24 * (float)(1.0 / v30);
          v31 = v25 * (float)(1.0 / v30);
          v33 = v28 * (float)(1.0 / v30);
        }
        else
        {
          v31 = 0.0;
          v32 = 1.0;
          v33 = 0.0;
        }
        *(float *)(a9 + 40) = v31;
        *(float *)(a9 + 44) = v33;
        *(float *)(a9 + 48) = v30 - (float)(v22 + v27);
        *(float *)(a9 + 24) = v23.f32[0] + (float)(v27 * v32);
        *(float *)(a9 + 28) = v23.f32[1] + (float)(v27 * v31);
        result = v26 + (float)(v27 * v33);
        *(float *)(a9 + 32) = result;
        *(float *)(a9 + 36) = v32;
        return result;
      }
    }
  }
  else
  {
    v20 = a7[2].f32[0];
    v19 = a7->f32[1];
  }
  v34 = v18 - v17;
  v35 = v20 - v19;
  v36 = a7[1].f32[0];
  v37 = a7[2].f32[1] - v36;
  v38 = v58;
  v39 = v59;
  v40 = (float)((float)((float)(v20 - v19) * (float)(v58.f32[1] - v19)) + (float)((float)(v58.f32[0] - v17) * v34))
      + (float)((float)(v59 - v36) * v37);
  v41 = 0.0;
  v42 = 0.0;
  if (v40 > 0.0)
  {
    v43 = (float)((float)(v35 * v35) + (float)(v34 * v34)) + (float)(v37 * v37);
    v42 = 1.0;
    if (v40 < v43)
      v42 = v40 / v43;
  }
  v44 = v60;
  v45 = a7[3].f32[0];
  v46 = v19 + (float)(v35 * v42);
  v47 = v36 + (float)(v37 * v42);
  v48 = (float)(v17 + (float)(v34 * v42)) - v58.f32[0];
  v49 = v46 - v58.f32[1];
  v50 = v47 - v59;
  v51 = (float)((float)(v49 * v49) + (float)(v48 * v48)) + (float)(v50 * v50);
  v52 = sqrtf(v51);
  result = 1.0;
  v53 = v51 < 0.000001;
  v54 = 0.0;
  if (!v53)
  {
    result = v48 * (float)(1.0 / v52);
    v41 = v49 * (float)(1.0 / v52);
    v54 = v50 * (float)(1.0 / v52);
  }
  *(float *)(a9 + 40) = v41;
  *(float *)(a9 + 44) = v54;
  *(float *)(a9 + 48) = v52 - (float)(v44 + v45);
  *(float *)(a9 + 24) = v38.f32[0] + (float)(v44 * result);
  *(float *)(a9 + 28) = v38.f32[1] + (float)(v44 * v41);
  *(float *)(a9 + 32) = v39 + (float)(v44 * v54);
  *(float *)(a9 + 36) = result;
  return result;
}

uint64_t sweepCapsule_PlaneGeom(float a1, float a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6, float *a7, float32x2_t *a8, uint64_t a9, _WORD *a10)
{
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  char v33;
  float v34;
  char v35;
  float *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float *v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v51;
  _DWORD v52[6];
  uint64_t v53;

  v10 = 0;
  v11 = 0;
  v53 = *MEMORY[0x24BDAC8D0];
  v12 = *a4;
  v13 = a4[1];
  v14 = v12 + v12;
  v16 = a4[2];
  v15 = a4[3];
  v17 = v15 + v15;
  v18 = (float)((float)(v15 * (float)(v15 + v15)) + -1.0) + (float)(v12 * (float)(v12 + v12));
  v19 = (float)(v14 * v13) + (float)(v16 * (float)(v15 + v15));
  v20 = v14 * v16;
  v22 = a4[4];
  v21 = a4[5];
  v23 = a4[6];
  v24 = a7[6];
  *(_DWORD *)(a9 + 16) = -1;
  v25 = v20 - (float)(v13 * v17);
  v26 = v21 * v19;
  v27 = *a7;
  v28 = a7[1];
  *(float *)v52 = *a7;
  *(float *)&v52[1] = v28;
  v29 = a7[2];
  v30 = a7[3];
  *(float *)&v52[2] = v29;
  *(float *)&v52[3] = v30;
  v31 = a7[4];
  v32 = a7[5];
  *(float *)&v52[4] = v31;
  *(float *)&v52[5] = v32;
  v33 = 1;
  v34 = 3.4028e38;
  do
  {
    v35 = v33;
    v36 = (float *)&v52[3 * v10];
    v37 = v36[2];
    if ((float)((float)((float)(v19 * v36[1]) + (float)(*v36 * v18)) + (float)(v37 * v25)) < v34)
    {
      v11 = v10;
      v34 = (float)((float)(v19 * v36[1]) + (float)(*v36 * v18)) + (float)(v37 * v25);
    }
    v10 = 1;
    v33 = 0;
  }
  while ((v35 & 1) != 0);
  v38 = (float)(v26 + (float)(v22 * v18)) + (float)(v23 * v25);
  v39 = v24 + a2;
  if ((*a10 & 0x200) != 0)
  {
    if (v34 <= (float)(v39 + v38))
    {
      *(_WORD *)(a9 + 20) = 3;
      v51 = (float)((float)((float)(v19 * v28) + (float)(v27 * v18)) + (float)(v29 * v25)) - v38;
      if (v51 >= (float)((float)((float)((float)(v19 * v31) + (float)(v30 * v18)) + (float)(v32 * v25)) - v38))
      {
        v27 = v30;
        v28 = v31;
        v29 = v32;
        v51 = (float)((float)((float)(v19 * v31) + (float)(v30 * v18)) + (float)(v32 * v25)) - v38;
      }
      *(float *)(a9 + 40) = v19;
      *(float *)(a9 + 44) = v25;
      *(float *)(a9 + 48) = v51 - v24;
      *(float *)(a9 + 24) = v27 - (float)(v18 * v51);
      *(float *)(a9 + 28) = v28 - (float)(v19 * v51);
      *(float *)(a9 + 32) = v29 - (float)(v25 * v51);
      *(float *)(a9 + 36) = v18;
      return 1;
    }
  }
  else if ((*a10 & 0x10) == 0 && v34 <= (float)(v39 + v38))
  {
    *(_WORD *)(a9 + 20) = 2;
    *(_DWORD *)(a9 + 48) = 0;
    v40 = -a8[1].f32[0];
    *(float32x2_t *)(a9 + 36) = vneg_f32(*a8);
    *(float *)(a9 + 44) = v40;
    return 1;
  }
  v41 = (float)((float)(v19 * a8->f32[1]) + (float)(a8->f32[0] * v18)) + (float)(a8[1].f32[0] * v25);
  if (v41 > -0.0000001 && v41 < 0.0000001)
    return 0;
  v42 = (float *)&v52[3 * v11];
  v43 = v42[2] - (float)(v25 * v39);
  v44 = v42[1] - (float)(v19 * v39);
  v45 = *v42 - (float)(v18 * v39);
  v46 = (float)-(float)((float)((float)((float)(v19 * v44) + (float)(v45 * v18)) + (float)(v43 * v25)) - v38) / v41;
  *(float *)(a9 + 48) = v46;
  v47 = v44 + (float)(a8->f32[1] * v46);
  v48 = v43 + (float)(a8[1].f32[0] * v46);
  *(float *)(a9 + 24) = v45 + (float)(a8->f32[0] * v46);
  *(float *)(a9 + 28) = v47;
  *(float *)(a9 + 32) = v48;
  if (v46 <= 0.0 || v46 > a1)
    return 0;
  *(float *)(a9 + 36) = v18;
  *(float *)(a9 + 40) = v19;
  *(float *)(a9 + 44) = v25;
  *(_WORD *)(a9 + 20) = 3;
  return 1;
}

uint64_t sweepCapsule_CapsuleGeom(uint64_t a1, float *a2, float a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, float32x2_t *a8, uint64_t a9, __int16 *a10)
{
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  __int16 v29;
  float v30;
  uint64_t v31;
  __int16 v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float32x2_t v37;
  float32x2_t v38;
  float v39;
  float v40;
  float v41;
  float32x2_t v42;
  float v43;
  __int16 v45;
  float32x2_t v46;
  float v47;
  float32x2_t v48;
  float v49;
  float v50;
  uint64_t v51;
  float32x2_t v52;
  float v53;
  float32x2_t v54;
  float v55;

  v12 = *a2;
  v13 = a2[1];
  v14 = v12 + v12;
  v16 = a2[2];
  v15 = a2[3];
  v17 = v15 + v15;
  v18 = (float)((float)(v15 * (float)(v15 + v15)) + -1.0) + (float)(v12 * (float)(v12 + v12));
  v19 = (float)(v14 * v13) + (float)(v16 * (float)(v15 + v15));
  v20 = (float)(v14 * v16) - (float)(v13 * v17);
  v22 = *(float *)(a1 + 4);
  v21 = *(float *)(a1 + 8);
  v23 = v18 * v21;
  v24 = v21 * v19;
  v25 = v20 * v21;
  v26 = a2[4];
  v27 = a2[5];
  v28 = a2[6];
  v46.f32[0] = v26 + v23;
  v46.f32[1] = v27 + v24;
  v47 = v25 + v28;
  v48.f32[0] = v26 - v23;
  v48.f32[1] = v27 - v24;
  v49 = v28 - v25;
  v50 = v22 + a4;
  v29 = *a10;
  v45 = 0;
  v30 = -a8[1].f32[0];
  v54 = vneg_f32(*a8);
  v55 = v30;
  v31 = physx::Gu::sweepCapsuleCapsule(a7, &v46, &v54, (float *)(a9 + 48), (float32x2_t *)(a9 + 24), (float32x2_t *)(a9 + 36), v29, &v45, a3);
  if ((_DWORD)v31)
  {
    v32 = v45;
    *(_WORD *)(a9 + 20) = v45;
    if ((v29 & 0x200) != 0 && *(float *)(a9 + 48) == 0.0)
    {
      *(_WORD *)(a9 + 20) = v32 | 1;
      v51 = 0;
      v33 = *(float *)(a7 + 20) - *(float *)(a7 + 8);
      v54 = vsub_f32(*(float32x2_t *)(a7 + 12), *(float32x2_t *)a7);
      v55 = v33;
      v52 = vsub_f32(v48, v46);
      v53 = v49 - v47;
      physx::Gu::distanceSegmentSegmentSquared((float *)a7, (float *)&v54, (float *)&v46, (float *)&v52, (float *)&v51 + 1, (float *)&v51);
      v34 = *(float *)(a7 + 24);
      v35 = v50;
      v36 = v47 + (float)(*(float *)&v51 * (float)(v49 - v47));
      v37 = vadd_f32(v46, vmul_n_f32(vsub_f32(v48, v46), *(float *)&v51));
      v38 = vsub_f32(vadd_f32(*(float32x2_t *)a7, vmul_n_f32(vsub_f32(*(float32x2_t *)(a7 + 12), *(float32x2_t *)a7), *((float *)&v51 + 1))), v37);
      v39 = (float)(*(float *)(a7 + 8)
                  + (float)(*((float *)&v51 + 1) * (float)(*(float *)(a7 + 20) - *(float *)(a7 + 8))))
          - v36;
      v40 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v38, v38).i32[1]), v38.f32[0], v38.f32[0]) + (float)(v39 * v39);
      v41 = sqrtf(v40);
      if (v40 >= 0.000001)
      {
        v42 = vmul_n_f32(v38, 1.0 / v41);
        v43 = v39 * (float)(1.0 / v41);
      }
      else
      {
        v42 = (float32x2_t)1065353216;
        v43 = 0.0;
      }
      *(float32x2_t *)(a9 + 36) = v42;
      *(float *)(a9 + 44) = v43;
      *(float *)(a9 + 48) = v41 - (float)(v34 + v35);
      *(float32x2_t *)(a9 + 24) = vadd_f32(v37, vmul_n_f32(v42, v35));
      *(float *)(a9 + 32) = v36 + (float)(v35 * v43);
    }
  }
  return v31;
}

BOOL sweepCapsule_ConvexGeom(uint64_t a1, float32x4_t *a2, uint64_t a3, int8x8_t *a4, uint64_t a5, float32x2_t *a6, uint64_t a7, __int16 *a8, double a9, float a10)
{
  _BOOL4 v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x2_t v27;
  float32x2_t v28;
  int8x8_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x8_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x4_t v52;
  int32x2_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  int v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x4_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x4_t v86;
  int32x2_t v87;
  int8x8_t v88;
  float32x4_t v89;
  int8x8_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x2_t v128;
  float32x2_t v129;
  float32x2_t v130;
  int8x8_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  __int16 v136;
  float32x4_t v137;
  _BOOL8 v138;
  float32x4_t v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x2_t v142;
  int8x8_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  uint64_t v149;
  float32x4_t v150;
  int8x8_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x2_t v157;
  float32x2_t v158;
  int v159;
  float32x2_t v160;
  float32x2_t v161;
  int v162;
  float v163;
  int8x16_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x2_t v168;
  int8x8_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x2_t v180;
  float32x4_t v181;
  float32x2_t v182;
  float32x2_t v183;
  int v184;
  float32x2_t v185;
  float32x2_t v186;
  int v187;
  int8x16_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float v191;
  float32x4_t v193;
  float32x2_t v195;
  float32x4_t v196;
  int32x2_t v197;
  float32x2_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  _QWORD v202[2];
  _QWORD v203[2];
  float32x4_t v204;
  int8x16_t v205;
  float32x2_t v206;
  float32x4_t v207;
  float32x4_t v208;
  unsigned int v209;
  float32x4_t v210;
  __int128 v211;
  char v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  float32x4_t v223;
  __int32 v224;
  __int32 v225;
  __int32 v226;
  int v227;
  char v228;
  float32x4_t v229;
  float32x4_t v230;
  int32x2_t v231;
  uint64_t v232;

  v15 = 0;
  v232 = *MEMORY[0x24BDAC8D0];
  *(float32x2_t *)v16.f32 = *a6;
  v16.i32[2] = a6[1].i32[0];
  v17 = *(_QWORD *)(a1 + 32);
  *(int8x8_t *)v18.f32 = a4[2];
  v18.i32[2] = a4[3].i32[0];
  v208 = 0uLL;
  v18.i64[1] = v18.u32[2];
  v19 = *(int8x16_t *)a2;
  v20.i64[0] = a2[1].i64[0];
  v20.i64[1] = a2[1].u32[2];
  v21 = vnegq_f32(*a2);
  v22 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 3);
  v200 = v20;
  v23 = vsubq_f32(v18, v20);
  v24 = v21;
  v24.i32[3] = 0;
  v25 = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32);
  v26 = vmulq_n_f32(v23, v25.f32[0]);
  v26.i32[3] = 0;
  v27 = (float32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
  v28 = (float32x2_t)vext_s8(*(int8x8_t *)v21.f32, (int8x8_t)v27, 4uLL);
  v29 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v21.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 4uLL)), v28, *(float32x2_t *)v23.f32);
  *(int8x8_t *)v30.f32 = vext_s8(v29, (int8x8_t)vmls_f32(vmul_f32(v27, *(float32x2_t *)v23.f32), *(float32x2_t *)v21.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL)), 4uLL);
  v30.i64[1] = v29.u32[0];
  v31 = vmlaq_laneq_f32(v26, v30, *a2, 3);
  v31.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
  v32 = vmulq_f32(v24, v23);
  v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
  v33 = vmlaq_n_f32(v31, v24, vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32).f32[0]);
  v34 = vaddq_f32(v33, v33);
  v34.i32[3] = 0;
  v35 = *(float32x4_t *)a4->i8;
  v35.i32[3] = 0;
  v36 = vmulq_f32(v35, v24);
  v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
  v37 = vmulq_laneq_f32(v35, *a2, 3);
  v35.i64[0] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
  v38 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a4, *(int8x8_t *)v35.f32, 4uLL), *(float32x2_t *)v21.f32), v28, (float32x2_t)*a4);
  *(int8x8_t *)v39.f32 = vext_s8(v38, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a4, v27), *(float32x2_t *)v21.f32, *(float32x2_t *)v35.f32), 4uLL);
  *(int8x8_t *)&v39.u32[2] = v38;
  v40 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v24, *(float32x4_t *)a4->i8, 3), v37), v39);
  *(int32x2_t *)v21.f32 = vdup_lane_s32(*(int32x2_t *)v40.f32, 1);
  *(int32x2_t *)v24.f32 = vdup_laneq_s32((int32x4_t)v40, 2);
  v41 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a4->i8, *(int8x16_t *)a4->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)), vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32));
  v42 = vaddq_f32(v40, v40);
  *(int32x2_t *)v37.f32 = vdup_laneq_s32((int32x4_t)v42, 2);
  *(int32x2_t *)v40.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v42.f32), 0);
  v43 = vmul_lane_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v42.f32, 1);
  v44 = vmul_laneq_f32(*(float32x2_t *)v24.f32, v42, 2);
  *(float32x2_t *)v21.f32 = vmul_n_f32(*(float32x2_t *)v21.f32, v42.f32[0]);
  *(float32x2_t *)v23.f32 = vmul_n_f32(*(float32x2_t *)v24.f32, v42.f32[0]);
  v45 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.f32, 0), v41, 1);
  *(float32x2_t *)v24.f32 = vmul_lane_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v42.f32, 1);
  *(float32x2_t *)v42.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.f32, 1), v41, 1);
  v46 = vmul_lane_f32(*(float32x2_t *)v37.f32, v41, 1);
  __asm { FMOV            V8.2S, #1.0 }
  *(float32x2_t *)v40.f32 = vsub_f32(_D8, *(float32x2_t *)v40.f32);
  *(int8x8_t *)v36.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v43), v44), (int8x8_t)vadd_f32(*(float32x2_t *)v21.f32, v46), 4uLL);
  *(float32x2_t *)&v36.u32[2] = vsub_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v42.f32);
  *(int8x8_t *)v52.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v21.f32, v46), (int8x8_t)vsub_f32(*(float32x2_t *)v40.f32, v44), 4uLL);
  *(float32x2_t *)&v52.u32[2] = vadd_f32(*(float32x2_t *)v24.f32, v45);
  v53 = (int32x2_t)vsub_f32(*(float32x2_t *)v40.f32, v43);
  *(int8x8_t *)v24.f32 = vext_s8((int8x8_t)vadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v42.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v24.f32, v45), 4uLL);
  *(int32x2_t *)&v24.u32[2] = v53;
  v53.i32[0] = *(_DWORD *)(a5 + 24);
  v54 = *(float32x4_t *)(a1 + 4);
  v55 = v54;
  v55.i32[3] = 0;
  v56 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, *(float *)(a3 + 8));
  v57 = vmulq_n_f32(v36, v56.f32[0]);
  v57.i32[3] = 0;
  v58 = vmulq_lane_f32(v52, *(float32x2_t *)v56.f32, 1);
  v58.i32[3] = 0;
  v59 = vmulq_laneq_f32(v24, v56, 2);
  v59.i32[3] = 0;
  v60 = *(float32x4_t *)(a1 + 16);
  v61 = vaddq_f32(v59, vaddq_f32(v57, v58));
  v227 = 4;
  v223 = v34;
  v231 = vdup_lane_s32(v53, 0);
  v229 = vaddq_f32(v61, v34);
  v230 = vsubq_f32(v34, v61);
  v224 = v53.i32[0];
  v225 = v53.i32[0];
  v226 = v53.i32[0];
  v228 = 1;
  if (v54.f32[0] == 1.0 && v54.f32[1] == 1.0)
    v15 = v54.f32[2] == 1.0;
  v16.i32[3] = 0;
  v62 = 0uLL;
  v212 = 0;
  v210 = 0u;
  v211 = 0u;
  v219 = v17 + 32;
  v221 = *(_QWORD *)(v17 + 72) + 20 * *(unsigned __int8 *)(v17 + 71);
  v222 = *(_BYTE *)(v17 + 70);
  v63.i64[0] = *(_QWORD *)(v17 + 92);
  v63.i64[1] = *(unsigned int *)(v17 + 100);
  v64 = (int32x4_t)vmulq_f32(v55, v63);
  *(float32x2_t *)v64.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v64, 2), *(float32x2_t *)v64.i8);
  *(float *)v64.i32 = vpmin_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8).f32[0];
  *(float32x2_t *)&v211 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v64.i32);
  *((float *)&v211 + 2) = 0.025 * *(float *)v64.i32;
  if (v15)
  {
    v213 = xmmword_2260E5F10;
    v214 = xmmword_2260E5F20;
    v215 = xmmword_2260E5F40;
    v216 = xmmword_2260E5F10;
    v217 = xmmword_2260E5F20;
    v218 = xmmword_2260E5F40;
  }
  else
  {
    v65 = vrecpeq_f32(v55);
    v66 = 4;
    do
    {
      v65 = vmulq_f32(v65, vrecpsq_f32(v65, v55));
      --v66;
    }
    while (v66);
    *(int32x2_t *)v67.f32 = vdup_lane_s32(*(int32x2_t *)v54.f32, 0);
    v67.i64[1] = v67.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v67, v55)), *(int8x8_t *)&a9).u32[0] & 0xFFFFFF) != 0)
    {
      v74 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v60.f32, 1);
      v75 = (float32x2_t)vdup_laneq_s32((int32x4_t)v60, 2);
      v76 = (float32x2_t)vdup_laneq_s32((int32x4_t)v60, 3);
      v77 = vaddq_f32(v60, v60);
      v78 = vmul_lane_f32(v74, *(float32x2_t *)v77.f32, 1);
      v79 = vmul_laneq_f32(v75, v77, 2);
      v80 = vmul_n_f32(v74, v77.f32[0]);
      v81 = vmul_n_f32(v75, v77.f32[0]);
      v82 = vmul_n_f32(v76, v77.f32[0]);
      v83 = vmul_lane_f32(v75, *(float32x2_t *)v77.f32, 1);
      v84 = vmul_lane_f32(v76, *(float32x2_t *)v77.f32, 1);
      v85 = vmul_laneq_f32(v76, v77, 2);
      *(float32x2_t *)v77.f32 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v77.f32), 0));
      *(int8x8_t *)v86.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v78), v79), (int8x8_t)vadd_f32(v80, v85), 4uLL);
      v86.i64[1] = vsub_f32(v81, v84).u32[0];
      v87 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v80, v85), (int8x8_t)vsub_f32(*(float32x2_t *)v77.f32, v79), 4uLL);
      v88 = (int8x8_t)vadd_f32(v81, v84);
      *(int8x8_t *)v89.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v86.f32, 0), (int8x8_t)v87, 4uLL);
      v90 = (int8x8_t)vdup_lane_s32(v87, 1);
      *(int32x2_t *)v91.f32 = v87;
      v91.i64[1] = vadd_f32(v83, v82).u32[0];
      *(int8x8_t *)v92.f32 = vext_s8(v88, (int8x8_t)vsub_f32(v83, v82), 4uLL);
      *(int8x8_t *)v93.f32 = vext_s8(*(int8x8_t *)v86.f32, v90, 4uLL);
      v92.i64[1] = vsub_f32(*(float32x2_t *)v77.f32, v78).u32[0];
      v89.i64[1] = vdup_lane_s32(*(int32x2_t *)v92.f32, 0).u32[0];
      v93.i64[1] = vdup_lane_s32(*(int32x2_t *)v92.f32, 1).u32[0];
      *(int8x8_t *)v94.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v86.u32[2], 0), (int8x8_t)v91.u32[2], 4uLL);
      v94.i64[1] = vdup_lane_s32(*(int32x2_t *)&v92.u32[2], 0).u32[0];
      v95 = vmulq_n_f32(v89, v54.f32[0]);
      v95.i32[3] = 0;
      v96 = vmulq_lane_f32(v93, *(float32x2_t *)v54.f32, 1);
      v96.i32[3] = 0;
      v97 = vmulq_laneq_f32(v94, v54, 2);
      v97.i32[3] = 0;
      v98 = vmulq_n_f32(v95, v86.f32[0]);
      v98.i32[3] = 0;
      v99 = vmulq_lane_f32(v96, *(float32x2_t *)v86.f32, 1);
      v99.i32[3] = 0;
      v100 = vmulq_laneq_f32(v97, v86, 2);
      v100.i32[3] = 0;
      v68 = vaddq_f32(v100, vaddq_f32(v98, v99));
      v101 = vmulq_n_f32(v95, v91.f32[0]);
      v101.i32[3] = 0;
      v102 = vmulq_lane_f32(v96, *(float32x2_t *)v91.f32, 1);
      v102.i32[3] = 0;
      v103 = vmulq_laneq_f32(v97, v91, 2);
      v103.i32[3] = 0;
      v104 = vaddq_f32(v101, v102);
      v105 = vmulq_n_f32(v95, v92.f32[0]);
      v105.i32[3] = 0;
      v106 = vmulq_lane_f32(v96, *(float32x2_t *)v92.f32, 1);
      v106.i32[3] = 0;
      v107 = vmulq_laneq_f32(v97, v92, 2);
      v107.i32[3] = 0;
      v69 = vaddq_f32(v103, v104);
      v70 = vaddq_f32(v107, vaddq_f32(v105, v106));
      v213 = (__int128)v68;
      v214 = (__int128)v69;
      v215 = (__int128)v70;
      v108 = vmulq_n_f32(v89, v65.f32[0]);
      v108.i32[3] = 0;
      v109 = vmulq_lane_f32(v93, *(float32x2_t *)v65.f32, 1);
      v109.i32[3] = 0;
      v110 = vmulq_laneq_f32(v94, v65, 2);
      v110.i32[3] = 0;
      v111 = vmulq_n_f32(v108, v86.f32[0]);
      v111.i32[3] = 0;
      v112 = vmulq_lane_f32(v109, *(float32x2_t *)v86.f32, 1);
      v112.i32[3] = 0;
      v113 = vmulq_laneq_f32(v110, v86, 2);
      v113.i32[3] = 0;
      v71 = vaddq_f32(v113, vaddq_f32(v111, v112));
      v114 = vmulq_n_f32(v108, v91.f32[0]);
      v114.i32[3] = 0;
      v115 = vmulq_lane_f32(v109, *(float32x2_t *)v91.f32, 1);
      v115.i32[3] = 0;
      v116 = vmulq_laneq_f32(v110, v91, 2);
      v116.i32[3] = 0;
      v117 = vmulq_n_f32(v108, v92.f32[0]);
      v117.i32[3] = 0;
      v118 = vmulq_lane_f32(v109, *(float32x2_t *)v92.f32, 1);
      v118.i32[3] = 0;
      v72 = vaddq_f32(v116, vaddq_f32(v114, v115));
      v119 = vmulq_laneq_f32(v110, v92, 2);
      v119.i32[3] = 0;
      v73 = vaddq_f32(v119, vaddq_f32(v117, v118));
    }
    else
    {
      v65.i32[3] = 0;
      v68 = vmulq_f32(v55, (float32x4_t)xmmword_2260E5F10);
      v69 = vmulq_f32(v55, (float32x4_t)xmmword_2260E5F20);
      v70 = vmulq_f32(v55, (float32x4_t)xmmword_2260E5F40);
      v213 = (__int128)v68;
      v214 = (__int128)v69;
      v215 = (__int128)v70;
      v71 = vmulq_f32(v65, (float32x4_t)xmmword_2260E5F10);
      v72 = vmulq_f32(v65, (float32x4_t)xmmword_2260E5F20);
      v73 = vmulq_f32(v65, (float32x4_t)xmmword_2260E5F40);
    }
    v217 = (__int128)v72;
    v218 = (__int128)v73;
    v120 = vmulq_f32(v68, (float32x4_t)0);
    v120.i32[3] = 0;
    v121 = vmulq_f32(v69, (float32x4_t)0);
    v121.i32[3] = 0;
    v122 = vmulq_f32(v70, (float32x4_t)0);
    v122.i32[3] = 0;
    v62 = vaddq_f32(v122, vaddq_f32(v121, v120));
    v216 = (__int128)v71;
    v210 = v62;
  }
  v193 = v16;
  v123 = vmulq_n_f32(v16, *(float *)&a9);
  v123.i32[3] = 0;
  v124 = vnegq_f32(v123);
  v125 = v124;
  v125.i32[3] = 0;
  v126 = (float32x4_t)v19;
  v126.i32[3] = 0;
  v127 = vmulq_n_f32(v125, v25.f32[0]);
  v127.i32[3] = 0;
  v220 = *(_QWORD *)(v17 + 80);
  v128 = (float32x2_t)vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL).u64[0];
  v129 = (float32x2_t)vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u64[0];
  v130 = (float32x2_t)vext_s8(*(int8x8_t *)v19.i8, (int8x8_t)v128, 4uLL);
  v195 = v128;
  v196 = v126;
  v198 = *(float32x2_t *)v19.i8;
  v199 = v22;
  v131 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v19.i8, (float32x2_t)vext_s8(*(int8x8_t *)v124.f32, (int8x8_t)v129, 4uLL)), v130, *(float32x2_t *)v124.f32);
  *(int8x8_t *)v124.f32 = vext_s8(v131, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v124.f32, v128), *(float32x2_t *)v19.i8, v129), 4uLL);
  v124.i64[1] = v131.u32[0];
  v132 = vmlsq_f32(v127, v22, v124);
  v132.i64[1] = vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u32[0];
  v133 = vmulq_f32(v125, v126);
  v133.i64[0] = vpaddq_f32(v133, v133).u64[0];
  v134 = vmlaq_n_f32(v132, v126, vpadd_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v133.f32).f32[0]);
  v135 = vaddq_f32(v134, v134);
  v135.i32[3] = 0;
  v207 = v135;
  v136 = *a8;
  v206 = 0;
  v204 = 0u;
  v205 = 0u;
  v203[0] = off_24ED91108;
  v203[1] = &v223;
  v202[0] = off_24ED91168;
  v202[1] = &v210;
  v137 = vsubq_f32(v34, v62);
  v201 = v137;
  v137.f32[0] = *(float *)v53.i32 + a10;
  v197 = (int32x2_t)v25;
  v138 = physx::Gu::gjkRaycastPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)v203, (uint64_t)v202, &v201, &v208, &v207, &v206, &v204, &v205, *(int32x2_t *)v137.f32, (v136 & 0x200) != 0);
  if (v138)
  {
    v139 = (float32x4_t)vdupq_lane_s32(v197, 0);
    *(_WORD *)(a7 + 20) = 2;
    v140 = v206;
    if (v206.f32[0] <= 0.0)
    {
      if ((v136 & 0x200) != 0)
      {
        v166 = (float32x4_t)v205;
        v167 = vmulq_n_f32((float32x4_t)v205, *(float *)v197.i32);
        v167.i32[3] = 0;
        v168 = (float32x2_t)vextq_s8((int8x16_t)v166, (int8x16_t)v166, 8uLL).u64[0];
        v169 = (int8x8_t)vmls_f32(vmul_f32(v198, (float32x2_t)vext_s8(*(int8x8_t *)v205.i8, (int8x8_t)v168, 4uLL)), v130, *(float32x2_t *)v205.i8);
        *(int8x8_t *)v170.f32 = vext_s8(v169, (int8x8_t)vmls_f32(vmul_f32(v195, *(float32x2_t *)v205.i8), v198, v168), 4uLL);
        v170.i64[1] = v169.u32[0];
        v171 = vmlaq_f32(v167, v199, v170);
        *(_WORD *)(a7 + 20) = 3;
        v171.i64[1] = vextq_s8((int8x16_t)v171, (int8x16_t)v171, 8uLL).u32[0];
        v172 = vmulq_f32(v196, v166);
        v172.i64[0] = vpaddq_f32(v172, v172).u64[0];
        v173 = vmlaq_n_f32(v171, v196, vpadd_f32(*(float32x2_t *)v172.f32, *(float32x2_t *)v172.f32).f32[0]);
        v173.i64[1] = vextq_s8((int8x16_t)v173, (int8x16_t)v173, 8uLL).u32[0];
        v172.i64[0] = 0x4000000040000000;
        v172.i64[1] = 0x4000000040000000;
        v174 = vmlaq_f32(v200, v172, v173);
        v175 = vmulq_f32(v139, v204);
        v175.i32[3] = 0;
        v173.i64[0] = vextq_s8((int8x16_t)v204, (int8x16_t)v204, 8uLL).u64[0];
        *(float32x2_t *)v170.f32 = vmls_f32(vmul_f32(v198, (float32x2_t)vext_s8(*(int8x8_t *)v204.f32, *(int8x8_t *)v173.f32, 4uLL)), v130, *(float32x2_t *)v204.f32);
        *(int8x8_t *)v173.f32 = vext_s8(*(int8x8_t *)v170.f32, (int8x8_t)vmls_f32(vmul_f32(v195, *(float32x2_t *)v204.f32), v198, *(float32x2_t *)v173.f32), 4uLL);
        v173.i64[1] = v170.u32[0];
        v176 = vmlaq_f32(v175, v199, v173);
        v176.i64[1] = vextq_s8((int8x16_t)v176, (int8x16_t)v176, 8uLL).u32[0];
        v177 = vmulq_f32(v196, v204);
        v180 = (float32x2_t)vpaddq_f32(v177, v177).u64[0];
        v178 = vmlaq_n_f32(v176, v196, vpadd_f32(v180, v180).f32[0]);
        v179 = vaddq_f32(v178, v178);
        v179.i32[3] = 0;
        v180.i32[0] = vextq_s8((int8x16_t)v174, (int8x16_t)v174, 8uLL).u32[0];
        v181 = vmulq_f32(v179, v179);
        v181.i64[0] = vpaddq_f32(v181, v181).u64[0];
        v182 = vpadd_f32(*(float32x2_t *)v181.f32, *(float32x2_t *)v181.f32);
        v183 = vrsqrte_f32(v182);
        v184 = 4;
        do
        {
          v183 = vmul_f32(v183, vrsqrts_f32(vmul_f32(v183, v183), v182));
          --v184;
        }
        while (v184);
        v180.i32[1] = 0;
        v185 = vmul_f32(v182, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v182), 0), (int8x8_t)_D8, (int8x8_t)v183));
        v186 = vrecpe_f32(v185);
        v187 = 4;
        do
        {
          v186 = vmul_f32(v186, vrecps_f32(v185, v186));
          --v187;
        }
        while (v187);
        *(float32x2_t *)&v174.u32[2] = v180;
        v188 = (int8x16_t)vmulq_n_f32(v179, v186.f32[0]);
        v189 = (float32x4_t)v188;
        v189.i32[3] = 0;
        v190 = vmlsq_lane_f32(v174, v189, v140, 0);
        *(_QWORD *)(a7 + 40) = vextq_s8(v188, v188, 4uLL).u64[0];
        v190.i32[3] = v188.i32[0];
        *(float32x4_t *)(a7 + 24) = v190;
        *(_DWORD *)(a7 + 48) = v140.i32[0];
      }
      else
      {
        *(_DWORD *)(a7 + 48) = 0;
        v191 = -a6[1].f32[0];
        *(float32x2_t *)(a7 + 36) = vneg_f32(*a6);
        *(float *)(a7 + 44) = v191;
      }
      *(_DWORD *)(a7 + 16) = -1;
    }
    else
    {
      v141 = vmulq_n_f32((float32x4_t)v205, *(float *)v197.i32);
      v141.i32[3] = 0;
      v142 = (float32x2_t)vextq_s8(v205, v205, 8uLL).u64[0];
      v143 = (int8x8_t)vmls_f32(vmul_f32(v198, (float32x2_t)vext_s8(*(int8x8_t *)v205.i8, (int8x8_t)v142, 4uLL)), v130, *(float32x2_t *)v205.i8);
      *(int8x8_t *)v144.f32 = vext_s8(v143, (int8x8_t)vmls_f32(vmul_f32(v195, *(float32x2_t *)v205.i8), v198, v142), 4uLL);
      v144.i64[1] = v143.u32[0];
      v145 = vmlaq_f32(v141, v199, v144);
      v145.i64[1] = vextq_s8((int8x16_t)v145, (int8x16_t)v145, 8uLL).u32[0];
      v146 = vmulq_f32(v196, (float32x4_t)v205);
      v146.i64[0] = vpaddq_f32(v146, v146).u64[0];
      v147 = vmlaq_n_f32(v145, v196, vpadd_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32).f32[0]);
      v147.i64[1] = vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL).u32[0];
      v146.i64[0] = 0x4000000040000000;
      v146.i64[1] = 0x4000000040000000;
      v148 = vmlaq_f32(v200, v146, v147);
      v149 = vextq_s8((int8x16_t)v148, (int8x16_t)v148, 8uLL).u32[0];
      v150 = vmulq_f32(v139, v204);
      v150.i32[3] = 0;
      v147.i64[0] = vextq_s8((int8x16_t)v204, (int8x16_t)v204, 8uLL).u64[0];
      v151 = (int8x8_t)vmls_f32(vmul_f32(v198, (float32x2_t)vext_s8(*(int8x8_t *)v204.f32, *(int8x8_t *)v147.f32, 4uLL)), v130, *(float32x2_t *)v204.f32);
      *(int8x8_t *)v147.f32 = vext_s8(v151, (int8x8_t)vmls_f32(vmul_f32(v195, *(float32x2_t *)v204.f32), v198, *(float32x2_t *)v147.f32), 4uLL);
      v147.i64[1] = v151.u32[0];
      v152 = vmlaq_f32(v150, v199, v147);
      v152.i64[1] = vextq_s8((int8x16_t)v152, (int8x16_t)v152, 8uLL).u32[0];
      v153 = vmulq_f32(v196, v204);
      v153.i64[0] = vpaddq_f32(v153, v153).u64[0];
      v154 = vmlaq_n_f32(v152, v196, vpadd_f32(*(float32x2_t *)v153.f32, *(float32x2_t *)v153.f32).f32[0]);
      v155 = vaddq_f32(v154, v154);
      v155.i32[3] = 0;
      v156 = vmulq_f32(v155, v155);
      v156.i64[0] = vpaddq_f32(v156, v156).u64[0];
      v157 = vpadd_f32(*(float32x2_t *)v156.f32, *(float32x2_t *)v156.f32);
      v158 = vrsqrte_f32(v157);
      *(_WORD *)(a7 + 20) = 3;
      v159 = 4;
      do
      {
        v158 = vmul_f32(v158, vrsqrts_f32(vmul_f32(v158, v158), v157));
        --v159;
      }
      while (v159);
      v160 = vmul_f32(v157, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v157), 0), (int8x8_t)_D8, (int8x8_t)v158));
      v161 = vrecpe_f32(v160);
      v162 = 4;
      do
      {
        v161 = vmul_f32(v161, vrecps_f32(v160, v161));
        --v162;
      }
      while (v162);
      v148.i64[1] = v149;
      LODWORD(v163) = vmul_f32(*(float32x2_t *)&a9, v140).u32[0];
      v164 = (int8x16_t)vmulq_n_f32(v155, v161.f32[0]);
      v165 = vmlaq_n_f32(v148, v193, v163);
      v165.i32[3] = v164.i32[0];
      *(float32x4_t *)(a7 + 24) = v165;
      *(_QWORD *)(a7 + 40) = vextq_s8(v164, v164, 4uLL).u64[0];
      *(float *)(a7 + 48) = v163;
      if ((*((_BYTE *)a8 + 1) & 4) != 0)
      {
        v209 = *(unsigned __int8 *)(v17 + 71);
        *(_DWORD *)(a7 + 16) = computeSweepConvexPlane(a1, v17 + 32, &v209, a2->f32, (float *)(a7 + 24), (float *)a6);
        *(_WORD *)(a7 + 20) |= 0x400u;
      }
    }
  }
  return v138;
}

BOOL physx::Gu::gjkRaycastPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x2_t *a6, float32x4_t *a7, int8x16_t *a8, int32x2_t a9, char a10)
{
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  int v20;
  unsigned __int32 v21;
  float32x2_t v27;
  float32x2_t v28;
  int v29;
  float32x2_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  const float *v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x2_t v49;
  int32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  int8x16_t v54;
  int32x4_t v55;
  unsigned __int32 v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x2_t v59;
  int v60;
  float32x2_t v61;
  float32x2_t v62;
  int v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t *v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x2_t v79;
  float32x2_t v80;
  int v81;
  float32x2_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x2_t v86;
  uint64_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x2_t v93;
  float32x2_t v94;
  int v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int8x8_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  int8x8_t v106;
  float32x4_t v107;
  float32x2_t v108;
  float32x2_t v109;
  int8x8_t v110;
  float32x4_t v111;
  int8x8_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x2_t v115;
  float32x4_t v116;
  float32x2_t v117;
  float32x4_t v118;
  float32x2_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x2_t v123;
  float32x4_t v124;
  float32x2_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x2_t v128;
  float32x4_t v129;
  float32x2_t v130;
  float32x4_t v131;
  float32x2_t v132;
  float32x4_t v133;
  float32x2_t v134;
  __int32 v135;
  uint64_t v136;
  uint64_t v137;
  float32x4_t v138;
  float32x2_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x2_t v142;
  float32x2_t v143;
  int v144;
  float32x4_t v145;
  float32x2_t v146;
  int v147;
  float32x2_t v148;
  float32x2_t v149;
  float32x2_t v150;
  int v151;
  unsigned int v152;
  float32x2_t v153;
  float32x2_t v154;
  float32x2_t v155;
  int v156;
  int8x16_t v157;
  float32x2_t v158;
  float32x2_t v159;
  int v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x2_t v167;
  int8x8_t v168;
  int8x16_t v169;
  uint64_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x2_t v173;
  int v174;
  float32x2_t v175;
  int v176;
  int8x16_t v177;
  int8x16_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x2_t v182;
  int8x16_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x2_t v189;
  int v190;
  float32x4_t v191;
  float32x4_t v192;
  uint64_t v193;
  uint64_t v194;
  float32x2_t v195;
  float32x4_t v198;
  float32x4_t v199;
  float32x2_t v200;
  float32x2_t v201;
  int v202;
  float32x2_t v203;
  float32x2_t v204;
  int v205;
  int32x4_t v206;
  float32x2_t v208;
  int8x16_t v212;
  float32x2_t v213;
  float32x2_t v214;
  float32x4_t v215;
  int8x16_t v216;
  float32x4_t v217;
  int8x16_t v218;
  float32x4_t v219;
  float32x4_t v220;
  int8x16_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  unsigned int v227;
  float32x2_t v228;
  float32x2_t v229;
  int8x16_t v230;
  float32x4_t v231;
  float32x4_t v232[2];
  float32x2_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  __int128 v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  __int128 v241;
  uint64_t v242;

  v242 = *MEMORY[0x24BDAC8D0];
  v14 = *a3;
  v216 = (int8x16_t)vmlaq_f32(*a4, (float32x4_t)0, *a5);
  v227 = 1;
  v15 = vmulq_f32(v14, v14);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  v16 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32), (float32x2_t)0x3400000034000000), 0), (int8x16_t)v14, (int8x16_t)xmmword_2260E5F10);
  v17 = vmulq_f32(v16, v16);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  v18 = vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32);
  v19 = vrsqrte_f32(v18);
  v20 = 4;
  do
  {
    v19 = vmul_f32(v19, vrsqrts_f32(vmul_f32(v19, v19), v18));
    --v20;
  }
  while (v20);
  v21 = vextq_s8(v216, v216, 8uLL).u32[0];
  __asm { FMOV            V8.2S, #1.0 }
  v27 = vmul_f32(v18, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v18), 0), (int8x8_t)_D8, (int8x8_t)v19));
  v28 = vrecpe_f32(v27);
  v29 = 4;
  do
  {
    v28 = vmul_f32(v28, vrecps_f32(v27, v28));
    --v29;
  }
  while (v29);
  v30 = (float32x2_t)vdup_lane_s32(a9, 0);
  v31.i64[0] = v216.i64[0];
  v31.i64[1] = v21;
  v217 = v31;
  v32 = vmulq_n_f32(v16, v28.f32[0]);
  v32.i32[3] = 0;
  v226 = v32;
  v33 = vnegq_f32(v32);
  v33.i32[3] = 0;
  v34 = *(float32x4_t **)(a1 + 8);
  v35 = v34[3];
  v36 = v34[4];
  v37 = vmulq_f32(v33, v35);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  v38 = vmulq_f32(v33, v36);
  v38.i64[0] = vpaddq_f32(v38, v38).u64[0];
  v222 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32), vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32)), 0), (int8x16_t)v35, (int8x16_t)v36);
  *(double *)v39.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v226);
  v40 = v39;
  v41 = vsubq_f32(v222, v39);
  v230 = (int8x16_t)v41;
  v231 = 0u;
  memset(v232, 0, sizeof(v232));
  v238 = v222;
  v239 = 0u;
  v240 = 0u;
  v241 = 0u;
  v42 = vnegq_f32(v41);
  v42.i32[3] = 0;
  v234 = v40;
  v235 = 0u;
  v236 = 0u;
  v237 = 0u;
  v43 = (const float *)(*(_QWORD *)(a2 + 8) + 24);
  *(float32x2_t *)v40.f32 = vld1_dup_f32(v43);
  *(float32x2_t *)v40.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v40.f32, 0), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  v44 = vadd_f32(v30, *(float32x2_t *)v40.f32);
  v45 = vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
  v46 = vmul_f32(v44, v44);
  v47 = vmulq_f32(v42, v42);
  v48 = vpaddq_f32(v47, v47);
  v49 = vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32);
  v208 = v45;
  *(int32x2_t *)v48.f32 = vcgt_f32(v49, v45);
  v50 = vdupq_lane_s32(*(int32x2_t *)v48.f32, 0);
  v48.i32[0] = -1;
  v206 = (int32x4_t)v48;
  v51 = v41;
  v52.i64[0] = -1;
  v52.i64[1] = -1;
  v53 = v42;
  v212 = (int8x16_t)v42;
  v213 = 0;
  while (1)
  {
    v54 = (int8x16_t)v41;
    v55.i64[0] = -1;
    v55.i64[1] = -1;
    *(int16x4_t *)v55.i8 = vmovn_s32(vceqq_s32(v50, v55));
    v56 = vuzp1_s8(*(int8x8_t *)v55.i8, *(int8x8_t *)v55.i8).u32[0];
    if (v56 != -1)
      break;
    v57 = vmulq_f32(v53, v53);
    v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
    v58 = vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32);
    v59 = vrsqrte_f32(v58);
    v60 = 4;
    do
    {
      v59 = vmul_f32(v59, vrsqrts_f32(vmul_f32(v59, v59), v58));
      --v60;
    }
    while (v60);
    v218 = v54;
    v61 = vmul_f32(v58, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v58), 0), (int8x8_t)_D8, (int8x8_t)v59));
    v62 = vrecpe_f32(v61);
    v63 = 4;
    do
    {
      v62 = vmul_f32(v62, vrecps_f32(v61, v62));
      --v63;
    }
    while (v63);
    v215 = v53;
    v64 = vmulq_n_f32(v53, v62.f32[0]);
    v64.i32[3] = 0;
    v219 = v64;
    v65 = vnegq_f32(v64);
    v65.i32[3] = 0;
    v225 = v65;
    v66 = *(float32x4_t **)(a1 + 8);
    v67 = v66[3];
    v68 = v66[4];
    v69 = vmulq_f32(v64, v67);
    v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
    v70 = vmulq_f32(v64, v68);
    v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
    v223 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32)), 0), (int8x16_t)v67, (int8x16_t)v68);
    *(double *)v71.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v225);
    v72 = v223;
    v73 = vaddq_f32(v217, v71);
    v41 = vsubq_f32(v223, v73);
    v74 = vnegq_f32(v41);
    v74.i32[3] = 0;
    v75 = vmulq_f32(v219, v74);
    v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
    *(float32x2_t *)v76.f32 = vsub_f32(vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32), v44);
    if (v76.f32[0] > 0.0)
    {
      v77 = *a5;
      v78 = vmulq_f32(v219, *a5);
      v78.i64[0] = vpaddq_f32(v78, v78).u64[0];
      v79 = vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32);
      if (v79.f32[0] >= 0.0)
        goto LABEL_71;
      v80 = vrecpe_f32(v79);
      v81 = 4;
      do
      {
        v80 = vmul_f32(v80, vrecps_f32(v79, v80));
        --v81;
      }
      while (v81);
      v82 = vsub_f32(v213, vmul_f32(*(float32x2_t *)v76.f32, v80));
      *(int32x2_t *)v76.f32 = vcgt_f32(v82, v213);
      if ((v76.i8[0] & 1) != 0)
      {
        if (v82.f32[0] > 1.0)
        {
LABEL_71:
          v182 = 0;
          v183 = 0uLL;
          v179 = 0uLL;
          goto LABEL_77;
        }
        v83 = vmlaq_n_f32(*a4, v77, v82.f32[0]);
        v83.i64[1] = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).u32[0];
        v220 = v83;
        v84 = vsubq_f32(v83, v217);
        v234 = vaddq_f32(v234, v84);
        v235 = vaddq_f32(v235, v84);
        v236 = vaddq_f32(v236, v84);
        v230 = (int8x16_t)vsubq_f32(v238, v234);
        v231 = vsubq_f32(v239, v235);
        v232[0] = vsubq_f32(v240, v236);
        v214 = v82;
        *(double *)v85.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v225);
        v72 = v223;
        v73 = vaddq_f32(v220, v85);
        v41 = vsubq_f32(v223, v73);
        v49 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        v212 = (int8x16_t)v215;
        v217 = v220;
        v86 = v214;
      }
      else
      {
        v86 = v82;
      }
      v213 = v86;
    }
    v87 = v227;
    *(&v238 + v227) = v72;
    *(&v234 + v87) = v73;
    v227 = v87 + 1;
    *(&v230 + v87) = (int8x16_t)v41;
    if ((_DWORD)v87 == 3)
    {
      physx::Gu::closestPtPointTetrahedron((float32x4_t *)&v230, &v238, &v234, (int *)&v227);
LABEL_28:
      v51 = (float32x4_t)v218;
      goto LABEL_62;
    }
    if ((_DWORD)v87 != 2)
    {
      v51 = (float32x4_t)v218;
      if ((_DWORD)v87 != 1)
        goto LABEL_62;
      v41 = (float32x4_t)v230;
      v88 = vsubq_f32(v231, (float32x4_t)v230);
      v89 = vmulq_f32(v88, v88);
      v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
      v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v90), 0), *(int8x8_t *)v230.i8).u32[0] != -1)
      {
        v91 = vnegq_f32((float32x4_t)v230);
        v91.i32[3] = 0;
        v92 = vmulq_f32(v91, v88);
        v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
        v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
        v94 = vrecpe_f32(v90);
        v95 = 4;
        do
        {
          v94 = vmul_f32(v94, vrecps_f32(v90, v94));
          --v95;
        }
        while (v95);
        v41 = vmlaq_n_f32((float32x4_t)v230, v88, vmax_f32(vmin_f32(vmul_f32(v93, v94), _D8), 0).f32[0]);
LABEL_43:
        v41.i64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
        goto LABEL_62;
      }
LABEL_44:
      v227 = 1;
      goto LABEL_62;
    }
    v41 = (float32x4_t)v230;
    v96 = vsubq_f32(v231, (float32x4_t)v230);
    v97 = vsubq_f32(v232[0], (float32x4_t)v230);
    v99 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v96.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v97, (int8x16_t)v97, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v96, (int8x16_t)v96, 4uLL), *(float32x2_t *)v97.f32);
    *(int8x8_t *)v98.f32 = vext_s8(v99, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL), *(float32x2_t *)v97.f32), *(float32x2_t *)v96.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL)), 4uLL);
    v99.i32[1] = 0;
    v227 = 3;
    v100 = vpadd_f32(vmul_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32), vmul_f32((float32x2_t)v99.u32[0], (float32x2_t)v99.u32[0]));
    v101 = vpadd_f32(v100, v100);
    if (v101.f32[0] <= 0.00000011921)
    {
      v227 = 2;
      v138 = vmulq_f32(v96, v96);
      v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
      v139 = vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32);
      v51 = (float32x4_t)v218;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v139), 0), *(int8x8_t *)v230.i8).u32[0] != -1)
      {
        v140 = vnegq_f32((float32x4_t)v230);
        v140.i32[3] = 0;
        v141 = vmulq_f32(v140, v96);
        v141.i64[0] = vpaddq_f32(v141, v141).u64[0];
        v142 = vpadd_f32(*(float32x2_t *)v141.f32, *(float32x2_t *)v141.f32);
        v143 = vrecpe_f32(v139);
        v144 = 4;
        do
        {
          v143 = vmul_f32(v143, vrecps_f32(v139, v143));
          --v144;
        }
        while (v144);
        v41 = vmlaq_n_f32((float32x4_t)v230, v96, vmax_f32(vmin_f32(vmul_f32(v142, v143), _D8), 0).f32[0]);
        goto LABEL_43;
      }
      goto LABEL_44;
    }
    if (v101.f32[0] == 0.0)
    {
      v41 = 0uLL;
      goto LABEL_28;
    }
    *(int8x8_t *)&v98.u32[2] = v99;
    v102 = (float32x2_t)vextq_s8((int8x16_t)v231, (int8x16_t)v231, 8uLL).u64[0];
    v103 = (float32x2_t)vextq_s8((int8x16_t)v232[0], (int8x16_t)v232[0], 8uLL).u64[0];
    v104 = (float32x2_t)vextq_s8((int8x16_t)v232[0], (int8x16_t)v232[0], 4uLL).u64[0];
    v105 = (float32x2_t)vextq_s8((int8x16_t)v231, (int8x16_t)v231, 4uLL).u64[0];
    v106 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v231.f32, v104), v105, *(float32x2_t *)v232[0].f32);
    *(int8x8_t *)v107.f32 = vext_s8(v106, (int8x8_t)vmls_f32(vmul_f32(v102, *(float32x2_t *)v232[0].f32), *(float32x2_t *)v231.f32, v103), 4uLL);
    v107.i64[1] = v106.u32[0];
    v108 = (float32x2_t)vextq_s8(v230, v230, 8uLL).u64[0];
    v109 = (float32x2_t)vextq_s8(v230, v230, 4uLL).u64[0];
    v110 = (int8x8_t)vmls_f32(vmul_f32(v109, *(float32x2_t *)v232[0].f32), v104, *(float32x2_t *)v230.i8);
    *(int8x8_t *)v111.f32 = vext_s8(v110, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v230.i8, v103), *(float32x2_t *)v232[0].f32, v108), 4uLL);
    v111.i64[1] = v110.u32[0];
    v112 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v230.i8, v105), v109, *(float32x2_t *)v231.f32);
    *(int8x8_t *)v113.f32 = vext_s8(v112, (int8x8_t)vmls_f32(vmul_f32(v108, *(float32x2_t *)v231.f32), *(float32x2_t *)v230.i8, v102), 4uLL);
    v113.i64[1] = v112.u32[0];
    v114 = vmulq_f32(v107, v98);
    v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
    v115 = vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32);
    v116 = vmulq_f32(v111, v98);
    v116.i64[0] = vpaddq_f32(v116, v116).u64[0];
    v117 = vpadd_f32(*(float32x2_t *)v116.f32, *(float32x2_t *)v116.f32);
    v118 = vmulq_f32(v113, v98);
    v118.i64[0] = vpaddq_f32(v118, v118).u64[0];
    v119 = vpadd_f32(*(float32x2_t *)v118.f32, *(float32x2_t *)v118.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v117), (int8x8_t)vcgez_f32(v115)), (int8x8_t)vcgez_f32(v119)), 0), *(int8x8_t *)v230.i8).u32[0] != -1)
    {
      v120 = vnegq_f32((float32x4_t)v230);
      v120.i32[3] = 0;
      v121 = vnegq_f32(v231);
      v121.i32[3] = 0;
      v122 = vmulq_f32(v120, v96);
      v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
      v123 = vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32);
      v124 = vmulq_f32(v96, v121);
      v124.i64[0] = vpaddq_f32(v124, v124).u64[0];
      v125 = vpadd_f32(*(float32x2_t *)v124.f32, *(float32x2_t *)v124.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v123), (int8x8_t)vclez_f32(v125)), (int8x8_t)vclez_f32(v119)), 0), *(int8x8_t *)v230.i8).u32[0] == -1)
      {
        v149 = vsub_f32(v123, v125);
        v150 = vrecpe_f32(v149);
        v151 = 4;
        do
        {
          v150 = vmul_f32(v150, vrecps_f32(v149, v150));
          --v151;
        }
        while (v151);
        v137 = 0;
        v41 = vmlaq_n_f32((float32x4_t)v230, v96, vmul_f32(v123, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v149), (float32x2_t)0x3400000034000000), (int8x8_t)v150, 0)).f32[0]);
        v41.i64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
        v152 = 2;
        v136 = 1;
      }
      else
      {
        v126 = vnegq_f32(v232[0]);
        v126.i32[3] = 0;
        v127 = vmulq_f32(v121, v97);
        v127.i64[0] = vpaddq_f32(v127, v127).u64[0];
        v128 = vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32);
        v129 = vmulq_f32(v96, v126);
        v129.i64[0] = vpaddq_f32(v129, v129).u64[0];
        v130 = vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32);
        v131 = vmulq_f32(v97, v126);
        v131.i64[0] = vpaddq_f32(v131, v131).u64[0];
        v132 = vpadd_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v128, v125), (int8x8_t)vcge_f32(v130, v132)), (int8x8_t)vclez_f32(v115)), 0), *(int8x8_t *)v230.i8).u32[0] != -1)
        {
          v133 = vmulq_f32(v120, v97);
          v133.i64[0] = vpaddq_f32(v133, v133).u64[0];
          v134 = vpadd_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v133.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v134), (int8x8_t)vclez_f32(v132)), (int8x8_t)vclez_f32(v117)), 0), *(int8x8_t *)v230.i8).u32[0] == -1)
          {
            v158 = vsub_f32(v134, v132);
            v159 = vrecpe_f32(v158);
            v160 = 4;
            v51 = (float32x4_t)v218;
            do
            {
              v159 = vmul_f32(v159, vrecps_f32(v158, v159));
              --v160;
            }
            while (v160);
            v137 = 0;
            v41 = vmlaq_n_f32((float32x4_t)v230, v97, vmul_f32(v134, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v158), (float32x2_t)0x3400000034000000), (int8x8_t)v159, 0)).f32[0]);
            v41.i64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
            v136 = 2;
          }
          else
          {
            v51 = (float32x4_t)v218;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v134), (int8x8_t)vclez_f32(v123)), 0), *(int8x8_t *)v230.i8).u32[0] == -1)
            {
              v137 = 0;
              v136 = 1;
            }
            else
            {
              *(int16x4_t *)v41.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v125, v128), (int8x8_t)vcgez_f32(v125)), 0);
              *(int8x8_t *)v41.f32 = vuzp1_s8(*(int8x8_t *)v41.f32, *(int8x8_t *)v41.f32);
              v135 = v41.i32[0];
              v41 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v41, v206), 0), (int8x16_t)v231, (int8x16_t)v232[0]);
              v136 = 1;
              if (v135 == -1)
                v137 = 1;
              else
                v137 = 2;
            }
          }
          v152 = v136;
          goto LABEL_61;
        }
        v153 = vsub_f32(v128, v125);
        v154 = vadd_f32(v153, vsub_f32(v130, v132));
        v155 = vrecpe_f32(v154);
        v156 = 4;
        do
        {
          v155 = vmul_f32(v155, vrecps_f32(v154, v155));
          --v156;
        }
        while (v156);
        v157 = (int8x16_t)vmlaq_n_f32(v231, vsubq_f32(v232[0], v231), vmul_f32(v153, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v154), (float32x2_t)0x3400000034000000), (int8x8_t)v155, 0)).f32[0]);
        v157.i64[1] = vextq_s8(v157, v157, 8uLL).u32[0];
        v152 = 2;
        v136 = 2;
        v137 = 1;
        v41 = (float32x4_t)v157;
      }
      v51 = (float32x4_t)v218;
LABEL_61:
      v161 = *((float32x4_t *)&v230 + v136);
      v162 = *(&v238 + v137);
      v163 = *(&v238 + v136);
      v164 = *(&v234 + v137);
      v165 = *(&v234 + v136);
      v230 = *(&v230 + v137);
      v231 = v161;
      v238 = v162;
      v239 = v163;
      v234 = v164;
      v235 = v165;
      v227 = v152;
      goto LABEL_62;
    }
    v145 = vmulq_f32((float32x4_t)v230, v98);
    v146 = vrecpe_f32(v101);
    v147 = 4;
    v51 = (float32x4_t)v218;
    do
    {
      v146 = vmul_f32(v146, vrecps_f32(v101, v146));
      --v147;
    }
    while (v147);
    v148 = (float32x2_t)vpaddq_f32(v145, v145).u64[0];
    v41 = vmulq_n_f32(v98, vmul_f32(v146, vpadd_f32(v148, v148)).f32[0]);
    v41.i32[3] = 0;
LABEL_62:
    v53 = vnegq_f32(v41);
    v53.i32[3] = 0;
    v166 = vmulq_f32(v41, v41);
    v166.i64[0] = vpaddq_f32(v166, v166).u64[0];
    v167 = vpadd_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v166.f32);
    v168 = (int8x8_t)vcgt_f32(v49, v167);
    v52 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v168, (int8x8_t)0x100000001), 0);
    v50 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v167, v46), v168), 0);
    v49 = v167;
  }
  v169 = (int8x16_t)v51;
  v170 = *(_QWORD *)(a1 + 8);
  v171 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v49, v208), 0), v52), 0x1FuLL)), (int8x16_t)v53, v212);
  v172 = vmulq_f32(v171, v171);
  v76 = vpaddq_f32(v172, v172);
  *(float32x2_t *)v76.f32 = vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32);
  v173 = vrsqrte_f32(*(float32x2_t *)v76.f32);
  v174 = 4;
  do
  {
    v173 = vmul_f32(v173, vrsqrts_f32(vmul_f32(v173, v173), *(float32x2_t *)v76.f32));
    --v174;
  }
  while (v174);
  v175 = vmul_f32(*(float32x2_t *)v76.f32, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(*(float32x2_t *)v76.f32), 0), (int8x8_t)_D8, (int8x8_t)v173));
  *(float32x2_t *)v76.f32 = vrecpe_f32(v175);
  v176 = 4;
  do
  {
    *(float32x2_t *)v76.f32 = vmul_f32(*(float32x2_t *)v76.f32, vrecps_f32(v175, *(float32x2_t *)v76.f32));
    --v176;
  }
  while (v176);
  v177 = (int8x16_t)vdupq_n_s32(-*(char *)(v170 + 32));
  v178 = (int8x16_t)vmulq_n_f32(v171, v76.f32[0]);
  v178.i32[3] = 0;
  v179 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v175), 0), v178));
  v179.i32[3] = 0;
  v180 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v52, 0x1FuLL)), v54, v169);
  v225 = v180;
  if (v227 == 3)
  {
    v228 = 0;
    v229 = 0;
    v221 = v177;
    v224 = v179;
    physx::Gu::barycentricCoordinates(&v225, (float32x4_t *)&v230, &v231, v232, &v229, &v228);
    v177 = v221;
    v179 = v224;
    v52.i32[1] = v238.i32[1];
    v184 = vmulq_n_f32(vsubq_f32(v239, v238), v229.f32[0]);
    v184.i32[3] = 0;
    *(float32x2_t *)v76.f32 = v228;
    v185 = vmulq_n_f32(vsubq_f32(v240, v238), v228.f32[0]);
    v185.i32[3] = 0;
    v181 = vaddq_f32(v238, vaddq_f32(v184, v185));
    v170 = *(_QWORD *)(a1 + 8);
    v182 = v213;
  }
  else if (v227 == 2)
  {
    v76.i64[1] = v231.i64[1];
    v186 = vsubq_f32((float32x4_t)v230, v180);
    v187 = vsubq_f32(vsubq_f32(v231, v180), v186);
    v188 = vmulq_f32(v187, v187);
    v188.i64[0] = vpaddq_f32(v188, v188).u64[0];
    *(float32x2_t *)v76.f32 = vpadd_f32(*(float32x2_t *)v188.f32, *(float32x2_t *)v188.f32);
    v189 = vrecpe_f32(*(float32x2_t *)v76.f32);
    v190 = 4;
    v182 = v213;
    do
    {
      v189 = vmul_f32(v189, vrecps_f32(*(float32x2_t *)v76.f32, v189));
      --v190;
    }
    while (v190);
    *(int32x2_t *)v76.f32 = vcgtz_f32(*(float32x2_t *)v76.f32);
    v191 = vnegq_f32(v186);
    v191.i32[3] = 0;
    v192 = vmulq_f32(v191, v187);
    v192.i64[0] = vpaddq_f32(v192, v192).u64[0];
    v181 = vmlaq_n_f32(v238, vsubq_f32(v239, v238), vmul_f32((float32x2_t)vbsl_s8(*(int8x8_t *)v76.f32, (int8x8_t)v189, 0), vpadd_f32(*(float32x2_t *)v192.f32, *(float32x2_t *)v192.f32)).f32[0]);
    v52.i32[1] = 0;
    v181.i64[1] = vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL).u32[0];
  }
  else
  {
    v181 = 0uLL;
    v182 = v213;
    if (v227 == 1)
      v181 = v238;
  }
  v52.i32[0] = *(_DWORD *)(v170 + 16);
  v77 = vmlsq_lane_f32(v181, v179, *(float32x2_t *)v52.i8, 0);
  v73.i32[1] = 0;
  v77.i64[1] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u32[0];
  v183 = vbslq_s8(v177, (int8x16_t)v77, (int8x16_t)v181);
LABEL_77:
  if (v56 != -1)
  {
    *a6 = v182;
    if (v182.f32[0] == 0.0 && a10)
    {
      v193 = *(_QWORD *)(a1 + 8);
      v194 = *(_QWORD *)(a2 + 8);
      v73.i32[0] = 1120403456;
      *(float *)v183.i32 = (float)(*(float *)(v193 + 16) + *(float *)(v194 + 16)) * 100.0;
      *(int32x2_t *)v226.f32 = vdup_lane_s32(*(int32x2_t *)v183.i8, 0);
      v228.i8[0] = 0;
      v233 = 0;
      v230 = 0u;
      v231 = 0u;
      v232[0] = 0u;
      v238.i64[0] = (uint64_t)off_24ED91108;
      v238.i64[1] = v193;
      v234.i64[0] = (uint64_t)off_24ED91168;
      v234.i64[1] = v194;
      if (physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)&v238, (uint64_t)&v234, a3, (uint64_t *)&v226, 0, &v225, &v229, &v228, 0.0, *(double *)v73.i64, *(int8x8_t *)v77.f32, v76, (uint64_t)&v230) != 5)goto LABEL_81;
      __asm { FMOV            V8.2S, #1.0 }
      if (physx::Gu::epaPenetration(a1) - 5 > 1)
      {
        v198 = vnegq_f32(*a5);
        v198.i32[3] = 0;
        v199 = vmulq_f32(v198, v198);
        v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
        v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
        v201 = vrsqrte_f32(v200);
        v202 = 4;
        do
        {
          v201 = vmul_f32(v201, vrsqrts_f32(vmul_f32(v201, v201), v200));
          --v202;
        }
        while (v202);
        v203 = vmul_f32(v200, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v200), 0), _D8, (int8x8_t)v201));
        v204 = vrecpe_f32(v203);
        v205 = 4;
        do
        {
          v204 = vmul_f32(v204, vrecps_f32(v203, v204));
          --v205;
        }
        while (v205);
        v179 = vmulq_n_f32(v198, v204.f32[0]);
        v179.i32[3] = 0;
        v195 = 0;
        v183 = 0uLL;
      }
      else
      {
LABEL_81:
        v195 = v233;
        v183 = v230;
        v179 = v232[0];
      }
      *a6 = vmin_f32(v195, 0);
    }
    *a8 = v183;
    *a7 = v179;
  }
  return v56 != -1;
}

uint64_t sweepBox_PlaneGeom(float a1, float a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6, float *a7, float32x2_t *a8, uint64_t a9, _WORD *a10)
{
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float *v24;
  float *v25;
  float *v26;
  float *v27;
  uint64_t v28;
  int v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float32x2_t *v38;
  float v39;
  float32x2_t v40;
  float v41;
  float v42;
  int v45;
  float v46;
  float *v47;
  uint64_t v48;
  float v49;
  float v50;
  float v51;
  float *v53;
  float v54;
  float v55;
  float v56;
  float v57[2];
  uint64_t v58;
  float v59[5];
  _BYTE v60[84];

  *(_QWORD *)&v60[76] = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a9 + 16) = -1;
  v17 = a4[2];
  v16 = a4[3];
  v18 = *a4;
  v19 = a4[1];
  v20 = (float)((float)(v16 * (float)(v16 + v16)) + -1.0) + (float)(v18 * (float)(v18 + v18));
  v21 = (float)((float)(v18 + v18) * v19) + (float)(v17 * (float)(v16 + v16));
  v22 = (float)((float)(v18 + v18) * v17) - (float)(v19 * (float)(v16 + v16));
  v23 = -(float)((float)((float)(a4[5] * v21) + (float)(a4[4] * v20)) + (float)(a4[6] * v22));
  v24 = a7 + 9;
  v25 = a7 + 12;
  v26 = a7 + 3;
  v27 = a7 + 6;
  physx::Gu::computeOBBPoints(v57, a7 + 9, a7 + 12, a7, a7 + 3, a7 + 6);
  v28 = 0;
  v29 = 0;
  v30 = (float *)&v58;
  v31 = 3.4028e38;
  do
  {
    v32 = (float)(v21 * *(v30 - 1)) + (float)(*(v30 - 2) * v20);
    v33 = *v30;
    v30 += 3;
    v34 = v32 + (float)(v33 * v22);
    if (v34 < v31)
    {
      v31 = v34;
      v29 = v28;
    }
    ++v28;
  }
  while (v28 != 8);
  v35 = v23 - a2;
  if ((*a10 & 0x200) != 0)
  {
    if (v31 <= (float)-v35)
    {
      *(_WORD *)(a9 + 20) = 3;
      physx::Gu::computeOBBPoints(v59, v24, v25, a7, v26, v27);
      v45 = 0;
      v46 = v35 + (float)((float)((float)(v21 * v59[1]) + (float)(v59[0] * v20)) + (float)(v59[2] * v22));
      v47 = (float *)v60;
      v48 = -7;
      do
      {
        v49 = (float)(v21 * *(v47 - 1)) + (float)(*(v47 - 2) * v20);
        v50 = *v47;
        v47 += 3;
        v51 = v35 + (float)(v49 + (float)(v50 * v22));
        if (v46 > v51)
        {
          v46 = v51;
          v45 = v48 + 8;
        }
      }
      while (!__CFADD__(v48++, 1));
      *(float *)(a9 + 40) = v21;
      *(float *)(a9 + 44) = v22;
      *(float *)(a9 + 48) = v46;
      v53 = &v59[3 * v45];
      v54 = *v53 - (float)(v20 * v46);
      v55 = v53[1] - (float)(v21 * v46);
      v56 = v53[2] - (float)(v22 * v46);
      *(float *)(a9 + 24) = v54;
      *(float *)(a9 + 28) = v55;
      *(float *)(a9 + 32) = v56;
      *(float *)(a9 + 36) = v20;
      return 1;
    }
  }
  else if ((*a10 & 0x10) == 0 && v31 <= (float)-v35)
  {
    *(_WORD *)(a9 + 20) = 2;
    *(_DWORD *)(a9 + 48) = 0;
    v36 = -a8[1].f32[0];
    *(float32x2_t *)(a9 + 36) = vneg_f32(*a8);
    *(float *)(a9 + 44) = v36;
    return 1;
  }
  v37 = (float)((float)(v21 * a8->f32[1]) + (float)(a8->f32[0] * v20)) + (float)(a8[1].f32[0] * v22);
  if (v37 > -0.0000001 && v37 < 0.0000001)
    return 0;
  v38 = (float32x2_t *)&v57[3 * v29];
  v39 = v38[1].f32[0];
  v40 = *v38;
  v41 = (float)-(float)(v35
                      + (float)(vmlas_n_f32(vmuls_lane_f32(v21, *v38, 1), v20, COERCE_FLOAT(*v38)) + (float)(v39 * v22)))
      / v37;
  *(float *)(a9 + 48) = v41;
  v42 = v39 + (float)(v41 * a8[1].f32[0]);
  *(float32x2_t *)(a9 + 24) = vadd_f32(v40, vmul_n_f32(*a8, v41));
  *(float *)(a9 + 32) = v42;
  if (v41 <= 0.0 || v41 > a1)
    return 0;
  *(float *)(a9 + 36) = v20;
  *(float *)(a9 + 40) = v21;
  *(float *)(a9 + 44) = v22;
  *(_WORD *)(a9 + 20) = 3;
  return 1;
}

BOOL sweepBox_ConvexGeom(uint64_t a1, float32x4_t *a2, float32_t a3, float a4, uint64_t a5, float32x4_t *a6, uint64_t a7, float32x2_t *a8, uint64_t a9, __int16 *a10)
{
  int32x4_t v10;
  float32x2_t v11;
  _BOOL4 v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float32x2_t v29;
  int8x8_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x8_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v51;
  int32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int32x4_t v58;
  float32x4_t v59;
  int v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x4_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x4_t v80;
  int32x2_t v81;
  int8x8_t v82;
  float32x4_t v83;
  int8x8_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x2_t v125;
  int8x8_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x2x2_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x2x2_t v132;
  int32x4_t v133;
  unint64_t v134;
  __int16 v135;
  float *v136;
  float *v137;
  int32x4_t v138;
  _BOOL8 v139;
  float32x4_t v140;
  float32x2_t v141;
  float32x4_t v142;
  float32x2_t v143;
  int8x8_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x2_t v151;
  float32x2_t v152;
  int v153;
  float32x2_t v154;
  float32x2_t v155;
  int v156;
  float32x2_t v157;
  int8x8_t v158;
  float32x4_t v159;
  int8x8_t v160;
  float32x4_t v161;
  float32x4_t v162;
  int8x16_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x2_t v171;
  int8x8_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x2_t v183;
  float32x4_t v184;
  float32x2_t v185;
  float32x2_t v186;
  int v187;
  float32x2_t v188;
  float32x2_t v189;
  int v190;
  int8x16_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float v194;
  float32x4_t v196;
  float32x2_t v197;
  float32x4_t v198;
  int32x2_t v199;
  float32x2_t v200;
  float32x4_t v201;
  float32x2_t v202;
  float32x4_t v203;
  _QWORD v204[2];
  float32x4_t v205;
  int32x4_t *v206;
  int32x4_t v207;
  int32x4_t v208;
  _OWORD v209[2];
  float32x4_t v210;
  int8x16_t v211;
  float32x2_t v212;
  float32x4_t v213;
  _QWORD v214[2];
  float v215;
  float v216;
  float v217;
  int v218;
  char v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int32x4_t v223;
  float32x4_t v224;
  uint64_t v225;
  float32x4_t v226;
  unsigned int v227;
  float32x4_t v228;
  __int128 v229;
  char v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  uint64_t v241;

  v11.f32[0] = a3;
  v17 = 0;
  v241 = *MEMORY[0x24BDAC8D0];
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *a6;
  v20.i64[0] = a6[1].i64[0];
  v20.i32[2] = a6[1].i32[2];
  v21.i64[0] = a2[1].i64[0];
  v21.i32[2] = a2[1].i32[2];
  v226 = 0uLL;
  v225 = 0;
  v20.i64[1] = v20.u32[2];
  v22 = *(int8x16_t *)a2;
  v21.i64[1] = v21.u32[2];
  v23 = vnegq_f32(*a2);
  v24 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 3);
  v25 = v23;
  v25.i32[3] = 0;
  v198 = v21;
  v26 = vsubq_f32(v20, v21);
  v27 = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32);
  v28 = vmulq_n_f32(v26, v27.f32[0]);
  v28.i32[3] = 0;
  v29 = (float32x2_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
  *(int8x8_t *)v10.i8 = vext_s8(*(int8x8_t *)v23.f32, (int8x8_t)v29, 4uLL);
  v30 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL)), *(float32x2_t *)v10.i8, *(float32x2_t *)v26.f32);
  *(int8x8_t *)v31.f32 = vext_s8(v30, (int8x8_t)vmls_f32(vmul_f32(v29, *(float32x2_t *)v26.f32), *(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL)), 4uLL);
  v31.i64[1] = v30.u32[0];
  v32 = vmlaq_laneq_f32(v28, v31, *a2, 3);
  v32.i64[1] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u32[0];
  v33 = vmulq_f32(v25, v26);
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  v34 = vmlaq_n_f32(v32, v25, vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32).f32[0]);
  v35 = vaddq_f32(v34, v34);
  v35.i32[3] = 0;
  v36 = v19;
  v36.i32[3] = 0;
  v37 = vmulq_f32(v36, v25);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  *(float32x2_t *)v37.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32));
  v38 = vmulq_laneq_f32(v25, v19, 3);
  v39 = vmulq_laneq_f32(v36, *a2, 3);
  v36.i64[0] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
  v40 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v19.f32, *(int8x8_t *)v36.f32, 4uLL), *(float32x2_t *)v23.f32), *(float32x2_t *)v10.i8, *(float32x2_t *)v19.f32);
  *(int8x8_t *)v19.f32 = vext_s8(v40, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v19.f32, v29), *(float32x2_t *)v23.f32, *(float32x2_t *)v36.f32), 4uLL);
  *(int8x8_t *)&v19.u32[2] = v40;
  v41 = vaddq_f32(vaddq_f32(v38, v39), v19);
  *(int32x2_t *)v23.f32 = vdup_lane_s32(*(int32x2_t *)v41.f32, 1);
  *(int32x2_t *)v36.f32 = vdup_laneq_s32((int32x4_t)v41, 2);
  v42 = vaddq_f32(v41, v41);
  v43 = (float32x2_t)vdup_laneq_s32((int32x4_t)v42, 2);
  *(int32x2_t *)v10.i8 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v42.f32), 0);
  *(float32x2_t *)v41.f32 = vmul_lane_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v42.f32, 1);
  v44 = vmul_laneq_f32(*(float32x2_t *)v36.f32, v42, 2);
  v45 = vmul_n_f32(*(float32x2_t *)v23.f32, v42.f32[0]);
  *(float32x2_t *)v23.f32 = vmul_n_f32(*(float32x2_t *)v36.f32, v42.f32[0]);
  *(float32x2_t *)v38.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.f32, 0), *(float32x2_t *)v37.f32, 1);
  *(float32x2_t *)v36.f32 = vmul_lane_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v42.f32, 1);
  *(float32x2_t *)v42.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.f32, 1), *(float32x2_t *)v37.f32, 1);
  *(float32x2_t *)v37.f32 = vmul_lane_f32(v43, *(float32x2_t *)v37.f32, 1);
  __asm { FMOV            V8.2S, #1.0 }
  v51 = vsub_f32(_D8, *(float32x2_t *)v10.i8);
  *(int8x8_t *)v52.i8 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, *(float32x2_t *)v41.f32), v44), (int8x8_t)vadd_f32(v45, *(float32x2_t *)v37.f32), 4uLL);
  v52.i64[1] = vsub_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v42.f32).u32[0];
  *(int8x8_t *)v37.f32 = vext_s8((int8x8_t)vsub_f32(v45, *(float32x2_t *)v37.f32), (int8x8_t)vsub_f32(v51, v44), 4uLL);
  v37.i64[1] = vadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v38.f32).u32[0];
  v10.i64[0] = *(_QWORD *)(a7 + 48);
  v53 = v10;
  v53.i32[2] = *(_DWORD *)(a7 + 56);
  v218 = 3;
  v221 = v52;
  v222 = (int32x4_t)v37;
  *(int8x8_t *)v23.f32 = vext_s8((int8x8_t)vadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v42.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v38.f32), 4uLL);
  v23.i64[1] = vsub_f32(v51, *(float32x2_t *)v41.f32).u32[0];
  v223 = (int32x4_t)v23;
  v224 = v35;
  *(int32x2_t *)v41.f32 = vdup_laneq_s32(v53, 2);
  v53.i32[3] = 0;
  v54 = *(float32x4_t *)(a1 + 4);
  v55 = v54;
  v55.i32[3] = 0;
  v56 = *(float32x4_t *)(a1 + 16);
  v219 = 0;
  v214[0] = 0;
  v214[1] = 0;
  v220 = v53;
  *(float32x2_t *)v41.f32 = vpmin_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v10.i8);
  v41.f32[0] = vpmin_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32).f32[0];
  v215 = 0.15 * v41.f32[0];
  v216 = 0.05 * v41.f32[0];
  v217 = 0.05 * v41.f32[0];
  if (v54.f32[0] == 1.0 && v54.f32[1] == 1.0)
    v17 = v54.f32[2] == 1.0;
  v230 = 0;
  v228 = 0u;
  v229 = 0u;
  v237 = v18 + 32;
  v239 = *(_QWORD *)(v18 + 72) + 20 * *(unsigned __int8 *)(v18 + 71);
  v240 = *(_BYTE *)(v18 + 70);
  v57.i64[0] = *(_QWORD *)(v18 + 92);
  v57.i64[1] = *(unsigned int *)(v18 + 100);
  v58 = (int32x4_t)vmulq_f32(v55, v57);
  *(float32x2_t *)v58.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v58, 2), *(float32x2_t *)v58.i8);
  *(float *)v58.i32 = vpmin_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8).f32[0];
  *(float32x2_t *)&v229 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v58.i32);
  *((float *)&v229 + 2) = 0.025 * *(float *)v58.i32;
  if (v17)
  {
    v231 = xmmword_2260E5F10;
    v232 = xmmword_2260E5F20;
    v233 = xmmword_2260E5F40;
    v234 = xmmword_2260E5F10;
    v235 = xmmword_2260E5F20;
    v236 = xmmword_2260E5F40;
  }
  else
  {
    v59 = vrecpeq_f32(v55);
    v60 = 4;
    do
    {
      v59 = vmulq_f32(v59, vrecpsq_f32(v59, v55));
      --v60;
    }
    while (v60);
    *(int32x2_t *)v61.f32 = vdup_lane_s32(*(int32x2_t *)v54.f32, 0);
    v61.i64[1] = v61.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v61, v55)), *(int8x8_t *)v54.f32).u32[0] & 0xFFFFFF) != 0)
    {
      v68 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v56.f32, 1);
      v69 = (float32x2_t)vdup_laneq_s32((int32x4_t)v56, 2);
      v70 = (float32x2_t)vdup_laneq_s32((int32x4_t)v56, 3);
      v71 = vaddq_f32(v56, v56);
      v72 = vmul_lane_f32(v68, *(float32x2_t *)v71.f32, 1);
      v73 = vmul_laneq_f32(v69, v71, 2);
      v74 = vmul_n_f32(v68, v71.f32[0]);
      v75 = vmul_n_f32(v69, v71.f32[0]);
      v76 = vmul_n_f32(v70, v71.f32[0]);
      v77 = vmul_lane_f32(v69, *(float32x2_t *)v71.f32, 1);
      v78 = vmul_lane_f32(v70, *(float32x2_t *)v71.f32, 1);
      v79 = vmul_laneq_f32(v70, v71, 2);
      *(float32x2_t *)v71.f32 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v71.f32), 0));
      *(int8x8_t *)v80.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v72), v73), (int8x8_t)vadd_f32(v74, v79), 4uLL);
      v80.i64[1] = vsub_f32(v75, v78).u32[0];
      v81 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v74, v79), (int8x8_t)vsub_f32(*(float32x2_t *)v71.f32, v73), 4uLL);
      v82 = (int8x8_t)vadd_f32(v75, v78);
      *(int8x8_t *)v83.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v80.f32, 0), (int8x8_t)v81, 4uLL);
      v84 = (int8x8_t)vdup_lane_s32(v81, 1);
      *(int32x2_t *)v85.f32 = v81;
      v85.i64[1] = vadd_f32(v77, v76).u32[0];
      *(int8x8_t *)v86.f32 = vext_s8(v82, (int8x8_t)vsub_f32(v77, v76), 4uLL);
      *(int8x8_t *)v87.f32 = vext_s8(*(int8x8_t *)v80.f32, v84, 4uLL);
      v86.i64[1] = vsub_f32(*(float32x2_t *)v71.f32, v72).u32[0];
      v83.i64[1] = vdup_lane_s32(*(int32x2_t *)v86.f32, 0).u32[0];
      v87.i64[1] = vdup_lane_s32(*(int32x2_t *)v86.f32, 1).u32[0];
      *(int8x8_t *)v88.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v80.u32[2], 0), (int8x8_t)v85.u32[2], 4uLL);
      v88.i64[1] = vdup_lane_s32(*(int32x2_t *)&v86.u32[2], 0).u32[0];
      v89 = vmulq_n_f32(v83, v54.f32[0]);
      v89.i32[3] = 0;
      v90 = vmulq_lane_f32(v87, *(float32x2_t *)v54.f32, 1);
      v90.i32[3] = 0;
      v91 = vmulq_laneq_f32(v88, v54, 2);
      v91.i32[3] = 0;
      v92 = vmulq_n_f32(v89, v80.f32[0]);
      v92.i32[3] = 0;
      v93 = vmulq_lane_f32(v90, *(float32x2_t *)v80.f32, 1);
      v93.i32[3] = 0;
      v94 = vmulq_laneq_f32(v91, v80, 2);
      v94.i32[3] = 0;
      v62 = vaddq_f32(v94, vaddq_f32(v92, v93));
      v95 = vmulq_n_f32(v89, v85.f32[0]);
      v95.i32[3] = 0;
      v96 = vmulq_lane_f32(v90, *(float32x2_t *)v85.f32, 1);
      v96.i32[3] = 0;
      v97 = vmulq_laneq_f32(v91, v85, 2);
      v97.i32[3] = 0;
      v98 = vaddq_f32(v95, v96);
      v99 = vmulq_n_f32(v89, v86.f32[0]);
      v99.i32[3] = 0;
      v100 = vmulq_lane_f32(v90, *(float32x2_t *)v86.f32, 1);
      v100.i32[3] = 0;
      v101 = vmulq_laneq_f32(v91, v86, 2);
      v101.i32[3] = 0;
      v63 = vaddq_f32(v97, v98);
      v64 = vaddq_f32(v101, vaddq_f32(v99, v100));
      v231 = (__int128)v62;
      v232 = (__int128)v63;
      v233 = (__int128)v64;
      v102 = vmulq_n_f32(v83, v59.f32[0]);
      v102.i32[3] = 0;
      v103 = vmulq_lane_f32(v87, *(float32x2_t *)v59.f32, 1);
      v103.i32[3] = 0;
      v104 = vmulq_laneq_f32(v88, v59, 2);
      v104.i32[3] = 0;
      v105 = vmulq_n_f32(v102, v80.f32[0]);
      v105.i32[3] = 0;
      v106 = vmulq_lane_f32(v103, *(float32x2_t *)v80.f32, 1);
      v106.i32[3] = 0;
      v107 = vmulq_laneq_f32(v104, v80, 2);
      v107.i32[3] = 0;
      v65 = vaddq_f32(v107, vaddq_f32(v105, v106));
      v108 = vmulq_n_f32(v102, v85.f32[0]);
      v108.i32[3] = 0;
      v109 = vmulq_lane_f32(v103, *(float32x2_t *)v85.f32, 1);
      v109.i32[3] = 0;
      v110 = vmulq_laneq_f32(v104, v85, 2);
      v110.i32[3] = 0;
      v111 = vmulq_n_f32(v102, v86.f32[0]);
      v111.i32[3] = 0;
      v112 = vmulq_lane_f32(v103, *(float32x2_t *)v86.f32, 1);
      v112.i32[3] = 0;
      v66 = vaddq_f32(v110, vaddq_f32(v108, v109));
      v113 = vmulq_laneq_f32(v104, v86, 2);
      v113.i32[3] = 0;
      v67 = vaddq_f32(v113, vaddq_f32(v111, v112));
    }
    else
    {
      v59.i32[3] = 0;
      v62 = vmulq_f32(v55, (float32x4_t)xmmword_2260E5F10);
      v63 = vmulq_f32(v55, (float32x4_t)xmmword_2260E5F20);
      v64 = vmulq_f32(v55, (float32x4_t)xmmword_2260E5F40);
      v231 = (__int128)v62;
      v232 = (__int128)v63;
      v233 = (__int128)v64;
      v65 = vmulq_f32(v59, (float32x4_t)xmmword_2260E5F10);
      v66 = vmulq_f32(v59, (float32x4_t)xmmword_2260E5F20);
      v67 = vmulq_f32(v59, (float32x4_t)xmmword_2260E5F40);
    }
    v235 = (__int128)v66;
    v236 = (__int128)v67;
    v114 = vmulq_f32(v62, (float32x4_t)0);
    v114.i32[3] = 0;
    v115 = vmulq_f32(v63, (float32x4_t)0);
    v115.i32[3] = 0;
    v116 = vmulq_f32(v64, (float32x4_t)0);
    v116.i32[3] = 0;
    v234 = (__int128)v65;
    v228 = vaddq_f32(v116, vaddq_f32(v115, v114));
  }
  *(float32x2_t *)v117.f32 = *a8;
  v117.i64[1] = a8[1].u32[0];
  v196 = v117;
  v197 = v11;
  v118 = vmulq_n_f32(v117, v11.f32[0]);
  v118.i32[3] = 0;
  v119 = vnegq_f32(v118);
  v120 = v119;
  v120.i32[3] = 0;
  v121 = (float32x4_t)v22;
  v121.i32[3] = 0;
  v122 = vmulq_n_f32(v120, v27.f32[0]);
  v122.i32[3] = 0;
  v123 = (float32x2_t)vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL).u64[0];
  v124 = (float32x2_t)vextq_s8((int8x16_t)v120, (int8x16_t)v120, 8uLL).u64[0];
  v125 = (float32x2_t)vext_s8(*(int8x8_t *)v22.i8, (int8x8_t)v123, 4uLL);
  v200 = v123;
  v201 = v121;
  v202 = *(float32x2_t *)v22.i8;
  v203 = v24;
  v126 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v22.i8, (float32x2_t)vext_s8(*(int8x8_t *)v119.f32, (int8x8_t)v124, 4uLL)), v125, *(float32x2_t *)v119.f32);
  *(int8x8_t *)v119.f32 = vext_s8(v126, (int8x8_t)vmls_f32(vmul_f32(v123, *(float32x2_t *)v119.f32), *(float32x2_t *)v22.i8, v124), 4uLL);
  v119.i64[1] = v126.u32[0];
  v127 = vmlsq_f32(v122, v24, v119);
  v127.i64[1] = vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).u32[0];
  v128 = vmulq_f32(v121, v120);
  v128.i64[0] = vpaddq_f32(v128, v128).u64[0];
  v129 = (float32x2x2_t)vmlaq_n_f32(v127, v121, vpadd_f32(*(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32).f32[0]);
  v130 = vaddq_f32((float32x4_t)v129, (float32x4_t)v129);
  v130.i32[3] = 0;
  v213 = v130;
  v131 = v224;
  v207 = v221;
  v208 = v222;
  v209[0] = v223;
  v132 = (float32x2x2_t)vzip1q_s32(v221, v223);
  v129.val[0] = (float32x2_t)vzip2q_s32(v221, v223).u64[0];
  v133 = vzip1q_s32(v222, (int32x4_t)0);
  v134 = vzip2q_s32(v222, (int32x4_t)0).u64[0];
  v238 = *(_QWORD *)(v18 + 80);
  v135 = *a10;
  v212 = 0;
  v210 = 0u;
  v211 = 0u;
  v205.i64[0] = (uint64_t)off_24ED91430;
  v205.i64[1] = (uint64_t)v214;
  v206 = &v221;
  v136 = (float *)&v207;
  v137 = (float *)v209;
  v138 = vzip2q_s32((int32x4_t)v132, v133);
  vst2_f32(v136, v132);
  v209[1] = v131;
  vst2_f32(v137, v129);
  v208 = v138;
  v204[0] = off_24ED91168;
  v204[1] = &v228;
  *(float *)v138.i32 = a4;
  v199 = (int32x2_t)v27;
  v139 = physx::Gu::gjkRaycastPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v205, (uint64_t)v204, &v224, (uint64_t)&v225, &v226, &v213, &v212, &v210, *(int32x2_t *)v138.i8, &v211, (v135 & 0x200) != 0);
  if (v139)
  {
    v140 = (float32x4_t)vdupq_lane_s32(v199, 0);
    *(_WORD *)(a9 + 20) = 2;
    v141 = v212;
    if (v212.f32[0] <= 0.0)
    {
      if ((v135 & 0x200) != 0)
      {
        v169 = (float32x4_t)v211;
        v170 = vmulq_n_f32((float32x4_t)v211, *(float *)v199.i32);
        v170.i32[3] = 0;
        v171 = (float32x2_t)vextq_s8((int8x16_t)v169, (int8x16_t)v169, 8uLL).u64[0];
        v172 = (int8x8_t)vmls_f32(vmul_f32(v202, (float32x2_t)vext_s8(*(int8x8_t *)v211.i8, (int8x8_t)v171, 4uLL)), v125, *(float32x2_t *)v211.i8);
        *(int8x8_t *)v173.f32 = vext_s8(v172, (int8x8_t)vmls_f32(vmul_f32(v200, *(float32x2_t *)v211.i8), v202, v171), 4uLL);
        v173.i64[1] = v172.u32[0];
        v174 = vmlaq_f32(v170, v203, v173);
        *(_WORD *)(a9 + 20) = 3;
        v174.i64[1] = vextq_s8((int8x16_t)v174, (int8x16_t)v174, 8uLL).u32[0];
        v175 = vmulq_f32(v201, v169);
        v175.i64[0] = vpaddq_f32(v175, v175).u64[0];
        v176 = vmlaq_n_f32(v174, v201, vpadd_f32(*(float32x2_t *)v175.f32, *(float32x2_t *)v175.f32).f32[0]);
        v176.i64[1] = vextq_s8((int8x16_t)v176, (int8x16_t)v176, 8uLL).u32[0];
        v175.i64[0] = 0x4000000040000000;
        v175.i64[1] = 0x4000000040000000;
        v177 = vmlaq_f32(v198, v175, v176);
        v178 = vmulq_f32(v140, v210);
        v178.i32[3] = 0;
        v176.i64[0] = vextq_s8((int8x16_t)v210, (int8x16_t)v210, 8uLL).u64[0];
        *(float32x2_t *)v173.f32 = vmls_f32(vmul_f32(v202, (float32x2_t)vext_s8(*(int8x8_t *)v210.f32, *(int8x8_t *)v176.f32, 4uLL)), v125, *(float32x2_t *)v210.f32);
        *(int8x8_t *)v176.f32 = vext_s8(*(int8x8_t *)v173.f32, (int8x8_t)vmls_f32(vmul_f32(v200, *(float32x2_t *)v210.f32), v202, *(float32x2_t *)v176.f32), 4uLL);
        v176.i64[1] = v173.u32[0];
        v179 = vmlaq_f32(v178, v203, v176);
        v179.i64[1] = vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL).u32[0];
        v180 = vmulq_f32(v201, v210);
        v183 = (float32x2_t)vpaddq_f32(v180, v180).u64[0];
        v181 = vmlaq_n_f32(v179, v201, vpadd_f32(v183, v183).f32[0]);
        v182 = vaddq_f32(v181, v181);
        v182.i32[3] = 0;
        v183.i32[0] = vextq_s8((int8x16_t)v177, (int8x16_t)v177, 8uLL).u32[0];
        v184 = vmulq_f32(v182, v182);
        v184.i64[0] = vpaddq_f32(v184, v184).u64[0];
        v185 = vpadd_f32(*(float32x2_t *)v184.f32, *(float32x2_t *)v184.f32);
        v186 = vrsqrte_f32(v185);
        v187 = 4;
        do
        {
          v186 = vmul_f32(v186, vrsqrts_f32(vmul_f32(v186, v186), v185));
          --v187;
        }
        while (v187);
        v183.i32[1] = 0;
        v188 = vmul_f32(v185, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v185), 0), (int8x8_t)_D8, (int8x8_t)v186));
        v189 = vrecpe_f32(v188);
        v190 = 4;
        do
        {
          v189 = vmul_f32(v189, vrecps_f32(v188, v189));
          --v190;
        }
        while (v190);
        *(float32x2_t *)&v177.u32[2] = v183;
        v191 = (int8x16_t)vmulq_n_f32(v182, v189.f32[0]);
        v192 = (float32x4_t)v191;
        v192.i32[3] = 0;
        v193 = vmlsq_lane_f32(v177, v192, v141, 0);
        *(_QWORD *)(a9 + 40) = vextq_s8(v191, v191, 4uLL).u64[0];
        v193.i32[3] = v191.i32[0];
        *(float32x4_t *)(a9 + 24) = v193;
        *(_DWORD *)(a9 + 48) = v141.i32[0];
      }
      else
      {
        *(_DWORD *)(a9 + 48) = 0;
        v194 = -a8[1].f32[0];
        *(float32x2_t *)(a9 + 36) = vneg_f32(*a8);
        *(float *)(a9 + 44) = v194;
      }
      *(_DWORD *)(a9 + 16) = -1;
    }
    else
    {
      v142 = vmulq_f32(v140, v210);
      v142.i32[3] = 0;
      v143 = (float32x2_t)vextq_s8((int8x16_t)v210, (int8x16_t)v210, 8uLL).u64[0];
      v144 = (int8x8_t)vmls_f32(vmul_f32(v202, (float32x2_t)vext_s8(*(int8x8_t *)v210.f32, (int8x8_t)v143, 4uLL)), v125, *(float32x2_t *)v210.f32);
      *(int8x8_t *)v145.f32 = vext_s8(v144, (int8x8_t)vmls_f32(vmul_f32(v200, *(float32x2_t *)v210.f32), v202, v143), 4uLL);
      v145.i64[1] = v144.u32[0];
      v146 = vmlaq_f32(v142, v203, v145);
      v146.i64[1] = vextq_s8((int8x16_t)v146, (int8x16_t)v146, 8uLL).u32[0];
      v147 = vmulq_f32(v201, v210);
      v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
      v148 = vmlaq_n_f32(v146, v201, vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32).f32[0]);
      v149 = vaddq_f32(v148, v148);
      v149.i32[3] = 0;
      v150 = vmulq_f32(v149, v149);
      v150.i64[0] = vpaddq_f32(v150, v150).u64[0];
      v151 = vpadd_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v150.f32);
      v152 = vrsqrte_f32(v151);
      *(_WORD *)(a9 + 20) = 3;
      v153 = 4;
      do
      {
        v152 = vmul_f32(v152, vrsqrts_f32(vmul_f32(v152, v152), v151));
        --v153;
      }
      while (v153);
      v154 = vmul_f32(v151, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v151), 0), (int8x8_t)_D8, (int8x8_t)v152));
      v155 = vrecpe_f32(v154);
      v156 = 4;
      do
      {
        v155 = vmul_f32(v155, vrecps_f32(v154, v155));
        --v156;
      }
      while (v156);
      v157 = (float32x2_t)vextq_s8(v211, v211, 8uLL).u64[0];
      v158 = (int8x8_t)vmls_f32(vmul_f32(v200, *(float32x2_t *)v211.i8), v202, v157);
      v159 = vmulq_f32(v140, (float32x4_t)v211);
      v159.i32[3] = 0;
      v160 = (int8x8_t)vmls_f32(vmul_f32(v202, (float32x2_t)vext_s8(*(int8x8_t *)v211.i8, (int8x8_t)v157, 4uLL)), v125, *(float32x2_t *)v211.i8);
      *(int8x8_t *)v161.f32 = vext_s8(v160, v158, 4uLL);
      v161.i64[1] = v160.u32[0];
      v162 = vmlaq_f32(v159, v203, v161);
      v163 = (int8x16_t)vmulq_n_f32(v149, v155.f32[0]);
      v162.i64[1] = vextq_s8((int8x16_t)v162, (int8x16_t)v162, 8uLL).u32[0];
      v164 = vmulq_f32(v201, (float32x4_t)v211);
      v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
      v165 = vmlaq_n_f32(v162, v201, vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32).f32[0]);
      v165.i64[1] = vextq_s8((int8x16_t)v165, (int8x16_t)v165, 8uLL).u32[0];
      LODWORD(v166) = vmul_f32(v197, v141).u32[0];
      v164.i64[0] = 0x4000000040000000;
      v164.i64[1] = 0x4000000040000000;
      v167 = vmlaq_f32(v198, v164, v165);
      v167.i64[1] = vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL).u32[0];
      v168 = vmlaq_n_f32(v167, v196, v166);
      v168.i32[3] = v163.i32[0];
      *(float32x4_t *)(a9 + 24) = v168;
      *(_QWORD *)(a9 + 40) = vextq_s8(v163, v163, 4uLL).u64[0];
      *(float *)(a9 + 48) = v166;
      if ((*((_BYTE *)a10 + 1) & 4) != 0)
      {
        v227 = *(unsigned __int8 *)(v18 + 71);
        *(_DWORD *)(a9 + 16) = computeSweepConvexPlane(a1, v18 + 32, &v227, a2->f32, (float *)(a9 + 24), (float *)a8);
        *(_WORD *)(a9 + 20) |= 0x400u;
      }
    }
  }
  return v139;
}

BOOL physx::Gu::gjkRaycastPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5, float32x4_t *a6, float32x2_t *a7, float32x4_t *a8, int32x2_t a9, int8x16_t *a10, char a11)
{
  _BOOL8 v17;
  double v18;
  int32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x2x2_t v24;
  int32x4_t v25;
  float32x2x2_t v26;
  int32x4_t v27;
  unint64_t v28;
  float *v29;
  float *v30;
  int32x4_t v31;
  float32x2_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v41;
  float32x4_t v42;
  float32x2_t v43;
  float32x2_t v44;
  int v45;
  float32x2_t v46;
  float32x2_t v47;
  int v48;
  _QWORD v49[2];
  float32x4_t v50;
  uint64_t v51;
  int32x4_t v52;
  int32x4_t v53;
  _OWORD v54[2];
  char v55;
  char v56[4];
  char v57[4];
  int32x2_t v58;
  float32x2_t v59;
  float32x4_t v60;
  int8x16_t v61;
  _OWORD v62[2];
  float32x4_t v63;
  float32x2_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v60 = 0u;
  v61 = 0u;
  v59 = 0;
  v17 = physx::Gu::gjkRaycast<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(a1, a2, a3, a9, a4, a5, a6, &v59, &v60, &v61);
  if (v17)
  {
    v19 = (int32x2_t)v59;
    *a7 = v59;
    if (*(float *)v19.i32 == 0.0 && (a11 & 1) != 0)
    {
      v20 = a1->i64[1];
      v21 = a1[1].i64[0];
      v19.i32[0] = *(_DWORD *)(v20 + 16);
      v22 = *(_QWORD *)(a2 + 8);
      LODWORD(v18) = *(_DWORD *)(v22 + 16);
      v64 = 0;
      memset(v62, 0, sizeof(v62));
      v63 = 0u;
      v50.i64[0] = (uint64_t)off_24ED91430;
      v50.i64[1] = v20;
      v51 = v21;
      v24 = *(float32x2x2_t *)(v21 + 32);
      v23 = *(float32x4_t *)(v21 + 48);
      v25 = *(int32x4_t *)v21;
      v53 = *(int32x4_t *)(v21 + 16);
      v54[0] = v24;
      v52 = v25;
      v26 = (float32x2x2_t)vzip1q_s32(v25, (int32x4_t)v24);
      v24.val[0] = (float32x2_t)vzip2q_s32(v25, (int32x4_t)v24).u64[0];
      v27 = vzip1q_s32(v53, (int32x4_t)0);
      v28 = vzip2q_s32(v53, (int32x4_t)0).u64[0];
      *(float *)v19.i32 = *(float *)v19.i32 + *(float *)&v18;
      LODWORD(v18) = 1120403456;
      *(float *)v19.i32 = *(float *)v19.i32 * 100.0;
      v58 = vdup_lane_s32(v19, 0);
      v55 = 0;
      v29 = (float *)&v52;
      v30 = (float *)v54;
      v31 = vzip2q_s32((int32x4_t)v26, v27);
      vst2_f32(v29, v26);
      v54[1] = v23;
      v53 = v31;
      vst2_f32(v30, v24);
      v49[0] = off_24ED91168;
      v49[1] = v22;
      if (physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v50, (uint64_t)v49, a3, (uint64_t *)&v58, 0, v57, v56, &v55, *(double *)v31.i64, v18, 0, v23, (uint64_t)v62) != 5)goto LABEL_5;
      __asm { FMOV            V8.2S, #1.0 }
      if (physx::Gu::epaPenetration((uint64_t)a1) - 5 > 1)
      {
        v41 = vnegq_f32(*a6);
        v41.i32[3] = 0;
        v42 = vmulq_f32(v41, v41);
        v42.i64[0] = vpaddq_f32(v42, v42).u64[0];
        v43 = vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32);
        v44 = vrsqrte_f32(v43);
        v45 = 4;
        do
        {
          v44 = vmul_f32(v44, vrsqrts_f32(vmul_f32(v44, v44), v43));
          --v45;
        }
        while (v45);
        v46 = vmul_f32(v43, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v43), 0), _D8, (int8x8_t)v44));
        v47 = vrecpe_f32(v46);
        v48 = 4;
        do
        {
          v47 = vmul_f32(v47, vrecps_f32(v46, v47));
          --v48;
        }
        while (v48);
        v34 = vmulq_n_f32(v41, v47.f32[0]);
        v34.i32[3] = 0;
        v32 = 0;
        v33 = 0uLL;
      }
      else
      {
LABEL_5:
        v32 = v64;
        v33 = (int8x16_t)v62[0];
        v34 = v63;
      }
      *a7 = vmin_f32(v32, 0);
    }
    else
    {
      v34 = v60;
      v33 = v61;
    }
    *a10 = v33;
    *a8 = v34;
  }
  return v17;
}

uint64_t physx::Gu::sweepCapsuleTriangles(uint64_t a1, uint64_t a2, physx::Gu::Box *a3, uint64_t a4, float *a5, float32x2_t *a6, uint64_t a7, unsigned int *a8, float a9, float a10, __int16 *a11)
{
  unsigned __int8 v14;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  double v35;
  float32x4_t v36;
  float32x4_t v37;
  __int16 v39;
  float v40[3];
  float32x4_t v41[4];
  float v42[9];
  float32x2_t v43;
  float v44;
  float v45[7];

  v14 = a3;
  v18 = *a5;
  v19 = a5[1];
  v20 = v18 + v18;
  v22 = a5[2];
  v21 = a5[3];
  v23 = v21 + v21;
  v24 = (float)((float)(v21 * (float)(v21 + v21)) + -1.0) + (float)(v18 * (float)(v18 + v18));
  v25 = (float)(v20 * v19) + (float)(v22 * (float)(v21 + v21));
  v26 = (float)(v20 * v22) - (float)(v19 * v23);
  v28 = *(float *)(a4 + 4);
  v27 = *(float *)(a4 + 8);
  v29 = v24 * v27;
  v30 = v27 * v25;
  v31 = v26 * v27;
  v32 = a5[4];
  v33 = a5[5];
  v34 = a5[6];
  v45[0] = v32 + v29;
  v45[1] = v33 + v30;
  v45[2] = v31 + v34;
  v45[3] = v32 - v29;
  v45[4] = v33 - v30;
  v45[5] = v34 - v31;
  v45[6] = v28 + a10;
  physx::Gu::computeBoxAroundCapsule((uint64_t)v45, (const Capsule *)v42, a3);
  *(float32x2_t *)&v35 = physx::Gu::computeSweptBox((uint64_t)v41, &v44, &v43, v42, a6, a9);
  v39 = *a11;
  *(float *)&v35 = a9;
  return physx::Gu::sweepCapsuleTriangles_Precise(a1, a2, (uint64_t)v45, a6, a8, a7, v40, &v39, v35, v36, v37, v14, v41);
}

BOOL sweepConvex_SphereGeom(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, float32x2_t *a5, uint64_t a6, __int16 *a7, float a8, float a9)
{
  int32x2_t v9;
  _BOOL4 v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x4_t v25;
  float32x2_t v26;
  int8x8_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  int8x8_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x2_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  float32x4_t v48;
  int v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int8x8_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  __int16 v109;
  _BOOL8 result;
  float32x4_t v111;
  float32x4_t v112;
  float v113;
  float32x4_t v114;
  float32x2_t v115;
  float32x4_t v116;
  int8x8_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x2_t v124;
  float32x2_t v125;
  int v126;
  float32x2_t v128;
  float32x2_t v129;
  int v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x2_t v133;
  int8x8_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int8x16_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x2_t v142;
  float v143;
  float32x4_t v144;
  float32x2_t v145;
  float32x2_t v146;
  float32x2_t v147;
  int8x8_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  uint64_t v153;
  float32x4_t v154;
  float32x2_t v155;
  int8x8_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x2_t v163;
  float32x2_t v164;
  int v165;
  float32x2_t v167;
  float32x2_t v168;
  int v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  int8x16_t v173;
  float v174;
  int32x2_t v175;
  float32x2_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v182;
  _QWORD v183[2];
  _QWORD v184[2];
  float32x4_t v185;
  int8x16_t v186;
  float32x2_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  __int32 v191;
  __int32 v192;
  __int32 v193;
  int v194;
  char v195;
  float32x4_t v196;
  float32x4_t v197;
  int32x2_t v198;
  float32x4_t v199;
  __int128 v200;
  char v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  uint64_t v212;

  v13 = 0;
  v212 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a3 + 32);
  v15.i64[0] = *(_QWORD *)(a2 + 16);
  v15.i32[2] = *(_DWORD *)(a2 + 24);
  v189 = 0uLL;
  v16 = *(float32x4_t *)(a3 + 4);
  v17 = v16;
  v17.i32[3] = 0;
  v18 = *(float32x4_t *)(a3 + 16);
  v9.i32[0] = *(_DWORD *)(a1 + 4);
  v15.i64[1] = v15.u32[2];
  v19 = *a4;
  v20.i64[0] = a4[1].i64[0];
  v20.i64[1] = a4[1].u32[2];
  v21 = vnegq_f32(*a4);
  v179 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  v180 = v20;
  v22 = vsubq_f32(v15, v20);
  v23 = v21;
  v23.i32[3] = 0;
  v24 = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v179.f32, *(float32x2_t *)v179.f32);
  v25 = vmulq_n_f32(v22, v24.f32[0]);
  v25.i32[3] = 0;
  v26 = (float32x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
  v27 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v21.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v21.f32, (int8x8_t)v26, 4uLL), *(float32x2_t *)v22.f32);
  *(int8x8_t *)v21.f32 = vext_s8(v27, (int8x8_t)vmls_f32(vmul_f32(v26, *(float32x2_t *)v22.f32), *(float32x2_t *)v21.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL)), 4uLL);
  v21.i64[1] = v27.u32[0];
  v28 = vmlaq_laneq_f32(v25, v21, *a4, 3);
  v28.i64[1] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u32[0];
  v29 = vmulq_f32(v23, v22);
  v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
  *(float32x2_t *)v22.f32 = *a5;
  v22.i32[2] = a5[1].i32[0];
  v30 = vmlaq_n_f32(v28, v23, vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32).f32[0]);
  v31 = vmulq_n_f32(v22, a8);
  v32 = v31;
  v32.i32[3] = 0;
  v33 = *a4;
  v33.i32[3] = 0;
  v34 = vmulq_n_f32(v32, v24.f32[0]);
  v34.i32[3] = 0;
  v35 = (float32x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
  v36 = (float32x2_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
  v37 = (float32x2_t)vext_s8(*(int8x8_t *)a4->f32, (int8x8_t)v35, 4uLL);
  v175 = (int32x2_t)v24;
  v176 = v35;
  v38 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->f32, (float32x2_t)vext_s8(*(int8x8_t *)v31.f32, (int8x8_t)v36, 4uLL)), v37, *(float32x2_t *)v31.f32);
  *(int8x8_t *)v31.f32 = vext_s8(v38, (int8x8_t)vmls_f32(vmul_f32(v35, *(float32x2_t *)v31.f32), *(float32x2_t *)a4->f32, v36), 4uLL);
  v31.i64[1] = v38.u32[0];
  v178 = *a4;
  v39 = vmlsq_laneq_f32(v34, v31, *a4, 3);
  v39.i64[1] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u32[0];
  v40 = vaddq_f32(v30, v30);
  v41 = vmulq_f32(v33, v32);
  v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
  v42 = vmlaq_n_f32(v39, v33, vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32).f32[0]);
  v43 = vaddq_f32(v42, v42);
  v43.i32[3] = 0;
  v188 = v43;
  if (*(float *)(a3 + 4) == 1.0 && *(float *)(a3 + 8) == 1.0)
    v13 = *(float *)(a3 + 12) == 1.0;
  v44 = vdup_lane_s32(v9, 0);
  v40.i32[3] = 0;
  v45 = 0uLL;
  v201 = 0;
  v199 = 0u;
  v200 = 0u;
  v208 = v14 + 32;
  v210 = *(_QWORD *)(v14 + 72) + 20 * *(unsigned __int8 *)(v14 + 71);
  v211 = *(_BYTE *)(v14 + 70);
  v46.i64[0] = *(_QWORD *)(v14 + 92);
  v46.i64[1] = *(unsigned int *)(v14 + 100);
  v47 = (int32x4_t)vmulq_f32(v17, v46);
  *(float32x2_t *)v47.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v47, 2), *(float32x2_t *)v47.i8);
  *(float *)v47.i32 = vpmin_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8).f32[0];
  *(float32x2_t *)&v200 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v47.i32);
  *((float *)&v200 + 2) = 0.025 * *(float *)v47.i32;
  v177 = v33;
  if (v13)
  {
    v202 = xmmword_2260E5F10;
    v203 = xmmword_2260E5F20;
    v204 = xmmword_2260E5F40;
    v205 = xmmword_2260E5F10;
    v206 = xmmword_2260E5F20;
    v207 = xmmword_2260E5F40;
  }
  else
  {
    v48 = vrecpeq_f32(v17);
    v49 = 4;
    do
    {
      v48 = vmulq_f32(v48, vrecpsq_f32(v48, v17));
      --v49;
    }
    while (v49);
    *(int32x2_t *)v50.f32 = vdup_lane_s32(*(int32x2_t *)v16.f32, 0);
    v50.i64[1] = v50.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v50, v17)), *(int8x8_t *)v19.f32).u32[0] & 0xFFFFFF) != 0)
    {
      v57 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.f32, 1);
      v58 = (float32x2_t)vdup_laneq_s32((int32x4_t)v18, 2);
      v59 = (float32x2_t)vdup_laneq_s32((int32x4_t)v18, 3);
      _Q19 = vaddq_f32(v18, v18);
      v61 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)_Q19.f32), 0);
      v62 = vmul_lane_f32(v57, *(float32x2_t *)_Q19.f32, 1);
      v63 = vmul_laneq_f32(v58, _Q19, 2);
      v64 = vmul_n_f32(v57, _Q19.f32[0]);
      v65 = vmul_n_f32(v58, _Q19.f32[0]);
      v66 = vmul_n_f32(v59, _Q19.f32[0]);
      v67 = vmul_lane_f32(v58, *(float32x2_t *)_Q19.f32, 1);
      v68 = vmul_lane_f32(v59, *(float32x2_t *)_Q19.f32, 1);
      v69 = vmul_laneq_f32(v59, _Q19, 2);
      __asm { FMOV            V19.2S, #1.0 }
      v74 = vsub_f32(*(float32x2_t *)_Q19.f32, v61);
      *(int8x8_t *)v75.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q19.f32, v62), v63), (int8x8_t)vadd_f32(v64, v69), 4uLL);
      v75.i64[1] = vsub_f32(v65, v68).u32[0];
      *(int8x8_t *)v76.f32 = vext_s8((int8x8_t)vsub_f32(v64, v69), (int8x8_t)vsub_f32(v74, v63), 4uLL);
      v77 = (int8x8_t)vadd_f32(v65, v68);
      *(int8x8_t *)_Q19.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v75.f32, 0), *(int8x8_t *)v76.f32, 4uLL);
      v76.i64[1] = vadd_f32(v67, v66).u32[0];
      v68.i32[0] = vsub_f32(v74, v62).u32[0];
      *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vsub_f32(v67, v66), 4uLL);
      *(int8x8_t *)v79.f32 = vext_s8(*(int8x8_t *)v75.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v76.f32, 1), 4uLL);
      v78.i64[1] = v68.u32[0];
      _Q19.i64[1] = vdup_lane_s32(*(int32x2_t *)v78.f32, 0).u32[0];
      v79.i64[1] = vdup_lane_s32(*(int32x2_t *)v78.f32, 1).u32[0];
      *(int8x8_t *)v80.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v75.u32[2], 0), *(int8x8_t *)&v76.u32[2], 4uLL);
      v80.i64[1] = vdup_lane_s32((int32x2_t)v68.u32[0], 0).u32[0];
      v81 = vmulq_n_f32(_Q19, v16.f32[0]);
      v81.i32[3] = 0;
      v82 = vmulq_lane_f32(v79, *(float32x2_t *)v16.f32, 1);
      v82.i32[3] = 0;
      v83 = vmulq_laneq_f32(v80, v16, 2);
      v83.i32[3] = 0;
      v84 = vmulq_n_f32(v81, v75.f32[0]);
      v84.i32[3] = 0;
      v85 = vmulq_lane_f32(v82, *(float32x2_t *)v75.f32, 1);
      v85.i32[3] = 0;
      v86 = vmulq_laneq_f32(v83, v75, 2);
      v86.i32[3] = 0;
      v51 = vaddq_f32(v86, vaddq_f32(v84, v85));
      v87 = vmulq_n_f32(v81, v76.f32[0]);
      v87.i32[3] = 0;
      v88 = vmulq_lane_f32(v82, *(float32x2_t *)v76.f32, 1);
      v88.i32[3] = 0;
      v89 = vmulq_laneq_f32(v83, v76, 2);
      v89.i32[3] = 0;
      v90 = vaddq_f32(v87, v88);
      v91 = vmulq_n_f32(v81, v78.f32[0]);
      v91.i32[3] = 0;
      v92 = vmulq_lane_f32(v82, *(float32x2_t *)v78.f32, 1);
      v92.i32[3] = 0;
      v93 = vmulq_laneq_f32(v83, v78, 2);
      v93.i32[3] = 0;
      v52 = vaddq_f32(v89, v90);
      v53 = vaddq_f32(v93, vaddq_f32(v91, v92));
      v202 = (__int128)v51;
      v203 = (__int128)v52;
      v204 = (__int128)v53;
      v94 = vmulq_n_f32(_Q19, v48.f32[0]);
      v94.i32[3] = 0;
      v95 = vmulq_lane_f32(v79, *(float32x2_t *)v48.f32, 1);
      v95.i32[3] = 0;
      v96 = vmulq_laneq_f32(v80, v48, 2);
      v96.i32[3] = 0;
      v97 = vmulq_n_f32(v94, v75.f32[0]);
      v97.i32[3] = 0;
      v98 = vmulq_lane_f32(v95, *(float32x2_t *)v75.f32, 1);
      v98.i32[3] = 0;
      v99 = vmulq_laneq_f32(v96, v75, 2);
      v99.i32[3] = 0;
      v54 = vaddq_f32(v99, vaddq_f32(v97, v98));
      v100 = vmulq_n_f32(v94, v76.f32[0]);
      v100.i32[3] = 0;
      v101 = vmulq_lane_f32(v95, *(float32x2_t *)v76.f32, 1);
      v101.i32[3] = 0;
      v102 = vmulq_laneq_f32(v96, v76, 2);
      v102.i32[3] = 0;
      v103 = vmulq_n_f32(v94, v78.f32[0]);
      v103.i32[3] = 0;
      v104 = vmulq_lane_f32(v95, *(float32x2_t *)v78.f32, 1);
      v104.i32[3] = 0;
      v55 = vaddq_f32(v102, vaddq_f32(v100, v101));
      v105 = vmulq_laneq_f32(v96, v78, 2);
      v105.i32[3] = 0;
      v56 = vaddq_f32(v105, vaddq_f32(v103, v104));
    }
    else
    {
      v48.i32[3] = 0;
      v51 = vmulq_f32(v17, (float32x4_t)xmmword_2260E5F10);
      v52 = vmulq_f32(v17, (float32x4_t)xmmword_2260E5F20);
      v53 = vmulq_f32(v17, (float32x4_t)xmmword_2260E5F40);
      v202 = (__int128)v51;
      v203 = (__int128)v52;
      v204 = (__int128)v53;
      v54 = vmulq_f32(v48, (float32x4_t)xmmword_2260E5F10);
      v55 = vmulq_f32(v48, (float32x4_t)xmmword_2260E5F20);
      v56 = vmulq_f32(v48, (float32x4_t)xmmword_2260E5F40);
    }
    v206 = (__int128)v55;
    v207 = (__int128)v56;
    v106 = vmulq_f32(v51, (float32x4_t)0);
    v106.i32[3] = 0;
    v107 = vmulq_f32(v52, (float32x4_t)0);
    v107.i32[3] = 0;
    v108 = vmulq_f32(v53, (float32x4_t)0);
    v108.i32[3] = 0;
    v45 = vaddq_f32(v108, vaddq_f32(v107, v106));
    v205 = (__int128)v54;
    v199 = v45;
  }
  v209 = *(_QWORD *)(v14 + 80);
  v194 = 4;
  v190 = v40;
  v198 = v44;
  v196 = v40;
  v197 = v40;
  v191 = v9.i32[0];
  v192 = v9.i32[0];
  v193 = v9.i32[0];
  v195 = 1;
  v109 = *a7;
  v187 = 0;
  v185 = 0u;
  v186 = 0u;
  v184[0] = off_24ED91108;
  v184[1] = &v190;
  v183[0] = off_24ED91168;
  v183[1] = &v199;
  v33.f32[0] = *(float *)v9.i32 + a9;
  v182 = vsubq_f32(v40, v45);
  result = physx::Gu::gjkRaycastPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)v184, (uint64_t)v183, &v182, &v189, &v188, &v187, &v185, &v186, *(int32x2_t *)v33.f32, (v109 & 0x200) != 0);
  if (result)
  {
    v111 = *a4;
    v112.i64[0] = a4[1].i64[0];
    v112.i32[2] = a4[1].i32[2];
    *(_WORD *)(a6 + 20) = 2;
    v113 = v187.f32[0];
    if (v187.f32[0] <= 0.0)
    {
      if ((v109 & 0x200) != 0)
      {
        v112.i32[3] = 0;
        v141 = v111;
        v141.i32[3] = 0;
        v142 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v111, 3).u64[0];
        LODWORD(v143) = vmla_f32((float32x2_t)0xBF000000BF000000, v142, v142).u32[0];
        v144 = vmulq_n_f32((float32x4_t)v186, v143);
        v144.i32[3] = 0;
        v145 = (float32x2_t)vextq_s8((int8x16_t)v141, (int8x16_t)v141, 8uLL).u64[0];
        v146 = (float32x2_t)vextq_s8(v186, v186, 8uLL).u64[0];
        v147 = (float32x2_t)vext_s8(*(int8x8_t *)v111.f32, (int8x8_t)v145, 4uLL);
        v148 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v111.f32, (float32x2_t)vext_s8(*(int8x8_t *)v186.i8, (int8x8_t)v146, 4uLL)), v147, *(float32x2_t *)v186.i8);
        *(int8x8_t *)v149.f32 = vext_s8(v148, (int8x8_t)vmls_f32(vmul_f32(v145, *(float32x2_t *)v186.i8), *(float32x2_t *)v111.f32, v146), 4uLL);
        v149.i64[1] = v148.u32[0];
        v150 = vmlaq_laneq_f32(v144, v149, v111, 3);
        v150.i64[1] = vextq_s8((int8x16_t)v150, (int8x16_t)v150, 8uLL).u32[0];
        v151 = vmulq_f32(v141, (float32x4_t)v186);
        v151.i64[0] = vpaddq_f32(v151, v151).u64[0];
        v152 = vmlaq_n_f32(v150, v141, vpadd_f32(*(float32x2_t *)v151.f32, *(float32x2_t *)v151.f32).f32[0]);
        v153 = vextq_s8((int8x16_t)v152, (int8x16_t)v152, 8uLL).u32[0];
        v154 = vmulq_n_f32(v185, v143);
        v154.i32[3] = 0;
        v155 = (float32x2_t)vextq_s8((int8x16_t)v185, (int8x16_t)v185, 8uLL).u64[0];
        v156 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v111.f32, (float32x2_t)vext_s8(*(int8x8_t *)v185.f32, (int8x8_t)v155, 4uLL)), v147, *(float32x2_t *)v185.f32);
        *(int8x8_t *)v157.f32 = vext_s8(v156, (int8x8_t)vmls_f32(vmul_f32(v145, *(float32x2_t *)v185.f32), *(float32x2_t *)v111.f32, v155), 4uLL);
        v157.i64[1] = v156.u32[0];
        v158 = vmlaq_laneq_f32(v154, v157, v111, 3);
        v158.i64[1] = vextq_s8((int8x16_t)v158, (int8x16_t)v158, 8uLL).u32[0];
        v159 = vmulq_f32(v141, v185);
        v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
        v160 = vmlaq_n_f32(v158, v141, vpadd_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32).f32[0]);
        v161 = vaddq_f32(v160, v160);
        v161.i32[3] = 0;
        *(_WORD *)(a6 + 20) = 3;
        v162 = vmulq_f32(v161, v161);
        v162.i64[0] = vpaddq_f32(v162, v162).u64[0];
        v163 = vpadd_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v162.f32);
        v164 = vrsqrte_f32(v163);
        v165 = 4;
        do
        {
          v164 = vmul_f32(v164, vrsqrts_f32(vmul_f32(v164, v164), v163));
          --v165;
        }
        while (v165);
        __asm { FMOV            V16.2S, #1.0 }
        v167 = vmul_f32(v163, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v163), 0), _D16, (int8x8_t)v164));
        v168 = vrecpe_f32(v167);
        v169 = 4;
        do
        {
          v168 = vmul_f32(v168, vrecps_f32(v167, v168));
          --v169;
        }
        while (v169);
        v152.i64[1] = v153;
        v170.i64[0] = 0x4000000040000000;
        v170.i64[1] = 0x4000000040000000;
        v171 = vmlaq_f32(v112, v170, v152);
        v172 = vmulq_n_f32(v161, v168.f32[0]);
        v172.i32[3] = 0;
        v173 = (int8x16_t)vnegq_f32(v172);
        *(_QWORD *)(a6 + 40) = vextq_s8(v173, v173, 4uLL).u64[0];
        v171.i32[3] = v173.i32[0];
        *(float32x4_t *)(a6 + 24) = v171;
        *(float *)(a6 + 48) = v113;
      }
      else
      {
        *(_DWORD *)(a6 + 48) = 0;
        v174 = -a5[1].f32[0];
        *(float32x2_t *)(a6 + 36) = vneg_f32(*a5);
        *(float *)(a6 + 44) = v174;
      }
    }
    else
    {
      v114 = (float32x4_t)vdupq_lane_s32(v175, 0);
      v115 = (float32x2_t)vextq_s8((int8x16_t)v185, (int8x16_t)v185, 8uLL).u64[0];
      v116 = vmulq_n_f32(v185, *(float *)v175.i32);
      v116.i32[3] = 0;
      v117 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v178.f32, (float32x2_t)vext_s8(*(int8x8_t *)v185.f32, (int8x8_t)v115, 4uLL)), v37, *(float32x2_t *)v185.f32);
      *(int8x8_t *)v118.f32 = vext_s8(v117, (int8x8_t)vmls_f32(vmul_f32(v176, *(float32x2_t *)v185.f32), *(float32x2_t *)v178.f32, v115), 4uLL);
      v118.i64[1] = v117.u32[0];
      v119 = vmlaq_f32(v116, v179, v118);
      v119.i64[1] = vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL).u32[0];
      v120 = vmulq_f32(v177, v185);
      v120.i64[0] = vpaddq_f32(v120, v120).u64[0];
      v121 = vmlaq_n_f32(v119, v177, vpadd_f32(*(float32x2_t *)v120.f32, *(float32x2_t *)v120.f32).f32[0]);
      v122 = vaddq_f32(v121, v121);
      v122.i32[3] = 0;
      *(_WORD *)(a6 + 20) = 3;
      v123 = vmulq_f32(v122, v122);
      v123.i64[0] = vpaddq_f32(v123, v123).u64[0];
      v124 = vpadd_f32(*(float32x2_t *)v123.f32, *(float32x2_t *)v123.f32);
      v125 = vrsqrte_f32(v124);
      v126 = 4;
      do
      {
        v125 = vmul_f32(v125, vrsqrts_f32(vmul_f32(v125, v125), v124));
        --v126;
      }
      while (v126);
      __asm { FMOV            V6.2S, #1.0 }
      v128 = vmul_f32(v124, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v124), 0), _D6, (int8x8_t)v125));
      v129 = vrecpe_f32(v128);
      v130 = 4;
      do
      {
        v129 = vmul_f32(v129, vrecps_f32(v128, v129));
        --v130;
      }
      while (v130);
      v131 = vmulq_n_f32(v122, v129.f32[0]);
      v131.i32[3] = 0;
      v132 = vmulq_f32(v114, (float32x4_t)v186);
      v132.i32[3] = 0;
      v133 = (float32x2_t)vextq_s8(v186, v186, 8uLL).u64[0];
      v134 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v178.f32, (float32x2_t)vext_s8(*(int8x8_t *)v186.i8, (int8x8_t)v133, 4uLL)), v37, *(float32x2_t *)v186.i8);
      *(int8x8_t *)v135.f32 = vext_s8(v134, (int8x8_t)vmls_f32(vmul_f32(v176, *(float32x2_t *)v186.i8), *(float32x2_t *)v178.f32, v133), 4uLL);
      v135.i64[1] = v134.u32[0];
      v136 = vmlaq_f32(v132, v179, v135);
      v136.i64[1] = vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL).u32[0];
      v137 = vmulq_f32(v177, (float32x4_t)v186);
      v137.i64[0] = vpaddq_f32(v137, v137).u64[0];
      v138 = vmlaq_n_f32(v136, v177, vpadd_f32(*(float32x2_t *)v137.f32, *(float32x2_t *)v137.f32).f32[0]);
      v139 = (int8x16_t)vnegq_f32(v131);
      v138.i64[1] = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u32[0];
      v137.i64[0] = 0x4000000040000000;
      v137.i64[1] = 0x4000000040000000;
      v140 = vmlaq_f32(v180, v137, v138);
      *(_QWORD *)(a6 + 40) = vextq_s8(v139, v139, 4uLL).u64[0];
      v140.i32[3] = v139.i32[0];
      *(float32x4_t *)(a6 + 24) = v140;
      *(float *)(a6 + 48) = v113 * a8;
    }
    *(_DWORD *)(a6 + 16) = -1;
  }
  return result;
}

uint64_t sweepConvex_PlaneGeom(float a1, float a2, uint64_t a3, float *a4, uint64_t a5, float *a6, float *a7, uint64_t a8, __int16 *a9)
{
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  float *v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  char v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float *i;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  float *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  unint64_t v92;
  float *v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  __int16 v110;
  float v111;
  float v112;
  float v113;
  float v114;
  _DWORD v115[19];
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;

  v16 = *(_QWORD *)(a5 + 32);
  *(_DWORD *)(a8 + 16) = -1;
  v17 = *(_QWORD *)(v16 + 72);
  v18 = *(unsigned __int8 *)(v16 + 71);
  v19 = *(unsigned __int8 *)(v16 + 70);
  v110 = *a9;
  v20 = (float *)(a5 + 4);
  v21 = (float *)(a5 + 16);
  physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v115, (float *)(a5 + 4), (float *)(a5 + 16));
  v22 = a4[2];
  v23 = a4[3];
  v25 = *a4;
  v24 = a4[1];
  v26 = a4[4];
  v27 = a4[5];
  v28 = a4[6];
  *(float *)(a8 + 48) = a1;
  v29 = 0;
  if (!v19)
    return v29 & 1;
  v30 = (float)((float)(v23 * (float)(v23 + v23)) + -1.0) + (float)(v25 * (float)(v25 + v25));
  v31 = (float)((float)(v25 + v25) * v24) + (float)(v22 * (float)(v23 + v23));
  v32 = (float)((float)(v25 + v25) * v22) - (float)(v24 * (float)(v23 + v23));
  v33 = *(float *)&v115[7];
  v112 = *(float *)&v115[8];
  v114 = (float)-(float)((float)((float)(v27 * v31) + (float)(v26 * v30)) + (float)(v28 * v32)) - a2;
  v34 = *(float *)&v115[3];
  v111 = *(float *)&v115[2];
  v35 = *a6;
  v36 = a6[1];
  v37 = *(float *)v115;
  v38 = *(float *)&v115[1];
  v40 = *(float *)&v115[4];
  v39 = *(float *)&v115[5];
  v41 = *(float *)&v115[6];
  v42 = a6[2];
  v43 = a6[3];
  v44 = (float)(v43 * v43) + -0.5;
  v45 = -*a6;
  for (i = (float *)(v17 + 20 * v18 + 8); ; i += 3)
  {
    v48 = *a7;
    v47 = a7[1];
    v49 = a7[2];
    v50 = (float)((float)(v31 * v47) + (float)(*a7 * v30)) + (float)(v49 * v32);
    if (v50 <= -0.0000001 || v50 >= 0.0000001)
      break;
LABEL_11:
    if (!--v19)
      return v29 & 1;
  }
  v51 = *(i - 2);
  v52 = *(i - 1);
  v53 = (float)((float)(v111 * v51) + (float)(v39 * v52)) + (float)(v112 * *i);
  v54 = v53 + v53;
  v55 = (float)((float)(v37 * v51) + (float)(v34 * v52)) + (float)(v41 * *i);
  v56 = v55 + v55;
  v57 = (float)((float)(v38 * v51) + (float)(v40 * v52)) + (float)(v33 * *i);
  v58 = v57 + v57;
  v59 = (float)((float)(v36 * (float)(v57 + v57)) + (float)(v35 * v56)) + (float)(v42 * v54);
  v60 = a6[6]
      + (float)((float)((float)(v43 * (float)((float)(v56 * (float)-v36) + (float)(v35 * (float)(v57 + v57))))
                      + (float)(v54 * v44))
              + (float)(v42 * v59));
  v61 = a6[5]
      + (float)((float)((float)(v43 * (float)((float)(v54 * v45) + (float)(v42 * v56))) + (float)(v58 * v44))
              + (float)(v36 * v59));
  v62 = a6[4]
      + (float)((float)((float)(v43 * (float)((float)(v58 * (float)-v42) + (float)(v36 * v54))) + (float)(v56 * v44))
              + (float)(v35 * v59));
  v63 = v114 + (float)((float)((float)(v31 * v61) + (float)(v62 * v30)) + (float)(v60 * v32));
  if (v63 > 0.0)
  {
    v64 = (float)-v63 / v50;
    if (v64 > 0.0 && v64 <= a1)
    {
      *(float *)(a8 + 44) = v32;
      *(float *)(a8 + 48) = v64;
      *(_WORD *)(a8 + 20) = 3;
      *(float *)(a8 + 24) = v62 + (float)(v48 * v64);
      *(float *)(a8 + 28) = v61 + (float)(v47 * v64);
      *(float *)(a8 + 32) = v60 + (float)(v49 * v64);
      *(float *)(a8 + 36) = v30;
      *(float *)(a8 + 40) = v31;
      v29 = 1;
      a1 = v64;
    }
    goto LABEL_11;
  }
  if ((v110 & 0x200) != 0)
  {
    *(_WORD *)(a8 + 20) = 3;
    v66 = *(_QWORD *)(a5 + 32);
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)&v116, v20, v21);
    v67 = *(unsigned __int8 *)(v66 + 70);
    v68 = *(_QWORD *)(v66 + 72);
    v69 = (float *)(v68 + 20 * *(unsigned __int8 *)(v66 + 71));
    v70 = v69[1];
    v71 = v69[2];
    v72 = (float)((float)(*v69 * v117) + (float)(v70 * v120)) + (float)(v71 * v123);
    v73 = (float)((float)((float)(*v69 * v116) + (float)(v70 * v119)) + (float)(v71 * v122))
        + (float)((float)((float)(*v69 * v116) + (float)(v70 * v119)) + (float)(v71 * v122));
    v74 = v72 + v72;
    v75 = (float)((float)((float)(*v69 * v118) + (float)(v70 * v121)) + (float)(v71 * v124))
        + (float)((float)((float)(*v69 * v118) + (float)(v70 * v121)) + (float)(v71 * v124));
    v77 = a6[2];
    v76 = a6[3];
    v78 = (float)(v76 * v76) + -0.5;
    v79 = *a6;
    v80 = a6[1];
    v81 = (float)((float)(v74 * v80) + (float)(*a6 * v73)) + (float)(v77 * v75);
    v82 = (float)((float)(v76 * (float)((float)(v80 * v75) - (float)(v77 * v74))) + (float)(v73 * v78))
        + (float)(*a6 * v81);
    v83 = (float)((float)(v76 * (float)((float)(v77 * v73) - (float)(*a6 * v75))) + (float)(v74 * v78))
        + (float)(v80 * v81);
    v84 = (float)((float)(v76 * (float)((float)(*a6 * v74) - (float)(v80 * v73))) + (float)(v75 * v78))
        + (float)(v77 * v81);
    v85 = a6[4];
    v86 = a6[5];
    v87 = v85 + v82;
    v88 = v86 + v83;
    v89 = a6[6];
    v90 = v89 + v84;
    v113 = v87;
    v91 = v114 + (float)((float)((float)(v31 * (float)(v86 + v83)) + (float)(v87 * v30)) + (float)(v90 * v32));
    if (v67 >= 2)
    {
      v92 = v67 - 1;
      v93 = (float *)(20 * *(unsigned __int8 *)(v66 + 71) + v68 + 20);
      do
      {
        v94 = *(v93 - 2);
        v95 = *(v93 - 1);
        v96 = v116 * v94;
        v97 = v117 * v94;
        v98 = v120 * v95;
        v99 = (float)((float)(v118 * v94) + (float)(v121 * v95)) + (float)(v124 * *v93);
        v100 = (float)((float)(v96 + (float)(v119 * v95)) + (float)(v122 * *v93))
             + (float)((float)(v96 + (float)(v119 * v95)) + (float)(v122 * *v93));
        v101 = (float)((float)(v97 + v98) + (float)(v123 * *v93)) + (float)((float)(v97 + v98) + (float)(v123 * *v93));
        v102 = v99 + v99;
        v103 = (float)((float)(v80 * v101) + (float)(v79 * v100)) + (float)(v77 * v102);
        v104 = (float)((float)(v76 * (float)((float)(v101 * (float)-v77) + (float)(v80 * v102))) + (float)(v100 * v78))
             + (float)(v79 * v103);
        v105 = (float)((float)(v76 * (float)((float)(v102 * (float)-v79) + (float)(v77 * v100))) + (float)(v101 * v78))
             + (float)(v80 * v103);
        v106 = (float)((float)(v76 * (float)((float)(v100 * (float)-v80) + (float)(v79 * v101))) + (float)(v102 * v78))
             + (float)(v77 * v103);
        v107 = v86 + v105;
        v108 = v114
             + (float)((float)((float)(v31 * (float)(v86 + v105)) + (float)((float)(v85 + v104) * v30))
                     + (float)((float)(v89 + v106) * v32));
        if (v91 > v108)
        {
          v113 = v85 + v104;
          v88 = v107;
          v90 = v89 + v106;
          v91 = v108;
        }
        v93 += 3;
        --v92;
      }
      while (v92);
    }
    *(float *)(a8 + 40) = v31;
    *(float *)(a8 + 44) = v32;
    *(float *)(a8 + 48) = v91;
    *(float *)(a8 + 24) = v113 - (float)(v30 * v91);
    *(float *)(a8 + 28) = v88 - (float)(v31 * v91);
    *(float *)(a8 + 32) = v90 - (float)(v32 * v91);
    *(float *)(a8 + 36) = v30;
  }
  else
  {
    *(_DWORD *)(a8 + 48) = 0;
    *(_WORD *)(a8 + 20) = 2;
    *(float *)(a8 + 36) = -v48;
    *(float *)(a8 + 40) = -v47;
    *(float *)(a8 + 44) = -v49;
  }
  v29 = 1;
  return v29 & 1;
}

float sweepConvex_CapsuleGeom(uint64_t a1, float *a2, uint64_t a3, float32x4_t *a4, float32x2_t *a5, uint64_t a6, _WORD *a7, double a8, float a9)
{
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  __int16 v28;
  float v29;
  float result;
  float v31;
  float v32;
  __int16 v33;
  float32x2_t v34;
  float v35;
  float v36[7];

  v11 = *a2;
  v12 = a2[1];
  v13 = v11 + v11;
  v15 = a2[2];
  v14 = a2[3];
  v16 = v14 + v14;
  v17 = (float)((float)(v14 * (float)(v14 + v14)) + -1.0) + (float)(v11 * (float)(v11 + v11));
  v18 = (float)(v13 * v12) + (float)(v15 * (float)(v14 + v14));
  v19 = (float)(v13 * v15) - (float)(v12 * v16);
  v21 = *(float *)(a1 + 4);
  v20 = *(float *)(a1 + 8);
  v22 = v17 * v20;
  v23 = v20 * v18;
  v24 = v19 * v20;
  v25 = a2[4];
  v26 = a2[5];
  v27 = a2[6];
  v36[0] = v25 + v22;
  v36[1] = v26 + v23;
  v36[2] = v24 + v27;
  v36[3] = v25 - v22;
  v36[4] = v26 - v23;
  v36[5] = v27 - v24;
  v36[6] = v21;
  v28 = *a7 & 0xFBFF;
  v29 = -a5[1].f32[0];
  v34 = vneg_f32(*a5);
  v35 = v29;
  v33 = v28;
  if (sweepCapsule_ConvexGeom(a3, a4, a1, (int8x8_t *)a2, (uint64_t)v36, &v34, a6, &v33, a8, a9))
  {
    if ((*(_WORD *)(a6 + 20) & 1) != 0)
    {
      v31 = *(float *)(a6 + 48);
      v32 = v31 * a5[1].f32[0];
      *(float32x2_t *)(a6 + 24) = vadd_f32(vmul_n_f32(*a5, v31), *(float32x2_t *)(a6 + 24));
      *(float *)(a6 + 32) = v32 + *(float *)(a6 + 32);
    }
    result = -*(float *)(a6 + 44);
    *(float32x2_t *)(a6 + 36) = vneg_f32(*(float32x2_t *)(a6 + 36));
    *(float *)(a6 + 44) = result;
    *(_DWORD *)(a6 + 16) = -1;
  }
  return result;
}

float sweepConvex_BoxGeom(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, float32x2_t *a5, uint64_t a6, _WORD *a7, float32_t a8, float a9)
{
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int16 v32;
  float result;
  float v34;
  float v35;
  __int16 v36;
  float32x2_t v37;
  int v38;
  float v39[2];
  uint64_t v40;
  unsigned __int32 v41;
  uint64_t v42;
  int32x2_t v43;
  int v44;
  __int128 v45;
  int v46;

  v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2, 1);
  v12 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 2);
  v13 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 3);
  _Q6 = vaddq_f32(*(float32x4_t *)a2, *(float32x4_t *)a2);
  v15 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a2, *(float32x2_t *)_Q6.f32), 0);
  v16 = vmul_lane_f32(v11, *(float32x2_t *)_Q6.f32, 1);
  v17 = vmul_laneq_f32(v12, _Q6, 2);
  v18 = vmul_n_f32(v11, _Q6.f32[0]);
  v19 = vmul_n_f32(v12, _Q6.f32[0]);
  v20 = vmul_n_f32(v13, _Q6.f32[0]);
  v21 = vmul_lane_f32(v12, *(float32x2_t *)_Q6.f32, 1);
  v22 = vmul_lane_f32(v13, *(float32x2_t *)_Q6.f32, 1);
  v23 = vmul_laneq_f32(v13, _Q6, 2);
  __asm { FMOV            V6.2S, #1.0 }
  v28 = vsub_f32(*(float32x2_t *)_Q6.f32, v15);
  LODWORD(v29) = vsub_f32(v19, v22).u32[0];
  LODWORD(v30) = vadd_f32(v21, v20).u32[0];
  v39[0] = (float)(1.0 - v16.f32[1]) - v17.f32[1];
  LODWORD(v39[1]) = vadd_f32(v18, v23).u32[0];
  HIDWORD(v29) = vsub_f32(v18, v23).i32[1];
  v40 = v29;
  v41 = vsub_f32(v28, v17).u32[0];
  HIDWORD(v30) = vadd_f32(v19, v22).i32[1];
  v42 = v30;
  v43 = vzip1_s32((int32x2_t)vsub_f32(v21, v20), (int32x2_t)vsub_f32(v28, v16));
  v44 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)&v31 = *(_QWORD *)(a2 + 20);
  *((_QWORD *)&v31 + 1) = *(_QWORD *)(a1 + 4);
  v45 = v31;
  v46 = *(_DWORD *)(a1 + 12);
  v32 = *a7 & 0xFBFF;
  *(float *)&v31 = -a5[1].f32[0];
  v37 = vneg_f32(*a5);
  v38 = v31;
  v36 = v32;
  if (sweepBox_ConvexGeom(a3, a4, a8, a9, a3, (float32x4_t *)a2, (uint64_t)v39, &v37, a6, &v36))
  {
    if ((*(_WORD *)(a6 + 20) & 1) != 0)
    {
      v34 = *(float *)(a6 + 48);
      v35 = v34 * a5[1].f32[0];
      *(float32x2_t *)(a6 + 24) = vadd_f32(vmul_n_f32(*a5, v34), *(float32x2_t *)(a6 + 24));
      *(float *)(a6 + 32) = v35 + *(float *)(a6 + 32);
    }
    result = -*(float *)(a6 + 44);
    *(float32x2_t *)(a6 + 36) = vneg_f32(*(float32x2_t *)(a6 + 36));
    *(float *)(a6 + 44) = result;
    *(_DWORD *)(a6 + 16) = -1;
  }
  return result;
}

BOOL sweepConvex_ConvexGeom(uint64_t a1, float32x4_t *a2, uint64_t a3, int32x4_t *a4, float32x2_t *a5, uint64_t a6, __int16 *a7, float a8, float a9)
{
  float32x4_t v9;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  int8x8_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x8_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x2_t v59;
  _BOOL4 v65;
  float32x4_t v66;
  int32x4_t v67;
  float v68;
  float32x4_t v69;
  int v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x4_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x4_t v90;
  int32x2_t v91;
  int8x8_t v92;
  float32x4_t v93;
  int8x8_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  _BOOL4 v127;
  float32x4_t v128;
  float32x4_t v129;
  int32x4_t v130;
  float32x4_t v131;
  int v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x2_t v140;
  float32x2_t v141;
  float32x2_t v142;
  float32x4_t v143;
  float32x2_t v144;
  float32x2_t v145;
  float32x2_t v146;
  float32x2_t v147;
  float32x2_t v148;
  float32x2_t v149;
  float32x2_t v150;
  float32x2_t v151;
  float32x2_t v152;
  int8x8_t v153;
  float32x4_t v154;
  int32x2_t v155;
  int8x8_t v156;
  float32x4_t v157;
  int8x8_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x2x2_t v192;
  int32x4_t v193;
  __int16 v194;
  float *v195;
  float *v196;
  int32x4_t v197;
  _BOOL8 v198;
  float32x4_t v199;
  float32x4_t v200;
  float v201;
  float32x2_t v202;
  float32x2_t v203;
  float32x4_t v204;
  int8x8_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  uint64_t v210;
  float32x4_t v211;
  int8x8_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x2_t v219;
  float32x2_t v220;
  int v221;
  float32x2_t v222;
  float32x2_t v223;
  int v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  int8x16_t v228;
  float32x4_t v229;
  float32x2_t v230;
  float v231;
  float32x4_t v232;
  float32x2_t v233;
  float32x2_t v234;
  float32x2_t v235;
  int8x8_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  uint64_t v241;
  float32x4_t v242;
  float32x2_t v243;
  int8x8_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x2_t v251;
  float32x2_t v252;
  int v253;
  float32x2_t v254;
  float32x2_t v255;
  int v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  int8x16_t v260;
  float v261;
  float32x2_t v263;
  float v264;
  float32x4_t v265;
  float32x2_t v266;
  float32x4_t v267;
  float32x4_t v268;
  _QWORD v270[2];
  float32x4_t v271;
  int32x4_t *v272;
  int32x4_t v273;
  int32x4_t v274;
  _OWORD v275[2];
  float32x4_t v276;
  int8x16_t v277;
  float32x2_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  uint64_t v284;
  float32x4_t v285;
  unsigned int v286;
  float32x4_t v287;
  float32x2_t v288;
  uint64_t v289;
  char v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char v300;
  float32x4_t v301;
  __int128 v302;
  char v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  char v313;
  uint64_t v314;
  float32x2x2_t v315;

  v314 = *MEMORY[0x24BDAC8D0];
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a3 + 32);
  v285 = 0uLL;
  v284 = 0;
  v18 = *(float32x4_t *)(a1 + 4);
  v19 = v18;
  v19.i32[3] = 0;
  v20 = *(float32x4_t *)(a1 + 16);
  v21 = *(float32x4_t *)(a3 + 4);
  v22 = *(float32x4_t *)(a3 + 16);
  v23.i64[0] = a2[1].i64[0];
  v24 = *a2;
  v23.i64[1] = a2[1].u32[2];
  v25 = *(float32x4_t *)a4;
  v26.i64[0] = a4[1].i64[0];
  v26.i64[1] = a4[1].u32[2];
  *(float32x2_t *)v9.f32 = *a5;
  v9.i32[2] = a5[1].i32[0];
  v27 = vmulq_n_f32(v9, a8);
  v28 = v27;
  v28.i32[3] = 0;
  v29 = *(float32x4_t *)a4;
  v29.i32[3] = 0;
  v265 = (float32x4_t)vdupq_laneq_s32(*a4, 3);
  LODWORD(v30) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v265.f32, *(float32x2_t *)v265.f32).u32[0];
  v31 = vmulq_n_f32(v28, v30);
  v31.i32[3] = 0;
  v32 = (float32x2_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
  v33 = (float32x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
  v34 = (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v32, 4uLL);
  v263 = v32;
  v35 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->i8, (float32x2_t)vext_s8(*(int8x8_t *)v27.f32, (int8x8_t)v33, 4uLL)), v34, *(float32x2_t *)v27.f32);
  *(int8x8_t *)v27.f32 = vext_s8(v35, (int8x8_t)vmls_f32(vmul_f32(v32, *(float32x2_t *)v27.f32), *(float32x2_t *)a4->i8, v33), 4uLL);
  v27.i64[1] = v35.u32[0];
  v36 = vmlsq_laneq_f32(v31, v27, *(float32x4_t *)a4, 3);
  v36.i64[1] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u32[0];
  v37 = vmulq_f32(v29, v28);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  v267 = v29;
  v268 = v26;
  v38 = vmlaq_n_f32(v36, v29, vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32).f32[0]);
  v39 = vaddq_f32(v38, v38);
  v39.i32[3] = 0;
  v283 = v39;
  v40 = vnegq_f32(v25);
  v41 = v40;
  v41.i32[3] = 0;
  v42 = vsubq_f32(v23, v26);
  v264 = v30;
  v43 = vmulq_n_f32(v42, v30);
  v43.i32[3] = 0;
  v44 = (float32x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
  v45 = (float32x2_t)vext_s8(*(int8x8_t *)v40.f32, (int8x8_t)v44, 4uLL);
  *(float32x2_t *)v26.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v40.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v42, (int8x16_t)v42, 4uLL)), v45, *(float32x2_t *)v42.f32);
  *(int8x8_t *)v46.f32 = vext_s8(*(int8x8_t *)v26.f32, (int8x8_t)vmls_f32(vmul_f32(v44, *(float32x2_t *)v42.f32), *(float32x2_t *)v40.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL)), 4uLL);
  v46.i64[1] = v26.u32[0];
  v47 = vmlaq_laneq_f32(v43, v46, v25, 3);
  v47.i64[1] = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u32[0];
  v48 = vmulq_f32(v41, v42);
  v48.i64[0] = vpaddq_f32(v48, v48).u64[0];
  v49 = vmlaq_n_f32(v47, v41, vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32).f32[0]);
  v50 = vaddq_f32(v49, v49);
  v50.i32[3] = 0;
  v51 = v24;
  v51.i32[3] = 0;
  *(float32x2_t *)v28.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL));
  v52 = vmulq_f32(v51, v41);
  v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
  v53 = vmulq_laneq_f32(v41, v24, 3);
  v266 = *(float32x2_t *)v25.f32;
  v54 = vmulq_laneq_f32(v51, v25, 3);
  v51.i64[0] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
  v55 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v24.f32, *(int8x8_t *)v51.f32, 4uLL), *(float32x2_t *)v40.f32), v45, *(float32x2_t *)v24.f32);
  *(int8x8_t *)v24.f32 = vext_s8(v55, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v24.f32, v44), *(float32x2_t *)v40.f32, *(float32x2_t *)v51.f32), 4uLL);
  *(int8x8_t *)&v24.u32[2] = v55;
  v56 = vaddq_f32(vaddq_f32(v53, v54), v24);
  *(int32x2_t *)v40.f32 = vdup_lane_s32(*(int32x2_t *)v56.f32, 1);
  *(int32x2_t *)v53.f32 = vdup_laneq_s32((int32x4_t)v56, 2);
  v57 = vaddq_f32(v56, v56);
  *(float32x2_t *)v28.f32 = vsub_f32(*(float32x2_t *)v28.f32, vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32));
  *(int32x2_t *)v51.f32 = vdup_laneq_s32((int32x4_t)v57, 2);
  *(int32x2_t *)v56.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v57.f32), 0);
  v58 = vmul_lane_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v57.f32, 1);
  v59 = vmul_laneq_f32(*(float32x2_t *)v53.f32, v57, 2);
  *(float32x2_t *)v40.f32 = vmul_n_f32(*(float32x2_t *)v40.f32, v57.f32[0]);
  *(float32x2_t *)v25.f32 = vmul_n_f32(*(float32x2_t *)v53.f32, v57.f32[0]);
  *(float32x2_t *)v52.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.f32, 0), *(float32x2_t *)v28.f32, 1);
  *(float32x2_t *)v53.f32 = vmul_lane_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v57.f32, 1);
  *(float32x2_t *)v57.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.f32, 1), *(float32x2_t *)v28.f32, 1);
  *(float32x2_t *)v28.f32 = vmul_lane_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v28.f32, 1);
  __asm { FMOV            V8.2S, #1.0 }
  *(int8x8_t *)v51.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v58), v59), (int8x8_t)vadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v28.f32), 4uLL);
  v51.i64[1] = vsub_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v57.f32).u32[0];
  *(float32x2_t *)v56.f32 = vsub_f32(_D8, *(float32x2_t *)v56.f32);
  *(int8x8_t *)v40.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v28.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v56.f32, v59), 4uLL);
  v40.i64[1] = vadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v52.f32).u32[0];
  *(int8x8_t *)v28.f32 = vext_s8((int8x8_t)vadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v57.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v52.f32), 4uLL);
  v28.i64[1] = vsub_f32(*(float32x2_t *)v56.f32, v58).u32[0];
  v279 = (int32x4_t)v51;
  v280 = (int32x4_t)v40;
  v281 = (int32x4_t)v28;
  v282 = v50;
  v65 = *(float *)(a1 + 4) == 1.0 && *(float *)(a1 + 8) == 1.0 && *(float *)(a1 + 12) == 1.0;
  v303 = 0;
  v301 = 0u;
  v302 = 0u;
  v310 = v16 + 32;
  v312 = *(_QWORD *)(v16 + 72) + 20 * *(unsigned __int8 *)(v16 + 71);
  v313 = *(_BYTE *)(v16 + 70);
  v66.i64[0] = *(_QWORD *)(v16 + 92);
  v66.i64[1] = *(unsigned int *)(v16 + 100);
  v67 = (int32x4_t)vmulq_f32(v19, v66);
  *(float32x2_t *)v67.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v67, 2), *(float32x2_t *)v67.i8);
  v68 = vpmin_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8).f32[0];
  *(float32x2_t *)&v302 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v68);
  *((float *)&v302 + 2) = 0.025 * v68;
  if (v65)
  {
    v304 = xmmword_2260E5F10;
    v305 = xmmword_2260E5F20;
    v306 = xmmword_2260E5F40;
    v307 = xmmword_2260E5F10;
    v308 = xmmword_2260E5F20;
    v309 = xmmword_2260E5F40;
  }
  else
  {
    v69 = vrecpeq_f32(v19);
    v70 = 4;
    do
    {
      v69 = vmulq_f32(v69, vrecpsq_f32(v69, v19));
      --v70;
    }
    while (v70);
    *(int32x2_t *)v71.f32 = vdup_lane_s32(*(int32x2_t *)v18.f32, 0);
    v71.i64[1] = v71.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v71, v19)), *(int8x8_t *)v29.f32).u32[0] & 0xFFFFFF) != 0)
    {
      v78 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.f32, 1);
      v79 = (float32x2_t)vdup_laneq_s32((int32x4_t)v20, 2);
      v80 = (float32x2_t)vdup_laneq_s32((int32x4_t)v20, 3);
      v81 = vaddq_f32(v20, v20);
      v82 = vmul_lane_f32(v78, *(float32x2_t *)v81.f32, 1);
      v83 = vmul_laneq_f32(v79, v81, 2);
      v84 = vmul_n_f32(v78, v81.f32[0]);
      v85 = vmul_n_f32(v79, v81.f32[0]);
      v86 = vmul_n_f32(v80, v81.f32[0]);
      v87 = vmul_lane_f32(v79, *(float32x2_t *)v81.f32, 1);
      v88 = vmul_lane_f32(v80, *(float32x2_t *)v81.f32, 1);
      v89 = vmul_laneq_f32(v80, v81, 2);
      *(float32x2_t *)v81.f32 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v81.f32), 0));
      *(int8x8_t *)v90.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v82), v83), (int8x8_t)vadd_f32(v84, v89), 4uLL);
      v90.i64[1] = vsub_f32(v85, v88).u32[0];
      v91 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v84, v89), (int8x8_t)vsub_f32(*(float32x2_t *)v81.f32, v83), 4uLL);
      v92 = (int8x8_t)vadd_f32(v85, v88);
      *(int8x8_t *)v93.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v90.f32, 0), (int8x8_t)v91, 4uLL);
      v94 = (int8x8_t)vdup_lane_s32(v91, 1);
      *(int32x2_t *)v95.f32 = v91;
      v95.i64[1] = vadd_f32(v87, v86).u32[0];
      *(int8x8_t *)v96.f32 = vext_s8(v92, (int8x8_t)vsub_f32(v87, v86), 4uLL);
      *(int8x8_t *)v97.f32 = vext_s8(*(int8x8_t *)v90.f32, v94, 4uLL);
      v96.i64[1] = vsub_f32(*(float32x2_t *)v81.f32, v82).u32[0];
      v93.i64[1] = vdup_lane_s32(*(int32x2_t *)v96.f32, 0).u32[0];
      v97.i64[1] = vdup_lane_s32(*(int32x2_t *)v96.f32, 1).u32[0];
      *(int8x8_t *)v98.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v90.u32[2], 0), (int8x8_t)v95.u32[2], 4uLL);
      v98.i64[1] = vdup_lane_s32(*(int32x2_t *)&v96.u32[2], 0).u32[0];
      v99 = vmulq_n_f32(v93, v18.f32[0]);
      v99.i32[3] = 0;
      v100 = vmulq_lane_f32(v97, *(float32x2_t *)v18.f32, 1);
      v100.i32[3] = 0;
      v101 = vmulq_laneq_f32(v98, v18, 2);
      v101.i32[3] = 0;
      v102 = vmulq_n_f32(v99, v90.f32[0]);
      v102.i32[3] = 0;
      v103 = vmulq_lane_f32(v100, *(float32x2_t *)v90.f32, 1);
      v103.i32[3] = 0;
      v104 = vmulq_laneq_f32(v101, v90, 2);
      v104.i32[3] = 0;
      v72 = vaddq_f32(v104, vaddq_f32(v102, v103));
      v105 = vmulq_n_f32(v99, v95.f32[0]);
      v105.i32[3] = 0;
      v106 = vmulq_lane_f32(v100, *(float32x2_t *)v95.f32, 1);
      v106.i32[3] = 0;
      v107 = vmulq_laneq_f32(v101, v95, 2);
      v107.i32[3] = 0;
      v108 = vaddq_f32(v105, v106);
      v109 = vmulq_n_f32(v99, v96.f32[0]);
      v109.i32[3] = 0;
      v110 = vmulq_lane_f32(v100, *(float32x2_t *)v96.f32, 1);
      v110.i32[3] = 0;
      v111 = vmulq_laneq_f32(v101, v96, 2);
      v111.i32[3] = 0;
      v73 = vaddq_f32(v107, v108);
      v74 = vaddq_f32(v111, vaddq_f32(v109, v110));
      v304 = (__int128)v72;
      v305 = (__int128)v73;
      v306 = (__int128)v74;
      v112 = vmulq_n_f32(v93, v69.f32[0]);
      v112.i32[3] = 0;
      v113 = vmulq_lane_f32(v97, *(float32x2_t *)v69.f32, 1);
      v113.i32[3] = 0;
      v114 = vmulq_laneq_f32(v98, v69, 2);
      v114.i32[3] = 0;
      v115 = vmulq_n_f32(v112, v90.f32[0]);
      v115.i32[3] = 0;
      v116 = vmulq_lane_f32(v113, *(float32x2_t *)v90.f32, 1);
      v116.i32[3] = 0;
      v117 = vmulq_laneq_f32(v114, v90, 2);
      v117.i32[3] = 0;
      v75 = vaddq_f32(v117, vaddq_f32(v115, v116));
      v118 = vmulq_n_f32(v112, v95.f32[0]);
      v118.i32[3] = 0;
      v119 = vmulq_lane_f32(v113, *(float32x2_t *)v95.f32, 1);
      v119.i32[3] = 0;
      v120 = vmulq_laneq_f32(v114, v95, 2);
      v120.i32[3] = 0;
      v121 = vmulq_n_f32(v112, v96.f32[0]);
      v121.i32[3] = 0;
      v122 = vmulq_lane_f32(v113, *(float32x2_t *)v96.f32, 1);
      v122.i32[3] = 0;
      v76 = vaddq_f32(v120, vaddq_f32(v118, v119));
      v123 = vmulq_laneq_f32(v114, v96, 2);
      v123.i32[3] = 0;
      v77 = vaddq_f32(v123, vaddq_f32(v121, v122));
    }
    else
    {
      v69.i32[3] = 0;
      v72 = vmulq_f32(v19, (float32x4_t)xmmword_2260E5F10);
      v73 = vmulq_f32(v19, (float32x4_t)xmmword_2260E5F20);
      v74 = vmulq_f32(v19, (float32x4_t)xmmword_2260E5F40);
      v304 = (__int128)v72;
      v305 = (__int128)v73;
      v306 = (__int128)v74;
      v75 = vmulq_f32(v69, (float32x4_t)xmmword_2260E5F10);
      v76 = vmulq_f32(v69, (float32x4_t)xmmword_2260E5F20);
      v77 = vmulq_f32(v69, (float32x4_t)xmmword_2260E5F40);
    }
    v308 = (__int128)v76;
    v309 = (__int128)v77;
    v124 = vmulq_f32(v72, (float32x4_t)0);
    v124.i32[3] = 0;
    v125 = vmulq_f32(v73, (float32x4_t)0);
    v125.i32[3] = 0;
    v126 = vmulq_f32(v74, (float32x4_t)0);
    v126.i32[3] = 0;
    v307 = (__int128)v75;
    v301 = vaddq_f32(v126, vaddq_f32(v125, v124));
  }
  v127 = 0;
  v128 = v21;
  v128.i32[3] = 0;
  v311 = *(_QWORD *)(v16 + 80);
  if (*(float *)(a3 + 4) == 1.0 && *(float *)(a3 + 8) == 1.0)
    v127 = *(float *)(a3 + 12) == 1.0;
  v290 = 0;
  v297 = v17 + 32;
  v299 = *(_QWORD *)(v17 + 72) + 20 * *(unsigned __int8 *)(v17 + 71);
  v300 = *(_BYTE *)(v17 + 70);
  v129.i64[0] = *(_QWORD *)(v17 + 92);
  v129.i32[2] = *(_DWORD *)(v17 + 100);
  v287 = 0u;
  v129.i64[1] = v129.u32[2];
  v130 = (int32x4_t)vmulq_f32(v128, v129);
  *(float32x2_t *)v130.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v130, 2), *(float32x2_t *)v130.i8);
  *(float *)v130.i32 = vpmin_f32(*(float32x2_t *)v130.i8, *(float32x2_t *)v130.i8).f32[0];
  v288 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v130.i32);
  v289 = COERCE_UNSIGNED_INT(0.025 * *(float *)v130.i32);
  if (v127)
  {
    v291 = xmmword_2260E5F10;
    v292 = xmmword_2260E5F20;
    v293 = xmmword_2260E5F40;
    v294 = xmmword_2260E5F10;
    v295 = xmmword_2260E5F20;
    v296 = xmmword_2260E5F40;
  }
  else
  {
    v131 = vrecpeq_f32(v128);
    v132 = 4;
    do
    {
      v131 = vmulq_f32(v131, vrecpsq_f32(v131, v128));
      --v132;
    }
    while (v132);
    *(int32x2_t *)v133.f32 = vdup_lane_s32(*(int32x2_t *)v21.f32, 0);
    v133.i64[1] = v133.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v133, v128)), *(int8x8_t *)v29.f32).u32[0] & 0xFFFFFF) != 0)
    {
      v140 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.f32, 1);
      v141 = (float32x2_t)vdup_laneq_s32((int32x4_t)v22, 2);
      v142 = (float32x2_t)vdup_laneq_s32((int32x4_t)v22, 3);
      v143 = vaddq_f32(v22, v22);
      v144 = vmul_lane_f32(v140, *(float32x2_t *)v143.f32, 1);
      v145 = vmul_laneq_f32(v141, v143, 2);
      v146 = vmul_n_f32(v140, v143.f32[0]);
      v147 = vmul_n_f32(v141, v143.f32[0]);
      v148 = vmul_n_f32(v142, v143.f32[0]);
      v149 = vmul_lane_f32(v141, *(float32x2_t *)v143.f32, 1);
      v150 = vmul_lane_f32(v142, *(float32x2_t *)v143.f32, 1);
      v151 = vmul_laneq_f32(v142, v143, 2);
      v152 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v143.f32), 0));
      *(int8x8_t *)v143.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v144), v145), (int8x8_t)vadd_f32(v146, v151), 4uLL);
      v153 = (int8x8_t)vsub_f32(v146, v151);
      v154.i64[0] = v143.i64[0];
      v154.i64[1] = vsub_f32(v147, v150).u32[0];
      v155 = (int32x2_t)vext_s8(v153, (int8x8_t)vsub_f32(v152, v145), 4uLL);
      v156 = (int8x8_t)vadd_f32(v147, v150);
      *(int8x8_t *)v157.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v143.f32, 0), (int8x8_t)v155, 4uLL);
      v158 = (int8x8_t)vdup_lane_s32(v155, 1);
      *(int32x2_t *)v159.f32 = v155;
      v159.i64[1] = vadd_f32(v149, v148).u32[0];
      v155.i32[0] = vsub_f32(v152, v144).u32[0];
      *(int8x8_t *)v160.f32 = vext_s8(v156, (int8x8_t)vsub_f32(v149, v148), 4uLL);
      *(int8x8_t *)v161.f32 = vext_s8(*(int8x8_t *)v143.f32, v158, 4uLL);
      v160.i64[1] = v155.u32[0];
      v157.i64[1] = vdup_lane_s32(*(int32x2_t *)v160.f32, 0).u32[0];
      v161.i64[1] = vdup_lane_s32(*(int32x2_t *)v160.f32, 1).u32[0];
      *(int8x8_t *)v162.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v154.u32[2], 0), (int8x8_t)v159.u32[2], 4uLL);
      v162.i64[1] = vdup_lane_s32((int32x2_t)v155.u32[0], 0).u32[0];
      v163 = vmulq_n_f32(v157, v21.f32[0]);
      v163.i32[3] = 0;
      v164 = vmulq_lane_f32(v161, *(float32x2_t *)v21.f32, 1);
      v164.i32[3] = 0;
      v165 = vmulq_laneq_f32(v162, v21, 2);
      v165.i32[3] = 0;
      v166 = vmulq_n_f32(v163, v154.f32[0]);
      v166.i32[3] = 0;
      v167 = vmulq_lane_f32(v164, *(float32x2_t *)v154.f32, 1);
      v167.i32[3] = 0;
      v168 = vmulq_laneq_f32(v165, v154, 2);
      v168.i32[3] = 0;
      v134 = vaddq_f32(v168, vaddq_f32(v166, v167));
      v169 = vmulq_n_f32(v163, v159.f32[0]);
      v169.i32[3] = 0;
      v170 = vmulq_lane_f32(v164, *(float32x2_t *)v159.f32, 1);
      v170.i32[3] = 0;
      v171 = vmulq_laneq_f32(v165, v159, 2);
      v171.i32[3] = 0;
      v172 = vaddq_f32(v169, v170);
      v173 = vmulq_n_f32(v163, v160.f32[0]);
      v173.i32[3] = 0;
      v174 = vmulq_lane_f32(v164, *(float32x2_t *)v160.f32, 1);
      v174.i32[3] = 0;
      v175 = vmulq_laneq_f32(v165, v160, 2);
      v175.i32[3] = 0;
      v135 = vaddq_f32(v171, v172);
      v136 = vaddq_f32(v175, vaddq_f32(v173, v174));
      v291 = (__int128)v134;
      v292 = (__int128)v135;
      v293 = (__int128)v136;
      v176 = vmulq_n_f32(v157, v131.f32[0]);
      v176.i32[3] = 0;
      v177 = vmulq_lane_f32(v161, *(float32x2_t *)v131.f32, 1);
      v177.i32[3] = 0;
      v178 = vmulq_laneq_f32(v162, v131, 2);
      v178.i32[3] = 0;
      v179 = vmulq_n_f32(v176, v154.f32[0]);
      v179.i32[3] = 0;
      v180 = vmulq_lane_f32(v177, *(float32x2_t *)v154.f32, 1);
      v180.i32[3] = 0;
      v181 = vmulq_laneq_f32(v178, v154, 2);
      v181.i32[3] = 0;
      v137 = vaddq_f32(v181, vaddq_f32(v179, v180));
      v182 = vmulq_n_f32(v176, v159.f32[0]);
      v182.i32[3] = 0;
      v183 = vmulq_lane_f32(v177, *(float32x2_t *)v159.f32, 1);
      v183.i32[3] = 0;
      v184 = vmulq_laneq_f32(v178, v159, 2);
      v184.i32[3] = 0;
      v185 = vmulq_n_f32(v176, v160.f32[0]);
      v185.i32[3] = 0;
      v186 = vmulq_lane_f32(v177, *(float32x2_t *)v160.f32, 1);
      v186.i32[3] = 0;
      v138 = vaddq_f32(v184, vaddq_f32(v182, v183));
      v187 = vmulq_laneq_f32(v178, v160, 2);
      v187.i32[3] = 0;
      v139 = vaddq_f32(v187, vaddq_f32(v185, v186));
    }
    else
    {
      v131.i32[3] = 0;
      v134 = vmulq_f32(v128, (float32x4_t)xmmword_2260E5F10);
      v135 = vmulq_f32(v128, (float32x4_t)xmmword_2260E5F20);
      v136 = vmulq_f32(v128, (float32x4_t)xmmword_2260E5F40);
      v291 = (__int128)v134;
      v292 = (__int128)v135;
      v293 = (__int128)v136;
      v137 = vmulq_f32(v131, (float32x4_t)xmmword_2260E5F10);
      v138 = vmulq_f32(v131, (float32x4_t)xmmword_2260E5F20);
      v139 = vmulq_f32(v131, (float32x4_t)xmmword_2260E5F40);
    }
    v295 = (__int128)v138;
    v296 = (__int128)v139;
    v188 = vmulq_f32(v134, (float32x4_t)0);
    v188.i32[3] = 0;
    v189 = vmulq_f32(v135, (float32x4_t)0);
    v189.i32[3] = 0;
    v190 = vmulq_f32(v136, (float32x4_t)0);
    v190.i32[3] = 0;
    v294 = (__int128)v137;
    v287 = vaddq_f32(v190, vaddq_f32(v189, v188));
  }
  v191 = v282;
  v273 = v279;
  v274 = v280;
  v275[0] = v281;
  v192 = (float32x2x2_t)vzip1q_s32(v279, v281);
  v315.val[0] = (float32x2_t)vzip2q_s32(v279, v281).u64[0];
  v193 = vzip1q_s32(v280, (int32x4_t)0);
  v315.val[1] = (float32x2_t)vzip2q_s32(v280, (int32x4_t)0).u64[0];
  v298 = *(_QWORD *)(v17 + 80);
  v194 = *a7;
  v278 = 0;
  v276 = 0u;
  v277 = 0u;
  v271.i64[0] = (uint64_t)off_24ED91490;
  v271.i64[1] = (uint64_t)&v301;
  v272 = &v279;
  v195 = (float *)&v273;
  v196 = (float *)v275;
  v197 = vzip2q_s32((int32x4_t)v192, v193);
  vst2_f32(v195, v192);
  v275[1] = v191;
  vst2_f32(v196, v315);
  v274 = v197;
  v270[0] = off_24ED91168;
  v270[1] = &v287;
  *(float *)v197.i32 = a9;
  v198 = physx::Gu::gjkRaycastPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v271, (uint64_t)v270, &v282, (uint64_t)&v284, &v285, &v283, &v278, &v276, *(int32x2_t *)v197.i8, &v277, (v194 & 0x200) != 0);
  if (v198)
  {
    v199 = *(float32x4_t *)a4;
    v200.i64[0] = a4[1].i64[0];
    v200.i32[2] = a4[1].i32[2];
    *(_WORD *)(a6 + 20) = 2;
    v201 = v278.f32[0];
    if (v278.f32[0] <= 0.0)
    {
      if ((v194 & 0x200) != 0)
      {
        v200.i32[3] = 0;
        v229 = v199;
        v229.i32[3] = 0;
        v230 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v199, 3).u64[0];
        LODWORD(v231) = vmla_f32((float32x2_t)0xBF000000BF000000, v230, v230).u32[0];
        v232 = vmulq_n_f32((float32x4_t)v277, v231);
        v232.i32[3] = 0;
        v233 = (float32x2_t)vextq_s8((int8x16_t)v229, (int8x16_t)v229, 8uLL).u64[0];
        v234 = (float32x2_t)vextq_s8(v277, v277, 8uLL).u64[0];
        v235 = (float32x2_t)vext_s8(*(int8x8_t *)v199.f32, (int8x8_t)v233, 4uLL);
        v236 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v199.f32, (float32x2_t)vext_s8(*(int8x8_t *)v277.i8, (int8x8_t)v234, 4uLL)), v235, *(float32x2_t *)v277.i8);
        *(int8x8_t *)v237.f32 = vext_s8(v236, (int8x8_t)vmls_f32(vmul_f32(v233, *(float32x2_t *)v277.i8), *(float32x2_t *)v199.f32, v234), 4uLL);
        v237.i64[1] = v236.u32[0];
        v238 = vmlaq_laneq_f32(v232, v237, v199, 3);
        v238.i64[1] = vextq_s8((int8x16_t)v238, (int8x16_t)v238, 8uLL).u32[0];
        v239 = vmulq_f32(v229, (float32x4_t)v277);
        v239.i64[0] = vpaddq_f32(v239, v239).u64[0];
        v240 = vmlaq_n_f32(v238, v229, vpadd_f32(*(float32x2_t *)v239.f32, *(float32x2_t *)v239.f32).f32[0]);
        v241 = vextq_s8((int8x16_t)v240, (int8x16_t)v240, 8uLL).u32[0];
        v242 = vmulq_n_f32(v276, v231);
        v242.i32[3] = 0;
        v243 = (float32x2_t)vextq_s8((int8x16_t)v276, (int8x16_t)v276, 8uLL).u64[0];
        v244 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v199.f32, (float32x2_t)vext_s8(*(int8x8_t *)v276.f32, (int8x8_t)v243, 4uLL)), v235, *(float32x2_t *)v276.f32);
        *(int8x8_t *)v245.f32 = vext_s8(v244, (int8x8_t)vmls_f32(vmul_f32(v233, *(float32x2_t *)v276.f32), *(float32x2_t *)v199.f32, v243), 4uLL);
        v245.i64[1] = v244.u32[0];
        v246 = vmlaq_laneq_f32(v242, v245, v199, 3);
        v246.i64[1] = vextq_s8((int8x16_t)v246, (int8x16_t)v246, 8uLL).u32[0];
        v247 = vmulq_f32(v229, v276);
        v247.i64[0] = vpaddq_f32(v247, v247).u64[0];
        v248 = vmlaq_n_f32(v246, v229, vpadd_f32(*(float32x2_t *)v247.f32, *(float32x2_t *)v247.f32).f32[0]);
        v249 = vaddq_f32(v248, v248);
        v249.i32[3] = 0;
        *(_WORD *)(a6 + 20) = 3;
        v250 = vmulq_f32(v249, v249);
        v250.i64[0] = vpaddq_f32(v250, v250).u64[0];
        v251 = vpadd_f32(*(float32x2_t *)v250.f32, *(float32x2_t *)v250.f32);
        v252 = vrsqrte_f32(v251);
        v253 = 4;
        do
        {
          v252 = vmul_f32(v252, vrsqrts_f32(vmul_f32(v252, v252), v251));
          --v253;
        }
        while (v253);
        v254 = vmul_f32(v251, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v251), 0), (int8x8_t)_D8, (int8x8_t)v252));
        v255 = vrecpe_f32(v254);
        v256 = 4;
        do
        {
          v255 = vmul_f32(v255, vrecps_f32(v254, v255));
          --v256;
        }
        while (v256);
        v240.i64[1] = v241;
        v257.i64[0] = 0x4000000040000000;
        v257.i64[1] = 0x4000000040000000;
        v258 = vmlaq_f32(v200, v257, v240);
        v259 = vmulq_n_f32(v249, v255.f32[0]);
        v259.i32[3] = 0;
        v260 = (int8x16_t)vnegq_f32(v259);
        *(_QWORD *)(a6 + 40) = vextq_s8(v260, v260, 4uLL).u64[0];
        v258.i32[3] = v260.i32[0];
        *(float32x4_t *)(a6 + 24) = v258;
        *(float *)(a6 + 48) = v201;
      }
      else
      {
        *(_DWORD *)(a6 + 48) = 0;
        v261 = -a5[1].f32[0];
        *(float32x2_t *)(a6 + 36) = vneg_f32(*a5);
        *(float *)(a6 + 44) = v261;
      }
      *(_DWORD *)(a6 + 16) = -1;
    }
    else
    {
      v202 = (float32x2_t)vextq_s8((int8x16_t)v276, (int8x16_t)v276, 8uLL).u64[0];
      v203 = (float32x2_t)vextq_s8(v277, v277, 8uLL).u64[0];
      v204 = vmulq_n_f32((float32x4_t)v277, v264);
      v204.i32[3] = 0;
      v205 = (int8x8_t)vmls_f32(vmul_f32(v266, (float32x2_t)vext_s8(*(int8x8_t *)v277.i8, (int8x8_t)v203, 4uLL)), v34, *(float32x2_t *)v277.i8);
      *(int8x8_t *)v206.f32 = vext_s8(v205, (int8x8_t)vmls_f32(vmul_f32(v263, *(float32x2_t *)v277.i8), v266, v203), 4uLL);
      v206.i64[1] = v205.u32[0];
      v207 = vmlaq_f32(v204, v265, v206);
      v207.i64[1] = vextq_s8((int8x16_t)v207, (int8x16_t)v207, 8uLL).u32[0];
      v208 = vmulq_f32(v267, (float32x4_t)v277);
      v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
      v209 = vmlaq_n_f32(v207, v267, vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32).f32[0]);
      v210 = vextq_s8((int8x16_t)v209, (int8x16_t)v209, 8uLL).u32[0];
      v211 = vmulq_n_f32(v276, v264);
      v211.i32[3] = 0;
      v212 = (int8x8_t)vmls_f32(vmul_f32(v266, (float32x2_t)vext_s8(*(int8x8_t *)v276.f32, (int8x8_t)v202, 4uLL)), v34, *(float32x2_t *)v276.f32);
      *(int8x8_t *)v213.f32 = vext_s8(v212, (int8x8_t)vmls_f32(vmul_f32(v263, *(float32x2_t *)v276.f32), v266, v202), 4uLL);
      v213.i64[1] = v212.u32[0];
      v214 = vmlaq_f32(v211, v265, v213);
      v214.i64[1] = vextq_s8((int8x16_t)v214, (int8x16_t)v214, 8uLL).u32[0];
      v215 = vmulq_f32(v267, v276);
      v215.i64[0] = vpaddq_f32(v215, v215).u64[0];
      v216 = vmlaq_n_f32(v214, v267, vpadd_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32).f32[0]);
      v217 = vaddq_f32(v216, v216);
      v217.i32[3] = 0;
      *(_WORD *)(a6 + 20) = 3;
      v218 = vmulq_f32(v217, v217);
      v218.i64[0] = vpaddq_f32(v218, v218).u64[0];
      v219 = vpadd_f32(*(float32x2_t *)v218.f32, *(float32x2_t *)v218.f32);
      v220 = vrsqrte_f32(v219);
      v221 = 4;
      do
      {
        v220 = vmul_f32(v220, vrsqrts_f32(vmul_f32(v220, v220), v219));
        --v221;
      }
      while (v221);
      v222 = vmul_f32(v219, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v219), 0), (int8x8_t)_D8, (int8x8_t)v220));
      v223 = vrecpe_f32(v222);
      v224 = 4;
      do
      {
        v223 = vmul_f32(v223, vrecps_f32(v222, v223));
        --v224;
      }
      while (v224);
      v209.i64[1] = v210;
      v225.i64[0] = 0x4000000040000000;
      v225.i64[1] = 0x4000000040000000;
      v226 = vmulq_n_f32(v217, v223.f32[0]);
      v226.i32[3] = 0;
      v227 = vmlaq_f32(v268, v225, v209);
      v228 = (int8x16_t)vnegq_f32(v226);
      v227.i32[3] = v228.i32[0];
      *(float32x4_t *)(a6 + 24) = v227;
      *(_QWORD *)(a6 + 40) = vextq_s8(v228, v228, 4uLL).u64[0];
      *(float *)(a6 + 48) = v201 * a8;
      if ((*((_BYTE *)a7 + 1) & 4) != 0)
      {
        v286 = *(unsigned __int8 *)(v16 + 71);
        *(_DWORD *)(a6 + 16) = computeSweepConvexPlane(a1, v16 + 32, &v286, a2->f32, (float *)(a6 + 24), (float *)a5);
        *(_WORD *)(a6 + 20) |= 0x400u;
      }
    }
  }
  return v198;
}

BOOL physx::Gu::gjkRaycastPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5, float32x4_t *a6, float32x2_t *a7, float32x4_t *a8, int32x2_t a9, int8x16_t *a10, char a11)
{
  _BOOL8 v17;
  double v18;
  int32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x2x2_t v24;
  int32x4_t v25;
  float32x2x2_t v26;
  int32x4_t v27;
  unint64_t v28;
  float *v29;
  float *v30;
  int32x4_t v31;
  float32x2_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v41;
  float32x4_t v42;
  float32x2_t v43;
  float32x2_t v44;
  int v45;
  float32x2_t v46;
  float32x2_t v47;
  int v48;
  _QWORD v49[2];
  float32x4_t v50;
  uint64_t v51;
  int32x4_t v52;
  int32x4_t v53;
  _OWORD v54[2];
  char v55;
  char v56[4];
  char v57[4];
  int32x2_t v58;
  float32x2_t v59;
  float32x4_t v60;
  int8x16_t v61;
  _OWORD v62[2];
  float32x4_t v63;
  float32x2_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v60 = 0u;
  v61 = 0u;
  v59 = 0;
  v17 = physx::Gu::gjkRaycast<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(a1, a2, a3, a9, a4, a5, a6, &v59, &v60, &v61);
  if (v17)
  {
    v19 = (int32x2_t)v59;
    *a7 = v59;
    if (*(float *)v19.i32 == 0.0 && (a11 & 1) != 0)
    {
      v20 = a1->i64[1];
      v21 = a1[1].i64[0];
      v19.i32[0] = *(_DWORD *)(v20 + 16);
      v22 = *(_QWORD *)(a2 + 8);
      LODWORD(v18) = *(_DWORD *)(v22 + 16);
      v64 = 0;
      memset(v62, 0, sizeof(v62));
      v63 = 0u;
      v50.i64[0] = (uint64_t)off_24ED91490;
      v50.i64[1] = v20;
      v51 = v21;
      v24 = *(float32x2x2_t *)(v21 + 32);
      v23 = *(float32x4_t *)(v21 + 48);
      v25 = *(int32x4_t *)v21;
      v53 = *(int32x4_t *)(v21 + 16);
      v54[0] = v24;
      v52 = v25;
      v26 = (float32x2x2_t)vzip1q_s32(v25, (int32x4_t)v24);
      v24.val[0] = (float32x2_t)vzip2q_s32(v25, (int32x4_t)v24).u64[0];
      v27 = vzip1q_s32(v53, (int32x4_t)0);
      v28 = vzip2q_s32(v53, (int32x4_t)0).u64[0];
      *(float *)v19.i32 = *(float *)v19.i32 + *(float *)&v18;
      LODWORD(v18) = 1120403456;
      *(float *)v19.i32 = *(float *)v19.i32 * 100.0;
      v58 = vdup_lane_s32(v19, 0);
      v55 = 0;
      v29 = (float *)&v52;
      v30 = (float *)v54;
      v31 = vzip2q_s32((int32x4_t)v26, v27);
      vst2_f32(v29, v26);
      v54[1] = v23;
      v53 = v31;
      vst2_f32(v30, v24);
      v49[0] = off_24ED91168;
      v49[1] = v22;
      if (physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v50, (uint64_t)v49, a3, (uint64_t *)&v58, 0, v57, v56, &v55, *(double *)v31.i64, v18, 0, v23, (uint64_t)v62) != 5)goto LABEL_5;
      __asm { FMOV            V8.2S, #1.0 }
      if (physx::Gu::epaPenetration((uint64_t)a1) - 5 > 1)
      {
        v41 = vnegq_f32(*a6);
        v41.i32[3] = 0;
        v42 = vmulq_f32(v41, v41);
        v42.i64[0] = vpaddq_f32(v42, v42).u64[0];
        v43 = vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32);
        v44 = vrsqrte_f32(v43);
        v45 = 4;
        do
        {
          v44 = vmul_f32(v44, vrsqrts_f32(vmul_f32(v44, v44), v43));
          --v45;
        }
        while (v45);
        v46 = vmul_f32(v43, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v43), 0), _D8, (int8x8_t)v44));
        v47 = vrecpe_f32(v46);
        v48 = 4;
        do
        {
          v47 = vmul_f32(v47, vrecps_f32(v46, v47));
          --v48;
        }
        while (v48);
        v34 = vmulq_n_f32(v41, v47.f32[0]);
        v34.i32[3] = 0;
        v32 = 0;
        v33 = 0uLL;
      }
      else
      {
LABEL_5:
        v32 = v64;
        v33 = (int8x16_t)v62[0];
        v34 = v63;
      }
      *a7 = vmin_f32(v32, 0);
    }
    else
    {
      v34 = v60;
      v33 = v61;
    }
    *a10 = v33;
    *a8 = v34;
  }
  return v17;
}

BOOL sweepCapsule_BoxGeom(uint64_t a1, float32x4_t *a2, uint64_t a3, int8x8_t *a4, uint64_t a5, float32x2_t *a6, uint64_t a7, __int16 *a8, double a9, float a10, float32x4_t a11)
{
  float32x4_t v13;
  float32x2_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int8x8_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x8_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x4_t v48;
  float32x2_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x2_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  __int16 v65;
  _BOOL8 result;
  float32x2_t v67;
  float32x4_t v68;
  float32x2_t v69;
  int8x8_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int8x8_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x16_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x2_t v84;
  int8x8_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int8x8_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int8x16_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float v100;
  float32x4_t v101;
  float32x2_t v103;
  float v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  _QWORD v110[2];
  _QWORD v111[2];
  float32x4_t v112;
  int8x16_t v113;
  int32x2_t v114;
  float32x4_t v115;
  _QWORD v116[2];
  float v117;
  float v118;
  float v119;
  int v120;
  char v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  __int32 v125;
  __int32 v126;
  __int32 v127;
  int v128;
  char v129;
  float32x4_t v130;
  float32x4_t v131;
  int32x2_t v132;
  uint64_t v133;

  v133 = *MEMORY[0x24BDAC8D0];
  v123 = 0u;
  a11.i64[0] = *(_QWORD *)(a1 + 4);
  v13 = a11;
  v13.i32[2] = *(_DWORD *)(a1 + 12);
  v14 = (float32x2_t)vdup_laneq_s32((int32x4_t)v13, 2);
  v15 = v13;
  v15.i32[3] = 0;
  *(float32x2_t *)v16.f32 = *a6;
  v16.i64[1] = a6[1].u32[0];
  *(int8x8_t *)v13.f32 = a4[2];
  v13.i64[1] = a4[3].u32[0];
  v17 = *a2;
  v18.i64[0] = a2[1].i64[0];
  v18.i64[1] = a2[1].u32[2];
  v19 = vnegq_f32(*a2);
  v107 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 3);
  v108 = v18;
  v20 = vsubq_f32(v13, v18);
  v21 = v19;
  v21.i32[3] = 0;
  LODWORD(v22) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32).u32[0];
  v23 = vmulq_n_f32(v20, v22);
  v23.i32[3] = 0;
  v24 = (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
  v25 = (float32x2_t)vext_s8(*(int8x8_t *)v19.f32, (int8x8_t)v24, 4uLL);
  v26 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v19.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL)), v25, *(float32x2_t *)v20.f32);
  *(int8x8_t *)v27.f32 = vext_s8(v26, (int8x8_t)vmls_f32(vmul_f32(v24, *(float32x2_t *)v20.f32), *(float32x2_t *)v19.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)), 4uLL);
  v27.i64[1] = v26.u32[0];
  v28 = vmlaq_laneq_f32(v23, v27, *a2, 3);
  v28.i64[1] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u32[0];
  v29 = vmulq_f32(v21, v20);
  v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
  v30 = vmlaq_n_f32(v28, v21, vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32).f32[0]);
  v31 = vaddq_f32(v30, v30);
  v31.i32[3] = 0;
  v32 = *(float32x4_t *)a4->i8;
  v32.i32[3] = 0;
  v33 = vmulq_f32(v32, v21);
  v34 = vmulq_laneq_f32(v32, *a2, 3);
  v32.i64[0] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
  v35 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a4, *(int8x8_t *)v32.f32, 4uLL), *(float32x2_t *)v19.f32), v25, (float32x2_t)*a4);
  *(int8x8_t *)v36.f32 = vext_s8(v35, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a4, v24), *(float32x2_t *)v19.f32, *(float32x2_t *)v32.f32), 4uLL);
  *(int8x8_t *)&v36.u32[2] = v35;
  v37 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v21, *(float32x4_t *)a4->i8, 3), v34), v36);
  *(int32x2_t *)v19.f32 = vdup_lane_s32(*(int32x2_t *)v37.f32, 1);
  *(int32x2_t *)v21.f32 = vdup_laneq_s32((int32x4_t)v37, 2);
  v38 = (float32x2_t)vpaddq_f32(v33, v33).u64[0];
  v39 = vaddq_f32(v37, v37);
  *(int32x2_t *)v34.f32 = vdup_laneq_s32((int32x4_t)v39, 2);
  *(int32x2_t *)v37.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v39.f32), 0);
  *(float32x2_t *)v30.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a4->i8, *(int8x16_t *)a4->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL)), vpadd_f32(v38, v38));
  v40 = vmul_lane_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v39.f32, 1);
  v41 = vmul_laneq_f32(*(float32x2_t *)v21.f32, v39, 2);
  *(float32x2_t *)v19.f32 = vmul_n_f32(*(float32x2_t *)v19.f32, v39.f32[0]);
  v42 = vmul_n_f32(*(float32x2_t *)v21.f32, v39.f32[0]);
  *(float32x2_t *)v33.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 0), *(float32x2_t *)v30.f32, 1);
  *(float32x2_t *)v21.f32 = vmul_lane_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v39.f32, 1);
  *(float32x2_t *)v39.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 1), *(float32x2_t *)v30.f32, 1);
  *(float32x2_t *)v30.f32 = vmul_lane_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v30.f32, 1);
  __asm { FMOV            V21.2S, #1.0 }
  *(float32x2_t *)v37.f32 = vsub_f32(_D21, *(float32x2_t *)v37.f32);
  *(int8x8_t *)v48.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D21, v40), v41), (int8x8_t)vadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v30.f32), 4uLL);
  *(float32x2_t *)&v48.u32[2] = vsub_f32(v42, *(float32x2_t *)v39.f32);
  *(int8x8_t *)v19.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v30.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v37.f32, v41), 4uLL);
  *(float32x2_t *)&v19.u32[2] = vadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v33.f32);
  *(float32x2_t *)v37.f32 = vsub_f32(*(float32x2_t *)v37.f32, v40);
  *(int8x8_t *)v21.f32 = vext_s8((int8x8_t)vadd_f32(v42, *(float32x2_t *)v39.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v33.f32), 4uLL);
  v21.i64[1] = v37.i64[0];
  v30.i32[0] = *(_DWORD *)(a3 + 8);
  v37.i32[0] = *(_DWORD *)(a5 + 24);
  v120 = 3;
  v121 = 0;
  v116[0] = 0;
  v116[1] = 0;
  v122 = v15;
  v49 = vpmin_f32(v14, *(float32x2_t *)a11.f32);
  v49.f32[0] = vpmin_f32(v49, v49).f32[0];
  v117 = 0.15 * v49.f32[0];
  v118 = 0.05 * v49.f32[0];
  v119 = 0.05 * v49.f32[0];
  v50 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, v30.f32[0]);
  v51 = vmulq_n_f32(v48, v50.f32[0]);
  v51.i32[3] = 0;
  v52 = vmulq_lane_f32(v19, *(float32x2_t *)v50.f32, 1);
  v52.i32[3] = 0;
  v53 = vmulq_laneq_f32(v21, v50, 2);
  v53.i32[3] = 0;
  v54 = vaddq_f32(v53, vaddq_f32(v51, v52));
  v128 = 4;
  v124 = v31;
  v132 = vdup_lane_s32(*(int32x2_t *)v37.f32, 0);
  v130 = vaddq_f32(v54, v31);
  v131 = vsubq_f32(v31, v54);
  v125 = v37.i32[0];
  v126 = v37.i32[0];
  v127 = v37.i32[0];
  v101 = v16;
  v55 = vmulq_n_f32(v16, *(float *)&a9);
  v55.i32[3] = 0;
  v56 = vnegq_f32(v55);
  v57 = v56;
  v57.i32[3] = 0;
  v58 = v17;
  v58.i32[3] = 0;
  v59 = vmulq_n_f32(v57, v22);
  v59.i32[3] = 0;
  v129 = 1;
  v30.i64[0] = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
  v19.i64[0] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u64[0];
  v60 = (float32x2_t)vext_s8(*(int8x8_t *)v17.f32, *(int8x8_t *)v30.f32, 4uLL);
  v103 = *(float32x2_t *)v30.f32;
  v104 = v22;
  *(float32x2_t *)v21.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v17.f32, (float32x2_t)vext_s8(*(int8x8_t *)v56.f32, *(int8x8_t *)v19.f32, 4uLL)), v60, *(float32x2_t *)v56.f32);
  *(int8x8_t *)v56.f32 = vext_s8(*(int8x8_t *)v21.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v30.f32), *(float32x2_t *)v17.f32, *(float32x2_t *)v19.f32), 4uLL);
  v56.i64[1] = v21.u32[0];
  v105 = v58;
  v106 = *(float32x2_t *)v17.f32;
  v61 = vmlsq_laneq_f32(v59, v56, v17, 3);
  v61.i64[1] = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u32[0];
  v62 = vmulq_f32(v57, v58);
  v62.i64[0] = vpaddq_f32(v62, v62).u64[0];
  v63 = vmlaq_n_f32(v61, v58, vpadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32).f32[0]);
  v64 = vaddq_f32(v63, v63);
  v64.i32[3] = 0;
  v115 = v64;
  v65 = *a8;
  v114 = vdup_n_s32(0x7F7FFFFFu);
  v112 = 0u;
  v113 = 0u;
  v111[0] = off_24ED91108;
  v111[1] = &v124;
  v110[0] = off_24ED913D0;
  v110[1] = v116;
  v109 = v31;
  v58.f32[0] = v37.f32[0] + a10;
  result = physx::Gu::gjkRaycastPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>((uint64_t)v111, (uint64_t)v110, &v109, &v123, &v115, (float32x2_t *)&v114, &v112, &v113, *(int32x2_t *)v58.f32, (v65 & 0x200) != 0);
  if (result)
  {
    *(_WORD *)(a7 + 20) = 2;
    v67 = (float32x2_t)v114;
    if (*(float *)v114.i32 > 0.0)
    {
      v68 = vmulq_n_f32((float32x4_t)v113, v104);
      v68.i32[3] = 0;
      v69 = (float32x2_t)vextq_s8(v113, v113, 8uLL).u64[0];
      v70 = (int8x8_t)vmls_f32(vmul_f32(v106, (float32x2_t)vext_s8(*(int8x8_t *)v113.i8, (int8x8_t)v69, 4uLL)), v60, *(float32x2_t *)v113.i8);
      *(int8x8_t *)v71.f32 = vext_s8(v70, (int8x8_t)vmls_f32(vmul_f32(v103, *(float32x2_t *)v113.i8), v106, v69), 4uLL);
      v71.i64[1] = v70.u32[0];
      v72 = vmlaq_f32(v68, v107, v71);
      v72.i64[1] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u32[0];
      v73 = vmulq_f32(v105, (float32x4_t)v113);
      v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
      v74 = vmlaq_n_f32(v72, v105, vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32).f32[0]);
      v74.i64[1] = vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u32[0];
      *(_WORD *)(a7 + 20) = 3;
      v73.i64[0] = 0x4000000040000000;
      v73.i64[1] = 0x4000000040000000;
      v75 = vmlaq_f32(v108, v73, v74);
      v75.i64[1] = vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u32[0];
      v76 = vmulq_n_f32(v112, v104);
      v76.i32[3] = 0;
      v71.i64[0] = vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL).u64[0];
      v77 = (int8x8_t)vmls_f32(vmul_f32(v106, (float32x2_t)vext_s8(*(int8x8_t *)v112.f32, *(int8x8_t *)v71.f32, 4uLL)), v60, *(float32x2_t *)v112.f32);
      *(int8x8_t *)v71.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(v103, *(float32x2_t *)v112.f32), v106, *(float32x2_t *)v71.f32), 4uLL);
      v71.i64[1] = v77.u32[0];
      v78 = vmlaq_f32(v76, v107, v71);
      v78.i64[1] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u32[0];
      v79 = vmulq_f32(v105, v112);
      v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
      v80 = vmlaq_n_f32(v78, v105, vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32).f32[0]);
      v81 = (int8x16_t)vaddq_f32(v80, v80);
      v67.i32[0] = vmul_f32(*(float32x2_t *)&a9, v67).u32[0];
      v82 = vmlaq_n_f32(v75, v101, v67.f32[0]);
      *(_QWORD *)(a7 + 40) = vextq_s8(v81, v81, 4uLL).u64[0];
      v82.i32[3] = v81.i32[0];
      *(float32x4_t *)(a7 + 24) = v82;
LABEL_6:
      *(_DWORD *)(a7 + 48) = v67.i32[0];
      return result;
    }
    if ((v65 & 0x200) != 0)
    {
      v83 = vmulq_n_f32((float32x4_t)v113, v104);
      v83.i32[3] = 0;
      v84 = (float32x2_t)vextq_s8(v113, v113, 8uLL).u64[0];
      v85 = (int8x8_t)vmls_f32(vmul_f32(v106, (float32x2_t)vext_s8(*(int8x8_t *)v113.i8, (int8x8_t)v84, 4uLL)), v60, *(float32x2_t *)v113.i8);
      *(int8x8_t *)v86.f32 = vext_s8(v85, (int8x8_t)vmls_f32(vmul_f32(v103, *(float32x2_t *)v113.i8), v106, v84), 4uLL);
      v86.i64[1] = v85.u32[0];
      v87 = vmlaq_f32(v83, v107, v86);
      v87.i64[1] = vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u32[0];
      v88 = vmulq_f32(v105, (float32x4_t)v113);
      v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
      v89 = vmlaq_n_f32(v87, v105, vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32).f32[0]);
      v89.i64[1] = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u32[0];
      v88.i64[0] = 0x4000000040000000;
      v88.i64[1] = 0x4000000040000000;
      v90 = vmlaq_f32(v108, v88, v89);
      v90.i64[1] = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u32[0];
      v91 = v112;
      v92 = vmulq_n_f32(v112, v104);
      v92.i32[3] = 0;
      v86.i64[0] = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
      v93 = (int8x8_t)vmls_f32(vmul_f32(v106, (float32x2_t)vext_s8(*(int8x8_t *)v112.f32, *(int8x8_t *)v86.f32, 4uLL)), v60, *(float32x2_t *)v112.f32);
      *(int8x8_t *)v86.f32 = vext_s8(v93, (int8x8_t)vmls_f32(vmul_f32(v103, *(float32x2_t *)v112.f32), v106, *(float32x2_t *)v86.f32), 4uLL);
      v86.i64[1] = v93.u32[0];
      v94 = vmlaq_f32(v92, v107, v86);
      *(_WORD *)(a7 + 20) = 3;
      v94.i64[1] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u32[0];
      v95 = vmulq_f32(v105, v91);
      v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
      v96 = vmlaq_n_f32(v94, v105, vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32).f32[0]);
      v97 = (int8x16_t)vaddq_f32(v96, v96);
      v98 = (float32x4_t)v97;
      v98.i32[3] = 0;
      v99 = vmlsq_lane_f32(v90, v98, v67, 0);
      v99.i32[3] = v97.i32[0];
      *(float32x4_t *)(a7 + 24) = v99;
      *(_QWORD *)(a7 + 40) = vextq_s8(v97, v97, 4uLL).u64[0];
      goto LABEL_6;
    }
    *(_DWORD *)(a7 + 48) = 0;
    v100 = -a6[1].f32[0];
    *(float32x2_t *)(a7 + 36) = vneg_f32(*a6);
    *(float *)(a7 + 44) = v100;
  }
  return result;
}

BOOL physx::Gu::gjkRaycastPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x2_t *a6, float32x4_t *a7, int8x16_t *a8, int32x2_t a9, char a10)
{
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  int v21;
  unsigned __int32 v22;
  float32x2_t v27;
  float32x2_t v28;
  int v29;
  float32x2_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x2_t v49;
  int16x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x2_t v54;
  float32x4_t v55;
  int8x8_t v56;
  unsigned __int32 v57;
  float32x4_t v58;
  float32x2_t v59;
  float32x2_t v60;
  int v61;
  float32x2_t v62;
  float32x2_t v63;
  int v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int8x16_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x2_t v78;
  int8x16_t v79;
  float32x4_t v80;
  float32x2_t v81;
  float32x2_t v82;
  int8x16_t v83;
  float32x2_t v84;
  int v85;
  float32x2_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  uint64_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x2_t v97;
  int v98;
  int8x16_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int8x8_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  int8x8_t v110;
  float32x4_t v111;
  float32x2_t v112;
  float32x2_t v113;
  int8x8_t v114;
  float32x4_t v115;
  int8x8_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x2_t v119;
  float32x4_t v120;
  float32x2_t v121;
  float32x4_t v122;
  float32x2_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x2_t v127;
  float32x4_t v128;
  float32x2_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x2_t v132;
  float32x4_t v133;
  float32x2_t v134;
  float32x4_t v135;
  float32x2_t v136;
  float32x4_t v137;
  float32x2_t v138;
  __int32 v139;
  uint64_t v140;
  uint64_t v141;
  float32x4_t v142;
  float32x2_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x2_t v146;
  float32x2_t v147;
  int v148;
  float32x4_t v149;
  float32x2_t v150;
  int v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x2_t v154;
  int v155;
  unsigned int v156;
  float32x2_t v157;
  float32x2_t v158;
  float32x2_t v159;
  int v160;
  int8x16_t v161;
  float32x2_t v162;
  float32x2_t v163;
  int v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x2_t v171;
  int8x8_t v172;
  uint64_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x2_t v176;
  float32x2_t v177;
  int v178;
  float32x2_t v179;
  float32x2_t v180;
  int v181;
  int8x16_t v182;
  int8x16_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x2_t v190;
  int v191;
  float32x4_t v192;
  float32x4_t v193;
  uint64_t v195;
  uint64_t v196;
  float32x2_t v197;
  float32x4_t v200;
  float32x4_t v201;
  float32x2_t v202;
  float32x2_t v203;
  int v204;
  float32x2_t v205;
  float32x2_t v206;
  int v207;
  int32x4_t v208;
  float32x2_t v210;
  int8x16_t v214;
  int8x16_t v215;
  int8x16_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  unsigned int v220;
  float32x2_t v221;
  float32x2_t v222;
  int8x16_t v223;
  float32x4_t v224;
  float32x4_t v225[2];
  float32x2_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  __int128 v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  __int128 v234;
  uint64_t v235;

  v235 = *MEMORY[0x24BDAC8D0];
  v14 = *a3;
  v15 = vmlaq_f32(*a4, (float32x4_t)0, *a5);
  v220 = 1;
  v16 = vmulq_f32(v14, v14);
  v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
  v17 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32), (float32x2_t)0x3400000034000000), 0), (int8x16_t)v14, (int8x16_t)xmmword_2260E5F10);
  v18 = vmulq_f32(v17, v17);
  v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
  v19 = vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32);
  v20 = vrsqrte_f32(v19);
  v21 = 4;
  do
  {
    v20 = vmul_f32(v20, vrsqrts_f32(vmul_f32(v20, v20), v19));
    --v21;
  }
  while (v21);
  v22 = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u32[0];
  __asm { FMOV            V8.2S, #1.0 }
  v27 = vmul_f32(v19, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v19), 0), (int8x8_t)_D8, (int8x8_t)v20));
  v28 = vrecpe_f32(v27);
  v29 = 4;
  do
  {
    v28 = vmul_f32(v28, vrecps_f32(v27, v28));
    --v29;
  }
  while (v29);
  v30 = (float32x2_t)vdup_lane_s32(a9, 0);
  v15.i64[1] = v22;
  v31 = vmulq_n_f32(v17, v28.f32[0]);
  v31.i32[3] = 0;
  v32 = vnegq_f32(v31);
  v32.i32[3] = 0;
  v33 = *(float32x4_t **)(a1 + 8);
  v34 = v33[3];
  v35 = v33[4];
  v36 = vmulq_f32(v32, v34);
  v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
  v37 = vmulq_f32(v32, v35);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  v38 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32), vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32)), 0), (int8x16_t)v34, (int8x16_t)v35);
  v39 = *(float32x4_t **)(a2 + 8);
  v40 = v39[3];
  v41 = (int8x16_t)vnegq_f32(v40);
  v41.i32[3] = 0;
  v42 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v31), (int8x16_t)v40, v41);
  v43 = vsubq_f32(v38, v42);
  v223 = (int8x16_t)v43;
  v224 = 0u;
  memset(v225, 0, sizeof(v225));
  v231 = v38;
  v232 = 0u;
  v44 = vnegq_f32(v43);
  v44.i32[3] = 0;
  v233 = 0u;
  v234 = 0u;
  v39 = (float32x4_t *)((char *)v39 + 24);
  v227 = v42;
  v228 = 0u;
  v229 = 0u;
  v230 = 0u;
  *(float32x2_t *)v38.f32 = vld1_dup_f32(v39->f32);
  *(float32x2_t *)v38.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v38.f32, 0), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  v45 = vadd_f32(v30, *(float32x2_t *)v38.f32);
  *(float32x2_t *)v42.f32 = vmul_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
  v46 = vmul_f32(v45, v45);
  v47 = vmulq_f32(v44, v44);
  v48 = vpaddq_f32(v47, v47);
  v49 = vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32);
  v210 = *(float32x2_t *)v42.f32;
  v50 = (int16x4_t)vcgt_f32(v49, *(float32x2_t *)v42.f32);
  v51.i64[0] = -1;
  v51.i64[1] = -1;
  v48.i32[0] = -1;
  v208 = (int32x4_t)v48;
  v52 = (int8x16_t)v43;
  v214 = (int8x16_t)v44;
  v53 = v44;
  v54 = 0;
  while (1)
  {
    v55 = (float32x4_t)v52;
    v52 = (int8x16_t)v43;
    v56 = (int8x8_t)vcltz_s16(vshl_n_s16(vdup_lane_s16(v50, 0), 0xFuLL));
    v57 = vuzp1_s8(v56, v56).u32[0];
    if (v57 != -1)
      break;
    v58 = vmulq_f32(v53, v53);
    v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
    v59 = vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32);
    v60 = vrsqrte_f32(v59);
    v61 = 4;
    do
    {
      v60 = vmul_f32(v60, vrsqrts_f32(vmul_f32(v60, v60), v59));
      --v61;
    }
    while (v61);
    v62 = vmul_f32(v59, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v59), 0), (int8x8_t)_D8, (int8x8_t)v60));
    v63 = vrecpe_f32(v62);
    v64 = 4;
    do
    {
      v63 = vmul_f32(v63, vrecps_f32(v62, v63));
      --v64;
    }
    while (v64);
    v65 = vmulq_n_f32(v53, v63.f32[0]);
    v65.i32[3] = 0;
    v66 = vnegq_f32(v65);
    v66.i32[3] = 0;
    v67 = *(float32x4_t **)(a1 + 8);
    v68 = v67[3];
    v69 = v67[4];
    v70 = vmulq_f32(v65, v68);
    v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
    v71 = vmulq_f32(v65, v69);
    v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
    v72 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32), vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32)), 0), (int8x16_t)v68, (int8x16_t)v69);
    v73 = *(float32x4_t *)(*(_QWORD *)(a2 + 8) + 48);
    v74 = (int8x16_t)vnegq_f32(v73);
    v74.i32[3] = 0;
    v55 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v66), (int8x16_t)v73, v74);
    v75 = vaddq_f32(v15, v55);
    v43 = vsubq_f32(v72, v75);
    v76 = vnegq_f32(v43);
    v76.i32[3] = 0;
    v77 = vmulq_f32(v65, v76);
    v77.i64[0] = vpaddq_f32(v77, v77).u64[0];
    v78 = vsub_f32(vpadd_f32(*(float32x2_t *)v77.f32, *(float32x2_t *)v77.f32), v45);
    if (v78.f32[0] > 0.0)
    {
      v79 = v52;
      v80 = vmulq_f32(v65, *a5);
      v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
      v81 = vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32);
      v82 = 0;
      v83 = 0uLL;
      if (v81.f32[0] >= 0.0)
      {
        v87 = 0uLL;
        goto LABEL_77;
      }
      v84 = vrecpe_f32(v81);
      v85 = 4;
      do
      {
        v84 = vmul_f32(v84, vrecps_f32(v81, v84));
        --v85;
      }
      while (v85);
      v86 = vsub_f32(v54, vmul_f32(v78, v84));
      if ((vcgt_f32(v86, v54).u8[0] & 1) != 0)
      {
        v87 = 0uLL;
        if (v86.f32[0] > 1.0)
          goto LABEL_77;
        v88 = vmlaq_n_f32(*a4, *a5, v86.f32[0]);
        v88.i64[1] = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u32[0];
        v89 = vsubq_f32(v88, v15);
        v227 = vaddq_f32(v227, v89);
        v228 = vaddq_f32(v228, v89);
        v229 = vaddq_f32(v229, v89);
        v223 = (int8x16_t)vsubq_f32(v231, v227);
        v224 = vsubq_f32(v232, v228);
        v225[0] = vsubq_f32(v233, v229);
        v75 = vaddq_f32(v55, v88);
        v43 = vsubq_f32(v72, v75);
        v49 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        v214 = (int8x16_t)v53;
        v15 = v88;
      }
      v54 = v86;
      v52 = v79;
    }
    v90 = v220;
    *(&v231 + v220) = v72;
    *(&v227 + v90) = v75;
    v220 = v90 + 1;
    *(&v223 + v90) = (int8x16_t)v43;
    switch((_DWORD)v90)
    {
      case 3:
        v215 = v52;
        v217 = v15;
        physx::Gu::closestPtPointTetrahedron((float32x4_t *)&v223, &v231, &v227, (int *)&v220);
        v52 = v215;
        v15 = v217;
        break;
      case 2:
        v99 = v52;
        v43 = (float32x4_t)v223;
        v100 = vsubq_f32(v224, (float32x4_t)v223);
        v101 = vsubq_f32(v225[0], (float32x4_t)v223);
        v103 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v100.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v101, (int8x16_t)v101, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v100, (int8x16_t)v100, 4uLL), *(float32x2_t *)v101.f32);
        *(int8x8_t *)v102.f32 = vext_s8(v103, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL), *(float32x2_t *)v101.f32), *(float32x2_t *)v100.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL)), 4uLL);
        v103.i32[1] = 0;
        v220 = 3;
        v104 = vpadd_f32(vmul_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32), vmul_f32((float32x2_t)v103.u32[0], (float32x2_t)v103.u32[0]));
        v105 = vpadd_f32(v104, v104);
        if (v105.f32[0] <= 0.00000011921)
        {
          v220 = 2;
          v142 = vmulq_f32(v100, v100);
          v142.i64[0] = vpaddq_f32(v142, v142).u64[0];
          v143 = vpadd_f32(*(float32x2_t *)v142.f32, *(float32x2_t *)v142.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v143), 0), *(int8x8_t *)v223.i8).u32[0] != -1)
          {
            v144 = vnegq_f32((float32x4_t)v223);
            v144.i32[3] = 0;
            v145 = vmulq_f32(v144, v100);
            v145.i64[0] = vpaddq_f32(v145, v145).u64[0];
            v146 = vpadd_f32(*(float32x2_t *)v145.f32, *(float32x2_t *)v145.f32);
            v147 = vrecpe_f32(v143);
            v148 = 4;
            v52 = v99;
            do
            {
              v147 = vmul_f32(v147, vrecps_f32(v143, v147));
              --v148;
            }
            while (v148);
            v43 = vmlaq_n_f32((float32x4_t)v223, v100, vmax_f32(vmin_f32(vmul_f32(v146, v147), _D8), 0).f32[0]);
            goto LABEL_41;
          }
          v220 = 1;
          goto LABEL_45;
        }
        if (v105.f32[0] == 0.0)
        {
          v43 = 0uLL;
LABEL_45:
          v52 = v99;
          break;
        }
        *(int8x8_t *)&v102.u32[2] = v103;
        v106 = (float32x2_t)vextq_s8((int8x16_t)v224, (int8x16_t)v224, 8uLL).u64[0];
        v107 = (float32x2_t)vextq_s8((int8x16_t)v225[0], (int8x16_t)v225[0], 8uLL).u64[0];
        v108 = (float32x2_t)vextq_s8((int8x16_t)v225[0], (int8x16_t)v225[0], 4uLL).u64[0];
        v109 = (float32x2_t)vextq_s8((int8x16_t)v224, (int8x16_t)v224, 4uLL).u64[0];
        v110 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v224.f32, v108), v109, *(float32x2_t *)v225[0].f32);
        *(int8x8_t *)v111.f32 = vext_s8(v110, (int8x8_t)vmls_f32(vmul_f32(v106, *(float32x2_t *)v225[0].f32), *(float32x2_t *)v224.f32, v107), 4uLL);
        v111.i64[1] = v110.u32[0];
        v112 = (float32x2_t)vextq_s8(v223, v223, 8uLL).u64[0];
        v113 = (float32x2_t)vextq_s8(v223, v223, 4uLL).u64[0];
        v114 = (int8x8_t)vmls_f32(vmul_f32(v113, *(float32x2_t *)v225[0].f32), v108, *(float32x2_t *)v223.i8);
        *(int8x8_t *)v115.f32 = vext_s8(v114, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v223.i8, v107), *(float32x2_t *)v225[0].f32, v112), 4uLL);
        v115.i64[1] = v114.u32[0];
        v116 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v223.i8, v109), v113, *(float32x2_t *)v224.f32);
        *(int8x8_t *)v117.f32 = vext_s8(v116, (int8x8_t)vmls_f32(vmul_f32(v112, *(float32x2_t *)v224.f32), *(float32x2_t *)v223.i8, v106), 4uLL);
        v117.i64[1] = v116.u32[0];
        v118 = vmulq_f32(v111, v102);
        v118.i64[0] = vpaddq_f32(v118, v118).u64[0];
        v119 = vpadd_f32(*(float32x2_t *)v118.f32, *(float32x2_t *)v118.f32);
        v120 = vmulq_f32(v115, v102);
        v120.i64[0] = vpaddq_f32(v120, v120).u64[0];
        v121 = vpadd_f32(*(float32x2_t *)v120.f32, *(float32x2_t *)v120.f32);
        v122 = vmulq_f32(v117, v102);
        v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
        v123 = vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v121), (int8x8_t)vcgez_f32(v119)), (int8x8_t)vcgez_f32(v123)), 0), *(int8x8_t *)v223.i8).u32[0] != -1)
        {
          v124 = vnegq_f32((float32x4_t)v223);
          v124.i32[3] = 0;
          v125 = vnegq_f32(v224);
          v125.i32[3] = 0;
          v126 = vmulq_f32(v124, v100);
          v126.i64[0] = vpaddq_f32(v126, v126).u64[0];
          v127 = vpadd_f32(*(float32x2_t *)v126.f32, *(float32x2_t *)v126.f32);
          v128 = vmulq_f32(v100, v125);
          v128.i64[0] = vpaddq_f32(v128, v128).u64[0];
          v129 = vpadd_f32(*(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v127), (int8x8_t)vclez_f32(v129)), (int8x8_t)vclez_f32(v123)), 0), *(int8x8_t *)v223.i8).u32[0] == -1)
          {
            v153 = vsub_f32(v127, v129);
            v154 = vrecpe_f32(v153);
            v155 = 4;
            do
            {
              v154 = vmul_f32(v154, vrecps_f32(v153, v154));
              --v155;
            }
            while (v155);
            v141 = 0;
            v43 = vmlaq_n_f32((float32x4_t)v223, v100, vmul_f32(v127, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v153), (float32x2_t)0x3400000034000000), (int8x8_t)v154, 0)).f32[0]);
            v43.i64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u32[0];
            v156 = 2;
            v140 = 1;
          }
          else
          {
            v130 = vnegq_f32(v225[0]);
            v130.i32[3] = 0;
            v131 = vmulq_f32(v125, v101);
            v131.i64[0] = vpaddq_f32(v131, v131).u64[0];
            v132 = vpadd_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32);
            v133 = vmulq_f32(v100, v130);
            v133.i64[0] = vpaddq_f32(v133, v133).u64[0];
            v134 = vpadd_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v133.f32);
            v135 = vmulq_f32(v101, v130);
            v135.i64[0] = vpaddq_f32(v135, v135).u64[0];
            v136 = vpadd_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v132, v129), (int8x8_t)vcge_f32(v134, v136)), (int8x8_t)vclez_f32(v119)), 0), *(int8x8_t *)v223.i8).u32[0] != -1)
            {
              v137 = vmulq_f32(v124, v101);
              v137.i64[0] = vpaddq_f32(v137, v137).u64[0];
              v138 = vpadd_f32(*(float32x2_t *)v137.f32, *(float32x2_t *)v137.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v138), (int8x8_t)vclez_f32(v136)), (int8x8_t)vclez_f32(v121)), 0), *(int8x8_t *)v223.i8).u32[0] == -1)
              {
                v162 = vsub_f32(v138, v136);
                v163 = vrecpe_f32(v162);
                v164 = 4;
                v52 = v99;
                do
                {
                  v163 = vmul_f32(v163, vrecps_f32(v162, v163));
                  --v164;
                }
                while (v164);
                v141 = 0;
                v43 = vmlaq_n_f32((float32x4_t)v223, v101, vmul_f32(v138, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v162), (float32x2_t)0x3400000034000000), (int8x8_t)v163, 0)).f32[0]);
                v43.i64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u32[0];
                v140 = 2;
              }
              else
              {
                v52 = v99;
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v138), (int8x8_t)vclez_f32(v127)), 0), *(int8x8_t *)v223.i8).u32[0] == -1)
                {
                  v141 = 0;
                  v140 = 1;
                }
                else
                {
                  *(int16x4_t *)v43.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v129, v132), (int8x8_t)vcgez_f32(v129)), 0);
                  *(int8x8_t *)v43.f32 = vuzp1_s8(*(int8x8_t *)v43.f32, *(int8x8_t *)v43.f32);
                  v139 = v43.i32[0];
                  v43 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v43, v208), 0), (int8x16_t)v224, (int8x16_t)v225[0]);
                  v140 = 1;
                  if (v139 == -1)
                    v141 = 1;
                  else
                    v141 = 2;
                }
              }
              v156 = v140;
              goto LABEL_61;
            }
            v157 = vsub_f32(v132, v129);
            v158 = vadd_f32(v157, vsub_f32(v134, v136));
            v159 = vrecpe_f32(v158);
            v160 = 4;
            do
            {
              v159 = vmul_f32(v159, vrecps_f32(v158, v159));
              --v160;
            }
            while (v160);
            v161 = (int8x16_t)vmlaq_n_f32(v224, vsubq_f32(v225[0], v224), vmul_f32(v157, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v158), (float32x2_t)0x3400000034000000), (int8x8_t)v159, 0)).f32[0]);
            v161.i64[1] = vextq_s8(v161, v161, 8uLL).u32[0];
            v156 = 2;
            v140 = 2;
            v141 = 1;
            v43 = (float32x4_t)v161;
          }
          v52 = v99;
LABEL_61:
          v165 = *((float32x4_t *)&v223 + v140);
          v166 = *(&v231 + v141);
          v167 = *(&v231 + v140);
          v168 = *(&v227 + v141);
          v169 = *(&v227 + v140);
          v223 = *(&v223 + v141);
          v224 = v165;
          v231 = v166;
          v232 = v167;
          v227 = v168;
          v228 = v169;
          v220 = v156;
          break;
        }
        v149 = vmulq_f32((float32x4_t)v223, v102);
        v150 = vrecpe_f32(v105);
        v151 = 4;
        v52 = v99;
        do
        {
          v150 = vmul_f32(v150, vrecps_f32(v105, v150));
          --v151;
        }
        while (v151);
        v152 = (float32x2_t)vpaddq_f32(v149, v149).u64[0];
        v43 = vmulq_n_f32(v102, vmul_f32(v150, vpadd_f32(v152, v152)).f32[0]);
        v43.i32[3] = 0;
        break;
      case 1:
        v43 = (float32x4_t)v223;
        v91 = vsubq_f32(v224, (float32x4_t)v223);
        v92 = vmulq_f32(v91, v91);
        v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
        v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v93), 0), *(int8x8_t *)v223.i8).u32[0] != -1)
        {
          v94 = vnegq_f32((float32x4_t)v223);
          v94.i32[3] = 0;
          v95 = vmulq_f32(v94, v91);
          v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
          v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
          v97 = vrecpe_f32(v93);
          v98 = 4;
          do
          {
            v97 = vmul_f32(v97, vrecps_f32(v93, v97));
            --v98;
          }
          while (v98);
          v43 = vmlaq_n_f32((float32x4_t)v223, v91, vmax_f32(vmin_f32(vmul_f32(v96, v97), _D8), 0).f32[0]);
LABEL_41:
          v43.i64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u32[0];
          break;
        }
        v220 = 1;
        break;
      default:
        break;
    }
    v53 = vnegq_f32(v43);
    v53.i32[3] = 0;
    v170 = vmulq_f32(v43, v43);
    v170.i64[0] = vpaddq_f32(v170, v170).u64[0];
    v171 = vpadd_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32);
    v172 = (int8x8_t)vcgt_f32(v49, v171);
    v51 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v172, (int8x8_t)0x100000001), 0);
    v50 = (int16x4_t)vand_s8((int8x8_t)vcgt_f32(v171, v46), v172);
    v49 = v171;
  }
  v173 = *(_QWORD *)(a1 + 8);
  v174 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v49, v210), 0), v51), 0x1FuLL)), (int8x16_t)v53, v214);
  v175 = vmulq_f32(v174, v174);
  v175.i64[0] = vpaddq_f32(v175, v175).u64[0];
  v176 = vpadd_f32(*(float32x2_t *)v175.f32, *(float32x2_t *)v175.f32);
  v177 = vrsqrte_f32(v176);
  v178 = 4;
  do
  {
    v177 = vmul_f32(v177, vrsqrts_f32(vmul_f32(v177, v177), v176));
    --v178;
  }
  while (v178);
  v179 = vmul_f32(v176, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v176), 0), (int8x8_t)_D8, (int8x8_t)v177));
  v180 = vrecpe_f32(v179);
  v181 = 4;
  do
  {
    v180 = vmul_f32(v180, vrecps_f32(v179, v180));
    --v181;
  }
  while (v181);
  v182 = (int8x16_t)vdupq_n_s32(-*(char *)(v173 + 32));
  v183 = (int8x16_t)vmulq_n_f32(v174, v180.f32[0]);
  v183.i32[3] = 0;
  v87 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v179), 0), v183));
  v87.i32[3] = 0;
  v184 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v51, 0x1FuLL)), v52, (int8x16_t)v55);
  v219 = v184;
  if (v220 == 3)
  {
    v221 = 0;
    v222 = 0;
    v216 = v182;
    v218 = v87;
    physx::Gu::barycentricCoordinates(&v219, (float32x4_t *)&v223, &v224, v225, &v222, &v221);
    v182 = v216;
    v87 = v218;
    v180.i32[1] = v231.i32[1];
    v185 = vmulq_n_f32(vsubq_f32(v232, v231), v222.f32[0]);
    v185.i32[3] = 0;
    *(float32x2_t *)v55.f32 = v221;
    v186 = vmulq_n_f32(vsubq_f32(v233, v231), v221.f32[0]);
    v186.i32[3] = 0;
    v43 = vaddq_f32(v231, vaddq_f32(v185, v186));
    v173 = *(_QWORD *)(a1 + 8);
  }
  else if (v220 == 2)
  {
    v55.i64[1] = v224.i64[1];
    v187 = vsubq_f32((float32x4_t)v223, v184);
    v188 = vsubq_f32(vsubq_f32(v224, v184), v187);
    v189 = vmulq_f32(v188, v188);
    v189.i64[0] = vpaddq_f32(v189, v189).u64[0];
    *(float32x2_t *)v55.f32 = vpadd_f32(*(float32x2_t *)v189.f32, *(float32x2_t *)v189.f32);
    v190 = vrecpe_f32(*(float32x2_t *)v55.f32);
    v191 = 4;
    do
    {
      v190 = vmul_f32(v190, vrecps_f32(*(float32x2_t *)v55.f32, v190));
      --v191;
    }
    while (v191);
    *(int32x2_t *)v55.f32 = vcgtz_f32(*(float32x2_t *)v55.f32);
    v192 = vnegq_f32(v187);
    v192.i32[3] = 0;
    v193 = vmulq_f32(v192, v188);
    v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
    v43 = vmlaq_n_f32(v231, vsubq_f32(v232, v231), vmul_f32((float32x2_t)vbsl_s8(*(int8x8_t *)v55.f32, (int8x8_t)v190, 0), vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32)).f32[0]);
    v180.i32[1] = 0;
    v43.i64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u32[0];
  }
  else
  {
    v43 = 0uLL;
    if (v220 == 1)
      v43 = v231;
  }
  v53.i32[0] = *(_DWORD *)(v173 + 16);
  v72 = vmlsq_lane_f32(v43, v87, *(float32x2_t *)v53.f32, 0);
  v53.i32[1] = 0;
  v72.i64[1] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u32[0];
  v83 = vbslq_s8(v182, (int8x16_t)v72, (int8x16_t)v43);
  v82 = v54;
LABEL_77:
  if (v57 != -1)
  {
    *a6 = v82;
    if (v82.f32[0] == 0.0 && a10 != 0)
    {
      v195 = *(_QWORD *)(a1 + 8);
      v196 = *(_QWORD *)(a2 + 8);
      v53.i32[0] = 1120403456;
      v43.f32[0] = (float)(*(float *)(v195 + 16) + *(float *)(v196 + 16)) * 100.0;
      *(int32x2_t *)v219.f32 = vdup_lane_s32(*(int32x2_t *)v43.f32, 0);
      LOBYTE(v220) = 0;
      v226 = 0;
      v223 = 0u;
      v224 = 0u;
      v225[0] = 0u;
      v231.i64[0] = (uint64_t)off_24ED91108;
      v231.i64[1] = v195;
      v227.i64[0] = (uint64_t)off_24ED913D0;
      v227.i64[1] = v196;
      if (physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>((uint64_t)&v231, (uint64_t)&v227, a3, (uint64_t *)&v219, 0, &v222, &v221, &v220, 0.0, *(double *)v53.i64, *(int8x8_t *)v72.f32, v55, (uint64_t)&v223) != 5)goto LABEL_83;
      __asm { FMOV            V8.2S, #1.0 }
      if (physx::Gu::epaPenetration(a1) - 5 > 1)
      {
        v200 = vnegq_f32(*a5);
        v200.i32[3] = 0;
        v201 = vmulq_f32(v200, v200);
        v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
        v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
        v203 = vrsqrte_f32(v202);
        v204 = 4;
        do
        {
          v203 = vmul_f32(v203, vrsqrts_f32(vmul_f32(v203, v203), v202));
          --v204;
        }
        while (v204);
        v205 = vmul_f32(v202, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v202), 0), _D8, (int8x8_t)v203));
        v206 = vrecpe_f32(v205);
        v207 = 4;
        do
        {
          v206 = vmul_f32(v206, vrecps_f32(v205, v206));
          --v207;
        }
        while (v207);
        v87 = vmulq_n_f32(v200, v206.f32[0]);
        v87.i32[3] = 0;
        v197 = 0;
        v83 = 0uLL;
      }
      else
      {
LABEL_83:
        v197 = v226;
        v83 = v223;
        v87 = v225[0];
      }
      *a6 = vmin_f32(v197, 0);
    }
    *a8 = v83;
    *a7 = v87;
  }
  return v57 != -1;
}

BOOL sweepBox_SphereGeom(uint64_t a1, uint64_t a2, float a3, float a4, double a5, double a6, double a7, double a8, double a9, float32x4_t a10, uint64_t a11, float32x4_t *a12, uint64_t a13, float32x2_t *a14, uint64_t a15, __int16 *a16)
{
  int32x4_t v16;
  int32x4_t v19;
  float32x2_t v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float32x4_t v29;
  float32x2_t v30;
  int8x8_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x2_t v42;
  int8x8_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  __int16 v48;
  _BOOL8 result;
  float v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x2_t v53;
  int8x8_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x2_t v60;
  int8x8_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  float32x4_t v69;
  float32x2_t v70;
  int8x8_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x8_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int8x16_t v83;
  float v84;
  float32x2_t v86;
  float v87;
  float32x2_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  _QWORD v92[2];
  _QWORD v93[2];
  float32x4_t v94;
  float32x4_t v95;
  int8x16_t v96;
  float32x2_t v97;
  float32x4_t v98;
  _QWORD v99[2];
  float v100;
  float v101;
  float v102;
  int v103;
  char v104;
  int32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  __int32 v108;
  __int32 v109;
  __int32 v110;
  int v111;
  char v112;
  float32x4_t v113;
  float32x4_t v114;
  int32x2_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v16.i64[0] = *(_QWORD *)(a13 + 48);
  v19 = v16;
  v19.i32[2] = *(_DWORD *)(a13 + 56);
  v20 = (float32x2_t)vdup_laneq_s32(v19, 2);
  v21 = v19;
  v21.i32[3] = 0;
  *(float32x2_t *)a10.f32 = *a14;
  a10.i32[2] = a14[1].i32[0];
  v19.i32[0] = *(_DWORD *)(a1 + 4);
  v22.i64[0] = *(_QWORD *)(a2 + 16);
  v22.i64[1] = *(unsigned int *)(a2 + 24);
  v23 = *a12;
  v24.i64[0] = a12[1].i64[0];
  v24.i64[1] = a12[1].u32[2];
  v25 = vnegq_f32(*a12);
  v91 = v24;
  v26 = vsubq_f32(v22, v24);
  v27 = v25;
  v27.i32[3] = 0;
  v89 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a12, 3);
  LODWORD(v28) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32).u32[0];
  v29 = vmulq_n_f32(v26, v28);
  v29.i32[3] = 0;
  v30 = (float32x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
  v31 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v25.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v25.f32, (int8x8_t)v30, 4uLL), *(float32x2_t *)v26.f32);
  *(int8x8_t *)v25.f32 = vext_s8(v31, (int8x8_t)vmls_f32(vmul_f32(v30, *(float32x2_t *)v26.f32), *(float32x2_t *)v25.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL)), 4uLL);
  v25.i64[1] = v31.u32[0];
  v32 = vmlaq_laneq_f32(v29, v25, *a12, 3);
  v32.i64[1] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u32[0];
  v33 = vmulq_f32(v27, v26);
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  v34 = vmlaq_n_f32(v32, v27, vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32).f32[0]);
  v35 = vaddq_f32(v34, v34);
  v35.i32[3] = 0;
  v106 = 0u;
  v107 = v35;
  v103 = 3;
  v104 = 0;
  v99[0] = 0;
  v99[1] = 0;
  v105 = v21;
  v36 = vpmin_f32(v20, *(float32x2_t *)v16.i8);
  v25.f32[0] = vpmin_f32(v36, v36).f32[0];
  v100 = 0.15 * v25.f32[0];
  v101 = 0.05 * v25.f32[0];
  v102 = 0.05 * v25.f32[0];
  v111 = 4;
  v115 = vdup_lane_s32(*(int32x2_t *)v19.i8, 0);
  v113 = v35;
  v114 = v35;
  v108 = v19.i32[0];
  v109 = v19.i32[0];
  v110 = v19.i32[0];
  v112 = 1;
  v37 = vmulq_n_f32(a10, a3);
  v38 = v37;
  v38.i32[3] = 0;
  v39 = v23;
  v39.i32[3] = 0;
  v40 = vmulq_n_f32(v38, v28);
  v40.i32[3] = 0;
  v25.i64[0] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
  v41 = (float32x2_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
  v42 = (float32x2_t)vext_s8(*(int8x8_t *)v23.f32, *(int8x8_t *)v25.f32, 4uLL);
  v86 = *(float32x2_t *)v25.f32;
  v87 = v28;
  v43 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v37.f32, (int8x8_t)v41, 4uLL), *(float32x2_t *)v23.f32), v42, *(float32x2_t *)v37.f32);
  *(int8x8_t *)v37.f32 = vext_s8(v43, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v25.f32), *(float32x2_t *)v23.f32, v41), 4uLL);
  v37.i64[1] = v43.u32[0];
  v88 = *(float32x2_t *)v23.f32;
  v44 = vmlsq_laneq_f32(v40, v37, v23, 3);
  v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
  v45 = vmulq_f32(v38, v39);
  v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
  v90 = v39;
  v46 = vmlaq_n_f32(v44, v39, vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32).f32[0]);
  v47 = vaddq_f32(v46, v46);
  v47.i32[3] = 0;
  v98 = v47;
  v48 = *a16;
  v97 = 0;
  v95 = 0u;
  v96 = 0u;
  v94 = v35;
  v93[0] = off_24ED91108;
  v93[1] = &v107;
  v92[0] = off_24ED913D0;
  v92[1] = v99;
  v47.f32[0] = *(float *)v19.i32 + a4;
  result = physx::Gu::gjkRaycastPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>((uint64_t)v93, (uint64_t)v92, &v94, &v106, &v98, &v97, &v95, &v96, *(int32x2_t *)v47.f32, (v48 & 0x200) != 0);
  if (result)
  {
    *(_WORD *)(a15 + 20) = 2;
    v50 = v97.f32[0];
    if (v97.f32[0] <= 0.0)
    {
      if ((v48 & 0x200) != 0)
      {
        *(_WORD *)(a15 + 20) = 3;
        v69 = vmulq_n_f32((float32x4_t)v96, v87);
        v69.i32[3] = 0;
        v70 = (float32x2_t)vextq_s8(v96, v96, 8uLL).u64[0];
        v71 = (int8x8_t)vmls_f32(vmul_f32(v88, (float32x2_t)vext_s8(*(int8x8_t *)v96.i8, (int8x8_t)v70, 4uLL)), v42, *(float32x2_t *)v96.i8);
        *(int8x8_t *)v72.f32 = vext_s8(v71, (int8x8_t)vmls_f32(vmul_f32(v86, *(float32x2_t *)v96.i8), v88, v70), 4uLL);
        v72.i64[1] = v71.u32[0];
        v73 = vmlaq_f32(v69, v89, v72);
        v73.i64[1] = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u32[0];
        v74 = vmulq_f32(v90, (float32x4_t)v96);
        v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
        v75 = vmlaq_n_f32(v73, v90, vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32).f32[0]);
        v75.i64[1] = vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u32[0];
        v74.i64[0] = 0x4000000040000000;
        v74.i64[1] = 0x4000000040000000;
        v76 = vmlaq_f32(v91, v74, v75);
        v77 = vmulq_n_f32(v95, v87);
        v77.i32[3] = 0;
        v72.i64[0] = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u64[0];
        v78 = (int8x8_t)vmls_f32(vmul_f32(v88, (float32x2_t)vext_s8(*(int8x8_t *)v95.f32, *(int8x8_t *)v72.f32, 4uLL)), v42, *(float32x2_t *)v95.f32);
        *(int8x8_t *)v72.f32 = vext_s8(v78, (int8x8_t)vmls_f32(vmul_f32(v86, *(float32x2_t *)v95.f32), v88, *(float32x2_t *)v72.f32), 4uLL);
        v72.i64[1] = v78.u32[0];
        v79 = vmlaq_f32(v77, v89, v72);
        v79.i64[1] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u32[0];
        v80 = vmulq_f32(v90, v95);
        v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
        v81 = vmlaq_n_f32(v79, v90, vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32).f32[0]);
        v82 = vaddq_f32(v81, v81);
        v82.i32[3] = 0;
        v83 = (int8x16_t)vnegq_f32(v82);
        *(_QWORD *)(a15 + 40) = vextq_s8(v83, v83, 4uLL).u64[0];
        v76.i32[3] = v83.i32[0];
        *(float32x4_t *)(a15 + 24) = v76;
        *(float *)(a15 + 48) = v50;
      }
      else
      {
        *(_DWORD *)(a15 + 48) = 0;
        v84 = -a14[1].f32[0];
        *(float32x2_t *)(a15 + 36) = vneg_f32(*a14);
        *(float *)(a15 + 44) = v84;
      }
    }
    else
    {
      v51 = (float32x4_t)v96;
      v52 = vmulq_n_f32((float32x4_t)v96, v87);
      v52.i32[3] = 0;
      v53 = (float32x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
      v54 = (int8x8_t)vmls_f32(vmul_f32(v88, (float32x2_t)vext_s8(*(int8x8_t *)v96.i8, (int8x8_t)v53, 4uLL)), v42, *(float32x2_t *)v96.i8);
      *(int8x8_t *)v55.f32 = vext_s8(v54, (int8x8_t)vmls_f32(vmul_f32(v86, *(float32x2_t *)v96.i8), v88, v53), 4uLL);
      v55.i64[1] = v54.u32[0];
      v56 = vmlaq_f32(v52, v89, v55);
      v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
      *(_WORD *)(a15 + 20) = 3;
      v57 = vmulq_f32(v90, v51);
      v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
      v58 = vmlaq_n_f32(v56, v90, vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32).f32[0]);
      v58.i64[1] = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u32[0];
      v57.i64[0] = 0x4000000040000000;
      v57.i64[1] = 0x4000000040000000;
      v59 = vmulq_n_f32(v95, v87);
      v59.i32[3] = 0;
      v60 = (float32x2_t)vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u64[0];
      v61 = (int8x8_t)vmls_f32(vmul_f32(v88, (float32x2_t)vext_s8(*(int8x8_t *)v95.f32, (int8x8_t)v60, 4uLL)), v42, *(float32x2_t *)v95.f32);
      *(int8x8_t *)v62.f32 = vext_s8(v61, (int8x8_t)vmls_f32(vmul_f32(v86, *(float32x2_t *)v95.f32), v88, v60), 4uLL);
      v62.i64[1] = v61.u32[0];
      v63 = vmlaq_f32(v59, v89, v62);
      v64 = vmlaq_f32(v91, v57, v58);
      v63.i64[1] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u32[0];
      v65 = vmulq_f32(v90, v95);
      v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
      v66 = vmlaq_n_f32(v63, v90, vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32).f32[0]);
      v67 = vaddq_f32(v66, v66);
      v67.i32[3] = 0;
      v68 = (int8x16_t)vnegq_f32(v67);
      *(_QWORD *)(a15 + 40) = vextq_s8(v68, v68, 4uLL).u64[0];
      v64.i32[3] = v68.i32[0];
      *(float32x4_t *)(a15 + 24) = v64;
      *(float *)(a15 + 48) = v50 * a3;
    }
  }
  return result;
}

BOOL sweepBox_CapsuleGeom(uint64_t a1, int8x8_t *a2, float a3, float a4, double a5, double a6, double a7, float32x4_t a8, double a9, float32x4_t a10, uint64_t a11, float32x4_t *a12, uint64_t a13, float32x2_t *a14, uint64_t a15, __int16 *a16)
{
  int32x2_t v16;
  float v19;
  float32x4_t v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float32x4_t v29;
  float32x2_t v30;
  float32x2_t v31;
  int8x8_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x8_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x4_t v52;
  float32x2_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  __int16 v69;
  _BOOL8 result;
  float v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x2_t v74;
  int8x8_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x2_t v81;
  int8x8_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int8x16_t v89;
  float32x4_t v90;
  float32x2_t v91;
  int8x8_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int8x8_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int8x16_t v104;
  float v105;
  float32x2_t v107;
  float v108;
  float32x4_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float32x4_t v112;
  _QWORD v113[2];
  _QWORD v114[2];
  float32x4_t v115;
  float32x4_t v116;
  int8x16_t v117;
  float32x2_t v118;
  float32x4_t v119;
  _QWORD v120[2];
  float v121;
  float v122;
  float v123;
  int v124;
  char v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  __int32 v129;
  __int32 v130;
  __int32 v131;
  int v132;
  char v133;
  float32x4_t v134;
  float32x4_t v135;
  int32x2_t v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  v16.i32[0] = *(_DWORD *)(a1 + 4);
  v19 = *(float *)(a1 + 8);
  a8.i64[0] = *(_QWORD *)(a13 + 48);
  v20 = a8;
  v20.i32[2] = *(_DWORD *)(a13 + 56);
  v21 = (float32x2_t)vdup_laneq_s32((int32x4_t)v20, 2);
  v22 = v20;
  v22.i32[3] = 0;
  v127 = 0u;
  *(float32x2_t *)a10.f32 = *a14;
  a10.i32[2] = a14[1].i32[0];
  *(int8x8_t *)v20.f32 = a2[2];
  v20.i64[1] = a2[3].u32[0];
  v23 = *a12;
  v24.i64[0] = a12[1].i64[0];
  v24.i64[1] = a12[1].u32[2];
  v25 = vnegq_f32(*a12);
  v26 = v25;
  v26.i32[3] = 0;
  v111 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a12, 3);
  v112 = v24;
  v27 = vsubq_f32(v20, v24);
  LODWORD(v28) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32).u32[0];
  v29 = vmulq_n_f32(v27, v28);
  v29.i32[3] = 0;
  v30 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  v31 = (float32x2_t)vext_s8(*(int8x8_t *)v25.f32, (int8x8_t)v30, 4uLL);
  v32 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v25.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL)), v31, *(float32x2_t *)v27.f32);
  *(int8x8_t *)v33.f32 = vext_s8(v32, (int8x8_t)vmls_f32(vmul_f32(v30, *(float32x2_t *)v27.f32), *(float32x2_t *)v25.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL)), 4uLL);
  v33.i64[1] = v32.u32[0];
  v34 = vmlaq_laneq_f32(v29, v33, *a12, 3);
  v34.i64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u32[0];
  v35 = vmulq_f32(v26, v27);
  v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
  v36 = vmlaq_n_f32(v34, v26, vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32).f32[0]);
  v37 = vaddq_f32(v36, v36);
  v37.i32[3] = 0;
  v38 = *(float32x4_t *)a2->i8;
  v38.i32[3] = 0;
  v39 = vmulq_f32(v38, v26);
  v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
  v40 = vmulq_laneq_f32(v38, *a12, 3);
  v38.i64[0] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
  v41 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a2, *(int8x8_t *)v38.f32, 4uLL), *(float32x2_t *)v25.f32), v31, (float32x2_t)*a2);
  *(int8x8_t *)v25.f32 = vext_s8(v41, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a2, v30), *(float32x2_t *)v25.f32, *(float32x2_t *)v38.f32), 4uLL);
  *(int8x8_t *)&v25.u32[2] = v41;
  v42 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v26, *(float32x4_t *)a2->i8, 3), v40), v25);
  *(int32x2_t *)v26.f32 = vdup_lane_s32(*(int32x2_t *)v42.f32, 1);
  *(int32x2_t *)v38.f32 = vdup_laneq_s32((int32x4_t)v42, 2);
  v43 = vaddq_f32(v42, v42);
  *(int32x2_t *)v40.f32 = vdup_laneq_s32((int32x4_t)v43, 2);
  *(float32x2_t *)v33.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL)), vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32));
  *(int32x2_t *)v42.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v43.f32), 0);
  *(float32x2_t *)v39.f32 = vmul_lane_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v43.f32, 1);
  v44 = vmul_laneq_f32(*(float32x2_t *)v38.f32, v43, 2);
  *(float32x2_t *)v26.f32 = vmul_n_f32(*(float32x2_t *)v26.f32, v43.f32[0]);
  v45 = vmul_n_f32(*(float32x2_t *)v38.f32, v43.f32[0]);
  v46 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.f32, 0), *(float32x2_t *)v33.f32, 1);
  *(float32x2_t *)v38.f32 = vmul_lane_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v43.f32, 1);
  *(float32x2_t *)v43.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.f32, 1), *(float32x2_t *)v33.f32, 1);
  *(float32x2_t *)v33.f32 = vmul_lane_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v33.f32, 1);
  __asm { FMOV            V25.2S, #1.0 }
  *(float32x2_t *)v42.f32 = vsub_f32(_D25, *(float32x2_t *)v42.f32);
  *(int8x8_t *)v52.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D25, *(float32x2_t *)v39.f32), v44), (int8x8_t)vadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v33.f32), 4uLL);
  *(float32x2_t *)&v52.u32[2] = vsub_f32(v45, *(float32x2_t *)v43.f32);
  *(int8x8_t *)v26.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v33.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v42.f32, v44), 4uLL);
  *(float32x2_t *)&v26.u32[2] = vadd_f32(*(float32x2_t *)v38.f32, v46);
  *(int8x8_t *)v38.f32 = vext_s8((int8x8_t)vadd_f32(v45, *(float32x2_t *)v43.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v38.f32, v46), 4uLL);
  *(float32x2_t *)&v38.u32[2] = vsub_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v39.f32);
  v124 = 3;
  v125 = 0;
  v120[0] = 0;
  v120[1] = 0;
  v126 = v22;
  v53 = vpmin_f32(v21, *(float32x2_t *)a8.f32);
  v53.f32[0] = vpmin_f32(v53, v53).f32[0];
  v121 = 0.15 * v53.f32[0];
  v122 = 0.05 * v53.f32[0];
  v123 = 0.05 * v53.f32[0];
  v54 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, v19);
  v55 = vmulq_n_f32(v52, v54.f32[0]);
  v55.i32[3] = 0;
  v56 = vmulq_lane_f32(v26, *(float32x2_t *)v54.f32, 1);
  v56.i32[3] = 0;
  v57 = vmulq_laneq_f32(v38, v54, 2);
  v57.i32[3] = 0;
  v58 = vaddq_f32(v57, vaddq_f32(v55, v56));
  v132 = 4;
  v128 = v37;
  v136 = vdup_lane_s32(v16, 0);
  v134 = vaddq_f32(v58, v37);
  v135 = vsubq_f32(v37, v58);
  v129 = v16.i32[0];
  v130 = v16.i32[0];
  v131 = v16.i32[0];
  v133 = 1;
  v59 = vmulq_n_f32(a10, a3);
  v60 = v59;
  v60.i32[3] = 0;
  v61 = v23;
  v61.i32[3] = 0;
  v108 = v28;
  v62 = vmulq_n_f32(v60, v28);
  v62.i32[3] = 0;
  v22.i64[0] = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u64[0];
  v63 = (float32x2_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u64[0];
  v64 = (float32x2_t)vext_s8(*(int8x8_t *)v23.f32, *(int8x8_t *)v22.f32, 4uLL);
  v107 = *(float32x2_t *)v22.f32;
  *(float32x2_t *)v56.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v59.f32, (int8x8_t)v63, 4uLL), *(float32x2_t *)v23.f32), v64, *(float32x2_t *)v59.f32);
  *(int8x8_t *)v59.f32 = vext_s8(*(int8x8_t *)v56.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v22.f32), *(float32x2_t *)v23.f32, v63), 4uLL);
  v59.i64[1] = v56.u32[0];
  v109 = v61;
  v110 = *(float32x2_t *)v23.f32;
  v65 = vmlsq_laneq_f32(v62, v59, v23, 3);
  v65.i64[1] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u32[0];
  v66 = vmulq_f32(v60, v61);
  v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
  v67 = vmlaq_n_f32(v65, v61, vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32).f32[0]);
  v68 = vaddq_f32(v67, v67);
  v68.i32[3] = 0;
  v119 = v68;
  v69 = *a16;
  v118 = 0;
  v116 = 0u;
  v117 = 0u;
  v115 = v37;
  v114[0] = off_24ED91108;
  v114[1] = &v128;
  v113[0] = off_24ED913D0;
  v113[1] = v120;
  v61.f32[0] = *(float *)v16.i32 + a4;
  result = physx::Gu::gjkRaycastPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>((uint64_t)v114, (uint64_t)v113, &v115, &v127, &v119, &v118, &v116, &v117, *(int32x2_t *)v61.f32, (v69 & 0x200) != 0);
  if (result)
  {
    *(_WORD *)(a15 + 20) = 2;
    v71 = v118.f32[0];
    if (v118.f32[0] <= 0.0)
    {
      if ((v69 & 0x200) != 0)
      {
        *(_WORD *)(a15 + 20) = 3;
        v90 = vmulq_n_f32((float32x4_t)v117, v108);
        v90.i32[3] = 0;
        v91 = (float32x2_t)vextq_s8(v117, v117, 8uLL).u64[0];
        v92 = (int8x8_t)vmls_f32(vmul_f32(v110, (float32x2_t)vext_s8(*(int8x8_t *)v117.i8, (int8x8_t)v91, 4uLL)), v64, *(float32x2_t *)v117.i8);
        *(int8x8_t *)v93.f32 = vext_s8(v92, (int8x8_t)vmls_f32(vmul_f32(v107, *(float32x2_t *)v117.i8), v110, v91), 4uLL);
        v93.i64[1] = v92.u32[0];
        v94 = vmlaq_f32(v90, v111, v93);
        v94.i64[1] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u32[0];
        v95 = vmulq_f32(v109, (float32x4_t)v117);
        v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
        v96 = vmlaq_n_f32(v94, v109, vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32).f32[0]);
        v96.i64[1] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u32[0];
        v95.i64[0] = 0x4000000040000000;
        v95.i64[1] = 0x4000000040000000;
        v97 = vmlaq_f32(v112, v95, v96);
        v98 = vmulq_n_f32(v116, v108);
        v98.i32[3] = 0;
        v93.i64[0] = vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL).u64[0];
        v99 = (int8x8_t)vmls_f32(vmul_f32(v110, (float32x2_t)vext_s8(*(int8x8_t *)v116.f32, *(int8x8_t *)v93.f32, 4uLL)), v64, *(float32x2_t *)v116.f32);
        *(int8x8_t *)v93.f32 = vext_s8(v99, (int8x8_t)vmls_f32(vmul_f32(v107, *(float32x2_t *)v116.f32), v110, *(float32x2_t *)v93.f32), 4uLL);
        v93.i64[1] = v99.u32[0];
        v100 = vmlaq_f32(v98, v111, v93);
        v100.i64[1] = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u32[0];
        v101 = vmulq_f32(v109, v116);
        v101.i64[0] = vpaddq_f32(v101, v101).u64[0];
        v102 = vmlaq_n_f32(v100, v109, vpadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32).f32[0]);
        v103 = vaddq_f32(v102, v102);
        v103.i32[3] = 0;
        v104 = (int8x16_t)vnegq_f32(v103);
        *(_QWORD *)(a15 + 40) = vextq_s8(v104, v104, 4uLL).u64[0];
        v97.i32[3] = v104.i32[0];
        *(float32x4_t *)(a15 + 24) = v97;
        *(float *)(a15 + 48) = v71;
      }
      else
      {
        *(_DWORD *)(a15 + 48) = 0;
        v105 = -a14[1].f32[0];
        *(float32x2_t *)(a15 + 36) = vneg_f32(*a14);
        *(float *)(a15 + 44) = v105;
      }
    }
    else
    {
      v72 = (float32x4_t)v117;
      v73 = vmulq_n_f32((float32x4_t)v117, v108);
      v73.i32[3] = 0;
      v74 = (float32x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u64[0];
      v75 = (int8x8_t)vmls_f32(vmul_f32(v110, (float32x2_t)vext_s8(*(int8x8_t *)v117.i8, (int8x8_t)v74, 4uLL)), v64, *(float32x2_t *)v117.i8);
      *(int8x8_t *)v76.f32 = vext_s8(v75, (int8x8_t)vmls_f32(vmul_f32(v107, *(float32x2_t *)v117.i8), v110, v74), 4uLL);
      v76.i64[1] = v75.u32[0];
      v77 = vmlaq_f32(v73, v111, v76);
      v77.i64[1] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u32[0];
      *(_WORD *)(a15 + 20) = 3;
      v78 = vmulq_f32(v109, v72);
      v78.i64[0] = vpaddq_f32(v78, v78).u64[0];
      v79 = vmlaq_n_f32(v77, v109, vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32).f32[0]);
      v79.i64[1] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u32[0];
      v78.i64[0] = 0x4000000040000000;
      v78.i64[1] = 0x4000000040000000;
      v80 = vmulq_n_f32(v116, v108);
      v80.i32[3] = 0;
      v81 = (float32x2_t)vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL).u64[0];
      v82 = (int8x8_t)vmls_f32(vmul_f32(v110, (float32x2_t)vext_s8(*(int8x8_t *)v116.f32, (int8x8_t)v81, 4uLL)), v64, *(float32x2_t *)v116.f32);
      *(int8x8_t *)v83.f32 = vext_s8(v82, (int8x8_t)vmls_f32(vmul_f32(v107, *(float32x2_t *)v116.f32), v110, v81), 4uLL);
      v83.i64[1] = v82.u32[0];
      v84 = vmlaq_f32(v80, v111, v83);
      v85 = vmlaq_f32(v112, v78, v79);
      v84.i64[1] = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u32[0];
      v86 = vmulq_f32(v109, v116);
      v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
      v87 = vmlaq_n_f32(v84, v109, vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32).f32[0]);
      v88 = vaddq_f32(v87, v87);
      v88.i32[3] = 0;
      v89 = (int8x16_t)vnegq_f32(v88);
      *(_QWORD *)(a15 + 40) = vextq_s8(v89, v89, 4uLL).u64[0];
      v85.i32[3] = v89.i32[0];
      *(float32x4_t *)(a15 + 24) = v85;
      *(float *)(a15 + 48) = v71 * a3;
    }
  }
  return result;
}

BOOL sweepBox_BoxGeom(uint64_t a1, int8x16_t *a2, float a3, float a4, int32x4_t a5, double a6, int32x4_t a7, double a8, double a9, float32x4_t a10, uint64_t a11, float32x4_t *a12, uint64_t a13, float32x2_t *a14, uint64_t a15, __int16 *a16)
{
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float32x4_t v29;
  float32x2_t v30;
  float32x2_t v31;
  int8x8_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x4_t v41;
  int8x8_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v57;
  float32x2_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x2_t v63;
  float32x2_t v64;
  int8x8_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  __int16 v70;
  float *v71;
  float *v72;
  float32x2x2_t v73;
  unint64_t v74;
  int32x4_t v75;
  int32x4_t v76;
  _BOOL8 result;
  float v78;
  float32x4_t v79;
  float32x2_t v80;
  int8x8_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  uint64_t v86;
  float32x4_t v87;
  float32x2_t v88;
  int8x8_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x2_t v97;
  int v98;
  float32x2_t v99;
  float32x2_t v100;
  int v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int8x16_t v105;
  float32x4_t v106;
  float32x2_t v107;
  int8x8_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  uint64_t v113;
  float32x4_t v114;
  float32x2_t v115;
  int8x8_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x2_t v123;
  float32x2_t v124;
  int v125;
  float32x2_t v126;
  float32x2_t v127;
  int v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  int8x16_t v132;
  float v133;
  float32x2_t v135;
  float v136;
  float32x4_t v137;
  float32x2_t v138;
  float32x4_t v139;
  float32x4_t v140;
  _QWORD v141[2];
  float32x4_t v142;
  float32x4_t *v143;
  _OWORD v144[2];
  _OWORD v145[2];
  float32x4_t v146;
  int8x16_t v147;
  float32x2_t v148;
  float32x4_t v149;
  _QWORD v150[2];
  float v151;
  float v152;
  float v153;
  int v154;
  char v155;
  int32x4_t v156;
  _QWORD v157[2];
  float v158;
  float v159;
  float v160;
  int v161;
  char v162;
  int32x4_t v163;
  float32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  uint64_t v169;

  a5.i64[0] = *(_QWORD *)(a1 + 4);
  v18 = a5;
  v18.i32[2] = *(_DWORD *)(a1 + 12);
  v169 = 0;
  v19 = v18;
  v19.i32[3] = 0;
  a7.i64[0] = *(_QWORD *)(a13 + 48);
  v20 = a7;
  v20.i32[2] = *(_DWORD *)(a13 + 56);
  v168 = 0u;
  v21 = (float32x2_t)vdup_laneq_s32(v20, 2);
  v20.i32[3] = 0;
  *(float32x2_t *)a10.f32 = *a14;
  a10.i32[2] = a14[1].i32[0];
  v22.i64[0] = a2[1].i64[0];
  v22.i64[1] = a2[1].u32[2];
  v23 = *a12;
  v24.i64[0] = a12[1].i64[0];
  v24.i64[1] = a12[1].u32[2];
  v25 = (int32x4_t)vnegq_f32(*a12);
  v26 = (float32x4_t)v25;
  v26.i32[3] = 0;
  v139 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a12, 3);
  v140 = v24;
  v27 = vsubq_f32(v22, v24);
  LODWORD(v28) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32).u32[0];
  v29 = vmulq_n_f32(v27, v28);
  v29.i32[3] = 0;
  v30 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  v31 = (float32x2_t)vext_s8(*(int8x8_t *)v25.i8, (int8x8_t)v30, 4uLL);
  v32 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL)), v31, *(float32x2_t *)v27.f32);
  *(int8x8_t *)v33.f32 = vext_s8(v32, (int8x8_t)vmls_f32(vmul_f32(v30, *(float32x2_t *)v27.f32), *(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL)), 4uLL);
  v33.i64[1] = v32.u32[0];
  v34 = vmlaq_laneq_f32(v29, v33, *a12, 3);
  v34.i64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u32[0];
  v35 = vmulq_f32(v26, v27);
  v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
  v36 = vmlaq_n_f32(v34, v26, vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32).f32[0]);
  v37 = vaddq_f32(v36, v36);
  v37.i32[3] = 0;
  v38 = *(float32x4_t *)a2;
  v38.i32[3] = 0;
  v39 = vmulq_f32(v38, v26);
  v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
  v40 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*a2, *a2, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL)), vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32));
  v41 = vmulq_laneq_f32(v38, *a12, 3);
  v38.i64[0] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
  v42 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)a2->i8, *(int8x8_t *)v38.f32, 4uLL), *(float32x2_t *)v25.i8), v31, *(float32x2_t *)a2->i8);
  *(int8x8_t *)v43.f32 = vext_s8(v42, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a2->i8, v30), *(float32x2_t *)v25.i8, *(float32x2_t *)v38.f32), 4uLL);
  *(int8x8_t *)&v43.u32[2] = v42;
  v44 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v26, *(float32x4_t *)a2, 3), v41), v43);
  *(int32x2_t *)v25.i8 = vdup_lane_s32(*(int32x2_t *)v44.f32, 1);
  *(int32x2_t *)v26.f32 = vdup_laneq_s32((int32x4_t)v44, 2);
  v45 = vaddq_f32(v44, v44);
  v46 = (float32x2_t)vdup_laneq_s32((int32x4_t)v45, 2);
  *(int32x2_t *)v44.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v45.f32), 0);
  v47 = vmul_lane_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v45.f32, 1);
  v48 = vmul_laneq_f32(*(float32x2_t *)v26.f32, v45, 2);
  *(float32x2_t *)v25.i8 = vmul_n_f32(*(float32x2_t *)v25.i8, v45.f32[0]);
  v49 = vmul_n_f32(*(float32x2_t *)v26.f32, v45.f32[0]);
  v50 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.f32, 0), v40, 1);
  *(float32x2_t *)v26.f32 = vmul_lane_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v45.f32, 1);
  *(float32x2_t *)v45.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.f32, 1), v40, 1);
  v51 = vmul_lane_f32(v46, v40, 1);
  __asm { FMOV            V8.2S, #1.0 }
  *(float32x2_t *)v44.f32 = vsub_f32(_D8, *(float32x2_t *)v44.f32);
  *(int8x8_t *)v41.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v47), v48), (int8x8_t)vadd_f32(*(float32x2_t *)v25.i8, v51), 4uLL);
  v41.i64[1] = vsub_f32(v49, *(float32x2_t *)v45.f32).u32[0];
  *(int8x8_t *)v25.i8 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v25.i8, v51), (int8x8_t)vsub_f32(*(float32x2_t *)v44.f32, v48), 4uLL);
  v25.i64[1] = vadd_f32(*(float32x2_t *)v26.f32, v50).u32[0];
  v164 = v41;
  v165 = v25;
  *(int8x8_t *)v25.i8 = vext_s8((int8x8_t)vadd_f32(v49, *(float32x2_t *)v45.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v26.f32, v50), 4uLL);
  v25.i64[1] = vsub_f32(*(float32x2_t *)v44.f32, v47).u32[0];
  v166 = v25;
  v167 = v37;
  v161 = 3;
  v162 = 0;
  v157[0] = 0;
  v157[1] = 0;
  v163 = v19;
  v57 = vpmin_f32((float32x2_t)vdup_laneq_s32(v18, 2), *(float32x2_t *)a5.i8);
  v57.f32[0] = vpmin_f32(v57, v57).f32[0];
  v158 = 0.15 * v57.f32[0];
  v159 = 0.05 * v57.f32[0];
  v160 = 0.05 * v57.f32[0];
  v154 = 3;
  v155 = 0;
  v150[0] = 0;
  v150[1] = 0;
  v156 = v20;
  v58 = vpmin_f32(v21, *(float32x2_t *)a7.i8);
  v58.f32[0] = vpmin_f32(v58, v58).f32[0];
  v59 = vmulq_n_f32(a10, a3);
  v60 = v59;
  v60.i32[3] = 0;
  v61 = v23;
  v61.i32[3] = 0;
  v151 = 0.15 * v58.f32[0];
  v152 = 0.05 * v58.f32[0];
  v136 = v28;
  v62 = vmulq_n_f32(v60, v28);
  v62.i32[3] = 0;
  v20.i64[0] = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u64[0];
  v63 = (float32x2_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u64[0];
  v64 = (float32x2_t)vext_s8(*(int8x8_t *)v23.f32, *(int8x8_t *)v20.i8, 4uLL);
  v135 = *(float32x2_t *)v20.i8;
  v65 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v59.f32, (int8x8_t)v63, 4uLL), *(float32x2_t *)v23.f32), v64, *(float32x2_t *)v59.f32);
  *(int8x8_t *)v59.f32 = vext_s8(v65, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v20.i8), *(float32x2_t *)v23.f32, v63), 4uLL);
  v59.i64[1] = v65.u32[0];
  v137 = v61;
  v138 = *(float32x2_t *)v23.f32;
  v66 = vmlsq_laneq_f32(v62, v59, v23, 3);
  v66.i64[1] = vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL).u32[0];
  v67 = vmulq_f32(v60, v61);
  v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
  v68 = vmlaq_n_f32(v66, v61, vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32).f32[0]);
  v69 = vaddq_f32(v68, v68);
  v69.i32[3] = 0;
  v153 = 0.05 * v58.f32[0];
  v149 = v69;
  v70 = *a16;
  v148 = 0;
  v146 = 0u;
  v147 = 0u;
  v142.i64[0] = (uint64_t)off_24ED91430;
  v142.i64[1] = (uint64_t)v157;
  v143 = &v164;
  v71 = (float *)v144;
  v144[0] = v41;
  v145[0] = v25;
  v72 = (float *)v145;
  v73 = (float32x2x2_t)vzip1q_s32((int32x4_t)v41, v25);
  v74 = vzip2q_s32((int32x4_t)v41, v25).u64[0];
  v75 = vzip1q_s32(v165, (int32x4_t)0);
  v20.i64[0] = vzip2q_s32(v165, (int32x4_t)0).u64[0];
  v76 = vzip2q_s32((int32x4_t)v73, v75);
  vst2_f32(v71, v73);
  v145[1] = v37;
  vst2_f32(v72, *(float32x2x2_t *)((char *)&v20 - 8));
  v144[1] = v76;
  v141[0] = off_24ED913D0;
  v141[1] = v150;
  *(float *)v76.i32 = a4;
  result = physx::Gu::gjkRaycastPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(&v142, (uint64_t)v141, &v167, (uint64_t)&v169, &v168, &v149, &v148, &v146, *(int32x2_t *)v76.i8, &v147, (v70 & 0x200) != 0);
  if (result)
  {
    *(_WORD *)(a15 + 20) = 2;
    v78 = v148.f32[0];
    if (*(float *)&v169 >= v148.f32[0])
    {
      if ((v70 & 0x200) != 0)
      {
        v106 = vmulq_n_f32((float32x4_t)v147, v136);
        v106.i32[3] = 0;
        v107 = (float32x2_t)vextq_s8(v147, v147, 8uLL).u64[0];
        v108 = (int8x8_t)vmls_f32(vmul_f32(v138, (float32x2_t)vext_s8(*(int8x8_t *)v147.i8, (int8x8_t)v107, 4uLL)), v64, *(float32x2_t *)v147.i8);
        *(int8x8_t *)v109.f32 = vext_s8(v108, (int8x8_t)vmls_f32(vmul_f32(v135, *(float32x2_t *)v147.i8), v138, v107), 4uLL);
        v109.i64[1] = v108.u32[0];
        v110 = vmlaq_f32(v106, v139, v109);
        v110.i64[1] = vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL).u32[0];
        v111 = vmulq_f32(v137, (float32x4_t)v147);
        v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
        v112 = vmlaq_n_f32(v110, v137, vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32).f32[0]);
        v113 = vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL).u32[0];
        v114 = vmulq_n_f32(v146, v136);
        v114.i32[3] = 0;
        v115 = (float32x2_t)vextq_s8((int8x16_t)v146, (int8x16_t)v146, 8uLL).u64[0];
        v116 = (int8x8_t)vmls_f32(vmul_f32(v138, (float32x2_t)vext_s8(*(int8x8_t *)v146.f32, (int8x8_t)v115, 4uLL)), v64, *(float32x2_t *)v146.f32);
        *(int8x8_t *)v117.f32 = vext_s8(v116, (int8x8_t)vmls_f32(vmul_f32(v135, *(float32x2_t *)v146.f32), v138, v115), 4uLL);
        v117.i64[1] = v116.u32[0];
        v118 = vmlaq_f32(v114, v139, v117);
        v118.i64[1] = vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL).u32[0];
        v119 = vmulq_f32(v137, v146);
        v119.i64[0] = vpaddq_f32(v119, v119).u64[0];
        v120 = vmlaq_n_f32(v118, v137, vpadd_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32).f32[0]);
        v121 = vaddq_f32(v120, v120);
        v121.i32[3] = 0;
        *(_WORD *)(a15 + 20) = 3;
        v122 = vmulq_f32(v121, v121);
        v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
        v123 = vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32);
        v124 = vrsqrte_f32(v123);
        v125 = 4;
        do
        {
          v124 = vmul_f32(v124, vrsqrts_f32(vmul_f32(v124, v124), v123));
          --v125;
        }
        while (v125);
        v126 = vmul_f32(v123, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v123), 0), (int8x8_t)_D8, (int8x8_t)v124));
        v127 = vrecpe_f32(v126);
        v128 = 4;
        do
        {
          v127 = vmul_f32(v127, vrecps_f32(v126, v127));
          --v128;
        }
        while (v128);
        v112.i64[1] = v113;
        v129.i64[0] = 0x4000000040000000;
        v129.i64[1] = 0x4000000040000000;
        v130 = vmlaq_f32(v140, v129, v112);
        v131 = vmulq_n_f32(v121, v127.f32[0]);
        v131.i32[3] = 0;
        v132 = (int8x16_t)vnegq_f32(v131);
        *(_QWORD *)(a15 + 40) = vextq_s8(v132, v132, 4uLL).u64[0];
        v130.i32[3] = v132.i32[0];
        *(float32x4_t *)(a15 + 24) = v130;
        *(float *)(a15 + 48) = v78;
      }
      else
      {
        *(_DWORD *)(a15 + 48) = 0;
        v133 = -a14[1].f32[0];
        *(float32x2_t *)(a15 + 36) = vneg_f32(*a14);
        *(float *)(a15 + 44) = v133;
      }
    }
    else
    {
      v79 = vmulq_n_f32((float32x4_t)v147, v136);
      v79.i32[3] = 0;
      v80 = (float32x2_t)vextq_s8(v147, v147, 8uLL).u64[0];
      v81 = (int8x8_t)vmls_f32(vmul_f32(v138, (float32x2_t)vext_s8(*(int8x8_t *)v147.i8, (int8x8_t)v80, 4uLL)), v64, *(float32x2_t *)v147.i8);
      *(int8x8_t *)v82.f32 = vext_s8(v81, (int8x8_t)vmls_f32(vmul_f32(v135, *(float32x2_t *)v147.i8), v138, v80), 4uLL);
      v82.i64[1] = v81.u32[0];
      v83 = vmlaq_f32(v79, v139, v82);
      v83.i64[1] = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).u32[0];
      v84 = vmulq_f32(v137, (float32x4_t)v147);
      v84.i64[0] = vpaddq_f32(v84, v84).u64[0];
      v85 = vmlaq_n_f32(v83, v137, vpadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32).f32[0]);
      v86 = vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL).u32[0];
      v87 = vmulq_n_f32(v146, v136);
      v87.i32[3] = 0;
      v88 = (float32x2_t)vextq_s8((int8x16_t)v146, (int8x16_t)v146, 8uLL).u64[0];
      v89 = (int8x8_t)vmls_f32(vmul_f32(v138, (float32x2_t)vext_s8(*(int8x8_t *)v146.f32, (int8x8_t)v88, 4uLL)), v64, *(float32x2_t *)v146.f32);
      *(int8x8_t *)v90.f32 = vext_s8(v89, (int8x8_t)vmls_f32(vmul_f32(v135, *(float32x2_t *)v146.f32), v138, v88), 4uLL);
      v90.i64[1] = v89.u32[0];
      v91 = vmlaq_f32(v87, v139, v90);
      v91.i64[1] = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u32[0];
      v92 = vmulq_f32(v137, v146);
      v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
      v93 = vmlaq_n_f32(v91, v137, vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32).f32[0]);
      v94 = vaddq_f32(v93, v93);
      v94.i32[3] = 0;
      *(_WORD *)(a15 + 20) = 3;
      v95 = vmulq_f32(v94, v94);
      v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
      v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
      v97 = vrsqrte_f32(v96);
      v98 = 4;
      do
      {
        v97 = vmul_f32(v97, vrsqrts_f32(vmul_f32(v97, v97), v96));
        --v98;
      }
      while (v98);
      v99 = vmul_f32(v96, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v96), 0), (int8x8_t)_D8, (int8x8_t)v97));
      v100 = vrecpe_f32(v99);
      v101 = 4;
      do
      {
        v100 = vmul_f32(v100, vrecps_f32(v99, v100));
        --v101;
      }
      while (v101);
      v85.i64[1] = v86;
      v102.i64[0] = 0x4000000040000000;
      v102.i64[1] = 0x4000000040000000;
      v103 = vmlaq_f32(v140, v102, v85);
      v104 = vmulq_n_f32(v94, v100.f32[0]);
      v104.i32[3] = 0;
      v105 = (int8x16_t)vnegq_f32(v104);
      *(_QWORD *)(a15 + 40) = vextq_s8(v105, v105, 4uLL).u64[0];
      v103.i32[3] = v105.i32[0];
      *(float32x4_t *)(a15 + 24) = v103;
      *(float *)(a15 + 48) = v78 * a3;
    }
  }
  return result;
}

BOOL physx::Gu::gjkRaycastPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5, float32x4_t *a6, float32x2_t *a7, float32x4_t *a8, int32x2_t a9, int8x16_t *a10, char a11)
{
  _BOOL8 v17;
  double v18;
  int32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  float32x2x2_t v24;
  int32x4_t v25;
  float32x2x2_t v26;
  int32x4_t v27;
  unint64_t v28;
  float *v29;
  float *v30;
  int32x4_t v31;
  float32x2_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v41;
  float32x4_t v42;
  float32x2_t v43;
  float32x2_t v44;
  int v45;
  float32x2_t v46;
  float32x2_t v47;
  int v48;
  _QWORD v49[2];
  float32x4_t v50;
  uint64_t v51;
  int32x4_t v52;
  int32x4_t v53;
  _OWORD v54[2];
  char v55;
  char v56[4];
  char v57[4];
  int32x2_t v58;
  float32x2_t v59;
  float32x4_t v60;
  int8x16_t v61;
  _OWORD v62[2];
  float32x4_t v63;
  float32x2_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v60 = 0u;
  v61 = 0u;
  v59 = 0;
  v17 = physx::Gu::gjkRaycast<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(a1, a2, a3, a9, a4, a5, a6, &v59, &v60, &v61);
  if (v17)
  {
    v19 = (int32x2_t)v59;
    *a7 = v59;
    if (*(float *)v19.i32 == 0.0 && (a11 & 1) != 0)
    {
      v20 = a1->i64[1];
      v21 = a1[1].i64[0];
      v19.i32[0] = *(_DWORD *)(v20 + 16);
      v22 = *(_QWORD *)(a2 + 8);
      LODWORD(v18) = *(_DWORD *)(v22 + 16);
      v64 = 0;
      memset(v62, 0, sizeof(v62));
      v63 = 0u;
      v50.i64[0] = (uint64_t)off_24ED91430;
      v50.i64[1] = v20;
      v51 = v21;
      v24 = *(float32x2x2_t *)(v21 + 32);
      v23 = *(_OWORD *)(v21 + 48);
      v25 = *(int32x4_t *)v21;
      v53 = *(int32x4_t *)(v21 + 16);
      v54[0] = v24;
      v52 = v25;
      v26 = (float32x2x2_t)vzip1q_s32(v25, (int32x4_t)v24);
      v24.val[0] = (float32x2_t)vzip2q_s32(v25, (int32x4_t)v24).u64[0];
      v27 = vzip1q_s32(v53, (int32x4_t)0);
      v28 = vzip2q_s32(v53, (int32x4_t)0).u64[0];
      *(float *)v19.i32 = *(float *)v19.i32 + *(float *)&v18;
      LODWORD(v18) = 1120403456;
      *(float *)v19.i32 = *(float *)v19.i32 * 100.0;
      v58 = vdup_lane_s32(v19, 0);
      v55 = 0;
      v29 = (float *)&v52;
      v30 = (float *)v54;
      v31 = vzip2q_s32((int32x4_t)v26, v27);
      vst2_f32(v29, v26);
      v54[1] = v23;
      v53 = v31;
      vst2_f32(v30, v24);
      v49[0] = off_24ED913D0;
      v49[1] = v22;
      if (physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(&v50, (uint64_t)v49, a3, (uint64_t *)&v58, 0, v57, v56, &v55, *(double *)v31.i64, v18, 0, (uint64_t)v62) != 5)goto LABEL_5;
      __asm { FMOV            V8.2S, #1.0 }
      if (physx::Gu::epaPenetration((uint64_t)a1) - 5 > 1)
      {
        v41 = vnegq_f32(*a6);
        v41.i32[3] = 0;
        v42 = vmulq_f32(v41, v41);
        v42.i64[0] = vpaddq_f32(v42, v42).u64[0];
        v43 = vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32);
        v44 = vrsqrte_f32(v43);
        v45 = 4;
        do
        {
          v44 = vmul_f32(v44, vrsqrts_f32(vmul_f32(v44, v44), v43));
          --v45;
        }
        while (v45);
        v46 = vmul_f32(v43, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v43), 0), _D8, (int8x8_t)v44));
        v47 = vrecpe_f32(v46);
        v48 = 4;
        do
        {
          v47 = vmul_f32(v47, vrecps_f32(v46, v47));
          --v48;
        }
        while (v48);
        v34 = vmulq_n_f32(v41, v47.f32[0]);
        v34.i32[3] = 0;
        v32 = 0;
        v33 = 0uLL;
      }
      else
      {
LABEL_5:
        v32 = v64;
        v33 = (int8x16_t)v62[0];
        v34 = v63;
      }
      *a7 = vmin_f32(v32, 0);
    }
    else
    {
      v34 = v60;
      v33 = v61;
    }
    *a10 = v33;
    *a8 = v34;
  }
  return v17;
}

BOOL physx::Gu::sweepBoxTriangles(_BOOL8 result, uint64_t a2, int a3, uint64_t a4, int32x2_t *a5, uint64_t a6, uint64_t a7, unsigned int *a8, double a9, float a10, double a11, double a12, double a13, float32x4_t a14, __int16 *a15)
{
  __int128 v15;
  int32x2_t v16;
  int v18;
  float32x4_t v19;
  float32x2_t v20;
  unsigned int v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v37;
  int32x2_t v38;
  int32x2_t v39;
  int8x8_t v41;
  float32x2_t v43;
  float32x4_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float v47;
  float32x2_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x4_t v53;
  float32x2_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x2_t v57;
  float32x4_t v58;
  float32x2_t v59;
  float32x2_t v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  int v64;
  float32x2_t v65;
  float v66;
  float v67;
  float v68;
  unsigned int v69;
  unsigned int v70;
  float *v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x8_t v86;
  int8x8_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x2_t v93;
  int8x8_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int v97;
  float32x4_t v98;
  float v99;
  int8x16_t v100;
  float32x4_t v101;
  float32x2_t v102;
  float32x2_t v103;
  int8x8_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x2_t v112;
  float32x2_t v113;
  int v114;
  float32x2_t v115;
  float32x2_t v116;
  int v117;
  float32x4_t v118;
  int8x16_t v119;
  float32x4_t v120;
  int8x8_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int8x16_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float v129;
  float32x4_t v130;
  __int16 v131;
  float32x4_t v134;
  char v135;
  float32x4_t v136;
  unsigned int v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  __int32 v143;
  float32x4_t v144;
  float32x4_t v145;
  float v146;
  __int128 v147;
  float32x4_t v148;
  _QWORD v149[2];
  _QWORD v150[2];
  float32x4_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float v160;
  float v161;
  float v162;
  int v163;
  char v164;
  float32x4_t v165;
  float32x4_t v166;
  uint64_t v167;
  float32x2_t v168;
  float32x4_t v169;
  int8x16_t v170[2];

  if (!result)
    return result;
  *(float *)v16.i32 = a10;
  v18 = result;
  v19 = *(float32x4_t *)a5->i8;
  v20 = (float32x2_t)vdup_lane_s32(*a5, 1);
  v131 = *a15;
  v21 = *a15 & 0x80;
  v22 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a5->i8, 2);
  v23 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a5->i8, 3);
  v24 = vaddq_f32(v19, v19);
  v25 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32((float32x2_t)*a5, *(float32x2_t *)v24.f32), 0);
  *(float32x2_t *)a14.f32 = vmul_lane_f32(v20, *(float32x2_t *)v24.f32, 1);
  v26 = vmul_laneq_f32(v22, v24, 2);
  v27 = vmul_n_f32(v20, v24.f32[0]);
  v28 = vmul_n_f32(v22, v24.f32[0]);
  _D17 = vmul_n_f32(v23, v24.f32[0]);
  _D2 = vmul_lane_f32(v22, *(float32x2_t *)v24.f32, 1);
  _D20 = vmul_lane_f32(v23, *(float32x2_t *)v24.f32, 1);
  *(float32x2_t *)v24.f32 = vmul_laneq_f32(v23, v24, 2);
  __asm { FMOV            V8.2S, #1.0 }
  _D4 = vsub_f32(_D8, v25);
  *(float32x2_t *)v50.f32 = vadd_f32(v27, *(float32x2_t *)v24.f32);
  *(float32x2_t *)v51.f32 = vsub_f32(v28, _D20);
  v37 = vsub_f32(v27, *(float32x2_t *)v24.f32);
  v38 = (int32x2_t)vsub_f32(_D4, v26);
  v39 = (int32x2_t)vadd_f32(_D2, _D17);
  _D1 = (int8x8_t)vadd_f32(v28, _D20);
  v41 = (int8x8_t)vsub_f32(_D2, _D17);
  _D17.f32[0] = vsub_f32(_D4, *(float32x2_t *)a14.f32).f32[0];
  v26.f32[0] = (float)(1.0 - a14.f32[1]) - v26.f32[1];
  _D4.i32[0] = a5[2].i32[0];
  v24.i32[0] = a5[2].i32[1];
  _D2.i32[0] = a5[3].i32[0];
  a14.i64[0] = *(_QWORD *)(a4 + 4);
  v43 = (float32x2_t)__PAIR64__(v37.u32[1], v50.u32[0]);
  v44.i32[3] = 0;
  v44.i64[0] = __PAIR64__(v37.u32[1], v26.u32[0]);
  v37.i32[0] = v26.i32[0];
  v45 = vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v50.f32, v38), -v24.f32[0]), v37, _D4, 0);
  v46 = (float32x2_t)vzip1_s32(*(int32x2_t *)v51.f32, v39);
  *(float32x2_t *)v52.f32 = vmls_lane_f32(v45, v46, _D2, 0);
  __asm
  {
    FMLS            S20, S4, V1.S[1]
    FMLS            S20, S2, V17.S[0]
  }
  v47 = *(float *)(a6 + 8);
  v48 = (float32x2_t)vdup_lane_s32(v38, 0);
  v48.i32[0] = v26.i32[0];
  *(float32x2_t *)v56.f32 = vadd_f32(vadd_f32(vmul_f32(v43, (float32x2_t)vrev64_s32(*(int32x2_t *)a6)), vmul_f32(v48, *(float32x2_t *)a6)), vmul_n_f32(v46, v47));
  v46.f32[0] = vaddv_f32(vmul_f32((float32x2_t)vext_s8(_D1, v41, 4uLL), *(float32x2_t *)a6))
             + (float)(v47 * _D17.f32[0]);
  *(float32x2_t *)v49.f32 = vmul_n_f32(*(float32x2_t *)v56.f32, *(float *)&a9);
  v50.i32[1] = v38.i32[0];
  v50.i32[2] = v41.i32[0];
  v51.i32[1] = v39.i32[0];
  v51.i32[2] = _D17.i32[0];
  v52.i32[2] = _D20.i32[0];
  v53 = (int32x4_t)a14;
  v53.i32[2] = *(_DWORD *)(a4 + 12);
  v167 = 0;
  v54 = (float32x2_t)vdup_laneq_s32(v53, 2);
  v55 = (float32x4_t)v53;
  v55.i32[3] = 0;
  v56.i64[1] = v46.u32[0];
  v166 = 0uLL;
  v57 = (float32x2_t)vdup_lane_s32(v16, 0);
  v58 = vmulq_f32(v55, vabsq_f32(v56));
  v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
  v59 = vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32);
  v163 = 3;
  v164 = 0;
  v159 = 0uLL;
  v165 = v55;
  v60 = vpmin_f32(v54, *(float32x2_t *)a14.f32);
  v60.f32[0] = vpmin_f32(v60, v60).f32[0];
  v160 = 0.15 * v60.f32[0];
  v161 = 0.05 * v60.f32[0];
  v162 = 0.05 * v60.f32[0];
  v49.f32[2] = v46.f32[0] * *(float *)&a9;
  v49.i32[3] = 0;
  v158 = v49;
  a14.i8[12] = 0;
  a14.i8[13] = 0;
  a14.i8[14] = 0;
  a14.i8[15] = 0;
  a14.i64[0] = __PAIR64__(v24.u32[0], _D4.u32[0]);
  v134 = v19;
  if (a8)
    v61 = *a8;
  else
    v61 = 0;
  v137 = 0;
  v62 = 0;
  v63 = 0;
  *(int32x2_t *)&v15 = vdup_lane_s32(*(int32x2_t *)&a9, 0);
  v135 = a3;
  v64 = a3 | (v21 >> 7);
  v44.i32[2] = _D1.i32[1];
  v50.i32[3] = 0;
  v51.i32[3] = 0;
  v52.i32[3] = 0;
  v65 = vadd_f32(v57, v59);
  a14.i32[2] = _D2.i32[0];
  v130 = a14;
  v66 = 0.0;
  v145 = (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu);
  v138 = 0u;
  v139 = v44;
  v136 = 0u;
  v67 = 0.0;
  v68 = 0.0;
  v142 = v50;
  v143 = v16.i32[0];
  v140 = v52;
  v141 = v51;
  v144 = v56;
  while (1)
  {
    if (v61 == v62)
      v69 = 0;
    else
      v69 = v62;
    if (v62)
      v70 = v69;
    else
      v70 = v61;
    v71 = (float *)(a2 + 36 * v70);
    v72 = vmulq_n_f32(v44, *v71);
    v72.i32[3] = 0;
    v73 = vmulq_n_f32(v50, v71[1]);
    v73.i32[3] = 0;
    v74 = vmulq_n_f32(v51, v71[2]);
    v74.i32[3] = 0;
    v75 = vaddq_f32(v52, vaddq_f32(vaddq_f32(v72, v73), v74));
    v76 = vmulq_n_f32(v44, v71[3]);
    v76.i32[3] = 0;
    v77 = vmulq_n_f32(v50, v71[4]);
    v77.i32[3] = 0;
    v78 = vmulq_n_f32(v51, v71[5]);
    v78.i32[3] = 0;
    v79 = vaddq_f32(v52, vaddq_f32(vaddq_f32(v76, v77), v78));
    v80 = vmulq_n_f32(v44, v71[6]);
    v80.i32[3] = 0;
    v81 = vmulq_n_f32(v50, v71[7]);
    v81.i32[3] = 0;
    v82 = vmulq_n_f32(v51, v71[8]);
    v82.i32[3] = 0;
    v83 = vaddq_f32(v52, vaddq_f32(vaddq_f32(v80, v81), v82));
    v84 = (int8x16_t)vsubq_f32(v83, v79);
    v85 = (int8x16_t)vsubq_f32(v75, v79);
    v86 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v85.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL)), *(float32x2_t *)v84.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL));
    v87 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 4uLL), *(float32x2_t *)v84.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 4uLL), *(float32x2_t *)v85.i8);
    if ((v64 & 1) == 0)
    {
      *(int8x8_t *)v88.f32 = vext_s8(v87, v86, 4uLL);
      v88.i64[1] = v87.u32[0];
      v89 = vmulq_f32(v88, v158);
      v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
      if (vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32).f32[0] >= *(float *)&v167)
        goto LABEL_20;
    }
    v90 = vmulq_f32(v56, v75);
    v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
    *(float32x2_t *)v90.f32 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
    v91 = vmulq_f32(v56, v79);
    v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
    *(float32x2_t *)v91.f32 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
    v92 = vmulq_f32(v56, v83);
    v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
    *(float32x2_t *)v92.f32 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
    v93 = vmin_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v92.f32);
    *(int8x8_t *)v91.f32 = vext_s8(*(int8x8_t *)v90.f32, *(int8x8_t *)v91.f32, 4uLL);
    v91.i64[1] = v92.u32[0];
    if (vuzp1_s8(vorr_s8((int8x8_t)vmovn_s32(vcgtq_f32(v166, v91)), (int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vmin_f32(*(float32x2_t *)v90.f32, v93), vadd_f32(v65, *(float32x2_t *)&v15)), 0)), *(int8x8_t *)v75.f32).u32[0] == -1)goto LABEL_20;
    v94 = v87;
    v146 = *(float *)v86.i32;
    v147 = v15;
    v95 = vmulq_f32(vaddq_f32(vaddq_f32(v75, v79), v83), v145);
    v95.i32[3] = 0;
    v154 = 0;
    v151 = v95;
    v155 = v75;
    v156 = v79;
    v157 = v83;
    v152 = 0x7F7FFFFF00000000;
    v153 = 0x57F7FFFFFLL;
    v150[1] = &v151;
    v149[1] = &v159;
    v150[0] = off_24ED91370;
    v149[0] = off_24ED913D0;
    v148 = vsubq_f32(v95, v159);
    v169 = 0u;
    v170[0] = 0u;
    v168 = 0;
    if (!physx::Gu::gjkRaycast<physx::Gu::LocalConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>((uint64_t)v150, (uint64_t)v149, &v148, (int32x2_t)v16.u32[0], (uint64_t)&v167, &v166, &v158, &v168, &v169, v170))
    {
      v15 = v147;
      v50 = v142;
      v16.i32[0] = v143;
      v52 = v140;
      v51 = v141;
      v44 = v139;
      v56 = v144;
      goto LABEL_20;
    }
    if (*(float *)&v167 >= v168.f32[0])
    {
      *(_DWORD *)(a7 + 48) = 0;
      *(_DWORD *)(a7 + 16) = v70;
      v129 = -*(float *)(a6 + 8);
      *(float32x2_t *)(a7 + 36) = vneg_f32(*(float32x2_t *)a6);
      *(float *)(a7 + 44) = v129;
      *(_WORD *)(a7 + 20) = 2;
      v97 = 1;
      LODWORD(v15) = v147;
      goto LABEL_22;
    }
    v138 = (float32x4_t)v170[0];
    v136 = v169;
    *((_QWORD *)&v15 + 1) = *((_QWORD *)&v147 + 1);
    *(float32x2_t *)&v15 = vmul_f32(*(float32x2_t *)&v147, v168);
    v56 = v144;
    v96 = vmulq_n_f32(v144, *(float *)&v15);
    v96.i32[3] = 0;
    v158 = v96;
    v68 = *(float *)&v94.i32[1];
    v67 = v146;
    v66 = *(float *)v94.i32;
    v63 = 1;
    if ((*a15 & 0x40) != 0)
      break;
    v137 = v70;
    v50 = v142;
    v16.i32[0] = v143;
    v52 = v140;
    v51 = v141;
    v44 = v139;
LABEL_20:
    if (v18 == ++v62)
    {
      v97 = 2;
      goto LABEL_22;
    }
  }
  v97 = 2;
  v137 = v70;
LABEL_22:
  result = v97 != 2;
  if (v97 == 2 && (v63 & 1) != 0)
  {
    v98 = v134;
    v98.i32[3] = 0;
    LODWORD(v99) = vmla_f32((float32x2_t)0xBF000000BF000000, v23, v23).u32[0];
    v100 = (int8x16_t)v136;
    v101 = vmulq_n_f32(v136, v99);
    v101.i32[3] = 0;
    v102 = (float32x2_t)vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u64[0];
    v103 = (float32x2_t)vext_s8(*(int8x8_t *)v134.f32, (int8x8_t)v102, 4uLL);
    v104 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v134.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v100, v100, 4uLL)), v103, *(float32x2_t *)v136.f32);
    *(int8x8_t *)v105.f32 = vext_s8(v104, (int8x8_t)vmls_f32(vmul_f32(v102, *(float32x2_t *)v136.f32), *(float32x2_t *)v134.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v100, v100, 8uLL)), 4uLL);
    v105.i64[1] = v104.u32[0];
    v106 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v134, 3);
    v107 = vmlaq_laneq_f32(v101, v105, v134, 3);
    v107.i64[1] = vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL).u32[0];
    v108 = vmulq_f32(v98, v136);
    v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
    v109 = vmlaq_n_f32(v107, v98, vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32).f32[0]);
    v110 = vaddq_f32(v109, v109);
    v110.i32[3] = 0;
    *(_DWORD *)(a7 + 16) = v137;
    v111 = vmulq_f32(v110, v110);
    v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
    v112 = vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32);
    v113 = vrsqrte_f32(v112);
    v114 = 4;
    do
    {
      v113 = vmul_f32(v113, vrsqrts_f32(vmul_f32(v113, v113), v112));
      --v114;
    }
    while (v114);
    v115 = vmul_f32(v112, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v112), 0), (int8x8_t)_D8, (int8x8_t)v113));
    v116 = vrecpe_f32(v115);
    v117 = 4;
    do
    {
      v116 = vmul_f32(v116, vrecps_f32(v115, v116));
      --v117;
    }
    while (v117);
    v118 = vmulq_n_f32(v110, v116.f32[0]);
    v118.i32[3] = 0;
    v119 = (int8x16_t)v138;
    v120 = vmulq_n_f32(v138, v99);
    v120.i32[3] = 0;
    v121 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v134.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 4uLL)), v103, *(float32x2_t *)v138.f32);
    *(int8x8_t *)v122.f32 = vext_s8(v121, (int8x8_t)vmls_f32(vmul_f32(v102, *(float32x2_t *)v138.f32), *(float32x2_t *)v134.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL)), 4uLL);
    v122.i64[1] = v121.u32[0];
    v123 = vmlaq_f32(v120, v106, v122);
    v123.i64[1] = vextq_s8((int8x16_t)v123, (int8x16_t)v123, 8uLL).u32[0];
    v124 = (int8x16_t)vnegq_f32(v118);
    v125 = vmulq_f32(v98, v138);
    v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
    v126 = vmlaq_n_f32(v123, v98, vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32).f32[0]);
    v126.i64[1] = vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL).u32[0];
    v127.i64[0] = 0x4000000040000000;
    v127.i64[1] = 0x4000000040000000;
    v128 = vmlaq_f32(v130, v127, v126);
    *(_QWORD *)(a7 + 40) = vextq_s8(v124, v124, 4uLL).u64[0];
    v128.i32[3] = v124.i32[0];
    *(float32x4_t *)(a7 + 24) = v128;
    *(_DWORD *)(a7 + 48) = v15;
    if ((v131 & 0x80) != 0
      && (v135 & 1) == 0
      && (float)((float)((float)(v67 * *(float *)(a6 + 4)) + (float)(v68 * *(float *)a6))
               + (float)(v66 * *(float *)(a6 + 8))) > 0.0)
    {
      *(float32x2_t *)(a7 + 36) = vneg_f32(*(float32x2_t *)v124.i8);
      *(float *)(a7 + 44) = -*(float *)&v124.i32[2];
    }
    *(_WORD *)(a7 + 20) = 3;
    return 1;
  }
  return result;
}

uint64_t sweepCapsule_HeightfieldUnregistered(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuSweepTests.cpp", 510, "Height Field Sweep test called with height fields unregistered ", a6, a7, a8, vars0);
  return 0;
}

uint64_t sweepBox_HeightfieldUnregistered(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuSweepTests.cpp", 525, "Height Field Sweep test called with height fields unregistered ", a6, a7, a8, vars0);
  return 0;
}

uint64_t sweepConvex_HeightfieldUnregistered(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuSweepTests.cpp", 539, "Height Field Sweep test called with height fields unregistered ", a6, a7, a8, vars0);
  return 0;
}

void physx::Gu::NodeAllocator::~NodeAllocator(physx::Gu::NodeAllocator *this)
{
  int v2;

  physx::Gu::NodeAllocator::release(this);
  v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
}

uint64_t physx::Gu::NodeAllocator::release(physx::Gu::NodeAllocator *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;

  v2 = (uint64_t *)((char *)this + 8);
  v3 = *((unsigned int *)this + 4);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 16 * v3;
    do
    {
      v6 = *v2;
      v7 = *(_QWORD *)(*v2 + v4);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v7 - 16);
      *(_QWORD *)(v6 + v4) = 0;
      v4 += 16;
    }
    while (v5 != v4);
  }
  physx::shdfnd::Array<physx::Gu::NodeAllocator::Slab,physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>>::resize((uint64_t)v2, 0, &v9);
  result = physx::shdfnd::Array<physx::Gu::NodeAllocator::Slab,physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>>::recreate((uint64_t)v2, *((_DWORD *)this + 4));
  *((_QWORD *)this + 3) = 0;
  return result;
}

double physx::Gu::NodeAllocator::init(physx::Gu::NodeAllocator *this, int a2, unsigned int a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  __int128 v13;

  v5 = 2 * a2 - 1;
  if (v5 >= 0x401)
    v6 = v5 / a3;
  else
    v6 = v5;
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::AABBTreeBuildNode>::getName() [T = physx::Gu::"
         "AABBTreeBuildNode]";
  else
    v8 = "<allocation names disabled>";
  v9 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24)
                                                                                                  + 16))(v7 + 24, 40 * v6 + 16, v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuAABBTreeBuild.cpp", 67);
  *v9 = 40;
  v9[1] = v6;
  v9 += 2;
  *(_QWORD *)this = v9;
  bzero(v9, (40 * v6));
  v10 = *(_QWORD *)this;
  *(_DWORD *)(v10 + 32) = 0;
  *(_DWORD *)(v10 + 36) = a2;
  *(_QWORD *)&v13 = v10;
  DWORD2(v13) = 1;
  HIDWORD(v13) = v6;
  v11 = *((unsigned int *)this + 4);
  if ((*((_DWORD *)this + 5) & 0x7FFFFFFFu) <= v11)
  {
    physx::shdfnd::Array<physx::Gu::NodeAllocator::Slab,physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>>::growAndPushBack((uint64_t)this + 8, &v13);
  }
  else
  {
    *(_OWORD *)(*((_QWORD *)this + 1) + 16 * v11) = v13;
    ++*((_DWORD *)this + 4);
  }
  *(_QWORD *)&result = 0x100000000;
  *((_QWORD *)this + 3) = 0x100000000;
  return result;
}

void physx::Gu::AABBTreeBuildNode::subdivide(float32x4_t *a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int v24;
  float32x4_t v25;
  unsigned int v26;
  float32x4_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  const char *v41;
  _OWORD *v42;
  _DWORD *v43;
  uint64_t v44;
  __int128 v45;

  v8 = a1[2].u32[1];
  v9 = (unsigned int *)(a5 + 4 * a1[2].u32[0]);
  v11 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v12 = (_OWORD *)(v11 + 24 * *v9);
  v13 = *(float32x4_t *)v12;
  v14 = *(float32x4_t *)((char *)v12 + 12);
  v15 = *(float32x4_t *)(v10 + 12 * *v9);
  if (v8 >= 2)
  {
    v16 = v8 - 1;
    v17 = v9 + 1;
    do
    {
      v18 = *v17++;
      v19 = v11 + 24 * v18;
      v15 = vaddq_f32(v15, *(float32x4_t *)(v10 + 12 * v18));
      v13 = vminq_f32(v13, *(float32x4_t *)v19);
      v14 = vmaxq_f32(v14, *(float32x4_t *)(v19 + 12));
      --v16;
    }
    while (v16);
  }
  v13.i32[3] = v14.i32[0];
  *a1 = v13;
  a1[1].i64[0] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL).u64[0];
  if (v8 > *(_DWORD *)a2)
  {
    v20 = vmulq_n_f32(v15, 1.0 / (float)v8);
    v21 = 0uLL;
    v22 = v9;
    v23 = v8;
    do
    {
      v24 = *v22++;
      v25 = vsubq_f32(*(float32x4_t *)(v10 + 12 * v24), v20);
      v21 = vaddq_f32(v21, vmulq_f32(v25, v25));
      --v23;
    }
    while (v23);
    v26 = 0;
    v27 = vmulq_n_f32(v21, 1.0 / (float)(v8 - 1));
    *(_QWORD *)&v45 = v27.i64[0];
    v28 = *(_QWORD *)&vmovn_s32(vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1), v27)) & 1;
    if (v27.f32[2] > *(float *)((unint64_t)&v45 & 0xFFFFFFFFFFFFFFFBLL | (4 * v28)))
      v28 = 2;
    v29 = (float)(a1->f32[v28] + a1->f32[v28 + 3]) * 0.5;
    v30 = v10 + 4 * v28;
    v31 = v9;
    v32 = v8;
    do
    {
      v33 = *v31;
      if (*(float *)(v30 + 12 * *v31) > v29)
      {
        *v31 = v9[v26];
        v9[v26++] = v33;
      }
      ++v31;
      --v32;
    }
    while (v32);
    if (!v26 || v26 == (_DWORD)v8)
    {
      if (v8 <= *(_DWORD *)a2)
        return;
      v26 = v8 >> 1;
    }
    v34 = *(_QWORD *)(a4 + 8);
    v35 = *(unsigned int *)(a4 + 24);
    *(_DWORD *)(a4 + 28) += 2;
    v36 = v34 + 16 * v35;
    v38 = *(_DWORD *)(v36 + 8);
    v39 = *(_DWORD *)(v36 + 12);
    v37 = (_DWORD *)(v36 + 8);
    if (v38 + 2 <= v39)
    {
      v43 = (_DWORD *)(*(_QWORD *)(v34 + 16 * v35) + 40 * v38);
      *v37 = v38 + 2;
    }
    else
    {
      v40 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v41 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::AABBTreeBuildNode>::getName() [T = physx:"
              ":Gu::AABBTreeBuildNode]";
      else
        v41 = "<allocation names disabled>";
      v42 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v40 + 24) + 16))(v40 + 24, 40976, v41, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuAABBTreeBuild.cpp", 94);
      *v42 = xmmword_2261A9780;
      v43 = v42 + 1;
      bzero(v42 + 1, 0xA000uLL);
      *(_QWORD *)&v45 = v43;
      *((_QWORD *)&v45 + 1) = 0x40000000002;
      v44 = *(unsigned int *)(a4 + 16);
      if ((*(_DWORD *)(a4 + 20) & 0x7FFFFFFFu) <= v44)
      {
        physx::shdfnd::Array<physx::Gu::NodeAllocator::Slab,physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>>::growAndPushBack(a4 + 8, &v45);
      }
      else
      {
        *(_OWORD *)(*(_QWORD *)(a4 + 8) + 16 * v44) = v45;
        ++*(_DWORD *)(a4 + 16);
      }
      ++*(_DWORD *)(a4 + 24);
    }
    a1[1].i64[1] = (uint64_t)v43;
    *a3 += 2;
    v43[8] = a1[2].i32[0];
    v43[9] = v26;
    v43[18] = a1[2].i32[0] + v26;
    v43[19] = a1[2].i32[1] - v26;
  }
}

uint64_t physx::Gu::AABBTreeBuildNode::_buildHierarchy(float32x4_t *a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;

  physx::Gu::AABBTreeBuildNode::subdivide(a1, a2, a3, a4, a5);
  result = a1[1].i64[1];
  if (result)
  {
    v11 = result + 40;
    ((void (*)(void))physx::Gu::AABBTreeBuildNode::_buildHierarchy)();
    result = physx::Gu::AABBTreeBuildNode::_buildHierarchy(v11, a2, a3, a4, a5);
  }
  a3[1] += a1[2].i32[1];
  return result;
}

uint64_t physx::Gu::initAABBTreeBuild(uint64_t a1, physx::Gu::NodeAllocator *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  double v12;
  float32x4_t *v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;

  v4 = *(unsigned int *)(a1 + 4);
  if (*(_DWORD *)(a1 + 4))
    v5 = *a4 == 0;
  else
    v5 = 0;
  v6 = v5;
  if (v5)
  {
    *a3 = 1;
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuAABBTreeBuild.cpp", 273);
    v11 = 0;
    *a4 = v10;
    do
    {
      *(_DWORD *)(v10 + 4 * v11) = v11;
      ++v11;
    }
    while (v4 != v11);
    v12 = physx::Gu::NodeAllocator::init(a2, v4, *(_DWORD *)a1);
    if ((_DWORD)v4 == -1)
      v13 = 0;
    else
      v13 = (float32x4_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t, double))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * (v4 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuAABBTreeBuild.cpp", 282, v12);
    *(_QWORD *)(a1 + 16) = v13;
    v14 = *(_QWORD *)(a1 + 8);
    if (v4 <= 1)
      v15 = 1;
    else
      v15 = v4;
    v16.i64[0] = 0x3F0000003F000000;
    v16.i64[1] = 0x3F0000003F000000;
    do
    {
      *v13 = vmulq_f32(vaddq_f32(*(float32x4_t *)v14, *(float32x4_t *)(v14 + 12)), v16);
      v13 = (float32x4_t *)((char *)v13 + 12);
      v14 += 24;
      --v15;
    }
    while (v15);
  }
  return v6;
}

uint64_t physx::Gu::buildAABBTree(uint64_t a1, physx::Gu::NodeAllocator *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t inited;

  inited = physx::Gu::initAABBTreeBuild(a1, a2, a3, a4);
  if ((_DWORD)inited)
    physx::Gu::AABBTreeBuildNode::_buildHierarchy(*(float32x4_t **)a2, a1, a3, (uint64_t)a2, *a4);
  return inited;
}

void physx::Gu::BVHStructure::~BVHStructure(physx::Gu::BVHStructure *this)
{
  if (this)
    (*(void (**)(uint64_t, physx::Gu::BVHStructure *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

void `non-virtual thunk to'physx::Gu::BVHStructure::~BVHStructure(physx::Gu::BVHStructure *this)
{
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16);
}

uint64_t physx::Gu::BVHStructure::load(uint64_t a1, void (***a2)(_QWORD, unsigned __int32 *, uint64_t))
{
  uint64_t v4;
  unsigned int *v5;
  _BOOL4 v6;
  uint8x8_t v7;
  uint8x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  uint64_t v11;
  __int32 *v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  __int32 *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int32 *v24;
  uint8x8_t v25;
  int16x8_t v26;
  uint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  int16x8_t v31;
  BOOL v33;
  int v34;

  v33 = 0;
  v4 = physx::readHeader(0x42u, 0x56u, 0x48u, 0x53u, &v34, &v33, a2);
  if ((_DWORD)v4)
  {
    v5 = (unsigned int *)(a1 + 40);
    v6 = v33;
    (**a2)(a2, (unsigned __int32 *)(a1 + 40), 8);
    if (v6)
    {
      v7.i32[0] = *(_DWORD *)(a1 + 40);
      v8.i32[0] = *(_DWORD *)(a1 + 44);
      v9 = (int16x8_t)vmovl_u8(v7);
      *(int16x4_t *)v9.i8 = vrev64_s16(*(int16x4_t *)v9.i8);
      v9.i32[0] = vmovn_s16(v9).u32[0];
      v10 = (int16x8_t)vmovl_u8(v8);
      *(int16x4_t *)v10.i8 = vrev64_s16(*(int16x4_t *)v10.i8);
      v9.i32[1] = vmovn_s16(v10).u32[0];
      *(_QWORD *)(a1 + 40) = v9.i64[0];
    }
    v11 = *v5;
    if ((_DWORD)v11)
    {
      v12 = (__int32 *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v11, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuBVHStructure.cpp", 82);
      v13 = *v5;
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    *(_QWORD *)(a1 + 56) = v12;
    physx::readFloatBuffer(v12, v13, v6, (void (***)(_QWORD, __int32 *, _QWORD))a2);
    v14 = *(_DWORD *)(a1 + 40);
    v15 = __CFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
    {
      v17 = 0;
      v18 = -6;
    }
    else
    {
      v17 = (__int32 *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24 * v16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuBVHStructure.cpp", 86);
      v18 = 6 * *v5;
    }
    *(_QWORD *)(a1 + 48) = v17;
    physx::readFloatBuffer(v17, v18, v6, (void (***)(_QWORD, __int32 *, _QWORD))a2);
    v19 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v19)
    {
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 28 * v19, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuBVHStructure.cpp", 90);
      v21 = *(_DWORD *)(a1 + 44);
      *(_QWORD *)(a1 + 72) = v20;
      if (v21)
      {
        v22 = 0;
        v23 = 0;
        do
        {
          v24 = (unsigned __int32 *)(*(_QWORD *)(a1 + 72) + 28 * v23 + 24);
          (**a2)(a2, v24, 4);
          if (v6)
          {
            v25.i32[0] = *v24;
            v26 = (int16x8_t)vmovl_u8(v25);
            *(int16x4_t *)v26.i8 = vrev64_s16(*(int16x4_t *)v26.i8);
            *v24 = vmovn_s16(v26).u32[0];
          }
          v27 = *(_QWORD *)(a1 + 72);
          (**a2)(a2, (unsigned __int32 *)(v27 + 28 * v23), 24);
          if (v6)
          {
            v29 = 0;
            v30 = v27 + v22;
            do
            {
              v28.i32[0] = *(_DWORD *)(v30 + v29);
              v31 = (int16x8_t)vmovl_u8(v28);
              *(int16x4_t *)v31.i8 = vrev64_s16(*(int16x4_t *)v31.i8);
              v28 = (uint8x8_t)vmovn_s16(v31);
              *(_DWORD *)(v30 + v29) = v28.i32[0];
              v29 += 4;
            }
            while (v29 != 24);
          }
          ++v23;
          v22 += 28;
        }
        while (v23 < *(unsigned int *)(a1 + 44));
      }
    }
    else
    {
      *(_QWORD *)(a1 + 72) = 0;
    }
  }
  return v4;
}

uint64_t physx::Gu::BVHStructure::release(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(this + 24);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this + 16) + 16))(this + 16);
  return this;
}

uint64_t physx::Gu::BVHStructure::onRefCountZero(physx::Gu::BVHStructure *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*((_QWORD *)this + 6))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 6) = 0;
  if (*((_QWORD *)this + 7))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 7) = 0;
  if (*((_QWORD *)this + 9))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 9) = 0;
  if (*((_QWORD *)this + 8))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  if (!physx::GuMeshFactory::removeBVHStructure(*((_QWORD *)this + 4), (uint64_t)this))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuBVHStructure.cpp", 126, "Gu::BVHStructure::release: double deletion detected!", v10, v11, v12, a9);
  v13 = *((unsigned __int16 *)this + 4);
  v14 = *((_QWORD *)this + 4);
  v15 = *(_QWORD *)this;
  if ((*((_WORD *)this + 5) & 1) != 0)
    result = (*(uint64_t (**)(physx::Gu::BVHStructure *))(v15 + 32))(this);
  else
    result = (*(uint64_t (**)(physx::Gu::BVHStructure *))(v15 + 24))(this);
  v17 = *(unsigned int *)(v14 + 248);
  if ((_DWORD)v17)
  {
    v18 = 0;
    v19 = 8 * v17;
    do
    {
      result = (*(uint64_t (**)(_QWORD, physx::Gu::BVHStructure *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v14 + 240) + v18)
                                                                                     + 16))(*(_QWORD *)(*(_QWORD *)(v14 + 240) + v18), this, v13);
      v18 += 8;
    }
    while (v19 != v18);
  }
  return result;
}

uint64_t `non-virtual thunk to'physx::Gu::BVHStructure::onRefCountZero(physx::Gu::BVHStructure *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return physx::Gu::BVHStructure::onRefCountZero((physx::Gu::BVHStructure *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t physx::Gu::BVHStructure::createVolumes(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t v4;

  if (!*(_QWORD *)(this + 64))
  {
    v1 = this;
    v2 = *(unsigned int *)(this + 40);
    if ((_DWORD)v2)
    {
      this = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                              + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuBVHStructure.cpp", 133);
      v3 = *(_DWORD *)(v1 + 40);
      *(_QWORD *)(v1 + 64) = this;
      if (v3)
      {
        v4 = 0;
        do
        {
          *(_DWORD *)(this + 4 * v4) = v4;
          ++v4;
        }
        while (v4 < *(unsigned int *)(v1 + 40));
      }
    }
    else
    {
      *(_QWORD *)(this + 64) = 0;
    }
  }
  return this;
}

uint64_t physx::Gu::BVHStructure::raycast(_QWORD *a1, float32x2_t *a2, float32x2_t *a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float32x2_t v16;
  float32x2_t v17;
  float v18;
  double v19;
  double v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  _QWORD *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  unsigned int v44;
  uint64_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  unsigned __int32 v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  unsigned __int32 v60;
  uint64_t v62;
  uint64_t v64;
  float32x4_t v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int8x16_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int v81;
  uint64_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  _QWORD v94[256];
  char v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  physx::Gu::BVHStructure::createVolumes((uint64_t)a1);
  v11 = 0;
  v12 = 0;
  v14 = a1[8];
  v13 = a1[9];
  v15 = a2[1].f32[0] + a2[1].f32[0];
  v16 = vadd_f32(*a2, *a2);
  v17 = vadd_f32(*a3, *a3);
  v18 = a3[1].f32[0] + a3[1].f32[0];
  v19 = COERCE_DOUBLE(vadd_f32(v16, vmul_n_f32(v17, a6)));
  v20 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v17), (int8x8_t)v16, vbsl_s8((int8x8_t)vcgez_f32(v17), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
  *(float32x2_t *)v21.f32 = v16;
  v21.i64[1] = LODWORD(v15);
  *(float32x2_t *)v22.f32 = v17;
  v22.i64[1] = LODWORD(v18);
  v24 = a1 + 6;
  v23 = a1[6];
  v85 = v24[1];
  *(int8x8_t *)v25.f32 = vext_s8((int8x8_t)v17, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL), 4uLL);
  v25.i64[1] = v17.u32[0];
  v26 = vabsq_f32(v22);
  *(int8x8_t *)v27.f32 = vext_s8(*(int8x8_t *)v26.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL), 4uLL);
  v27.i64[1] = v26.u32[0];
  v28 = v15 + (float)(v18 * a6);
  v29 = -3.4028e38;
  if (v18 >= 0.0)
    v29 = 3.4028e38;
  if (v18 != 0.0)
    v15 = v29;
  if (a6 >= 3.4028e38)
  {
    *(double *)v30.i64 = v20;
  }
  else
  {
    v15 = v28;
    *(double *)v30.i64 = v19;
  }
  v30.i64[1] = LODWORD(v15);
  v31 = vminq_f32(v21, v30);
  v32 = vmaxq_f32(v21, v30);
  v97 = 0x10000000100;
  v95 = 1;
  v96 = v94;
  v94[0] = v13;
  v33 = vnegq_f32(v25);
  v92 = v22;
  v93 = v21;
  v90 = v27;
  v91 = v26;
  v87 = v32;
  v89 = v31;
  v86 = v33;
  while (1)
  {
    v34 = v96[v12];
    v35 = *(float32x4_t *)(v34 + 12);
    v36 = (int8x16_t)vsubq_f32(v35, *(float32x4_t *)v34);
    v37 = (float32x4_t)v36;
    v37.i32[3] = 0;
    v38 = vaddq_f32(*(float32x4_t *)v34, v35);
    v38.i32[3] = 0;
    v39 = vaddq_f32(v38, v37);
    v40 = vsubq_f32(v38, v37);
    v41 = vsubq_f32(v21, v38);
    *(int8x8_t *)v42.f32 = vext_s8(*(int8x8_t *)v41.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL), 4uLL);
    v42.i64[1] = v41.u32[0];
    *(int8x8_t *)v43.f32 = vext_s8(*(int8x8_t *)v36.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL), 4uLL);
    v43.i64[1] = v36.u32[0];
    if (vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v39, v31), (int8x16_t)vcgeq_f32(v32, v40)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v26, v43), v27, v37), vabsq_f32(vmlaq_f32(vmulq_f32(v22, v42), v41, v33))))), *(int8x8_t *)v35.f32).u32[0] == -1)break;
LABEL_36:
    v81 = v12;
    v12 = (v12 - 1);
    if (!v81)
      goto LABEL_39;
  }
  v44 = HIDWORD(*(_OWORD *)(v34 + 12));
  if ((v35.i8[12] & 1) == 0)
  {
    while (1)
    {
      v45 = v13 + 28 * (v44 >> 1);
      v46 = *(float32x4_t *)(v45 + 12);
      v47 = (int8x16_t)vsubq_f32(v46, *(float32x4_t *)v45);
      v48 = (float32x4_t)v47;
      v48.i32[3] = 0;
      v49 = vaddq_f32(*(float32x4_t *)v45, v46);
      v49.i32[3] = 0;
      v50 = vsubq_f32(v21, v49);
      *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v50.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL), 4uLL);
      v51.i64[1] = v50.u32[0];
      *(int8x8_t *)v52.f32 = vext_s8(*(int8x8_t *)v47.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL), 4uLL);
      v52.i64[1] = v47.u32[0];
      v53 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v49, v48), v31), (int8x16_t)vcgeq_f32(v32, vsubq_f32(v49, v48))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v26, v52), v27, v48), vabsq_f32(vmlaq_f32(vmulq_f32(v22, v51), v50, v33))))), *(int8x8_t *)v49.f32).u32[0];
      v54 = *(float32x4_t *)(v45 + 28);
      v55 = *(float32x4_t *)(v45 + 40);
      v56 = (int8x16_t)vsubq_f32(v55, v54);
      v57 = (float32x4_t)v56;
      v57.i32[3] = 0;
      v58 = vaddq_f32(v54, v55);
      v58.i32[3] = 0;
      v59 = vsubq_f32(v21, v58);
      *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v59.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL), 4uLL);
      v51.i64[1] = v59.u32[0];
      *(int8x8_t *)v52.f32 = vext_s8(*(int8x8_t *)v56.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL), 4uLL);
      v52.i64[1] = v56.u32[0];
      v60 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v58, v57), v31), (int8x16_t)vcgeq_f32(v32, vsubq_f32(v58, v57))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v26, v52), v27, v57), vabsq_f32(vmlaq_f32(vmulq_f32(v22, v51), v59, v33))))), *(int8x8_t *)v49.f32).u32[0];
      if (v53 == -1 && v60 == -1)
      {
        v65 = vmulq_f32(v22, vsubq_f32(v58, v49));
        v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
        v65.f32[0] = vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32).f32[0];
        v64 = (v12 + 1);
        v96[v12] = v45 + 28 * (v65.f32[0] > 0.0);
        v62 = v45 + 28 * (v65.f32[0] <= 0.0);
        if ((_DWORD)v64 == (HIDWORD(v97) & 0x7FFFFFFF))
        {
          physx::shdfnd::Array<physx::Gu::BVHNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Gu::BVHNode const*>>>::resizeUninitialized((uint64_t)v94, 2 * v64);
          v33 = v86;
          v32 = v87;
          v31 = v89;
          v27 = v90;
          v26 = v91;
          v22 = v92;
          v21 = v93;
        }
      }
      else
      {
        if (v53 == -1)
          v62 = v45;
        else
          v62 = v45 + 28;
        if (v53 != -1 && v60 != -1)
          goto LABEL_36;
        v64 = v12;
      }
      v44 = *(_DWORD *)(v62 + 24);
      v12 = v64;
      if ((v44 & 1) != 0)
        goto LABEL_29;
    }
  }
  LODWORD(v64) = v12;
LABEL_29:
  v66 = (v44 >> 1) & 0xF;
  if (!v66)
  {
LABEL_35:
    LODWORD(v12) = v64;
    goto LABEL_36;
  }
  v67 = (unsigned int *)(v85 + 4 * (v44 >> 5));
  v68 = v66;
  while (1)
  {
    v70 = *v67++;
    v69 = v70;
    if (v66 < 2)
      goto LABEL_51;
    v71 = v23 + 24 * v69;
    v72 = *(float32x4_t *)(v71 + 12);
    v73 = vaddq_f32(*(float32x4_t *)v71, v72);
    v74 = (int8x16_t)vsubq_f32(v72, *(float32x4_t *)v71);
    v73.i32[3] = 0;
    v75 = (float32x4_t)v74;
    v75.i32[3] = 0;
    v76 = vaddq_f32(v73, v75);
    v77 = vsubq_f32(v73, v75);
    v78 = vsubq_f32(v21, v73);
    *(int8x8_t *)v79.f32 = vext_s8(*(int8x8_t *)v78.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL), 4uLL);
    v79.i64[1] = v78.u32[0];
    *(int8x8_t *)v80.f32 = vext_s8(*(int8x8_t *)v74.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL), 4uLL);
    v80.i64[1] = v74.u32[0];
    *(int16x4_t *)v74.i8 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v76, v31), (int8x16_t)vcgeq_f32(v32, v77)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v26, v80), v27, v75), vabsq_f32(vmlaq_f32(vmulq_f32(v22, v79), v78, v33)))));
    if (vuzp1_s8(*(int8x8_t *)v74.i8, *(int8x8_t *)v74.i8).u32[0] == -1)
    {
LABEL_51:
      *(_DWORD *)(a5 + 4 * v11) = *(_DWORD *)(v14 + 4 * v69);
      v11 = (v11 + 1);
      if ((_DWORD)v11 == (_DWORD)a4)
        break;
    }
    if (!--v68)
      goto LABEL_35;
  }
  v11 = a4;
LABEL_39:
  if ((v97 & 0x8000000000000000) == 0 && (v97 & 0x7FFFFFFF00000000) != 0 && v96 != v94 && v96 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v11;
}

uint64_t physx::Gu::BVHStructure::sweep(_QWORD *a1, uint64_t a2, float32x2_t *a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  float v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float v25;
  float32x2_t v26;
  double v27;
  double v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  unsigned int v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  unsigned __int32 v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  unsigned __int32 v68;
  uint64_t v70;
  uint64_t v72;
  float32x4_t v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int v89;
  uint64_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  _QWORD v103[256];
  char v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  physx::Gu::BVHStructure::createVolumes((uint64_t)a1);
  v11 = 0;
  v12 = 0;
  v13 = *(float *)(a2 + 20);
  v14 = *(float *)(a2 + 8);
  v15 = (float)(v13 - v14) * 0.5;
  v17 = a1[8];
  v16 = a1[9];
  v19 = a1 + 6;
  v18 = a1[6];
  v93 = v19[1];
  v20 = (float)((float)(v13 + v14) * 0.5) + (float)((float)(v13 + v14) * 0.5);
  v21 = *(float32x2_t *)(a2 + 12);
  v22 = vmul_f32(vadd_f32(v21, *(float32x2_t *)a2), (float32x2_t)0x3F0000003F000000);
  v23 = vadd_f32(v22, v22);
  v24 = vadd_f32(*a3, *a3);
  v25 = a3[1].f32[0] + a3[1].f32[0];
  v26 = vmul_f32(vsub_f32(v21, *(float32x2_t *)a2), (float32x2_t)0x3F0000003F000000);
  *(float32x2_t *)v32.f32 = vadd_f32(v26, v26);
  v26.f32[0] = v15 + v15;
  v27 = COERCE_DOUBLE(vadd_f32(v23, vmul_n_f32(v24, a6)));
  v28 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v24), (int8x8_t)v23, vbsl_s8((int8x8_t)vcgez_f32(v24), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
  *(float32x2_t *)v29.f32 = v23;
  v29.i64[1] = LODWORD(v20);
  *(float32x2_t *)v30.f32 = v24;
  v30.i64[1] = LODWORD(v25);
  *(int8x8_t *)v31.f32 = vext_s8((int8x8_t)v24, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL), 4uLL);
  v31.i64[1] = v24.u32[0];
  v32.i64[1] = v26.u32[0];
  v33 = vabsq_f32(v30);
  *(int8x8_t *)v34.f32 = vext_s8(*(int8x8_t *)v33.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), 4uLL);
  v34.i64[1] = v33.u32[0];
  v35 = v20 + (float)(v25 * a6);
  v36 = -3.4028e38;
  if (v25 >= 0.0)
    v36 = 3.4028e38;
  if (v25 != 0.0)
    v20 = v36;
  if (a6 >= 3.4028e38)
  {
    *(double *)v37.i64 = v28;
  }
  else
  {
    v20 = v35;
    *(double *)v37.i64 = v27;
  }
  v37.i64[1] = LODWORD(v20);
  v38 = vminq_f32(v29, v37);
  v39 = vmaxq_f32(v29, v37);
  v106 = 0x10000000100;
  v104 = 1;
  v105 = v103;
  v103[0] = v16;
  v40 = vnegq_f32(v31);
  v101 = v29;
  v102 = v32;
  v99 = v33;
  v100 = v30;
  v97 = v38;
  v98 = v34;
  v94 = v40;
  v95 = v39;
  while (1)
  {
    v41 = v105[v12];
    v42 = *(float32x4_t *)(v41 + 12);
    v43 = vsubq_f32(v42, *(float32x4_t *)v41);
    v43.i32[3] = 0;
    v44 = vaddq_f32(*(float32x4_t *)v41, v42);
    v44.i32[3] = 0;
    v45 = vaddq_f32(v32, v43);
    v46 = vaddq_f32(v44, v45);
    v47 = vsubq_f32(v44, v45);
    v48 = vsubq_f32(v29, v44);
    *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v48.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL), 4uLL);
    v49.i64[1] = v48.u32[0];
    *(int8x8_t *)v50.f32 = vext_s8(*(int8x8_t *)v45.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL), 4uLL);
    v50.i64[1] = v45.u32[0];
    if (vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v46, v38), (int8x16_t)vcgeq_f32(v39, v47)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v33, v50), v34, v45), vabsq_f32(vmlaq_f32(vmulq_f32(v30, v49), v48, v40))))), *(int8x8_t *)v42.f32).u32[0] == -1)break;
LABEL_36:
    v89 = v12;
    v12 = (v12 - 1);
    if (!v89)
      goto LABEL_39;
  }
  v51 = HIDWORD(*(_OWORD *)(v41 + 12));
  if ((v42.i8[12] & 1) == 0)
  {
    while (1)
    {
      v52 = v16 + 28 * (v51 >> 1);
      v53 = *(float32x4_t *)(v52 + 12);
      v54 = vsubq_f32(v53, *(float32x4_t *)v52);
      v54.i32[3] = 0;
      v55 = vaddq_f32(*(float32x4_t *)v52, v53);
      v55.i32[3] = 0;
      v56 = vaddq_f32(v32, v54);
      v57 = vsubq_f32(v29, v55);
      *(int8x8_t *)v58.f32 = vext_s8(*(int8x8_t *)v57.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL), 4uLL);
      v58.i64[1] = v57.u32[0];
      *(int8x8_t *)v59.f32 = vext_s8(*(int8x8_t *)v56.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL), 4uLL);
      v59.i64[1] = v56.u32[0];
      v60 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v55, v56), v38), (int8x16_t)vcgeq_f32(v39, vsubq_f32(v55, v56))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v33, v59), v34, v56), vabsq_f32(vmlaq_f32(vmulq_f32(v30, v58), v57, v40))))), *(int8x8_t *)v55.f32).u32[0];
      v61 = *(float32x4_t *)(v52 + 28);
      v62 = *(float32x4_t *)(v52 + 40);
      v63 = vsubq_f32(v62, v61);
      v63.i32[3] = 0;
      v64 = vaddq_f32(v61, v62);
      v64.i32[3] = 0;
      v65 = vaddq_f32(v32, v63);
      v66 = vsubq_f32(v29, v64);
      *(int8x8_t *)v59.f32 = vext_s8(*(int8x8_t *)v66.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL), 4uLL);
      v59.i64[1] = v66.u32[0];
      *(int8x8_t *)v67.f32 = vext_s8(*(int8x8_t *)v65.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL), 4uLL);
      v67.i64[1] = v65.u32[0];
      v68 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v64, v65), v38), (int8x16_t)vcgeq_f32(v39, vsubq_f32(v64, v65))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v33, v67), v34, v65), vabsq_f32(vmlaq_f32(vmulq_f32(v30, v59), v66, v40))))), *(int8x8_t *)v55.f32).u32[0];
      if (v60 == -1 && v68 == -1)
      {
        v73 = vmulq_f32(v30, vsubq_f32(v64, v55));
        v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
        v73.f32[0] = vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32).f32[0];
        v72 = (v12 + 1);
        v105[v12] = v52 + 28 * (v73.f32[0] > 0.0);
        v70 = v52 + 28 * (v73.f32[0] <= 0.0);
        if ((_DWORD)v72 == (HIDWORD(v106) & 0x7FFFFFFF))
        {
          physx::shdfnd::Array<physx::Gu::BVHNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Gu::BVHNode const*>>>::resizeUninitialized((uint64_t)v103, 2 * v72);
          v40 = v94;
          v39 = v95;
          v38 = v97;
          v34 = v98;
          v33 = v99;
          v30 = v100;
          v29 = v101;
          v32 = v102;
        }
      }
      else
      {
        if (v60 == -1)
          v70 = v52;
        else
          v70 = v52 + 28;
        if (v60 != -1 && v68 != -1)
          goto LABEL_36;
        v72 = v12;
      }
      v51 = *(_DWORD *)(v70 + 24);
      v12 = v72;
      if ((v51 & 1) != 0)
        goto LABEL_29;
    }
  }
  LODWORD(v72) = v12;
LABEL_29:
  v74 = (v51 >> 1) & 0xF;
  if (!v74)
  {
LABEL_35:
    LODWORD(v12) = v72;
    goto LABEL_36;
  }
  v75 = (unsigned int *)(v93 + 4 * (v51 >> 5));
  v76 = v74;
  while (1)
  {
    v78 = *v75++;
    v77 = v78;
    if (v74 < 2)
      goto LABEL_51;
    v79 = v18 + 24 * v77;
    v80 = *(float32x4_t *)(v79 + 12);
    v81 = vaddq_f32(*(float32x4_t *)v79, v80);
    v82 = vsubq_f32(v80, *(float32x4_t *)v79);
    v81.i32[3] = 0;
    v82.i32[3] = 0;
    v83 = vaddq_f32(v32, v82);
    v84 = vaddq_f32(v81, v83);
    v85 = vsubq_f32(v81, v83);
    v86 = vsubq_f32(v29, v81);
    *(int8x8_t *)v87.f32 = vext_s8(*(int8x8_t *)v86.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL), 4uLL);
    v87.i64[1] = v86.u32[0];
    *(int8x8_t *)v88.f32 = vext_s8(*(int8x8_t *)v83.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL), 4uLL);
    v88.i64[1] = v83.u32[0];
    *(int16x4_t *)v83.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v84, v38), (int8x16_t)vcgeq_f32(v39, v85)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v33, v88), v34, v83), vabsq_f32(vmlaq_f32(vmulq_f32(v30, v87), v86, v40)))));
    if (vuzp1_s8(*(int8x8_t *)v83.f32, *(int8x8_t *)v83.f32).u32[0] == -1)
    {
LABEL_51:
      *(_DWORD *)(a5 + 4 * v11) = *(_DWORD *)(v17 + 4 * v77);
      v11 = (v11 + 1);
      if ((_DWORD)v11 == (_DWORD)a4)
        break;
    }
    if (!--v76)
      goto LABEL_35;
  }
  v11 = a4;
LABEL_39:
  if ((v106 & 0x8000000000000000) == 0 && (v106 & 0x7FFFFFFF00000000) != 0 && v105 != v103 && v105 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v11;
}

uint64_t physx::Gu::BVHStructure::overlap(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  float v9;
  float v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  float32x4_t v17;
  unsigned int v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x8_t v24;
  unint64_t v25;
  unsigned int v26;
  float32x4_t v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  BOOL v37;
  uint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  _QWORD v44[256];
  char v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  physx::Gu::BVHStructure::createVolumes((uint64_t)a1);
  v8 = 0;
  v9 = *(float *)(a2 + 8);
  v10 = *(float *)(a2 + 20);
  v11 = *(float32x2_t *)(a2 + 12);
  *(float32x2_t *)v12.f32 = vmul_f32(vadd_f32(*(float32x2_t *)a2, v11), (float32x2_t)0x3F0000003F000000);
  v12.f32[2] = (float)(v9 + v10) * 0.5;
  v12.i32[3] = 0;
  *(float32x2_t *)v13.f32 = vmul_f32(vsub_f32(v11, *(float32x2_t *)a2), (float32x2_t)0x3F0000003F000000);
  v13.i64[1] = COERCE_UNSIGNED_INT((float)(v10 - v9) * 0.5);
  v15 = a1[8];
  v14 = a1[9];
  v40 = a1[7];
  v41 = a1[6];
  v47 = 0x10000000100;
  v16 = 1;
  v45 = 1;
  v46 = v44;
  v44[0] = v14;
  v17.i64[0] = 0x3F0000003F000000;
  v17.i64[1] = 0x3F0000003F000000;
  v42 = v13;
  v43 = v12;
  while (2)
  {
    v18 = 2 * v16--;
    v19 = v46[v16];
    v20 = *(float32x4_t *)(v19 + 12);
    v21 = vmulq_f32(vsubq_f32(v20, *(float32x4_t *)v19), v17);
    v21.i32[3] = 0;
    v22 = vaddq_f32(*(float32x4_t *)v19, v20);
    while (1)
    {
      v23 = vmulq_f32(v22, v17);
      v23.i32[3] = 0;
      v24 = (int8x8_t)vmovn_s32(vcgeq_f32(vaddq_f32(v13, v21), vabdq_f32(v23, v12)));
      if ((~vuzp1_s8(v24, v24).u32[0] & 0xFFFFFF) != 0)
        break;
      v25 = *(unsigned int *)(v19 + 24);
      if ((v25 & 1) != 0)
      {
        v28 = (v25 >> 1) & 0xF;
        if (v28)
        {
          v29 = (unsigned int *)(v40 + ((v25 >> 3) & 0x1FFFFFFC));
          v30 = v28;
          while (1)
          {
            v32 = *v29++;
            v31 = v32;
            if (v28 < 2
              || (v33 = v41 + 24 * v31,
                  v34 = *(float32x4_t *)(v33 + 12),
                  v35 = vmulq_f32(vsubq_f32(v34, *(float32x4_t *)v33), v17),
                  v36 = vmulq_f32(vaddq_f32(*(float32x4_t *)v33, v34), v17),
                  v36.i32[3] = 0,
                  v35.i32[3] = 0,
                  *(int16x4_t *)v35.f32 = vmovn_s32(vcgeq_f32(vaddq_f32(v13, v35), vabdq_f32(v36, v12))),
                  (~vuzp1_s8(*(int8x8_t *)v35.f32, *(int8x8_t *)v35.f32).u32[0] & 0xFFFFFF) == 0))
            {
              *(_DWORD *)(a4 + 4 * v8) = *(_DWORD *)(v15 + 4 * v31);
              v8 = (v8 + 1);
              if ((_DWORD)v8 == (_DWORD)a3)
                break;
            }
            if (!--v30)
              goto LABEL_14;
          }
          v8 = a3;
          goto LABEL_17;
        }
        break;
      }
      v19 = v14 + 28 * (*(_DWORD *)(v19 + 24) >> 1);
      v26 = v16 + 1;
      v46[v16] = v19 + 28;
      if (v16 + 1 == (HIDWORD(v47) & 0x7FFFFFFF))
      {
        physx::shdfnd::Array<physx::Gu::BVHNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Gu::BVHNode const*>>>::resizeUninitialized((uint64_t)v44, v18);
        v17.i64[0] = 0x3F0000003F000000;
        v17.i64[1] = 0x3F0000003F000000;
        v13 = v42;
        v12 = v43;
      }
      v27 = *(float32x4_t *)(v19 + 12);
      v21 = vmulq_f32(vsubq_f32(v27, *(float32x4_t *)v19), v17);
      v21.i32[3] = 0;
      v22 = vaddq_f32(*(float32x4_t *)v19, v27);
      v18 += 2;
      v16 = v26;
    }
LABEL_14:
    if (v16)
      continue;
    break;
  }
LABEL_17:
  if ((v47 & 0x8000000000000000) == 0)
  {
    v37 = (v47 & 0x7FFFFFFF00000000) == 0 || v46 == v44;
    if (!v37 && v46 != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  return v8;
}

const char *physx::PxBVHStructure::getConcreteTypeName(physx::PxBVHStructure *this)
{
  return "PxBVHStructure";
}

BOOL physx::PxBVHStructure::isKindOf(physx::PxBVHStructure *this, const char *a2)
{
  return !strcmp("PxBVHStructure", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::Gu::BVHStructure::getBounds(physx::Gu::BVHStructure *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t physx::Gu::BVHStructure::getNbBounds(physx::Gu::BVHStructure *this)
{
  return *((unsigned int *)this + 10);
}

double physx::Gu::RelativeConvex<physx::Gu::BoxV>::support(float32x4_t *a1, float32x2_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t *v4;
  float32x4_t v5;
  int8x16_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  double result;

  v2 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v2.i32[3] = 0;
  v3 = vmulq_lane_f32(a1[3], *a2, 1);
  v3.i32[3] = 0;
  v4 = (float32x4_t *)a1[1].i64[0];
  v5 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v5.i32[3] = 0;
  v6 = (int8x16_t)vcgtzq_f32(vaddq_f32(vaddq_f32(v2, v3), v5));
  v7 = *(float32x4_t *)(a1->i64[1] + 48);
  v8 = (int8x16_t)vnegq_f32(v7);
  v8.i32[3] = 0;
  v9 = (float32x4_t)vbslq_s8(v6, (int8x16_t)v7, v8);
  v10 = vmulq_n_f32(*v4, v9.f32[0]);
  v10.i32[3] = 0;
  v11 = vmulq_lane_f32(v4[1], *(float32x2_t *)v9.f32, 1);
  v11.i32[3] = 0;
  v12 = vmulq_laneq_f32(v4[2], v9, 2);
  v12.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v4[3], vaddq_f32(v12, vaddq_f32(v10, v11))).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::support(float32x4_t *a1, float32x2_t *a2)
{
  float32x4_t *v2;
  float32x4_t *v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  double result;
  float32x4_t v20;

  v2 = (float32x4_t *)a1->i64[1];
  v3 = (float32x4_t *)a1[1].i64[0];
  v4 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v4.i32[3] = 0;
  v5 = vmulq_lane_f32(a1[3], *a2, 1);
  v5.i32[3] = 0;
  v6 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v6.i32[3] = 0;
  v7 = vaddq_f32(vaddq_f32(v4, v5), v6);
  v8 = vmulq_f32(v2[3], v7);
  v8.i64[0] = vpaddq_f32(v8, v8).u64[0];
  v9 = vmulq_f32(v7, v2[4]);
  v9.i64[0] = vpaddq_f32(v9, v9).u64[0];
  v10 = vmulq_f32(v7, v2[5]);
  v10.i64[0] = vpaddq_f32(v10, v10).u64[0];
  *(int8x8_t *)v8.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v9.f32), 4uLL);
  v8.i64[1] = vpadd_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32).u32[0];
  v20 = v8;
  v11 = *(float32x4_t *)(v2[10].i64[0]
                       + 12 * physx::Gu::ConvexHullV::supportVertexIndex((uint64_t)v2, &v20));
  v12 = vmulq_n_f32(v2[3], v11.f32[0]);
  v12.i32[3] = 0;
  v13 = vmulq_lane_f32(v2[4], *(float32x2_t *)v11.f32, 1);
  v13.i32[3] = 0;
  v14 = vmulq_laneq_f32(v2[5], v11, 2);
  v14.i32[3] = 0;
  v15 = vaddq_f32(vaddq_f32(v12, v13), v14);
  v16 = vmulq_n_f32(*v3, v15.f32[0]);
  v16.i32[3] = 0;
  v17 = vmulq_lane_f32(v3[1], *(float32x2_t *)v15.f32, 1);
  v17.i32[3] = 0;
  v18 = vmulq_laneq_f32(v3[2], v15, 2);
  v18.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v3[3], vaddq_f32(vaddq_f32(v16, v17), v18)).u64[0];
  return result;
}

uint64_t physx::Gu::unsupportedMidphase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, vars0);
  }
  return 0;
}

uint64_t MeshMTDGenerationCallback::processHit(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_DWORD *)(a2 + 16);
  v4 = *(unsigned int *)(v2 + 8);
  if ((*(_DWORD *)(v2 + 12) & 0x7FFFFFFFu) <= v4)
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v2, v3);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)v2 + 4 * v4) = *v3;
    ++*(_DWORD *)(v2 + 8);
  }
  return 1;
}

void MeshMTDGenerationCallback::~MeshMTDGenerationCallback(MeshMTDGenerationCallback *this)
{
  JUMPOUT(0x2276933B8);
}

void MidPhaseQueryLocalReport::~MidPhaseQueryLocalReport(MidPhaseQueryLocalReport *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t MidPhaseQueryLocalReport::onEvent(MidPhaseQueryLocalReport *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v5 = a2;
    do
    {
      v6 = *((_QWORD *)this + 1);
      v7 = *(unsigned int *)(v6 + 8);
      if ((*(_DWORD *)(v6 + 12) & 0x7FFFFFFFu) <= v7)
      {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v6, a3);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)v6 + 4 * v7) = *a3;
        ++*(_DWORD *)(v6 + 8);
      }
      ++a3;
      --v5;
    }
    while (v5);
  }
  return 1;
}

uint64_t computeSweepConvexPlane(uint64_t a1, uint64_t a2, unsigned int *a3, float *a4, float *a5, float *a6)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  _BYTE v46[36];
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;

  v8 = *a6;
  v9 = a6[1];
  v10 = a6[2];
  v44 = a5[1];
  v45 = *a5;
  v11 = a4[3];
  v42 = a4[4];
  v43 = a5[2];
  v12 = a4[6];
  v41 = a4[5];
  v13 = *a4;
  v14 = a4[1];
  v15 = a4[2];
  physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v46, (float *)(a1 + 4), (float *)(a1 + 16));
  v16 = *a3;
  if (!(_DWORD)v16)
    return 0;
  v17 = 0;
  result = 0;
  v19 = 3.4028e38;
  v20 = (float)((float)(v45 - (float)(v8 * 0.01)) - v42) + (float)((float)(v45 - (float)(v8 * 0.01)) - v42);
  v21 = (float)((float)(v44 - (float)(v9 * 0.01)) - v41) + (float)((float)(v44 - (float)(v9 * 0.01)) - v41);
  v22 = (float)((float)(v43 - (float)(v10 * 0.01)) - v12) + (float)((float)(v43 - (float)(v10 * 0.01)) - v12);
  v23 = (float)(v11 * v11) + -0.5;
  v24 = (float)((float)(v21 * v14) + (float)(v13 * v20)) + (float)(v15 * v22);
  v25 = (float)((float)(v20 * v23) - (float)((float)((float)(v14 * v22) - (float)(v15 * v21)) * v11))
      + (float)(v13 * v24);
  v26 = (float)((float)(v21 * v23) - (float)((float)((float)(v15 * v20) - (float)(v13 * v22)) * v11))
      + (float)(v14 * v24);
  v27 = (float)((float)(v22 * v23) - (float)((float)((float)(v13 * v21) - (float)(v14 * v20)) * v11))
      + (float)(v15 * v24);
  v28 = (float)((float)((float)(v9 + v9) * v14) + (float)(v13 * (float)(v8 + v8))) + (float)(v15 * (float)(v10 + v10));
  v29 = (float)((float)((float)(v8 + v8) * v23)
              - (float)((float)((float)(v14 * (float)(v10 + v10)) - (float)(v15 * (float)(v9 + v9))) * v11))
      + (float)(v13 * v28);
  v30 = (float)((float)((float)(v9 + v9) * v23)
              - (float)((float)((float)(v15 * (float)(v8 + v8)) - (float)(v13 * (float)(v10 + v10))) * v11))
      + (float)(v14 * v28);
  v31 = (float)((float)((float)(v10 + v10) * v23)
              - (float)((float)((float)(v13 * (float)(v9 + v9)) - (float)(v14 * (float)(v8 + v8))) * v11))
      + (float)(v15 * v28);
  v32 = (float *)(*(_QWORD *)(a2 + 40) + 8);
  do
  {
    v33 = *(v32 - 2);
    v34 = *(v32 - 1);
    v35 = (float)((float)(v48 * v34) + (float)(v47 * v33)) + (float)(v49 * *v32);
    v36 = (float)((float)(v51 * v34) + (float)(v50 * v33)) + (float)(v52 * *v32);
    v37 = (float)((float)(v54 * v34) + (float)(v53 * v33)) + (float)(v55 * *v32);
    v38 = 1.0 / sqrtf((float)((float)(v36 * v36) + (float)(v35 * v35)) + (float)(v37 * v37));
    v39 = v37 * v38;
    v40 = (float)(v32[1] * v38)
        + (float)((float)((float)(v26 * (float)(v36 * v38)) + (float)(v25 * (float)(v35 * v38))) + (float)(v27 * v39));
    if (v40 >= 0.0)
    {
      if ((float)(v40
                 + (float)((float)((float)((float)(v30 * (float)(v36 * v38)) + (float)((float)(v35 * v38) * v29))
                                 + (float)(v39 * v31))
                         * 0.01)) >= v19)
      {
        result = result;
      }
      else
      {
        v19 = v40
            + (float)((float)((float)((float)(v30 * (float)(v36 * v38)) + (float)((float)(v35 * v38) * v29))
                            + (float)(v39 * v31))
                    * 0.01);
        result = v17;
      }
    }
    ++v17;
    v32 += 5;
  }
  while (v16 != v17);
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::BoxV>::supportPoint(uint64_t a1, int a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  double result;

  v2 = *(float32x4_t **)(a1 + 16);
  v3 = *(float32x4_t *)(*(_QWORD *)(a1 + 8) + 48);
  v4 = (int8x16_t)vnegq_f32(v3);
  v4.i32[3] = 0;
  v5 = (float32x4_t)vbslq_s8(physx::boxVertexTable[a2], (int8x16_t)v3, v4);
  v6 = vmulq_n_f32(*v2, v5.f32[0]);
  v6.i32[3] = 0;
  v7 = vmulq_lane_f32(v2[1], *(float32x2_t *)v5.f32, 1);
  v7.i32[3] = 0;
  v8 = vmulq_laneq_f32(v2[2], v5, 2);
  v8.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v2[3], vaddq_f32(v8, vaddq_f32(v6, v7))).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::BoxV>::support(float32x4_t *a1, float32x2_t *a2, unsigned __int32 *a3)
{
  float32x4_t *v3;
  float32x4_t *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  int32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  double result;

  v3 = (float32x4_t *)a1->i64[1];
  v4 = (float32x4_t *)a1[1].i64[0];
  v5 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v5.i32[3] = 0;
  v6 = vmulq_lane_f32(a1[3], *a2, 1);
  v6.i32[3] = 0;
  v7 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v7.i32[3] = 0;
  v8 = (int8x16_t)vcgtzq_f32(vaddq_f32(vaddq_f32(v5, v6), v7));
  v9 = (int32x4_t)vandq_s8(v8, (int8x16_t)xmmword_22611E0A0);
  v9.i64[0] = vpaddq_s32(v9, v9).u64[0];
  *a3 = vpadd_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v9.i8).u32[0] & 7;
  v10 = v3[3];
  v11 = (int8x16_t)vnegq_f32(v10);
  v11.i32[3] = 0;
  v12 = (float32x4_t)vbslq_s8(v8, (int8x16_t)v10, v11);
  v13 = vmulq_n_f32(*v4, v12.f32[0]);
  v13.i32[3] = 0;
  v14 = vmulq_lane_f32(v4[1], *(float32x2_t *)v12.f32, 1);
  v14.i32[3] = 0;
  v15 = vmulq_laneq_f32(v4[2], v12, 2);
  v15.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v4[3], vaddq_f32(vaddq_f32(v13, v14), v15)).u64[0];
  return result;
}

float32x2_t physx::Gu::RelativeConvex<physx::Gu::BoxV>::getSweepMargin(uint64_t a1)
{
  const float *v1;

  v1 = (const float *)(*(_QWORD *)(a1 + 8) + 24);
  return vld1_dup_f32(v1);
}

double physx::Gu::RelativeConvex<physx::Gu::BoxV>::getCenter(uint64_t a1)
{
  float32x4_t *v1;
  float32x2_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  double result;

  v2 = *(float32x2_t **)(a1 + 8);
  v1 = *(float32x4_t **)(a1 + 16);
  v3 = vmulq_n_f32(*v1, COERCE_FLOAT(*(_OWORD *)v2->f32));
  v3.i32[3] = 0;
  v4 = vmulq_lane_f32(v1[1], *v2, 1);
  v4.i32[3] = 0;
  v5 = vmulq_laneq_f32(v1[2], *(float32x4_t *)v2->f32, 2);
  v5.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v1[3], vaddq_f32(vaddq_f32(v3, v4), v5)).u64[0];
  return result;
}

void physx::Gu::RelativeConvex<physx::Gu::BoxV>::~RelativeConvex()
{
  JUMPOUT(0x2276933B8);
}

double physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::supportPoint(uint64_t a1, int a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  double result;

  v2 = *(float32x4_t **)(a1 + 8);
  v3 = *(float32x4_t *)(v2[10].i64[0] + 12 * a2);
  v4 = vmulq_n_f32(v2[3], v3.f32[0]);
  v4.i32[3] = 0;
  v5 = vmulq_lane_f32(v2[4], *(float32x2_t *)v3.f32, 1);
  v5.i32[3] = 0;
  v6 = *(float32x4_t **)(a1 + 16);
  v7 = vmulq_laneq_f32(v2[5], v3, 2);
  v7.i32[3] = 0;
  v8 = vaddq_f32(vaddq_f32(v4, v5), v7);
  v9 = vmulq_n_f32(*v6, v8.f32[0]);
  v9.i32[3] = 0;
  v10 = vmulq_lane_f32(v6[1], *(float32x2_t *)v8.f32, 1);
  v10.i32[3] = 0;
  v11 = vmulq_laneq_f32(v6[2], v8, 2);
  v11.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v6[3], vaddq_f32(v11, vaddq_f32(v9, v10))).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::support(float32x4_t *a1, float32x2_t *a2, _DWORD *a3)
{
  float32x4_t *v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  double result;
  float32x4_t v23;

  v4 = (float32x4_t *)a1->i64[1];
  v5 = (float32x4_t *)a1[1].i64[0];
  v6 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v6.i32[3] = 0;
  v7 = vmulq_lane_f32(a1[3], *a2, 1);
  v7.i32[3] = 0;
  v8 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v8.i32[3] = 0;
  v9 = vaddq_f32(vaddq_f32(v6, v7), v8);
  v10 = vmulq_f32(v4[3], v9);
  v10.i64[0] = vpaddq_f32(v10, v10).u64[0];
  v11 = vmulq_f32(v9, v4[4]);
  v11.i64[0] = vpaddq_f32(v11, v11).u64[0];
  v12 = vmulq_f32(v9, v4[5]);
  v12.i64[0] = vpaddq_f32(v12, v12).u64[0];
  *(int8x8_t *)v10.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32), 4uLL);
  v10.i64[1] = vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32).u32[0];
  v23 = v10;
  v13 = physx::Gu::ConvexHullV::supportVertexIndex((uint64_t)v4, &v23);
  *a3 = v13;
  v14 = *(float32x4_t *)(v4[10].i64[0] + 12 * v13);
  v15 = vmulq_n_f32(v4[3], v14.f32[0]);
  v15.i32[3] = 0;
  v16 = vmulq_lane_f32(v4[4], *(float32x2_t *)v14.f32, 1);
  v16.i32[3] = 0;
  v17 = vmulq_laneq_f32(v4[5], v14, 2);
  v17.i32[3] = 0;
  v18 = vaddq_f32(vaddq_f32(v15, v16), v17);
  v19 = vmulq_n_f32(*v5, v18.f32[0]);
  v19.i32[3] = 0;
  v20 = vmulq_lane_f32(v5[1], *(float32x2_t *)v18.f32, 1);
  v20.i32[3] = 0;
  v21 = vmulq_laneq_f32(v5[2], v18, 2);
  v21.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v5[3], vaddq_f32(vaddq_f32(v19, v20), v21)).u64[0];
  return result;
}

float32x2_t physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::getSweepMargin(uint64_t a1)
{
  const float *v1;

  v1 = (const float *)(*(_QWORD *)(a1 + 8) + 24);
  return vld1_dup_f32(v1);
}

double physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::getCenter(uint64_t a1)
{
  float32x4_t *v1;
  float32x2_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  double result;

  v2 = *(float32x2_t **)(a1 + 8);
  v1 = *(float32x4_t **)(a1 + 16);
  v3 = vmulq_n_f32(*v1, COERCE_FLOAT(*(_OWORD *)v2->f32));
  v3.i32[3] = 0;
  v4 = vmulq_lane_f32(v1[1], *v2, 1);
  v4.i32[3] = 0;
  v5 = vmulq_laneq_f32(v1[2], *(float32x4_t *)v2->f32, 2);
  v5.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v1[3], vaddq_f32(vaddq_f32(v3, v4), v5)).u64[0];
  return result;
}

void physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::~RelativeConvex()
{
  JUMPOUT(0x2276933B8);
}

BOOL `anonymous namespace'::HFTraceSegmentCallback::faceHit(uint64_t *a1, float *a2, int a3, float a4, float a5)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  __int16 v14;
  __int16 v15;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unsigned int v24;
  uint64_t v25;
  __int16 *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float *v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;

  v6 = *((_DWORD *)a1 + 2);
  v5 = *((unsigned int *)a1 + 3);
  if (v5 >= v6)
    return 0;
  v8 = *a1;
  v9 = v5 + 1;
  *((_DWORD *)a1 + 3) = v5 + 1;
  v10 = v8 + (v5 << 6);
  v11 = *a2;
  v12 = a2[1];
  *(float *)(v10 + 24) = *a2;
  *(float *)(v10 + 28) = v12;
  v13 = a2[2];
  *(float *)(v10 + 32) = v13;
  *(_DWORD *)(v10 + 16) = a3;
  *(float *)(v10 + 52) = a4;
  *(float *)(v10 + 56) = a5;
  *(_WORD *)(v10 + 20) = 1032;
  v14 = *((_WORD *)a1 + 28);
  if ((v14 & 2) != 0)
  {
    v17 = a1[2];
    v18 = (float *)a1[3];
    v19 = *(_QWORD *)(v17 + 16);
    v20 = *(float *)v17;
    v21 = *(float *)(v17 + 4);
    v22 = v11 * *(float *)v17;
    v23 = *(float *)(v17 + 8);
    v60 = 0;
    v24 = physx::Gu::HeightField::computeCellCoordinates((physx::Gu::HeightField *)v19, v22, v13 * v23, (float *)&v60 + 1, (float *)&v60);
    v25 = *(_QWORD *)(v19 + 80);
    v26 = (__int16 *)(v25 + 4 * v24);
    if ((char)v26[1] < 0)
    {
      v32 = *v26;
      v33 = *(__int16 *)(v25 + 4 * (*(_DWORD *)(v19 + 60) + v24 + 1));
      if (*(float *)&v60 >= *((float *)&v60 + 1))
      {
        v36 = *(__int16 *)(v25 + 4 * (v24 + 1));
        v30 = v36 - v33;
        v31 = v32 - v36;
      }
      else
      {
        v34 = *(__int16 *)(v25 + 4 * (*(_DWORD *)(v19 + 60) + v24));
        v30 = v32 - v34;
        v31 = v34 - v33;
      }
    }
    else
    {
      v27 = *(__int16 *)(v25 + 4 * (v24 + 1));
      v28 = *(__int16 *)(v25 + 4 * (*(_DWORD *)(v19 + 60) + v24));
      if ((float)(*((float *)&v60 + 1) + *(float *)&v60) <= 1.0)
      {
        v35 = *v26;
        v30 = v35 - v28;
        v31 = v35 - v27;
      }
      else
      {
        v29 = *(__int16 *)(v25 + 4 * (*(_DWORD *)(v19 + 60) + v24 + 1));
        v30 = v27 - v29;
        v31 = v28 - v29;
      }
    }
    v37 = (float)(v20 * (float)v30) + (float)(v20 * (float)v30);
    v38 = (float)(v23 * (float)v31) + (float)(v23 * (float)v31);
    v40 = v18[2];
    v39 = v18[3];
    v41 = (float)(v39 * v39) + -0.5;
    v42 = v18[1];
    v43 = (float)((float)((float)(v21 + v21) * v42) + (float)(*v18 * v37)) + (float)(v40 * v38);
    v44 = (float)((float)(v39 * (float)((float)(v42 * v38) - (float)(v40 * (float)(v21 + v21)))) + (float)(v37 * v41))
        + (float)(*v18 * v43);
    v45 = (float)((float)(v39 * (float)((float)(v40 * v37) - (float)(*v18 * v38))) + (float)((float)(v21 + v21) * v41))
        + (float)(v42 * v43);
    v46 = (float)((float)(v39 * (float)((float)(*v18 * (float)(v21 + v21)) - (float)(v42 * v37))) + (float)(v38 * v41))
        + (float)(v40 * v43);
    v47 = sqrtf((float)((float)(v45 * v45) + (float)(v44 * v44)) + (float)(v46 * v46));
    if (v47 > 0.0)
    {
      v48 = 1.0 / v47;
      v44 = v44 * v48;
      v45 = v45 * v48;
      v46 = v46 * v48;
    }
    if (*((_BYTE *)a1 + 58)
      && (float)((float)((float)(v45 * *(float *)(a1[4] + 4)) + (float)(v44 * *(float *)a1[4]))
               + (float)(v46 * *(float *)(a1[4] + 8))) > 0.0)
    {
      v44 = -v44;
      v45 = -v45;
      v46 = -v46;
    }
    *(float *)(v10 + 36) = v44;
    *(float *)(v10 + 40) = v45;
    *(float *)(v10 + 44) = v46;
    *(_WORD *)(v10 + 20) = 1034;
    v14 = *((_WORD *)a1 + 28);
    v15 = 1035;
  }
  else
  {
    v15 = 1033;
  }
  v49 = (float)((float)((float)(v12 - *(float *)(a1[6] + 4)) * *(float *)(a1[5] + 4))
              + (float)((float)(v11 - *(float *)a1[6]) * *(float *)a1[5]))
      + (float)((float)(v13 - *(float *)(a1[6] + 8)) * *(float *)(a1[5] + 8));
  if (v49 < 0.0)
    v49 = 0.0;
  *(float *)(v10 + 48) = v49;
  if ((v14 & 1) != 0)
  {
    v50 = (float *)a1[3];
    v52 = v50[2];
    v51 = v50[3];
    v53 = (float)(v51 * v51) + -0.5;
    v54 = v50[1];
    v55 = (float)((float)((float)(v12 + v12) * v54) + (float)(*v50 * (float)(v11 + v11)))
        + (float)(v52 * (float)(v13 + v13));
    v56 = (float)((float)(v51 * (float)((float)(*v50 * (float)(v12 + v12)) - (float)(v54 * (float)(v11 + v11))))
                + (float)((float)(v13 + v13) * v53))
        + (float)(v52 * v55);
    v57 = v50[4]
        + (float)((float)((float)(v51 * (float)((float)(v54 * (float)(v13 + v13)) - (float)(v52 * (float)(v12 + v12))))
                        + (float)((float)(v11 + v11) * v53))
                + (float)(*v50 * v55));
    v58 = v50[5]
        + (float)((float)((float)(v51 * (float)((float)(v52 * (float)(v11 + v11)) - (float)(*v50 * (float)(v13 + v13))))
                        + (float)((float)(v12 + v12) * v53))
                + (float)(v54 * v55));
    v59 = v50[6];
    *(float *)(v10 + 24) = v57;
    *(float *)(v10 + 28) = v58;
    *(float *)(v10 + 32) = v59 + v56;
    *(_WORD *)(v10 + 20) = v15;
  }
  return v9 < v6;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t *a4, int a5, _BYTE *a6, _BYTE *a7, _BYTE *a8, double a9, double a10, int8x8_t a11, float32x4_t a12, uint64_t a13)
{
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v17;
  const float *v18;
  float32x2_t v19;
  float32x4_t *v20;
  const float *v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  uint64_t v42;
  unsigned int v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  int v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x2_t v60;
  float32x2_t v61;
  int v62;
  float32x2_t v63;
  float32x2_t v64;
  int v65;
  float32x4_t v66;
  float32x2_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int8x8_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  int8x8_t v79;
  float32x4_t v80;
  float32x2_t v81;
  float32x2_t v82;
  int8x8_t v83;
  float32x4_t v84;
  int8x8_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x2_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x4_t v91;
  float32x2_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x4_t v97;
  float32x2_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x2_t v101;
  float32x4_t v102;
  float32x2_t v103;
  float32x4_t v104;
  float32x2_t v105;
  float32x4_t v106;
  int32x4_t v107;
  __int32 v108;
  uint64_t v109;
  uint64_t v110;
  float32x4_t v111;
  float32x2_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x2_t v115;
  float32x2_t v116;
  int v117;
  int8x16_t v118;
  float32x2_t v119;
  float32x2_t v120;
  int v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  int v125;
  unsigned int v126;
  float32x2_t v127;
  float32x2_t v128;
  float32x2_t v129;
  int v130;
  int8x16_t v131;
  float32x2_t v132;
  float32x2_t v133;
  int v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int v140;
  int v141;
  int v142;
  int v143;
  float32x4_t v144;
  float32x2_t v145;
  float32x2_t v146;
  int v147;
  float32x2_t v148;
  int v149;
  float32x4_t v150;
  float v151;
  float32x2_t v152;
  int32x4_t v153;
  float32x4_t v154;
  int32x4_t v155;
  float32x4_t v156;
  uint64_t v157;
  float32x4_t *v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float v165;
  float32x2_t v166;
  uint64_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x2_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x2_t v173;
  float32x2_t v174;
  int v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  int8x8_t v179;
  float32x2_t v180;
  float32x2_t v181;
  float32x2_t v182;
  float32x2_t v183;
  float32x2_t v184;
  float32x2_t v185;
  int8x8_t v186;
  float32x4_t v187;
  float32x2_t v188;
  float32x2_t v189;
  int8x8_t v190;
  float32x4_t v191;
  int8x8_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x2_t v195;
  float32x4_t v196;
  float32x2_t v197;
  float32x4_t v198;
  float32x2_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x2_t v203;
  float32x4_t v204;
  float32x2_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x2_t v208;
  float32x4_t v209;
  float32x2_t v210;
  float32x4_t v211;
  float32x2_t v212;
  float32x4_t v213;
  float32x2_t v214;
  __int32 v215;
  uint64_t v216;
  uint64_t v217;
  float32x4_t v218;
  float32x2_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x2_t v222;
  float32x2_t v223;
  int v224;
  int8x16_t v225;
  float32x2_t v226;
  float32x2_t v227;
  int v228;
  float32x2_t v229;
  float32x2_t v230;
  float32x2_t v231;
  int v232;
  unsigned int v233;
  float32x2_t v234;
  float32x2_t v235;
  float32x2_t v236;
  int v237;
  int8x16_t v238;
  float32x2_t v239;
  float32x2_t v240;
  int v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  int v248;
  int v249;
  int v250;
  int v251;
  float32x4_t v252;
  float32x2_t v253;
  float32x2_t v254;
  int v255;
  float32x2_t v256;
  int v257;
  float32x4_t v258;
  int8x8_t v259;
  uint64_t v260;
  int *v261;
  int *v262;
  int v263;
  int v264;
  uint64_t result;
  uint64_t v266;
  int *v267;
  int *v268;
  int v269;
  int v270;
  float32x2_t v271;
  int *v272;
  int *v273;
  uint64_t v274;
  int v275;
  int v276;
  uint64_t v277;
  float32x4_t v278;
  float32x4_t v279;
  int v280;
  float32x2_t v281;
  uint64_t v282;
  int *v283;
  int *v284;
  int v285;
  int v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x2_t v297;
  float32x2_t v298;
  int v299;
  float32x4_t v300;
  float32x4_t v301;
  int8x16_t v302;
  int8x16_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x2_t v312;
  float32x2_t v313;
  int v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x2_t v317;
  int v318;
  float32x4_t v319;
  int8x16_t v320;
  int8x16_t v321;
  int32x4_t v322;
  float32x2_t v323;
  float v324;
  float32x2_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  int v331;
  float32x2_t v332;
  float32x4_t v333;
  unsigned int v334;
  float32x4_t v335;
  float32x2_t v336;
  float32x2_t v337;
  int v338;
  int v339;
  int v340;
  int v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  int8x16_t v350[2];
  uint64_t v351;

  v13 = a7;
  v14 = a6;
  v351 = *MEMORY[0x24BDAC8D0];
  v17 = *(_QWORD *)(a1 + 8);
  v18 = (const float *)(v17 + 20);
  v19 = vld1_dup_f32(v18);
  v20 = *(float32x4_t **)(a2 + 8);
  v21 = &v20[1].f32[1];
  v22 = vld1_dup_f32(v21);
  v23 = vmin_f32(v19, v22);
  v24 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  v25 = vmul_f32(v23, v24);
  v23.i32[0] = *(_DWORD *)(v17 + 16);
  v24.i32[0] = v20[1].i32[0];
  a11.i32[0] = -*(char *)(v17 + 32);
  v26 = (int32x2_t)vand_s8(a11, (int8x8_t)v23);
  v27 = (float32x2_t)vdup_lane_s32(v26, 0);
  v26.i32[0] = -v20[2].i8[0];
  v28 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v26, (int8x8_t)v24), 0);
  v323 = v27;
  v324 = v28.f32[0];
  v29 = vadd_f32(v27, v28);
  v30 = *a4;
  v335 = 0uLL;
  v334 = 0;
  v31 = *a8;
  __asm { FMOV            V9.2S, #1.0 }
  v327 = v29;
  if (!*a8)
  {
    v58 = vmulq_f32(*a3, *a3);
    v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
    v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32)), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_2260E5F10);
    v335 = v50;
    v59 = vmulq_f32(v50, v50);
    v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
    v60 = vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32);
    v61 = vrsqrte_f32(v60);
    v62 = 4;
    do
    {
      v61 = vmul_f32(v61, vrsqrts_f32(vmul_f32(v61, v61), v60));
      --v62;
    }
    while (v62);
    v63 = vmul_f32(v60, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v60), 0), (int8x8_t)_D9, (int8x8_t)v61));
    v64 = vrecpe_f32(v63);
    v65 = 4;
    do
    {
      *(float32x2_t *)a12.f32 = vrecps_f32(v63, v64);
      v64 = vmul_f32(v64, *(float32x2_t *)a12.f32);
      --v65;
    }
    while (v65);
    v66 = vmulq_n_f32(v50, v64.f32[0]);
    v66.i32[3] = 0;
    v330 = v66;
    v67 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v68.i64[0] = -1;
    v68.i64[1] = -1;
    v69 = 0uLL;
    goto LABEL_54;
  }
  v37 = 0;
  v38 = v17 + 48;
  v39 = v20[10].i64[0];
  v40 = v20[3];
  v41 = v20[4];
  a12 = v20[5];
  do
  {
    v42 = a6[v37];
    *(&v340 + v37) = v42;
    v43 = a7[v37];
    *(&v338 + v37) = v43;
    v44 = *(float32x4_t *)(v38 + 16 * (1 - v42));
    v45 = *(float32x4_t *)(v39 + 12 * v43);
    v46 = vmulq_n_f32(v40, v45.f32[0]);
    v46.i32[3] = 0;
    v47 = vmulq_lane_f32(v41, *(float32x2_t *)v45.f32, 1);
    v47.i32[3] = 0;
    v48 = vmulq_laneq_f32(a12, v45, 2);
    v48.i32[3] = 0;
    v49 = vaddq_f32(v48, vaddq_f32(v46, v47));
    v50 = vsubq_f32(v44, v49);
    *(&v345 + v37) = v44;
    *(&v342 + v37) = v49;
    *(&v348 + v37++) = v50;
  }
  while (v31 != v37);
  v334 = v31;
  switch((_DWORD)v37)
  {
    case 4:
      v331 = v30;
      physx::Gu::closestPtPointTetrahedron(&v348, &v345, &v342, &v340, &v338, (int *)&v334);
      LODWORD(v30) = v331;
      v29.i32[0] = v327.i32[0];
      goto LABEL_49;
    case 3:
      v334 = 3;
      v50 = v348;
      a12 = vsubq_f32(v349, v348);
      v70 = vsubq_f32((float32x4_t)v350[0], v348);
      v72 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 4uLL), *(float32x2_t *)v70.f32);
      *(int8x8_t *)v71.f32 = vext_s8(v72, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 8uLL), *(float32x2_t *)v70.f32), *(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL)), 4uLL);
      v72.i32[1] = 0;
      v73 = vpadd_f32(vmul_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32), vmul_f32((float32x2_t)v72.u32[0], (float32x2_t)v72.u32[0]));
      v74 = vpadd_f32(v73, v73);
      if (v74.f32[0] > 0.00000011921)
      {
        if (v74.f32[0] == 0.0)
        {
          v50 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v71.u32[2] = v72;
          v75 = (float32x2_t)vextq_s8((int8x16_t)v349, (int8x16_t)v349, 8uLL).u64[0];
          v76 = (float32x2_t)vextq_s8(v350[0], v350[0], 8uLL).u64[0];
          v77 = (float32x2_t)vextq_s8(v350[0], v350[0], 4uLL).u64[0];
          v78 = (float32x2_t)vextq_s8((int8x16_t)v349, (int8x16_t)v349, 4uLL).u64[0];
          v79 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v349.f32, v77), v78, *(float32x2_t *)v350[0].i8);
          *(int8x8_t *)v80.f32 = vext_s8(v79, (int8x8_t)vmls_f32(vmul_f32(v75, *(float32x2_t *)v350[0].i8), *(float32x2_t *)v349.f32, v76), 4uLL);
          v80.i64[1] = v79.u32[0];
          v81 = (float32x2_t)vextq_s8((int8x16_t)v348, (int8x16_t)v348, 8uLL).u64[0];
          v82 = (float32x2_t)vextq_s8((int8x16_t)v348, (int8x16_t)v348, 4uLL).u64[0];
          v83 = (int8x8_t)vmls_f32(vmul_f32(v82, *(float32x2_t *)v350[0].i8), v77, *(float32x2_t *)v348.f32);
          *(int8x8_t *)v84.f32 = vext_s8(v83, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v348.f32, v76), *(float32x2_t *)v350[0].i8, v81), 4uLL);
          v84.i64[1] = v83.u32[0];
          v85 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v348.f32, v78), v82, *(float32x2_t *)v349.f32);
          *(int8x8_t *)v86.f32 = vext_s8(v85, (int8x8_t)vmls_f32(vmul_f32(v81, *(float32x2_t *)v349.f32), *(float32x2_t *)v348.f32, v75), 4uLL);
          v86.i64[1] = v85.u32[0];
          v87 = vmulq_f32(v80, v71);
          v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
          v88 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32);
          v89 = vmulq_f32(v84, v71);
          v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
          v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
          v91 = vmulq_f32(v86, v71);
          v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
          v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v90), (int8x8_t)vcgez_f32(v88)), (int8x8_t)vcgez_f32(v92)), 0), *(int8x8_t *)v348.f32).u32[0] == -1)
          {
            v118 = (int8x16_t)vmulq_f32(v348, v71);
            v119 = (float32x2_t)vextq_s8(v118, v118, 8uLL).u64[0];
            v120 = vrecpe_f32(v74);
            v121 = 4;
            do
            {
              v120 = vmul_f32(v120, vrecps_f32(v74, v120));
              --v121;
            }
            while (v121);
            v122 = vpadd_f32(*(float32x2_t *)v118.i8, v119);
            v50 = vmulq_n_f32(v71, vmul_f32(v120, vpadd_f32(v122, v122)).f32[0]);
            v50.i32[3] = 0;
          }
          else
          {
            v93 = vnegq_f32(v348);
            v93.i32[3] = 0;
            v94 = vnegq_f32(v349);
            v94.i32[3] = 0;
            v95 = vmulq_f32(v93, a12);
            v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
            v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
            v97 = vmulq_f32(a12, v94);
            v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
            v98 = vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v96), (int8x8_t)vclez_f32(v98)), (int8x8_t)vclez_f32(v92)), 0), *(int8x8_t *)v348.f32).u32[0] == -1)
            {
              v123 = vsub_f32(v96, v98);
              v124 = vrecpe_f32(v123);
              v125 = 4;
              do
              {
                v124 = vmul_f32(v124, vrecps_f32(v123, v124));
                --v125;
              }
              while (v125);
              v110 = 0;
              v50 = vmlaq_n_f32(v348, a12, vmul_f32(v96, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v123), (float32x2_t)0x3400000034000000), (int8x8_t)v124, 0)).f32[0]);
              v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
              v126 = 2;
              v109 = 1;
            }
            else
            {
              v99 = vnegq_f32((float32x4_t)v350[0]);
              v99.i32[3] = 0;
              v100 = vmulq_f32(v94, v70);
              v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
              v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
              v102 = vmulq_f32(a12, v99);
              v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
              v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
              v104 = vmulq_f32(v70, v99);
              v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
              v105 = vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v101, v98), (int8x8_t)vcge_f32(v103, v105)), (int8x8_t)vclez_f32(v88)), 0), *(int8x8_t *)v348.f32).u32[0] == -1)
              {
                v127 = vsub_f32(v101, v98);
                v128 = vadd_f32(v127, vsub_f32(v103, v105));
                v129 = vrecpe_f32(v128);
                v130 = 4;
                do
                {
                  v129 = vmul_f32(v129, vrecps_f32(v128, v129));
                  --v130;
                }
                while (v130);
                v131 = (int8x16_t)vmlaq_n_f32(v349, vsubq_f32((float32x4_t)v350[0], v349), vmul_f32(v127, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v128), (float32x2_t)0x3400000034000000), (int8x8_t)v129, 0)).f32[0]);
                v131.i64[1] = vextq_s8(v131, v131, 8uLL).u32[0];
                v126 = 2;
                v110 = 1;
                v109 = 2;
                v50 = (float32x4_t)v131;
              }
              else
              {
                v106 = vmulq_f32(v93, v70);
                v107 = (int32x4_t)vpaddq_f32(v106, v106);
                *(float32x2_t *)v107.i8 = vpadd_f32(*(float32x2_t *)v107.i8, *(float32x2_t *)v107.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v107.i8), (int8x8_t)vclez_f32(v105)), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v348.f32).u32[0] == -1)
                {
                  v132 = vsub_f32(*(float32x2_t *)v107.i8, v105);
                  v133 = vrecpe_f32(v132);
                  v134 = 4;
                  do
                  {
                    v133 = vmul_f32(v133, vrecps_f32(v132, v133));
                    --v134;
                  }
                  while (v134);
                  v110 = 0;
                  v50 = vmlaq_n_f32(v348, v70, vmul_f32(*(float32x2_t *)v107.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v132), (float32x2_t)0x3400000034000000), (int8x8_t)v133, 0)).f32[0]);
                  v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
                  v109 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v107.i8), (int8x8_t)vclez_f32(v96)), 0), *(int8x8_t *)v348.f32).u32[0] == -1)
                {
                  v110 = 0;
                  v109 = 1;
                }
                else
                {
                  *(int32x2_t *)v107.i8 = vcge_f32(v98, v101);
                  *(int16x4_t *)v50.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v107.i8, (int8x8_t)vcgez_f32(v98)), 0);
                  *(int8x8_t *)v50.f32 = vuzp1_s8(*(int8x8_t *)v50.f32, *(int8x8_t *)v50.f32);
                  v107.i32[0] = -1;
                  v108 = v50.i32[0];
                  v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v50, v107), 0), (int8x16_t)v349, v350[0]);
                  v109 = 1;
                  if (v108 == -1)
                    v110 = 1;
                  else
                    v110 = 2;
                }
                v126 = v109;
              }
            }
            v135 = *(&v348 + v110);
            v136 = *(&v348 + v109);
            a12 = *(&v345 + v110);
            v137 = *(&v345 + v109);
            v138 = *(&v342 + v110);
            v139 = *(&v342 + v109);
            v140 = *(&v340 + v110);
            v141 = *(&v340 + v109);
            v142 = *(&v338 + v110);
            v143 = *(&v338 + v109);
            v348 = v135;
            v349 = v136;
            v345 = a12;
            v346 = v137;
            v342 = v138;
            v343 = v139;
            v340 = v140;
            v341 = v141;
            v338 = v142;
            v339 = v143;
            v334 = v126;
          }
        }
        goto LABEL_49;
      }
      v334 = 2;
      v111 = vmulq_f32(a12, a12);
      v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
      v112 = vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v112), 0), *(int8x8_t *)v348.f32).u32[0] != -1)
      {
        v113 = vnegq_f32(v348);
        v113.i32[3] = 0;
        v114 = vmulq_f32(v113, a12);
        v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
        v115 = vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32);
        v116 = vrecpe_f32(v112);
        v117 = 4;
        do
        {
          v116 = vmul_f32(v116, vrecps_f32(v112, v116));
          --v117;
        }
        while (v117);
        v50 = vmlaq_n_f32(v348, a12, vmax_f32(vmin_f32(vmul_f32(v115, v116), _D9), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      v50 = v348;
      v51 = vsubq_f32(v349, v348);
      v52 = vmulq_f32(v51, v51);
      v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
      v53 = vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v53), 0), *(int8x8_t *)v348.f32).u32[0] != -1)
      {
        v54 = vnegq_f32(v348);
        v54.i32[3] = 0;
        v55 = vmulq_f32(v54, v51);
        a12 = vpaddq_f32(v55, v55);
        *(float32x2_t *)a12.f32 = vpadd_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
        v56 = vrecpe_f32(v53);
        v57 = 4;
        do
        {
          v56 = vmul_f32(v56, vrecps_f32(v53, v56));
          --v57;
        }
        while (v57);
        v50 = vmlaq_n_f32(v348, v51, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a12.f32, v56), _D9), 0).f32[0]);
LABEL_31:
        v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  v334 = 1;
LABEL_49:
  v335 = v50;
  v144 = vmulq_f32(v50, v50);
  v144.i64[0] = vpaddq_f32(v144, v144).u64[0];
  v145 = vpadd_f32(*(float32x2_t *)v144.f32, *(float32x2_t *)v144.f32);
  v146 = vrsqrte_f32(v145);
  v147 = 4;
  do
  {
    v146 = vmul_f32(v146, vrsqrts_f32(vmul_f32(v146, v146), v145));
    --v147;
  }
  while (v147);
  v67 = vmul_f32(v145, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v145), 0), (int8x8_t)_D9, (int8x8_t)v146));
  v148 = vrecpe_f32(v67);
  v149 = 4;
  do
  {
    *(float32x2_t *)a12.f32 = vrecps_f32(v67, v148);
    v148 = vmul_f32(v148, *(float32x2_t *)a12.f32);
    --v149;
  }
  while (v149);
  v150 = vmulq_n_f32(v50, v148.f32[0]);
  v150.i32[3] = 0;
  v330 = v150;
  v68 = vdupq_lane_s32(vcgt_f32(v67, v25), 0);
  v69 = v50;
LABEL_54:
  v151 = *(float *)&v30 + v29.f32[0];
  a12.i32[0] = -1;
  v322 = (int32x4_t)a12;
  v152 = v67;
  v153.i64[0] = -1;
  v153.i64[1] = -1;
  while (1)
  {
    v154 = v50;
    v155.i64[0] = -1;
    v155.i64[1] = -1;
    *(int16x4_t *)v155.i8 = vmovn_s32(vceqq_s32(v68, v155));
    if (vuzp1_s8(*(int8x8_t *)v155.i8, *(int8x8_t *)v155.i8).u32[0] != -1)
      break;
    v332 = v67;
    v156 = vnegq_f32(v154);
    v156.i32[3] = 0;
    v157 = v334;
    v158 = *(float32x4_t **)(a1 + 8);
    v159 = vmulq_f32(v156, v158[3]);
    v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
    v160 = vmulq_f32(v156, v158[4]);
    v160.i64[0] = vpaddq_f32(v160, v160).u64[0];
    *(int8x8_t *)v160.f32 = vand_s8((int8x8_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32), vpadd_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v160.f32)), (int8x8_t)0x100000001);
    *(&v340 + v334) = v160.i32[0];
    v328 = v154;
    v329 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(*(int32x2_t *)v160.f32, 0), 0x1FuLL)), (int8x16_t)v158[3], (int8x16_t)v158[4]);
    *(double *)v161.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v335, &v338 + v157);
    v162 = v330;
    v163 = v161;
    v50 = vsubq_f32(v329, v161);
    v164 = vmulq_f32(v330, v50);
    v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
    v165 = vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32).f32[0];
    if (v165 > v151)
    {
      if (v14)
      {
        v266 = v334;
        *a8 = v334;
        if ((_DWORD)v266)
        {
          v267 = &v338;
          v268 = &v340;
          do
          {
            v269 = *v268++;
            *v14++ = v269;
            v270 = *v267++;
            *v13++ = v270;
            --v266;
          }
          while (v266);
        }
      }
      return 0;
    }
    v166 = v332;
    v167 = v334;
    if (v165 > (float)(0.99977 * v332.f32[0]))
    {
      v271 = v327;
      if (!v14)
        goto LABEL_121;
      *a8 = v334;
      if ((_DWORD)v167)
      {
        v272 = &v338;
        v273 = &v340;
        v274 = v167;
        do
        {
          v275 = *v273++;
          *v14++ = v275;
          v276 = *v272++;
          *v13++ = v276;
          --v274;
        }
        while (v274);
LABEL_121:
        v277 = a13;
        *(float32x4_t *)(a13 + 32) = v330;
        if ((_DWORD)v167 != 3)
        {
          if ((_DWORD)v167 != 2)
          {
            v278 = 0uLL;
            v279 = 0uLL;
            v280 = a5;
            if ((_DWORD)v167 == 1)
            {
              v278 = v345;
              v279 = v342;
              if (!a5)
                goto LABEL_142;
LABEL_138:
              *(float32x4_t *)v277 = v278;
              *(float32x4_t *)(v277 + 16) = v279;
              result = 2;
              *(float32x2_t *)(v277 + 64) = v166;
              return result;
            }
LABEL_137:
            if (!v280)
              goto LABEL_142;
            goto LABEL_138;
          }
          v294 = vsubq_f32(v348, v335);
          v295 = vsubq_f32(vsubq_f32(v349, v335), v294);
          v296 = vmulq_f32(v295, v295);
          v296.i64[0] = vpaddq_f32(v296, v296).u64[0];
          v297 = vpadd_f32(*(float32x2_t *)v296.f32, *(float32x2_t *)v296.f32);
          v298 = vrecpe_f32(v297);
          v299 = 4;
          do
          {
            v298 = vmul_f32(v298, vrecps_f32(v297, v298));
            --v299;
          }
          while (v299);
          v300 = vnegq_f32(v294);
          v300.i32[3] = 0;
          v301 = vmulq_f32(v300, v295);
          v301.i64[0] = vpaddq_f32(v301, v301).u64[0];
          v300.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v297), (int8x8_t)v298, 0), vpadd_f32(*(float32x2_t *)v301.f32, *(float32x2_t *)v301.f32)).u32[0];
          v278 = vmlaq_n_f32(v345, vsubq_f32(v346, v345), v300.f32[0]);
          v278.i64[1] = vextq_s8((int8x16_t)v278, (int8x16_t)v278, 8uLL).u32[0];
          v279 = vmlaq_n_f32(v342, vsubq_f32(v343, v342), v300.f32[0]);
          v279.i64[1] = vextq_s8((int8x16_t)v279, (int8x16_t)v279, 8uLL).u32[0];
          if (a5)
            goto LABEL_138;
LABEL_142:
          v302 = (int8x16_t)vmlsq_lane_f32(v278, v162, v323, 0);
          v302.i64[1] = vextq_s8(v302, v302, 8uLL).u32[0];
          v303 = (int8x16_t)vmlaq_n_f32(v279, v162, v324);
          v303.i64[1] = vextq_s8(v303, v303, 8uLL).u32[0];
          *(int8x16_t *)v277 = v302;
          *(int8x16_t *)(v277 + 16) = v303;
          *(float32x2_t *)(v277 + 64) = vsub_f32(v166, v271);
          return 2;
        }
        v336 = 0;
        v337 = 0;
        physx::Gu::barycentricCoordinates(&v335, &v348, &v349, (float32x4_t *)v350, &v337, &v336);
        v162 = v330;
        v166 = v332;
        v271 = v327;
        v289 = vmulq_n_f32(vsubq_f32(v346, v345), v337.f32[0]);
        v289.i32[3] = 0;
        v290 = vmulq_n_f32(vsubq_f32(v347, v345), v336.f32[0]);
        v290.i32[3] = 0;
        v291 = vaddq_f32(v289, v290);
        v292 = vmulq_n_f32(vsubq_f32(v343, v342), v337.f32[0]);
        v292.i32[3] = 0;
        v278 = vaddq_f32(v345, v291);
        v293 = vmulq_n_f32(vsubq_f32(v344, v342), v336.f32[0]);
        v293.i32[3] = 0;
        v279 = vaddq_f32(v342, vaddq_f32(v292, v293));
      }
      else
      {
        v277 = a13;
        *(float32x4_t *)(a13 + 32) = v330;
        v278 = 0uLL;
        v279 = 0uLL;
      }
      v280 = a5;
      goto LABEL_137;
    }
    *(&v345 + v334) = v329;
    *(&v342 + v167) = v163;
    v334 = v167 + 1;
    *(&v348 + v167) = v50;
    if ((_DWORD)v167 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v348, &v345, &v342, &v340, &v338, (int *)&v334);
      v166 = v332;
LABEL_66:
      v69 = v328;
      goto LABEL_101;
    }
    if ((_DWORD)v167 == 2)
    {
      v50 = v348;
      v176 = vsubq_f32(v349, v348);
      v177 = vsubq_f32((float32x4_t)v350[0], v348);
      v179 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v176.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v177, (int8x16_t)v177, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v176, (int8x16_t)v176, 4uLL), *(float32x2_t *)v177.f32);
      *(int8x8_t *)v178.f32 = vext_s8(v179, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v176, (int8x16_t)v176, 8uLL), *(float32x2_t *)v177.f32), *(float32x2_t *)v176.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v177, (int8x16_t)v177, 8uLL)), 4uLL);
      v179.i32[1] = 0;
      v334 = 3;
      v180 = vpadd_f32(vmul_f32(*(float32x2_t *)v178.f32, *(float32x2_t *)v178.f32), vmul_f32((float32x2_t)v179.u32[0], (float32x2_t)v179.u32[0]));
      v181 = vpadd_f32(v180, v180);
      if (v181.f32[0] <= 0.00000011921)
      {
        v334 = 2;
        v218 = vmulq_f32(v176, v176);
        v218.i64[0] = vpaddq_f32(v218, v218).u64[0];
        v219 = vpadd_f32(*(float32x2_t *)v218.f32, *(float32x2_t *)v218.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v219), 0), *(int8x8_t *)v348.f32).u32[0] != -1)
        {
          v220 = vnegq_f32(v348);
          v220.i32[3] = 0;
          v221 = vmulq_f32(v220, v176);
          v221.i64[0] = vpaddq_f32(v221, v221).u64[0];
          v222 = vpadd_f32(*(float32x2_t *)v221.f32, *(float32x2_t *)v221.f32);
          v223 = vrecpe_f32(v219);
          v224 = 4;
          v69 = v328;
          do
          {
            v223 = vmul_f32(v223, vrecps_f32(v219, v223));
            --v224;
          }
          while (v224);
          v50 = vmlaq_n_f32(v348, v176, vmax_f32(vmin_f32(vmul_f32(v222, v223), _D9), 0).f32[0]);
LABEL_81:
          v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
          goto LABEL_101;
        }
        v334 = 1;
        goto LABEL_66;
      }
      if (v181.f32[0] == 0.0)
      {
        v50 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v178.u32[2] = v179;
      v182 = (float32x2_t)vextq_s8((int8x16_t)v349, (int8x16_t)v349, 8uLL).u64[0];
      v183 = (float32x2_t)vextq_s8(v350[0], v350[0], 8uLL).u64[0];
      v184 = (float32x2_t)vextq_s8(v350[0], v350[0], 4uLL).u64[0];
      v185 = (float32x2_t)vextq_s8((int8x16_t)v349, (int8x16_t)v349, 4uLL).u64[0];
      v186 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v349.f32, v184), v185, *(float32x2_t *)v350[0].i8);
      *(int8x8_t *)v187.f32 = vext_s8(v186, (int8x8_t)vmls_f32(vmul_f32(v182, *(float32x2_t *)v350[0].i8), *(float32x2_t *)v349.f32, v183), 4uLL);
      v187.i64[1] = v186.u32[0];
      v188 = (float32x2_t)vextq_s8((int8x16_t)v348, (int8x16_t)v348, 8uLL).u64[0];
      v189 = (float32x2_t)vextq_s8((int8x16_t)v348, (int8x16_t)v348, 4uLL).u64[0];
      v190 = (int8x8_t)vmls_f32(vmul_f32(v189, *(float32x2_t *)v350[0].i8), v184, *(float32x2_t *)v348.f32);
      *(int8x8_t *)v191.f32 = vext_s8(v190, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v348.f32, v183), *(float32x2_t *)v350[0].i8, v188), 4uLL);
      v191.i64[1] = v190.u32[0];
      v192 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v348.f32, v185), v189, *(float32x2_t *)v349.f32);
      *(int8x8_t *)v193.f32 = vext_s8(v192, (int8x8_t)vmls_f32(vmul_f32(v188, *(float32x2_t *)v349.f32), *(float32x2_t *)v348.f32, v182), 4uLL);
      v193.i64[1] = v192.u32[0];
      v194 = vmulq_f32(v187, v178);
      v194.i64[0] = vpaddq_f32(v194, v194).u64[0];
      v195 = vpadd_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v194.f32);
      v196 = vmulq_f32(v191, v178);
      v196.i64[0] = vpaddq_f32(v196, v196).u64[0];
      v197 = vpadd_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32);
      v198 = vmulq_f32(v193, v178);
      v198.i64[0] = vpaddq_f32(v198, v198).u64[0];
      v199 = vpadd_f32(*(float32x2_t *)v198.f32, *(float32x2_t *)v198.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v197), (int8x8_t)vcgez_f32(v195)), (int8x8_t)vcgez_f32(v199)), 0), *(int8x8_t *)v348.f32).u32[0] != -1)
      {
        v200 = vnegq_f32(v348);
        v200.i32[3] = 0;
        v201 = vnegq_f32(v349);
        v201.i32[3] = 0;
        v202 = vmulq_f32(v200, v176);
        v202.i64[0] = vpaddq_f32(v202, v202).u64[0];
        v203 = vpadd_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v202.f32);
        v204 = vmulq_f32(v176, v201);
        v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
        v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v203), (int8x8_t)vclez_f32(v205)), (int8x8_t)vclez_f32(v199)), 0), *(int8x8_t *)v348.f32).u32[0] == -1)
        {
          v230 = vsub_f32(v203, v205);
          v231 = vrecpe_f32(v230);
          v232 = 4;
          do
          {
            v231 = vmul_f32(v231, vrecps_f32(v230, v231));
            --v232;
          }
          while (v232);
          v217 = 0;
          v50 = vmlaq_n_f32(v348, v176, vmul_f32(v203, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v230), (float32x2_t)0x3400000034000000), (int8x8_t)v231, 0)).f32[0]);
          v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
          v233 = 2;
          v216 = 1;
        }
        else
        {
          v206 = vnegq_f32((float32x4_t)v350[0]);
          v206.i32[3] = 0;
          v207 = vmulq_f32(v201, v177);
          v207.i64[0] = vpaddq_f32(v207, v207).u64[0];
          v208 = vpadd_f32(*(float32x2_t *)v207.f32, *(float32x2_t *)v207.f32);
          v209 = vmulq_f32(v176, v206);
          v209.i64[0] = vpaddq_f32(v209, v209).u64[0];
          v210 = vpadd_f32(*(float32x2_t *)v209.f32, *(float32x2_t *)v209.f32);
          v211 = vmulq_f32(v177, v206);
          v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
          v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v208, v205), (int8x8_t)vcge_f32(v210, v212)), (int8x8_t)vclez_f32(v195)), 0), *(int8x8_t *)v348.f32).u32[0] != -1)
          {
            v213 = vmulq_f32(v200, v177);
            v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
            v214 = vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v214), (int8x8_t)vclez_f32(v212)), (int8x8_t)vclez_f32(v197)), 0), *(int8x8_t *)v348.f32).u32[0] == -1)
            {
              v239 = vsub_f32(v214, v212);
              v240 = vrecpe_f32(v239);
              v241 = 4;
              v69 = v328;
              do
              {
                v240 = vmul_f32(v240, vrecps_f32(v239, v240));
                --v241;
              }
              while (v241);
              v217 = 0;
              v50 = vmlaq_n_f32(v348, v177, vmul_f32(v214, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v239), (float32x2_t)0x3400000034000000), (int8x8_t)v240, 0)).f32[0]);
              v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
              v216 = 2;
              v233 = 2;
            }
            else
            {
              v69 = v328;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v214), (int8x8_t)vclez_f32(v203)), 0), *(int8x8_t *)v348.f32).u32[0] == -1)
              {
                v217 = 0;
                v216 = 1;
              }
              else
              {
                *(int16x4_t *)v50.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v205, v208), (int8x8_t)vcgez_f32(v205)), 0);
                *(int8x8_t *)v50.f32 = vuzp1_s8(*(int8x8_t *)v50.f32, *(int8x8_t *)v50.f32);
                v215 = v50.i32[0];
                v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v50, v322), 0), (int8x16_t)v349, v350[0]);
                v216 = 1;
                if (v215 == -1)
                  v217 = 1;
                else
                  v217 = 2;
              }
              v233 = 1;
            }
            goto LABEL_100;
          }
          v234 = vsub_f32(v208, v205);
          v235 = vadd_f32(v234, vsub_f32(v210, v212));
          v236 = vrecpe_f32(v235);
          v237 = 4;
          do
          {
            v236 = vmul_f32(v236, vrecps_f32(v235, v236));
            --v237;
          }
          while (v237);
          v238 = (int8x16_t)vmlaq_n_f32(v349, vsubq_f32((float32x4_t)v350[0], v349), vmul_f32(v234, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v235), (float32x2_t)0x3400000034000000), (int8x8_t)v236, 0)).f32[0]);
          v238.i64[1] = vextq_s8(v238, v238, 8uLL).u32[0];
          v216 = 2;
          v50 = (float32x4_t)v238;
          v217 = 1;
          v233 = 2;
        }
        v69 = v328;
LABEL_100:
        v242 = *(&v348 + v217);
        v243 = *(&v348 + v216);
        v244 = *(&v345 + v217);
        v245 = *(&v345 + v216);
        v246 = *(&v342 + v217);
        v247 = *(&v342 + v216);
        v248 = *(&v340 + v217);
        v249 = *(&v340 + v216);
        v250 = *(&v338 + v217);
        v251 = *(&v338 + v216);
        v348 = v242;
        v349 = v243;
        v345 = v244;
        v346 = v245;
        v342 = v246;
        v343 = v247;
        v340 = v248;
        v341 = v249;
        v338 = v250;
        v339 = v251;
        v334 = v233;
        goto LABEL_101;
      }
      v225 = (int8x16_t)vmulq_f32(v348, v178);
      v226 = (float32x2_t)vextq_s8(v225, v225, 8uLL).u64[0];
      v227 = vrecpe_f32(v181);
      v228 = 4;
      v69 = v328;
      do
      {
        v227 = vmul_f32(v227, vrecps_f32(v181, v227));
        --v228;
      }
      while (v228);
      v229 = vpadd_f32(*(float32x2_t *)v225.i8, v226);
      v50 = vmulq_n_f32(v178, vmul_f32(v227, vpadd_f32(v229, v229)).f32[0]);
      v50.i32[3] = 0;
    }
    else
    {
      v69 = v328;
      if ((_DWORD)v167 == 1)
      {
        v50 = v348;
        v168 = vsubq_f32(v349, v348);
        v169 = vmulq_f32(v168, v168);
        v169.i64[0] = vpaddq_f32(v169, v169).u64[0];
        v170 = vpadd_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v169.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v170), 0), *(int8x8_t *)v348.f32).u32[0] == -1)
        {
          v334 = 1;
          goto LABEL_101;
        }
        v171 = vnegq_f32(v348);
        v171.i32[3] = 0;
        v172 = vmulq_f32(v171, v168);
        v172.i64[0] = vpaddq_f32(v172, v172).u64[0];
        v173 = vpadd_f32(*(float32x2_t *)v172.f32, *(float32x2_t *)v172.f32);
        v174 = vrecpe_f32(v170);
        v175 = 4;
        do
        {
          v174 = vmul_f32(v174, vrecps_f32(v170, v174));
          --v175;
        }
        while (v175);
        v50 = vmlaq_n_f32(v348, v168, vmax_f32(vmin_f32(vmul_f32(v173, v174), _D9), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    v335 = v50;
    v252 = vmulq_f32(v50, v50);
    v252.i64[0] = vpaddq_f32(v252, v252).u64[0];
    v253 = vpadd_f32(*(float32x2_t *)v252.f32, *(float32x2_t *)v252.f32);
    v254 = vrsqrte_f32(v253);
    v255 = 4;
    do
    {
      v254 = vmul_f32(v254, vrsqrts_f32(vmul_f32(v254, v254), v253));
      --v255;
    }
    while (v255);
    v67 = vmul_f32(v253, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v253), 0), (int8x8_t)_D9, (int8x8_t)v254));
    v256 = vrecpe_f32(v67);
    v257 = 4;
    do
    {
      v256 = vmul_f32(v256, vrecps_f32(v67, v256));
      --v257;
    }
    while (v257);
    v258 = vmulq_n_f32(v50, v256.f32[0]);
    v258.i32[3] = 0;
    v330 = v258;
    *(int32x2_t *)v258.f32 = vcgt_f32(v166, v67);
    v153 = vdupq_lane_s32(*(int32x2_t *)v258.f32, 0);
    v68 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v67, v25), *(int8x8_t *)v258.f32), 0);
    v152 = v166;
  }
  v259 = (int8x8_t)vmovn_s32(vceqzq_s32(v153));
  v260 = v334;
  if (vuzp1_s8(v259, v259).u32[0] != -1)
  {
    if (v14)
    {
      *a8 = v334;
      if ((_DWORD)v260)
      {
        v261 = &v338;
        v262 = &v340;
        do
        {
          v263 = *v262++;
          *v14++ = v263;
          v264 = *v261++;
          *v13++ = v264;
          --v260;
        }
        while (v260);
      }
    }
    return 5;
  }
  v281 = v327;
  if (v14)
  {
    v282 = v334 - 1;
    *a8 = v334 - 1;
    if ((_DWORD)v260 != 1)
    {
      v283 = &v338;
      v284 = &v340;
      do
      {
        v285 = *v284++;
        *v14++ = v285;
        v286 = *v283++;
        *v13++ = v286;
        --v282;
      }
      while (v282);
      goto LABEL_130;
    }
LABEL_133:
    v287 = v345;
    v288 = v342;
  }
  else
  {
LABEL_130:
    v335 = v69;
    if ((_DWORD)v260 == 3)
    {
      v336 = 0;
      v337 = 0;
      v333 = v69;
      physx::Gu::barycentricCoordinates(&v335, &v348, &v349, (float32x4_t *)v350, &v337, &v336);
      v281 = v327;
      v304 = vmulq_n_f32(vsubq_f32(v346, v345), v337.f32[0]);
      v304.i32[3] = 0;
      v305 = vmulq_n_f32(vsubq_f32(v347, v345), v336.f32[0]);
      v305.i32[3] = 0;
      v306 = vaddq_f32(v304, v305);
      v307 = vmulq_n_f32(vsubq_f32(v343, v342), v337.f32[0]);
      v307.i32[3] = 0;
      v287 = vaddq_f32(v345, v306);
      v308 = vmulq_n_f32(vsubq_f32(v344, v342), v336.f32[0]);
      v69 = v333;
      v308.i32[3] = 0;
      v288 = vaddq_f32(v342, vaddq_f32(v307, v308));
    }
    else if ((_DWORD)v260 == 2)
    {
      v309 = vsubq_f32(v348, v69);
      v310 = vsubq_f32(vsubq_f32(v349, v69), v309);
      v311 = vmulq_f32(v310, v310);
      v311.i64[0] = vpaddq_f32(v311, v311).u64[0];
      v312 = vpadd_f32(*(float32x2_t *)v311.f32, *(float32x2_t *)v311.f32);
      v313 = vrecpe_f32(v312);
      v314 = 4;
      do
      {
        v313 = vmul_f32(v313, vrecps_f32(v312, v313));
        --v314;
      }
      while (v314);
      v315 = vnegq_f32(v309);
      v315.i32[3] = 0;
      v316 = vmulq_f32(v315, v310);
      v316.i64[0] = vpaddq_f32(v316, v316).u64[0];
      v315.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v312), (int8x8_t)v313, 0), vpadd_f32(*(float32x2_t *)v316.f32, *(float32x2_t *)v316.f32)).u32[0];
      v287 = vmlaq_n_f32(v345, vsubq_f32(v346, v345), v315.f32[0]);
      v287.i64[1] = vextq_s8((int8x16_t)v287, (int8x16_t)v287, 8uLL).u32[0];
      v288 = vmlaq_n_f32(v342, vsubq_f32(v343, v342), v315.f32[0]);
      v288.i64[1] = vextq_s8((int8x16_t)v288, (int8x16_t)v288, 8uLL).u32[0];
    }
    else
    {
      v287 = 0uLL;
      v288 = 0uLL;
      if ((_DWORD)v260 == 1)
        goto LABEL_133;
    }
  }
  v317 = vrecpe_f32(v152);
  v318 = 4;
  do
  {
    v317 = vmul_f32(v317, vrecps_f32(v152, v317));
    --v318;
  }
  while (v318);
  v319 = vmulq_n_f32(v69, v317.f32[0]);
  v319.i32[3] = 0;
  *(float32x4_t *)(a13 + 32) = v319;
  *(float32x4_t *)(a13 + 48) = v330;
  if (a5)
  {
    *(float32x4_t *)a13 = v287;
    *(float32x4_t *)(a13 + 16) = v288;
    *(float32x2_t *)(a13 + 64) = v152;
  }
  else
  {
    v320 = (int8x16_t)vmlsq_lane_f32(v287, v319, v323, 0);
    v320.i64[1] = vextq_s8(v320, v320, 8uLL).u32[0];
    v321 = (int8x16_t)vmlaq_n_f32(v288, v319, v324);
    v321.i64[1] = vextq_s8(v321, v321, 8uLL).u32[0];
    *(int8x16_t *)a13 = v320;
    *(int8x16_t *)(a13 + 16) = v321;
    *(float32x2_t *)(a13 + 64) = vsub_f32(v152, v281);
    if ((vcge_f32(v281, v152).u32[0] & 1) != 0)
      return 2;
  }
  return 4;
}

BOOL physx::Gu::gjkRaycast<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(float32x4_t *a1, uint64_t a2, float32x4_t *a3, int32x2_t a4, uint64_t a5, float32x4_t *a6, float32x4_t *a7, float32x2_t *a8, float32x4_t *a9, int8x16_t *a10)
{
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  int v20;
  float32x2_t v26;
  float32x2_t v27;
  int v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t *v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  const float *v48;
  const float *v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x2_t v55;
  int32x4_t v56;
  float32x2_t v57;
  float32x4_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x2_t v61;
  int8x16_t v62;
  int32x4_t v63;
  unsigned __int32 v64;
  float32x4_t v65;
  float32x2_t v66;
  float32x2_t v67;
  int v68;
  float32x2_t v69;
  float32x2_t v70;
  int v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t *v77;
  int8x16_t v78;
  float32x4_t v79;
  int8x16_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x4_t v91;
  float32x2_t v92;
  float32x2_t v93;
  int v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  uint64_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x2_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x2_t v105;
  float32x2_t v106;
  int v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x8_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t v116;
  float32x2_t v117;
  int8x8_t v118;
  float32x4_t v119;
  float32x2_t v120;
  float32x2_t v121;
  int8x8_t v122;
  float32x4_t v123;
  int8x8_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x2_t v127;
  float32x4_t v128;
  float32x2_t v129;
  float32x4_t v130;
  float32x2_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x2_t v135;
  float32x4_t v136;
  float32x2_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x2_t v142;
  float32x4_t v143;
  float32x2_t v144;
  float32x4_t v145;
  float32x2_t v146;
  __int32 v147;
  uint64_t v148;
  uint64_t v149;
  float32x4_t v150;
  float32x2_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x2_t v154;
  float32x2_t v155;
  int v156;
  int8x16_t v157;
  float32x2_t v158;
  float32x2_t v159;
  int v160;
  float32x2_t v161;
  float32x2_t v162;
  float32x2_t v163;
  int v164;
  unsigned int v165;
  float32x2_t v166;
  float32x2_t v167;
  float32x2_t v168;
  int v169;
  int8x16_t v170;
  float32x2_t v171;
  float32x2_t v172;
  int v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x2_t v180;
  int8x8_t v181;
  int8x16_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x2_t v185;
  float32x2_t v186;
  int v187;
  float32x2_t v188;
  float32x2_t v189;
  int v190;
  int8x16_t v191;
  int8x16_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  int8x16_t *v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x2_t v202;
  float32x2_t v203;
  int v204;
  float32x4_t v205;
  float32x4_t v206;
  int8x16_t v207;
  int32x4_t v209;
  float32x2_t v210;
  int8x16_t v213;
  float32x2_t v214;
  float32x4_t v215;
  int8x16_t v216;
  float32x4_t v217;
  int8x16_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  int8x16_t v224;
  float32x4_t v225;
  float32x4_t v226;
  unsigned int v227;
  float32x2_t v228;
  float32x2_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  __int128 v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  __int128 v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240[2];
  uint64_t v241;

  v241 = *MEMORY[0x24BDAC8D0];
  v216 = (int8x16_t)vmlaq_f32(*a6, (float32x4_t)0, *a7);
  LODWORD(v14) = vextq_s8(v216, v216, 8uLL).u32[0];
  v227 = 1;
  v15 = vmulq_f32(*a3, *a3);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  v16 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32), (float32x2_t)0x3400000034000000), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_2260E5F10);
  v17 = vmulq_f32(v16, v16);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  v18 = vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32);
  v19 = vrsqrte_f32(v18);
  v20 = 4;
  do
  {
    v19 = vmul_f32(v19, vrsqrts_f32(vmul_f32(v19, v19), v18));
    --v20;
  }
  while (v20);
  HIDWORD(v14) = 0;
  __asm { FMOV            V8.2S, #1.0 }
  v26 = vmul_f32(v18, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v18), 0), (int8x8_t)_D8, (int8x8_t)v19));
  v27 = vrecpe_f32(v26);
  v28 = 4;
  do
  {
    v27 = vmul_f32(v27, vrecps_f32(v26, v27));
    --v28;
  }
  while (v28);
  v29 = (float32x2_t)vdup_lane_s32(a4, 0);
  v30.i64[0] = v216.i64[0];
  v30.i64[1] = v14;
  v217 = v30;
  v31 = vmulq_n_f32(v16, v27.f32[0]);
  v31.i32[3] = 0;
  v226 = v31;
  v32 = vnegq_f32(v31);
  v33 = vmulq_n_f32(a1[2], v32.f32[0]);
  v33.i32[3] = 0;
  v34 = vmulq_lane_f32(a1[3], *(float32x2_t *)v32.f32, 1);
  v34.i32[3] = 0;
  v35 = (float32x4_t *)a1[1].i64[0];
  v36 = vmulq_laneq_f32(a1[4], v32, 2);
  v36.i32[3] = 0;
  v37 = (int8x16_t)vcgtzq_f32(vaddq_f32(vaddq_f32(v33, v34), v36));
  v38 = *(float32x4_t *)(a1->i64[1] + 48);
  v39 = (int8x16_t)vnegq_f32(v38);
  v39.i32[3] = 0;
  v40 = (float32x4_t)vbslq_s8(v37, (int8x16_t)v38, v39);
  v41 = vmulq_n_f32(*v35, v40.f32[0]);
  v41.i32[3] = 0;
  v42 = vmulq_lane_f32(v35[1], *(float32x2_t *)v40.f32, 1);
  v42.i32[3] = 0;
  v43 = vmulq_laneq_f32(v35[2], v40, 2);
  v43.i32[3] = 0;
  v222 = vaddq_f32(v35[3], vaddq_f32(v43, vaddq_f32(v41, v42)));
  *(double *)v44.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v226);
  v45 = v44;
  v46 = vsubq_f32(v222, v44);
  v238 = v46;
  v239 = 0u;
  memset(v240, 0, sizeof(v240));
  v234 = v222;
  v235 = 0u;
  v236 = 0u;
  v237 = 0u;
  v47 = vnegq_f32(v46);
  v47.i32[3] = 0;
  v230 = v45;
  v231 = 0u;
  v232 = 0u;
  v233 = 0u;
  v48 = (const float *)(a1->i64[1] + 24);
  *(float32x2_t *)v45.f32 = vld1_dup_f32(v48);
  v49 = (const float *)(*(_QWORD *)(a2 + 8) + 24);
  v50 = vld1_dup_f32(v49);
  *(float32x2_t *)v45.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v45.f32, v50), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  v51 = vadd_f32(v29, *(float32x2_t *)v45.f32);
  v52 = vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32);
  v53 = vmulq_f32(v47, v47);
  v54 = vpaddq_f32(v53, v53);
  v55 = vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32);
  v210 = v52;
  *(int32x2_t *)v54.f32 = vcgt_f32(v55, v52);
  v56 = vdupq_lane_s32(*(int32x2_t *)v54.f32, 0);
  v57 = vmul_f32(v51, v51);
  v54.i32[0] = -1;
  v209 = (int32x4_t)v54;
  v58 = v46;
  v59.i64[0] = -1;
  v59.i64[1] = -1;
  v213 = (int8x16_t)v47;
  v60 = v47;
  v61 = 0;
  while (1)
  {
    v62 = (int8x16_t)v46;
    v63.i64[0] = -1;
    v63.i64[1] = -1;
    *(int16x4_t *)v63.i8 = vmovn_s32(vceqq_s32(v56, v63));
    v64 = vuzp1_s8(*(int8x8_t *)v63.i8, *(int8x8_t *)v63.i8).u32[0];
    if (v64 != -1)
      break;
    v65 = vmulq_f32(v60, v60);
    v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
    v66 = vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32);
    v67 = vrsqrte_f32(v66);
    v68 = 4;
    do
    {
      v67 = vmul_f32(v67, vrsqrts_f32(vmul_f32(v67, v67), v66));
      --v68;
    }
    while (v68);
    v218 = v62;
    v69 = vmul_f32(v66, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v66), 0), (int8x8_t)_D8, (int8x8_t)v67));
    v70 = vrecpe_f32(v69);
    v71 = 4;
    do
    {
      v70 = vmul_f32(v70, vrecps_f32(v69, v70));
      --v71;
    }
    while (v71);
    v215 = v60;
    v72 = vmulq_n_f32(v60, v70.f32[0]);
    v73 = vmulq_n_f32(a1[2], v72.f32[0]);
    v74 = vmulq_lane_f32(a1[3], *(float32x2_t *)v72.f32, 1);
    v75 = vmulq_laneq_f32(a1[4], v72, 2);
    v72.i32[3] = 0;
    v219 = v72;
    v76 = vnegq_f32(v72);
    v76.i32[3] = 0;
    v225 = v76;
    v73.i32[3] = 0;
    v77 = (float32x4_t *)a1[1].i64[0];
    v74.i32[3] = 0;
    v75.i32[3] = 0;
    v78 = (int8x16_t)vcgtzq_f32(vaddq_f32(vaddq_f32(v73, v74), v75));
    v79 = *(float32x4_t *)(a1->i64[1] + 48);
    v80 = (int8x16_t)vnegq_f32(v79);
    v80.i32[3] = 0;
    v81 = (float32x4_t)vbslq_s8(v78, (int8x16_t)v79, v80);
    v82 = vmulq_n_f32(*v77, v81.f32[0]);
    v82.i32[3] = 0;
    v83 = vmulq_lane_f32(v77[1], *(float32x2_t *)v81.f32, 1);
    v83.i32[3] = 0;
    v84 = vmulq_laneq_f32(v77[2], v81, 2);
    v84.i32[3] = 0;
    v223 = vaddq_f32(v77[3], vaddq_f32(v84, vaddq_f32(v82, v83)));
    *(double *)v85.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v225);
    v86 = v223;
    v87 = vaddq_f32(v217, v85);
    v46 = vsubq_f32(v223, v87);
    v88 = vnegq_f32(v46);
    v88.i32[3] = 0;
    v89 = vmulq_f32(v219, v88);
    v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
    v90 = vsub_f32(vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32), v51);
    if (v90.f32[0] > 0.0)
    {
      v91 = vmulq_f32(v219, *a7);
      v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
      v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
      if (v92.f32[0] >= 0.0)
        return v64 != -1;
      v93 = vrecpe_f32(v92);
      v94 = 4;
      do
      {
        v93 = vmul_f32(v93, vrecps_f32(v92, v93));
        --v94;
      }
      while (v94);
      v95 = vsub_f32(v61, vmul_f32(v90, v93));
      if ((vcgt_f32(v95, v61).u8[0] & 1) != 0)
      {
        if (v95.f32[0] > 1.0)
          return v64 != -1;
        v96 = vmlaq_n_f32(*a6, *a7, v95.f32[0]);
        v96.i64[1] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u32[0];
        v220 = v96;
        v97 = vsubq_f32(v96, v217);
        v214 = v95;
        v230 = vaddq_f32(v230, v97);
        v231 = vaddq_f32(v231, v97);
        v232 = vaddq_f32(v232, v97);
        v238 = vsubq_f32(v234, v230);
        v239 = vsubq_f32(v235, v231);
        v240[0] = vsubq_f32(v236, v232);
        *(double *)v98.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v225);
        v86 = v223;
        v87 = vaddq_f32(v220, v98);
        v46 = vsubq_f32(v223, v87);
        v55 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        v213 = (int8x16_t)v215;
        v217 = v220;
        v61 = v214;
      }
      else
      {
        v61 = v95;
      }
    }
    v99 = v227;
    *(&v234 + v227) = v86;
    *(&v230 + v99) = v87;
    v227 = v99 + 1;
    *(&v238 + v99) = v46;
    if ((_DWORD)v99 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v238, &v234, &v230, (int *)&v227);
LABEL_27:
      v58 = (float32x4_t)v218;
      goto LABEL_61;
    }
    if ((_DWORD)v99 != 2)
    {
      v58 = (float32x4_t)v218;
      if ((_DWORD)v99 != 1)
        goto LABEL_61;
      v46 = v238;
      v100 = vsubq_f32(v239, v238);
      v101 = vmulq_f32(v100, v100);
      v101.i64[0] = vpaddq_f32(v101, v101).u64[0];
      v102 = vpadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v102), 0), *(int8x8_t *)v238.f32).u32[0] != -1)
      {
        v103 = vnegq_f32(v238);
        v103.i32[3] = 0;
        v104 = vmulq_f32(v103, v100);
        v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
        v105 = vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32);
        v106 = vrecpe_f32(v102);
        v107 = 4;
        do
        {
          v106 = vmul_f32(v106, vrecps_f32(v102, v106));
          --v107;
        }
        while (v107);
        v46 = vmlaq_n_f32(v238, v100, vmax_f32(vmin_f32(vmul_f32(v105, v106), _D8), 0).f32[0]);
LABEL_42:
        v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
        goto LABEL_61;
      }
LABEL_43:
      v227 = 1;
      goto LABEL_61;
    }
    v46 = v238;
    v108 = vsubq_f32(v239, v238);
    v109 = vsubq_f32(v240[0], v238);
    v111 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v108.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v109, (int8x16_t)v109, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v108, (int8x16_t)v108, 4uLL), *(float32x2_t *)v109.f32);
    *(int8x8_t *)v110.f32 = vext_s8(v111, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v108, (int8x16_t)v108, 8uLL), *(float32x2_t *)v109.f32), *(float32x2_t *)v108.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL)), 4uLL);
    v111.i32[1] = 0;
    v227 = 3;
    v112 = vpadd_f32(vmul_f32(*(float32x2_t *)v110.f32, *(float32x2_t *)v110.f32), vmul_f32((float32x2_t)v111.u32[0], (float32x2_t)v111.u32[0]));
    v113 = vpadd_f32(v112, v112);
    if (v113.f32[0] <= 0.00000011921)
    {
      v227 = 2;
      v150 = vmulq_f32(v108, v108);
      v150.i64[0] = vpaddq_f32(v150, v150).u64[0];
      v151 = vpadd_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v150.f32);
      v58 = (float32x4_t)v218;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v151), 0), *(int8x8_t *)v238.f32).u32[0] != -1)
      {
        v152 = vnegq_f32(v238);
        v152.i32[3] = 0;
        v153 = vmulq_f32(v152, v108);
        v153.i64[0] = vpaddq_f32(v153, v153).u64[0];
        v154 = vpadd_f32(*(float32x2_t *)v153.f32, *(float32x2_t *)v153.f32);
        v155 = vrecpe_f32(v151);
        v156 = 4;
        do
        {
          v155 = vmul_f32(v155, vrecps_f32(v151, v155));
          --v156;
        }
        while (v156);
        v46 = vmlaq_n_f32(v238, v108, vmax_f32(vmin_f32(vmul_f32(v154, v155), _D8), 0).f32[0]);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v113.f32[0] == 0.0)
    {
      v46 = 0uLL;
      goto LABEL_27;
    }
    *(int8x8_t *)&v110.u32[2] = v111;
    v114 = (float32x2_t)vextq_s8((int8x16_t)v239, (int8x16_t)v239, 8uLL).u64[0];
    v115 = (float32x2_t)vextq_s8((int8x16_t)v240[0], (int8x16_t)v240[0], 8uLL).u64[0];
    v116 = (float32x2_t)vextq_s8((int8x16_t)v240[0], (int8x16_t)v240[0], 4uLL).u64[0];
    v117 = (float32x2_t)vextq_s8((int8x16_t)v239, (int8x16_t)v239, 4uLL).u64[0];
    v118 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v239.f32, v116), v117, *(float32x2_t *)v240[0].f32);
    *(int8x8_t *)v119.f32 = vext_s8(v118, (int8x8_t)vmls_f32(vmul_f32(v114, *(float32x2_t *)v240[0].f32), *(float32x2_t *)v239.f32, v115), 4uLL);
    v119.i64[1] = v118.u32[0];
    v120 = (float32x2_t)vextq_s8((int8x16_t)v238, (int8x16_t)v238, 8uLL).u64[0];
    v121 = (float32x2_t)vextq_s8((int8x16_t)v238, (int8x16_t)v238, 4uLL).u64[0];
    v122 = (int8x8_t)vmls_f32(vmul_f32(v121, *(float32x2_t *)v240[0].f32), v116, *(float32x2_t *)v238.f32);
    *(int8x8_t *)v123.f32 = vext_s8(v122, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v238.f32, v115), *(float32x2_t *)v240[0].f32, v120), 4uLL);
    v123.i64[1] = v122.u32[0];
    v124 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v238.f32, v117), v121, *(float32x2_t *)v239.f32);
    *(int8x8_t *)v125.f32 = vext_s8(v124, (int8x8_t)vmls_f32(vmul_f32(v120, *(float32x2_t *)v239.f32), *(float32x2_t *)v238.f32, v114), 4uLL);
    v125.i64[1] = v124.u32[0];
    v126 = vmulq_f32(v119, v110);
    v126.i64[0] = vpaddq_f32(v126, v126).u64[0];
    v127 = vpadd_f32(*(float32x2_t *)v126.f32, *(float32x2_t *)v126.f32);
    v128 = vmulq_f32(v123, v110);
    v128.i64[0] = vpaddq_f32(v128, v128).u64[0];
    v129 = vpadd_f32(*(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32);
    v130 = vmulq_f32(v125, v110);
    v130.i64[0] = vpaddq_f32(v130, v130).u64[0];
    v131 = vpadd_f32(*(float32x2_t *)v130.f32, *(float32x2_t *)v130.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v129), (int8x8_t)vcgez_f32(v127)), (int8x8_t)vcgez_f32(v131)), 0), *(int8x8_t *)v238.f32).u32[0] != -1)
    {
      v132 = vnegq_f32(v238);
      v132.i32[3] = 0;
      v133 = vnegq_f32(v239);
      v133.i32[3] = 0;
      v134 = vmulq_f32(v132, v108);
      v134.i64[0] = vpaddq_f32(v134, v134).u64[0];
      v135 = vpadd_f32(*(float32x2_t *)v134.f32, *(float32x2_t *)v134.f32);
      v136 = vmulq_f32(v108, v133);
      v136.i64[0] = vpaddq_f32(v136, v136).u64[0];
      v137 = vpadd_f32(*(float32x2_t *)v136.f32, *(float32x2_t *)v136.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v135), (int8x8_t)vclez_f32(v137)), (int8x8_t)vclez_f32(v131)), 0), *(int8x8_t *)v238.f32).u32[0] == -1)
      {
        v162 = vsub_f32(v135, v137);
        v163 = vrecpe_f32(v162);
        v164 = 4;
        do
        {
          v163 = vmul_f32(v163, vrecps_f32(v162, v163));
          --v164;
        }
        while (v164);
        v149 = 0;
        v46 = vmlaq_n_f32(v238, v108, vmul_f32(v135, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v162), (float32x2_t)0x3400000034000000), (int8x8_t)v163, 0)).f32[0]);
        v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
        v165 = 2;
        v148 = 1;
      }
      else
      {
        v138 = vnegq_f32(v240[0]);
        v138.i32[3] = 0;
        v139 = vmulq_f32(v133, v109);
        v139.i64[0] = vpaddq_f32(v139, v139).u64[0];
        v140 = vpadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32);
        v141 = vmulq_f32(v108, v138);
        v141.i64[0] = vpaddq_f32(v141, v141).u64[0];
        v142 = vpadd_f32(*(float32x2_t *)v141.f32, *(float32x2_t *)v141.f32);
        v143 = vmulq_f32(v109, v138);
        v143.i64[0] = vpaddq_f32(v143, v143).u64[0];
        v144 = vpadd_f32(*(float32x2_t *)v143.f32, *(float32x2_t *)v143.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v140, v137), (int8x8_t)vcge_f32(v142, v144)), (int8x8_t)vclez_f32(v127)), 0), *(int8x8_t *)v238.f32).u32[0] != -1)
        {
          v145 = vmulq_f32(v132, v109);
          v145.i64[0] = vpaddq_f32(v145, v145).u64[0];
          v146 = vpadd_f32(*(float32x2_t *)v145.f32, *(float32x2_t *)v145.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v146), (int8x8_t)vclez_f32(v144)), (int8x8_t)vclez_f32(v129)), 0), *(int8x8_t *)v238.f32).u32[0] == -1)
          {
            v171 = vsub_f32(v146, v144);
            v172 = vrecpe_f32(v171);
            v173 = 4;
            v58 = (float32x4_t)v218;
            do
            {
              v172 = vmul_f32(v172, vrecps_f32(v171, v172));
              --v173;
            }
            while (v173);
            v149 = 0;
            v46 = vmlaq_n_f32(v238, v109, vmul_f32(v146, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v171), (float32x2_t)0x3400000034000000), (int8x8_t)v172, 0)).f32[0]);
            v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
            v148 = 2;
          }
          else
          {
            v58 = (float32x4_t)v218;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v146), (int8x8_t)vclez_f32(v135)), 0), *(int8x8_t *)v238.f32).u32[0] == -1)
            {
              v149 = 0;
              v148 = 1;
            }
            else
            {
              *(int16x4_t *)v46.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v137, v140), (int8x8_t)vcgez_f32(v137)), 0);
              *(int8x8_t *)v46.f32 = vuzp1_s8(*(int8x8_t *)v46.f32, *(int8x8_t *)v46.f32);
              v147 = v46.i32[0];
              v46 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v46, v209), 0), (int8x16_t)v239, (int8x16_t)v240[0]);
              v148 = 1;
              if (v147 == -1)
                v149 = 1;
              else
                v149 = 2;
            }
          }
          v165 = v148;
          goto LABEL_60;
        }
        v166 = vsub_f32(v140, v137);
        v167 = vadd_f32(v166, vsub_f32(v142, v144));
        v168 = vrecpe_f32(v167);
        v169 = 4;
        do
        {
          v168 = vmul_f32(v168, vrecps_f32(v167, v168));
          --v169;
        }
        while (v169);
        v170 = (int8x16_t)vmlaq_n_f32(v239, vsubq_f32(v240[0], v239), vmul_f32(v166, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v167), (float32x2_t)0x3400000034000000), (int8x8_t)v168, 0)).f32[0]);
        v170.i64[1] = vextq_s8(v170, v170, 8uLL).u32[0];
        v165 = 2;
        v148 = 2;
        v149 = 1;
        v46 = (float32x4_t)v170;
      }
      v58 = (float32x4_t)v218;
LABEL_60:
      v174 = *(&v238 + v148);
      v175 = *(&v234 + v149);
      v176 = *(&v234 + v148);
      v177 = *(&v230 + v149);
      v178 = *(&v230 + v148);
      v238 = *(&v238 + v149);
      v239 = v174;
      v234 = v175;
      v235 = v176;
      v230 = v177;
      v231 = v178;
      v227 = v165;
      goto LABEL_61;
    }
    v157 = (int8x16_t)vmulq_f32(v238, v110);
    v158 = (float32x2_t)vextq_s8(v157, v157, 8uLL).u64[0];
    v159 = vrecpe_f32(v113);
    v160 = 4;
    v58 = (float32x4_t)v218;
    do
    {
      v159 = vmul_f32(v159, vrecps_f32(v113, v159));
      --v160;
    }
    while (v160);
    v161 = vpadd_f32(*(float32x2_t *)v157.i8, v158);
    v46 = vmulq_n_f32(v110, vmul_f32(v159, vpadd_f32(v161, v161)).f32[0]);
    v46.i32[3] = 0;
LABEL_61:
    v60 = vnegq_f32(v46);
    v60.i32[3] = 0;
    v179 = vmulq_f32(v46, v46);
    v179.i64[0] = vpaddq_f32(v179, v179).u64[0];
    v180 = vpadd_f32(*(float32x2_t *)v179.f32, *(float32x2_t *)v179.f32);
    v181 = (int8x8_t)vcgt_f32(v55, v180);
    v59 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v181, (int8x8_t)0x100000001), 0);
    v56 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v180, v57), v181), 0);
    v55 = v180;
  }
  v182 = (int8x16_t)v58;
  v183 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v55, v210), 0), v59), 0x1FuLL)), (int8x16_t)v60, v213);
  v184 = vmulq_f32(v183, v183);
  v184.i64[0] = vpaddq_f32(v184, v184).u64[0];
  v185 = vpadd_f32(*(float32x2_t *)v184.f32, *(float32x2_t *)v184.f32);
  v186 = vrsqrte_f32(v185);
  v187 = 4;
  do
  {
    v186 = vmul_f32(v186, vrsqrts_f32(vmul_f32(v186, v186), v185));
    --v187;
  }
  while (v187);
  v188 = vmul_f32(v185, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v185), 0), (int8x8_t)_D8, (int8x8_t)v186));
  v189 = vrecpe_f32(v188);
  v190 = 4;
  do
  {
    v189 = vmul_f32(v189, vrecps_f32(v188, v189));
    --v190;
  }
  while (v190);
  v191 = (int8x16_t)vdupq_n_s32(-*(char *)(a1->i64[1] + 32));
  v192 = (int8x16_t)vmulq_n_f32(v183, v189.f32[0]);
  v192.i32[3] = 0;
  v193 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v188), 0), v192));
  v193.i32[3] = 0;
  *a9 = v193;
  *a8 = v61;
  v194 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v59, 0x1FuLL)), v62, v182);
  v225 = v194;
  if (v227 == 3)
  {
    v228 = 0;
    v229 = 0;
    v221 = v193;
    v224 = v191;
    physx::Gu::barycentricCoordinates(&v225, &v238, &v239, v240, &v229, &v228);
    v193 = v221;
    v191 = v224;
    v59.i32[1] = v234.i32[1];
    v197 = vmulq_n_f32(vsubq_f32(v235, v234), v229.f32[0]);
    v197.i32[3] = 0;
    v198 = vmulq_n_f32(vsubq_f32(v236, v234), v228.f32[0]);
    v198.i32[3] = 0;
    v195 = vaddq_f32(v234, vaddq_f32(v197, v198));
    v196 = a10;
  }
  else if (v227 == 2)
  {
    v199 = vsubq_f32(v238, v194);
    v200 = vsubq_f32(vsubq_f32(v239, v194), v199);
    v201 = vmulq_f32(v200, v200);
    v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
    v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
    v203 = vrecpe_f32(v202);
    v204 = 4;
    v196 = a10;
    do
    {
      v203 = vmul_f32(v203, vrecps_f32(v202, v203));
      --v204;
    }
    while (v204);
    v205 = vnegq_f32(v199);
    v205.i32[3] = 0;
    v206 = vmulq_f32(v205, v200);
    v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
    v195 = vmlaq_n_f32(v234, vsubq_f32(v235, v234), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v202), (int8x8_t)v203, 0), vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32)).f32[0]);
    v59.i32[1] = 0;
    v195.i64[1] = vextq_s8((int8x16_t)v195, (int8x16_t)v195, 8uLL).u32[0];
  }
  else
  {
    v195 = 0uLL;
    v196 = a10;
    if (v227 == 1)
      v195 = v234;
  }
  v59.i32[0] = *(_DWORD *)(a1->i64[1] + 16);
  v207 = (int8x16_t)vmlsq_lane_f32(v195, v193, *(float32x2_t *)v59.i8, 0);
  v207.i64[1] = vextq_s8(v207, v207, 8uLL).u32[0];
  *v196 = vbslq_s8(v191, v207, (int8x16_t)v195);
  return v64 != -1;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t *a4, int a5, _BYTE *a6, _BYTE *a7, _BYTE *a8, double a9, double a10, int8x8_t a11, float32x4_t a12, uint64_t a13)
{
  _BYTE *v13;
  _BYTE *v14;
  float32x4_t *v17;
  const float *v18;
  float32x2_t v19;
  float32x4_t *v20;
  const float *v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  uint64_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  uint64_t v44;
  unsigned int v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x2_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x2_t v63;
  int v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x2_t v67;
  float32x2_t v68;
  int v69;
  float32x2_t v70;
  float32x2_t v71;
  int v72;
  float32x4_t v73;
  float32x2_t v74;
  int32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x8_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  int8x8_t v86;
  float32x4_t v87;
  float32x2_t v88;
  float32x2_t v89;
  int8x8_t v90;
  float32x4_t v91;
  int8x8_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x2_t v97;
  float32x4_t v98;
  float32x2_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x2_t v103;
  float32x4_t v104;
  float32x2_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x2_t v108;
  float32x4_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float32x2_t v112;
  float32x4_t v113;
  int32x4_t v114;
  __int32 v115;
  uint64_t v116;
  uint64_t v117;
  float32x4_t v118;
  float32x2_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x2_t v122;
  float32x2_t v123;
  int v124;
  int8x16_t v125;
  float32x2_t v126;
  float32x2_t v127;
  int v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x2_t v131;
  int v132;
  unsigned int v133;
  float32x2_t v134;
  float32x2_t v135;
  float32x2_t v136;
  int v137;
  int8x16_t v138;
  float32x2_t v139;
  float32x2_t v140;
  int v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  int v147;
  int v148;
  int v149;
  int v150;
  float32x4_t v151;
  float32x2_t v152;
  float32x2_t v153;
  int v154;
  float32x2_t v155;
  int v156;
  float32x4_t v157;
  float v158;
  int32x4_t v159;
  float32x2_t i;
  float32x4_t v161;
  int32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float v169;
  float32x2_t v170;
  uint64_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x2_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x2_t v177;
  float32x2_t v178;
  int v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  int8x8_t v183;
  float32x2_t v184;
  float32x2_t v185;
  float32x2_t v186;
  float32x2_t v187;
  float32x2_t v188;
  float32x2_t v189;
  int8x8_t v190;
  float32x4_t v191;
  float32x2_t v192;
  float32x2_t v193;
  int8x8_t v194;
  float32x4_t v195;
  int8x8_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x2_t v199;
  float32x4_t v200;
  float32x2_t v201;
  float32x4_t v202;
  float32x2_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x2_t v207;
  float32x4_t v208;
  float32x2_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x2_t v212;
  float32x4_t v213;
  float32x2_t v214;
  float32x4_t v215;
  float32x2_t v216;
  float32x4_t v217;
  float32x2_t v218;
  __int32 v219;
  uint64_t v220;
  uint64_t v221;
  float32x4_t v222;
  float32x2_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x2_t v226;
  float32x2_t v227;
  int v228;
  int8x16_t v229;
  float32x2_t v230;
  float32x2_t v231;
  int v232;
  float32x2_t v233;
  float32x2_t v234;
  float32x2_t v235;
  int v236;
  unsigned int v237;
  float32x2_t v238;
  float32x2_t v239;
  float32x2_t v240;
  int v241;
  int8x16_t v242;
  float32x2_t v243;
  float32x2_t v244;
  int v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  int v252;
  int v253;
  int v254;
  int v255;
  float32x4_t v256;
  float32x2_t v257;
  float32x2_t v258;
  int v259;
  float32x2_t v260;
  int v261;
  float32x4_t v262;
  int8x8_t v263;
  uint64_t v264;
  int *v265;
  int *v266;
  int v267;
  int v268;
  uint64_t result;
  uint64_t v270;
  int *v271;
  int *v272;
  int v273;
  int v274;
  float32x2_t v275;
  int *v276;
  int *v277;
  uint64_t v278;
  int v279;
  int v280;
  uint64_t v281;
  float32x4_t v282;
  float32x4_t v283;
  int v284;
  float32x2_t v285;
  uint64_t v286;
  int *v287;
  int *v288;
  int v289;
  int v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x2_t v301;
  float32x2_t v302;
  int v303;
  float32x4_t v304;
  float32x4_t v305;
  int8x16_t v306;
  int8x16_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x2_t v316;
  float32x2_t v317;
  int v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x2_t v321;
  int v322;
  float32x4_t v323;
  int8x16_t v324;
  int8x16_t v325;
  int32x4_t v326;
  float32x2_t v327;
  float v328;
  float32x2_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  int v335;
  float32x2_t v336;
  float32x4_t v337;
  float32x4_t v338;
  unsigned int v339;
  float32x4_t v340;
  float32x2_t v341;
  int v342;
  int v343;
  int v344;
  int v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354[2];
  uint64_t v355;

  v13 = a7;
  v14 = a6;
  v355 = *MEMORY[0x24BDAC8D0];
  v17 = (float32x4_t *)a1->i64[1];
  v18 = &v17[1].f32[1];
  v19 = vld1_dup_f32(v18);
  v20 = *(float32x4_t **)(a2 + 8);
  v21 = &v20[1].f32[1];
  v22 = vld1_dup_f32(v21);
  v23 = vmin_f32(v19, v22);
  v24 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  v25 = vmul_f32(v23, v24);
  v23.i32[0] = v17[1].i32[0];
  v24.i32[0] = v20[1].i32[0];
  a11.i32[0] = -v17[2].i8[0];
  v26 = (int32x2_t)vand_s8(a11, (int8x8_t)v23);
  v27 = (float32x2_t)vdup_lane_s32(v26, 0);
  v26.i32[0] = -v20[2].i8[0];
  v28 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v26, (int8x8_t)v24), 0);
  v327 = v27;
  v328 = v28.f32[0];
  v29 = vadd_f32(v27, v28);
  v30 = *a4;
  v340 = 0uLL;
  v339 = 0;
  v31 = *a8;
  __asm { FMOV            V9.2S, #1.0 }
  v331 = v29;
  if (!*a8)
  {
    v65 = vmulq_f32(*a3, *a3);
    v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
    v57 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32)), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_2260E5F10);
    v340 = v57;
    v66 = vmulq_f32(v57, v57);
    v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
    v67 = vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32);
    v68 = vrsqrte_f32(v67);
    v69 = 4;
    do
    {
      v68 = vmul_f32(v68, vrsqrts_f32(vmul_f32(v68, v68), v67));
      --v69;
    }
    while (v69);
    v70 = vmul_f32(v67, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v67), 0), (int8x8_t)_D9, (int8x8_t)v68));
    v71 = vrecpe_f32(v70);
    v72 = 4;
    do
    {
      *(float32x2_t *)a12.f32 = vrecps_f32(v70, v71);
      v71 = vmul_f32(v71, *(float32x2_t *)a12.f32);
      --v72;
    }
    while (v72);
    v73 = vmulq_n_f32(v57, v71.f32[0]);
    v73.i32[3] = 0;
    v334 = v73;
    v74 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v75.i64[0] = -1;
    v75.i64[1] = -1;
    v76 = 0uLL;
    goto LABEL_54;
  }
  v37 = 0;
  v38 = (float32x4_t *)a1[1].i64[0];
  v39 = v17[3];
  v40 = v20[10].i64[0];
  v41 = v20[3];
  a12 = v20[4];
  v42 = v20[5];
  v43 = (int8x16_t)vnegq_f32(v39);
  v43.i32[3] = 0;
  do
  {
    v44 = a6[v37];
    *(&v344 + v37) = v44;
    v45 = a7[v37];
    *(&v342 + v37) = v45;
    v46 = (float32x4_t)vbslq_s8(physx::boxVertexTable[v44], (int8x16_t)v39, v43);
    v47 = vmulq_n_f32(*v38, v46.f32[0]);
    v47.i32[3] = 0;
    v48 = vmulq_lane_f32(v38[1], *(float32x2_t *)v46.f32, 1);
    v48.i32[3] = 0;
    v49 = vmulq_laneq_f32(v38[2], v46, 2);
    v49.i32[3] = 0;
    v50 = vaddq_f32(v49, vaddq_f32(v47, v48));
    v51 = *(float32x4_t *)(v40 + 12 * v45);
    v52 = vmulq_n_f32(v41, v51.f32[0]);
    v52.i32[3] = 0;
    v53 = vmulq_lane_f32(a12, *(float32x2_t *)v51.f32, 1);
    v53.i32[3] = 0;
    v54 = vmulq_laneq_f32(v42, v51, 2);
    v54.i32[3] = 0;
    v55 = vaddq_f32(v38[3], v50);
    v56 = vaddq_f32(v54, vaddq_f32(v52, v53));
    v57 = vsubq_f32(v55, v56);
    *(&v349 + v37) = v55;
    *(&v346 + v37) = v56;
    *(&v352 + v37++) = v57;
  }
  while (v31 != v37);
  v339 = v31;
  switch((_DWORD)v37)
  {
    case 4:
      v335 = v30;
      physx::Gu::closestPtPointTetrahedron(&v352, &v349, &v346, &v344, &v342, (int *)&v339);
      LODWORD(v30) = v335;
      v29.i32[0] = v331.i32[0];
      goto LABEL_49;
    case 3:
      v339 = 3;
      v57 = v352;
      a12 = vsubq_f32(v353, v352);
      v77 = vsubq_f32(v354[0], v352);
      v79 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v77, (int8x16_t)v77, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 4uLL), *(float32x2_t *)v77.f32);
      *(int8x8_t *)v78.f32 = vext_s8(v79, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 8uLL), *(float32x2_t *)v77.f32), *(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL)), 4uLL);
      v79.i32[1] = 0;
      v80 = vpadd_f32(vmul_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32), vmul_f32((float32x2_t)v79.u32[0], (float32x2_t)v79.u32[0]));
      v81 = vpadd_f32(v80, v80);
      if (v81.f32[0] > 0.00000011921)
      {
        if (v81.f32[0] == 0.0)
        {
          v57 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v78.u32[2] = v79;
          v82 = (float32x2_t)vextq_s8((int8x16_t)v353, (int8x16_t)v353, 8uLL).u64[0];
          v83 = (float32x2_t)vextq_s8((int8x16_t)v354[0], (int8x16_t)v354[0], 8uLL).u64[0];
          v84 = (float32x2_t)vextq_s8((int8x16_t)v354[0], (int8x16_t)v354[0], 4uLL).u64[0];
          v85 = (float32x2_t)vextq_s8((int8x16_t)v353, (int8x16_t)v353, 4uLL).u64[0];
          v86 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v353.f32, v84), v85, *(float32x2_t *)v354[0].f32);
          *(int8x8_t *)v87.f32 = vext_s8(v86, (int8x8_t)vmls_f32(vmul_f32(v82, *(float32x2_t *)v354[0].f32), *(float32x2_t *)v353.f32, v83), 4uLL);
          v87.i64[1] = v86.u32[0];
          v88 = (float32x2_t)vextq_s8((int8x16_t)v352, (int8x16_t)v352, 8uLL).u64[0];
          v89 = (float32x2_t)vextq_s8((int8x16_t)v352, (int8x16_t)v352, 4uLL).u64[0];
          v90 = (int8x8_t)vmls_f32(vmul_f32(v89, *(float32x2_t *)v354[0].f32), v84, *(float32x2_t *)v352.f32);
          *(int8x8_t *)v91.f32 = vext_s8(v90, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v352.f32, v83), *(float32x2_t *)v354[0].f32, v88), 4uLL);
          v91.i64[1] = v90.u32[0];
          v92 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v352.f32, v85), v89, *(float32x2_t *)v353.f32);
          *(int8x8_t *)v93.f32 = vext_s8(v92, (int8x8_t)vmls_f32(vmul_f32(v88, *(float32x2_t *)v353.f32), *(float32x2_t *)v352.f32, v82), 4uLL);
          v93.i64[1] = v92.u32[0];
          v94 = vmulq_f32(v87, v78);
          v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
          v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
          v96 = vmulq_f32(v91, v78);
          v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
          v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
          v98 = vmulq_f32(v93, v78);
          v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
          v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v97), (int8x8_t)vcgez_f32(v95)), (int8x8_t)vcgez_f32(v99)), 0), *(int8x8_t *)v352.f32).u32[0] == -1)
          {
            v125 = (int8x16_t)vmulq_f32(v352, v78);
            v126 = (float32x2_t)vextq_s8(v125, v125, 8uLL).u64[0];
            v127 = vrecpe_f32(v81);
            v128 = 4;
            do
            {
              v127 = vmul_f32(v127, vrecps_f32(v81, v127));
              --v128;
            }
            while (v128);
            v129 = vpadd_f32(*(float32x2_t *)v125.i8, v126);
            v57 = vmulq_n_f32(v78, vmul_f32(v127, vpadd_f32(v129, v129)).f32[0]);
            v57.i32[3] = 0;
          }
          else
          {
            v100 = vnegq_f32(v352);
            v100.i32[3] = 0;
            v101 = vnegq_f32(v353);
            v101.i32[3] = 0;
            v102 = vmulq_f32(v100, a12);
            v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
            v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
            v104 = vmulq_f32(a12, v101);
            v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
            v105 = vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v103), (int8x8_t)vclez_f32(v105)), (int8x8_t)vclez_f32(v99)), 0), *(int8x8_t *)v352.f32).u32[0] == -1)
            {
              v130 = vsub_f32(v103, v105);
              v131 = vrecpe_f32(v130);
              v132 = 4;
              do
              {
                v131 = vmul_f32(v131, vrecps_f32(v130, v131));
                --v132;
              }
              while (v132);
              v117 = 0;
              v57 = vmlaq_n_f32(v352, a12, vmul_f32(v103, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v130), (float32x2_t)0x3400000034000000), (int8x8_t)v131, 0)).f32[0]);
              v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
              v133 = 2;
              v116 = 1;
            }
            else
            {
              v106 = vnegq_f32(v354[0]);
              v106.i32[3] = 0;
              v107 = vmulq_f32(v101, v77);
              v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
              v108 = vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32);
              v109 = vmulq_f32(a12, v106);
              v109.i64[0] = vpaddq_f32(v109, v109).u64[0];
              v110 = vpadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v109.f32);
              v111 = vmulq_f32(v77, v106);
              v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
              v112 = vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v108, v105), (int8x8_t)vcge_f32(v110, v112)), (int8x8_t)vclez_f32(v95)), 0), *(int8x8_t *)v352.f32).u32[0] == -1)
              {
                v134 = vsub_f32(v108, v105);
                v135 = vadd_f32(v134, vsub_f32(v110, v112));
                v136 = vrecpe_f32(v135);
                v137 = 4;
                do
                {
                  v136 = vmul_f32(v136, vrecps_f32(v135, v136));
                  --v137;
                }
                while (v137);
                v138 = (int8x16_t)vmlaq_n_f32(v353, vsubq_f32(v354[0], v353), vmul_f32(v134, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v135), (float32x2_t)0x3400000034000000), (int8x8_t)v136, 0)).f32[0]);
                v138.i64[1] = vextq_s8(v138, v138, 8uLL).u32[0];
                v133 = 2;
                v117 = 1;
                v116 = 2;
                v57 = (float32x4_t)v138;
              }
              else
              {
                v113 = vmulq_f32(v100, v77);
                v114 = (int32x4_t)vpaddq_f32(v113, v113);
                *(float32x2_t *)v114.i8 = vpadd_f32(*(float32x2_t *)v114.i8, *(float32x2_t *)v114.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v114.i8), (int8x8_t)vclez_f32(v112)), (int8x8_t)vclez_f32(v97)), 0), *(int8x8_t *)v352.f32).u32[0] == -1)
                {
                  v139 = vsub_f32(*(float32x2_t *)v114.i8, v112);
                  v140 = vrecpe_f32(v139);
                  v141 = 4;
                  do
                  {
                    v140 = vmul_f32(v140, vrecps_f32(v139, v140));
                    --v141;
                  }
                  while (v141);
                  v117 = 0;
                  v57 = vmlaq_n_f32(v352, v77, vmul_f32(*(float32x2_t *)v114.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v139), (float32x2_t)0x3400000034000000), (int8x8_t)v140, 0)).f32[0]);
                  v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
                  v116 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v114.i8), (int8x8_t)vclez_f32(v103)), 0), *(int8x8_t *)v352.f32).u32[0] == -1)
                {
                  v117 = 0;
                  v116 = 1;
                }
                else
                {
                  *(int32x2_t *)v114.i8 = vcge_f32(v105, v108);
                  *(int16x4_t *)v57.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v114.i8, (int8x8_t)vcgez_f32(v105)), 0);
                  *(int8x8_t *)v57.f32 = vuzp1_s8(*(int8x8_t *)v57.f32, *(int8x8_t *)v57.f32);
                  v114.i32[0] = -1;
                  v115 = v57.i32[0];
                  v57 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v57, v114), 0), (int8x16_t)v353, (int8x16_t)v354[0]);
                  v116 = 1;
                  if (v115 == -1)
                    v117 = 1;
                  else
                    v117 = 2;
                }
                v133 = v116;
              }
            }
            v142 = *(&v352 + v117);
            v143 = *(&v352 + v116);
            a12 = *(&v349 + v117);
            v144 = *(&v349 + v116);
            v145 = *(&v346 + v117);
            v146 = *(&v346 + v116);
            v147 = *(&v344 + v117);
            v148 = *(&v344 + v116);
            v149 = *(&v342 + v117);
            v150 = *(&v342 + v116);
            v352 = v142;
            v353 = v143;
            v349 = a12;
            v350 = v144;
            v346 = v145;
            v347 = v146;
            v344 = v147;
            v345 = v148;
            v342 = v149;
            v343 = v150;
            v339 = v133;
          }
        }
        goto LABEL_49;
      }
      v339 = 2;
      v118 = vmulq_f32(a12, a12);
      v118.i64[0] = vpaddq_f32(v118, v118).u64[0];
      v119 = vpadd_f32(*(float32x2_t *)v118.f32, *(float32x2_t *)v118.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v119), 0), *(int8x8_t *)v352.f32).u32[0] != -1)
      {
        v120 = vnegq_f32(v352);
        v120.i32[3] = 0;
        v121 = vmulq_f32(v120, a12);
        v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
        v122 = vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32);
        v123 = vrecpe_f32(v119);
        v124 = 4;
        do
        {
          v123 = vmul_f32(v123, vrecps_f32(v119, v123));
          --v124;
        }
        while (v124);
        v57 = vmlaq_n_f32(v352, a12, vmax_f32(vmin_f32(vmul_f32(v122, v123), _D9), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      v57 = v352;
      v58 = vsubq_f32(v353, v352);
      v59 = vmulq_f32(v58, v58);
      v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
      v60 = vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v60), 0), *(int8x8_t *)v352.f32).u32[0] != -1)
      {
        v61 = vnegq_f32(v352);
        v61.i32[3] = 0;
        v62 = vmulq_f32(v61, v58);
        a12 = vpaddq_f32(v62, v62);
        *(float32x2_t *)a12.f32 = vpadd_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
        v63 = vrecpe_f32(v60);
        v64 = 4;
        do
        {
          v63 = vmul_f32(v63, vrecps_f32(v60, v63));
          --v64;
        }
        while (v64);
        v57 = vmlaq_n_f32(v352, v58, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a12.f32, v63), _D9), 0).f32[0]);
LABEL_31:
        v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  v339 = 1;
LABEL_49:
  v340 = v57;
  v151 = vmulq_f32(v57, v57);
  v151.i64[0] = vpaddq_f32(v151, v151).u64[0];
  v152 = vpadd_f32(*(float32x2_t *)v151.f32, *(float32x2_t *)v151.f32);
  v153 = vrsqrte_f32(v152);
  v154 = 4;
  do
  {
    v153 = vmul_f32(v153, vrsqrts_f32(vmul_f32(v153, v153), v152));
    --v154;
  }
  while (v154);
  v74 = vmul_f32(v152, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v152), 0), (int8x8_t)_D9, (int8x8_t)v153));
  v155 = vrecpe_f32(v74);
  v156 = 4;
  do
  {
    *(float32x2_t *)a12.f32 = vrecps_f32(v74, v155);
    v155 = vmul_f32(v155, *(float32x2_t *)a12.f32);
    --v156;
  }
  while (v156);
  v157 = vmulq_n_f32(v57, v155.f32[0]);
  v157.i32[3] = 0;
  v334 = v157;
  v75 = vdupq_lane_s32(vcgt_f32(v74, v25), 0);
  v76 = v57;
LABEL_54:
  v158 = *(float *)&v30 + v29.f32[0];
  a12.i32[0] = -1;
  v326 = (int32x4_t)a12;
  v159.i64[0] = -1;
  v159.i64[1] = -1;
  for (i = v74; ; i = v170)
  {
    v161 = v57;
    v162.i64[0] = -1;
    v162.i64[1] = -1;
    *(int16x4_t *)v162.i8 = vmovn_s32(vceqq_s32(v75, v162));
    if (vuzp1_s8(*(int8x8_t *)v162.i8, *(int8x8_t *)v162.i8).u32[0] != -1)
      break;
    v332 = v161;
    v163 = vnegq_f32(v161);
    v163.i32[3] = 0;
    v336 = v74;
    v338 = v163;
    *(double *)v164.i64 = physx::Gu::RelativeConvex<physx::Gu::BoxV>::support(a1, (float32x2_t *)&v338, (unsigned __int32 *)&v344 + v339);
    v333 = v164;
    *(double *)v165.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v340, &v342 + v339);
    v166 = v334;
    v167 = v165;
    v57 = vsubq_f32(v333, v165);
    v168 = vmulq_f32(v334, v57);
    v168.i64[0] = vpaddq_f32(v168, v168).u64[0];
    v169 = vpadd_f32(*(float32x2_t *)v168.f32, *(float32x2_t *)v168.f32).f32[0];
    if (v169 > v158)
    {
      if (v14)
      {
        v270 = v339;
        *a8 = v339;
        if ((_DWORD)v270)
        {
          v271 = &v342;
          v272 = &v344;
          do
          {
            v273 = *v272++;
            *v14++ = v273;
            v274 = *v271++;
            *v13++ = v274;
            --v270;
          }
          while (v270);
        }
      }
      return 0;
    }
    v170 = v336;
    v171 = v339;
    if (v169 > (float)(0.99977 * v336.f32[0]))
    {
      v275 = v331;
      if (!v14)
        goto LABEL_121;
      *a8 = v339;
      if ((_DWORD)v171)
      {
        v276 = &v342;
        v277 = &v344;
        v278 = v171;
        do
        {
          v279 = *v277++;
          *v14++ = v279;
          v280 = *v276++;
          *v13++ = v280;
          --v278;
        }
        while (v278);
LABEL_121:
        v281 = a13;
        *(float32x4_t *)(a13 + 32) = v334;
        if ((_DWORD)v171 != 3)
        {
          if ((_DWORD)v171 != 2)
          {
            v282 = 0uLL;
            v283 = 0uLL;
            v284 = a5;
            if ((_DWORD)v171 == 1)
            {
              v282 = v349;
              v283 = v346;
              if (!a5)
                goto LABEL_142;
LABEL_138:
              *(float32x4_t *)v281 = v282;
              *(float32x4_t *)(v281 + 16) = v283;
              result = 2;
              *(float32x2_t *)(v281 + 64) = v170;
              return result;
            }
LABEL_137:
            if (!v284)
              goto LABEL_142;
            goto LABEL_138;
          }
          v298 = vsubq_f32(v352, v340);
          v299 = vsubq_f32(vsubq_f32(v353, v340), v298);
          v300 = vmulq_f32(v299, v299);
          v300.i64[0] = vpaddq_f32(v300, v300).u64[0];
          v301 = vpadd_f32(*(float32x2_t *)v300.f32, *(float32x2_t *)v300.f32);
          v302 = vrecpe_f32(v301);
          v303 = 4;
          do
          {
            v302 = vmul_f32(v302, vrecps_f32(v301, v302));
            --v303;
          }
          while (v303);
          v304 = vnegq_f32(v298);
          v304.i32[3] = 0;
          v305 = vmulq_f32(v304, v299);
          v305.i64[0] = vpaddq_f32(v305, v305).u64[0];
          v304.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v301), (int8x8_t)v302, 0), vpadd_f32(*(float32x2_t *)v305.f32, *(float32x2_t *)v305.f32)).u32[0];
          v282 = vmlaq_n_f32(v349, vsubq_f32(v350, v349), v304.f32[0]);
          v282.i64[1] = vextq_s8((int8x16_t)v282, (int8x16_t)v282, 8uLL).u32[0];
          v283 = vmlaq_n_f32(v346, vsubq_f32(v347, v346), v304.f32[0]);
          v283.i64[1] = vextq_s8((int8x16_t)v283, (int8x16_t)v283, 8uLL).u32[0];
          if (a5)
            goto LABEL_138;
LABEL_142:
          v306 = (int8x16_t)vmlsq_lane_f32(v282, v166, v327, 0);
          v306.i64[1] = vextq_s8(v306, v306, 8uLL).u32[0];
          v307 = (int8x16_t)vmlaq_n_f32(v283, v166, v328);
          v307.i64[1] = vextq_s8(v307, v307, 8uLL).u32[0];
          *(int8x16_t *)v281 = v306;
          *(int8x16_t *)(v281 + 16) = v307;
          *(float32x2_t *)(v281 + 64) = vsub_f32(v170, v275);
          return 2;
        }
        v338.i64[0] = 0;
        v341 = 0;
        physx::Gu::barycentricCoordinates(&v340, &v352, &v353, v354, (float32x2_t *)&v338, &v341);
        v166 = v334;
        v170 = v336;
        v275 = v331;
        v293 = vmulq_n_f32(vsubq_f32(v350, v349), v338.f32[0]);
        v293.i32[3] = 0;
        v294 = vmulq_n_f32(vsubq_f32(v351, v349), v341.f32[0]);
        v294.i32[3] = 0;
        v295 = vaddq_f32(v293, v294);
        v296 = vmulq_n_f32(vsubq_f32(v347, v346), v338.f32[0]);
        v296.i32[3] = 0;
        v282 = vaddq_f32(v349, v295);
        v297 = vmulq_n_f32(vsubq_f32(v348, v346), v341.f32[0]);
        v297.i32[3] = 0;
        v283 = vaddq_f32(v346, vaddq_f32(v296, v297));
      }
      else
      {
        v281 = a13;
        *(float32x4_t *)(a13 + 32) = v334;
        v282 = 0uLL;
        v283 = 0uLL;
      }
      v284 = a5;
      goto LABEL_137;
    }
    *(&v349 + v339) = v333;
    *(&v346 + v171) = v167;
    v339 = v171 + 1;
    *(&v352 + v171) = v57;
    if ((_DWORD)v171 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v352, &v349, &v346, &v344, &v342, (int *)&v339);
      v170 = v336;
LABEL_66:
      v76 = v332;
      goto LABEL_101;
    }
    if ((_DWORD)v171 == 2)
    {
      v57 = v352;
      v180 = vsubq_f32(v353, v352);
      v181 = vsubq_f32(v354[0], v352);
      v183 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v180.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v181, (int8x16_t)v181, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v180, (int8x16_t)v180, 4uLL), *(float32x2_t *)v181.f32);
      *(int8x8_t *)v182.f32 = vext_s8(v183, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v180, (int8x16_t)v180, 8uLL), *(float32x2_t *)v181.f32), *(float32x2_t *)v180.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL)), 4uLL);
      v183.i32[1] = 0;
      v339 = 3;
      v184 = vpadd_f32(vmul_f32(*(float32x2_t *)v182.f32, *(float32x2_t *)v182.f32), vmul_f32((float32x2_t)v183.u32[0], (float32x2_t)v183.u32[0]));
      v185 = vpadd_f32(v184, v184);
      if (v185.f32[0] <= 0.00000011921)
      {
        v339 = 2;
        v222 = vmulq_f32(v180, v180);
        v222.i64[0] = vpaddq_f32(v222, v222).u64[0];
        v223 = vpadd_f32(*(float32x2_t *)v222.f32, *(float32x2_t *)v222.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v223), 0), *(int8x8_t *)v352.f32).u32[0] != -1)
        {
          v224 = vnegq_f32(v352);
          v224.i32[3] = 0;
          v225 = vmulq_f32(v224, v180);
          v225.i64[0] = vpaddq_f32(v225, v225).u64[0];
          v226 = vpadd_f32(*(float32x2_t *)v225.f32, *(float32x2_t *)v225.f32);
          v227 = vrecpe_f32(v223);
          v228 = 4;
          v76 = v332;
          do
          {
            v227 = vmul_f32(v227, vrecps_f32(v223, v227));
            --v228;
          }
          while (v228);
          v57 = vmlaq_n_f32(v352, v180, vmax_f32(vmin_f32(vmul_f32(v226, v227), _D9), 0).f32[0]);
LABEL_81:
          v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
          goto LABEL_101;
        }
        v339 = 1;
        goto LABEL_66;
      }
      if (v185.f32[0] == 0.0)
      {
        v57 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v182.u32[2] = v183;
      v186 = (float32x2_t)vextq_s8((int8x16_t)v353, (int8x16_t)v353, 8uLL).u64[0];
      v187 = (float32x2_t)vextq_s8((int8x16_t)v354[0], (int8x16_t)v354[0], 8uLL).u64[0];
      v188 = (float32x2_t)vextq_s8((int8x16_t)v354[0], (int8x16_t)v354[0], 4uLL).u64[0];
      v189 = (float32x2_t)vextq_s8((int8x16_t)v353, (int8x16_t)v353, 4uLL).u64[0];
      v190 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v353.f32, v188), v189, *(float32x2_t *)v354[0].f32);
      *(int8x8_t *)v191.f32 = vext_s8(v190, (int8x8_t)vmls_f32(vmul_f32(v186, *(float32x2_t *)v354[0].f32), *(float32x2_t *)v353.f32, v187), 4uLL);
      v191.i64[1] = v190.u32[0];
      v192 = (float32x2_t)vextq_s8((int8x16_t)v352, (int8x16_t)v352, 8uLL).u64[0];
      v193 = (float32x2_t)vextq_s8((int8x16_t)v352, (int8x16_t)v352, 4uLL).u64[0];
      v194 = (int8x8_t)vmls_f32(vmul_f32(v193, *(float32x2_t *)v354[0].f32), v188, *(float32x2_t *)v352.f32);
      *(int8x8_t *)v195.f32 = vext_s8(v194, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v352.f32, v187), *(float32x2_t *)v354[0].f32, v192), 4uLL);
      v195.i64[1] = v194.u32[0];
      v196 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v352.f32, v189), v193, *(float32x2_t *)v353.f32);
      *(int8x8_t *)v197.f32 = vext_s8(v196, (int8x8_t)vmls_f32(vmul_f32(v192, *(float32x2_t *)v353.f32), *(float32x2_t *)v352.f32, v186), 4uLL);
      v197.i64[1] = v196.u32[0];
      v198 = vmulq_f32(v191, v182);
      v198.i64[0] = vpaddq_f32(v198, v198).u64[0];
      v199 = vpadd_f32(*(float32x2_t *)v198.f32, *(float32x2_t *)v198.f32);
      v200 = vmulq_f32(v195, v182);
      v200.i64[0] = vpaddq_f32(v200, v200).u64[0];
      v201 = vpadd_f32(*(float32x2_t *)v200.f32, *(float32x2_t *)v200.f32);
      v202 = vmulq_f32(v197, v182);
      v202.i64[0] = vpaddq_f32(v202, v202).u64[0];
      v203 = vpadd_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v202.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v201), (int8x8_t)vcgez_f32(v199)), (int8x8_t)vcgez_f32(v203)), 0), *(int8x8_t *)v352.f32).u32[0] != -1)
      {
        v204 = vnegq_f32(v352);
        v204.i32[3] = 0;
        v205 = vnegq_f32(v353);
        v205.i32[3] = 0;
        v206 = vmulq_f32(v204, v180);
        v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
        v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
        v208 = vmulq_f32(v180, v205);
        v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
        v209 = vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v207), (int8x8_t)vclez_f32(v209)), (int8x8_t)vclez_f32(v203)), 0), *(int8x8_t *)v352.f32).u32[0] == -1)
        {
          v234 = vsub_f32(v207, v209);
          v235 = vrecpe_f32(v234);
          v236 = 4;
          do
          {
            v235 = vmul_f32(v235, vrecps_f32(v234, v235));
            --v236;
          }
          while (v236);
          v221 = 0;
          v57 = vmlaq_n_f32(v352, v180, vmul_f32(v207, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v234), (float32x2_t)0x3400000034000000), (int8x8_t)v235, 0)).f32[0]);
          v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
          v237 = 2;
          v220 = 1;
        }
        else
        {
          v210 = vnegq_f32(v354[0]);
          v210.i32[3] = 0;
          v211 = vmulq_f32(v205, v181);
          v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
          v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
          v213 = vmulq_f32(v180, v210);
          v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
          v214 = vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
          v215 = vmulq_f32(v181, v210);
          v215.i64[0] = vpaddq_f32(v215, v215).u64[0];
          v216 = vpadd_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v212, v209), (int8x8_t)vcge_f32(v214, v216)), (int8x8_t)vclez_f32(v199)), 0), *(int8x8_t *)v352.f32).u32[0] != -1)
          {
            v217 = vmulq_f32(v204, v181);
            v217.i64[0] = vpaddq_f32(v217, v217).u64[0];
            v218 = vpadd_f32(*(float32x2_t *)v217.f32, *(float32x2_t *)v217.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v218), (int8x8_t)vclez_f32(v216)), (int8x8_t)vclez_f32(v201)), 0), *(int8x8_t *)v352.f32).u32[0] == -1)
            {
              v243 = vsub_f32(v218, v216);
              v244 = vrecpe_f32(v243);
              v245 = 4;
              v76 = v332;
              do
              {
                v244 = vmul_f32(v244, vrecps_f32(v243, v244));
                --v245;
              }
              while (v245);
              v221 = 0;
              v57 = vmlaq_n_f32(v352, v181, vmul_f32(v218, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v243), (float32x2_t)0x3400000034000000), (int8x8_t)v244, 0)).f32[0]);
              v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
              v220 = 2;
              v237 = 2;
            }
            else
            {
              v76 = v332;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v218), (int8x8_t)vclez_f32(v207)), 0), *(int8x8_t *)v352.f32).u32[0] == -1)
              {
                v221 = 0;
                v220 = 1;
              }
              else
              {
                *(int16x4_t *)v57.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v209, v212), (int8x8_t)vcgez_f32(v209)), 0);
                *(int8x8_t *)v57.f32 = vuzp1_s8(*(int8x8_t *)v57.f32, *(int8x8_t *)v57.f32);
                v219 = v57.i32[0];
                v57 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v57, v326), 0), (int8x16_t)v353, (int8x16_t)v354[0]);
                v220 = 1;
                if (v219 == -1)
                  v221 = 1;
                else
                  v221 = 2;
              }
              v237 = 1;
            }
            goto LABEL_100;
          }
          v238 = vsub_f32(v212, v209);
          v239 = vadd_f32(v238, vsub_f32(v214, v216));
          v240 = vrecpe_f32(v239);
          v241 = 4;
          do
          {
            v240 = vmul_f32(v240, vrecps_f32(v239, v240));
            --v241;
          }
          while (v241);
          v242 = (int8x16_t)vmlaq_n_f32(v353, vsubq_f32(v354[0], v353), vmul_f32(v238, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v239), (float32x2_t)0x3400000034000000), (int8x8_t)v240, 0)).f32[0]);
          v242.i64[1] = vextq_s8(v242, v242, 8uLL).u32[0];
          v220 = 2;
          v57 = (float32x4_t)v242;
          v221 = 1;
          v237 = 2;
        }
        v76 = v332;
LABEL_100:
        v246 = *(&v352 + v221);
        v247 = *(&v352 + v220);
        v248 = *(&v349 + v221);
        v249 = *(&v349 + v220);
        v250 = *(&v346 + v221);
        v251 = *(&v346 + v220);
        v252 = *(&v344 + v221);
        v253 = *(&v344 + v220);
        v254 = *(&v342 + v221);
        v255 = *(&v342 + v220);
        v352 = v246;
        v353 = v247;
        v349 = v248;
        v350 = v249;
        v346 = v250;
        v347 = v251;
        v344 = v252;
        v345 = v253;
        v342 = v254;
        v343 = v255;
        v339 = v237;
        goto LABEL_101;
      }
      v229 = (int8x16_t)vmulq_f32(v352, v182);
      v230 = (float32x2_t)vextq_s8(v229, v229, 8uLL).u64[0];
      v231 = vrecpe_f32(v185);
      v232 = 4;
      v76 = v332;
      do
      {
        v231 = vmul_f32(v231, vrecps_f32(v185, v231));
        --v232;
      }
      while (v232);
      v233 = vpadd_f32(*(float32x2_t *)v229.i8, v230);
      v57 = vmulq_n_f32(v182, vmul_f32(v231, vpadd_f32(v233, v233)).f32[0]);
      v57.i32[3] = 0;
    }
    else
    {
      v76 = v332;
      if ((_DWORD)v171 == 1)
      {
        v57 = v352;
        v172 = vsubq_f32(v353, v352);
        v173 = vmulq_f32(v172, v172);
        v173.i64[0] = vpaddq_f32(v173, v173).u64[0];
        v174 = vpadd_f32(*(float32x2_t *)v173.f32, *(float32x2_t *)v173.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v174), 0), *(int8x8_t *)v352.f32).u32[0] == -1)
        {
          v339 = 1;
          goto LABEL_101;
        }
        v175 = vnegq_f32(v352);
        v175.i32[3] = 0;
        v176 = vmulq_f32(v175, v172);
        v176.i64[0] = vpaddq_f32(v176, v176).u64[0];
        v177 = vpadd_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32);
        v178 = vrecpe_f32(v174);
        v179 = 4;
        do
        {
          v178 = vmul_f32(v178, vrecps_f32(v174, v178));
          --v179;
        }
        while (v179);
        v57 = vmlaq_n_f32(v352, v172, vmax_f32(vmin_f32(vmul_f32(v177, v178), _D9), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    v340 = v57;
    v256 = vmulq_f32(v57, v57);
    v256.i64[0] = vpaddq_f32(v256, v256).u64[0];
    v257 = vpadd_f32(*(float32x2_t *)v256.f32, *(float32x2_t *)v256.f32);
    v258 = vrsqrte_f32(v257);
    v259 = 4;
    do
    {
      v258 = vmul_f32(v258, vrsqrts_f32(vmul_f32(v258, v258), v257));
      --v259;
    }
    while (v259);
    v74 = vmul_f32(v257, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v257), 0), (int8x8_t)_D9, (int8x8_t)v258));
    v260 = vrecpe_f32(v74);
    v261 = 4;
    do
    {
      v260 = vmul_f32(v260, vrecps_f32(v74, v260));
      --v261;
    }
    while (v261);
    v262 = vmulq_n_f32(v57, v260.f32[0]);
    v262.i32[3] = 0;
    v334 = v262;
    *(int32x2_t *)v262.f32 = vcgt_f32(v170, v74);
    v159 = vdupq_lane_s32(*(int32x2_t *)v262.f32, 0);
    v75 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v74, v25), *(int8x8_t *)v262.f32), 0);
  }
  v263 = (int8x8_t)vmovn_s32(vceqzq_s32(v159));
  v264 = v339;
  if (vuzp1_s8(v263, v263).u32[0] != -1)
  {
    if (v14)
    {
      *a8 = v339;
      if ((_DWORD)v264)
      {
        v265 = &v342;
        v266 = &v344;
        do
        {
          v267 = *v266++;
          *v14++ = v267;
          v268 = *v265++;
          *v13++ = v268;
          --v264;
        }
        while (v264);
      }
    }
    return 5;
  }
  v285 = v331;
  if (v14)
  {
    v286 = v339 - 1;
    *a8 = v339 - 1;
    if ((_DWORD)v264 != 1)
    {
      v287 = &v342;
      v288 = &v344;
      do
      {
        v289 = *v288++;
        *v14++ = v289;
        v290 = *v287++;
        *v13++ = v290;
        --v286;
      }
      while (v286);
      goto LABEL_130;
    }
LABEL_133:
    v291 = v349;
    v292 = v346;
  }
  else
  {
LABEL_130:
    v340 = v76;
    if ((_DWORD)v264 == 3)
    {
      v338.i64[0] = 0;
      v341 = 0;
      v337 = v76;
      physx::Gu::barycentricCoordinates(&v340, &v352, &v353, v354, (float32x2_t *)&v338, &v341);
      v285 = v331;
      v308 = vmulq_n_f32(vsubq_f32(v350, v349), v338.f32[0]);
      v308.i32[3] = 0;
      v309 = vmulq_n_f32(vsubq_f32(v351, v349), v341.f32[0]);
      v309.i32[3] = 0;
      v310 = vaddq_f32(v308, v309);
      v311 = vmulq_n_f32(vsubq_f32(v347, v346), v338.f32[0]);
      v311.i32[3] = 0;
      v291 = vaddq_f32(v349, v310);
      v312 = vmulq_n_f32(vsubq_f32(v348, v346), v341.f32[0]);
      v76 = v337;
      v312.i32[3] = 0;
      v292 = vaddq_f32(v346, vaddq_f32(v311, v312));
    }
    else if ((_DWORD)v264 == 2)
    {
      v313 = vsubq_f32(v352, v76);
      v314 = vsubq_f32(vsubq_f32(v353, v76), v313);
      v315 = vmulq_f32(v314, v314);
      v315.i64[0] = vpaddq_f32(v315, v315).u64[0];
      v316 = vpadd_f32(*(float32x2_t *)v315.f32, *(float32x2_t *)v315.f32);
      v317 = vrecpe_f32(v316);
      v318 = 4;
      do
      {
        v317 = vmul_f32(v317, vrecps_f32(v316, v317));
        --v318;
      }
      while (v318);
      v319 = vnegq_f32(v313);
      v319.i32[3] = 0;
      v320 = vmulq_f32(v319, v314);
      v320.i64[0] = vpaddq_f32(v320, v320).u64[0];
      v319.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v316), (int8x8_t)v317, 0), vpadd_f32(*(float32x2_t *)v320.f32, *(float32x2_t *)v320.f32)).u32[0];
      v291 = vmlaq_n_f32(v349, vsubq_f32(v350, v349), v319.f32[0]);
      v291.i64[1] = vextq_s8((int8x16_t)v291, (int8x16_t)v291, 8uLL).u32[0];
      v292 = vmlaq_n_f32(v346, vsubq_f32(v347, v346), v319.f32[0]);
      v292.i64[1] = vextq_s8((int8x16_t)v292, (int8x16_t)v292, 8uLL).u32[0];
    }
    else
    {
      v291 = 0uLL;
      v292 = 0uLL;
      if ((_DWORD)v264 == 1)
        goto LABEL_133;
    }
  }
  v321 = vrecpe_f32(i);
  v322 = 4;
  do
  {
    v321 = vmul_f32(v321, vrecps_f32(i, v321));
    --v322;
  }
  while (v322);
  v323 = vmulq_n_f32(v76, v321.f32[0]);
  v323.i32[3] = 0;
  *(float32x4_t *)(a13 + 32) = v323;
  *(float32x4_t *)(a13 + 48) = v334;
  if (a5)
  {
    *(float32x4_t *)a13 = v291;
    *(float32x4_t *)(a13 + 16) = v292;
    *(float32x2_t *)(a13 + 64) = i;
  }
  else
  {
    v324 = (int8x16_t)vmlsq_lane_f32(v291, v323, v327, 0);
    v324.i64[1] = vextq_s8(v324, v324, 8uLL).u32[0];
    v325 = (int8x16_t)vmlaq_n_f32(v292, v323, v328);
    v325.i64[1] = vextq_s8(v325, v325, 8uLL).u32[0];
    *(int8x16_t *)a13 = v324;
    *(int8x16_t *)(a13 + 16) = v325;
    *(float32x2_t *)(a13 + 64) = vsub_f32(i, v285);
    if ((vcge_f32(v285, i).u32[0] & 1) != 0)
      return 2;
  }
  return 4;
}

BOOL physx::Gu::gjkRaycast<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(float32x4_t *a1, uint64_t a2, float32x4_t *a3, int32x2_t a4, uint64_t a5, float32x4_t *a6, float32x4_t *a7, float32x2_t *a8, float32x4_t *a9, int8x16_t *a10)
{
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  int v20;
  float32x2_t v26;
  float32x2_t v27;
  int v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  const float *v38;
  const float *v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x2_t v45;
  int32x4_t v46;
  float32x2_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x2_t v51;
  int8x16_t v52;
  int32x4_t v53;
  unsigned __int32 v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  int v58;
  float32x2_t v59;
  float32x2_t v60;
  int v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x2_t v70;
  float32x4_t v71;
  float32x2_t v72;
  float32x2_t v73;
  int v74;
  float32x2_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  uint64_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x2_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x2_t v85;
  float32x2_t v86;
  int v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int8x8_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  int8x8_t v98;
  float32x4_t v99;
  float32x2_t v100;
  float32x2_t v101;
  int8x8_t v102;
  float32x4_t v103;
  int8x8_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x4_t v110;
  float32x2_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x2_t v115;
  float32x4_t v116;
  float32x2_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x2_t v120;
  float32x4_t v121;
  float32x2_t v122;
  float32x4_t v123;
  float32x2_t v124;
  float32x4_t v125;
  float32x2_t v126;
  __int32 v127;
  uint64_t v128;
  uint64_t v129;
  float32x4_t v130;
  float32x2_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x2_t v134;
  float32x2_t v135;
  int v136;
  int8x16_t v137;
  float32x2_t v138;
  float32x2_t v139;
  int v140;
  float32x2_t v141;
  float32x2_t v142;
  float32x2_t v143;
  int v144;
  unsigned int v145;
  float32x2_t v146;
  float32x2_t v147;
  float32x2_t v148;
  int v149;
  int8x16_t v150;
  float32x2_t v151;
  float32x2_t v152;
  int v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x2_t v160;
  int8x8_t v161;
  int8x16_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x2_t v165;
  float32x2_t v166;
  int v167;
  float32x2_t v168;
  float32x2_t v169;
  int v170;
  int8x16_t v171;
  int8x16_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  int8x16_t *v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x2_t v182;
  float32x2_t v183;
  int v184;
  float32x4_t v185;
  float32x4_t v186;
  int8x16_t v187;
  int32x4_t v189;
  float32x2_t v190;
  int8x16_t v193;
  float32x2_t v194;
  float32x4_t v195;
  float32x4_t v196;
  int8x16_t v197;
  float32x4_t v198;
  int8x16_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  int8x16_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  unsigned int v207;
  float32x2_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  __int128 v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  __int128 v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219[2];
  uint64_t v220;

  v220 = *MEMORY[0x24BDAC8D0];
  v197 = (int8x16_t)vmlaq_f32(*a6, (float32x4_t)0, *a7);
  LODWORD(v14) = vextq_s8(v197, v197, 8uLL).u32[0];
  v207 = 1;
  v15 = vmulq_f32(*a3, *a3);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  v16 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32), (float32x2_t)0x3400000034000000), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_2260E5F10);
  v17 = vmulq_f32(v16, v16);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  v18 = vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32);
  v19 = vrsqrte_f32(v18);
  v20 = 4;
  do
  {
    v19 = vmul_f32(v19, vrsqrts_f32(vmul_f32(v19, v19), v18));
    --v20;
  }
  while (v20);
  HIDWORD(v14) = 0;
  __asm { FMOV            V8.2S, #1.0 }
  v26 = vmul_f32(v18, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v18), 0), (int8x8_t)_D8, (int8x8_t)v19));
  v27 = vrecpe_f32(v26);
  v28 = 4;
  do
  {
    v27 = vmul_f32(v27, vrecps_f32(v26, v27));
    --v28;
  }
  while (v28);
  v29 = (float32x2_t)vdup_lane_s32(a4, 0);
  v30.i64[0] = v197.i64[0];
  v30.i64[1] = v14;
  v198 = v30;
  v31 = vmulq_n_f32(v16, v27.f32[0]);
  v31.i32[3] = 0;
  v206 = v31;
  v32 = vnegq_f32(v31);
  v32.i32[3] = 0;
  v217 = v32;
  *(double *)v33.i64 = physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::support(a1, (float32x2_t *)&v217);
  v201 = v33;
  *(double *)v34.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v206);
  v35 = v34;
  v36 = vsubq_f32(v201, v34);
  v217 = v36;
  v218 = 0u;
  memset(v219, 0, sizeof(v219));
  v213 = v201;
  v214 = 0u;
  v215 = 0u;
  v216 = 0u;
  v37 = vnegq_f32(v36);
  v37.i32[3] = 0;
  v209 = v35;
  v210 = 0u;
  v211 = 0u;
  v212 = 0u;
  v38 = (const float *)(a1->i64[1] + 24);
  *(float32x2_t *)v35.f32 = vld1_dup_f32(v38);
  v39 = (const float *)(*(_QWORD *)(a2 + 8) + 24);
  v40 = vld1_dup_f32(v39);
  *(float32x2_t *)v35.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v35.f32, v40), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  v41 = vadd_f32(v29, *(float32x2_t *)v35.f32);
  v42 = vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32);
  v43 = vmulq_f32(v37, v37);
  v44 = vpaddq_f32(v43, v43);
  v45 = vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32);
  v190 = v42;
  *(int32x2_t *)v44.f32 = vcgt_f32(v45, v42);
  v46 = vdupq_lane_s32(*(int32x2_t *)v44.f32, 0);
  v47 = vmul_f32(v41, v41);
  v44.i32[0] = -1;
  v189 = (int32x4_t)v44;
  v48 = v36;
  v49.i64[0] = -1;
  v49.i64[1] = -1;
  v193 = (int8x16_t)v37;
  v50 = v37;
  v51 = 0;
  while (1)
  {
    v52 = (int8x16_t)v36;
    v53.i64[0] = -1;
    v53.i64[1] = -1;
    *(int16x4_t *)v53.i8 = vmovn_s32(vceqq_s32(v46, v53));
    v54 = vuzp1_s8(*(int8x8_t *)v53.i8, *(int8x8_t *)v53.i8).u32[0];
    if (v54 != -1)
      break;
    v55 = vmulq_f32(v50, v50);
    v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
    v56 = vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32);
    v57 = vrsqrte_f32(v56);
    v58 = 4;
    do
    {
      v57 = vmul_f32(v57, vrsqrts_f32(vmul_f32(v57, v57), v56));
      --v58;
    }
    while (v58);
    v199 = v52;
    v59 = vmul_f32(v56, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v56), 0), (int8x8_t)_D8, (int8x8_t)v57));
    v60 = vrecpe_f32(v59);
    v61 = 4;
    do
    {
      v60 = vmul_f32(v60, vrecps_f32(v59, v60));
      --v61;
    }
    while (v61);
    v196 = v50;
    v62 = vmulq_n_f32(v50, v60.f32[0]);
    v62.i32[3] = 0;
    v205 = v62;
    v63 = vnegq_f32(v62);
    v63.i32[3] = 0;
    v204 = v63;
    *(double *)v64.i64 = physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::support(a1, (float32x2_t *)&v205);
    v202 = v64;
    *(double *)v65.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v204);
    v66 = v202;
    v67 = vaddq_f32(v198, v65);
    v36 = vsubq_f32(v202, v67);
    v68 = vnegq_f32(v36);
    v68.i32[3] = 0;
    v69 = vmulq_f32(v205, v68);
    v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
    v70 = vsub_f32(vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), v41);
    if (v70.f32[0] > 0.0)
    {
      v71 = vmulq_f32(v205, *a7);
      v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
      v72 = vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32);
      if (v72.f32[0] >= 0.0)
        return v54 != -1;
      v73 = vrecpe_f32(v72);
      v74 = 4;
      do
      {
        v73 = vmul_f32(v73, vrecps_f32(v72, v73));
        --v74;
      }
      while (v74);
      v75 = vsub_f32(v51, vmul_f32(v70, v73));
      if ((vcgt_f32(v75, v51).u8[0] & 1) != 0)
      {
        if (v75.f32[0] > 1.0)
          return v54 != -1;
        v76 = vmlaq_n_f32(*a6, *a7, v75.f32[0]);
        v76.i64[1] = vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u32[0];
        v194 = v75;
        v195 = v76;
        v77 = vsubq_f32(v76, v198);
        v209 = vaddq_f32(v209, v77);
        v210 = vaddq_f32(v210, v77);
        v211 = vaddq_f32(v211, v77);
        v217 = vsubq_f32(v213, v209);
        v218 = vsubq_f32(v214, v210);
        v219[0] = vsubq_f32(v215, v211);
        *(double *)v78.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v204);
        v66 = v202;
        v67 = vaddq_f32(v195, v78);
        v36 = vsubq_f32(v202, v67);
        v45 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        v193 = (int8x16_t)v196;
        v198 = v195;
        v51 = v194;
      }
      else
      {
        v51 = v75;
      }
    }
    v79 = v207;
    *(&v213 + v207) = v66;
    *(&v209 + v79) = v67;
    v207 = v79 + 1;
    *(&v217 + v79) = v36;
    if ((_DWORD)v79 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v217, &v213, &v209, (int *)&v207);
LABEL_27:
      v48 = (float32x4_t)v199;
      goto LABEL_61;
    }
    if ((_DWORD)v79 != 2)
    {
      v48 = (float32x4_t)v199;
      if ((_DWORD)v79 != 1)
        goto LABEL_61;
      v36 = v217;
      v80 = vsubq_f32(v218, v217);
      v81 = vmulq_f32(v80, v80);
      v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
      v82 = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v82), 0), *(int8x8_t *)v217.f32).u32[0] != -1)
      {
        v83 = vnegq_f32(v217);
        v83.i32[3] = 0;
        v84 = vmulq_f32(v83, v80);
        v84.i64[0] = vpaddq_f32(v84, v84).u64[0];
        v85 = vpadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32);
        v86 = vrecpe_f32(v82);
        v87 = 4;
        do
        {
          v86 = vmul_f32(v86, vrecps_f32(v82, v86));
          --v87;
        }
        while (v87);
        v36 = vmlaq_n_f32(v217, v80, vmax_f32(vmin_f32(vmul_f32(v85, v86), _D8), 0).f32[0]);
LABEL_42:
        v36.i64[1] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u32[0];
        goto LABEL_61;
      }
LABEL_43:
      v207 = 1;
      goto LABEL_61;
    }
    v36 = v217;
    v88 = vsubq_f32(v218, v217);
    v89 = vsubq_f32(v219[0], v217);
    v91 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v88.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v89, (int8x16_t)v89, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v88, (int8x16_t)v88, 4uLL), *(float32x2_t *)v89.f32);
    *(int8x8_t *)v90.f32 = vext_s8(v91, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL), *(float32x2_t *)v89.f32), *(float32x2_t *)v88.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL)), 4uLL);
    v91.i32[1] = 0;
    v207 = 3;
    v92 = vpadd_f32(vmul_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32), vmul_f32((float32x2_t)v91.u32[0], (float32x2_t)v91.u32[0]));
    v93 = vpadd_f32(v92, v92);
    if (v93.f32[0] <= 0.00000011921)
    {
      v207 = 2;
      v130 = vmulq_f32(v88, v88);
      v130.i64[0] = vpaddq_f32(v130, v130).u64[0];
      v131 = vpadd_f32(*(float32x2_t *)v130.f32, *(float32x2_t *)v130.f32);
      v48 = (float32x4_t)v199;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v131), 0), *(int8x8_t *)v217.f32).u32[0] != -1)
      {
        v132 = vnegq_f32(v217);
        v132.i32[3] = 0;
        v133 = vmulq_f32(v132, v88);
        v133.i64[0] = vpaddq_f32(v133, v133).u64[0];
        v134 = vpadd_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v133.f32);
        v135 = vrecpe_f32(v131);
        v136 = 4;
        do
        {
          v135 = vmul_f32(v135, vrecps_f32(v131, v135));
          --v136;
        }
        while (v136);
        v36 = vmlaq_n_f32(v217, v88, vmax_f32(vmin_f32(vmul_f32(v134, v135), _D8), 0).f32[0]);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v93.f32[0] == 0.0)
    {
      v36 = 0uLL;
      goto LABEL_27;
    }
    *(int8x8_t *)&v90.u32[2] = v91;
    v94 = (float32x2_t)vextq_s8((int8x16_t)v218, (int8x16_t)v218, 8uLL).u64[0];
    v95 = (float32x2_t)vextq_s8((int8x16_t)v219[0], (int8x16_t)v219[0], 8uLL).u64[0];
    v96 = (float32x2_t)vextq_s8((int8x16_t)v219[0], (int8x16_t)v219[0], 4uLL).u64[0];
    v97 = (float32x2_t)vextq_s8((int8x16_t)v218, (int8x16_t)v218, 4uLL).u64[0];
    v98 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v218.f32, v96), v97, *(float32x2_t *)v219[0].f32);
    *(int8x8_t *)v99.f32 = vext_s8(v98, (int8x8_t)vmls_f32(vmul_f32(v94, *(float32x2_t *)v219[0].f32), *(float32x2_t *)v218.f32, v95), 4uLL);
    v99.i64[1] = v98.u32[0];
    v100 = (float32x2_t)vextq_s8((int8x16_t)v217, (int8x16_t)v217, 8uLL).u64[0];
    v101 = (float32x2_t)vextq_s8((int8x16_t)v217, (int8x16_t)v217, 4uLL).u64[0];
    v102 = (int8x8_t)vmls_f32(vmul_f32(v101, *(float32x2_t *)v219[0].f32), v96, *(float32x2_t *)v217.f32);
    *(int8x8_t *)v103.f32 = vext_s8(v102, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v217.f32, v95), *(float32x2_t *)v219[0].f32, v100), 4uLL);
    v103.i64[1] = v102.u32[0];
    v104 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v217.f32, v97), v101, *(float32x2_t *)v218.f32);
    *(int8x8_t *)v105.f32 = vext_s8(v104, (int8x8_t)vmls_f32(vmul_f32(v100, *(float32x2_t *)v218.f32), *(float32x2_t *)v217.f32, v94), 4uLL);
    v105.i64[1] = v104.u32[0];
    v106 = vmulq_f32(v99, v90);
    v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
    v107 = vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32);
    v108 = vmulq_f32(v103, v90);
    v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
    v109 = vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32);
    v110 = vmulq_f32(v105, v90);
    v110.i64[0] = vpaddq_f32(v110, v110).u64[0];
    v111 = vpadd_f32(*(float32x2_t *)v110.f32, *(float32x2_t *)v110.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v109), (int8x8_t)vcgez_f32(v107)), (int8x8_t)vcgez_f32(v111)), 0), *(int8x8_t *)v217.f32).u32[0] != -1)
    {
      v112 = vnegq_f32(v217);
      v112.i32[3] = 0;
      v113 = vnegq_f32(v218);
      v113.i32[3] = 0;
      v114 = vmulq_f32(v112, v88);
      v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
      v115 = vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32);
      v116 = vmulq_f32(v88, v113);
      v116.i64[0] = vpaddq_f32(v116, v116).u64[0];
      v117 = vpadd_f32(*(float32x2_t *)v116.f32, *(float32x2_t *)v116.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v115), (int8x8_t)vclez_f32(v117)), (int8x8_t)vclez_f32(v111)), 0), *(int8x8_t *)v217.f32).u32[0] == -1)
      {
        v142 = vsub_f32(v115, v117);
        v143 = vrecpe_f32(v142);
        v144 = 4;
        do
        {
          v143 = vmul_f32(v143, vrecps_f32(v142, v143));
          --v144;
        }
        while (v144);
        v129 = 0;
        v36 = vmlaq_n_f32(v217, v88, vmul_f32(v115, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v142), (float32x2_t)0x3400000034000000), (int8x8_t)v143, 0)).f32[0]);
        v36.i64[1] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u32[0];
        v145 = 2;
        v128 = 1;
      }
      else
      {
        v118 = vnegq_f32(v219[0]);
        v118.i32[3] = 0;
        v119 = vmulq_f32(v113, v89);
        v119.i64[0] = vpaddq_f32(v119, v119).u64[0];
        v120 = vpadd_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32);
        v121 = vmulq_f32(v88, v118);
        v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
        v122 = vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32);
        v123 = vmulq_f32(v89, v118);
        v123.i64[0] = vpaddq_f32(v123, v123).u64[0];
        v124 = vpadd_f32(*(float32x2_t *)v123.f32, *(float32x2_t *)v123.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v120, v117), (int8x8_t)vcge_f32(v122, v124)), (int8x8_t)vclez_f32(v107)), 0), *(int8x8_t *)v217.f32).u32[0] != -1)
        {
          v125 = vmulq_f32(v112, v89);
          v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
          v126 = vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v126), (int8x8_t)vclez_f32(v124)), (int8x8_t)vclez_f32(v109)), 0), *(int8x8_t *)v217.f32).u32[0] == -1)
          {
            v151 = vsub_f32(v126, v124);
            v152 = vrecpe_f32(v151);
            v153 = 4;
            v48 = (float32x4_t)v199;
            do
            {
              v152 = vmul_f32(v152, vrecps_f32(v151, v152));
              --v153;
            }
            while (v153);
            v129 = 0;
            v36 = vmlaq_n_f32(v217, v89, vmul_f32(v126, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v151), (float32x2_t)0x3400000034000000), (int8x8_t)v152, 0)).f32[0]);
            v36.i64[1] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u32[0];
            v128 = 2;
          }
          else
          {
            v48 = (float32x4_t)v199;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v126), (int8x8_t)vclez_f32(v115)), 0), *(int8x8_t *)v217.f32).u32[0] == -1)
            {
              v129 = 0;
              v128 = 1;
            }
            else
            {
              *(int16x4_t *)v36.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v117, v120), (int8x8_t)vcgez_f32(v117)), 0);
              *(int8x8_t *)v36.f32 = vuzp1_s8(*(int8x8_t *)v36.f32, *(int8x8_t *)v36.f32);
              v127 = v36.i32[0];
              v36 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v36, v189), 0), (int8x16_t)v218, (int8x16_t)v219[0]);
              v128 = 1;
              if (v127 == -1)
                v129 = 1;
              else
                v129 = 2;
            }
          }
          v145 = v128;
          goto LABEL_60;
        }
        v146 = vsub_f32(v120, v117);
        v147 = vadd_f32(v146, vsub_f32(v122, v124));
        v148 = vrecpe_f32(v147);
        v149 = 4;
        do
        {
          v148 = vmul_f32(v148, vrecps_f32(v147, v148));
          --v149;
        }
        while (v149);
        v150 = (int8x16_t)vmlaq_n_f32(v218, vsubq_f32(v219[0], v218), vmul_f32(v146, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v147), (float32x2_t)0x3400000034000000), (int8x8_t)v148, 0)).f32[0]);
        v150.i64[1] = vextq_s8(v150, v150, 8uLL).u32[0];
        v145 = 2;
        v128 = 2;
        v129 = 1;
        v36 = (float32x4_t)v150;
      }
      v48 = (float32x4_t)v199;
LABEL_60:
      v154 = *(&v217 + v128);
      v155 = *(&v213 + v129);
      v156 = *(&v213 + v128);
      v157 = *(&v209 + v129);
      v158 = *(&v209 + v128);
      v217 = *(&v217 + v129);
      v218 = v154;
      v213 = v155;
      v214 = v156;
      v209 = v157;
      v210 = v158;
      v207 = v145;
      goto LABEL_61;
    }
    v137 = (int8x16_t)vmulq_f32(v217, v90);
    v138 = (float32x2_t)vextq_s8(v137, v137, 8uLL).u64[0];
    v139 = vrecpe_f32(v93);
    v140 = 4;
    v48 = (float32x4_t)v199;
    do
    {
      v139 = vmul_f32(v139, vrecps_f32(v93, v139));
      --v140;
    }
    while (v140);
    v141 = vpadd_f32(*(float32x2_t *)v137.i8, v138);
    v36 = vmulq_n_f32(v90, vmul_f32(v139, vpadd_f32(v141, v141)).f32[0]);
    v36.i32[3] = 0;
LABEL_61:
    v50 = vnegq_f32(v36);
    v50.i32[3] = 0;
    v159 = vmulq_f32(v36, v36);
    v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
    v160 = vpadd_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32);
    v161 = (int8x8_t)vcgt_f32(v45, v160);
    v49 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v161, (int8x8_t)0x100000001), 0);
    v46 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v160, v47), v161), 0);
    v45 = v160;
  }
  v162 = (int8x16_t)v48;
  v163 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v45, v190), 0), v49), 0x1FuLL)), (int8x16_t)v50, v193);
  v164 = vmulq_f32(v163, v163);
  v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
  v165 = vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32);
  v166 = vrsqrte_f32(v165);
  v167 = 4;
  do
  {
    v166 = vmul_f32(v166, vrsqrts_f32(vmul_f32(v166, v166), v165));
    --v167;
  }
  while (v167);
  v168 = vmul_f32(v165, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v165), 0), (int8x8_t)_D8, (int8x8_t)v166));
  v169 = vrecpe_f32(v168);
  v170 = 4;
  do
  {
    v169 = vmul_f32(v169, vrecps_f32(v168, v169));
    --v170;
  }
  while (v170);
  v171 = (int8x16_t)vdupq_n_s32(-*(char *)(a1->i64[1] + 32));
  v172 = (int8x16_t)vmulq_n_f32(v163, v169.f32[0]);
  v172.i32[3] = 0;
  v173 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v168), 0), v172));
  v173.i32[3] = 0;
  *a9 = v173;
  *a8 = v51;
  v174 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v49, 0x1FuLL)), v52, v162);
  v205 = v174;
  if (v207 == 3)
  {
    v204.i64[0] = 0;
    v208 = 0;
    v200 = v173;
    v203 = v171;
    physx::Gu::barycentricCoordinates(&v205, &v217, &v218, v219, (float32x2_t *)&v204, &v208);
    v173 = v200;
    v171 = v203;
    v49.i32[1] = v213.i32[1];
    v177 = vmulq_n_f32(vsubq_f32(v214, v213), v204.f32[0]);
    v177.i32[3] = 0;
    v178 = vmulq_n_f32(vsubq_f32(v215, v213), v208.f32[0]);
    v178.i32[3] = 0;
    v175 = vaddq_f32(v213, vaddq_f32(v177, v178));
    v176 = a10;
  }
  else if (v207 == 2)
  {
    v179 = vsubq_f32(v217, v174);
    v180 = vsubq_f32(vsubq_f32(v218, v174), v179);
    v181 = vmulq_f32(v180, v180);
    v181.i64[0] = vpaddq_f32(v181, v181).u64[0];
    v182 = vpadd_f32(*(float32x2_t *)v181.f32, *(float32x2_t *)v181.f32);
    v183 = vrecpe_f32(v182);
    v184 = 4;
    v176 = a10;
    do
    {
      v183 = vmul_f32(v183, vrecps_f32(v182, v183));
      --v184;
    }
    while (v184);
    v185 = vnegq_f32(v179);
    v185.i32[3] = 0;
    v186 = vmulq_f32(v185, v180);
    v186.i64[0] = vpaddq_f32(v186, v186).u64[0];
    v175 = vmlaq_n_f32(v213, vsubq_f32(v214, v213), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v182), (int8x8_t)v183, 0), vpadd_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32)).f32[0]);
    v49.i32[1] = 0;
    v175.i64[1] = vextq_s8((int8x16_t)v175, (int8x16_t)v175, 8uLL).u32[0];
  }
  else
  {
    v175 = 0uLL;
    v176 = a10;
    if (v207 == 1)
      v175 = v213;
  }
  v49.i32[0] = *(_DWORD *)(a1->i64[1] + 16);
  v187 = (int8x16_t)vmlsq_lane_f32(v175, v173, *(float32x2_t *)v49.i8, 0);
  v187.i64[1] = vextq_s8(v187, v187, 8uLL).u32[0];
  *v176 = vbslq_s8(v171, v187, (int8x16_t)v175);
  return v54 != -1;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t *a4, int a5, _BYTE *a6, _BYTE *a7, _BYTE *a8, double a9, double a10, int8x8_t a11, float32x4_t a12, uint64_t a13)
{
  _BYTE *v13;
  _BYTE *v14;
  float32x4_t *v17;
  const float *v18;
  float32x2_t v19;
  float32x4_t *v20;
  const float *v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v37;
  float32x4_t *v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x2_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x2_t v69;
  int v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x2_t v73;
  float32x2_t v74;
  int v75;
  float32x2_t v76;
  float32x2_t v77;
  int v78;
  float32x4_t v79;
  float32x2_t v80;
  int32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x8_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  int8x8_t v92;
  float32x4_t v93;
  float32x2_t v94;
  float32x2_t v95;
  int8x8_t v96;
  float32x4_t v97;
  int8x8_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x2_t v101;
  float32x4_t v102;
  float32x2_t v103;
  float32x4_t v104;
  float32x2_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x4_t v110;
  float32x2_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x2_t v114;
  float32x4_t v115;
  float32x2_t v116;
  float32x4_t v117;
  float32x2_t v118;
  float32x4_t v119;
  int32x4_t v120;
  __int32 v121;
  uint64_t v122;
  uint64_t v123;
  float32x4_t v124;
  float32x2_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x2_t v128;
  float32x2_t v129;
  int v130;
  int8x16_t v131;
  float32x2_t v132;
  float32x2_t v133;
  int v134;
  float32x2_t v135;
  float32x2_t v136;
  float32x2_t v137;
  int v138;
  unsigned int v139;
  float32x2_t v140;
  float32x2_t v141;
  float32x2_t v142;
  int v143;
  int8x16_t v144;
  float32x2_t v145;
  float32x2_t v146;
  int v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  int v153;
  int v154;
  int v155;
  int v156;
  float32x4_t v157;
  float32x2_t v158;
  float32x2_t v159;
  int v160;
  float32x2_t v161;
  int v162;
  float32x4_t v163;
  float v164;
  int32x4_t v165;
  float32x2_t i;
  float32x4_t v167;
  int32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float v175;
  float32x2_t v176;
  uint64_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x2_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x2_t v183;
  float32x2_t v184;
  int v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  int8x8_t v189;
  float32x2_t v190;
  float32x2_t v191;
  float32x2_t v192;
  float32x2_t v193;
  float32x2_t v194;
  float32x2_t v195;
  int8x8_t v196;
  float32x4_t v197;
  float32x2_t v198;
  float32x2_t v199;
  int8x8_t v200;
  float32x4_t v201;
  int8x8_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x2_t v205;
  float32x4_t v206;
  float32x2_t v207;
  float32x4_t v208;
  float32x2_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x2_t v213;
  float32x4_t v214;
  float32x2_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x2_t v218;
  float32x4_t v219;
  float32x2_t v220;
  float32x4_t v221;
  float32x2_t v222;
  float32x4_t v223;
  float32x2_t v224;
  __int32 v225;
  uint64_t v226;
  uint64_t v227;
  float32x4_t v228;
  float32x2_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x2_t v232;
  float32x2_t v233;
  int v234;
  int8x16_t v235;
  float32x2_t v236;
  float32x2_t v237;
  int v238;
  float32x2_t v239;
  float32x2_t v240;
  float32x2_t v241;
  int v242;
  unsigned int v243;
  float32x2_t v244;
  float32x2_t v245;
  float32x2_t v246;
  int v247;
  int8x16_t v248;
  float32x2_t v249;
  float32x2_t v250;
  int v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  int v258;
  int v259;
  int v260;
  int v261;
  float32x4_t v262;
  float32x2_t v263;
  float32x2_t v264;
  int v265;
  float32x2_t v266;
  int v267;
  float32x4_t v268;
  int8x8_t v269;
  uint64_t v270;
  int *v271;
  int *v272;
  int v273;
  int v274;
  uint64_t result;
  uint64_t v276;
  int *v277;
  int *v278;
  int v279;
  int v280;
  float32x2_t v281;
  int *v282;
  int *v283;
  uint64_t v284;
  int v285;
  int v286;
  uint64_t v287;
  float32x4_t v288;
  float32x4_t v289;
  int v290;
  float32x2_t v291;
  uint64_t v292;
  int *v293;
  int *v294;
  int v295;
  int v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x2_t v307;
  float32x2_t v308;
  int v309;
  float32x4_t v310;
  float32x4_t v311;
  int8x16_t v312;
  int8x16_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x2_t v322;
  float32x2_t v323;
  int v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x2_t v327;
  int v328;
  float32x4_t v329;
  int8x16_t v330;
  int8x16_t v331;
  int32x4_t v332;
  float32x2_t v333;
  float v334;
  float32x2_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  int v341;
  float32x2_t v342;
  float32x4_t v343;
  float32x4_t v344;
  unsigned int v345;
  float32x4_t v346;
  float32x2_t v347;
  int v348;
  int v349;
  int v350;
  int v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360[2];
  uint64_t v361;

  v13 = a7;
  v14 = a6;
  v361 = *MEMORY[0x24BDAC8D0];
  v17 = (float32x4_t *)a1->i64[1];
  v18 = &v17[1].f32[1];
  v19 = vld1_dup_f32(v18);
  v20 = *(float32x4_t **)(a2 + 8);
  v21 = &v20[1].f32[1];
  v22 = vld1_dup_f32(v21);
  v23 = vmin_f32(v19, v22);
  v24 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  v25 = vmul_f32(v23, v24);
  v23.i32[0] = v17[1].i32[0];
  v24.i32[0] = v20[1].i32[0];
  a11.i32[0] = -v17[2].i8[0];
  v26 = (int32x2_t)vand_s8(a11, (int8x8_t)v23);
  v27 = (float32x2_t)vdup_lane_s32(v26, 0);
  v26.i32[0] = -v20[2].i8[0];
  v28 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v26, (int8x8_t)v24), 0);
  v333 = v27;
  v334 = v28.f32[0];
  v29 = vadd_f32(v27, v28);
  v30 = *a4;
  v346 = 0uLL;
  v345 = 0;
  v31 = *a8;
  __asm { FMOV            V9.2S, #1.0 }
  v337 = v29;
  if (!*a8)
  {
    v71 = vmulq_f32(*a3, *a3);
    v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
    v63 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32)), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_2260E5F10);
    v346 = v63;
    v72 = vmulq_f32(v63, v63);
    v72.i64[0] = vpaddq_f32(v72, v72).u64[0];
    v73 = vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32);
    v74 = vrsqrte_f32(v73);
    v75 = 4;
    do
    {
      v74 = vmul_f32(v74, vrsqrts_f32(vmul_f32(v74, v74), v73));
      --v75;
    }
    while (v75);
    v76 = vmul_f32(v73, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v73), 0), (int8x8_t)_D9, (int8x8_t)v74));
    v77 = vrecpe_f32(v76);
    v78 = 4;
    do
    {
      *(float32x2_t *)a12.f32 = vrecps_f32(v76, v77);
      v77 = vmul_f32(v77, *(float32x2_t *)a12.f32);
      --v78;
    }
    while (v78);
    v79 = vmulq_n_f32(v63, v77.f32[0]);
    v79.i32[3] = 0;
    v340 = v79;
    v80 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v81.i64[0] = -1;
    v81.i64[1] = -1;
    v82 = 0uLL;
    goto LABEL_54;
  }
  v37 = 0;
  v38 = (float32x4_t *)a1[1].i64[0];
  v39 = v17[10].i64[0];
  v40 = v17[3];
  v41 = v17[4];
  a12 = v17[5];
  v42 = v20[3];
  v43 = v20[4];
  v44 = v20[5];
  v45 = v20[10].i64[0];
  do
  {
    v46 = a6[v37];
    *(&v350 + v37) = v46;
    v47 = a7[v37];
    *(&v348 + v37) = v47;
    v48 = *(float32x4_t *)(v39 + 12 * v46);
    v49 = vmulq_n_f32(v40, v48.f32[0]);
    v49.i32[3] = 0;
    v50 = vmulq_lane_f32(v41, *(float32x2_t *)v48.f32, 1);
    v50.i32[3] = 0;
    v51 = vmulq_laneq_f32(a12, v48, 2);
    v51.i32[3] = 0;
    v52 = vaddq_f32(v51, vaddq_f32(v49, v50));
    v53 = vmulq_n_f32(*v38, v52.f32[0]);
    v53.i32[3] = 0;
    v54 = vmulq_lane_f32(v38[1], *(float32x2_t *)v52.f32, 1);
    v54.i32[3] = 0;
    v55 = vmulq_laneq_f32(v38[2], v52, 2);
    v55.i32[3] = 0;
    v56 = vaddq_f32(v55, vaddq_f32(v53, v54));
    v57 = *(float32x4_t *)(v45 + 12 * v47);
    v58 = vmulq_n_f32(v42, v57.f32[0]);
    v58.i32[3] = 0;
    v59 = vmulq_lane_f32(v43, *(float32x2_t *)v57.f32, 1);
    v59.i32[3] = 0;
    v60 = vmulq_laneq_f32(v44, v57, 2);
    v60.i32[3] = 0;
    v61 = vaddq_f32(v38[3], v56);
    v62 = vaddq_f32(v60, vaddq_f32(v58, v59));
    v63 = vsubq_f32(v61, v62);
    *(&v355 + v37) = v61;
    *(&v352 + v37) = v62;
    *(&v358 + v37++) = v63;
  }
  while (v31 != v37);
  v345 = v31;
  switch((_DWORD)v37)
  {
    case 4:
      v341 = v30;
      physx::Gu::closestPtPointTetrahedron(&v358, &v355, &v352, &v350, &v348, (int *)&v345);
      LODWORD(v30) = v341;
      v29.i32[0] = v337.i32[0];
      goto LABEL_49;
    case 3:
      v345 = 3;
      v63 = v358;
      a12 = vsubq_f32(v359, v358);
      v83 = vsubq_f32(v360[0], v358);
      v85 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 4uLL), *(float32x2_t *)v83.f32);
      *(int8x8_t *)v84.f32 = vext_s8(v85, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 8uLL), *(float32x2_t *)v83.f32), *(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL)), 4uLL);
      v85.i32[1] = 0;
      v86 = vpadd_f32(vmul_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32), vmul_f32((float32x2_t)v85.u32[0], (float32x2_t)v85.u32[0]));
      v87 = vpadd_f32(v86, v86);
      if (v87.f32[0] > 0.00000011921)
      {
        if (v87.f32[0] == 0.0)
        {
          v63 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v84.u32[2] = v85;
          v88 = (float32x2_t)vextq_s8((int8x16_t)v359, (int8x16_t)v359, 8uLL).u64[0];
          v89 = (float32x2_t)vextq_s8((int8x16_t)v360[0], (int8x16_t)v360[0], 8uLL).u64[0];
          v90 = (float32x2_t)vextq_s8((int8x16_t)v360[0], (int8x16_t)v360[0], 4uLL).u64[0];
          v91 = (float32x2_t)vextq_s8((int8x16_t)v359, (int8x16_t)v359, 4uLL).u64[0];
          v92 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v359.f32, v90), v91, *(float32x2_t *)v360[0].f32);
          *(int8x8_t *)v93.f32 = vext_s8(v92, (int8x8_t)vmls_f32(vmul_f32(v88, *(float32x2_t *)v360[0].f32), *(float32x2_t *)v359.f32, v89), 4uLL);
          v93.i64[1] = v92.u32[0];
          v94 = (float32x2_t)vextq_s8((int8x16_t)v358, (int8x16_t)v358, 8uLL).u64[0];
          v95 = (float32x2_t)vextq_s8((int8x16_t)v358, (int8x16_t)v358, 4uLL).u64[0];
          v96 = (int8x8_t)vmls_f32(vmul_f32(v95, *(float32x2_t *)v360[0].f32), v90, *(float32x2_t *)v358.f32);
          *(int8x8_t *)v97.f32 = vext_s8(v96, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v358.f32, v89), *(float32x2_t *)v360[0].f32, v94), 4uLL);
          v97.i64[1] = v96.u32[0];
          v98 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v358.f32, v91), v95, *(float32x2_t *)v359.f32);
          *(int8x8_t *)v99.f32 = vext_s8(v98, (int8x8_t)vmls_f32(vmul_f32(v94, *(float32x2_t *)v359.f32), *(float32x2_t *)v358.f32, v88), 4uLL);
          v99.i64[1] = v98.u32[0];
          v100 = vmulq_f32(v93, v84);
          v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
          v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
          v102 = vmulq_f32(v97, v84);
          v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
          v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
          v104 = vmulq_f32(v99, v84);
          v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
          v105 = vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v103), (int8x8_t)vcgez_f32(v101)), (int8x8_t)vcgez_f32(v105)), 0), *(int8x8_t *)v358.f32).u32[0] == -1)
          {
            v131 = (int8x16_t)vmulq_f32(v358, v84);
            v132 = (float32x2_t)vextq_s8(v131, v131, 8uLL).u64[0];
            v133 = vrecpe_f32(v87);
            v134 = 4;
            do
            {
              v133 = vmul_f32(v133, vrecps_f32(v87, v133));
              --v134;
            }
            while (v134);
            v135 = vpadd_f32(*(float32x2_t *)v131.i8, v132);
            v63 = vmulq_n_f32(v84, vmul_f32(v133, vpadd_f32(v135, v135)).f32[0]);
            v63.i32[3] = 0;
          }
          else
          {
            v106 = vnegq_f32(v358);
            v106.i32[3] = 0;
            v107 = vnegq_f32(v359);
            v107.i32[3] = 0;
            v108 = vmulq_f32(v106, a12);
            v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
            v109 = vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32);
            v110 = vmulq_f32(a12, v107);
            v110.i64[0] = vpaddq_f32(v110, v110).u64[0];
            v111 = vpadd_f32(*(float32x2_t *)v110.f32, *(float32x2_t *)v110.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v109), (int8x8_t)vclez_f32(v111)), (int8x8_t)vclez_f32(v105)), 0), *(int8x8_t *)v358.f32).u32[0] == -1)
            {
              v136 = vsub_f32(v109, v111);
              v137 = vrecpe_f32(v136);
              v138 = 4;
              do
              {
                v137 = vmul_f32(v137, vrecps_f32(v136, v137));
                --v138;
              }
              while (v138);
              v123 = 0;
              v63 = vmlaq_n_f32(v358, a12, vmul_f32(v109, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v136), (float32x2_t)0x3400000034000000), (int8x8_t)v137, 0)).f32[0]);
              v63.i64[1] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u32[0];
              v139 = 2;
              v122 = 1;
            }
            else
            {
              v112 = vnegq_f32(v360[0]);
              v112.i32[3] = 0;
              v113 = vmulq_f32(v107, v83);
              v113.i64[0] = vpaddq_f32(v113, v113).u64[0];
              v114 = vpadd_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32);
              v115 = vmulq_f32(a12, v112);
              v115.i64[0] = vpaddq_f32(v115, v115).u64[0];
              v116 = vpadd_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v115.f32);
              v117 = vmulq_f32(v83, v112);
              v117.i64[0] = vpaddq_f32(v117, v117).u64[0];
              v118 = vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v114, v111), (int8x8_t)vcge_f32(v116, v118)), (int8x8_t)vclez_f32(v101)), 0), *(int8x8_t *)v358.f32).u32[0] == -1)
              {
                v140 = vsub_f32(v114, v111);
                v141 = vadd_f32(v140, vsub_f32(v116, v118));
                v142 = vrecpe_f32(v141);
                v143 = 4;
                do
                {
                  v142 = vmul_f32(v142, vrecps_f32(v141, v142));
                  --v143;
                }
                while (v143);
                v144 = (int8x16_t)vmlaq_n_f32(v359, vsubq_f32(v360[0], v359), vmul_f32(v140, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v141), (float32x2_t)0x3400000034000000), (int8x8_t)v142, 0)).f32[0]);
                v144.i64[1] = vextq_s8(v144, v144, 8uLL).u32[0];
                v139 = 2;
                v123 = 1;
                v122 = 2;
                v63 = (float32x4_t)v144;
              }
              else
              {
                v119 = vmulq_f32(v106, v83);
                v120 = (int32x4_t)vpaddq_f32(v119, v119);
                *(float32x2_t *)v120.i8 = vpadd_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v120.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v120.i8), (int8x8_t)vclez_f32(v118)), (int8x8_t)vclez_f32(v103)), 0), *(int8x8_t *)v358.f32).u32[0] == -1)
                {
                  v145 = vsub_f32(*(float32x2_t *)v120.i8, v118);
                  v146 = vrecpe_f32(v145);
                  v147 = 4;
                  do
                  {
                    v146 = vmul_f32(v146, vrecps_f32(v145, v146));
                    --v147;
                  }
                  while (v147);
                  v123 = 0;
                  v63 = vmlaq_n_f32(v358, v83, vmul_f32(*(float32x2_t *)v120.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v145), (float32x2_t)0x3400000034000000), (int8x8_t)v146, 0)).f32[0]);
                  v63.i64[1] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u32[0];
                  v122 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v120.i8), (int8x8_t)vclez_f32(v109)), 0), *(int8x8_t *)v358.f32).u32[0] == -1)
                {
                  v123 = 0;
                  v122 = 1;
                }
                else
                {
                  *(int32x2_t *)v120.i8 = vcge_f32(v111, v114);
                  *(int16x4_t *)v63.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v120.i8, (int8x8_t)vcgez_f32(v111)), 0);
                  *(int8x8_t *)v63.f32 = vuzp1_s8(*(int8x8_t *)v63.f32, *(int8x8_t *)v63.f32);
                  v120.i32[0] = -1;
                  v121 = v63.i32[0];
                  v63 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v63, v120), 0), (int8x16_t)v359, (int8x16_t)v360[0]);
                  v122 = 1;
                  if (v121 == -1)
                    v123 = 1;
                  else
                    v123 = 2;
                }
                v139 = v122;
              }
            }
            v148 = *(&v358 + v123);
            v149 = *(&v358 + v122);
            a12 = *(&v355 + v123);
            v150 = *(&v355 + v122);
            v151 = *(&v352 + v123);
            v152 = *(&v352 + v122);
            v153 = *(&v350 + v123);
            v154 = *(&v350 + v122);
            v155 = *(&v348 + v123);
            v156 = *(&v348 + v122);
            v358 = v148;
            v359 = v149;
            v355 = a12;
            v356 = v150;
            v352 = v151;
            v353 = v152;
            v350 = v153;
            v351 = v154;
            v348 = v155;
            v349 = v156;
            v345 = v139;
          }
        }
        goto LABEL_49;
      }
      v345 = 2;
      v124 = vmulq_f32(a12, a12);
      v124.i64[0] = vpaddq_f32(v124, v124).u64[0];
      v125 = vpadd_f32(*(float32x2_t *)v124.f32, *(float32x2_t *)v124.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v125), 0), *(int8x8_t *)v358.f32).u32[0] != -1)
      {
        v126 = vnegq_f32(v358);
        v126.i32[3] = 0;
        v127 = vmulq_f32(v126, a12);
        v127.i64[0] = vpaddq_f32(v127, v127).u64[0];
        v128 = vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32);
        v129 = vrecpe_f32(v125);
        v130 = 4;
        do
        {
          v129 = vmul_f32(v129, vrecps_f32(v125, v129));
          --v130;
        }
        while (v130);
        v63 = vmlaq_n_f32(v358, a12, vmax_f32(vmin_f32(vmul_f32(v128, v129), _D9), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      v63 = v358;
      v64 = vsubq_f32(v359, v358);
      v65 = vmulq_f32(v64, v64);
      v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
      v66 = vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v66), 0), *(int8x8_t *)v358.f32).u32[0] != -1)
      {
        v67 = vnegq_f32(v358);
        v67.i32[3] = 0;
        v68 = vmulq_f32(v67, v64);
        a12 = vpaddq_f32(v68, v68);
        *(float32x2_t *)a12.f32 = vpadd_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
        v69 = vrecpe_f32(v66);
        v70 = 4;
        do
        {
          v69 = vmul_f32(v69, vrecps_f32(v66, v69));
          --v70;
        }
        while (v70);
        v63 = vmlaq_n_f32(v358, v64, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a12.f32, v69), _D9), 0).f32[0]);
LABEL_31:
        v63.i64[1] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  v345 = 1;
LABEL_49:
  v346 = v63;
  v157 = vmulq_f32(v63, v63);
  v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
  v158 = vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32);
  v159 = vrsqrte_f32(v158);
  v160 = 4;
  do
  {
    v159 = vmul_f32(v159, vrsqrts_f32(vmul_f32(v159, v159), v158));
    --v160;
  }
  while (v160);
  v80 = vmul_f32(v158, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v158), 0), (int8x8_t)_D9, (int8x8_t)v159));
  v161 = vrecpe_f32(v80);
  v162 = 4;
  do
  {
    *(float32x2_t *)a12.f32 = vrecps_f32(v80, v161);
    v161 = vmul_f32(v161, *(float32x2_t *)a12.f32);
    --v162;
  }
  while (v162);
  v163 = vmulq_n_f32(v63, v161.f32[0]);
  v163.i32[3] = 0;
  v340 = v163;
  v81 = vdupq_lane_s32(vcgt_f32(v80, v25), 0);
  v82 = v63;
LABEL_54:
  v164 = *(float *)&v30 + v29.f32[0];
  a12.i32[0] = -1;
  v332 = (int32x4_t)a12;
  v165.i64[0] = -1;
  v165.i64[1] = -1;
  for (i = v80; ; i = v176)
  {
    v167 = v63;
    v168.i64[0] = -1;
    v168.i64[1] = -1;
    *(int16x4_t *)v168.i8 = vmovn_s32(vceqq_s32(v81, v168));
    if (vuzp1_s8(*(int8x8_t *)v168.i8, *(int8x8_t *)v168.i8).u32[0] != -1)
      break;
    v338 = v167;
    v169 = vnegq_f32(v167);
    v169.i32[3] = 0;
    v342 = v80;
    v344 = v169;
    *(double *)v170.i64 = physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::support(a1, (float32x2_t *)&v344, &v350 + v345);
    v339 = v170;
    *(double *)v171.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v346, &v348 + v345);
    v172 = v340;
    v173 = v171;
    v63 = vsubq_f32(v339, v171);
    v174 = vmulq_f32(v340, v63);
    v174.i64[0] = vpaddq_f32(v174, v174).u64[0];
    v175 = vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32).f32[0];
    if (v175 > v164)
    {
      if (v14)
      {
        v276 = v345;
        *a8 = v345;
        if ((_DWORD)v276)
        {
          v277 = &v348;
          v278 = &v350;
          do
          {
            v279 = *v278++;
            *v14++ = v279;
            v280 = *v277++;
            *v13++ = v280;
            --v276;
          }
          while (v276);
        }
      }
      return 0;
    }
    v176 = v342;
    v177 = v345;
    if (v175 > (float)(0.99977 * v342.f32[0]))
    {
      v281 = v337;
      if (!v14)
        goto LABEL_121;
      *a8 = v345;
      if ((_DWORD)v177)
      {
        v282 = &v348;
        v283 = &v350;
        v284 = v177;
        do
        {
          v285 = *v283++;
          *v14++ = v285;
          v286 = *v282++;
          *v13++ = v286;
          --v284;
        }
        while (v284);
LABEL_121:
        v287 = a13;
        *(float32x4_t *)(a13 + 32) = v340;
        if ((_DWORD)v177 != 3)
        {
          if ((_DWORD)v177 != 2)
          {
            v288 = 0uLL;
            v289 = 0uLL;
            v290 = a5;
            if ((_DWORD)v177 == 1)
            {
              v288 = v355;
              v289 = v352;
              if (!a5)
                goto LABEL_142;
LABEL_138:
              *(float32x4_t *)v287 = v288;
              *(float32x4_t *)(v287 + 16) = v289;
              result = 2;
              *(float32x2_t *)(v287 + 64) = v176;
              return result;
            }
LABEL_137:
            if (!v290)
              goto LABEL_142;
            goto LABEL_138;
          }
          v304 = vsubq_f32(v358, v346);
          v305 = vsubq_f32(vsubq_f32(v359, v346), v304);
          v306 = vmulq_f32(v305, v305);
          v306.i64[0] = vpaddq_f32(v306, v306).u64[0];
          v307 = vpadd_f32(*(float32x2_t *)v306.f32, *(float32x2_t *)v306.f32);
          v308 = vrecpe_f32(v307);
          v309 = 4;
          do
          {
            v308 = vmul_f32(v308, vrecps_f32(v307, v308));
            --v309;
          }
          while (v309);
          v310 = vnegq_f32(v304);
          v310.i32[3] = 0;
          v311 = vmulq_f32(v310, v305);
          v311.i64[0] = vpaddq_f32(v311, v311).u64[0];
          v310.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v307), (int8x8_t)v308, 0), vpadd_f32(*(float32x2_t *)v311.f32, *(float32x2_t *)v311.f32)).u32[0];
          v288 = vmlaq_n_f32(v355, vsubq_f32(v356, v355), v310.f32[0]);
          v288.i64[1] = vextq_s8((int8x16_t)v288, (int8x16_t)v288, 8uLL).u32[0];
          v289 = vmlaq_n_f32(v352, vsubq_f32(v353, v352), v310.f32[0]);
          v289.i64[1] = vextq_s8((int8x16_t)v289, (int8x16_t)v289, 8uLL).u32[0];
          if (a5)
            goto LABEL_138;
LABEL_142:
          v312 = (int8x16_t)vmlsq_lane_f32(v288, v172, v333, 0);
          v312.i64[1] = vextq_s8(v312, v312, 8uLL).u32[0];
          v313 = (int8x16_t)vmlaq_n_f32(v289, v172, v334);
          v313.i64[1] = vextq_s8(v313, v313, 8uLL).u32[0];
          *(int8x16_t *)v287 = v312;
          *(int8x16_t *)(v287 + 16) = v313;
          *(float32x2_t *)(v287 + 64) = vsub_f32(v176, v281);
          return 2;
        }
        v344.i64[0] = 0;
        v347 = 0;
        physx::Gu::barycentricCoordinates(&v346, &v358, &v359, v360, (float32x2_t *)&v344, &v347);
        v172 = v340;
        v176 = v342;
        v281 = v337;
        v299 = vmulq_n_f32(vsubq_f32(v356, v355), v344.f32[0]);
        v299.i32[3] = 0;
        v300 = vmulq_n_f32(vsubq_f32(v357, v355), v347.f32[0]);
        v300.i32[3] = 0;
        v301 = vaddq_f32(v299, v300);
        v302 = vmulq_n_f32(vsubq_f32(v353, v352), v344.f32[0]);
        v302.i32[3] = 0;
        v288 = vaddq_f32(v355, v301);
        v303 = vmulq_n_f32(vsubq_f32(v354, v352), v347.f32[0]);
        v303.i32[3] = 0;
        v289 = vaddq_f32(v352, vaddq_f32(v302, v303));
      }
      else
      {
        v287 = a13;
        *(float32x4_t *)(a13 + 32) = v340;
        v288 = 0uLL;
        v289 = 0uLL;
      }
      v290 = a5;
      goto LABEL_137;
    }
    *(&v355 + v345) = v339;
    *(&v352 + v177) = v173;
    v345 = v177 + 1;
    *(&v358 + v177) = v63;
    if ((_DWORD)v177 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v358, &v355, &v352, &v350, &v348, (int *)&v345);
      v176 = v342;
LABEL_66:
      v82 = v338;
      goto LABEL_101;
    }
    if ((_DWORD)v177 == 2)
    {
      v63 = v358;
      v186 = vsubq_f32(v359, v358);
      v187 = vsubq_f32(v360[0], v358);
      v189 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v186.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v187, (int8x16_t)v187, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v186, (int8x16_t)v186, 4uLL), *(float32x2_t *)v187.f32);
      *(int8x8_t *)v188.f32 = vext_s8(v189, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL), *(float32x2_t *)v187.f32), *(float32x2_t *)v186.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v187, (int8x16_t)v187, 8uLL)), 4uLL);
      v189.i32[1] = 0;
      v345 = 3;
      v190 = vpadd_f32(vmul_f32(*(float32x2_t *)v188.f32, *(float32x2_t *)v188.f32), vmul_f32((float32x2_t)v189.u32[0], (float32x2_t)v189.u32[0]));
      v191 = vpadd_f32(v190, v190);
      if (v191.f32[0] <= 0.00000011921)
      {
        v345 = 2;
        v228 = vmulq_f32(v186, v186);
        v228.i64[0] = vpaddq_f32(v228, v228).u64[0];
        v229 = vpadd_f32(*(float32x2_t *)v228.f32, *(float32x2_t *)v228.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v229), 0), *(int8x8_t *)v358.f32).u32[0] != -1)
        {
          v230 = vnegq_f32(v358);
          v230.i32[3] = 0;
          v231 = vmulq_f32(v230, v186);
          v231.i64[0] = vpaddq_f32(v231, v231).u64[0];
          v232 = vpadd_f32(*(float32x2_t *)v231.f32, *(float32x2_t *)v231.f32);
          v233 = vrecpe_f32(v229);
          v234 = 4;
          v82 = v338;
          do
          {
            v233 = vmul_f32(v233, vrecps_f32(v229, v233));
            --v234;
          }
          while (v234);
          v63 = vmlaq_n_f32(v358, v186, vmax_f32(vmin_f32(vmul_f32(v232, v233), _D9), 0).f32[0]);
LABEL_81:
          v63.i64[1] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u32[0];
          goto LABEL_101;
        }
        v345 = 1;
        goto LABEL_66;
      }
      if (v191.f32[0] == 0.0)
      {
        v63 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v188.u32[2] = v189;
      v192 = (float32x2_t)vextq_s8((int8x16_t)v359, (int8x16_t)v359, 8uLL).u64[0];
      v193 = (float32x2_t)vextq_s8((int8x16_t)v360[0], (int8x16_t)v360[0], 8uLL).u64[0];
      v194 = (float32x2_t)vextq_s8((int8x16_t)v360[0], (int8x16_t)v360[0], 4uLL).u64[0];
      v195 = (float32x2_t)vextq_s8((int8x16_t)v359, (int8x16_t)v359, 4uLL).u64[0];
      v196 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v359.f32, v194), v195, *(float32x2_t *)v360[0].f32);
      *(int8x8_t *)v197.f32 = vext_s8(v196, (int8x8_t)vmls_f32(vmul_f32(v192, *(float32x2_t *)v360[0].f32), *(float32x2_t *)v359.f32, v193), 4uLL);
      v197.i64[1] = v196.u32[0];
      v198 = (float32x2_t)vextq_s8((int8x16_t)v358, (int8x16_t)v358, 8uLL).u64[0];
      v199 = (float32x2_t)vextq_s8((int8x16_t)v358, (int8x16_t)v358, 4uLL).u64[0];
      v200 = (int8x8_t)vmls_f32(vmul_f32(v199, *(float32x2_t *)v360[0].f32), v194, *(float32x2_t *)v358.f32);
      *(int8x8_t *)v201.f32 = vext_s8(v200, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v358.f32, v193), *(float32x2_t *)v360[0].f32, v198), 4uLL);
      v201.i64[1] = v200.u32[0];
      v202 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v358.f32, v195), v199, *(float32x2_t *)v359.f32);
      *(int8x8_t *)v203.f32 = vext_s8(v202, (int8x8_t)vmls_f32(vmul_f32(v198, *(float32x2_t *)v359.f32), *(float32x2_t *)v358.f32, v192), 4uLL);
      v203.i64[1] = v202.u32[0];
      v204 = vmulq_f32(v197, v188);
      v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
      v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
      v206 = vmulq_f32(v201, v188);
      v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
      v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
      v208 = vmulq_f32(v203, v188);
      v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
      v209 = vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v207), (int8x8_t)vcgez_f32(v205)), (int8x8_t)vcgez_f32(v209)), 0), *(int8x8_t *)v358.f32).u32[0] != -1)
      {
        v210 = vnegq_f32(v358);
        v210.i32[3] = 0;
        v211 = vnegq_f32(v359);
        v211.i32[3] = 0;
        v212 = vmulq_f32(v210, v186);
        v212.i64[0] = vpaddq_f32(v212, v212).u64[0];
        v213 = vpadd_f32(*(float32x2_t *)v212.f32, *(float32x2_t *)v212.f32);
        v214 = vmulq_f32(v186, v211);
        v214.i64[0] = vpaddq_f32(v214, v214).u64[0];
        v215 = vpadd_f32(*(float32x2_t *)v214.f32, *(float32x2_t *)v214.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v213), (int8x8_t)vclez_f32(v215)), (int8x8_t)vclez_f32(v209)), 0), *(int8x8_t *)v358.f32).u32[0] == -1)
        {
          v240 = vsub_f32(v213, v215);
          v241 = vrecpe_f32(v240);
          v242 = 4;
          do
          {
            v241 = vmul_f32(v241, vrecps_f32(v240, v241));
            --v242;
          }
          while (v242);
          v227 = 0;
          v63 = vmlaq_n_f32(v358, v186, vmul_f32(v213, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v240), (float32x2_t)0x3400000034000000), (int8x8_t)v241, 0)).f32[0]);
          v63.i64[1] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u32[0];
          v243 = 2;
          v226 = 1;
        }
        else
        {
          v216 = vnegq_f32(v360[0]);
          v216.i32[3] = 0;
          v217 = vmulq_f32(v211, v187);
          v217.i64[0] = vpaddq_f32(v217, v217).u64[0];
          v218 = vpadd_f32(*(float32x2_t *)v217.f32, *(float32x2_t *)v217.f32);
          v219 = vmulq_f32(v186, v216);
          v219.i64[0] = vpaddq_f32(v219, v219).u64[0];
          v220 = vpadd_f32(*(float32x2_t *)v219.f32, *(float32x2_t *)v219.f32);
          v221 = vmulq_f32(v187, v216);
          v221.i64[0] = vpaddq_f32(v221, v221).u64[0];
          v222 = vpadd_f32(*(float32x2_t *)v221.f32, *(float32x2_t *)v221.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v218, v215), (int8x8_t)vcge_f32(v220, v222)), (int8x8_t)vclez_f32(v205)), 0), *(int8x8_t *)v358.f32).u32[0] != -1)
          {
            v223 = vmulq_f32(v210, v187);
            v223.i64[0] = vpaddq_f32(v223, v223).u64[0];
            v224 = vpadd_f32(*(float32x2_t *)v223.f32, *(float32x2_t *)v223.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v224), (int8x8_t)vclez_f32(v222)), (int8x8_t)vclez_f32(v207)), 0), *(int8x8_t *)v358.f32).u32[0] == -1)
            {
              v249 = vsub_f32(v224, v222);
              v250 = vrecpe_f32(v249);
              v251 = 4;
              v82 = v338;
              do
              {
                v250 = vmul_f32(v250, vrecps_f32(v249, v250));
                --v251;
              }
              while (v251);
              v227 = 0;
              v63 = vmlaq_n_f32(v358, v187, vmul_f32(v224, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v249), (float32x2_t)0x3400000034000000), (int8x8_t)v250, 0)).f32[0]);
              v63.i64[1] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u32[0];
              v226 = 2;
              v243 = 2;
            }
            else
            {
              v82 = v338;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v224), (int8x8_t)vclez_f32(v213)), 0), *(int8x8_t *)v358.f32).u32[0] == -1)
              {
                v227 = 0;
                v226 = 1;
              }
              else
              {
                *(int16x4_t *)v63.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v215, v218), (int8x8_t)vcgez_f32(v215)), 0);
                *(int8x8_t *)v63.f32 = vuzp1_s8(*(int8x8_t *)v63.f32, *(int8x8_t *)v63.f32);
                v225 = v63.i32[0];
                v63 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v63, v332), 0), (int8x16_t)v359, (int8x16_t)v360[0]);
                v226 = 1;
                if (v225 == -1)
                  v227 = 1;
                else
                  v227 = 2;
              }
              v243 = 1;
            }
            goto LABEL_100;
          }
          v244 = vsub_f32(v218, v215);
          v245 = vadd_f32(v244, vsub_f32(v220, v222));
          v246 = vrecpe_f32(v245);
          v247 = 4;
          do
          {
            v246 = vmul_f32(v246, vrecps_f32(v245, v246));
            --v247;
          }
          while (v247);
          v248 = (int8x16_t)vmlaq_n_f32(v359, vsubq_f32(v360[0], v359), vmul_f32(v244, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v245), (float32x2_t)0x3400000034000000), (int8x8_t)v246, 0)).f32[0]);
          v248.i64[1] = vextq_s8(v248, v248, 8uLL).u32[0];
          v226 = 2;
          v63 = (float32x4_t)v248;
          v227 = 1;
          v243 = 2;
        }
        v82 = v338;
LABEL_100:
        v252 = *(&v358 + v227);
        v253 = *(&v358 + v226);
        v254 = *(&v355 + v227);
        v255 = *(&v355 + v226);
        v256 = *(&v352 + v227);
        v257 = *(&v352 + v226);
        v258 = *(&v350 + v227);
        v259 = *(&v350 + v226);
        v260 = *(&v348 + v227);
        v261 = *(&v348 + v226);
        v358 = v252;
        v359 = v253;
        v355 = v254;
        v356 = v255;
        v352 = v256;
        v353 = v257;
        v350 = v258;
        v351 = v259;
        v348 = v260;
        v349 = v261;
        v345 = v243;
        goto LABEL_101;
      }
      v235 = (int8x16_t)vmulq_f32(v358, v188);
      v236 = (float32x2_t)vextq_s8(v235, v235, 8uLL).u64[0];
      v237 = vrecpe_f32(v191);
      v238 = 4;
      v82 = v338;
      do
      {
        v237 = vmul_f32(v237, vrecps_f32(v191, v237));
        --v238;
      }
      while (v238);
      v239 = vpadd_f32(*(float32x2_t *)v235.i8, v236);
      v63 = vmulq_n_f32(v188, vmul_f32(v237, vpadd_f32(v239, v239)).f32[0]);
      v63.i32[3] = 0;
    }
    else
    {
      v82 = v338;
      if ((_DWORD)v177 == 1)
      {
        v63 = v358;
        v178 = vsubq_f32(v359, v358);
        v179 = vmulq_f32(v178, v178);
        v179.i64[0] = vpaddq_f32(v179, v179).u64[0];
        v180 = vpadd_f32(*(float32x2_t *)v179.f32, *(float32x2_t *)v179.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v180), 0), *(int8x8_t *)v358.f32).u32[0] == -1)
        {
          v345 = 1;
          goto LABEL_101;
        }
        v181 = vnegq_f32(v358);
        v181.i32[3] = 0;
        v182 = vmulq_f32(v181, v178);
        v182.i64[0] = vpaddq_f32(v182, v182).u64[0];
        v183 = vpadd_f32(*(float32x2_t *)v182.f32, *(float32x2_t *)v182.f32);
        v184 = vrecpe_f32(v180);
        v185 = 4;
        do
        {
          v184 = vmul_f32(v184, vrecps_f32(v180, v184));
          --v185;
        }
        while (v185);
        v63 = vmlaq_n_f32(v358, v178, vmax_f32(vmin_f32(vmul_f32(v183, v184), _D9), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    v346 = v63;
    v262 = vmulq_f32(v63, v63);
    v262.i64[0] = vpaddq_f32(v262, v262).u64[0];
    v263 = vpadd_f32(*(float32x2_t *)v262.f32, *(float32x2_t *)v262.f32);
    v264 = vrsqrte_f32(v263);
    v265 = 4;
    do
    {
      v264 = vmul_f32(v264, vrsqrts_f32(vmul_f32(v264, v264), v263));
      --v265;
    }
    while (v265);
    v80 = vmul_f32(v263, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v263), 0), (int8x8_t)_D9, (int8x8_t)v264));
    v266 = vrecpe_f32(v80);
    v267 = 4;
    do
    {
      v266 = vmul_f32(v266, vrecps_f32(v80, v266));
      --v267;
    }
    while (v267);
    v268 = vmulq_n_f32(v63, v266.f32[0]);
    v268.i32[3] = 0;
    v340 = v268;
    *(int32x2_t *)v268.f32 = vcgt_f32(v176, v80);
    v165 = vdupq_lane_s32(*(int32x2_t *)v268.f32, 0);
    v81 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v80, v25), *(int8x8_t *)v268.f32), 0);
  }
  v269 = (int8x8_t)vmovn_s32(vceqzq_s32(v165));
  v270 = v345;
  if (vuzp1_s8(v269, v269).u32[0] != -1)
  {
    if (v14)
    {
      *a8 = v345;
      if ((_DWORD)v270)
      {
        v271 = &v348;
        v272 = &v350;
        do
        {
          v273 = *v272++;
          *v14++ = v273;
          v274 = *v271++;
          *v13++ = v274;
          --v270;
        }
        while (v270);
      }
    }
    return 5;
  }
  v291 = v337;
  if (v14)
  {
    v292 = v345 - 1;
    *a8 = v345 - 1;
    if ((_DWORD)v270 != 1)
    {
      v293 = &v348;
      v294 = &v350;
      do
      {
        v295 = *v294++;
        *v14++ = v295;
        v296 = *v293++;
        *v13++ = v296;
        --v292;
      }
      while (v292);
      goto LABEL_130;
    }
LABEL_133:
    v297 = v355;
    v298 = v352;
  }
  else
  {
LABEL_130:
    v346 = v82;
    if ((_DWORD)v270 == 3)
    {
      v344.i64[0] = 0;
      v347 = 0;
      v343 = v82;
      physx::Gu::barycentricCoordinates(&v346, &v358, &v359, v360, (float32x2_t *)&v344, &v347);
      v291 = v337;
      v314 = vmulq_n_f32(vsubq_f32(v356, v355), v344.f32[0]);
      v314.i32[3] = 0;
      v315 = vmulq_n_f32(vsubq_f32(v357, v355), v347.f32[0]);
      v315.i32[3] = 0;
      v316 = vaddq_f32(v314, v315);
      v317 = vmulq_n_f32(vsubq_f32(v353, v352), v344.f32[0]);
      v317.i32[3] = 0;
      v297 = vaddq_f32(v355, v316);
      v318 = vmulq_n_f32(vsubq_f32(v354, v352), v347.f32[0]);
      v82 = v343;
      v318.i32[3] = 0;
      v298 = vaddq_f32(v352, vaddq_f32(v317, v318));
    }
    else if ((_DWORD)v270 == 2)
    {
      v319 = vsubq_f32(v358, v82);
      v320 = vsubq_f32(vsubq_f32(v359, v82), v319);
      v321 = vmulq_f32(v320, v320);
      v321.i64[0] = vpaddq_f32(v321, v321).u64[0];
      v322 = vpadd_f32(*(float32x2_t *)v321.f32, *(float32x2_t *)v321.f32);
      v323 = vrecpe_f32(v322);
      v324 = 4;
      do
      {
        v323 = vmul_f32(v323, vrecps_f32(v322, v323));
        --v324;
      }
      while (v324);
      v325 = vnegq_f32(v319);
      v325.i32[3] = 0;
      v326 = vmulq_f32(v325, v320);
      v326.i64[0] = vpaddq_f32(v326, v326).u64[0];
      v325.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v322), (int8x8_t)v323, 0), vpadd_f32(*(float32x2_t *)v326.f32, *(float32x2_t *)v326.f32)).u32[0];
      v297 = vmlaq_n_f32(v355, vsubq_f32(v356, v355), v325.f32[0]);
      v297.i64[1] = vextq_s8((int8x16_t)v297, (int8x16_t)v297, 8uLL).u32[0];
      v298 = vmlaq_n_f32(v352, vsubq_f32(v353, v352), v325.f32[0]);
      v298.i64[1] = vextq_s8((int8x16_t)v298, (int8x16_t)v298, 8uLL).u32[0];
    }
    else
    {
      v297 = 0uLL;
      v298 = 0uLL;
      if ((_DWORD)v270 == 1)
        goto LABEL_133;
    }
  }
  v327 = vrecpe_f32(i);
  v328 = 4;
  do
  {
    v327 = vmul_f32(v327, vrecps_f32(i, v327));
    --v328;
  }
  while (v328);
  v329 = vmulq_n_f32(v82, v327.f32[0]);
  v329.i32[3] = 0;
  *(float32x4_t *)(a13 + 32) = v329;
  *(float32x4_t *)(a13 + 48) = v340;
  if (a5)
  {
    *(float32x4_t *)a13 = v297;
    *(float32x4_t *)(a13 + 16) = v298;
    *(float32x2_t *)(a13 + 64) = i;
  }
  else
  {
    v330 = (int8x16_t)vmlsq_lane_f32(v297, v329, v333, 0);
    v330.i64[1] = vextq_s8(v330, v330, 8uLL).u32[0];
    v331 = (int8x16_t)vmlaq_n_f32(v298, v329, v334);
    v331.i64[1] = vextq_s8(v331, v331, 8uLL).u32[0];
    *(int8x16_t *)a13 = v330;
    *(int8x16_t *)(a13 + 16) = v331;
    *(float32x2_t *)(a13 + 64) = vsub_f32(i, v291);
    if ((vcge_f32(v291, i).u32[0] & 1) != 0)
      return 2;
  }
  return 4;
}

double physx::Gu::LocalConvex<physx::Gu::BoxV>::supportPoint(uint64_t a1, int a2)
{
  float32x4_t v2;
  int8x16_t v3;
  double result;

  v2 = *(float32x4_t *)(*(_QWORD *)(a1 + 8) + 48);
  v3 = (int8x16_t)vnegq_f32(v2);
  v3.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8(physx::boxVertexTable[a2], (int8x16_t)v2, v3).u64[0];
  return result;
}

double physx::Gu::LocalConvex<physx::Gu::BoxV>::support(uint64_t a1, float32x4_t *a2)
{
  float32x4_t v2;
  int8x16_t v3;
  double result;

  v2 = *(float32x4_t *)(*(_QWORD *)(a1 + 8) + 48);
  v3 = (int8x16_t)vnegq_f32(v2);
  v3.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcgtzq_f32(*a2), (int8x16_t)v2, v3).u64[0];
  return result;
}

double physx::Gu::LocalConvex<physx::Gu::BoxV>::support(uint64_t a1, float32x4_t *a2, unsigned __int32 *a3)
{
  float32x4_t *v3;
  int8x16_t v4;
  int32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  double result;

  v3 = *(float32x4_t **)(a1 + 8);
  v4 = (int8x16_t)vcgtzq_f32(*a2);
  v5 = (int32x4_t)vandq_s8(v4, (int8x16_t)xmmword_22611E0A0);
  v5.i64[0] = vpaddq_s32(v5, v5).u64[0];
  *a3 = vpadd_s32(*(int32x2_t *)v5.i8, *(int32x2_t *)v5.i8).u32[0] & 7;
  v6 = v3[3];
  v7 = (int8x16_t)vnegq_f32(v6);
  v7.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8(v4, (int8x16_t)v6, v7).u64[0];
  return result;
}

float32x2_t physx::Gu::LocalConvex<physx::Gu::BoxV>::getSweepMargin(uint64_t a1)
{
  const float *v1;

  v1 = (const float *)(*(_QWORD *)(a1 + 8) + 24);
  return vld1_dup_f32(v1);
}

__n128 physx::Gu::LocalConvex<physx::Gu::BoxV>::getCenter(uint64_t a1)
{
  return *(__n128 *)*(_QWORD *)(a1 + 8);
}

void physx::Gu::LocalConvex<physx::Gu::BoxV>::~LocalConvex()
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t *a4, int a5, _BYTE *a6, _BYTE *a7, _BYTE *a8, double a9, double a10, int8x8_t a11, float32x4_t a12, uint64_t a13)
{
  __int128 v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v18;
  const float *v19;
  float32x2_t v20;
  float32x4_t *v21;
  const float *v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  int32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  int8x16_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x2_t v50;
  int v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x2_t v54;
  float32x2_t v55;
  int v56;
  float32x2_t v57;
  float32x2_t v58;
  int v59;
  float32x4_t v60;
  float32x2_t v61;
  int32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x8_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  int8x8_t v73;
  float32x4_t v74;
  float32x2_t v75;
  float32x2_t v76;
  int8x8_t v77;
  float32x4_t v78;
  int8x8_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x2_t v82;
  float32x4_t v83;
  float32x2_t v84;
  float32x4_t v85;
  float32x2_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x4_t v91;
  float32x2_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x2_t v97;
  float32x4_t v98;
  float32x2_t v99;
  float32x4_t v100;
  int32x4_t v101;
  __int32 v102;
  uint64_t v103;
  uint64_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x2_t v110;
  int v111;
  int8x16_t v112;
  float32x2_t v113;
  float32x2_t v114;
  int v115;
  float32x2_t v116;
  float32x2_t v117;
  float32x2_t v118;
  int v119;
  unsigned int v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  int v124;
  int8x16_t v125;
  float32x2_t v126;
  float32x2_t v127;
  int v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  int v134;
  int v135;
  int v136;
  int v137;
  float32x4_t v138;
  float32x2_t v139;
  float32x2_t v140;
  int v141;
  float32x2_t v142;
  int v143;
  float v144;
  int32x4_t v145;
  int8x16_t v146;
  float32x2_t v147;
  int32x4_t v148;
  float32x4_t v149;
  int8x8_t v150;
  float32x4_t v151;
  uint64_t v152;
  float32x4_t *v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t *v157;
  int8x16_t v158;
  int32x4_t v159;
  float32x4_t v160;
  int8x16_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x2_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x2_t v170;
  float32x2_t v171;
  int v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  int8x8_t v176;
  float32x2_t v177;
  float32x2_t v178;
  float32x2_t v179;
  float32x2_t v180;
  float32x2_t v181;
  float32x2_t v182;
  int8x8_t v183;
  float32x4_t v184;
  float32x2_t v185;
  float32x2_t v186;
  int8x8_t v187;
  float32x4_t v188;
  int8x8_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x2_t v192;
  float32x4_t v193;
  float32x2_t v194;
  float32x4_t v195;
  float32x2_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x2_t v200;
  float32x4_t v201;
  float32x2_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x2_t v205;
  float32x4_t v206;
  float32x2_t v207;
  float32x4_t v208;
  float32x2_t v209;
  float32x4_t v210;
  float32x2_t v211;
  __int32 v212;
  uint64_t v213;
  uint64_t v214;
  float32x4_t v215;
  float32x2_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x2_t v219;
  float32x2_t v220;
  int v221;
  int8x16_t v222;
  float32x2_t v223;
  float32x2_t v224;
  int v225;
  float32x2_t v226;
  float32x2_t v227;
  float32x2_t v228;
  int v229;
  unsigned int v230;
  float32x2_t v231;
  float32x2_t v232;
  float32x2_t v233;
  int v234;
  int8x16_t v235;
  float32x2_t v236;
  float32x2_t v237;
  int v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  int v245;
  int v246;
  int v247;
  int v248;
  float32x4_t v249;
  float32x2_t v250;
  float32x2_t v251;
  int v252;
  float32x2_t v253;
  int v254;
  int32x2_t v255;
  int8x8_t v256;
  uint64_t v257;
  int *v258;
  int *v259;
  int v260;
  int v261;
  uint64_t result;
  int *v263;
  int *v264;
  int v265;
  int v266;
  float32x2_t v267;
  int *v268;
  int *v269;
  uint64_t v270;
  int v271;
  int v272;
  float32x4_t *v273;
  float32x4_t v274;
  float32x4_t v275;
  int v276;
  float32x2_t v277;
  uint64_t v278;
  int *v279;
  int *v280;
  int v281;
  int v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x2_t v293;
  float32x2_t v294;
  int v295;
  float32x4_t v296;
  float32x4_t v297;
  int8x16_t v298;
  int8x16_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x2_t v308;
  float32x2_t v309;
  int v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x2_t v313;
  int v314;
  float32x4_t v315;
  int8x16_t v316;
  int8x16_t v317;
  int32x4_t v318;
  float32x2_t v319;
  float v320;
  __int128 v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  int v327;
  __int128 v328;
  uint64_t v329;
  float32x4_t v330;
  unsigned int v331;
  float32x4_t v332;
  float32x2_t v333;
  float32x2_t v334;
  int v335;
  int v336;
  int v337;
  int v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  int8x16_t v347[2];
  uint64_t v348;

  v14 = a7;
  v15 = a6;
  v348 = *MEMORY[0x24BDAC8D0];
  v18 = *(_QWORD *)(a1 + 8);
  v19 = (const float *)(v18 + 20);
  v20 = vld1_dup_f32(v19);
  v21 = *(float32x4_t **)(a2 + 8);
  v22 = &v21[1].f32[1];
  v23 = vld1_dup_f32(v22);
  v24 = vmin_f32(v20, v23);
  v25 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  v26 = vmul_f32(v24, v25);
  v24.i32[0] = *(_DWORD *)(v18 + 16);
  v25.i32[0] = v21[1].i32[0];
  a11.i32[0] = -*(char *)(v18 + 32);
  v27 = (int32x2_t)vand_s8(a11, (int8x8_t)v24);
  v28 = (float32x2_t)vdup_lane_s32(v27, 0);
  v27.i32[0] = -v21[2].i8[0];
  v29 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v27, (int8x8_t)v25), 0);
  v319 = v28;
  v320 = v29.f32[0];
  *(float32x2_t *)&v13 = vadd_f32(v28, v29);
  v30 = *a4;
  v332 = 0uLL;
  v331 = 0;
  v31 = *a8;
  __asm { FMOV            V9.2S, #1.0 }
  v323 = v13;
  if (!*a8)
  {
    v52 = vmulq_f32(*a3, *a3);
    v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
    v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32)), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_2260E5F10);
    v332 = v44;
    v53 = vmulq_f32(v44, v44);
    v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
    v54 = vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32);
    v55 = vrsqrte_f32(v54);
    v56 = 4;
    do
    {
      v55 = vmul_f32(v55, vrsqrts_f32(vmul_f32(v55, v55), v54));
      --v56;
    }
    while (v56);
    v57 = vmul_f32(v54, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v54), 0), (int8x8_t)_D9, (int8x8_t)v55));
    v58 = vrecpe_f32(v57);
    v59 = 4;
    do
    {
      *(float32x2_t *)a12.f32 = vrecps_f32(v57, v58);
      v58 = vmul_f32(v58, *(float32x2_t *)a12.f32);
      --v59;
    }
    while (v59);
    v60 = vmulq_n_f32(v44, v58.f32[0]);
    v60.i32[3] = 0;
    v61 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v62.i64[0] = -1;
    v62.i64[1] = -1;
    v63 = 0uLL;
    goto LABEL_54;
  }
  v37 = 0;
  v38 = v18 + 48;
  v39 = v21[3];
  v40 = (int8x16_t)vnegq_f32(v39);
  v40.i32[3] = 0;
  do
  {
    v41 = a6[v37];
    *(&v337 + v37) = v41;
    v42 = a7[v37];
    *(&v335 + v37) = v42;
    a12 = *(float32x4_t *)(v38 + 16 * (1 - v41));
    v43 = (float32x4_t)vbslq_s8(physx::boxVertexTable[v42], (int8x16_t)v39, v40);
    v44 = vsubq_f32(a12, v43);
    *(&v342 + v37) = a12;
    *(&v339 + v37) = v43;
    *(&v345 + v37++) = v44;
  }
  while (v31 != v37);
  v331 = v31;
  switch((_DWORD)v37)
  {
    case 4:
      v327 = v30;
      physx::Gu::closestPtPointTetrahedron(&v345, &v342, &v339, &v337, &v335, (int *)&v331);
      LODWORD(v30) = v327;
      v13 = v323;
      goto LABEL_49;
    case 3:
      v331 = 3;
      v44 = v345;
      a12 = vsubq_f32(v346, v345);
      v64 = vsubq_f32((float32x4_t)v347[0], v345);
      v66 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 4uLL), *(float32x2_t *)v64.f32);
      *(int8x8_t *)v65.f32 = vext_s8(v66, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 8uLL), *(float32x2_t *)v64.f32), *(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL)), 4uLL);
      v66.i32[1] = 0;
      v67 = vpadd_f32(vmul_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32), vmul_f32((float32x2_t)v66.u32[0], (float32x2_t)v66.u32[0]));
      v68 = vpadd_f32(v67, v67);
      if (v68.f32[0] > 0.00000011921)
      {
        if (v68.f32[0] == 0.0)
        {
          v44 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v65.u32[2] = v66;
          v69 = (float32x2_t)vextq_s8((int8x16_t)v346, (int8x16_t)v346, 8uLL).u64[0];
          v70 = (float32x2_t)vextq_s8(v347[0], v347[0], 8uLL).u64[0];
          v71 = (float32x2_t)vextq_s8(v347[0], v347[0], 4uLL).u64[0];
          v72 = (float32x2_t)vextq_s8((int8x16_t)v346, (int8x16_t)v346, 4uLL).u64[0];
          v73 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v346.f32, v71), v72, *(float32x2_t *)v347[0].i8);
          *(int8x8_t *)v74.f32 = vext_s8(v73, (int8x8_t)vmls_f32(vmul_f32(v69, *(float32x2_t *)v347[0].i8), *(float32x2_t *)v346.f32, v70), 4uLL);
          v74.i64[1] = v73.u32[0];
          v75 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 8uLL).u64[0];
          v76 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 4uLL).u64[0];
          v77 = (int8x8_t)vmls_f32(vmul_f32(v76, *(float32x2_t *)v347[0].i8), v71, *(float32x2_t *)v345.f32);
          *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v345.f32, v70), *(float32x2_t *)v347[0].i8, v75), 4uLL);
          v78.i64[1] = v77.u32[0];
          v79 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v345.f32, v72), v76, *(float32x2_t *)v346.f32);
          *(int8x8_t *)v80.f32 = vext_s8(v79, (int8x8_t)vmls_f32(vmul_f32(v75, *(float32x2_t *)v346.f32), *(float32x2_t *)v345.f32, v69), 4uLL);
          v80.i64[1] = v79.u32[0];
          v81 = vmulq_f32(v74, v65);
          v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
          v82 = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32);
          v83 = vmulq_f32(v78, v65);
          v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
          v84 = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32);
          v85 = vmulq_f32(v80, v65);
          v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
          v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v84), (int8x8_t)vcgez_f32(v82)), (int8x8_t)vcgez_f32(v86)), 0), *(int8x8_t *)v345.f32).u32[0] == -1)
          {
            v112 = (int8x16_t)vmulq_f32(v345, v65);
            v113 = (float32x2_t)vextq_s8(v112, v112, 8uLL).u64[0];
            v114 = vrecpe_f32(v68);
            v115 = 4;
            do
            {
              v114 = vmul_f32(v114, vrecps_f32(v68, v114));
              --v115;
            }
            while (v115);
            v116 = vpadd_f32(*(float32x2_t *)v112.i8, v113);
            v44 = vmulq_n_f32(v65, vmul_f32(v114, vpadd_f32(v116, v116)).f32[0]);
            v44.i32[3] = 0;
          }
          else
          {
            v87 = vnegq_f32(v345);
            v87.i32[3] = 0;
            v88 = vnegq_f32(v346);
            v88.i32[3] = 0;
            v89 = vmulq_f32(v87, a12);
            v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
            v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
            v91 = vmulq_f32(a12, v88);
            v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
            v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v90), (int8x8_t)vclez_f32(v92)), (int8x8_t)vclez_f32(v86)), 0), *(int8x8_t *)v345.f32).u32[0] == -1)
            {
              v117 = vsub_f32(v90, v92);
              v118 = vrecpe_f32(v117);
              v119 = 4;
              do
              {
                v118 = vmul_f32(v118, vrecps_f32(v117, v118));
                --v119;
              }
              while (v119);
              v104 = 0;
              v44 = vmlaq_n_f32(v345, a12, vmul_f32(v90, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v117), (float32x2_t)0x3400000034000000), (int8x8_t)v118, 0)).f32[0]);
              v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
              v120 = 2;
              v103 = 1;
            }
            else
            {
              v93 = vnegq_f32((float32x4_t)v347[0]);
              v93.i32[3] = 0;
              v94 = vmulq_f32(v88, v64);
              v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
              v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
              v96 = vmulq_f32(a12, v93);
              v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
              v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
              v98 = vmulq_f32(v64, v93);
              v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
              v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v95, v92), (int8x8_t)vcge_f32(v97, v99)), (int8x8_t)vclez_f32(v82)), 0), *(int8x8_t *)v345.f32).u32[0] == -1)
              {
                v121 = vsub_f32(v95, v92);
                v122 = vadd_f32(v121, vsub_f32(v97, v99));
                v123 = vrecpe_f32(v122);
                v124 = 4;
                do
                {
                  v123 = vmul_f32(v123, vrecps_f32(v122, v123));
                  --v124;
                }
                while (v124);
                v125 = (int8x16_t)vmlaq_n_f32(v346, vsubq_f32((float32x4_t)v347[0], v346), vmul_f32(v121, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v122), (float32x2_t)0x3400000034000000), (int8x8_t)v123, 0)).f32[0]);
                v125.i64[1] = vextq_s8(v125, v125, 8uLL).u32[0];
                v120 = 2;
                v104 = 1;
                v103 = 2;
                v44 = (float32x4_t)v125;
              }
              else
              {
                v100 = vmulq_f32(v87, v64);
                v101 = (int32x4_t)vpaddq_f32(v100, v100);
                *(float32x2_t *)v101.i8 = vpadd_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v101.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v101.i8), (int8x8_t)vclez_f32(v99)), (int8x8_t)vclez_f32(v84)), 0), *(int8x8_t *)v345.f32).u32[0] == -1)
                {
                  v126 = vsub_f32(*(float32x2_t *)v101.i8, v99);
                  v127 = vrecpe_f32(v126);
                  v128 = 4;
                  do
                  {
                    v127 = vmul_f32(v127, vrecps_f32(v126, v127));
                    --v128;
                  }
                  while (v128);
                  v104 = 0;
                  v44 = vmlaq_n_f32(v345, v64, vmul_f32(*(float32x2_t *)v101.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v126), (float32x2_t)0x3400000034000000), (int8x8_t)v127, 0)).f32[0]);
                  v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
                  v103 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v101.i8), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v345.f32).u32[0] == -1)
                {
                  v104 = 0;
                  v103 = 1;
                }
                else
                {
                  *(int32x2_t *)v101.i8 = vcge_f32(v92, v95);
                  *(int16x4_t *)v44.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v101.i8, (int8x8_t)vcgez_f32(v92)), 0);
                  *(int8x8_t *)v44.f32 = vuzp1_s8(*(int8x8_t *)v44.f32, *(int8x8_t *)v44.f32);
                  v101.i32[0] = -1;
                  v102 = v44.i32[0];
                  v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v44, v101), 0), (int8x16_t)v346, v347[0]);
                  v103 = 1;
                  if (v102 == -1)
                    v104 = 1;
                  else
                    v104 = 2;
                }
                v120 = v103;
              }
            }
            v129 = *(&v345 + v104);
            v130 = *(&v345 + v103);
            a12 = *(&v342 + v104);
            v131 = *(&v342 + v103);
            v132 = *(&v339 + v104);
            v133 = *(&v339 + v103);
            v134 = *(&v337 + v104);
            v135 = *(&v337 + v103);
            v136 = *(&v335 + v104);
            v137 = *(&v335 + v103);
            v345 = v129;
            v346 = v130;
            v342 = a12;
            v343 = v131;
            v339 = v132;
            v340 = v133;
            v337 = v134;
            v338 = v135;
            v335 = v136;
            v336 = v137;
            v331 = v120;
          }
        }
        goto LABEL_49;
      }
      v331 = 2;
      v105 = vmulq_f32(a12, a12);
      v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
      v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v106), 0), *(int8x8_t *)v345.f32).u32[0] != -1)
      {
        v107 = vnegq_f32(v345);
        v107.i32[3] = 0;
        v108 = vmulq_f32(v107, a12);
        v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
        v109 = vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32);
        v110 = vrecpe_f32(v106);
        v111 = 4;
        do
        {
          v110 = vmul_f32(v110, vrecps_f32(v106, v110));
          --v111;
        }
        while (v111);
        v44 = vmlaq_n_f32(v345, a12, vmax_f32(vmin_f32(vmul_f32(v109, v110), _D9), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      v44 = v345;
      v45 = vsubq_f32(v346, v345);
      v46 = vmulq_f32(v45, v45);
      v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
      v47 = vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v47), 0), *(int8x8_t *)v345.f32).u32[0] != -1)
      {
        v48 = vnegq_f32(v345);
        v48.i32[3] = 0;
        v49 = vmulq_f32(v48, v45);
        a12 = vpaddq_f32(v49, v49);
        *(float32x2_t *)a12.f32 = vpadd_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
        v50 = vrecpe_f32(v47);
        v51 = 4;
        do
        {
          v50 = vmul_f32(v50, vrecps_f32(v47, v50));
          --v51;
        }
        while (v51);
        v44 = vmlaq_n_f32(v345, v45, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a12.f32, v50), _D9), 0).f32[0]);
LABEL_31:
        v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  v331 = 1;
LABEL_49:
  v332 = v44;
  v138 = vmulq_f32(v44, v44);
  v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
  v139 = vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32);
  v140 = vrsqrte_f32(v139);
  v141 = 4;
  do
  {
    v140 = vmul_f32(v140, vrsqrts_f32(vmul_f32(v140, v140), v139));
    --v141;
  }
  while (v141);
  v61 = vmul_f32(v139, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v139), 0), (int8x8_t)_D9, (int8x8_t)v140));
  v142 = vrecpe_f32(v61);
  v143 = 4;
  do
  {
    *(float32x2_t *)a12.f32 = vrecps_f32(v61, v142);
    v142 = vmul_f32(v142, *(float32x2_t *)a12.f32);
    --v143;
  }
  while (v143);
  v60 = vmulq_n_f32(v44, v142.f32[0]);
  v60.i32[3] = 0;
  v62 = vdupq_lane_s32(vcgt_f32(v61, v26), 0);
  v63 = v44;
LABEL_54:
  v144 = *(float *)&v30 + *(float *)&v13;
  v145.i64[0] = -1;
  v145.i64[1] = -1;
  v146 = (int8x16_t)xmmword_22611E0A0;
  a12.i32[0] = -1;
  v318 = (int32x4_t)a12;
  v147 = v61;
  v148.i64[0] = -1;
  v148.i64[1] = -1;
  while (1)
  {
    v149 = v44;
    v150 = (int8x8_t)vmovn_s32(vceqq_s32(v62, v145));
    if (vuzp1_s8(v150, v150).u32[0] != -1)
      break;
    *(float32x2_t *)&v13 = v61;
    v151 = vnegq_f32(v149);
    v151.i32[3] = 0;
    v152 = v331;
    v153 = *(float32x4_t **)(a1 + 8);
    v154 = vmulq_f32(v151, v153[3]);
    v154.i64[0] = vpaddq_f32(v154, v154).u64[0];
    v155 = vmulq_f32(v151, v153[4]);
    v155.i64[0] = vpaddq_f32(v155, v155).u64[0];
    *(int8x8_t *)v155.f32 = vand_s8((int8x8_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v154.f32, *(float32x2_t *)v154.f32), vpadd_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v155.f32)), (int8x8_t)0x100000001);
    *(&v337 + v331) = v155.i32[0];
    v156 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(*(int32x2_t *)v155.f32, 0), 0x1FuLL)), (int8x16_t)v153[3], (int8x16_t)v153[4]);
    v157 = *(float32x4_t **)(a2 + 8);
    v158 = (int8x16_t)vcgtzq_f32(v149);
    v159 = (int32x4_t)vandq_s8(v158, v146);
    v159.i64[0] = vpaddq_s32(v159, v159).u64[0];
    *(&v335 + v152) = vpadd_s32(*(int32x2_t *)v159.i8, *(int32x2_t *)v159.i8).u8[0] & 7;
    v160 = v157[3];
    v161 = (int8x16_t)vnegq_f32(v160);
    v161.i32[3] = 0;
    v162 = (float32x4_t)vbslq_s8(v158, (int8x16_t)v160, v161);
    v44 = vsubq_f32(v156, v162);
    v163 = vmulq_f32(v60, v44);
    v163.i64[0] = vpaddq_f32(v163, v163).u64[0];
    v164 = vpadd_f32(*(float32x2_t *)v163.f32, *(float32x2_t *)v163.f32).f32[0];
    if (v164 > v144)
    {
      if (v15)
      {
        *a8 = v152;
        if ((_DWORD)v152)
        {
          v263 = &v335;
          v264 = &v337;
          do
          {
            v265 = *v264++;
            *v15++ = v265;
            v266 = *v263++;
            *v14++ = v266;
            --v152;
          }
          while (v152);
        }
      }
      return 0;
    }
    if (v164 > (float)(0.99977 * *(float *)&v13))
    {
      v267 = (float32x2_t)v323;
      if (!v15)
        goto LABEL_119;
      *a8 = v152;
      if ((_DWORD)v152)
      {
        v268 = &v335;
        v269 = &v337;
        v270 = v152;
        do
        {
          v271 = *v269++;
          *v15++ = v271;
          v272 = *v268++;
          *v14++ = v272;
          --v270;
        }
        while (v270);
LABEL_119:
        v273 = (float32x4_t *)a13;
        *(float32x4_t *)(a13 + 32) = v60;
        if ((_DWORD)v152 != 3)
        {
          if ((_DWORD)v152 != 2)
          {
            v274 = 0uLL;
            v275 = 0uLL;
            v276 = a5;
            if ((_DWORD)v152 == 1)
            {
              v274 = v342;
              v275 = v339;
              if (!a5)
                goto LABEL_140;
LABEL_136:
              *v273 = v274;
              v273[1] = v275;
              result = 2;
              v273[4].i64[0] = v13;
              return result;
            }
LABEL_135:
            if (!v276)
              goto LABEL_140;
            goto LABEL_136;
          }
          v290 = vsubq_f32(v345, v149);
          v291 = vsubq_f32(vsubq_f32(v346, v149), v290);
          v292 = vmulq_f32(v291, v291);
          v292.i64[0] = vpaddq_f32(v292, v292).u64[0];
          v293 = vpadd_f32(*(float32x2_t *)v292.f32, *(float32x2_t *)v292.f32);
          v294 = vrecpe_f32(v293);
          v295 = 4;
          do
          {
            v294 = vmul_f32(v294, vrecps_f32(v293, v294));
            --v295;
          }
          while (v295);
          v296 = vnegq_f32(v290);
          v296.i32[3] = 0;
          v297 = vmulq_f32(v296, v291);
          v297.i64[0] = vpaddq_f32(v297, v297).u64[0];
          v296.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v293), (int8x8_t)v294, 0), vpadd_f32(*(float32x2_t *)v297.f32, *(float32x2_t *)v297.f32)).u32[0];
          v274 = vmlaq_n_f32(v342, vsubq_f32(v343, v342), v296.f32[0]);
          v274.i64[1] = vextq_s8((int8x16_t)v274, (int8x16_t)v274, 8uLL).u32[0];
          v275 = vmlaq_n_f32(v339, vsubq_f32(v340, v339), v296.f32[0]);
          v275.i64[1] = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u32[0];
          if (a5)
            goto LABEL_136;
LABEL_140:
          v298 = (int8x16_t)vmlsq_lane_f32(v274, v60, v319, 0);
          v298.i64[1] = vextq_s8(v298, v298, 8uLL).u32[0];
          v299 = (int8x16_t)vmlaq_n_f32(v275, v60, v320);
          v299.i64[1] = vextq_s8(v299, v299, 8uLL).u32[0];
          *v273 = (float32x4_t)v298;
          v273[1] = (float32x4_t)v299;
          *(float32x2_t *)v273[4].f32 = vsub_f32(*(float32x2_t *)&v13, v267);
          return 2;
        }
        v333 = 0;
        v334 = 0;
        v325 = v60;
        v329 = v13;
        physx::Gu::barycentricCoordinates(&v332, &v345, &v346, (float32x4_t *)v347, &v334, &v333);
        v267 = (float32x2_t)v323;
        v285 = vmulq_n_f32(vsubq_f32(v343, v342), v334.f32[0]);
        v285.i32[3] = 0;
        v286 = vmulq_n_f32(vsubq_f32(v344, v342), v333.f32[0]);
        v286.i32[3] = 0;
        v287 = vaddq_f32(v285, v286);
        v288 = vmulq_n_f32(vsubq_f32(v340, v339), v334.f32[0]);
        v288.i32[3] = 0;
        v274 = vaddq_f32(v342, v287);
        v289 = vmulq_n_f32(vsubq_f32(v341, v339), v333.f32[0]);
        v60 = v325;
        *(_QWORD *)&v13 = v329;
        v289.i32[3] = 0;
        v275 = vaddq_f32(v339, vaddq_f32(v288, v289));
      }
      else
      {
        v273 = (float32x4_t *)a13;
        *(float32x4_t *)(a13 + 32) = v60;
        v274 = 0uLL;
        v275 = 0uLL;
      }
      v276 = a5;
      goto LABEL_135;
    }
    *(&v342 + v152) = v156;
    *(&v339 + v152) = v162;
    v331 = v152 + 1;
    *(&v345 + v152) = v44;
    switch((_DWORD)v152)
    {
      case 3:
        v324 = v149;
        v328 = v13;
        physx::Gu::closestPtPointTetrahedron(&v345, &v342, &v339, &v337, &v335, (int *)&v331);
        v146 = (int8x16_t)xmmword_22611E0A0;
        v149 = v324;
        v145.i64[0] = -1;
        v145.i64[1] = -1;
        v13 = v328;
        break;
      case 2:
        v44 = v345;
        v173 = vsubq_f32(v346, v345);
        v174 = vsubq_f32((float32x4_t)v347[0], v345);
        v176 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v173.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v174, (int8x16_t)v174, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v173, (int8x16_t)v173, 4uLL), *(float32x2_t *)v174.f32);
        *(int8x8_t *)v175.f32 = vext_s8(v176, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v173, (int8x16_t)v173, 8uLL), *(float32x2_t *)v174.f32), *(float32x2_t *)v173.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v174, (int8x16_t)v174, 8uLL)), 4uLL);
        v176.i32[1] = 0;
        v331 = 3;
        v177 = vpadd_f32(vmul_f32(*(float32x2_t *)v175.f32, *(float32x2_t *)v175.f32), vmul_f32((float32x2_t)v176.u32[0], (float32x2_t)v176.u32[0]));
        v178 = vpadd_f32(v177, v177);
        if (v178.f32[0] <= 0.00000011921)
        {
          v331 = 2;
          v215 = vmulq_f32(v173, v173);
          v215.i64[0] = vpaddq_f32(v215, v215).u64[0];
          v216 = vpadd_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v216), 0), *(int8x8_t *)v345.f32).u32[0] == -1)
          {
LABEL_81:
            v331 = 1;
            break;
          }
          v217 = vnegq_f32(v345);
          v217.i32[3] = 0;
          v218 = vmulq_f32(v217, v173);
          v218.i64[0] = vpaddq_f32(v218, v218).u64[0];
          v219 = vpadd_f32(*(float32x2_t *)v218.f32, *(float32x2_t *)v218.f32);
          v220 = vrecpe_f32(v216);
          v221 = 4;
          do
          {
            v220 = vmul_f32(v220, vrecps_f32(v216, v220));
            --v221;
          }
          while (v221);
          v44 = vmlaq_n_f32(v345, v173, vmax_f32(vmin_f32(vmul_f32(v219, v220), _D9), 0).f32[0]);
          goto LABEL_80;
        }
        if (v178.f32[0] == 0.0)
        {
          v44 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v175.u32[2] = v176;
          v179 = (float32x2_t)vextq_s8((int8x16_t)v346, (int8x16_t)v346, 8uLL).u64[0];
          v180 = (float32x2_t)vextq_s8(v347[0], v347[0], 8uLL).u64[0];
          v181 = (float32x2_t)vextq_s8(v347[0], v347[0], 4uLL).u64[0];
          v182 = (float32x2_t)vextq_s8((int8x16_t)v346, (int8x16_t)v346, 4uLL).u64[0];
          v183 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v346.f32, v181), v182, *(float32x2_t *)v347[0].i8);
          *(int8x8_t *)v184.f32 = vext_s8(v183, (int8x8_t)vmls_f32(vmul_f32(v179, *(float32x2_t *)v347[0].i8), *(float32x2_t *)v346.f32, v180), 4uLL);
          v184.i64[1] = v183.u32[0];
          v185 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 8uLL).u64[0];
          v186 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 4uLL).u64[0];
          v187 = (int8x8_t)vmls_f32(vmul_f32(v186, *(float32x2_t *)v347[0].i8), v181, *(float32x2_t *)v345.f32);
          *(int8x8_t *)v188.f32 = vext_s8(v187, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v345.f32, v180), *(float32x2_t *)v347[0].i8, v185), 4uLL);
          v188.i64[1] = v187.u32[0];
          v189 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v345.f32, v182), v186, *(float32x2_t *)v346.f32);
          *(int8x8_t *)v190.f32 = vext_s8(v189, (int8x8_t)vmls_f32(vmul_f32(v185, *(float32x2_t *)v346.f32), *(float32x2_t *)v345.f32, v179), 4uLL);
          v190.i64[1] = v189.u32[0];
          v191 = vmulq_f32(v184, v175);
          v191.i64[0] = vpaddq_f32(v191, v191).u64[0];
          v192 = vpadd_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32);
          v193 = vmulq_f32(v188, v175);
          v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
          v194 = vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32);
          v195 = vmulq_f32(v190, v175);
          v195.i64[0] = vpaddq_f32(v195, v195).u64[0];
          v196 = vpadd_f32(*(float32x2_t *)v195.f32, *(float32x2_t *)v195.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v194), (int8x8_t)vcgez_f32(v192)), (int8x8_t)vcgez_f32(v196)), 0), *(int8x8_t *)v345.f32).u32[0] != -1)
          {
            v197 = vnegq_f32(v345);
            v197.i32[3] = 0;
            v198 = vnegq_f32(v346);
            v198.i32[3] = 0;
            v199 = vmulq_f32(v197, v173);
            v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
            v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
            v201 = vmulq_f32(v173, v198);
            v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
            v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v200), (int8x8_t)vclez_f32(v202)), (int8x8_t)vclez_f32(v196)), 0), *(int8x8_t *)v345.f32).u32[0] == -1)
            {
              v227 = vsub_f32(v200, v202);
              v228 = vrecpe_f32(v227);
              v229 = 4;
              do
              {
                v228 = vmul_f32(v228, vrecps_f32(v227, v228));
                --v229;
              }
              while (v229);
              v214 = 0;
              v44 = vmlaq_n_f32(v345, v173, vmul_f32(v200, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v227), (float32x2_t)0x3400000034000000), (int8x8_t)v228, 0)).f32[0]);
              v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
              v230 = 2;
              v213 = 1;
            }
            else
            {
              v203 = vnegq_f32((float32x4_t)v347[0]);
              v203.i32[3] = 0;
              v204 = vmulq_f32(v198, v174);
              v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
              v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
              v206 = vmulq_f32(v173, v203);
              v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
              v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
              v208 = vmulq_f32(v174, v203);
              v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
              v209 = vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v205, v202), (int8x8_t)vcge_f32(v207, v209)), (int8x8_t)vclez_f32(v192)), 0), *(int8x8_t *)v345.f32).u32[0] == -1)
              {
                v231 = vsub_f32(v205, v202);
                v232 = vadd_f32(v231, vsub_f32(v207, v209));
                v233 = vrecpe_f32(v232);
                v234 = 4;
                do
                {
                  v233 = vmul_f32(v233, vrecps_f32(v232, v233));
                  --v234;
                }
                while (v234);
                v235 = (int8x16_t)vmlaq_n_f32(v346, vsubq_f32((float32x4_t)v347[0], v346), vmul_f32(v231, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v232), (float32x2_t)0x3400000034000000), (int8x8_t)v233, 0)).f32[0]);
                v235.i64[1] = vextq_s8(v235, v235, 8uLL).u32[0];
                v213 = 2;
                v44 = (float32x4_t)v235;
                v214 = 1;
              }
              else
              {
                v210 = vmulq_f32(v197, v174);
                v210.i64[0] = vpaddq_f32(v210, v210).u64[0];
                v211 = vpadd_f32(*(float32x2_t *)v210.f32, *(float32x2_t *)v210.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v211), (int8x8_t)vclez_f32(v209)), (int8x8_t)vclez_f32(v194)), 0), *(int8x8_t *)v345.f32).u32[0] != -1)
                {
                  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v211), (int8x8_t)vclez_f32(v200)), 0), *(int8x8_t *)v345.f32).u32[0] == -1)
                  {
                    v214 = 0;
                    v213 = 1;
                  }
                  else
                  {
                    *(int16x4_t *)v44.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v202, v205), (int8x8_t)vcgez_f32(v202)), 0);
                    *(int8x8_t *)v44.f32 = vuzp1_s8(*(int8x8_t *)v44.f32, *(int8x8_t *)v44.f32);
                    v212 = v44.i32[0];
                    v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v44, v318), 0), (int8x16_t)v346, v347[0]);
                    v213 = 1;
                    if (v212 == -1)
                      v214 = 1;
                    else
                      v214 = 2;
                  }
                  v230 = 1;
                  goto LABEL_98;
                }
                v236 = vsub_f32(v211, v209);
                v237 = vrecpe_f32(v236);
                v238 = 4;
                do
                {
                  v237 = vmul_f32(v237, vrecps_f32(v236, v237));
                  --v238;
                }
                while (v238);
                v214 = 0;
                v44 = vmlaq_n_f32(v345, v174, vmul_f32(v211, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v236), (float32x2_t)0x3400000034000000), (int8x8_t)v237, 0)).f32[0]);
                v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
                v213 = 2;
              }
              v230 = 2;
            }
LABEL_98:
            v239 = *(&v345 + v214);
            v240 = *(&v345 + v213);
            v241 = *(&v342 + v214);
            v242 = *(&v342 + v213);
            v243 = *(&v339 + v214);
            v244 = *(&v339 + v213);
            v245 = *(&v337 + v214);
            v246 = *(&v337 + v213);
            v247 = *(&v335 + v214);
            v248 = *(&v335 + v213);
            v345 = v239;
            v346 = v240;
            v342 = v241;
            v343 = v242;
            v339 = v243;
            v340 = v244;
            v337 = v245;
            v338 = v246;
            v335 = v247;
            v336 = v248;
            v331 = v230;
            break;
          }
          v222 = (int8x16_t)vmulq_f32(v345, v175);
          v223 = (float32x2_t)vextq_s8(v222, v222, 8uLL).u64[0];
          v224 = vrecpe_f32(v178);
          v225 = 4;
          do
          {
            v224 = vmul_f32(v224, vrecps_f32(v178, v224));
            --v225;
          }
          while (v225);
          v226 = vpadd_f32(*(float32x2_t *)v222.i8, v223);
          v44 = vmulq_n_f32(v175, vmul_f32(v224, vpadd_f32(v226, v226)).f32[0]);
          v44.i32[3] = 0;
        }
        break;
      case 1:
        v44 = v345;
        v165 = vsubq_f32(v346, v345);
        v166 = vmulq_f32(v165, v165);
        v166.i64[0] = vpaddq_f32(v166, v166).u64[0];
        v167 = vpadd_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v166.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v167), 0), *(int8x8_t *)v345.f32).u32[0] == -1)goto LABEL_81;
        v168 = vnegq_f32(v345);
        v168.i32[3] = 0;
        v169 = vmulq_f32(v168, v165);
        v169.i64[0] = vpaddq_f32(v169, v169).u64[0];
        v170 = vpadd_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v169.f32);
        v171 = vrecpe_f32(v167);
        v172 = 4;
        do
        {
          v171 = vmul_f32(v171, vrecps_f32(v167, v171));
          --v172;
        }
        while (v172);
        v44 = vmlaq_n_f32(v345, v165, vmax_f32(vmin_f32(vmul_f32(v170, v171), _D9), 0).f32[0]);
LABEL_80:
        v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
        break;
    }
    v332 = v44;
    v249 = vmulq_f32(v44, v44);
    v249.i64[0] = vpaddq_f32(v249, v249).u64[0];
    v250 = vpadd_f32(*(float32x2_t *)v249.f32, *(float32x2_t *)v249.f32);
    v251 = vrsqrte_f32(v250);
    v252 = 4;
    do
    {
      v251 = vmul_f32(v251, vrsqrts_f32(vmul_f32(v251, v251), v250));
      --v252;
    }
    while (v252);
    v61 = vmul_f32(v250, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v250), 0), (int8x8_t)_D9, (int8x8_t)v251));
    v253 = vrecpe_f32(v61);
    v254 = 4;
    do
    {
      v253 = vmul_f32(v253, vrecps_f32(v61, v253));
      --v254;
    }
    while (v254);
    v60 = vmulq_n_f32(v44, v253.f32[0]);
    v60.i32[3] = 0;
    v255 = vcgt_f32(*(float32x2_t *)&v13, v61);
    v148 = vdupq_lane_s32(v255, 0);
    v62 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v61, v26), (int8x8_t)v255), 0);
    v147 = (float32x2_t)v13;
    v63 = v149;
  }
  v256 = (int8x8_t)vmovn_s32(vceqzq_s32(v148));
  v257 = v331;
  if (vuzp1_s8(v256, v256).u32[0] != -1)
  {
    if (v15)
    {
      *a8 = v331;
      if ((_DWORD)v257)
      {
        v258 = &v335;
        v259 = &v337;
        do
        {
          v260 = *v259++;
          *v15++ = v260;
          v261 = *v258++;
          *v14++ = v261;
          --v257;
        }
        while (v257);
      }
    }
    return 5;
  }
  v277 = (float32x2_t)v323;
  if (v15)
  {
    v278 = v331 - 1;
    *a8 = v331 - 1;
    if ((_DWORD)v257 != 1)
    {
      v279 = &v335;
      v280 = &v337;
      do
      {
        v281 = *v280++;
        *v15++ = v281;
        v282 = *v279++;
        *v14++ = v282;
        --v278;
      }
      while (v278);
      goto LABEL_128;
    }
LABEL_131:
    v283 = v342;
    v284 = v339;
  }
  else
  {
LABEL_128:
    v332 = v63;
    if ((_DWORD)v257 == 3)
    {
      v333 = 0;
      v334 = 0;
      v326 = v60;
      v330 = v63;
      physx::Gu::barycentricCoordinates(&v332, &v345, &v346, (float32x4_t *)v347, &v334, &v333);
      v277 = (float32x2_t)v323;
      v300 = vmulq_n_f32(vsubq_f32(v343, v342), v334.f32[0]);
      v300.i32[3] = 0;
      v301 = vmulq_n_f32(vsubq_f32(v344, v342), v333.f32[0]);
      v301.i32[3] = 0;
      v302 = vaddq_f32(v300, v301);
      v303 = vmulq_n_f32(vsubq_f32(v340, v339), v334.f32[0]);
      v303.i32[3] = 0;
      v283 = vaddq_f32(v342, v302);
      v304 = vmulq_n_f32(vsubq_f32(v341, v339), v333.f32[0]);
      v60 = v326;
      v63 = v330;
      v304.i32[3] = 0;
      v284 = vaddq_f32(v339, vaddq_f32(v303, v304));
    }
    else if ((_DWORD)v257 == 2)
    {
      v305 = vsubq_f32(v345, v63);
      v306 = vsubq_f32(vsubq_f32(v346, v63), v305);
      v307 = vmulq_f32(v306, v306);
      v307.i64[0] = vpaddq_f32(v307, v307).u64[0];
      v308 = vpadd_f32(*(float32x2_t *)v307.f32, *(float32x2_t *)v307.f32);
      v309 = vrecpe_f32(v308);
      v310 = 4;
      do
      {
        v309 = vmul_f32(v309, vrecps_f32(v308, v309));
        --v310;
      }
      while (v310);
      v311 = vnegq_f32(v305);
      v311.i32[3] = 0;
      v312 = vmulq_f32(v311, v306);
      v312.i64[0] = vpaddq_f32(v312, v312).u64[0];
      v311.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v308), (int8x8_t)v309, 0), vpadd_f32(*(float32x2_t *)v312.f32, *(float32x2_t *)v312.f32)).u32[0];
      v283 = vmlaq_n_f32(v342, vsubq_f32(v343, v342), v311.f32[0]);
      v283.i64[1] = vextq_s8((int8x16_t)v283, (int8x16_t)v283, 8uLL).u32[0];
      v284 = vmlaq_n_f32(v339, vsubq_f32(v340, v339), v311.f32[0]);
      v284.i64[1] = vextq_s8((int8x16_t)v284, (int8x16_t)v284, 8uLL).u32[0];
    }
    else
    {
      v283 = 0uLL;
      v284 = 0uLL;
      if ((_DWORD)v257 == 1)
        goto LABEL_131;
    }
  }
  v313 = vrecpe_f32(v147);
  v314 = 4;
  do
  {
    v313 = vmul_f32(v313, vrecps_f32(v147, v313));
    --v314;
  }
  while (v314);
  v315 = vmulq_n_f32(v63, v313.f32[0]);
  v315.i32[3] = 0;
  *(float32x4_t *)(a13 + 32) = v315;
  *(float32x4_t *)(a13 + 48) = v60;
  if (a5)
  {
    *(float32x4_t *)a13 = v283;
    *(float32x4_t *)(a13 + 16) = v284;
    *(float32x2_t *)(a13 + 64) = v147;
  }
  else
  {
    v316 = (int8x16_t)vmlsq_lane_f32(v283, v315, v319, 0);
    v316.i64[1] = vextq_s8(v316, v316, 8uLL).u32[0];
    v317 = (int8x16_t)vmlaq_n_f32(v284, v315, v320);
    v317.i64[1] = vextq_s8(v317, v317, 8uLL).u32[0];
    *(int8x16_t *)a13 = v316;
    *(int8x16_t *)(a13 + 16) = v317;
    *(float32x2_t *)(a13 + 64) = vsub_f32(v147, v277);
    if ((vcge_f32(v277, v147).u32[0] & 1) != 0)
      return 2;
  }
  return 4;
}

BOOL physx::Gu::gjkRaycast<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(float32x4_t *a1, uint64_t a2, float32x4_t *a3, int32x2_t a4, uint64_t a5, float32x4_t *a6, float32x4_t *a7, float32x2_t *a8, float32x4_t *a9, int8x16_t *a10)
{
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  int v21;
  float32x2_t v27;
  float32x2_t v28;
  int v29;
  float32x2_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t *v35;
  float32x4_t *v36;
  float32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  const float *v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x2_t v57;
  int16x4_t v58;
  int8x16_t v59;
  int8x16_t v60;
  float32x4_t v61;
  float32x2_t v62;
  int8x16_t v63;
  int8x8_t v64;
  unsigned __int32 v65;
  float32x4_t v66;
  float32x2_t v67;
  float32x2_t v68;
  int v69;
  float32x2_t v70;
  float32x2_t v71;
  int v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t *v78;
  int8x16_t v79;
  float32x4_t v80;
  int8x16_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int8x16_t v87;
  float32x4_t v88;
  int8x16_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x2_t v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x2_t v97;
  int v98;
  float32x2_t v99;
  float32x4_t v100;
  float32x4_t v101;
  uint64_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x2_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x2_t v108;
  float32x2_t v109;
  int v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  int8x8_t v114;
  float32x2_t v115;
  float32x2_t v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  float32x2_t v120;
  int8x8_t v121;
  float32x4_t v122;
  float32x2_t v123;
  float32x2_t v124;
  int8x8_t v125;
  float32x4_t v126;
  int8x8_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x2_t v130;
  float32x4_t v131;
  float32x2_t v132;
  float32x4_t v133;
  float32x2_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x2_t v138;
  float32x4_t v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x2_t v143;
  float32x4_t v144;
  float32x2_t v145;
  float32x4_t v146;
  float32x2_t v147;
  float32x4_t v148;
  float32x2_t v149;
  __int32 v150;
  uint64_t v151;
  uint64_t v152;
  float32x4_t v153;
  float32x2_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x2_t v157;
  float32x2_t v158;
  int v159;
  int8x16_t v160;
  float32x2_t v161;
  float32x2_t v162;
  int v163;
  float32x2_t v164;
  float32x2_t v165;
  float32x2_t v166;
  int v167;
  unsigned int v168;
  float32x2_t v169;
  float32x2_t v170;
  float32x2_t v171;
  int v172;
  int8x16_t v173;
  float32x2_t v174;
  float32x2_t v175;
  int v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x2_t v183;
  int8x8_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x2_t v187;
  float32x2_t v188;
  int v189;
  float32x2_t v190;
  float32x2_t v191;
  int v192;
  int8x16_t v193;
  int8x16_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  int8x16_t *v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x2_t v204;
  float32x2_t v205;
  int v206;
  float32x4_t v207;
  float32x4_t v208;
  int8x16_t v209;
  int32x4_t v211;
  float32x2_t v212;
  int8x16_t v215;
  float32x4_t v216;
  float32x4_t v217;
  int8x16_t v218;
  int8x16_t v219;
  float32x4_t v220;
  unsigned int v221;
  float32x2_t v222;
  float32x2_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  __int128 v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  __int128 v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234[2];
  uint64_t v235;

  v235 = *MEMORY[0x24BDAC8D0];
  v14 = vmlaq_f32(*a6, (float32x4_t)0, *a7);
  LODWORD(v15) = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u32[0];
  v221 = 1;
  v16 = vmulq_f32(*a3, *a3);
  v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
  v17 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32), (float32x2_t)0x3400000034000000), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_2260E5F10);
  v18 = vmulq_f32(v17, v17);
  v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
  v19 = vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32);
  v20 = vrsqrte_f32(v19);
  v21 = 4;
  do
  {
    v20 = vmul_f32(v20, vrsqrts_f32(vmul_f32(v20, v20), v19));
    --v21;
  }
  while (v21);
  HIDWORD(v15) = 0;
  __asm { FMOV            V8.2S, #1.0 }
  v27 = vmul_f32(v19, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v19), 0), (int8x8_t)_D8, (int8x8_t)v20));
  v28 = vrecpe_f32(v27);
  v29 = 4;
  do
  {
    v28 = vmul_f32(v28, vrecps_f32(v27, v28));
    --v29;
  }
  while (v29);
  v30 = (float32x2_t)vdup_lane_s32(a4, 0);
  v14.i64[1] = v15;
  v31 = vmulq_n_f32(v17, v28.f32[0]);
  v31.i32[3] = 0;
  v32 = vnegq_f32(v31);
  v33 = vmulq_n_f32(a1[2], v32.f32[0]);
  v33.i32[3] = 0;
  v34 = vmulq_lane_f32(a1[3], *(float32x2_t *)v32.f32, 1);
  v34.i32[3] = 0;
  v35 = (float32x4_t *)a1->i64[1];
  v36 = (float32x4_t *)a1[1].i64[0];
  v37 = vmulq_laneq_f32(a1[4], v32, 2);
  v37.i32[3] = 0;
  v38 = (int8x16_t)vcgtzq_f32(vaddq_f32(vaddq_f32(v33, v34), v37));
  v39 = v35[3];
  v40 = (int8x16_t)vnegq_f32(v39);
  v40.i32[3] = 0;
  v41 = (float32x4_t)vbslq_s8(v38, (int8x16_t)v39, v40);
  v42 = vmulq_n_f32(*v36, v41.f32[0]);
  v42.i32[3] = 0;
  v43 = vmulq_lane_f32(v36[1], *(float32x2_t *)v41.f32, 1);
  v43.i32[3] = 0;
  v44 = vmulq_laneq_f32(v36[2], v41, 2);
  v44.i32[3] = 0;
  v45 = vaddq_f32(v36[3], vaddq_f32(v44, vaddq_f32(v42, v43)));
  v46 = *(float32x4_t **)(a2 + 8);
  v47 = v46[3];
  v48 = (int8x16_t)vnegq_f32(v47);
  v48.i32[3] = 0;
  v49 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v31), (int8x16_t)v47, v48);
  v50 = vsubq_f32(v45, v49);
  v232 = v50;
  v233 = 0u;
  memset(v234, 0, sizeof(v234));
  v228 = v45;
  v229 = 0u;
  v230 = 0u;
  v231 = 0u;
  v51 = vnegq_f32(v50);
  v51.i32[3] = 0;
  v35 = (float32x4_t *)((char *)v35 + 24);
  v224 = v49;
  v225 = 0u;
  v226 = 0u;
  v227 = 0u;
  *(float32x2_t *)v45.f32 = vld1_dup_f32(v35->f32);
  v52 = &v46[1].f32[2];
  *(float32x2_t *)v49.f32 = vld1_dup_f32(v52);
  *(float32x2_t *)v45.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v49.f32), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  v53 = vadd_f32(v30, *(float32x2_t *)v45.f32);
  v54 = vmul_f32(v53, v53);
  v55 = vmulq_f32(v51, v51);
  v56 = vpaddq_f32(v55, v55);
  v57 = vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32);
  v212 = vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32);
  v58 = (int16x4_t)vcgt_f32(v57, v212);
  v59.i64[0] = -1;
  v59.i64[1] = -1;
  v56.i32[0] = -1;
  v211 = (int32x4_t)v56;
  v60 = (int8x16_t)v50;
  v215 = (int8x16_t)v51;
  v61 = v51;
  v62 = 0;
  while (1)
  {
    v63 = (int8x16_t)v50;
    v64 = (int8x8_t)vcltz_s16(vshl_n_s16(vdup_lane_s16(v58, 0), 0xFuLL));
    v65 = vuzp1_s8(v64, v64).u32[0];
    if (v65 != -1)
      break;
    v66 = vmulq_f32(v61, v61);
    v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
    v67 = vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32);
    v68 = vrsqrte_f32(v67);
    v69 = 4;
    do
    {
      v68 = vmul_f32(v68, vrsqrts_f32(vmul_f32(v68, v68), v67));
      --v69;
    }
    while (v69);
    v70 = vmul_f32(v67, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v67), 0), (int8x8_t)_D8, (int8x8_t)v68));
    v71 = vrecpe_f32(v70);
    v72 = 4;
    do
    {
      v71 = vmul_f32(v71, vrecps_f32(v70, v71));
      --v72;
    }
    while (v72);
    v76 = vmulq_n_f32(v61, v71.f32[0]);
    v73 = vmulq_n_f32(a1[2], v76.f32[0]);
    v74 = vmulq_lane_f32(a1[3], *(float32x2_t *)v76.f32, 1);
    v75 = vmulq_laneq_f32(a1[4], v76, 2);
    v76.i32[3] = 0;
    v77 = vnegq_f32(v76);
    v77.i32[3] = 0;
    v73.i32[3] = 0;
    v78 = (float32x4_t *)a1[1].i64[0];
    v74.i32[3] = 0;
    v75.i32[3] = 0;
    v79 = (int8x16_t)vcgtzq_f32(vaddq_f32(vaddq_f32(v73, v74), v75));
    v80 = *(float32x4_t *)(a1->i64[1] + 48);
    v81 = (int8x16_t)vnegq_f32(v80);
    v81.i32[3] = 0;
    v82 = (float32x4_t)vbslq_s8(v79, (int8x16_t)v80, v81);
    v83 = vmulq_n_f32(*v78, v82.f32[0]);
    v83.i32[3] = 0;
    v84 = vmulq_lane_f32(v78[1], *(float32x2_t *)v82.f32, 1);
    v84.i32[3] = 0;
    v85 = vmulq_laneq_f32(v78[2], v82, 2);
    v85.i32[3] = 0;
    v86 = vaddq_f32(v78[3], vaddq_f32(v85, vaddq_f32(v83, v84)));
    v87 = (int8x16_t)vcgtzq_f32(v77);
    v88 = *(float32x4_t *)(*(_QWORD *)(a2 + 8) + 48);
    v89 = (int8x16_t)vnegq_f32(v88);
    v89.i32[3] = 0;
    v90 = (float32x4_t)vbslq_s8(v87, (int8x16_t)v88, v89);
    v91 = vaddq_f32(v14, v90);
    v50 = vsubq_f32(v86, v91);
    v92 = vnegq_f32(v50);
    v92.i32[3] = 0;
    v93 = vmulq_f32(v76, v92);
    v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
    v94 = vsub_f32(vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32), v53);
    if (v94.f32[0] > 0.0)
    {
      v95 = vmulq_f32(v76, *a7);
      v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
      v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
      if (v96.f32[0] >= 0.0)
        return v65 != -1;
      v97 = vrecpe_f32(v96);
      v98 = 4;
      do
      {
        v97 = vmul_f32(v97, vrecps_f32(v96, v97));
        --v98;
      }
      while (v98);
      v99 = vsub_f32(v62, vmul_f32(v94, v97));
      if ((vcgt_f32(v99, v62).u8[0] & 1) != 0)
      {
        if (v99.f32[0] > 1.0)
          return v65 != -1;
        v100 = vmlaq_n_f32(*a6, *a7, v99.f32[0]);
        v100.i64[1] = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u32[0];
        v101 = vsubq_f32(v100, v14);
        v224 = vaddq_f32(v224, v101);
        v225 = vaddq_f32(v225, v101);
        v226 = vaddq_f32(v226, v101);
        v232 = vsubq_f32(v228, v224);
        v233 = vsubq_f32(v229, v225);
        v234[0] = vsubq_f32(v230, v226);
        v91 = vaddq_f32(v90, v100);
        v50 = vsubq_f32(v86, v91);
        v57 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        v215 = (int8x16_t)v61;
        v14 = v100;
      }
      v62 = v99;
    }
    v218 = v63;
    v102 = v221;
    *(&v228 + v221) = v86;
    *(&v224 + v102) = v91;
    v221 = v102 + 1;
    *(&v232 + v102) = v50;
    if ((_DWORD)v102 == 3)
    {
      v216 = v14;
      physx::Gu::closestPtPointTetrahedron(&v232, &v228, &v224, (int *)&v221);
      v14 = v216;
LABEL_27:
      v60 = v218;
      goto LABEL_60;
    }
    if ((_DWORD)v102 != 2)
    {
      v60 = v63;
      if ((_DWORD)v102 != 1)
        goto LABEL_60;
      v50 = v232;
      v103 = vsubq_f32(v233, v232);
      v104 = vmulq_f32(v103, v103);
      v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
      v105 = vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v105), 0), *(int8x8_t *)v232.f32).u32[0] != -1)
      {
        v106 = vnegq_f32(v232);
        v106.i32[3] = 0;
        v107 = vmulq_f32(v106, v103);
        v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
        v108 = vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32);
        v109 = vrecpe_f32(v105);
        v110 = 4;
        do
        {
          v109 = vmul_f32(v109, vrecps_f32(v105, v109));
          --v110;
        }
        while (v110);
        v50 = vmlaq_n_f32(v232, v103, vmax_f32(vmin_f32(vmul_f32(v108, v109), _D8), 0).f32[0]);
LABEL_42:
        v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
        goto LABEL_60;
      }
LABEL_43:
      v221 = 1;
      goto LABEL_60;
    }
    v50 = v232;
    v111 = vsubq_f32(v233, v232);
    v112 = vsubq_f32(v234[0], v232);
    v114 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v111.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v112, (int8x16_t)v112, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v111, (int8x16_t)v111, 4uLL), *(float32x2_t *)v112.f32);
    *(int8x8_t *)v113.f32 = vext_s8(v114, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL), *(float32x2_t *)v112.f32), *(float32x2_t *)v111.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL)), 4uLL);
    v114.i32[1] = 0;
    v221 = 3;
    v115 = vpadd_f32(vmul_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32), vmul_f32((float32x2_t)v114.u32[0], (float32x2_t)v114.u32[0]));
    v116 = vpadd_f32(v115, v115);
    if (v116.f32[0] <= 0.00000011921)
    {
      v221 = 2;
      v153 = vmulq_f32(v111, v111);
      v153.i64[0] = vpaddq_f32(v153, v153).u64[0];
      v154 = vpadd_f32(*(float32x2_t *)v153.f32, *(float32x2_t *)v153.f32);
      v60 = v63;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v154), 0), *(int8x8_t *)v232.f32).u32[0] != -1)
      {
        v155 = vnegq_f32(v232);
        v155.i32[3] = 0;
        v156 = vmulq_f32(v155, v111);
        v156.i64[0] = vpaddq_f32(v156, v156).u64[0];
        v157 = vpadd_f32(*(float32x2_t *)v156.f32, *(float32x2_t *)v156.f32);
        v158 = vrecpe_f32(v154);
        v159 = 4;
        do
        {
          v158 = vmul_f32(v158, vrecps_f32(v154, v158));
          --v159;
        }
        while (v159);
        v50 = vmlaq_n_f32(v232, v111, vmax_f32(vmin_f32(vmul_f32(v157, v158), _D8), 0).f32[0]);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v116.f32[0] == 0.0)
    {
      v50 = 0uLL;
      goto LABEL_27;
    }
    *(int8x8_t *)&v113.u32[2] = v114;
    v117 = (float32x2_t)vextq_s8((int8x16_t)v233, (int8x16_t)v233, 8uLL).u64[0];
    v118 = (float32x2_t)vextq_s8((int8x16_t)v234[0], (int8x16_t)v234[0], 8uLL).u64[0];
    v119 = (float32x2_t)vextq_s8((int8x16_t)v234[0], (int8x16_t)v234[0], 4uLL).u64[0];
    v120 = (float32x2_t)vextq_s8((int8x16_t)v233, (int8x16_t)v233, 4uLL).u64[0];
    v121 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v233.f32, v119), v120, *(float32x2_t *)v234[0].f32);
    *(int8x8_t *)v122.f32 = vext_s8(v121, (int8x8_t)vmls_f32(vmul_f32(v117, *(float32x2_t *)v234[0].f32), *(float32x2_t *)v233.f32, v118), 4uLL);
    v122.i64[1] = v121.u32[0];
    v123 = (float32x2_t)vextq_s8((int8x16_t)v232, (int8x16_t)v232, 8uLL).u64[0];
    v124 = (float32x2_t)vextq_s8((int8x16_t)v232, (int8x16_t)v232, 4uLL).u64[0];
    v125 = (int8x8_t)vmls_f32(vmul_f32(v124, *(float32x2_t *)v234[0].f32), v119, *(float32x2_t *)v232.f32);
    *(int8x8_t *)v126.f32 = vext_s8(v125, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v232.f32, v118), *(float32x2_t *)v234[0].f32, v123), 4uLL);
    v126.i64[1] = v125.u32[0];
    v127 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v232.f32, v120), v124, *(float32x2_t *)v233.f32);
    *(int8x8_t *)v128.f32 = vext_s8(v127, (int8x8_t)vmls_f32(vmul_f32(v123, *(float32x2_t *)v233.f32), *(float32x2_t *)v232.f32, v117), 4uLL);
    v128.i64[1] = v127.u32[0];
    v129 = vmulq_f32(v122, v113);
    v129.i64[0] = vpaddq_f32(v129, v129).u64[0];
    v130 = vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32);
    v131 = vmulq_f32(v126, v113);
    v131.i64[0] = vpaddq_f32(v131, v131).u64[0];
    v132 = vpadd_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32);
    v133 = vmulq_f32(v128, v113);
    v133.i64[0] = vpaddq_f32(v133, v133).u64[0];
    v134 = vpadd_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v133.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v132), (int8x8_t)vcgez_f32(v130)), (int8x8_t)vcgez_f32(v134)), 0), *(int8x8_t *)v232.f32).u32[0] == -1)
    {
      v160 = (int8x16_t)vmulq_f32(v232, v113);
      v161 = (float32x2_t)vextq_s8(v160, v160, 8uLL).u64[0];
      v162 = vrecpe_f32(v116);
      v163 = 4;
      v60 = v218;
      do
      {
        v162 = vmul_f32(v162, vrecps_f32(v116, v162));
        --v163;
      }
      while (v163);
      v164 = vpadd_f32(*(float32x2_t *)v160.i8, v161);
      v50 = vmulq_n_f32(v113, vmul_f32(v162, vpadd_f32(v164, v164)).f32[0]);
      v50.i32[3] = 0;
    }
    else
    {
      v135 = vnegq_f32(v232);
      v135.i32[3] = 0;
      v136 = vnegq_f32(v233);
      v136.i32[3] = 0;
      v137 = vmulq_f32(v135, v111);
      v137.i64[0] = vpaddq_f32(v137, v137).u64[0];
      v138 = vpadd_f32(*(float32x2_t *)v137.f32, *(float32x2_t *)v137.f32);
      v139 = vmulq_f32(v111, v136);
      v139.i64[0] = vpaddq_f32(v139, v139).u64[0];
      v140 = vpadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v138), (int8x8_t)vclez_f32(v140)), (int8x8_t)vclez_f32(v134)), 0), *(int8x8_t *)v232.f32).u32[0] == -1)
      {
        v165 = vsub_f32(v138, v140);
        v166 = vrecpe_f32(v165);
        v167 = 4;
        do
        {
          v166 = vmul_f32(v166, vrecps_f32(v165, v166));
          --v167;
        }
        while (v167);
        v152 = 0;
        v50 = vmlaq_n_f32(v232, v111, vmul_f32(v138, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v165), (float32x2_t)0x3400000034000000), (int8x8_t)v166, 0)).f32[0]);
        v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
        v168 = 2;
        v151 = 1;
      }
      else
      {
        v141 = vnegq_f32(v234[0]);
        v141.i32[3] = 0;
        v142 = vmulq_f32(v136, v112);
        v142.i64[0] = vpaddq_f32(v142, v142).u64[0];
        v143 = vpadd_f32(*(float32x2_t *)v142.f32, *(float32x2_t *)v142.f32);
        v144 = vmulq_f32(v111, v141);
        v144.i64[0] = vpaddq_f32(v144, v144).u64[0];
        v145 = vpadd_f32(*(float32x2_t *)v144.f32, *(float32x2_t *)v144.f32);
        v146 = vmulq_f32(v112, v141);
        v146.i64[0] = vpaddq_f32(v146, v146).u64[0];
        v147 = vpadd_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v143, v140), (int8x8_t)vcge_f32(v145, v147)), (int8x8_t)vclez_f32(v130)), 0), *(int8x8_t *)v232.f32).u32[0] == -1)
        {
          v169 = vsub_f32(v143, v140);
          v170 = vadd_f32(v169, vsub_f32(v145, v147));
          v171 = vrecpe_f32(v170);
          v172 = 4;
          do
          {
            v171 = vmul_f32(v171, vrecps_f32(v170, v171));
            --v172;
          }
          while (v172);
          v173 = (int8x16_t)vmlaq_n_f32(v233, vsubq_f32(v234[0], v233), vmul_f32(v169, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v170), (float32x2_t)0x3400000034000000), (int8x8_t)v171, 0)).f32[0]);
          v173.i64[1] = vextq_s8(v173, v173, 8uLL).u32[0];
          v168 = 2;
          v151 = 2;
          v152 = 1;
          v50 = (float32x4_t)v173;
        }
        else
        {
          v148 = vmulq_f32(v135, v112);
          v148.i64[0] = vpaddq_f32(v148, v148).u64[0];
          v149 = vpadd_f32(*(float32x2_t *)v148.f32, *(float32x2_t *)v148.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v149), (int8x8_t)vclez_f32(v147)), (int8x8_t)vclez_f32(v132)), 0), *(int8x8_t *)v232.f32).u32[0] == -1)
          {
            v174 = vsub_f32(v149, v147);
            v175 = vrecpe_f32(v174);
            v176 = 4;
            do
            {
              v175 = vmul_f32(v175, vrecps_f32(v174, v175));
              --v176;
            }
            while (v176);
            v152 = 0;
            v50 = vmlaq_n_f32(v232, v112, vmul_f32(v149, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v174), (float32x2_t)0x3400000034000000), (int8x8_t)v175, 0)).f32[0]);
            v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
            v151 = 2;
          }
          else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v149), (int8x8_t)vclez_f32(v138)), 0), *(int8x8_t *)v232.f32).u32[0] == -1)
          {
            v152 = 0;
            v151 = 1;
          }
          else
          {
            *(int16x4_t *)v50.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v140, v143), (int8x8_t)vcgez_f32(v140)), 0);
            *(int8x8_t *)v50.f32 = vuzp1_s8(*(int8x8_t *)v50.f32, *(int8x8_t *)v50.f32);
            v150 = v50.i32[0];
            v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v50, v211), 0), (int8x16_t)v233, (int8x16_t)v234[0]);
            v151 = 1;
            if (v150 == -1)
              v152 = 1;
            else
              v152 = 2;
          }
          v168 = v151;
        }
      }
      v60 = v218;
      v177 = *(&v232 + v151);
      v178 = *(&v228 + v152);
      v179 = *(&v228 + v151);
      v180 = *(&v224 + v152);
      v181 = *(&v224 + v151);
      v232 = *(&v232 + v152);
      v233 = v177;
      v228 = v178;
      v229 = v179;
      v224 = v180;
      v225 = v181;
      v221 = v168;
    }
LABEL_60:
    v61 = vnegq_f32(v50);
    v61.i32[3] = 0;
    v182 = vmulq_f32(v50, v50);
    v182.i64[0] = vpaddq_f32(v182, v182).u64[0];
    v183 = vpadd_f32(*(float32x2_t *)v182.f32, *(float32x2_t *)v182.f32);
    v184 = (int8x8_t)vcgt_f32(v57, v183);
    v59 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v184, (int8x8_t)0x100000001), 0);
    v58 = (int16x4_t)vand_s8((int8x8_t)vcgt_f32(v183, v54), v184);
    v57 = v183;
  }
  v185 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v57, v212), 0), v59), 0x1FuLL)), (int8x16_t)v61, v215);
  v186 = vmulq_f32(v185, v185);
  v186.i64[0] = vpaddq_f32(v186, v186).u64[0];
  v187 = vpadd_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32);
  v188 = vrsqrte_f32(v187);
  v189 = 4;
  do
  {
    v188 = vmul_f32(v188, vrsqrts_f32(vmul_f32(v188, v188), v187));
    --v189;
  }
  while (v189);
  v190 = vmul_f32(v187, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v187), 0), (int8x8_t)_D8, (int8x8_t)v188));
  v191 = vrecpe_f32(v190);
  v192 = 4;
  do
  {
    v191 = vmul_f32(v191, vrecps_f32(v190, v191));
    --v192;
  }
  while (v192);
  v193 = (int8x16_t)vdupq_n_s32(-*(char *)(a1->i64[1] + 32));
  v194 = (int8x16_t)vmulq_n_f32(v185, v191.f32[0]);
  v194.i32[3] = 0;
  v195 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v190), 0), v194));
  v195.i32[3] = 0;
  *a9 = v195;
  *a8 = v62;
  v196 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v59, 0x1FuLL)), v63, v60);
  v220 = v196;
  if (v221 == 3)
  {
    v222 = 0;
    v223 = 0;
    v217 = v195;
    v219 = v193;
    physx::Gu::barycentricCoordinates(&v220, &v232, &v233, v234, &v223, &v222);
    v195 = v217;
    v193 = v219;
    v191.i32[1] = v228.i32[1];
    v199 = vmulq_n_f32(vsubq_f32(v229, v228), v223.f32[0]);
    v199.i32[3] = 0;
    v200 = vmulq_n_f32(vsubq_f32(v230, v228), v222.f32[0]);
    v200.i32[3] = 0;
    v197 = vaddq_f32(v228, vaddq_f32(v199, v200));
    v198 = a10;
  }
  else if (v221 == 2)
  {
    v201 = vsubq_f32(v232, v196);
    v202 = vsubq_f32(vsubq_f32(v233, v196), v201);
    v203 = vmulq_f32(v202, v202);
    v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
    v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
    v205 = vrecpe_f32(v204);
    v206 = 4;
    v198 = a10;
    do
    {
      v205 = vmul_f32(v205, vrecps_f32(v204, v205));
      --v206;
    }
    while (v206);
    v207 = vnegq_f32(v201);
    v207.i32[3] = 0;
    v208 = vmulq_f32(v207, v202);
    v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
    v197 = vmlaq_n_f32(v228, vsubq_f32(v229, v228), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v204), (int8x8_t)v205, 0), vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32)).f32[0]);
    v191.i32[1] = 0;
    v197.i64[1] = vextq_s8((int8x16_t)v197, (int8x16_t)v197, 8uLL).u32[0];
  }
  else
  {
    v197 = 0uLL;
    v198 = a10;
    if (v221 == 1)
      v197 = v228;
  }
  v191.i32[0] = *(_DWORD *)(a1->i64[1] + 16);
  v209 = (int8x16_t)vmlsq_lane_f32(v197, v195, v191, 0);
  v209.i64[1] = vextq_s8(v209, v209, 8uLL).u32[0];
  *v198 = vbslq_s8(v193, v209, (int8x16_t)v197);
  return v65 != -1;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t *a4, int a5, _BYTE *a6, _BYTE *a7, _BYTE *a8, double a9, double a10, int8x8_t a11, uint64_t a12)
{
  _BYTE *v12;
  _BYTE *v13;
  float32x4_t *v16;
  const float *v17;
  float32x2_t v18;
  float32x4_t *v19;
  const float *v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  int32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  int v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  int v63;
  float32x2_t v64;
  float32x2_t v65;
  int v66;
  float32x4_t v67;
  float32x2_t v68;
  int32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int8x8_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  int8x8_t v81;
  float32x4_t v82;
  float32x2_t v83;
  float32x2_t v84;
  int8x8_t v85;
  float32x4_t v86;
  int8x8_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x4_t v91;
  float32x2_t v92;
  float32x4_t v93;
  float32x2_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x2_t v98;
  float32x4_t v99;
  float32x2_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x2_t v103;
  float32x4_t v104;
  float32x2_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x4_t v108;
  int32x4_t v109;
  __int32 v110;
  uint64_t v111;
  uint64_t v112;
  float32x4_t v113;
  float32x2_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x2_t v117;
  float32x2_t v118;
  int v119;
  int8x16_t v120;
  float32x2_t v121;
  float32x2_t v122;
  int v123;
  float32x2_t v124;
  float32x2_t v125;
  float32x2_t v126;
  int v127;
  unsigned int v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x2_t v131;
  int v132;
  int8x16_t v133;
  float32x2_t v134;
  float32x2_t v135;
  int v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  int v143;
  int v144;
  int v145;
  int v146;
  float32x4_t v147;
  float32x2_t v148;
  float32x2_t v149;
  int v150;
  float32x2_t v151;
  int v152;
  float32x4_t v153;
  float v154;
  __int128 v155;
  int32x4_t v156;
  float32x2_t i;
  float32x4_t v158;
  int32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  uint64_t v163;
  float32x4_t *v164;
  float32x4_t v165;
  int8x16_t v166;
  int32x4_t v167;
  float32x4_t v168;
  int8x16_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float v173;
  float32x2_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x2_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x2_t v180;
  float32x2_t v181;
  int v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  int8x8_t v186;
  float32x2_t v187;
  float32x2_t v188;
  float32x2_t v189;
  float32x2_t v190;
  float32x2_t v191;
  float32x2_t v192;
  int8x8_t v193;
  float32x4_t v194;
  float32x2_t v195;
  float32x2_t v196;
  int8x8_t v197;
  float32x4_t v198;
  int8x8_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x2_t v202;
  float32x4_t v203;
  float32x2_t v204;
  float32x4_t v205;
  float32x2_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x2_t v210;
  float32x4_t v211;
  float32x2_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x2_t v215;
  float32x4_t v216;
  float32x2_t v217;
  float32x4_t v218;
  float32x2_t v219;
  float32x4_t v220;
  float32x2_t v221;
  __int32 v222;
  uint64_t v223;
  uint64_t v224;
  float32x4_t v225;
  float32x2_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x2_t v229;
  float32x2_t v230;
  int v231;
  int8x16_t v232;
  float32x2_t v233;
  float32x2_t v234;
  int v235;
  float32x2_t v236;
  float32x2_t v237;
  float32x2_t v238;
  int v239;
  unsigned int v240;
  float32x2_t v241;
  float32x2_t v242;
  float32x2_t v243;
  int v244;
  int8x16_t v245;
  float32x2_t v246;
  float32x2_t v247;
  int v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  int v255;
  int v256;
  int v257;
  int v258;
  float32x4_t v259;
  float32x2_t v260;
  float32x2_t v261;
  int v262;
  float32x2_t v263;
  int v264;
  float32x4_t v265;
  int8x8_t v266;
  uint64_t v267;
  int *v268;
  int *v269;
  int v270;
  int v271;
  uint64_t result;
  int *v273;
  int *v274;
  int v275;
  int v276;
  float32x2_t v277;
  int *v278;
  int *v279;
  uint64_t v280;
  int v281;
  int v282;
  uint64_t v283;
  float32x4_t v284;
  float32x4_t v285;
  int v286;
  float32x2_t v287;
  uint64_t v288;
  int *v289;
  int *v290;
  int v291;
  int v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x2_t v303;
  float32x2_t v304;
  int v305;
  float32x4_t v306;
  float32x4_t v307;
  float v308;
  int8x16_t v309;
  int8x16_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x2_t v319;
  float32x2_t v320;
  int v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x2_t v324;
  int v325;
  float32x4_t v326;
  int8x16_t v327;
  int8x16_t v328;
  int32x4_t v329;
  float32x2_t v330;
  float v331;
  float32x2_t v334;
  float32x4_t v335;
  float32x4_t v336;
  int v337;
  float32x2_t v338;
  float32x4_t v339;
  float32x4_t v340;
  unsigned int v341;
  float32x4_t v342;
  float32x2_t v343;
  int v344;
  int v345;
  int v346;
  int v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356[2];
  uint64_t v357;

  v12 = a7;
  v13 = a6;
  v357 = *MEMORY[0x24BDAC8D0];
  v16 = (float32x4_t *)a1->i64[1];
  v17 = &v16[1].f32[1];
  v18 = vld1_dup_f32(v17);
  v19 = *(float32x4_t **)(a2 + 8);
  v20 = &v19[1].f32[1];
  v21 = vld1_dup_f32(v20);
  v22 = vmin_f32(v18, v21);
  v23 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  v24 = vmul_f32(v22, v23);
  v22.i32[0] = v16[1].i32[0];
  v23.i32[0] = v19[1].i32[0];
  a11.i32[0] = -v16[2].i8[0];
  v25 = (int32x2_t)vand_s8(a11, (int8x8_t)v22);
  v26 = (float32x2_t)vdup_lane_s32(v25, 0);
  v25.i32[0] = -v19[2].i8[0];
  v27 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v25, (int8x8_t)v23), 0);
  v330 = v26;
  v331 = v27.f32[0];
  v28 = vadd_f32(v26, v27);
  v29 = *a4;
  v342 = 0uLL;
  v341 = 0;
  v30 = *a8;
  __asm { FMOV            V9.2S, #1.0 }
  v334 = v28;
  if (!*a8)
  {
    v59 = vmulq_f32(*a3, *a3);
    v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
    v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32)), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_2260E5F10);
    v342 = v50;
    v60 = vmulq_f32(v50, v50);
    v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
    v61 = vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32);
    v62 = vrsqrte_f32(v61);
    v63 = 4;
    do
    {
      v62 = vmul_f32(v62, vrsqrts_f32(vmul_f32(v62, v62), v61));
      --v63;
    }
    while (v63);
    v64 = vmul_f32(v61, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v61), 0), (int8x8_t)_D9, (int8x8_t)v62));
    v65 = vrecpe_f32(v64);
    v66 = 4;
    do
    {
      v65 = vmul_f32(v65, vrecps_f32(v64, v65));
      --v66;
    }
    while (v66);
    v67 = vmulq_n_f32(v50, v65.f32[0]);
    v67.i32[3] = 0;
    v336 = v67;
    v68 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v69.i64[0] = -1;
    v69.i64[1] = -1;
    v70 = 0uLL;
    goto LABEL_54;
  }
  v36 = 0;
  v37 = (float32x4_t *)a1[1].i64[0];
  v38 = v16[3];
  v39 = v19[3];
  v40 = (int8x16_t)vnegq_f32(v38);
  v40.i32[3] = 0;
  v41 = (int8x16_t)vnegq_f32(v39);
  v41.i32[3] = 0;
  do
  {
    v42 = a6[v36];
    *(&v346 + v36) = v42;
    v43 = a7[v36];
    *(&v344 + v36) = v43;
    v44 = (float32x4_t)vbslq_s8(physx::boxVertexTable[v42], (int8x16_t)v38, v40);
    v45 = vmulq_n_f32(*v37, v44.f32[0]);
    v45.i32[3] = 0;
    v46 = vmulq_lane_f32(v37[1], *(float32x2_t *)v44.f32, 1);
    v46.i32[3] = 0;
    v47 = vmulq_laneq_f32(v37[2], v44, 2);
    v47.i32[3] = 0;
    v48 = vaddq_f32(v37[3], vaddq_f32(v47, vaddq_f32(v45, v46)));
    v49 = (float32x4_t)vbslq_s8(physx::boxVertexTable[v43], (int8x16_t)v39, v41);
    v50 = vsubq_f32(v48, v49);
    *(&v351 + v36) = v48;
    *(&v348 + v36) = v49;
    *(&v354 + v36++) = v50;
  }
  while (v30 != v36);
  v341 = v30;
  switch((_DWORD)v36)
  {
    case 4:
      v337 = v29;
      physx::Gu::closestPtPointTetrahedron(&v354, &v351, &v348, &v346, &v344, (int *)&v341);
      LODWORD(v29) = v337;
      v28.i32[0] = v334.i32[0];
      goto LABEL_49;
    case 3:
      v341 = 3;
      v50 = v354;
      v71 = vsubq_f32(v355, v354);
      v72 = vsubq_f32(v356[0], v354);
      v74 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v71.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v71, (int8x16_t)v71, 4uLL), *(float32x2_t *)v72.f32);
      *(int8x8_t *)v73.f32 = vext_s8(v74, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL), *(float32x2_t *)v72.f32), *(float32x2_t *)v71.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL)), 4uLL);
      v74.i32[1] = 0;
      v75 = vpadd_f32(vmul_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32), vmul_f32((float32x2_t)v74.u32[0], (float32x2_t)v74.u32[0]));
      v76 = vpadd_f32(v75, v75);
      if (v76.f32[0] > 0.00000011921)
      {
        if (v76.f32[0] == 0.0)
        {
          v50 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v73.u32[2] = v74;
          v77 = (float32x2_t)vextq_s8((int8x16_t)v355, (int8x16_t)v355, 8uLL).u64[0];
          v78 = (float32x2_t)vextq_s8((int8x16_t)v356[0], (int8x16_t)v356[0], 8uLL).u64[0];
          v79 = (float32x2_t)vextq_s8((int8x16_t)v356[0], (int8x16_t)v356[0], 4uLL).u64[0];
          v80 = (float32x2_t)vextq_s8((int8x16_t)v355, (int8x16_t)v355, 4uLL).u64[0];
          v81 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v355.f32, v79), v80, *(float32x2_t *)v356[0].f32);
          *(int8x8_t *)v82.f32 = vext_s8(v81, (int8x8_t)vmls_f32(vmul_f32(v77, *(float32x2_t *)v356[0].f32), *(float32x2_t *)v355.f32, v78), 4uLL);
          v82.i64[1] = v81.u32[0];
          v83 = (float32x2_t)vextq_s8((int8x16_t)v354, (int8x16_t)v354, 8uLL).u64[0];
          v84 = (float32x2_t)vextq_s8((int8x16_t)v354, (int8x16_t)v354, 4uLL).u64[0];
          v85 = (int8x8_t)vmls_f32(vmul_f32(v84, *(float32x2_t *)v356[0].f32), v79, *(float32x2_t *)v354.f32);
          *(int8x8_t *)v86.f32 = vext_s8(v85, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v354.f32, v78), *(float32x2_t *)v356[0].f32, v83), 4uLL);
          v86.i64[1] = v85.u32[0];
          v87 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v354.f32, v80), v84, *(float32x2_t *)v355.f32);
          *(int8x8_t *)v88.f32 = vext_s8(v87, (int8x8_t)vmls_f32(vmul_f32(v83, *(float32x2_t *)v355.f32), *(float32x2_t *)v354.f32, v77), 4uLL);
          v88.i64[1] = v87.u32[0];
          v89 = vmulq_f32(v82, v73);
          v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
          v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
          v91 = vmulq_f32(v86, v73);
          v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
          v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
          v93 = vmulq_f32(v88, v73);
          v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
          v94 = vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v92), (int8x8_t)vcgez_f32(v90)), (int8x8_t)vcgez_f32(v94)), 0), *(int8x8_t *)v354.f32).u32[0] == -1)
          {
            v120 = (int8x16_t)vmulq_f32(v354, v73);
            v121 = (float32x2_t)vextq_s8(v120, v120, 8uLL).u64[0];
            v122 = vrecpe_f32(v76);
            v123 = 4;
            do
            {
              v122 = vmul_f32(v122, vrecps_f32(v76, v122));
              --v123;
            }
            while (v123);
            v124 = vpadd_f32(*(float32x2_t *)v120.i8, v121);
            v50 = vmulq_n_f32(v73, vmul_f32(v122, vpadd_f32(v124, v124)).f32[0]);
            v50.i32[3] = 0;
          }
          else
          {
            v95 = vnegq_f32(v354);
            v95.i32[3] = 0;
            v96 = vnegq_f32(v355);
            v96.i32[3] = 0;
            v97 = vmulq_f32(v95, v71);
            v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
            v98 = vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32);
            v99 = vmulq_f32(v71, v96);
            v99.i64[0] = vpaddq_f32(v99, v99).u64[0];
            v100 = vpadd_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v99.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v98), (int8x8_t)vclez_f32(v100)), (int8x8_t)vclez_f32(v94)), 0), *(int8x8_t *)v354.f32).u32[0] == -1)
            {
              v125 = vsub_f32(v98, v100);
              v126 = vrecpe_f32(v125);
              v127 = 4;
              do
              {
                v126 = vmul_f32(v126, vrecps_f32(v125, v126));
                --v127;
              }
              while (v127);
              v112 = 0;
              v50 = vmlaq_n_f32(v354, v71, vmul_f32(v98, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v125), (float32x2_t)0x3400000034000000), (int8x8_t)v126, 0)).f32[0]);
              v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
              v128 = 2;
              v111 = 1;
            }
            else
            {
              v101 = vnegq_f32(v356[0]);
              v101.i32[3] = 0;
              v102 = vmulq_f32(v96, v72);
              v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
              v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
              v104 = vmulq_f32(v71, v101);
              v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
              v105 = vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32);
              v106 = vmulq_f32(v72, v101);
              v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
              v107 = vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v103, v100), (int8x8_t)vcge_f32(v105, v107)), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v354.f32).u32[0] == -1)
              {
                v129 = vsub_f32(v103, v100);
                v130 = vadd_f32(v129, vsub_f32(v105, v107));
                v131 = vrecpe_f32(v130);
                v132 = 4;
                do
                {
                  v131 = vmul_f32(v131, vrecps_f32(v130, v131));
                  --v132;
                }
                while (v132);
                v133 = (int8x16_t)vmlaq_n_f32(v355, vsubq_f32(v356[0], v355), vmul_f32(v129, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v130), (float32x2_t)0x3400000034000000), (int8x8_t)v131, 0)).f32[0]);
                v133.i64[1] = vextq_s8(v133, v133, 8uLL).u32[0];
                v128 = 2;
                v112 = 1;
                v111 = 2;
                v50 = (float32x4_t)v133;
              }
              else
              {
                v108 = vmulq_f32(v95, v72);
                v109 = (int32x4_t)vpaddq_f32(v108, v108);
                *(float32x2_t *)v109.i8 = vpadd_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v109.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v109.i8), (int8x8_t)vclez_f32(v107)), (int8x8_t)vclez_f32(v92)), 0), *(int8x8_t *)v354.f32).u32[0] == -1)
                {
                  v134 = vsub_f32(*(float32x2_t *)v109.i8, v107);
                  v135 = vrecpe_f32(v134);
                  v136 = 4;
                  do
                  {
                    v135 = vmul_f32(v135, vrecps_f32(v134, v135));
                    --v136;
                  }
                  while (v136);
                  v112 = 0;
                  v50 = vmlaq_n_f32(v354, v72, vmul_f32(*(float32x2_t *)v109.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v134), (float32x2_t)0x3400000034000000), (int8x8_t)v135, 0)).f32[0]);
                  v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
                  v111 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v109.i8), (int8x8_t)vclez_f32(v98)), 0), *(int8x8_t *)v354.f32).u32[0] == -1)
                {
                  v112 = 0;
                  v111 = 1;
                }
                else
                {
                  *(int32x2_t *)v109.i8 = vcge_f32(v100, v103);
                  *(int16x4_t *)v50.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v109.i8, (int8x8_t)vcgez_f32(v100)), 0);
                  *(int8x8_t *)v50.f32 = vuzp1_s8(*(int8x8_t *)v50.f32, *(int8x8_t *)v50.f32);
                  v109.i32[0] = -1;
                  v110 = v50.i32[0];
                  v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v50, v109), 0), (int8x16_t)v355, (int8x16_t)v356[0]);
                  v111 = 1;
                  if (v110 == -1)
                    v112 = 1;
                  else
                    v112 = 2;
                }
                v128 = v111;
              }
            }
            v137 = *(&v354 + v112);
            v138 = *(&v354 + v111);
            v139 = *(&v351 + v112);
            v140 = *(&v351 + v111);
            v141 = *(&v348 + v112);
            v142 = *(&v348 + v111);
            v143 = *(&v346 + v112);
            v144 = *(&v346 + v111);
            v145 = *(&v344 + v112);
            v146 = *(&v344 + v111);
            v354 = v137;
            v355 = v138;
            v351 = v139;
            v352 = v140;
            v348 = v141;
            v349 = v142;
            v346 = v143;
            v347 = v144;
            v344 = v145;
            v345 = v146;
            v341 = v128;
          }
        }
        goto LABEL_49;
      }
      v341 = 2;
      v113 = vmulq_f32(v71, v71);
      v113.i64[0] = vpaddq_f32(v113, v113).u64[0];
      v114 = vpadd_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v114), 0), *(int8x8_t *)v354.f32).u32[0] != -1)
      {
        v115 = vnegq_f32(v354);
        v115.i32[3] = 0;
        v116 = vmulq_f32(v115, v71);
        v116.i64[0] = vpaddq_f32(v116, v116).u64[0];
        v117 = vpadd_f32(*(float32x2_t *)v116.f32, *(float32x2_t *)v116.f32);
        v118 = vrecpe_f32(v114);
        v119 = 4;
        do
        {
          v118 = vmul_f32(v118, vrecps_f32(v114, v118));
          --v119;
        }
        while (v119);
        v50 = vmlaq_n_f32(v354, v71, vmax_f32(vmin_f32(vmul_f32(v117, v118), _D9), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      v50 = v354;
      v51 = vsubq_f32(v355, v354);
      v52 = vmulq_f32(v51, v51);
      v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
      v53 = vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v53), 0), *(int8x8_t *)v354.f32).u32[0] != -1)
      {
        v54 = vnegq_f32(v354);
        v54.i32[3] = 0;
        v55 = vmulq_f32(v54, v51);
        v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
        v56 = vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32);
        v57 = vrecpe_f32(v53);
        v58 = 4;
        do
        {
          v57 = vmul_f32(v57, vrecps_f32(v53, v57));
          --v58;
        }
        while (v58);
        v50 = vmlaq_n_f32(v354, v51, vmax_f32(vmin_f32(vmul_f32(v56, v57), _D9), 0).f32[0]);
LABEL_31:
        v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  v341 = 1;
LABEL_49:
  v342 = v50;
  v147 = vmulq_f32(v50, v50);
  v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
  v148 = vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32);
  v149 = vrsqrte_f32(v148);
  v150 = 4;
  do
  {
    v149 = vmul_f32(v149, vrsqrts_f32(vmul_f32(v149, v149), v148));
    --v150;
  }
  while (v150);
  v68 = vmul_f32(v148, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v148), 0), (int8x8_t)_D9, (int8x8_t)v149));
  v151 = vrecpe_f32(v68);
  v152 = 4;
  do
  {
    v151 = vmul_f32(v151, vrecps_f32(v68, v151));
    --v152;
  }
  while (v152);
  v153 = vmulq_n_f32(v50, v151.f32[0]);
  v153.i32[3] = 0;
  v336 = v153;
  v69 = vdupq_lane_s32(vcgt_f32(v68, v24), 0);
  v70 = v50;
LABEL_54:
  v154 = *(float *)&v29 + v28.f32[0];
  v155 = xmmword_22611E0A0;
  LODWORD(v155) = -1;
  v329 = (int32x4_t)v155;
  v156.i64[0] = -1;
  v156.i64[1] = -1;
  for (i = v68; ; i = v174)
  {
    v158 = v50;
    v159.i64[0] = -1;
    v159.i64[1] = -1;
    *(int16x4_t *)v159.i8 = vmovn_s32(vceqq_s32(v69, v159));
    if (vuzp1_s8(*(int8x8_t *)v159.i8, *(int8x8_t *)v159.i8).u32[0] != -1)
      break;
    v335 = v158;
    v160 = vnegq_f32(v158);
    v160.i32[3] = 0;
    v338 = v68;
    v340 = v160;
    *(double *)v161.i64 = physx::Gu::RelativeConvex<physx::Gu::BoxV>::support(a1, (float32x2_t *)&v340, (unsigned __int32 *)&v346 + v341);
    v162 = v161;
    v163 = v341;
    v164 = *(float32x4_t **)(a2 + 8);
    v165 = v342;
    v166 = (int8x16_t)vcgtzq_f32(v342);
    v167 = (int32x4_t)vandq_s8(v166, (int8x16_t)xmmword_22611E0A0);
    v167.i64[0] = vpaddq_s32(v167, v167).u64[0];
    *(&v344 + v341) = vpadd_s32(*(int32x2_t *)v167.i8, *(int32x2_t *)v167.i8).u8[0] & 7;
    v168 = v164[3];
    v169 = (int8x16_t)vnegq_f32(v168);
    v169.i32[3] = 0;
    v170 = (float32x4_t)vbslq_s8(v166, (int8x16_t)v168, v169);
    v50 = vsubq_f32(v162, v170);
    v171 = v336;
    v172 = vmulq_f32(v336, v50);
    v172.i64[0] = vpaddq_f32(v172, v172).u64[0];
    v173 = vpadd_f32(*(float32x2_t *)v172.f32, *(float32x2_t *)v172.f32).f32[0];
    if (v173 > v154)
    {
      if (v13)
      {
        *a8 = v163;
        if ((_DWORD)v163)
        {
          v273 = &v344;
          v274 = &v346;
          do
          {
            v275 = *v274++;
            *v13++ = v275;
            v276 = *v273++;
            *v12++ = v276;
            --v163;
          }
          while (v163);
        }
      }
      return 0;
    }
    v174 = v338;
    if (v173 > (float)(0.99977 * v338.f32[0]))
    {
      v277 = v334;
      if (!v13)
        goto LABEL_121;
      *a8 = v163;
      if ((_DWORD)v163)
      {
        v278 = &v344;
        v279 = &v346;
        v280 = v163;
        do
        {
          v281 = *v279++;
          *v13++ = v281;
          v282 = *v278++;
          *v12++ = v282;
          --v280;
        }
        while (v280);
LABEL_121:
        v283 = a12;
        *(float32x4_t *)(a12 + 32) = v336;
        if ((_DWORD)v163 != 3)
        {
          if ((_DWORD)v163 != 2)
          {
            v284 = 0uLL;
            v285 = 0uLL;
            v286 = a5;
            if ((_DWORD)v163 == 1)
            {
              v284 = v351;
              v285 = v348;
              if (!a5)
                goto LABEL_142;
LABEL_138:
              *(float32x4_t *)v283 = v284;
              *(float32x4_t *)(v283 + 16) = v285;
              result = 2;
              *(float32x2_t *)(v283 + 64) = v174;
              return result;
            }
LABEL_137:
            if (!v286)
              goto LABEL_142;
            goto LABEL_138;
          }
          v300 = vsubq_f32(v354, v165);
          v301 = vsubq_f32(vsubq_f32(v355, v165), v300);
          v302 = vmulq_f32(v301, v301);
          v302.i64[0] = vpaddq_f32(v302, v302).u64[0];
          v303 = vpadd_f32(*(float32x2_t *)v302.f32, *(float32x2_t *)v302.f32);
          v304 = vrecpe_f32(v303);
          v305 = 4;
          do
          {
            v304 = vmul_f32(v304, vrecps_f32(v303, v304));
            --v305;
          }
          while (v305);
          v306 = vnegq_f32(v300);
          v306.i32[3] = 0;
          v307 = vmulq_f32(v306, v301);
          v307.i64[0] = vpaddq_f32(v307, v307).u64[0];
          LODWORD(v308) = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v303), (int8x8_t)v304, 0), vpadd_f32(*(float32x2_t *)v307.f32, *(float32x2_t *)v307.f32)).u32[0];
          v284 = vmlaq_n_f32(v351, vsubq_f32(v352, v351), v308);
          v284.i64[1] = vextq_s8((int8x16_t)v284, (int8x16_t)v284, 8uLL).u32[0];
          v285 = vmlaq_n_f32(v348, vsubq_f32(v349, v348), v308);
          v285.i64[1] = vextq_s8((int8x16_t)v285, (int8x16_t)v285, 8uLL).u32[0];
          if (a5)
            goto LABEL_138;
LABEL_142:
          v309 = (int8x16_t)vmlsq_lane_f32(v284, v171, v330, 0);
          v309.i64[1] = vextq_s8(v309, v309, 8uLL).u32[0];
          v310 = (int8x16_t)vmlaq_n_f32(v285, v171, v331);
          v310.i64[1] = vextq_s8(v310, v310, 8uLL).u32[0];
          *(int8x16_t *)v283 = v309;
          *(int8x16_t *)(v283 + 16) = v310;
          *(float32x2_t *)(v283 + 64) = vsub_f32(v174, v277);
          return 2;
        }
        v340.i64[0] = 0;
        v343 = 0;
        physx::Gu::barycentricCoordinates(&v342, &v354, &v355, v356, (float32x2_t *)&v340, &v343);
        v171 = v336;
        v174 = v338;
        v277 = v334;
        v295 = vmulq_n_f32(vsubq_f32(v352, v351), v340.f32[0]);
        v295.i32[3] = 0;
        v296 = vmulq_n_f32(vsubq_f32(v353, v351), v343.f32[0]);
        v296.i32[3] = 0;
        v297 = vaddq_f32(v295, v296);
        v298 = vmulq_n_f32(vsubq_f32(v349, v348), v340.f32[0]);
        v298.i32[3] = 0;
        v284 = vaddq_f32(v351, v297);
        v299 = vmulq_n_f32(vsubq_f32(v350, v348), v343.f32[0]);
        v299.i32[3] = 0;
        v285 = vaddq_f32(v348, vaddq_f32(v298, v299));
      }
      else
      {
        v283 = a12;
        *(float32x4_t *)(a12 + 32) = v336;
        v284 = 0uLL;
        v285 = 0uLL;
      }
      v286 = a5;
      goto LABEL_137;
    }
    *(&v351 + v163) = v162;
    *(&v348 + v163) = v170;
    v341 = v163 + 1;
    *(&v354 + v163) = v50;
    if ((_DWORD)v163 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v354, &v351, &v348, &v346, &v344, (int *)&v341);
      v174 = v338;
LABEL_66:
      v70 = v335;
      goto LABEL_101;
    }
    if ((_DWORD)v163 == 2)
    {
      v50 = v354;
      v183 = vsubq_f32(v355, v354);
      v184 = vsubq_f32(v356[0], v354);
      v186 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v183.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v184, (int8x16_t)v184, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v183, (int8x16_t)v183, 4uLL), *(float32x2_t *)v184.f32);
      *(int8x8_t *)v185.f32 = vext_s8(v186, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v183, (int8x16_t)v183, 8uLL), *(float32x2_t *)v184.f32), *(float32x2_t *)v183.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v184, (int8x16_t)v184, 8uLL)), 4uLL);
      v186.i32[1] = 0;
      v341 = 3;
      v187 = vpadd_f32(vmul_f32(*(float32x2_t *)v185.f32, *(float32x2_t *)v185.f32), vmul_f32((float32x2_t)v186.u32[0], (float32x2_t)v186.u32[0]));
      v188 = vpadd_f32(v187, v187);
      if (v188.f32[0] <= 0.00000011921)
      {
        v341 = 2;
        v225 = vmulq_f32(v183, v183);
        v225.i64[0] = vpaddq_f32(v225, v225).u64[0];
        v226 = vpadd_f32(*(float32x2_t *)v225.f32, *(float32x2_t *)v225.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v226), 0), *(int8x8_t *)v354.f32).u32[0] != -1)
        {
          v227 = vnegq_f32(v354);
          v227.i32[3] = 0;
          v228 = vmulq_f32(v227, v183);
          v228.i64[0] = vpaddq_f32(v228, v228).u64[0];
          v229 = vpadd_f32(*(float32x2_t *)v228.f32, *(float32x2_t *)v228.f32);
          v230 = vrecpe_f32(v226);
          v231 = 4;
          v70 = v335;
          do
          {
            v230 = vmul_f32(v230, vrecps_f32(v226, v230));
            --v231;
          }
          while (v231);
          v50 = vmlaq_n_f32(v354, v183, vmax_f32(vmin_f32(vmul_f32(v229, v230), _D9), 0).f32[0]);
LABEL_81:
          v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
          goto LABEL_101;
        }
        v341 = 1;
        goto LABEL_66;
      }
      if (v188.f32[0] == 0.0)
      {
        v50 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v185.u32[2] = v186;
      v189 = (float32x2_t)vextq_s8((int8x16_t)v355, (int8x16_t)v355, 8uLL).u64[0];
      v190 = (float32x2_t)vextq_s8((int8x16_t)v356[0], (int8x16_t)v356[0], 8uLL).u64[0];
      v191 = (float32x2_t)vextq_s8((int8x16_t)v356[0], (int8x16_t)v356[0], 4uLL).u64[0];
      v192 = (float32x2_t)vextq_s8((int8x16_t)v355, (int8x16_t)v355, 4uLL).u64[0];
      v193 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v355.f32, v191), v192, *(float32x2_t *)v356[0].f32);
      *(int8x8_t *)v194.f32 = vext_s8(v193, (int8x8_t)vmls_f32(vmul_f32(v189, *(float32x2_t *)v356[0].f32), *(float32x2_t *)v355.f32, v190), 4uLL);
      v194.i64[1] = v193.u32[0];
      v195 = (float32x2_t)vextq_s8((int8x16_t)v354, (int8x16_t)v354, 8uLL).u64[0];
      v196 = (float32x2_t)vextq_s8((int8x16_t)v354, (int8x16_t)v354, 4uLL).u64[0];
      v197 = (int8x8_t)vmls_f32(vmul_f32(v196, *(float32x2_t *)v356[0].f32), v191, *(float32x2_t *)v354.f32);
      *(int8x8_t *)v198.f32 = vext_s8(v197, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v354.f32, v190), *(float32x2_t *)v356[0].f32, v195), 4uLL);
      v198.i64[1] = v197.u32[0];
      v199 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v354.f32, v192), v196, *(float32x2_t *)v355.f32);
      *(int8x8_t *)v200.f32 = vext_s8(v199, (int8x8_t)vmls_f32(vmul_f32(v195, *(float32x2_t *)v355.f32), *(float32x2_t *)v354.f32, v189), 4uLL);
      v200.i64[1] = v199.u32[0];
      v201 = vmulq_f32(v194, v185);
      v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
      v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
      v203 = vmulq_f32(v198, v185);
      v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
      v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
      v205 = vmulq_f32(v200, v185);
      v205.i64[0] = vpaddq_f32(v205, v205).u64[0];
      v206 = vpadd_f32(*(float32x2_t *)v205.f32, *(float32x2_t *)v205.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v204), (int8x8_t)vcgez_f32(v202)), (int8x8_t)vcgez_f32(v206)), 0), *(int8x8_t *)v354.f32).u32[0] != -1)
      {
        v207 = vnegq_f32(v354);
        v207.i32[3] = 0;
        v208 = vnegq_f32(v355);
        v208.i32[3] = 0;
        v209 = vmulq_f32(v207, v183);
        v209.i64[0] = vpaddq_f32(v209, v209).u64[0];
        v210 = vpadd_f32(*(float32x2_t *)v209.f32, *(float32x2_t *)v209.f32);
        v211 = vmulq_f32(v183, v208);
        v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
        v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v210), (int8x8_t)vclez_f32(v212)), (int8x8_t)vclez_f32(v206)), 0), *(int8x8_t *)v354.f32).u32[0] == -1)
        {
          v237 = vsub_f32(v210, v212);
          v238 = vrecpe_f32(v237);
          v239 = 4;
          do
          {
            v238 = vmul_f32(v238, vrecps_f32(v237, v238));
            --v239;
          }
          while (v239);
          v224 = 0;
          v50 = vmlaq_n_f32(v354, v183, vmul_f32(v210, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v237), (float32x2_t)0x3400000034000000), (int8x8_t)v238, 0)).f32[0]);
          v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
          v240 = 2;
          v223 = 1;
        }
        else
        {
          v213 = vnegq_f32(v356[0]);
          v213.i32[3] = 0;
          v214 = vmulq_f32(v208, v184);
          v214.i64[0] = vpaddq_f32(v214, v214).u64[0];
          v215 = vpadd_f32(*(float32x2_t *)v214.f32, *(float32x2_t *)v214.f32);
          v216 = vmulq_f32(v183, v213);
          v216.i64[0] = vpaddq_f32(v216, v216).u64[0];
          v217 = vpadd_f32(*(float32x2_t *)v216.f32, *(float32x2_t *)v216.f32);
          v218 = vmulq_f32(v184, v213);
          v218.i64[0] = vpaddq_f32(v218, v218).u64[0];
          v219 = vpadd_f32(*(float32x2_t *)v218.f32, *(float32x2_t *)v218.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v215, v212), (int8x8_t)vcge_f32(v217, v219)), (int8x8_t)vclez_f32(v202)), 0), *(int8x8_t *)v354.f32).u32[0] != -1)
          {
            v220 = vmulq_f32(v207, v184);
            v220.i64[0] = vpaddq_f32(v220, v220).u64[0];
            v221 = vpadd_f32(*(float32x2_t *)v220.f32, *(float32x2_t *)v220.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v221), (int8x8_t)vclez_f32(v219)), (int8x8_t)vclez_f32(v204)), 0), *(int8x8_t *)v354.f32).u32[0] == -1)
            {
              v246 = vsub_f32(v221, v219);
              v247 = vrecpe_f32(v246);
              v248 = 4;
              v70 = v335;
              do
              {
                v247 = vmul_f32(v247, vrecps_f32(v246, v247));
                --v248;
              }
              while (v248);
              v224 = 0;
              v50 = vmlaq_n_f32(v354, v184, vmul_f32(v221, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v246), (float32x2_t)0x3400000034000000), (int8x8_t)v247, 0)).f32[0]);
              v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
              v223 = 2;
              v240 = 2;
            }
            else
            {
              v70 = v335;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v221), (int8x8_t)vclez_f32(v210)), 0), *(int8x8_t *)v354.f32).u32[0] == -1)
              {
                v224 = 0;
                v223 = 1;
              }
              else
              {
                *(int16x4_t *)v50.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v212, v215), (int8x8_t)vcgez_f32(v212)), 0);
                *(int8x8_t *)v50.f32 = vuzp1_s8(*(int8x8_t *)v50.f32, *(int8x8_t *)v50.f32);
                v222 = v50.i32[0];
                v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v50, v329), 0), (int8x16_t)v355, (int8x16_t)v356[0]);
                v223 = 1;
                if (v222 == -1)
                  v224 = 1;
                else
                  v224 = 2;
              }
              v240 = 1;
            }
            goto LABEL_100;
          }
          v241 = vsub_f32(v215, v212);
          v242 = vadd_f32(v241, vsub_f32(v217, v219));
          v243 = vrecpe_f32(v242);
          v244 = 4;
          do
          {
            v243 = vmul_f32(v243, vrecps_f32(v242, v243));
            --v244;
          }
          while (v244);
          v245 = (int8x16_t)vmlaq_n_f32(v355, vsubq_f32(v356[0], v355), vmul_f32(v241, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v242), (float32x2_t)0x3400000034000000), (int8x8_t)v243, 0)).f32[0]);
          v245.i64[1] = vextq_s8(v245, v245, 8uLL).u32[0];
          v223 = 2;
          v50 = (float32x4_t)v245;
          v224 = 1;
          v240 = 2;
        }
        v70 = v335;
LABEL_100:
        v249 = *(&v354 + v224);
        v250 = *(&v354 + v223);
        v251 = *(&v351 + v224);
        v252 = *(&v351 + v223);
        v253 = *(&v348 + v224);
        v254 = *(&v348 + v223);
        v255 = *(&v346 + v224);
        v256 = *(&v346 + v223);
        v257 = *(&v344 + v224);
        v258 = *(&v344 + v223);
        v354 = v249;
        v355 = v250;
        v351 = v251;
        v352 = v252;
        v348 = v253;
        v349 = v254;
        v346 = v255;
        v347 = v256;
        v344 = v257;
        v345 = v258;
        v341 = v240;
        goto LABEL_101;
      }
      v232 = (int8x16_t)vmulq_f32(v354, v185);
      v233 = (float32x2_t)vextq_s8(v232, v232, 8uLL).u64[0];
      v234 = vrecpe_f32(v188);
      v235 = 4;
      v70 = v335;
      do
      {
        v234 = vmul_f32(v234, vrecps_f32(v188, v234));
        --v235;
      }
      while (v235);
      v236 = vpadd_f32(*(float32x2_t *)v232.i8, v233);
      v50 = vmulq_n_f32(v185, vmul_f32(v234, vpadd_f32(v236, v236)).f32[0]);
      v50.i32[3] = 0;
    }
    else
    {
      v70 = v335;
      if ((_DWORD)v163 == 1)
      {
        v50 = v354;
        v175 = vsubq_f32(v355, v354);
        v176 = vmulq_f32(v175, v175);
        v176.i64[0] = vpaddq_f32(v176, v176).u64[0];
        v177 = vpadd_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v177), 0), *(int8x8_t *)v354.f32).u32[0] == -1)
        {
          v341 = 1;
          goto LABEL_101;
        }
        v178 = vnegq_f32(v354);
        v178.i32[3] = 0;
        v179 = vmulq_f32(v178, v175);
        v179.i64[0] = vpaddq_f32(v179, v179).u64[0];
        v180 = vpadd_f32(*(float32x2_t *)v179.f32, *(float32x2_t *)v179.f32);
        v181 = vrecpe_f32(v177);
        v182 = 4;
        do
        {
          v181 = vmul_f32(v181, vrecps_f32(v177, v181));
          --v182;
        }
        while (v182);
        v50 = vmlaq_n_f32(v354, v175, vmax_f32(vmin_f32(vmul_f32(v180, v181), _D9), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    v342 = v50;
    v259 = vmulq_f32(v50, v50);
    v259.i64[0] = vpaddq_f32(v259, v259).u64[0];
    v260 = vpadd_f32(*(float32x2_t *)v259.f32, *(float32x2_t *)v259.f32);
    v261 = vrsqrte_f32(v260);
    v262 = 4;
    do
    {
      v261 = vmul_f32(v261, vrsqrts_f32(vmul_f32(v261, v261), v260));
      --v262;
    }
    while (v262);
    v68 = vmul_f32(v260, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v260), 0), (int8x8_t)_D9, (int8x8_t)v261));
    v263 = vrecpe_f32(v68);
    v264 = 4;
    do
    {
      v263 = vmul_f32(v263, vrecps_f32(v68, v263));
      --v264;
    }
    while (v264);
    v265 = vmulq_n_f32(v50, v263.f32[0]);
    v265.i32[3] = 0;
    v336 = v265;
    *(int32x2_t *)v265.f32 = vcgt_f32(v174, v68);
    v156 = vdupq_lane_s32(*(int32x2_t *)v265.f32, 0);
    v69 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v68, v24), *(int8x8_t *)v265.f32), 0);
  }
  v266 = (int8x8_t)vmovn_s32(vceqzq_s32(v156));
  v267 = v341;
  if (vuzp1_s8(v266, v266).u32[0] != -1)
  {
    if (v13)
    {
      *a8 = v341;
      if ((_DWORD)v267)
      {
        v268 = &v344;
        v269 = &v346;
        do
        {
          v270 = *v269++;
          *v13++ = v270;
          v271 = *v268++;
          *v12++ = v271;
          --v267;
        }
        while (v267);
      }
    }
    return 5;
  }
  v287 = v334;
  if (v13)
  {
    v288 = v341 - 1;
    *a8 = v341 - 1;
    if ((_DWORD)v267 != 1)
    {
      v289 = &v344;
      v290 = &v346;
      do
      {
        v291 = *v290++;
        *v13++ = v291;
        v292 = *v289++;
        *v12++ = v292;
        --v288;
      }
      while (v288);
      goto LABEL_130;
    }
LABEL_133:
    v293 = v351;
    v294 = v348;
  }
  else
  {
LABEL_130:
    v342 = v70;
    if ((_DWORD)v267 == 3)
    {
      v340.i64[0] = 0;
      v343 = 0;
      v339 = v70;
      physx::Gu::barycentricCoordinates(&v342, &v354, &v355, v356, (float32x2_t *)&v340, &v343);
      v287 = v334;
      v311 = vmulq_n_f32(vsubq_f32(v352, v351), v340.f32[0]);
      v311.i32[3] = 0;
      v312 = vmulq_n_f32(vsubq_f32(v353, v351), v343.f32[0]);
      v312.i32[3] = 0;
      v313 = vaddq_f32(v311, v312);
      v314 = vmulq_n_f32(vsubq_f32(v349, v348), v340.f32[0]);
      v314.i32[3] = 0;
      v293 = vaddq_f32(v351, v313);
      v315 = vmulq_n_f32(vsubq_f32(v350, v348), v343.f32[0]);
      v70 = v339;
      v315.i32[3] = 0;
      v294 = vaddq_f32(v348, vaddq_f32(v314, v315));
    }
    else if ((_DWORD)v267 == 2)
    {
      v316 = vsubq_f32(v354, v70);
      v317 = vsubq_f32(vsubq_f32(v355, v70), v316);
      v318 = vmulq_f32(v317, v317);
      v318.i64[0] = vpaddq_f32(v318, v318).u64[0];
      v319 = vpadd_f32(*(float32x2_t *)v318.f32, *(float32x2_t *)v318.f32);
      v320 = vrecpe_f32(v319);
      v321 = 4;
      do
      {
        v320 = vmul_f32(v320, vrecps_f32(v319, v320));
        --v321;
      }
      while (v321);
      v322 = vnegq_f32(v316);
      v322.i32[3] = 0;
      v323 = vmulq_f32(v322, v317);
      v323.i64[0] = vpaddq_f32(v323, v323).u64[0];
      v322.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v319), (int8x8_t)v320, 0), vpadd_f32(*(float32x2_t *)v323.f32, *(float32x2_t *)v323.f32)).u32[0];
      v293 = vmlaq_n_f32(v351, vsubq_f32(v352, v351), v322.f32[0]);
      v293.i64[1] = vextq_s8((int8x16_t)v293, (int8x16_t)v293, 8uLL).u32[0];
      v294 = vmlaq_n_f32(v348, vsubq_f32(v349, v348), v322.f32[0]);
      v294.i64[1] = vextq_s8((int8x16_t)v294, (int8x16_t)v294, 8uLL).u32[0];
    }
    else
    {
      v293 = 0uLL;
      v294 = 0uLL;
      if ((_DWORD)v267 == 1)
        goto LABEL_133;
    }
  }
  v324 = vrecpe_f32(i);
  v325 = 4;
  do
  {
    v324 = vmul_f32(v324, vrecps_f32(i, v324));
    --v325;
  }
  while (v325);
  v326 = vmulq_n_f32(v70, v324.f32[0]);
  v326.i32[3] = 0;
  *(float32x4_t *)(a12 + 32) = v326;
  *(float32x4_t *)(a12 + 48) = v336;
  if (a5)
  {
    *(float32x4_t *)a12 = v293;
    *(float32x4_t *)(a12 + 16) = v294;
    *(float32x2_t *)(a12 + 64) = i;
  }
  else
  {
    v327 = (int8x16_t)vmlsq_lane_f32(v293, v326, v330, 0);
    v327.i64[1] = vextq_s8(v327, v327, 8uLL).u32[0];
    v328 = (int8x16_t)vmlaq_n_f32(v294, v326, v331);
    v328.i64[1] = vextq_s8(v328, v328, 8uLL).u32[0];
    *(int8x16_t *)a12 = v327;
    *(int8x16_t *)(a12 + 16) = v328;
    *(float32x2_t *)(a12 + 64) = vsub_f32(i, v287);
    if ((vcge_f32(v287, i).u32[0] & 1) != 0)
      return 2;
  }
  return 4;
}

__n128 physx::Gu::LocalConvex<physx::Gu::TriangleV>::supportPoint(uint64_t a1, int a2)
{
  return *(__n128 *)(*(_QWORD *)(a1 + 8) + 16 * a2 + 48);
}

double physx::Gu::LocalConvex<physx::Gu::TriangleV>::support(uint64_t a1, float32x4_t *a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  double result;

  v2 = *(float32x4_t **)(a1 + 8);
  v3 = v2[3];
  v4 = v2[4];
  v5 = v2[5];
  v6 = vmulq_f32(v3, *a2);
  v6.i64[0] = vpaddq_f32(v6, v6).u64[0];
  *(float32x2_t *)v6.f32 = vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32);
  v7 = vmulq_f32(v4, *a2);
  v7.i64[0] = vpaddq_f32(v7, v7).u64[0];
  *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32);
  v8 = vmulq_f32(v5, *a2);
  v8.i64[0] = vpaddq_f32(v8, v8).u64[0];
  *(float32x2_t *)v8.f32 = vpadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32);
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v8.f32), (int8x8_t)vcgt_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v7.f32)), 0), (int8x16_t)v3, vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v8.f32), 0), (int8x16_t)v4, (int8x16_t)v5)).u64[0];
  return result;
}

double physx::Gu::LocalConvex<physx::Gu::TriangleV>::support(uint64_t a1, float32x4_t *a2, unsigned __int32 *a3)
{
  float32x4_t *v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  double result;

  v3 = *(float32x4_t **)(a1 + 8);
  v4 = v3[3];
  v5 = v3[4];
  v6 = v3[5];
  v7 = vmulq_f32(v4, *a2);
  v7.i64[0] = vpaddq_f32(v7, v7).u64[0];
  *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32);
  v8 = vmulq_f32(v5, *a2);
  v8.i64[0] = vpaddq_f32(v8, v8).u64[0];
  *(float32x2_t *)v8.f32 = vpadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32);
  v9 = vmulq_f32(v6, *a2);
  v10 = (int8x16_t)vpaddq_f32(v9, v9);
  *(float32x2_t *)v10.i8 = vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8);
  *(int8x8_t *)v7.f32 = vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v10.i8), (int8x8_t)vcgt_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v8.f32));
  *(int32x2_t *)v10.i8 = vcgt_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v10.i8);
  v11 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 0);
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  v13 = vandq_s8(v10, v12);
  v12.i64[0] = 0x200000002;
  v12.i64[1] = 0x200000002;
  *a3 = vorrq_s8(v13, vbicq_s8(v12, v11)).u32[0] & ~v7.i32[0];
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 0), (int8x16_t)v4, vbslq_s8(v11, (int8x16_t)v5, (int8x16_t)v6)).u64[0];
  return result;
}

int32x2_t physx::Gu::LocalConvex<physx::Gu::TriangleV>::getSweepMargin()
{
  return vdup_n_s32(0x7F7FFFFFu);
}

__n128 physx::Gu::LocalConvex<physx::Gu::TriangleV>::getCenter(uint64_t a1)
{
  return *(__n128 *)*(_QWORD *)(a1 + 8);
}

void physx::Gu::LocalConvex<physx::Gu::TriangleV>::~LocalConvex()
{
  JUMPOUT(0x2276933B8);
}

BOOL physx::Gu::gjkRaycast<physx::Gu::LocalConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(uint64_t a1, uint64_t a2, float32x4_t *a3, int32x2_t a4, uint64_t a5, float32x4_t *a6, float32x4_t *a7, float32x2_t *a8, float32x4_t *a9, int8x16_t *a10)
{
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  int v21;
  float32x2_t v27;
  float32x2_t v28;
  int v29;
  float32x2_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t *v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x2_t v52;
  int16x4_t v53;
  int8x16_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x2_t v57;
  int8x16_t v58;
  int8x8_t v59;
  unsigned __int32 v60;
  float32x4_t v61;
  float32x2_t v62;
  float32x2_t v63;
  int v64;
  float32x2_t v65;
  float32x2_t v66;
  int v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x2_t v84;
  float32x4_t v85;
  float32x2_t v86;
  float32x2_t v87;
  int v88;
  float32x2_t v89;
  float32x4_t v90;
  float32x4_t v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x2_t v98;
  float32x2_t v99;
  int v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int8x8_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;
  int8x8_t v111;
  float32x4_t v112;
  float32x2_t v113;
  float32x2_t v114;
  int8x8_t v115;
  float32x4_t v116;
  int8x8_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x2_t v120;
  float32x4_t v121;
  float32x2_t v122;
  float32x4_t v123;
  float32x2_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x2_t v128;
  float32x4_t v129;
  float32x2_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x2_t v133;
  float32x4_t v134;
  float32x2_t v135;
  float32x4_t v136;
  float32x2_t v137;
  float32x4_t v138;
  float32x2_t v139;
  __int32 v140;
  uint64_t v141;
  uint64_t v142;
  float32x4_t v143;
  float32x2_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x2_t v147;
  float32x2_t v148;
  int v149;
  int8x16_t v150;
  float32x2_t v151;
  float32x2_t v152;
  int v153;
  float32x2_t v154;
  float32x2_t v155;
  float32x2_t v156;
  int v157;
  unsigned int v158;
  float32x2_t v159;
  float32x2_t v160;
  float32x2_t v161;
  int v162;
  int8x16_t v163;
  float32x2_t v164;
  float32x2_t v165;
  int v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x2_t v173;
  int8x8_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x2_t v177;
  float32x2_t v178;
  int v179;
  float32x2_t v180;
  float32x2_t v181;
  int v182;
  int8x16_t v183;
  int8x16_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x2_t v193;
  float32x2_t v194;
  int v195;
  float32x4_t v196;
  float32x4_t v197;
  int8x16_t v198;
  int32x4_t v200;
  float32x2_t v201;
  int8x16_t v204;
  float32x4_t v205;
  float32x4_t v206;
  int8x16_t v207;
  int8x16_t v208;
  float32x4_t v209;
  unsigned int v210;
  float32x2_t v211;
  float32x2_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  __int128 v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  __int128 v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223[2];
  uint64_t v224;

  v224 = *MEMORY[0x24BDAC8D0];
  v14 = vmlaq_f32(*a6, (float32x4_t)0, *a7);
  LODWORD(v15) = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u32[0];
  v210 = 1;
  v16 = vmulq_f32(*a3, *a3);
  v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
  v17 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32), (float32x2_t)0x3400000034000000), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_2260E5F10);
  v18 = vmulq_f32(v17, v17);
  v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
  v19 = vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32);
  v20 = vrsqrte_f32(v19);
  v21 = 4;
  do
  {
    v20 = vmul_f32(v20, vrsqrts_f32(vmul_f32(v20, v20), v19));
    --v21;
  }
  while (v21);
  HIDWORD(v15) = 0;
  __asm { FMOV            V8.2S, #1.0 }
  v27 = vmul_f32(v19, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v19), 0), (int8x8_t)_D8, (int8x8_t)v20));
  v28 = vrecpe_f32(v27);
  v29 = 4;
  do
  {
    v28 = vmul_f32(v28, vrecps_f32(v27, v28));
    --v29;
  }
  while (v29);
  v30 = (float32x2_t)vdup_lane_s32(a4, 0);
  v14.i64[1] = v15;
  v31 = vmulq_n_f32(v17, v28.f32[0]);
  v31.i32[3] = 0;
  v32 = vnegq_f32(v31);
  v32.i32[3] = 0;
  v33 = *(float32x4_t **)(a1 + 8);
  v34 = v33[3];
  v35 = v33[4];
  v36 = v33[5];
  v37 = vmulq_f32(v32, v34);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  *(float32x2_t *)v37.f32 = vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32);
  v38 = vmulq_f32(v32, v35);
  v38.i64[0] = vpaddq_f32(v38, v38).u64[0];
  *(float32x2_t *)v38.f32 = vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
  v39 = vmulq_f32(v32, v36);
  v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
  *(float32x2_t *)v39.f32 = vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32);
  v40 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v39.f32), (int8x8_t)vcgt_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v38.f32)), 0), (int8x16_t)v34, vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v39.f32), 0), (int8x16_t)v35, (int8x16_t)v36));
  v41 = *(float32x4_t **)(a2 + 8);
  v42 = v41[3];
  v43 = (int8x16_t)vnegq_f32(v42);
  v43.i32[3] = 0;
  v44 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v31), (int8x16_t)v42, v43);
  v45 = vsubq_f32(v40, v44);
  v221 = v45;
  v222 = 0u;
  memset(v223, 0, sizeof(v223));
  v217 = v40;
  v218 = 0u;
  v219 = 0u;
  v220 = 0u;
  v46 = vnegq_f32(v45);
  v46.i32[3] = 0;
  v41 = (float32x4_t *)((char *)v41 + 24);
  v213 = v44;
  v214 = 0u;
  v215 = 0u;
  v216 = 0u;
  *(float32x2_t *)v40.f32 = vld1_dup_f32(v41->f32);
  v47 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  *(float32x2_t *)v40.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v40.f32, v47), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  v48 = vadd_f32(v30, *(float32x2_t *)v40.f32);
  v49 = vmul_f32(v48, v48);
  v50 = vmulq_f32(v46, v46);
  v51 = vpaddq_f32(v50, v50);
  v52 = vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32);
  v201 = vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
  v53 = (int16x4_t)vcgt_f32(v52, v201);
  v54.i64[0] = -1;
  v54.i64[1] = -1;
  v51.i32[0] = -1;
  v200 = (int32x4_t)v51;
  v55 = (int8x16_t)v45;
  v204 = (int8x16_t)v46;
  v56 = v46;
  v57 = 0;
  while (1)
  {
    v58 = (int8x16_t)v45;
    v59 = (int8x8_t)vcltz_s16(vshl_n_s16(vdup_lane_s16(v53, 0), 0xFuLL));
    v60 = vuzp1_s8(v59, v59).u32[0];
    if (v60 != -1)
      break;
    v61 = vmulq_f32(v56, v56);
    v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
    v62 = vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32);
    v63 = vrsqrte_f32(v62);
    v64 = 4;
    do
    {
      v63 = vmul_f32(v63, vrsqrts_f32(vmul_f32(v63, v63), v62));
      --v64;
    }
    while (v64);
    v65 = vmul_f32(v62, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v62), 0), (int8x8_t)_D8, (int8x8_t)v63));
    v66 = vrecpe_f32(v65);
    v67 = 4;
    do
    {
      v66 = vmul_f32(v66, vrecps_f32(v65, v66));
      --v67;
    }
    while (v67);
    v68 = vmulq_n_f32(v56, v66.f32[0]);
    v68.i32[3] = 0;
    v69 = vnegq_f32(v68);
    v69.i32[3] = 0;
    v70 = *(float32x4_t **)(a1 + 8);
    v71 = v70[3];
    v72 = v70[4];
    v73 = v70[5];
    v74 = vmulq_f32(v68, v71);
    v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
    *(float32x2_t *)v74.f32 = vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32);
    v75 = vmulq_f32(v68, v72);
    v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
    *(float32x2_t *)v75.f32 = vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32);
    v76 = vmulq_f32(v68, v73);
    v76.i64[0] = vpaddq_f32(v76, v76).u64[0];
    *(float32x2_t *)v76.f32 = vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32);
    v77 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v76.f32), (int8x8_t)vcgt_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v75.f32)), 0), (int8x16_t)v71, vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v76.f32), 0), (int8x16_t)v72, (int8x16_t)v73));
    v78 = *(float32x4_t *)(*(_QWORD *)(a2 + 8) + 48);
    v79 = (int8x16_t)vnegq_f32(v78);
    v79.i32[3] = 0;
    v80 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v69), (int8x16_t)v78, v79);
    v81 = vaddq_f32(v14, v80);
    v45 = vsubq_f32(v77, v81);
    v82 = vnegq_f32(v45);
    v82.i32[3] = 0;
    v83 = vmulq_f32(v68, v82);
    v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
    v84 = vsub_f32(vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32), v48);
    if (v84.f32[0] > 0.0)
    {
      v85 = vmulq_f32(v68, *a7);
      v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
      v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
      if (v86.f32[0] >= 0.0)
        return v60 != -1;
      v87 = vrecpe_f32(v86);
      v88 = 4;
      do
      {
        v87 = vmul_f32(v87, vrecps_f32(v86, v87));
        --v88;
      }
      while (v88);
      v89 = vsub_f32(v57, vmul_f32(v84, v87));
      if ((vcgt_f32(v89, v57).u8[0] & 1) != 0)
      {
        if (v89.f32[0] > 1.0)
          return v60 != -1;
        v90 = vmlaq_n_f32(*a6, *a7, v89.f32[0]);
        v90.i64[1] = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u32[0];
        v91 = vsubq_f32(v90, v14);
        v213 = vaddq_f32(v213, v91);
        v214 = vaddq_f32(v214, v91);
        v215 = vaddq_f32(v215, v91);
        v221 = vsubq_f32(v217, v213);
        v222 = vsubq_f32(v218, v214);
        v223[0] = vsubq_f32(v219, v215);
        v81 = vaddq_f32(v80, v90);
        v45 = vsubq_f32(v77, v81);
        v52 = v47;
        v204 = (int8x16_t)v56;
        v14 = v90;
      }
      v57 = v89;
    }
    v207 = v58;
    v92 = v210;
    *(&v217 + v210) = v77;
    *(&v213 + v92) = v81;
    v210 = v92 + 1;
    *(&v221 + v92) = v45;
    if ((_DWORD)v92 == 3)
    {
      v205 = v14;
      physx::Gu::closestPtPointTetrahedron(&v221, &v217, &v213, (int *)&v210);
      v14 = v205;
LABEL_27:
      v55 = v207;
      goto LABEL_60;
    }
    if ((_DWORD)v92 != 2)
    {
      v55 = v58;
      if ((_DWORD)v92 != 1)
        goto LABEL_60;
      v45 = v221;
      v93 = vsubq_f32(v222, v221);
      v94 = vmulq_f32(v93, v93);
      v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
      v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v95), 0), *(int8x8_t *)v221.f32).u32[0] != -1)
      {
        v96 = vnegq_f32(v221);
        v96.i32[3] = 0;
        v97 = vmulq_f32(v96, v93);
        v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
        v98 = vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32);
        v99 = vrecpe_f32(v95);
        v100 = 4;
        do
        {
          v99 = vmul_f32(v99, vrecps_f32(v95, v99));
          --v100;
        }
        while (v100);
        v45 = vmlaq_n_f32(v221, v93, vmax_f32(vmin_f32(vmul_f32(v98, v99), _D8), 0).f32[0]);
LABEL_42:
        v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
        goto LABEL_60;
      }
LABEL_43:
      v210 = 1;
      goto LABEL_60;
    }
    v45 = v221;
    v101 = vsubq_f32(v222, v221);
    v102 = vsubq_f32(v223[0], v221);
    v104 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v101.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v102, (int8x16_t)v102, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v101, (int8x16_t)v101, 4uLL), *(float32x2_t *)v102.f32);
    *(int8x8_t *)v103.f32 = vext_s8(v104, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL), *(float32x2_t *)v102.f32), *(float32x2_t *)v101.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL)), 4uLL);
    v104.i32[1] = 0;
    v210 = 3;
    v105 = vpadd_f32(vmul_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32), vmul_f32((float32x2_t)v104.u32[0], (float32x2_t)v104.u32[0]));
    v106 = vpadd_f32(v105, v105);
    if (v106.f32[0] <= 0.00000011921)
    {
      v210 = 2;
      v143 = vmulq_f32(v101, v101);
      v143.i64[0] = vpaddq_f32(v143, v143).u64[0];
      v144 = vpadd_f32(*(float32x2_t *)v143.f32, *(float32x2_t *)v143.f32);
      v55 = v58;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v144), 0), *(int8x8_t *)v221.f32).u32[0] != -1)
      {
        v145 = vnegq_f32(v221);
        v145.i32[3] = 0;
        v146 = vmulq_f32(v145, v101);
        v146.i64[0] = vpaddq_f32(v146, v146).u64[0];
        v147 = vpadd_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32);
        v148 = vrecpe_f32(v144);
        v149 = 4;
        do
        {
          v148 = vmul_f32(v148, vrecps_f32(v144, v148));
          --v149;
        }
        while (v149);
        v45 = vmlaq_n_f32(v221, v101, vmax_f32(vmin_f32(vmul_f32(v147, v148), _D8), 0).f32[0]);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v106.f32[0] == 0.0)
    {
      v45 = 0uLL;
      goto LABEL_27;
    }
    *(int8x8_t *)&v103.u32[2] = v104;
    v107 = (float32x2_t)vextq_s8((int8x16_t)v222, (int8x16_t)v222, 8uLL).u64[0];
    v108 = (float32x2_t)vextq_s8((int8x16_t)v223[0], (int8x16_t)v223[0], 8uLL).u64[0];
    v109 = (float32x2_t)vextq_s8((int8x16_t)v223[0], (int8x16_t)v223[0], 4uLL).u64[0];
    v110 = (float32x2_t)vextq_s8((int8x16_t)v222, (int8x16_t)v222, 4uLL).u64[0];
    v111 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v222.f32, v109), v110, *(float32x2_t *)v223[0].f32);
    *(int8x8_t *)v112.f32 = vext_s8(v111, (int8x8_t)vmls_f32(vmul_f32(v107, *(float32x2_t *)v223[0].f32), *(float32x2_t *)v222.f32, v108), 4uLL);
    v112.i64[1] = v111.u32[0];
    v113 = (float32x2_t)vextq_s8((int8x16_t)v221, (int8x16_t)v221, 8uLL).u64[0];
    v114 = (float32x2_t)vextq_s8((int8x16_t)v221, (int8x16_t)v221, 4uLL).u64[0];
    v115 = (int8x8_t)vmls_f32(vmul_f32(v114, *(float32x2_t *)v223[0].f32), v109, *(float32x2_t *)v221.f32);
    *(int8x8_t *)v116.f32 = vext_s8(v115, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v221.f32, v108), *(float32x2_t *)v223[0].f32, v113), 4uLL);
    v116.i64[1] = v115.u32[0];
    v117 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v221.f32, v110), v114, *(float32x2_t *)v222.f32);
    *(int8x8_t *)v118.f32 = vext_s8(v117, (int8x8_t)vmls_f32(vmul_f32(v113, *(float32x2_t *)v222.f32), *(float32x2_t *)v221.f32, v107), 4uLL);
    v118.i64[1] = v117.u32[0];
    v119 = vmulq_f32(v112, v103);
    v119.i64[0] = vpaddq_f32(v119, v119).u64[0];
    v120 = vpadd_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32);
    v121 = vmulq_f32(v116, v103);
    v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
    v122 = vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32);
    v123 = vmulq_f32(v118, v103);
    v123.i64[0] = vpaddq_f32(v123, v123).u64[0];
    v124 = vpadd_f32(*(float32x2_t *)v123.f32, *(float32x2_t *)v123.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v122), (int8x8_t)vcgez_f32(v120)), (int8x8_t)vcgez_f32(v124)), 0), *(int8x8_t *)v221.f32).u32[0] == -1)
    {
      v150 = (int8x16_t)vmulq_f32(v221, v103);
      v151 = (float32x2_t)vextq_s8(v150, v150, 8uLL).u64[0];
      v152 = vrecpe_f32(v106);
      v153 = 4;
      v55 = v207;
      do
      {
        v152 = vmul_f32(v152, vrecps_f32(v106, v152));
        --v153;
      }
      while (v153);
      v154 = vpadd_f32(*(float32x2_t *)v150.i8, v151);
      v45 = vmulq_n_f32(v103, vmul_f32(v152, vpadd_f32(v154, v154)).f32[0]);
      v45.i32[3] = 0;
    }
    else
    {
      v125 = vnegq_f32(v221);
      v125.i32[3] = 0;
      v126 = vnegq_f32(v222);
      v126.i32[3] = 0;
      v127 = vmulq_f32(v125, v101);
      v127.i64[0] = vpaddq_f32(v127, v127).u64[0];
      v128 = vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32);
      v129 = vmulq_f32(v101, v126);
      v129.i64[0] = vpaddq_f32(v129, v129).u64[0];
      v130 = vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v128), (int8x8_t)vclez_f32(v130)), (int8x8_t)vclez_f32(v124)), 0), *(int8x8_t *)v221.f32).u32[0] == -1)
      {
        v155 = vsub_f32(v128, v130);
        v156 = vrecpe_f32(v155);
        v157 = 4;
        do
        {
          v156 = vmul_f32(v156, vrecps_f32(v155, v156));
          --v157;
        }
        while (v157);
        v142 = 0;
        v45 = vmlaq_n_f32(v221, v101, vmul_f32(v128, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v155), (float32x2_t)0x3400000034000000), (int8x8_t)v156, 0)).f32[0]);
        v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
        v158 = 2;
        v141 = 1;
      }
      else
      {
        v131 = vnegq_f32(v223[0]);
        v131.i32[3] = 0;
        v132 = vmulq_f32(v126, v102);
        v132.i64[0] = vpaddq_f32(v132, v132).u64[0];
        v133 = vpadd_f32(*(float32x2_t *)v132.f32, *(float32x2_t *)v132.f32);
        v134 = vmulq_f32(v101, v131);
        v134.i64[0] = vpaddq_f32(v134, v134).u64[0];
        v135 = vpadd_f32(*(float32x2_t *)v134.f32, *(float32x2_t *)v134.f32);
        v136 = vmulq_f32(v102, v131);
        v136.i64[0] = vpaddq_f32(v136, v136).u64[0];
        v137 = vpadd_f32(*(float32x2_t *)v136.f32, *(float32x2_t *)v136.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v133, v130), (int8x8_t)vcge_f32(v135, v137)), (int8x8_t)vclez_f32(v120)), 0), *(int8x8_t *)v221.f32).u32[0] == -1)
        {
          v159 = vsub_f32(v133, v130);
          v160 = vadd_f32(v159, vsub_f32(v135, v137));
          v161 = vrecpe_f32(v160);
          v162 = 4;
          do
          {
            v161 = vmul_f32(v161, vrecps_f32(v160, v161));
            --v162;
          }
          while (v162);
          v163 = (int8x16_t)vmlaq_n_f32(v222, vsubq_f32(v223[0], v222), vmul_f32(v159, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v160), (float32x2_t)0x3400000034000000), (int8x8_t)v161, 0)).f32[0]);
          v163.i64[1] = vextq_s8(v163, v163, 8uLL).u32[0];
          v158 = 2;
          v141 = 2;
          v142 = 1;
          v45 = (float32x4_t)v163;
        }
        else
        {
          v138 = vmulq_f32(v125, v102);
          v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
          v139 = vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v139), (int8x8_t)vclez_f32(v137)), (int8x8_t)vclez_f32(v122)), 0), *(int8x8_t *)v221.f32).u32[0] == -1)
          {
            v164 = vsub_f32(v139, v137);
            v165 = vrecpe_f32(v164);
            v166 = 4;
            do
            {
              v165 = vmul_f32(v165, vrecps_f32(v164, v165));
              --v166;
            }
            while (v166);
            v142 = 0;
            v45 = vmlaq_n_f32(v221, v102, vmul_f32(v139, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v164), (float32x2_t)0x3400000034000000), (int8x8_t)v165, 0)).f32[0]);
            v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
            v141 = 2;
          }
          else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v139), (int8x8_t)vclez_f32(v128)), 0), *(int8x8_t *)v221.f32).u32[0] == -1)
          {
            v142 = 0;
            v141 = 1;
          }
          else
          {
            *(int16x4_t *)v45.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v130, v133), (int8x8_t)vcgez_f32(v130)), 0);
            *(int8x8_t *)v45.f32 = vuzp1_s8(*(int8x8_t *)v45.f32, *(int8x8_t *)v45.f32);
            v140 = v45.i32[0];
            v45 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v45, v200), 0), (int8x16_t)v222, (int8x16_t)v223[0]);
            v141 = 1;
            if (v140 == -1)
              v142 = 1;
            else
              v142 = 2;
          }
          v158 = v141;
        }
      }
      v55 = v207;
      v167 = *(&v221 + v141);
      v168 = *(&v217 + v142);
      v169 = *(&v217 + v141);
      v170 = *(&v213 + v142);
      v171 = *(&v213 + v141);
      v221 = *(&v221 + v142);
      v222 = v167;
      v217 = v168;
      v218 = v169;
      v213 = v170;
      v214 = v171;
      v210 = v158;
    }
LABEL_60:
    v56 = vnegq_f32(v45);
    v56.i32[3] = 0;
    v172 = vmulq_f32(v45, v45);
    v172.i64[0] = vpaddq_f32(v172, v172).u64[0];
    v173 = vpadd_f32(*(float32x2_t *)v172.f32, *(float32x2_t *)v172.f32);
    v174 = (int8x8_t)vcgt_f32(v52, v173);
    v54 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v174, (int8x8_t)0x100000001), 0);
    v53 = (int16x4_t)vand_s8((int8x8_t)vcgt_f32(v173, v49), v174);
    v52 = v173;
  }
  v175 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v52, v201), 0), v54), 0x1FuLL)), (int8x16_t)v56, v204);
  v176 = vmulq_f32(v175, v175);
  v176.i64[0] = vpaddq_f32(v176, v176).u64[0];
  v177 = vpadd_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32);
  v178 = vrsqrte_f32(v177);
  v179 = 4;
  do
  {
    v178 = vmul_f32(v178, vrsqrts_f32(vmul_f32(v178, v178), v177));
    --v179;
  }
  while (v179);
  v180 = vmul_f32(v177, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v177), 0), (int8x8_t)_D8, (int8x8_t)v178));
  v181 = vrecpe_f32(v180);
  v182 = 4;
  do
  {
    v181 = vmul_f32(v181, vrecps_f32(v180, v181));
    --v182;
  }
  while (v182);
  v183 = (int8x16_t)vdupq_n_s32(-*(char *)(*(_QWORD *)(a1 + 8) + 32));
  v184 = (int8x16_t)vmulq_n_f32(v175, v181.f32[0]);
  v184.i32[3] = 0;
  v185 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v180), 0), v184));
  v185.i32[3] = 0;
  *a9 = v185;
  *a8 = v57;
  v186 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v54, 0x1FuLL)), v58, v55);
  v209 = v186;
  if (v210 == 3)
  {
    v211 = 0;
    v212 = 0;
    v206 = v185;
    v208 = v183;
    physx::Gu::barycentricCoordinates(&v209, &v221, &v222, v223, &v212, &v211);
    v185 = v206;
    v183 = v208;
    v181.i32[1] = v217.i32[1];
    v188 = vmulq_n_f32(vsubq_f32(v218, v217), v212.f32[0]);
    v188.i32[3] = 0;
    v189 = vmulq_n_f32(vsubq_f32(v219, v217), v211.f32[0]);
    v189.i32[3] = 0;
    v187 = vaddq_f32(v217, vaddq_f32(v188, v189));
  }
  else if (v210 == 2)
  {
    v190 = vsubq_f32(v221, v186);
    v191 = vsubq_f32(vsubq_f32(v222, v186), v190);
    v192 = vmulq_f32(v191, v191);
    v192.i64[0] = vpaddq_f32(v192, v192).u64[0];
    v193 = vpadd_f32(*(float32x2_t *)v192.f32, *(float32x2_t *)v192.f32);
    v194 = vrecpe_f32(v193);
    v195 = 4;
    do
    {
      v194 = vmul_f32(v194, vrecps_f32(v193, v194));
      --v195;
    }
    while (v195);
    v196 = vnegq_f32(v190);
    v196.i32[3] = 0;
    v197 = vmulq_f32(v196, v191);
    v197.i64[0] = vpaddq_f32(v197, v197).u64[0];
    v187 = vmlaq_n_f32(v217, vsubq_f32(v218, v217), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v193), (int8x8_t)v194, 0), vpadd_f32(*(float32x2_t *)v197.f32, *(float32x2_t *)v197.f32)).f32[0]);
    v181.i32[1] = 0;
    v187.i64[1] = vextq_s8((int8x16_t)v187, (int8x16_t)v187, 8uLL).u32[0];
  }
  else
  {
    v187 = 0uLL;
    if (v210 == 1)
      v187 = v217;
  }
  v181.i32[0] = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 16);
  v198 = (int8x16_t)vmlsq_lane_f32(v187, v185, v181, 0);
  v198.i64[1] = vextq_s8(v198, v198, 8uLL).u32[0];
  *a10 = vbslq_s8(v183, v198, (int8x16_t)v187);
  return v60 != -1;
}

uint64_t physx::shdfnd::Array<physx::Gu::NodeAllocator::Slab,physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>>::resize(uint64_t result, unsigned int a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::Gu::NodeAllocator::Slab,physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 16 * a2;
    v8 = (_OWORD *)(*(_QWORD *)v5 + 16 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Gu::NodeAllocator::Slab,physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 *v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>::getName() [T = physx::"
           "Gu::NodeAllocator::Slab]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 16 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_OWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(__int128 **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(__int128 **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Gu::NodeAllocator::Slab,physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>>::growAndPushBack(uint64_t a1, _OWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>::getName() [T = physx::"
           "Gu::NodeAllocator::Slab]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v9)
  {
    v10 = v8 + 16 * v9;
    v11 = *(__int128 **)a1;
    v12 = (_OWORD *)v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    v14 = *(unsigned int *)(a1 + 8);
  }
  else
  {
    v14 = 0;
  }
  *(_OWORD *)(v8 + 16 * v14) = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(_QWORD *)a1)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  v15 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v15 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 16 * v15;
}

uint64_t physx::shdfnd::Array<physx::Gu::BVHNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Gu::BVHNode const*>>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3;

  v3 = result;
  if ((*(_DWORD *)(result + 2068) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::Gu::BVHNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Gu::BVHNode const*>>>::recreate(result, a2);
  *(_DWORD *)(v3 + 2064) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Gu::BVHNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Gu::BVHNode const*>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = (8 * a2);
  if (v4 <= 0x800 && *(_BYTE *)(result + 2048) == 0)
  {
    *(_BYTE *)(result + 2048) = 1;
    v8 = (_QWORD *)result;
  }
  else if ((_DWORD)v4)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<const physx::Gu::BVHNode *>::getName() [T = const physx"
           "::Gu::BVHNode *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, v4, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 2064);
  v10 = *(uint64_t **)(v3 + 2056);
  if ((_DWORD)v9)
  {
    v11 = (unint64_t)&v8[v9];
    v12 = v8;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(uint64_t **)(v3 + 2056);
  }
  if ((*(_DWORD *)(v3 + 2068) & 0x80000000) == 0)
  {
    if (v10 == (uint64_t *)v3)
    {
      *(_BYTE *)(v3 + 2048) = 0;
    }
    else if (v10)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)(v3 + 2056) = v8;
  *(_DWORD *)(v3 + 2068) = a2;
  return result;
}

float physx::Gu::SweepAnyShapeHeightfield(int **a1, float *a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6, uint64_t a7, uint64_t a8, float a9, double a10, float a11, double a12, double a13, __n128 a14, unsigned int *a15)
{
  float32x2_t *v18;
  float v19;
  float v25;
  float32x2_t v26;
  float32x2_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float32x2_t v42;
  float v43;
  float v44;
  _BYTE *v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float v49;
  float v50;
  float v51;
  float32x2_t v53;
  float v54;
  float v56;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float32x2_t v65;
  int8x8_t v66;
  float v67;
  float32x2_t v68;
  int8x8_t v69;
  float v70;
  float v71;
  float v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float v81;
  int8x8_t v82;
  float v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  uint64_t v87;
  unint64_t v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  uint64_t v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  unsigned int v114;
  unsigned int v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  uint64_t v121;
  unsigned int v122;
  float v123;
  int v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  int *v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v156;
  float v157;
  float v158;
  float v159;
  unsigned __int32 v160;
  float v161;
  float v162;
  float v163;
  float v164;
  unsigned __int32 v165;
  float v166;
  float v167;
  uint64_t v168;
  float32x2_t v169;
  float32x2_t v170;
  float32x2_t v171;
  unsigned int v172;
  __n128 v174;
  int **v176;
  float32x2_t v178;
  float v179;
  _OWORD v180[4];
  uint64_t v181;
  char v182;
  _BYTE v183[24];
  uint64_t v184;
  float v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  uint64_t v189;
  int v190;
  unint64_t v191;
  unsigned int v192;
  uint64_t v193;
  float v194;
  uint64_t v195;
  float v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int *v199;
  uint64_t v200;
  float32x2_t v201;
  __int32 v202;
  float32x2_t v203;
  float v204;
  _QWORD v205[2];
  int32x2_t v206;
  float v207;
  uint64_t v208;
  float32x2_t *v209;
  unint64_t v210;
  float v211;
  float32x2_t v212;
  float v213;
  int v214;
  int v215;
  unint64_t v216;
  float v217;
  _BYTE v218[264];
  _BYTE *v219;
  uint64_t v220;
  uint64_t v221;

  a14.n128_f32[0] = a9;
  v221 = *MEMORY[0x24BDAC8D0];
  v18 = *(float32x2_t **)a2;
  v208 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v209 = v18;
  v19 = v18[3].f32[0];
  __asm { FMOV            V2.2S, #1.0 }
  v206 = vrev64_s32((int32x2_t)vdiv_f32(_D2, v18[2]));
  v207 = 1.0 / v19;
  v218[256] = 1;
  v220 = 0x4000000000;
  v219 = v218;
  v205[0] = &off_24ED91528;
  v205[1] = v218;
  v25 = a3[3].f32[0] - a5[3].f32[0];
  v26 = vsub_f32(a3[2], a5[2]);
  v27 = vsub_f32(a4[2], a6[2]);
  v28 = a4[3].f32[0] - a6[3].f32[0];
  v29 = v25 - v28;
  v30 = (float)(v25 - v28) * 0.5;
  v31 = (float)(*((float *)a1 + 19) + fabsf(v30)) + a14.n128_f32[0];
  v32 = v30 + *((float *)a1 + 22);
  _D2.f32[0] = v32 - v31;
  v33 = v31 + v32;
  v178 = vsub_f32(v26, v27);
  v34 = vmul_f32(v178, (float32x2_t)0x3F0000003F000000);
  v174 = a14;
  v35 = (float32x2_t)vdup_lane_s32((int32x2_t)a14.n128_u64[0], 0);
  v36 = vadd_f32(vadd_f32(vabs_f32(v34), *(float32x2_t *)((char *)a1 + 68)), v35);
  v37 = vadd_f32(v34, (float32x2_t)a1[10]);
  v201 = vsub_f32(v37, v36);
  v203 = vadd_f32(v36, v37);
  v202 = _D2.i32[0];
  v204 = v33;
  physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v206, (float *)a4, (float *)&v201, 1, (uint64_t)v205);
  *(_DWORD *)v183 = 0;
  v200 = 0;
  v199 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)&v199, v220, v183);
  *(_DWORD *)v183 = 0;
  v198 = 0;
  v197 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)&v197, v220, v183);
  v38 = v199;
  v39 = v220;
  v176 = a1;
  if (!(_DWORD)v220)
  {
    v172 = 0;
    goto LABEL_54;
  }
  v40 = 0;
  v172 = 0;
  v41 = v197;
  v42 = (float32x2_t)a1[10];
  v43 = v25;
  v44 = *((float *)a1 + 22);
  v45 = v219;
  v46 = v26;
  v47 = (float32x2_t)vdup_n_s32(0x3F8CCCCDu);
  v48 = vmul_f32(vadd_f32(*(float32x2_t *)((char *)a1 + 68), v35), v47);
  v49 = (float)(*((float *)a1 + 19) + v174.n128_f32[0]) * 1.1;
  v169 = vsub_f32(v27, v46);
  v167 = v28 - v43;
  v165 = vadd_f32(v42, v48).u32[0];
  v163 = v42.f32[1] + v48.f32[1];
  v170 = v48;
  v171 = v42;
  v160 = vsub_f32(v42, v48).u32[0];
  v158 = v42.f32[1] - v48.f32[1];
  do
  {
    physx::Gu::HeightFieldUtil::getTriangle((uint64_t)&v206, a2 + 3, (uint64_t)v183, 0, 0, *(_DWORD *)&v45[4 * v40], 1, 1);
    v50 = *(float *)&v183[20];
    v51 = *(float *)&v183[8];
    _D17 = vsub_f32(*(float32x2_t *)&v183[12], *(float32x2_t *)v183);
    v53 = vsub_f32((float32x2_t)v184, *(float32x2_t *)v183);
    v54 = v185;
    _S7 = v185 - *(float *)&v183[8];
    v56 = -(float)(vmuls_lane_f32(-(float)(*(float *)&v183[20] - *(float *)&v183[8]), v53, 1)
                 + (float)(_D17.f32[1] * (float)(v185 - *(float *)&v183[8])));
    __asm { FMLA            S21, S7, V17.S[1] }
    v58 = -(float)((float)((float)(*(float *)&v183[20] - *(float *)&v183[8]) * v53.f32[0])
                 - (float)(_D17.f32[0] * (float)(v185 - *(float *)&v183[8])));
    v59 = vmlas_n_f32(-(float)(_D17.f32[0] * (float)(v185 - *(float *)&v183[8])), *(float *)&v183[20] - *(float *)&v183[8], v53.f32[0]);
    v60 = (float)-_D17.f32[1] * v53.f32[0];
    v61 = -(float)(v60 + (float)(_D17.f32[0] * v53.f32[1]));
    v62 = vmlas_n_f32(v60, v53.f32[1], _D17.f32[0]);
    v63 = sqrtf((float)((float)(v59 * v59) + (float)(_S21 * _S21)) + (float)(v62 * v62));
    if (v63 > 0.0)
    {
      v64 = 1.0 / v63;
      v56 = v64 * v56;
      v58 = v64 * v58;
      v61 = v64 * v61;
    }
    if ((float)((float)((float)(v178.f32[1] * v58) + (float)(v178.f32[0] * v56)) + (float)(v29 * v61)) < a11)
      goto LABEL_28;
    v65 = (float32x2_t)vdup_n_s32(0x7E7FFFFFu);
    v66 = (int8x8_t)vcgt_f32(*(float32x2_t *)v183, v65);
    v67 = 8.5071e37;
    if (*(float *)&v183[8] <= 8.5071e37)
      v67 = *(float *)&v183[8];
    v68 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
    v69 = (int8x8_t)vcgt_f32(v68, *(float32x2_t *)v183);
    if (*(float *)&v183[8] < -8.5071e37)
      v51 = -8.5071e37;
    if (v67 >= *(float *)&v183[20])
      v67 = *(float *)&v183[20];
    if (v51 > *(float *)&v183[20])
      v50 = v51;
    if (v67 >= v185)
      v70 = v185;
    else
      v70 = v67;
    if (v50 > v185)
      v54 = v50;
    v71 = (float)(v70 + v54) * 0.5;
    v72 = (float)((float)(v54 - v70) * 0.5) + 0.01;
    v73 = (float32x2_t)vbsl_s8(v66, (int8x8_t)v65, *(int8x8_t *)v183);
    v74 = (float32x2_t)vbsl_s8(v69, (int8x8_t)v68, *(int8x8_t *)v183);
    v75 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v183[12], v73), (int8x8_t)v73, *(int8x8_t *)&v183[12]);
    v76 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v74, *(float32x2_t *)&v183[12]), (int8x8_t)v74, *(int8x8_t *)&v183[12]);
    v77 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v184, v75), (int8x8_t)v75, (int8x8_t)v184);
    v78 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v76, (float32x2_t)v184), (int8x8_t)v76, (int8x8_t)v184);
    v79 = vmul_f32(vadd_f32(v77, v78), (float32x2_t)0x3F0000003F000000);
    v80 = vmul_f32(vadd_f32(vmul_f32(vsub_f32(v78, v77), (float32x2_t)0x3F0000003F000000), (float32x2_t)vdup_n_s32(0x3C23D70Au)), v47);
    v81 = v72 * 1.1;
    v82 = vmvn_s8((int8x8_t)vcge_f32(vadd_f32(v170, v80), vabd_f32(v171, v79)));
    if ((v82.i8[0] & 1) == 0 && (v82.i8[4] & 1) == 0)
    {
      v83 = 0.0;
      if (vabds_f32(v44, v71) <= (float)(v49 + v81))
        goto LABEL_22;
    }
    v88 = 0;
    *(float32x2_t *)&v180[0] = v169;
    *((float *)v180 + 2) = v167;
    v191 = __PAIR64__(LODWORD(v163), v165);
    *(float *)&v192 = v44 + v49;
    v216 = __PAIR64__(LODWORD(v158), v160);
    v217 = v44 - v49;
    v212 = vadd_f32(v79, v80);
    v213 = v71 + v81;
    v210 = (unint64_t)vsub_f32(v79, v80);
    v83 = 0.0;
    v89 = 1.0;
    v211 = v71 - v81;
    do
    {
      v90 = *(float *)((char *)v180 + v88);
      if (v90 >= -0.000001)
      {
        if (v90 <= 0.000001)
        {
          if (v212.f32[v88 / 4] < *(float *)((char *)&v216 + v88)
            || *(float *)((char *)&v210 + v88) > *(float *)((char *)&v191 + v88))
          {
            goto LABEL_28;
          }
        }
        else
        {
          v91 = *(float *)((char *)&v210 + v88);
          v92 = *(float *)((char *)&v191 + v88);
          if (v91 > v92)
            goto LABEL_28;
          v96 = v212.f32[v88 / 4];
          v97 = *(float *)((char *)&v216 + v88);
          if (v96 < v97)
          {
            v98 = (float)(v97 - v96) / v90;
            if (v98 > v83)
              v83 = v98;
          }
          if (v92 > v91)
          {
LABEL_44:
            v99 = (float)(v92 - v91) / v90;
            if (v99 < v89)
              v89 = v99;
          }
        }
      }
      else
      {
        v91 = v212.f32[v88 / 4];
        v92 = *(float *)((char *)&v216 + v88);
        if (v91 < v92)
          goto LABEL_28;
        v93 = *(float *)((char *)&v191 + v88);
        v94 = *(float *)((char *)&v210 + v88);
        if (v93 < v94)
        {
          v95 = (float)(v93 - v94) / v90;
          if (v95 > v83)
            v83 = v95;
        }
        if (v91 > v92)
          goto LABEL_44;
      }
      if (v83 > v89)
        goto LABEL_28;
      v88 += 4;
    }
    while (v88 != 12);
    if (v83 > 1.0)
      goto LABEL_28;
LABEL_22:
    if (v172)
    {
      v84 = v172;
      while (1)
      {
        v85 = (v84 - 1);
        v86 = *(float *)(v41 + 4 * v85);
        if (v86 <= v83)
          break;
        *(float *)(v41 + 4 * v84) = v86;
        v38[v84--] = v38[v85];
        if (!v85)
          goto LABEL_26;
      }
    }
    else
    {
LABEL_26:
      LODWORD(v84) = 0;
    }
    v87 = v84;
    v38[v87] = *(_DWORD *)&v45[4 * v40];
    *(float *)(v41 + v87 * 4) = v83;
    ++v172;
LABEL_28:
    ++v40;
  }
  while (v40 != v39);
LABEL_54:
  v100 = a8;
  *(_QWORD *)a7 = 0;
  *(_DWORD *)(a7 + 8) = 0;
  *(_QWORD *)a8 = 0;
  *(_DWORD *)(a8 + 8) = 0;
  v101 = *((float *)a1 + 2);
  v102 = a4[2].f32[0];
  v103 = a4[2].f32[1];
  v104 = a4[3].f32[0];
  v105 = (float)(*((float *)a1 + 7) - v102) + (float)(*((float *)a1 + 7) - v102);
  v106 = (float)(*((float *)a1 + 8) - v103) + (float)(*((float *)a1 + 8) - v103);
  v107 = (float)(*((float *)a1 + 9) - v104) + (float)(*((float *)a1 + 9) - v104);
  v109 = a4[1].f32[0];
  v108 = a4[1].f32[1];
  v110 = (float)(v108 * v108) + -0.5;
  v111 = a4->f32[0];
  v112 = a4->f32[1];
  v113 = (float)((float)(v106 * v112) + (float)(a4->f32[0] * v105)) + (float)(v109 * v107);
  *(float *)&v114 = (float)((float)(v105 * v110) - (float)((float)((float)(v112 * v107) - (float)(v109 * v106)) * v108))
                  + (float)(a4->f32[0] * v113);
  *(float *)&v115 = (float)((float)(v106 * v110)
                          - (float)((float)((float)(v109 * v105) - (float)(a4->f32[0] * v107)) * v108))
                  + (float)(v112 * v113);
  v116 = (float)((float)(v107 * v110) - (float)((float)((float)(a4->f32[0] * v106) - (float)(v112 * v105)) * v108))
       + (float)(v109 * v113);
  v210 = __PAIR64__(v115, v114);
  v211 = v116;
  if (v172)
  {
    v161 = v101;
    v162 = v101 * v101;
    v117 = (float)(a5[2].f32[0] - v102) + (float)(a5[2].f32[0] - v102);
    v118 = (float)(a5[2].f32[1] - v103) + (float)(a5[2].f32[1] - v103);
    v119 = (float)(a5[3].f32[0] - v104) + (float)(a5[3].f32[0] - v104);
    v120 = (float)((float)(v112 * v118) + (float)(v111 * v117)) + (float)(v109 * v119);
    v157 = (float)((float)(v118 * v110) - (float)((float)((float)(v109 * v117) - (float)(v111 * v119)) * v108))
         + (float)(v112 * v120);
    v159 = (float)((float)(v117 * v110) - (float)((float)((float)(v112 * v119) - (float)(v109 * v118)) * v108))
         + (float)(v111 * v120);
    v156 = (float)((float)(v119 * v110) - (float)((float)((float)(v111 * v118) - (float)(v112 * v117)) * v108))
         + (float)(v109 * v120);
    v121 = v172;
    v168 = 0;
    v166 = 0.0;
    v122 = -1;
    v179 = 3.4028e38;
    v123 = 0.0;
    v164 = 0.0;
    v124 = 0;
    do
    {
      physx::Gu::HeightFieldUtil::getTriangle((uint64_t)&v206, (float *)a6, (uint64_t)&v191, 0, 0, *v38, 0, 0);
      v125.i64[0] = v191;
      v125.i64[1] = v192;
      v126.i64[0] = v193;
      v126.i64[1] = LODWORD(v194);
      v127.i64[0] = v195;
      v127.i64[1] = LODWORD(v196);
      v128 = vmulq_f32(vaddq_f32(vaddq_f32(v125, v126), v127), (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu));
      v128.i32[3] = 0;
      LOBYTE(v185) = 0;
      *(float32x4_t *)v183 = v128;
      v186 = v125;
      v187 = v126;
      v188 = v127;
      *(_QWORD *)&v183[16] = 0x7F7FFFFF00000000;
      v184 = 0x57F7FFFFFLL;
      v129 = *v176;
      v180[0] = xmmword_2260E5F10;
      v180[1] = xmmword_2260E5F10;
      v180[2] = xmmword_2260FD430;
      v180[3] = xmmword_2260E5F20;
      v181 = 0x3F80000000000000;
      v182 = 0;
      v130 = ((float (*)(__n128, float))*(&physx::Gu::g_TriangleSweepMethodTable + *v129))(v174, 0.0);
      if (v130 <= 0.0)
      {
        v131 = *(float *)&v193 - *(float *)&v191;
        v132 = *((float *)&v193 + 1) - *((float *)&v191 + 1);
        v133 = v194 - *(float *)&v192;
        v134 = *(float *)&v195 - *(float *)&v191;
        v135 = *((float *)&v195 + 1) - *((float *)&v191 + 1);
        v136 = v196 - *(float *)&v192;
        *(float *)v180 = *(float *)&v191 + (float)(*(float *)&v193 - *(float *)&v191);
        *((float *)v180 + 1) = *((float *)&v191 + 1) + (float)(*((float *)&v193 + 1) - *((float *)&v191 + 1));
        *((float *)v180 + 2) = *(float *)&v192 + (float)(v194 - *(float *)&v192);
        *(float *)&v216 = *(float *)&v191 + (float)(*(float *)&v195 - *(float *)&v191);
        *((float *)&v216 + 1) = *((float *)&v191 + 1) + (float)(*((float *)&v195 + 1) - *((float *)&v191 + 1));
        v217 = *(float *)&v192 + (float)(v196 - *(float *)&v192);
        v215 = 0;
        v214 = 0;
        physx::Gu::closestPtPointTriangle((float *)&v210, (float *)&v191, (float32x2_t *)v180, (float32x2_t *)&v216, (float *)&v215, (float *)&v214, (uint64_t)&v212);
        v137 = (float)((float)((float)(v212.f32[1] - *((float *)&v210 + 1))
                             * (float)(v212.f32[1] - *((float *)&v210 + 1)))
                     + (float)((float)(v212.f32[0] - *(float *)&v210) * (float)(v212.f32[0] - *(float *)&v210)))
             + (float)((float)(v213 - v211) * (float)(v213 - v211));
        v130 = 0.0;
        if (v137 < v162)
        {
          v138 = sqrtf(v137);
          v139 = v138 - v161;
          v140 = -(float)((float)(v161 * 2.0) - v138);
          if ((float)((float)((float)((float)(v157 * (float)((float)(v133 * v134) - (float)(v131 * v136)))
                                     + (float)((float)((float)(v132 * v136) - (float)(v133 * v135)) * v159))
                             + (float)((float)((float)(v131 * v135) - (float)(v132 * v134)) * v156))
                     - (float)((float)((float)((float)((float)(v133 * v134) - (float)(v131 * v136))
                                             * *((float *)&v191 + 1))
                                     + (float)((float)((float)(v132 * v136) - (float)(v133 * v135)) * *(float *)&v191))
                             + (float)((float)((float)(v131 * v135) - (float)(v132 * v134)) * *(float *)&v192))) <= 0.0)
            v130 = v139;
          else
            v130 = v140;
        }
      }
      if (v130 < v179)
      {
        v141 = (float)((float)(*((float *)&v193 + 1) - *((float *)&v191 + 1)) * (float)(v196 - *(float *)&v192))
             - (float)((float)(v194 - *(float *)&v192) * (float)(*((float *)&v195 + 1) - *((float *)&v191 + 1)));
        v123 = (float)((float)(v194 - *(float *)&v192) * (float)(*(float *)&v195 - *(float *)&v191))
             - (float)((float)(*(float *)&v193 - *(float *)&v191) * (float)(v196 - *(float *)&v192));
        v142 = (float)((float)(*(float *)&v193 - *(float *)&v191)
                     * (float)(*((float *)&v195 + 1) - *((float *)&v191 + 1)))
             - (float)((float)(*((float *)&v193 + 1) - *((float *)&v191 + 1))
                     * (float)(*(float *)&v195 - *(float *)&v191));
        v143 = sqrtf((float)((float)(v123 * v123) + (float)(v141 * v141)) + (float)(v142 * v142));
        if (v143 <= 0.0)
        {
          v164 = (float)((float)(*((float *)&v193 + 1) - *((float *)&v191 + 1)) * (float)(v196 - *(float *)&v192))
               - (float)((float)(v194 - *(float *)&v192) * (float)(*((float *)&v195 + 1) - *((float *)&v191 + 1)));
        }
        else
        {
          v144 = 1.0 / v143;
          v164 = v141 * v144;
          v123 = v123 * v144;
          v142 = v142 * v144;
        }
        v166 = v142;
        v168 = v189;
        v124 = v190;
        v179 = v130;
        v122 = *v38;
      }
      ++v38;
      --v121;
    }
    while (v121);
    v111 = a4->f32[0];
    v112 = a4->f32[1];
    v109 = a4[1].f32[0];
    v108 = a4[1].f32[1];
    v110 = (float)(v108 * v108) + -0.5;
    v145 = -v109;
    v146 = -a4->f32[0];
    v147 = -v112;
    v100 = a8;
    v148 = v164;
    v149 = v166;
  }
  else
  {
    v168 = 0;
    v145 = -v109;
    v146 = -v111;
    v147 = -v112;
    v122 = -1;
    v124 = 0;
    v179 = 3.4028e38;
    v148 = 0.0;
    v123 = 0.0;
    v149 = 0.0;
  }
  v150 = v148 + v148;
  v151 = v149 + v149;
  v152 = (float)((float)(v112 * (float)(v123 + v123)) + (float)(v111 * v150)) + (float)(v109 * v151);
  *(float *)a7 = (float)((float)(v108 * (float)((float)(v145 * (float)(v123 + v123)) + (float)(v112 * v151)))
                       + (float)(v150 * v110))
               + (float)(v111 * v152);
  *(float *)(a7 + 4) = (float)((float)(v108 * (float)((float)(v146 * v151) + (float)(v109 * v150)))
                             + (float)((float)(v123 + v123) * v110))
                     + (float)(v112 * v152);
  *(float *)(a7 + 8) = (float)((float)(v108 * (float)((float)(v147 * v150) + (float)(v111 * (float)(v123 + v123))))
                             + (float)(v151 * v110))
                     + (float)(v109 * v152);
  *(_QWORD *)v100 = v168;
  *(_DWORD *)(v100 + 8) = v124;
  *a15 = v122;
  if ((v198 & 0x8000000000000000) == 0 && (v198 & 0x7FFFFFFF00000000) != 0 && v197)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if ((v200 & 0x8000000000000000) == 0 && (v200 & 0x7FFFFFFF00000000) != 0 && v199)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if ((v220 & 0x8000000000000000) == 0 && (v220 & 0x7FFFFFFF00000000) != 0 && v219 != v218 && v219)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v179;
}

float physx::Gu::SweepEstimateAnyShapeHeightfield(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6, double a7, float a8)
{
  float32x2_t *v11;
  float v12;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  float32x2_t v33;
  float v34;
  float *v35;
  float32x2_t v36;
  float32x2_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float32x2_t v44;
  float v45;
  float v47;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float32x2_t v56;
  int8x8_t v57;
  float v58;
  float32x2_t v59;
  int8x8_t v60;
  float v61;
  float v62;
  float v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float v72;
  int8x8_t v73;
  float v74;
  uint64_t v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v88;
  float v89;
  unsigned __int32 v90;
  float v91;
  float v92;
  unsigned __int32 v93;
  float v94;
  float32x2_t v95;
  float v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float v101;
  float32x2_t v102;
  float v103;
  float32x2_t v104;
  float v105;
  float32x2_t v106;
  __int32 v107;
  float32x2_t v108;
  float v109;
  _QWORD v110[2];
  int32x2_t v111;
  float v112;
  uint64_t v113;
  float32x2_t *v114;
  float32x2_t v115;
  float v116;
  float32x2_t v117;
  float v118;
  _DWORD v119[3];
  _DWORD v120[3];
  float32x2_t v121;
  float v122;
  _BYTE v123[264];
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  v11 = *(float32x2_t **)a2;
  v113 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v114 = v11;
  v12 = v11[3].f32[0];
  __asm { FMOV            V3.2S, #1.0 }
  v111 = vrev64_s32((int32x2_t)vdiv_f32(_D3, v11[2]));
  v112 = 1.0 / v12;
  v123[256] = 1;
  v125 = 0x4000000000;
  v124 = v123;
  v110[0] = &off_24ED91528;
  v110[1] = v123;
  v18 = a3[3].f32[0] - a5[3].f32[0];
  v19 = vsub_f32(a3[2], a5[2]);
  v20 = vsub_f32(a4[2], a6[2]);
  v21 = a4[3].f32[0] - a6[3].f32[0];
  v22 = v18 - v21;
  v23 = (float)(v18 - v21) * 0.5;
  v24 = (float)(*(float *)(a1 + 76) + fabsf(v23)) + *(float *)&a7;
  v25 = v23 + *(float *)(a1 + 88);
  _D3.f32[0] = v25 - v24;
  v26 = v24 + v25;
  v99 = vsub_f32(v19, v20);
  v27 = vmul_f32(v99, (float32x2_t)0x3F0000003F000000);
  v28 = vadd_f32(vadd_f32(vabs_f32(v27), *(float32x2_t *)(a1 + 68)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0));
  v29 = vadd_f32(v27, *(float32x2_t *)(a1 + 80));
  v106 = vsub_f32(v29, v28);
  v107 = _D3.i32[0];
  v108 = vadd_f32(v28, v29);
  v109 = v26;
  physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v111, (float *)a4, (float *)&v106, 1, (uint64_t)v110);
  v30 = v125;
  v31 = v124;
  if ((_DWORD)v125)
  {
    v32 = 0;
    v33 = *(float32x2_t *)(a1 + 80);
    v34 = *(float *)(a1 + 88);
    v35 = (float *)(a2 + 12);
    v36 = (float32x2_t)vdup_n_s32(0x3F8CCCCDu);
    v37 = vmul_f32(*(float32x2_t *)(a1 + 68), v36);
    v38 = *(float *)(a1 + 76) * 1.1;
    v95 = vsub_f32(v20, v19);
    v94 = v21 - v18;
    v93 = vadd_f32(v33, v37).u32[0];
    v91 = v34 + v38;
    v92 = v33.f32[1] + v37.f32[1];
    v97 = v37;
    v98 = v33;
    v90 = vsub_f32(v33, v37).u32[0];
    v39 = 3.4028e38;
    v96 = v34;
    v40 = v38;
    v88 = v34 - v38;
    v89 = v33.f32[1] - v37.f32[1];
    do
    {
      physx::Gu::HeightFieldUtil::getTriangle((uint64_t)&v111, v35, (uint64_t)&v100, 0, 0, *(_DWORD *)&v31[4 * v32], 1, 1);
      v41 = v103;
      v42 = v101;
      _D17 = vsub_f32(v102, v100);
      v44 = vsub_f32(v104, v100);
      v45 = v105;
      _S7 = v105 - v101;
      v47 = -(float)(vmuls_lane_f32(-(float)(v103 - v101), v44, 1) + (float)(_D17.f32[1] * (float)(v105 - v101)));
      __asm { FMLA            S21, S7, V17.S[1] }
      v49 = -(float)((float)((float)(v103 - v101) * v44.f32[0]) - (float)(_D17.f32[0] * (float)(v105 - v101)));
      v50 = vmlas_n_f32(-(float)(_D17.f32[0] * (float)(v105 - v101)), v103 - v101, v44.f32[0]);
      v51 = (float)-_D17.f32[1] * v44.f32[0];
      v52 = -(float)(v51 + (float)(_D17.f32[0] * v44.f32[1]));
      v53 = vmlas_n_f32(v51, v44.f32[1], _D17.f32[0]);
      v54 = sqrtf((float)((float)(v50 * v50) + (float)(_S21 * _S21)) + (float)(v53 * v53));
      if (v54 > 0.0)
      {
        v55 = 1.0 / v54;
        v47 = v55 * v47;
        v49 = v55 * v49;
        v52 = v55 * v52;
      }
      if ((float)((float)((float)(v99.f32[1] * v49) + (float)(v99.f32[0] * v47)) + (float)(v22 * v52)) >= a8)
      {
        v56 = (float32x2_t)vdup_n_s32(0x7E7FFFFFu);
        v57 = (int8x8_t)vcgt_f32(v100, v56);
        v58 = 8.5071e37;
        if (v101 <= 8.5071e37)
          v58 = v101;
        v59 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
        v60 = (int8x8_t)vcgt_f32(v59, v100);
        if (v101 < -8.5071e37)
          v42 = -8.5071e37;
        if (v58 >= v103)
          v58 = v103;
        if (v42 > v103)
          v41 = v42;
        if (v58 >= v105)
          v61 = v105;
        else
          v61 = v58;
        if (v41 > v105)
          v45 = v41;
        v62 = (float)(v61 + v45) * 0.5;
        v63 = (float)((float)(v45 - v61) * 0.5) + 0.01;
        v64 = (float32x2_t)vbsl_s8(v57, (int8x8_t)v56, (int8x8_t)v100);
        v65 = (float32x2_t)vbsl_s8(v60, (int8x8_t)v59, (int8x8_t)v100);
        v66 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v102, v64), (int8x8_t)v64, (int8x8_t)v102);
        v67 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v65, v102), (int8x8_t)v65, (int8x8_t)v102);
        v68 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v104, v66), (int8x8_t)v66, (int8x8_t)v104);
        v69 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v67, v104), (int8x8_t)v67, (int8x8_t)v104);
        v70 = vmul_f32(vadd_f32(v68, v69), (float32x2_t)0x3F0000003F000000);
        v71 = vmul_f32(vadd_f32(vmul_f32(vsub_f32(v69, v68), (float32x2_t)0x3F0000003F000000), (float32x2_t)vdup_n_s32(0x3C23D70Au)), v36);
        v72 = v63 * 1.1;
        v73 = vmvn_s8((int8x8_t)vcge_f32(vadd_f32(v97, v71), vabd_f32(v98, v70)));
        if ((v73.i8[0] & 1) != 0 || (v73.i8[4] & 1) != 0 || (v74 = 0.0, vabds_f32(v96, v62) > (float)(v40 + v72)))
        {
          v75 = 0;
          v121 = v95;
          v122 = v94;
          v120[0] = v93;
          *(float *)&v120[1] = v92;
          *(float *)&v120[2] = v91;
          v119[0] = v90;
          *(float *)&v119[1] = v89;
          *(float *)&v119[2] = v88;
          v117 = vadd_f32(v70, v71);
          v118 = v62 + v72;
          v115 = vsub_f32(v70, v71);
          v74 = 0.0;
          v76 = 1.0;
          v116 = v62 - v72;
          do
          {
            v77 = v121.f32[v75];
            if (v77 >= -0.000001)
            {
              if (v77 <= 0.000001)
              {
                if (v117.f32[v75] < *(float *)&v119[v75] || v115.f32[v75] > *(float *)&v120[v75])
                {
LABEL_44:
                  v74 = 3.4028e38;
                  break;
                }
              }
              else
              {
                v78 = v115.f32[v75];
                v79 = *(float *)&v120[v75];
                if (v78 > v79)
                  goto LABEL_44;
                v83 = v117.f32[v75];
                v84 = *(float *)&v119[v75];
                if (v83 < v84)
                {
                  v85 = (float)(v84 - v83) / v77;
                  if (v85 > v74)
                    v74 = v85;
                }
                if (v79 > v78)
                {
LABEL_36:
                  v86 = (float)(v79 - v78) / v77;
                  if (v86 < v76)
                    v76 = v86;
                }
              }
            }
            else
            {
              v78 = v117.f32[v75];
              v79 = *(float *)&v119[v75];
              if (v78 < v79)
                goto LABEL_44;
              v80 = *(float *)&v120[v75];
              v81 = v115.f32[v75];
              if (v80 < v81)
              {
                v82 = (float)(v80 - v81) / v77;
                if (v82 > v74)
                  v74 = v82;
              }
              if (v78 > v79)
                goto LABEL_36;
            }
            if (v74 > v76)
              goto LABEL_44;
            ++v75;
          }
          while (v75 != 3);
        }
        if (v39 >= v74)
          v39 = v74;
      }
      ++v32;
    }
    while (v32 != v30);
    v31 = v124;
  }
  else
  {
    v39 = 3.4028e38;
  }
  if ((v125 & 0x8000000000000000) == 0 && (v125 & 0x7FFFFFFF00000000) != 0 && v31 != v123 && v31)
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v31);
  return v39;
}

float physx::Gu::SweepAnyShapeMesh(int **a1, uint64_t *a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6, float *a7, uint64_t a8, double a9, double a10, float a11, int *a12)
{
  float *v19;
  float v20;
  float32x2_t v21;
  float32x2_t v22;
  float v23;
  float32x2_t v24;
  float v25;
  float v26;
  float v27;
  int32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  float v47;
  unsigned int v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float32x2_t v56;
  float v57;
  float v58;
  float v59;
  float32x2_t v60;
  uint64_t v61;
  float v62;
  float v63;
  uint64_t v64;
  int *v65;
  _DWORD *v66;
  float v67;
  int32x2_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float32x2_t v75;
  float32x2_t v76;
  float v77;
  int8x8_t v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  unsigned int v110;
  unsigned int v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  __n128 v117;
  uint64_t v118;
  int v119;
  float v120;
  int v121;
  uint64_t v122;
  float *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned __int16 *v131;
  uint64_t v132;
  float *v133;
  float *v134;
  float *v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float32x4_t v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float32x2_t v150;
  float v151;
  float v152;
  float v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  int *v157;
  float v158;
  float v159;
  float v160;
  float v161;
  int v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  uint64_t v178;
  float v179;
  float v180;
  float v181;
  float *v183;
  uint64_t v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  __int32 v192;
  float v193;
  float v194;
  float32x2_t v195;
  uint64_t v196;
  float v197;
  float v198;
  float32x2_t v199;
  __n128 v200;
  float32x2_t v202;
  float v203;
  unsigned int v204;
  uint64_t v205;
  _BYTE *v206;
  float32x2_t v207;
  float v208;
  float v209;
  float v210;
  uint64_t v211;
  _OWORD v212[4];
  uint64_t v213;
  char v214;
  _BYTE v215[24];
  uint64_t v216;
  char v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  uint64_t v221;
  float v222;
  uint64_t v223;
  int v224;
  int v225;
  uint64_t v226;
  float32x2_t *v227;
  int *v228;
  int v229;
  uint64_t *v230;
  __int128 v231;
  int32x2_t v232;
  _DWORD v233[9];
  _BYTE *v234;
  float32x4_t v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float32x2_t v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float32x2_t v258;
  float v259;
  _OWORD v260[2];
  int v261;
  float32x2_t v262;
  float v263;
  float32x2_t v264;
  float v265;
  float32x2_t v266;
  float v267;
  float32x2_t v268;
  float v269;
  char v270;
  float32x2_t v271;
  float v272;
  unint64_t v273;
  float v274;
  float v275;
  float v276;
  float v277;
  int v278;
  int v279;
  float32x2_t v280;
  float v281;
  _DWORD v282[64];
  char v283;
  _DWORD *v284;
  uint64_t v285;
  _BYTE v286[264];
  int *v287;
  uint64_t v288;
  _BYTE v289[264];
  _BYTE *v290;
  uint64_t v291;
  uint64_t v292;

  v200.n128_f64[0] = a9;
  v292 = *MEMORY[0x24BDAC8D0];
  v19 = (float *)(*a2 + 4);
  v211 = *a2;
  physx::Cm::FastVertex2ShapeScaling::init((uint64_t)&v264, v19, (float *)(*a2 + 16));
  v20 = a3[3].f32[0] - a5[3].f32[0];
  v21 = vsub_f32(a3[2], a5[2]);
  v22 = vsub_f32(a4[2], a6[2]);
  v23 = a4[3].f32[0] - a6[3].f32[0];
  v24 = vsub_f32(v21, v22);
  v25 = v20 - v23;
  v262 = v24;
  v263 = v25;
  v26 = v24.f32[1];
  v208 = v24.f32[0];
  v27 = sqrtf(vmlas_n_f32(vmuls_lane_f32(v24.f32[1], v24, 1), v24.f32[0], v24.f32[0]) + (float)(v25 * v25));
  if (v27 > 0.0)
  {
    v262 = vmul_n_f32(v24, 1.0 / v27);
    v263 = v25 * (float)(1.0 / v27);
  }
  v260[0] = xmmword_2260E5F10;
  v260[1] = xmmword_2260E5F10;
  v261 = 1065353216;
  *(float32x2_t *)v30.i8 = physx::Gu::computeSweptBox((uint64_t)&v246, (float *)a1 + 17, (float32x2_t *)a1 + 10, (float *)v260, &v262, v27);
  v29.i32[0] = *(__int32 *)v19;
  v30.i32[0] = 1.0;
  if (*v19 == 1.0
    && (v29.i32[0] = *(_DWORD *)(v211 + 8), *(float *)v29.i32 == 1.0)
    && (v30.i32[0] = *(_DWORD *)(v211 + 12), v29.i32[0] = 1.0, *(float *)v30.i32 == 1.0))
  {
    v31 = a4[2].f32[0] * -2.0;
    v32 = a4[2].f32[1] * -2.0;
    v33 = a4[3].f32[0] * -2.0;
    v35 = a4[1].f32[0];
    v34 = a4[1].f32[1];
    v36 = (float)(v34 * v34) + -0.5;
    v37 = a4->f32[0];
    v38 = a4->f32[1];
    v39 = (float)((float)(v32 * v38) + (float)(a4->f32[0] * v31)) + (float)(v35 * v33);
    v40 = (float)((float)(v31 * v36) - (float)((float)((float)(v38 * v33) - (float)(v35 * v32)) * v34))
        + (float)(a4->f32[0] * v39);
    v41 = (float)((float)(v32 * v36) - (float)((float)((float)(v35 * v31) - (float)(a4->f32[0] * v33)) * v34))
        + (float)(v38 * v39);
    v42 = (float)((float)(v33 * v36) - (float)((float)((float)(a4->f32[0] * v32) - (float)(v38 * v31)) * v34))
        + (float)(v35 * v39);
    v43 = (float)((float)-(float)(v38 * (float)(v247 + v247)) - (float)(a4->f32[0] * (float)(v246 + v246)))
        - (float)(v35 * (float)(v248 + v248));
    *(float *)&v44 = (float)((float)(v34
                                   * (float)((float)(v35 * (float)(v247 + v247)) - (float)(v38 * (float)(v248 + v248))))
                           + (float)((float)(v246 + v246) * v36))
                   - (float)(a4->f32[0] * v43);
    *(float *)&v45 = (float)((float)(v34
                                   * (float)((float)(a4->f32[0] * (float)(v248 + v248))
                                           - (float)(v35 * (float)(v246 + v246))))
                           + (float)((float)(v247 + v247) * v36))
                   - (float)(v38 * v43);
    *(float *)&v46 = (float)((float)(v34
                                   * (float)((float)(v38 * (float)(v246 + v246))
                                           - (float)(a4->f32[0] * (float)(v247 + v247))))
                           + (float)((float)(v248 + v248) * v36))
                   - (float)(v35 * v43);
    v47 = (float)((float)-(float)(v38 * (float)(v250 + v250)) - (float)(a4->f32[0] * (float)(v249 + v249)))
        - (float)(v35 * (float)(v251 + v251));
    *(float *)&v48 = (float)((float)(v34
                                   * (float)((float)(v35 * (float)(v250 + v250)) - (float)(v38 * (float)(v251 + v251))))
                           + (float)((float)(v249 + v249) * v36))
                   - (float)(a4->f32[0] * v47);
    v49 = (float)((float)(v34 * (float)((float)(a4->f32[0] * (float)(v251 + v251)) - (float)(v35 * (float)(v249 + v249))))
                + (float)((float)(v250 + v250) * v36))
        - (float)(v38 * v47);
    v50 = (float)((float)(v34 * (float)((float)(v38 * (float)(v249 + v249)) - (float)(a4->f32[0] * (float)(v250 + v250))))
                + (float)((float)(v251 + v251) * v36))
        - (float)(v35 * v47);
    v51 = (float)((float)-(float)(v38 * (float)(v253 + v253)) - (float)(a4->f32[0] * (float)(v252 + v252)))
        - (float)(v35 * (float)(v254 + v254));
    v52 = (float)(v34 * (float)((float)(v38 * (float)(v252 + v252)) - (float)(a4->f32[0] * (float)(v253 + v253))))
        + (float)((float)(v254 + v254) * v36);
    v53 = (float)((float)-(float)(v38 * (float)(v256 + v256)) - (float)(a4->f32[0] * (float)(v255 + v255)))
        - (float)(v35 * (float)(v257 + v257));
    v54 = v40
        + (float)((float)((float)(v34
                                * (float)((float)(v35 * (float)(v256 + v256)) - (float)(v38 * (float)(v257 + v257))))
                        + (float)((float)(v255 + v255) * v36))
                - (float)(a4->f32[0] * v53));
    v55 = v41
        + (float)((float)((float)(v34
                                * (float)((float)(a4->f32[0] * (float)(v257 + v257))
                                        - (float)(v35 * (float)(v255 + v255))))
                        + (float)((float)(v256 + v256) * v36))
                - (float)(v38 * v53));
    v56 = v258;
    v57 = v259;
    v58 = (float)((float)(v34 * (float)((float)(v35 * (float)(v253 + v253)) - (float)(v38 * (float)(v254 + v254))))
                + (float)((float)(v252 + v252) * v36))
        - (float)(a4->f32[0] * v51);
    v59 = (float)((float)(v34 * (float)((float)(a4->f32[0] * (float)(v254 + v254)) - (float)(v35 * (float)(v252 + v252))))
                + (float)((float)(v253 + v253) * v36))
        - (float)(v38 * v51);
    v235.i64[0] = __PAIR64__(v45, v44);
    v235.i64[1] = __PAIR64__(v48, v46);
    v236 = v49;
    v237 = v50;
    v238 = v58;
    v239 = v59;
    v240 = v52 - (float)(v35 * v51);
    v241 = v54;
    v242 = v55;
    v243 = v42
         + (float)((float)((float)(v34
                                 * (float)((float)(v38 * (float)(v255 + v255)) - (float)(v37 * (float)(v256 + v256))))
                         + (float)((float)(v257 + v257) * v36))
                 - (float)(v35 * v53));
  }
  else
  {
    physx::Gu::computeVertexSpaceOBB(&v235, (uint64_t)&v246, (float *)a4, v19, v30, v29, v28);
    v56 = v244;
    v57 = v245;
  }
  v60 = (float32x2_t)vdup_lane_s32((int32x2_t)v200.n128_u64[0], 0);
  v244 = vadd_f32(v56, v60);
  v245 = v57 + v200.n128_f32[0];
  v289[256] = 1;
  v291 = 0x4000000000;
  v290 = v289;
  v233[7] = 2;
  *(_QWORD *)&v233[5] = &off_24ED91568;
  v234 = v289;
  ((void (*)(void))*(&physx::Gu::gMidphaseBoxCBOverlapTable
                   + *(unsigned __int16 *)(*(_QWORD *)(v211 + 48) + 8)
                   - 3))();
  v61 = v291;
  if (!(_DWORD)v291)
  {
    v120 = 3.4028e38;
    goto LABEL_88;
  }
  v183 = a7;
  v184 = a8;
  v206 = v290;
  v210 = v20;
  v62 = *((float *)a1 + 22);
  v202 = (float32x2_t)a1[10];
  v199 = vadd_f32(*(float32x2_t *)((char *)a1 + 68), v60);
  v63 = *((float *)a1 + 19) + v200.n128_f32[0];
  v286[256] = 1;
  v288 = 0x4000000000;
  v287 = (int *)v286;
  v282[0] = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<256u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::resize((uint64_t)v286, v291, v282);
  v283 = 1;
  v285 = 0x4000000000;
  v284 = v282;
  LODWORD(v226) = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<256u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::resize((uint64_t)v282, v291, &v226);
  v64 = 0;
  v204 = 0;
  v65 = v287;
  v66 = v284;
  v195 = vsub_f32(v22, v21);
  v192 = vadd_f32(v202, v199).u32[0];
  v190 = v62 + v63;
  LODWORD(v189) = vsub_f32(v202, v199).u32[0];
  v197 = v63;
  v67 = v62 - v63;
  v68 = vdup_n_s32(0xFE7FFFFF);
  do
  {
    LODWORD(v223) = 0;
    v226 = v211;
    v227 = &v264;
    v228 = (int *)&v206[4 * v64];
    v229 = 1;
    v230 = &v223;
    v231 = xmmword_2261A6E10;
    v232 = v68;
    *(_QWORD *)v233 = 0;
    *(_QWORD *)((char *)&v233[1] + 1) = 0;
    v70 = a4[1].f32[0];
    v69 = a4[1].f32[1];
    v71 = (float)(v69 * v69) + -0.5;
    v72 = a4->f32[1];
    v73 = (float)((float)((float)(*(float *)&v215[4] + *(float *)&v215[4]) * v72)
                + (float)(a4->f32[0] * (float)(*(float *)v215 + *(float *)v215)))
        + (float)(v70 * (float)(*(float *)&v215[8] + *(float *)&v215[8]));
    if ((float)((float)((float)-(float)((float)((float)((float)(v69
                                                               * (float)((float)(v70
                                                                               * (float)(*(float *)v215 + *(float *)v215))
                                                                       - (float)(a4->f32[0]
                                                                               * (float)(*(float *)&v215[8]
                                                                                       + *(float *)&v215[8]))))
                                                       + (float)((float)(*(float *)&v215[4] + *(float *)&v215[4]) * v71))
                                               + (float)(v72 * v73))
                                       * v26)
                       - (float)(v208
                               * (float)((float)((float)(v69
                                                       * (float)((float)(v72
                                                                       * (float)(*(float *)&v215[8] + *(float *)&v215[8]))
                                                               - (float)(v70
                                                                       * (float)(*(float *)&v215[4] + *(float *)&v215[4]))))
                                               + (float)((float)(*(float *)v215 + *(float *)v215) * v71))
                                       + (float)(a4->f32[0] * v73))))
               - (float)(v25
                       * (float)((float)((float)(v69
                                               * (float)((float)(a4->f32[0]
                                                               * (float)(*(float *)&v215[4] + *(float *)&v215[4]))
                                                       - (float)(v72 * (float)(*(float *)v215 + *(float *)v215))))
                                       + (float)((float)(*(float *)&v215[8] + *(float *)&v215[8]) * v71))
                               + (float)(v70 * v73)))) < a11)
      goto LABEL_20;
    v74 = (float)(*(float *)&v215[8] + *(float *)&v215[20]) * 0.5;
    v75 = vmul_f32(vadd_f32(*(float32x2_t *)v215, *(float32x2_t *)&v215[12]), (float32x2_t)0x3F0000003F000000);
    v76 = vadd_f32(vmul_f32(vsub_f32(*(float32x2_t *)&v215[12], *(float32x2_t *)v215), (float32x2_t)0x3F0000003F000000), (float32x2_t)vdup_n_s32(0x3CA3D70Au));
    v77 = (float)((float)(*(float *)&v215[20] - *(float *)&v215[8]) * 0.5) + 0.02;
    v78 = vmvn_s8((int8x8_t)vcge_f32(vadd_f32(v199, v76), vabd_f32(v202, v75)));
    if ((v78.i8[0] & 1) != 0 || (v78.i8[4] & 1) != 0 || (v79 = 0.0, vabds_f32(v62, v74) > (float)(v197 + v77)))
    {
      v84 = 0;
      *(float32x2_t *)&v212[0] = v195;
      *((float *)v212 + 2) = v23 - v210;
      v280.i32[0] = v192;
      v280.f32[1] = v202.f32[1] + v199.f32[1];
      v281 = v190;
      v275 = v189;
      v276 = v202.f32[1] - v199.f32[1];
      v277 = v67;
      v273 = (unint64_t)vadd_f32(v75, v76);
      v274 = v74 + v77;
      v85 = v74 - v77;
      v271 = vsub_f32(v75, v76);
      v79 = 0.0;
      v86 = 1.0;
      v272 = v85;
      while (1)
      {
        v87 = *(float *)((char *)v212 + v84 * 4);
        if (v87 < -0.000001)
          break;
        if (v87 <= 0.000001)
        {
          if (*(float *)((char *)&v273 + v84 * 4) < *(float *)((char *)&v275 + v84 * 4)
            || v271.f32[v84] > v280.f32[v84])
          {
            goto LABEL_20;
          }
          goto LABEL_41;
        }
        v88 = v271.f32[v84];
        v89 = v280.f32[v84];
        if (v88 > v89)
          goto LABEL_20;
        v93 = *(float *)((char *)&v273 + v84 * 4);
        v94 = *(float *)((char *)&v275 + v84 * 4);
        if (v93 < v94)
        {
          v95 = (float)(v94 - v93) / v87;
          if (v95 > v79)
            v79 = v95;
        }
        if (v89 > v88)
          goto LABEL_36;
LABEL_41:
        if (v79 > v86)
          goto LABEL_20;
        if (++v84 == 3)
        {
          if (v79 > 1.0)
            goto LABEL_20;
          goto LABEL_14;
        }
      }
      v88 = *(float *)((char *)&v273 + v84 * 4);
      v89 = *(float *)((char *)&v275 + v84 * 4);
      if (v88 < v89)
        goto LABEL_20;
      v90 = v280.f32[v84];
      v91 = v271.f32[v84];
      if (v90 < v91)
      {
        v92 = (float)(v90 - v91) / v87;
        if (v92 > v79)
          v79 = v92;
      }
      if (v88 <= v89)
        goto LABEL_41;
LABEL_36:
      v96 = (float)(v89 - v88) / v87;
      if (v96 < v86)
        v86 = v96;
      goto LABEL_41;
    }
LABEL_14:
    if (v204)
    {
      v80 = v204;
      while (1)
      {
        v81 = (v80 - 1);
        v82 = *(float *)&v66[v81];
        if (v82 <= v79)
          break;
        *(float *)&v66[v80] = v82;
        v65[v80--] = v65[v81];
        if (!v81)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      LODWORD(v80) = 0;
    }
    v83 = v80;
    v65[v83] = *(_DWORD *)&v206[4 * v64];
    *(float *)&v66[v83] = v79;
    ++v204;
LABEL_20:
    ++v64;
  }
  while (v64 != v61);
  v97 = *((float *)a1 + 2);
  v98 = a4[2].f32[0];
  v99 = a4[2].f32[1];
  v100 = a4[3].f32[0];
  v101 = (float)(a6[2].f32[0] - v98) + (float)(a6[2].f32[0] - v98);
  v102 = (float)(a6[2].f32[1] - v99) + (float)(a6[2].f32[1] - v99);
  v103 = (float)(a6[3].f32[0] - v100) + (float)(a6[3].f32[0] - v100);
  v105 = a4[1].f32[0];
  v104 = a4[1].f32[1];
  v106 = (float)(v104 * v104) + -0.5;
  v107 = a4->f32[0];
  v108 = a4->f32[1];
  v109 = (float)((float)(v102 * v108) + (float)(a4->f32[0] * v101)) + (float)(v105 * v103);
  *(float *)&v110 = (float)((float)(v101 * v106) - (float)((float)((float)(v108 * v103) - (float)(v105 * v102)) * v104))
                  + (float)(a4->f32[0] * v109);
  *(float *)&v111 = (float)((float)(v102 * v106)
                          - (float)((float)((float)(v105 * v101) - (float)(a4->f32[0] * v103)) * v104))
                  + (float)(v108 * v109);
  v112 = (float)((float)(v103 * v106) - (float)((float)((float)(a4->f32[0] * v102) - (float)(v108 * v101)) * v104))
       + (float)(v105 * v109);
  v273 = __PAIR64__(v111, v110);
  v274 = v112;
  if (v204)
  {
    v113 = (float)(a5[2].f32[0] - v98) + (float)(a5[2].f32[0] - v98);
    v114 = (float)(a5[2].f32[1] - v99) + (float)(a5[2].f32[1] - v99);
    v115 = (float)(a5[3].f32[0] - v100) + (float)(a5[3].f32[0] - v100);
    v116 = (float)((float)(v108 * v114) + (float)(v107 * v113)) + (float)(v105 * v115);
    v188 = (float)((float)(v113 * v106) - (float)((float)((float)(v108 * v115) - (float)(v105 * v114)) * v104))
         + (float)(v107 * v116);
    v187 = (float)((float)(v114 * v106) - (float)((float)((float)(v105 * v113) - (float)(v107 * v115)) * v104))
         + (float)(v108 * v116);
    v117 = v200;
    v185 = v97 + v200.n128_f32[0];
    v186 = (float)((float)(v115 * v106) - (float)((float)((float)(v107 * v114) - (float)(v108 * v113)) * v104))
         + (float)(v105 * v116);
    v118 = v204;
    v196 = 0;
    v194 = 0.0;
    v119 = -1;
    v120 = 3.4028e38;
    v191 = 0.0;
    v193 = 0.0;
    v121 = 0;
    v123 = v183;
    v122 = v184;
    do
    {
      v225 = 0;
      v226 = v211;
      v227 = &v264;
      v228 = v65;
      v229 = 1;
      v230 = (uint64_t *)&v225;
      v231 = xmmword_2261A6E10;
      v232 = vdup_n_s32(0xFE7FFFFF);
      *(_QWORD *)v233 = 0;
      *(_QWORD *)((char *)&v233[1] + 1) = 0;
      v124 = *(_QWORD *)(v211 + 48);
      v125 = *(_QWORD *)(v124 + 48);
      v126 = (3 * *v65);
      if ((*(_BYTE *)(v124 + 92) & 2) != 0)
      {
        v131 = (unsigned __int16 *)(v125 + 2 * v126);
        v128 = *v131;
        v129 = v131[1];
        v130 = v131[2];
      }
      else
      {
        v127 = (unsigned int *)(v125 + 4 * v126);
        v128 = *v127;
        v129 = v127[1];
        v130 = v127[2];
      }
      v132 = *(_QWORD *)(v124 + 40);
      v133 = (float *)(v132 + 12 * v130);
      v134 = (float *)(v132 + 12 * v129);
      v135 = (float *)(v132 + 12 * v128);
      v136 = v135[1];
      v137 = v135[2];
      v139 = v134[1];
      v138 = v134[2];
      v140 = *v134;
      v141 = *v133;
      v142 = v133[1];
      v143 = v133[2];
      v144 = (float)((float)(*v135 * v265) + (float)(v136 * v267)) + (float)(v137 * v269);
      *(float32x2_t *)v145.f32 = vadd_f32(vadd_f32(vmul_n_f32(v264, *v135), vmul_n_f32(v266, v136)), vmul_n_f32(v268, v137));
      v221 = v145.i64[0];
      v222 = v144;
      if (v270)
        v146 = v141;
      else
        v146 = v140;
      if (v270)
        v147 = v142;
      else
        v147 = v139;
      v148 = (float)(v146 * v265) + (float)(v147 * v267);
      if (v270)
        v149 = v143;
      else
        v149 = v138;
      v150 = vadd_f32(vadd_f32(vmul_n_f32(v264, v146), vmul_n_f32(v266, v147)), vmul_n_f32(v268, v149));
      v151 = v148 + (float)(v149 * v269);
      if (v270)
        v152 = v140;
      else
        v152 = v141;
      if (!v270)
        v139 = v142;
      v153 = (float)(v152 * v265) + (float)(v139 * v267);
      if (!v270)
        v138 = v143;
      *(float32x2_t *)v154.f32 = vadd_f32(vadd_f32(vmul_n_f32(v264, v152), vmul_n_f32(v266, v139)), vmul_n_f32(v268, v138));
      v145.i64[1] = LODWORD(v144);
      v207 = v150;
      v209 = v151;
      *(float32x2_t *)v155.f32 = v150;
      v155.i64[1] = LODWORD(v151);
      v203 = v153 + (float)(v138 * v269);
      v205 = v154.i64[0];
      v154.i64[1] = LODWORD(v203);
      v156 = vmulq_f32(vaddq_f32(v154, vaddq_f32(v145, v155)), (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu));
      v156.i32[3] = 0;
      v217 = 0;
      *(float32x4_t *)v215 = v156;
      v218 = v145;
      v219 = v155;
      v220 = v154;
      *(_QWORD *)&v215[16] = 0x7F7FFFFF00000000;
      v216 = 0x57F7FFFFFLL;
      v157 = *a1;
      v212[0] = xmmword_2260E5F10;
      v212[1] = xmmword_2260E5F10;
      v212[2] = xmmword_2260FD430;
      v212[3] = xmmword_2260E5F20;
      v213 = 0x3F80000000000000;
      v214 = 0;
      v158 = ((float (*)(__n128, float))*(&physx::Gu::g_TriangleSweepMethodTable + *v157))(v117, 0.0);
      v159 = -v271.f32[0];
      v160 = -v271.f32[1];
      v161 = -v272;
      v271.f32[0] = -v271.f32[0];
      v271.f32[1] = -v271.f32[1];
      v272 = -v272;
      if (v158 <= 0.0)
      {
        v198 = v120;
        v162 = v121;
        v163 = v207.f32[0] - *(float *)&v221;
        v164 = v207.f32[1] - *((float *)&v221 + 1);
        v165 = v209 - v222;
        v166 = *(float *)&v205 - *(float *)&v221;
        v167 = *((float *)&v205 + 1) - *((float *)&v221 + 1);
        v168 = v203 - v222;
        *(float *)v212 = *(float *)&v221 + (float)(v207.f32[0] - *(float *)&v221);
        *((float *)v212 + 1) = *((float *)&v221 + 1) + (float)(v207.f32[1] - *((float *)&v221 + 1));
        *((float *)v212 + 2) = v222 + (float)(v209 - v222);
        v280.f32[0] = *(float *)&v221 + (float)(*(float *)&v205 - *(float *)&v221);
        v280.f32[1] = *((float *)&v221 + 1) + (float)(*((float *)&v205 + 1) - *((float *)&v221 + 1));
        v281 = v222 + (float)(v203 - v222);
        v279 = 0;
        v278 = 0;
        physx::Gu::closestPtPointTriangle((float *)&v273, (float *)&v221, (float32x2_t *)v212, &v280, (float *)&v279, (float *)&v278, (uint64_t)&v275);
        v169 = (float)((float)((float)(v276 - *((float *)&v273 + 1)) * (float)(v276 - *((float *)&v273 + 1)))
                     + (float)((float)(v275 - *(float *)&v273) * (float)(v275 - *(float *)&v273)))
             + (float)((float)(v277 - v274) * (float)(v277 - v274));
        v158 = 0.0;
        if (v169 < (float)(v185 * v185))
        {
          v170 = sqrtf(v169);
          v171 = v170 - v185;
          v172 = -(float)((float)(v185 * 2.0) - v170);
          if ((float)((float)((float)((float)(v187 * (float)((float)(v165 * v166) - (float)(v163 * v168)))
                                     + (float)((float)((float)(v164 * v168) - (float)(v165 * v167)) * v188))
                             + (float)((float)((float)(v163 * v167) - (float)(v164 * v166)) * v186))
                     - (float)((float)((float)((float)((float)(v165 * v166) - (float)(v163 * v168))
                                             * *((float *)&v221 + 1))
                                     + (float)((float)((float)(v164 * v168) - (float)(v165 * v167)) * *(float *)&v221))
                             + (float)((float)((float)(v163 * v167) - (float)(v164 * v166)) * v222))) >= 0.0)
            v158 = v171;
          else
            v158 = v172;
        }
        v174 = a4[1].f32[0];
        v173 = a4[1].f32[1];
        v175 = (float)(v173 * v173) + -0.5;
        v176 = a4->f32[1];
        v177 = (float)((float)((float)(*((float *)v212 + 1) + *((float *)v212 + 1)) * v176)
                     + (float)(a4->f32[0] * (float)(*(float *)v212 + *(float *)v212)))
             + (float)(v174 * (float)(*((float *)v212 + 2) + *((float *)v212 + 2)));
        v159 = (float)((float)(v173
                             * (float)((float)(v176 * (float)(*((float *)v212 + 2) + *((float *)v212 + 2)))
                                     - (float)(v174 * (float)(*((float *)v212 + 1) + *((float *)v212 + 1)))))
                     + (float)((float)(*(float *)v212 + *(float *)v212) * v175))
             + (float)(a4->f32[0] * v177);
        v160 = (float)((float)(v173
                             * (float)((float)(v174 * (float)(*(float *)v212 + *(float *)v212))
                                     - (float)(a4->f32[0] * (float)(*((float *)v212 + 2) + *((float *)v212 + 2)))))
                     + (float)((float)(*((float *)v212 + 1) + *((float *)v212 + 1)) * v175))
             + (float)(v176 * v177);
        v161 = (float)((float)(v173
                             * (float)((float)(a4->f32[0] * (float)(*((float *)v212 + 1) + *((float *)v212 + 1)))
                                     - (float)(v176 * (float)(*(float *)v212 + *(float *)v212))))
                     + (float)((float)(*((float *)v212 + 2) + *((float *)v212 + 2)) * v175))
             + (float)(v174 * v177);
        v121 = v162;
        v120 = v198;
      }
      if (v158 < v120)
      {
        v196 = v223;
        v121 = v224;
        v191 = v160;
        v193 = v159;
        v194 = v161;
        v120 = v158;
        v119 = *v65;
      }
      ++v65;
      --v118;
      v117 = v200;
    }
    while (v118);
    v66 = v284;
    v178 = v196;
    v179 = v194;
    v181 = v191;
    v180 = v193;
  }
  else
  {
    v178 = 0;
    v119 = -1;
    v121 = 0;
    v120 = 3.4028e38;
    v180 = 0.0;
    v181 = 0.0;
    v179 = 0.0;
    v123 = v183;
    v122 = v184;
  }
  *v123 = v180;
  v123[1] = v181;
  v123[2] = v179;
  *(_QWORD *)v122 = v178;
  *(_DWORD *)(v122 + 8) = v121;
  *a12 = v119;
  if ((v285 & 0x8000000000000000) == 0 && (v285 & 0x7FFFFFFF00000000) != 0 && v66 != v282 && v66)
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v66);
  if ((v288 & 0x8000000000000000) == 0 && (v288 & 0x7FFFFFFF00000000) != 0 && v287 != (int *)v286 && v287)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
LABEL_88:
  if ((v291 & 0x8000000000000000) == 0 && (v291 & 0x7FFFFFFF00000000) != 0 && v290 != v289 && v290)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v120;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<256u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::resize(uint64_t result, unsigned int a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 276) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<256u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 272);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)(v5 + 264);
    v8 = (_DWORD *)(v7 + 4 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7 + 4 * (unint64_t)a2);
  }
  *(_DWORD *)(v5 + 272) = a2;
  return result;
}

float *physx::Gu::`anonymous namespace'::ConvexTriangles::getPolygonNormal(float *this, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int16 *v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 48);
  v3 = *(_BYTE *)(v2 + 92);
  v4 = *(_QWORD *)(v2 + 40);
  v5 = *(_QWORD *)(v2 + 48);
  v6 = (3 * **(_DWORD **)(a2 + 16));
  if ((v3 & 2) != 0)
  {
    v11 = (unsigned __int16 *)(v5 + 2 * v6);
    v8 = *v11;
    v9 = v11[1];
    v10 = v11[2];
  }
  else
  {
    v7 = (unsigned int *)(v5 + 4 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = v7[2];
  }
  v12 = (float *)(v4 + 12 * v10);
  v13 = (float *)(v4 + 12 * v9);
  v14 = (float *)(v4 + 12 * v8);
  v16 = v14[1];
  v15 = v14[2];
  v17 = *v14;
  v19 = v13[1];
  v18 = v13[2];
  v20 = *v13;
  v21 = *(_QWORD *)(a2 + 8);
  v22 = *(float *)v21;
  v23 = *(float *)(v21 + 4);
  v24 = *(float *)(v21 + 8);
  v25 = *(float *)(v21 + 12);
  v26 = *(float *)(v21 + 16);
  v27 = *(float *)(v21 + 20);
  v28 = (float)(v17 * *(float *)v21) + (float)(v16 * v25);
  v29 = (float)(v17 * v23) + (float)(v16 * v26);
  v30 = (float)(v17 * v24) + (float)(v16 * v27);
  v31 = *(float *)(v21 + 24);
  v32 = *(float *)(v21 + 28);
  v33 = *(float *)(v21 + 32);
  v34 = v28 + (float)(v15 * v31);
  v35 = v29 + (float)(v15 * v32);
  v36 = v30 + (float)(v15 * v33);
  if (*(_BYTE *)(v21 + 72))
    v37 = *v12;
  else
    v37 = *v13;
  v38 = v22 * v37;
  v39 = v37 * v23;
  v40 = v37 * v24;
  if (*(_BYTE *)(v21 + 72))
    v41 = v12[1];
  else
    v41 = v13[1];
  v42 = v38 + (float)(v41 * v25);
  v43 = v39 + (float)(v41 * v26);
  v44 = v40 + (float)(v41 * v27);
  if (*(_BYTE *)(v21 + 72))
    v45 = v12[2];
  else
    v45 = v13[2];
  v46 = v42 + (float)(v45 * v31);
  v47 = v43 + (float)(v45 * v32);
  v48 = v44 + (float)(v45 * v33);
  if (!*(_BYTE *)(v21 + 72))
    v20 = *v12;
  v49 = v22 * v20;
  v50 = v20 * v23;
  v51 = v20 * v24;
  if (!*(_BYTE *)(v21 + 72))
    v19 = v12[1];
  v52 = v49 + (float)(v19 * v25);
  v53 = v50 + (float)(v19 * v26);
  v54 = v51 + (float)(v19 * v27);
  if (!*(_BYTE *)(v21 + 72))
    v18 = v12[2];
  v55 = v36 - v48;
  v56 = v34 - (float)(v52 + (float)(v18 * v31));
  v57 = v35 - (float)(v53 + (float)(v18 * v32));
  v58 = v36 - (float)(v54 + (float)(v18 * v33));
  v59 = (float)((float)(v35 - v47) * v58) - (float)(v55 * v57);
  v60 = (float)(v55 * v56) - (float)((float)(v34 - v46) * v58);
  v61 = (float)((float)(v34 - v46) * v57) - (float)((float)(v35 - v47) * v56);
  v62 = (float)((float)(v60 * v60) + (float)(v59 * v59)) + (float)(v61 * v61);
  v63 = 0.0;
  v64 = 0.0;
  v65 = 0.0;
  if (v62 > 0.0)
  {
    v66 = 1.0 / sqrtf(v62);
    v63 = v59 * v66;
    v64 = v60 * v66;
    v65 = v61 * v66;
  }
  *this = v63;
  this[1] = v64;
  this[2] = v65;
  return this;
}

float physx::Gu::`anonymous namespace'::ConvexTriangles::getBounds(uint64_t a1, uint64_t a2, float *a3)
{
  int v3;
  int *v4;
  float *v5;
  uint64_t v6;
  char v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int16 *v25;
  float *v26;
  float *v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float result;

  v3 = *(_DWORD *)(a1 + 24);
  if (v3)
  {
    v5 = *(float **)(a1 + 8);
    v4 = *(int **)(a1 + 16);
    v6 = *(_QWORD *)(*(_QWORD *)a1 + 48);
    v7 = *(_BYTE *)(v6 + 92);
    v9 = a3[2];
    v8 = a3[3];
    v10 = (float)(v8 * v8) + -0.5;
    v11 = *a3;
    v12 = a3[1];
    v13 = -v9;
    v14 = -*a3;
    v15 = -v12;
    v16 = *(_QWORD *)(v6 + 40);
    v17 = *(_QWORD *)(v6 + 48);
    v18 = *(unsigned int *)(a1 + 24);
    do
    {
      v19 = *v4++;
      v20 = (3 * v19);
      if ((v7 & 2) != 0)
      {
        v25 = (unsigned __int16 *)(v17 + 2 * v20);
        v22 = *v25;
        v23 = v25[1];
        v24 = v25[2];
      }
      else
      {
        v21 = (unsigned int *)(v17 + 4 * v20);
        v22 = *v21;
        v23 = v21[1];
        v24 = v21[2];
      }
      v26 = (float *)(v16 + 12 * v24);
      v27 = (float *)(v16 + 12 * v23);
      v28 = (float *)(v16 + 12 * v22);
      v30 = v28[1];
      v29 = v28[2];
      v32 = v27[1];
      v31 = v27[2];
      v33 = *v27;
      v35 = v26[1];
      v34 = v26[2];
      v36 = *v26;
      v37 = (float)((float)(*v28 * *v5) + (float)(v30 * v5[3])) + (float)(v29 * v5[6]);
      v38 = (float)((float)(*v28 * v5[1]) + (float)(v30 * v5[4])) + (float)(v29 * v5[7]);
      v39 = (float)((float)(*v28 * v5[2]) + (float)(v30 * v5[5])) + (float)(v29 * v5[8]);
      v40 = v37 + v37;
      v41 = v38 + v38;
      v42 = v39 + v39;
      v43 = (float)((float)(v12 * (float)(v38 + v38)) + (float)(v11 * v40)) + (float)(v9 * v42);
      v44 = a3[4]
          + (float)((float)((float)(v8 * (float)((float)(v41 * v13) + (float)(v12 * v42))) + (float)(v40 * v10))
                  + (float)(v11 * v43));
      v45 = a3[5]
          + (float)((float)((float)(v8 * (float)((float)(v42 * v14) + (float)(v9 * v40))) + (float)(v41 * v10))
                  + (float)(v12 * v43));
      v46 = a3[6]
          + (float)((float)((float)(v8 * (float)((float)(v40 * v15) + (float)(v11 * v41))) + (float)(v42 * v10))
                  + (float)(v9 * v43));
      v47 = *(float *)(a1 + 84) + v44;
      v48 = *(float *)(a1 + 88) + v45;
      *(float *)(a1 + 84) = v47;
      *(float *)(a1 + 88) = v48;
      v49 = v46 + *(float *)(a1 + 92);
      *(float *)(a1 + 92) = v49;
      if (*(float *)(a1 + 60) >= v44)
        v50 = v44;
      else
        v50 = *(float *)(a1 + 60);
      if (*(float *)(a1 + 64) >= v45)
        v51 = v45;
      else
        v51 = *(float *)(a1 + 64);
      v52 = *(float *)(a1 + 72);
      if (*(float *)(a1 + 68) >= v46)
        v53 = v46;
      else
        v53 = *(float *)(a1 + 68);
      *(float *)(a1 + 60) = v50;
      *(float *)(a1 + 64) = v51;
      if (v52 <= v44)
        v54 = v44;
      else
        v54 = v52;
      if (*(float *)(a1 + 76) > v45)
        v45 = *(float *)(a1 + 76);
      if (*(float *)(a1 + 80) <= v46)
        v55 = v46;
      else
        v55 = *(float *)(a1 + 80);
      *(float *)(a1 + 68) = v53;
      *(float *)(a1 + 72) = v54;
      *(float *)(a1 + 76) = v45;
      *(float *)(a1 + 80) = v55;
      v56 = (float)(v33 * *v5) + (float)(v32 * v5[3]);
      v57 = (float)(v33 * v5[1]) + (float)(v32 * v5[4]);
      v58 = (float)(v33 * v5[2]) + (float)(v32 * v5[5]);
      v59 = v31 * v5[7];
      v60 = v56 + (float)(v31 * v5[6]);
      v61 = v58 + (float)(v31 * v5[8]);
      v62 = v60 + v60;
      v63 = (float)(v57 + v59) + (float)(v57 + v59);
      v64 = v61 + v61;
      v65 = (float)((float)(v12 * v63) + (float)(v11 * v62)) + (float)(v9 * v64);
      v66 = (float)((float)(v8 * (float)((float)(v63 * v13) + (float)(v12 * v64))) + (float)(v62 * v10))
          + (float)(v11 * v65);
      v67 = (float)((float)(v8 * (float)((float)(v64 * v14) + (float)(v9 * v62))) + (float)(v63 * v10))
          + (float)(v12 * v65);
      v68 = (float)((float)(v8 * (float)((float)(v62 * v15) + (float)(v11 * v63))) + (float)(v64 * v10))
          + (float)(v9 * v65);
      v69 = a3[4] + v66;
      v70 = a3[5] + v67;
      v71 = a3[6] + v68;
      v72 = v47 + v69;
      v73 = v48 + v70;
      *(float *)(a1 + 84) = v47 + v69;
      *(float *)(a1 + 88) = v48 + v70;
      v74 = v49 + v71;
      *(float *)(a1 + 92) = v49 + v71;
      if (v50 >= v69)
        v75 = v69;
      else
        v75 = v50;
      if (v51 >= v70)
        v76 = v70;
      else
        v76 = v51;
      if (v53 >= v71)
        v77 = v71;
      else
        v77 = v53;
      *(float *)(a1 + 60) = v75;
      *(float *)(a1 + 64) = v76;
      if (v54 <= v69)
        v78 = v69;
      else
        v78 = v54;
      if (v45 <= v70)
        v79 = v70;
      else
        v79 = v45;
      if (v55 > v71)
        v71 = v55;
      *(float *)(a1 + 68) = v77;
      *(float *)(a1 + 72) = v78;
      *(float *)(a1 + 76) = v79;
      *(float *)(a1 + 80) = v71;
      v80 = (float)(v36 * *v5) + (float)(v35 * v5[3]);
      v81 = (float)(v36 * v5[1]) + (float)(v35 * v5[4]);
      v82 = (float)(v36 * v5[2]) + (float)(v35 * v5[5]);
      v83 = v34 * v5[7];
      v84 = v80 + (float)(v34 * v5[6]);
      v85 = v82 + (float)(v34 * v5[8]);
      v86 = v84 + v84;
      v87 = (float)(v81 + v83) + (float)(v81 + v83);
      v88 = v85 + v85;
      v89 = (float)((float)(v12 * v87) + (float)(v11 * v86)) + (float)(v9 * v88);
      v90 = (float)((float)(v8 * (float)((float)(v87 * v13) + (float)(v12 * v88))) + (float)(v86 * v10))
          + (float)(v11 * v89);
      v91 = (float)((float)(v8 * (float)((float)(v88 * v14) + (float)(v9 * v86))) + (float)(v87 * v10))
          + (float)(v12 * v89);
      v92 = (float)((float)(v8 * (float)((float)(v86 * v15) + (float)(v11 * v87))) + (float)(v88 * v10))
          + (float)(v9 * v89);
      v93 = a3[4] + v90;
      v94 = a3[5] + v91;
      v95 = a3[6] + v92;
      v96 = v72 + v93;
      v97 = v73 + v94;
      *(float *)(a1 + 84) = v72 + v93;
      *(float *)(a1 + 88) = v73 + v94;
      v98 = v74 + v95;
      *(float *)(a1 + 92) = v74 + v95;
      if (v75 >= v93)
        v99 = v93;
      else
        v99 = v75;
      if (v76 >= v94)
        v100 = v94;
      else
        v100 = v76;
      if (v77 >= v95)
        v101 = v95;
      else
        v101 = v77;
      *(float *)(a1 + 60) = v99;
      *(float *)(a1 + 64) = v100;
      if (v78 <= v93)
        v102 = v93;
      else
        v102 = v78;
      if (v79 <= v94)
        v103 = v94;
      else
        v103 = v79;
      *(float *)(a1 + 68) = v101;
      *(float *)(a1 + 72) = v102;
      if (v71 <= v95)
        v71 = v95;
      *(float *)(a1 + 76) = v103;
      *(float *)(a1 + 80) = v71;
      --v18;
    }
    while (v18);
  }
  else
  {
    v96 = *(float *)(a1 + 84);
    v97 = *(float *)(a1 + 88);
    v98 = *(float *)(a1 + 92);
    v99 = *(float *)(a1 + 60);
    v100 = *(float *)(a1 + 64);
    v101 = *(float *)(a1 + 68);
  }
  v104 = 1.0 / (float)(3 * v3);
  *(float *)(a1 + 84) = v104 * v96;
  *(float *)(a1 + 88) = v104 * v97;
  *(float *)(a1 + 92) = v104 * v98;
  *(_BYTE *)(a1 + 96) = 1;
  *(float *)a2 = v99;
  *(float *)(a2 + 4) = v100;
  *(float *)(a2 + 8) = v101;
  *(_QWORD *)(a2 + 12) = *(_QWORD *)(a1 + 72);
  result = *(float *)(a1 + 80);
  *(float *)(a2 + 20) = result;
  return result;
}

float physx::Gu::SweepEstimateAnyShapeMesh(float32x2_t *a1, uint64_t *a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6, double a7)
{
  uint64_t v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float32x2_t v17;
  float v18;
  int8x16_t v19;
  int8x16_t v20;
  int32x4_t v21;
  float32x4_t v24[3];
  float32x2_t v25;
  float v26;
  _BYTE v27[60];
  _OWORD v28[2];
  int v29;
  float32x2_t v30;
  float v31;
  float32x2_t v32;
  float v33;
  float32x2_t v34;
  float v35;
  float32x2_t v36;
  float v37;
  _BYTE v38[76];

  v12 = *a2;
  v13 = (float *)(*a2 + 4);
  physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v38, v13, (float *)(*a2 + 16));
  v14 = a3[3].f32[0] - a5[3].f32[0];
  v36 = vsub_f32(a3[2], a5[2]);
  v37 = v14;
  v15 = a4[3].f32[0] - a6[3].f32[0];
  v34 = vsub_f32(a4[2], a6[2]);
  v35 = v15;
  v16 = v14 - v15;
  v17 = vsub_f32(v36, v34);
  v32 = v17;
  v33 = v16;
  v30 = v17;
  v31 = v16;
  v18 = sqrtf(vmlas_n_f32(vmuls_lane_f32(v17.f32[1], v17, 1), v17.f32[0], v17.f32[0]) + (float)(v16 * v16));
  if (v18 > 0.0)
  {
    v30.f32[0] = v17.f32[0] * (float)(1.0 / v18);
    v30.f32[1] = v17.f32[1] * (float)(1.0 / v18);
    v31 = v16 * (float)(1.0 / v18);
  }
  v28[0] = xmmword_2260E5F10;
  v28[1] = xmmword_2260E5F10;
  v29 = 1065353216;
  *(float32x2_t *)v19.i8 = physx::Gu::computeSweptBox((uint64_t)v27, (float *)&a1[8] + 1, a1 + 10, (float *)v28, &v30, v18);
  physx::Gu::computeVertexSpaceOBB(v24, (uint64_t)v27, (float *)a4, v13, v19, v20, v21);
  v25 = vadd_f32(v25, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0));
  v26 = v26 + *(float *)&a7;
  ((void (*)(void))*(&physx::Gu::gMidphaseBoxCBOverlapTable
                   + *(unsigned __int16 *)(*(_QWORD *)(v12 + 48) + 8)
                   - 3))();
  return 3.4028e38;
}

float physx::Gu::UnimplementedSweep()
{
  return 3.4028e38;
}

float32_t physx::Gu::SweepGeomGeom<physx::Gu::CapsuleV,physx::Gu::CapsuleV>(uint64_t *a1, uint64_t *a2, int8x8_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  float32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  int8x8_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x2x2_t v38;
  float32x4_t v39;
  int8x8_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float *v61;
  float *v62;
  float32x2x2_t v63;
  int32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x2_t v68;
  float32x2_t v69;
  int8x16_t v70;
  float32x2_t v71;
  float32x2_t v72;
  int v73;
  float32x2_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x2_t v88;
  int32x4_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int32x4_t v93;
  unsigned __int32 v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x2_t v97;
  int v98;
  float32x2_t v99;
  float32x2_t v100;
  int v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x2_t v112;
  float32x4_t v113;
  float32x2_t v114;
  float32x2_t v115;
  int v116;
  float32x2_t v117;
  float32x4_t v118;
  float32x4_t v119;
  uint64_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x2_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x2_t v126;
  float32x2_t v127;
  int v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  int8x8_t v132;
  float32x2_t v133;
  float32x2_t v134;
  float32x2_t v135;
  float32x2_t v136;
  float32x2_t v137;
  float32x2_t v138;
  int8x8_t v139;
  float32x4_t v140;
  float32x2_t v141;
  float32x2_t v142;
  int8x8_t v143;
  float32x4_t v144;
  int8x8_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x2_t v148;
  float32x4_t v149;
  float32x2_t v150;
  float32x4_t v151;
  float32x2_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x2_t v156;
  float32x4_t v157;
  float32x2_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x2_t v161;
  float32x4_t v162;
  float32x2_t v163;
  float32x4_t v164;
  float32x2_t v165;
  float32x4_t v166;
  float32x2_t v167;
  __int32 v168;
  uint64_t v169;
  uint64_t v170;
  float32x4_t v171;
  float32x2_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x2_t v175;
  float32x2_t v176;
  int v177;
  float32x2_t v178;
  int v179;
  float32x4_t v180;
  float32x2_t v181;
  float32x2_t v182;
  int v183;
  unsigned int v184;
  float32x2_t v185;
  float32x2_t v186;
  float32x2_t v187;
  int v188;
  int8x16_t v189;
  float32x2_t v190;
  float32x2_t v191;
  int v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x2_t v199;
  int8x8_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x2_t v203;
  float32x2_t v204;
  int v205;
  float32x2_t v206;
  float32x2_t v207;
  int v208;
  int8x16_t v209;
  int8x16_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x2_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x2_t v221;
  float32x2_t v222;
  int v223;
  float32x4_t v224;
  float32x4_t v225;
  int8x16_t v226;
  float32x4_t v227;
  float32x2x2_t v228;
  int32x4_t v229;
  float32x4_t *v230;
  float *v231;
  float32x4_t v233;
  float32x4_t v234;
  float32x2_t v235;
  float32x2_t v236;
  int v237;
  float32x2_t v238;
  float32x2_t v239;
  int v240;
  float32x4_t v241;
  int8x8_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  int32x4_t v255;
  float32x2_t v256;
  float32x2_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float v260;
  float32x2_t v261;
  float32x4_t v262;
  float32x4_t v263;
  int8x16_t v264;
  float32x4_t v265;
  float32x2_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  int8x16_t v270;
  float32x4_t v271;
  float32x4_t v272;
  int8x16_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  int32x4_t *v278;
  _OWORD v279[2];
  _OWORD v280[2];
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  unsigned int v286;
  float32x2_t v287;
  float32x2_t v288;
  _QWORD v289[2];
  float v290;
  __int32 v291;
  __int32 v292;
  int v293;
  char v294;
  float32x4_t v295;
  float32x4_t v296;
  int32x2_t v297;
  _QWORD v298[2];
  float32x2_t v299;
  int v300;
  int v301;
  char v302;
  float32x4_t v303;
  float32x4_t v304;
  int32x2_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  int32x4_t v309;
  _OWORD v310[2];
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  __int128 v314;
  float32x2_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  __int128 v319;
  uint64_t v320;
  float32x2x2_t v321;

  v320 = *MEMORY[0x24BDAC8D0];
  v14 = *a1;
  v15 = *a2;
  v16 = 4;
  v301 = 4;
  v298[1] = 0;
  v298[0] = 0;
  LODWORD(a12) = *(_DWORD *)(v14 + 4);
  v18 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, *(float *)(v14 + 8));
  v18.i32[3] = 0;
  v17 = vnegq_f32(v18);
  v17.i32[3] = 0;
  v303 = v18;
  v304 = v17;
  v305 = vdup_lane_s32(*(int32x2_t *)&a12, 0);
  v299.i32[0] = LODWORD(a12);
  v299.i32[1] = LODWORD(a12);
  v300 = LODWORD(a12);
  v302 = 1;
  v293 = 4;
  v289[1] = 0;
  v289[0] = 0;
  v18.i32[0] = *(_DWORD *)(v15 + 4);
  v19 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, *(float *)(v15 + 8));
  v19.i32[3] = 0;
  v20 = vnegq_f32(v19);
  v20.i32[3] = 0;
  v271 = v20;
  v274 = v19;
  v295 = v19;
  v296 = v20;
  v297 = vdup_lane_s32(*(int32x2_t *)v18.f32, 0);
  v290 = v18.f32[0];
  v291 = v18.i32[0];
  v292 = v18.i32[0];
  v294 = 1;
  *(float *)&a9 = *(float *)&a12 + *(float *)&a9;
  v21.i64[0] = *(_QWORD *)(a5 + 16);
  v21.i64[1] = *(unsigned int *)(a5 + 24);
  v22.i64[0] = *(_QWORD *)(a6 + 16);
  v23 = *a4;
  v22.i64[1] = *(unsigned int *)(a6 + 24);
  v24 = vnegq_f32(*a4);
  v25 = vsubq_f32(v21, v22);
  v26 = v24;
  v26.i32[3] = 0;
  v262 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v27) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v262.f32, *(float32x2_t *)v262.f32).u32[0];
  v28 = vmulq_n_f32(v25, v27);
  v28.i32[3] = 0;
  v29 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  v30 = (float32x2_t)vext_s8(*(int8x8_t *)v24.f32, (int8x8_t)v29, 4uLL);
  v31 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v24.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 4uLL)), v30, *(float32x2_t *)v25.f32);
  *(int8x8_t *)v32.f32 = vext_s8(v31, (int8x8_t)vmls_f32(vmul_f32(v29, *(float32x2_t *)v25.f32), *(float32x2_t *)v24.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL)), 4uLL);
  v32.i64[1] = v31.u32[0];
  v33 = vmlaq_laneq_f32(v28, v32, *a4, 3);
  v33.i64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u32[0];
  v34 = vmulq_f32(v26, v25);
  v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
  v35 = vmlaq_n_f32(v33, v26, vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32).f32[0]);
  v36 = vaddq_f32(v35, v35);
  v36.i32[3] = 0;
  v37 = *(float32x4_t *)a3->i8;
  v37.i32[3] = 0;
  v38 = (float32x2x2_t)vmulq_f32(v37, v26);
  v38.val[0] = (float32x2_t)vpaddq_f32((float32x4_t)v38, (float32x4_t)v38).u64[0];
  v39 = vmulq_laneq_f32(v37, *a4, 3);
  v37.i64[0] = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
  v40 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a3, *(int8x8_t *)v37.f32, 4uLL), *(float32x2_t *)v24.f32), v30, (float32x2_t)*a3);
  *(int8x8_t *)v19.f32 = vext_s8(v40, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a3, v29), *(float32x2_t *)v24.f32, *(float32x2_t *)v37.f32), 4uLL);
  *(int8x8_t *)&v19.u32[2] = v40;
  v41 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v26, *(float32x4_t *)a3->i8, 3), v39), v19);
  *(int32x2_t *)v24.f32 = vdup_lane_s32(*(int32x2_t *)v41.f32, 1);
  *(int32x2_t *)v26.f32 = vdup_laneq_s32((int32x4_t)v41, 2);
  v42 = vaddq_f32(v41, v41);
  v43 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a3->i8, *(int8x16_t *)a3->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL)), vpadd_f32(v38.val[0], v38.val[0]));
  *(int32x2_t *)v37.f32 = vdup_laneq_s32((int32x4_t)v42, 2);
  *(int32x2_t *)v41.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v42.f32), 0);
  v44 = vmul_lane_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v42.f32, 1);
  v45 = vmul_laneq_f32(*(float32x2_t *)v26.f32, v42, 2);
  *(float32x2_t *)v24.f32 = vmul_n_f32(*(float32x2_t *)v24.f32, v42.f32[0]);
  v46 = vmul_n_f32(*(float32x2_t *)v26.f32, v42.f32[0]);
  v38.val[0] = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.f32, 0), v43, 1);
  *(float32x2_t *)v26.f32 = vmul_lane_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v42.f32, 1);
  *(float32x2_t *)v42.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.f32, 1), v43, 1);
  v47 = vmul_lane_f32(*(float32x2_t *)v37.f32, v43, 1);
  __asm { FMOV            V8.2S, #1.0 }
  *(int8x8_t *)v37.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v44), v45), (int8x8_t)vadd_f32(*(float32x2_t *)v24.f32, v47), 4uLL);
  v37.i64[1] = vsub_f32(v46, *(float32x2_t *)v42.f32).u32[0];
  *(float32x2_t *)v41.f32 = vsub_f32(_D8, *(float32x2_t *)v41.f32);
  *(int8x8_t *)v24.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v24.f32, v47), (int8x8_t)vsub_f32(*(float32x2_t *)v41.f32, v45), 4uLL);
  v24.i64[1] = vadd_f32(*(float32x2_t *)v26.f32, v38.val[0]).u32[0];
  *(int8x8_t *)v26.f32 = vext_s8((int8x8_t)vadd_f32(v46, *(float32x2_t *)v42.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v26.f32, v38.val[0]), 4uLL);
  v26.i64[1] = vsub_f32(*(float32x2_t *)v41.f32, v44).u32[0];
  *(int8x8_t *)v41.f32 = a3[2];
  v41.i64[1] = a3[3].u32[0];
  v53.i64[0] = a4[1].i64[0];
  v53.i64[1] = a4[1].u32[2];
  v281 = (int32x4_t)v37;
  v282 = (int32x4_t)v24;
  v263 = v22;
  v54 = v23;
  v54.i32[3] = 0;
  v258 = vsubq_f32(v41, v21);
  v55 = vsubq_f32(vsubq_f32(v53, v22), v258);
  v260 = v27;
  v261 = *(float32x2_t *)v23.f32;
  v56 = vmulq_n_f32(v55, v27);
  v56.i32[3] = 0;
  v257 = (float32x2_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
  v256 = (float32x2_t)vext_s8(*(int8x8_t *)v23.f32, (int8x8_t)v257, 4uLL);
  *(float32x2_t *)v53.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 4uLL)), v256, *(float32x2_t *)v55.f32);
  *(int8x8_t *)v24.f32 = vext_s8(*(int8x8_t *)v53.f32, (int8x8_t)vmls_f32(vmul_f32(v257, *(float32x2_t *)v55.f32), *(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL)), 4uLL);
  v24.i64[1] = v53.u32[0];
  v57 = vmlsq_laneq_f32(v56, v24, v23, 3);
  v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
  v283 = (int32x4_t)v26;
  v284 = v36;
  v58 = vmulq_f32(v54, v55);
  v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
  v259 = v54;
  v59 = vmlaq_n_f32(v57, v54, vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32).f32[0]);
  v60 = vaddq_f32(v59, v59);
  v277.i64[0] = (uint64_t)off_24ED915F8;
  v277.i64[1] = (uint64_t)v298;
  v278 = &v281;
  v61 = (float *)v279;
  v280[0] = v26;
  v280[1] = v36;
  v279[0] = v37;
  v62 = (float *)v280;
  v63 = (float32x2x2_t)vzip1q_s32((int32x4_t)v37, (int32x4_t)v26);
  v38.val[0] = (float32x2_t)vzip2q_s32(v281, (int32x4_t)v26).u64[0];
  v64 = vzip1q_s32(v282, (int32x4_t)0);
  v39.i64[0] = vzip2q_s32(v282, (int32x4_t)0).u64[0];
  vst2_f32(v61, v63);
  v279[1] = vzip2q_s32((int32x4_t)v63, v64);
  vst2_f32(v62, v38);
  v286 = 1;
  v65 = vmulq_f32(v36, v36);
  v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
  v66 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v36, (int8x16_t)xmmword_2260E5F10);
  v67 = vmulq_f32(v66, v66);
  v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
  v68 = vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32);
  v69 = vrsqrte_f32(v68);
  do
  {
    v69 = vmul_f32(v69, vrsqrts_f32(vmul_f32(v69, v69), v68));
    --v16;
  }
  while (v16);
  v60.i32[3] = 0;
  v265 = v60;
  v70 = (int8x16_t)vmlaq_f32((float32x4_t)0, (float32x4_t)0, v60);
  v71 = vmul_f32(v68, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v68), 0), (int8x8_t)_D8, (int8x8_t)v69));
  v72 = vrecpe_f32(v71);
  v73 = 4;
  do
  {
    v72 = vmul_f32(v72, vrecps_f32(v71, v72));
    --v73;
  }
  while (v73);
  *(float *)&a9 = *(float *)&a9 + v18.f32[0];
  v74 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
  v70.i64[1] = vextq_s8(v70, v70, 8uLL).u32[0];
  v75 = vmulq_n_f32(v66, v72.f32[0]);
  v75.i32[3] = 0;
  v268 = (float32x4_t)v70;
  v269 = v75;
  v76 = vnegq_f32(v75);
  v76.i32[3] = 0;
  v306 = v76;
  *(double *)v77.i64 = physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(&v277, (float32x2_t *)&v306);
  v78 = v77;
  v79 = vmulq_f32(v274, v269);
  v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
  v80 = vmulq_f32(v271, v269);
  v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
  v81 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32), vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32)), 0), (int8x16_t)v274, (int8x16_t)v271);
  v82 = vsubq_f32(v78, v81);
  v306 = v82;
  v307 = 0u;
  v308 = 0u;
  v309 = 0u;
  v311 = v78;
  v312 = 0u;
  v83 = vnegq_f32(v82);
  v83.i32[3] = 0;
  v313 = 0u;
  v314 = 0u;
  v84 = vadd_f32(v74, 0);
  v85 = vmul_f32(v84, v84);
  v86 = vmulq_f32(v83, v83);
  v87 = vpaddq_f32(v86, v86);
  v88 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32);
  *(int32x2_t *)v87.f32 = vcgtz_f32(v88);
  v89 = vdupq_lane_s32(*(int32x2_t *)v87.f32, 0);
  v316 = v81;
  v317 = 0u;
  v318 = 0u;
  v319 = 0u;
  v87.i32[0] = -1;
  v255 = (int32x4_t)v87;
  v90 = (int8x16_t)v82;
  v91.i64[0] = -1;
  v91.i64[1] = -1;
  v264 = (int8x16_t)v83;
  v266 = 0;
  while (1)
  {
    v92 = (int8x16_t)v82;
    v93.i64[0] = -1;
    v93.i64[1] = -1;
    *(int16x4_t *)v93.i8 = vmovn_s32(vceqq_s32(v89, v93));
    v94 = vuzp1_s8(*(int8x8_t *)v93.i8, *(int8x8_t *)v93.i8).u32[0];
    if (v94 != -1)
      break;
    v95 = vmulq_f32(v83, v83);
    v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
    v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
    v97 = vrsqrte_f32(v96);
    v98 = 4;
    do
    {
      v97 = vmul_f32(v97, vrsqrts_f32(vmul_f32(v97, v97), v96));
      --v98;
    }
    while (v98);
    v270 = v92;
    v99 = vmul_f32(v96, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v96), 0), (int8x8_t)_D8, (int8x8_t)v97));
    v100 = vrecpe_f32(v99);
    v101 = 4;
    do
    {
      v100 = vmul_f32(v100, vrecps_f32(v99, v100));
      --v101;
    }
    while (v101);
    v267 = v83;
    v102 = vmulq_n_f32(v83, v100.f32[0]);
    v102.i32[3] = 0;
    v272 = v102;
    v285 = v102;
    v103 = vnegq_f32(v102);
    v103.i32[3] = 0;
    v275 = v103;
    *(double *)v104.i64 = physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(&v277, (float32x2_t *)&v285);
    v105 = v104;
    v106 = vmulq_f32(v275, v295);
    v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
    v107 = vmulq_f32(v275, v296);
    v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
    v108 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32), vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32)), 0), (int8x16_t)v295, (int8x16_t)v296);
    v109 = vaddq_f32(v268, v108);
    v82 = vsubq_f32(v104, v109);
    v110 = vnegq_f32(v82);
    v110.i32[3] = 0;
    v111 = vmulq_f32(v272, v110);
    v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
    v112 = vsub_f32(vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32), v84);
    if (v112.f32[0] > 0.0)
    {
      v113 = vmulq_f32(v265, v272);
      v113.i64[0] = vpaddq_f32(v113, v113).u64[0];
      v114 = vpadd_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32);
      if (v114.f32[0] >= 0.0)
        goto LABEL_70;
      v115 = vrecpe_f32(v114);
      v116 = 4;
      do
      {
        v115 = vmul_f32(v115, vrecps_f32(v114, v115));
        --v116;
      }
      while (v116);
      v117 = vsub_f32(v266, vmul_f32(v112, v115));
      if ((vcgt_f32(v117, v266).u8[0] & 1) != 0)
      {
        if (v117.f32[0] > 1.0)
        {
LABEL_70:
          v213 = 0;
          v211 = 0uLL;
          v215 = 0uLL;
          goto LABEL_76;
        }
        v118 = vmlaq_n_f32((float32x4_t)0, v265, v117.f32[0]);
        v118.i64[1] = vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL).u32[0];
        v119 = vsubq_f32(v118, v268);
        v316 = vaddq_f32(v119, v316);
        v317 = vaddq_f32(v119, v317);
        v318 = vaddq_f32(v119, v318);
        v306 = vsubq_f32(v311, v316);
        v307 = vsubq_f32(v312, v317);
        v308 = vsubq_f32(v313, v318);
        v109 = vaddq_f32(v108, v118);
        v82 = vsubq_f32(v105, v109);
        v88 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        v264 = (int8x16_t)v267;
        v268 = v118;
      }
      v266 = v117;
    }
    v120 = v286;
    *(&v311 + v286) = v105;
    *(&v316 + v120) = v109;
    v286 = v120 + 1;
    *(&v306 + v120) = v82;
    if ((_DWORD)v120 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v306, &v311, &v316, (int *)&v286);
LABEL_27:
      v90 = v270;
      goto LABEL_61;
    }
    if ((_DWORD)v120 != 2)
    {
      v90 = v270;
      if ((_DWORD)v120 != 1)
        goto LABEL_61;
      v82 = v306;
      v121 = vsubq_f32(v307, v306);
      v122 = vmulq_f32(v121, v121);
      v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
      v123 = vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v123), 0), *(int8x8_t *)v306.f32).u32[0] != -1)
      {
        v124 = vnegq_f32(v306);
        v124.i32[3] = 0;
        v125 = vmulq_f32(v124, v121);
        v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
        v126 = vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32);
        v127 = vrecpe_f32(v123);
        v128 = 4;
        do
        {
          v127 = vmul_f32(v127, vrecps_f32(v123, v127));
          --v128;
        }
        while (v128);
        v82 = vmlaq_n_f32(v306, v121, vmax_f32(vmin_f32(vmul_f32(v126, v127), _D8), 0).f32[0]);
LABEL_42:
        v82.i64[1] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u32[0];
        goto LABEL_61;
      }
LABEL_43:
      v286 = 1;
      goto LABEL_61;
    }
    v82 = v306;
    v129 = vsubq_f32(v307, v306);
    v130 = vsubq_f32(v308, v306);
    v132 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v129.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v130, (int8x16_t)v130, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v129, (int8x16_t)v129, 4uLL), *(float32x2_t *)v130.f32);
    *(int8x8_t *)v131.f32 = vext_s8(v132, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL), *(float32x2_t *)v130.f32), *(float32x2_t *)v129.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v130, (int8x16_t)v130, 8uLL)), 4uLL);
    v132.i32[1] = 0;
    v286 = 3;
    v133 = vpadd_f32(vmul_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32), vmul_f32((float32x2_t)v132.u32[0], (float32x2_t)v132.u32[0]));
    v134 = vpadd_f32(v133, v133);
    if (v134.f32[0] <= 0.00000011921)
    {
      v286 = 2;
      v171 = vmulq_f32(v129, v129);
      v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
      v172 = vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32);
      v90 = v270;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v172), 0), *(int8x8_t *)v306.f32).u32[0] != -1)
      {
        v173 = vnegq_f32(v306);
        v173.i32[3] = 0;
        v174 = vmulq_f32(v173, v129);
        v174.i64[0] = vpaddq_f32(v174, v174).u64[0];
        v175 = vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32);
        v176 = vrecpe_f32(v172);
        v177 = 4;
        do
        {
          v176 = vmul_f32(v176, vrecps_f32(v172, v176));
          --v177;
        }
        while (v177);
        v82 = vmlaq_n_f32(v306, v129, vmax_f32(vmin_f32(vmul_f32(v175, v176), _D8), 0).f32[0]);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v134.f32[0] == 0.0)
    {
      v82 = 0uLL;
      goto LABEL_27;
    }
    *(int8x8_t *)&v131.u32[2] = v132;
    v135 = (float32x2_t)vextq_s8((int8x16_t)v307, (int8x16_t)v307, 8uLL).u64[0];
    v136 = (float32x2_t)vextq_s8((int8x16_t)v308, (int8x16_t)v308, 8uLL).u64[0];
    v137 = (float32x2_t)vextq_s8((int8x16_t)v308, (int8x16_t)v308, 4uLL).u64[0];
    v138 = (float32x2_t)vextq_s8((int8x16_t)v307, (int8x16_t)v307, 4uLL).u64[0];
    v139 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v307.f32, v137), v138, *(float32x2_t *)v308.f32);
    *(int8x8_t *)v140.f32 = vext_s8(v139, (int8x8_t)vmls_f32(vmul_f32(v135, *(float32x2_t *)v308.f32), *(float32x2_t *)v307.f32, v136), 4uLL);
    v140.i64[1] = v139.u32[0];
    v141 = (float32x2_t)vextq_s8((int8x16_t)v306, (int8x16_t)v306, 8uLL).u64[0];
    v142 = (float32x2_t)vextq_s8((int8x16_t)v306, (int8x16_t)v306, 4uLL).u64[0];
    v143 = (int8x8_t)vmls_f32(vmul_f32(v142, *(float32x2_t *)v308.f32), v137, *(float32x2_t *)v306.f32);
    *(int8x8_t *)v144.f32 = vext_s8(v143, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v306.f32, v136), *(float32x2_t *)v308.f32, v141), 4uLL);
    v144.i64[1] = v143.u32[0];
    v145 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v306.f32, v138), v142, *(float32x2_t *)v307.f32);
    *(int8x8_t *)v146.f32 = vext_s8(v145, (int8x8_t)vmls_f32(vmul_f32(v141, *(float32x2_t *)v307.f32), *(float32x2_t *)v306.f32, v135), 4uLL);
    v146.i64[1] = v145.u32[0];
    v147 = vmulq_f32(v140, v131);
    v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
    v148 = vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32);
    v149 = vmulq_f32(v144, v131);
    v149.i64[0] = vpaddq_f32(v149, v149).u64[0];
    v150 = vpadd_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)v149.f32);
    v151 = vmulq_f32(v146, v131);
    v151.i64[0] = vpaddq_f32(v151, v151).u64[0];
    v152 = vpadd_f32(*(float32x2_t *)v151.f32, *(float32x2_t *)v151.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v150), (int8x8_t)vcgez_f32(v148)), (int8x8_t)vcgez_f32(v152)), 0), *(int8x8_t *)v306.f32).u32[0] != -1)
    {
      v153 = vnegq_f32(v306);
      v153.i32[3] = 0;
      v154 = vnegq_f32(v307);
      v154.i32[3] = 0;
      v155 = vmulq_f32(v153, v129);
      v155.i64[0] = vpaddq_f32(v155, v155).u64[0];
      v156 = vpadd_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v155.f32);
      v157 = vmulq_f32(v129, v154);
      v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
      v158 = vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v156), (int8x8_t)vclez_f32(v158)), (int8x8_t)vclez_f32(v152)), 0), *(int8x8_t *)v306.f32).u32[0] == -1)
      {
        v181 = vsub_f32(v156, v158);
        v182 = vrecpe_f32(v181);
        v183 = 4;
        do
        {
          v182 = vmul_f32(v182, vrecps_f32(v181, v182));
          --v183;
        }
        while (v183);
        v170 = 0;
        v82 = vmlaq_n_f32(v306, v129, vmul_f32(v156, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v181), (float32x2_t)0x3400000034000000), (int8x8_t)v182, 0)).f32[0]);
        v82.i64[1] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u32[0];
        v184 = 2;
        v169 = 1;
      }
      else
      {
        v159 = vnegq_f32(v308);
        v159.i32[3] = 0;
        v160 = vmulq_f32(v154, v130);
        v160.i64[0] = vpaddq_f32(v160, v160).u64[0];
        v161 = vpadd_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v160.f32);
        v162 = vmulq_f32(v129, v159);
        v162.i64[0] = vpaddq_f32(v162, v162).u64[0];
        v163 = vpadd_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v162.f32);
        v164 = vmulq_f32(v130, v159);
        v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
        v165 = vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v161, v158), (int8x8_t)vcge_f32(v163, v165)), (int8x8_t)vclez_f32(v148)), 0), *(int8x8_t *)v306.f32).u32[0] != -1)
        {
          v166 = vmulq_f32(v153, v130);
          v166.i64[0] = vpaddq_f32(v166, v166).u64[0];
          v167 = vpadd_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v166.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v167), (int8x8_t)vclez_f32(v165)), (int8x8_t)vclez_f32(v150)), 0), *(int8x8_t *)v306.f32).u32[0] == -1)
          {
            v190 = vsub_f32(v167, v165);
            v191 = vrecpe_f32(v190);
            v192 = 4;
            v90 = v270;
            do
            {
              v191 = vmul_f32(v191, vrecps_f32(v190, v191));
              --v192;
            }
            while (v192);
            v170 = 0;
            v82 = vmlaq_n_f32(v306, v130, vmul_f32(v167, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v190), (float32x2_t)0x3400000034000000), (int8x8_t)v191, 0)).f32[0]);
            v82.i64[1] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u32[0];
            v169 = 2;
          }
          else
          {
            v90 = v270;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v167), (int8x8_t)vclez_f32(v156)), 0), *(int8x8_t *)v306.f32).u32[0] == -1)
            {
              v170 = 0;
              v169 = 1;
            }
            else
            {
              *(int16x4_t *)v82.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v158, v161), (int8x8_t)vcgez_f32(v158)), 0);
              *(int8x8_t *)v82.f32 = vuzp1_s8(*(int8x8_t *)v82.f32, *(int8x8_t *)v82.f32);
              v168 = v82.i32[0];
              v82 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v82, v255), 0), (int8x16_t)v307, (int8x16_t)v308);
              v169 = 1;
              if (v168 == -1)
                v170 = 1;
              else
                v170 = 2;
            }
          }
          v184 = v169;
          goto LABEL_60;
        }
        v185 = vsub_f32(v161, v158);
        v186 = vadd_f32(v185, vsub_f32(v163, v165));
        v187 = vrecpe_f32(v186);
        v188 = 4;
        do
        {
          v187 = vmul_f32(v187, vrecps_f32(v186, v187));
          --v188;
        }
        while (v188);
        v189 = (int8x16_t)vmlaq_n_f32(v307, vsubq_f32(v308, v307), vmul_f32(v185, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v186), (float32x2_t)0x3400000034000000), (int8x8_t)v187, 0)).f32[0]);
        v189.i64[1] = vextq_s8(v189, v189, 8uLL).u32[0];
        v184 = 2;
        v169 = 2;
        v170 = 1;
        v82 = (float32x4_t)v189;
      }
      v90 = v270;
LABEL_60:
      v193 = *(&v306 + v169);
      v194 = *(&v311 + v170);
      v195 = *(&v311 + v169);
      v196 = *(&v316 + v170);
      v197 = *(&v316 + v169);
      v306 = *(&v306 + v170);
      v307 = v193;
      v311 = v194;
      v312 = v195;
      v316 = v196;
      v317 = v197;
      v286 = v184;
      goto LABEL_61;
    }
    v178 = vrecpe_f32(v134);
    v179 = 4;
    v90 = v270;
    do
    {
      v178 = vmul_f32(v178, vrecps_f32(v134, v178));
      --v179;
    }
    while (v179);
    v180 = vmulq_f32(v306, v131);
    v180.i64[0] = vpaddq_f32(v180, v180).u64[0];
    v82 = vmulq_n_f32(v131, vmul_f32(v178, vpadd_f32(*(float32x2_t *)v180.f32, *(float32x2_t *)v180.f32)).f32[0]);
    v82.i32[3] = 0;
LABEL_61:
    v83 = vnegq_f32(v82);
    v83.i32[3] = 0;
    v198 = vmulq_f32(v82, v82);
    v198.i64[0] = vpaddq_f32(v198, v198).u64[0];
    v199 = vpadd_f32(*(float32x2_t *)v198.f32, *(float32x2_t *)v198.f32);
    v200 = (int8x8_t)vcgt_f32(v88, v199);
    v91 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v200, (int8x8_t)0x100000001), 0);
    v89 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v199, v85), v200), 0);
    v88 = v199;
  }
  v201 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v88, 0), 0), v91), 0x1FuLL)), (int8x16_t)v83, v264);
  v202 = vmulq_f32(v201, v201);
  v202.i64[0] = vpaddq_f32(v202, v202).u64[0];
  v203 = vpadd_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v202.f32);
  v204 = vrsqrte_f32(v203);
  v205 = 4;
  do
  {
    v204 = vmul_f32(v204, vrsqrts_f32(vmul_f32(v204, v204), v203));
    --v205;
  }
  while (v205);
  v206 = vmul_f32(v203, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v203), 0), (int8x8_t)_D8, (int8x8_t)v204));
  v207 = vrecpe_f32(v206);
  v208 = 4;
  do
  {
    v207 = vmul_f32(v207, vrecps_f32(v206, v207));
    --v208;
  }
  while (v208);
  v209 = (int8x16_t)vdupq_n_s32(-v302);
  v210 = (int8x16_t)vmulq_n_f32(v201, v207.f32[0]);
  v210.i32[3] = 0;
  v211 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v206), 0), v210));
  v211.i32[3] = 0;
  v212 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v91, 0x1FuLL)), v92, v90);
  v285 = v212;
  v213 = v266;
  if (v286 == 3)
  {
    v287 = 0;
    v288 = 0;
    v273 = v209;
    v276 = v211;
    physx::Gu::barycentricCoordinates(&v285, &v306, &v307, &v308, &v288, &v287);
    v209 = v273;
    v211 = v276;
    v213 = v266;
    v216 = vmulq_n_f32(vsubq_f32(v312, v311), v288.f32[0]);
    v216.i32[3] = 0;
    v217 = vmulq_n_f32(vsubq_f32(v313, v311), v287.f32[0]);
    v217.i32[3] = 0;
    v214 = vaddq_f32(v311, vaddq_f32(v216, v217));
  }
  else if (v286 == 2)
  {
    v218 = vsubq_f32(v306, v212);
    v219 = vsubq_f32(vsubq_f32(v307, v212), v218);
    v220 = vmulq_f32(v219, v219);
    v220.i64[0] = vpaddq_f32(v220, v220).u64[0];
    v221 = vpadd_f32(*(float32x2_t *)v220.f32, *(float32x2_t *)v220.f32);
    v222 = vrecpe_f32(v221);
    v223 = 4;
    do
    {
      v222 = vmul_f32(v222, vrecps_f32(v221, v222));
      --v223;
    }
    while (v223);
    v224 = vnegq_f32(v218);
    v224.i32[3] = 0;
    v225 = vmulq_f32(v224, v219);
    v225.i64[0] = vpaddq_f32(v225, v225).u64[0];
    v214 = vmlaq_n_f32(v311, vsubq_f32(v312, v311), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v221), (int8x8_t)v222, 0), vpadd_f32(*(float32x2_t *)v225.f32, *(float32x2_t *)v225.f32)).f32[0]);
    v214.i64[1] = vextq_s8((int8x16_t)v214, (int8x16_t)v214, 8uLL).u32[0];
  }
  else
  {
    v214 = 0uLL;
    if (v286 == 1)
      v214 = v311;
  }
  v226 = (int8x16_t)vmlsq_lane_f32(v214, v211, v299, 0);
  v226.i64[1] = vextq_s8(v226, v226, 8uLL).u32[0];
  v215 = (float32x4_t)vbslq_s8(v209, v226, (int8x16_t)v214);
LABEL_76:
  if (v94 == -1)
  {
    v213.i32[0] = 2139095039;
  }
  else
  {
    if (v213.f32[0] == 0.0)
    {
      v215.f32[0] = (float)(v299.f32[0] + v290) * 100.0;
      v227 = v284;
      v308 = (float32x4_t)v281;
      v310[0] = v283;
      v228 = (float32x2x2_t)vzip1q_s32(v281, v283);
      v321.val[0] = (float32x2_t)vzip2q_s32(v281, v283).u64[0];
      v229 = vzip1q_s32(v282, (int32x4_t)0);
      v321.val[1] = (float32x2_t)vzip2q_s32(v282, (int32x4_t)0).u64[0];
      v287.i8[0] = 0;
      v315 = 0;
      v311 = 0u;
      v312 = 0u;
      v313 = 0u;
      v306.i64[1] = (uint64_t)v298;
      v306.i64[0] = (uint64_t)off_24ED915F8;
      v307.i64[0] = (uint64_t)&v281;
      v230 = &v308;
      v231 = (float *)v310;
      vst2_f32(v230->f32, v228);
      v310[1] = v227;
      v309 = vzip2q_s32((int32x4_t)v228, v229);
      vst2_f32(v231, v321);
      v316.i64[1] = (uint64_t)v289;
      v316.i64[0] = (uint64_t)off_24ED91108;
      if (physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::CapsuleV>>(&v306, (uint64_t)&v316, &v285, &v288, &v287, (uint64_t)&v311, v284, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v215.f32, 0), 0.0, v227) != 5)goto LABEL_80;
      __asm { FMOV            V8.2S, #1.0 }
      if (physx::Gu::epaPenetration((uint64_t)&v277) - 5 >= 2)
      {
        v233 = vnegq_f32(v265);
        v233.i32[3] = 0;
        v234 = vmulq_f32(v233, v233);
        v234.i64[0] = vpaddq_f32(v234, v234).u64[0];
        v235 = vpadd_f32(*(float32x2_t *)v234.f32, *(float32x2_t *)v234.f32);
        v236 = vrsqrte_f32(v235);
        v237 = 4;
        do
        {
          v236 = vmul_f32(v236, vrsqrts_f32(vmul_f32(v236, v236), v235));
          --v237;
        }
        while (v237);
        v238 = vmul_f32(v235, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v235), 0), _D8, (int8x8_t)v236));
        v239 = vrecpe_f32(v238);
        v240 = 4;
        do
        {
          v239 = vmul_f32(v239, vrecps_f32(v238, v239));
          --v240;
        }
        while (v240);
        v211 = vmulq_n_f32(v233, v239.f32[0]);
        v211.i32[3] = 0;
        v215 = 0uLL;
        v213 = 0;
      }
      else
      {
LABEL_80:
        v211 = v313;
        v215 = v311;
        v213 = vmin_f32(v315, 0);
      }
    }
    v241 = vmulq_n_f32(v215, v260);
    v241.i32[3] = 0;
    v242 = (int8x8_t)vmls_f32(vmul_f32(v261, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v215, (int8x16_t)v215, 4uLL)), v256, *(float32x2_t *)v215.f32);
    *(int8x8_t *)v243.f32 = vext_s8(v242, (int8x8_t)vmls_f32(vmul_f32(v257, *(float32x2_t *)v215.f32), v261, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v215, (int8x16_t)v215, 8uLL)), 4uLL);
    v243.i64[1] = v242.u32[0];
    v244 = vmlaq_f32(v241, v262, v243);
    v244.i64[1] = vextq_s8((int8x16_t)v244, (int8x16_t)v244, 8uLL).u32[0];
    v245 = vmulq_f32(v259, v215);
    v245.i64[0] = vpaddq_f32(v245, v245).u64[0];
    v246 = vmlaq_n_f32(v244, v259, vpadd_f32(*(float32x2_t *)v245.f32, *(float32x2_t *)v245.f32).f32[0]);
    v246.i64[1] = vextq_s8((int8x16_t)v246, (int8x16_t)v246, 8uLL).u32[0];
    v243.i64[0] = 0x4000000040000000;
    v243.i64[1] = 0x4000000040000000;
    v247 = vmlaq_f32(v263, v243, v246);
    v247.i64[1] = vextq_s8((int8x16_t)v247, (int8x16_t)v247, 8uLL).u32[0];
    v248 = vmlaq_n_f32(v247, v258, vmax_f32(v213, 0).f32[0]);
    v249 = vmulq_n_f32(v211, v260);
    v249.i32[3] = 0;
    *(float32x2_t *)v243.f32 = vmls_f32(vmul_f32(v261, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v211, (int8x16_t)v211, 4uLL)), v256, *(float32x2_t *)v211.f32);
    *(int8x8_t *)v246.f32 = vext_s8(*(int8x8_t *)v243.f32, (int8x8_t)vmls_f32(vmul_f32(v257, *(float32x2_t *)v211.f32), v261, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v211, (int8x16_t)v211, 8uLL)), 4uLL);
    v246.i64[1] = v243.u32[0];
    v250 = vmlaq_f32(v249, v262, v246);
    v250.i64[1] = vextq_s8((int8x16_t)v250, (int8x16_t)v250, 8uLL).u32[0];
    v251 = vmulq_f32(v259, v211);
    v251.i64[0] = vpaddq_f32(v251, v251).u64[0];
    v252 = vmlaq_n_f32(v250, v259, vpadd_f32(*(float32x2_t *)v251.f32, *(float32x2_t *)v251.f32).f32[0]);
    v253 = vaddq_f32(v252, v252);
    *(_QWORD *)a7 = v253.i64[0];
    *(_DWORD *)(a7 + 8) = v253.i32[2];
    *(_QWORD *)a8 = v248.i64[0];
    *(_DWORD *)(a8 + 8) = v248.i32[2];
  }
  return v213.f32[0];
}

float32_t physx::Gu::SweepGeomGeom<physx::Gu::CapsuleV,physx::Gu::BoxV>(uint64_t *a1, uint64_t *a2, int8x8_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  uint64_t v14;
  int v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float v25;
  float32x4_t v26;
  float32x2_t v27;
  float32x2_t v28;
  int8x8_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x8_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float *v60;
  float *v61;
  float32x2x2_t v62;
  int32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x2_t v67;
  float32x2_t v68;
  int8x16_t v69;
  float32x2_t v70;
  float32x2_t v71;
  int v72;
  float32x2_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x2_t v86;
  int32x4_t v87;
  int8x16_t v88;
  int8x16_t v89;
  float32x4_t v90;
  int8x16_t v91;
  int32x4_t v92;
  unsigned __int32 v93;
  float32x4_t v94;
  float32x2_t v95;
  float32x2_t v96;
  int v97;
  float32x2_t v98;
  float32x2_t v99;
  int v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int8x16_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float32x2_t v112;
  float32x2_t v113;
  int v114;
  float32x2_t v115;
  float32x4_t v116;
  float32x4_t v117;
  uint64_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x2_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x2_t v124;
  float32x2_t v125;
  int v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  int8x8_t v130;
  float32x2_t v131;
  float32x2_t v132;
  float32x2_t v133;
  float32x2_t v134;
  float32x2_t v135;
  float32x2_t v136;
  int8x8_t v137;
  float32x4_t v138;
  float32x2_t v139;
  float32x2_t v140;
  int8x8_t v141;
  float32x4_t v142;
  int8x8_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x2_t v146;
  float32x4_t v147;
  float32x2_t v148;
  float32x4_t v149;
  float32x2_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x2_t v154;
  float32x4_t v155;
  float32x2_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x2_t v159;
  float32x4_t v160;
  float32x2_t v161;
  float32x4_t v162;
  float32x2_t v163;
  float32x4_t v164;
  float32x2_t v165;
  __int32 v166;
  uint64_t v167;
  uint64_t v168;
  float32x4_t v169;
  float32x2_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x2_t v173;
  float32x2_t v174;
  int v175;
  float32x2_t v176;
  int v177;
  float32x4_t v178;
  float32x2_t v179;
  float32x2_t v180;
  int v181;
  unsigned int v182;
  float32x2_t v183;
  float32x2_t v184;
  float32x2_t v185;
  int v186;
  int8x16_t v187;
  float32x2_t v188;
  float32x2_t v189;
  int v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x2_t v197;
  int8x8_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x2_t v201;
  float32x2_t v202;
  int v203;
  float32x2_t v204;
  float32x2_t v205;
  int v206;
  int8x16_t v207;
  int8x16_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x2_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x2_t v219;
  float32x2_t v220;
  int v221;
  float32x4_t v222;
  float32x4_t v223;
  int8x16_t v224;
  float32x4_t v225;
  float32x2x2_t v226;
  int32x4_t v227;
  float32x4_t *v228;
  float *v229;
  float32x4_t v231;
  float32x4_t v232;
  float32x2_t v233;
  float32x2_t v234;
  int v235;
  float32x2_t v236;
  float32x2_t v237;
  int v238;
  float32x4_t v239;
  int8x8_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  int32x4_t v253;
  float32x2_t v254;
  float32x2_t v255;
  float32x2_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float v259;
  float32x2_t v260;
  float32x4_t v261;
  float32x4_t v262;
  int8x16_t v263;
  float32x4_t v264;
  float32x2_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  int8x16_t v269;
  float32x4_t v270;
  float32x4_t v271;
  int8x16_t v272;
  int32x2_t v273;
  float32x4_t v274;
  float32x4_t v275;
  _QWORD v276[2];
  float32x2_t v277;
  __int32 v278;
  int v279;
  char v280;
  float32x4_t v281;
  uint64_t (**v282)();
  _QWORD *v283;
  float32x4_t v284;
  int32x4_t *v285;
  _OWORD v286[2];
  _OWORD v287[2];
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  unsigned int v293;
  float32x2_t v294;
  float32x2_t v295;
  _QWORD v296[2];
  float32x2_t v297;
  int v298;
  int v299;
  char v300;
  float32x4_t v301;
  float32x4_t v302;
  int32x2_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  int32x4_t v307;
  _OWORD v308[2];
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  __int128 v312;
  float32x2_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  __int128 v317;
  uint64_t v318;
  float32x2x2_t v319;

  v318 = *MEMORY[0x24BDAC8D0];
  v14 = *a1;
  v15 = 4;
  v299 = 4;
  v296[1] = 0;
  v296[0] = 0;
  LODWORD(a12) = *(_DWORD *)(v14 + 4);
  v16 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, *(float *)(v14 + 8));
  v16.i32[3] = 0;
  v17 = *a2;
  v18 = vnegq_f32(v16);
  v18.i32[3] = 0;
  v301 = v16;
  v302 = v18;
  v303 = vdup_lane_s32(*(int32x2_t *)&a12, 0);
  v297.i32[0] = LODWORD(a12);
  v297.i32[1] = LODWORD(a12);
  v298 = LODWORD(a12);
  v300 = 1;
  v279 = 3;
  v280 = 0;
  v276[0] = 0;
  v276[1] = 0;
  v16.i64[0] = *(_QWORD *)(v17 + 4);
  v19 = v16;
  v19.i32[2] = *(_DWORD *)(v17 + 12);
  *(int32x2_t *)v18.f32 = vdup_laneq_s32((int32x4_t)v19, 2);
  v19.i32[3] = 0;
  v270 = v19;
  v281 = v19;
  *(float32x2_t *)v16.f32 = vpmin_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v16.f32);
  *(float32x2_t *)v16.f32 = vpmin_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32);
  v277 = vmul_n_f32((float32x2_t)0x3BA3D70A3C23D70ALL, v16.f32[0]);
  v16.f32[0] = 0.05 * v16.f32[0];
  v273 = *(int32x2_t *)v16.f32;
  v278 = v16.i32[0];
  *(float *)&a9 = *(float *)&a12 + *(float *)&a9;
  v19.i64[0] = *(_QWORD *)(a5 + 16);
  v19.i64[1] = *(unsigned int *)(a5 + 24);
  v20.i64[0] = *(_QWORD *)(a6 + 16);
  v21 = *a4;
  v20.i64[1] = *(unsigned int *)(a6 + 24);
  v22 = vnegq_f32(*a4);
  v23 = vsubq_f32(v19, v20);
  v24 = v22;
  v24.i32[3] = 0;
  v261 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v25) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v261.f32, *(float32x2_t *)v261.f32).u32[0];
  v26 = vmulq_n_f32(v23, v25);
  v26.i32[3] = 0;
  v27 = (float32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
  v28 = (float32x2_t)vext_s8(*(int8x8_t *)v22.f32, (int8x8_t)v27, 4uLL);
  v29 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v22.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 4uLL)), v28, *(float32x2_t *)v23.f32);
  *(int8x8_t *)v30.f32 = vext_s8(v29, (int8x8_t)vmls_f32(vmul_f32(v27, *(float32x2_t *)v23.f32), *(float32x2_t *)v22.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL)), 4uLL);
  v30.i64[1] = v29.u32[0];
  v31 = vmlaq_laneq_f32(v26, v30, *a4, 3);
  v31.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
  v32 = vmulq_f32(v24, v23);
  v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
  v33 = vmlaq_n_f32(v31, v24, vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32).f32[0]);
  v34 = vaddq_f32(v33, v33);
  v34.i32[3] = 0;
  v35 = *(float32x4_t *)a3->i8;
  v35.i32[3] = 0;
  v36 = vmulq_f32(v35, v24);
  v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
  v37 = vmulq_laneq_f32(v35, *a4, 3);
  v35.i64[0] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
  v38 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a3, *(int8x8_t *)v35.f32, 4uLL), *(float32x2_t *)v22.f32), v28, (float32x2_t)*a3);
  *(int8x8_t *)v39.f32 = vext_s8(v38, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a3, v27), *(float32x2_t *)v22.f32, *(float32x2_t *)v35.f32), 4uLL);
  *(int8x8_t *)&v39.u32[2] = v38;
  v40 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v24, *(float32x4_t *)a3->i8, 3), v37), v39);
  *(int32x2_t *)v22.f32 = vdup_lane_s32(*(int32x2_t *)v40.f32, 1);
  *(int32x2_t *)v24.f32 = vdup_laneq_s32((int32x4_t)v40, 2);
  v41 = vaddq_f32(v40, v40);
  v42 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a3->i8, *(int8x16_t *)a3->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL)), vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32));
  *(int32x2_t *)v35.f32 = vdup_laneq_s32((int32x4_t)v41, 2);
  *(int32x2_t *)v40.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v41.f32), 0);
  v43 = vmul_lane_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v41.f32, 1);
  v44 = vmul_laneq_f32(*(float32x2_t *)v24.f32, v41, 2);
  *(float32x2_t *)v22.f32 = vmul_n_f32(*(float32x2_t *)v22.f32, v41.f32[0]);
  v45 = vmul_n_f32(*(float32x2_t *)v24.f32, v41.f32[0]);
  *(float32x2_t *)v36.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.f32, 0), v42, 1);
  *(float32x2_t *)v24.f32 = vmul_lane_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v41.f32, 1);
  *(float32x2_t *)v41.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.f32, 1), v42, 1);
  v46 = vmul_lane_f32(*(float32x2_t *)v35.f32, v42, 1);
  __asm { FMOV            V8.2S, #1.0 }
  *(int8x8_t *)v35.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v43), v44), (int8x8_t)vadd_f32(*(float32x2_t *)v22.f32, v46), 4uLL);
  v35.i64[1] = vsub_f32(v45, *(float32x2_t *)v41.f32).u32[0];
  *(float32x2_t *)v40.f32 = vsub_f32(_D8, *(float32x2_t *)v40.f32);
  *(int8x8_t *)v22.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v22.f32, v46), (int8x8_t)vsub_f32(*(float32x2_t *)v40.f32, v44), 4uLL);
  v22.i64[1] = vadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v36.f32).u32[0];
  *(int8x8_t *)v24.f32 = vext_s8((int8x8_t)vadd_f32(v45, *(float32x2_t *)v41.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v36.f32), 4uLL);
  v24.i64[1] = vsub_f32(*(float32x2_t *)v40.f32, v43).u32[0];
  *(int8x8_t *)v40.f32 = a3[2];
  v40.i64[1] = a3[3].u32[0];
  v52.i64[0] = a4[1].i64[0];
  v52.i64[1] = a4[1].u32[2];
  v288 = (int32x4_t)v35;
  v289 = (int32x4_t)v22;
  v262 = v20;
  v53 = v21;
  v53.i32[3] = 0;
  v257 = vsubq_f32(v40, v19);
  v54 = vsubq_f32(vsubq_f32(v52, v20), v257);
  v259 = v25;
  v260 = *(float32x2_t *)v21.f32;
  v55 = vmulq_n_f32(v54, v25);
  v55.i32[3] = 0;
  v256 = (float32x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
  v255 = (float32x2_t)vext_s8(*(int8x8_t *)v21.f32, (int8x8_t)v256, 4uLL);
  *(float32x2_t *)v52.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v21.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v54, (int8x16_t)v54, 4uLL)), v255, *(float32x2_t *)v54.f32);
  *(int8x8_t *)v22.f32 = vext_s8(*(int8x8_t *)v52.f32, (int8x8_t)vmls_f32(vmul_f32(v256, *(float32x2_t *)v54.f32), *(float32x2_t *)v21.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL)), 4uLL);
  v22.i64[1] = v52.u32[0];
  v56 = vmlsq_laneq_f32(v55, v22, v21, 3);
  v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
  v290 = (int32x4_t)v24;
  v291 = v34;
  v57 = vmulq_f32(v53, v54);
  v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
  v258 = v53;
  v58 = vmlaq_n_f32(v56, v53, vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32).f32[0]);
  v59 = vaddq_f32(v58, v58);
  v284.i64[0] = (uint64_t)off_24ED915F8;
  v284.i64[1] = (uint64_t)v296;
  v285 = &v288;
  v60 = (float *)v286;
  v286[0] = v35;
  v287[0] = v24;
  v61 = (float *)v287;
  v62 = (float32x2x2_t)vzip1q_s32((int32x4_t)v35, (int32x4_t)v24);
  v53.i64[0] = vzip2q_s32((int32x4_t)v35, (int32x4_t)v24).u64[0];
  v63 = vzip1q_s32(v289, (int32x4_t)0);
  v36.i64[0] = vzip2q_s32(v289, (int32x4_t)0).u64[0];
  vst2_f32(v60, v62);
  v287[1] = v34;
  v286[1] = vzip2q_s32((int32x4_t)v62, v63);
  vst2_f32(v61, *(float32x2x2_t *)((char *)&v36 - 8));
  v282 = off_24ED913D0;
  v283 = v276;
  v293 = 1;
  v64 = vmulq_f32(v34, v34);
  v64.i64[0] = vpaddq_f32(v64, v64).u64[0];
  v65 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v34, (int8x16_t)xmmword_2260E5F10);
  v66 = vmulq_f32(v65, v65);
  v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
  v67 = vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32);
  v68 = vrsqrte_f32(v67);
  do
  {
    v68 = vmul_f32(v68, vrsqrts_f32(vmul_f32(v68, v68), v67));
    --v15;
  }
  while (v15);
  v59.i32[3] = 0;
  v264 = v59;
  v69 = (int8x16_t)vmlaq_f32((float32x4_t)0, (float32x4_t)0, v59);
  v70 = vmul_f32(v67, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v67), 0), (int8x8_t)_D8, (int8x8_t)v68));
  v71 = vrecpe_f32(v70);
  v72 = 4;
  do
  {
    v71 = vmul_f32(v71, vrecps_f32(v70, v71));
    --v72;
  }
  while (v72);
  *(float *)&a9 = *(float *)&a9 + 0.0;
  v73 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
  v69.i64[1] = vextq_s8(v69, v69, 8uLL).u32[0];
  v74 = vmulq_n_f32(v65, v71.f32[0]);
  v74.i32[3] = 0;
  v267 = (float32x4_t)v69;
  v268 = v74;
  v75 = vnegq_f32(v74);
  v75.i32[3] = 0;
  v304 = v75;
  *(double *)v76.i64 = physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(&v284, (float32x2_t *)&v304);
  v77 = v76;
  v78 = (int8x16_t)vnegq_f32(v270);
  v78.i32[3] = 0;
  v79 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v268), (int8x16_t)v270, v78);
  v80 = vsubq_f32(v77, v79);
  v304 = v80;
  v305 = 0u;
  v306 = 0u;
  v307 = 0u;
  v309 = v77;
  v310 = 0u;
  v311 = 0u;
  v312 = 0u;
  v81 = vnegq_f32(v80);
  v81.i32[3] = 0;
  v314 = v79;
  v315 = 0u;
  v316 = 0u;
  v317 = 0u;
  *(float32x2_t *)v77.f32 = vmul_f32(vmin_f32((float32x2_t)vdup_lane_s32(v273, 0), 0), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  v82 = vadd_f32(v73, *(float32x2_t *)v77.f32);
  *(float32x2_t *)v79.f32 = vmul_f32(*(float32x2_t *)v77.f32, *(float32x2_t *)v77.f32);
  v83 = vmul_f32(v82, v82);
  v84 = vmulq_f32(v81, v81);
  v85 = vpaddq_f32(v84, v84);
  v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
  v254 = *(float32x2_t *)v79.f32;
  *(int32x2_t *)v85.f32 = vcgt_f32(v86, *(float32x2_t *)v79.f32);
  v87 = vdupq_lane_s32(*(int32x2_t *)v85.f32, 0);
  v85.i32[0] = -1;
  v253 = (int32x4_t)v85;
  v88 = (int8x16_t)v80;
  v89.i64[0] = -1;
  v89.i64[1] = -1;
  v263 = (int8x16_t)v81;
  v90 = v81;
  v265 = 0;
  while (1)
  {
    v91 = (int8x16_t)v80;
    v92.i64[0] = -1;
    v92.i64[1] = -1;
    *(int16x4_t *)v92.i8 = vmovn_s32(vceqq_s32(v87, v92));
    v93 = vuzp1_s8(*(int8x8_t *)v92.i8, *(int8x8_t *)v92.i8).u32[0];
    if (v93 != -1)
      break;
    v94 = vmulq_f32(v90, v90);
    v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
    v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
    v96 = vrsqrte_f32(v95);
    v97 = 4;
    do
    {
      v96 = vmul_f32(v96, vrsqrts_f32(vmul_f32(v96, v96), v95));
      --v97;
    }
    while (v97);
    v269 = v91;
    v98 = vmul_f32(v95, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v95), 0), (int8x8_t)_D8, (int8x8_t)v96));
    v99 = vrecpe_f32(v98);
    v100 = 4;
    do
    {
      v99 = vmul_f32(v99, vrecps_f32(v98, v99));
      --v100;
    }
    while (v100);
    v266 = v90;
    v101 = vmulq_n_f32(v90, v99.f32[0]);
    v101.i32[3] = 0;
    v292 = v101;
    v102 = vnegq_f32(v101);
    v102.i32[3] = 0;
    v271 = v101;
    v274 = v102;
    *(double *)v103.i64 = physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(&v284, (float32x2_t *)&v292);
    v104 = v103;
    v105 = (int8x16_t)vnegq_f32(v281);
    v105.i32[3] = 0;
    v106 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v274), (int8x16_t)v281, v105);
    v107 = vaddq_f32(v267, v106);
    v80 = vsubq_f32(v103, v107);
    v108 = vnegq_f32(v80);
    v108.i32[3] = 0;
    v109 = vmulq_f32(v271, v108);
    v109.i64[0] = vpaddq_f32(v109, v109).u64[0];
    v110 = vsub_f32(vpadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v109.f32), v82);
    if (v110.f32[0] > 0.0)
    {
      v111 = vmulq_f32(v264, v271);
      v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
      v112 = vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32);
      if (v112.f32[0] >= 0.0)
        goto LABEL_70;
      v113 = vrecpe_f32(v112);
      v114 = 4;
      do
      {
        v113 = vmul_f32(v113, vrecps_f32(v112, v113));
        --v114;
      }
      while (v114);
      v115 = vsub_f32(v265, vmul_f32(v110, v113));
      if ((vcgt_f32(v115, v265).u8[0] & 1) != 0)
      {
        if (v115.f32[0] > 1.0)
        {
LABEL_70:
          v211 = 0;
          v209 = 0uLL;
          v213 = 0uLL;
          goto LABEL_76;
        }
        v116 = vmlaq_n_f32((float32x4_t)0, v264, v115.f32[0]);
        v116.i64[1] = vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL).u32[0];
        v117 = vsubq_f32(v116, v267);
        v314 = vaddq_f32(v117, v314);
        v315 = vaddq_f32(v117, v315);
        v316 = vaddq_f32(v117, v316);
        v304 = vsubq_f32(v309, v314);
        v305 = vsubq_f32(v310, v315);
        v306 = vsubq_f32(v311, v316);
        v107 = vaddq_f32(v106, v116);
        v80 = vsubq_f32(v104, v107);
        v86 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        v263 = (int8x16_t)v266;
        v267 = v116;
      }
      v265 = v115;
    }
    v118 = v293;
    *(&v309 + v293) = v104;
    *(&v314 + v118) = v107;
    v293 = v118 + 1;
    *(&v304 + v118) = v80;
    if ((_DWORD)v118 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v304, &v309, &v314, (int *)&v293);
LABEL_27:
      v88 = v269;
      goto LABEL_61;
    }
    if ((_DWORD)v118 != 2)
    {
      v88 = v269;
      if ((_DWORD)v118 != 1)
        goto LABEL_61;
      v80 = v304;
      v119 = vsubq_f32(v305, v304);
      v120 = vmulq_f32(v119, v119);
      v120.i64[0] = vpaddq_f32(v120, v120).u64[0];
      v121 = vpadd_f32(*(float32x2_t *)v120.f32, *(float32x2_t *)v120.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v121), 0), *(int8x8_t *)v304.f32).u32[0] != -1)
      {
        v122 = vnegq_f32(v304);
        v122.i32[3] = 0;
        v123 = vmulq_f32(v122, v119);
        v123.i64[0] = vpaddq_f32(v123, v123).u64[0];
        v124 = vpadd_f32(*(float32x2_t *)v123.f32, *(float32x2_t *)v123.f32);
        v125 = vrecpe_f32(v121);
        v126 = 4;
        do
        {
          v125 = vmul_f32(v125, vrecps_f32(v121, v125));
          --v126;
        }
        while (v126);
        v80 = vmlaq_n_f32(v304, v119, vmax_f32(vmin_f32(vmul_f32(v124, v125), _D8), 0).f32[0]);
LABEL_42:
        v80.i64[1] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u32[0];
        goto LABEL_61;
      }
LABEL_43:
      v293 = 1;
      goto LABEL_61;
    }
    v80 = v304;
    v127 = vsubq_f32(v305, v304);
    v128 = vsubq_f32(v306, v304);
    v130 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v127.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v128, (int8x16_t)v128, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v127, (int8x16_t)v127, 4uLL), *(float32x2_t *)v128.f32);
    *(int8x8_t *)v129.f32 = vext_s8(v130, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL), *(float32x2_t *)v128.f32), *(float32x2_t *)v127.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v128, (int8x16_t)v128, 8uLL)), 4uLL);
    v130.i32[1] = 0;
    v293 = 3;
    v131 = vpadd_f32(vmul_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32), vmul_f32((float32x2_t)v130.u32[0], (float32x2_t)v130.u32[0]));
    v132 = vpadd_f32(v131, v131);
    if (v132.f32[0] <= 0.00000011921)
    {
      v293 = 2;
      v169 = vmulq_f32(v127, v127);
      v169.i64[0] = vpaddq_f32(v169, v169).u64[0];
      v170 = vpadd_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v169.f32);
      v88 = v269;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v170), 0), *(int8x8_t *)v304.f32).u32[0] != -1)
      {
        v171 = vnegq_f32(v304);
        v171.i32[3] = 0;
        v172 = vmulq_f32(v171, v127);
        v172.i64[0] = vpaddq_f32(v172, v172).u64[0];
        v173 = vpadd_f32(*(float32x2_t *)v172.f32, *(float32x2_t *)v172.f32);
        v174 = vrecpe_f32(v170);
        v175 = 4;
        do
        {
          v174 = vmul_f32(v174, vrecps_f32(v170, v174));
          --v175;
        }
        while (v175);
        v80 = vmlaq_n_f32(v304, v127, vmax_f32(vmin_f32(vmul_f32(v173, v174), _D8), 0).f32[0]);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v132.f32[0] == 0.0)
    {
      v80 = 0uLL;
      goto LABEL_27;
    }
    *(int8x8_t *)&v129.u32[2] = v130;
    v133 = (float32x2_t)vextq_s8((int8x16_t)v305, (int8x16_t)v305, 8uLL).u64[0];
    v134 = (float32x2_t)vextq_s8((int8x16_t)v306, (int8x16_t)v306, 8uLL).u64[0];
    v135 = (float32x2_t)vextq_s8((int8x16_t)v306, (int8x16_t)v306, 4uLL).u64[0];
    v136 = (float32x2_t)vextq_s8((int8x16_t)v305, (int8x16_t)v305, 4uLL).u64[0];
    v137 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v305.f32, v135), v136, *(float32x2_t *)v306.f32);
    *(int8x8_t *)v138.f32 = vext_s8(v137, (int8x8_t)vmls_f32(vmul_f32(v133, *(float32x2_t *)v306.f32), *(float32x2_t *)v305.f32, v134), 4uLL);
    v138.i64[1] = v137.u32[0];
    v139 = (float32x2_t)vextq_s8((int8x16_t)v304, (int8x16_t)v304, 8uLL).u64[0];
    v140 = (float32x2_t)vextq_s8((int8x16_t)v304, (int8x16_t)v304, 4uLL).u64[0];
    v141 = (int8x8_t)vmls_f32(vmul_f32(v140, *(float32x2_t *)v306.f32), v135, *(float32x2_t *)v304.f32);
    *(int8x8_t *)v142.f32 = vext_s8(v141, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v304.f32, v134), *(float32x2_t *)v306.f32, v139), 4uLL);
    v142.i64[1] = v141.u32[0];
    v143 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v304.f32, v136), v140, *(float32x2_t *)v305.f32);
    *(int8x8_t *)v144.f32 = vext_s8(v143, (int8x8_t)vmls_f32(vmul_f32(v139, *(float32x2_t *)v305.f32), *(float32x2_t *)v304.f32, v133), 4uLL);
    v144.i64[1] = v143.u32[0];
    v145 = vmulq_f32(v138, v129);
    v145.i64[0] = vpaddq_f32(v145, v145).u64[0];
    v146 = vpadd_f32(*(float32x2_t *)v145.f32, *(float32x2_t *)v145.f32);
    v147 = vmulq_f32(v142, v129);
    v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
    v148 = vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32);
    v149 = vmulq_f32(v144, v129);
    v149.i64[0] = vpaddq_f32(v149, v149).u64[0];
    v150 = vpadd_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)v149.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v148), (int8x8_t)vcgez_f32(v146)), (int8x8_t)vcgez_f32(v150)), 0), *(int8x8_t *)v304.f32).u32[0] != -1)
    {
      v151 = vnegq_f32(v304);
      v151.i32[3] = 0;
      v152 = vnegq_f32(v305);
      v152.i32[3] = 0;
      v153 = vmulq_f32(v151, v127);
      v153.i64[0] = vpaddq_f32(v153, v153).u64[0];
      v154 = vpadd_f32(*(float32x2_t *)v153.f32, *(float32x2_t *)v153.f32);
      v155 = vmulq_f32(v127, v152);
      v155.i64[0] = vpaddq_f32(v155, v155).u64[0];
      v156 = vpadd_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v155.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v154), (int8x8_t)vclez_f32(v156)), (int8x8_t)vclez_f32(v150)), 0), *(int8x8_t *)v304.f32).u32[0] == -1)
      {
        v179 = vsub_f32(v154, v156);
        v180 = vrecpe_f32(v179);
        v181 = 4;
        do
        {
          v180 = vmul_f32(v180, vrecps_f32(v179, v180));
          --v181;
        }
        while (v181);
        v168 = 0;
        v80 = vmlaq_n_f32(v304, v127, vmul_f32(v154, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v179), (float32x2_t)0x3400000034000000), (int8x8_t)v180, 0)).f32[0]);
        v80.i64[1] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u32[0];
        v182 = 2;
        v167 = 1;
      }
      else
      {
        v157 = vnegq_f32(v306);
        v157.i32[3] = 0;
        v158 = vmulq_f32(v152, v128);
        v158.i64[0] = vpaddq_f32(v158, v158).u64[0];
        v159 = vpadd_f32(*(float32x2_t *)v158.f32, *(float32x2_t *)v158.f32);
        v160 = vmulq_f32(v127, v157);
        v160.i64[0] = vpaddq_f32(v160, v160).u64[0];
        v161 = vpadd_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v160.f32);
        v162 = vmulq_f32(v128, v157);
        v162.i64[0] = vpaddq_f32(v162, v162).u64[0];
        v163 = vpadd_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v162.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v159, v156), (int8x8_t)vcge_f32(v161, v163)), (int8x8_t)vclez_f32(v146)), 0), *(int8x8_t *)v304.f32).u32[0] != -1)
        {
          v164 = vmulq_f32(v151, v128);
          v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
          v165 = vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v165), (int8x8_t)vclez_f32(v163)), (int8x8_t)vclez_f32(v148)), 0), *(int8x8_t *)v304.f32).u32[0] == -1)
          {
            v188 = vsub_f32(v165, v163);
            v189 = vrecpe_f32(v188);
            v190 = 4;
            v88 = v269;
            do
            {
              v189 = vmul_f32(v189, vrecps_f32(v188, v189));
              --v190;
            }
            while (v190);
            v168 = 0;
            v80 = vmlaq_n_f32(v304, v128, vmul_f32(v165, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v188), (float32x2_t)0x3400000034000000), (int8x8_t)v189, 0)).f32[0]);
            v80.i64[1] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u32[0];
            v167 = 2;
          }
          else
          {
            v88 = v269;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v165), (int8x8_t)vclez_f32(v154)), 0), *(int8x8_t *)v304.f32).u32[0] == -1)
            {
              v168 = 0;
              v167 = 1;
            }
            else
            {
              *(int16x4_t *)v80.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v156, v159), (int8x8_t)vcgez_f32(v156)), 0);
              *(int8x8_t *)v80.f32 = vuzp1_s8(*(int8x8_t *)v80.f32, *(int8x8_t *)v80.f32);
              v166 = v80.i32[0];
              v80 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v80, v253), 0), (int8x16_t)v305, (int8x16_t)v306);
              v167 = 1;
              if (v166 == -1)
                v168 = 1;
              else
                v168 = 2;
            }
          }
          v182 = v167;
          goto LABEL_60;
        }
        v183 = vsub_f32(v159, v156);
        v184 = vadd_f32(v183, vsub_f32(v161, v163));
        v185 = vrecpe_f32(v184);
        v186 = 4;
        do
        {
          v185 = vmul_f32(v185, vrecps_f32(v184, v185));
          --v186;
        }
        while (v186);
        v187 = (int8x16_t)vmlaq_n_f32(v305, vsubq_f32(v306, v305), vmul_f32(v183, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v184), (float32x2_t)0x3400000034000000), (int8x8_t)v185, 0)).f32[0]);
        v187.i64[1] = vextq_s8(v187, v187, 8uLL).u32[0];
        v182 = 2;
        v167 = 2;
        v168 = 1;
        v80 = (float32x4_t)v187;
      }
      v88 = v269;
LABEL_60:
      v191 = *(&v304 + v167);
      v192 = *(&v309 + v168);
      v193 = *(&v309 + v167);
      v194 = *(&v314 + v168);
      v195 = *(&v314 + v167);
      v304 = *(&v304 + v168);
      v305 = v191;
      v309 = v192;
      v310 = v193;
      v314 = v194;
      v315 = v195;
      v293 = v182;
      goto LABEL_61;
    }
    v176 = vrecpe_f32(v132);
    v177 = 4;
    v88 = v269;
    do
    {
      v176 = vmul_f32(v176, vrecps_f32(v132, v176));
      --v177;
    }
    while (v177);
    v178 = vmulq_f32(v304, v129);
    v178.i64[0] = vpaddq_f32(v178, v178).u64[0];
    v80 = vmulq_n_f32(v129, vmul_f32(v176, vpadd_f32(*(float32x2_t *)v178.f32, *(float32x2_t *)v178.f32)).f32[0]);
    v80.i32[3] = 0;
LABEL_61:
    v90 = vnegq_f32(v80);
    v90.i32[3] = 0;
    v196 = vmulq_f32(v80, v80);
    v196.i64[0] = vpaddq_f32(v196, v196).u64[0];
    v197 = vpadd_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32);
    v198 = (int8x8_t)vcgt_f32(v86, v197);
    v89 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v198, (int8x8_t)0x100000001), 0);
    v87 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v197, v83), v198), 0);
    v86 = v197;
  }
  v199 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v86, v254), 0), v89), 0x1FuLL)), (int8x16_t)v90, v263);
  v200 = vmulq_f32(v199, v199);
  v200.i64[0] = vpaddq_f32(v200, v200).u64[0];
  v201 = vpadd_f32(*(float32x2_t *)v200.f32, *(float32x2_t *)v200.f32);
  v202 = vrsqrte_f32(v201);
  v203 = 4;
  do
  {
    v202 = vmul_f32(v202, vrsqrts_f32(vmul_f32(v202, v202), v201));
    --v203;
  }
  while (v203);
  v204 = vmul_f32(v201, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v201), 0), (int8x8_t)_D8, (int8x8_t)v202));
  v205 = vrecpe_f32(v204);
  v206 = 4;
  do
  {
    v205 = vmul_f32(v205, vrecps_f32(v204, v205));
    --v206;
  }
  while (v206);
  v207 = (int8x16_t)vdupq_n_s32(-v300);
  v208 = (int8x16_t)vmulq_n_f32(v199, v205.f32[0]);
  v208.i32[3] = 0;
  v209 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v204), 0), v208));
  v209.i32[3] = 0;
  v210 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v89, 0x1FuLL)), v91, v88);
  v292 = v210;
  v211 = v265;
  if (v293 == 3)
  {
    v295 = 0;
    v294 = 0;
    v272 = v207;
    v275 = v209;
    physx::Gu::barycentricCoordinates(&v292, &v304, &v305, &v306, &v295, &v294);
    v207 = v272;
    v209 = v275;
    v211 = v265;
    v214 = vmulq_n_f32(vsubq_f32(v310, v309), v295.f32[0]);
    v214.i32[3] = 0;
    v215 = vmulq_n_f32(vsubq_f32(v311, v309), v294.f32[0]);
    v215.i32[3] = 0;
    v212 = vaddq_f32(v309, vaddq_f32(v214, v215));
  }
  else if (v293 == 2)
  {
    v216 = vsubq_f32(v304, v210);
    v217 = vsubq_f32(vsubq_f32(v305, v210), v216);
    v218 = vmulq_f32(v217, v217);
    v218.i64[0] = vpaddq_f32(v218, v218).u64[0];
    v219 = vpadd_f32(*(float32x2_t *)v218.f32, *(float32x2_t *)v218.f32);
    v220 = vrecpe_f32(v219);
    v221 = 4;
    do
    {
      v220 = vmul_f32(v220, vrecps_f32(v219, v220));
      --v221;
    }
    while (v221);
    v222 = vnegq_f32(v216);
    v222.i32[3] = 0;
    v223 = vmulq_f32(v222, v217);
    v223.i64[0] = vpaddq_f32(v223, v223).u64[0];
    v212 = vmlaq_n_f32(v309, vsubq_f32(v310, v309), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v219), (int8x8_t)v220, 0), vpadd_f32(*(float32x2_t *)v223.f32, *(float32x2_t *)v223.f32)).f32[0]);
    v212.i64[1] = vextq_s8((int8x16_t)v212, (int8x16_t)v212, 8uLL).u32[0];
  }
  else
  {
    v212 = 0uLL;
    if (v293 == 1)
      v212 = v309;
  }
  v224 = (int8x16_t)vmlsq_lane_f32(v212, v209, v297, 0);
  v224.i64[1] = vextq_s8(v224, v224, 8uLL).u32[0];
  v213 = (float32x4_t)vbslq_s8(v207, v224, (int8x16_t)v212);
LABEL_76:
  if (v93 == -1)
  {
    v211.i32[0] = 2139095039;
  }
  else
  {
    if (v211.f32[0] == 0.0)
    {
      v213.f32[0] = (float)(v297.f32[0] + v277.f32[0]) * 100.0;
      v225 = v291;
      v306 = (float32x4_t)v288;
      v308[0] = v290;
      v226 = (float32x2x2_t)vzip1q_s32(v288, v290);
      v319.val[0] = (float32x2_t)vzip2q_s32(v288, v290).u64[0];
      v227 = vzip1q_s32(v289, (int32x4_t)0);
      v319.val[1] = (float32x2_t)vzip2q_s32(v289, (int32x4_t)0).u64[0];
      v294.i8[0] = 0;
      v313 = 0;
      v309 = 0u;
      v310 = 0u;
      v311 = 0u;
      v304.i64[1] = (uint64_t)v296;
      v304.i64[0] = (uint64_t)off_24ED915F8;
      v305.i64[0] = (uint64_t)&v288;
      v228 = &v306;
      v229 = (float *)v308;
      vst2_f32(v228->f32, v226);
      v308[1] = v225;
      v307 = vzip2q_s32((int32x4_t)v226, v227);
      vst2_f32(v229, v319);
      v314.i64[1] = (uint64_t)v276;
      v314.i64[0] = (uint64_t)off_24ED913D0;
      if (physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(&v304, (uint64_t)&v314, &v292, &v295, &v294, (uint64_t)&v309, v291, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v213.f32, 0), 0.0, *(int8x8_t *)v225.f32) != 5)goto LABEL_80;
      __asm { FMOV            V8.2S, #1.0 }
      if (physx::Gu::epaPenetration((uint64_t)&v284) - 5 >= 2)
      {
        v231 = vnegq_f32(v264);
        v231.i32[3] = 0;
        v232 = vmulq_f32(v231, v231);
        v232.i64[0] = vpaddq_f32(v232, v232).u64[0];
        v233 = vpadd_f32(*(float32x2_t *)v232.f32, *(float32x2_t *)v232.f32);
        v234 = vrsqrte_f32(v233);
        v235 = 4;
        do
        {
          v234 = vmul_f32(v234, vrsqrts_f32(vmul_f32(v234, v234), v233));
          --v235;
        }
        while (v235);
        v236 = vmul_f32(v233, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v233), 0), _D8, (int8x8_t)v234));
        v237 = vrecpe_f32(v236);
        v238 = 4;
        do
        {
          v237 = vmul_f32(v237, vrecps_f32(v236, v237));
          --v238;
        }
        while (v238);
        v209 = vmulq_n_f32(v231, v237.f32[0]);
        v209.i32[3] = 0;
        v211 = 0;
        v213 = 0uLL;
      }
      else
      {
LABEL_80:
        v209 = v311;
        v213 = v309;
        v211 = vmin_f32(v313, 0);
      }
    }
    v239 = vmulq_n_f32(v213, v259);
    v239.i32[3] = 0;
    v240 = (int8x8_t)vmls_f32(vmul_f32(v260, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v213, (int8x16_t)v213, 4uLL)), v255, *(float32x2_t *)v213.f32);
    *(int8x8_t *)v241.f32 = vext_s8(v240, (int8x8_t)vmls_f32(vmul_f32(v256, *(float32x2_t *)v213.f32), v260, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v213, (int8x16_t)v213, 8uLL)), 4uLL);
    v241.i64[1] = v240.u32[0];
    v242 = vmlaq_f32(v239, v261, v241);
    v242.i64[1] = vextq_s8((int8x16_t)v242, (int8x16_t)v242, 8uLL).u32[0];
    v243 = vmulq_f32(v258, v213);
    v243.i64[0] = vpaddq_f32(v243, v243).u64[0];
    v244 = vmlaq_n_f32(v242, v258, vpadd_f32(*(float32x2_t *)v243.f32, *(float32x2_t *)v243.f32).f32[0]);
    v244.i64[1] = vextq_s8((int8x16_t)v244, (int8x16_t)v244, 8uLL).u32[0];
    v241.i64[0] = 0x4000000040000000;
    v241.i64[1] = 0x4000000040000000;
    v245 = vmlaq_f32(v262, v241, v244);
    v245.i64[1] = vextq_s8((int8x16_t)v245, (int8x16_t)v245, 8uLL).u32[0];
    v246 = vmlaq_n_f32(v245, v257, vmax_f32(v211, 0).f32[0]);
    v247 = vmulq_n_f32(v209, v259);
    v247.i32[3] = 0;
    *(float32x2_t *)v241.f32 = vmls_f32(vmul_f32(v260, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v209, (int8x16_t)v209, 4uLL)), v255, *(float32x2_t *)v209.f32);
    *(int8x8_t *)v244.f32 = vext_s8(*(int8x8_t *)v241.f32, (int8x8_t)vmls_f32(vmul_f32(v256, *(float32x2_t *)v209.f32), v260, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v209, (int8x16_t)v209, 8uLL)), 4uLL);
    v244.i64[1] = v241.u32[0];
    v248 = vmlaq_f32(v247, v261, v244);
    v248.i64[1] = vextq_s8((int8x16_t)v248, (int8x16_t)v248, 8uLL).u32[0];
    v249 = vmulq_f32(v258, v209);
    v249.i64[0] = vpaddq_f32(v249, v249).u64[0];
    v250 = vmlaq_n_f32(v248, v258, vpadd_f32(*(float32x2_t *)v249.f32, *(float32x2_t *)v249.f32).f32[0]);
    v251 = vaddq_f32(v250, v250);
    *(_QWORD *)a7 = v251.i64[0];
    *(_DWORD *)(a7 + 8) = v251.i32[2];
    *(_QWORD *)a8 = v246.i64[0];
    *(_DWORD *)(a8 + 8) = v246.i32[2];
  }
  return v211.f32[0];
}

float32_t physx::Gu::SweepGeomGeom<physx::Gu::CapsuleV,physx::Gu::ConvexHullV>(uint64_t *a1, uint64_t *a2, int8x8_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, float32x4_t a12)
{
  uint64_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  _BOOL4 v20;
  float32x4_t v21;
  _BOOL4 v22;
  int32x4_t v23;
  float32x4_t v29;
  int v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x4_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  int8x8_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int8x8_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float v93;
  float32x4_t v94;
  float32x2_t v95;
  float32x2_t v96;
  int8x8_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int8x8_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x2_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float *v122;
  float *v123;
  float32x2x2_t v124;
  int32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x2_t v129;
  float32x2_t v130;
  int v131;
  int8x16_t v132;
  float32x2_t v133;
  float32x2_t v134;
  int v135;
  float32x2_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  const float *v144;
  float32x2_t v145;
  float32x2_t v146;
  float32x2_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x2_t v150;
  int32x4_t v151;
  int8x16_t v152;
  int8x16_t v153;
  float32x4_t v154;
  int8x16_t v155;
  int32x4_t v156;
  unsigned __int32 v157;
  float32x4_t v158;
  float32x2_t v159;
  float32x2_t v160;
  int v161;
  float32x2_t v162;
  float32x2_t v163;
  int v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x2_t v173;
  float32x4_t v174;
  float32x2_t v175;
  float32x2_t v176;
  int v177;
  float32x2_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x2_t v182;
  uint64_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x2_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x2_t v189;
  float32x2_t v190;
  int v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  int8x8_t v195;
  float32x2_t v196;
  float32x2_t v197;
  float32x2_t v198;
  float32x2_t v199;
  float32x2_t v200;
  float32x2_t v201;
  int8x8_t v202;
  float32x4_t v203;
  float32x2_t v204;
  float32x2_t v205;
  int8x8_t v206;
  float32x4_t v207;
  int8x8_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x2_t v211;
  float32x4_t v212;
  float32x2_t v213;
  float32x4_t v214;
  float32x2_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x2_t v219;
  float32x4_t v220;
  float32x2_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x2_t v224;
  float32x4_t v225;
  float32x2_t v226;
  float32x4_t v227;
  float32x2_t v228;
  float32x4_t v229;
  float32x2_t v230;
  __int32 v231;
  uint64_t v232;
  uint64_t v233;
  float32x4_t v234;
  float32x2_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x2_t v238;
  float32x2_t v239;
  int v240;
  float32x2_t v241;
  int v242;
  float32x4_t v243;
  float32x2_t v244;
  float32x2_t v245;
  int v246;
  unsigned int v247;
  float32x2_t v248;
  float32x2_t v249;
  float32x2_t v250;
  int v251;
  int8x16_t v252;
  float32x2_t v253;
  float32x2_t v254;
  int v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x2_t v262;
  int8x8_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x2_t v266;
  float32x2_t v267;
  int v268;
  float32x2_t v269;
  float32x2_t v270;
  int v271;
  int8x16_t v272;
  int8x16_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x2_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x2_t v284;
  float32x2_t v285;
  int v286;
  float32x4_t v287;
  float32x4_t v288;
  int8x16_t v289;
  uint64_t v290;
  float32x4_t v291;
  float32x2x2_t v292;
  int32x4_t v293;
  float32x4_t *v294;
  float *v295;
  float32x4_t v297;
  float32x4_t v298;
  float32x2_t v299;
  float32x2_t v300;
  int v301;
  float32x2_t v302;
  float32x2_t v303;
  int v304;
  float32x4_t v305;
  int8x8_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  int32x4_t v319;
  float32x2_t v320;
  float32x2_t v321;
  float32x2_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float v325;
  float32x2_t v326;
  float32x4_t v327;
  float32x4_t v328;
  int8x16_t v331;
  float32x4_t v332;
  float32x2_t v333;
  float32x2_t v334;
  float32x4_t v335;
  float32x4_t v336;
  int8x16_t v337;
  float32x4_t v338;
  float32x4_t v339;
  int8x16_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  uint64_t (**v344)();
  float32x4_t *v345;
  float32x4_t v346;
  int32x4_t *v347;
  _OWORD v348[2];
  _OWORD v349[2];
  int32x4_t v350;
  int32x4_t v351;
  int32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  unsigned int v357;
  float32x2_t v358;
  float32x4_t v359;
  __int128 v360;
  char v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  float32x4_t v366;
  __int128 v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  char v371;
  _QWORD v372[2];
  float32x2_t v373;
  unsigned __int32 v374;
  int v375;
  char v376;
  float32x4_t v377;
  float32x4_t v378;
  int32x2_t v379;
  float32x4_t v380;
  float32x4_t v381;
  float32x4_t v382;
  int32x4_t v383;
  _OWORD v384[2];
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  __int128 v388;
  float32x2_t v389;
  float32x4_t v390;
  float32x4_t v391;
  float32x4_t v392;
  __int128 v393;
  uint64_t v394;
  float32x2x2_t v395;

  v394 = *MEMORY[0x24BDAC8D0];
  v12 = *a1;
  v375 = 4;
  v372[1] = 0;
  v372[0] = 0;
  a12.i32[0] = *(_DWORD *)(v12 + 4);
  v13 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, *(float *)(v12 + 8));
  v13.i32[3] = 0;
  v14 = *a2;
  v15 = vnegq_f32(v13);
  v15.i32[3] = 0;
  v377 = v13;
  v378 = v15;
  v379 = vdup_lane_s32(*(int32x2_t *)a12.f32, 0);
  v373.i32[0] = a12.i32[0];
  v373.i32[1] = a12.i32[0];
  v374 = a12.i32[0];
  v376 = 1;
  v361 = 0;
  v359 = 0u;
  v360 = 0u;
  v16 = *(_QWORD *)(v14 + 48);
  v17 = *(float32x4_t *)(v14 + 4);
  v18 = v17;
  v18.i32[3] = 0;
  v19 = *(float32x4_t *)(v14 + 16);
  v13.i32[0] = HIDWORD(*(_QWORD *)(v14 + 4));
  v20 = COERCE_FLOAT(*(_QWORD *)(v14 + 12)) == 1.0;
  if (v13.f32[0] != 1.0)
    v20 = 0;
  v368 = v16;
  v370 = *(_QWORD *)(v16 + 40) + 20 * *(unsigned __int8 *)(v16 + 39);
  v371 = *(_BYTE *)(v16 + 38);
  v22 = v17.f32[0] == 1.0 && v20;
  v21.i64[1] = *(unsigned int *)(v16 + 68);
  v21.i64[0] = *(_QWORD *)(v16 + 60);
  v23 = (int32x4_t)vmulq_f32(v18, v21);
  *(float32x2_t *)v23.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v23, 2), *(float32x2_t *)v23.i8);
  *(float *)v23.i32 = vpmin_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8).f32[0];
  *(float32x2_t *)&v360 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v23.i32);
  *((float *)&v360 + 2) = 0.025 * *(float *)v23.i32;
  __asm { FMOV            V8.2S, #1.0 }
  if (v22)
  {
    v362 = xmmword_2260E5F10;
    v363 = xmmword_2260E5F20;
    v364 = xmmword_2260E5F40;
    v365 = xmmword_2260E5F10;
    v366 = (float32x4_t)xmmword_2260E5F20;
    v367 = xmmword_2260E5F40;
  }
  else
  {
    v29 = vrecpeq_f32(v18);
    v30 = 4;
    do
    {
      v29 = vmulq_f32(v29, vrecpsq_f32(v29, v18));
      --v30;
    }
    while (v30);
    *(int32x2_t *)v31.f32 = vdup_lane_s32(*(int32x2_t *)v17.f32, 0);
    v31.i64[1] = v31.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v31, v18)), *(int8x8_t *)&a9).u32[0] & 0xFFFFFF) != 0)
    {
      v38 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.f32, 1);
      v39 = (float32x2_t)vdup_laneq_s32((int32x4_t)v19, 2);
      v40 = (float32x2_t)vdup_laneq_s32((int32x4_t)v19, 3);
      v41 = vaddq_f32(v19, v19);
      v42 = vmul_lane_f32(v38, *(float32x2_t *)v41.f32, 1);
      v43 = vmul_laneq_f32(v39, v41, 2);
      v44 = vmul_n_f32(v38, v41.f32[0]);
      v45 = vmul_n_f32(v39, v41.f32[0]);
      v46 = vmul_n_f32(v40, v41.f32[0]);
      v47 = vmul_lane_f32(v39, *(float32x2_t *)v41.f32, 1);
      v48 = vmul_lane_f32(v40, *(float32x2_t *)v41.f32, 1);
      v49 = vmul_laneq_f32(v40, v41, 2);
      v50 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v41.f32), 0));
      v51 = (int8x8_t)vsub_f32(v44, v49);
      *(int8x8_t *)v52.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v42), v43), (int8x8_t)vadd_f32(v44, v49), 4uLL);
      v52.i64[1] = vsub_f32(v45, v48).u32[0];
      *(int8x8_t *)v53.f32 = vext_s8(v51, (int8x8_t)vsub_f32(v50, v43), 4uLL);
      *(int8x8_t *)v41.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 0), *(int8x8_t *)v53.f32, 4uLL);
      v53.i64[1] = vadd_f32(v47, v46).u32[0];
      v54 = (int8x8_t)vsub_f32(v47, v46);
      v46.i32[0] = vsub_f32(v50, v42).u32[0];
      *(int8x8_t *)a12.f32 = vext_s8((int8x8_t)vadd_f32(v45, v48), v54, 4uLL);
      *(int8x8_t *)v55.f32 = vext_s8(*(int8x8_t *)v52.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v53.f32, 1), 4uLL);
      a12.i64[1] = v46.u32[0];
      v41.i64[1] = vdup_lane_s32(*(int32x2_t *)a12.f32, 0).u32[0];
      v55.i64[1] = vdup_lane_s32(*(int32x2_t *)a12.f32, 1).u32[0];
      *(int8x8_t *)v56.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v52.u32[2], 0), *(int8x8_t *)&v53.u32[2], 4uLL);
      v56.i64[1] = vdup_lane_s32((int32x2_t)v46.u32[0], 0).u32[0];
      v57 = vmulq_n_f32(v41, v17.f32[0]);
      v57.i32[3] = 0;
      v58 = vmulq_lane_f32(v55, *(float32x2_t *)v17.f32, 1);
      v58.i32[3] = 0;
      v59 = vmulq_laneq_f32(v56, v17, 2);
      v59.i32[3] = 0;
      v60 = vmulq_n_f32(v57, v52.f32[0]);
      v60.i32[3] = 0;
      v61 = vmulq_lane_f32(v58, *(float32x2_t *)v52.f32, 1);
      v61.i32[3] = 0;
      v62 = vmulq_laneq_f32(v59, v52, 2);
      v62.i32[3] = 0;
      v32 = vaddq_f32(v62, vaddq_f32(v60, v61));
      v63 = vmulq_n_f32(v57, v53.f32[0]);
      v63.i32[3] = 0;
      v64 = vmulq_lane_f32(v58, *(float32x2_t *)v53.f32, 1);
      v64.i32[3] = 0;
      v65 = vmulq_laneq_f32(v59, v53, 2);
      v65.i32[3] = 0;
      v66 = vaddq_f32(v63, v64);
      v67 = vmulq_n_f32(v57, a12.f32[0]);
      v67.i32[3] = 0;
      v68 = vmulq_lane_f32(v58, *(float32x2_t *)a12.f32, 1);
      v68.i32[3] = 0;
      v33 = vaddq_f32(v65, v66);
      v69 = vmulq_laneq_f32(v59, a12, 2);
      v69.i32[3] = 0;
      v34 = vaddq_f32(v69, vaddq_f32(v67, v68));
      v362 = (__int128)v32;
      v363 = (__int128)v33;
      v70 = vmulq_n_f32(v41, v29.f32[0]);
      v70.i32[3] = 0;
      v71 = vmulq_lane_f32(v55, *(float32x2_t *)v29.f32, 1);
      v71.i32[3] = 0;
      v72 = vmulq_laneq_f32(v56, v29, 2);
      v72.i32[3] = 0;
      v73 = vmulq_n_f32(v70, v52.f32[0]);
      v73.i32[3] = 0;
      v74 = vmulq_lane_f32(v71, *(float32x2_t *)v52.f32, 1);
      v74.i32[3] = 0;
      v75 = vmulq_laneq_f32(v72, v52, 2);
      v75.i32[3] = 0;
      v76 = vaddq_f32(v73, v74);
      v77 = vmulq_n_f32(v70, v53.f32[0]);
      v77.i32[3] = 0;
      v78 = vmulq_lane_f32(v71, *(float32x2_t *)v53.f32, 1);
      v78.i32[3] = 0;
      v79 = vmulq_laneq_f32(v72, v53, 2);
      v79.i32[3] = 0;
      v80 = vaddq_f32(v75, v76);
      v81 = vmulq_n_f32(v70, a12.f32[0]);
      v81.i32[3] = 0;
      v82 = vmulq_lane_f32(v71, *(float32x2_t *)a12.f32, 1);
      v82.i32[3] = 0;
      v83 = vmulq_laneq_f32(v72, a12, 2);
      v83.i32[3] = 0;
      v37 = vaddq_f32(v83, vaddq_f32(v81, v82));
      v364 = (__int128)v34;
      v365 = (__int128)v80;
      v366 = vaddq_f32(v79, vaddq_f32(v77, v78));
      a12.i32[0] = *(_DWORD *)(v12 + 4);
    }
    else
    {
      v29.i32[3] = 0;
      v32 = vmulq_f32(v18, (float32x4_t)xmmword_2260E5F10);
      v33 = vmulq_f32(v18, (float32x4_t)xmmword_2260E5F20);
      v34 = vmulq_f32(v18, (float32x4_t)xmmword_2260E5F40);
      v362 = (__int128)v32;
      v363 = (__int128)v33;
      v35 = vmulq_f32(v29, (float32x4_t)xmmword_2260E5F10);
      v36 = vmulq_f32(v29, (float32x4_t)xmmword_2260E5F20);
      v37 = vmulq_f32(v29, (float32x4_t)xmmword_2260E5F40);
      v364 = (__int128)v34;
      v365 = (__int128)v35;
      v366 = v36;
    }
    v84 = vmulq_f32(v32, (float32x4_t)0);
    v84.i32[3] = 0;
    v85 = vmulq_f32(v33, (float32x4_t)0);
    v85.i32[3] = 0;
    v86 = vmulq_f32(v34, (float32x4_t)0);
    v86.i32[3] = 0;
    v367 = (__int128)v37;
    v359 = vaddq_f32(v86, vaddq_f32(v85, v84));
  }
  v369 = *(_QWORD *)(v16 + 48);
  *(float *)&a9 = a12.f32[0] + *(float *)&a9;
  v87.i64[0] = *(_QWORD *)(a5 + 16);
  v87.i64[1] = *(unsigned int *)(a5 + 24);
  v88.i64[0] = *(_QWORD *)(a6 + 16);
  v89 = *a4;
  v88.i64[1] = *(unsigned int *)(a6 + 24);
  v90 = vnegq_f32(*a4);
  v91 = vsubq_f32(v87, v88);
  v92 = v90;
  v92.i32[3] = 0;
  v327 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v93) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v327.f32, *(float32x2_t *)v327.f32).u32[0];
  v94 = vmulq_n_f32(v91, v93);
  v94.i32[3] = 0;
  v95 = (float32x2_t)vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u64[0];
  v96 = (float32x2_t)vext_s8(*(int8x8_t *)v90.f32, (int8x8_t)v95, 4uLL);
  v97 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v90.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v91, (int8x16_t)v91, 4uLL)), v96, *(float32x2_t *)v91.f32);
  *(int8x8_t *)v98.f32 = vext_s8(v97, (int8x8_t)vmls_f32(vmul_f32(v95, *(float32x2_t *)v91.f32), *(float32x2_t *)v90.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL)), 4uLL);
  v98.i64[1] = v97.u32[0];
  v99 = vmlaq_laneq_f32(v94, v98, *a4, 3);
  v99.i64[1] = vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL).u32[0];
  v100 = vmulq_f32(v92, v91);
  v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
  v101 = vmlaq_n_f32(v99, v92, vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32).f32[0]);
  v102 = vaddq_f32(v101, v101);
  v102.i32[3] = 0;
  v103 = *(float32x4_t *)a3->i8;
  v103.i32[3] = 0;
  v104 = vmulq_f32(v103, v92);
  v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
  v105 = vmulq_laneq_f32(v103, *a4, 3);
  v103.i64[0] = vextq_s8((int8x16_t)v103, (int8x16_t)v103, 8uLL).u64[0];
  v106 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a3, *(int8x8_t *)v103.f32, 4uLL), *(float32x2_t *)v90.f32), v96, (float32x2_t)*a3);
  *(int8x8_t *)v107.f32 = vext_s8(v106, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a3, v95), *(float32x2_t *)v90.f32, *(float32x2_t *)v103.f32), 4uLL);
  *(int8x8_t *)&v107.u32[2] = v106;
  v108 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v92, *(float32x4_t *)a3->i8, 3), v105), v107);
  *(int32x2_t *)v90.f32 = vdup_lane_s32(*(int32x2_t *)v108.f32, 1);
  *(int32x2_t *)v92.f32 = vdup_laneq_s32((int32x4_t)v108, 2);
  v109 = vaddq_f32(v108, v108);
  v110 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a3->i8, *(int8x16_t *)a3->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL)), vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32));
  *(int32x2_t *)v103.f32 = vdup_laneq_s32((int32x4_t)v109, 2);
  *(int32x2_t *)v108.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v109.f32), 0);
  v111 = vmul_lane_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v109.f32, 1);
  v112 = vmul_laneq_f32(*(float32x2_t *)v92.f32, v109, 2);
  *(float32x2_t *)v90.f32 = vmul_n_f32(*(float32x2_t *)v90.f32, v109.f32[0]);
  v113 = vmul_n_f32(*(float32x2_t *)v92.f32, v109.f32[0]);
  *(float32x2_t *)v104.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v109.f32, 0), v110, 1);
  *(float32x2_t *)v92.f32 = vmul_lane_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v109.f32, 1);
  *(float32x2_t *)v109.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v109.f32, 1), v110, 1);
  v114 = vmul_lane_f32(*(float32x2_t *)v103.f32, v110, 1);
  *(float32x2_t *)v108.f32 = vsub_f32(_D8, *(float32x2_t *)v108.f32);
  *(int8x8_t *)v103.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v111), v112), (int8x8_t)vadd_f32(*(float32x2_t *)v90.f32, v114), 4uLL);
  v103.i64[1] = vsub_f32(v113, *(float32x2_t *)v109.f32).u32[0];
  *(int8x8_t *)v90.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v90.f32, v114), (int8x8_t)vsub_f32(*(float32x2_t *)v108.f32, v112), 4uLL);
  v90.i64[1] = vadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v104.f32).u32[0];
  v350 = (int32x4_t)v103;
  v351 = (int32x4_t)v90;
  *(int8x8_t *)v90.f32 = vext_s8((int8x8_t)vadd_f32(v113, *(float32x2_t *)v109.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v104.f32), 4uLL);
  v90.i64[1] = vsub_f32(*(float32x2_t *)v108.f32, v111).u32[0];
  v352 = (int32x4_t)v90;
  v353 = v102;
  *(int8x8_t *)v108.f32 = a3[2];
  v108.i64[1] = a3[3].u32[0];
  v90.i64[0] = a4[1].i64[0];
  v90.i64[1] = a4[1].u32[2];
  v328 = v88;
  v323 = vsubq_f32(v108, v87);
  v115 = vsubq_f32(vsubq_f32(v90, v88), v323);
  v116 = v89;
  v116.i32[3] = 0;
  v325 = v93;
  v326 = *(float32x2_t *)v89.f32;
  v117 = vmulq_n_f32(v115, v93);
  v117.i32[3] = 0;
  v322 = (float32x2_t)vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL).u64[0];
  v321 = (float32x2_t)vext_s8(*(int8x8_t *)v89.f32, (int8x8_t)v322, 4uLL);
  *(float32x2_t *)v92.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v89.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v115, (int8x16_t)v115, 4uLL)), v321, *(float32x2_t *)v115.f32);
  *(int8x8_t *)v90.f32 = vext_s8(*(int8x8_t *)v92.f32, (int8x8_t)vmls_f32(vmul_f32(v322, *(float32x2_t *)v115.f32), *(float32x2_t *)v89.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL)), 4uLL);
  v90.i64[1] = v92.u32[0];
  v118 = vmlsq_laneq_f32(v117, v90, v89, 3);
  v118.i64[1] = vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL).u32[0];
  v119 = vmulq_f32(v116, v115);
  v119.i64[0] = vpaddq_f32(v119, v119).u64[0];
  v324 = v116;
  v120 = vmlaq_n_f32(v118, v116, vpadd_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32).f32[0]);
  v121 = vaddq_f32(v120, v120);
  v346.i64[0] = (uint64_t)off_24ED915F8;
  v346.i64[1] = (uint64_t)v372;
  v347 = &v350;
  v122 = (float *)v348;
  v348[0] = v350;
  v349[0] = v352;
  v123 = (float *)v349;
  v124 = (float32x2x2_t)vzip1q_s32(v350, v352);
  v109.i64[0] = vzip2q_s32(v350, v352).u64[0];
  v125 = vzip1q_s32(v351, (int32x4_t)0);
  v104.i64[0] = vzip2q_s32(v351, (int32x4_t)0).u64[0];
  vst2_f32(v122, v124);
  v349[1] = v102;
  vst2_f32(v123, *(float32x2x2_t *)((char *)&v104 - 8));
  v348[1] = vzip2q_s32((int32x4_t)v124, v125);
  v344 = off_24ED91168;
  v345 = &v359;
  v357 = 1;
  v126 = vmulq_f32(v102, v102);
  v126.i64[0] = vpaddq_f32(v126, v126).u64[0];
  v127 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v126.f32, *(float32x2_t *)v126.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v102, (int8x16_t)xmmword_2260E5F10);
  v128 = vmulq_f32(v127, v127);
  v128.i64[0] = vpaddq_f32(v128, v128).u64[0];
  v129 = vpadd_f32(*(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32);
  v130 = vrsqrte_f32(v129);
  v131 = 4;
  do
  {
    v130 = vmul_f32(v130, vrsqrts_f32(vmul_f32(v130, v130), v129));
    --v131;
  }
  while (v131);
  v121.i32[3] = 0;
  v332 = v121;
  v132 = (int8x16_t)vmlaq_f32((float32x4_t)0, (float32x4_t)0, v121);
  v133 = vmul_f32(v129, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v129), 0), (int8x8_t)_D8, (int8x8_t)v130));
  v134 = vrecpe_f32(v133);
  v135 = 4;
  do
  {
    v134 = vmul_f32(v134, vrecps_f32(v133, v134));
    --v135;
  }
  while (v135);
  *(float *)&a9 = *(float *)&a9 + 0.0;
  v136 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
  v132.i64[1] = vextq_s8(v132, v132, 8uLL).u32[0];
  v336 = (float32x4_t)v132;
  v137 = vmulq_n_f32(v127, v134.f32[0]);
  v137.i32[3] = 0;
  v356 = v137;
  v138 = vnegq_f32(v137);
  v138.i32[3] = 0;
  v380 = v138;
  *(double *)v139.i64 = physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(&v346, (float32x2_t *)&v380);
  v341 = v139;
  *(double *)v140.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support((uint64_t)&v344, &v356);
  v141 = v140;
  v142 = vsubq_f32(v341, v140);
  v380 = v142;
  v381 = 0u;
  v382 = 0u;
  v383 = 0u;
  v385 = v341;
  v386 = 0u;
  v387 = 0u;
  v388 = 0u;
  v143 = vnegq_f32(v142);
  v143.i32[3] = 0;
  v390 = v141;
  v391 = 0u;
  v392 = 0u;
  v393 = 0u;
  v144 = &v345[1].f32[2];
  *(float32x2_t *)v141.f32 = vld1_dup_f32(v144);
  *(float32x2_t *)v141.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v141.f32, 0), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  v145 = vadd_f32(v136, *(float32x2_t *)v141.f32);
  v146 = vmul_f32(*(float32x2_t *)v141.f32, *(float32x2_t *)v141.f32);
  v147 = vmul_f32(v145, v145);
  v148 = vmulq_f32(v143, v143);
  v149 = vpaddq_f32(v148, v148);
  v150 = vpadd_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)v149.f32);
  v320 = v146;
  *(int32x2_t *)v149.f32 = vcgt_f32(v150, v146);
  v151 = vdupq_lane_s32(*(int32x2_t *)v149.f32, 0);
  v149.i32[0] = -1;
  v319 = (int32x4_t)v149;
  v152 = (int8x16_t)v142;
  v153.i64[0] = -1;
  v153.i64[1] = -1;
  v331 = (int8x16_t)v143;
  v154 = v143;
  v333 = 0;
  while (1)
  {
    v155 = (int8x16_t)v142;
    v156.i64[0] = -1;
    v156.i64[1] = -1;
    *(int16x4_t *)v156.i8 = vmovn_s32(vceqq_s32(v151, v156));
    v157 = vuzp1_s8(*(int8x8_t *)v156.i8, *(int8x8_t *)v156.i8).u32[0];
    if (v157 != -1)
      break;
    v158 = vmulq_f32(v154, v154);
    v158.i64[0] = vpaddq_f32(v158, v158).u64[0];
    v159 = vpadd_f32(*(float32x2_t *)v158.f32, *(float32x2_t *)v158.f32);
    v160 = vrsqrte_f32(v159);
    v161 = 4;
    do
    {
      v160 = vmul_f32(v160, vrsqrts_f32(vmul_f32(v160, v160), v159));
      --v161;
    }
    while (v161);
    v337 = v155;
    v162 = vmul_f32(v159, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v159), 0), (int8x8_t)_D8, (int8x8_t)v160));
    v163 = vrecpe_f32(v162);
    v164 = 4;
    do
    {
      v163 = vmul_f32(v163, vrecps_f32(v162, v163));
      --v164;
    }
    while (v164);
    v335 = v154;
    v165 = vmulq_n_f32(v154, v163.f32[0]);
    v165.i32[3] = 0;
    v338 = v165;
    v355 = v165;
    v166 = vnegq_f32(v165);
    v166.i32[3] = 0;
    v354 = v166;
    *(double *)v167.i64 = physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(&v346, (float32x2_t *)&v355);
    v342 = v167;
    *(double *)v168.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support((uint64_t)&v344, &v354);
    v169 = v342;
    v170 = vaddq_f32(v336, v168);
    v142 = vsubq_f32(v342, v170);
    v171 = vnegq_f32(v142);
    v171.i32[3] = 0;
    v172 = vmulq_f32(v338, v171);
    v172.i64[0] = vpaddq_f32(v172, v172).u64[0];
    v173 = vsub_f32(vpadd_f32(*(float32x2_t *)v172.f32, *(float32x2_t *)v172.f32), v145);
    if (v173.f32[0] > 0.0)
    {
      v174 = vmulq_f32(v332, v338);
      v174.i64[0] = vpaddq_f32(v174, v174).u64[0];
      v175 = vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32);
      if (v175.f32[0] >= 0.0)
        goto LABEL_84;
      v176 = vrecpe_f32(v175);
      v177 = 4;
      do
      {
        v176 = vmul_f32(v176, vrecps_f32(v175, v176));
        --v177;
      }
      while (v177);
      v178 = vsub_f32(v333, vmul_f32(v173, v176));
      if ((vcgt_f32(v178, v333).u8[0] & 1) != 0)
      {
        if (v178.f32[0] > 1.0)
        {
LABEL_84:
          v276 = 0;
          v274 = 0uLL;
          v278 = 0uLL;
          goto LABEL_90;
        }
        v179 = vmlaq_n_f32((float32x4_t)0, v332, v178.f32[0]);
        v179.i64[1] = vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL).u32[0];
        v339 = v179;
        v180 = vsubq_f32(v179, v336);
        v334 = v178;
        v390 = vaddq_f32(v180, v390);
        v391 = vaddq_f32(v180, v391);
        v392 = vaddq_f32(v180, v392);
        v380 = vsubq_f32(v385, v390);
        v381 = vsubq_f32(v386, v391);
        v382 = vsubq_f32(v387, v392);
        *(double *)v181.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support((uint64_t)&v344, &v354);
        v169 = v342;
        v170 = vaddq_f32(v339, v181);
        v142 = vsubq_f32(v342, v170);
        v150 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        v331 = (int8x16_t)v335;
        v336 = v339;
        v182 = v334;
      }
      else
      {
        v182 = v178;
      }
      v333 = v182;
    }
    v183 = v357;
    *(&v385 + v357) = v169;
    *(&v390 + v183) = v170;
    v357 = v183 + 1;
    *(&v380 + v183) = v142;
    if ((_DWORD)v183 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v380, &v385, &v390, (int *)&v357);
LABEL_41:
      v152 = v337;
      goto LABEL_75;
    }
    if ((_DWORD)v183 != 2)
    {
      v152 = v337;
      if ((_DWORD)v183 != 1)
        goto LABEL_75;
      v142 = v380;
      v184 = vsubq_f32(v381, v380);
      v185 = vmulq_f32(v184, v184);
      v185.i64[0] = vpaddq_f32(v185, v185).u64[0];
      v186 = vpadd_f32(*(float32x2_t *)v185.f32, *(float32x2_t *)v185.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v186), 0), *(int8x8_t *)v380.f32).u32[0] != -1)
      {
        v187 = vnegq_f32(v380);
        v187.i32[3] = 0;
        v188 = vmulq_f32(v187, v184);
        v188.i64[0] = vpaddq_f32(v188, v188).u64[0];
        v189 = vpadd_f32(*(float32x2_t *)v188.f32, *(float32x2_t *)v188.f32);
        v190 = vrecpe_f32(v186);
        v191 = 4;
        do
        {
          v190 = vmul_f32(v190, vrecps_f32(v186, v190));
          --v191;
        }
        while (v191);
        v142 = vmlaq_n_f32(v380, v184, vmax_f32(vmin_f32(vmul_f32(v189, v190), _D8), 0).f32[0]);
LABEL_56:
        v142.i64[1] = vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL).u32[0];
        goto LABEL_75;
      }
LABEL_57:
      v357 = 1;
      goto LABEL_75;
    }
    v142 = v380;
    v192 = vsubq_f32(v381, v380);
    v193 = vsubq_f32(v382, v380);
    v195 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v192.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v193, (int8x16_t)v193, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v192, (int8x16_t)v192, 4uLL), *(float32x2_t *)v193.f32);
    *(int8x8_t *)v194.f32 = vext_s8(v195, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v192, (int8x16_t)v192, 8uLL), *(float32x2_t *)v193.f32), *(float32x2_t *)v192.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v193, (int8x16_t)v193, 8uLL)), 4uLL);
    v195.i32[1] = 0;
    v357 = 3;
    v196 = vpadd_f32(vmul_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v194.f32), vmul_f32((float32x2_t)v195.u32[0], (float32x2_t)v195.u32[0]));
    v197 = vpadd_f32(v196, v196);
    if (v197.f32[0] <= 0.00000011921)
    {
      v357 = 2;
      v234 = vmulq_f32(v192, v192);
      v234.i64[0] = vpaddq_f32(v234, v234).u64[0];
      v235 = vpadd_f32(*(float32x2_t *)v234.f32, *(float32x2_t *)v234.f32);
      v152 = v337;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v235), 0), *(int8x8_t *)v380.f32).u32[0] != -1)
      {
        v236 = vnegq_f32(v380);
        v236.i32[3] = 0;
        v237 = vmulq_f32(v236, v192);
        v237.i64[0] = vpaddq_f32(v237, v237).u64[0];
        v238 = vpadd_f32(*(float32x2_t *)v237.f32, *(float32x2_t *)v237.f32);
        v239 = vrecpe_f32(v235);
        v240 = 4;
        do
        {
          v239 = vmul_f32(v239, vrecps_f32(v235, v239));
          --v240;
        }
        while (v240);
        v142 = vmlaq_n_f32(v380, v192, vmax_f32(vmin_f32(vmul_f32(v238, v239), _D8), 0).f32[0]);
        goto LABEL_56;
      }
      goto LABEL_57;
    }
    if (v197.f32[0] == 0.0)
    {
      v142 = 0uLL;
      goto LABEL_41;
    }
    *(int8x8_t *)&v194.u32[2] = v195;
    v198 = (float32x2_t)vextq_s8((int8x16_t)v381, (int8x16_t)v381, 8uLL).u64[0];
    v199 = (float32x2_t)vextq_s8((int8x16_t)v382, (int8x16_t)v382, 8uLL).u64[0];
    v200 = (float32x2_t)vextq_s8((int8x16_t)v382, (int8x16_t)v382, 4uLL).u64[0];
    v201 = (float32x2_t)vextq_s8((int8x16_t)v381, (int8x16_t)v381, 4uLL).u64[0];
    v202 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v381.f32, v200), v201, *(float32x2_t *)v382.f32);
    *(int8x8_t *)v203.f32 = vext_s8(v202, (int8x8_t)vmls_f32(vmul_f32(v198, *(float32x2_t *)v382.f32), *(float32x2_t *)v381.f32, v199), 4uLL);
    v203.i64[1] = v202.u32[0];
    v204 = (float32x2_t)vextq_s8((int8x16_t)v380, (int8x16_t)v380, 8uLL).u64[0];
    v205 = (float32x2_t)vextq_s8((int8x16_t)v380, (int8x16_t)v380, 4uLL).u64[0];
    v206 = (int8x8_t)vmls_f32(vmul_f32(v205, *(float32x2_t *)v382.f32), v200, *(float32x2_t *)v380.f32);
    *(int8x8_t *)v207.f32 = vext_s8(v206, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v380.f32, v199), *(float32x2_t *)v382.f32, v204), 4uLL);
    v207.i64[1] = v206.u32[0];
    v208 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v380.f32, v201), v205, *(float32x2_t *)v381.f32);
    *(int8x8_t *)v209.f32 = vext_s8(v208, (int8x8_t)vmls_f32(vmul_f32(v204, *(float32x2_t *)v381.f32), *(float32x2_t *)v380.f32, v198), 4uLL);
    v209.i64[1] = v208.u32[0];
    v210 = vmulq_f32(v203, v194);
    v210.i64[0] = vpaddq_f32(v210, v210).u64[0];
    v211 = vpadd_f32(*(float32x2_t *)v210.f32, *(float32x2_t *)v210.f32);
    v212 = vmulq_f32(v207, v194);
    v212.i64[0] = vpaddq_f32(v212, v212).u64[0];
    v213 = vpadd_f32(*(float32x2_t *)v212.f32, *(float32x2_t *)v212.f32);
    v214 = vmulq_f32(v209, v194);
    v214.i64[0] = vpaddq_f32(v214, v214).u64[0];
    v215 = vpadd_f32(*(float32x2_t *)v214.f32, *(float32x2_t *)v214.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v213), (int8x8_t)vcgez_f32(v211)), (int8x8_t)vcgez_f32(v215)), 0), *(int8x8_t *)v380.f32).u32[0] != -1)
    {
      v216 = vnegq_f32(v380);
      v216.i32[3] = 0;
      v217 = vnegq_f32(v381);
      v217.i32[3] = 0;
      v218 = vmulq_f32(v216, v192);
      v218.i64[0] = vpaddq_f32(v218, v218).u64[0];
      v219 = vpadd_f32(*(float32x2_t *)v218.f32, *(float32x2_t *)v218.f32);
      v220 = vmulq_f32(v192, v217);
      v220.i64[0] = vpaddq_f32(v220, v220).u64[0];
      v221 = vpadd_f32(*(float32x2_t *)v220.f32, *(float32x2_t *)v220.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v219), (int8x8_t)vclez_f32(v221)), (int8x8_t)vclez_f32(v215)), 0), *(int8x8_t *)v380.f32).u32[0] == -1)
      {
        v244 = vsub_f32(v219, v221);
        v245 = vrecpe_f32(v244);
        v246 = 4;
        do
        {
          v245 = vmul_f32(v245, vrecps_f32(v244, v245));
          --v246;
        }
        while (v246);
        v233 = 0;
        v142 = vmlaq_n_f32(v380, v192, vmul_f32(v219, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v244), (float32x2_t)0x3400000034000000), (int8x8_t)v245, 0)).f32[0]);
        v142.i64[1] = vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL).u32[0];
        v247 = 2;
        v232 = 1;
      }
      else
      {
        v222 = vnegq_f32(v382);
        v222.i32[3] = 0;
        v223 = vmulq_f32(v217, v193);
        v223.i64[0] = vpaddq_f32(v223, v223).u64[0];
        v224 = vpadd_f32(*(float32x2_t *)v223.f32, *(float32x2_t *)v223.f32);
        v225 = vmulq_f32(v192, v222);
        v225.i64[0] = vpaddq_f32(v225, v225).u64[0];
        v226 = vpadd_f32(*(float32x2_t *)v225.f32, *(float32x2_t *)v225.f32);
        v227 = vmulq_f32(v193, v222);
        v227.i64[0] = vpaddq_f32(v227, v227).u64[0];
        v228 = vpadd_f32(*(float32x2_t *)v227.f32, *(float32x2_t *)v227.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v224, v221), (int8x8_t)vcge_f32(v226, v228)), (int8x8_t)vclez_f32(v211)), 0), *(int8x8_t *)v380.f32).u32[0] != -1)
        {
          v229 = vmulq_f32(v216, v193);
          v229.i64[0] = vpaddq_f32(v229, v229).u64[0];
          v230 = vpadd_f32(*(float32x2_t *)v229.f32, *(float32x2_t *)v229.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v230), (int8x8_t)vclez_f32(v228)), (int8x8_t)vclez_f32(v213)), 0), *(int8x8_t *)v380.f32).u32[0] == -1)
          {
            v253 = vsub_f32(v230, v228);
            v254 = vrecpe_f32(v253);
            v255 = 4;
            v152 = v337;
            do
            {
              v254 = vmul_f32(v254, vrecps_f32(v253, v254));
              --v255;
            }
            while (v255);
            v233 = 0;
            v142 = vmlaq_n_f32(v380, v193, vmul_f32(v230, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v253), (float32x2_t)0x3400000034000000), (int8x8_t)v254, 0)).f32[0]);
            v142.i64[1] = vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL).u32[0];
            v232 = 2;
          }
          else
          {
            v152 = v337;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v230), (int8x8_t)vclez_f32(v219)), 0), *(int8x8_t *)v380.f32).u32[0] == -1)
            {
              v233 = 0;
              v232 = 1;
            }
            else
            {
              *(int16x4_t *)v142.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v221, v224), (int8x8_t)vcgez_f32(v221)), 0);
              *(int8x8_t *)v142.f32 = vuzp1_s8(*(int8x8_t *)v142.f32, *(int8x8_t *)v142.f32);
              v231 = v142.i32[0];
              v142 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v142, v319), 0), (int8x16_t)v381, (int8x16_t)v382);
              v232 = 1;
              if (v231 == -1)
                v233 = 1;
              else
                v233 = 2;
            }
          }
          v247 = v232;
          goto LABEL_74;
        }
        v248 = vsub_f32(v224, v221);
        v249 = vadd_f32(v248, vsub_f32(v226, v228));
        v250 = vrecpe_f32(v249);
        v251 = 4;
        do
        {
          v250 = vmul_f32(v250, vrecps_f32(v249, v250));
          --v251;
        }
        while (v251);
        v252 = (int8x16_t)vmlaq_n_f32(v381, vsubq_f32(v382, v381), vmul_f32(v248, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v249), (float32x2_t)0x3400000034000000), (int8x8_t)v250, 0)).f32[0]);
        v252.i64[1] = vextq_s8(v252, v252, 8uLL).u32[0];
        v247 = 2;
        v232 = 2;
        v233 = 1;
        v142 = (float32x4_t)v252;
      }
      v152 = v337;
LABEL_74:
      v256 = *(&v380 + v232);
      v257 = *(&v385 + v233);
      v258 = *(&v385 + v232);
      v259 = *(&v390 + v233);
      v260 = *(&v390 + v232);
      v380 = *(&v380 + v233);
      v381 = v256;
      v385 = v257;
      v386 = v258;
      v390 = v259;
      v391 = v260;
      v357 = v247;
      goto LABEL_75;
    }
    v241 = vrecpe_f32(v197);
    v242 = 4;
    v152 = v337;
    do
    {
      v241 = vmul_f32(v241, vrecps_f32(v197, v241));
      --v242;
    }
    while (v242);
    v243 = vmulq_f32(v380, v194);
    v243.i64[0] = vpaddq_f32(v243, v243).u64[0];
    v142 = vmulq_n_f32(v194, vmul_f32(v241, vpadd_f32(*(float32x2_t *)v243.f32, *(float32x2_t *)v243.f32)).f32[0]);
    v142.i32[3] = 0;
LABEL_75:
    v154 = vnegq_f32(v142);
    v154.i32[3] = 0;
    v261 = vmulq_f32(v142, v142);
    v261.i64[0] = vpaddq_f32(v261, v261).u64[0];
    v262 = vpadd_f32(*(float32x2_t *)v261.f32, *(float32x2_t *)v261.f32);
    v263 = (int8x8_t)vcgt_f32(v150, v262);
    v153 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v263, (int8x8_t)0x100000001), 0);
    v151 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v262, v147), v263), 0);
    v150 = v262;
  }
  v264 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v150, v320), 0), v153), 0x1FuLL)), (int8x16_t)v154, v331);
  v265 = vmulq_f32(v264, v264);
  v265.i64[0] = vpaddq_f32(v265, v265).u64[0];
  v266 = vpadd_f32(*(float32x2_t *)v265.f32, *(float32x2_t *)v265.f32);
  v267 = vrsqrte_f32(v266);
  v268 = 4;
  do
  {
    v267 = vmul_f32(v267, vrsqrts_f32(vmul_f32(v267, v267), v266));
    --v268;
  }
  while (v268);
  v269 = vmul_f32(v266, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v266), 0), (int8x8_t)_D8, (int8x8_t)v267));
  v270 = vrecpe_f32(v269);
  v271 = 4;
  do
  {
    v270 = vmul_f32(v270, vrecps_f32(v269, v270));
    --v271;
  }
  while (v271);
  v272 = (int8x16_t)vdupq_n_s32(-v376);
  v273 = (int8x16_t)vmulq_n_f32(v264, v270.f32[0]);
  v273.i32[3] = 0;
  v274 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v269), 0), v273));
  v274.i32[3] = 0;
  v275 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v153, 0x1FuLL)), v155, v152);
  v355 = v275;
  v276 = v333;
  if (v357 == 3)
  {
    v354.i64[0] = 0;
    v358 = 0;
    v340 = v272;
    v343 = v274;
    physx::Gu::barycentricCoordinates(&v355, &v380, &v381, &v382, (float32x2_t *)&v354, &v358);
    v272 = v340;
    v274 = v343;
    v276 = v333;
    v279 = vmulq_n_f32(vsubq_f32(v386, v385), v354.f32[0]);
    v279.i32[3] = 0;
    v280 = vmulq_n_f32(vsubq_f32(v387, v385), v358.f32[0]);
    v280.i32[3] = 0;
    v277 = vaddq_f32(v385, vaddq_f32(v279, v280));
  }
  else if (v357 == 2)
  {
    v281 = vsubq_f32(v380, v275);
    v282 = vsubq_f32(vsubq_f32(v381, v275), v281);
    v283 = vmulq_f32(v282, v282);
    v283.i64[0] = vpaddq_f32(v283, v283).u64[0];
    v284 = vpadd_f32(*(float32x2_t *)v283.f32, *(float32x2_t *)v283.f32);
    v285 = vrecpe_f32(v284);
    v286 = 4;
    do
    {
      v285 = vmul_f32(v285, vrecps_f32(v284, v285));
      --v286;
    }
    while (v286);
    v287 = vnegq_f32(v281);
    v287.i32[3] = 0;
    v288 = vmulq_f32(v287, v282);
    v288.i64[0] = vpaddq_f32(v288, v288).u64[0];
    v277 = vmlaq_n_f32(v385, vsubq_f32(v386, v385), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v284), (int8x8_t)v285, 0), vpadd_f32(*(float32x2_t *)v288.f32, *(float32x2_t *)v288.f32)).f32[0]);
    v277.i64[1] = vextq_s8((int8x16_t)v277, (int8x16_t)v277, 8uLL).u32[0];
  }
  else
  {
    v277 = 0uLL;
    if (v357 == 1)
      v277 = v385;
  }
  v289 = (int8x16_t)vmlsq_lane_f32(v277, v274, v373, 0);
  v289.i64[1] = vextq_s8(v289, v289, 8uLL).u32[0];
  v278 = (float32x4_t)vbslq_s8(v272, v289, (int8x16_t)v277);
LABEL_90:
  if (v157 == -1)
  {
    v276.i32[0] = 2139095039;
  }
  else
  {
    if (v276.f32[0] == 0.0)
    {
      v290 = (uint64_t)v345;
      v278.f32[0] = (float)(v373.f32[0] + v345[1].f32[0]) * 100.0;
      v291 = v353;
      v382 = (float32x4_t)v350;
      v384[0] = v352;
      v292 = (float32x2x2_t)vzip1q_s32(v350, v352);
      v395.val[0] = (float32x2_t)vzip2q_s32(v350, v352).u64[0];
      v293 = vzip1q_s32(v351, (int32x4_t)0);
      v395.val[1] = (float32x2_t)vzip2q_s32(v351, (int32x4_t)0).u64[0];
      v354.i8[0] = 0;
      v389 = 0;
      v385 = 0u;
      v386 = 0u;
      v387 = 0u;
      v380.i64[1] = (uint64_t)v372;
      v380.i64[0] = (uint64_t)off_24ED915F8;
      v381.i64[0] = (uint64_t)&v350;
      v294 = &v382;
      v295 = (float *)v384;
      vst2_f32(v294->f32, v292);
      v384[1] = v291;
      v383 = vzip2q_s32((int32x4_t)v292, v293);
      vst2_f32(v295, v395);
      v390.i64[1] = v290;
      v390.i64[0] = (uint64_t)off_24ED91168;
      if (physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v380, (uint64_t)&v390, &v356, &v355, &v354, (uint64_t)&v385, v353, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v278.f32, 0), 0.0, v291) != 5)goto LABEL_94;
      __asm { FMOV            V8.2S, #1.0 }
      if (physx::Gu::epaPenetration((uint64_t)&v346) - 5 >= 2)
      {
        v297 = vnegq_f32(v332);
        v297.i32[3] = 0;
        v298 = vmulq_f32(v297, v297);
        v298.i64[0] = vpaddq_f32(v298, v298).u64[0];
        v299 = vpadd_f32(*(float32x2_t *)v298.f32, *(float32x2_t *)v298.f32);
        v300 = vrsqrte_f32(v299);
        v301 = 4;
        do
        {
          v300 = vmul_f32(v300, vrsqrts_f32(vmul_f32(v300, v300), v299));
          --v301;
        }
        while (v301);
        v302 = vmul_f32(v299, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v299), 0), _D8, (int8x8_t)v300));
        v303 = vrecpe_f32(v302);
        v304 = 4;
        do
        {
          v303 = vmul_f32(v303, vrecps_f32(v302, v303));
          --v304;
        }
        while (v304);
        v274 = vmulq_n_f32(v297, v303.f32[0]);
        v274.i32[3] = 0;
        v276 = 0;
        v278 = 0uLL;
      }
      else
      {
LABEL_94:
        v274 = v387;
        v278 = v385;
        v276 = vmin_f32(v389, 0);
      }
    }
    v305 = vmulq_n_f32(v278, v325);
    v305.i32[3] = 0;
    v306 = (int8x8_t)vmls_f32(vmul_f32(v326, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v278, (int8x16_t)v278, 4uLL)), v321, *(float32x2_t *)v278.f32);
    *(int8x8_t *)v307.f32 = vext_s8(v306, (int8x8_t)vmls_f32(vmul_f32(v322, *(float32x2_t *)v278.f32), v326, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v278, (int8x16_t)v278, 8uLL)), 4uLL);
    v307.i64[1] = v306.u32[0];
    v308 = vmlaq_f32(v305, v327, v307);
    v308.i64[1] = vextq_s8((int8x16_t)v308, (int8x16_t)v308, 8uLL).u32[0];
    v309 = vmulq_f32(v324, v278);
    v309.i64[0] = vpaddq_f32(v309, v309).u64[0];
    v310 = vmlaq_n_f32(v308, v324, vpadd_f32(*(float32x2_t *)v309.f32, *(float32x2_t *)v309.f32).f32[0]);
    v310.i64[1] = vextq_s8((int8x16_t)v310, (int8x16_t)v310, 8uLL).u32[0];
    v307.i64[0] = 0x4000000040000000;
    v307.i64[1] = 0x4000000040000000;
    v311 = vmlaq_f32(v328, v307, v310);
    v311.i64[1] = vextq_s8((int8x16_t)v311, (int8x16_t)v311, 8uLL).u32[0];
    v312 = vmlaq_n_f32(v311, v323, vmax_f32(v276, 0).f32[0]);
    v313 = vmulq_n_f32(v274, v325);
    v313.i32[3] = 0;
    *(float32x2_t *)v307.f32 = vmls_f32(vmul_f32(v326, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v274, (int8x16_t)v274, 4uLL)), v321, *(float32x2_t *)v274.f32);
    *(int8x8_t *)v310.f32 = vext_s8(*(int8x8_t *)v307.f32, (int8x8_t)vmls_f32(vmul_f32(v322, *(float32x2_t *)v274.f32), v326, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v274, (int8x16_t)v274, 8uLL)), 4uLL);
    v310.i64[1] = v307.u32[0];
    v314 = vmlaq_f32(v313, v327, v310);
    v314.i64[1] = vextq_s8((int8x16_t)v314, (int8x16_t)v314, 8uLL).u32[0];
    v315 = vmulq_f32(v324, v274);
    v315.i64[0] = vpaddq_f32(v315, v315).u64[0];
    v316 = vmlaq_n_f32(v314, v324, vpadd_f32(*(float32x2_t *)v315.f32, *(float32x2_t *)v315.f32).f32[0]);
    v317 = vaddq_f32(v316, v316);
    *(_QWORD *)a7 = v317.i64[0];
    *(_DWORD *)(a7 + 8) = v317.i32[2];
    *(_QWORD *)a8 = v312.i64[0];
    *(_DWORD *)(a8 + 8) = v312.i32[2];
  }
  return v276.f32[0];
}

BOOL physx::Gu::SweepGeomGeom<physx::Gu::BoxV,physx::Gu::BoxV>(uint64_t *a1, uint64_t *a2, int8x16_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float32x4_t a10)
{
  uint64_t v12;
  float32x4_t v13;
  float32x2_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x2_t v26;
  float32x2_t v27;
  int8x8_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x2_t v36;
  int8x8_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float *v60;
  float *v61;
  float32x2x2_t v62;
  unint64_t v63;
  int32x4_t v64;
  _BOOL8 result;
  float32x4_t v66;
  float32x2_t v67;
  int8x8_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int8x8_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x2_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float v84;
  float32x2_t v85;
  float32x4_t v86;
  float32x4_t v87;
  _QWORD v88[3];
  float v89;
  int v90;
  char v91;
  float32x4_t v92;
  _QWORD v93[3];
  float v94;
  int v95;
  char v96;
  float32x4_t v97;
  _QWORD v98[2];
  float32x4_t v99;
  float32x4_t *v100;
  _OWORD v101[2];
  _OWORD v102[2];
  uint64_t v103;
  float32x4_t v104;
  int8x16_t v105;
  float32x2_t v106;
  float32x4_t v107;
  float32x4_t v108;
  int32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;

  v12 = *a1;
  v95 = 3;
  v96 = 0;
  v93[0] = 0;
  v93[1] = 0;
  a10.i64[0] = *(_QWORD *)(v12 + 4);
  v13 = a10;
  v13.i32[2] = *(_DWORD *)(v12 + 12);
  v14 = (float32x2_t)vdup_laneq_s32((int32x4_t)v13, 2);
  v15 = *a2;
  v13.i32[3] = 0;
  v97 = v13;
  *(float32x2_t *)a10.f32 = vpmin_f32(v14, *(float32x2_t *)a10.f32);
  a10.f32[0] = vpmin_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32).f32[0];
  v93[2] = vmul_n_f32((float32x2_t)0x3BA3D70A3C23D70ALL, a10.f32[0]);
  v94 = 0.05 * a10.f32[0];
  v90 = 3;
  v91 = 0;
  v88[0] = 0;
  v88[1] = 0;
  a10.i64[0] = *(_QWORD *)(v15 + 4);
  v16 = a10;
  v16.i32[2] = *(_DWORD *)(v15 + 12);
  v17 = (float32x2_t)vdup_laneq_s32((int32x4_t)v16, 2);
  v16.i32[3] = 0;
  v92 = v16;
  v18 = vpmin_f32(v17, *(float32x2_t *)a10.f32);
  v18.f32[0] = vpmin_f32(v18, v18).f32[0];
  v88[2] = vmul_n_f32((float32x2_t)0x3BA3D70A3C23D70ALL, v18.f32[0]);
  v89 = 0.05 * v18.f32[0];
  *(float *)&a9 = *(float *)&a9 + 0.0;
  v112 = 0u;
  v13.i64[0] = *(_QWORD *)(a5 + 16);
  v13.i64[1] = *(unsigned int *)(a5 + 24);
  v19 = *a4;
  v20.i64[0] = *(_QWORD *)(a6 + 16);
  v20.i64[1] = *(unsigned int *)(a6 + 24);
  v21 = vnegq_f32(*a4);
  v22 = v21;
  v22.i32[3] = 0;
  v23 = vsubq_f32(v13, v20);
  v86 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v24) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32).u32[0];
  v25 = vmulq_n_f32(v23, v24);
  v25.i32[3] = 0;
  v26 = (float32x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
  v27 = (float32x2_t)vext_s8(*(int8x8_t *)v21.f32, (int8x8_t)v26, 4uLL);
  v28 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v21.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 4uLL)), v27, *(float32x2_t *)v23.f32);
  *(int8x8_t *)v29.f32 = vext_s8(v28, (int8x8_t)vmls_f32(vmul_f32(v26, *(float32x2_t *)v23.f32), *(float32x2_t *)v21.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL)), 4uLL);
  v29.i64[1] = v28.u32[0];
  v30 = vmlaq_laneq_f32(v25, v29, *a4, 3);
  v30.i64[1] = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u32[0];
  v31 = vmulq_f32(v22, v23);
  v31.i64[0] = vpaddq_f32(v31, v31).u64[0];
  v32 = vmlaq_n_f32(v30, v22, vpadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32).f32[0]);
  v33 = vaddq_f32(v32, v32);
  v33.i32[3] = 0;
  v34 = *(float32x4_t *)a3;
  v34.i32[3] = 0;
  v35 = vmulq_f32(v34, v22);
  v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
  v36 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*a3, *a3, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32));
  _Q18 = vmulq_laneq_f32(v34, *a4, 3);
  v34.i64[0] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
  v38 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)a3->i8, *(int8x8_t *)v34.f32, 4uLL), *(float32x2_t *)v21.f32), v27, *(float32x2_t *)a3->i8);
  *(int8x8_t *)v16.f32 = vext_s8(v38, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a3->i8, v26), *(float32x2_t *)v21.f32, *(float32x2_t *)v34.f32), 4uLL);
  *(int8x8_t *)&v16.u32[2] = v38;
  v39 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v22, *(float32x4_t *)a3, 3), _Q18), v16);
  *(int32x2_t *)v21.f32 = vdup_lane_s32(*(int32x2_t *)v39.f32, 1);
  *(int32x2_t *)v22.f32 = vdup_laneq_s32((int32x4_t)v39, 2);
  v40 = vaddq_f32(v39, v39);
  v41 = (float32x2_t)vdup_laneq_s32((int32x4_t)v40, 2);
  *(int32x2_t *)v39.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v40.f32), 0);
  v42 = vmul_lane_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v40.f32, 1);
  v43 = vmul_laneq_f32(*(float32x2_t *)v22.f32, v40, 2);
  *(float32x2_t *)v21.f32 = vmul_n_f32(*(float32x2_t *)v21.f32, v40.f32[0]);
  v44 = vmul_n_f32(*(float32x2_t *)v22.f32, v40.f32[0]);
  v45 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.f32, 0), v36, 1);
  *(float32x2_t *)v22.f32 = vmul_lane_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v40.f32, 1);
  *(float32x2_t *)v40.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.f32, 1), v36, 1);
  v46 = vmul_lane_f32(v41, v36, 1);
  __asm { FMOV            V18.2S, #1.0 }
  *(float32x2_t *)v39.f32 = vsub_f32(*(float32x2_t *)_Q18.f32, *(float32x2_t *)v39.f32);
  *(int8x8_t *)_Q18.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q18.f32, v42), v43), (int8x8_t)vadd_f32(*(float32x2_t *)v21.f32, v46), 4uLL);
  _Q18.i64[1] = vsub_f32(v44, *(float32x2_t *)v40.f32).u32[0];
  *(int8x8_t *)v21.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v21.f32, v46), (int8x8_t)vsub_f32(*(float32x2_t *)v39.f32, v43), 4uLL);
  v21.i64[1] = vadd_f32(*(float32x2_t *)v22.f32, v45).u32[0];
  v108 = _Q18;
  v109 = (int32x4_t)v21;
  *(float32x2_t *)v21.f32 = vadd_f32(v44, *(float32x2_t *)v40.f32);
  v40.i32[0] = vsub_f32(*(float32x2_t *)v39.f32, v42).u32[0];
  *(int8x8_t *)v39.f32 = vext_s8(*(int8x8_t *)v21.f32, (int8x8_t)vsub_f32(*(float32x2_t *)v22.f32, v45), 4uLL);
  v39.i64[1] = v40.u32[0];
  v21.i64[0] = a3[1].i64[0];
  v21.i64[1] = a3[1].u32[2];
  v22.i64[0] = a4[1].i64[0];
  v22.i64[1] = a4[1].u32[2];
  v87 = v20;
  v82 = vsubq_f32(v21, v13);
  v51 = vsubq_f32(vsubq_f32(v22, v20), v82);
  v52 = v19;
  v52.i32[3] = 0;
  v84 = v24;
  v85 = *(float32x2_t *)v19.f32;
  v53 = vmulq_n_f32(v51, v24);
  v53.i32[3] = 0;
  v54 = (float32x2_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
  v55 = (float32x2_t)vext_s8(*(int8x8_t *)v19.f32, (int8x8_t)v54, 4uLL);
  v81 = v54;
  *(float32x2_t *)v40.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v19.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL)), v55, *(float32x2_t *)v51.f32);
  *(int8x8_t *)v22.f32 = vext_s8(*(int8x8_t *)v40.f32, (int8x8_t)vmls_f32(vmul_f32(v54, *(float32x2_t *)v51.f32), *(float32x2_t *)v19.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL)), 4uLL);
  v22.i64[1] = v40.u32[0];
  v56 = vmlsq_laneq_f32(v53, v22, v19, 3);
  v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
  v57 = vmulq_f32(v52, v51);
  v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
  v83 = v52;
  v58 = vmlaq_n_f32(v56, v52, vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32).f32[0]);
  v59 = vaddq_f32(v58, v58);
  v59.i32[3] = 0;
  v110 = v39;
  v111 = v33;
  v107 = v59;
  v106 = 0;
  v104 = 0u;
  v105 = 0u;
  v103 = 0;
  v99.i64[0] = (uint64_t)off_24ED91430;
  v99.i64[1] = (uint64_t)v93;
  v100 = &v108;
  v60 = (float *)v101;
  v101[0] = _Q18;
  v102[0] = v39;
  v61 = (float *)v102;
  v62 = (float32x2x2_t)vzip1q_s32((int32x4_t)_Q18, (int32x4_t)v39);
  v63 = vzip2q_s32((int32x4_t)_Q18, (int32x4_t)v39).u64[0];
  v64 = vzip1q_s32(v109, (int32x4_t)0);
  v52.i64[0] = vzip2q_s32(v109, (int32x4_t)0).u64[0];
  vst2_f32(v60, v62);
  v102[1] = v33;
  vst2_f32(v61, *(float32x2x2_t *)((char *)&v52 - 8));
  v101[1] = vzip2q_s32((int32x4_t)v62, v64);
  v98[0] = off_24ED913D0;
  v98[1] = v88;
  result = physx::Gu::gjkRaycastPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(&v99, (uint64_t)v98, &v111, (uint64_t)&v103, &v112, &v107, &v106, &v104, *(int32x2_t *)&a9, &v105, 1);
  if (result)
  {
    v66 = vmulq_n_f32((float32x4_t)v105, v84);
    v66.i32[3] = 0;
    v67 = (float32x2_t)vextq_s8(v105, v105, 8uLL).u64[0];
    v68 = (int8x8_t)vmls_f32(vmul_f32(v85, (float32x2_t)vext_s8(*(int8x8_t *)v105.i8, (int8x8_t)v67, 4uLL)), v55, *(float32x2_t *)v105.i8);
    *(int8x8_t *)v69.f32 = vext_s8(v68, (int8x8_t)vmls_f32(vmul_f32(v81, *(float32x2_t *)v105.i8), v85, v67), 4uLL);
    v69.i64[1] = v68.u32[0];
    v70 = vmlaq_f32(v66, v86, v69);
    v70.i64[1] = vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u32[0];
    v71 = vmulq_f32(v83, (float32x4_t)v105);
    v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
    v72 = vmlaq_n_f32(v70, v83, vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32).f32[0]);
    v72.i64[1] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u32[0];
    v71.i64[0] = 0x4000000040000000;
    v71.i64[1] = 0x4000000040000000;
    v73 = vmlaq_f32(v87, v71, v72);
    v73.i64[1] = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u32[0];
    v74 = vmlaq_n_f32(v73, v82, vmax_f32(v106, 0).f32[0]);
    v75 = vmulq_n_f32(v104, v84);
    v75.i32[3] = 0;
    v69.i64[0] = vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).u64[0];
    v76 = (int8x8_t)vmls_f32(vmul_f32(v85, (float32x2_t)vext_s8(*(int8x8_t *)v104.f32, *(int8x8_t *)v69.f32, 4uLL)), v55, *(float32x2_t *)v104.f32);
    *(int8x8_t *)v69.f32 = vext_s8(v76, (int8x8_t)vmls_f32(vmul_f32(v81, *(float32x2_t *)v104.f32), v85, *(float32x2_t *)v69.f32), 4uLL);
    v69.i64[1] = v76.u32[0];
    v77 = vmlaq_f32(v75, v86, v69);
    v77.i64[1] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u32[0];
    v78 = vmulq_f32(v83, v104);
    v78.i64[0] = vpaddq_f32(v78, v78).u64[0];
    v79 = vmlaq_n_f32(v77, v83, vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32).f32[0]);
    v80 = vaddq_f32(v79, v79);
    *(_QWORD *)a7 = v80.i64[0];
    *(_DWORD *)(a7 + 8) = v80.i32[2];
    *(_QWORD *)a8 = v74.i64[0];
    *(_DWORD *)(a8 + 8) = v74.i32[2];
  }
  return result;
}

BOOL physx::Gu::SweepGeomGeom<physx::Gu::BoxV,physx::Gu::ConvexHullV>(uint64_t *a1, uint64_t *a2, int8x16_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int32x4_t a10)
{
  uint64_t v12;
  uint64_t v13;
  int32x4_t v14;
  float32x2_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  _BOOL4 v20;
  float32x4_t v21;
  int32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x4_t v30;
  int v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x4_t v51;
  int32x2_t v52;
  int8x8_t v53;
  float32x4_t v54;
  int8x8_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x2_t v97;
  int8x8_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int8x8_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x2x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x2_t v114;
  float32x2_t v115;
  int32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x2_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float *v126;
  float *v127;
  float32x2x2_t v128;
  int32x4_t v129;
  _BOOL8 result;
  float32x4_t v131;
  float32x2_t v132;
  int8x8_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  int8x8_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x2_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float v149;
  float32x2_t v150;
  float32x4_t v151;
  float32x4_t v152;
  _QWORD v153[3];
  float v154;
  int v155;
  char v156;
  int32x4_t v157;
  _QWORD v158[2];
  float32x4_t v159;
  int32x4_t *v160;
  _OWORD v161[2];
  _OWORD v162[2];
  uint64_t v163;
  float32x4_t v164;
  int8x16_t v165;
  float32x2_t v166;
  float32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  __int128 v174;
  char v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  uint64_t v186;

  v186 = *MEMORY[0x24BDAC8D0];
  v12 = *a1;
  v13 = *a2;
  v155 = 3;
  v156 = 0;
  v153[0] = 0;
  v153[1] = 0;
  a10.i64[0] = *(_QWORD *)(v12 + 4);
  v14 = a10;
  v14.i32[2] = *(_DWORD *)(v12 + 12);
  v15 = (float32x2_t)vdup_laneq_s32(v14, 2);
  v14.i32[3] = 0;
  v157 = v14;
  *(float32x2_t *)a10.i8 = vpmin_f32(v15, *(float32x2_t *)a10.i8);
  *(float *)a10.i32 = vpmin_f32(*(float32x2_t *)a10.i8, *(float32x2_t *)a10.i8).f32[0];
  v153[2] = vmul_n_f32((float32x2_t)0x3BA3D70A3C23D70ALL, *(float *)a10.i32);
  v154 = 0.05 * *(float *)a10.i32;
  v175 = 0;
  v173 = 0u;
  v174 = 0u;
  v16 = *(_QWORD *)(v13 + 48);
  v17 = *(float32x4_t *)(v13 + 4);
  v18 = v17;
  v18.i32[3] = 0;
  v19 = *(float32x4_t *)(v13 + 16);
  a10.i32[0] = HIDWORD(*(_QWORD *)(v13 + 4));
  v20 = COERCE_FLOAT(*(_QWORD *)(v13 + 12)) == 1.0;
  v182 = v16;
  v184 = *(_QWORD *)(v16 + 40) + 20 * *(unsigned __int8 *)(v16 + 39);
  v185 = *(_BYTE *)(v16 + 38);
  _ZF = v17.f32[0] == 1.0 && *(float *)a10.i32 == 1.0;
  v21.i64[1] = *(unsigned int *)(v16 + 68);
  v21.i64[0] = *(_QWORD *)(v16 + 60);
  v23 = (int32x4_t)vmulq_f32(v18, v21);
  v24 = (float32x2_t)vdup_laneq_s32(v23, 2);
  if (!_ZF)
    v20 = 0;
  v25 = vpmin_f32(v24, *(float32x2_t *)v23.i8);
  v25.f32[0] = vpmin_f32(v25, v25).f32[0];
  *(float32x2_t *)&v174 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v25.f32[0]);
  *((float *)&v174 + 2) = 0.025 * v25.f32[0];
  __asm { FMOV            V1.2S, #1.0 }
  if (v20)
  {
    v176 = xmmword_2260E5F10;
    v177 = xmmword_2260E5F20;
    v178 = xmmword_2260E5F40;
    v179 = xmmword_2260E5F10;
    v180 = xmmword_2260E5F20;
    v181 = xmmword_2260E5F40;
  }
  else
  {
    v30 = vrecpeq_f32(v18);
    v31 = 4;
    do
    {
      v30 = vmulq_f32(v30, vrecpsq_f32(v30, v18));
      --v31;
    }
    while (v31);
    *(int32x2_t *)v32.f32 = vdup_lane_s32(*(int32x2_t *)v17.f32, 0);
    v32.i64[1] = v32.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v32, v18)), *(int8x8_t *)&a9).u32[0] & 0xFFFFFF) != 0)
    {
      v39 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.f32, 1);
      v40 = (float32x2_t)vdup_laneq_s32((int32x4_t)v19, 2);
      v41 = (float32x2_t)vdup_laneq_s32((int32x4_t)v19, 3);
      v42 = vaddq_f32(v19, v19);
      v43 = vmul_lane_f32(v39, *(float32x2_t *)v42.f32, 1);
      v44 = vmul_laneq_f32(v40, v42, 2);
      v45 = vmul_n_f32(v39, v42.f32[0]);
      v46 = vmul_n_f32(v40, v42.f32[0]);
      v47 = vmul_n_f32(v41, v42.f32[0]);
      v48 = vmul_lane_f32(v40, *(float32x2_t *)v42.f32, 1);
      v49 = vmul_lane_f32(v41, *(float32x2_t *)v42.f32, 1);
      v50 = vmul_laneq_f32(v41, v42, 2);
      *(float32x2_t *)v42.f32 = vsub_f32(_D1, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v42.f32), 0));
      *(int8x8_t *)v51.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D1, v43), v44), (int8x8_t)vadd_f32(v45, v50), 4uLL);
      v51.i64[1] = vsub_f32(v46, v49).u32[0];
      v52 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v45, v50), (int8x8_t)vsub_f32(*(float32x2_t *)v42.f32, v44), 4uLL);
      v53 = (int8x8_t)vadd_f32(v46, v49);
      *(int8x8_t *)v54.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v51.f32, 0), (int8x8_t)v52, 4uLL);
      v55 = (int8x8_t)vdup_lane_s32(v52, 1);
      *(int32x2_t *)v56.f32 = v52;
      v56.i64[1] = vadd_f32(v48, v47).u32[0];
      *(int8x8_t *)v57.f32 = vext_s8(v53, (int8x8_t)vsub_f32(v48, v47), 4uLL);
      *(int8x8_t *)v58.f32 = vext_s8(*(int8x8_t *)v51.f32, v55, 4uLL);
      v57.i64[1] = vsub_f32(*(float32x2_t *)v42.f32, v43).u32[0];
      v54.i64[1] = vdup_lane_s32(*(int32x2_t *)v57.f32, 0).u32[0];
      v58.i64[1] = vdup_lane_s32(*(int32x2_t *)v57.f32, 1).u32[0];
      *(int8x8_t *)v59.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v51.u32[2], 0), *(int8x8_t *)&v56.u32[2], 4uLL);
      v59.i64[1] = vdup_lane_s32(*(int32x2_t *)&v57.u32[2], 0).u32[0];
      v60 = vmulq_n_f32(v54, v17.f32[0]);
      v60.i32[3] = 0;
      v61 = vmulq_lane_f32(v58, *(float32x2_t *)v17.f32, 1);
      v61.i32[3] = 0;
      v62 = vmulq_laneq_f32(v59, v17, 2);
      v62.i32[3] = 0;
      v63 = vmulq_n_f32(v60, v51.f32[0]);
      v63.i32[3] = 0;
      v64 = vmulq_lane_f32(v61, *(float32x2_t *)v51.f32, 1);
      v64.i32[3] = 0;
      v65 = vmulq_laneq_f32(v62, v51, 2);
      v65.i32[3] = 0;
      v33 = vaddq_f32(v65, vaddq_f32(v63, v64));
      v66 = vmulq_n_f32(v60, v56.f32[0]);
      v66.i32[3] = 0;
      v67 = vmulq_lane_f32(v61, *(float32x2_t *)v56.f32, 1);
      v67.i32[3] = 0;
      v68 = vmulq_laneq_f32(v62, v56, 2);
      v68.i32[3] = 0;
      v69 = vaddq_f32(v66, v67);
      v70 = vmulq_n_f32(v60, v57.f32[0]);
      v70.i32[3] = 0;
      v71 = vmulq_lane_f32(v61, *(float32x2_t *)v57.f32, 1);
      v71.i32[3] = 0;
      v72 = vmulq_laneq_f32(v62, v57, 2);
      v72.i32[3] = 0;
      v34 = vaddq_f32(v68, v69);
      v35 = vaddq_f32(v72, vaddq_f32(v70, v71));
      v176 = (__int128)v33;
      v177 = (__int128)v34;
      v178 = (__int128)v35;
      v73 = vmulq_n_f32(v54, v30.f32[0]);
      v73.i32[3] = 0;
      v74 = vmulq_lane_f32(v58, *(float32x2_t *)v30.f32, 1);
      v74.i32[3] = 0;
      v75 = vmulq_laneq_f32(v59, v30, 2);
      v75.i32[3] = 0;
      v76 = vmulq_n_f32(v73, v51.f32[0]);
      v76.i32[3] = 0;
      v77 = vmulq_lane_f32(v74, *(float32x2_t *)v51.f32, 1);
      v77.i32[3] = 0;
      v78 = vmulq_laneq_f32(v75, v51, 2);
      v78.i32[3] = 0;
      v36 = vaddq_f32(v78, vaddq_f32(v76, v77));
      v79 = vmulq_n_f32(v73, v56.f32[0]);
      v79.i32[3] = 0;
      v80 = vmulq_lane_f32(v74, *(float32x2_t *)v56.f32, 1);
      v80.i32[3] = 0;
      v81 = vmulq_laneq_f32(v75, v56, 2);
      v81.i32[3] = 0;
      v82 = vmulq_n_f32(v73, v57.f32[0]);
      v82.i32[3] = 0;
      v83 = vmulq_lane_f32(v74, *(float32x2_t *)v57.f32, 1);
      v83.i32[3] = 0;
      v37 = vaddq_f32(v81, vaddq_f32(v79, v80));
      v84 = vmulq_laneq_f32(v75, v57, 2);
      v84.i32[3] = 0;
      v38 = vaddq_f32(v84, vaddq_f32(v82, v83));
    }
    else
    {
      v30.i32[3] = 0;
      v33 = vmulq_f32(v18, (float32x4_t)xmmword_2260E5F10);
      v34 = vmulq_f32(v18, (float32x4_t)xmmword_2260E5F20);
      v35 = vmulq_f32(v18, (float32x4_t)xmmword_2260E5F40);
      v176 = (__int128)v33;
      v177 = (__int128)v34;
      v178 = (__int128)v35;
      v36 = vmulq_f32(v30, (float32x4_t)xmmword_2260E5F10);
      v37 = vmulq_f32(v30, (float32x4_t)xmmword_2260E5F20);
      v38 = vmulq_f32(v30, (float32x4_t)xmmword_2260E5F40);
    }
    v180 = (__int128)v37;
    v181 = (__int128)v38;
    v85 = vmulq_f32(v33, (float32x4_t)0);
    v85.i32[3] = 0;
    v86 = vmulq_f32(v34, (float32x4_t)0);
    v86.i32[3] = 0;
    v87 = vmulq_f32(v35, (float32x4_t)0);
    v87.i32[3] = 0;
    v179 = (__int128)v36;
    v173 = vaddq_f32(v87, vaddq_f32(v86, v85));
  }
  v183 = *(_QWORD *)(v16 + 48);
  *(float *)&a9 = *(float *)&a9 + 0.0;
  v172 = 0u;
  v88.i64[0] = *(_QWORD *)(a5 + 16);
  v88.i64[1] = *(unsigned int *)(a5 + 24);
  v89 = *a4;
  v90.i64[0] = *(_QWORD *)(a6 + 16);
  v90.i64[1] = *(unsigned int *)(a6 + 24);
  v91 = vnegq_f32(*a4);
  v92 = v91;
  v92.i32[3] = 0;
  v93 = vsubq_f32(v88, v90);
  v151 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v94) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v151.f32, *(float32x2_t *)v151.f32).u32[0];
  v95 = vmulq_n_f32(v93, v94);
  v95.i32[3] = 0;
  v96 = (float32x2_t)vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u64[0];
  v97 = (float32x2_t)vext_s8(*(int8x8_t *)v91.f32, (int8x8_t)v96, 4uLL);
  v98 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v91.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 4uLL)), v97, *(float32x2_t *)v93.f32);
  *(int8x8_t *)v99.f32 = vext_s8(v98, (int8x8_t)vmls_f32(vmul_f32(v96, *(float32x2_t *)v93.f32), *(float32x2_t *)v91.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL)), 4uLL);
  v99.i64[1] = v98.u32[0];
  v100 = vmlaq_laneq_f32(v95, v99, *a4, 3);
  v100.i64[1] = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u32[0];
  v101 = vmulq_f32(v92, v93);
  v101.i64[0] = vpaddq_f32(v101, v101).u64[0];
  v102 = vmlaq_n_f32(v100, v92, vpadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32).f32[0]);
  v103 = vaddq_f32(v102, v102);
  v103.i32[3] = 0;
  v104 = *(float32x4_t *)a3;
  v104.i32[3] = 0;
  v105 = vmulq_f32(v104, v92);
  v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
  *(float32x2_t *)v99.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*a3, *a3, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL)), vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32));
  v106 = vmulq_laneq_f32(v104, *a4, 3);
  v104.i64[0] = vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).u64[0];
  v107 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)a3->i8, *(int8x8_t *)v104.f32, 4uLL), *(float32x2_t *)v91.f32), v97, *(float32x2_t *)a3->i8);
  *(int8x8_t *)v91.f32 = vext_s8(v107, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a3->i8, v96), *(float32x2_t *)v91.f32, *(float32x2_t *)v104.f32), 4uLL);
  *(int8x8_t *)&v91.u32[2] = v107;
  v108 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v92, *(float32x4_t *)a3, 3), v106), v91);
  v109 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v108.f32, 1);
  *(int32x2_t *)v92.f32 = vdup_laneq_s32((int32x4_t)v108, 2);
  v110 = (float32x2x2_t)vaddq_f32(v108, v108);
  *(float32x2_t *)v108.f32 = vmul_f32(*(float32x2_t *)v108.f32, v110.val[0]);
  v111 = vmul_lane_f32(v109, v110.val[0], 1);
  v112 = vmul_laneq_f32(*(float32x2_t *)v92.f32, (float32x4_t)v110, 2);
  v113 = vmul_n_f32(v109, v110.val[0].f32[0]);
  v114 = vmul_n_f32(*(float32x2_t *)v92.f32, v110.val[0].f32[0]);
  *(float32x2_t *)v92.f32 = vmul_lane_f32(*(float32x2_t *)v92.f32, v110.val[0], 1);
  v115 = vmul_lane_f32((float32x2_t)vdup_lane_s32((int32x2_t)v110.val[0], 0), *(float32x2_t *)v99.f32, 1);
  *(float32x2_t *)v106.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32((int32x2_t)v110.val[0], 1), *(float32x2_t *)v99.f32, 1);
  v110.val[0] = vmul_lane_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v110, 2), *(float32x2_t *)v99.f32, 1);
  *(float32x2_t *)v108.f32 = vsub_f32(_D1, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v108.f32, 0));
  *(int8x8_t *)v116.i8 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D1, v111), v112), (int8x8_t)vadd_f32(v113, v110.val[0]), 4uLL);
  v116.i64[1] = vsub_f32(v114, *(float32x2_t *)v106.f32).u32[0];
  *(int8x8_t *)v117.f32 = vext_s8((int8x8_t)vsub_f32(v113, v110.val[0]), (int8x8_t)vsub_f32(*(float32x2_t *)v108.f32, v112), 4uLL);
  v117.i64[1] = vadd_f32(*(float32x2_t *)v92.f32, v115).u32[0];
  v168 = v116;
  v169 = (int32x4_t)v117;
  *(int8x8_t *)v116.i8 = vext_s8((int8x8_t)vadd_f32(v114, *(float32x2_t *)v106.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v92.f32, v115), 4uLL);
  v116.i64[1] = vsub_f32(*(float32x2_t *)v108.f32, v111).u32[0];
  v108.i64[0] = a3[1].i64[0];
  v108.i64[1] = a3[1].u32[2];
  v117.i64[0] = a4[1].i64[0];
  v117.i64[1] = a4[1].u32[2];
  v152 = v90;
  v147 = vsubq_f32(v108, v88);
  v118 = vsubq_f32(vsubq_f32(v117, v90), v147);
  v119 = v89;
  v119.i32[3] = 0;
  v149 = v94;
  v150 = *(float32x2_t *)v89.f32;
  v120 = vmulq_n_f32(v118, v94);
  v120.i32[3] = 0;
  v110.val[0] = (float32x2_t)vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL).u64[0];
  v121 = (float32x2_t)vext_s8(*(int8x8_t *)v89.f32, (int8x8_t)v110.val[0], 4uLL);
  v146 = v110.val[0];
  *(float32x2_t *)v92.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v89.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v118, (int8x16_t)v118, 4uLL)), v121, *(float32x2_t *)v118.f32);
  *(int8x8_t *)v117.f32 = vext_s8(*(int8x8_t *)v92.f32, (int8x8_t)vmls_f32(vmul_f32(v110.val[0], *(float32x2_t *)v118.f32), *(float32x2_t *)v89.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL)), 4uLL);
  v117.i64[1] = v92.u32[0];
  v122 = vmlsq_laneq_f32(v120, v117, v89, 3);
  v122.i64[1] = vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL).u32[0];
  v123 = vmulq_f32(v119, v118);
  v123.i64[0] = vpaddq_f32(v123, v123).u64[0];
  v148 = v119;
  v124 = vmlaq_n_f32(v122, v119, vpadd_f32(*(float32x2_t *)v123.f32, *(float32x2_t *)v123.f32).f32[0]);
  v125 = vaddq_f32(v124, v124);
  v125.i32[3] = 0;
  v170 = v116;
  v171 = v103;
  v167 = v125;
  v166 = 0;
  v164 = 0u;
  v165 = 0u;
  v163 = 0;
  v159.i64[0] = (uint64_t)off_24ED91430;
  v159.i64[1] = (uint64_t)v153;
  v160 = &v168;
  v126 = (float *)v161;
  v161[0] = v168;
  v162[0] = v116;
  v127 = (float *)v162;
  v128 = (float32x2x2_t)vzip1q_s32(v168, v116);
  v110.val[0] = (float32x2_t)vzip2q_s32(v168, v116).u64[0];
  v129 = vzip1q_s32(v169, (int32x4_t)0);
  v119.i64[0] = vzip2q_s32(v169, (int32x4_t)0).u64[0];
  vst2_f32(v126, v128);
  v162[1] = v103;
  vst2_f32(v127, v110);
  v161[1] = vzip2q_s32((int32x4_t)v128, v129);
  v158[0] = off_24ED91168;
  v158[1] = &v173;
  result = physx::Gu::gjkRaycastPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v159, (uint64_t)v158, &v171, (uint64_t)&v163, &v172, &v167, &v166, &v164, *(int32x2_t *)&a9, &v165, 1);
  if (result)
  {
    v131 = vmulq_n_f32((float32x4_t)v165, v149);
    v131.i32[3] = 0;
    v132 = (float32x2_t)vextq_s8(v165, v165, 8uLL).u64[0];
    v133 = (int8x8_t)vmls_f32(vmul_f32(v150, (float32x2_t)vext_s8(*(int8x8_t *)v165.i8, (int8x8_t)v132, 4uLL)), v121, *(float32x2_t *)v165.i8);
    *(int8x8_t *)v134.f32 = vext_s8(v133, (int8x8_t)vmls_f32(vmul_f32(v146, *(float32x2_t *)v165.i8), v150, v132), 4uLL);
    v134.i64[1] = v133.u32[0];
    v135 = vmlaq_f32(v131, v151, v134);
    v135.i64[1] = vextq_s8((int8x16_t)v135, (int8x16_t)v135, 8uLL).u32[0];
    v136 = vmulq_f32(v148, (float32x4_t)v165);
    v136.i64[0] = vpaddq_f32(v136, v136).u64[0];
    v137 = vmlaq_n_f32(v135, v148, vpadd_f32(*(float32x2_t *)v136.f32, *(float32x2_t *)v136.f32).f32[0]);
    v137.i64[1] = vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u32[0];
    v136.i64[0] = 0x4000000040000000;
    v136.i64[1] = 0x4000000040000000;
    v138 = vmlaq_f32(v152, v136, v137);
    v138.i64[1] = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u32[0];
    v139 = vmlaq_n_f32(v138, v147, vmax_f32(v166, 0).f32[0]);
    v140 = vmulq_n_f32(v164, v149);
    v140.i32[3] = 0;
    v134.i64[0] = vextq_s8((int8x16_t)v164, (int8x16_t)v164, 8uLL).u64[0];
    v141 = (int8x8_t)vmls_f32(vmul_f32(v150, (float32x2_t)vext_s8(*(int8x8_t *)v164.f32, *(int8x8_t *)v134.f32, 4uLL)), v121, *(float32x2_t *)v164.f32);
    *(int8x8_t *)v134.f32 = vext_s8(v141, (int8x8_t)vmls_f32(vmul_f32(v146, *(float32x2_t *)v164.f32), v150, *(float32x2_t *)v134.f32), 4uLL);
    v134.i64[1] = v141.u32[0];
    v142 = vmlaq_f32(v140, v151, v134);
    v142.i64[1] = vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL).u32[0];
    v143 = vmulq_f32(v148, v164);
    v143.i64[0] = vpaddq_f32(v143, v143).u64[0];
    v144 = vmlaq_n_f32(v142, v148, vpadd_f32(*(float32x2_t *)v143.f32, *(float32x2_t *)v143.f32).f32[0]);
    v145 = vaddq_f32(v144, v144);
    *(_QWORD *)a7 = v145.i64[0];
    *(_DWORD *)(a7 + 8) = v145.i32[2];
    *(_QWORD *)a8 = v139.i64[0];
    *(_DWORD *)(a8 + 8) = v139.i32[2];
  }
  return result;
}

BOOL physx::Gu::SweepGeomGeom<physx::Gu::ConvexHullV,physx::Gu::ConvexHullV>(uint64_t *a1, uint64_t *a2, int8x16_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  _BOOL4 v18;
  float32x4_t v19;
  int32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v28;
  int v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x4_t v49;
  int32x2_t v50;
  int8x8_t v51;
  float32x4_t v52;
  int8x8_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  _BOOL4 v86;
  uint64_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int32x4_t v92;
  float32x4_t v93;
  int v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x4_t v114;
  int32x2_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float v155;
  float32x4_t v156;
  float32x2_t v157;
  float32x2_t v158;
  int8x8_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  int8x8_t v168;
  float32x4_t v169;
  float32x2_t v170;
  float32x2x2_t v171;
  float32x2_t v172;
  float32x2_t v173;
  float32x2_t v174;
  float32x2_t v175;
  float32x2_t v176;
  int32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x2_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float *v187;
  float *v188;
  float32x2x2_t v189;
  int32x4_t v190;
  _BOOL8 result;
  float32x4_t v192;
  float32x2_t v193;
  int8x8_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  int8x8_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x2_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float v210;
  float32x2_t v211;
  float32x4_t v212;
  float32x4_t v213;
  _QWORD v214[2];
  float32x4_t v215;
  int32x4_t *v216;
  _OWORD v217[2];
  _OWORD v218[2];
  uint64_t v219;
  float32x4_t v220;
  int8x16_t v221;
  float32x2_t v222;
  float32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  __int128 v230;
  char v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  float32x4_t v242;
  __int128 v243;
  char v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char v254;
  uint64_t v255;

  v255 = *MEMORY[0x24BDAC8D0];
  v11 = *a1;
  v12 = *a2;
  v244 = 0;
  v242 = 0u;
  v243 = 0u;
  v13 = *(_QWORD *)(v11 + 48);
  v14 = *(float32x4_t *)(v11 + 4);
  v15 = v14;
  v15.i32[3] = 0;
  v16 = *(float32x4_t *)(v11 + 16);
  LODWORD(v17) = HIDWORD(*(_QWORD *)(v11 + 4));
  v18 = COERCE_FLOAT(*(_QWORD *)(v11 + 12)) == 1.0;
  v251 = v13;
  v253 = *(_QWORD *)(v13 + 40) + 20 * *(unsigned __int8 *)(v13 + 39);
  v254 = *(_BYTE *)(v13 + 38);
  _ZF = v14.f32[0] == 1.0 && v17 == 1.0;
  v19.i64[1] = *(unsigned int *)(v13 + 68);
  v19.i64[0] = *(_QWORD *)(v13 + 60);
  v21 = (int32x4_t)vmulq_f32(v15, v19);
  v22 = (float32x2_t)vdup_laneq_s32(v21, 2);
  if (!_ZF)
    v18 = 0;
  v23 = vpmin_f32(v22, *(float32x2_t *)v21.i8);
  v23.f32[0] = vpmin_f32(v23, v23).f32[0];
  *(float32x2_t *)&v243 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v23.f32[0]);
  *((float *)&v243 + 2) = 0.025 * v23.f32[0];
  __asm { FMOV            V1.2S, #1.0 }
  if (v18)
  {
    v245 = xmmword_2260E5F10;
    v246 = xmmword_2260E5F20;
    v247 = xmmword_2260E5F40;
    v248 = xmmword_2260E5F10;
    v249 = xmmword_2260E5F20;
    v250 = xmmword_2260E5F40;
  }
  else
  {
    v28 = vrecpeq_f32(v15);
    v29 = 4;
    do
    {
      v28 = vmulq_f32(v28, vrecpsq_f32(v28, v15));
      --v29;
    }
    while (v29);
    *(int32x2_t *)v30.f32 = vdup_lane_s32(*(int32x2_t *)v14.f32, 0);
    v30.i64[1] = v30.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v30, v15)), *(int8x8_t *)&a9).u32[0] & 0xFFFFFF) != 0)
    {
      v37 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.f32, 1);
      v38 = (float32x2_t)vdup_laneq_s32((int32x4_t)v16, 2);
      v39 = (float32x2_t)vdup_laneq_s32((int32x4_t)v16, 3);
      v40 = vaddq_f32(v16, v16);
      v41 = vmul_lane_f32(v37, *(float32x2_t *)v40.f32, 1);
      v42 = vmul_laneq_f32(v38, v40, 2);
      v43 = vmul_n_f32(v37, v40.f32[0]);
      v44 = vmul_n_f32(v38, v40.f32[0]);
      v45 = vmul_n_f32(v39, v40.f32[0]);
      v46 = vmul_lane_f32(v38, *(float32x2_t *)v40.f32, 1);
      v47 = vmul_lane_f32(v39, *(float32x2_t *)v40.f32, 1);
      v48 = vmul_laneq_f32(v39, v40, 2);
      *(float32x2_t *)v40.f32 = vsub_f32(_D1, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v40.f32), 0));
      *(int8x8_t *)v49.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D1, v41), v42), (int8x8_t)vadd_f32(v43, v48), 4uLL);
      v49.i64[1] = vsub_f32(v44, v47).u32[0];
      v50 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v43, v48), (int8x8_t)vsub_f32(*(float32x2_t *)v40.f32, v42), 4uLL);
      v51 = (int8x8_t)vadd_f32(v44, v47);
      *(int8x8_t *)v52.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v49.f32, 0), (int8x8_t)v50, 4uLL);
      v53 = (int8x8_t)vdup_lane_s32(v50, 1);
      *(int32x2_t *)v54.f32 = v50;
      v54.i64[1] = vadd_f32(v46, v45).u32[0];
      *(int8x8_t *)v55.f32 = vext_s8(v51, (int8x8_t)vsub_f32(v46, v45), 4uLL);
      *(int8x8_t *)v56.f32 = vext_s8(*(int8x8_t *)v49.f32, v53, 4uLL);
      v55.i64[1] = vsub_f32(*(float32x2_t *)v40.f32, v41).u32[0];
      v52.i64[1] = vdup_lane_s32(*(int32x2_t *)v55.f32, 0).u32[0];
      v56.i64[1] = vdup_lane_s32(*(int32x2_t *)v55.f32, 1).u32[0];
      *(int8x8_t *)v57.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v49.u32[2], 0), *(int8x8_t *)&v54.u32[2], 4uLL);
      v57.i64[1] = vdup_lane_s32(*(int32x2_t *)&v55.u32[2], 0).u32[0];
      v58 = vmulq_n_f32(v52, v14.f32[0]);
      v58.i32[3] = 0;
      v59 = vmulq_lane_f32(v56, *(float32x2_t *)v14.f32, 1);
      v59.i32[3] = 0;
      v60 = vmulq_laneq_f32(v57, v14, 2);
      v60.i32[3] = 0;
      v61 = vmulq_n_f32(v58, v49.f32[0]);
      v61.i32[3] = 0;
      v62 = vmulq_lane_f32(v59, *(float32x2_t *)v49.f32, 1);
      v62.i32[3] = 0;
      v63 = vmulq_laneq_f32(v60, v49, 2);
      v63.i32[3] = 0;
      v31 = vaddq_f32(v63, vaddq_f32(v61, v62));
      v64 = vmulq_n_f32(v58, v54.f32[0]);
      v64.i32[3] = 0;
      v65 = vmulq_lane_f32(v59, *(float32x2_t *)v54.f32, 1);
      v65.i32[3] = 0;
      v66 = vmulq_laneq_f32(v60, v54, 2);
      v66.i32[3] = 0;
      v67 = vaddq_f32(v64, v65);
      v68 = vmulq_n_f32(v58, v55.f32[0]);
      v68.i32[3] = 0;
      v69 = vmulq_lane_f32(v59, *(float32x2_t *)v55.f32, 1);
      v69.i32[3] = 0;
      v70 = vmulq_laneq_f32(v60, v55, 2);
      v70.i32[3] = 0;
      v32 = vaddq_f32(v66, v67);
      v33 = vaddq_f32(v70, vaddq_f32(v68, v69));
      v245 = (__int128)v31;
      v246 = (__int128)v32;
      v247 = (__int128)v33;
      v71 = vmulq_n_f32(v52, v28.f32[0]);
      v71.i32[3] = 0;
      v72 = vmulq_lane_f32(v56, *(float32x2_t *)v28.f32, 1);
      v72.i32[3] = 0;
      v73 = vmulq_laneq_f32(v57, v28, 2);
      v73.i32[3] = 0;
      v74 = vmulq_n_f32(v71, v49.f32[0]);
      v74.i32[3] = 0;
      v75 = vmulq_lane_f32(v72, *(float32x2_t *)v49.f32, 1);
      v75.i32[3] = 0;
      v76 = vmulq_laneq_f32(v73, v49, 2);
      v76.i32[3] = 0;
      v34 = vaddq_f32(v76, vaddq_f32(v74, v75));
      v77 = vmulq_n_f32(v71, v54.f32[0]);
      v77.i32[3] = 0;
      v78 = vmulq_lane_f32(v72, *(float32x2_t *)v54.f32, 1);
      v78.i32[3] = 0;
      v79 = vmulq_laneq_f32(v73, v54, 2);
      v79.i32[3] = 0;
      v80 = vmulq_n_f32(v71, v55.f32[0]);
      v80.i32[3] = 0;
      v81 = vmulq_lane_f32(v72, *(float32x2_t *)v55.f32, 1);
      v81.i32[3] = 0;
      v35 = vaddq_f32(v79, vaddq_f32(v77, v78));
      v82 = vmulq_laneq_f32(v73, v55, 2);
      v82.i32[3] = 0;
      v36 = vaddq_f32(v82, vaddq_f32(v80, v81));
    }
    else
    {
      v28.i32[3] = 0;
      v31 = vmulq_f32(v15, (float32x4_t)xmmword_2260E5F10);
      v32 = vmulq_f32(v15, (float32x4_t)xmmword_2260E5F20);
      v33 = vmulq_f32(v15, (float32x4_t)xmmword_2260E5F40);
      v245 = (__int128)v31;
      v246 = (__int128)v32;
      v247 = (__int128)v33;
      v34 = vmulq_f32(v28, (float32x4_t)xmmword_2260E5F10);
      v35 = vmulq_f32(v28, (float32x4_t)xmmword_2260E5F20);
      v36 = vmulq_f32(v28, (float32x4_t)xmmword_2260E5F40);
    }
    v249 = (__int128)v35;
    v250 = (__int128)v36;
    v83 = vmulq_f32(v31, (float32x4_t)0);
    v83.i32[3] = 0;
    v84 = vmulq_f32(v32, (float32x4_t)0);
    v84.i32[3] = 0;
    v85 = vmulq_f32(v33, (float32x4_t)0);
    v85.i32[3] = 0;
    v248 = (__int128)v34;
    v242 = vaddq_f32(v85, vaddq_f32(v84, v83));
  }
  v86 = 0;
  v252 = *(_QWORD *)(v13 + 48);
  v231 = 0;
  v229 = 0u;
  v230 = 0u;
  v87 = *(_QWORD *)(v12 + 48);
  v88 = *(float32x4_t *)(v12 + 4);
  v89 = v88;
  v89.i32[3] = 0;
  if (v88.f32[0] == 1.0 && v88.f32[1] == 1.0)
    v86 = v88.f32[2] == 1.0;
  v90 = *(float32x4_t *)(v12 + 16);
  v238 = *(_QWORD *)(v12 + 48);
  v240 = *(_QWORD *)(v87 + 40) + 20 * *(unsigned __int8 *)(v87 + 39);
  v241 = *(_BYTE *)(v87 + 38);
  v91.i64[0] = *(_QWORD *)(v87 + 60);
  v91.i64[1] = *(unsigned int *)(v87 + 68);
  v92 = (int32x4_t)vmulq_f32(v89, v91);
  *(float32x2_t *)v92.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v92, 2), *(float32x2_t *)v92.i8);
  *(float *)v92.i32 = vpmin_f32(*(float32x2_t *)v92.i8, *(float32x2_t *)v92.i8).f32[0];
  *(float32x2_t *)&v230 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v92.i32);
  *((float *)&v230 + 2) = 0.025 * *(float *)v92.i32;
  if (v86)
  {
    v232 = xmmword_2260E5F10;
    v233 = xmmword_2260E5F20;
    v234 = xmmword_2260E5F40;
    v235 = xmmword_2260E5F10;
    v236 = xmmword_2260E5F20;
    v237 = xmmword_2260E5F40;
  }
  else
  {
    v93 = vrecpeq_f32(v89);
    v94 = 4;
    do
    {
      v93 = vmulq_f32(v93, vrecpsq_f32(v93, v89));
      --v94;
    }
    while (v94);
    *(int32x2_t *)v95.f32 = vdup_lane_s32(*(int32x2_t *)v88.f32, 0);
    v95.i64[1] = v95.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v95, v89)), *(int8x8_t *)&a9).u32[0] & 0xFFFFFF) != 0)
    {
      v102 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v90.f32, 1);
      v103 = (float32x2_t)vdup_laneq_s32((int32x4_t)v90, 2);
      v104 = (float32x2_t)vdup_laneq_s32((int32x4_t)v90, 3);
      v105 = vaddq_f32(v90, v90);
      v106 = vmul_lane_f32(v102, *(float32x2_t *)v105.f32, 1);
      v107 = vmul_laneq_f32(v103, v105, 2);
      v108 = vmul_n_f32(v102, v105.f32[0]);
      v109 = vmul_n_f32(v103, v105.f32[0]);
      v110 = vmul_n_f32(v104, v105.f32[0]);
      v111 = vmul_lane_f32(v103, *(float32x2_t *)v105.f32, 1);
      v112 = vmul_lane_f32(v104, *(float32x2_t *)v105.f32, 1);
      v113 = vmul_laneq_f32(v104, v105, 2);
      *(float32x2_t *)v105.f32 = vsub_f32(_D1, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v105.f32), 0));
      *(int8x8_t *)v114.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D1, v106), v107), (int8x8_t)vadd_f32(v108, v113), 4uLL);
      v114.i64[1] = vsub_f32(v109, v112).u32[0];
      v115 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v108, v113), (int8x8_t)vsub_f32(*(float32x2_t *)v105.f32, v107), 4uLL);
      *(int8x8_t *)v116.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v114.f32, 0), (int8x8_t)v115, 4uLL);
      *(int32x2_t *)v117.f32 = v115;
      v117.i64[1] = vadd_f32(v111, v110).u32[0];
      *(int8x8_t *)v118.f32 = vext_s8((int8x8_t)vadd_f32(v109, v112), (int8x8_t)vsub_f32(v111, v110), 4uLL);
      *(int8x8_t *)v119.f32 = vext_s8(*(int8x8_t *)v114.f32, (int8x8_t)vdup_lane_s32(v115, 1), 4uLL);
      v118.i64[1] = vsub_f32(*(float32x2_t *)v105.f32, v106).u32[0];
      v116.i64[1] = vdup_lane_s32(*(int32x2_t *)v118.f32, 0).u32[0];
      v119.i64[1] = vdup_lane_s32(*(int32x2_t *)v118.f32, 1).u32[0];
      *(int8x8_t *)v120.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v114.u32[2], 0), (int8x8_t)v117.u32[2], 4uLL);
      v120.i64[1] = vdup_lane_s32(*(int32x2_t *)&v118.u32[2], 0).u32[0];
      v121 = vmulq_n_f32(v116, v88.f32[0]);
      v121.i32[3] = 0;
      v122 = vmulq_lane_f32(v119, *(float32x2_t *)v88.f32, 1);
      v122.i32[3] = 0;
      v123 = vmulq_laneq_f32(v120, v88, 2);
      v123.i32[3] = 0;
      v124 = vmulq_n_f32(v121, v114.f32[0]);
      v124.i32[3] = 0;
      v125 = vmulq_lane_f32(v122, *(float32x2_t *)v114.f32, 1);
      v125.i32[3] = 0;
      v126 = vmulq_laneq_f32(v123, v114, 2);
      v126.i32[3] = 0;
      v96 = vaddq_f32(v126, vaddq_f32(v124, v125));
      v127 = vmulq_n_f32(v121, v117.f32[0]);
      v127.i32[3] = 0;
      v128 = vmulq_lane_f32(v122, *(float32x2_t *)v117.f32, 1);
      v128.i32[3] = 0;
      v129 = vmulq_laneq_f32(v123, v117, 2);
      v129.i32[3] = 0;
      v130 = vaddq_f32(v127, v128);
      v131 = vmulq_n_f32(v121, v118.f32[0]);
      v131.i32[3] = 0;
      v132 = vmulq_lane_f32(v122, *(float32x2_t *)v118.f32, 1);
      v132.i32[3] = 0;
      v133 = vmulq_laneq_f32(v123, v118, 2);
      v133.i32[3] = 0;
      v97 = vaddq_f32(v129, v130);
      v98 = vaddq_f32(v133, vaddq_f32(v131, v132));
      v232 = (__int128)v96;
      v233 = (__int128)v97;
      v234 = (__int128)v98;
      v134 = vmulq_n_f32(v116, v93.f32[0]);
      v134.i32[3] = 0;
      v135 = vmulq_lane_f32(v119, *(float32x2_t *)v93.f32, 1);
      v135.i32[3] = 0;
      v136 = vmulq_laneq_f32(v120, v93, 2);
      v136.i32[3] = 0;
      v137 = vmulq_n_f32(v134, v114.f32[0]);
      v137.i32[3] = 0;
      v138 = vmulq_lane_f32(v135, *(float32x2_t *)v114.f32, 1);
      v138.i32[3] = 0;
      v139 = vmulq_laneq_f32(v136, v114, 2);
      v139.i32[3] = 0;
      v99 = vaddq_f32(v139, vaddq_f32(v137, v138));
      v140 = vmulq_n_f32(v134, v117.f32[0]);
      v140.i32[3] = 0;
      v141 = vmulq_lane_f32(v135, *(float32x2_t *)v117.f32, 1);
      v141.i32[3] = 0;
      v142 = vmulq_laneq_f32(v136, v117, 2);
      v142.i32[3] = 0;
      v143 = vmulq_n_f32(v134, v118.f32[0]);
      v143.i32[3] = 0;
      v144 = vmulq_lane_f32(v135, *(float32x2_t *)v118.f32, 1);
      v144.i32[3] = 0;
      v100 = vaddq_f32(v142, vaddq_f32(v140, v141));
      v145 = vmulq_laneq_f32(v136, v118, 2);
      v145.i32[3] = 0;
      v101 = vaddq_f32(v145, vaddq_f32(v143, v144));
    }
    else
    {
      v93.i32[3] = 0;
      v96 = vmulq_f32(v89, (float32x4_t)xmmword_2260E5F10);
      v97 = vmulq_f32(v89, (float32x4_t)xmmword_2260E5F20);
      v98 = vmulq_f32(v89, (float32x4_t)xmmword_2260E5F40);
      v232 = (__int128)v96;
      v233 = (__int128)v97;
      v234 = (__int128)v98;
      v99 = vmulq_f32(v93, (float32x4_t)xmmword_2260E5F10);
      v100 = vmulq_f32(v93, (float32x4_t)xmmword_2260E5F20);
      v101 = vmulq_f32(v93, (float32x4_t)xmmword_2260E5F40);
    }
    v236 = (__int128)v100;
    v237 = (__int128)v101;
    v146 = vmulq_f32(v96, (float32x4_t)0);
    v146.i32[3] = 0;
    v147 = vmulq_f32(v97, (float32x4_t)0);
    v147.i32[3] = 0;
    v148 = vmulq_f32(v98, (float32x4_t)0);
    v148.i32[3] = 0;
    v235 = (__int128)v99;
    v229 = vaddq_f32(v148, vaddq_f32(v147, v146));
  }
  v239 = *(_QWORD *)(v87 + 48);
  *(float *)&a9 = *(float *)&a9 + 0.0;
  v228 = 0u;
  v149.i64[0] = *(_QWORD *)(a5 + 16);
  v149.i64[1] = *(unsigned int *)(a5 + 24);
  v150 = *a4;
  v151.i64[0] = *(_QWORD *)(a6 + 16);
  v151.i64[1] = *(unsigned int *)(a6 + 24);
  v152 = vnegq_f32(*a4);
  v153 = v152;
  v153.i32[3] = 0;
  v154 = vsubq_f32(v149, v151);
  v212 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v155) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v212.f32, *(float32x2_t *)v212.f32).u32[0];
  v156 = vmulq_n_f32(v154, v155);
  v156.i32[3] = 0;
  v157 = (float32x2_t)vextq_s8((int8x16_t)v153, (int8x16_t)v153, 8uLL).u64[0];
  v158 = (float32x2_t)vext_s8(*(int8x8_t *)v152.f32, (int8x8_t)v157, 4uLL);
  v159 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v152.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v154, (int8x16_t)v154, 4uLL)), v158, *(float32x2_t *)v154.f32);
  *(int8x8_t *)v160.f32 = vext_s8(v159, (int8x8_t)vmls_f32(vmul_f32(v157, *(float32x2_t *)v154.f32), *(float32x2_t *)v152.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL)), 4uLL);
  v160.i64[1] = v159.u32[0];
  v161 = vmlaq_laneq_f32(v156, v160, *a4, 3);
  v161.i64[1] = vextq_s8((int8x16_t)v161, (int8x16_t)v161, 8uLL).u32[0];
  v162 = vmulq_f32(v153, v154);
  v162.i64[0] = vpaddq_f32(v162, v162).u64[0];
  v163 = vmlaq_n_f32(v161, v153, vpadd_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v162.f32).f32[0]);
  v164 = vaddq_f32(v163, v163);
  v164.i32[3] = 0;
  v165 = *(float32x4_t *)a3;
  v165.i32[3] = 0;
  v166 = vmulq_f32(v165, v153);
  v166.i64[0] = vpaddq_f32(v166, v166).u64[0];
  *(float32x2_t *)v160.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*a3, *a3, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v150, (int8x16_t)v150, 8uLL)), vpadd_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v166.f32));
  v167 = vmulq_laneq_f32(v165, *a4, 3);
  v165.i64[0] = vextq_s8((int8x16_t)v165, (int8x16_t)v165, 8uLL).u64[0];
  v168 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)a3->i8, *(int8x8_t *)v165.f32, 4uLL), *(float32x2_t *)v152.f32), v158, *(float32x2_t *)a3->i8);
  *(int8x8_t *)v152.f32 = vext_s8(v168, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a3->i8, v157), *(float32x2_t *)v152.f32, *(float32x2_t *)v165.f32), 4uLL);
  *(int8x8_t *)&v152.u32[2] = v168;
  v169 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v153, *(float32x4_t *)a3, 3), v167), v152);
  v170 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v169.f32, 1);
  *(int32x2_t *)v153.f32 = vdup_laneq_s32((int32x4_t)v169, 2);
  v171 = (float32x2x2_t)vaddq_f32(v169, v169);
  *(float32x2_t *)v169.f32 = vmul_f32(*(float32x2_t *)v169.f32, v171.val[0]);
  v172 = vmul_lane_f32(v170, v171.val[0], 1);
  v173 = vmul_laneq_f32(*(float32x2_t *)v153.f32, (float32x4_t)v171, 2);
  v174 = vmul_n_f32(v170, v171.val[0].f32[0]);
  v175 = vmul_n_f32(*(float32x2_t *)v153.f32, v171.val[0].f32[0]);
  *(float32x2_t *)v153.f32 = vmul_lane_f32(*(float32x2_t *)v153.f32, v171.val[0], 1);
  v176 = vmul_lane_f32((float32x2_t)vdup_lane_s32((int32x2_t)v171.val[0], 0), *(float32x2_t *)v160.f32, 1);
  *(float32x2_t *)v167.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32((int32x2_t)v171.val[0], 1), *(float32x2_t *)v160.f32, 1);
  v171.val[0] = vmul_lane_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v171, 2), *(float32x2_t *)v160.f32, 1);
  *(float32x2_t *)v169.f32 = vsub_f32(_D1, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v169.f32, 0));
  *(int8x8_t *)v177.i8 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D1, v172), v173), (int8x8_t)vadd_f32(v174, v171.val[0]), 4uLL);
  v177.i64[1] = vsub_f32(v175, *(float32x2_t *)v167.f32).u32[0];
  *(int8x8_t *)v178.f32 = vext_s8((int8x8_t)vsub_f32(v174, v171.val[0]), (int8x8_t)vsub_f32(*(float32x2_t *)v169.f32, v173), 4uLL);
  v178.i64[1] = vadd_f32(*(float32x2_t *)v153.f32, v176).u32[0];
  v224 = v177;
  v225 = (int32x4_t)v178;
  *(int8x8_t *)v177.i8 = vext_s8((int8x8_t)vadd_f32(v175, *(float32x2_t *)v167.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v153.f32, v176), 4uLL);
  v177.i64[1] = vsub_f32(*(float32x2_t *)v169.f32, v172).u32[0];
  v169.i64[0] = a3[1].i64[0];
  v169.i64[1] = a3[1].u32[2];
  v178.i64[0] = a4[1].i64[0];
  v178.i64[1] = a4[1].u32[2];
  v213 = v151;
  v208 = vsubq_f32(v169, v149);
  v179 = vsubq_f32(vsubq_f32(v178, v151), v208);
  v180 = v150;
  v180.i32[3] = 0;
  v210 = v155;
  v211 = *(float32x2_t *)v150.f32;
  v181 = vmulq_n_f32(v179, v155);
  v181.i32[3] = 0;
  v171.val[0] = (float32x2_t)vextq_s8((int8x16_t)v180, (int8x16_t)v180, 8uLL).u64[0];
  v182 = (float32x2_t)vext_s8(*(int8x8_t *)v150.f32, (int8x8_t)v171.val[0], 4uLL);
  v207 = v171.val[0];
  *(float32x2_t *)v153.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v150.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v179, (int8x16_t)v179, 4uLL)), v182, *(float32x2_t *)v179.f32);
  *(int8x8_t *)v178.f32 = vext_s8(*(int8x8_t *)v153.f32, (int8x8_t)vmls_f32(vmul_f32(v171.val[0], *(float32x2_t *)v179.f32), *(float32x2_t *)v150.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL)), 4uLL);
  v178.i64[1] = v153.u32[0];
  v183 = vmlsq_laneq_f32(v181, v178, v150, 3);
  v183.i64[1] = vextq_s8((int8x16_t)v183, (int8x16_t)v183, 8uLL).u32[0];
  v184 = vmulq_f32(v180, v179);
  v184.i64[0] = vpaddq_f32(v184, v184).u64[0];
  v209 = v180;
  v185 = vmlaq_n_f32(v183, v180, vpadd_f32(*(float32x2_t *)v184.f32, *(float32x2_t *)v184.f32).f32[0]);
  v186 = vaddq_f32(v185, v185);
  v186.i32[3] = 0;
  v226 = v177;
  v227 = v164;
  v223 = v186;
  v222 = 0;
  v220 = 0u;
  v221 = 0u;
  v219 = 0;
  v215.i64[0] = (uint64_t)off_24ED91490;
  v215.i64[1] = (uint64_t)&v242;
  v216 = &v224;
  v187 = (float *)v217;
  v217[0] = v224;
  v218[0] = v177;
  v188 = (float *)v218;
  v189 = (float32x2x2_t)vzip1q_s32(v224, v177);
  v171.val[0] = (float32x2_t)vzip2q_s32(v224, v177).u64[0];
  v190 = vzip1q_s32(v225, (int32x4_t)0);
  v180.i64[0] = vzip2q_s32(v225, (int32x4_t)0).u64[0];
  vst2_f32(v187, v189);
  v218[1] = v164;
  vst2_f32(v188, v171);
  v217[1] = vzip2q_s32((int32x4_t)v189, v190);
  v214[0] = off_24ED91168;
  v214[1] = &v229;
  result = physx::Gu::gjkRaycastPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v215, (uint64_t)v214, &v227, (uint64_t)&v219, &v228, &v223, &v222, &v220, *(int32x2_t *)&a9, &v221, 1);
  if (result)
  {
    v192 = vmulq_n_f32((float32x4_t)v221, v210);
    v192.i32[3] = 0;
    v193 = (float32x2_t)vextq_s8(v221, v221, 8uLL).u64[0];
    v194 = (int8x8_t)vmls_f32(vmul_f32(v211, (float32x2_t)vext_s8(*(int8x8_t *)v221.i8, (int8x8_t)v193, 4uLL)), v182, *(float32x2_t *)v221.i8);
    *(int8x8_t *)v195.f32 = vext_s8(v194, (int8x8_t)vmls_f32(vmul_f32(v207, *(float32x2_t *)v221.i8), v211, v193), 4uLL);
    v195.i64[1] = v194.u32[0];
    v196 = vmlaq_f32(v192, v212, v195);
    v196.i64[1] = vextq_s8((int8x16_t)v196, (int8x16_t)v196, 8uLL).u32[0];
    v197 = vmulq_f32(v209, (float32x4_t)v221);
    v197.i64[0] = vpaddq_f32(v197, v197).u64[0];
    v198 = vmlaq_n_f32(v196, v209, vpadd_f32(*(float32x2_t *)v197.f32, *(float32x2_t *)v197.f32).f32[0]);
    v198.i64[1] = vextq_s8((int8x16_t)v198, (int8x16_t)v198, 8uLL).u32[0];
    v197.i64[0] = 0x4000000040000000;
    v197.i64[1] = 0x4000000040000000;
    v199 = vmlaq_f32(v213, v197, v198);
    v199.i64[1] = vextq_s8((int8x16_t)v199, (int8x16_t)v199, 8uLL).u32[0];
    v200 = vmlaq_n_f32(v199, v208, vmax_f32(v222, 0).f32[0]);
    v201 = vmulq_n_f32(v220, v210);
    v201.i32[3] = 0;
    v195.i64[0] = vextq_s8((int8x16_t)v220, (int8x16_t)v220, 8uLL).u64[0];
    v202 = (int8x8_t)vmls_f32(vmul_f32(v211, (float32x2_t)vext_s8(*(int8x8_t *)v220.f32, *(int8x8_t *)v195.f32, 4uLL)), v182, *(float32x2_t *)v220.f32);
    *(int8x8_t *)v195.f32 = vext_s8(v202, (int8x8_t)vmls_f32(vmul_f32(v207, *(float32x2_t *)v220.f32), v211, *(float32x2_t *)v195.f32), 4uLL);
    v195.i64[1] = v202.u32[0];
    v203 = vmlaq_f32(v201, v212, v195);
    v203.i64[1] = vextq_s8((int8x16_t)v203, (int8x16_t)v203, 8uLL).u32[0];
    v204 = vmulq_f32(v209, v220);
    v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
    v205 = vmlaq_n_f32(v203, v209, vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32).f32[0]);
    v206 = vaddq_f32(v205, v205);
    *(_QWORD *)a7 = v206.i64[0];
    *(_DWORD *)(a7 + 8) = v206.i32[2];
    *(_QWORD *)a8 = v200.i64[0];
    *(_DWORD *)(a8 + 8) = v200.i32[2];
  }
  return result;
}

float physx::Gu::UnimplementedTriangleSweep()
{
  return 1.0e10;
}

float32_t physx::Gu::SweepGeomTriangles<physx::Gu::CapsuleV>(int32x2_t *a1, double a2, uint64_t a3, float32x4_t *a4, int8x8_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v13;
  float32x4_t v14;
  int32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;
  int8x8_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x2x2_t v34;
  float32x4_t v35;
  int8x8_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  int32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float *v56;
  float *v57;
  float32x2x2_t v58;
  int32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x2_t v63;
  float32x2_t v64;
  int8x16_t v65;
  float32x2_t v66;
  float32x2_t v67;
  int v68;
  float32x2_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x2_t v83;
  int32x4_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int32x4_t v88;
  unsigned __int32 v89;
  float32x4_t v90;
  float32x2_t v91;
  float32x2_t v92;
  int v93;
  float32x2_t v94;
  float32x2_t v95;
  int v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x2_t v110;
  int v111;
  float32x2_t v112;
  float32x4_t v113;
  float32x4_t v114;
  uint64_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x2_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x2_t v121;
  float32x2_t v122;
  int v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  int8x8_t v127;
  float32x2_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x2_t v131;
  float32x2_t v132;
  float32x2_t v133;
  int8x8_t v134;
  float32x4_t v135;
  float32x2_t v136;
  float32x2_t v137;
  int8x8_t v138;
  float32x4_t v139;
  int8x8_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x2_t v143;
  float32x4_t v144;
  float32x2_t v145;
  float32x4_t v146;
  float32x2_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x2_t v151;
  float32x4_t v152;
  float32x2_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x2_t v156;
  float32x4_t v157;
  float32x2_t v158;
  float32x4_t v159;
  float32x2_t v160;
  float32x4_t v161;
  float32x2_t v162;
  __int32 v163;
  uint64_t v164;
  uint64_t v165;
  float32x4_t v166;
  float32x2_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x2_t v170;
  float32x2_t v171;
  int v172;
  float32x2_t v173;
  int v174;
  float32x4_t v175;
  float32x2_t v176;
  float32x2_t v177;
  int v178;
  unsigned int v179;
  float32x2_t v180;
  float32x2_t v181;
  float32x2_t v182;
  int v183;
  int8x16_t v184;
  float32x2_t v185;
  float32x2_t v186;
  int v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x2_t v194;
  int8x8_t v195;
  uint64_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x2_t v199;
  float32x2_t v200;
  int v201;
  float32x2_t v202;
  float32x2_t v203;
  int v204;
  int8x16_t v205;
  int8x16_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x2_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x2_t v217;
  float32x2_t v218;
  int v219;
  float32x4_t v220;
  float32x4_t v221;
  int8x16_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  float32x2x2_t v226;
  float32x2x2_t v227;
  int32x4_t v228;
  unint64_t v229;
  float32x4_t *v230;
  float *v231;
  float32x4_t v233;
  float32x4_t v234;
  float32x2_t v235;
  float32x2_t v236;
  int v237;
  float32x2_t v238;
  float32x2_t v239;
  int v240;
  float32x4_t v241;
  int8x8_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  int32x4_t v255;
  float32x2_t v256;
  float32x2_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float v260;
  float32x2_t v261;
  float32x4_t v262;
  float32x4_t v263;
  int8x16_t v264;
  float32x4_t v265;
  float32x2_t v266;
  float32x4_t v267;
  float32x4_t v268;
  int8x16_t v269;
  int8x16_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  int32x4_t *v275;
  _OWORD v276[2];
  _OWORD v277[2];
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  unsigned int v283;
  float32x2_t v284;
  float32x2_t v285;
  _QWORD v286[2];
  float v287;
  __int32 v288;
  __int32 v289;
  int v290;
  char v291;
  float32x4_t v292;
  float32x4_t v293;
  int32x2_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  int32x4_t v298;
  _OWORD v299[2];
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  __int128 v303;
  float32x2_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  __int128 v308;
  uint64_t v309;

  v309 = *MEMORY[0x24BDAC8D0];
  v13 = 4;
  v290 = 4;
  v286[0] = 0;
  v286[1] = 0;
  v15 = a1[1];
  v14 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, *(float *)v15.i32);
  v14.i32[3] = 0;
  v15.i32[0] = a1->i32[1];
  v16 = vnegq_f32(v14);
  v16.i32[3] = 0;
  v292 = v14;
  v293 = v16;
  v294 = vdup_lane_s32(v15, 0);
  v287 = *(float *)v15.i32;
  v288 = v15.i32[0];
  v289 = v15.i32[0];
  v291 = 1;
  v17.i64[0] = *(_QWORD *)(a7 + 16);
  v17.i64[1] = *(unsigned int *)(a7 + 24);
  v18 = *a4;
  v19.i64[0] = *(_QWORD *)(a6 + 16);
  v19.i64[1] = *(unsigned int *)(a6 + 24);
  v20 = vnegq_f32(*a4);
  v21 = vsubq_f32(v17, v19);
  v22 = v20;
  v22.i32[3] = 0;
  v262 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v23) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v262.f32, *(float32x2_t *)v262.f32).u32[0];
  v24 = vmulq_n_f32(v21, v23);
  v24.i32[3] = 0;
  v25 = (float32x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
  v26 = (float32x2_t)vext_s8(*(int8x8_t *)v20.f32, (int8x8_t)v25, 4uLL);
  v27 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v20.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL)), v26, *(float32x2_t *)v21.f32);
  *(int8x8_t *)v28.f32 = vext_s8(v27, (int8x8_t)vmls_f32(vmul_f32(v25, *(float32x2_t *)v21.f32), *(float32x2_t *)v20.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL)), 4uLL);
  v28.i64[1] = v27.u32[0];
  v29 = vmlaq_laneq_f32(v24, v28, *a4, 3);
  v29.i64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u32[0];
  v30 = vmulq_f32(v22, v21);
  v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
  v31 = vmlaq_n_f32(v29, v22, vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32).f32[0]);
  v32 = vaddq_f32(v31, v31);
  v32.i32[3] = 0;
  v33 = *(float32x4_t *)a5->i8;
  v33.i32[3] = 0;
  v34 = (float32x2x2_t)vmulq_f32(v33, v22);
  v35 = vmulq_laneq_f32(v33, *a4, 3);
  v33.i64[0] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
  v36 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a5, *(int8x8_t *)v33.f32, 4uLL), *(float32x2_t *)v20.f32), v26, (float32x2_t)*a5);
  *(int8x8_t *)v16.f32 = vext_s8(v36, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a5, v25), *(float32x2_t *)v20.f32, *(float32x2_t *)v33.f32), 4uLL);
  *(int8x8_t *)&v16.u32[2] = v36;
  v37 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v22, *(float32x4_t *)a5->i8, 3), v35), v16);
  *(int32x2_t *)v20.f32 = vdup_lane_s32(*(int32x2_t *)v37.f32, 1);
  *(int32x2_t *)v22.f32 = vdup_laneq_s32((int32x4_t)v37, 2);
  v38 = (float32x2_t)vpaddq_f32((float32x4_t)v34, (float32x4_t)v34).u64[0];
  v39 = vaddq_f32(v37, v37);
  *(int32x2_t *)v35.f32 = vdup_laneq_s32((int32x4_t)v39, 2);
  *(int32x2_t *)v37.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v39.f32), 0);
  *(float32x2_t *)v31.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a5->i8, *(int8x16_t *)a5->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL)), vpadd_f32(v38, v38));
  v40 = vmul_lane_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v39.f32, 1);
  v41 = vmul_laneq_f32(*(float32x2_t *)v22.f32, v39, 2);
  *(float32x2_t *)v20.f32 = vmul_n_f32(*(float32x2_t *)v20.f32, v39.f32[0]);
  v42 = vmul_n_f32(*(float32x2_t *)v22.f32, v39.f32[0]);
  v34.val[0] = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 0), *(float32x2_t *)v31.f32, 1);
  *(float32x2_t *)v22.f32 = vmul_lane_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v39.f32, 1);
  *(float32x2_t *)v39.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 1), *(float32x2_t *)v31.f32, 1);
  *(float32x2_t *)v31.f32 = vmul_lane_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v31.f32, 1);
  __asm { FMOV            V8.2S, #1.0 }
  *(float32x2_t *)v37.f32 = vsub_f32(_D8, *(float32x2_t *)v37.f32);
  *(int8x8_t *)v48.i8 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v40), v41), (int8x8_t)vadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v31.f32), 4uLL);
  v48.i64[1] = vsub_f32(v42, *(float32x2_t *)v39.f32).u32[0];
  *(int8x8_t *)v20.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v31.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v37.f32, v41), 4uLL);
  v20.i64[1] = vadd_f32(*(float32x2_t *)v22.f32, v34.val[0]).u32[0];
  v278 = v48;
  v279 = (int32x4_t)v20;
  *(int8x8_t *)v20.f32 = vext_s8((int8x8_t)vadd_f32(v42, *(float32x2_t *)v39.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v22.f32, v34.val[0]), 4uLL);
  v20.i64[1] = vsub_f32(*(float32x2_t *)v37.f32, v40).u32[0];
  *(int8x8_t *)v37.f32 = a5[2];
  v37.i64[1] = a5[3].u32[0];
  v22.i64[0] = a4[1].i64[0];
  v22.i64[1] = a4[1].u32[2];
  v263 = v19;
  v258 = vsubq_f32(v37, v17);
  v49 = vsubq_f32(vsubq_f32(v22, v19), v258);
  v50 = v18;
  v50.i32[3] = 0;
  v260 = v23;
  v261 = *(float32x2_t *)v18.f32;
  v51 = vmulq_n_f32(v49, v23);
  v51.i32[3] = 0;
  v280 = (int32x4_t)v20;
  v281 = v32;
  v257 = (float32x2_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
  v256 = (float32x2_t)vext_s8(*(int8x8_t *)v18.f32, (int8x8_t)v257, 4uLL);
  *(float32x2_t *)v22.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v49, (int8x16_t)v49, 4uLL)), v256, *(float32x2_t *)v49.f32);
  *(int8x8_t *)v20.f32 = vext_s8(*(int8x8_t *)v22.f32, (int8x8_t)vmls_f32(vmul_f32(v257, *(float32x2_t *)v49.f32), *(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL)), 4uLL);
  v20.i64[1] = v22.u32[0];
  v52 = vmlsq_laneq_f32(v51, v20, v18, 3);
  v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
  v53 = vmulq_f32(v50, v49);
  v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
  v259 = v50;
  v54 = vmlaq_n_f32(v52, v50, vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32).f32[0]);
  v55 = vaddq_f32(v54, v54);
  v274.i64[0] = (uint64_t)off_24ED91658;
  v274.i64[1] = a11;
  v275 = &v278;
  v56 = (float *)v276;
  v276[0] = v48;
  v277[0] = v280;
  v57 = (float *)v277;
  v58 = (float32x2x2_t)vzip1q_s32(v48, v280);
  v34.val[0] = (float32x2_t)vzip2q_s32(v48, v280).u64[0];
  v59 = vzip1q_s32(v279, (int32x4_t)0);
  v48.i64[0] = vzip2q_s32(v279, (int32x4_t)0).u64[0];
  vst2_f32(v56, v58);
  v277[1] = v32;
  v276[1] = vzip2q_s32((int32x4_t)v58, v59);
  vst2_f32(v57, v34);
  v283 = 1;
  v60 = vmulq_f32(v32, v32);
  v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
  v61 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v32, (int8x16_t)xmmword_2260E5F10);
  v62 = vmulq_f32(v61, v61);
  v62.i64[0] = vpaddq_f32(v62, v62).u64[0];
  v63 = vpadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32);
  v64 = vrsqrte_f32(v63);
  do
  {
    v64 = vmul_f32(v64, vrsqrts_f32(vmul_f32(v64, v64), v63));
    --v13;
  }
  while (v13);
  v55.i32[3] = 0;
  v265 = v55;
  v65 = (int8x16_t)vmlaq_f32((float32x4_t)0, (float32x4_t)0, v55);
  v66 = vmul_f32(v63, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v63), 0), (int8x8_t)_D8, (int8x8_t)v64));
  v67 = vrecpe_f32(v66);
  v68 = 4;
  do
  {
    v67 = vmul_f32(v67, vrecps_f32(v66, v67));
    --v68;
  }
  while (v68);
  *(float *)&a2 = *(float *)v15.i32 + *(float *)&a2;
  v69 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0);
  v65.i64[1] = vextq_s8(v65, v65, 8uLL).u32[0];
  v268 = (float32x4_t)v65;
  v70 = vmulq_n_f32(v61, v67.f32[0]);
  v70.i32[3] = 0;
  v271 = v70;
  v71 = vnegq_f32(v70);
  v71.i32[3] = 0;
  v295 = v71;
  *(double *)v72.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(&v274, (float32x2_t *)&v295);
  v73 = v72;
  v74 = vmulq_f32(v271, v292);
  v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
  v75 = vmulq_f32(v271, v293);
  v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
  v76 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32), vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32)), 0), (int8x16_t)v292, (int8x16_t)v293);
  v77 = vsubq_f32(v72, v76);
  v295 = v77;
  v296 = 0u;
  v297 = 0u;
  v298 = 0u;
  v300 = v73;
  v301 = 0u;
  v78 = vnegq_f32(v77);
  v78.i32[3] = 0;
  v302 = 0u;
  v303 = 0u;
  v79 = vadd_f32(v69, 0);
  v80 = vmul_f32(v79, v79);
  v81 = vmulq_f32(v78, v78);
  v82 = vpaddq_f32(v81, v81);
  v83 = vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32);
  *(int32x2_t *)v82.f32 = vcgtz_f32(v83);
  v84 = vdupq_lane_s32(*(int32x2_t *)v82.f32, 0);
  v305 = v76;
  v306 = 0u;
  v307 = 0u;
  v308 = 0u;
  v82.i32[0] = -1;
  v255 = (int32x4_t)v82;
  v85 = (int8x16_t)v77;
  v86.i64[0] = -1;
  v86.i64[1] = -1;
  v264 = (int8x16_t)v78;
  v266 = 0;
  while (1)
  {
    v87 = (int8x16_t)v77;
    v88.i64[0] = -1;
    v88.i64[1] = -1;
    *(int16x4_t *)v88.i8 = vmovn_s32(vceqq_s32(v84, v88));
    v89 = vuzp1_s8(*(int8x8_t *)v88.i8, *(int8x8_t *)v88.i8).u32[0];
    if (v89 != -1)
      break;
    v90 = vmulq_f32(v78, v78);
    v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
    v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
    v92 = vrsqrte_f32(v91);
    v93 = 4;
    do
    {
      v92 = vmul_f32(v92, vrsqrts_f32(vmul_f32(v92, v92), v91));
      --v93;
    }
    while (v93);
    v269 = v87;
    v94 = vmul_f32(v91, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v91), 0), (int8x8_t)_D8, (int8x8_t)v92));
    v95 = vrecpe_f32(v94);
    v96 = 4;
    do
    {
      v95 = vmul_f32(v95, vrecps_f32(v94, v95));
      --v96;
    }
    while (v96);
    v267 = v78;
    v97 = vmulq_n_f32(v78, v95.f32[0]);
    v97.i32[3] = 0;
    v282 = v97;
    v98 = vnegq_f32(v97);
    v98.i32[3] = 0;
    v272 = v98;
    *(double *)v99.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(&v274, (float32x2_t *)&v282);
    v100 = v99;
    v101 = vmulq_f32(v272, v292);
    v101.i64[0] = vpaddq_f32(v101, v101).u64[0];
    v102 = vmulq_f32(v272, v293);
    v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
    v103 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32), vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32)), 0), (int8x16_t)v292, (int8x16_t)v293);
    v104 = vaddq_f32(v268, v103);
    v77 = vsubq_f32(v99, v104);
    v105 = vnegq_f32(v77);
    v105.i32[3] = 0;
    v106 = vmulq_f32(v282, v105);
    v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
    v107 = vsub_f32(vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32), v79);
    if (v107.f32[0] > 0.0)
    {
      v108 = vmulq_f32(v265, v282);
      v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
      v109 = vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32);
      if (v109.f32[0] >= 0.0)
        goto LABEL_70;
      v110 = vrecpe_f32(v109);
      v111 = 4;
      do
      {
        v110 = vmul_f32(v110, vrecps_f32(v109, v110));
        --v111;
      }
      while (v111);
      v112 = vsub_f32(v266, vmul_f32(v107, v110));
      if ((vcgt_f32(v112, v266).u8[0] & 1) != 0)
      {
        if (v112.f32[0] > 1.0)
        {
LABEL_70:
          v209 = 0;
          v207 = 0uLL;
          v211 = 0uLL;
          goto LABEL_76;
        }
        v113 = vmlaq_n_f32((float32x4_t)0, v265, v112.f32[0]);
        v113.i64[1] = vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL).u32[0];
        v114 = vsubq_f32(v113, v268);
        v305 = vaddq_f32(v114, v305);
        v306 = vaddq_f32(v114, v306);
        v307 = vaddq_f32(v114, v307);
        v295 = vsubq_f32(v300, v305);
        v296 = vsubq_f32(v301, v306);
        v297 = vsubq_f32(v302, v307);
        v104 = vaddq_f32(v103, v113);
        v77 = vsubq_f32(v100, v104);
        v83 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        v264 = (int8x16_t)v267;
        v268 = v113;
      }
      v266 = v112;
    }
    v115 = v283;
    *(&v300 + v283) = v100;
    *(&v305 + v115) = v104;
    v283 = v115 + 1;
    *(&v295 + v115) = v77;
    if ((_DWORD)v115 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v295, &v300, &v305, (int *)&v283);
LABEL_27:
      v85 = v269;
      goto LABEL_61;
    }
    if ((_DWORD)v115 != 2)
    {
      v85 = v269;
      if ((_DWORD)v115 != 1)
        goto LABEL_61;
      v77 = v295;
      v116 = vsubq_f32(v296, v295);
      v117 = vmulq_f32(v116, v116);
      v117.i64[0] = vpaddq_f32(v117, v117).u64[0];
      v118 = vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v118), 0), *(int8x8_t *)v295.f32).u32[0] != -1)
      {
        v119 = vnegq_f32(v295);
        v119.i32[3] = 0;
        v120 = vmulq_f32(v119, v116);
        v120.i64[0] = vpaddq_f32(v120, v120).u64[0];
        v121 = vpadd_f32(*(float32x2_t *)v120.f32, *(float32x2_t *)v120.f32);
        v122 = vrecpe_f32(v118);
        v123 = 4;
        do
        {
          v122 = vmul_f32(v122, vrecps_f32(v118, v122));
          --v123;
        }
        while (v123);
        v77 = vmlaq_n_f32(v295, v116, vmax_f32(vmin_f32(vmul_f32(v121, v122), _D8), 0).f32[0]);
LABEL_42:
        v77.i64[1] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u32[0];
        goto LABEL_61;
      }
LABEL_43:
      v283 = 1;
      goto LABEL_61;
    }
    v77 = v295;
    v124 = vsubq_f32(v296, v295);
    v125 = vsubq_f32(v297, v295);
    v127 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v124.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v125, (int8x16_t)v125, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v124, (int8x16_t)v124, 4uLL), *(float32x2_t *)v125.f32);
    *(int8x8_t *)v126.f32 = vext_s8(v127, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL), *(float32x2_t *)v125.f32), *(float32x2_t *)v124.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL)), 4uLL);
    v127.i32[1] = 0;
    v283 = 3;
    v128 = vpadd_f32(vmul_f32(*(float32x2_t *)v126.f32, *(float32x2_t *)v126.f32), vmul_f32((float32x2_t)v127.u32[0], (float32x2_t)v127.u32[0]));
    v129 = vpadd_f32(v128, v128);
    if (v129.f32[0] <= 0.00000011921)
    {
      v283 = 2;
      v166 = vmulq_f32(v124, v124);
      v166.i64[0] = vpaddq_f32(v166, v166).u64[0];
      v167 = vpadd_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v166.f32);
      v85 = v269;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v167), 0), *(int8x8_t *)v295.f32).u32[0] != -1)
      {
        v168 = vnegq_f32(v295);
        v168.i32[3] = 0;
        v169 = vmulq_f32(v168, v124);
        v169.i64[0] = vpaddq_f32(v169, v169).u64[0];
        v170 = vpadd_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v169.f32);
        v171 = vrecpe_f32(v167);
        v172 = 4;
        do
        {
          v171 = vmul_f32(v171, vrecps_f32(v167, v171));
          --v172;
        }
        while (v172);
        v77 = vmlaq_n_f32(v295, v124, vmax_f32(vmin_f32(vmul_f32(v170, v171), _D8), 0).f32[0]);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v129.f32[0] == 0.0)
    {
      v77 = 0uLL;
      goto LABEL_27;
    }
    *(int8x8_t *)&v126.u32[2] = v127;
    v130 = (float32x2_t)vextq_s8((int8x16_t)v296, (int8x16_t)v296, 8uLL).u64[0];
    v131 = (float32x2_t)vextq_s8((int8x16_t)v297, (int8x16_t)v297, 8uLL).u64[0];
    v132 = (float32x2_t)vextq_s8((int8x16_t)v297, (int8x16_t)v297, 4uLL).u64[0];
    v133 = (float32x2_t)vextq_s8((int8x16_t)v296, (int8x16_t)v296, 4uLL).u64[0];
    v134 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v296.f32, v132), v133, *(float32x2_t *)v297.f32);
    *(int8x8_t *)v135.f32 = vext_s8(v134, (int8x8_t)vmls_f32(vmul_f32(v130, *(float32x2_t *)v297.f32), *(float32x2_t *)v296.f32, v131), 4uLL);
    v135.i64[1] = v134.u32[0];
    v136 = (float32x2_t)vextq_s8((int8x16_t)v295, (int8x16_t)v295, 8uLL).u64[0];
    v137 = (float32x2_t)vextq_s8((int8x16_t)v295, (int8x16_t)v295, 4uLL).u64[0];
    v138 = (int8x8_t)vmls_f32(vmul_f32(v137, *(float32x2_t *)v297.f32), v132, *(float32x2_t *)v295.f32);
    *(int8x8_t *)v139.f32 = vext_s8(v138, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v295.f32, v131), *(float32x2_t *)v297.f32, v136), 4uLL);
    v139.i64[1] = v138.u32[0];
    v140 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v295.f32, v133), v137, *(float32x2_t *)v296.f32);
    *(int8x8_t *)v141.f32 = vext_s8(v140, (int8x8_t)vmls_f32(vmul_f32(v136, *(float32x2_t *)v296.f32), *(float32x2_t *)v295.f32, v130), 4uLL);
    v141.i64[1] = v140.u32[0];
    v142 = vmulq_f32(v135, v126);
    v142.i64[0] = vpaddq_f32(v142, v142).u64[0];
    v143 = vpadd_f32(*(float32x2_t *)v142.f32, *(float32x2_t *)v142.f32);
    v144 = vmulq_f32(v139, v126);
    v144.i64[0] = vpaddq_f32(v144, v144).u64[0];
    v145 = vpadd_f32(*(float32x2_t *)v144.f32, *(float32x2_t *)v144.f32);
    v146 = vmulq_f32(v141, v126);
    v146.i64[0] = vpaddq_f32(v146, v146).u64[0];
    v147 = vpadd_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v145), (int8x8_t)vcgez_f32(v143)), (int8x8_t)vcgez_f32(v147)), 0), *(int8x8_t *)v295.f32).u32[0] != -1)
    {
      v148 = vnegq_f32(v295);
      v148.i32[3] = 0;
      v149 = vnegq_f32(v296);
      v149.i32[3] = 0;
      v150 = vmulq_f32(v148, v124);
      v150.i64[0] = vpaddq_f32(v150, v150).u64[0];
      v151 = vpadd_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v150.f32);
      v152 = vmulq_f32(v124, v149);
      v152.i64[0] = vpaddq_f32(v152, v152).u64[0];
      v153 = vpadd_f32(*(float32x2_t *)v152.f32, *(float32x2_t *)v152.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v151), (int8x8_t)vclez_f32(v153)), (int8x8_t)vclez_f32(v147)), 0), *(int8x8_t *)v295.f32).u32[0] == -1)
      {
        v176 = vsub_f32(v151, v153);
        v177 = vrecpe_f32(v176);
        v178 = 4;
        do
        {
          v177 = vmul_f32(v177, vrecps_f32(v176, v177));
          --v178;
        }
        while (v178);
        v165 = 0;
        v77 = vmlaq_n_f32(v295, v124, vmul_f32(v151, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v176), (float32x2_t)0x3400000034000000), (int8x8_t)v177, 0)).f32[0]);
        v77.i64[1] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u32[0];
        v179 = 2;
        v164 = 1;
      }
      else
      {
        v154 = vnegq_f32(v297);
        v154.i32[3] = 0;
        v155 = vmulq_f32(v149, v125);
        v155.i64[0] = vpaddq_f32(v155, v155).u64[0];
        v156 = vpadd_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v155.f32);
        v157 = vmulq_f32(v124, v154);
        v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
        v158 = vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32);
        v159 = vmulq_f32(v125, v154);
        v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
        v160 = vpadd_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v156, v153), (int8x8_t)vcge_f32(v158, v160)), (int8x8_t)vclez_f32(v143)), 0), *(int8x8_t *)v295.f32).u32[0] != -1)
        {
          v161 = vmulq_f32(v148, v125);
          v161.i64[0] = vpaddq_f32(v161, v161).u64[0];
          v162 = vpadd_f32(*(float32x2_t *)v161.f32, *(float32x2_t *)v161.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v162), (int8x8_t)vclez_f32(v160)), (int8x8_t)vclez_f32(v145)), 0), *(int8x8_t *)v295.f32).u32[0] == -1)
          {
            v185 = vsub_f32(v162, v160);
            v186 = vrecpe_f32(v185);
            v187 = 4;
            v85 = v269;
            do
            {
              v186 = vmul_f32(v186, vrecps_f32(v185, v186));
              --v187;
            }
            while (v187);
            v165 = 0;
            v77 = vmlaq_n_f32(v295, v125, vmul_f32(v162, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v185), (float32x2_t)0x3400000034000000), (int8x8_t)v186, 0)).f32[0]);
            v77.i64[1] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u32[0];
            v164 = 2;
          }
          else
          {
            v85 = v269;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v162), (int8x8_t)vclez_f32(v151)), 0), *(int8x8_t *)v295.f32).u32[0] == -1)
            {
              v165 = 0;
              v164 = 1;
            }
            else
            {
              *(int16x4_t *)v77.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v153, v156), (int8x8_t)vcgez_f32(v153)), 0);
              *(int8x8_t *)v77.f32 = vuzp1_s8(*(int8x8_t *)v77.f32, *(int8x8_t *)v77.f32);
              v163 = v77.i32[0];
              v77 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v77, v255), 0), (int8x16_t)v296, (int8x16_t)v297);
              v164 = 1;
              if (v163 == -1)
                v165 = 1;
              else
                v165 = 2;
            }
          }
          v179 = v164;
          goto LABEL_60;
        }
        v180 = vsub_f32(v156, v153);
        v181 = vadd_f32(v180, vsub_f32(v158, v160));
        v182 = vrecpe_f32(v181);
        v183 = 4;
        do
        {
          v182 = vmul_f32(v182, vrecps_f32(v181, v182));
          --v183;
        }
        while (v183);
        v184 = (int8x16_t)vmlaq_n_f32(v296, vsubq_f32(v297, v296), vmul_f32(v180, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v181), (float32x2_t)0x3400000034000000), (int8x8_t)v182, 0)).f32[0]);
        v184.i64[1] = vextq_s8(v184, v184, 8uLL).u32[0];
        v179 = 2;
        v164 = 2;
        v165 = 1;
        v77 = (float32x4_t)v184;
      }
      v85 = v269;
LABEL_60:
      v188 = *(&v295 + v164);
      v189 = *(&v300 + v165);
      v190 = *(&v300 + v164);
      v191 = *(&v305 + v165);
      v192 = *(&v305 + v164);
      v295 = *(&v295 + v165);
      v296 = v188;
      v300 = v189;
      v301 = v190;
      v305 = v191;
      v306 = v192;
      v283 = v179;
      goto LABEL_61;
    }
    v173 = vrecpe_f32(v129);
    v174 = 4;
    v85 = v269;
    do
    {
      v173 = vmul_f32(v173, vrecps_f32(v129, v173));
      --v174;
    }
    while (v174);
    v175 = vmulq_f32(v295, v126);
    v175.i64[0] = vpaddq_f32(v175, v175).u64[0];
    v77 = vmulq_n_f32(v126, vmul_f32(v173, vpadd_f32(*(float32x2_t *)v175.f32, *(float32x2_t *)v175.f32)).f32[0]);
    v77.i32[3] = 0;
LABEL_61:
    v78 = vnegq_f32(v77);
    v78.i32[3] = 0;
    v193 = vmulq_f32(v77, v77);
    v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
    v194 = vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32);
    v195 = (int8x8_t)vcgt_f32(v83, v194);
    v86 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v195, (int8x8_t)0x100000001), 0);
    v84 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v194, v80), v195), 0);
    v83 = v194;
  }
  v196 = v274.i64[1];
  v197 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v83, 0), 0), v86), 0x1FuLL)), (int8x16_t)v78, v264);
  v198 = vmulq_f32(v197, v197);
  v198.i64[0] = vpaddq_f32(v198, v198).u64[0];
  v199 = vpadd_f32(*(float32x2_t *)v198.f32, *(float32x2_t *)v198.f32);
  v200 = vrsqrte_f32(v199);
  v201 = 4;
  do
  {
    v200 = vmul_f32(v200, vrsqrts_f32(vmul_f32(v200, v200), v199));
    --v201;
  }
  while (v201);
  v202 = vmul_f32(v199, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v199), 0), (int8x8_t)_D8, (int8x8_t)v200));
  v203 = vrecpe_f32(v202);
  v204 = 4;
  do
  {
    v203 = vmul_f32(v203, vrecps_f32(v202, v203));
    --v204;
  }
  while (v204);
  v205 = (int8x16_t)vdupq_n_s32(-*(char *)(v274.i64[1] + 32));
  v206 = (int8x16_t)vmulq_n_f32(v197, v203.f32[0]);
  v206.i32[3] = 0;
  v207 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v202), 0), v206));
  v207.i32[3] = 0;
  v208 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v86, 0x1FuLL)), v87, v85);
  v282 = v208;
  v209 = v266;
  if (v283 == 3)
  {
    v284 = 0;
    v285 = 0;
    v270 = v205;
    v273 = v207;
    physx::Gu::barycentricCoordinates(&v282, &v295, &v296, &v297, &v285, &v284);
    v205 = v270;
    v207 = v273;
    v209 = v266;
    v86.i32[1] = v300.i32[1];
    v212 = vmulq_n_f32(vsubq_f32(v301, v300), v285.f32[0]);
    v212.i32[3] = 0;
    v213 = vmulq_n_f32(vsubq_f32(v302, v300), v284.f32[0]);
    v213.i32[3] = 0;
    v210 = vaddq_f32(v300, vaddq_f32(v212, v213));
  }
  else if (v283 == 2)
  {
    v214 = vsubq_f32(v295, v208);
    v215 = vsubq_f32(vsubq_f32(v296, v208), v214);
    v216 = vmulq_f32(v215, v215);
    v216.i64[0] = vpaddq_f32(v216, v216).u64[0];
    v217 = vpadd_f32(*(float32x2_t *)v216.f32, *(float32x2_t *)v216.f32);
    v218 = vrecpe_f32(v217);
    v219 = 4;
    do
    {
      v218 = vmul_f32(v218, vrecps_f32(v217, v218));
      --v219;
    }
    while (v219);
    v220 = vnegq_f32(v214);
    v220.i32[3] = 0;
    v221 = vmulq_f32(v220, v215);
    v221.i64[0] = vpaddq_f32(v221, v221).u64[0];
    v210 = vmlaq_n_f32(v300, vsubq_f32(v301, v300), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v217), (int8x8_t)v218, 0), vpadd_f32(*(float32x2_t *)v221.f32, *(float32x2_t *)v221.f32)).f32[0]);
    v86.i32[1] = 0;
    v210.i64[1] = vextq_s8((int8x16_t)v210, (int8x16_t)v210, 8uLL).u32[0];
  }
  else
  {
    v210 = 0uLL;
    if (v283 == 1)
      v210 = v300;
  }
  v86.i32[0] = *(_DWORD *)(v196 + 16);
  v222 = (int8x16_t)vmlsq_lane_f32(v210, v207, *(float32x2_t *)v86.i8, 0);
  v222.i64[1] = vextq_s8(v222, v222, 8uLL).u32[0];
  v211 = (float32x4_t)vbslq_s8(v205, v222, (int8x16_t)v210);
LABEL_76:
  if (v89 == -1)
  {
    v209.i32[0] = 2139095039;
  }
  else
  {
    if (v209.f32[0] == 0.0)
    {
      v211.i32[0] = *(_DWORD *)(v274.i64[1] + 16);
      v304 = 0;
      v300 = 0u;
      v301 = 0u;
      v302 = 0u;
      v295.i64[1] = v274.i64[1];
      v295.i64[0] = (uint64_t)off_24ED91658;
      v296.i64[0] = (uint64_t)v275;
      v224 = v275[2];
      v223 = v275[3];
      v225 = *v275;
      v298 = v275[1];
      v299[0] = v224;
      v297 = (float32x4_t)v225;
      v226 = (float32x2x2_t)vzip1q_s32(v225, v224);
      v227 = (float32x2x2_t)vzip2q_s32(v225, v224);
      v228 = vzip1q_s32(v298, (int32x4_t)0);
      v229 = vzip2q_s32(v298, (int32x4_t)0).u64[0];
      v211.f32[0] = (float)(v211.f32[0] + v287) * 100.0;
      v284.i8[0] = 0;
      v230 = &v297;
      v231 = (float *)v299;
      vst2_f32(v230->f32, v226);
      v299[1] = v223;
      v298 = vzip2q_s32((int32x4_t)v226, v228);
      vst2_f32(v231, v227);
      v305.i64[1] = (uint64_t)v286;
      v305.i64[0] = (uint64_t)off_24ED91108;
      if (physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::CapsuleV>>(&v295, (uint64_t)&v305, &v282, &v285, &v284, (uint64_t)&v300, v281, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v211.f32, 0), *(double *)v223.i64, (float32x4_t)v227) != 5)goto LABEL_80;
      __asm { FMOV            V8.2S, #1.0 }
      if (physx::Gu::epaPenetration((uint64_t)&v274) - 5 >= 2)
      {
        v233 = vnegq_f32(v265);
        v233.i32[3] = 0;
        v234 = vmulq_f32(v233, v233);
        v234.i64[0] = vpaddq_f32(v234, v234).u64[0];
        v235 = vpadd_f32(*(float32x2_t *)v234.f32, *(float32x2_t *)v234.f32);
        v236 = vrsqrte_f32(v235);
        v237 = 4;
        do
        {
          v236 = vmul_f32(v236, vrsqrts_f32(vmul_f32(v236, v236), v235));
          --v237;
        }
        while (v237);
        v238 = vmul_f32(v235, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v235), 0), _D8, (int8x8_t)v236));
        v239 = vrecpe_f32(v238);
        v240 = 4;
        do
        {
          v239 = vmul_f32(v239, vrecps_f32(v238, v239));
          --v240;
        }
        while (v240);
        v207 = vmulq_n_f32(v233, v239.f32[0]);
        v207.i32[3] = 0;
        v209 = 0;
        v211 = 0uLL;
      }
      else
      {
LABEL_80:
        v207 = v302;
        v211 = v300;
        v209 = vmin_f32(v304, 0);
      }
    }
    v241 = vmulq_n_f32(v211, v260);
    v241.i32[3] = 0;
    v242 = (int8x8_t)vmls_f32(vmul_f32(v261, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v211, (int8x16_t)v211, 4uLL)), v256, *(float32x2_t *)v211.f32);
    *(int8x8_t *)v243.f32 = vext_s8(v242, (int8x8_t)vmls_f32(vmul_f32(v257, *(float32x2_t *)v211.f32), v261, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v211, (int8x16_t)v211, 8uLL)), 4uLL);
    v243.i64[1] = v242.u32[0];
    v244 = vmlaq_f32(v241, v262, v243);
    v244.i64[1] = vextq_s8((int8x16_t)v244, (int8x16_t)v244, 8uLL).u32[0];
    v245 = vmulq_f32(v259, v211);
    v245.i64[0] = vpaddq_f32(v245, v245).u64[0];
    v246 = vmlaq_n_f32(v244, v259, vpadd_f32(*(float32x2_t *)v245.f32, *(float32x2_t *)v245.f32).f32[0]);
    v246.i64[1] = vextq_s8((int8x16_t)v246, (int8x16_t)v246, 8uLL).u32[0];
    v243.i64[0] = 0x4000000040000000;
    v243.i64[1] = 0x4000000040000000;
    v247 = vmlaq_f32(v263, v243, v246);
    v247.i64[1] = vextq_s8((int8x16_t)v247, (int8x16_t)v247, 8uLL).u32[0];
    v248 = vmlaq_n_f32(v247, v258, vmax_f32(v209, 0).f32[0]);
    v249 = vmulq_n_f32(v207, v260);
    v249.i32[3] = 0;
    *(float32x2_t *)v243.f32 = vmls_f32(vmul_f32(v261, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v207, (int8x16_t)v207, 4uLL)), v256, *(float32x2_t *)v207.f32);
    *(int8x8_t *)v246.f32 = vext_s8(*(int8x8_t *)v243.f32, (int8x8_t)vmls_f32(vmul_f32(v257, *(float32x2_t *)v207.f32), v261, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v207, (int8x16_t)v207, 8uLL)), 4uLL);
    v246.i64[1] = v243.u32[0];
    v250 = vmlaq_f32(v249, v262, v246);
    v250.i64[1] = vextq_s8((int8x16_t)v250, (int8x16_t)v250, 8uLL).u32[0];
    v251 = vmulq_f32(v259, v207);
    v251.i64[0] = vpaddq_f32(v251, v251).u64[0];
    v252 = vmlaq_n_f32(v250, v259, vpadd_f32(*(float32x2_t *)v251.f32, *(float32x2_t *)v251.f32).f32[0]);
    v253 = vaddq_f32(v252, v252);
    *(_QWORD *)a8 = v253.i64[0];
    *(_DWORD *)(a8 + 8) = v253.i32[2];
    *(_QWORD *)a9 = v248.i64[0];
    *(_DWORD *)(a9 + 8) = v248.i32[2];
  }
  return v209.f32[0];
}

float32_t physx::Gu::SweepGeomTriangles<physx::Gu::BoxV>(uint64_t a1, double a2, uint64_t a3, float32x4_t *a4, int8x8_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x2_t v24;
  int8x8_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x8_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float *v56;
  float *v57;
  float32x2x2_t v58;
  unint64_t v59;
  int32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x2_t v64;
  float32x2_t v65;
  int v66;
  int8x16_t v67;
  float32x2_t v68;
  float32x2_t v69;
  int v70;
  float32x2_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x2_t v85;
  int32x4_t v86;
  int8x16_t v87;
  int8x16_t v88;
  float32x4_t v89;
  int8x16_t v90;
  int32x4_t v91;
  unsigned __int32 v92;
  float32x4_t v93;
  float32x2_t v94;
  float32x2_t v95;
  int v96;
  float32x2_t v97;
  float32x2_t v98;
  int v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int8x16_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x4_t v110;
  float32x2_t v111;
  float32x2_t v112;
  int v113;
  float32x2_t v114;
  float32x4_t v115;
  float32x4_t v116;
  uint64_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x2_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x2_t v123;
  float32x2_t v124;
  int v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  int8x8_t v129;
  float32x2_t v130;
  float32x2_t v131;
  float32x2_t v132;
  float32x2_t v133;
  float32x2_t v134;
  float32x2_t v135;
  int8x8_t v136;
  float32x4_t v137;
  float32x2_t v138;
  float32x2_t v139;
  int8x8_t v140;
  float32x4_t v141;
  int8x8_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x2_t v145;
  float32x4_t v146;
  float32x2_t v147;
  float32x4_t v148;
  float32x2_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x2_t v153;
  float32x4_t v154;
  float32x2_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x2_t v158;
  float32x4_t v159;
  float32x2_t v160;
  float32x4_t v161;
  float32x2_t v162;
  float32x4_t v163;
  float32x2_t v164;
  __int32 v165;
  uint64_t v166;
  uint64_t v167;
  float32x4_t v168;
  float32x2_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x2_t v172;
  float32x2_t v173;
  int v174;
  float32x2_t v175;
  int v176;
  float32x4_t v177;
  float32x2_t v178;
  float32x2_t v179;
  int v180;
  unsigned int v181;
  float32x2_t v182;
  float32x2_t v183;
  float32x2_t v184;
  int v185;
  int8x16_t v186;
  float32x2_t v187;
  float32x2_t v188;
  int v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x2_t v196;
  int8x8_t v197;
  uint64_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x2_t v201;
  float32x2_t v202;
  int v203;
  float32x2_t v204;
  float32x2_t v205;
  int v206;
  int8x16_t v207;
  int8x16_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x2_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x2_t v219;
  float32x2_t v220;
  int v221;
  float32x4_t v222;
  float32x4_t v223;
  int8x16_t v224;
  int32x4_t v225;
  float32x2x2_t v226;
  int32x4_t v227;
  float32x2x2_t v228;
  int32x4_t v229;
  unint64_t v230;
  float32x4_t *v231;
  float *v232;
  float32x4_t v234;
  float32x4_t v235;
  float32x2_t v236;
  float32x2_t v237;
  int v238;
  float32x2_t v239;
  float32x2_t v240;
  int v241;
  float32x4_t v242;
  int8x8_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  int32x4_t v256;
  float32x2_t v257;
  float32x2_t v258;
  float32x2_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float v262;
  float32x2_t v263;
  float32x4_t v264;
  float32x4_t v265;
  int8x16_t v266;
  float32x4_t v267;
  float32x2_t v268;
  float32x4_t v269;
  float32x4_t v270;
  int8x16_t v271;
  int8x16_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  _QWORD v276[2];
  float32x2_t v277;
  int32x2_t v278;
  char v279;
  float32x4_t v280;
  uint64_t (**v281)();
  _QWORD *v282;
  float32x4_t v283;
  int32x4_t *v284;
  _OWORD v285[2];
  _OWORD v286[2];
  float32x4_t v287;
  int32x4_t v288;
  int32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  unsigned int v292;
  float32x2_t v293;
  float32x2_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  int32x4_t v298;
  _OWORD v299[2];
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  __int128 v303;
  float32x2_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  __int128 v308;
  uint64_t v309;

  v309 = *MEMORY[0x24BDAC8D0];
  v278.i32[1] = 3;
  v279 = 0;
  v13 = *(float32x4_t *)(a1 + 4);
  v14 = v13;
  v14.i32[2] = *(_DWORD *)(a1 + 12);
  v15 = (float32x2_t)vdup_laneq_s32((int32x4_t)v14, 2);
  v14.i32[3] = 0;
  v276[0] = 0;
  v276[1] = 0;
  v280 = v14;
  *(float32x2_t *)v13.f32 = vpmin_f32(v15, *(float32x2_t *)v13.f32);
  v13.f32[0] = vpmin_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32).f32[0];
  v277 = vmul_n_f32((float32x2_t)0x3BA3D70A3C23D70ALL, v13.f32[0]);
  *(float *)v278.i32 = 0.05 * v13.f32[0];
  v14.i64[0] = *(_QWORD *)(a7 + 16);
  v14.i64[1] = *(unsigned int *)(a7 + 24);
  v16 = *a4;
  v17.i64[0] = *(_QWORD *)(a6 + 16);
  v17.i64[1] = *(unsigned int *)(a6 + 24);
  v18 = vnegq_f32(*a4);
  v19 = vsubq_f32(v14, v17);
  v20 = v18;
  v20.i32[3] = 0;
  v264 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v21) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v264.f32, *(float32x2_t *)v264.f32).u32[0];
  v22 = vmulq_n_f32(v19, v21);
  v22.i32[3] = 0;
  v23 = (float32x2_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
  v24 = (float32x2_t)vext_s8(*(int8x8_t *)v18.f32, (int8x8_t)v23, 4uLL);
  v25 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL)), v24, *(float32x2_t *)v19.f32);
  *(int8x8_t *)v26.f32 = vext_s8(v25, (int8x8_t)vmls_f32(vmul_f32(v23, *(float32x2_t *)v19.f32), *(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), 4uLL);
  v26.i64[1] = v25.u32[0];
  v27 = vmlaq_laneq_f32(v22, v26, *a4, 3);
  v27.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
  v28 = vmulq_f32(v20, v19);
  v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
  v29 = vmlaq_n_f32(v27, v20, vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32).f32[0]);
  v30 = vaddq_f32(v29, v29);
  v30.i32[3] = 0;
  v31 = *(float32x4_t *)a5->i8;
  v31.i32[3] = 0;
  v32 = vmulq_f32(v31, v20);
  v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
  v33 = vmulq_laneq_f32(v31, *a4, 3);
  v31.i64[0] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
  v34 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a5, *(int8x8_t *)v31.f32, 4uLL), *(float32x2_t *)v18.f32), v24, (float32x2_t)*a5);
  *(int8x8_t *)v35.f32 = vext_s8(v34, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a5, v23), *(float32x2_t *)v18.f32, *(float32x2_t *)v31.f32), 4uLL);
  *(int8x8_t *)&v35.u32[2] = v34;
  v36 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v20, *(float32x4_t *)a5->i8, 3), v33), v35);
  *(int32x2_t *)v18.f32 = vdup_lane_s32(*(int32x2_t *)v36.f32, 1);
  *(int32x2_t *)v20.f32 = vdup_laneq_s32((int32x4_t)v36, 2);
  v37 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a5->i8, *(int8x16_t *)a5->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL)), vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32));
  v38 = vaddq_f32(v36, v36);
  *(int32x2_t *)v33.f32 = vdup_laneq_s32((int32x4_t)v38, 2);
  *(int32x2_t *)v36.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v38.f32), 0);
  v39 = vmul_lane_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v38.f32, 1);
  v40 = vmul_laneq_f32(*(float32x2_t *)v20.f32, v38, 2);
  *(float32x2_t *)v18.f32 = vmul_n_f32(*(float32x2_t *)v18.f32, v38.f32[0]);
  v41 = vmul_n_f32(*(float32x2_t *)v20.f32, v38.f32[0]);
  v42 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 0), v37, 1);
  *(float32x2_t *)v20.f32 = vmul_lane_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v38.f32, 1);
  *(float32x2_t *)v38.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 1), v37, 1);
  v43 = vmul_lane_f32(*(float32x2_t *)v33.f32, v37, 1);
  __asm { FMOV            V8.2S, #1.0 }
  *(float32x2_t *)v36.f32 = vsub_f32(_D8, *(float32x2_t *)v36.f32);
  *(int8x8_t *)v32.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v39), v40), (int8x8_t)vadd_f32(*(float32x2_t *)v18.f32, v43), 4uLL);
  v32.i64[1] = vsub_f32(v41, *(float32x2_t *)v38.f32).u32[0];
  *(int8x8_t *)v18.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v18.f32, v43), (int8x8_t)vsub_f32(*(float32x2_t *)v36.f32, v40), 4uLL);
  v18.i64[1] = vadd_f32(*(float32x2_t *)v20.f32, v42).u32[0];
  v287 = v32;
  v288 = (int32x4_t)v18;
  *(int8x8_t *)v18.f32 = vext_s8((int8x8_t)vadd_f32(v41, *(float32x2_t *)v38.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v20.f32, v42), 4uLL);
  v18.i64[1] = vsub_f32(*(float32x2_t *)v36.f32, v39).u32[0];
  v289 = (int32x4_t)v18;
  v290 = v30;
  *(int8x8_t *)v36.f32 = a5[2];
  v36.i64[1] = a5[3].u32[0];
  v18.i64[0] = a4[1].i64[0];
  v18.i64[1] = a4[1].u32[2];
  v265 = v17;
  v260 = vsubq_f32(v36, v14);
  v49 = vsubq_f32(vsubq_f32(v18, v17), v260);
  v50 = v16;
  v50.i32[3] = 0;
  v262 = v21;
  v263 = *(float32x2_t *)v16.f32;
  v51 = vmulq_n_f32(v49, v21);
  v51.i32[3] = 0;
  v259 = (float32x2_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
  v258 = (float32x2_t)vext_s8(*(int8x8_t *)v16.f32, (int8x8_t)v259, 4uLL);
  *(float32x2_t *)v20.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v16.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v49, (int8x16_t)v49, 4uLL)), v258, *(float32x2_t *)v49.f32);
  *(int8x8_t *)v18.f32 = vext_s8(*(int8x8_t *)v20.f32, (int8x8_t)vmls_f32(vmul_f32(v259, *(float32x2_t *)v49.f32), *(float32x2_t *)v16.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL)), 4uLL);
  v18.i64[1] = v20.u32[0];
  v52 = vmlsq_laneq_f32(v51, v18, v16, 3);
  v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
  v53 = vmulq_f32(v50, v49);
  v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
  v261 = v50;
  v54 = vmlaq_n_f32(v52, v50, vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32).f32[0]);
  v55 = vaddq_f32(v54, v54);
  v283.i64[0] = (uint64_t)off_24ED91658;
  v283.i64[1] = a11;
  v284 = (int32x4_t *)&v287;
  v56 = (float *)v285;
  v285[0] = v32;
  v286[0] = v289;
  v57 = (float *)v286;
  v58 = (float32x2x2_t)vzip1q_s32((int32x4_t)v32, v289);
  v59 = vzip2q_s32((int32x4_t)v32, v289).u64[0];
  v60 = vzip1q_s32(v288, (int32x4_t)0);
  v32.i64[0] = vzip2q_s32(v288, (int32x4_t)0).u64[0];
  vst2_f32(v56, v58);
  v286[1] = v30;
  v285[1] = vzip2q_s32((int32x4_t)v58, v60);
  vst2_f32(v57, *(float32x2x2_t *)((char *)&v32 - 8));
  v281 = off_24ED913D0;
  v282 = v276;
  v292 = 1;
  v61 = vmulq_f32(v30, v30);
  v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
  v62 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v30, (int8x16_t)xmmword_2260E5F10);
  v63 = vmulq_f32(v62, v62);
  v63.i64[0] = vpaddq_f32(v63, v63).u64[0];
  v64 = vpadd_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v63.f32);
  v65 = vrsqrte_f32(v64);
  v66 = 4;
  do
  {
    v65 = vmul_f32(v65, vrsqrts_f32(vmul_f32(v65, v65), v64));
    --v66;
  }
  while (v66);
  v55.i32[3] = 0;
  v267 = v55;
  v67 = (int8x16_t)vmlaq_f32((float32x4_t)0, (float32x4_t)0, v55);
  v68 = vmul_f32(v64, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v64), 0), (int8x8_t)_D8, (int8x8_t)v65));
  v69 = vrecpe_f32(v68);
  v70 = 4;
  do
  {
    v69 = vmul_f32(v69, vrecps_f32(v68, v69));
    --v70;
  }
  while (v70);
  *(float *)&a2 = *(float *)&a2 + 0.0;
  v71 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0);
  v67.i64[1] = vextq_s8(v67, v67, 8uLL).u32[0];
  v270 = (float32x4_t)v67;
  v72 = vmulq_n_f32(v62, v69.f32[0]);
  v72.i32[3] = 0;
  v273 = v72;
  v73 = vnegq_f32(v72);
  v73.i32[3] = 0;
  v295 = v73;
  *(double *)v74.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(&v283, (float32x2_t *)&v295);
  v75 = v74;
  v76 = (int8x16_t)vnegq_f32(v280);
  v76.i32[3] = 0;
  v77 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v273), (int8x16_t)v280, v76);
  v78 = vsubq_f32(v74, v77);
  v295 = v78;
  v296 = 0u;
  v297 = 0u;
  v298 = 0u;
  v300 = v75;
  v301 = 0u;
  v302 = 0u;
  v303 = 0u;
  v79 = vnegq_f32(v78);
  v79.i32[3] = 0;
  v305 = v77;
  v306 = 0u;
  v307 = 0u;
  v308 = 0u;
  v80 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  *(float32x2_t *)v75.f32 = vmul_f32(vmin_f32((float32x2_t)vdup_lane_s32(v278, 0), v80), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  v81 = vadd_f32(v71, *(float32x2_t *)v75.f32);
  *(float32x2_t *)v77.f32 = vmul_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32);
  v82 = vmul_f32(v81, v81);
  v83 = vmulq_f32(v79, v79);
  v84 = vpaddq_f32(v83, v83);
  v85 = vpadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32);
  v257 = *(float32x2_t *)v77.f32;
  *(int32x2_t *)v84.f32 = vcgt_f32(v85, *(float32x2_t *)v77.f32);
  v86 = vdupq_lane_s32(*(int32x2_t *)v84.f32, 0);
  v84.i32[0] = -1;
  v256 = (int32x4_t)v84;
  v87 = (int8x16_t)v78;
  v88.i64[0] = -1;
  v88.i64[1] = -1;
  v266 = (int8x16_t)v79;
  v89 = v79;
  v268 = 0;
  while (1)
  {
    v90 = (int8x16_t)v78;
    v91.i64[0] = -1;
    v91.i64[1] = -1;
    *(int16x4_t *)v91.i8 = vmovn_s32(vceqq_s32(v86, v91));
    v92 = vuzp1_s8(*(int8x8_t *)v91.i8, *(int8x8_t *)v91.i8).u32[0];
    if (v92 != -1)
      break;
    v93 = vmulq_f32(v89, v89);
    v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
    v94 = vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32);
    v95 = vrsqrte_f32(v94);
    v96 = 4;
    do
    {
      v95 = vmul_f32(v95, vrsqrts_f32(vmul_f32(v95, v95), v94));
      --v96;
    }
    while (v96);
    v271 = v90;
    v97 = vmul_f32(v94, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v94), 0), (int8x8_t)_D8, (int8x8_t)v95));
    v98 = vrecpe_f32(v97);
    v99 = 4;
    do
    {
      v98 = vmul_f32(v98, vrecps_f32(v97, v98));
      --v99;
    }
    while (v99);
    v269 = v89;
    v100 = vmulq_n_f32(v89, v98.f32[0]);
    v100.i32[3] = 0;
    v291 = v100;
    v101 = vnegq_f32(v100);
    v101.i32[3] = 0;
    v274 = v101;
    *(double *)v102.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(&v283, (float32x2_t *)&v291);
    v103 = v102;
    v104 = (int8x16_t)vnegq_f32(v280);
    v104.i32[3] = 0;
    v105 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v274), (int8x16_t)v280, v104);
    v106 = vaddq_f32(v270, v105);
    v78 = vsubq_f32(v102, v106);
    v107 = vnegq_f32(v78);
    v107.i32[3] = 0;
    v108 = vmulq_f32(v291, v107);
    v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
    v109 = vsub_f32(vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32), v81);
    if (v109.f32[0] > 0.0)
    {
      v110 = vmulq_f32(v267, v291);
      v110.i64[0] = vpaddq_f32(v110, v110).u64[0];
      v111 = vpadd_f32(*(float32x2_t *)v110.f32, *(float32x2_t *)v110.f32);
      if (v111.f32[0] >= 0.0)
        goto LABEL_70;
      v112 = vrecpe_f32(v111);
      v113 = 4;
      do
      {
        v112 = vmul_f32(v112, vrecps_f32(v111, v112));
        --v113;
      }
      while (v113);
      v114 = vsub_f32(v268, vmul_f32(v109, v112));
      if ((vcgt_f32(v114, v268).u8[0] & 1) != 0)
      {
        if (v114.f32[0] > 1.0)
        {
LABEL_70:
          v211 = 0;
          v209 = 0uLL;
          v213 = 0uLL;
          goto LABEL_76;
        }
        v115 = vmlaq_n_f32((float32x4_t)0, v267, v114.f32[0]);
        v115.i64[1] = vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL).u32[0];
        v116 = vsubq_f32(v115, v270);
        v305 = vaddq_f32(v116, v305);
        v306 = vaddq_f32(v116, v306);
        v307 = vaddq_f32(v116, v307);
        v295 = vsubq_f32(v300, v305);
        v296 = vsubq_f32(v301, v306);
        v297 = vsubq_f32(v302, v307);
        v106 = vaddq_f32(v105, v115);
        v78 = vsubq_f32(v103, v106);
        v85 = v80;
        v266 = (int8x16_t)v269;
        v270 = v115;
      }
      v268 = v114;
    }
    v117 = v292;
    *(&v300 + v292) = v103;
    *(&v305 + v117) = v106;
    v292 = v117 + 1;
    *(&v295 + v117) = v78;
    if ((_DWORD)v117 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v295, &v300, &v305, (int *)&v292);
LABEL_27:
      v87 = v271;
      goto LABEL_61;
    }
    if ((_DWORD)v117 != 2)
    {
      v87 = v271;
      if ((_DWORD)v117 != 1)
        goto LABEL_61;
      v78 = v295;
      v118 = vsubq_f32(v296, v295);
      v119 = vmulq_f32(v118, v118);
      v119.i64[0] = vpaddq_f32(v119, v119).u64[0];
      v120 = vpadd_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v120), 0), *(int8x8_t *)v295.f32).u32[0] != -1)
      {
        v121 = vnegq_f32(v295);
        v121.i32[3] = 0;
        v122 = vmulq_f32(v121, v118);
        v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
        v123 = vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32);
        v124 = vrecpe_f32(v120);
        v125 = 4;
        do
        {
          v124 = vmul_f32(v124, vrecps_f32(v120, v124));
          --v125;
        }
        while (v125);
        v78 = vmlaq_n_f32(v295, v118, vmax_f32(vmin_f32(vmul_f32(v123, v124), _D8), 0).f32[0]);
LABEL_42:
        v78.i64[1] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u32[0];
        goto LABEL_61;
      }
LABEL_43:
      v292 = 1;
      goto LABEL_61;
    }
    v78 = v295;
    v126 = vsubq_f32(v296, v295);
    v127 = vsubq_f32(v297, v295);
    v129 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v126.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v127, (int8x16_t)v127, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v126, (int8x16_t)v126, 4uLL), *(float32x2_t *)v127.f32);
    *(int8x8_t *)v128.f32 = vext_s8(v129, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL), *(float32x2_t *)v127.f32), *(float32x2_t *)v126.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL)), 4uLL);
    v129.i32[1] = 0;
    v292 = 3;
    v130 = vpadd_f32(vmul_f32(*(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32), vmul_f32((float32x2_t)v129.u32[0], (float32x2_t)v129.u32[0]));
    v131 = vpadd_f32(v130, v130);
    if (v131.f32[0] <= 0.00000011921)
    {
      v292 = 2;
      v168 = vmulq_f32(v126, v126);
      v168.i64[0] = vpaddq_f32(v168, v168).u64[0];
      v169 = vpadd_f32(*(float32x2_t *)v168.f32, *(float32x2_t *)v168.f32);
      v87 = v271;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v169), 0), *(int8x8_t *)v295.f32).u32[0] != -1)
      {
        v170 = vnegq_f32(v295);
        v170.i32[3] = 0;
        v171 = vmulq_f32(v170, v126);
        v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
        v172 = vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32);
        v173 = vrecpe_f32(v169);
        v174 = 4;
        do
        {
          v173 = vmul_f32(v173, vrecps_f32(v169, v173));
          --v174;
        }
        while (v174);
        v78 = vmlaq_n_f32(v295, v126, vmax_f32(vmin_f32(vmul_f32(v172, v173), _D8), 0).f32[0]);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v131.f32[0] == 0.0)
    {
      v78 = 0uLL;
      goto LABEL_27;
    }
    *(int8x8_t *)&v128.u32[2] = v129;
    v132 = (float32x2_t)vextq_s8((int8x16_t)v296, (int8x16_t)v296, 8uLL).u64[0];
    v133 = (float32x2_t)vextq_s8((int8x16_t)v297, (int8x16_t)v297, 8uLL).u64[0];
    v134 = (float32x2_t)vextq_s8((int8x16_t)v297, (int8x16_t)v297, 4uLL).u64[0];
    v135 = (float32x2_t)vextq_s8((int8x16_t)v296, (int8x16_t)v296, 4uLL).u64[0];
    v136 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v296.f32, v134), v135, *(float32x2_t *)v297.f32);
    *(int8x8_t *)v137.f32 = vext_s8(v136, (int8x8_t)vmls_f32(vmul_f32(v132, *(float32x2_t *)v297.f32), *(float32x2_t *)v296.f32, v133), 4uLL);
    v137.i64[1] = v136.u32[0];
    v138 = (float32x2_t)vextq_s8((int8x16_t)v295, (int8x16_t)v295, 8uLL).u64[0];
    v139 = (float32x2_t)vextq_s8((int8x16_t)v295, (int8x16_t)v295, 4uLL).u64[0];
    v140 = (int8x8_t)vmls_f32(vmul_f32(v139, *(float32x2_t *)v297.f32), v134, *(float32x2_t *)v295.f32);
    *(int8x8_t *)v141.f32 = vext_s8(v140, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v295.f32, v133), *(float32x2_t *)v297.f32, v138), 4uLL);
    v141.i64[1] = v140.u32[0];
    v142 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v295.f32, v135), v139, *(float32x2_t *)v296.f32);
    *(int8x8_t *)v143.f32 = vext_s8(v142, (int8x8_t)vmls_f32(vmul_f32(v138, *(float32x2_t *)v296.f32), *(float32x2_t *)v295.f32, v132), 4uLL);
    v143.i64[1] = v142.u32[0];
    v144 = vmulq_f32(v137, v128);
    v144.i64[0] = vpaddq_f32(v144, v144).u64[0];
    v145 = vpadd_f32(*(float32x2_t *)v144.f32, *(float32x2_t *)v144.f32);
    v146 = vmulq_f32(v141, v128);
    v146.i64[0] = vpaddq_f32(v146, v146).u64[0];
    v147 = vpadd_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32);
    v148 = vmulq_f32(v143, v128);
    v148.i64[0] = vpaddq_f32(v148, v148).u64[0];
    v149 = vpadd_f32(*(float32x2_t *)v148.f32, *(float32x2_t *)v148.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v147), (int8x8_t)vcgez_f32(v145)), (int8x8_t)vcgez_f32(v149)), 0), *(int8x8_t *)v295.f32).u32[0] != -1)
    {
      v150 = vnegq_f32(v295);
      v150.i32[3] = 0;
      v151 = vnegq_f32(v296);
      v151.i32[3] = 0;
      v152 = vmulq_f32(v150, v126);
      v152.i64[0] = vpaddq_f32(v152, v152).u64[0];
      v153 = vpadd_f32(*(float32x2_t *)v152.f32, *(float32x2_t *)v152.f32);
      v154 = vmulq_f32(v126, v151);
      v154.i64[0] = vpaddq_f32(v154, v154).u64[0];
      v155 = vpadd_f32(*(float32x2_t *)v154.f32, *(float32x2_t *)v154.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v153), (int8x8_t)vclez_f32(v155)), (int8x8_t)vclez_f32(v149)), 0), *(int8x8_t *)v295.f32).u32[0] == -1)
      {
        v178 = vsub_f32(v153, v155);
        v179 = vrecpe_f32(v178);
        v180 = 4;
        do
        {
          v179 = vmul_f32(v179, vrecps_f32(v178, v179));
          --v180;
        }
        while (v180);
        v167 = 0;
        v78 = vmlaq_n_f32(v295, v126, vmul_f32(v153, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v178), (float32x2_t)0x3400000034000000), (int8x8_t)v179, 0)).f32[0]);
        v78.i64[1] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u32[0];
        v181 = 2;
        v166 = 1;
      }
      else
      {
        v156 = vnegq_f32(v297);
        v156.i32[3] = 0;
        v157 = vmulq_f32(v151, v127);
        v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
        v158 = vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32);
        v159 = vmulq_f32(v126, v156);
        v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
        v160 = vpadd_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32);
        v161 = vmulq_f32(v127, v156);
        v161.i64[0] = vpaddq_f32(v161, v161).u64[0];
        v162 = vpadd_f32(*(float32x2_t *)v161.f32, *(float32x2_t *)v161.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v158, v155), (int8x8_t)vcge_f32(v160, v162)), (int8x8_t)vclez_f32(v145)), 0), *(int8x8_t *)v295.f32).u32[0] != -1)
        {
          v163 = vmulq_f32(v150, v127);
          v163.i64[0] = vpaddq_f32(v163, v163).u64[0];
          v164 = vpadd_f32(*(float32x2_t *)v163.f32, *(float32x2_t *)v163.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v164), (int8x8_t)vclez_f32(v162)), (int8x8_t)vclez_f32(v147)), 0), *(int8x8_t *)v295.f32).u32[0] == -1)
          {
            v187 = vsub_f32(v164, v162);
            v188 = vrecpe_f32(v187);
            v189 = 4;
            v87 = v271;
            do
            {
              v188 = vmul_f32(v188, vrecps_f32(v187, v188));
              --v189;
            }
            while (v189);
            v167 = 0;
            v78 = vmlaq_n_f32(v295, v127, vmul_f32(v164, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v187), (float32x2_t)0x3400000034000000), (int8x8_t)v188, 0)).f32[0]);
            v78.i64[1] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u32[0];
            v166 = 2;
          }
          else
          {
            v87 = v271;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v164), (int8x8_t)vclez_f32(v153)), 0), *(int8x8_t *)v295.f32).u32[0] == -1)
            {
              v167 = 0;
              v166 = 1;
            }
            else
            {
              *(int16x4_t *)v78.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v155, v158), (int8x8_t)vcgez_f32(v155)), 0);
              *(int8x8_t *)v78.f32 = vuzp1_s8(*(int8x8_t *)v78.f32, *(int8x8_t *)v78.f32);
              v165 = v78.i32[0];
              v78 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v78, v256), 0), (int8x16_t)v296, (int8x16_t)v297);
              v166 = 1;
              if (v165 == -1)
                v167 = 1;
              else
                v167 = 2;
            }
          }
          v181 = v166;
          goto LABEL_60;
        }
        v182 = vsub_f32(v158, v155);
        v183 = vadd_f32(v182, vsub_f32(v160, v162));
        v184 = vrecpe_f32(v183);
        v185 = 4;
        do
        {
          v184 = vmul_f32(v184, vrecps_f32(v183, v184));
          --v185;
        }
        while (v185);
        v186 = (int8x16_t)vmlaq_n_f32(v296, vsubq_f32(v297, v296), vmul_f32(v182, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v183), (float32x2_t)0x3400000034000000), (int8x8_t)v184, 0)).f32[0]);
        v186.i64[1] = vextq_s8(v186, v186, 8uLL).u32[0];
        v181 = 2;
        v166 = 2;
        v167 = 1;
        v78 = (float32x4_t)v186;
      }
      v87 = v271;
LABEL_60:
      v190 = *(&v295 + v166);
      v191 = *(&v300 + v167);
      v192 = *(&v300 + v166);
      v193 = *(&v305 + v167);
      v194 = *(&v305 + v166);
      v295 = *(&v295 + v167);
      v296 = v190;
      v300 = v191;
      v301 = v192;
      v305 = v193;
      v306 = v194;
      v292 = v181;
      goto LABEL_61;
    }
    v175 = vrecpe_f32(v131);
    v176 = 4;
    v87 = v271;
    do
    {
      v175 = vmul_f32(v175, vrecps_f32(v131, v175));
      --v176;
    }
    while (v176);
    v177 = vmulq_f32(v295, v128);
    v177.i64[0] = vpaddq_f32(v177, v177).u64[0];
    v78 = vmulq_n_f32(v128, vmul_f32(v175, vpadd_f32(*(float32x2_t *)v177.f32, *(float32x2_t *)v177.f32)).f32[0]);
    v78.i32[3] = 0;
LABEL_61:
    v89 = vnegq_f32(v78);
    v89.i32[3] = 0;
    v195 = vmulq_f32(v78, v78);
    v195.i64[0] = vpaddq_f32(v195, v195).u64[0];
    v196 = vpadd_f32(*(float32x2_t *)v195.f32, *(float32x2_t *)v195.f32);
    v197 = (int8x8_t)vcgt_f32(v85, v196);
    v88 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v197, (int8x8_t)0x100000001), 0);
    v86 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v196, v82), v197), 0);
    v85 = v196;
  }
  v198 = v283.i64[1];
  v199 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v85, v257), 0), v88), 0x1FuLL)), (int8x16_t)v89, v266);
  v200 = vmulq_f32(v199, v199);
  v200.i64[0] = vpaddq_f32(v200, v200).u64[0];
  v201 = vpadd_f32(*(float32x2_t *)v200.f32, *(float32x2_t *)v200.f32);
  v202 = vrsqrte_f32(v201);
  v203 = 4;
  do
  {
    v202 = vmul_f32(v202, vrsqrts_f32(vmul_f32(v202, v202), v201));
    --v203;
  }
  while (v203);
  v204 = vmul_f32(v201, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v201), 0), (int8x8_t)_D8, (int8x8_t)v202));
  v205 = vrecpe_f32(v204);
  v206 = 4;
  do
  {
    v205 = vmul_f32(v205, vrecps_f32(v204, v205));
    --v206;
  }
  while (v206);
  v207 = (int8x16_t)vdupq_n_s32(-*(char *)(v283.i64[1] + 32));
  v208 = (int8x16_t)vmulq_n_f32(v199, v205.f32[0]);
  v208.i32[3] = 0;
  v209 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v204), 0), v208));
  v209.i32[3] = 0;
  v210 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v88, 0x1FuLL)), v90, v87);
  v291 = v210;
  v211 = v268;
  if (v292 == 3)
  {
    v294 = 0;
    v293 = 0;
    v272 = v207;
    v275 = v209;
    physx::Gu::barycentricCoordinates(&v291, &v295, &v296, &v297, &v294, &v293);
    v207 = v272;
    v209 = v275;
    v211 = v268;
    v88.i32[1] = v300.i32[1];
    v214 = vmulq_n_f32(vsubq_f32(v301, v300), v294.f32[0]);
    v214.i32[3] = 0;
    v215 = vmulq_n_f32(vsubq_f32(v302, v300), v293.f32[0]);
    v215.i32[3] = 0;
    v212 = vaddq_f32(v300, vaddq_f32(v214, v215));
  }
  else if (v292 == 2)
  {
    v216 = vsubq_f32(v295, v210);
    v217 = vsubq_f32(vsubq_f32(v296, v210), v216);
    v218 = vmulq_f32(v217, v217);
    v218.i64[0] = vpaddq_f32(v218, v218).u64[0];
    v219 = vpadd_f32(*(float32x2_t *)v218.f32, *(float32x2_t *)v218.f32);
    v220 = vrecpe_f32(v219);
    v221 = 4;
    do
    {
      v220 = vmul_f32(v220, vrecps_f32(v219, v220));
      --v221;
    }
    while (v221);
    v222 = vnegq_f32(v216);
    v222.i32[3] = 0;
    v223 = vmulq_f32(v222, v217);
    v223.i64[0] = vpaddq_f32(v223, v223).u64[0];
    v212 = vmlaq_n_f32(v300, vsubq_f32(v301, v300), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v219), (int8x8_t)v220, 0), vpadd_f32(*(float32x2_t *)v223.f32, *(float32x2_t *)v223.f32)).f32[0]);
    v88.i32[1] = 0;
    v212.i64[1] = vextq_s8((int8x16_t)v212, (int8x16_t)v212, 8uLL).u32[0];
  }
  else
  {
    v212 = 0uLL;
    if (v292 == 1)
      v212 = v300;
  }
  v88.i32[0] = *(_DWORD *)(v198 + 16);
  v224 = (int8x16_t)vmlsq_lane_f32(v212, v209, *(float32x2_t *)v88.i8, 0);
  v224.i64[1] = vextq_s8(v224, v224, 8uLL).u32[0];
  v213 = (float32x4_t)vbslq_s8(v207, v224, (int8x16_t)v212);
LABEL_76:
  if (v92 == -1)
  {
    v211.i32[0] = 2139095039;
  }
  else
  {
    if (v211.f32[0] == 0.0)
    {
      v213.i32[0] = *(_DWORD *)(v283.i64[1] + 16);
      v304 = 0;
      v300 = 0u;
      v301 = 0u;
      v302 = 0u;
      v295.i64[1] = v283.i64[1];
      v295.i64[0] = (uint64_t)off_24ED91658;
      v296.i64[0] = (uint64_t)v284;
      v226 = (float32x2x2_t)v284[2];
      v225 = v284[3];
      v227 = *v284;
      v298 = v284[1];
      v299[0] = v226;
      v297 = (float32x4_t)v227;
      v228 = (float32x2x2_t)vzip1q_s32(v227, (int32x4_t)v226);
      v226.val[0] = (float32x2_t)vzip2q_s32(v227, (int32x4_t)v226).u64[0];
      v229 = vzip1q_s32(v298, (int32x4_t)0);
      v230 = vzip2q_s32(v298, (int32x4_t)0).u64[0];
      v213.f32[0] = (float)(v213.f32[0] + v277.f32[0]) * 100.0;
      v293.i8[0] = 0;
      v231 = &v297;
      v232 = (float *)v299;
      vst2_f32(v231->f32, v228);
      v299[1] = v225;
      v298 = vzip2q_s32((int32x4_t)v228, v229);
      vst2_f32(v232, v226);
      v305.i64[1] = (uint64_t)v276;
      v305.i64[0] = (uint64_t)off_24ED913D0;
      if (physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(&v295, (uint64_t)&v305, &v291, &v294, &v293, (uint64_t)&v300, v290, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v213.f32, 0), *(double *)v225.i64, (int8x8_t)v226.val[0]) != 5)goto LABEL_80;
      __asm { FMOV            V8.2S, #1.0 }
      if (physx::Gu::epaPenetration((uint64_t)&v283) - 5 >= 2)
      {
        v234 = vnegq_f32(v267);
        v234.i32[3] = 0;
        v235 = vmulq_f32(v234, v234);
        v235.i64[0] = vpaddq_f32(v235, v235).u64[0];
        v236 = vpadd_f32(*(float32x2_t *)v235.f32, *(float32x2_t *)v235.f32);
        v237 = vrsqrte_f32(v236);
        v238 = 4;
        do
        {
          v237 = vmul_f32(v237, vrsqrts_f32(vmul_f32(v237, v237), v236));
          --v238;
        }
        while (v238);
        v239 = vmul_f32(v236, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v236), 0), _D8, (int8x8_t)v237));
        v240 = vrecpe_f32(v239);
        v241 = 4;
        do
        {
          v240 = vmul_f32(v240, vrecps_f32(v239, v240));
          --v241;
        }
        while (v241);
        v209 = vmulq_n_f32(v234, v240.f32[0]);
        v209.i32[3] = 0;
        v211 = 0;
        v213 = 0uLL;
      }
      else
      {
LABEL_80:
        v209 = v302;
        v213 = v300;
        v211 = vmin_f32(v304, 0);
      }
    }
    v242 = vmulq_n_f32(v213, v262);
    v242.i32[3] = 0;
    v243 = (int8x8_t)vmls_f32(vmul_f32(v263, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v213, (int8x16_t)v213, 4uLL)), v258, *(float32x2_t *)v213.f32);
    *(int8x8_t *)v244.f32 = vext_s8(v243, (int8x8_t)vmls_f32(vmul_f32(v259, *(float32x2_t *)v213.f32), v263, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v213, (int8x16_t)v213, 8uLL)), 4uLL);
    v244.i64[1] = v243.u32[0];
    v245 = vmlaq_f32(v242, v264, v244);
    v245.i64[1] = vextq_s8((int8x16_t)v245, (int8x16_t)v245, 8uLL).u32[0];
    v246 = vmulq_f32(v261, v213);
    v246.i64[0] = vpaddq_f32(v246, v246).u64[0];
    v247 = vmlaq_n_f32(v245, v261, vpadd_f32(*(float32x2_t *)v246.f32, *(float32x2_t *)v246.f32).f32[0]);
    v247.i64[1] = vextq_s8((int8x16_t)v247, (int8x16_t)v247, 8uLL).u32[0];
    v244.i64[0] = 0x4000000040000000;
    v244.i64[1] = 0x4000000040000000;
    v248 = vmlaq_f32(v265, v244, v247);
    v248.i64[1] = vextq_s8((int8x16_t)v248, (int8x16_t)v248, 8uLL).u32[0];
    v249 = vmlaq_n_f32(v248, v260, vmax_f32(v211, 0).f32[0]);
    v250 = vmulq_n_f32(v209, v262);
    v250.i32[3] = 0;
    *(float32x2_t *)v244.f32 = vmls_f32(vmul_f32(v263, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v209, (int8x16_t)v209, 4uLL)), v258, *(float32x2_t *)v209.f32);
    *(int8x8_t *)v247.f32 = vext_s8(*(int8x8_t *)v244.f32, (int8x8_t)vmls_f32(vmul_f32(v259, *(float32x2_t *)v209.f32), v263, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v209, (int8x16_t)v209, 8uLL)), 4uLL);
    v247.i64[1] = v244.u32[0];
    v251 = vmlaq_f32(v250, v264, v247);
    v251.i64[1] = vextq_s8((int8x16_t)v251, (int8x16_t)v251, 8uLL).u32[0];
    v252 = vmulq_f32(v261, v209);
    v252.i64[0] = vpaddq_f32(v252, v252).u64[0];
    v253 = vmlaq_n_f32(v251, v261, vpadd_f32(*(float32x2_t *)v252.f32, *(float32x2_t *)v252.f32).f32[0]);
    v254 = vaddq_f32(v253, v253);
    *(_QWORD *)a8 = v254.i64[0];
    *(_DWORD *)(a8 + 8) = v254.i32[2];
    *(_QWORD *)a9 = v249.i64[0];
    *(_DWORD *)(a9 + 8) = v249.i32[2];
  }
  return v211.f32[0];
}

float32_t physx::Gu::SweepGeomTriangles<physx::Gu::ConvexHullV>(uint64_t a1, double a2, uint64_t a3, float32x4_t *a4, int8x8_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  _BOOL4 v16;
  float32x4_t v18;
  _BOOL4 v19;
  int32x4_t v20;
  float32x4_t v25;
  int v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  int32x2_t v47;
  int8x8_t v48;
  float32x4_t v49;
  int8x8_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float v89;
  float32x4_t v90;
  float32x2_t v91;
  float32x2_t v92;
  int8x8_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int8x8_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x2_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  int32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float *v118;
  float *v119;
  float32x2x2_t v120;
  int32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x2_t v125;
  float32x2_t v126;
  int v127;
  int8x16_t v128;
  float32x2_t v129;
  float32x2_t v130;
  int v131;
  float32x2_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  const float *v140;
  float32x2_t v141;
  float32x2_t v142;
  float32x2_t v143;
  float32x2_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x2_t v147;
  int32x4_t v148;
  int8x16_t v149;
  int8x16_t v150;
  float32x4_t v151;
  int8x16_t v152;
  int32x4_t v153;
  unsigned __int32 v154;
  float32x4_t v155;
  float32x2_t v156;
  float32x2_t v157;
  int v158;
  float32x2_t v159;
  float32x2_t v160;
  int v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x2_t v170;
  float32x4_t v171;
  float32x2_t v172;
  float32x2_t v173;
  int v174;
  float32x2_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x2_t v179;
  uint64_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x2_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x2_t v186;
  float32x2_t v187;
  int v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  int8x8_t v192;
  float32x2_t v193;
  float32x2_t v194;
  float32x2_t v195;
  float32x2_t v196;
  float32x2_t v197;
  float32x2_t v198;
  int8x8_t v199;
  float32x4_t v200;
  float32x2_t v201;
  float32x2_t v202;
  int8x8_t v203;
  float32x4_t v204;
  int8x8_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x2_t v208;
  float32x4_t v209;
  float32x2_t v210;
  float32x4_t v211;
  float32x2_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x2_t v216;
  float32x4_t v217;
  float32x2_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x2_t v221;
  float32x4_t v222;
  float32x2_t v223;
  float32x4_t v224;
  float32x2_t v225;
  float32x4_t v226;
  float32x2_t v227;
  __int32 v228;
  uint64_t v229;
  uint64_t v230;
  float32x4_t v231;
  float32x2_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x2_t v235;
  float32x2_t v236;
  int v237;
  float32x2_t v238;
  int v239;
  float32x4_t v240;
  float32x2_t v241;
  float32x2_t v242;
  int v243;
  unsigned int v244;
  float32x2_t v245;
  float32x2_t v246;
  float32x2_t v247;
  int v248;
  int8x16_t v249;
  float32x2_t v250;
  float32x2_t v251;
  int v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x2_t v259;
  int8x8_t v260;
  uint64_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x2_t v264;
  float32x2_t v265;
  int v266;
  float32x2_t v267;
  float32x2_t v268;
  int v269;
  int8x16_t v270;
  int8x16_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x2_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x2_t v282;
  float32x2_t v283;
  int v284;
  float32x4_t v285;
  float32x4_t v286;
  int8x16_t v287;
  uint64_t v288;
  float v289;
  float32x4_t v290;
  float32x2x2_t v291;
  int32x4_t v292;
  float32x2x2_t v293;
  int32x4_t v294;
  unint64_t v295;
  float32x4_t *v296;
  float *v297;
  float32x4_t v299;
  float32x4_t v300;
  float32x2_t v301;
  float32x2_t v302;
  int v303;
  float32x2_t v304;
  float32x2_t v305;
  int v306;
  float32x4_t v307;
  int8x8_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  int32x4_t v321;
  float32x2_t v322;
  float32x2_t v323;
  float32x2_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float v327;
  float32x2_t v328;
  float32x4_t v329;
  float32x4_t v330;
  int8x16_t v332;
  float32x2_t v333;
  float32x4_t v334;
  float32x2_t v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  int8x16_t v339;
  int8x16_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  uint64_t (**v344)();
  float32x4_t *v345;
  float32x4_t v346;
  int32x4_t *v347;
  _OWORD v348[2];
  _OWORD v349[2];
  int32x4_t v350;
  int32x4_t v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  unsigned int v357;
  float32x2_t v358;
  float32x4_t v359;
  __int128 v360;
  char v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  char v371;
  float32x4_t v372;
  float32x4_t v373;
  float32x4_t v374;
  int32x4_t v375;
  _OWORD v376[2];
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  __int128 v380;
  float32x2_t v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  __int128 v385;
  uint64_t v386;

  v386 = *MEMORY[0x24BDAC8D0];
  v361 = 0;
  v359 = 0u;
  v360 = 0u;
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(float32x4_t *)(a1 + 4);
  v14 = v13;
  v14.i32[3] = 0;
  v15 = *(float32x4_t *)(a1 + 16);
  v16 = COERCE_FLOAT(*(_QWORD *)(a1 + 12)) == 1.0;
  _ZF = v13.f32[0] == 1.0 && COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 4))) == 1.0;
  v368 = *(_QWORD *)(a1 + 48);
  v370 = *(_QWORD *)(v12 + 40) + 20 * *(unsigned __int8 *)(v12 + 39);
  v371 = *(_BYTE *)(v12 + 38);
  v19 = _ZF && v16;
  v18.i64[1] = *(unsigned int *)(v12 + 68);
  v18.i64[0] = *(_QWORD *)(v12 + 60);
  v20 = (int32x4_t)vmulq_f32(v14, v18);
  *(float32x2_t *)v20.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v20, 2), *(float32x2_t *)v20.i8);
  *(float *)v20.i32 = vpmin_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8).f32[0];
  *(float32x2_t *)&v360 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v20.i32);
  *((float *)&v360 + 2) = 0.025 * *(float *)v20.i32;
  __asm { FMOV            V8.2S, #1.0 }
  if (v19)
  {
    v362 = xmmword_2260E5F10;
    v363 = xmmword_2260E5F20;
    v364 = xmmword_2260E5F40;
    v365 = xmmword_2260E5F10;
    v366 = xmmword_2260E5F20;
    v367 = xmmword_2260E5F40;
  }
  else
  {
    v25 = vrecpeq_f32(v14);
    v26 = 4;
    do
    {
      v25 = vmulq_f32(v25, vrecpsq_f32(v25, v14));
      --v26;
    }
    while (v26);
    *(int32x2_t *)v27.f32 = vdup_lane_s32(*(int32x2_t *)v13.f32, 0);
    v27.i64[1] = v27.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v27, v14)), *(int8x8_t *)&a2).u32[0] & 0xFFFFFF) != 0)
    {
      v34 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 1);
      v35 = (float32x2_t)vdup_laneq_s32((int32x4_t)v15, 2);
      v36 = (float32x2_t)vdup_laneq_s32((int32x4_t)v15, 3);
      v37 = vaddq_f32(v15, v15);
      v38 = vmul_lane_f32(v34, *(float32x2_t *)v37.f32, 1);
      v39 = vmul_laneq_f32(v35, v37, 2);
      v40 = vmul_n_f32(v34, v37.f32[0]);
      v41 = vmul_n_f32(v35, v37.f32[0]);
      v42 = vmul_n_f32(v36, v37.f32[0]);
      v43 = vmul_lane_f32(v35, *(float32x2_t *)v37.f32, 1);
      v44 = vmul_lane_f32(v36, *(float32x2_t *)v37.f32, 1);
      v45 = vmul_laneq_f32(v36, v37, 2);
      *(float32x2_t *)v37.f32 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v37.f32), 0));
      *(int8x8_t *)v46.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v38), v39), (int8x8_t)vadd_f32(v40, v45), 4uLL);
      v46.i64[1] = vsub_f32(v41, v44).u32[0];
      v47 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v40, v45), (int8x8_t)vsub_f32(*(float32x2_t *)v37.f32, v39), 4uLL);
      v48 = (int8x8_t)vadd_f32(v41, v44);
      *(int8x8_t *)v49.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v46.f32, 0), (int8x8_t)v47, 4uLL);
      v50 = (int8x8_t)vdup_lane_s32(v47, 1);
      *(int32x2_t *)v51.f32 = v47;
      v51.i64[1] = vadd_f32(v43, v42).u32[0];
      *(int8x8_t *)v52.f32 = vext_s8(v48, (int8x8_t)vsub_f32(v43, v42), 4uLL);
      *(int8x8_t *)v53.f32 = vext_s8(*(int8x8_t *)v46.f32, v50, 4uLL);
      v52.i64[1] = vsub_f32(*(float32x2_t *)v37.f32, v38).u32[0];
      v49.i64[1] = vdup_lane_s32(*(int32x2_t *)v52.f32, 0).u32[0];
      v53.i64[1] = vdup_lane_s32(*(int32x2_t *)v52.f32, 1).u32[0];
      *(int8x8_t *)v54.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v46.u32[2], 0), (int8x8_t)v51.u32[2], 4uLL);
      v54.i64[1] = vdup_lane_s32(*(int32x2_t *)&v52.u32[2], 0).u32[0];
      v55 = vmulq_n_f32(v49, v13.f32[0]);
      v55.i32[3] = 0;
      v56 = vmulq_lane_f32(v53, *(float32x2_t *)v13.f32, 1);
      v56.i32[3] = 0;
      v57 = vmulq_laneq_f32(v54, v13, 2);
      v57.i32[3] = 0;
      v58 = vmulq_n_f32(v55, v46.f32[0]);
      v58.i32[3] = 0;
      v59 = vmulq_lane_f32(v56, *(float32x2_t *)v46.f32, 1);
      v59.i32[3] = 0;
      v60 = vmulq_laneq_f32(v57, v46, 2);
      v60.i32[3] = 0;
      v28 = vaddq_f32(v60, vaddq_f32(v58, v59));
      v61 = vmulq_n_f32(v55, v51.f32[0]);
      v61.i32[3] = 0;
      v62 = vmulq_lane_f32(v56, *(float32x2_t *)v51.f32, 1);
      v62.i32[3] = 0;
      v63 = vmulq_laneq_f32(v57, v51, 2);
      v63.i32[3] = 0;
      v64 = vaddq_f32(v61, v62);
      v65 = vmulq_n_f32(v55, v52.f32[0]);
      v65.i32[3] = 0;
      v66 = vmulq_lane_f32(v56, *(float32x2_t *)v52.f32, 1);
      v66.i32[3] = 0;
      v67 = vmulq_laneq_f32(v57, v52, 2);
      v67.i32[3] = 0;
      v29 = vaddq_f32(v63, v64);
      v30 = vaddq_f32(v67, vaddq_f32(v65, v66));
      v362 = (__int128)v28;
      v363 = (__int128)v29;
      v364 = (__int128)v30;
      v68 = vmulq_n_f32(v49, v25.f32[0]);
      v68.i32[3] = 0;
      v69 = vmulq_lane_f32(v53, *(float32x2_t *)v25.f32, 1);
      v69.i32[3] = 0;
      v70 = vmulq_laneq_f32(v54, v25, 2);
      v70.i32[3] = 0;
      v71 = vmulq_n_f32(v68, v46.f32[0]);
      v71.i32[3] = 0;
      v72 = vmulq_lane_f32(v69, *(float32x2_t *)v46.f32, 1);
      v72.i32[3] = 0;
      v73 = vmulq_laneq_f32(v70, v46, 2);
      v73.i32[3] = 0;
      v31 = vaddq_f32(v73, vaddq_f32(v71, v72));
      v74 = vmulq_n_f32(v68, v51.f32[0]);
      v74.i32[3] = 0;
      v75 = vmulq_lane_f32(v69, *(float32x2_t *)v51.f32, 1);
      v75.i32[3] = 0;
      v76 = vmulq_laneq_f32(v70, v51, 2);
      v76.i32[3] = 0;
      v77 = vmulq_n_f32(v68, v52.f32[0]);
      v77.i32[3] = 0;
      v78 = vmulq_lane_f32(v69, *(float32x2_t *)v52.f32, 1);
      v78.i32[3] = 0;
      v32 = vaddq_f32(v76, vaddq_f32(v74, v75));
      v79 = vmulq_laneq_f32(v70, v52, 2);
      v79.i32[3] = 0;
      v33 = vaddq_f32(v79, vaddq_f32(v77, v78));
    }
    else
    {
      v25.i32[3] = 0;
      v28 = vmulq_f32(v14, (float32x4_t)xmmword_2260E5F10);
      v29 = vmulq_f32(v14, (float32x4_t)xmmword_2260E5F20);
      v30 = vmulq_f32(v14, (float32x4_t)xmmword_2260E5F40);
      v362 = (__int128)v28;
      v363 = (__int128)v29;
      v364 = (__int128)v30;
      v31 = vmulq_f32(v25, (float32x4_t)xmmword_2260E5F10);
      v32 = vmulq_f32(v25, (float32x4_t)xmmword_2260E5F20);
      v33 = vmulq_f32(v25, (float32x4_t)xmmword_2260E5F40);
    }
    v366 = (__int128)v32;
    v367 = (__int128)v33;
    v80 = vmulq_f32(v28, (float32x4_t)0);
    v80.i32[3] = 0;
    v81 = vmulq_f32(v29, (float32x4_t)0);
    v81.i32[3] = 0;
    v82 = vmulq_f32(v30, (float32x4_t)0);
    v82.i32[3] = 0;
    v365 = (__int128)v31;
    v359 = vaddq_f32(v82, vaddq_f32(v81, v80));
  }
  v369 = *(_QWORD *)(v12 + 48);
  v83.i64[0] = *(_QWORD *)(a7 + 16);
  v83.i64[1] = *(unsigned int *)(a7 + 24);
  v84 = *a4;
  v85.i64[0] = *(_QWORD *)(a6 + 16);
  v85.i64[1] = *(unsigned int *)(a6 + 24);
  v86 = vnegq_f32(*a4);
  v87 = vsubq_f32(v83, v85);
  v88 = v86;
  v88.i32[3] = 0;
  v329 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v89) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v329.f32, *(float32x2_t *)v329.f32).u32[0];
  v90 = vmulq_n_f32(v87, v89);
  v90.i32[3] = 0;
  v91 = (float32x2_t)vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u64[0];
  v92 = (float32x2_t)vext_s8(*(int8x8_t *)v86.f32, (int8x8_t)v91, 4uLL);
  v93 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v86.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 4uLL)), v92, *(float32x2_t *)v87.f32);
  *(int8x8_t *)v94.f32 = vext_s8(v93, (int8x8_t)vmls_f32(vmul_f32(v91, *(float32x2_t *)v87.f32), *(float32x2_t *)v86.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL)), 4uLL);
  v94.i64[1] = v93.u32[0];
  v95 = vmlaq_laneq_f32(v90, v94, *a4, 3);
  v95.i64[1] = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u32[0];
  v96 = vmulq_f32(v88, v87);
  v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
  v97 = vmlaq_n_f32(v95, v88, vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32).f32[0]);
  v98 = vaddq_f32(v97, v97);
  v98.i32[3] = 0;
  v99 = *(float32x4_t *)a5->i8;
  v99.i32[3] = 0;
  v100 = vmulq_f32(v99, v88);
  v101 = vmulq_laneq_f32(v99, *a4, 3);
  v99.i64[0] = vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL).u64[0];
  v102 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a5, *(int8x8_t *)v99.f32, 4uLL), *(float32x2_t *)v86.f32), v92, (float32x2_t)*a5);
  *(int8x8_t *)v103.f32 = vext_s8(v102, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a5, v91), *(float32x2_t *)v86.f32, *(float32x2_t *)v99.f32), 4uLL);
  *(int8x8_t *)&v103.u32[2] = v102;
  v104 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v88, *(float32x4_t *)a5->i8, 3), v101), v103);
  *(int32x2_t *)v86.f32 = vdup_lane_s32(*(int32x2_t *)v104.f32, 1);
  *(int32x2_t *)v88.f32 = vdup_laneq_s32((int32x4_t)v104, 2);
  v105 = (float32x2_t)vpaddq_f32(v100, v100).u64[0];
  v106 = vaddq_f32(v104, v104);
  *(int32x2_t *)v101.f32 = vdup_laneq_s32((int32x4_t)v106, 2);
  *(int32x2_t *)v104.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v106.f32), 0);
  *(float32x2_t *)v97.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a5->i8, *(int8x16_t *)a5->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL)), vpadd_f32(v105, v105));
  v107 = vmul_lane_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v106.f32, 1);
  v108 = vmul_laneq_f32(*(float32x2_t *)v88.f32, v106, 2);
  *(float32x2_t *)v86.f32 = vmul_n_f32(*(float32x2_t *)v86.f32, v106.f32[0]);
  v109 = vmul_n_f32(*(float32x2_t *)v88.f32, v106.f32[0]);
  *(float32x2_t *)v100.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.f32, 0), *(float32x2_t *)v97.f32, 1);
  *(float32x2_t *)v88.f32 = vmul_lane_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v106.f32, 1);
  *(float32x2_t *)v106.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.f32, 1), *(float32x2_t *)v97.f32, 1);
  *(float32x2_t *)v97.f32 = vmul_lane_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v97.f32, 1);
  *(int8x8_t *)v110.i8 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v107), v108), (int8x8_t)vadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v97.f32), 4uLL);
  v110.i64[1] = vsub_f32(v109, *(float32x2_t *)v106.f32).u32[0];
  *(float32x2_t *)v104.f32 = vsub_f32(_D8, *(float32x2_t *)v104.f32);
  *(int8x8_t *)v86.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v97.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v104.f32, v108), 4uLL);
  v86.i64[1] = vadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v100.f32).u32[0];
  *(int8x8_t *)v88.f32 = vext_s8((int8x8_t)vadd_f32(v109, *(float32x2_t *)v106.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v100.f32), 4uLL);
  v88.i64[1] = vsub_f32(*(float32x2_t *)v104.f32, v107).u32[0];
  *(int8x8_t *)v104.f32 = a5[2];
  v104.i64[1] = a5[3].u32[0];
  v97.i64[0] = a4[1].i64[0];
  v97.i64[1] = a4[1].u32[2];
  v350 = v110;
  v351 = (int32x4_t)v86;
  v330 = v85;
  v111 = v84;
  v111.i32[3] = 0;
  v325 = vsubq_f32(v104, v83);
  v112 = vsubq_f32(vsubq_f32(v97, v85), v325);
  v327 = v89;
  v328 = *(float32x2_t *)v84.f32;
  v113 = vmulq_n_f32(v112, v89);
  v113.i32[3] = 0;
  v324 = (float32x2_t)vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL).u64[0];
  v323 = (float32x2_t)vext_s8(*(int8x8_t *)v84.f32, (int8x8_t)v324, 4uLL);
  *(float32x2_t *)v97.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v84.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v112, (int8x16_t)v112, 4uLL)), v323, *(float32x2_t *)v112.f32);
  *(int8x8_t *)v86.f32 = vext_s8(*(int8x8_t *)v97.f32, (int8x8_t)vmls_f32(vmul_f32(v324, *(float32x2_t *)v112.f32), *(float32x2_t *)v84.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL)), 4uLL);
  v86.i64[1] = v97.u32[0];
  v114 = vmlsq_laneq_f32(v113, v86, v84, 3);
  v114.i64[1] = vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL).u32[0];
  v352 = v88;
  v353 = v98;
  v115 = vmulq_f32(v111, v112);
  v115.i64[0] = vpaddq_f32(v115, v115).u64[0];
  v326 = v111;
  v116 = vmlaq_n_f32(v114, v111, vpadd_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v115.f32).f32[0]);
  v117 = vaddq_f32(v116, v116);
  v346.i64[0] = (uint64_t)off_24ED91658;
  v346.i64[1] = a11;
  v347 = &v350;
  v118 = (float *)v348;
  v348[0] = v350;
  v349[0] = v88;
  v119 = (float *)v349;
  v120 = (float32x2x2_t)vzip1q_s32(v350, (int32x4_t)v88);
  v111.i64[0] = vzip2q_s32(v350, (int32x4_t)v88).u64[0];
  v121 = vzip1q_s32(v351, (int32x4_t)0);
  v100.i64[0] = vzip2q_s32(v351, (int32x4_t)0).u64[0];
  vst2_f32(v118, v120);
  v349[1] = v98;
  vst2_f32(v119, *(float32x2x2_t *)((char *)&v100 - 8));
  v348[1] = vzip2q_s32((int32x4_t)v120, v121);
  v344 = off_24ED91168;
  v345 = &v359;
  v357 = 1;
  v122 = vmulq_f32(v98, v98);
  v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
  v123 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v98, (int8x16_t)xmmword_2260E5F10);
  v124 = vmulq_f32(v123, v123);
  v124.i64[0] = vpaddq_f32(v124, v124).u64[0];
  v125 = vpadd_f32(*(float32x2_t *)v124.f32, *(float32x2_t *)v124.f32);
  v126 = vrsqrte_f32(v125);
  v127 = 4;
  do
  {
    v126 = vmul_f32(v126, vrsqrts_f32(vmul_f32(v126, v126), v125));
    --v127;
  }
  while (v127);
  v117.i32[3] = 0;
  v334 = v117;
  v128 = (int8x16_t)vmlaq_f32((float32x4_t)0, (float32x4_t)0, v117);
  v129 = vmul_f32(v125, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v125), 0), (int8x8_t)_D8, (int8x8_t)v126));
  v130 = vrecpe_f32(v129);
  v131 = 4;
  do
  {
    v130 = vmul_f32(v130, vrecps_f32(v129, v130));
    --v131;
  }
  while (v131);
  *(float *)&a2 = *(float *)&a2 + 0.0;
  v132 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0);
  v128.i64[1] = vextq_s8(v128, v128, 8uLL).u32[0];
  v338 = (float32x4_t)v128;
  v133 = vmulq_n_f32(v123, v130.f32[0]);
  v133.i32[3] = 0;
  v356 = v133;
  v134 = vnegq_f32(v133);
  v134.i32[3] = 0;
  v372 = v134;
  *(double *)v135.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(&v346, (float32x2_t *)&v372);
  v341 = v135;
  *(double *)v136.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support((uint64_t)&v344, &v356);
  v137 = v136;
  v138 = vsubq_f32(v341, v136);
  v372 = v138;
  v373 = 0u;
  v374 = 0u;
  v375 = 0u;
  v377 = v341;
  v378 = 0u;
  v139 = vnegq_f32(v138);
  v139.i32[3] = 0;
  v379 = 0u;
  v380 = 0u;
  v382 = v137;
  v383 = 0u;
  v384 = 0u;
  v385 = 0u;
  v140 = &v345[1].f32[2];
  *(float32x2_t *)v137.f32 = vld1_dup_f32(v140);
  v141 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  *(float32x2_t *)v137.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v137.f32, v141), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  v142 = vadd_f32(v132, *(float32x2_t *)v137.f32);
  v143 = vmul_f32(*(float32x2_t *)v137.f32, *(float32x2_t *)v137.f32);
  v144 = vmul_f32(v142, v142);
  v145 = vmulq_f32(v139, v139);
  v146 = vpaddq_f32(v145, v145);
  v147 = vpadd_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32);
  v322 = v143;
  *(int32x2_t *)v146.f32 = vcgt_f32(v147, v143);
  v148 = vdupq_lane_s32(*(int32x2_t *)v146.f32, 0);
  v146.i32[0] = -1;
  v321 = (int32x4_t)v146;
  v149 = (int8x16_t)v138;
  v150.i64[0] = -1;
  v150.i64[1] = -1;
  v332 = (int8x16_t)v139;
  v151 = v139;
  v335 = 0;
  while (1)
  {
    v152 = (int8x16_t)v138;
    v153.i64[0] = -1;
    v153.i64[1] = -1;
    *(int16x4_t *)v153.i8 = vmovn_s32(vceqq_s32(v148, v153));
    v154 = vuzp1_s8(*(int8x8_t *)v153.i8, *(int8x8_t *)v153.i8).u32[0];
    if (v154 != -1)
      break;
    v155 = vmulq_f32(v151, v151);
    v155.i64[0] = vpaddq_f32(v155, v155).u64[0];
    v156 = vpadd_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v155.f32);
    v157 = vrsqrte_f32(v156);
    v158 = 4;
    do
    {
      v157 = vmul_f32(v157, vrsqrts_f32(vmul_f32(v157, v157), v156));
      --v158;
    }
    while (v158);
    v339 = v152;
    v159 = vmul_f32(v156, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v156), 0), (int8x8_t)_D8, (int8x8_t)v157));
    v160 = vrecpe_f32(v159);
    v161 = 4;
    do
    {
      v160 = vmul_f32(v160, vrecps_f32(v159, v160));
      --v161;
    }
    while (v161);
    v337 = v151;
    v162 = vmulq_n_f32(v151, v160.f32[0]);
    v162.i32[3] = 0;
    v355 = v162;
    v163 = vnegq_f32(v162);
    v163.i32[3] = 0;
    v354 = v163;
    *(double *)v164.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(&v346, (float32x2_t *)&v355);
    v342 = v164;
    *(double *)v165.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support((uint64_t)&v344, &v354);
    v166 = v342;
    v167 = vaddq_f32(v338, v165);
    v138 = vsubq_f32(v342, v167);
    v168 = vnegq_f32(v138);
    v168.i32[3] = 0;
    v169 = vmulq_f32(v355, v168);
    v169.i64[0] = vpaddq_f32(v169, v169).u64[0];
    v170 = vsub_f32(vpadd_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v169.f32), v142);
    if (v170.f32[0] > 0.0)
    {
      v171 = vmulq_f32(v334, v355);
      v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
      v172 = vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32);
      if (v172.f32[0] >= 0.0)
        goto LABEL_85;
      v173 = vrecpe_f32(v172);
      v174 = 4;
      do
      {
        v173 = vmul_f32(v173, vrecps_f32(v172, v173));
        --v174;
      }
      while (v174);
      v175 = vsub_f32(v335, vmul_f32(v170, v173));
      if ((vcgt_f32(v175, v335).u8[0] & 1) != 0)
      {
        if (v175.f32[0] > 1.0)
        {
LABEL_85:
          v274 = 0;
          v272 = 0uLL;
          v276 = 0uLL;
          goto LABEL_91;
        }
        v176 = vmlaq_n_f32((float32x4_t)0, v334, v175.f32[0]);
        v176.i64[1] = vextq_s8((int8x16_t)v176, (int8x16_t)v176, 8uLL).u32[0];
        v336 = v176;
        v177 = vsubq_f32(v176, v338);
        v333 = v175;
        v382 = vaddq_f32(v177, v382);
        v383 = vaddq_f32(v177, v383);
        v384 = vaddq_f32(v177, v384);
        v372 = vsubq_f32(v377, v382);
        v373 = vsubq_f32(v378, v383);
        v374 = vsubq_f32(v379, v384);
        *(double *)v178.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support((uint64_t)&v344, &v354);
        v166 = v342;
        v167 = vaddq_f32(v336, v178);
        v138 = vsubq_f32(v342, v167);
        v147 = v141;
        v332 = (int8x16_t)v337;
        v338 = v336;
        v179 = v333;
      }
      else
      {
        v179 = v175;
      }
      v335 = v179;
    }
    v180 = v357;
    *(&v377 + v357) = v166;
    *(&v382 + v180) = v167;
    v357 = v180 + 1;
    *(&v372 + v180) = v138;
    if ((_DWORD)v180 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v372, &v377, &v382, (int *)&v357);
LABEL_42:
      v149 = v339;
      goto LABEL_76;
    }
    if ((_DWORD)v180 != 2)
    {
      v149 = v339;
      if ((_DWORD)v180 != 1)
        goto LABEL_76;
      v138 = v372;
      v181 = vsubq_f32(v373, v372);
      v182 = vmulq_f32(v181, v181);
      v182.i64[0] = vpaddq_f32(v182, v182).u64[0];
      v183 = vpadd_f32(*(float32x2_t *)v182.f32, *(float32x2_t *)v182.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v183), 0), *(int8x8_t *)v372.f32).u32[0] != -1)
      {
        v184 = vnegq_f32(v372);
        v184.i32[3] = 0;
        v185 = vmulq_f32(v184, v181);
        v185.i64[0] = vpaddq_f32(v185, v185).u64[0];
        v186 = vpadd_f32(*(float32x2_t *)v185.f32, *(float32x2_t *)v185.f32);
        v187 = vrecpe_f32(v183);
        v188 = 4;
        do
        {
          v187 = vmul_f32(v187, vrecps_f32(v183, v187));
          --v188;
        }
        while (v188);
        v138 = vmlaq_n_f32(v372, v181, vmax_f32(vmin_f32(vmul_f32(v186, v187), _D8), 0).f32[0]);
LABEL_57:
        v138.i64[1] = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u32[0];
        goto LABEL_76;
      }
LABEL_58:
      v357 = 1;
      goto LABEL_76;
    }
    v138 = v372;
    v189 = vsubq_f32(v373, v372);
    v190 = vsubq_f32(v374, v372);
    v192 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v189.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v190, (int8x16_t)v190, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v189, (int8x16_t)v189, 4uLL), *(float32x2_t *)v190.f32);
    *(int8x8_t *)v191.f32 = vext_s8(v192, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v189, (int8x16_t)v189, 8uLL), *(float32x2_t *)v190.f32), *(float32x2_t *)v189.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v190, (int8x16_t)v190, 8uLL)), 4uLL);
    v192.i32[1] = 0;
    v357 = 3;
    v193 = vpadd_f32(vmul_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32), vmul_f32((float32x2_t)v192.u32[0], (float32x2_t)v192.u32[0]));
    v194 = vpadd_f32(v193, v193);
    if (v194.f32[0] <= 0.00000011921)
    {
      v357 = 2;
      v231 = vmulq_f32(v189, v189);
      v231.i64[0] = vpaddq_f32(v231, v231).u64[0];
      v232 = vpadd_f32(*(float32x2_t *)v231.f32, *(float32x2_t *)v231.f32);
      v149 = v339;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v232), 0), *(int8x8_t *)v372.f32).u32[0] != -1)
      {
        v233 = vnegq_f32(v372);
        v233.i32[3] = 0;
        v234 = vmulq_f32(v233, v189);
        v234.i64[0] = vpaddq_f32(v234, v234).u64[0];
        v235 = vpadd_f32(*(float32x2_t *)v234.f32, *(float32x2_t *)v234.f32);
        v236 = vrecpe_f32(v232);
        v237 = 4;
        do
        {
          v236 = vmul_f32(v236, vrecps_f32(v232, v236));
          --v237;
        }
        while (v237);
        v138 = vmlaq_n_f32(v372, v189, vmax_f32(vmin_f32(vmul_f32(v235, v236), _D8), 0).f32[0]);
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    if (v194.f32[0] == 0.0)
    {
      v138 = 0uLL;
      goto LABEL_42;
    }
    *(int8x8_t *)&v191.u32[2] = v192;
    v195 = (float32x2_t)vextq_s8((int8x16_t)v373, (int8x16_t)v373, 8uLL).u64[0];
    v196 = (float32x2_t)vextq_s8((int8x16_t)v374, (int8x16_t)v374, 8uLL).u64[0];
    v197 = (float32x2_t)vextq_s8((int8x16_t)v374, (int8x16_t)v374, 4uLL).u64[0];
    v198 = (float32x2_t)vextq_s8((int8x16_t)v373, (int8x16_t)v373, 4uLL).u64[0];
    v199 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v373.f32, v197), v198, *(float32x2_t *)v374.f32);
    *(int8x8_t *)v200.f32 = vext_s8(v199, (int8x8_t)vmls_f32(vmul_f32(v195, *(float32x2_t *)v374.f32), *(float32x2_t *)v373.f32, v196), 4uLL);
    v200.i64[1] = v199.u32[0];
    v201 = (float32x2_t)vextq_s8((int8x16_t)v372, (int8x16_t)v372, 8uLL).u64[0];
    v202 = (float32x2_t)vextq_s8((int8x16_t)v372, (int8x16_t)v372, 4uLL).u64[0];
    v203 = (int8x8_t)vmls_f32(vmul_f32(v202, *(float32x2_t *)v374.f32), v197, *(float32x2_t *)v372.f32);
    *(int8x8_t *)v204.f32 = vext_s8(v203, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v372.f32, v196), *(float32x2_t *)v374.f32, v201), 4uLL);
    v204.i64[1] = v203.u32[0];
    v205 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v372.f32, v198), v202, *(float32x2_t *)v373.f32);
    *(int8x8_t *)v206.f32 = vext_s8(v205, (int8x8_t)vmls_f32(vmul_f32(v201, *(float32x2_t *)v373.f32), *(float32x2_t *)v372.f32, v195), 4uLL);
    v206.i64[1] = v205.u32[0];
    v207 = vmulq_f32(v200, v191);
    v207.i64[0] = vpaddq_f32(v207, v207).u64[0];
    v208 = vpadd_f32(*(float32x2_t *)v207.f32, *(float32x2_t *)v207.f32);
    v209 = vmulq_f32(v204, v191);
    v209.i64[0] = vpaddq_f32(v209, v209).u64[0];
    v210 = vpadd_f32(*(float32x2_t *)v209.f32, *(float32x2_t *)v209.f32);
    v211 = vmulq_f32(v206, v191);
    v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
    v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v210), (int8x8_t)vcgez_f32(v208)), (int8x8_t)vcgez_f32(v212)), 0), *(int8x8_t *)v372.f32).u32[0] != -1)
    {
      v213 = vnegq_f32(v372);
      v213.i32[3] = 0;
      v214 = vnegq_f32(v373);
      v214.i32[3] = 0;
      v215 = vmulq_f32(v213, v189);
      v215.i64[0] = vpaddq_f32(v215, v215).u64[0];
      v216 = vpadd_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32);
      v217 = vmulq_f32(v189, v214);
      v217.i64[0] = vpaddq_f32(v217, v217).u64[0];
      v218 = vpadd_f32(*(float32x2_t *)v217.f32, *(float32x2_t *)v217.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v216), (int8x8_t)vclez_f32(v218)), (int8x8_t)vclez_f32(v212)), 0), *(int8x8_t *)v372.f32).u32[0] == -1)
      {
        v241 = vsub_f32(v216, v218);
        v242 = vrecpe_f32(v241);
        v243 = 4;
        do
        {
          v242 = vmul_f32(v242, vrecps_f32(v241, v242));
          --v243;
        }
        while (v243);
        v230 = 0;
        v138 = vmlaq_n_f32(v372, v189, vmul_f32(v216, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v241), (float32x2_t)0x3400000034000000), (int8x8_t)v242, 0)).f32[0]);
        v138.i64[1] = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u32[0];
        v244 = 2;
        v229 = 1;
      }
      else
      {
        v219 = vnegq_f32(v374);
        v219.i32[3] = 0;
        v220 = vmulq_f32(v214, v190);
        v220.i64[0] = vpaddq_f32(v220, v220).u64[0];
        v221 = vpadd_f32(*(float32x2_t *)v220.f32, *(float32x2_t *)v220.f32);
        v222 = vmulq_f32(v189, v219);
        v222.i64[0] = vpaddq_f32(v222, v222).u64[0];
        v223 = vpadd_f32(*(float32x2_t *)v222.f32, *(float32x2_t *)v222.f32);
        v224 = vmulq_f32(v190, v219);
        v224.i64[0] = vpaddq_f32(v224, v224).u64[0];
        v225 = vpadd_f32(*(float32x2_t *)v224.f32, *(float32x2_t *)v224.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v221, v218), (int8x8_t)vcge_f32(v223, v225)), (int8x8_t)vclez_f32(v208)), 0), *(int8x8_t *)v372.f32).u32[0] != -1)
        {
          v226 = vmulq_f32(v213, v190);
          v226.i64[0] = vpaddq_f32(v226, v226).u64[0];
          v227 = vpadd_f32(*(float32x2_t *)v226.f32, *(float32x2_t *)v226.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v227), (int8x8_t)vclez_f32(v225)), (int8x8_t)vclez_f32(v210)), 0), *(int8x8_t *)v372.f32).u32[0] == -1)
          {
            v250 = vsub_f32(v227, v225);
            v251 = vrecpe_f32(v250);
            v252 = 4;
            v149 = v339;
            do
            {
              v251 = vmul_f32(v251, vrecps_f32(v250, v251));
              --v252;
            }
            while (v252);
            v230 = 0;
            v138 = vmlaq_n_f32(v372, v190, vmul_f32(v227, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v250), (float32x2_t)0x3400000034000000), (int8x8_t)v251, 0)).f32[0]);
            v138.i64[1] = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u32[0];
            v229 = 2;
          }
          else
          {
            v149 = v339;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v227), (int8x8_t)vclez_f32(v216)), 0), *(int8x8_t *)v372.f32).u32[0] == -1)
            {
              v230 = 0;
              v229 = 1;
            }
            else
            {
              *(int16x4_t *)v138.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v218, v221), (int8x8_t)vcgez_f32(v218)), 0);
              *(int8x8_t *)v138.f32 = vuzp1_s8(*(int8x8_t *)v138.f32, *(int8x8_t *)v138.f32);
              v228 = v138.i32[0];
              v138 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v138, v321), 0), (int8x16_t)v373, (int8x16_t)v374);
              v229 = 1;
              if (v228 == -1)
                v230 = 1;
              else
                v230 = 2;
            }
          }
          v244 = v229;
          goto LABEL_75;
        }
        v245 = vsub_f32(v221, v218);
        v246 = vadd_f32(v245, vsub_f32(v223, v225));
        v247 = vrecpe_f32(v246);
        v248 = 4;
        do
        {
          v247 = vmul_f32(v247, vrecps_f32(v246, v247));
          --v248;
        }
        while (v248);
        v249 = (int8x16_t)vmlaq_n_f32(v373, vsubq_f32(v374, v373), vmul_f32(v245, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v246), (float32x2_t)0x3400000034000000), (int8x8_t)v247, 0)).f32[0]);
        v249.i64[1] = vextq_s8(v249, v249, 8uLL).u32[0];
        v244 = 2;
        v229 = 2;
        v230 = 1;
        v138 = (float32x4_t)v249;
      }
      v149 = v339;
LABEL_75:
      v253 = *(&v372 + v229);
      v254 = *(&v377 + v230);
      v255 = *(&v377 + v229);
      v256 = *(&v382 + v230);
      v257 = *(&v382 + v229);
      v372 = *(&v372 + v230);
      v373 = v253;
      v377 = v254;
      v378 = v255;
      v382 = v256;
      v383 = v257;
      v357 = v244;
      goto LABEL_76;
    }
    v238 = vrecpe_f32(v194);
    v239 = 4;
    v149 = v339;
    do
    {
      v238 = vmul_f32(v238, vrecps_f32(v194, v238));
      --v239;
    }
    while (v239);
    v240 = vmulq_f32(v372, v191);
    v240.i64[0] = vpaddq_f32(v240, v240).u64[0];
    v138 = vmulq_n_f32(v191, vmul_f32(v238, vpadd_f32(*(float32x2_t *)v240.f32, *(float32x2_t *)v240.f32)).f32[0]);
    v138.i32[3] = 0;
LABEL_76:
    v151 = vnegq_f32(v138);
    v151.i32[3] = 0;
    v258 = vmulq_f32(v138, v138);
    v258.i64[0] = vpaddq_f32(v258, v258).u64[0];
    v259 = vpadd_f32(*(float32x2_t *)v258.f32, *(float32x2_t *)v258.f32);
    v260 = (int8x8_t)vcgt_f32(v147, v259);
    v150 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v260, (int8x8_t)0x100000001), 0);
    v148 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v259, v144), v260), 0);
    v147 = v259;
  }
  v261 = v346.i64[1];
  v262 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v147, v322), 0), v150), 0x1FuLL)), (int8x16_t)v151, v332);
  v263 = vmulq_f32(v262, v262);
  v263.i64[0] = vpaddq_f32(v263, v263).u64[0];
  v264 = vpadd_f32(*(float32x2_t *)v263.f32, *(float32x2_t *)v263.f32);
  v265 = vrsqrte_f32(v264);
  v266 = 4;
  do
  {
    v265 = vmul_f32(v265, vrsqrts_f32(vmul_f32(v265, v265), v264));
    --v266;
  }
  while (v266);
  v267 = vmul_f32(v264, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v264), 0), (int8x8_t)_D8, (int8x8_t)v265));
  v268 = vrecpe_f32(v267);
  v269 = 4;
  do
  {
    v268 = vmul_f32(v268, vrecps_f32(v267, v268));
    --v269;
  }
  while (v269);
  v270 = (int8x16_t)vdupq_n_s32(-*(char *)(v346.i64[1] + 32));
  v271 = (int8x16_t)vmulq_n_f32(v262, v268.f32[0]);
  v271.i32[3] = 0;
  v272 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v267), 0), v271));
  v272.i32[3] = 0;
  v273 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v150, 0x1FuLL)), v152, v149);
  v355 = v273;
  v274 = v335;
  if (v357 == 3)
  {
    v354.i64[0] = 0;
    v358 = 0;
    v340 = v270;
    v343 = v272;
    physx::Gu::barycentricCoordinates(&v355, &v372, &v373, &v374, (float32x2_t *)&v354, &v358);
    v270 = v340;
    v272 = v343;
    v274 = v335;
    v150.i32[1] = v377.i32[1];
    v277 = vmulq_n_f32(vsubq_f32(v378, v377), v354.f32[0]);
    v277.i32[3] = 0;
    v278 = vmulq_n_f32(vsubq_f32(v379, v377), v358.f32[0]);
    v278.i32[3] = 0;
    v275 = vaddq_f32(v377, vaddq_f32(v277, v278));
  }
  else if (v357 == 2)
  {
    v279 = vsubq_f32(v372, v273);
    v280 = vsubq_f32(vsubq_f32(v373, v273), v279);
    v281 = vmulq_f32(v280, v280);
    v281.i64[0] = vpaddq_f32(v281, v281).u64[0];
    v282 = vpadd_f32(*(float32x2_t *)v281.f32, *(float32x2_t *)v281.f32);
    v283 = vrecpe_f32(v282);
    v284 = 4;
    do
    {
      v283 = vmul_f32(v283, vrecps_f32(v282, v283));
      --v284;
    }
    while (v284);
    v285 = vnegq_f32(v279);
    v285.i32[3] = 0;
    v286 = vmulq_f32(v285, v280);
    v286.i64[0] = vpaddq_f32(v286, v286).u64[0];
    v275 = vmlaq_n_f32(v377, vsubq_f32(v378, v377), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v282), (int8x8_t)v283, 0), vpadd_f32(*(float32x2_t *)v286.f32, *(float32x2_t *)v286.f32)).f32[0]);
    v150.i32[1] = 0;
    v275.i64[1] = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u32[0];
  }
  else
  {
    v275 = 0uLL;
    if (v357 == 1)
      v275 = v377;
  }
  v150.i32[0] = *(_DWORD *)(v261 + 16);
  v287 = (int8x16_t)vmlsq_lane_f32(v275, v272, *(float32x2_t *)v150.i8, 0);
  v287.i64[1] = vextq_s8(v287, v287, 8uLL).u32[0];
  v276 = (float32x4_t)vbslq_s8(v270, v287, (int8x16_t)v275);
LABEL_91:
  if (v154 == -1)
  {
    v274.i32[0] = 2139095039;
  }
  else
  {
    if (v274.f32[0] == 0.0)
    {
      v276.i32[0] = *(_DWORD *)(v346.i64[1] + 16);
      v288 = (uint64_t)v345;
      v289 = v345[1].f32[0];
      v354.i8[0] = 0;
      v381 = 0;
      v377 = 0u;
      v378 = 0u;
      v379 = 0u;
      v372.i64[1] = v346.i64[1];
      v372.i64[0] = (uint64_t)off_24ED91658;
      v373.i64[0] = (uint64_t)v347;
      v291 = (float32x2x2_t)v347[2];
      v290 = (float32x4_t)v347[3];
      v292 = *v347;
      v375 = v347[1];
      v376[0] = v291;
      v374 = (float32x4_t)v292;
      v293 = (float32x2x2_t)vzip1q_s32(v292, (int32x4_t)v291);
      v291.val[0] = (float32x2_t)vzip2q_s32(v292, (int32x4_t)v291).u64[0];
      v294 = vzip1q_s32(v375, (int32x4_t)0);
      v295 = vzip2q_s32(v375, (int32x4_t)0).u64[0];
      v276.f32[0] = (float)(v276.f32[0] + v289) * 100.0;
      v296 = &v374;
      v297 = (float *)v376;
      vst2_f32(v296->f32, v293);
      v376[1] = v290;
      v375 = vzip2q_s32((int32x4_t)v293, v294);
      vst2_f32(v297, v291);
      v382.i64[0] = (uint64_t)off_24ED91168;
      v382.i64[1] = v288;
      if (physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v372, (uint64_t)&v382, &v356, &v355, &v354, (uint64_t)&v377, v353, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v276.f32, 0), 0.0, v290) != 5)goto LABEL_95;
      __asm { FMOV            V8.2S, #1.0 }
      if (physx::Gu::epaPenetration((uint64_t)&v346) - 5 >= 2)
      {
        v299 = vnegq_f32(v334);
        v299.i32[3] = 0;
        v300 = vmulq_f32(v299, v299);
        v300.i64[0] = vpaddq_f32(v300, v300).u64[0];
        v301 = vpadd_f32(*(float32x2_t *)v300.f32, *(float32x2_t *)v300.f32);
        v302 = vrsqrte_f32(v301);
        v303 = 4;
        do
        {
          v302 = vmul_f32(v302, vrsqrts_f32(vmul_f32(v302, v302), v301));
          --v303;
        }
        while (v303);
        v304 = vmul_f32(v301, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v301), 0), _D8, (int8x8_t)v302));
        v305 = vrecpe_f32(v304);
        v306 = 4;
        do
        {
          v305 = vmul_f32(v305, vrecps_f32(v304, v305));
          --v306;
        }
        while (v306);
        v272 = vmulq_n_f32(v299, v305.f32[0]);
        v272.i32[3] = 0;
        v274 = 0;
        v276 = 0uLL;
      }
      else
      {
LABEL_95:
        v272 = v379;
        v276 = v377;
        v274 = vmin_f32(v381, 0);
      }
    }
    v307 = vmulq_n_f32(v276, v327);
    v307.i32[3] = 0;
    v308 = (int8x8_t)vmls_f32(vmul_f32(v328, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v276, (int8x16_t)v276, 4uLL)), v323, *(float32x2_t *)v276.f32);
    *(int8x8_t *)v309.f32 = vext_s8(v308, (int8x8_t)vmls_f32(vmul_f32(v324, *(float32x2_t *)v276.f32), v328, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v276, (int8x16_t)v276, 8uLL)), 4uLL);
    v309.i64[1] = v308.u32[0];
    v310 = vmlaq_f32(v307, v329, v309);
    v310.i64[1] = vextq_s8((int8x16_t)v310, (int8x16_t)v310, 8uLL).u32[0];
    v311 = vmulq_f32(v326, v276);
    v311.i64[0] = vpaddq_f32(v311, v311).u64[0];
    v312 = vmlaq_n_f32(v310, v326, vpadd_f32(*(float32x2_t *)v311.f32, *(float32x2_t *)v311.f32).f32[0]);
    v312.i64[1] = vextq_s8((int8x16_t)v312, (int8x16_t)v312, 8uLL).u32[0];
    v309.i64[0] = 0x4000000040000000;
    v309.i64[1] = 0x4000000040000000;
    v313 = vmlaq_f32(v330, v309, v312);
    v313.i64[1] = vextq_s8((int8x16_t)v313, (int8x16_t)v313, 8uLL).u32[0];
    v314 = vmlaq_n_f32(v313, v325, vmax_f32(v274, 0).f32[0]);
    v315 = vmulq_n_f32(v272, v327);
    v315.i32[3] = 0;
    *(float32x2_t *)v309.f32 = vmls_f32(vmul_f32(v328, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v272, (int8x16_t)v272, 4uLL)), v323, *(float32x2_t *)v272.f32);
    *(int8x8_t *)v312.f32 = vext_s8(*(int8x8_t *)v309.f32, (int8x8_t)vmls_f32(vmul_f32(v324, *(float32x2_t *)v272.f32), v328, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v272, (int8x16_t)v272, 8uLL)), 4uLL);
    v312.i64[1] = v309.u32[0];
    v316 = vmlaq_f32(v315, v329, v312);
    v316.i64[1] = vextq_s8((int8x16_t)v316, (int8x16_t)v316, 8uLL).u32[0];
    v317 = vmulq_f32(v326, v272);
    v317.i64[0] = vpaddq_f32(v317, v317).u64[0];
    v318 = vmlaq_n_f32(v316, v326, vpadd_f32(*(float32x2_t *)v317.f32, *(float32x2_t *)v317.f32).f32[0]);
    v319 = vaddq_f32(v318, v318);
    *(_QWORD *)a8 = v319.i64[0];
    *(_DWORD *)(a8 + 8) = v319.i32[2];
    *(_QWORD *)a9 = v314.i64[0];
    *(_DWORD *)(a9 + 8) = v314.i32[2];
  }
  return v274.f32[0];
}

float32x2_t physx::Gu::barycentricCoordinates(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x2_t *a5, float32x2_t *a6)
{
  int8x16_t v6;
  int8x16_t v7;
  int8x8_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  int8x8_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  int8x8_t v19;
  int8x8_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int v26;
  float32x2_t v27;
  float32x2_t result;

  v6 = (int8x16_t)vsubq_f32(*a3, *a2);
  v7 = (int8x16_t)vsubq_f32(*a4, *a2);
  v8 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v6.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 4uLL), *(float32x2_t *)v7.i8);
  *(int8x8_t *)v6.i8 = vext_s8(v8, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL), *(float32x2_t *)v7.i8), *(float32x2_t *)v6.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), 4uLL);
  v9 = (int8x16_t)vsubq_f32(*a2, *a1);
  v10 = (int8x16_t)vsubq_f32(*a3, *a1);
  v11 = (int8x16_t)vsubq_f32(*a4, *a1);
  v7.i64[0] = vextq_s8(v10, v10, 8uLL).u64[0];
  v12 = (float32x2_t)vextq_s8(v11, v11, 8uLL).u64[0];
  v13 = (float32x2_t)vextq_s8(v11, v11, 4uLL).u64[0];
  v14 = (float32x2_t)vextq_s8(v10, v10, 4uLL).u64[0];
  v15 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v10.i8, v13), v14, *(float32x2_t *)v11.i8);
  v16 = (float32x2_t)vext_s8(v15, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v11.i8), *(float32x2_t *)v10.i8, v12), 4uLL);
  v17 = (float32x2_t)vextq_s8(v9, v9, 8uLL).u64[0];
  v18 = (float32x2_t)vextq_s8(v9, v9, 4uLL).u64[0];
  v19 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v11.i8, v18), v13, *(float32x2_t *)v9.i8);
  *(int8x8_t *)v11.i8 = vext_s8(v19, (int8x8_t)vmls_f32(vmul_f32(v12, *(float32x2_t *)v9.i8), *(float32x2_t *)v11.i8, v17), 4uLL);
  v20 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v9.i8, v14), v18, *(float32x2_t *)v10.i8);
  *(int8x8_t *)v9.i8 = vext_s8(v20, (int8x8_t)vmls_f32(vmul_f32(v17, *(float32x2_t *)v10.i8), *(float32x2_t *)v9.i8, *(float32x2_t *)v7.i8), 4uLL);
  *(float32x2_t *)v10.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v6.i8, v16), vmul_f32((float32x2_t)v8.u32[0], (float32x2_t)v15.u32[0]));
  *(float32x2_t *)v7.i8 = vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8);
  *(float32x2_t *)v10.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v11.i8), vmul_f32((float32x2_t)v8.u32[0], (float32x2_t)v19.u32[0]));
  v21 = vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8);
  v22 = vpadd_f32(vmul_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v9.i8), vmul_f32((float32x2_t)v8.u32[0], (float32x2_t)v20.u32[0]));
  v23 = vpadd_f32(v22, v22);
  v24 = vadd_f32(*(float32x2_t *)v7.i8, vadd_f32(v21, v23));
  v25 = vrecpe_f32(v24);
  v26 = 4;
  do
  {
    v25 = vmul_f32(v25, vrecps_f32(v24, v25));
    --v26;
  }
  while (v26);
  v27 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vceqz_f32(v24)), 0), (int8x8_t)v25);
  *a5 = vmul_f32(v21, v27);
  result = vmul_f32(v23, v27);
  *a6 = result;
  return result;
}

uint64_t physx::Gu::SeparatingAxes::addAxis(_DWORD *a1, float *a2)
{
  unsigned int v2;
  float *v3;
  float v4;
  float v5;
  float v6;
  float *v7;
  float *v8;

  v3 = (float *)(a1 + 1);
  v2 = *a1;
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  if (*a1)
  {
    v7 = &v3[3 * v2];
    while (fabsf((float)((float)(v5 * v3[1]) + (float)(v4 * *v3)) + (float)(v6 * v3[2])) <= 0.9999)
    {
      v3 += 3;
      if (v3 >= v7)
      {
        if (v2 <= 0xFF)
          goto LABEL_6;
        return 0;
      }
    }
    return 0;
  }
  else
  {
LABEL_6:
    *a1 = v2 + 1;
    v8 = (float *)&a1[3 * v2];
    v8[1] = v4;
    v8[2] = v5;
    v8[3] = v6;
    return 1;
  }
}

BOOL physx::Gu::contactBoxBox(float *a1, float *a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float *v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  int v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  uint64_t v94;
  int v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  int Contacts;
  BOOL v111;
  _BOOL8 result;
  char v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float *v160;
  uint64_t v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  _DWORD v197[12];
  _DWORD v198[12];
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220[3];
  float v221;
  float v222;
  float v223;
  uint64_t v224;

  v224 = *MEMORY[0x24BDAC8D0];
  v8 = *a3;
  v9 = a3[1];
  v10 = a3[2];
  v11 = a3[3];
  v12 = v9 + v9;
  v13 = v10 + v10;
  v14 = v9 * (float)(v9 + v9);
  v15 = v10 * (float)(v10 + v10);
  v16 = (float)(v8 + v8) * v9;
  v17 = (float)(v8 + v8) * v10;
  v18 = (float)(v8 + v8) * v11;
  v19 = v12 * v10;
  v20 = v12 * v11;
  v21 = v13 * v11;
  v22 = (float)(1.0 - v14) - v15;
  v23 = v16 + v21;
  v24 = v17 - v20;
  v25 = v16 - v21;
  v26 = 1.0 - (float)(v8 * (float)(v8 + v8));
  v27 = v26 - v15;
  v28 = v19 + v18;
  v194 = v17 + v20;
  v195 = v19 - v18;
  v196 = v26 - v14;
  v29 = a3[6];
  v30 = *a4;
  v31 = a4[1];
  v32 = a4[2];
  v33 = a4[3];
  v34 = v31 + v31;
  v35 = v32 + v32;
  v36 = v31 * (float)(v31 + v31);
  v37 = v32 * (float)(v32 + v32);
  v38 = (float)(v30 + v30) * v31;
  v39 = (float)(v30 + v30) * v32;
  v40 = (float)(v30 + v30) * v33;
  v41 = v34 * v32;
  v42 = v34 * v33;
  v43 = v35 * v33;
  v44 = (float)(1.0 - v36) - v37;
  v45 = v38 + v43;
  v46 = v39 - v42;
  v47 = v38 - v43;
  v48 = 1.0 - (float)(v30 * (float)(v30 + v30));
  v49 = v48 - v37;
  v50 = v41 + v40;
  v51 = v39 + v42;
  v52 = v41 - v40;
  v53 = v48 - v36;
  v55 = a4[4];
  v54 = a4[5];
  v56 = a4[6];
  v57 = a3[4];
  v58 = a3[5];
  v59 = (float)((float)(v23 * (float)(v48 - v37)) + (float)(v22 * v47)) + (float)(v24 * (float)(v41 + v40));
  v193 = v54 - v58;
  v60 = v55 - v57;
  v61 = v56 - v29;
  v62 = (float)((float)(v23 * (float)(v54 - v58)) + (float)(v22 * (float)(v55 - v57)))
      + (float)(v24 * (float)(v56 - v29));
  v183 = (float)((float)(v23 * v45) + (float)(v22 * v44)) + (float)(v24 * v46);
  v63 = fabsf(v183) + 0.000001;
  v181 = (float)((float)(v23 * v52) + (float)(v22 * v51)) + (float)(v24 * v53);
  v182 = v59;
  v64 = fabsf(v59) + 0.000001;
  v65 = a1 + 1;
  v66 = a2[1];
  v67 = a2[2];
  v191 = fabsf(v181) + 0.000001;
  v192 = a1[1];
  v68 = a2[3];
  v69 = v28;
  v70 = *a5;
  v214 = *a5
       + (float)((float)((float)((float)(v192 + (float)(v66 * v63)) + (float)(v67 * v64)) + (float)(v68 * v191))
               - fabsf(v62));
  v71 = *(unsigned __int8 *)(a6 + 10);
  v187 = v22;
  v188 = v23;
  *(float *)v198 = v22;
  *(float *)&v198[1] = v23;
  v189 = v24;
  v190 = v29;
  *(float *)&v198[2] = v24;
  *(float *)&v198[3] = v25;
  *(float *)&v198[4] = v27;
  *(float *)&v198[5] = v69;
  *(float *)&v198[6] = v194;
  *(float *)&v198[7] = v195;
  *(float *)&v198[8] = v196;
  *(float *)&v198[9] = v57;
  *(float *)&v198[10] = v58;
  *(float *)&v198[11] = v29;
  *(float *)v197 = v44;
  *(float *)&v197[1] = v45;
  *(float *)&v197[2] = v46;
  *(float *)&v197[3] = v47;
  *(float *)&v197[4] = v49;
  *(float *)&v197[5] = v50;
  *(float *)&v197[6] = v51;
  *(float *)&v197[7] = v52;
  *(float *)&v197[8] = v53;
  *(float *)&v197[9] = v55;
  v184 = v55;
  v185 = v54;
  *(float *)&v197[10] = v54;
  *(float *)&v197[11] = v56;
  v186 = v56;
  v220[0] = v62;
  if (v214 < 0.0)
    goto LABEL_26;
  v72 = v57;
  v177 = v69;
  v73 = (float)((float)(v27 * v193) + (float)(v25 * v60)) + (float)(v69 * v61);
  v175 = v58;
  v176 = (float)((float)(v27 * v45) + (float)(v25 * v44)) + (float)(v69 * v46);
  v74 = fabsf(v176) + 0.000001;
  v174 = (float)((float)(v27 * v49) + (float)(v25 * v47)) + (float)(v69 * v50);
  v75 = fabsf(v174) + 0.000001;
  v220[1] = v73;
  v180 = a1[2];
  v178 = fabsf((float)((float)(v27 * v52) + (float)(v25 * v51)) + (float)(v69 * v53)) + 0.000001;
  v215 = v70
       + (float)((float)((float)((float)(v180 + (float)(v66 * v74)) + (float)(v67 * v75)) + (float)(v68 * v178))
               - fabsf(v73));
  if (v215 < 0.0)
    goto LABEL_26;
  v76 = v74;
  v77 = v75;
  v78 = v44;
  v169 = (float)((float)(v27 * v52) + (float)(v25 * v51)) + (float)(v69 * v53);
  v170 = v25;
  v179 = v67;
  v173 = v53;
  v171 = v27;
  v172 = v52;
  v79 = (float)((float)(v195 * v193) + (float)(v194 * v60)) + (float)(v196 * v61);
  v80 = (float)((float)(v195 * v45) + (float)(v194 * v44)) + (float)(v196 * v46);
  v81 = fabsf(v80) + 0.000001;
  v82 = (float)((float)(v195 * v49) + (float)(v194 * v47)) + (float)(v196 * v50);
  v83 = fabsf(v82) + 0.000001;
  v84 = (float)((float)(v195 * v52) + (float)(v194 * v51)) + (float)(v196 * v53);
  v85 = fabsf(v84) + 0.000001;
  v220[2] = v79;
  v86 = a1[3];
  v216 = v70
       + (float)((float)((float)((float)(v86 + (float)(v66 * v81)) + (float)(v67 * v83)) + (float)(v68 * v85))
               - fabsf(v79));
  if (v216 < 0.0)
    goto LABEL_26;
  v167 = v66;
  v168 = v68;
  v87 = v85;
  v221 = (float)((float)(v45 * v193) + (float)(v78 * v60)) + (float)(v46 * v61);
  v88 = v192;
  v89 = v66 + (float)(v192 * v63);
  v90 = v180;
  v217 = v70 + (float)((float)((float)(v89 + (float)(v180 * v76)) + (float)(v86 * v81)) - fabsf(v221));
  if (v217 < 0.0)
    goto LABEL_26;
  v222 = (float)((float)(v49 * v193) + (float)(v47 * v60)) + (float)(v50 * v61);
  v218 = v70
       + (float)((float)((float)((float)(v67 + (float)(v192 * v64)) + (float)(v180 * v77)) + (float)(v86 * v83))
               - fabsf(v222));
  if (v218 < 0.0)
    goto LABEL_26;
  v91 = v172;
  v223 = (float)((float)(v172 * v193) + (float)(v51 * v60)) + (float)(v173 * v61);
  v219 = v70
       + (float)((float)((float)((float)(v168 + (float)(v192 * v191)) + (float)(v180 * v178)) + (float)(v86 * v87))
               - fabsf(v223));
  if (v219 < 0.0)
    goto LABEL_26;
  if (v71)
  {
    v92 = v51;
    *(&v214 + (v71 - 1)) = *(&v214 + (v71 - 1)) * 0.999;
    v93 = v177;
    goto LABEL_9;
  }
  if (fabsf((float)(v79 * v176) - (float)(v73 * v80)) > (float)((float)((float)((float)(v70 + (float)(v180 * v81))
                                                                               + (float)(v86 * v76))
                                                                       + (float)(v67 * v191))
                                                               + (float)(v168 * v64))
    || fabsf((float)(v82 * (float)-v73) + (float)(v79 * v174)) > (float)((float)((float)((float)(v70
                                                                                               + (float)(v180 * v83))
                                                                                       + (float)(v86 * v77))
                                                                               + (float)(v167 * v191))
                                                                       + (float)(v168 * v63))
    || fabsf((float)(v84 * (float)-v73) + (float)(v79 * v169)) > (float)((float)((float)((float)(v70
                                                                                               + (float)(v180 * v87))
                                                                                       + (float)(v86 * v178))
                                                                               + (float)(v167 * v64))
                                                                       + (float)(v67 * v63))
    || fabsf((float)(v62 * v80) - (float)(v79 * v183)) > (float)((float)((float)((float)(v70 + (float)(v192 * v81))
                                                                               + (float)(v86 * v63))
                                                                       + (float)(v67 * v178))
                                                               + (float)(v168 * v77))
    || fabsf((float)(v182 * (float)-v79) + (float)(v62 * v82)) > (float)((float)((float)((float)(v70
                                                                                               + (float)(v192 * v83))
                                                                                       + (float)(v86 * v64))
                                                                               + (float)(v167 * v178))
                                                                       + (float)(v168 * v76))
    || fabsf((float)(v181 * (float)-v79) + (float)(v62 * v84)) > (float)((float)((float)((float)(v70
                                                                                               + (float)(v192 * v87))
                                                                                       + (float)(v86 * v191))
                                                                               + (float)(v167 * v77))
                                                                       + (float)(v67 * v76))
    || fabsf((float)(v73 * v183) - (float)(v62 * v176)) > (float)((float)((float)((float)(v70 + (float)(v192 * v76))
                                                                                + (float)(v180 * v63))
                                                                        + (float)(v67 * v87))
                                                                + (float)(v168 * v83))
    || fabsf((float)(v174 * (float)-v62) + (float)(v73 * v182)) > (float)((float)((float)((float)(v70
                                                                                                + (float)(v192 * v77))
                                                                                        + (float)(v180 * v64))
                                                                                + (float)(v167 * v87))
                                                                        + (float)(v168 * v81))
    || (v88 = v192,
        v109 = fabsf((float)(v169 * (float)-v62) + (float)(v73 * v181)),
        v91 = v172,
        v92 = v51,
        v93 = v177,
        v90 = v180,
        v109 > (float)((float)((float)((float)(v70 + (float)(v192 * v178)) + (float)(v180 * v191)) + (float)(v167 * v83))
                     + (float)(v67 * v81))))
  {
    LOBYTE(v71) = 0;
LABEL_26:
    Contacts = 0;
    goto LABEL_27;
  }
LABEL_9:
  v94 = 0;
  v95 = 0;
  v96 = 3.4028e38;
  do
  {
    if (*(&v214 + v94) >= 0.0 && *(&v214 + v94) < v96)
    {
      v96 = *(&v214 + v94);
      v95 = v94;
    }
    ++v94;
  }
  while (v94 != 6);
  v97 = v220[v95];
  switch(v95)
  {
    case 0:
      v98 = v57;
      if (v97 >= 0.0)
      {
        v100 = -v187;
        v99 = -v188;
        v101 = -v189;
        v108 = -v170;
        v107 = -v171;
        v93 = -v93;
        v102 = v98 + (float)(v187 * v88);
        v103 = v58 + (float)(v188 * v88);
        v104 = v190 + (float)(v189 * v88);
        v106 = v195;
        v105 = v196;
      }
      else
      {
        v100 = v187;
        v99 = v188;
        v101 = v189;
        v102 = v57 - (float)(v187 * v88);
        v103 = v58 - (float)(v188 * v88);
        v104 = v190 - (float)(v189 * v88);
        v106 = v195;
        v105 = v196;
        v108 = v170;
        v107 = v171;
      }
      v121 = v70;
      v199 = v100;
      v200 = v99;
      v201 = v101;
      v202 = v100;
      v203 = v99;
      v204 = v101;
      v205 = v108;
      v206 = v107;
      v207 = v93;
      v208 = v194;
      v209 = v106;
      v210 = v105;
      v211 = v102;
      v212 = v103;
      v213 = v104;
      v160 = (float *)v197;
      v161 = a7;
      v162 = v180;
      v163 = v86;
      goto LABEL_48;
    case 1:
      v208 = v187;
      v209 = v188;
      v210 = v189;
      if (v97 >= 0.0)
      {
        v164 = v170 * v90;
        v115 = -v170;
        v165 = v171 * v90;
        v114 = -v171;
        v166 = v93 * v90;
        v93 = -v93;
        v122 = -v194;
        v120 = -v195;
        v119 = -v196;
        v116 = v57 + v164;
        v117 = v175 + v165;
        v118 = v190 + v166;
        v121 = v70;
      }
      else
      {
        v115 = v170;
        v114 = v171;
        v116 = v57 - (float)(v170 * v90);
        v117 = v58 - (float)(v171 * v90);
        v118 = v190 - (float)(v93 * v90);
        v120 = v195;
        v119 = v196;
        v121 = v70;
        v122 = v194;
      }
      v199 = v115;
      v200 = v114;
      v201 = v93;
      v202 = v115;
      v203 = v114;
      v204 = v93;
      v205 = v122;
      v206 = v120;
      v207 = v119;
      v211 = v116;
      v212 = v117;
      v213 = v118;
      v160 = (float *)v197;
      v161 = a7;
      v162 = v86;
      v163 = v88;
      goto LABEL_48;
    case 2:
      v208 = v170;
      v209 = v171;
      v210 = v93;
      if (v97 >= 0.0)
      {
        v124 = -v194;
        v123 = -v195;
        v125 = -v196;
        v131 = -v187;
        v130 = -v188;
        v128 = -v189;
        v126 = v72 + (float)(v194 * v86);
        v127 = v58 + (float)(v195 * v86);
        v129 = v190 + (float)(v196 * v86);
        v90 = v180;
      }
      else
      {
        v124 = v194;
        v123 = v195;
        v125 = v196;
        v126 = v72 - (float)(v194 * v86);
        v127 = v58 - (float)(v195 * v86);
        v128 = v189;
        v129 = v190 - (float)(v196 * v86);
        v131 = v187;
        v130 = v188;
      }
      v121 = v70;
      v199 = v124;
      v200 = v123;
      v201 = v125;
      v202 = v124;
      v203 = v123;
      v204 = v125;
      v205 = v131;
      v206 = v130;
      v207 = v128;
      v211 = v126;
      v212 = v127;
      v213 = v129;
      v160 = (float *)v197;
      v161 = a7;
      v162 = v88;
      v163 = v90;
LABEL_48:
      v65 = a2 + 1;
      goto LABEL_56;
    case 3:
      v132 = -v78;
      v133 = -v45;
      v134 = -v46;
      if (v97 >= 0.0)
      {
        v135 = v184 - (float)(v78 * v167);
        v136 = v185 - (float)(v45 * v167);
        v138 = -v78;
        v139 = -v45;
        v137 = v186 - (float)(v46 * v167);
        v140 = -v46;
        v132 = v78;
        v133 = v45;
        v134 = v46;
      }
      else
      {
        v47 = -v47;
        v49 = -v49;
        v50 = -v50;
        v135 = v184 + (float)(v78 * v167);
        v136 = v185 + (float)(v45 * v167);
        v137 = v186 + (float)(v46 * v167);
        v138 = v78;
        v139 = v45;
        v140 = v46;
      }
      v162 = v179;
      v199 = v138;
      v200 = v139;
      v201 = v140;
      v202 = v132;
      v203 = v133;
      v204 = v134;
      v205 = v47;
      v206 = v49;
      v207 = v50;
      v208 = v92;
      v209 = v91;
      v210 = v173;
      v211 = v135;
      v212 = v136;
      v213 = v137;
      v160 = (float *)v198;
      v161 = a7;
      v163 = v168;
      goto LABEL_55;
    case 4:
      v208 = v78;
      v209 = v45;
      v141 = -v47;
      v142 = -v49;
      v143 = -v50;
      v210 = v46;
      if (v97 >= 0.0)
      {
        v145 = v184 - (float)(v47 * v67);
        v146 = v185 - (float)(v49 * v67);
        v148 = -v47;
        v149 = -v49;
        v147 = v186 - (float)(v50 * v67);
        v150 = -v50;
        v141 = v47;
        v142 = v49;
        v143 = v50;
        v144 = v173;
      }
      else
      {
        v92 = -v92;
        v91 = -v91;
        v144 = -v173;
        v145 = v184 + (float)(v47 * v67);
        v146 = v185 + (float)(v49 * v67);
        v147 = v186 + (float)(v50 * v67);
        v148 = v47;
        v149 = v49;
        v150 = v50;
      }
      v199 = v148;
      v200 = v149;
      v201 = v150;
      v202 = v141;
      v203 = v142;
      v204 = v143;
      v205 = v92;
      v206 = v91;
      v207 = v144;
      v211 = v145;
      v212 = v146;
      v213 = v147;
      v160 = (float *)v198;
      v161 = a7;
      v163 = v167;
      v162 = v168;
      goto LABEL_55;
    case 5:
      v208 = v47;
      v209 = v49;
      v151 = -v92;
      v152 = -v91;
      v153 = -v173;
      v210 = v50;
      if (v97 >= 0.0)
      {
        v154 = v184 - (float)(v92 * v168);
        v155 = v185 - (float)(v91 * v168);
        v157 = -v92;
        v158 = -v91;
        v156 = v186 - (float)(v173 * v168);
        v159 = -v173;
        v151 = v92;
        v152 = v91;
        v153 = v173;
      }
      else
      {
        v78 = -v78;
        v45 = -v45;
        v46 = -v46;
        v154 = v184 + (float)(v92 * v168);
        v155 = v185 + (float)(v91 * v168);
        v156 = v186 + (float)(v173 * v168);
        v157 = v92;
        v158 = v91;
        v159 = v173;
      }
      v163 = v179;
      v199 = v157;
      v200 = v158;
      v201 = v159;
      v202 = v151;
      v203 = v152;
      v204 = v153;
      v205 = v78;
      v206 = v45;
      v207 = v46;
      v211 = v154;
      v212 = v155;
      v213 = v156;
      v160 = (float *)v198;
      v161 = a7;
      v162 = v167;
LABEL_55:
      v121 = v70;
LABEL_56:
      Contacts = generateContacts(v161, (uint64_t)&v199, v65, (uint64_t)&v202, v160, v162, v163, v121);
      break;
    default:
      Contacts = 0;
      break;
  }
  LOBYTE(v71) = v95 + 1;
LABEL_27:
  v111 = Contacts == 0;
  result = Contacts != 0;
  if (v111)
    v113 = 0;
  else
    v113 = v71;
  *(_BYTE *)(a6 + 10) = v113;
  return result;
}

BOOL physx::Gu::contactCapsuleBox(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, float *a5, uint64_t a6, float32x2_t *a7)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v31;
  float v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  float v49;
  float v50;
  _BOOL8 result;
  float v52;
  float32x2_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v72;
  float v73;
  float v74;
  float v76;
  float v77;
  float v78;
  uint64_t v80;
  float v81;
  float v82;
  float v83;
  __int32 v84;
  __int32 v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  uint64_t v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float32x2_t v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  float v130;
  float v131;
  float v132;
  BOOL v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  float v138;
  float v139;
  unint64_t v140;
  float32x2_t v141;
  float *v142;
  int v143;
  float v144;
  float32_t v145;
  float32_t v146;
  float32x2_t *v147;
  float v148;
  uint64_t v149;
  float v150;
  unint64_t v151;
  float *v152;
  float *v153;
  float32_t v154;
  float v155;
  float32_t v156;
  float32_t v157;
  float v158;
  float32x2_t *v159;
  float v160;
  uint64_t v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float32x2_t v174;
  float v175;
  float32x2_t v176;
  float v177;
  float32x2_t v178;
  float v179;
  float v180;
  float32x2_t v181;
  _BYTE v182[12];
  __int128 v183;
  _BYTE v184[20];
  int v185;
  float32x2_t v186;
  float v187;
  float32x2_t v188;
  float v189;
  unint64_t v190;
  float v191;
  float v192;
  float32x2_t v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float32x2_t v202;
  float v203;
  float32x2_t v204;
  float v205;
  float v206[24];
  uint64_t v207;

  v207 = *MEMORY[0x24BDAC8D0];
  v10 = *a3;
  v11 = a3[1];
  v12 = v10 + v10;
  v14 = a3[2];
  v13 = a3[3];
  v15 = v13 + v13;
  v16 = (float)((float)(v13 * (float)(v13 + v13)) + -1.0) + (float)(v10 * (float)(v10 + v10));
  v17 = (float)(v12 * v11) + (float)(v14 * (float)(v13 + v13));
  v18 = (float)(v12 * v14) - (float)(v11 * v15);
  v20 = *(float *)(a1 + 4);
  v19 = *(float *)(a1 + 8);
  v21 = v16 * v19;
  v22 = v19 * v17;
  v23 = v18 * v19;
  v24 = a3[4];
  v25 = a3[5];
  v26 = a3[6];
  v186.f32[0] = v24 + v21;
  v186.f32[1] = v25 + v22;
  v187 = v23 + v26;
  v188.f32[0] = v24 - v21;
  v188.f32[1] = v25 - v22;
  v189 = v26 - v23;
  v27 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a4, 1);
  v28 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a4, 2);
  v29 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a4, 3);
  _Q6 = vaddq_f32(*(float32x4_t *)a4, *(float32x4_t *)a4);
  v31 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a4, *(float32x2_t *)_Q6.f32), 0);
  v32 = v20 + *a5;
  v33 = vmul_lane_f32(v27, *(float32x2_t *)_Q6.f32, 1);
  v34 = vmul_laneq_f32(v28, _Q6, 2);
  v35 = vmul_n_f32(v27, _Q6.f32[0]);
  v36 = vmul_n_f32(v28, _Q6.f32[0]);
  v37 = vmul_n_f32(v29, _Q6.f32[0]);
  v38 = vmul_lane_f32(v28, *(float32x2_t *)_Q6.f32, 1);
  v39 = vmul_lane_f32(v29, *(float32x2_t *)_Q6.f32, 1);
  v40 = vmul_laneq_f32(v29, _Q6, 2);
  __asm { FMOV            V6.2S, #1.0 }
  v45 = vsub_f32(*(float32x2_t *)_Q6.f32, v31);
  LODWORD(v46) = vsub_f32(v36, v39).u32[0];
  LODWORD(v47) = vadd_f32(v38, v37).u32[0];
  v181.f32[0] = (float)(1.0 - v33.f32[1]) - v34.f32[1];
  v181.i32[1] = vadd_f32(v35, v40).u32[0];
  HIDWORD(v46) = vsub_f32(v35, v40).i32[1];
  *(_QWORD *)v182 = v46;
  *(_DWORD *)&v182[8] = vsub_f32(v45, v34).u32[0];
  HIDWORD(v47) = vadd_f32(v36, v39).i32[1];
  *(_QWORD *)&v183 = v47;
  *((int32x2_t *)&v183 + 1) = vzip1_s32((int32x2_t)vsub_f32(v38, v37), (int32x2_t)vsub_f32(v45, v33));
  *(_DWORD *)v184 = *(_DWORD *)(a4 + 16);
  *(_QWORD *)&v48 = *(_QWORD *)(a4 + 20);
  *((_QWORD *)&v48 + 1) = *(_QWORD *)(a2 + 4);
  *(_OWORD *)&v184[4] = v48;
  v185 = *(_DWORD *)(a2 + 12);
  v180 = 0.0;
  physx::Gu::distanceSegmentBoxSquared((float *)&v186, (float *)&v188, (float *)v184, (float32x2_t *)&v184[12], (float *)&v181, &v180, &v178);
  v50 = v49;
  result = 0;
  if (v49 < (float)(v32 * v32))
  {
    if (v49 != 0.0)
    {
      v52 = v179;
      v179 = (float)((float)((float)(v178.f32[0] * *(float *)v182) + (float)(v178.f32[1] * *(float *)&v183))
                   + (float)(v179 * *((float *)&v183 + 3)))
           + *(float *)&v184[8];
      v178 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(v181, v178.f32[0]), vmul_n_f32(*(float32x2_t *)&v182[4], v178.f32[1])), vmul_n_f32(*(float32x2_t *)((char *)&v183 + 4), v52)), *(float32x2_t *)v184);
      v53 = vsub_f32(vadd_f32(v186, vmul_n_f32(vsub_f32(v188, v186), v180)), v178);
      v54 = (float)(v187 + (float)(v180 * (float)(v189 - v187))) - v179;
      v55 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v53, v53).i32[1]), v53.f32[0], v53.f32[0]) + (float)(v54 * v54));
      if (v55 > 0.0)
      {
        v56 = 1.0 / v55;
        v174 = vmul_n_f32(v53, v56);
        v176 = v174;
        v57 = v54 * v56;
        v177 = v54 * v56;
        GuGenerateVFContacts((uint64_t)a7, (uint64_t)&v186, (float *)&v181, &v176, *(float *)(a1 + 4), *a5);
        if (a7[512].i32[0] == 2)
          return 1;
        v58 = *(float *)(a1 + 4);
        v59 = *a5;
        physx::Gu::computeOBBPoints(v206, (float *)v184, (float *)&v184[12], (float *)&v181, (float *)&v182[4], (float *)&v183 + 1);
        v61 = v186.f32[1];
        v60 = v186.f32[0];
        v204 = v186;
        v62 = v187;
        v205 = v187;
        v202 = v188;
        v203 = v189;
        _S3 = v188.f32[0] - v186.f32[0];
        v64 = v188.f32[1] - v186.f32[1];
        v65 = v189 - v187;
        v66 = sqrtf((float)((float)(v64 * v64) + (float)(_S3 * _S3)) + (float)(v65 * v65));
        if (v66 > 0.0)
        {
          v67 = 0.01 / v66;
          v68 = _S3 * v67;
          v69 = v64 * v67;
          v70 = v65 * v67;
          v60 = v186.f32[0] - v68;
          v61 = v186.f32[1] - v69;
          v204.f32[0] = v186.f32[0] - v68;
          v204.f32[1] = v186.f32[1] - v69;
          v62 = v187 - v70;
          v205 = v187 - v70;
          v202.f32[0] = v188.f32[0] + v68;
          v202.f32[1] = v188.f32[1] + v69;
          v203 = v189 + v70;
          _S3 = (float)(v188.f32[0] + v68) - (float)(v186.f32[0] - v68);
          v64 = (float)(v188.f32[1] + v69) - (float)(v186.f32[1] - v69);
          v65 = (float)(v189 + v70) - (float)(v187 - v70);
        }
        v199 = _S3;
        v200 = v64;
        v201 = v65;
        _V19.S[1] = v174.i32[1];
        v72 = vmuls_lane_f32(-v65, v174, 1) + (float)(v64 * v57);
        v73 = -(float)((float)(v65 * v174.f32[0]) - (float)(_S3 * v57));
        v74 = vmlas_n_f32(-(float)(_S3 * v57), v65, v174.f32[0]);
        __asm { FMLA            S5, S3, V19.S[1] }
        v195 = -v72;
        v196 = v73;
        v197 = -(float)((float)((float)-v64 * v174.f32[0]) + (float)(_S3 * v174.f32[1]));
        v198 = -(float)((float)((float)-(float)(v74 * v61) - (float)(v72 * v60)) + (float)(v197 * v62));
        v76 = fabsf(v72);
        v77 = fabsf(v74);
        v78 = fabsf(_S5);
        if (v77 <= v76 || v77 <= v78)
        {
          v127 = 1;
          if (v78 <= v76)
          {
            v129 = 2;
LABEL_55:
            v137 = 0;
            v138 = 1.0 / (float)((float)(*(&v199 + v129) * v176.f32[v127]) - (float)(*(&v199 + v127) * v176.f32[v129]));
            v139 = v58 + v59;
            v140 = a7[512].u32[0];
            v141 = vneg_f32(v174);
            do
            {
              v142 = &v206[3 * physx::Gu::getBoxEdges(void)::Indices[v137]];
              v143 = physx::Gu::getBoxEdges(void)::Indices[v137 + 1];
              v192 = 0.0;
              v190 = (unint64_t)v141;
              v191 = -v57;
              if (intersectEdgeEdgePreca((float *)&v204, (float *)&v202, (uint64_t)&v199, &v195, v127, v129, (float32x2_t *)&v190, v142, v138, &v206[3 * v143], &v192, &v193))
              {
                v144 = v192;
                if (v192 < v139 && v140 <= 0x3F)
                {
                  v145 = v192 - v58;
                  v146 = v194 - (float)(v57 * v192);
                  v147 = &a7[8 * v140++];
                  a7[512].i32[0] = v140;
                  *v147 = v174;
                  v147[2] = vsub_f32(v193, vmul_n_f32(v174, v144));
                  v147[3].f32[0] = v146;
                  v147[1].f32[0] = v57;
                  v147[1].f32[1] = v145;
                  v147[6].i32[1] = -1;
                }
              }
              v137 += 2;
            }
            while ((_DWORD)v137 != 24);
            if (!v140)
            {
              v148 = *(float *)(a1 + 4);
              a7[512].i32[0] = 1;
              *a7 = v174;
              a7[2] = v178;
              a7[3].f32[0] = v179;
              a7[1].f32[0] = v57;
              a7[1].f32[1] = sqrtf(v50) - v148;
              a7[6].i32[1] = -1;
            }
            return 1;
          }
          v128 = 0;
        }
        else
        {
          v127 = 0;
          v128 = 2;
        }
        v129 = v127;
        v127 = v128;
        goto LABEL_55;
      }
    }
    v80 = 0;
    v81 = *(float *)(a1 + 4);
    v82 = 0.0;
    v83 = 3.4028e38;
    *(float *)&v84 = 0.0;
    *(float *)&v85 = 0.0;
    do
    {
      v206[0] = 0.0;
      result = GuTestAxis((float *)((char *)&v181 + v80 * 4), (float *)&v186, (float *)&v181, v206, v81);
      if (!result)
        return result;
      if (v206[0] < v83)
      {
        v85 = v181.i32[v80];
        v84 = v181.i32[v80 + 1];
        v82 = *(float *)((char *)&v181 + v80 * 4 + 8);
        v83 = v206[0];
      }
      v80 += 3;
    }
    while (v80 != 9);
    v168 = *(float *)&v85;
    v169 = *(float *)&v84;
    v170 = v82;
    v175 = v83;
    v166 = v186.f32[1];
    v167 = v186.f32[0];
    v164 = v187;
    v165 = v188.f32[0];
    v86 = v188.f32[0] - v186.f32[0];
    v162 = v188.f32[1];
    v163 = v189;
    v87 = v188.f32[1] - v186.f32[1];
    v88 = v189 - v187;
    v89 = (float)((float)(v87 * v87) + (float)(v86 * v86)) + (float)(v88 * v88);
    v90 = 0.0;
    v91 = 0.0;
    v92 = 0.0;
    if (v89 > 0.0)
    {
      v93 = 1.0 / sqrtf(v89);
      v90 = v86 * v93;
      v91 = v87 * v93;
      v92 = v88 * v93;
    }
    v94 = 0;
    v95 = -v92;
    v96 = -v90;
    v97 = -v91;
    do
    {
      v99 = v181.f32[v94 + 1];
      v98 = *(float *)((char *)&v181 + v94 * 4 + 8);
      v100 = v181.f32[v94];
      v101 = (float)(v99 * v95) + (float)(v91 * v98);
      v102 = (float)(v98 * v96) + (float)(v92 * v100);
      v103 = (float)(v100 * v97) + (float)(v90 * v99);
      if (fabsf(v101) > 0.000001 || fabsf(v102) > 0.000001 || fabsf(v103) > 0.000001)
      {
        v104 = (float)((float)(v102 * v102) + (float)(v101 * v101)) + (float)(v103 * v103);
        v105 = 0.0;
        v106 = 0.0;
        v107 = 0.0;
        if (v104 > 0.0)
        {
          v108 = 1.0 / sqrtf(v104);
          v107 = v101 * v108;
          v106 = v102 * v108;
          v105 = v103 * v108;
        }
        v206[0] = v107;
        v206[1] = v106;
        v206[2] = v105;
        v195 = 0.0;
        result = GuTestAxis(v206, (float *)&v186, (float *)&v181, &v195, v81);
        if (!result)
          return result;
        if (v195 < v175)
        {
          v168 = v107;
          v169 = v106;
          v170 = v105;
          v175 = v195;
        }
        v96 = -v90;
        v95 = -v92;
        v97 = -v91;
      }
      v94 += 3;
    }
    while (v94 != 9);
    v109 = (float)((float)(v169 * (float)((float)((float)(v162 + v166) * 0.5) - *(float *)&v184[4]))
                 + (float)(v168 * (float)((float)((float)(v165 + v167) * 0.5) - *(float *)v184)))
         + (float)(v170 * (float)((float)((float)(v163 + v164) * 0.5) - *(float *)&v184[8]));
    if (v109 >= 0.0)
      v110 = v168;
    else
      v110 = -v168;
    if (v109 >= 0.0)
      v111 = v169;
    else
      v111 = -v169;
    if (v109 >= 0.0)
      v112 = v170;
    else
      v112 = -v170;
    v190 = __PAIR64__(LODWORD(v111), LODWORD(v110));
    v191 = v112;
    GuGenerateVFContacts((uint64_t)a7, (uint64_t)&v186, (float *)&v181, (float32x2_t *)&v190, v81, *a5);
    if (a7[512].i32[0] == 2)
      return 1;
    v113 = *(float *)(a1 + 4);
    physx::Gu::computeOBBPoints(v206, (float *)v184, (float *)&v184[12], (float *)&v181, (float *)&v182[4], (float *)&v183 + 1);
    v114 = v186;
    v204 = v186;
    v115 = v187;
    v205 = v187;
    v202 = v188;
    v203 = v189;
    v116 = v188.f32[0] - v186.f32[0];
    v117 = v188.f32[1] - v186.f32[1];
    v118 = v189 - v187;
    v119 = sqrtf((float)((float)(v117 * v117) + (float)(v116 * v116)) + (float)(v118 * v118));
    if (v119 <= 0.0)
    {
      v126 = v187;
      v125 = v186.f32[1];
      v124 = v186.f32[0];
    }
    else
    {
      v120 = 0.01 / v119;
      v121 = v116 * v120;
      v122 = v117 * v120;
      v123 = v118 * v120;
      v124 = v186.f32[0] - v121;
      v125 = v186.f32[1] - v122;
      v204.f32[0] = v186.f32[0] - v121;
      v204.f32[1] = v186.f32[1] - v122;
      v126 = v187 - v123;
      v205 = v187 - v123;
      v202.f32[0] = v188.f32[0] + v121;
      v202.f32[1] = v188.f32[1] + v122;
      v203 = v189 + v123;
      v116 = (float)(v188.f32[0] + v121) - (float)(v186.f32[0] - v121);
      v117 = (float)(v188.f32[1] + v122) - (float)(v186.f32[1] - v122);
      v118 = (float)(v189 + v123) - (float)(v187 - v123);
    }
    v199 = v116;
    v200 = v117;
    v201 = v118;
    v195 = (float)(v117 * v112) - (float)(v118 * v111);
    v196 = (float)(v118 * v110) - (float)(v116 * v112);
    v197 = (float)(v116 * v111) - (float)(v117 * v110);
    v198 = -(float)((float)((float)(v125 * v196) + (float)(v195 * v124)) + (float)(v197 * v126));
    v130 = fabsf(v195);
    v131 = fabsf(v196);
    v132 = fabsf(v197);
    v133 = v131 <= v130 || v131 <= v132;
    v161 = a1;
    v172 = v188.f32[1];
    v173 = v188.f32[0];
    v171 = v189;
    if (v133)
    {
      v134 = 1;
      if (v132 <= v130)
      {
        v136 = 2;
        goto LABEL_64;
      }
      v135 = 0;
    }
    else
    {
      v134 = 0;
      v135 = 2;
    }
    v136 = v134;
    v134 = v135;
LABEL_64:
    v149 = 0;
    v150 = 1.0
         / (float)((float)(*(&v199 + v134) * *((float *)&v190 + v136))
                 - (float)(*(&v199 + v136) * *((float *)&v190 + v134)));
    v151 = a7[512].u32[0];
    do
    {
      v152 = &v206[3 * physx::Gu::getBoxEdges(void)::Indices[v149]];
      v153 = &v206[3 * physx::Gu::getBoxEdges(void)::Indices[v149 + 1]];
      v176.i32[0] = 0;
      if (intersectEdgeEdgePreca((float *)&v204, (float *)&v202, (uint64_t)&v199, &v195, v134, v136, (float32x2_t *)&v190, v152, v150, v153, (float *)&v176, &v193)&& v151 <= 0x3F)
      {
        v154 = v194 - (float)(v112 * v176.f32[0]);
        v155 = v193.f32[0];
        v156 = v193.f32[1] - (float)(v111 * v176.f32[0]);
        v157 = -(float)(v113 + v176.f32[0]);
        v158 = v110 * v176.f32[0];
        v159 = &a7[8 * v151++];
        a7[512].i32[0] = v151;
        v159->f32[0] = v110;
        v159->f32[1] = v111;
        v159[2].f32[0] = v155 - v158;
        v159[2].f32[1] = v156;
        v159[3].f32[0] = v154;
        v159[1].f32[0] = v112;
        v159[1].f32[1] = v157;
        v159[6].i32[1] = -1;
      }
      v149 += 2;
    }
    while ((_DWORD)v149 != 24);
    if (!v151)
    {
      v160 = *(float *)(v161 + 4);
      result = 1;
      a7[512].i32[0] = 1;
      a7->f32[0] = v110;
      a7->f32[1] = v111;
      a7[2].f32[0] = (float)(v114.f32[0] + v173) * 0.5;
      a7[2].f32[1] = (float)(v114.f32[1] + v172) * 0.5;
      a7[3].f32[0] = (float)(v115 + v171) * 0.5;
      a7[1].f32[0] = v112;
      a7[1].f32[1] = -(float)(v175 + v160);
      a7[6].i32[1] = -1;
      return result;
    }
    return 1;
  }
  return result;
}

uint64_t GuGenerateVFContacts(uint64_t a1, uint64_t a2, float *a3, float32x2_t *a4, float a5, float a6)
{
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  unint64_t v19;
  char v20;
  float32x2_t *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  char v28;
  float v29;
  uint64_t result;
  float v31;
  float32_t v32;
  float v33;
  float32_t v34;
  float32x2_t *v35;
  float32x2_t v36;
  float32x2_t v37;
  uint64_t v38;
  _DWORD v39[3];
  _DWORD v40[3];
  float v41[3];
  float v42[2];
  float v43;

  v11 = 0;
  v12 = a3[13];
  v42[0] = a3[12];
  v42[1] = v12;
  v43 = a3[14];
  v41[0] = -v42[0];
  v41[1] = -v12;
  v41[2] = -v43;
  v13 = a4->f32[1];
  v14 = a4[1].f32[0];
  v15 = -(float)((float)((float)(a3[1] * v13) + (float)(*a3 * a4->f32[0])) + (float)(a3[2] * v14));
  v16 = -(float)((float)((float)(v13 * a3[4]) + (float)(a3[3] * a4->f32[0])) + (float)(a3[5] * v14));
  v17 = -(float)((float)((float)(v13 * a3[7]) + (float)(a3[6] * a4->f32[0])) + (float)(a3[8] * v14));
  *(float *)v40 = v15;
  *(float *)&v40[1] = v16;
  *(float *)&v40[2] = v17;
  v18 = a5 + a6;
  v19 = *(unsigned int *)(a1 + 4096);
  v20 = 1;
  do
  {
    v21 = (float32x2_t *)(a2 + 12 * v11);
    v22 = COERCE_FLOAT(*v21) - a3[9];
    v37 = *v21;
    v23 = COERCE_FLOAT(HIDWORD(*(unint64_t *)v21)) - a3[10];
    v24 = v21[1].f32[0];
    v25 = v24 - a3[11];
    v26 = (float)((float)(v23 * a3[1]) + (float)(*a3 * v22)) + (float)(a3[2] * v25);
    v27 = (float)((float)(v23 * a3[4]) + (float)(a3[3] * v22)) + (float)(a3[5] * v25);
    v28 = v20;
    v29 = (float)((float)(v23 * a3[7]) + (float)(a3[6] * v22)) + (float)(a3[8] * v25);
    *(float *)v39 = v26;
    *(float *)&v39[1] = v27;
    *(float *)&v39[2] = v29;
    v38 = 0;
    result = physx::Gu::intersectRayAABB((uint64_t)v41, (uint64_t)v42, (uint64_t)v39, (uint64_t)v40, (float *)&v38 + 1, (float *)&v38);
    if ((_DWORD)result != -1)
    {
      v31 = *((float *)&v38 + 1);
      if (*((float *)&v38 + 1) < v18 && v19 <= 0x3F)
      {
        v32 = *((float *)&v38 + 1) - a5;
        v33 = a4[1].f32[0];
        v34 = v24 - (float)(*((float *)&v38 + 1) * v33);
        v35 = (float32x2_t *)(a1 + (v19++ << 6));
        *(_DWORD *)(a1 + 4096) = v19;
        v35[1].f32[0] = v33;
        v36 = vsub_f32(v37, vmul_n_f32(*a4, v31));
        *v35 = *a4;
        v35[2] = v36;
        v35[3].f32[0] = v34;
        v35[1].f32[1] = v32;
        v35[6].i32[1] = -1;
      }
    }
    v20 = 0;
    v11 = 1;
  }
  while ((v28 & 1) != 0);
  return result;
}

BOOL physx::Gu::contactCapsuleCapsule(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float32x2_t v33;
  float32x2_t v34;
  float v35;
  float v36;
  float v37;
  float v39;
  float v40;
  float v41;
  float v42;
  float v48;
  float v49;
  uint64_t v51;
  int v52;
  unint64_t v53;
  char v54;
  char v55;
  float *v56;
  _DWORD *v57;
  float *v58;
  float *v59;
  float v60;
  float32x2_t v61;
  float32x2_t v62;
  float v63;
  float v64;
  float32x2_t *v65;
  float v66;
  char v67;
  unint64_t v68;
  char v69;
  float *v71;
  float v72;
  float *v73;
  float v74;
  float *v75;
  float v76;
  float v77;
  float32x2_t v78;
  float32x2_t v79;
  float v80;
  float v81;
  float v83;
  float32_t v84;
  float v85;
  float32_t v86;
  float32x2_t *v87;
  float32x2_t v88;
  float32x2_t v89;
  float v90;
  float32x2_t v91;
  float v95;
  uint64_t v96;
  float v97;
  uint64_t v98;
  float32x2_t v99;
  float32x2_t v101;
  uint64_t v102;
  _BYTE v103[12];
  float32x2_t v104;
  float v105;
  float v106[2];
  float v107;
  float32x2_t v108;
  float v109;
  float32x2_t v110;
  float v111;
  float32x2_t v112;
  float v113;
  float32x2_t v114;
  float v115;
  float32x2_t v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  uint64_t v123;

  v10 = a2;
  v123 = *MEMORY[0x24BDAC8D0];
  v12 = *(float *)a3;
  v13 = v12 + v12;
  v14 = *(float *)(a3 + 12);
  v15 = v14 + v14;
  v16 = (float)((float)(v14 * (float)(v14 + v14)) + -1.0) + (float)(v12 * (float)(v12 + v12));
  v17 = *(float *)(a1 + 8);
  v18 = *a4;
  v19 = a4[1];
  v20 = v18 + v18;
  v22 = a4[2];
  v21 = a4[3];
  v23 = (float)((float)(v21 * (float)(v21 + v21)) + -1.0) + (float)(v18 * (float)(v18 + v18));
  v24 = (float)((float)(v18 + v18) * v19) + (float)(v22 * (float)(v21 + v21));
  v25 = (float)(v20 * v22) - (float)(v19 * (float)(v21 + v21));
  v26 = *(float *)(a2 + 8);
  v27 = v23 * v26;
  v28 = v26 * v24;
  v29 = v25 * v26;
  v30 = a4[4] - *(float *)(a3 + 16);
  v31 = a4[5] - *(float *)(a3 + 20);
  v32 = a4[6] - *(float *)(a3 + 24);
  v107 = v16 * v17;
  v109 = -(float)(v16 * v17);
  v33 = *(float32x2_t *)(a3 + 4);
  v34.i32[0] = vdup_lane_s32((int32x2_t)v33, 1).u32[0];
  v34.f32[1] = -v33.f32[0];
  v35 = (float)(v16 * v17) * -2.0;
  v108 = vmul_n_f32(vmla_n_f32(vmul_n_f32(v33, v13), v34, v15), v17);
  v101 = vmul_f32(v108, (float32x2_t)0xC0000000C0000000);
  v116 = v101;
  v111 = v27 + v30;
  v112.f32[0] = v28 + v31;
  v112.f32[1] = v29 + v32;
  v113 = v30 - v27;
  v114.f32[0] = v31 - v28;
  v114.f32[1] = v32 - v29;
  v115 = v35;
  v36 = v27 * -2.0;
  v37 = v28 * -2.0;
  _S9 = v29 * -2.0;
  v117 = v27 * -2.0;
  v118 = v28 * -2.0;
  v102 = 0;
  *(float *)v103 = v109 - (float)(v16 * v17);
  v110 = vneg_f32(v108);
  *(float32x2_t *)&v103[4] = vsub_f32(v110, v108);
  v119 = v29 * -2.0;
  v120 = (float)(v30 - v27) - (float)(v27 + v30);
  v121 = (float)(v31 - v28) - (float)(v28 + v31);
  v122 = (float)(v32 - v29) - (float)(v29 + v32);
  v39 = physx::Gu::distanceSegmentSegmentSquared(&v107, (float *)v103, &v111, &v120, (float *)&v102 + 1, (float *)&v102);
  v40 = *(float *)(a1 + 4);
  v41 = v40 + *(float *)(v10 + 4);
  v42 = (float)(v41 + *a5) * (float)(v41 + *a5);
  if (v39 < v42)
  {
    _D31 = v101;
    _S5 = v101.i32[1];
    __asm { FMLA            S4, S5, V31.S[1] }
    v48 = sqrtf(_S4);
    v49 = sqrtf((float)((float)(v37 * v37) + (float)(v36 * v36)) + (float)(_S9 * _S9));
    v120 = v48;
    v121 = v49;
    if (v48 != 0.0)
    {
      v35 = v35 * (float)(1.0 / v48);
      v115 = v35;
      _D31 = vmul_n_f32(v101, 1.0 / v48);
      v116 = _D31;
    }
    if (v49 != 0.0)
    {
      v117 = v36 * (float)(1.0 / v49);
      v118 = v37 * (float)(1.0 / v49);
      _S9 = _S9 * (float)(1.0 / v49);
      v119 = _S9;
    }
    __asm { FMLA            S6, S9, V31.S[1] }
    if (fabsf(_S6) <= 0.9998)
      goto LABEL_31;
    v51 = 0;
    v52 = 0;
    v106[0] = v48 * 0.001;
    v106[1] = v49 * 0.001;
    v53 = *(unsigned int *)(a7 + 4096);
    v54 = 1;
    do
    {
      v55 = v54;
      v56 = &v107 + 6 * (v51 ^ 1);
      v57 = &v103[12 * v51];
      v58 = &v115 + 3 * v51;
      v59 = &v107 + 6 * v51;
      v60 = v59[2];
      v61 = *(float32x2_t *)v59;
      v62 = *(float32x2_t *)v58;
      v63 = v58[2];
      v64 = v106[v51];
      v65 = (float32x2_t *)&v103[12 * (v51 ^ 1)];
      LODWORD(v66) = HIDWORD(*(_QWORD *)v58);
      v67 = 1;
      v68 = v53;
      do
      {
        v69 = v67;
        _ZF = (v67 & 1) == 0;
        if ((v67 & 1) != 0)
          v71 = &v107 + 6 * (v51 ^ 1);
        else
          v71 = v56 + 3;
        v72 = *v71;
        *v57 = *(_DWORD *)v71;
        if (_ZF)
          v73 = v56 + 4;
        else
          v73 = v56 + 1;
        v74 = *v73;
        v57[1] = *(_DWORD *)v73;
        if (_ZF)
          v75 = v56 + 5;
        else
          v75 = v56 + 2;
        v76 = *v75;
        v57[2] = *(_DWORD *)v75;
        v77 = (float)((float)(v66 * (float)(v74 - v61.f32[1])) + (float)(v62.f32[0] * (float)(v72 - v61.f32[0])))
            + (float)(v63 * (float)(v76 - v60));
        if (v77 >= (float)-v64 && v77 <= (float)(v64 + *(&v120 + v51)))
        {
          *v65 = vadd_f32(v61, vmul_n_f32(v62, v77));
          v65[1].f32[0] = v60 + (float)(v63 * v77);
          v78 = v104;
          v79 = vsub_f32(v104, *(float32x2_t *)v103);
          v80 = v105 - *(float *)&v103[8];
          v81 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v79, v79).i32[1]), v79.f32[0], v79.f32[0]) + (float)(v80 * v80);
          if (v81 > 0.000001 && v81 < v42)
          {
            if (v68 <= 0x3F)
            {
              v83 = sqrtf(v81);
              v84 = v80 * (float)(1.0 / v83);
              v85 = *(float *)(v10 + 4);
              v86 = *(float *)(a3 + 24) + (float)(v105 - (float)(v84 * v85));
              v53 = v68 + 1;
              *(_DWORD *)(a7 + 4096) = v68 + 1;
              v87 = (float32x2_t *)(a7 + (v68 << 6));
              v87[1].f32[0] = v84;
              v88 = vmul_n_f32(v79, 1.0 / v83);
              v89 = vadd_f32(vsub_f32(v78, vmul_n_f32(v88, v85)), *(float32x2_t *)(a3 + 16));
              *v87 = v88;
              v87[2] = v89;
              v87[3].f32[0] = v86;
              v87[1].f32[1] = v83 - v41;
              v87[6].i32[1] = -1;
              v68 = v53;
            }
            ++v52;
          }
        }
        v67 = 0;
      }
      while ((v69 & 1) != 0);
      v54 = 0;
      v10 = a1;
      v51 = 1;
    }
    while ((v55 & 1) != 0);
    if (!v52)
    {
LABEL_31:
      v90 = v107 + (float)(*((float *)&v102 + 1) * (float)(v109 - v107));
      v91 = vadd_f32(v108, vmul_n_f32(vsub_f32(v110, v108), *((float *)&v102 + 1)));
      _D16 = vsub_f32(v91, vadd_f32(v112, vmul_n_f32(vsub_f32(v114, v112), *(float *)&v102)));
      _S18 = _D16.i32[1];
      __asm { FMLA            S17, S18, V16.S[1] }
      if (_S17 >= 0.000001)
      {
        v95 = 1.0 / sqrtf(_S17);
        v35 = (float)(v90 - (float)(v111 + (float)(*(float *)&v102 * (float)(v113 - v111)))) * v95;
        _D31 = vmul_n_f32(_D16, v95);
      }
      else if (v48 <= 0.000001)
      {
        _D31 = 0;
        v35 = 1.0;
      }
      v96 = *(unsigned int *)(a7 + 4096);
      if (v96 <= 0x3F)
      {
        v97 = v90 + *(float *)(a3 + 16);
        *(_DWORD *)(a7 + 4096) = v96 + 1;
        v98 = a7 + (v96 << 6);
        *(float *)v98 = v35;
        *(float *)(v98 + 16) = v97 - (float)(v40 * v35);
        v99 = vsub_f32(vadd_f32(v91, *(float32x2_t *)(a3 + 20)), vmul_n_f32(_D31, v40));
        *(float32x2_t *)(v98 + 4) = _D31;
        *(float32x2_t *)(v98 + 20) = v99;
        *(float *)(v98 + 12) = sqrtf(v39) - v41;
        *(_DWORD *)(v98 + 52) = -1;
      }
    }
  }
  return v39 < v42;
}

void physx::Gu::`anonymous namespace'::EntityReportContainerCallback::~EntityReportContainerCallback(physx::Gu::_anonymous_namespace_::EntityReportContainerCallback *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Gu::`anonymous namespace'::EntityReportContainerCallback::onEvent(physx::Gu::_anonymous_namespace_::EntityReportContainerCallback *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v5 = a2;
    do
    {
      v6 = *((_QWORD *)this + 1);
      v7 = *(unsigned int *)(v6 + 272);
      if ((*(_DWORD *)(v6 + 276) & 0x7FFFFFFFu) <= v7)
      {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<256u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::growAndPushBack(v6, a3);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(v6 + 264) + 4 * v7) = *a3;
        ++*(_DWORD *)(v6 + 272);
      }
      ++a3;
      --v5;
    }
    while (v5);
  }
  return 1;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<256u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::growAndPushBack(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_DWORD *)(result + 276);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((4 * v5) <= 0x100 && *(_BYTE *)(result + 256) == 0)
  {
    *(_BYTE *)(result + 256) = 1;
    v9 = (_DWORD *)result;
    goto LABEL_16;
  }
  if (!(4 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (4 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_DWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 272);
  v11 = *(_QWORD *)(v3 + 264);
  if ((_DWORD)v10)
  {
    v12 = (unint64_t)&v9[v10];
    v13 = *(int **)(v3 + 264);
    v14 = v9;
    do
    {
      v15 = *v13++;
      *v14++ = v15;
    }
    while ((unint64_t)v14 < v12);
    v16 = *(unsigned int *)(v3 + 272);
  }
  else
  {
    v16 = 0;
  }
  v9[v16] = *a2;
  if ((*(_DWORD *)(v3 + 276) & 0x80000000) == 0)
  {
    if (v11 == v3)
    {
      *(_BYTE *)(v3 + 256) = 0;
    }
    else if (v11)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)(v3 + 264) = v9;
  *(_DWORD *)(v3 + 276) = v5;
  ++*(_DWORD *)(v3 + 272);
  return result;
}

uint64_t physx::Gu::`anonymous namespace'::AccumCallback::processHit(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_DWORD *)(a2 + 16);
  v4 = *(unsigned int *)(v2 + 272);
  if ((*(_DWORD *)(v2 + 276) & 0x7FFFFFFFu) <= v4)
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<256u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::growAndPushBack(v2, v3);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v2 + 264) + 4 * v4) = *v3;
    ++*(_DWORD *)(v2 + 272);
  }
  return 1;
}

void physx::Gu::`anonymous namespace'::AccumCallback::~AccumCallback(physx::Gu::_anonymous_namespace_::AccumCallback *this)
{
  JUMPOUT(0x2276933B8);
}

BOOL physx::Gu::SweepEstimateAnyShapeMesh(physx::Gu::CCDShape const&,physx::Gu::CCDShape const&,physx::PxTransform const&,physx::PxTransform const&,physx::PxTransform const&,physx::PxTransform const&,float,float)::CB::processHit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  float32x2_t *v15;
  float32x2_t *v16;
  float v17;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float v22;
  float v23;
  float32x2_t v24;
  float32x2_t v25;
  int8x8_t v26;
  float v27;
  uint64_t v28;
  float32x2_t *v29;
  float32x2_t *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float32x2_t v44;
  float v45;
  float32x2_t v46;
  float v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  int *v51;
  __int128 v52;
  int32x2_t v53;
  _QWORD v54[3];
  int v55;
  float32x2_t v56;
  float v57;
  float32x2_t v58;
  float v59;
  _DWORD v60[3];
  _DWORD v61[3];
  float32x2_t v62;
  float v63;

  v55 = 0;
  v48 = *(_OWORD *)(a1 + 24);
  v49 = a2 + 16;
  v50 = 1;
  v51 = &v55;
  v52 = xmmword_2261A6E10;
  v53 = vdup_n_s32(0xFE7FFFFF);
  v54[0] = 0;
  *(_QWORD *)((char *)v54 + 5) = 0;
  v8 = *(float **)(a1 + 64);
  v10 = v8[2];
  v9 = v8[3];
  v11 = (float)(v9 * v9) + -0.5;
  v12 = v8[1];
  v13 = (float)((float)((float)(v44.f32[1] + v44.f32[1]) * v12) + (float)(*v8 * (float)(v44.f32[0] + v44.f32[0])))
      + (float)(v10 * (float)(v45 + v45));
  v14 = *(float **)(a1 + 40);
  if ((float)((float)((float)-(float)((float)((float)((float)(v9
                                                             * (float)((float)(v10 * (float)(v44.f32[0] + v44.f32[0]))
                                                                     - (float)(*v8 * (float)(v45 + v45))))
                                                     + (float)((float)(v44.f32[1] + v44.f32[1]) * v11))
                                             + (float)(v12 * v13))
                                     * v14[1])
                     - (float)(*v14
                             * (float)((float)((float)(v9
                                                     * (float)((float)(v12 * (float)(v45 + v45))
                                                             - (float)(v10 * (float)(v44.f32[1] + v44.f32[1]))))
                                             + (float)((float)(v44.f32[0] + v44.f32[0]) * v11))
                                     + (float)(*v8 * v13))))
             - (float)(v14[2]
                     * (float)((float)((float)(v9
                                             * (float)((float)(*v8 * (float)(v44.f32[1] + v44.f32[1]))
                                                     - (float)(v12 * (float)(v44.f32[0] + v44.f32[0]))))
                                     + (float)((float)(v45 + v45) * v11))
                             + (float)(v10 * v13)))) >= *(float *)(a1 + 16))
  {
    v15 = *(float32x2_t **)(a1 + 72);
    v16 = *(float32x2_t **)(a1 + 80);
    v17 = v16[1].f32[0] * 1.1;
    v18 = (float)(v45 + v47) * 0.5;
    v19 = vmul_f32(vadd_f32(v44, v46), (float32x2_t)0x3F0000003F000000);
    v20 = (float32x2_t)vdup_n_s32(0x3F8CCCCDu);
    v21 = vmul_f32(vadd_f32(vmul_f32(vsub_f32(v46, v44), (float32x2_t)0x3F0000003F000000), (float32x2_t)vdup_n_s32(0x3C23D70Au)), v20);
    v22 = (float)((float)((float)(v47 - v45) * 0.5) + 0.01) * 1.1;
    v23 = v15[1].f32[0];
    v24 = vmul_f32(*v16, v20);
    v25 = *v15;
    v26 = vmvn_s8((int8x8_t)vcge_f32(vadd_f32(v24, v21), vabd_f32(*v15, v19)));
    if ((v26.i8[0] & 1) != 0 || (v26.i8[4] & 1) != 0 || (v27 = 0.0, vabds_f32(v23, v18) > (float)(v17 + v22)))
    {
      v28 = 0;
      v30 = *(float32x2_t **)(a1 + 48);
      v29 = *(float32x2_t **)(a1 + 56);
      v31 = v29[1].f32[0] - v30[1].f32[0];
      v62 = vsub_f32(*v29, *v30);
      v63 = v31;
      v61[0] = vadd_f32(v24, v25).u32[0];
      *(float *)&v61[1] = v24.f32[1] + v25.f32[1];
      *(float *)&v61[2] = v17 + v23;
      v60[0] = vsub_f32(v25, v24).u32[0];
      *(float *)&v60[1] = v25.f32[1] - v24.f32[1];
      *(float *)&v60[2] = v23 - v17;
      v58 = vadd_f32(v19, v21);
      v59 = v18 + v22;
      v56 = vsub_f32(v19, v21);
      v57 = v18 - v22;
      v27 = 0.0;
      v32 = 1.0;
      do
      {
        v33 = v62.f32[v28];
        if (v33 >= -0.000001)
        {
          if (v33 <= 0.000001)
          {
            if (v58.f32[v28] < *(float *)&v60[v28] || v56.f32[v28] > *(float *)&v61[v28])
            {
LABEL_27:
              v27 = 3.4028e38;
              break;
            }
          }
          else
          {
            v34 = v56.f32[v28];
            v35 = *(float *)&v61[v28];
            if (v34 > v35)
              goto LABEL_27;
            v39 = v58.f32[v28];
            v40 = *(float *)&v60[v28];
            if (v39 < v40)
            {
              v41 = (float)(v40 - v39) / v33;
              if (v41 > v27)
                v27 = v41;
            }
            if (v35 > v34)
            {
LABEL_19:
              v42 = (float)(v35 - v34) / v33;
              if (v42 < v32)
                v32 = v42;
            }
          }
        }
        else
        {
          v34 = v58.f32[v28];
          v35 = *(float *)&v60[v28];
          if (v34 < v35)
            goto LABEL_27;
          v36 = *(float *)&v61[v28];
          v37 = v56.f32[v28];
          if (v36 < v37)
          {
            v38 = (float)(v36 - v37) / v33;
            if (v38 > v27)
              v27 = v38;
          }
          if (v34 > v35)
            goto LABEL_19;
        }
        if (v27 > v32)
          goto LABEL_27;
        ++v28;
      }
      while (v28 != 3);
    }
    if (*(float *)(a1 + 12) < v27)
      v27 = *(float *)(a1 + 12);
    *(float *)(a1 + 12) = v27;
    *a6 = v27;
  }
  return *(float *)(a1 + 12) > 0.0;
}

void physx::Gu::SweepEstimateAnyShapeMesh(physx::Gu::CCDShape const&,physx::Gu::CCDShape const&,physx::PxTransform const&,physx::PxTransform const&,physx::PxTransform const&,physx::PxTransform const&,float,float)::CB::~CB()
{
  JUMPOUT(0x2276933B8);
}

unint64_t generateContacts(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, float *a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float *v76;
  float v77;
  float v78;
  uint64_t v79;
  int v80;
  float v81;
  float v82;
  int *v83;
  uint64_t v84;
  float *v85;
  float *v86;
  float *v87;
  float v88;
  float *v89;
  float v90;
  float *v91;
  float *v92;
  float v93;
  float v94;
  float v95;
  float *v96;
  float v97;
  float *v98;
  float v99;
  float v100;
  uint64_t v101;
  int v102;
  float *v103;
  float v104;
  float *v105;
  float v106;
  float *v107;
  float v108;
  float v109;
  uint64_t v110;
  int v111;
  float *v112;
  float *v113;
  float *v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float *v120;
  float *v121;
  float *v122;
  float v123;
  float v124;
  uint64_t v125;
  int v126;
  float *v127;
  float v128;
  float *v129;
  float *v130;
  float v131;
  float v132;
  uint64_t v133;
  int v134;
  float v135;
  float v136;
  float v137;
  uint64_t v138;
  unint64_t v139;
  int v140;
  int *v141;
  uint64_t v142;
  float *v143;
  uint64_t v144;
  float *v145;
  uint64_t v146;
  uint64_t v147;
  float *v148;
  uint64_t v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  uint64_t v156;
  float v157;
  float v158;
  float v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  uint64_t v169;
  float v170;
  float v171;
  float v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  uint64_t v182;
  float v183;
  float v184;
  float v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  uint64_t v195;
  float v196;
  float v197;
  float v198;
  uint64_t v199;
  int v200;
  float *v201;
  unint64_t v202;
  float v203;
  float v204;
  float v205;
  _QWORD v207[2];
  float *v208;
  float *v209;
  float v210[32];
  uint64_t v211;

  v8 = 0;
  v9 = 0;
  v211 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 4096) = 0;
  v10 = *(float *)(a4 + 4);
  v11 = *(float *)(a4 + 40);
  v12 = *(float *)(a4 + 44);
  v13 = *(float *)(a4 + 36);
  v14 = (float)-(float)(v11 * v10) - (float)(*(float *)a4 * v13);
  v15 = *(float *)(a4 + 16);
  v16 = *(float *)(a4 + 20);
  v17 = *(float *)(a4 + 8);
  v18 = *(float *)(a4 + 12);
  v19 = (float)-(float)(v11 * v15) - (float)(v18 * v13);
  v20 = *(float *)(a4 + 24);
  v21 = *(float *)(a4 + 28);
  v22 = (float)-(float)(v11 * v21) - (float)(v20 * v13);
  v23 = a5[1];
  v24 = a5[2];
  v25 = a5[3];
  v26 = (float)((float)(v18 * *a5) + (float)(v15 * v23)) + (float)(v16 * v24);
  v27 = a5[4];
  v28 = a5[5];
  v29 = (float)((float)(v18 * v25) + (float)(v15 * v27)) + (float)(v16 * v28);
  v31 = a5[6];
  v30 = a5[7];
  v32 = a5[8];
  v33 = a5[9];
  v34 = (float)((float)(v18 * v31) + (float)(v15 * v30)) + (float)(v16 * v32);
  v35 = a5[10];
  v36 = a5[11];
  v37 = *(float *)(a4 + 32);
  v38 = v19 - (float)(v16 * v12);
  v39 = (float)((float)(v18 * v33) + (float)(v15 * v35)) + (float)(v16 * v36);
  v40 = (float)((float)(v20 * v33) + (float)(v21 * v35)) + (float)(v37 * v36);
  v41 = v38 + v39;
  v42 = v14 - (float)(v17 * v12);
  v43 = v22 - (float)(v37 * v12);
  v44 = (float)((float)(*(float *)a4 * *a5) + (float)(v10 * v23)) + (float)(v17 * v24);
  v45 = (float)((float)(v20 * *a5) + (float)(v21 * v23)) + (float)(v37 * v24);
  v46 = (float)((float)(*(float *)a4 * v25) + (float)(v10 * v27)) + (float)(v17 * v28);
  v47 = (float)((float)(v20 * v25) + (float)(v21 * v27)) + (float)(v37 * v28);
  v48 = (float)((float)(*(float *)a4 * v31) + (float)(v10 * v30)) + (float)(v17 * v32);
  v49 = (float)((float)(v20 * v31) + (float)(v21 * v30)) + (float)(v37 * v32);
  v50 = v42 + (float)((float)((float)(*(float *)a4 * v33) + (float)(v10 * v35)) + (float)(v17 * v36));
  v51 = v43 + v40;
  v52 = a3[1];
  v53 = v44 * *a3;
  v54 = v26 * *a3;
  v55 = v45 * *a3;
  v56 = v46 * v52;
  v57 = v29 * v52;
  v58 = v47 * v52;
  v59 = a3[2];
  v60 = v48 * v59;
  v61 = v34 * v59;
  v62 = v50 - v53;
  v63 = v41 - v54;
  v64 = v56 + (float)(v48 * v59);
  v65 = v57 + (float)(v34 * v59);
  v210[0] = (float)(v50 - v53) - v64;
  v210[1] = (float)(v41 - v54) - v65;
  v66 = v49 * v59;
  v67 = v51 - v55;
  v68 = v50 + v53;
  v210[2] = (float)(v51 - v55) - (float)(v58 + v66);
  v69 = v41 + v54;
  v70 = v51 + v55;
  v210[4] = v68 - v64;
  v210[5] = v69 - v65;
  v210[6] = v70 - (float)(v58 + v66);
  v210[24] = v62 + v64;
  v210[25] = v63 + v65;
  v210[26] = v67 + (float)(v58 + v66);
  v210[28] = v68 + v64;
  v210[29] = v69 + v65;
  v210[30] = v70 + (float)(v58 + v66);
  v71 = v57 - v61;
  v210[8] = v62 + (float)(v56 - v60);
  v210[9] = v63 + v71;
  v72 = v58 - v66;
  v210[10] = v67 + v72;
  v210[12] = v68 + (float)(v56 - v60);
  v210[13] = v69 + v71;
  v210[14] = v70 + v72;
  v210[16] = v62 - (float)(v56 - v60);
  v210[17] = v63 - v71;
  v210[18] = v67 - v72;
  v210[20] = v68 - (float)(v56 - v60);
  v210[21] = v69 - v71;
  v210[22] = v70 - v72;
  v73 = a6 + a8;
  v74 = a7 + a8;
  do
  {
    v75 = v210[v8];
    v76 = &v210[v8];
    if (v75 >= (float)-a8)
    {
      *((_BYTE *)v76 + 12) = 1;
      v77 = v76[1];
      if (fabsf(v77) <= v73 && (v78 = v76[2], fabsf(v78) <= v74))
      {
        BYTE1(v210[v8 + 3]) = 1;
        if (v9 <= 0x3F)
        {
          v79 = a1 + (v9++ << 6);
          *(_DWORD *)(a1 + 4096) = v9;
          *(_QWORD *)v79 = *(_QWORD *)a2;
          v80 = *(_DWORD *)(a2 + 8);
          *(float *)(v79 + 16) = v75;
          *(float *)(v79 + 20) = v77;
          *(float *)(v79 + 24) = v78;
          *(_DWORD *)(v79 + 8) = v80;
          *(float *)(v79 + 12) = -v75;
          *(_DWORD *)(v79 + 52) = -1;
        }
      }
      else
      {
        *((_BYTE *)v76 + 13) = 0;
      }
    }
    else
    {
      *((_WORD *)v76 + 6) = 0;
    }
    v8 += 4;
  }
  while (v8 != 32);
  v81 = -v73;
  v82 = -v74;
  v83 = &generateContacts(physx::Gu::ContactBuffer &,physx::PxVec3 const&,float,float,physx::PxVec3 const&,physx::Cm::Matrix34 const&,physx::Cm::Matrix34 const&,float)::indices;
  do
  {
    v84 = v83[1];
    v85 = &v210[4 * *v83];
    v86 = &v210[4 * v84];
    if (*((_BYTE *)v85 + 12) || *((_BYTE *)v86 + 12))
    {
      if (!*((_BYTE *)v85 + 13) || !BYTE1(v210[4 * v84 + 3]))
      {
        v87 = v85 + 1;
        v88 = v85[1];
        v89 = v86 + 1;
        v90 = v86[1];
        if (v88 <= v90)
          v91 = &v210[4 * *v83];
        else
          v91 = v86;
        if (v88 <= v90)
          v92 = v86;
        else
          v92 = &v210[4 * *v83];
        if (v88 <= v90)
          v93 = v85[1];
        else
          v93 = v86[1];
        if (v93 < v73)
        {
          v94 = v88 <= v90 ? v86[1] : v85[1];
          if (v94 >= v73)
          {
            v95 = (float)(v73 - v93) / (float)(v94 - v93);
            v96 = v88 <= v90 ? &v210[4 * *v83] : v86;
            v97 = v96[2];
            v98 = v88 <= v90 ? v86 : &v210[4 * *v83];
            v99 = v97 + (float)((float)(v98[2] - v97) * v95);
            if (fabsf(v99) <= v74)
            {
              v100 = *v91 + (float)((float)(*v92 - *v91) * v95);
              if ((float)(v100 + a8) >= 0.0 && v9 <= 0x3F)
              {
                v101 = a1 + (v9++ << 6);
                *(_DWORD *)(a1 + 4096) = v9;
                *(_QWORD *)v101 = *(_QWORD *)a2;
                v102 = *(_DWORD *)(a2 + 8);
                *(float *)(v101 + 16) = v100;
                *(float *)(v101 + 20) = v73;
                *(float *)(v101 + 24) = v99;
                *(_DWORD *)(v101 + 8) = v102;
                *(float *)(v101 + 12) = -v100;
                *(_DWORD *)(v101 + 52) = -1;
              }
            }
          }
        }
        if (v93 < v81)
        {
          v103 = v88 <= v90 ? v86 + 1 : v85 + 1;
          if (*v103 >= v81)
          {
            v104 = (float)(v81 - v93) / (float)(*v103 - v93);
            v105 = v88 <= v90 ? v85 : v86;
            v106 = v105[2];
            v107 = v88 <= v90 ? v86 : v85;
            v108 = v106 + (float)((float)(v107[2] - v106) * v104);
            if (fabsf(v108) <= v74)
            {
              v109 = *v91 + (float)((float)(*v92 - *v91) * v104);
              if ((float)(v109 + a8) >= 0.0 && v9 <= 0x3F)
              {
                v110 = a1 + (v9++ << 6);
                *(_DWORD *)(a1 + 4096) = v9;
                *(_QWORD *)v110 = *(_QWORD *)a2;
                v111 = *(_DWORD *)(a2 + 8);
                *(float *)(v110 + 16) = v109;
                *(float *)(v110 + 20) = v81;
                *(float *)(v110 + 24) = v108;
                *(_DWORD *)(v110 + 8) = v111;
                *(float *)(v110 + 12) = -v109;
                *(_DWORD *)(v110 + 52) = -1;
              }
            }
          }
        }
        v112 = v86 + 2;
        if (v88 <= v90)
          v113 = v85;
        else
          v113 = v86;
        if (v88 <= v90)
          v114 = v85 + 2;
        else
          v114 = v86 + 2;
        v115 = v113[2];
        if (v88 > v90)
          v112 = v85 + 2;
        else
          v85 = v86;
        v116 = v85[2];
        if (v115 <= v116)
          v85 = v91;
        else
          v85 = v92;
        if (v115 <= v116)
          v86 = v92;
        else
          v86 = v91;
        if (v115 <= v116)
          v117 = v113[2];
        else
          v117 = v116;
        if (v117 < v74)
        {
          v118 = v115 <= v116 ? v116 : v113[2];
          if (v118 >= v74)
          {
            v119 = (float)(v74 - v117) / (float)(v118 - v117);
            if (v88 <= v90)
              v120 = v89;
            else
              v120 = v87;
            if (v88 <= v90)
              v121 = v87;
            else
              v121 = v89;
            if (v115 <= v116)
              v122 = v121;
            else
              v122 = v120;
            if (v115 > v116)
              v120 = v121;
            v123 = *v122 + (float)((float)(*v120 - *v122) * v119);
            if (fabsf(v123) <= v73)
            {
              v124 = *v85 + (float)((float)(*v86 - *v85) * v119);
              if ((float)(v124 + a8) >= 0.0 && v9 <= 0x3F)
              {
                v125 = a1 + (v9++ << 6);
                *(_DWORD *)(a1 + 4096) = v9;
                *(_QWORD *)v125 = *(_QWORD *)a2;
                v126 = *(_DWORD *)(a2 + 8);
                *(float *)(v125 + 16) = v124;
                *(float *)(v125 + 20) = v123;
                *(float *)(v125 + 24) = v74;
                *(_DWORD *)(v125 + 8) = v126;
                *(float *)(v125 + 12) = -v124;
                *(_DWORD *)(v125 + 52) = -1;
              }
            }
          }
        }
        if (v117 < v82)
        {
          v127 = v115 <= v116 ? v112 : v114;
          if (*v127 >= v82)
          {
            v128 = (float)(v82 - v117) / (float)(*v127 - v117);
            if (v88 <= v90)
              v129 = v89;
            else
              v129 = v87;
            if (v88 > v90)
              v87 = v89;
            if (v115 <= v116)
              v130 = v87;
            else
              v130 = v129;
            if (v115 <= v116)
              v87 = v129;
            v131 = *v130 + (float)((float)(*v87 - *v130) * v128);
            if (fabsf(v131) <= v73)
            {
              v132 = *v85 + (float)((float)(*v86 - *v85) * v128);
              if ((float)(v132 + a8) >= 0.0 && v9 <= 0x3F)
              {
                v133 = a1 + (v9++ << 6);
                *(_DWORD *)(a1 + 4096) = v9;
                *(_QWORD *)v133 = *(_QWORD *)a2;
                v134 = *(_DWORD *)(a2 + 8);
                *(float *)(v133 + 16) = v132;
                *(float *)(v133 + 20) = v131;
                *(float *)(v133 + 24) = v82;
                *(_DWORD *)(v133 + 8) = v134;
                *(float *)(v133 + 12) = -v132;
                *(_DWORD *)(v133 + 52) = -1;
              }
            }
          }
        }
      }
      if (!*((_BYTE *)v85 + 12) && !*((_BYTE *)v86 + 13) || !*((_BYTE *)v86 + 12) && !*((_BYTE *)v85 + 13))
      {
        v135 = (float)-*v85 / (float)(*v86 - *v85);
        v136 = v85[1] + (float)((float)(v86[1] - v85[1]) * v135);
        if (fabsf(v136) <= v73)
        {
          v137 = v85[2] + (float)((float)(v86[2] - v85[2]) * v135);
          if (fabsf(v137) <= v74 && v9 <= 0x3F)
          {
            v138 = a1 + (v9++ << 6);
            *(_DWORD *)(a1 + 4096) = v9;
            *(_QWORD *)v138 = *(_QWORD *)a2;
            *(_DWORD *)(v138 + 8) = *(_DWORD *)(a2 + 8);
            *(float *)(v138 + 20) = v136;
            *(float *)(v138 + 24) = v137;
            *(_DWORD *)(v138 + 12) = 0;
            *(_DWORD *)(v138 + 16) = 0;
            *(_DWORD *)(v138 + 52) = -1;
          }
        }
      }
    }
    v83 += 2;
  }
  while (v83 != (int *)&generateContacts(physx::Gu::ContactBuffer &,physx::PxVec3 const&,float,float,physx::PxVec3 const&,physx::Cm::Matrix34 const&,physx::Cm::Matrix34 const&,float)::face);
  v139 = 0;
  v140 = 0;
  do
  {
    v141 = (int *)((char *)&generateContacts(physx::Gu::ContactBuffer &,physx::PxVec3 const&,float,float,physx::PxVec3 const&,physx::Cm::Matrix34 const&,physx::Cm::Matrix34 const&,float)::face
                 + 16 * v139);
    v142 = *v141;
    v143 = &v210[4 * v142];
    v207[0] = v143;
    if (*((_BYTE *)v143 + 12))
    {
      v144 = v141[1];
      v145 = &v210[4 * v144];
      v207[1] = v145;
      if (*((_BYTE *)v145 + 12))
      {
        v146 = v141[2];
        v208 = &v210[4 * v146];
        if (*((_BYTE *)v208 + 12))
        {
          v147 = v141[3];
          v148 = &v210[4 * v147];
          v209 = v148;
          if (*((_BYTE *)v148 + 12))
          {
            if (!BYTE1(v210[4 * v142 + 3])
              || !BYTE1(v210[4 * v144 + 3])
              || !BYTE1(v210[4 * v146 + 3])
              || !BYTE1(v210[4 * v147 + 3]))
            {
              if ((v140 & 1) == 0)
              {
                v149 = 0;
                v152 = v148[1];
                v153 = v148[2];
                while (1)
                {
                  v154 = v153;
                  v155 = v152;
                  v156 = v207[v149];
                  v152 = *(float *)(v156 + 4);
                  v153 = *(float *)(v156 + 8);
                  if ((float)((float)((float)(v152 - v155) * (float)(v82 - v154))
                             - (float)((float)(v153 - v154) * (float)(v81 - v155))) >= 0.0)
                    break;
                  if (++v149 == 4)
                  {
                    v157 = v143[1];
                    v158 = v143[2];
                    v150 = v148[1];
                    v151 = v148[2];
                    v159 = (float)((float)((float)((float)((float)(v82 - v158) * (float)(v151 - v158))
                                                 + (float)((float)(v81 - v157) * (float)(v150 - v157)))
                                         * (float)(*v148 - *v143))
                                 / (float)((float)((float)((float)(v150 - v157) * (float)(v150 - v157))
                                                 + (float)((float)(*v148 - *v143) * (float)(*v148 - *v143)))
                                         + (float)((float)(v151 - v158) * (float)(v151 - v158))))
                         + (float)(*v143
                                 + (float)((float)((float)(*v145 - *v143)
                                                 * (float)((float)((float)(v82 - v158) * (float)(v145[2] - v158))
                                                         + (float)((float)(v81 - v157) * (float)(v145[1] - v157))))
                                         / (float)((float)((float)((float)(v145[1] - v157) * (float)(v145[1] - v157))
                                                         + (float)((float)(*v145 - *v143) * (float)(*v145 - *v143)))
                                                 + (float)((float)(v145[2] - v158) * (float)(v145[2] - v158)))));
                    if (v159 >= 0.0)
                    {
                      v140 |= 1u;
                      if (v9 <= 0x3F)
                      {
                        v160 = a1 + (v9++ << 6);
                        *(_DWORD *)(a1 + 4096) = v9;
                        *(_QWORD *)v160 = *(_QWORD *)a2;
                        v161 = *(_DWORD *)(a2 + 8);
                        *(float *)(v160 + 16) = v159;
                        *(float *)(v160 + 20) = v81;
                        *(float *)(v160 + 24) = v82;
                        *(_DWORD *)(v160 + 8) = v161;
                        *(float *)(v160 + 12) = -v159;
                        *(_DWORD *)(v160 + 52) = -1;
                      }
                    }
                    break;
                  }
                }
              }
              if ((v140 & 2) == 0)
              {
                v162 = 0;
                v165 = v148[1];
                v166 = v148[2];
                while (1)
                {
                  v167 = v166;
                  v168 = v165;
                  v169 = v207[v162];
                  v165 = *(float *)(v169 + 4);
                  v166 = *(float *)(v169 + 8);
                  if ((float)((float)((float)(v165 - v168) * (float)(v82 - v167))
                             - (float)((float)(v166 - v167) * (float)(v73 - v168))) >= 0.0)
                    break;
                  if (++v162 == 4)
                  {
                    v170 = v143[1];
                    v171 = v143[2];
                    v163 = v148[1];
                    v164 = v148[2];
                    v172 = (float)((float)((float)((float)((float)(v82 - v171) * (float)(v164 - v171))
                                                 + (float)((float)(v73 - v170) * (float)(v163 - v170)))
                                         * (float)(*v148 - *v143))
                                 / (float)((float)((float)((float)(v163 - v170) * (float)(v163 - v170))
                                                 + (float)((float)(*v148 - *v143) * (float)(*v148 - *v143)))
                                         + (float)((float)(v164 - v171) * (float)(v164 - v171))))
                         + (float)(*v143
                                 + (float)((float)((float)(*v145 - *v143)
                                                 * (float)((float)((float)(v82 - v171) * (float)(v145[2] - v171))
                                                         + (float)((float)(v73 - v170) * (float)(v145[1] - v170))))
                                         / (float)((float)((float)((float)(v145[1] - v170) * (float)(v145[1] - v170))
                                                         + (float)((float)(*v145 - *v143) * (float)(*v145 - *v143)))
                                                 + (float)((float)(v145[2] - v171) * (float)(v145[2] - v171)))));
                    if (v172 >= 0.0)
                    {
                      v140 |= 2u;
                      if (v9 <= 0x3F)
                      {
                        v173 = a1 + (v9++ << 6);
                        *(_DWORD *)(a1 + 4096) = v9;
                        *(_QWORD *)v173 = *(_QWORD *)a2;
                        v174 = *(_DWORD *)(a2 + 8);
                        *(float *)(v173 + 16) = v172;
                        *(float *)(v173 + 20) = v73;
                        *(float *)(v173 + 24) = v82;
                        *(_DWORD *)(v173 + 8) = v174;
                        *(float *)(v173 + 12) = -v172;
                        *(_DWORD *)(v173 + 52) = -1;
                      }
                    }
                    break;
                  }
                }
              }
              if ((v140 & 4) == 0)
              {
                v175 = 0;
                v178 = v148[1];
                v179 = v148[2];
                while (1)
                {
                  v180 = v179;
                  v181 = v178;
                  v182 = v207[v175];
                  v178 = *(float *)(v182 + 4);
                  v179 = *(float *)(v182 + 8);
                  if ((float)((float)((float)(v178 - v181) * (float)(v74 - v180))
                             - (float)((float)(v179 - v180) * (float)(v81 - v181))) >= 0.0)
                    break;
                  if (++v175 == 4)
                  {
                    v183 = v143[1];
                    v184 = v143[2];
                    v176 = v148[1];
                    v177 = v148[2];
                    v185 = (float)((float)((float)((float)((float)(v74 - v184) * (float)(v177 - v184))
                                                 + (float)((float)(v81 - v183) * (float)(v176 - v183)))
                                         * (float)(*v148 - *v143))
                                 / (float)((float)((float)((float)(v176 - v183) * (float)(v176 - v183))
                                                 + (float)((float)(*v148 - *v143) * (float)(*v148 - *v143)))
                                         + (float)((float)(v177 - v184) * (float)(v177 - v184))))
                         + (float)(*v143
                                 + (float)((float)((float)(*v145 - *v143)
                                                 * (float)((float)((float)(v74 - v184) * (float)(v145[2] - v184))
                                                         + (float)((float)(v81 - v183) * (float)(v145[1] - v183))))
                                         / (float)((float)((float)((float)(v145[1] - v183) * (float)(v145[1] - v183))
                                                         + (float)((float)(*v145 - *v143) * (float)(*v145 - *v143)))
                                                 + (float)((float)(v145[2] - v184) * (float)(v145[2] - v184)))));
                    if (v185 >= 0.0)
                    {
                      v140 |= 4u;
                      if (v9 <= 0x3F)
                      {
                        v186 = a1 + (v9++ << 6);
                        *(_DWORD *)(a1 + 4096) = v9;
                        *(_QWORD *)v186 = *(_QWORD *)a2;
                        v187 = *(_DWORD *)(a2 + 8);
                        *(float *)(v186 + 16) = v185;
                        *(float *)(v186 + 20) = v81;
                        *(float *)(v186 + 24) = v74;
                        *(_DWORD *)(v186 + 8) = v187;
                        *(float *)(v186 + 12) = -v185;
                        *(_DWORD *)(v186 + 52) = -1;
                      }
                    }
                    break;
                  }
                }
              }
              if ((v140 & 8) == 0)
              {
                v188 = 0;
                v191 = v148[1];
                v192 = v148[2];
                while (1)
                {
                  v193 = v192;
                  v194 = v191;
                  v195 = v207[v188];
                  v191 = *(float *)(v195 + 4);
                  v192 = *(float *)(v195 + 8);
                  if ((float)((float)((float)(v191 - v194) * (float)(v74 - v193))
                             - (float)((float)(v192 - v193) * (float)(v73 - v194))) >= 0.0)
                    break;
                  if (++v188 == 4)
                  {
                    v196 = v143[1];
                    v197 = v143[2];
                    v189 = v148[1];
                    v190 = v148[2];
                    v198 = (float)((float)((float)((float)((float)(v74 - v197) * (float)(v190 - v197))
                                                 + (float)((float)(v73 - v196) * (float)(v189 - v196)))
                                         * (float)(*v148 - *v143))
                                 / (float)((float)((float)((float)(v189 - v196) * (float)(v189 - v196))
                                                 + (float)((float)(*v148 - *v143) * (float)(*v148 - *v143)))
                                         + (float)((float)(v190 - v197) * (float)(v190 - v197))))
                         + (float)(*v143
                                 + (float)((float)((float)(*v145 - *v143)
                                                 * (float)((float)((float)(v74 - v197) * (float)(v145[2] - v197))
                                                         + (float)((float)(v73 - v196) * (float)(v145[1] - v196))))
                                         / (float)((float)((float)((float)(v145[1] - v196) * (float)(v145[1] - v196))
                                                         + (float)((float)(*v145 - *v143) * (float)(*v145 - *v143)))
                                                 + (float)((float)(v145[2] - v197) * (float)(v145[2] - v197)))));
                    if (v198 >= 0.0)
                    {
                      v140 |= 8u;
                      if (v9 <= 0x3F)
                      {
                        v199 = a1 + (v9++ << 6);
                        *(_DWORD *)(a1 + 4096) = v9;
                        *(_QWORD *)v199 = *(_QWORD *)a2;
                        v200 = *(_DWORD *)(a2 + 8);
                        *(float *)(v199 + 16) = v198;
                        *(float *)(v199 + 20) = v73;
                        *(float *)(v199 + 24) = v74;
                        *(_DWORD *)(v199 + 8) = v200;
                        *(float *)(v199 + 12) = -v198;
                        *(_DWORD *)(v199 + 52) = -1;
                      }
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v139 > 4)
      break;
    ++v139;
  }
  while (v140 != 15);
  if (v9)
  {
    v201 = (float *)(a1 + 24);
    v202 = v9;
    do
    {
      v203 = *(v201 - 2);
      v204 = *(v201 - 1);
      v205 = (float)((float)((float)(v203 * *(float *)(a4 + 8)) + (float)(v204 * *(float *)(a4 + 20)))
                   + (float)(*v201 * *(float *)(a4 + 32)))
           + *(float *)(a4 + 44);
      *((float32x2_t *)v201 - 1) = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a4, v203), vmul_n_f32(*(float32x2_t *)(a4 + 12), v204)), vmul_n_f32(*(float32x2_t *)(a4 + 24), *v201)), *(float32x2_t *)(a4 + 36));
      *v201 = v205;
      v201 += 16;
      --v202;
    }
    while (v202);
  }
  return v9;
}

BOOL intersectEdgeEdgePreca(float *a1, float *a2, uint64_t a3, float *a4, unsigned int a5, unsigned int a6, float32x2_t *a7, float *a8, float a9, float *a10, float *a11, float32x2_t *a12)
{
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v28;
  float32x2_t v29;
  float32_t v30;

  v12 = *a8;
  v13 = a8[1];
  v14 = a4[1];
  v15 = a8[2];
  v16 = a4[2];
  v17 = a4[3];
  v18 = (float)((float)((float)(v13 * v14) + (float)(*a8 * *a4)) + (float)(v15 * v16)) + v17;
  v19 = a10[1];
  v20 = a10[2];
  if ((float)(v18 * (float)(v17 + (float)((float)((float)(v14 * v19) + (float)(*a10 * *a4)) + (float)(v20 * v16)))) > 0.0)
    return 0;
  v21 = *a10 - v12;
  v22 = v19 - v13;
  v23 = v20 - v15;
  v24 = (float)((float)(v14 * v22) + (float)(*a4 * v21)) + (float)(v16 * v23);
  if (v24 == 0.0)
    return 0;
  v25 = v18 / v24;
  a12->f32[0] = v12 - (float)(v21 * v25);
  a12->f32[1] = v13 - (float)(v22 * v25);
  a12[1].f32[0] = v15 - (float)(v23 * v25);
  v26 = (float)((float)(*(float *)(a3 + 4 * a5) * (float)(a12->f32[a6] - a1[a6]))
              - (float)(*(float *)(a3 + 4 * a6) * (float)(a12->f32[a5] - a1[a5])))
      * a9;
  *a11 = v26;
  if (v26 < 0.0)
    return 0;
  v28 = v26 * a7[1].f32[0];
  v29 = vsub_f32(*a12, vmul_n_f32(*a7, v26));
  *a12 = v29;
  v30 = a12[1].f32[0] - v28;
  a12[1].f32[0] = v30;
  return (float)((float)((float)((float)(a1[1] - v29.f32[1]) * (float)(a2[1] - v29.f32[1]))
                       + (float)((float)(*a1 - v29.f32[0]) * (float)(*a2 - v29.f32[0])))
               + (float)((float)(a1[2] - v30) * (float)(a2[2] - v30))) < 0.0;
}

BOOL GuTestAxis(float *a1, float *a2, float *a3, float *a4, float a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  _BOOL8 result;
  float v20;
  float v21;

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a2[3];
  v9 = (float)((float)(a2[1] * v6) + (float)(*a2 * *a1)) + (float)(a2[2] * v7);
  v10 = a2[5];
  v11 = (float)((float)(v6 * a2[4]) + (float)(v8 * *a1)) + (float)(v10 * v7);
  if (v9 <= v11)
    v12 = (float)((float)(a2[1] * v6) + (float)(*a2 * *a1)) + (float)(a2[2] * v7);
  else
    v12 = (float)((float)(v6 * a2[4]) + (float)(v8 * *a1)) + (float)(v10 * v7);
  if (v9 > v11)
    v11 = (float)((float)(a2[1] * v6) + (float)(*a2 * *a1)) + (float)(a2[2] * v7);
  v13 = v12 - a5;
  v14 = v11 + a5;
  v15 = (float)((float)(v6 * a3[10]) + (float)(a3[9] * v5)) + (float)(a3[11] * v7);
  v16 = (float)((float)(a3[13] * fabsf((float)((float)(v6 * a3[4]) + (float)(a3[3] * v5)) + (float)(a3[5] * v7)))
              + (float)(fabsf((float)((float)(v6 * a3[1]) + (float)(*a3 * v5)) + (float)(a3[2] * v7)) * a3[12]))
      + (float)(fabsf((float)((float)(v6 * a3[7]) + (float)(a3[6] * v5)) + (float)(a3[8] * v7)) * a3[14]);
  v17 = v15 - v16;
  v18 = v15 + v16;
  result = v18 >= v13 && v14 >= v17;
  if (result)
  {
    v20 = v14 - v17;
    v21 = v18 - v13;
    if (v20 >= v21)
      v20 = v21;
    *a4 = v20;
  }
  return result;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<256u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  const char *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  _DWORD *v13;
  int v14;

  v3 = result;
  v4 = (4 * a2);
  if (v4 <= 0x100 && *(_BYTE *)(result + 256) == 0)
  {
    *(_BYTE *)(result + 256) = 1;
    v8 = (_DWORD *)result;
  }
  else if ((_DWORD)v4)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, v4, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_DWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 272);
  v10 = *(_QWORD *)(v3 + 264);
  if ((_DWORD)v9)
  {
    v11 = (unint64_t)&v8[v9];
    v12 = *(int **)(v3 + 264);
    v13 = v8;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while ((unint64_t)v13 < v11);
  }
  if ((*(_DWORD *)(v3 + 276) & 0x80000000) == 0)
  {
    if (v10 == v3)
    {
      *(_BYTE *)(v3 + 256) = 0;
    }
    else if (v10)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)(v3 + 264) = v8;
  *(_DWORD *)(v3 + 276) = a2;
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::supportPoint(uint64_t a1, int a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  double result;

  v2 = *(float32x4_t **)(a1 + 16);
  v3 = *(float32x4_t *)(*(_QWORD *)(a1 + 8) + 16 * (1 - a2) + 48);
  v4 = vmulq_n_f32(*v2, v3.f32[0]);
  v4.i32[3] = 0;
  v5 = vmulq_lane_f32(v2[1], *(float32x2_t *)v3.f32, 1);
  v5.i32[3] = 0;
  v6 = vmulq_laneq_f32(v2[2], v3, 2);
  v6.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v2[3], vaddq_f32(vaddq_f32(v4, v5), v6)).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(float32x4_t *a1, float32x2_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t *v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  double result;

  v2 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v2.i32[3] = 0;
  v3 = vmulq_lane_f32(a1[3], *a2, 1);
  v3.i32[3] = 0;
  v4 = (float32x4_t *)a1->i64[1];
  v5 = (float32x4_t *)a1[1].i64[0];
  v6 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v6.i32[3] = 0;
  v7 = vaddq_f32(vaddq_f32(v2, v3), v6);
  v8 = v4[3];
  v9 = v4[4];
  v10 = vmulq_f32(v8, v7);
  v10.i64[0] = vpaddq_f32(v10, v10).u64[0];
  v11 = vmulq_f32(v7, v9);
  v11.i64[0] = vpaddq_f32(v11, v11).u64[0];
  v12 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32), vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32)), 0), (int8x16_t)v8, (int8x16_t)v9);
  v13 = vmulq_n_f32(*v5, v12.f32[0]);
  v13.i32[3] = 0;
  v14 = vmulq_lane_f32(v5[1], *(float32x2_t *)v12.f32, 1);
  v14.i32[3] = 0;
  v15 = vmulq_laneq_f32(v5[2], v12, 2);
  v15.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v5[3], vaddq_f32(v15, vaddq_f32(v13, v14))).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(float32x4_t *a1, float32x2_t *a2, _DWORD *a3)
{
  float32x4_t *v3;
  float32x4_t *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  double result;

  v3 = (float32x4_t *)a1->i64[1];
  v4 = (float32x4_t *)a1[1].i64[0];
  v5 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v5.i32[3] = 0;
  v6 = vmulq_lane_f32(a1[3], *a2, 1);
  v6.i32[3] = 0;
  v7 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v7.i32[3] = 0;
  v8 = vaddq_f32(vaddq_f32(v5, v6), v7);
  v9 = vmulq_f32(v3[3], v8);
  v9.i64[0] = vpaddq_f32(v9, v9).u64[0];
  v10 = vmulq_f32(v8, v3[4]);
  v10.i64[0] = vpaddq_f32(v10, v10).u64[0];
  *(int8x8_t *)v10.f32 = vand_s8((int8x8_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v9.f32), vpadd_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32)), (int8x8_t)0x100000001);
  *a3 = v10.i32[0];
  v11 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), 0x1FuLL)), (int8x16_t)v3[3], (int8x16_t)v3[4]);
  v12 = vmulq_n_f32(*v4, v11.f32[0]);
  v12.i32[3] = 0;
  v13 = vmulq_lane_f32(v4[1], *(float32x2_t *)v11.f32, 1);
  v13.i32[3] = 0;
  v14 = vmulq_laneq_f32(v4[2], v11, 2);
  v14.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v4[3], vaddq_f32(v14, vaddq_f32(v12, v13))).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::getSweepMargin()
{
  return 0.0;
}

double physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::getCenter(uint64_t a1)
{
  float32x4_t *v1;
  float32x2_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  double result;

  v2 = *(float32x2_t **)(a1 + 8);
  v1 = *(float32x4_t **)(a1 + 16);
  v3 = vmulq_n_f32(*v1, COERCE_FLOAT(*(_OWORD *)v2->f32));
  v3.i32[3] = 0;
  v4 = vmulq_lane_f32(v1[1], *v2, 1);
  v4.i32[3] = 0;
  v5 = vmulq_laneq_f32(v1[2], *(float32x4_t *)v2->f32, 2);
  v5.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v1[3], vaddq_f32(vaddq_f32(v3, v4), v5)).u64[0];
  return result;
}

void physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::~RelativeConvex()
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::CapsuleV>>(float32x4_t *a1, uint64_t a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, uint64_t a6, float32x4_t a7, float32x2_t a8, double a9, float32x4_t a10)
{
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v14;
  const float *v15;
  float32x2_t v16;
  uint64_t v17;
  const float *v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  int32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  uint64_t v27;
  uint64_t v33;
  float32x4_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x2_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x2_t v51;
  int v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x2_t v55;
  float32x2_t v56;
  int v57;
  float32x2_t v58;
  float32x2_t v59;
  int v60;
  float32x4_t v61;
  float32x2_t v62;
  int32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x8_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  int8x8_t v74;
  float32x4_t v75;
  float32x2_t v76;
  float32x2_t v77;
  int8x8_t v78;
  float32x4_t v79;
  int8x8_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x2_t v83;
  float32x4_t v84;
  float32x2_t v85;
  float32x4_t v86;
  float32x2_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x2_t v91;
  float32x4_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x4_t v97;
  float32x2_t v98;
  float32x4_t v99;
  float32x2_t v100;
  float32x4_t v101;
  int32x4_t v102;
  __int32 v103;
  uint64_t v104;
  uint64_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x2_t v110;
  float32x2_t v111;
  int v112;
  int8x16_t v113;
  float32x2_t v114;
  float32x2_t v115;
  int v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  int v120;
  unsigned int v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  int v125;
  int8x16_t v126;
  float32x2_t v127;
  float32x2_t v128;
  int v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int v135;
  int v136;
  int v137;
  int v138;
  float32x4_t v139;
  float32x2_t v140;
  float32x2_t v141;
  int v142;
  float32x2_t v143;
  int v144;
  float32x4_t v145;
  float32x2_t v146;
  float32x2_t v147;
  int32x4_t v148;
  float32x4_t v149;
  int32x4_t v150;
  float32x4_t v151;
  uint64_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t *v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x2_t v161;
  float32x2_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x2_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x2_t v168;
  float32x2_t v169;
  int v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  int8x8_t v174;
  float32x2_t v175;
  float32x2_t v176;
  float32x2_t v177;
  float32x2_t v178;
  float32x2_t v179;
  float32x2_t v180;
  int8x8_t v181;
  float32x4_t v182;
  float32x2_t v183;
  float32x2_t v184;
  int8x8_t v185;
  float32x4_t v186;
  int8x8_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x2_t v190;
  float32x4_t v191;
  float32x2_t v192;
  float32x4_t v193;
  float32x2_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x2_t v198;
  float32x4_t v199;
  float32x2_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x2_t v203;
  float32x4_t v204;
  float32x2_t v205;
  float32x4_t v206;
  float32x2_t v207;
  float32x4_t v208;
  float32x2_t v209;
  __int32 v210;
  uint64_t v211;
  uint64_t v212;
  float32x4_t v213;
  float32x2_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x2_t v217;
  float32x2_t v218;
  int v219;
  int8x16_t v220;
  float32x2_t v221;
  float32x2_t v222;
  int v223;
  float32x2_t v224;
  float32x2_t v225;
  float32x2_t v226;
  int v227;
  unsigned int v228;
  float32x2_t v229;
  float32x2_t v230;
  float32x2_t v231;
  int v232;
  int8x16_t v233;
  float32x2_t v234;
  float32x2_t v235;
  int v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  int v243;
  int v244;
  int v245;
  int v246;
  float32x4_t v247;
  float32x2_t v248;
  float32x2_t v249;
  int v250;
  float32x2_t v251;
  int v252;
  float32x4_t v253;
  int8x8_t v254;
  uint64_t v255;
  int *v256;
  int *v257;
  int v258;
  int v259;
  int *v261;
  int *v262;
  int v263;
  int v264;
  int *v265;
  int *v266;
  uint64_t v267;
  int v268;
  int v269;
  uint64_t v270;
  float32x4_t v271;
  float32x4_t v272;
  uint64_t v273;
  int *v274;
  int *v275;
  int v276;
  int v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x2_t v288;
  float32x2_t v289;
  int v290;
  float32x4_t v291;
  float32x4_t v292;
  int8x16_t v293;
  int8x16_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x2_t v303;
  float32x2_t v304;
  int v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x2_t v308;
  int v309;
  float32x4_t v310;
  int8x16_t v311;
  int8x16_t v312;
  int32x4_t v313;
  float32x2_t v315;
  float v316;
  float32x2_t v317;
  float32x4_t v320;
  float32x2_t v321;
  float32x4_t v322;
  float32x4_t v323;
  unsigned int v324;
  float32x4_t v325;
  float32x2_t v326;
  float32x2_t v327;
  int v328;
  int v329;
  int v330;
  int v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  int8x16_t v340[2];
  uint64_t v341;

  v10 = a4;
  v11 = a3;
  v341 = *MEMORY[0x24BDAC8D0];
  v14 = a1->i64[1];
  v15 = (const float *)(v14 + 20);
  v16 = vld1_dup_f32(v15);
  v17 = *(_QWORD *)(a2 + 8);
  v18 = (const float *)(v17 + 20);
  v19 = vld1_dup_f32(v18);
  v20 = vmin_f32(v16, v19);
  v21 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  v22 = vmul_f32(v20, v21);
  v20.i32[0] = *(_DWORD *)(v14 + 16);
  v21.i32[0] = *(_DWORD *)(v17 + 16);
  a10.i32[0] = -*(char *)(v14 + 32);
  v23 = (int32x2_t)vand_s8(*(int8x8_t *)a10.f32, (int8x8_t)v20);
  v24 = (float32x2_t)vdup_lane_s32(v23, 0);
  v23.i32[0] = -*(char *)(v17 + 32);
  v25 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v23, (int8x8_t)v21), 0);
  v315 = v24;
  v316 = v25.f32[0];
  v26 = vadd_f32(v24, v25);
  v324 = 0;
  v27 = *a5;
  __asm { FMOV            V11.2S, #1.0 }
  if (!*a5)
  {
    v53 = vmulq_f32(a7, a7);
    v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
    v45 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_2260E5F10);
    v54 = vmulq_f32(v45, v45);
    v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
    v55 = vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32);
    v56 = vrsqrte_f32(v55);
    v57 = 4;
    do
    {
      v56 = vmul_f32(v56, vrsqrts_f32(vmul_f32(v56, v56), v55));
      --v57;
    }
    while (v57);
    v58 = vmul_f32(v55, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v55), 0), (int8x8_t)_D11, (int8x8_t)v56));
    v59 = vrecpe_f32(v58);
    v60 = 4;
    do
    {
      *(float32x2_t *)a10.f32 = vrecps_f32(v58, v59);
      v59 = vmul_f32(v59, *(float32x2_t *)a10.f32);
      --v60;
    }
    while (v60);
    v61 = vmulq_n_f32(v45, v59.f32[0]);
    v61.i32[3] = 0;
    v320 = v61;
    v62 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v63.i64[0] = -1;
    v63.i64[1] = -1;
    v64 = 0uLL;
    goto LABEL_54;
  }
  v33 = 0;
  v34 = (float32x4_t *)a1[1].i64[0];
  v35 = v14 + 48;
  v36 = v17 + 48;
  do
  {
    v37 = a3[v33];
    *(&v330 + v33) = v37;
    v38 = a4[v33];
    *(&v328 + v33) = v38;
    v39 = *(float32x4_t *)(v35 + 16 * (1 - v37));
    v40 = vmulq_n_f32(*v34, v39.f32[0]);
    v40.i32[3] = 0;
    v41 = vmulq_lane_f32(v34[1], *(float32x2_t *)v39.f32, 1);
    v41.i32[3] = 0;
    a10 = v34[3];
    v42 = vmulq_laneq_f32(v34[2], v39, 2);
    v42.i32[3] = 0;
    v43 = vaddq_f32(a10, vaddq_f32(vaddq_f32(v40, v41), v42));
    v44 = *(float32x4_t *)(v36 + 16 * (1 - v38));
    v45 = vsubq_f32(v43, v44);
    *(&v335 + v33) = v43;
    *(&v332 + v33) = v44;
    *(&v338 + v33++) = v45;
  }
  while (v27 != v33);
  v324 = v27;
  switch((_DWORD)v33)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v338, &v335, &v332, &v330, &v328, (int *)&v324);
      goto LABEL_49;
    case 3:
      v324 = 3;
      v45 = v338;
      a10 = vsubq_f32(v339, v338);
      v65 = vsubq_f32((float32x4_t)v340[0], v338);
      v67 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), *(float32x2_t *)v65.f32);
      *(int8x8_t *)v66.f32 = vext_s8(v67, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), *(float32x2_t *)v65.f32), *(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL)), 4uLL);
      v67.i32[1] = 0;
      v68 = vpadd_f32(vmul_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32), vmul_f32((float32x2_t)v67.u32[0], (float32x2_t)v67.u32[0]));
      v69 = vpadd_f32(v68, v68);
      if (v69.f32[0] > 0.00000011921)
      {
        if (v69.f32[0] == 0.0)
        {
          v45 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v66.u32[2] = v67;
          v70 = (float32x2_t)vextq_s8((int8x16_t)v339, (int8x16_t)v339, 8uLL).u64[0];
          v71 = (float32x2_t)vextq_s8(v340[0], v340[0], 8uLL).u64[0];
          v72 = (float32x2_t)vextq_s8(v340[0], v340[0], 4uLL).u64[0];
          v73 = (float32x2_t)vextq_s8((int8x16_t)v339, (int8x16_t)v339, 4uLL).u64[0];
          v74 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v339.f32, v72), v73, *(float32x2_t *)v340[0].i8);
          *(int8x8_t *)v75.f32 = vext_s8(v74, (int8x8_t)vmls_f32(vmul_f32(v70, *(float32x2_t *)v340[0].i8), *(float32x2_t *)v339.f32, v71), 4uLL);
          v75.i64[1] = v74.u32[0];
          v76 = (float32x2_t)vextq_s8((int8x16_t)v338, (int8x16_t)v338, 8uLL).u64[0];
          v77 = (float32x2_t)vextq_s8((int8x16_t)v338, (int8x16_t)v338, 4uLL).u64[0];
          v78 = (int8x8_t)vmls_f32(vmul_f32(v77, *(float32x2_t *)v340[0].i8), v72, *(float32x2_t *)v338.f32);
          *(int8x8_t *)v79.f32 = vext_s8(v78, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v338.f32, v71), *(float32x2_t *)v340[0].i8, v76), 4uLL);
          v79.i64[1] = v78.u32[0];
          v80 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v338.f32, v73), v77, *(float32x2_t *)v339.f32);
          *(int8x8_t *)v81.f32 = vext_s8(v80, (int8x8_t)vmls_f32(vmul_f32(v76, *(float32x2_t *)v339.f32), *(float32x2_t *)v338.f32, v70), 4uLL);
          v81.i64[1] = v80.u32[0];
          v82 = vmulq_f32(v75, v66);
          v82.i64[0] = vpaddq_f32(v82, v82).u64[0];
          v83 = vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32);
          v84 = vmulq_f32(v79, v66);
          v84.i64[0] = vpaddq_f32(v84, v84).u64[0];
          v85 = vpadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32);
          v86 = vmulq_f32(v81, v66);
          v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
          v87 = vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v85), (int8x8_t)vcgez_f32(v83)), (int8x8_t)vcgez_f32(v87)), 0), *(int8x8_t *)v338.f32).u32[0] == -1)
          {
            v113 = (int8x16_t)vmulq_f32(v338, v66);
            v114 = (float32x2_t)vextq_s8(v113, v113, 8uLL).u64[0];
            v115 = vrecpe_f32(v69);
            v116 = 4;
            do
            {
              v115 = vmul_f32(v115, vrecps_f32(v69, v115));
              --v116;
            }
            while (v116);
            v117 = vpadd_f32(*(float32x2_t *)v113.i8, v114);
            v45 = vmulq_n_f32(v66, vmul_f32(v115, vpadd_f32(v117, v117)).f32[0]);
            v45.i32[3] = 0;
          }
          else
          {
            v88 = vnegq_f32(v338);
            v88.i32[3] = 0;
            v89 = vnegq_f32(v339);
            v89.i32[3] = 0;
            v90 = vmulq_f32(v88, a10);
            v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
            v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
            v92 = vmulq_f32(a10, v89);
            v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
            v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v91), (int8x8_t)vclez_f32(v93)), (int8x8_t)vclez_f32(v87)), 0), *(int8x8_t *)v338.f32).u32[0] == -1)
            {
              v118 = vsub_f32(v91, v93);
              v119 = vrecpe_f32(v118);
              v120 = 4;
              do
              {
                v119 = vmul_f32(v119, vrecps_f32(v118, v119));
                --v120;
              }
              while (v120);
              v105 = 0;
              v45 = vmlaq_n_f32(v338, a10, vmul_f32(v91, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v118), (float32x2_t)0x3400000034000000), (int8x8_t)v119, 0)).f32[0]);
              v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
              v121 = 2;
              v104 = 1;
            }
            else
            {
              v94 = vnegq_f32((float32x4_t)v340[0]);
              v94.i32[3] = 0;
              v95 = vmulq_f32(v89, v65);
              v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
              v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
              v97 = vmulq_f32(a10, v94);
              v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
              v98 = vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32);
              v99 = vmulq_f32(v65, v94);
              v99.i64[0] = vpaddq_f32(v99, v99).u64[0];
              v100 = vpadd_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v99.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v96, v93), (int8x8_t)vcge_f32(v98, v100)), (int8x8_t)vclez_f32(v83)), 0), *(int8x8_t *)v338.f32).u32[0] == -1)
              {
                v122 = vsub_f32(v96, v93);
                v123 = vadd_f32(v122, vsub_f32(v98, v100));
                v124 = vrecpe_f32(v123);
                v125 = 4;
                do
                {
                  v124 = vmul_f32(v124, vrecps_f32(v123, v124));
                  --v125;
                }
                while (v125);
                v126 = (int8x16_t)vmlaq_n_f32(v339, vsubq_f32((float32x4_t)v340[0], v339), vmul_f32(v122, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v123), (float32x2_t)0x3400000034000000), (int8x8_t)v124, 0)).f32[0]);
                v126.i64[1] = vextq_s8(v126, v126, 8uLL).u32[0];
                v121 = 2;
                v105 = 1;
                v104 = 2;
                v45 = (float32x4_t)v126;
              }
              else
              {
                v101 = vmulq_f32(v88, v65);
                v102 = (int32x4_t)vpaddq_f32(v101, v101);
                *(float32x2_t *)v102.i8 = vpadd_f32(*(float32x2_t *)v102.i8, *(float32x2_t *)v102.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v102.i8), (int8x8_t)vclez_f32(v100)), (int8x8_t)vclez_f32(v85)), 0), *(int8x8_t *)v338.f32).u32[0] == -1)
                {
                  v127 = vsub_f32(*(float32x2_t *)v102.i8, v100);
                  v128 = vrecpe_f32(v127);
                  v129 = 4;
                  do
                  {
                    v128 = vmul_f32(v128, vrecps_f32(v127, v128));
                    --v129;
                  }
                  while (v129);
                  v105 = 0;
                  v45 = vmlaq_n_f32(v338, v65, vmul_f32(*(float32x2_t *)v102.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v127), (float32x2_t)0x3400000034000000), (int8x8_t)v128, 0)).f32[0]);
                  v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
                  v104 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v102.i8), (int8x8_t)vclez_f32(v91)), 0), *(int8x8_t *)v338.f32).u32[0] == -1)
                {
                  v105 = 0;
                  v104 = 1;
                }
                else
                {
                  *(int32x2_t *)v102.i8 = vcge_f32(v93, v96);
                  *(int16x4_t *)v45.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v102.i8, (int8x8_t)vcgez_f32(v93)), 0);
                  *(int8x8_t *)v45.f32 = vuzp1_s8(*(int8x8_t *)v45.f32, *(int8x8_t *)v45.f32);
                  v102.i32[0] = -1;
                  v103 = v45.i32[0];
                  v45 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v45, v102), 0), (int8x16_t)v339, v340[0]);
                  v104 = 1;
                  if (v103 == -1)
                    v105 = 1;
                  else
                    v105 = 2;
                }
                v121 = v104;
              }
            }
            v130 = *(&v338 + v105);
            v131 = *(&v338 + v104);
            a10 = *(&v335 + v105);
            v132 = *(&v335 + v104);
            v133 = *(&v332 + v105);
            v134 = *(&v332 + v104);
            v135 = *(&v330 + v105);
            v136 = *(&v330 + v104);
            v137 = *(&v328 + v105);
            v138 = *(&v328 + v104);
            v338 = v130;
            v339 = v131;
            v335 = a10;
            v336 = v132;
            v332 = v133;
            v333 = v134;
            v330 = v135;
            v331 = v136;
            v328 = v137;
            v329 = v138;
            v324 = v121;
          }
        }
        goto LABEL_49;
      }
      v324 = 2;
      v106 = vmulq_f32(a10, a10);
      v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
      v107 = vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v107), 0), *(int8x8_t *)v338.f32).u32[0] != -1)
      {
        v108 = vnegq_f32(v338);
        v108.i32[3] = 0;
        v109 = vmulq_f32(v108, a10);
        v109.i64[0] = vpaddq_f32(v109, v109).u64[0];
        v110 = vpadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v109.f32);
        v111 = vrecpe_f32(v107);
        v112 = 4;
        do
        {
          v111 = vmul_f32(v111, vrecps_f32(v107, v111));
          --v112;
        }
        while (v112);
        v45 = vmlaq_n_f32(v338, a10, vmax_f32(vmin_f32(vmul_f32(v110, v111), _D11), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      v45 = v338;
      v46 = vsubq_f32(v339, v338);
      v47 = vmulq_f32(v46, v46);
      v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
      v48 = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v48), 0), *(int8x8_t *)v338.f32).u32[0] != -1)
      {
        v49 = vnegq_f32(v338);
        v49.i32[3] = 0;
        v50 = vmulq_f32(v49, v46);
        a10 = vpaddq_f32(v50, v50);
        *(float32x2_t *)a10.f32 = vpadd_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
        v51 = vrecpe_f32(v48);
        v52 = 4;
        do
        {
          v51 = vmul_f32(v51, vrecps_f32(v48, v51));
          --v52;
        }
        while (v52);
        v45 = vmlaq_n_f32(v338, v46, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a10.f32, v51), _D11), 0).f32[0]);
LABEL_31:
        v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  v324 = 1;
LABEL_49:
  v139 = vmulq_f32(v45, v45);
  v139.i64[0] = vpaddq_f32(v139, v139).u64[0];
  v140 = vpadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32);
  v141 = vrsqrte_f32(v140);
  v142 = 4;
  do
  {
    v141 = vmul_f32(v141, vrsqrts_f32(vmul_f32(v141, v141), v140));
    --v142;
  }
  while (v142);
  v62 = vmul_f32(v140, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v140), 0), (int8x8_t)_D11, (int8x8_t)v141));
  v143 = vrecpe_f32(v62);
  v144 = 4;
  do
  {
    *(float32x2_t *)a10.f32 = vrecps_f32(v62, v143);
    v143 = vmul_f32(v143, *(float32x2_t *)a10.f32);
    --v144;
  }
  while (v144);
  v145 = vmulq_n_f32(v45, v143.f32[0]);
  v145.i32[3] = 0;
  v320 = v145;
  v63 = vdupq_lane_s32(vcgt_f32(v62, v22), 0);
  v64 = v45;
LABEL_54:
  v317 = v26;
  v146 = vadd_f32(v26, a8);
  a10.i32[0] = -1;
  v313 = (int32x4_t)a10;
  v147 = v62;
  v148.i64[0] = -1;
  v148.i64[1] = -1;
  while (1)
  {
    v149 = v45;
    v150.i64[0] = -1;
    v150.i64[1] = -1;
    *(int16x4_t *)v150.i8 = vmovn_s32(vceqq_s32(v63, v150));
    if (vuzp1_s8(*(int8x8_t *)v150.i8, *(int8x8_t *)v150.i8).u32[0] != -1)
      break;
    v321 = v62;
    v322 = v149;
    v151 = vnegq_f32(v149);
    v151.i32[3] = 0;
    v325 = v151;
    v152 = v324;
    *(double *)v153.i64 = physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(a1, (float32x2_t *)&v325, &v330 + v324);
    v64 = v322;
    v154 = v153;
    v155 = *(float32x4_t **)(a2 + 8);
    v156 = vmulq_f32(v322, v155[3]);
    v156.i64[0] = vpaddq_f32(v156, v156).u64[0];
    v157 = vmulq_f32(v322, v155[4]);
    v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
    *(int8x8_t *)v156.f32 = vand_s8((int8x8_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v156.f32, *(float32x2_t *)v156.f32), vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32)), (int8x8_t)0x100000001);
    *(&v328 + v152) = v156.i32[0];
    v158 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(*(int32x2_t *)v156.f32, 0), 0x1FuLL)), (int8x16_t)v155[3], (int8x16_t)v155[4]);
    v45 = vsubq_f32(v154, v158);
    v159 = v320;
    v160 = vmulq_f32(v320, v45);
    v160.i64[0] = vpaddq_f32(v160, v160).u64[0];
    v161 = vpadd_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v160.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v161, v146)).u8[0] & 1) == 0)
    {
      if (v11)
      {
        *a5 = v152;
        if ((_DWORD)v152)
        {
          v261 = &v328;
          v262 = &v330;
          do
          {
            v263 = *v262++;
            *v11++ = v263;
            v264 = *v261++;
            *v10++ = v264;
            --v152;
          }
          while (v152);
        }
      }
      return 0;
    }
    v162 = v321;
    if (v161.f32[0] > (float)(0.99977 * v321.f32[0]))
    {
      v325 = v322;
      if (v11)
      {
        *a5 = v152;
        if ((_DWORD)v152)
        {
          v265 = &v328;
          v266 = &v330;
          v267 = v152;
          do
          {
            v268 = *v266++;
            *v11++ = v268;
            v269 = *v265++;
            *v10++ = v269;
            --v267;
          }
          while (v267);
          goto LABEL_119;
        }
        v270 = a6;
        *(float32x4_t *)(a6 + 32) = v320;
        v271 = 0uLL;
        v272 = 0uLL;
      }
      else
      {
LABEL_119:
        v270 = a6;
        *(float32x4_t *)(a6 + 32) = v320;
        if ((_DWORD)v152 == 3)
        {
          v326 = 0;
          v327 = 0;
          physx::Gu::barycentricCoordinates(&v325, &v338, &v339, (float32x4_t *)v340, &v327, &v326);
          v159 = v320;
          v162 = v321;
          v280 = vmulq_n_f32(vsubq_f32(v336, v335), v327.f32[0]);
          v280.i32[3] = 0;
          v281 = vmulq_n_f32(vsubq_f32(v337, v335), v326.f32[0]);
          v281.i32[3] = 0;
          v282 = vaddq_f32(v280, v281);
          v283 = vmulq_n_f32(vsubq_f32(v333, v332), v327.f32[0]);
          v283.i32[3] = 0;
          v271 = vaddq_f32(v335, v282);
          v284 = vmulq_n_f32(vsubq_f32(v334, v332), v326.f32[0]);
          v284.i32[3] = 0;
          v272 = vaddq_f32(v332, vaddq_f32(v283, v284));
        }
        else if ((_DWORD)v152 == 2)
        {
          v285 = vsubq_f32(v338, v322);
          v286 = vsubq_f32(vsubq_f32(v339, v322), v285);
          v287 = vmulq_f32(v286, v286);
          v287.i64[0] = vpaddq_f32(v287, v287).u64[0];
          v288 = vpadd_f32(*(float32x2_t *)v287.f32, *(float32x2_t *)v287.f32);
          v289 = vrecpe_f32(v288);
          v290 = 4;
          do
          {
            v289 = vmul_f32(v289, vrecps_f32(v288, v289));
            --v290;
          }
          while (v290);
          v291 = vnegq_f32(v285);
          v291.i32[3] = 0;
          v292 = vmulq_f32(v291, v286);
          v292.i64[0] = vpaddq_f32(v292, v292).u64[0];
          v291.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v288), (int8x8_t)v289, 0), vpadd_f32(*(float32x2_t *)v292.f32, *(float32x2_t *)v292.f32)).u32[0];
          v271 = vmlaq_n_f32(v335, vsubq_f32(v336, v335), v291.f32[0]);
          v271.i64[1] = vextq_s8((int8x16_t)v271, (int8x16_t)v271, 8uLL).u32[0];
          v272 = vmlaq_n_f32(v332, vsubq_f32(v333, v332), v291.f32[0]);
          v272.i64[1] = vextq_s8((int8x16_t)v272, (int8x16_t)v272, 8uLL).u32[0];
        }
        else
        {
          v271 = 0uLL;
          v272 = 0uLL;
          if ((_DWORD)v152 == 1)
          {
            v271 = v335;
            v272 = v332;
          }
        }
      }
      v293 = (int8x16_t)vmlsq_lane_f32(v271, v159, v315, 0);
      v293.i64[1] = vextq_s8(v293, v293, 8uLL).u32[0];
      v294 = (int8x16_t)vmlaq_n_f32(v272, v159, v316);
      v294.i64[1] = vextq_s8(v294, v294, 8uLL).u32[0];
      *(int8x16_t *)v270 = v293;
      *(int8x16_t *)(v270 + 16) = v294;
      *(float32x2_t *)(v270 + 64) = vsub_f32(v162, v317);
      return 2;
    }
    *(&v335 + v152) = v154;
    *(&v332 + v152) = v158;
    v324 = v152 + 1;
    *(&v338 + v152) = v45;
    switch((_DWORD)v152)
    {
      case 3:
        physx::Gu::closestPtPointTetrahedron(&v338, &v335, &v332, &v330, &v328, (int *)&v324);
        v162 = v321;
        v64 = v322;
        break;
      case 2:
        v45 = v338;
        v171 = vsubq_f32(v339, v338);
        v172 = vsubq_f32((float32x4_t)v340[0], v338);
        v174 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v171.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v172, (int8x16_t)v172, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v171, (int8x16_t)v171, 4uLL), *(float32x2_t *)v172.f32);
        *(int8x8_t *)v173.f32 = vext_s8(v174, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v171, (int8x16_t)v171, 8uLL), *(float32x2_t *)v172.f32), *(float32x2_t *)v171.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v172, (int8x16_t)v172, 8uLL)), 4uLL);
        v174.i32[1] = 0;
        v324 = 3;
        v175 = vpadd_f32(vmul_f32(*(float32x2_t *)v173.f32, *(float32x2_t *)v173.f32), vmul_f32((float32x2_t)v174.u32[0], (float32x2_t)v174.u32[0]));
        v176 = vpadd_f32(v175, v175);
        if (v176.f32[0] <= 0.00000011921)
        {
          v324 = 2;
          v213 = vmulq_f32(v171, v171);
          v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
          v214 = vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v214), 0), *(int8x8_t *)v338.f32).u32[0] == -1)
          {
LABEL_81:
            v324 = 1;
            break;
          }
          v215 = vnegq_f32(v338);
          v215.i32[3] = 0;
          v216 = vmulq_f32(v215, v171);
          v216.i64[0] = vpaddq_f32(v216, v216).u64[0];
          v217 = vpadd_f32(*(float32x2_t *)v216.f32, *(float32x2_t *)v216.f32);
          v218 = vrecpe_f32(v214);
          v219 = 4;
          do
          {
            v218 = vmul_f32(v218, vrecps_f32(v214, v218));
            --v219;
          }
          while (v219);
          v45 = vmlaq_n_f32(v338, v171, vmax_f32(vmin_f32(vmul_f32(v217, v218), _D11), 0).f32[0]);
          goto LABEL_80;
        }
        if (v176.f32[0] == 0.0)
        {
          v45 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v173.u32[2] = v174;
          v177 = (float32x2_t)vextq_s8((int8x16_t)v339, (int8x16_t)v339, 8uLL).u64[0];
          v178 = (float32x2_t)vextq_s8(v340[0], v340[0], 8uLL).u64[0];
          v179 = (float32x2_t)vextq_s8(v340[0], v340[0], 4uLL).u64[0];
          v180 = (float32x2_t)vextq_s8((int8x16_t)v339, (int8x16_t)v339, 4uLL).u64[0];
          v181 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v339.f32, v179), v180, *(float32x2_t *)v340[0].i8);
          *(int8x8_t *)v182.f32 = vext_s8(v181, (int8x8_t)vmls_f32(vmul_f32(v177, *(float32x2_t *)v340[0].i8), *(float32x2_t *)v339.f32, v178), 4uLL);
          v182.i64[1] = v181.u32[0];
          v183 = (float32x2_t)vextq_s8((int8x16_t)v338, (int8x16_t)v338, 8uLL).u64[0];
          v184 = (float32x2_t)vextq_s8((int8x16_t)v338, (int8x16_t)v338, 4uLL).u64[0];
          v185 = (int8x8_t)vmls_f32(vmul_f32(v184, *(float32x2_t *)v340[0].i8), v179, *(float32x2_t *)v338.f32);
          *(int8x8_t *)v186.f32 = vext_s8(v185, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v338.f32, v178), *(float32x2_t *)v340[0].i8, v183), 4uLL);
          v186.i64[1] = v185.u32[0];
          v187 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v338.f32, v180), v184, *(float32x2_t *)v339.f32);
          *(int8x8_t *)v188.f32 = vext_s8(v187, (int8x8_t)vmls_f32(vmul_f32(v183, *(float32x2_t *)v339.f32), *(float32x2_t *)v338.f32, v177), 4uLL);
          v188.i64[1] = v187.u32[0];
          v189 = vmulq_f32(v182, v173);
          v189.i64[0] = vpaddq_f32(v189, v189).u64[0];
          v190 = vpadd_f32(*(float32x2_t *)v189.f32, *(float32x2_t *)v189.f32);
          v191 = vmulq_f32(v186, v173);
          v191.i64[0] = vpaddq_f32(v191, v191).u64[0];
          v192 = vpadd_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32);
          v193 = vmulq_f32(v188, v173);
          v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
          v194 = vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v192), (int8x8_t)vcgez_f32(v190)), (int8x8_t)vcgez_f32(v194)), 0), *(int8x8_t *)v338.f32).u32[0] != -1)
          {
            v195 = vnegq_f32(v338);
            v195.i32[3] = 0;
            v196 = vnegq_f32(v339);
            v196.i32[3] = 0;
            v197 = vmulq_f32(v195, v171);
            v197.i64[0] = vpaddq_f32(v197, v197).u64[0];
            v198 = vpadd_f32(*(float32x2_t *)v197.f32, *(float32x2_t *)v197.f32);
            v199 = vmulq_f32(v171, v196);
            v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
            v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v198), (int8x8_t)vclez_f32(v200)), (int8x8_t)vclez_f32(v194)), 0), *(int8x8_t *)v338.f32).u32[0] == -1)
            {
              v225 = vsub_f32(v198, v200);
              v226 = vrecpe_f32(v225);
              v227 = 4;
              do
              {
                v226 = vmul_f32(v226, vrecps_f32(v225, v226));
                --v227;
              }
              while (v227);
              v212 = 0;
              v45 = vmlaq_n_f32(v338, v171, vmul_f32(v198, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v225), (float32x2_t)0x3400000034000000), (int8x8_t)v226, 0)).f32[0]);
              v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
              v228 = 2;
              v211 = 1;
            }
            else
            {
              v201 = vnegq_f32((float32x4_t)v340[0]);
              v201.i32[3] = 0;
              v202 = vmulq_f32(v196, v172);
              v202.i64[0] = vpaddq_f32(v202, v202).u64[0];
              v203 = vpadd_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v202.f32);
              v204 = vmulq_f32(v171, v201);
              v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
              v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
              v206 = vmulq_f32(v172, v201);
              v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
              v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v203, v200), (int8x8_t)vcge_f32(v205, v207)), (int8x8_t)vclez_f32(v190)), 0), *(int8x8_t *)v338.f32).u32[0] == -1)
              {
                v229 = vsub_f32(v203, v200);
                v230 = vadd_f32(v229, vsub_f32(v205, v207));
                v231 = vrecpe_f32(v230);
                v232 = 4;
                do
                {
                  v231 = vmul_f32(v231, vrecps_f32(v230, v231));
                  --v232;
                }
                while (v232);
                v233 = (int8x16_t)vmlaq_n_f32(v339, vsubq_f32((float32x4_t)v340[0], v339), vmul_f32(v229, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v230), (float32x2_t)0x3400000034000000), (int8x8_t)v231, 0)).f32[0]);
                v233.i64[1] = vextq_s8(v233, v233, 8uLL).u32[0];
                v211 = 2;
                v45 = (float32x4_t)v233;
                v212 = 1;
              }
              else
              {
                v208 = vmulq_f32(v195, v172);
                v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
                v209 = vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v209), (int8x8_t)vclez_f32(v207)), (int8x8_t)vclez_f32(v192)), 0), *(int8x8_t *)v338.f32).u32[0] != -1)
                {
                  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v209), (int8x8_t)vclez_f32(v198)), 0), *(int8x8_t *)v338.f32).u32[0] == -1)
                  {
                    v212 = 0;
                    v211 = 1;
                  }
                  else
                  {
                    *(int16x4_t *)v45.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v200, v203), (int8x8_t)vcgez_f32(v200)), 0);
                    *(int8x8_t *)v45.f32 = vuzp1_s8(*(int8x8_t *)v45.f32, *(int8x8_t *)v45.f32);
                    v210 = v45.i32[0];
                    v45 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v45, v313), 0), (int8x16_t)v339, v340[0]);
                    v211 = 1;
                    if (v210 == -1)
                      v212 = 1;
                    else
                      v212 = 2;
                  }
                  v228 = 1;
                  goto LABEL_98;
                }
                v234 = vsub_f32(v209, v207);
                v235 = vrecpe_f32(v234);
                v236 = 4;
                do
                {
                  v235 = vmul_f32(v235, vrecps_f32(v234, v235));
                  --v236;
                }
                while (v236);
                v212 = 0;
                v45 = vmlaq_n_f32(v338, v172, vmul_f32(v209, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v234), (float32x2_t)0x3400000034000000), (int8x8_t)v235, 0)).f32[0]);
                v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
                v211 = 2;
              }
              v228 = 2;
            }
LABEL_98:
            v237 = *(&v338 + v212);
            v238 = *(&v338 + v211);
            v239 = *(&v335 + v212);
            v240 = *(&v335 + v211);
            v241 = *(&v332 + v212);
            v242 = *(&v332 + v211);
            v243 = *(&v330 + v212);
            v244 = *(&v330 + v211);
            v245 = *(&v328 + v212);
            v246 = *(&v328 + v211);
            v338 = v237;
            v339 = v238;
            v335 = v239;
            v336 = v240;
            v332 = v241;
            v333 = v242;
            v330 = v243;
            v331 = v244;
            v328 = v245;
            v329 = v246;
            v324 = v228;
            break;
          }
          v220 = (int8x16_t)vmulq_f32(v338, v173);
          v221 = (float32x2_t)vextq_s8(v220, v220, 8uLL).u64[0];
          v222 = vrecpe_f32(v176);
          v223 = 4;
          do
          {
            v222 = vmul_f32(v222, vrecps_f32(v176, v222));
            --v223;
          }
          while (v223);
          v224 = vpadd_f32(*(float32x2_t *)v220.i8, v221);
          v45 = vmulq_n_f32(v173, vmul_f32(v222, vpadd_f32(v224, v224)).f32[0]);
          v45.i32[3] = 0;
        }
        break;
      case 1:
        v45 = v338;
        v163 = vsubq_f32(v339, v338);
        v164 = vmulq_f32(v163, v163);
        v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
        v165 = vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v165), 0), *(int8x8_t *)v338.f32).u32[0] == -1)goto LABEL_81;
        v166 = vnegq_f32(v338);
        v166.i32[3] = 0;
        v167 = vmulq_f32(v166, v163);
        v167.i64[0] = vpaddq_f32(v167, v167).u64[0];
        v168 = vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32);
        v169 = vrecpe_f32(v165);
        v170 = 4;
        do
        {
          v169 = vmul_f32(v169, vrecps_f32(v165, v169));
          --v170;
        }
        while (v170);
        v45 = vmlaq_n_f32(v338, v163, vmax_f32(vmin_f32(vmul_f32(v168, v169), _D11), 0).f32[0]);
LABEL_80:
        v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
        break;
    }
    v247 = vmulq_f32(v45, v45);
    v247.i64[0] = vpaddq_f32(v247, v247).u64[0];
    v248 = vpadd_f32(*(float32x2_t *)v247.f32, *(float32x2_t *)v247.f32);
    v249 = vrsqrte_f32(v248);
    v250 = 4;
    do
    {
      v249 = vmul_f32(v249, vrsqrts_f32(vmul_f32(v249, v249), v248));
      --v250;
    }
    while (v250);
    v62 = vmul_f32(v248, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v248), 0), (int8x8_t)_D11, (int8x8_t)v249));
    v251 = vrecpe_f32(v62);
    v252 = 4;
    do
    {
      v251 = vmul_f32(v251, vrecps_f32(v62, v251));
      --v252;
    }
    while (v252);
    v253 = vmulq_n_f32(v45, v251.f32[0]);
    v253.i32[3] = 0;
    v320 = v253;
    *(int32x2_t *)v253.f32 = vcgt_f32(v162, v62);
    v148 = vdupq_lane_s32(*(int32x2_t *)v253.f32, 0);
    v63 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v62, v22), *(int8x8_t *)v253.f32), 0);
    v147 = v162;
  }
  v254 = (int8x8_t)vmovn_s32(vceqzq_s32(v148));
  v255 = v324;
  if (vuzp1_s8(v254, v254).u32[0] == -1)
  {
    if (v11)
    {
      v273 = v324 - 1;
      *a5 = v324 - 1;
      if ((_DWORD)v255 == 1)
      {
LABEL_130:
        v278 = v335;
        v279 = v332;
        goto LABEL_141;
      }
      v274 = &v328;
      v275 = &v330;
      do
      {
        v276 = *v275++;
        *v11++ = v276;
        v277 = *v274++;
        *v10++ = v277;
        --v273;
      }
      while (v273);
    }
    v325 = v64;
    if ((_DWORD)v255 == 3)
    {
      v326 = 0;
      v327 = 0;
      v323 = v64;
      physx::Gu::barycentricCoordinates(&v325, &v338, &v339, (float32x4_t *)v340, &v327, &v326);
      v295 = vmulq_n_f32(vsubq_f32(v336, v335), v327.f32[0]);
      v295.i32[3] = 0;
      v296 = vmulq_n_f32(vsubq_f32(v337, v335), v326.f32[0]);
      v296.i32[3] = 0;
      v297 = vaddq_f32(v295, v296);
      v298 = vmulq_n_f32(vsubq_f32(v333, v332), v327.f32[0]);
      v298.i32[3] = 0;
      v278 = vaddq_f32(v335, v297);
      v299 = vmulq_n_f32(vsubq_f32(v334, v332), v326.f32[0]);
      v64 = v323;
      v299.i32[3] = 0;
      v279 = vaddq_f32(v332, vaddq_f32(v298, v299));
    }
    else
    {
      if ((_DWORD)v255 == 2)
      {
        v300 = vsubq_f32(v338, v64);
        v301 = vsubq_f32(vsubq_f32(v339, v64), v300);
        v302 = vmulq_f32(v301, v301);
        v302.i64[0] = vpaddq_f32(v302, v302).u64[0];
        v303 = vpadd_f32(*(float32x2_t *)v302.f32, *(float32x2_t *)v302.f32);
        v304 = vrecpe_f32(v303);
        v305 = 4;
        do
        {
          v304 = vmul_f32(v304, vrecps_f32(v303, v304));
          --v305;
        }
        while (v305);
        v306 = vnegq_f32(v300);
        v306.i32[3] = 0;
        v307 = vmulq_f32(v306, v301);
        v307.i64[0] = vpaddq_f32(v307, v307).u64[0];
        v306.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v303), (int8x8_t)v304, 0), vpadd_f32(*(float32x2_t *)v307.f32, *(float32x2_t *)v307.f32)).u32[0];
        v278 = vmlaq_n_f32(v335, vsubq_f32(v336, v335), v306.f32[0]);
        v278.i64[1] = vextq_s8((int8x16_t)v278, (int8x16_t)v278, 8uLL).u32[0];
        v279 = vmlaq_n_f32(v332, vsubq_f32(v333, v332), v306.f32[0]);
        v279.i64[1] = vextq_s8((int8x16_t)v279, (int8x16_t)v279, 8uLL).u32[0];
        goto LABEL_141;
      }
      v278 = 0uLL;
      v279 = 0uLL;
      if ((_DWORD)v255 == 1)
        goto LABEL_130;
    }
LABEL_141:
    v308 = vrecpe_f32(v147);
    v309 = 4;
    do
    {
      v308 = vmul_f32(v308, vrecps_f32(v147, v308));
      --v309;
    }
    while (v309);
    v310 = vmulq_n_f32(v64, v308.f32[0]);
    v310.i32[3] = 0;
    *(float32x4_t *)(a6 + 32) = v310;
    *(float32x4_t *)(a6 + 48) = v320;
    v311 = (int8x16_t)vmlsq_lane_f32(v278, v310, v315, 0);
    v311.i64[1] = vextq_s8(v311, v311, 8uLL).u32[0];
    v312 = (int8x16_t)vmlaq_n_f32(v279, v310, v316);
    v312.i64[1] = vextq_s8(v312, v312, 8uLL).u32[0];
    *(int8x16_t *)a6 = v311;
    *(int8x16_t *)(a6 + 16) = v312;
    *(float32x2_t *)(a6 + 64) = vsub_f32(v147, v317);
    if ((vcge_f32(v317, v147).u8[0] & 1) != 0)
      return 2;
    else
      return 4;
  }
  if (v11)
  {
    *a5 = v324;
    if ((_DWORD)v255)
    {
      v256 = &v328;
      v257 = &v330;
      do
      {
        v258 = *v257++;
        *v11++ = v258;
        v259 = *v256++;
        *v10++ = v259;
        --v255;
      }
      while (v255);
    }
  }
  return 5;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(float32x4_t *a1, uint64_t a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, uint64_t a6, float32x4_t a7, float32x2_t a8, double a9, int8x8_t a10)
{
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v14;
  const float *v15;
  float32x2_t v16;
  float32x4_t *v17;
  const float *v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  int32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  uint64_t v27;
  uint64_t v33;
  float32x4_t *v34;
  uint64_t v35;
  float32x4_t v36;
  int8x16_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x2_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x2_t v52;
  float32x2_t v53;
  int v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x2_t v57;
  float32x2_t v58;
  int v59;
  float32x2_t v60;
  float32x2_t v61;
  int v62;
  float32x4_t v63;
  float32x2_t v64;
  int32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x8_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  int8x8_t v77;
  float32x4_t v78;
  float32x2_t v79;
  float32x2_t v80;
  int8x8_t v81;
  float32x4_t v82;
  int8x8_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x2_t v86;
  float32x4_t v87;
  float32x2_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x2_t v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x2_t v99;
  float32x4_t v100;
  float32x2_t v101;
  float32x4_t v102;
  float32x2_t v103;
  float32x4_t v104;
  int32x4_t v105;
  __int32 v106;
  uint64_t v107;
  uint64_t v108;
  float32x4_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x2_t v113;
  float32x2_t v114;
  int v115;
  int8x16_t v116;
  float32x2_t v117;
  float32x2_t v118;
  int v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x2_t v122;
  int v123;
  unsigned int v124;
  float32x2_t v125;
  float32x2_t v126;
  float32x2_t v127;
  int v128;
  int8x16_t v129;
  float32x2_t v130;
  float32x2_t v131;
  int v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int v139;
  int v140;
  int v141;
  int v142;
  float32x4_t v143;
  float32x2_t v144;
  float32x2_t v145;
  int v146;
  float32x2_t v147;
  int v148;
  float32x4_t v149;
  float32x2_t v150;
  __int128 v151;
  int32x4_t v152;
  float32x2_t i;
  float32x4_t v154;
  int32x4_t v155;
  float32x4_t v156;
  uint64_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t *v160;
  int8x16_t v161;
  float32x4_t v162;
  int32x4_t v163;
  float32x4_t v164;
  int8x16_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x2_t v168;
  float32x2_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x2_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x2_t v175;
  float32x2_t v176;
  int v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  int8x8_t v181;
  float32x2_t v182;
  float32x2_t v183;
  float32x2_t v184;
  float32x2_t v185;
  float32x2_t v186;
  float32x2_t v187;
  int8x8_t v188;
  float32x4_t v189;
  float32x2_t v190;
  float32x2_t v191;
  int8x8_t v192;
  float32x4_t v193;
  int8x8_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x2_t v197;
  float32x4_t v198;
  float32x2_t v199;
  float32x4_t v200;
  float32x2_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x2_t v205;
  float32x4_t v206;
  float32x2_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x2_t v210;
  float32x4_t v211;
  float32x2_t v212;
  float32x4_t v213;
  float32x2_t v214;
  float32x4_t v215;
  float32x2_t v216;
  __int32 v217;
  uint64_t v218;
  uint64_t v219;
  float32x4_t v220;
  float32x2_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x2_t v224;
  float32x2_t v225;
  int v226;
  int8x16_t v227;
  float32x2_t v228;
  float32x2_t v229;
  int v230;
  float32x2_t v231;
  float32x2_t v232;
  float32x2_t v233;
  int v234;
  unsigned int v235;
  float32x2_t v236;
  float32x2_t v237;
  float32x2_t v238;
  int v239;
  int8x16_t v240;
  float32x2_t v241;
  float32x2_t v242;
  int v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  int v250;
  int v251;
  int v252;
  int v253;
  float32x4_t v254;
  float32x2_t v255;
  float32x2_t v256;
  int v257;
  float32x2_t v258;
  int v259;
  float32x4_t v260;
  int8x8_t v261;
  uint64_t v262;
  int *v263;
  int *v264;
  int v265;
  int v266;
  int *v268;
  int *v269;
  int v270;
  int v271;
  int *v272;
  int *v273;
  uint64_t v274;
  int v275;
  int v276;
  uint64_t v277;
  float32x4_t v278;
  float32x4_t v279;
  uint64_t v280;
  int *v281;
  int *v282;
  int v283;
  int v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x2_t v295;
  float32x2_t v296;
  int v297;
  float32x4_t v298;
  float32x4_t v299;
  int8x16_t v300;
  int8x16_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x2_t v310;
  float32x2_t v311;
  int v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x2_t v315;
  int v316;
  float32x4_t v317;
  int8x16_t v318;
  int8x16_t v319;
  int32x4_t v320;
  float32x2_t v322;
  float v323;
  float32x4_t v326;
  float32x2_t v327;
  float32x4_t v328;
  float32x4_t v329;
  unsigned int v330;
  float32x4_t v331;
  float32x2_t v332;
  float32x2_t v333;
  int v334;
  int v335;
  int v336;
  int v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  int8x16_t v346[2];
  uint64_t v347;

  v10 = a4;
  v11 = a3;
  v347 = *MEMORY[0x24BDAC8D0];
  v14 = a1->i64[1];
  v15 = (const float *)(v14 + 20);
  v16 = vld1_dup_f32(v15);
  v17 = *(float32x4_t **)(a2 + 8);
  v18 = &v17[1].f32[1];
  v19 = vld1_dup_f32(v18);
  v20 = vmin_f32(v16, v19);
  v21 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  v22 = vmul_f32(v20, v21);
  v20.i32[0] = *(_DWORD *)(v14 + 16);
  v21.i32[0] = v17[1].i32[0];
  a10.i32[0] = -*(char *)(v14 + 32);
  v23 = (int32x2_t)vand_s8(a10, (int8x8_t)v20);
  v24 = (float32x2_t)vdup_lane_s32(v23, 0);
  v23.i32[0] = -v17[2].i8[0];
  v25 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v23, (int8x8_t)v21), 0);
  v322 = v24;
  v323 = v25.f32[0];
  v26 = vadd_f32(v24, v25);
  v330 = 0;
  v27 = *a5;
  __asm { FMOV            V11.2S, #1.0 }
  if (!*a5)
  {
    v55 = vmulq_f32(a7, a7);
    v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
    v46 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_2260E5F10);
    v56 = vmulq_f32(v46, v46);
    v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
    v57 = vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32);
    v58 = vrsqrte_f32(v57);
    v59 = 4;
    do
    {
      v58 = vmul_f32(v58, vrsqrts_f32(vmul_f32(v58, v58), v57));
      --v59;
    }
    while (v59);
    v60 = vmul_f32(v57, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v57), 0), (int8x8_t)_D11, (int8x8_t)v58));
    v61 = vrecpe_f32(v60);
    v62 = 4;
    do
    {
      v61 = vmul_f32(v61, vrecps_f32(v60, v61));
      --v62;
    }
    while (v62);
    v63 = vmulq_n_f32(v46, v61.f32[0]);
    v63.i32[3] = 0;
    v326 = v63;
    v64 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v65.i64[0] = -1;
    v65.i64[1] = -1;
    v66 = 0uLL;
    goto LABEL_54;
  }
  v33 = 0;
  v34 = (float32x4_t *)a1[1].i64[0];
  v35 = v14 + 48;
  v36 = v17[3];
  v37 = (int8x16_t)vnegq_f32(v36);
  v37.i32[3] = 0;
  do
  {
    v38 = a3[v33];
    *(&v336 + v33) = v38;
    v39 = a4[v33];
    *(&v334 + v33) = v39;
    v40 = *(float32x4_t *)(v35 + 16 * (1 - v38));
    v41 = vmulq_n_f32(*v34, v40.f32[0]);
    v41.i32[3] = 0;
    v42 = vmulq_lane_f32(v34[1], *(float32x2_t *)v40.f32, 1);
    v42.i32[3] = 0;
    v43 = vmulq_laneq_f32(v34[2], v40, 2);
    v43.i32[3] = 0;
    v44 = vaddq_f32(v34[3], vaddq_f32(vaddq_f32(v41, v42), v43));
    v45 = (float32x4_t)vbslq_s8(physx::boxVertexTable[v39], (int8x16_t)v36, v37);
    v46 = vsubq_f32(v44, v45);
    *(&v341 + v33) = v44;
    *(&v338 + v33) = v45;
    *(&v344 + v33++) = v46;
  }
  while (v27 != v33);
  v330 = v27;
  switch((_DWORD)v33)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v344, &v341, &v338, &v336, &v334, (int *)&v330);
      goto LABEL_49;
    case 3:
      v330 = 3;
      v46 = v344;
      v67 = vsubq_f32(v345, v344);
      v68 = vsubq_f32((float32x4_t)v346[0], v344);
      v70 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v67.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 4uLL), *(float32x2_t *)v68.f32);
      *(int8x8_t *)v69.f32 = vext_s8(v70, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL), *(float32x2_t *)v68.f32), *(float32x2_t *)v67.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL)), 4uLL);
      v70.i32[1] = 0;
      v71 = vpadd_f32(vmul_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), vmul_f32((float32x2_t)v70.u32[0], (float32x2_t)v70.u32[0]));
      v72 = vpadd_f32(v71, v71);
      if (v72.f32[0] > 0.00000011921)
      {
        if (v72.f32[0] == 0.0)
        {
          v46 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v69.u32[2] = v70;
          v73 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 8uLL).u64[0];
          v74 = (float32x2_t)vextq_s8(v346[0], v346[0], 8uLL).u64[0];
          v75 = (float32x2_t)vextq_s8(v346[0], v346[0], 4uLL).u64[0];
          v76 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 4uLL).u64[0];
          v77 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v345.f32, v75), v76, *(float32x2_t *)v346[0].i8);
          *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(v73, *(float32x2_t *)v346[0].i8), *(float32x2_t *)v345.f32, v74), 4uLL);
          v78.i64[1] = v77.u32[0];
          v79 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
          v80 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 4uLL).u64[0];
          v81 = (int8x8_t)vmls_f32(vmul_f32(v80, *(float32x2_t *)v346[0].i8), v75, *(float32x2_t *)v344.f32);
          *(int8x8_t *)v82.f32 = vext_s8(v81, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v74), *(float32x2_t *)v346[0].i8, v79), 4uLL);
          v82.i64[1] = v81.u32[0];
          v83 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v76), v80, *(float32x2_t *)v345.f32);
          *(int8x8_t *)v84.f32 = vext_s8(v83, (int8x8_t)vmls_f32(vmul_f32(v79, *(float32x2_t *)v345.f32), *(float32x2_t *)v344.f32, v73), 4uLL);
          v84.i64[1] = v83.u32[0];
          v85 = vmulq_f32(v78, v69);
          v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
          v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
          v87 = vmulq_f32(v82, v69);
          v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
          v88 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32);
          v89 = vmulq_f32(v84, v69);
          v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
          v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v88), (int8x8_t)vcgez_f32(v86)), (int8x8_t)vcgez_f32(v90)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
          {
            v116 = (int8x16_t)vmulq_f32(v344, v69);
            v117 = (float32x2_t)vextq_s8(v116, v116, 8uLL).u64[0];
            v118 = vrecpe_f32(v72);
            v119 = 4;
            do
            {
              v118 = vmul_f32(v118, vrecps_f32(v72, v118));
              --v119;
            }
            while (v119);
            v120 = vpadd_f32(*(float32x2_t *)v116.i8, v117);
            v46 = vmulq_n_f32(v69, vmul_f32(v118, vpadd_f32(v120, v120)).f32[0]);
            v46.i32[3] = 0;
          }
          else
          {
            v91 = vnegq_f32(v344);
            v91.i32[3] = 0;
            v92 = vnegq_f32(v345);
            v92.i32[3] = 0;
            v93 = vmulq_f32(v91, v67);
            v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
            v94 = vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32);
            v95 = vmulq_f32(v67, v92);
            v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
            v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v94), (int8x8_t)vclez_f32(v96)), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
            {
              v121 = vsub_f32(v94, v96);
              v122 = vrecpe_f32(v121);
              v123 = 4;
              do
              {
                v122 = vmul_f32(v122, vrecps_f32(v121, v122));
                --v123;
              }
              while (v123);
              v108 = 0;
              v46 = vmlaq_n_f32(v344, v67, vmul_f32(v94, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v121), (float32x2_t)0x3400000034000000), (int8x8_t)v122, 0)).f32[0]);
              v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
              v124 = 2;
              v107 = 1;
            }
            else
            {
              v97 = vnegq_f32((float32x4_t)v346[0]);
              v97.i32[3] = 0;
              v98 = vmulq_f32(v92, v68);
              v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
              v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
              v100 = vmulq_f32(v67, v97);
              v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
              v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
              v102 = vmulq_f32(v68, v97);
              v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
              v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v99, v96), (int8x8_t)vcge_f32(v101, v103)), (int8x8_t)vclez_f32(v86)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
              {
                v125 = vsub_f32(v99, v96);
                v126 = vadd_f32(v125, vsub_f32(v101, v103));
                v127 = vrecpe_f32(v126);
                v128 = 4;
                do
                {
                  v127 = vmul_f32(v127, vrecps_f32(v126, v127));
                  --v128;
                }
                while (v128);
                v129 = (int8x16_t)vmlaq_n_f32(v345, vsubq_f32((float32x4_t)v346[0], v345), vmul_f32(v125, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v126), (float32x2_t)0x3400000034000000), (int8x8_t)v127, 0)).f32[0]);
                v129.i64[1] = vextq_s8(v129, v129, 8uLL).u32[0];
                v124 = 2;
                v108 = 1;
                v107 = 2;
                v46 = (float32x4_t)v129;
              }
              else
              {
                v104 = vmulq_f32(v91, v68);
                v105 = (int32x4_t)vpaddq_f32(v104, v104);
                *(float32x2_t *)v105.i8 = vpadd_f32(*(float32x2_t *)v105.i8, *(float32x2_t *)v105.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v105.i8), (int8x8_t)vclez_f32(v103)), (int8x8_t)vclez_f32(v88)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
                {
                  v130 = vsub_f32(*(float32x2_t *)v105.i8, v103);
                  v131 = vrecpe_f32(v130);
                  v132 = 4;
                  do
                  {
                    v131 = vmul_f32(v131, vrecps_f32(v130, v131));
                    --v132;
                  }
                  while (v132);
                  v108 = 0;
                  v46 = vmlaq_n_f32(v344, v68, vmul_f32(*(float32x2_t *)v105.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v130), (float32x2_t)0x3400000034000000), (int8x8_t)v131, 0)).f32[0]);
                  v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
                  v107 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v105.i8), (int8x8_t)vclez_f32(v94)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
                {
                  v108 = 0;
                  v107 = 1;
                }
                else
                {
                  *(int32x2_t *)v105.i8 = vcge_f32(v96, v99);
                  *(int16x4_t *)v46.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v105.i8, (int8x8_t)vcgez_f32(v96)), 0);
                  *(int8x8_t *)v46.f32 = vuzp1_s8(*(int8x8_t *)v46.f32, *(int8x8_t *)v46.f32);
                  v105.i32[0] = -1;
                  v106 = v46.i32[0];
                  v46 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v46, v105), 0), (int8x16_t)v345, v346[0]);
                  v107 = 1;
                  if (v106 == -1)
                    v108 = 1;
                  else
                    v108 = 2;
                }
                v124 = v107;
              }
            }
            v133 = *(&v344 + v108);
            v134 = *(&v344 + v107);
            v135 = *(&v341 + v108);
            v136 = *(&v341 + v107);
            v137 = *(&v338 + v108);
            v138 = *(&v338 + v107);
            v139 = *(&v336 + v108);
            v140 = *(&v336 + v107);
            v141 = *(&v334 + v108);
            v142 = *(&v334 + v107);
            v344 = v133;
            v345 = v134;
            v341 = v135;
            v342 = v136;
            v338 = v137;
            v339 = v138;
            v336 = v139;
            v337 = v140;
            v334 = v141;
            v335 = v142;
            v330 = v124;
          }
        }
        goto LABEL_49;
      }
      v330 = 2;
      v109 = vmulq_f32(v67, v67);
      v109.i64[0] = vpaddq_f32(v109, v109).u64[0];
      v110 = vpadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v109.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v110), 0), *(int8x8_t *)v344.f32).u32[0] != -1)
      {
        v111 = vnegq_f32(v344);
        v111.i32[3] = 0;
        v112 = vmulq_f32(v111, v67);
        v112.i64[0] = vpaddq_f32(v112, v112).u64[0];
        v113 = vpadd_f32(*(float32x2_t *)v112.f32, *(float32x2_t *)v112.f32);
        v114 = vrecpe_f32(v110);
        v115 = 4;
        do
        {
          v114 = vmul_f32(v114, vrecps_f32(v110, v114));
          --v115;
        }
        while (v115);
        v46 = vmlaq_n_f32(v344, v67, vmax_f32(vmin_f32(vmul_f32(v113, v114), _D11), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      v46 = v344;
      v47 = vsubq_f32(v345, v344);
      v48 = vmulq_f32(v47, v47);
      v48.i64[0] = vpaddq_f32(v48, v48).u64[0];
      v49 = vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v49), 0), *(int8x8_t *)v344.f32).u32[0] != -1)
      {
        v50 = vnegq_f32(v344);
        v50.i32[3] = 0;
        v51 = vmulq_f32(v50, v47);
        v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
        v52 = vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32);
        v53 = vrecpe_f32(v49);
        v54 = 4;
        do
        {
          v53 = vmul_f32(v53, vrecps_f32(v49, v53));
          --v54;
        }
        while (v54);
        v46 = vmlaq_n_f32(v344, v47, vmax_f32(vmin_f32(vmul_f32(v52, v53), _D11), 0).f32[0]);
LABEL_31:
        v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  v330 = 1;
LABEL_49:
  v143 = vmulq_f32(v46, v46);
  v143.i64[0] = vpaddq_f32(v143, v143).u64[0];
  v144 = vpadd_f32(*(float32x2_t *)v143.f32, *(float32x2_t *)v143.f32);
  v145 = vrsqrte_f32(v144);
  v146 = 4;
  do
  {
    v145 = vmul_f32(v145, vrsqrts_f32(vmul_f32(v145, v145), v144));
    --v146;
  }
  while (v146);
  v64 = vmul_f32(v144, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v144), 0), (int8x8_t)_D11, (int8x8_t)v145));
  v147 = vrecpe_f32(v64);
  v148 = 4;
  do
  {
    v147 = vmul_f32(v147, vrecps_f32(v64, v147));
    --v148;
  }
  while (v148);
  v149 = vmulq_n_f32(v46, v147.f32[0]);
  v149.i32[3] = 0;
  v326 = v149;
  v65 = vdupq_lane_s32(vcgt_f32(v64, v22), 0);
  v66 = v46;
LABEL_54:
  v150 = vadd_f32(v26, a8);
  v151 = xmmword_22611E0A0;
  LODWORD(v151) = -1;
  v320 = (int32x4_t)v151;
  v152.i64[0] = -1;
  v152.i64[1] = -1;
  for (i = v64; ; i = v169)
  {
    v154 = v46;
    v155.i64[0] = -1;
    v155.i64[1] = -1;
    *(int16x4_t *)v155.i8 = vmovn_s32(vceqq_s32(v65, v155));
    if (vuzp1_s8(*(int8x8_t *)v155.i8, *(int8x8_t *)v155.i8).u32[0] != -1)
      break;
    v327 = v64;
    v328 = v154;
    v156 = vnegq_f32(v154);
    v156.i32[3] = 0;
    v331 = v156;
    v157 = v330;
    *(double *)v158.i64 = physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(a1, (float32x2_t *)&v331, &v336 + v330);
    v66 = v328;
    v159 = v158;
    v160 = *(float32x4_t **)(a2 + 8);
    v161 = (int8x16_t)vcgtzq_f32(v328);
    v162 = v326;
    v163 = (int32x4_t)vandq_s8(v161, (int8x16_t)xmmword_22611E0A0);
    v163.i64[0] = vpaddq_s32(v163, v163).u64[0];
    *(&v334 + v157) = vpadd_s32(*(int32x2_t *)v163.i8, *(int32x2_t *)v163.i8).u8[0] & 7;
    v164 = v160[3];
    v165 = (int8x16_t)vnegq_f32(v164);
    v165.i32[3] = 0;
    v166 = (float32x4_t)vbslq_s8(v161, (int8x16_t)v164, v165);
    v46 = vsubq_f32(v159, v166);
    v167 = vmulq_f32(v326, v46);
    v167.i64[0] = vpaddq_f32(v167, v167).u64[0];
    v168 = vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v168, v150)).u8[0] & 1) == 0)
    {
      if (v11)
      {
        *a5 = v157;
        if ((_DWORD)v157)
        {
          v268 = &v334;
          v269 = &v336;
          do
          {
            v270 = *v269++;
            *v11++ = v270;
            v271 = *v268++;
            *v10++ = v271;
            --v157;
          }
          while (v157);
        }
      }
      return 0;
    }
    v169 = v327;
    if (v168.f32[0] > (float)(0.99977 * v327.f32[0]))
    {
      v331 = v328;
      if (v11)
      {
        *a5 = v157;
        if ((_DWORD)v157)
        {
          v272 = &v334;
          v273 = &v336;
          v274 = v157;
          do
          {
            v275 = *v273++;
            *v11++ = v275;
            v276 = *v272++;
            *v10++ = v276;
            --v274;
          }
          while (v274);
          goto LABEL_119;
        }
        v277 = a6;
        *(float32x4_t *)(a6 + 32) = v326;
        v278 = 0uLL;
        v279 = 0uLL;
      }
      else
      {
LABEL_119:
        v277 = a6;
        *(float32x4_t *)(a6 + 32) = v326;
        if ((_DWORD)v157 == 3)
        {
          v332 = 0;
          v333 = 0;
          physx::Gu::barycentricCoordinates(&v331, &v344, &v345, (float32x4_t *)v346, &v333, &v332);
          v162 = v326;
          v169 = v327;
          v287 = vmulq_n_f32(vsubq_f32(v342, v341), v333.f32[0]);
          v287.i32[3] = 0;
          v288 = vmulq_n_f32(vsubq_f32(v343, v341), v332.f32[0]);
          v288.i32[3] = 0;
          v289 = vaddq_f32(v287, v288);
          v290 = vmulq_n_f32(vsubq_f32(v339, v338), v333.f32[0]);
          v290.i32[3] = 0;
          v278 = vaddq_f32(v341, v289);
          v291 = vmulq_n_f32(vsubq_f32(v340, v338), v332.f32[0]);
          v291.i32[3] = 0;
          v279 = vaddq_f32(v338, vaddq_f32(v290, v291));
        }
        else if ((_DWORD)v157 == 2)
        {
          v292 = vsubq_f32(v344, v328);
          v293 = vsubq_f32(vsubq_f32(v345, v328), v292);
          v294 = vmulq_f32(v293, v293);
          v294.i64[0] = vpaddq_f32(v294, v294).u64[0];
          v295 = vpadd_f32(*(float32x2_t *)v294.f32, *(float32x2_t *)v294.f32);
          v296 = vrecpe_f32(v295);
          v297 = 4;
          do
          {
            v296 = vmul_f32(v296, vrecps_f32(v295, v296));
            --v297;
          }
          while (v297);
          v298 = vnegq_f32(v292);
          v298.i32[3] = 0;
          v299 = vmulq_f32(v298, v293);
          v299.i64[0] = vpaddq_f32(v299, v299).u64[0];
          v298.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v295), (int8x8_t)v296, 0), vpadd_f32(*(float32x2_t *)v299.f32, *(float32x2_t *)v299.f32)).u32[0];
          v278 = vmlaq_n_f32(v341, vsubq_f32(v342, v341), v298.f32[0]);
          v278.i64[1] = vextq_s8((int8x16_t)v278, (int8x16_t)v278, 8uLL).u32[0];
          v279 = vmlaq_n_f32(v338, vsubq_f32(v339, v338), v298.f32[0]);
          v279.i64[1] = vextq_s8((int8x16_t)v279, (int8x16_t)v279, 8uLL).u32[0];
        }
        else
        {
          v278 = 0uLL;
          v279 = 0uLL;
          if ((_DWORD)v157 == 1)
          {
            v278 = v341;
            v279 = v338;
          }
        }
      }
      v300 = (int8x16_t)vmlsq_lane_f32(v278, v162, v322, 0);
      v300.i64[1] = vextq_s8(v300, v300, 8uLL).u32[0];
      v301 = (int8x16_t)vmlaq_n_f32(v279, v162, v323);
      v301.i64[1] = vextq_s8(v301, v301, 8uLL).u32[0];
      *(int8x16_t *)v277 = v300;
      *(int8x16_t *)(v277 + 16) = v301;
      *(float32x2_t *)(v277 + 64) = vsub_f32(v169, v26);
      return 2;
    }
    *(&v341 + v157) = v159;
    *(&v338 + v157) = v166;
    v330 = v157 + 1;
    *(&v344 + v157) = v46;
    switch((_DWORD)v157)
    {
      case 3:
        physx::Gu::closestPtPointTetrahedron(&v344, &v341, &v338, &v336, &v334, (int *)&v330);
        v169 = v327;
        v66 = v328;
        break;
      case 2:
        v46 = v344;
        v178 = vsubq_f32(v345, v344);
        v179 = vsubq_f32((float32x4_t)v346[0], v344);
        v181 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v178.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v179, (int8x16_t)v179, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v178, (int8x16_t)v178, 4uLL), *(float32x2_t *)v179.f32);
        *(int8x8_t *)v180.f32 = vext_s8(v181, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v178, (int8x16_t)v178, 8uLL), *(float32x2_t *)v179.f32), *(float32x2_t *)v178.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL)), 4uLL);
        v181.i32[1] = 0;
        v330 = 3;
        v182 = vpadd_f32(vmul_f32(*(float32x2_t *)v180.f32, *(float32x2_t *)v180.f32), vmul_f32((float32x2_t)v181.u32[0], (float32x2_t)v181.u32[0]));
        v183 = vpadd_f32(v182, v182);
        if (v183.f32[0] <= 0.00000011921)
        {
          v330 = 2;
          v220 = vmulq_f32(v178, v178);
          v220.i64[0] = vpaddq_f32(v220, v220).u64[0];
          v221 = vpadd_f32(*(float32x2_t *)v220.f32, *(float32x2_t *)v220.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v221), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
          {
LABEL_81:
            v330 = 1;
            break;
          }
          v222 = vnegq_f32(v344);
          v222.i32[3] = 0;
          v223 = vmulq_f32(v222, v178);
          v223.i64[0] = vpaddq_f32(v223, v223).u64[0];
          v224 = vpadd_f32(*(float32x2_t *)v223.f32, *(float32x2_t *)v223.f32);
          v225 = vrecpe_f32(v221);
          v226 = 4;
          do
          {
            v225 = vmul_f32(v225, vrecps_f32(v221, v225));
            --v226;
          }
          while (v226);
          v46 = vmlaq_n_f32(v344, v178, vmax_f32(vmin_f32(vmul_f32(v224, v225), _D11), 0).f32[0]);
          goto LABEL_80;
        }
        if (v183.f32[0] == 0.0)
        {
          v46 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v180.u32[2] = v181;
          v184 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 8uLL).u64[0];
          v185 = (float32x2_t)vextq_s8(v346[0], v346[0], 8uLL).u64[0];
          v186 = (float32x2_t)vextq_s8(v346[0], v346[0], 4uLL).u64[0];
          v187 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 4uLL).u64[0];
          v188 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v345.f32, v186), v187, *(float32x2_t *)v346[0].i8);
          *(int8x8_t *)v189.f32 = vext_s8(v188, (int8x8_t)vmls_f32(vmul_f32(v184, *(float32x2_t *)v346[0].i8), *(float32x2_t *)v345.f32, v185), 4uLL);
          v189.i64[1] = v188.u32[0];
          v190 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
          v191 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 4uLL).u64[0];
          v192 = (int8x8_t)vmls_f32(vmul_f32(v191, *(float32x2_t *)v346[0].i8), v186, *(float32x2_t *)v344.f32);
          *(int8x8_t *)v193.f32 = vext_s8(v192, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v185), *(float32x2_t *)v346[0].i8, v190), 4uLL);
          v193.i64[1] = v192.u32[0];
          v194 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v187), v191, *(float32x2_t *)v345.f32);
          *(int8x8_t *)v195.f32 = vext_s8(v194, (int8x8_t)vmls_f32(vmul_f32(v190, *(float32x2_t *)v345.f32), *(float32x2_t *)v344.f32, v184), 4uLL);
          v195.i64[1] = v194.u32[0];
          v196 = vmulq_f32(v189, v180);
          v196.i64[0] = vpaddq_f32(v196, v196).u64[0];
          v197 = vpadd_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32);
          v198 = vmulq_f32(v193, v180);
          v198.i64[0] = vpaddq_f32(v198, v198).u64[0];
          v199 = vpadd_f32(*(float32x2_t *)v198.f32, *(float32x2_t *)v198.f32);
          v200 = vmulq_f32(v195, v180);
          v200.i64[0] = vpaddq_f32(v200, v200).u64[0];
          v201 = vpadd_f32(*(float32x2_t *)v200.f32, *(float32x2_t *)v200.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v199), (int8x8_t)vcgez_f32(v197)), (int8x8_t)vcgez_f32(v201)), 0), *(int8x8_t *)v344.f32).u32[0] != -1)
          {
            v202 = vnegq_f32(v344);
            v202.i32[3] = 0;
            v203 = vnegq_f32(v345);
            v203.i32[3] = 0;
            v204 = vmulq_f32(v202, v178);
            v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
            v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
            v206 = vmulq_f32(v178, v203);
            v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
            v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v205), (int8x8_t)vclez_f32(v207)), (int8x8_t)vclez_f32(v201)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
            {
              v232 = vsub_f32(v205, v207);
              v233 = vrecpe_f32(v232);
              v234 = 4;
              do
              {
                v233 = vmul_f32(v233, vrecps_f32(v232, v233));
                --v234;
              }
              while (v234);
              v219 = 0;
              v46 = vmlaq_n_f32(v344, v178, vmul_f32(v205, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v232), (float32x2_t)0x3400000034000000), (int8x8_t)v233, 0)).f32[0]);
              v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
              v235 = 2;
              v218 = 1;
            }
            else
            {
              v208 = vnegq_f32((float32x4_t)v346[0]);
              v208.i32[3] = 0;
              v209 = vmulq_f32(v203, v179);
              v209.i64[0] = vpaddq_f32(v209, v209).u64[0];
              v210 = vpadd_f32(*(float32x2_t *)v209.f32, *(float32x2_t *)v209.f32);
              v211 = vmulq_f32(v178, v208);
              v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
              v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
              v213 = vmulq_f32(v179, v208);
              v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
              v214 = vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v210, v207), (int8x8_t)vcge_f32(v212, v214)), (int8x8_t)vclez_f32(v197)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
              {
                v236 = vsub_f32(v210, v207);
                v237 = vadd_f32(v236, vsub_f32(v212, v214));
                v238 = vrecpe_f32(v237);
                v239 = 4;
                do
                {
                  v238 = vmul_f32(v238, vrecps_f32(v237, v238));
                  --v239;
                }
                while (v239);
                v240 = (int8x16_t)vmlaq_n_f32(v345, vsubq_f32((float32x4_t)v346[0], v345), vmul_f32(v236, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v237), (float32x2_t)0x3400000034000000), (int8x8_t)v238, 0)).f32[0]);
                v240.i64[1] = vextq_s8(v240, v240, 8uLL).u32[0];
                v218 = 2;
                v46 = (float32x4_t)v240;
                v219 = 1;
              }
              else
              {
                v215 = vmulq_f32(v202, v179);
                v215.i64[0] = vpaddq_f32(v215, v215).u64[0];
                v216 = vpadd_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v216), (int8x8_t)vclez_f32(v214)), (int8x8_t)vclez_f32(v199)), 0), *(int8x8_t *)v344.f32).u32[0] != -1)
                {
                  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v216), (int8x8_t)vclez_f32(v205)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
                  {
                    v219 = 0;
                    v218 = 1;
                  }
                  else
                  {
                    *(int16x4_t *)v46.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v207, v210), (int8x8_t)vcgez_f32(v207)), 0);
                    *(int8x8_t *)v46.f32 = vuzp1_s8(*(int8x8_t *)v46.f32, *(int8x8_t *)v46.f32);
                    v217 = v46.i32[0];
                    v46 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v46, v320), 0), (int8x16_t)v345, v346[0]);
                    v218 = 1;
                    if (v217 == -1)
                      v219 = 1;
                    else
                      v219 = 2;
                  }
                  v235 = 1;
                  goto LABEL_98;
                }
                v241 = vsub_f32(v216, v214);
                v242 = vrecpe_f32(v241);
                v243 = 4;
                do
                {
                  v242 = vmul_f32(v242, vrecps_f32(v241, v242));
                  --v243;
                }
                while (v243);
                v219 = 0;
                v46 = vmlaq_n_f32(v344, v179, vmul_f32(v216, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v241), (float32x2_t)0x3400000034000000), (int8x8_t)v242, 0)).f32[0]);
                v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
                v218 = 2;
              }
              v235 = 2;
            }
LABEL_98:
            v244 = *(&v344 + v219);
            v245 = *(&v344 + v218);
            v246 = *(&v341 + v219);
            v247 = *(&v341 + v218);
            v248 = *(&v338 + v219);
            v249 = *(&v338 + v218);
            v250 = *(&v336 + v219);
            v251 = *(&v336 + v218);
            v252 = *(&v334 + v219);
            v253 = *(&v334 + v218);
            v344 = v244;
            v345 = v245;
            v341 = v246;
            v342 = v247;
            v338 = v248;
            v339 = v249;
            v336 = v250;
            v337 = v251;
            v334 = v252;
            v335 = v253;
            v330 = v235;
            break;
          }
          v227 = (int8x16_t)vmulq_f32(v344, v180);
          v228 = (float32x2_t)vextq_s8(v227, v227, 8uLL).u64[0];
          v229 = vrecpe_f32(v183);
          v230 = 4;
          do
          {
            v229 = vmul_f32(v229, vrecps_f32(v183, v229));
            --v230;
          }
          while (v230);
          v231 = vpadd_f32(*(float32x2_t *)v227.i8, v228);
          v46 = vmulq_n_f32(v180, vmul_f32(v229, vpadd_f32(v231, v231)).f32[0]);
          v46.i32[3] = 0;
        }
        break;
      case 1:
        v46 = v344;
        v170 = vsubq_f32(v345, v344);
        v171 = vmulq_f32(v170, v170);
        v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
        v172 = vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v172), 0), *(int8x8_t *)v344.f32).u32[0] == -1)goto LABEL_81;
        v173 = vnegq_f32(v344);
        v173.i32[3] = 0;
        v174 = vmulq_f32(v173, v170);
        v174.i64[0] = vpaddq_f32(v174, v174).u64[0];
        v175 = vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32);
        v176 = vrecpe_f32(v172);
        v177 = 4;
        do
        {
          v176 = vmul_f32(v176, vrecps_f32(v172, v176));
          --v177;
        }
        while (v177);
        v46 = vmlaq_n_f32(v344, v170, vmax_f32(vmin_f32(vmul_f32(v175, v176), _D11), 0).f32[0]);
LABEL_80:
        v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
        break;
    }
    v254 = vmulq_f32(v46, v46);
    v254.i64[0] = vpaddq_f32(v254, v254).u64[0];
    v255 = vpadd_f32(*(float32x2_t *)v254.f32, *(float32x2_t *)v254.f32);
    v256 = vrsqrte_f32(v255);
    v257 = 4;
    do
    {
      v256 = vmul_f32(v256, vrsqrts_f32(vmul_f32(v256, v256), v255));
      --v257;
    }
    while (v257);
    v64 = vmul_f32(v255, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v255), 0), (int8x8_t)_D11, (int8x8_t)v256));
    v258 = vrecpe_f32(v64);
    v259 = 4;
    do
    {
      v258 = vmul_f32(v258, vrecps_f32(v64, v258));
      --v259;
    }
    while (v259);
    v260 = vmulq_n_f32(v46, v258.f32[0]);
    v260.i32[3] = 0;
    v326 = v260;
    *(int32x2_t *)v260.f32 = vcgt_f32(v169, v64);
    v152 = vdupq_lane_s32(*(int32x2_t *)v260.f32, 0);
    v65 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v64, v22), *(int8x8_t *)v260.f32), 0);
  }
  v261 = (int8x8_t)vmovn_s32(vceqzq_s32(v152));
  v262 = v330;
  if (vuzp1_s8(v261, v261).u32[0] == -1)
  {
    if (v11)
    {
      v280 = v330 - 1;
      *a5 = v330 - 1;
      if ((_DWORD)v262 == 1)
      {
LABEL_130:
        v285 = v341;
        v286 = v338;
        goto LABEL_141;
      }
      v281 = &v334;
      v282 = &v336;
      do
      {
        v283 = *v282++;
        *v11++ = v283;
        v284 = *v281++;
        *v10++ = v284;
        --v280;
      }
      while (v280);
    }
    v331 = v66;
    if ((_DWORD)v262 == 3)
    {
      v332 = 0;
      v333 = 0;
      v329 = v66;
      physx::Gu::barycentricCoordinates(&v331, &v344, &v345, (float32x4_t *)v346, &v333, &v332);
      v302 = vmulq_n_f32(vsubq_f32(v342, v341), v333.f32[0]);
      v302.i32[3] = 0;
      v303 = vmulq_n_f32(vsubq_f32(v343, v341), v332.f32[0]);
      v303.i32[3] = 0;
      v304 = vaddq_f32(v302, v303);
      v305 = vmulq_n_f32(vsubq_f32(v339, v338), v333.f32[0]);
      v305.i32[3] = 0;
      v285 = vaddq_f32(v341, v304);
      v306 = vmulq_n_f32(vsubq_f32(v340, v338), v332.f32[0]);
      v66 = v329;
      v306.i32[3] = 0;
      v286 = vaddq_f32(v338, vaddq_f32(v305, v306));
    }
    else
    {
      if ((_DWORD)v262 == 2)
      {
        v307 = vsubq_f32(v344, v66);
        v308 = vsubq_f32(vsubq_f32(v345, v66), v307);
        v309 = vmulq_f32(v308, v308);
        v309.i64[0] = vpaddq_f32(v309, v309).u64[0];
        v310 = vpadd_f32(*(float32x2_t *)v309.f32, *(float32x2_t *)v309.f32);
        v311 = vrecpe_f32(v310);
        v312 = 4;
        do
        {
          v311 = vmul_f32(v311, vrecps_f32(v310, v311));
          --v312;
        }
        while (v312);
        v313 = vnegq_f32(v307);
        v313.i32[3] = 0;
        v314 = vmulq_f32(v313, v308);
        v314.i64[0] = vpaddq_f32(v314, v314).u64[0];
        v313.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v310), (int8x8_t)v311, 0), vpadd_f32(*(float32x2_t *)v314.f32, *(float32x2_t *)v314.f32)).u32[0];
        v285 = vmlaq_n_f32(v341, vsubq_f32(v342, v341), v313.f32[0]);
        v285.i64[1] = vextq_s8((int8x16_t)v285, (int8x16_t)v285, 8uLL).u32[0];
        v286 = vmlaq_n_f32(v338, vsubq_f32(v339, v338), v313.f32[0]);
        v286.i64[1] = vextq_s8((int8x16_t)v286, (int8x16_t)v286, 8uLL).u32[0];
        goto LABEL_141;
      }
      v285 = 0uLL;
      v286 = 0uLL;
      if ((_DWORD)v262 == 1)
        goto LABEL_130;
    }
LABEL_141:
    v315 = vrecpe_f32(i);
    v316 = 4;
    do
    {
      v315 = vmul_f32(v315, vrecps_f32(i, v315));
      --v316;
    }
    while (v316);
    v317 = vmulq_n_f32(v66, v315.f32[0]);
    v317.i32[3] = 0;
    *(float32x4_t *)(a6 + 32) = v317;
    *(float32x4_t *)(a6 + 48) = v326;
    v318 = (int8x16_t)vmlsq_lane_f32(v285, v317, v322, 0);
    v318.i64[1] = vextq_s8(v318, v318, 8uLL).u32[0];
    v319 = (int8x16_t)vmlaq_n_f32(v286, v317, v323);
    v319.i64[1] = vextq_s8(v319, v319, 8uLL).u32[0];
    *(int8x16_t *)a6 = v318;
    *(int8x16_t *)(a6 + 16) = v319;
    *(float32x2_t *)(a6 + 64) = vsub_f32(i, v26);
    if ((vcge_f32(v26, i).u8[0] & 1) != 0)
      return 2;
    else
      return 4;
  }
  if (v11)
  {
    *a5 = v330;
    if ((_DWORD)v262)
    {
      v263 = &v334;
      v264 = &v336;
      do
      {
        v265 = *v264++;
        *v11++ = v265;
        v266 = *v263++;
        *v10++ = v266;
        --v262;
      }
      while (v262);
    }
  }
  return 5;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(float32x4_t *a1, uint64_t a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, uint64_t a6, float32x4_t a7, float32x2_t a8, double a9, float32x4_t a10)
{
  uint64_t v15;
  const float *v16;
  float32x2_t v17;
  float32x4_t *v18;
  const float *v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  uint64_t v28;
  uint64_t v34;
  float32x4_t *v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  unsigned int v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x2_t v59;
  int v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x2_t v63;
  float32x2_t v64;
  int v65;
  float32x2_t v66;
  float32x2_t v67;
  int v68;
  float32x4_t v69;
  float32x2_t v70;
  int32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x8_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  int8x8_t v82;
  float32x4_t v83;
  float32x2_t v84;
  float32x2_t v85;
  int8x8_t v86;
  float32x4_t v87;
  int8x8_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x2_t v91;
  float32x4_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x2_t v99;
  float32x4_t v100;
  float32x2_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x2_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x4_t v107;
  float32x2_t v108;
  float32x4_t v109;
  int32x4_t v110;
  __int32 v111;
  uint64_t v112;
  uint64_t v113;
  float32x4_t v114;
  float32x2_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x2_t v118;
  float32x2_t v119;
  int v120;
  int8x16_t v121;
  float32x2_t v122;
  float32x2_t v123;
  int v124;
  float32x2_t v125;
  float32x2_t v126;
  float32x2_t v127;
  int v128;
  unsigned int v129;
  float32x2_t v130;
  float32x2_t v131;
  float32x2_t v132;
  int v133;
  int8x16_t v134;
  float32x2_t v135;
  float32x2_t v136;
  int v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  int v143;
  int v144;
  int v145;
  int v146;
  float32x4_t v147;
  float32x2_t v148;
  float32x2_t v149;
  int v150;
  float32x2_t v151;
  int v152;
  float32x4_t v153;
  float32x2_t v154;
  int32x4_t v155;
  float32x2_t i;
  float32x4_t v157;
  int32x4_t v158;
  float32x4_t v159;
  uint64_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x2_t v166;
  float32x2_t v167;
  uint64_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x2_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x2_t v174;
  float32x2_t v175;
  int v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  int8x8_t v180;
  float32x2_t v181;
  float32x2_t v182;
  float32x2_t v183;
  float32x2_t v184;
  float32x2_t v185;
  float32x2_t v186;
  int8x8_t v187;
  float32x4_t v188;
  float32x2_t v189;
  float32x2_t v190;
  int8x8_t v191;
  float32x4_t v192;
  int8x8_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x2_t v196;
  float32x4_t v197;
  float32x2_t v198;
  float32x4_t v199;
  float32x2_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x2_t v204;
  float32x4_t v205;
  float32x2_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x2_t v209;
  float32x4_t v210;
  float32x2_t v211;
  float32x4_t v212;
  float32x2_t v213;
  float32x4_t v214;
  float32x2_t v215;
  __int32 v216;
  uint64_t v217;
  uint64_t v218;
  float32x4_t v219;
  float32x2_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x2_t v223;
  float32x2_t v224;
  int v225;
  int8x16_t v226;
  float32x2_t v227;
  float32x2_t v228;
  int v229;
  float32x2_t v230;
  float32x2_t v231;
  float32x2_t v232;
  int v233;
  unsigned int v234;
  float32x2_t v235;
  float32x2_t v236;
  float32x2_t v237;
  int v238;
  int8x16_t v239;
  float32x2_t v240;
  float32x2_t v241;
  int v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  int v249;
  int v250;
  int v251;
  int v252;
  float32x4_t v253;
  float32x2_t v254;
  float32x2_t v255;
  int v256;
  float32x2_t v257;
  int v258;
  float32x4_t v259;
  int8x8_t v260;
  uint64_t v261;
  int *v262;
  int *v263;
  int v264;
  int v265;
  uint64_t v267;
  int *v268;
  int *v269;
  int v270;
  int v271;
  int *v272;
  int *v273;
  uint64_t v274;
  int v275;
  int v276;
  uint64_t v277;
  float32x4_t v278;
  float32x4_t v279;
  uint64_t v280;
  int *v281;
  int *v282;
  int v283;
  int v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x2_t v295;
  float32x2_t v296;
  int v297;
  float32x4_t v298;
  float32x4_t v299;
  int8x16_t v300;
  int8x16_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x2_t v310;
  float32x2_t v311;
  int v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x2_t v315;
  int v316;
  float32x4_t v317;
  int8x16_t v318;
  int8x16_t v319;
  int32x4_t v320;
  float32x2_t v322;
  float v323;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x2_t v328;
  float32x4_t v329;
  float32x4_t v330;
  unsigned int v331;
  float32x4_t v332;
  float32x2_t v333;
  int v334;
  int v335;
  int v336;
  int v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346[2];
  uint64_t v347;

  v347 = *MEMORY[0x24BDAC8D0];
  v15 = a1->i64[1];
  v16 = (const float *)(v15 + 20);
  v17 = vld1_dup_f32(v16);
  v18 = *(float32x4_t **)(a2 + 8);
  v19 = &v18[1].f32[1];
  v20 = vld1_dup_f32(v19);
  v21 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  v22 = vmin_f32(v17, v20);
  v23 = vmul_f32(v22, v21);
  v22.i32[0] = *(_DWORD *)(v15 + 16);
  v20.i32[0] = v18[1].i32[0];
  v21.i32[0] = -*(char *)(v15 + 32);
  v24 = (int32x2_t)vand_s8((int8x8_t)v21, (int8x8_t)v22);
  v25 = (float32x2_t)vdup_lane_s32(v24, 0);
  v24.i32[0] = -v18[2].i8[0];
  v26 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v24, (int8x8_t)v20), 0);
  v322 = v25;
  v323 = v26.f32[0];
  v27 = vadd_f32(v25, v26);
  v332 = 0uLL;
  v331 = 0;
  v28 = *a5;
  __asm { FMOV            V11.2S, #1.0 }
  if (!*a5)
  {
    v61 = vmulq_f32(a7, a7);
    v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
    v53 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_2260E5F10);
    v332 = v53;
    v62 = vmulq_f32(v53, v53);
    v62.i64[0] = vpaddq_f32(v62, v62).u64[0];
    v63 = vpadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32);
    v64 = vrsqrte_f32(v63);
    v65 = 4;
    do
    {
      v64 = vmul_f32(v64, vrsqrts_f32(vmul_f32(v64, v64), v63));
      --v65;
    }
    while (v65);
    v66 = vmul_f32(v63, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v63), 0), (int8x8_t)_D11, (int8x8_t)v64));
    v67 = vrecpe_f32(v66);
    v68 = 4;
    do
    {
      *(float32x2_t *)a10.f32 = vrecps_f32(v66, v67);
      v67 = vmul_f32(v67, *(float32x2_t *)a10.f32);
      --v68;
    }
    while (v68);
    v69 = vmulq_n_f32(v53, v67.f32[0]);
    v69.i32[3] = 0;
    v327 = v69;
    v70 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v71.i64[0] = -1;
    v71.i64[1] = -1;
    v72 = 0uLL;
    goto LABEL_54;
  }
  v34 = 0;
  v35 = (float32x4_t *)a1[1].i64[0];
  v36 = v15 + 48;
  v37 = v18[10].i64[0];
  v38 = v18[3];
  v39 = v18[4];
  a10 = v18[5];
  do
  {
    v40 = a3[v34];
    *(&v336 + v34) = v40;
    v41 = a4[v34];
    *(&v334 + v34) = v41;
    v42 = *(float32x4_t *)(v36 + 16 * (1 - v40));
    v43 = vmulq_n_f32(*v35, v42.f32[0]);
    v43.i32[3] = 0;
    v44 = vmulq_lane_f32(v35[1], *(float32x2_t *)v42.f32, 1);
    v44.i32[3] = 0;
    v45 = vmulq_laneq_f32(v35[2], v42, 2);
    v45.i32[3] = 0;
    v46 = vaddq_f32(vaddq_f32(v43, v44), v45);
    v47 = *(float32x4_t *)(v37 + 12 * v41);
    v48 = vmulq_n_f32(v38, v47.f32[0]);
    v48.i32[3] = 0;
    v49 = vmulq_lane_f32(v39, *(float32x2_t *)v47.f32, 1);
    v49.i32[3] = 0;
    v50 = vmulq_laneq_f32(a10, v47, 2);
    v50.i32[3] = 0;
    v51 = vaddq_f32(v35[3], v46);
    v52 = vaddq_f32(v50, vaddq_f32(v48, v49));
    v53 = vsubq_f32(v51, v52);
    *(&v341 + v34) = v51;
    *(&v338 + v34) = v52;
    *(&v344 + v34++) = v53;
  }
  while (v28 != v34);
  v331 = v28;
  switch((_DWORD)v34)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v344, &v341, &v338, &v336, &v334, (int *)&v331);
      goto LABEL_49;
    case 3:
      v331 = 3;
      v53 = v344;
      a10 = vsubq_f32(v345, v344);
      v73 = vsubq_f32(v346[0], v344);
      v75 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v73, (int8x16_t)v73, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), *(float32x2_t *)v73.f32);
      *(int8x8_t *)v74.f32 = vext_s8(v75, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), *(float32x2_t *)v73.f32), *(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL)), 4uLL);
      v75.i32[1] = 0;
      v76 = vpadd_f32(vmul_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32), vmul_f32((float32x2_t)v75.u32[0], (float32x2_t)v75.u32[0]));
      v77 = vpadd_f32(v76, v76);
      if (v77.f32[0] > 0.00000011921)
      {
        if (v77.f32[0] == 0.0)
        {
          v53 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v74.u32[2] = v75;
          v78 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 8uLL).u64[0];
          v79 = (float32x2_t)vextq_s8((int8x16_t)v346[0], (int8x16_t)v346[0], 8uLL).u64[0];
          v80 = (float32x2_t)vextq_s8((int8x16_t)v346[0], (int8x16_t)v346[0], 4uLL).u64[0];
          v81 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 4uLL).u64[0];
          v82 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v345.f32, v80), v81, *(float32x2_t *)v346[0].f32);
          *(int8x8_t *)v83.f32 = vext_s8(v82, (int8x8_t)vmls_f32(vmul_f32(v78, *(float32x2_t *)v346[0].f32), *(float32x2_t *)v345.f32, v79), 4uLL);
          v83.i64[1] = v82.u32[0];
          v84 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
          v85 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 4uLL).u64[0];
          v86 = (int8x8_t)vmls_f32(vmul_f32(v85, *(float32x2_t *)v346[0].f32), v80, *(float32x2_t *)v344.f32);
          *(int8x8_t *)v87.f32 = vext_s8(v86, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v79), *(float32x2_t *)v346[0].f32, v84), 4uLL);
          v87.i64[1] = v86.u32[0];
          v88 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v81), v85, *(float32x2_t *)v345.f32);
          *(int8x8_t *)v89.f32 = vext_s8(v88, (int8x8_t)vmls_f32(vmul_f32(v84, *(float32x2_t *)v345.f32), *(float32x2_t *)v344.f32, v78), 4uLL);
          v89.i64[1] = v88.u32[0];
          v90 = vmulq_f32(v83, v74);
          v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
          v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
          v92 = vmulq_f32(v87, v74);
          v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
          v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
          v94 = vmulq_f32(v89, v74);
          v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
          v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v93), (int8x8_t)vcgez_f32(v91)), (int8x8_t)vcgez_f32(v95)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
          {
            v121 = (int8x16_t)vmulq_f32(v344, v74);
            v122 = (float32x2_t)vextq_s8(v121, v121, 8uLL).u64[0];
            v123 = vrecpe_f32(v77);
            v124 = 4;
            do
            {
              v123 = vmul_f32(v123, vrecps_f32(v77, v123));
              --v124;
            }
            while (v124);
            v125 = vpadd_f32(*(float32x2_t *)v121.i8, v122);
            v53 = vmulq_n_f32(v74, vmul_f32(v123, vpadd_f32(v125, v125)).f32[0]);
            v53.i32[3] = 0;
          }
          else
          {
            v96 = vnegq_f32(v344);
            v96.i32[3] = 0;
            v97 = vnegq_f32(v345);
            v97.i32[3] = 0;
            v98 = vmulq_f32(v96, a10);
            v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
            v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
            v100 = vmulq_f32(a10, v97);
            v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
            v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v99), (int8x8_t)vclez_f32(v101)), (int8x8_t)vclez_f32(v95)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
            {
              v126 = vsub_f32(v99, v101);
              v127 = vrecpe_f32(v126);
              v128 = 4;
              do
              {
                v127 = vmul_f32(v127, vrecps_f32(v126, v127));
                --v128;
              }
              while (v128);
              v113 = 0;
              v53 = vmlaq_n_f32(v344, a10, vmul_f32(v99, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v126), (float32x2_t)0x3400000034000000), (int8x8_t)v127, 0)).f32[0]);
              v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
              v129 = 2;
              v112 = 1;
            }
            else
            {
              v102 = vnegq_f32(v346[0]);
              v102.i32[3] = 0;
              v103 = vmulq_f32(v97, v73);
              v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
              v104 = vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
              v105 = vmulq_f32(a10, v102);
              v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
              v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
              v107 = vmulq_f32(v73, v102);
              v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
              v108 = vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v104, v101), (int8x8_t)vcge_f32(v106, v108)), (int8x8_t)vclez_f32(v91)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
              {
                v130 = vsub_f32(v104, v101);
                v131 = vadd_f32(v130, vsub_f32(v106, v108));
                v132 = vrecpe_f32(v131);
                v133 = 4;
                do
                {
                  v132 = vmul_f32(v132, vrecps_f32(v131, v132));
                  --v133;
                }
                while (v133);
                v134 = (int8x16_t)vmlaq_n_f32(v345, vsubq_f32(v346[0], v345), vmul_f32(v130, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v131), (float32x2_t)0x3400000034000000), (int8x8_t)v132, 0)).f32[0]);
                v134.i64[1] = vextq_s8(v134, v134, 8uLL).u32[0];
                v129 = 2;
                v113 = 1;
                v112 = 2;
                v53 = (float32x4_t)v134;
              }
              else
              {
                v109 = vmulq_f32(v96, v73);
                v110 = (int32x4_t)vpaddq_f32(v109, v109);
                *(float32x2_t *)v110.i8 = vpadd_f32(*(float32x2_t *)v110.i8, *(float32x2_t *)v110.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v110.i8), (int8x8_t)vclez_f32(v108)), (int8x8_t)vclez_f32(v93)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
                {
                  v135 = vsub_f32(*(float32x2_t *)v110.i8, v108);
                  v136 = vrecpe_f32(v135);
                  v137 = 4;
                  do
                  {
                    v136 = vmul_f32(v136, vrecps_f32(v135, v136));
                    --v137;
                  }
                  while (v137);
                  v113 = 0;
                  v53 = vmlaq_n_f32(v344, v73, vmul_f32(*(float32x2_t *)v110.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v135), (float32x2_t)0x3400000034000000), (int8x8_t)v136, 0)).f32[0]);
                  v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
                  v112 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v110.i8), (int8x8_t)vclez_f32(v99)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
                {
                  v113 = 0;
                  v112 = 1;
                }
                else
                {
                  *(int32x2_t *)v110.i8 = vcge_f32(v101, v104);
                  *(int16x4_t *)v53.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v110.i8, (int8x8_t)vcgez_f32(v101)), 0);
                  *(int8x8_t *)v53.f32 = vuzp1_s8(*(int8x8_t *)v53.f32, *(int8x8_t *)v53.f32);
                  v110.i32[0] = -1;
                  v111 = v53.i32[0];
                  v53 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v53, v110), 0), (int8x16_t)v345, (int8x16_t)v346[0]);
                  v112 = 1;
                  if (v111 == -1)
                    v113 = 1;
                  else
                    v113 = 2;
                }
                v129 = v112;
              }
            }
            v138 = *(&v344 + v113);
            v139 = *(&v344 + v112);
            a10 = *(&v341 + v113);
            v140 = *(&v341 + v112);
            v141 = *(&v338 + v113);
            v142 = *(&v338 + v112);
            v143 = *(&v336 + v113);
            v144 = *(&v336 + v112);
            v145 = *(&v334 + v113);
            v146 = *(&v334 + v112);
            v344 = v138;
            v345 = v139;
            v341 = a10;
            v342 = v140;
            v338 = v141;
            v339 = v142;
            v336 = v143;
            v337 = v144;
            v334 = v145;
            v335 = v146;
            v331 = v129;
          }
        }
        goto LABEL_49;
      }
      v331 = 2;
      v114 = vmulq_f32(a10, a10);
      v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
      v115 = vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v115), 0), *(int8x8_t *)v344.f32).u32[0] != -1)
      {
        v116 = vnegq_f32(v344);
        v116.i32[3] = 0;
        v117 = vmulq_f32(v116, a10);
        v117.i64[0] = vpaddq_f32(v117, v117).u64[0];
        v118 = vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32);
        v119 = vrecpe_f32(v115);
        v120 = 4;
        do
        {
          v119 = vmul_f32(v119, vrecps_f32(v115, v119));
          --v120;
        }
        while (v120);
        v53 = vmlaq_n_f32(v344, a10, vmax_f32(vmin_f32(vmul_f32(v118, v119), _D11), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      v53 = v344;
      v54 = vsubq_f32(v345, v344);
      v55 = vmulq_f32(v54, v54);
      v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
      v56 = vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v56), 0), *(int8x8_t *)v344.f32).u32[0] != -1)
      {
        v57 = vnegq_f32(v344);
        v57.i32[3] = 0;
        v58 = vmulq_f32(v57, v54);
        a10 = vpaddq_f32(v58, v58);
        *(float32x2_t *)a10.f32 = vpadd_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
        v59 = vrecpe_f32(v56);
        v60 = 4;
        do
        {
          v59 = vmul_f32(v59, vrecps_f32(v56, v59));
          --v60;
        }
        while (v60);
        v53 = vmlaq_n_f32(v344, v54, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a10.f32, v59), _D11), 0).f32[0]);
LABEL_31:
        v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  v331 = 1;
LABEL_49:
  v332 = v53;
  v147 = vmulq_f32(v53, v53);
  v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
  v148 = vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32);
  v149 = vrsqrte_f32(v148);
  v150 = 4;
  do
  {
    v149 = vmul_f32(v149, vrsqrts_f32(vmul_f32(v149, v149), v148));
    --v150;
  }
  while (v150);
  v70 = vmul_f32(v148, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v148), 0), (int8x8_t)_D11, (int8x8_t)v149));
  v151 = vrecpe_f32(v70);
  v152 = 4;
  do
  {
    *(float32x2_t *)a10.f32 = vrecps_f32(v70, v151);
    v151 = vmul_f32(v151, *(float32x2_t *)a10.f32);
    --v152;
  }
  while (v152);
  v153 = vmulq_n_f32(v53, v151.f32[0]);
  v153.i32[3] = 0;
  v327 = v153;
  v71 = vdupq_lane_s32(vcgt_f32(v70, v23), 0);
  v72 = v53;
LABEL_54:
  v154 = vadd_f32(v27, a8);
  a10.i32[0] = -1;
  v320 = (int32x4_t)a10;
  v155.i64[0] = -1;
  v155.i64[1] = -1;
  for (i = v70; ; i = v167)
  {
    v157 = v53;
    v158.i64[0] = -1;
    v158.i64[1] = -1;
    *(int16x4_t *)v158.i8 = vmovn_s32(vceqq_s32(v71, v158));
    if (vuzp1_s8(*(int8x8_t *)v158.i8, *(int8x8_t *)v158.i8).u32[0] != -1)
      break;
    v325 = v157;
    v159 = vnegq_f32(v157);
    v159.i32[3] = 0;
    v328 = v70;
    v330 = v159;
    v160 = v331;
    *(double *)v161.i64 = physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(a1, (float32x2_t *)&v330, &v336 + v331);
    v326 = v161;
    *(double *)v162.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v332, &v334 + v160);
    v163 = v327;
    v164 = v162;
    v53 = vsubq_f32(v326, v162);
    v165 = vmulq_f32(v327, v53);
    v165.i64[0] = vpaddq_f32(v165, v165).u64[0];
    v166 = vpadd_f32(*(float32x2_t *)v165.f32, *(float32x2_t *)v165.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v166, v154)).u8[0] & 1) == 0)
    {
      if (a3)
      {
        v267 = v331;
        *a5 = v331;
        if ((_DWORD)v267)
        {
          v268 = &v334;
          v269 = &v336;
          do
          {
            v270 = *v269++;
            *a3++ = v270;
            v271 = *v268++;
            *a4++ = v271;
            --v267;
          }
          while (v267);
        }
      }
      return 0;
    }
    v167 = v328;
    v168 = v331;
    if (v166.f32[0] > (float)(0.99977 * v328.f32[0]))
    {
      if (a3)
      {
        *a5 = v331;
        if ((_DWORD)v168)
        {
          v272 = &v334;
          v273 = &v336;
          v274 = v168;
          do
          {
            v275 = *v273++;
            *a3++ = v275;
            v276 = *v272++;
            *a4++ = v276;
            --v274;
          }
          while (v274);
          goto LABEL_121;
        }
        v277 = a6;
        *(float32x4_t *)(a6 + 32) = v327;
        v278 = 0uLL;
        v279 = 0uLL;
      }
      else
      {
LABEL_121:
        v277 = a6;
        *(float32x4_t *)(a6 + 32) = v327;
        if ((_DWORD)v168 == 3)
        {
          v330.i64[0] = 0;
          v333 = 0;
          physx::Gu::barycentricCoordinates(&v332, &v344, &v345, v346, (float32x2_t *)&v330, &v333);
          v163 = v327;
          v167 = v328;
          v287 = vmulq_n_f32(vsubq_f32(v342, v341), v330.f32[0]);
          v287.i32[3] = 0;
          v288 = vmulq_n_f32(vsubq_f32(v343, v341), v333.f32[0]);
          v288.i32[3] = 0;
          v289 = vaddq_f32(v287, v288);
          v290 = vmulq_n_f32(vsubq_f32(v339, v338), v330.f32[0]);
          v290.i32[3] = 0;
          v278 = vaddq_f32(v341, v289);
          v291 = vmulq_n_f32(vsubq_f32(v340, v338), v333.f32[0]);
          v291.i32[3] = 0;
          v279 = vaddq_f32(v338, vaddq_f32(v290, v291));
        }
        else if ((_DWORD)v168 == 2)
        {
          v292 = vsubq_f32(v344, v332);
          v293 = vsubq_f32(vsubq_f32(v345, v332), v292);
          v294 = vmulq_f32(v293, v293);
          v294.i64[0] = vpaddq_f32(v294, v294).u64[0];
          v295 = vpadd_f32(*(float32x2_t *)v294.f32, *(float32x2_t *)v294.f32);
          v296 = vrecpe_f32(v295);
          v297 = 4;
          do
          {
            v296 = vmul_f32(v296, vrecps_f32(v295, v296));
            --v297;
          }
          while (v297);
          v298 = vnegq_f32(v292);
          v298.i32[3] = 0;
          v299 = vmulq_f32(v298, v293);
          v299.i64[0] = vpaddq_f32(v299, v299).u64[0];
          v298.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v295), (int8x8_t)v296, 0), vpadd_f32(*(float32x2_t *)v299.f32, *(float32x2_t *)v299.f32)).u32[0];
          v278 = vmlaq_n_f32(v341, vsubq_f32(v342, v341), v298.f32[0]);
          v278.i64[1] = vextq_s8((int8x16_t)v278, (int8x16_t)v278, 8uLL).u32[0];
          v279 = vmlaq_n_f32(v338, vsubq_f32(v339, v338), v298.f32[0]);
          v279.i64[1] = vextq_s8((int8x16_t)v279, (int8x16_t)v279, 8uLL).u32[0];
        }
        else
        {
          v278 = 0uLL;
          v279 = 0uLL;
          if ((_DWORD)v168 == 1)
          {
            v278 = v341;
            v279 = v338;
          }
        }
      }
      v300 = (int8x16_t)vmlsq_lane_f32(v278, v163, v322, 0);
      v300.i64[1] = vextq_s8(v300, v300, 8uLL).u32[0];
      v301 = (int8x16_t)vmlaq_n_f32(v279, v163, v323);
      v301.i64[1] = vextq_s8(v301, v301, 8uLL).u32[0];
      *(int8x16_t *)v277 = v300;
      *(int8x16_t *)(v277 + 16) = v301;
      *(float32x2_t *)(v277 + 64) = vsub_f32(v167, v27);
      return 2;
    }
    *(&v341 + v331) = v326;
    *(&v338 + v168) = v164;
    v331 = v168 + 1;
    *(&v344 + v168) = v53;
    if ((_DWORD)v168 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v344, &v341, &v338, &v336, &v334, (int *)&v331);
      v167 = v328;
LABEL_66:
      v72 = v325;
      goto LABEL_101;
    }
    if ((_DWORD)v168 == 2)
    {
      v53 = v344;
      v177 = vsubq_f32(v345, v344);
      v178 = vsubq_f32(v346[0], v344);
      v180 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v177.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v178, (int8x16_t)v178, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v177, (int8x16_t)v177, 4uLL), *(float32x2_t *)v178.f32);
      *(int8x8_t *)v179.f32 = vext_s8(v180, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v177, (int8x16_t)v177, 8uLL), *(float32x2_t *)v178.f32), *(float32x2_t *)v177.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v178, (int8x16_t)v178, 8uLL)), 4uLL);
      v180.i32[1] = 0;
      v331 = 3;
      v181 = vpadd_f32(vmul_f32(*(float32x2_t *)v179.f32, *(float32x2_t *)v179.f32), vmul_f32((float32x2_t)v180.u32[0], (float32x2_t)v180.u32[0]));
      v182 = vpadd_f32(v181, v181);
      if (v182.f32[0] <= 0.00000011921)
      {
        v331 = 2;
        v219 = vmulq_f32(v177, v177);
        v219.i64[0] = vpaddq_f32(v219, v219).u64[0];
        v220 = vpadd_f32(*(float32x2_t *)v219.f32, *(float32x2_t *)v219.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v220), 0), *(int8x8_t *)v344.f32).u32[0] != -1)
        {
          v221 = vnegq_f32(v344);
          v221.i32[3] = 0;
          v222 = vmulq_f32(v221, v177);
          v222.i64[0] = vpaddq_f32(v222, v222).u64[0];
          v223 = vpadd_f32(*(float32x2_t *)v222.f32, *(float32x2_t *)v222.f32);
          v224 = vrecpe_f32(v220);
          v225 = 4;
          v72 = v325;
          do
          {
            v224 = vmul_f32(v224, vrecps_f32(v220, v224));
            --v225;
          }
          while (v225);
          v53 = vmlaq_n_f32(v344, v177, vmax_f32(vmin_f32(vmul_f32(v223, v224), _D11), 0).f32[0]);
LABEL_81:
          v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
          goto LABEL_101;
        }
        v331 = 1;
        goto LABEL_66;
      }
      if (v182.f32[0] == 0.0)
      {
        v53 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v179.u32[2] = v180;
      v183 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 8uLL).u64[0];
      v184 = (float32x2_t)vextq_s8((int8x16_t)v346[0], (int8x16_t)v346[0], 8uLL).u64[0];
      v185 = (float32x2_t)vextq_s8((int8x16_t)v346[0], (int8x16_t)v346[0], 4uLL).u64[0];
      v186 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 4uLL).u64[0];
      v187 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v345.f32, v185), v186, *(float32x2_t *)v346[0].f32);
      *(int8x8_t *)v188.f32 = vext_s8(v187, (int8x8_t)vmls_f32(vmul_f32(v183, *(float32x2_t *)v346[0].f32), *(float32x2_t *)v345.f32, v184), 4uLL);
      v188.i64[1] = v187.u32[0];
      v189 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
      v190 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 4uLL).u64[0];
      v191 = (int8x8_t)vmls_f32(vmul_f32(v190, *(float32x2_t *)v346[0].f32), v185, *(float32x2_t *)v344.f32);
      *(int8x8_t *)v192.f32 = vext_s8(v191, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v184), *(float32x2_t *)v346[0].f32, v189), 4uLL);
      v192.i64[1] = v191.u32[0];
      v193 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v186), v190, *(float32x2_t *)v345.f32);
      *(int8x8_t *)v194.f32 = vext_s8(v193, (int8x8_t)vmls_f32(vmul_f32(v189, *(float32x2_t *)v345.f32), *(float32x2_t *)v344.f32, v183), 4uLL);
      v194.i64[1] = v193.u32[0];
      v195 = vmulq_f32(v188, v179);
      v195.i64[0] = vpaddq_f32(v195, v195).u64[0];
      v196 = vpadd_f32(*(float32x2_t *)v195.f32, *(float32x2_t *)v195.f32);
      v197 = vmulq_f32(v192, v179);
      v197.i64[0] = vpaddq_f32(v197, v197).u64[0];
      v198 = vpadd_f32(*(float32x2_t *)v197.f32, *(float32x2_t *)v197.f32);
      v199 = vmulq_f32(v194, v179);
      v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
      v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v198), (int8x8_t)vcgez_f32(v196)), (int8x8_t)vcgez_f32(v200)), 0), *(int8x8_t *)v344.f32).u32[0] != -1)
      {
        v201 = vnegq_f32(v344);
        v201.i32[3] = 0;
        v202 = vnegq_f32(v345);
        v202.i32[3] = 0;
        v203 = vmulq_f32(v201, v177);
        v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
        v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
        v205 = vmulq_f32(v177, v202);
        v205.i64[0] = vpaddq_f32(v205, v205).u64[0];
        v206 = vpadd_f32(*(float32x2_t *)v205.f32, *(float32x2_t *)v205.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v204), (int8x8_t)vclez_f32(v206)), (int8x8_t)vclez_f32(v200)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
        {
          v231 = vsub_f32(v204, v206);
          v232 = vrecpe_f32(v231);
          v233 = 4;
          do
          {
            v232 = vmul_f32(v232, vrecps_f32(v231, v232));
            --v233;
          }
          while (v233);
          v218 = 0;
          v53 = vmlaq_n_f32(v344, v177, vmul_f32(v204, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v231), (float32x2_t)0x3400000034000000), (int8x8_t)v232, 0)).f32[0]);
          v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
          v234 = 2;
          v217 = 1;
        }
        else
        {
          v207 = vnegq_f32(v346[0]);
          v207.i32[3] = 0;
          v208 = vmulq_f32(v202, v178);
          v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
          v209 = vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32);
          v210 = vmulq_f32(v177, v207);
          v210.i64[0] = vpaddq_f32(v210, v210).u64[0];
          v211 = vpadd_f32(*(float32x2_t *)v210.f32, *(float32x2_t *)v210.f32);
          v212 = vmulq_f32(v178, v207);
          v212.i64[0] = vpaddq_f32(v212, v212).u64[0];
          v213 = vpadd_f32(*(float32x2_t *)v212.f32, *(float32x2_t *)v212.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v209, v206), (int8x8_t)vcge_f32(v211, v213)), (int8x8_t)vclez_f32(v196)), 0), *(int8x8_t *)v344.f32).u32[0] != -1)
          {
            v214 = vmulq_f32(v201, v178);
            v214.i64[0] = vpaddq_f32(v214, v214).u64[0];
            v215 = vpadd_f32(*(float32x2_t *)v214.f32, *(float32x2_t *)v214.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v215), (int8x8_t)vclez_f32(v213)), (int8x8_t)vclez_f32(v198)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
            {
              v240 = vsub_f32(v215, v213);
              v241 = vrecpe_f32(v240);
              v242 = 4;
              v72 = v325;
              do
              {
                v241 = vmul_f32(v241, vrecps_f32(v240, v241));
                --v242;
              }
              while (v242);
              v218 = 0;
              v53 = vmlaq_n_f32(v344, v178, vmul_f32(v215, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v240), (float32x2_t)0x3400000034000000), (int8x8_t)v241, 0)).f32[0]);
              v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
              v217 = 2;
              v234 = 2;
            }
            else
            {
              v72 = v325;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v215), (int8x8_t)vclez_f32(v204)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
              {
                v218 = 0;
                v217 = 1;
              }
              else
              {
                *(int16x4_t *)v53.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v206, v209), (int8x8_t)vcgez_f32(v206)), 0);
                *(int8x8_t *)v53.f32 = vuzp1_s8(*(int8x8_t *)v53.f32, *(int8x8_t *)v53.f32);
                v216 = v53.i32[0];
                v53 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v53, v320), 0), (int8x16_t)v345, (int8x16_t)v346[0]);
                v217 = 1;
                if (v216 == -1)
                  v218 = 1;
                else
                  v218 = 2;
              }
              v234 = 1;
            }
            goto LABEL_100;
          }
          v235 = vsub_f32(v209, v206);
          v236 = vadd_f32(v235, vsub_f32(v211, v213));
          v237 = vrecpe_f32(v236);
          v238 = 4;
          do
          {
            v237 = vmul_f32(v237, vrecps_f32(v236, v237));
            --v238;
          }
          while (v238);
          v239 = (int8x16_t)vmlaq_n_f32(v345, vsubq_f32(v346[0], v345), vmul_f32(v235, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v236), (float32x2_t)0x3400000034000000), (int8x8_t)v237, 0)).f32[0]);
          v239.i64[1] = vextq_s8(v239, v239, 8uLL).u32[0];
          v217 = 2;
          v53 = (float32x4_t)v239;
          v218 = 1;
          v234 = 2;
        }
        v72 = v325;
LABEL_100:
        v243 = *(&v344 + v218);
        v244 = *(&v344 + v217);
        v245 = *(&v341 + v218);
        v246 = *(&v341 + v217);
        v247 = *(&v338 + v218);
        v248 = *(&v338 + v217);
        v249 = *(&v336 + v218);
        v250 = *(&v336 + v217);
        v251 = *(&v334 + v218);
        v252 = *(&v334 + v217);
        v344 = v243;
        v345 = v244;
        v341 = v245;
        v342 = v246;
        v338 = v247;
        v339 = v248;
        v336 = v249;
        v337 = v250;
        v334 = v251;
        v335 = v252;
        v331 = v234;
        goto LABEL_101;
      }
      v226 = (int8x16_t)vmulq_f32(v344, v179);
      v227 = (float32x2_t)vextq_s8(v226, v226, 8uLL).u64[0];
      v228 = vrecpe_f32(v182);
      v229 = 4;
      v72 = v325;
      do
      {
        v228 = vmul_f32(v228, vrecps_f32(v182, v228));
        --v229;
      }
      while (v229);
      v230 = vpadd_f32(*(float32x2_t *)v226.i8, v227);
      v53 = vmulq_n_f32(v179, vmul_f32(v228, vpadd_f32(v230, v230)).f32[0]);
      v53.i32[3] = 0;
    }
    else
    {
      v72 = v325;
      if ((_DWORD)v168 == 1)
      {
        v53 = v344;
        v169 = vsubq_f32(v345, v344);
        v170 = vmulq_f32(v169, v169);
        v170.i64[0] = vpaddq_f32(v170, v170).u64[0];
        v171 = vpadd_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v171), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
        {
          v331 = 1;
          goto LABEL_101;
        }
        v172 = vnegq_f32(v344);
        v172.i32[3] = 0;
        v173 = vmulq_f32(v172, v169);
        v173.i64[0] = vpaddq_f32(v173, v173).u64[0];
        v174 = vpadd_f32(*(float32x2_t *)v173.f32, *(float32x2_t *)v173.f32);
        v175 = vrecpe_f32(v171);
        v176 = 4;
        do
        {
          v175 = vmul_f32(v175, vrecps_f32(v171, v175));
          --v176;
        }
        while (v176);
        v53 = vmlaq_n_f32(v344, v169, vmax_f32(vmin_f32(vmul_f32(v174, v175), _D11), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    v332 = v53;
    v253 = vmulq_f32(v53, v53);
    v253.i64[0] = vpaddq_f32(v253, v253).u64[0];
    v254 = vpadd_f32(*(float32x2_t *)v253.f32, *(float32x2_t *)v253.f32);
    v255 = vrsqrte_f32(v254);
    v256 = 4;
    do
    {
      v255 = vmul_f32(v255, vrsqrts_f32(vmul_f32(v255, v255), v254));
      --v256;
    }
    while (v256);
    v70 = vmul_f32(v254, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v254), 0), (int8x8_t)_D11, (int8x8_t)v255));
    v257 = vrecpe_f32(v70);
    v258 = 4;
    do
    {
      v257 = vmul_f32(v257, vrecps_f32(v70, v257));
      --v258;
    }
    while (v258);
    v259 = vmulq_n_f32(v53, v257.f32[0]);
    v259.i32[3] = 0;
    v327 = v259;
    *(int32x2_t *)v259.f32 = vcgt_f32(v167, v70);
    v155 = vdupq_lane_s32(*(int32x2_t *)v259.f32, 0);
    v71 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v70, v23), *(int8x8_t *)v259.f32), 0);
  }
  v260 = (int8x8_t)vmovn_s32(vceqzq_s32(v155));
  v261 = v331;
  if (vuzp1_s8(v260, v260).u32[0] == -1)
  {
    if (a3)
    {
      v280 = v331 - 1;
      *a5 = v331 - 1;
      if ((_DWORD)v261 == 1)
      {
LABEL_132:
        v285 = v341;
        v286 = v338;
        goto LABEL_143;
      }
      v281 = &v334;
      v282 = &v336;
      do
      {
        v283 = *v282++;
        *a3++ = v283;
        v284 = *v281++;
        *a4++ = v284;
        --v280;
      }
      while (v280);
    }
    v332 = v72;
    if ((_DWORD)v261 == 3)
    {
      v330.i64[0] = 0;
      v333 = 0;
      v329 = v72;
      physx::Gu::barycentricCoordinates(&v332, &v344, &v345, v346, (float32x2_t *)&v330, &v333);
      v302 = vmulq_n_f32(vsubq_f32(v342, v341), v330.f32[0]);
      v302.i32[3] = 0;
      v303 = vmulq_n_f32(vsubq_f32(v343, v341), v333.f32[0]);
      v303.i32[3] = 0;
      v304 = vaddq_f32(v302, v303);
      v305 = vmulq_n_f32(vsubq_f32(v339, v338), v330.f32[0]);
      v305.i32[3] = 0;
      v285 = vaddq_f32(v341, v304);
      v306 = vmulq_n_f32(vsubq_f32(v340, v338), v333.f32[0]);
      v72 = v329;
      v306.i32[3] = 0;
      v286 = vaddq_f32(v338, vaddq_f32(v305, v306));
    }
    else
    {
      if ((_DWORD)v261 == 2)
      {
        v307 = vsubq_f32(v344, v72);
        v308 = vsubq_f32(vsubq_f32(v345, v72), v307);
        v309 = vmulq_f32(v308, v308);
        v309.i64[0] = vpaddq_f32(v309, v309).u64[0];
        v310 = vpadd_f32(*(float32x2_t *)v309.f32, *(float32x2_t *)v309.f32);
        v311 = vrecpe_f32(v310);
        v312 = 4;
        do
        {
          v311 = vmul_f32(v311, vrecps_f32(v310, v311));
          --v312;
        }
        while (v312);
        v313 = vnegq_f32(v307);
        v313.i32[3] = 0;
        v314 = vmulq_f32(v313, v308);
        v314.i64[0] = vpaddq_f32(v314, v314).u64[0];
        v313.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v310), (int8x8_t)v311, 0), vpadd_f32(*(float32x2_t *)v314.f32, *(float32x2_t *)v314.f32)).u32[0];
        v285 = vmlaq_n_f32(v341, vsubq_f32(v342, v341), v313.f32[0]);
        v285.i64[1] = vextq_s8((int8x16_t)v285, (int8x16_t)v285, 8uLL).u32[0];
        v286 = vmlaq_n_f32(v338, vsubq_f32(v339, v338), v313.f32[0]);
        v286.i64[1] = vextq_s8((int8x16_t)v286, (int8x16_t)v286, 8uLL).u32[0];
        goto LABEL_143;
      }
      v285 = 0uLL;
      v286 = 0uLL;
      if ((_DWORD)v261 == 1)
        goto LABEL_132;
    }
LABEL_143:
    v315 = vrecpe_f32(i);
    v316 = 4;
    do
    {
      v315 = vmul_f32(v315, vrecps_f32(i, v315));
      --v316;
    }
    while (v316);
    v317 = vmulq_n_f32(v72, v315.f32[0]);
    v317.i32[3] = 0;
    *(float32x4_t *)(a6 + 32) = v317;
    *(float32x4_t *)(a6 + 48) = v327;
    v318 = (int8x16_t)vmlsq_lane_f32(v285, v317, v322, 0);
    v318.i64[1] = vextq_s8(v318, v318, 8uLL).u32[0];
    v319 = (int8x16_t)vmlaq_n_f32(v286, v317, v323);
    v319.i64[1] = vextq_s8(v319, v319, 8uLL).u32[0];
    *(int8x16_t *)a6 = v318;
    *(int8x16_t *)(a6 + 16) = v319;
    *(float32x2_t *)(a6 + 64) = vsub_f32(i, v27);
    if ((vcge_f32(v27, i).u8[0] & 1) != 0)
      return 2;
    else
      return 4;
  }
  if (a3)
  {
    *a5 = v331;
    if ((_DWORD)v261)
    {
      v262 = &v334;
      v263 = &v336;
      do
      {
        v264 = *v263++;
        *a3++ = v264;
        v265 = *v262++;
        *a4++ = v265;
        --v261;
      }
      while (v261);
    }
  }
  return 5;
}

double physx::Gu::RelativeConvex<physx::Gu::TriangleV>::supportPoint(uint64_t a1, int a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  double result;

  v2 = *(float32x4_t **)(a1 + 16);
  v3 = *(float32x4_t *)(*(_QWORD *)(a1 + 8) + 16 * a2 + 48);
  v4 = vmulq_n_f32(*v2, v3.f32[0]);
  v4.i32[3] = 0;
  v5 = vmulq_lane_f32(v2[1], *(float32x2_t *)v3.f32, 1);
  v5.i32[3] = 0;
  v6 = vmulq_laneq_f32(v2[2], v3, 2);
  v6.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v2[3], vaddq_f32(vaddq_f32(v4, v5), v6)).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(float32x4_t *a1, float32x2_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t *v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  double result;

  v2 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v2.i32[3] = 0;
  v3 = vmulq_lane_f32(a1[3], *a2, 1);
  v3.i32[3] = 0;
  v4 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v4.i32[3] = 0;
  v5 = (float32x4_t *)a1->i64[1];
  v6 = (float32x4_t *)a1[1].i64[0];
  v7 = vaddq_f32(vaddq_f32(v2, v3), v4);
  v8 = v5[3];
  v9 = v5[4];
  v10 = v5[5];
  v11 = vmulq_f32(v8, v7);
  v11.i64[0] = vpaddq_f32(v11, v11).u64[0];
  *(float32x2_t *)v11.f32 = vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
  v12 = vmulq_f32(v9, v7);
  v12.i64[0] = vpaddq_f32(v12, v12).u64[0];
  *(float32x2_t *)v12.f32 = vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
  v13 = vmulq_f32(v10, v7);
  v13.i64[0] = vpaddq_f32(v13, v13).u64[0];
  *(float32x2_t *)v13.f32 = vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32);
  v14 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v13.f32), (int8x8_t)vcgt_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v12.f32)), 0), (int8x16_t)v8, vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.f32), 0), (int8x16_t)v9, (int8x16_t)v10));
  v15 = vmulq_n_f32(*v6, v14.f32[0]);
  v15.i32[3] = 0;
  v16 = vmulq_lane_f32(v6[1], *(float32x2_t *)v14.f32, 1);
  v16.i32[3] = 0;
  v17 = vmulq_laneq_f32(v6[2], v14, 2);
  v17.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v6[3], vaddq_f32(v17, vaddq_f32(v15, v16))).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(float32x4_t *a1, float32x2_t *a2, unsigned __int32 *a3)
{
  float32x4_t *v3;
  float32x4_t *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  double result;

  v4 = (float32x4_t *)a1->i64[1];
  v3 = (float32x4_t *)a1[1].i64[0];
  v5 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v5.i32[3] = 0;
  v6 = vmulq_lane_f32(a1[3], *a2, 1);
  v6.i32[3] = 0;
  v7 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v7.i32[3] = 0;
  v8 = vaddq_f32(vaddq_f32(v5, v6), v7);
  v9 = v4[3];
  v10 = v4[4];
  v11 = v4[5];
  v12 = vmulq_f32(v9, v8);
  v12.i64[0] = vpaddq_f32(v12, v12).u64[0];
  *(float32x2_t *)v12.f32 = vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
  v13 = vmulq_f32(v10, v8);
  v13.i64[0] = vpaddq_f32(v13, v13).u64[0];
  *(float32x2_t *)v13.f32 = vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32);
  v14 = vmulq_f32(v11, v8);
  v15 = (int8x16_t)vpaddq_f32(v14, v14);
  *(float32x2_t *)v15.i8 = vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8);
  *(int8x8_t *)v12.f32 = vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v15.i8), (int8x8_t)vcgt_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.f32));
  *(int32x2_t *)v15.i8 = vcgt_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v15.i8);
  v16 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v15.i8, 0);
  v17.i64[0] = 0x100000001;
  v17.i64[1] = 0x100000001;
  v18 = vandq_s8(v15, v17);
  v17.i64[0] = 0x200000002;
  v17.i64[1] = 0x200000002;
  *a3 = vorrq_s8(v18, vbicq_s8(v17, v16)).u32[0] & ~v12.i32[0];
  v19 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0), (int8x16_t)v9, vbslq_s8(v16, (int8x16_t)v10, (int8x16_t)v11));
  v20 = vmulq_n_f32(*v3, v19.f32[0]);
  v20.i32[3] = 0;
  v21 = vmulq_lane_f32(v3[1], *(float32x2_t *)v19.f32, 1);
  v21.i32[3] = 0;
  v22 = vmulq_laneq_f32(v3[2], v19, 2);
  v22.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v3[3], vaddq_f32(v22, vaddq_f32(v20, v21))).u64[0];
  return result;
}

int32x2_t physx::Gu::RelativeConvex<physx::Gu::TriangleV>::getSweepMargin()
{
  return vdup_n_s32(0x7F7FFFFFu);
}

double physx::Gu::RelativeConvex<physx::Gu::TriangleV>::getCenter(uint64_t a1)
{
  float32x4_t *v1;
  float32x2_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  double result;

  v2 = *(float32x2_t **)(a1 + 8);
  v1 = *(float32x4_t **)(a1 + 16);
  v3 = vmulq_n_f32(*v1, COERCE_FLOAT(*(_OWORD *)v2->f32));
  v3.i32[3] = 0;
  v4 = vmulq_lane_f32(v1[1], *v2, 1);
  v4.i32[3] = 0;
  v5 = vmulq_laneq_f32(v1[2], *(float32x4_t *)v2->f32, 2);
  v5.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v1[3], vaddq_f32(vaddq_f32(v3, v4), v5)).u64[0];
  return result;
}

void physx::Gu::RelativeConvex<physx::Gu::TriangleV>::~RelativeConvex()
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::CapsuleV>>(float32x4_t *a1, uint64_t a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, uint64_t a6, float32x4_t a7, float32x2_t a8, double a9, float32x4_t a10)
{
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v15;
  const float *v16;
  float32x2_t v17;
  uint64_t v18;
  const float *v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  uint64_t v28;
  uint64_t v34;
  uint64_t v35;
  float32x4_t *v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x2_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x2_t v51;
  int v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x2_t v55;
  float32x2_t v56;
  int v57;
  float32x2_t v58;
  float32x2_t v59;
  int v60;
  float32x4_t v61;
  float32x2_t v62;
  int32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x8_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  int8x8_t v74;
  float32x4_t v75;
  float32x2_t v76;
  float32x2_t v77;
  int8x8_t v78;
  float32x4_t v79;
  int8x8_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x2_t v83;
  float32x4_t v84;
  float32x2_t v85;
  float32x4_t v86;
  float32x2_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x2_t v91;
  float32x4_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x4_t v97;
  float32x2_t v98;
  float32x4_t v99;
  float32x2_t v100;
  float32x4_t v101;
  int32x4_t v102;
  __int32 v103;
  uint64_t v104;
  uint64_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x2_t v110;
  float32x2_t v111;
  int v112;
  int8x16_t v113;
  float32x2_t v114;
  float32x2_t v115;
  int v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  int v120;
  unsigned int v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  int v125;
  int8x16_t v126;
  float32x2_t v127;
  float32x2_t v128;
  int v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int v135;
  int v136;
  int v137;
  int v138;
  float32x4_t v139;
  float32x2_t v140;
  float32x2_t v141;
  int v142;
  float32x2_t v143;
  int v144;
  float32x4_t v145;
  float32x2_t v146;
  float32x2_t v147;
  int32x4_t v148;
  float32x4_t v149;
  int32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  uint64_t v154;
  float32x4_t *v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x2_t v161;
  float32x2_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x2_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x2_t v168;
  float32x2_t v169;
  int v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  int8x8_t v174;
  float32x2_t v175;
  float32x2_t v176;
  float32x2_t v177;
  float32x2_t v178;
  float32x2_t v179;
  float32x2_t v180;
  int8x8_t v181;
  float32x4_t v182;
  float32x2_t v183;
  float32x2_t v184;
  int8x8_t v185;
  float32x4_t v186;
  int8x8_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x2_t v190;
  float32x4_t v191;
  float32x2_t v192;
  float32x4_t v193;
  float32x2_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x2_t v198;
  float32x4_t v199;
  float32x2_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x2_t v203;
  float32x4_t v204;
  float32x2_t v205;
  float32x4_t v206;
  float32x2_t v207;
  float32x4_t v208;
  float32x2_t v209;
  __int32 v210;
  uint64_t v211;
  uint64_t v212;
  float32x4_t v213;
  float32x2_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x2_t v217;
  float32x2_t v218;
  int v219;
  int8x16_t v220;
  float32x2_t v221;
  float32x2_t v222;
  int v223;
  float32x2_t v224;
  float32x2_t v225;
  float32x2_t v226;
  int v227;
  unsigned int v228;
  float32x2_t v229;
  float32x2_t v230;
  float32x2_t v231;
  int v232;
  int8x16_t v233;
  float32x2_t v234;
  float32x2_t v235;
  int v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  int v243;
  int v244;
  int v245;
  int v246;
  float32x4_t v247;
  float32x2_t v248;
  float32x2_t v249;
  int v250;
  float32x2_t v251;
  int v252;
  float32x4_t v253;
  int8x8_t v254;
  uint64_t v255;
  int *v256;
  int *v257;
  int v258;
  int v259;
  int *v261;
  int *v262;
  int v263;
  int v264;
  int *v265;
  int *v266;
  uint64_t v267;
  int v268;
  int v269;
  uint64_t v270;
  float32x4_t v271;
  float32x4_t v272;
  uint64_t v273;
  int *v274;
  int *v275;
  int v276;
  int v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x2_t v288;
  float32x2_t v289;
  int v290;
  float32x4_t v291;
  float32x4_t v292;
  int8x16_t v293;
  int8x16_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x2_t v303;
  float32x2_t v304;
  int v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x2_t v308;
  int v309;
  float32x4_t v310;
  int8x16_t v311;
  int8x16_t v312;
  int32x4_t v313;
  float32x2_t v315;
  float v316;
  float32x2_t v317;
  float32x4_t v319;
  float32x2_t v320;
  float32x4_t v321;
  float32x4_t v322;
  unsigned int v323;
  float32x4_t v324;
  float32x2_t v325;
  float32x2_t v326;
  int v327;
  int v328;
  int v329;
  int v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  int8x16_t v339[2];
  uint64_t v340;

  v10 = a4;
  v11 = a3;
  v340 = *MEMORY[0x24BDAC8D0];
  v15 = a1->i64[1];
  v16 = (const float *)(v15 + 20);
  v17 = vld1_dup_f32(v16);
  v18 = *(_QWORD *)(a2 + 8);
  v19 = (const float *)(v18 + 20);
  v20 = vld1_dup_f32(v19);
  v21 = vmin_f32(v17, v20);
  v22 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  v23 = vmul_f32(v21, v22);
  v21.i32[0] = *(_DWORD *)(v15 + 16);
  v22.i32[0] = *(_DWORD *)(v18 + 16);
  a10.i32[0] = -*(char *)(v15 + 32);
  v24 = (int32x2_t)vand_s8(*(int8x8_t *)a10.f32, (int8x8_t)v21);
  v25 = (float32x2_t)vdup_lane_s32(v24, 0);
  v24.i32[0] = -*(char *)(v18 + 32);
  v26 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v24, (int8x8_t)v22), 0);
  v315 = v25;
  v316 = v26.f32[0];
  v27 = vadd_f32(v25, v26);
  v323 = 0;
  v28 = *a5;
  __asm { FMOV            V11.2S, #1.0 }
  if (!*a5)
  {
    v53 = vmulq_f32(a7, a7);
    v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
    v45 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_2260E5F10);
    v54 = vmulq_f32(v45, v45);
    v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
    v55 = vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32);
    v56 = vrsqrte_f32(v55);
    v57 = 4;
    do
    {
      v56 = vmul_f32(v56, vrsqrts_f32(vmul_f32(v56, v56), v55));
      --v57;
    }
    while (v57);
    v58 = vmul_f32(v55, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v55), 0), (int8x8_t)_D11, (int8x8_t)v56));
    v59 = vrecpe_f32(v58);
    v60 = 4;
    do
    {
      *(float32x2_t *)a10.f32 = vrecps_f32(v58, v59);
      v59 = vmul_f32(v59, *(float32x2_t *)a10.f32);
      --v60;
    }
    while (v60);
    v61 = vmulq_n_f32(v45, v59.f32[0]);
    v61.i32[3] = 0;
    v319 = v61;
    v62 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v63.i64[0] = -1;
    v63.i64[1] = -1;
    v64 = 0uLL;
    goto LABEL_54;
  }
  v34 = 0;
  v35 = v18 + 48;
  v36 = (float32x4_t *)a1[1].i64[0];
  do
  {
    v37 = a3[v34];
    *(&v329 + v34) = v37;
    v38 = a4[v34];
    *(&v327 + v34) = v38;
    v39 = *(float32x4_t *)(v15 + 16 * v37 + 48);
    v40 = vmulq_n_f32(*v36, v39.f32[0]);
    v40.i32[3] = 0;
    v41 = vmulq_lane_f32(v36[1], *(float32x2_t *)v39.f32, 1);
    v41.i32[3] = 0;
    a10 = v36[3];
    v42 = vmulq_laneq_f32(v36[2], v39, 2);
    v42.i32[3] = 0;
    v43 = vaddq_f32(a10, vaddq_f32(vaddq_f32(v40, v41), v42));
    v44 = *(float32x4_t *)(v35 + 16 * (1 - v38));
    v45 = vsubq_f32(v43, v44);
    *(&v334 + v34) = v43;
    *(&v331 + v34) = v44;
    *(&v337 + v34++) = v45;
  }
  while (v28 != v34);
  v323 = v28;
  switch((_DWORD)v34)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v337, &v334, &v331, &v329, &v327, (int *)&v323);
      goto LABEL_49;
    case 3:
      v323 = 3;
      v45 = v337;
      a10 = vsubq_f32(v338, v337);
      v65 = vsubq_f32((float32x4_t)v339[0], v337);
      v67 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), *(float32x2_t *)v65.f32);
      *(int8x8_t *)v66.f32 = vext_s8(v67, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), *(float32x2_t *)v65.f32), *(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL)), 4uLL);
      v67.i32[1] = 0;
      v68 = vpadd_f32(vmul_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32), vmul_f32((float32x2_t)v67.u32[0], (float32x2_t)v67.u32[0]));
      v69 = vpadd_f32(v68, v68);
      if (v69.f32[0] > 0.00000011921)
      {
        if (v69.f32[0] == 0.0)
        {
          v45 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v66.u32[2] = v67;
          v70 = (float32x2_t)vextq_s8((int8x16_t)v338, (int8x16_t)v338, 8uLL).u64[0];
          v71 = (float32x2_t)vextq_s8(v339[0], v339[0], 8uLL).u64[0];
          v72 = (float32x2_t)vextq_s8(v339[0], v339[0], 4uLL).u64[0];
          v73 = (float32x2_t)vextq_s8((int8x16_t)v338, (int8x16_t)v338, 4uLL).u64[0];
          v74 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v338.f32, v72), v73, *(float32x2_t *)v339[0].i8);
          *(int8x8_t *)v75.f32 = vext_s8(v74, (int8x8_t)vmls_f32(vmul_f32(v70, *(float32x2_t *)v339[0].i8), *(float32x2_t *)v338.f32, v71), 4uLL);
          v75.i64[1] = v74.u32[0];
          v76 = (float32x2_t)vextq_s8((int8x16_t)v337, (int8x16_t)v337, 8uLL).u64[0];
          v77 = (float32x2_t)vextq_s8((int8x16_t)v337, (int8x16_t)v337, 4uLL).u64[0];
          v78 = (int8x8_t)vmls_f32(vmul_f32(v77, *(float32x2_t *)v339[0].i8), v72, *(float32x2_t *)v337.f32);
          *(int8x8_t *)v79.f32 = vext_s8(v78, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v337.f32, v71), *(float32x2_t *)v339[0].i8, v76), 4uLL);
          v79.i64[1] = v78.u32[0];
          v80 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v337.f32, v73), v77, *(float32x2_t *)v338.f32);
          *(int8x8_t *)v81.f32 = vext_s8(v80, (int8x8_t)vmls_f32(vmul_f32(v76, *(float32x2_t *)v338.f32), *(float32x2_t *)v337.f32, v70), 4uLL);
          v81.i64[1] = v80.u32[0];
          v82 = vmulq_f32(v75, v66);
          v82.i64[0] = vpaddq_f32(v82, v82).u64[0];
          v83 = vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32);
          v84 = vmulq_f32(v79, v66);
          v84.i64[0] = vpaddq_f32(v84, v84).u64[0];
          v85 = vpadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32);
          v86 = vmulq_f32(v81, v66);
          v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
          v87 = vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v85), (int8x8_t)vcgez_f32(v83)), (int8x8_t)vcgez_f32(v87)), 0), *(int8x8_t *)v337.f32).u32[0] == -1)
          {
            v113 = (int8x16_t)vmulq_f32(v337, v66);
            v114 = (float32x2_t)vextq_s8(v113, v113, 8uLL).u64[0];
            v115 = vrecpe_f32(v69);
            v116 = 4;
            do
            {
              v115 = vmul_f32(v115, vrecps_f32(v69, v115));
              --v116;
            }
            while (v116);
            v117 = vpadd_f32(*(float32x2_t *)v113.i8, v114);
            v45 = vmulq_n_f32(v66, vmul_f32(v115, vpadd_f32(v117, v117)).f32[0]);
            v45.i32[3] = 0;
          }
          else
          {
            v88 = vnegq_f32(v337);
            v88.i32[3] = 0;
            v89 = vnegq_f32(v338);
            v89.i32[3] = 0;
            v90 = vmulq_f32(v88, a10);
            v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
            v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
            v92 = vmulq_f32(a10, v89);
            v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
            v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v91), (int8x8_t)vclez_f32(v93)), (int8x8_t)vclez_f32(v87)), 0), *(int8x8_t *)v337.f32).u32[0] == -1)
            {
              v118 = vsub_f32(v91, v93);
              v119 = vrecpe_f32(v118);
              v120 = 4;
              do
              {
                v119 = vmul_f32(v119, vrecps_f32(v118, v119));
                --v120;
              }
              while (v120);
              v105 = 0;
              v45 = vmlaq_n_f32(v337, a10, vmul_f32(v91, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v118), (float32x2_t)0x3400000034000000), (int8x8_t)v119, 0)).f32[0]);
              v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
              v121 = 2;
              v104 = 1;
            }
            else
            {
              v94 = vnegq_f32((float32x4_t)v339[0]);
              v94.i32[3] = 0;
              v95 = vmulq_f32(v89, v65);
              v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
              v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
              v97 = vmulq_f32(a10, v94);
              v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
              v98 = vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32);
              v99 = vmulq_f32(v65, v94);
              v99.i64[0] = vpaddq_f32(v99, v99).u64[0];
              v100 = vpadd_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v99.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v96, v93), (int8x8_t)vcge_f32(v98, v100)), (int8x8_t)vclez_f32(v83)), 0), *(int8x8_t *)v337.f32).u32[0] == -1)
              {
                v122 = vsub_f32(v96, v93);
                v123 = vadd_f32(v122, vsub_f32(v98, v100));
                v124 = vrecpe_f32(v123);
                v125 = 4;
                do
                {
                  v124 = vmul_f32(v124, vrecps_f32(v123, v124));
                  --v125;
                }
                while (v125);
                v126 = (int8x16_t)vmlaq_n_f32(v338, vsubq_f32((float32x4_t)v339[0], v338), vmul_f32(v122, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v123), (float32x2_t)0x3400000034000000), (int8x8_t)v124, 0)).f32[0]);
                v126.i64[1] = vextq_s8(v126, v126, 8uLL).u32[0];
                v121 = 2;
                v105 = 1;
                v104 = 2;
                v45 = (float32x4_t)v126;
              }
              else
              {
                v101 = vmulq_f32(v88, v65);
                v102 = (int32x4_t)vpaddq_f32(v101, v101);
                *(float32x2_t *)v102.i8 = vpadd_f32(*(float32x2_t *)v102.i8, *(float32x2_t *)v102.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v102.i8), (int8x8_t)vclez_f32(v100)), (int8x8_t)vclez_f32(v85)), 0), *(int8x8_t *)v337.f32).u32[0] == -1)
                {
                  v127 = vsub_f32(*(float32x2_t *)v102.i8, v100);
                  v128 = vrecpe_f32(v127);
                  v129 = 4;
                  do
                  {
                    v128 = vmul_f32(v128, vrecps_f32(v127, v128));
                    --v129;
                  }
                  while (v129);
                  v105 = 0;
                  v45 = vmlaq_n_f32(v337, v65, vmul_f32(*(float32x2_t *)v102.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v127), (float32x2_t)0x3400000034000000), (int8x8_t)v128, 0)).f32[0]);
                  v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
                  v104 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v102.i8), (int8x8_t)vclez_f32(v91)), 0), *(int8x8_t *)v337.f32).u32[0] == -1)
                {
                  v105 = 0;
                  v104 = 1;
                }
                else
                {
                  *(int32x2_t *)v102.i8 = vcge_f32(v93, v96);
                  *(int16x4_t *)v45.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v102.i8, (int8x8_t)vcgez_f32(v93)), 0);
                  *(int8x8_t *)v45.f32 = vuzp1_s8(*(int8x8_t *)v45.f32, *(int8x8_t *)v45.f32);
                  v102.i32[0] = -1;
                  v103 = v45.i32[0];
                  v45 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v45, v102), 0), (int8x16_t)v338, v339[0]);
                  v104 = 1;
                  if (v103 == -1)
                    v105 = 1;
                  else
                    v105 = 2;
                }
                v121 = v104;
              }
            }
            v130 = *(&v337 + v105);
            v131 = *(&v337 + v104);
            a10 = *(&v334 + v105);
            v132 = *(&v334 + v104);
            v133 = *(&v331 + v105);
            v134 = *(&v331 + v104);
            v135 = *(&v329 + v105);
            v136 = *(&v329 + v104);
            v137 = *(&v327 + v105);
            v138 = *(&v327 + v104);
            v337 = v130;
            v338 = v131;
            v334 = a10;
            v335 = v132;
            v331 = v133;
            v332 = v134;
            v329 = v135;
            v330 = v136;
            v327 = v137;
            v328 = v138;
            v323 = v121;
          }
        }
        goto LABEL_49;
      }
      v323 = 2;
      v106 = vmulq_f32(a10, a10);
      v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
      v107 = vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v107), 0), *(int8x8_t *)v337.f32).u32[0] != -1)
      {
        v108 = vnegq_f32(v337);
        v108.i32[3] = 0;
        v109 = vmulq_f32(v108, a10);
        v109.i64[0] = vpaddq_f32(v109, v109).u64[0];
        v110 = vpadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v109.f32);
        v111 = vrecpe_f32(v107);
        v112 = 4;
        do
        {
          v111 = vmul_f32(v111, vrecps_f32(v107, v111));
          --v112;
        }
        while (v112);
        v45 = vmlaq_n_f32(v337, a10, vmax_f32(vmin_f32(vmul_f32(v110, v111), _D11), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      v45 = v337;
      v46 = vsubq_f32(v338, v337);
      v47 = vmulq_f32(v46, v46);
      v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
      v48 = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v48), 0), *(int8x8_t *)v337.f32).u32[0] != -1)
      {
        v49 = vnegq_f32(v337);
        v49.i32[3] = 0;
        v50 = vmulq_f32(v49, v46);
        a10 = vpaddq_f32(v50, v50);
        *(float32x2_t *)a10.f32 = vpadd_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
        v51 = vrecpe_f32(v48);
        v52 = 4;
        do
        {
          v51 = vmul_f32(v51, vrecps_f32(v48, v51));
          --v52;
        }
        while (v52);
        v45 = vmlaq_n_f32(v337, v46, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a10.f32, v51), _D11), 0).f32[0]);
LABEL_31:
        v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  v323 = 1;
LABEL_49:
  v139 = vmulq_f32(v45, v45);
  v139.i64[0] = vpaddq_f32(v139, v139).u64[0];
  v140 = vpadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32);
  v141 = vrsqrte_f32(v140);
  v142 = 4;
  do
  {
    v141 = vmul_f32(v141, vrsqrts_f32(vmul_f32(v141, v141), v140));
    --v142;
  }
  while (v142);
  v62 = vmul_f32(v140, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v140), 0), (int8x8_t)_D11, (int8x8_t)v141));
  v143 = vrecpe_f32(v62);
  v144 = 4;
  do
  {
    *(float32x2_t *)a10.f32 = vrecps_f32(v62, v143);
    v143 = vmul_f32(v143, *(float32x2_t *)a10.f32);
    --v144;
  }
  while (v144);
  v145 = vmulq_n_f32(v45, v143.f32[0]);
  v145.i32[3] = 0;
  v319 = v145;
  v63 = vdupq_lane_s32(vcgt_f32(v62, v23), 0);
  v64 = v45;
LABEL_54:
  v317 = v27;
  v146 = vadd_f32(v27, a8);
  a10.i32[0] = -1;
  v313 = (int32x4_t)a10;
  v147 = v62;
  v148.i64[0] = -1;
  v148.i64[1] = -1;
  while (1)
  {
    v149 = v45;
    v150.i64[0] = -1;
    v150.i64[1] = -1;
    *(int16x4_t *)v150.i8 = vmovn_s32(vceqq_s32(v63, v150));
    if (vuzp1_s8(*(int8x8_t *)v150.i8, *(int8x8_t *)v150.i8).u32[0] != -1)
      break;
    v320 = v62;
    v321 = v149;
    v151 = vnegq_f32(v149);
    v151.i32[3] = 0;
    v324 = v151;
    *(double *)v152.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(a1, (float32x2_t *)&v324, (unsigned __int32 *)&v329 + v323);
    v64 = v321;
    v153 = v152;
    v154 = v323;
    v155 = *(float32x4_t **)(a2 + 8);
    v156 = vmulq_f32(v321, v155[3]);
    v156.i64[0] = vpaddq_f32(v156, v156).u64[0];
    v157 = vmulq_f32(v321, v155[4]);
    v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
    *(int8x8_t *)v156.f32 = vand_s8((int8x8_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v156.f32, *(float32x2_t *)v156.f32), vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32)), (int8x8_t)0x100000001);
    *(&v327 + v323) = v156.i32[0];
    v158 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(*(int32x2_t *)v156.f32, 0), 0x1FuLL)), (int8x16_t)v155[3], (int8x16_t)v155[4]);
    v45 = vsubq_f32(v153, v158);
    v159 = v319;
    v160 = vmulq_f32(v319, v45);
    v160.i64[0] = vpaddq_f32(v160, v160).u64[0];
    v161 = vpadd_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v160.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v161, v146)).u8[0] & 1) == 0)
    {
      if (v11)
      {
        *a5 = v154;
        if ((_DWORD)v154)
        {
          v261 = &v327;
          v262 = &v329;
          do
          {
            v263 = *v262++;
            *v11++ = v263;
            v264 = *v261++;
            *v10++ = v264;
            --v154;
          }
          while (v154);
        }
      }
      return 0;
    }
    v162 = v320;
    if (v161.f32[0] > (float)(0.99977 * v320.f32[0]))
    {
      v324 = v321;
      if (v11)
      {
        *a5 = v154;
        if ((_DWORD)v154)
        {
          v265 = &v327;
          v266 = &v329;
          v267 = v154;
          do
          {
            v268 = *v266++;
            *v11++ = v268;
            v269 = *v265++;
            *v10++ = v269;
            --v267;
          }
          while (v267);
          goto LABEL_119;
        }
        v270 = a6;
        *(float32x4_t *)(a6 + 32) = v319;
        v271 = 0uLL;
        v272 = 0uLL;
      }
      else
      {
LABEL_119:
        v270 = a6;
        *(float32x4_t *)(a6 + 32) = v319;
        if ((_DWORD)v154 == 3)
        {
          v325 = 0;
          v326 = 0;
          physx::Gu::barycentricCoordinates(&v324, &v337, &v338, (float32x4_t *)v339, &v326, &v325);
          v159 = v319;
          v162 = v320;
          v280 = vmulq_n_f32(vsubq_f32(v335, v334), v326.f32[0]);
          v280.i32[3] = 0;
          v281 = vmulq_n_f32(vsubq_f32(v336, v334), v325.f32[0]);
          v281.i32[3] = 0;
          v282 = vaddq_f32(v280, v281);
          v283 = vmulq_n_f32(vsubq_f32(v332, v331), v326.f32[0]);
          v283.i32[3] = 0;
          v271 = vaddq_f32(v334, v282);
          v284 = vmulq_n_f32(vsubq_f32(v333, v331), v325.f32[0]);
          v284.i32[3] = 0;
          v272 = vaddq_f32(v331, vaddq_f32(v283, v284));
        }
        else if ((_DWORD)v154 == 2)
        {
          v285 = vsubq_f32(v337, v321);
          v286 = vsubq_f32(vsubq_f32(v338, v321), v285);
          v287 = vmulq_f32(v286, v286);
          v287.i64[0] = vpaddq_f32(v287, v287).u64[0];
          v288 = vpadd_f32(*(float32x2_t *)v287.f32, *(float32x2_t *)v287.f32);
          v289 = vrecpe_f32(v288);
          v290 = 4;
          do
          {
            v289 = vmul_f32(v289, vrecps_f32(v288, v289));
            --v290;
          }
          while (v290);
          v291 = vnegq_f32(v285);
          v291.i32[3] = 0;
          v292 = vmulq_f32(v291, v286);
          v292.i64[0] = vpaddq_f32(v292, v292).u64[0];
          v291.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v288), (int8x8_t)v289, 0), vpadd_f32(*(float32x2_t *)v292.f32, *(float32x2_t *)v292.f32)).u32[0];
          v271 = vmlaq_n_f32(v334, vsubq_f32(v335, v334), v291.f32[0]);
          v271.i64[1] = vextq_s8((int8x16_t)v271, (int8x16_t)v271, 8uLL).u32[0];
          v272 = vmlaq_n_f32(v331, vsubq_f32(v332, v331), v291.f32[0]);
          v272.i64[1] = vextq_s8((int8x16_t)v272, (int8x16_t)v272, 8uLL).u32[0];
        }
        else
        {
          v271 = 0uLL;
          v272 = 0uLL;
          if ((_DWORD)v154 == 1)
          {
            v271 = v334;
            v272 = v331;
          }
        }
      }
      v293 = (int8x16_t)vmlsq_lane_f32(v271, v159, v315, 0);
      v293.i64[1] = vextq_s8(v293, v293, 8uLL).u32[0];
      v294 = (int8x16_t)vmlaq_n_f32(v272, v159, v316);
      v294.i64[1] = vextq_s8(v294, v294, 8uLL).u32[0];
      *(int8x16_t *)v270 = v293;
      *(int8x16_t *)(v270 + 16) = v294;
      *(float32x2_t *)(v270 + 64) = vsub_f32(v162, v317);
      return 2;
    }
    *(&v334 + v154) = v153;
    *(&v331 + v154) = v158;
    v323 = v154 + 1;
    *(&v337 + v154) = v45;
    switch((_DWORD)v154)
    {
      case 3:
        physx::Gu::closestPtPointTetrahedron(&v337, &v334, &v331, &v329, &v327, (int *)&v323);
        v162 = v320;
        v64 = v321;
        break;
      case 2:
        v45 = v337;
        v171 = vsubq_f32(v338, v337);
        v172 = vsubq_f32((float32x4_t)v339[0], v337);
        v174 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v171.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v172, (int8x16_t)v172, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v171, (int8x16_t)v171, 4uLL), *(float32x2_t *)v172.f32);
        *(int8x8_t *)v173.f32 = vext_s8(v174, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v171, (int8x16_t)v171, 8uLL), *(float32x2_t *)v172.f32), *(float32x2_t *)v171.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v172, (int8x16_t)v172, 8uLL)), 4uLL);
        v174.i32[1] = 0;
        v323 = 3;
        v175 = vpadd_f32(vmul_f32(*(float32x2_t *)v173.f32, *(float32x2_t *)v173.f32), vmul_f32((float32x2_t)v174.u32[0], (float32x2_t)v174.u32[0]));
        v176 = vpadd_f32(v175, v175);
        if (v176.f32[0] <= 0.00000011921)
        {
          v323 = 2;
          v213 = vmulq_f32(v171, v171);
          v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
          v214 = vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v214), 0), *(int8x8_t *)v337.f32).u32[0] == -1)
          {
LABEL_81:
            v323 = 1;
            break;
          }
          v215 = vnegq_f32(v337);
          v215.i32[3] = 0;
          v216 = vmulq_f32(v215, v171);
          v216.i64[0] = vpaddq_f32(v216, v216).u64[0];
          v217 = vpadd_f32(*(float32x2_t *)v216.f32, *(float32x2_t *)v216.f32);
          v218 = vrecpe_f32(v214);
          v219 = 4;
          do
          {
            v218 = vmul_f32(v218, vrecps_f32(v214, v218));
            --v219;
          }
          while (v219);
          v45 = vmlaq_n_f32(v337, v171, vmax_f32(vmin_f32(vmul_f32(v217, v218), _D11), 0).f32[0]);
          goto LABEL_80;
        }
        if (v176.f32[0] == 0.0)
        {
          v45 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v173.u32[2] = v174;
          v177 = (float32x2_t)vextq_s8((int8x16_t)v338, (int8x16_t)v338, 8uLL).u64[0];
          v178 = (float32x2_t)vextq_s8(v339[0], v339[0], 8uLL).u64[0];
          v179 = (float32x2_t)vextq_s8(v339[0], v339[0], 4uLL).u64[0];
          v180 = (float32x2_t)vextq_s8((int8x16_t)v338, (int8x16_t)v338, 4uLL).u64[0];
          v181 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v338.f32, v179), v180, *(float32x2_t *)v339[0].i8);
          *(int8x8_t *)v182.f32 = vext_s8(v181, (int8x8_t)vmls_f32(vmul_f32(v177, *(float32x2_t *)v339[0].i8), *(float32x2_t *)v338.f32, v178), 4uLL);
          v182.i64[1] = v181.u32[0];
          v183 = (float32x2_t)vextq_s8((int8x16_t)v337, (int8x16_t)v337, 8uLL).u64[0];
          v184 = (float32x2_t)vextq_s8((int8x16_t)v337, (int8x16_t)v337, 4uLL).u64[0];
          v185 = (int8x8_t)vmls_f32(vmul_f32(v184, *(float32x2_t *)v339[0].i8), v179, *(float32x2_t *)v337.f32);
          *(int8x8_t *)v186.f32 = vext_s8(v185, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v337.f32, v178), *(float32x2_t *)v339[0].i8, v183), 4uLL);
          v186.i64[1] = v185.u32[0];
          v187 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v337.f32, v180), v184, *(float32x2_t *)v338.f32);
          *(int8x8_t *)v188.f32 = vext_s8(v187, (int8x8_t)vmls_f32(vmul_f32(v183, *(float32x2_t *)v338.f32), *(float32x2_t *)v337.f32, v177), 4uLL);
          v188.i64[1] = v187.u32[0];
          v189 = vmulq_f32(v182, v173);
          v189.i64[0] = vpaddq_f32(v189, v189).u64[0];
          v190 = vpadd_f32(*(float32x2_t *)v189.f32, *(float32x2_t *)v189.f32);
          v191 = vmulq_f32(v186, v173);
          v191.i64[0] = vpaddq_f32(v191, v191).u64[0];
          v192 = vpadd_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32);
          v193 = vmulq_f32(v188, v173);
          v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
          v194 = vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v192), (int8x8_t)vcgez_f32(v190)), (int8x8_t)vcgez_f32(v194)), 0), *(int8x8_t *)v337.f32).u32[0] != -1)
          {
            v195 = vnegq_f32(v337);
            v195.i32[3] = 0;
            v196 = vnegq_f32(v338);
            v196.i32[3] = 0;
            v197 = vmulq_f32(v195, v171);
            v197.i64[0] = vpaddq_f32(v197, v197).u64[0];
            v198 = vpadd_f32(*(float32x2_t *)v197.f32, *(float32x2_t *)v197.f32);
            v199 = vmulq_f32(v171, v196);
            v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
            v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v198), (int8x8_t)vclez_f32(v200)), (int8x8_t)vclez_f32(v194)), 0), *(int8x8_t *)v337.f32).u32[0] == -1)
            {
              v225 = vsub_f32(v198, v200);
              v226 = vrecpe_f32(v225);
              v227 = 4;
              do
              {
                v226 = vmul_f32(v226, vrecps_f32(v225, v226));
                --v227;
              }
              while (v227);
              v212 = 0;
              v45 = vmlaq_n_f32(v337, v171, vmul_f32(v198, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v225), (float32x2_t)0x3400000034000000), (int8x8_t)v226, 0)).f32[0]);
              v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
              v228 = 2;
              v211 = 1;
            }
            else
            {
              v201 = vnegq_f32((float32x4_t)v339[0]);
              v201.i32[3] = 0;
              v202 = vmulq_f32(v196, v172);
              v202.i64[0] = vpaddq_f32(v202, v202).u64[0];
              v203 = vpadd_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v202.f32);
              v204 = vmulq_f32(v171, v201);
              v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
              v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
              v206 = vmulq_f32(v172, v201);
              v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
              v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v203, v200), (int8x8_t)vcge_f32(v205, v207)), (int8x8_t)vclez_f32(v190)), 0), *(int8x8_t *)v337.f32).u32[0] == -1)
              {
                v229 = vsub_f32(v203, v200);
                v230 = vadd_f32(v229, vsub_f32(v205, v207));
                v231 = vrecpe_f32(v230);
                v232 = 4;
                do
                {
                  v231 = vmul_f32(v231, vrecps_f32(v230, v231));
                  --v232;
                }
                while (v232);
                v233 = (int8x16_t)vmlaq_n_f32(v338, vsubq_f32((float32x4_t)v339[0], v338), vmul_f32(v229, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v230), (float32x2_t)0x3400000034000000), (int8x8_t)v231, 0)).f32[0]);
                v233.i64[1] = vextq_s8(v233, v233, 8uLL).u32[0];
                v211 = 2;
                v45 = (float32x4_t)v233;
                v212 = 1;
              }
              else
              {
                v208 = vmulq_f32(v195, v172);
                v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
                v209 = vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v209), (int8x8_t)vclez_f32(v207)), (int8x8_t)vclez_f32(v192)), 0), *(int8x8_t *)v337.f32).u32[0] != -1)
                {
                  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v209), (int8x8_t)vclez_f32(v198)), 0), *(int8x8_t *)v337.f32).u32[0] == -1)
                  {
                    v212 = 0;
                    v211 = 1;
                  }
                  else
                  {
                    *(int16x4_t *)v45.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v200, v203), (int8x8_t)vcgez_f32(v200)), 0);
                    *(int8x8_t *)v45.f32 = vuzp1_s8(*(int8x8_t *)v45.f32, *(int8x8_t *)v45.f32);
                    v210 = v45.i32[0];
                    v45 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v45, v313), 0), (int8x16_t)v338, v339[0]);
                    v211 = 1;
                    if (v210 == -1)
                      v212 = 1;
                    else
                      v212 = 2;
                  }
                  v228 = 1;
                  goto LABEL_98;
                }
                v234 = vsub_f32(v209, v207);
                v235 = vrecpe_f32(v234);
                v236 = 4;
                do
                {
                  v235 = vmul_f32(v235, vrecps_f32(v234, v235));
                  --v236;
                }
                while (v236);
                v212 = 0;
                v45 = vmlaq_n_f32(v337, v172, vmul_f32(v209, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v234), (float32x2_t)0x3400000034000000), (int8x8_t)v235, 0)).f32[0]);
                v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
                v211 = 2;
              }
              v228 = 2;
            }
LABEL_98:
            v237 = *(&v337 + v212);
            v238 = *(&v337 + v211);
            v239 = *(&v334 + v212);
            v240 = *(&v334 + v211);
            v241 = *(&v331 + v212);
            v242 = *(&v331 + v211);
            v243 = *(&v329 + v212);
            v244 = *(&v329 + v211);
            v245 = *(&v327 + v212);
            v246 = *(&v327 + v211);
            v337 = v237;
            v338 = v238;
            v334 = v239;
            v335 = v240;
            v331 = v241;
            v332 = v242;
            v329 = v243;
            v330 = v244;
            v327 = v245;
            v328 = v246;
            v323 = v228;
            break;
          }
          v220 = (int8x16_t)vmulq_f32(v337, v173);
          v221 = (float32x2_t)vextq_s8(v220, v220, 8uLL).u64[0];
          v222 = vrecpe_f32(v176);
          v223 = 4;
          do
          {
            v222 = vmul_f32(v222, vrecps_f32(v176, v222));
            --v223;
          }
          while (v223);
          v224 = vpadd_f32(*(float32x2_t *)v220.i8, v221);
          v45 = vmulq_n_f32(v173, vmul_f32(v222, vpadd_f32(v224, v224)).f32[0]);
          v45.i32[3] = 0;
        }
        break;
      case 1:
        v45 = v337;
        v163 = vsubq_f32(v338, v337);
        v164 = vmulq_f32(v163, v163);
        v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
        v165 = vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v165), 0), *(int8x8_t *)v337.f32).u32[0] == -1)goto LABEL_81;
        v166 = vnegq_f32(v337);
        v166.i32[3] = 0;
        v167 = vmulq_f32(v166, v163);
        v167.i64[0] = vpaddq_f32(v167, v167).u64[0];
        v168 = vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32);
        v169 = vrecpe_f32(v165);
        v170 = 4;
        do
        {
          v169 = vmul_f32(v169, vrecps_f32(v165, v169));
          --v170;
        }
        while (v170);
        v45 = vmlaq_n_f32(v337, v163, vmax_f32(vmin_f32(vmul_f32(v168, v169), _D11), 0).f32[0]);
LABEL_80:
        v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
        break;
    }
    v247 = vmulq_f32(v45, v45);
    v247.i64[0] = vpaddq_f32(v247, v247).u64[0];
    v248 = vpadd_f32(*(float32x2_t *)v247.f32, *(float32x2_t *)v247.f32);
    v249 = vrsqrte_f32(v248);
    v250 = 4;
    do
    {
      v249 = vmul_f32(v249, vrsqrts_f32(vmul_f32(v249, v249), v248));
      --v250;
    }
    while (v250);
    v62 = vmul_f32(v248, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v248), 0), (int8x8_t)_D11, (int8x8_t)v249));
    v251 = vrecpe_f32(v62);
    v252 = 4;
    do
    {
      v251 = vmul_f32(v251, vrecps_f32(v62, v251));
      --v252;
    }
    while (v252);
    v253 = vmulq_n_f32(v45, v251.f32[0]);
    v253.i32[3] = 0;
    v319 = v253;
    *(int32x2_t *)v253.f32 = vcgt_f32(v162, v62);
    v148 = vdupq_lane_s32(*(int32x2_t *)v253.f32, 0);
    v63 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v62, v23), *(int8x8_t *)v253.f32), 0);
    v147 = v162;
  }
  v254 = (int8x8_t)vmovn_s32(vceqzq_s32(v148));
  v255 = v323;
  if (vuzp1_s8(v254, v254).u32[0] == -1)
  {
    if (v11)
    {
      v273 = v323 - 1;
      *a5 = v323 - 1;
      if ((_DWORD)v255 == 1)
      {
LABEL_130:
        v278 = v334;
        v279 = v331;
        goto LABEL_141;
      }
      v274 = &v327;
      v275 = &v329;
      do
      {
        v276 = *v275++;
        *v11++ = v276;
        v277 = *v274++;
        *v10++ = v277;
        --v273;
      }
      while (v273);
    }
    v324 = v64;
    if ((_DWORD)v255 == 3)
    {
      v325 = 0;
      v326 = 0;
      v322 = v64;
      physx::Gu::barycentricCoordinates(&v324, &v337, &v338, (float32x4_t *)v339, &v326, &v325);
      v295 = vmulq_n_f32(vsubq_f32(v335, v334), v326.f32[0]);
      v295.i32[3] = 0;
      v296 = vmulq_n_f32(vsubq_f32(v336, v334), v325.f32[0]);
      v296.i32[3] = 0;
      v297 = vaddq_f32(v295, v296);
      v298 = vmulq_n_f32(vsubq_f32(v332, v331), v326.f32[0]);
      v298.i32[3] = 0;
      v278 = vaddq_f32(v334, v297);
      v299 = vmulq_n_f32(vsubq_f32(v333, v331), v325.f32[0]);
      v64 = v322;
      v299.i32[3] = 0;
      v279 = vaddq_f32(v331, vaddq_f32(v298, v299));
    }
    else
    {
      if ((_DWORD)v255 == 2)
      {
        v300 = vsubq_f32(v337, v64);
        v301 = vsubq_f32(vsubq_f32(v338, v64), v300);
        v302 = vmulq_f32(v301, v301);
        v302.i64[0] = vpaddq_f32(v302, v302).u64[0];
        v303 = vpadd_f32(*(float32x2_t *)v302.f32, *(float32x2_t *)v302.f32);
        v304 = vrecpe_f32(v303);
        v305 = 4;
        do
        {
          v304 = vmul_f32(v304, vrecps_f32(v303, v304));
          --v305;
        }
        while (v305);
        v306 = vnegq_f32(v300);
        v306.i32[3] = 0;
        v307 = vmulq_f32(v306, v301);
        v307.i64[0] = vpaddq_f32(v307, v307).u64[0];
        v306.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v303), (int8x8_t)v304, 0), vpadd_f32(*(float32x2_t *)v307.f32, *(float32x2_t *)v307.f32)).u32[0];
        v278 = vmlaq_n_f32(v334, vsubq_f32(v335, v334), v306.f32[0]);
        v278.i64[1] = vextq_s8((int8x16_t)v278, (int8x16_t)v278, 8uLL).u32[0];
        v279 = vmlaq_n_f32(v331, vsubq_f32(v332, v331), v306.f32[0]);
        v279.i64[1] = vextq_s8((int8x16_t)v279, (int8x16_t)v279, 8uLL).u32[0];
        goto LABEL_141;
      }
      v278 = 0uLL;
      v279 = 0uLL;
      if ((_DWORD)v255 == 1)
        goto LABEL_130;
    }
LABEL_141:
    v308 = vrecpe_f32(v147);
    v309 = 4;
    do
    {
      v308 = vmul_f32(v308, vrecps_f32(v147, v308));
      --v309;
    }
    while (v309);
    v310 = vmulq_n_f32(v64, v308.f32[0]);
    v310.i32[3] = 0;
    *(float32x4_t *)(a6 + 32) = v310;
    *(float32x4_t *)(a6 + 48) = v319;
    v311 = (int8x16_t)vmlsq_lane_f32(v278, v310, v315, 0);
    v311.i64[1] = vextq_s8(v311, v311, 8uLL).u32[0];
    v312 = (int8x16_t)vmlaq_n_f32(v279, v310, v316);
    v312.i64[1] = vextq_s8(v312, v312, 8uLL).u32[0];
    *(int8x16_t *)a6 = v311;
    *(int8x16_t *)(a6 + 16) = v312;
    *(float32x2_t *)(a6 + 64) = vsub_f32(v147, v317);
    if ((vcge_f32(v317, v147).u8[0] & 1) != 0)
      return 2;
    else
      return 4;
  }
  if (v11)
  {
    *a5 = v323;
    if ((_DWORD)v255)
    {
      v256 = &v327;
      v257 = &v329;
      do
      {
        v258 = *v257++;
        *v11++ = v258;
        v259 = *v256++;
        *v10++ = v259;
        --v255;
      }
      while (v255);
    }
  }
  return 5;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(float32x4_t *a1, uint64_t a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, uint64_t a6, float32x4_t a7, float32x2_t a8, double a9, int8x8_t a10)
{
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v15;
  const float *v16;
  float32x2_t v17;
  float32x4_t *v18;
  const float *v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  uint64_t v28;
  uint64_t v34;
  float32x4_t *v35;
  float32x4_t v36;
  int8x16_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x2_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x2_t v52;
  float32x2_t v53;
  int v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x2_t v57;
  float32x2_t v58;
  int v59;
  float32x2_t v60;
  float32x2_t v61;
  int v62;
  float32x4_t v63;
  float32x2_t v64;
  int32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x8_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  int8x8_t v77;
  float32x4_t v78;
  float32x2_t v79;
  float32x2_t v80;
  int8x8_t v81;
  float32x4_t v82;
  int8x8_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x2_t v86;
  float32x4_t v87;
  float32x2_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x2_t v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x2_t v99;
  float32x4_t v100;
  float32x2_t v101;
  float32x4_t v102;
  float32x2_t v103;
  float32x4_t v104;
  int32x4_t v105;
  __int32 v106;
  uint64_t v107;
  uint64_t v108;
  float32x4_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x2_t v113;
  float32x2_t v114;
  int v115;
  int8x16_t v116;
  float32x2_t v117;
  float32x2_t v118;
  int v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x2_t v122;
  int v123;
  unsigned int v124;
  float32x2_t v125;
  float32x2_t v126;
  float32x2_t v127;
  int v128;
  int8x16_t v129;
  float32x2_t v130;
  float32x2_t v131;
  int v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int v139;
  int v140;
  int v141;
  int v142;
  float32x4_t v143;
  float32x2_t v144;
  float32x2_t v145;
  int v146;
  float32x2_t v147;
  int v148;
  float32x4_t v149;
  float32x2_t v150;
  __int128 v151;
  int32x4_t v152;
  float32x2_t i;
  float32x4_t v154;
  int32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  uint64_t v159;
  float32x4_t *v160;
  int8x16_t v161;
  float32x4_t v162;
  int32x4_t v163;
  float32x4_t v164;
  int8x16_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x2_t v168;
  float32x2_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x2_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x2_t v175;
  float32x2_t v176;
  int v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  int8x8_t v181;
  float32x2_t v182;
  float32x2_t v183;
  float32x2_t v184;
  float32x2_t v185;
  float32x2_t v186;
  float32x2_t v187;
  int8x8_t v188;
  float32x4_t v189;
  float32x2_t v190;
  float32x2_t v191;
  int8x8_t v192;
  float32x4_t v193;
  int8x8_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x2_t v197;
  float32x4_t v198;
  float32x2_t v199;
  float32x4_t v200;
  float32x2_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x2_t v205;
  float32x4_t v206;
  float32x2_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x2_t v210;
  float32x4_t v211;
  float32x2_t v212;
  float32x4_t v213;
  float32x2_t v214;
  float32x4_t v215;
  float32x2_t v216;
  __int32 v217;
  uint64_t v218;
  uint64_t v219;
  float32x4_t v220;
  float32x2_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x2_t v224;
  float32x2_t v225;
  int v226;
  int8x16_t v227;
  float32x2_t v228;
  float32x2_t v229;
  int v230;
  float32x2_t v231;
  float32x2_t v232;
  float32x2_t v233;
  int v234;
  unsigned int v235;
  float32x2_t v236;
  float32x2_t v237;
  float32x2_t v238;
  int v239;
  int8x16_t v240;
  float32x2_t v241;
  float32x2_t v242;
  int v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  int v250;
  int v251;
  int v252;
  int v253;
  float32x4_t v254;
  float32x2_t v255;
  float32x2_t v256;
  int v257;
  float32x2_t v258;
  int v259;
  float32x4_t v260;
  int8x8_t v261;
  uint64_t v262;
  int *v263;
  int *v264;
  int v265;
  int v266;
  int *v268;
  int *v269;
  int v270;
  int v271;
  int *v272;
  int *v273;
  uint64_t v274;
  int v275;
  int v276;
  uint64_t v277;
  float32x4_t v278;
  float32x4_t v279;
  uint64_t v280;
  int *v281;
  int *v282;
  int v283;
  int v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x2_t v295;
  float32x2_t v296;
  int v297;
  float32x4_t v298;
  float32x4_t v299;
  int8x16_t v300;
  int8x16_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x2_t v310;
  float32x2_t v311;
  int v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x2_t v315;
  int v316;
  float32x4_t v317;
  int8x16_t v318;
  int8x16_t v319;
  int32x4_t v320;
  float32x2_t v322;
  float v323;
  float32x4_t v325;
  float32x2_t v326;
  float32x4_t v327;
  float32x4_t v328;
  unsigned int v329;
  float32x4_t v330;
  float32x2_t v331;
  float32x2_t v332;
  int v333;
  int v334;
  int v335;
  int v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  int8x16_t v345[2];
  uint64_t v346;

  v10 = a4;
  v11 = a3;
  v346 = *MEMORY[0x24BDAC8D0];
  v15 = a1->i64[1];
  v16 = (const float *)(v15 + 20);
  v17 = vld1_dup_f32(v16);
  v18 = *(float32x4_t **)(a2 + 8);
  v19 = &v18[1].f32[1];
  v20 = vld1_dup_f32(v19);
  v21 = vmin_f32(v17, v20);
  v22 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  v23 = vmul_f32(v21, v22);
  v21.i32[0] = *(_DWORD *)(v15 + 16);
  v22.i32[0] = v18[1].i32[0];
  a10.i32[0] = -*(char *)(v15 + 32);
  v24 = (int32x2_t)vand_s8(a10, (int8x8_t)v21);
  v25 = (float32x2_t)vdup_lane_s32(v24, 0);
  v24.i32[0] = -v18[2].i8[0];
  v26 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v24, (int8x8_t)v22), 0);
  v322 = v25;
  v323 = v26.f32[0];
  v27 = vadd_f32(v25, v26);
  v329 = 0;
  v28 = *a5;
  __asm { FMOV            V11.2S, #1.0 }
  if (!*a5)
  {
    v55 = vmulq_f32(a7, a7);
    v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
    v46 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_2260E5F10);
    v56 = vmulq_f32(v46, v46);
    v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
    v57 = vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32);
    v58 = vrsqrte_f32(v57);
    v59 = 4;
    do
    {
      v58 = vmul_f32(v58, vrsqrts_f32(vmul_f32(v58, v58), v57));
      --v59;
    }
    while (v59);
    v60 = vmul_f32(v57, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v57), 0), (int8x8_t)_D11, (int8x8_t)v58));
    v61 = vrecpe_f32(v60);
    v62 = 4;
    do
    {
      v61 = vmul_f32(v61, vrecps_f32(v60, v61));
      --v62;
    }
    while (v62);
    v63 = vmulq_n_f32(v46, v61.f32[0]);
    v63.i32[3] = 0;
    v325 = v63;
    v64 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v65.i64[0] = -1;
    v65.i64[1] = -1;
    v66 = 0uLL;
    goto LABEL_54;
  }
  v34 = 0;
  v35 = (float32x4_t *)a1[1].i64[0];
  v36 = v18[3];
  v37 = (int8x16_t)vnegq_f32(v36);
  v37.i32[3] = 0;
  do
  {
    v38 = a3[v34];
    *(&v335 + v34) = v38;
    v39 = a4[v34];
    *(&v333 + v34) = v39;
    v40 = *(float32x4_t *)(v15 + 16 * v38 + 48);
    v41 = vmulq_n_f32(*v35, v40.f32[0]);
    v41.i32[3] = 0;
    v42 = vmulq_lane_f32(v35[1], *(float32x2_t *)v40.f32, 1);
    v42.i32[3] = 0;
    v43 = vmulq_laneq_f32(v35[2], v40, 2);
    v43.i32[3] = 0;
    v44 = vaddq_f32(v35[3], vaddq_f32(vaddq_f32(v41, v42), v43));
    v45 = (float32x4_t)vbslq_s8(physx::boxVertexTable[v39], (int8x16_t)v36, v37);
    v46 = vsubq_f32(v44, v45);
    *(&v340 + v34) = v44;
    *(&v337 + v34) = v45;
    *(&v343 + v34++) = v46;
  }
  while (v28 != v34);
  v329 = v28;
  switch((_DWORD)v34)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v343, &v340, &v337, &v335, &v333, (int *)&v329);
      goto LABEL_49;
    case 3:
      v329 = 3;
      v46 = v343;
      v67 = vsubq_f32(v344, v343);
      v68 = vsubq_f32((float32x4_t)v345[0], v343);
      v70 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v67.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 4uLL), *(float32x2_t *)v68.f32);
      *(int8x8_t *)v69.f32 = vext_s8(v70, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL), *(float32x2_t *)v68.f32), *(float32x2_t *)v67.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL)), 4uLL);
      v70.i32[1] = 0;
      v71 = vpadd_f32(vmul_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), vmul_f32((float32x2_t)v70.u32[0], (float32x2_t)v70.u32[0]));
      v72 = vpadd_f32(v71, v71);
      if (v72.f32[0] > 0.00000011921)
      {
        if (v72.f32[0] == 0.0)
        {
          v46 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v69.u32[2] = v70;
          v73 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
          v74 = (float32x2_t)vextq_s8(v345[0], v345[0], 8uLL).u64[0];
          v75 = (float32x2_t)vextq_s8(v345[0], v345[0], 4uLL).u64[0];
          v76 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 4uLL).u64[0];
          v77 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v75), v76, *(float32x2_t *)v345[0].i8);
          *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(v73, *(float32x2_t *)v345[0].i8), *(float32x2_t *)v344.f32, v74), 4uLL);
          v78.i64[1] = v77.u32[0];
          v79 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 8uLL).u64[0];
          v80 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 4uLL).u64[0];
          v81 = (int8x8_t)vmls_f32(vmul_f32(v80, *(float32x2_t *)v345[0].i8), v75, *(float32x2_t *)v343.f32);
          *(int8x8_t *)v82.f32 = vext_s8(v81, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v74), *(float32x2_t *)v345[0].i8, v79), 4uLL);
          v82.i64[1] = v81.u32[0];
          v83 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v76), v80, *(float32x2_t *)v344.f32);
          *(int8x8_t *)v84.f32 = vext_s8(v83, (int8x8_t)vmls_f32(vmul_f32(v79, *(float32x2_t *)v344.f32), *(float32x2_t *)v343.f32, v73), 4uLL);
          v84.i64[1] = v83.u32[0];
          v85 = vmulq_f32(v78, v69);
          v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
          v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
          v87 = vmulq_f32(v82, v69);
          v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
          v88 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32);
          v89 = vmulq_f32(v84, v69);
          v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
          v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v88), (int8x8_t)vcgez_f32(v86)), (int8x8_t)vcgez_f32(v90)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
          {
            v116 = (int8x16_t)vmulq_f32(v343, v69);
            v117 = (float32x2_t)vextq_s8(v116, v116, 8uLL).u64[0];
            v118 = vrecpe_f32(v72);
            v119 = 4;
            do
            {
              v118 = vmul_f32(v118, vrecps_f32(v72, v118));
              --v119;
            }
            while (v119);
            v120 = vpadd_f32(*(float32x2_t *)v116.i8, v117);
            v46 = vmulq_n_f32(v69, vmul_f32(v118, vpadd_f32(v120, v120)).f32[0]);
            v46.i32[3] = 0;
          }
          else
          {
            v91 = vnegq_f32(v343);
            v91.i32[3] = 0;
            v92 = vnegq_f32(v344);
            v92.i32[3] = 0;
            v93 = vmulq_f32(v91, v67);
            v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
            v94 = vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32);
            v95 = vmulq_f32(v67, v92);
            v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
            v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v94), (int8x8_t)vclez_f32(v96)), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
            {
              v121 = vsub_f32(v94, v96);
              v122 = vrecpe_f32(v121);
              v123 = 4;
              do
              {
                v122 = vmul_f32(v122, vrecps_f32(v121, v122));
                --v123;
              }
              while (v123);
              v108 = 0;
              v46 = vmlaq_n_f32(v343, v67, vmul_f32(v94, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v121), (float32x2_t)0x3400000034000000), (int8x8_t)v122, 0)).f32[0]);
              v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
              v124 = 2;
              v107 = 1;
            }
            else
            {
              v97 = vnegq_f32((float32x4_t)v345[0]);
              v97.i32[3] = 0;
              v98 = vmulq_f32(v92, v68);
              v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
              v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
              v100 = vmulq_f32(v67, v97);
              v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
              v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
              v102 = vmulq_f32(v68, v97);
              v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
              v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v99, v96), (int8x8_t)vcge_f32(v101, v103)), (int8x8_t)vclez_f32(v86)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
              {
                v125 = vsub_f32(v99, v96);
                v126 = vadd_f32(v125, vsub_f32(v101, v103));
                v127 = vrecpe_f32(v126);
                v128 = 4;
                do
                {
                  v127 = vmul_f32(v127, vrecps_f32(v126, v127));
                  --v128;
                }
                while (v128);
                v129 = (int8x16_t)vmlaq_n_f32(v344, vsubq_f32((float32x4_t)v345[0], v344), vmul_f32(v125, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v126), (float32x2_t)0x3400000034000000), (int8x8_t)v127, 0)).f32[0]);
                v129.i64[1] = vextq_s8(v129, v129, 8uLL).u32[0];
                v124 = 2;
                v108 = 1;
                v107 = 2;
                v46 = (float32x4_t)v129;
              }
              else
              {
                v104 = vmulq_f32(v91, v68);
                v105 = (int32x4_t)vpaddq_f32(v104, v104);
                *(float32x2_t *)v105.i8 = vpadd_f32(*(float32x2_t *)v105.i8, *(float32x2_t *)v105.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v105.i8), (int8x8_t)vclez_f32(v103)), (int8x8_t)vclez_f32(v88)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
                {
                  v130 = vsub_f32(*(float32x2_t *)v105.i8, v103);
                  v131 = vrecpe_f32(v130);
                  v132 = 4;
                  do
                  {
                    v131 = vmul_f32(v131, vrecps_f32(v130, v131));
                    --v132;
                  }
                  while (v132);
                  v108 = 0;
                  v46 = vmlaq_n_f32(v343, v68, vmul_f32(*(float32x2_t *)v105.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v130), (float32x2_t)0x3400000034000000), (int8x8_t)v131, 0)).f32[0]);
                  v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
                  v107 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v105.i8), (int8x8_t)vclez_f32(v94)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
                {
                  v108 = 0;
                  v107 = 1;
                }
                else
                {
                  *(int32x2_t *)v105.i8 = vcge_f32(v96, v99);
                  *(int16x4_t *)v46.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v105.i8, (int8x8_t)vcgez_f32(v96)), 0);
                  *(int8x8_t *)v46.f32 = vuzp1_s8(*(int8x8_t *)v46.f32, *(int8x8_t *)v46.f32);
                  v105.i32[0] = -1;
                  v106 = v46.i32[0];
                  v46 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v46, v105), 0), (int8x16_t)v344, v345[0]);
                  v107 = 1;
                  if (v106 == -1)
                    v108 = 1;
                  else
                    v108 = 2;
                }
                v124 = v107;
              }
            }
            v133 = *(&v343 + v108);
            v134 = *(&v343 + v107);
            v135 = *(&v340 + v108);
            v136 = *(&v340 + v107);
            v137 = *(&v337 + v108);
            v138 = *(&v337 + v107);
            v139 = *(&v335 + v108);
            v140 = *(&v335 + v107);
            v141 = *(&v333 + v108);
            v142 = *(&v333 + v107);
            v343 = v133;
            v344 = v134;
            v340 = v135;
            v341 = v136;
            v337 = v137;
            v338 = v138;
            v335 = v139;
            v336 = v140;
            v333 = v141;
            v334 = v142;
            v329 = v124;
          }
        }
        goto LABEL_49;
      }
      v329 = 2;
      v109 = vmulq_f32(v67, v67);
      v109.i64[0] = vpaddq_f32(v109, v109).u64[0];
      v110 = vpadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v109.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v110), 0), *(int8x8_t *)v343.f32).u32[0] != -1)
      {
        v111 = vnegq_f32(v343);
        v111.i32[3] = 0;
        v112 = vmulq_f32(v111, v67);
        v112.i64[0] = vpaddq_f32(v112, v112).u64[0];
        v113 = vpadd_f32(*(float32x2_t *)v112.f32, *(float32x2_t *)v112.f32);
        v114 = vrecpe_f32(v110);
        v115 = 4;
        do
        {
          v114 = vmul_f32(v114, vrecps_f32(v110, v114));
          --v115;
        }
        while (v115);
        v46 = vmlaq_n_f32(v343, v67, vmax_f32(vmin_f32(vmul_f32(v113, v114), _D11), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      v46 = v343;
      v47 = vsubq_f32(v344, v343);
      v48 = vmulq_f32(v47, v47);
      v48.i64[0] = vpaddq_f32(v48, v48).u64[0];
      v49 = vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v49), 0), *(int8x8_t *)v343.f32).u32[0] != -1)
      {
        v50 = vnegq_f32(v343);
        v50.i32[3] = 0;
        v51 = vmulq_f32(v50, v47);
        v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
        v52 = vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32);
        v53 = vrecpe_f32(v49);
        v54 = 4;
        do
        {
          v53 = vmul_f32(v53, vrecps_f32(v49, v53));
          --v54;
        }
        while (v54);
        v46 = vmlaq_n_f32(v343, v47, vmax_f32(vmin_f32(vmul_f32(v52, v53), _D11), 0).f32[0]);
LABEL_31:
        v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  v329 = 1;
LABEL_49:
  v143 = vmulq_f32(v46, v46);
  v143.i64[0] = vpaddq_f32(v143, v143).u64[0];
  v144 = vpadd_f32(*(float32x2_t *)v143.f32, *(float32x2_t *)v143.f32);
  v145 = vrsqrte_f32(v144);
  v146 = 4;
  do
  {
    v145 = vmul_f32(v145, vrsqrts_f32(vmul_f32(v145, v145), v144));
    --v146;
  }
  while (v146);
  v64 = vmul_f32(v144, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v144), 0), (int8x8_t)_D11, (int8x8_t)v145));
  v147 = vrecpe_f32(v64);
  v148 = 4;
  do
  {
    v147 = vmul_f32(v147, vrecps_f32(v64, v147));
    --v148;
  }
  while (v148);
  v149 = vmulq_n_f32(v46, v147.f32[0]);
  v149.i32[3] = 0;
  v325 = v149;
  v65 = vdupq_lane_s32(vcgt_f32(v64, v23), 0);
  v66 = v46;
LABEL_54:
  v150 = vadd_f32(v27, a8);
  v151 = xmmword_22611E0A0;
  LODWORD(v151) = -1;
  v320 = (int32x4_t)v151;
  v152.i64[0] = -1;
  v152.i64[1] = -1;
  for (i = v64; ; i = v169)
  {
    v154 = v46;
    v155.i64[0] = -1;
    v155.i64[1] = -1;
    *(int16x4_t *)v155.i8 = vmovn_s32(vceqq_s32(v65, v155));
    if (vuzp1_s8(*(int8x8_t *)v155.i8, *(int8x8_t *)v155.i8).u32[0] != -1)
      break;
    v326 = v64;
    v327 = v154;
    v156 = vnegq_f32(v154);
    v156.i32[3] = 0;
    v330 = v156;
    *(double *)v157.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(a1, (float32x2_t *)&v330, (unsigned __int32 *)&v335 + v329);
    v66 = v327;
    v158 = v157;
    v159 = v329;
    v160 = *(float32x4_t **)(a2 + 8);
    v161 = (int8x16_t)vcgtzq_f32(v327);
    v162 = v325;
    v163 = (int32x4_t)vandq_s8(v161, (int8x16_t)xmmword_22611E0A0);
    v163.i64[0] = vpaddq_s32(v163, v163).u64[0];
    *(&v333 + v329) = vpadd_s32(*(int32x2_t *)v163.i8, *(int32x2_t *)v163.i8).u8[0] & 7;
    v164 = v160[3];
    v165 = (int8x16_t)vnegq_f32(v164);
    v165.i32[3] = 0;
    v166 = (float32x4_t)vbslq_s8(v161, (int8x16_t)v164, v165);
    v46 = vsubq_f32(v158, v166);
    v167 = vmulq_f32(v325, v46);
    v167.i64[0] = vpaddq_f32(v167, v167).u64[0];
    v168 = vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v168, v150)).u8[0] & 1) == 0)
    {
      if (v11)
      {
        *a5 = v159;
        if ((_DWORD)v159)
        {
          v268 = &v333;
          v269 = &v335;
          do
          {
            v270 = *v269++;
            *v11++ = v270;
            v271 = *v268++;
            *v10++ = v271;
            --v159;
          }
          while (v159);
        }
      }
      return 0;
    }
    v169 = v326;
    if (v168.f32[0] > (float)(0.99977 * v326.f32[0]))
    {
      v330 = v327;
      if (v11)
      {
        *a5 = v159;
        if ((_DWORD)v159)
        {
          v272 = &v333;
          v273 = &v335;
          v274 = v159;
          do
          {
            v275 = *v273++;
            *v11++ = v275;
            v276 = *v272++;
            *v10++ = v276;
            --v274;
          }
          while (v274);
          goto LABEL_119;
        }
        v277 = a6;
        *(float32x4_t *)(a6 + 32) = v325;
        v278 = 0uLL;
        v279 = 0uLL;
      }
      else
      {
LABEL_119:
        v277 = a6;
        *(float32x4_t *)(a6 + 32) = v325;
        if ((_DWORD)v159 == 3)
        {
          v331 = 0;
          v332 = 0;
          physx::Gu::barycentricCoordinates(&v330, &v343, &v344, (float32x4_t *)v345, &v332, &v331);
          v162 = v325;
          v169 = v326;
          v287 = vmulq_n_f32(vsubq_f32(v341, v340), v332.f32[0]);
          v287.i32[3] = 0;
          v288 = vmulq_n_f32(vsubq_f32(v342, v340), v331.f32[0]);
          v288.i32[3] = 0;
          v289 = vaddq_f32(v287, v288);
          v290 = vmulq_n_f32(vsubq_f32(v338, v337), v332.f32[0]);
          v290.i32[3] = 0;
          v278 = vaddq_f32(v340, v289);
          v291 = vmulq_n_f32(vsubq_f32(v339, v337), v331.f32[0]);
          v291.i32[3] = 0;
          v279 = vaddq_f32(v337, vaddq_f32(v290, v291));
        }
        else if ((_DWORD)v159 == 2)
        {
          v292 = vsubq_f32(v343, v327);
          v293 = vsubq_f32(vsubq_f32(v344, v327), v292);
          v294 = vmulq_f32(v293, v293);
          v294.i64[0] = vpaddq_f32(v294, v294).u64[0];
          v295 = vpadd_f32(*(float32x2_t *)v294.f32, *(float32x2_t *)v294.f32);
          v296 = vrecpe_f32(v295);
          v297 = 4;
          do
          {
            v296 = vmul_f32(v296, vrecps_f32(v295, v296));
            --v297;
          }
          while (v297);
          v298 = vnegq_f32(v292);
          v298.i32[3] = 0;
          v299 = vmulq_f32(v298, v293);
          v299.i64[0] = vpaddq_f32(v299, v299).u64[0];
          v298.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v295), (int8x8_t)v296, 0), vpadd_f32(*(float32x2_t *)v299.f32, *(float32x2_t *)v299.f32)).u32[0];
          v278 = vmlaq_n_f32(v340, vsubq_f32(v341, v340), v298.f32[0]);
          v278.i64[1] = vextq_s8((int8x16_t)v278, (int8x16_t)v278, 8uLL).u32[0];
          v279 = vmlaq_n_f32(v337, vsubq_f32(v338, v337), v298.f32[0]);
          v279.i64[1] = vextq_s8((int8x16_t)v279, (int8x16_t)v279, 8uLL).u32[0];
        }
        else
        {
          v278 = 0uLL;
          v279 = 0uLL;
          if ((_DWORD)v159 == 1)
          {
            v278 = v340;
            v279 = v337;
          }
        }
      }
      v300 = (int8x16_t)vmlsq_lane_f32(v278, v162, v322, 0);
      v300.i64[1] = vextq_s8(v300, v300, 8uLL).u32[0];
      v301 = (int8x16_t)vmlaq_n_f32(v279, v162, v323);
      v301.i64[1] = vextq_s8(v301, v301, 8uLL).u32[0];
      *(int8x16_t *)v277 = v300;
      *(int8x16_t *)(v277 + 16) = v301;
      *(float32x2_t *)(v277 + 64) = vsub_f32(v169, v27);
      return 2;
    }
    *(&v340 + v159) = v158;
    *(&v337 + v159) = v166;
    v329 = v159 + 1;
    *(&v343 + v159) = v46;
    switch((_DWORD)v159)
    {
      case 3:
        physx::Gu::closestPtPointTetrahedron(&v343, &v340, &v337, &v335, &v333, (int *)&v329);
        v169 = v326;
        v66 = v327;
        break;
      case 2:
        v46 = v343;
        v178 = vsubq_f32(v344, v343);
        v179 = vsubq_f32((float32x4_t)v345[0], v343);
        v181 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v178.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v179, (int8x16_t)v179, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v178, (int8x16_t)v178, 4uLL), *(float32x2_t *)v179.f32);
        *(int8x8_t *)v180.f32 = vext_s8(v181, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v178, (int8x16_t)v178, 8uLL), *(float32x2_t *)v179.f32), *(float32x2_t *)v178.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL)), 4uLL);
        v181.i32[1] = 0;
        v329 = 3;
        v182 = vpadd_f32(vmul_f32(*(float32x2_t *)v180.f32, *(float32x2_t *)v180.f32), vmul_f32((float32x2_t)v181.u32[0], (float32x2_t)v181.u32[0]));
        v183 = vpadd_f32(v182, v182);
        if (v183.f32[0] <= 0.00000011921)
        {
          v329 = 2;
          v220 = vmulq_f32(v178, v178);
          v220.i64[0] = vpaddq_f32(v220, v220).u64[0];
          v221 = vpadd_f32(*(float32x2_t *)v220.f32, *(float32x2_t *)v220.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v221), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
          {
LABEL_81:
            v329 = 1;
            break;
          }
          v222 = vnegq_f32(v343);
          v222.i32[3] = 0;
          v223 = vmulq_f32(v222, v178);
          v223.i64[0] = vpaddq_f32(v223, v223).u64[0];
          v224 = vpadd_f32(*(float32x2_t *)v223.f32, *(float32x2_t *)v223.f32);
          v225 = vrecpe_f32(v221);
          v226 = 4;
          do
          {
            v225 = vmul_f32(v225, vrecps_f32(v221, v225));
            --v226;
          }
          while (v226);
          v46 = vmlaq_n_f32(v343, v178, vmax_f32(vmin_f32(vmul_f32(v224, v225), _D11), 0).f32[0]);
          goto LABEL_80;
        }
        if (v183.f32[0] == 0.0)
        {
          v46 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v180.u32[2] = v181;
          v184 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
          v185 = (float32x2_t)vextq_s8(v345[0], v345[0], 8uLL).u64[0];
          v186 = (float32x2_t)vextq_s8(v345[0], v345[0], 4uLL).u64[0];
          v187 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 4uLL).u64[0];
          v188 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v186), v187, *(float32x2_t *)v345[0].i8);
          *(int8x8_t *)v189.f32 = vext_s8(v188, (int8x8_t)vmls_f32(vmul_f32(v184, *(float32x2_t *)v345[0].i8), *(float32x2_t *)v344.f32, v185), 4uLL);
          v189.i64[1] = v188.u32[0];
          v190 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 8uLL).u64[0];
          v191 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 4uLL).u64[0];
          v192 = (int8x8_t)vmls_f32(vmul_f32(v191, *(float32x2_t *)v345[0].i8), v186, *(float32x2_t *)v343.f32);
          *(int8x8_t *)v193.f32 = vext_s8(v192, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v185), *(float32x2_t *)v345[0].i8, v190), 4uLL);
          v193.i64[1] = v192.u32[0];
          v194 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v187), v191, *(float32x2_t *)v344.f32);
          *(int8x8_t *)v195.f32 = vext_s8(v194, (int8x8_t)vmls_f32(vmul_f32(v190, *(float32x2_t *)v344.f32), *(float32x2_t *)v343.f32, v184), 4uLL);
          v195.i64[1] = v194.u32[0];
          v196 = vmulq_f32(v189, v180);
          v196.i64[0] = vpaddq_f32(v196, v196).u64[0];
          v197 = vpadd_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32);
          v198 = vmulq_f32(v193, v180);
          v198.i64[0] = vpaddq_f32(v198, v198).u64[0];
          v199 = vpadd_f32(*(float32x2_t *)v198.f32, *(float32x2_t *)v198.f32);
          v200 = vmulq_f32(v195, v180);
          v200.i64[0] = vpaddq_f32(v200, v200).u64[0];
          v201 = vpadd_f32(*(float32x2_t *)v200.f32, *(float32x2_t *)v200.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v199), (int8x8_t)vcgez_f32(v197)), (int8x8_t)vcgez_f32(v201)), 0), *(int8x8_t *)v343.f32).u32[0] != -1)
          {
            v202 = vnegq_f32(v343);
            v202.i32[3] = 0;
            v203 = vnegq_f32(v344);
            v203.i32[3] = 0;
            v204 = vmulq_f32(v202, v178);
            v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
            v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
            v206 = vmulq_f32(v178, v203);
            v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
            v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v205), (int8x8_t)vclez_f32(v207)), (int8x8_t)vclez_f32(v201)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
            {
              v232 = vsub_f32(v205, v207);
              v233 = vrecpe_f32(v232);
              v234 = 4;
              do
              {
                v233 = vmul_f32(v233, vrecps_f32(v232, v233));
                --v234;
              }
              while (v234);
              v219 = 0;
              v46 = vmlaq_n_f32(v343, v178, vmul_f32(v205, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v232), (float32x2_t)0x3400000034000000), (int8x8_t)v233, 0)).f32[0]);
              v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
              v235 = 2;
              v218 = 1;
            }
            else
            {
              v208 = vnegq_f32((float32x4_t)v345[0]);
              v208.i32[3] = 0;
              v209 = vmulq_f32(v203, v179);
              v209.i64[0] = vpaddq_f32(v209, v209).u64[0];
              v210 = vpadd_f32(*(float32x2_t *)v209.f32, *(float32x2_t *)v209.f32);
              v211 = vmulq_f32(v178, v208);
              v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
              v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
              v213 = vmulq_f32(v179, v208);
              v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
              v214 = vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v210, v207), (int8x8_t)vcge_f32(v212, v214)), (int8x8_t)vclez_f32(v197)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
              {
                v236 = vsub_f32(v210, v207);
                v237 = vadd_f32(v236, vsub_f32(v212, v214));
                v238 = vrecpe_f32(v237);
                v239 = 4;
                do
                {
                  v238 = vmul_f32(v238, vrecps_f32(v237, v238));
                  --v239;
                }
                while (v239);
                v240 = (int8x16_t)vmlaq_n_f32(v344, vsubq_f32((float32x4_t)v345[0], v344), vmul_f32(v236, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v237), (float32x2_t)0x3400000034000000), (int8x8_t)v238, 0)).f32[0]);
                v240.i64[1] = vextq_s8(v240, v240, 8uLL).u32[0];
                v218 = 2;
                v46 = (float32x4_t)v240;
                v219 = 1;
              }
              else
              {
                v215 = vmulq_f32(v202, v179);
                v215.i64[0] = vpaddq_f32(v215, v215).u64[0];
                v216 = vpadd_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v216), (int8x8_t)vclez_f32(v214)), (int8x8_t)vclez_f32(v199)), 0), *(int8x8_t *)v343.f32).u32[0] != -1)
                {
                  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v216), (int8x8_t)vclez_f32(v205)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
                  {
                    v219 = 0;
                    v218 = 1;
                  }
                  else
                  {
                    *(int16x4_t *)v46.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v207, v210), (int8x8_t)vcgez_f32(v207)), 0);
                    *(int8x8_t *)v46.f32 = vuzp1_s8(*(int8x8_t *)v46.f32, *(int8x8_t *)v46.f32);
                    v217 = v46.i32[0];
                    v46 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v46, v320), 0), (int8x16_t)v344, v345[0]);
                    v218 = 1;
                    if (v217 == -1)
                      v219 = 1;
                    else
                      v219 = 2;
                  }
                  v235 = 1;
                  goto LABEL_98;
                }
                v241 = vsub_f32(v216, v214);
                v242 = vrecpe_f32(v241);
                v243 = 4;
                do
                {
                  v242 = vmul_f32(v242, vrecps_f32(v241, v242));
                  --v243;
                }
                while (v243);
                v219 = 0;
                v46 = vmlaq_n_f32(v343, v179, vmul_f32(v216, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v241), (float32x2_t)0x3400000034000000), (int8x8_t)v242, 0)).f32[0]);
                v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
                v218 = 2;
              }
              v235 = 2;
            }
LABEL_98:
            v244 = *(&v343 + v219);
            v245 = *(&v343 + v218);
            v246 = *(&v340 + v219);
            v247 = *(&v340 + v218);
            v248 = *(&v337 + v219);
            v249 = *(&v337 + v218);
            v250 = *(&v335 + v219);
            v251 = *(&v335 + v218);
            v252 = *(&v333 + v219);
            v253 = *(&v333 + v218);
            v343 = v244;
            v344 = v245;
            v340 = v246;
            v341 = v247;
            v337 = v248;
            v338 = v249;
            v335 = v250;
            v336 = v251;
            v333 = v252;
            v334 = v253;
            v329 = v235;
            break;
          }
          v227 = (int8x16_t)vmulq_f32(v343, v180);
          v228 = (float32x2_t)vextq_s8(v227, v227, 8uLL).u64[0];
          v229 = vrecpe_f32(v183);
          v230 = 4;
          do
          {
            v229 = vmul_f32(v229, vrecps_f32(v183, v229));
            --v230;
          }
          while (v230);
          v231 = vpadd_f32(*(float32x2_t *)v227.i8, v228);
          v46 = vmulq_n_f32(v180, vmul_f32(v229, vpadd_f32(v231, v231)).f32[0]);
          v46.i32[3] = 0;
        }
        break;
      case 1:
        v46 = v343;
        v170 = vsubq_f32(v344, v343);
        v171 = vmulq_f32(v170, v170);
        v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
        v172 = vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v172), 0), *(int8x8_t *)v343.f32).u32[0] == -1)goto LABEL_81;
        v173 = vnegq_f32(v343);
        v173.i32[3] = 0;
        v174 = vmulq_f32(v173, v170);
        v174.i64[0] = vpaddq_f32(v174, v174).u64[0];
        v175 = vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32);
        v176 = vrecpe_f32(v172);
        v177 = 4;
        do
        {
          v176 = vmul_f32(v176, vrecps_f32(v172, v176));
          --v177;
        }
        while (v177);
        v46 = vmlaq_n_f32(v343, v170, vmax_f32(vmin_f32(vmul_f32(v175, v176), _D11), 0).f32[0]);
LABEL_80:
        v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
        break;
    }
    v254 = vmulq_f32(v46, v46);
    v254.i64[0] = vpaddq_f32(v254, v254).u64[0];
    v255 = vpadd_f32(*(float32x2_t *)v254.f32, *(float32x2_t *)v254.f32);
    v256 = vrsqrte_f32(v255);
    v257 = 4;
    do
    {
      v256 = vmul_f32(v256, vrsqrts_f32(vmul_f32(v256, v256), v255));
      --v257;
    }
    while (v257);
    v64 = vmul_f32(v255, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v255), 0), (int8x8_t)_D11, (int8x8_t)v256));
    v258 = vrecpe_f32(v64);
    v259 = 4;
    do
    {
      v258 = vmul_f32(v258, vrecps_f32(v64, v258));
      --v259;
    }
    while (v259);
    v260 = vmulq_n_f32(v46, v258.f32[0]);
    v260.i32[3] = 0;
    v325 = v260;
    *(int32x2_t *)v260.f32 = vcgt_f32(v169, v64);
    v152 = vdupq_lane_s32(*(int32x2_t *)v260.f32, 0);
    v65 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v64, v23), *(int8x8_t *)v260.f32), 0);
  }
  v261 = (int8x8_t)vmovn_s32(vceqzq_s32(v152));
  v262 = v329;
  if (vuzp1_s8(v261, v261).u32[0] == -1)
  {
    if (v11)
    {
      v280 = v329 - 1;
      *a5 = v329 - 1;
      if ((_DWORD)v262 == 1)
      {
LABEL_130:
        v285 = v340;
        v286 = v337;
        goto LABEL_141;
      }
      v281 = &v333;
      v282 = &v335;
      do
      {
        v283 = *v282++;
        *v11++ = v283;
        v284 = *v281++;
        *v10++ = v284;
        --v280;
      }
      while (v280);
    }
    v330 = v66;
    if ((_DWORD)v262 == 3)
    {
      v331 = 0;
      v332 = 0;
      v328 = v66;
      physx::Gu::barycentricCoordinates(&v330, &v343, &v344, (float32x4_t *)v345, &v332, &v331);
      v302 = vmulq_n_f32(vsubq_f32(v341, v340), v332.f32[0]);
      v302.i32[3] = 0;
      v303 = vmulq_n_f32(vsubq_f32(v342, v340), v331.f32[0]);
      v303.i32[3] = 0;
      v304 = vaddq_f32(v302, v303);
      v305 = vmulq_n_f32(vsubq_f32(v338, v337), v332.f32[0]);
      v305.i32[3] = 0;
      v285 = vaddq_f32(v340, v304);
      v306 = vmulq_n_f32(vsubq_f32(v339, v337), v331.f32[0]);
      v66 = v328;
      v306.i32[3] = 0;
      v286 = vaddq_f32(v337, vaddq_f32(v305, v306));
    }
    else
    {
      if ((_DWORD)v262 == 2)
      {
        v307 = vsubq_f32(v343, v66);
        v308 = vsubq_f32(vsubq_f32(v344, v66), v307);
        v309 = vmulq_f32(v308, v308);
        v309.i64[0] = vpaddq_f32(v309, v309).u64[0];
        v310 = vpadd_f32(*(float32x2_t *)v309.f32, *(float32x2_t *)v309.f32);
        v311 = vrecpe_f32(v310);
        v312 = 4;
        do
        {
          v311 = vmul_f32(v311, vrecps_f32(v310, v311));
          --v312;
        }
        while (v312);
        v313 = vnegq_f32(v307);
        v313.i32[3] = 0;
        v314 = vmulq_f32(v313, v308);
        v314.i64[0] = vpaddq_f32(v314, v314).u64[0];
        v313.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v310), (int8x8_t)v311, 0), vpadd_f32(*(float32x2_t *)v314.f32, *(float32x2_t *)v314.f32)).u32[0];
        v285 = vmlaq_n_f32(v340, vsubq_f32(v341, v340), v313.f32[0]);
        v285.i64[1] = vextq_s8((int8x16_t)v285, (int8x16_t)v285, 8uLL).u32[0];
        v286 = vmlaq_n_f32(v337, vsubq_f32(v338, v337), v313.f32[0]);
        v286.i64[1] = vextq_s8((int8x16_t)v286, (int8x16_t)v286, 8uLL).u32[0];
        goto LABEL_141;
      }
      v285 = 0uLL;
      v286 = 0uLL;
      if ((_DWORD)v262 == 1)
        goto LABEL_130;
    }
LABEL_141:
    v315 = vrecpe_f32(i);
    v316 = 4;
    do
    {
      v315 = vmul_f32(v315, vrecps_f32(i, v315));
      --v316;
    }
    while (v316);
    v317 = vmulq_n_f32(v66, v315.f32[0]);
    v317.i32[3] = 0;
    *(float32x4_t *)(a6 + 32) = v317;
    *(float32x4_t *)(a6 + 48) = v325;
    v318 = (int8x16_t)vmlsq_lane_f32(v285, v317, v322, 0);
    v318.i64[1] = vextq_s8(v318, v318, 8uLL).u32[0];
    v319 = (int8x16_t)vmlaq_n_f32(v286, v317, v323);
    v319.i64[1] = vextq_s8(v319, v319, 8uLL).u32[0];
    *(int8x16_t *)a6 = v318;
    *(int8x16_t *)(a6 + 16) = v319;
    *(float32x2_t *)(a6 + 64) = vsub_f32(i, v27);
    if ((vcge_f32(v27, i).u8[0] & 1) != 0)
      return 2;
    else
      return 4;
  }
  if (v11)
  {
    *a5 = v329;
    if ((_DWORD)v262)
    {
      v263 = &v333;
      v264 = &v335;
      do
      {
        v265 = *v264++;
        *v11++ = v265;
        v266 = *v263++;
        *v10++ = v266;
        --v262;
      }
      while (v262);
    }
  }
  return 5;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(float32x4_t *a1, uint64_t a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, uint64_t a6, float32x4_t a7, float32x2_t a8, double a9, float32x4_t a10)
{
  _BYTE *v10;
  uint64_t v15;
  const float *v16;
  float32x2_t v17;
  float32x4_t *v18;
  const float *v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  uint64_t v28;
  uint64_t v34;
  float32x4_t *v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  unsigned int v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x2_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x2_t v58;
  int v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x2_t v62;
  float32x2_t v63;
  int v64;
  float32x2_t v65;
  float32x2_t v66;
  int v67;
  float32x4_t v68;
  float32x2_t v69;
  int32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int8x8_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  int8x8_t v81;
  float32x4_t v82;
  float32x2_t v83;
  float32x2_t v84;
  int8x8_t v85;
  float32x4_t v86;
  int8x8_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x4_t v91;
  float32x2_t v92;
  float32x4_t v93;
  float32x2_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x2_t v98;
  float32x4_t v99;
  float32x2_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x2_t v103;
  float32x4_t v104;
  float32x2_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x4_t v108;
  int32x4_t v109;
  __int32 v110;
  uint64_t v111;
  uint64_t v112;
  float32x4_t v113;
  float32x2_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x2_t v117;
  float32x2_t v118;
  int v119;
  int8x16_t v120;
  float32x2_t v121;
  float32x2_t v122;
  int v123;
  float32x2_t v124;
  float32x2_t v125;
  float32x2_t v126;
  int v127;
  unsigned int v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x2_t v131;
  int v132;
  int8x16_t v133;
  float32x2_t v134;
  float32x2_t v135;
  int v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  int v142;
  int v143;
  int v144;
  int v145;
  float32x4_t v146;
  float32x2_t v147;
  float32x2_t v148;
  int v149;
  float32x2_t v150;
  int v151;
  float32x4_t v152;
  float32x2_t v153;
  int32x4_t v154;
  float32x2_t i;
  float32x4_t v156;
  int32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x2_t v164;
  float32x2_t v165;
  uint64_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x2_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x2_t v172;
  float32x2_t v173;
  int v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  int8x8_t v178;
  float32x2_t v179;
  float32x2_t v180;
  float32x2_t v181;
  float32x2_t v182;
  float32x2_t v183;
  float32x2_t v184;
  int8x8_t v185;
  float32x4_t v186;
  float32x2_t v187;
  float32x2_t v188;
  int8x8_t v189;
  float32x4_t v190;
  int8x8_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x2_t v194;
  float32x4_t v195;
  float32x2_t v196;
  float32x4_t v197;
  float32x2_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x2_t v202;
  float32x4_t v203;
  float32x2_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x2_t v207;
  float32x4_t v208;
  float32x2_t v209;
  float32x4_t v210;
  float32x2_t v211;
  float32x4_t v212;
  float32x2_t v213;
  __int32 v214;
  uint64_t v215;
  uint64_t v216;
  float32x4_t v217;
  float32x2_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x2_t v221;
  float32x2_t v222;
  int v223;
  int8x16_t v224;
  float32x2_t v225;
  float32x2_t v226;
  int v227;
  float32x2_t v228;
  float32x2_t v229;
  float32x2_t v230;
  int v231;
  unsigned int v232;
  float32x2_t v233;
  float32x2_t v234;
  float32x2_t v235;
  int v236;
  int8x16_t v237;
  float32x2_t v238;
  float32x2_t v239;
  int v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  int v247;
  int v248;
  int v249;
  int v250;
  float32x4_t v251;
  float32x2_t v252;
  float32x2_t v253;
  int v254;
  float32x2_t v255;
  int v256;
  float32x4_t v257;
  int8x8_t v258;
  uint64_t v259;
  int *v260;
  int *v261;
  int v262;
  int v263;
  uint64_t v265;
  int *v266;
  int *v267;
  int v268;
  int v269;
  int *v270;
  int *v271;
  uint64_t v272;
  int v273;
  int v274;
  uint64_t v275;
  float32x4_t v276;
  float32x4_t v277;
  uint64_t v278;
  int *v279;
  int *v280;
  int v281;
  int v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x2_t v293;
  float32x2_t v294;
  int v295;
  float32x4_t v296;
  float32x4_t v297;
  int8x16_t v298;
  int8x16_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x2_t v308;
  float32x2_t v309;
  int v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x2_t v313;
  int v314;
  float32x4_t v315;
  int8x16_t v316;
  int8x16_t v317;
  int32x4_t v318;
  float32x2_t v320;
  float v321;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x2_t v326;
  float32x4_t v327;
  float32x4_t v328;
  unsigned int v329;
  float32x4_t v330;
  float32x2_t v331;
  int v332;
  int v333;
  int v334;
  int v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344[2];
  uint64_t v345;

  v10 = a4;
  v345 = *MEMORY[0x24BDAC8D0];
  v15 = a1->i64[1];
  v16 = (const float *)(v15 + 20);
  v17 = vld1_dup_f32(v16);
  v18 = *(float32x4_t **)(a2 + 8);
  v19 = &v18[1].f32[1];
  v20 = vld1_dup_f32(v19);
  v21 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  v22 = vmin_f32(v17, v20);
  v23 = vmul_f32(v22, v21);
  v22.i32[0] = *(_DWORD *)(v15 + 16);
  v20.i32[0] = v18[1].i32[0];
  v21.i32[0] = -*(char *)(v15 + 32);
  v24 = (int32x2_t)vand_s8((int8x8_t)v21, (int8x8_t)v22);
  v25 = (float32x2_t)vdup_lane_s32(v24, 0);
  v24.i32[0] = -v18[2].i8[0];
  v26 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v24, (int8x8_t)v20), 0);
  v320 = v25;
  v321 = v26.f32[0];
  v27 = vadd_f32(v25, v26);
  v330 = 0uLL;
  v329 = 0;
  v28 = *a5;
  __asm { FMOV            V11.2S, #1.0 }
  if (!*a5)
  {
    v60 = vmulq_f32(a7, a7);
    v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
    v52 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_2260E5F10);
    v330 = v52;
    v61 = vmulq_f32(v52, v52);
    v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
    v62 = vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32);
    v63 = vrsqrte_f32(v62);
    v64 = 4;
    do
    {
      v63 = vmul_f32(v63, vrsqrts_f32(vmul_f32(v63, v63), v62));
      --v64;
    }
    while (v64);
    v65 = vmul_f32(v62, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v62), 0), (int8x8_t)_D11, (int8x8_t)v63));
    v66 = vrecpe_f32(v65);
    v67 = 4;
    do
    {
      *(float32x2_t *)a10.f32 = vrecps_f32(v65, v66);
      v66 = vmul_f32(v66, *(float32x2_t *)a10.f32);
      --v67;
    }
    while (v67);
    v68 = vmulq_n_f32(v52, v66.f32[0]);
    v68.i32[3] = 0;
    v325 = v68;
    v69 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v70.i64[0] = -1;
    v70.i64[1] = -1;
    v71 = 0uLL;
    goto LABEL_54;
  }
  v34 = 0;
  v35 = (float32x4_t *)a1[1].i64[0];
  v36 = v18[10].i64[0];
  v37 = v18[3];
  v38 = v18[4];
  a10 = v18[5];
  do
  {
    v39 = a3[v34];
    *(&v334 + v34) = v39;
    v40 = a4[v34];
    *(&v332 + v34) = v40;
    v41 = *(float32x4_t *)(v15 + 16 * v39 + 48);
    v42 = vmulq_n_f32(*v35, v41.f32[0]);
    v42.i32[3] = 0;
    v43 = vmulq_lane_f32(v35[1], *(float32x2_t *)v41.f32, 1);
    v43.i32[3] = 0;
    v44 = vmulq_laneq_f32(v35[2], v41, 2);
    v44.i32[3] = 0;
    v45 = vaddq_f32(vaddq_f32(v42, v43), v44);
    v46 = *(float32x4_t *)(v36 + 12 * v40);
    v47 = vmulq_n_f32(v37, v46.f32[0]);
    v47.i32[3] = 0;
    v48 = vmulq_lane_f32(v38, *(float32x2_t *)v46.f32, 1);
    v48.i32[3] = 0;
    v49 = vmulq_laneq_f32(a10, v46, 2);
    v49.i32[3] = 0;
    v50 = vaddq_f32(v35[3], v45);
    v51 = vaddq_f32(v49, vaddq_f32(v47, v48));
    v52 = vsubq_f32(v50, v51);
    *(&v339 + v34) = v50;
    *(&v336 + v34) = v51;
    *(&v342 + v34++) = v52;
  }
  while (v28 != v34);
  v329 = v28;
  switch((_DWORD)v34)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v342, &v339, &v336, &v334, &v332, (int *)&v329);
      goto LABEL_49;
    case 3:
      v329 = 3;
      v52 = v342;
      a10 = vsubq_f32(v343, v342);
      v72 = vsubq_f32(v344[0], v342);
      v74 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), *(float32x2_t *)v72.f32);
      *(int8x8_t *)v73.f32 = vext_s8(v74, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), *(float32x2_t *)v72.f32), *(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL)), 4uLL);
      v74.i32[1] = 0;
      v75 = vpadd_f32(vmul_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32), vmul_f32((float32x2_t)v74.u32[0], (float32x2_t)v74.u32[0]));
      v76 = vpadd_f32(v75, v75);
      if (v76.f32[0] > 0.00000011921)
      {
        if (v76.f32[0] == 0.0)
        {
          v52 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v73.u32[2] = v74;
          v77 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 8uLL).u64[0];
          v78 = (float32x2_t)vextq_s8((int8x16_t)v344[0], (int8x16_t)v344[0], 8uLL).u64[0];
          v79 = (float32x2_t)vextq_s8((int8x16_t)v344[0], (int8x16_t)v344[0], 4uLL).u64[0];
          v80 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 4uLL).u64[0];
          v81 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v79), v80, *(float32x2_t *)v344[0].f32);
          *(int8x8_t *)v82.f32 = vext_s8(v81, (int8x8_t)vmls_f32(vmul_f32(v77, *(float32x2_t *)v344[0].f32), *(float32x2_t *)v343.f32, v78), 4uLL);
          v82.i64[1] = v81.u32[0];
          v83 = (float32x2_t)vextq_s8((int8x16_t)v342, (int8x16_t)v342, 8uLL).u64[0];
          v84 = (float32x2_t)vextq_s8((int8x16_t)v342, (int8x16_t)v342, 4uLL).u64[0];
          v85 = (int8x8_t)vmls_f32(vmul_f32(v84, *(float32x2_t *)v344[0].f32), v79, *(float32x2_t *)v342.f32);
          *(int8x8_t *)v86.f32 = vext_s8(v85, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v342.f32, v78), *(float32x2_t *)v344[0].f32, v83), 4uLL);
          v86.i64[1] = v85.u32[0];
          v87 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v342.f32, v80), v84, *(float32x2_t *)v343.f32);
          *(int8x8_t *)v88.f32 = vext_s8(v87, (int8x8_t)vmls_f32(vmul_f32(v83, *(float32x2_t *)v343.f32), *(float32x2_t *)v342.f32, v77), 4uLL);
          v88.i64[1] = v87.u32[0];
          v89 = vmulq_f32(v82, v73);
          v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
          v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
          v91 = vmulq_f32(v86, v73);
          v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
          v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
          v93 = vmulq_f32(v88, v73);
          v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
          v94 = vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v92), (int8x8_t)vcgez_f32(v90)), (int8x8_t)vcgez_f32(v94)), 0), *(int8x8_t *)v342.f32).u32[0] == -1)
          {
            v120 = (int8x16_t)vmulq_f32(v342, v73);
            v121 = (float32x2_t)vextq_s8(v120, v120, 8uLL).u64[0];
            v122 = vrecpe_f32(v76);
            v123 = 4;
            do
            {
              v122 = vmul_f32(v122, vrecps_f32(v76, v122));
              --v123;
            }
            while (v123);
            v124 = vpadd_f32(*(float32x2_t *)v120.i8, v121);
            v52 = vmulq_n_f32(v73, vmul_f32(v122, vpadd_f32(v124, v124)).f32[0]);
            v52.i32[3] = 0;
          }
          else
          {
            v95 = vnegq_f32(v342);
            v95.i32[3] = 0;
            v96 = vnegq_f32(v343);
            v96.i32[3] = 0;
            v97 = vmulq_f32(v95, a10);
            v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
            v98 = vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32);
            v99 = vmulq_f32(a10, v96);
            v99.i64[0] = vpaddq_f32(v99, v99).u64[0];
            v100 = vpadd_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v99.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v98), (int8x8_t)vclez_f32(v100)), (int8x8_t)vclez_f32(v94)), 0), *(int8x8_t *)v342.f32).u32[0] == -1)
            {
              v125 = vsub_f32(v98, v100);
              v126 = vrecpe_f32(v125);
              v127 = 4;
              do
              {
                v126 = vmul_f32(v126, vrecps_f32(v125, v126));
                --v127;
              }
              while (v127);
              v112 = 0;
              v52 = vmlaq_n_f32(v342, a10, vmul_f32(v98, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v125), (float32x2_t)0x3400000034000000), (int8x8_t)v126, 0)).f32[0]);
              v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
              v128 = 2;
              v111 = 1;
            }
            else
            {
              v101 = vnegq_f32(v344[0]);
              v101.i32[3] = 0;
              v102 = vmulq_f32(v96, v72);
              v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
              v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
              v104 = vmulq_f32(a10, v101);
              v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
              v105 = vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32);
              v106 = vmulq_f32(v72, v101);
              v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
              v107 = vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v103, v100), (int8x8_t)vcge_f32(v105, v107)), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v342.f32).u32[0] == -1)
              {
                v129 = vsub_f32(v103, v100);
                v130 = vadd_f32(v129, vsub_f32(v105, v107));
                v131 = vrecpe_f32(v130);
                v132 = 4;
                do
                {
                  v131 = vmul_f32(v131, vrecps_f32(v130, v131));
                  --v132;
                }
                while (v132);
                v133 = (int8x16_t)vmlaq_n_f32(v343, vsubq_f32(v344[0], v343), vmul_f32(v129, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v130), (float32x2_t)0x3400000034000000), (int8x8_t)v131, 0)).f32[0]);
                v133.i64[1] = vextq_s8(v133, v133, 8uLL).u32[0];
                v128 = 2;
                v112 = 1;
                v111 = 2;
                v52 = (float32x4_t)v133;
              }
              else
              {
                v108 = vmulq_f32(v95, v72);
                v109 = (int32x4_t)vpaddq_f32(v108, v108);
                *(float32x2_t *)v109.i8 = vpadd_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v109.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v109.i8), (int8x8_t)vclez_f32(v107)), (int8x8_t)vclez_f32(v92)), 0), *(int8x8_t *)v342.f32).u32[0] == -1)
                {
                  v134 = vsub_f32(*(float32x2_t *)v109.i8, v107);
                  v135 = vrecpe_f32(v134);
                  v136 = 4;
                  do
                  {
                    v135 = vmul_f32(v135, vrecps_f32(v134, v135));
                    --v136;
                  }
                  while (v136);
                  v112 = 0;
                  v52 = vmlaq_n_f32(v342, v72, vmul_f32(*(float32x2_t *)v109.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v134), (float32x2_t)0x3400000034000000), (int8x8_t)v135, 0)).f32[0]);
                  v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
                  v111 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v109.i8), (int8x8_t)vclez_f32(v98)), 0), *(int8x8_t *)v342.f32).u32[0] == -1)
                {
                  v112 = 0;
                  v111 = 1;
                }
                else
                {
                  *(int32x2_t *)v109.i8 = vcge_f32(v100, v103);
                  *(int16x4_t *)v52.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v109.i8, (int8x8_t)vcgez_f32(v100)), 0);
                  *(int8x8_t *)v52.f32 = vuzp1_s8(*(int8x8_t *)v52.f32, *(int8x8_t *)v52.f32);
                  v109.i32[0] = -1;
                  v110 = v52.i32[0];
                  v52 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v52, v109), 0), (int8x16_t)v343, (int8x16_t)v344[0]);
                  v111 = 1;
                  if (v110 == -1)
                    v112 = 1;
                  else
                    v112 = 2;
                }
                v128 = v111;
              }
            }
            v137 = *(&v342 + v112);
            v138 = *(&v342 + v111);
            a10 = *(&v339 + v112);
            v139 = *(&v339 + v111);
            v140 = *(&v336 + v112);
            v141 = *(&v336 + v111);
            v142 = *(&v334 + v112);
            v143 = *(&v334 + v111);
            v144 = *(&v332 + v112);
            v145 = *(&v332 + v111);
            v342 = v137;
            v343 = v138;
            v339 = a10;
            v340 = v139;
            v336 = v140;
            v337 = v141;
            v334 = v142;
            v335 = v143;
            v332 = v144;
            v333 = v145;
            v329 = v128;
          }
        }
        goto LABEL_49;
      }
      v329 = 2;
      v113 = vmulq_f32(a10, a10);
      v113.i64[0] = vpaddq_f32(v113, v113).u64[0];
      v114 = vpadd_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v114), 0), *(int8x8_t *)v342.f32).u32[0] != -1)
      {
        v115 = vnegq_f32(v342);
        v115.i32[3] = 0;
        v116 = vmulq_f32(v115, a10);
        v116.i64[0] = vpaddq_f32(v116, v116).u64[0];
        v117 = vpadd_f32(*(float32x2_t *)v116.f32, *(float32x2_t *)v116.f32);
        v118 = vrecpe_f32(v114);
        v119 = 4;
        do
        {
          v118 = vmul_f32(v118, vrecps_f32(v114, v118));
          --v119;
        }
        while (v119);
        v52 = vmlaq_n_f32(v342, a10, vmax_f32(vmin_f32(vmul_f32(v117, v118), _D11), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      v52 = v342;
      v53 = vsubq_f32(v343, v342);
      v54 = vmulq_f32(v53, v53);
      v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
      v55 = vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v55), 0), *(int8x8_t *)v342.f32).u32[0] != -1)
      {
        v56 = vnegq_f32(v342);
        v56.i32[3] = 0;
        v57 = vmulq_f32(v56, v53);
        a10 = vpaddq_f32(v57, v57);
        *(float32x2_t *)a10.f32 = vpadd_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
        v58 = vrecpe_f32(v55);
        v59 = 4;
        do
        {
          v58 = vmul_f32(v58, vrecps_f32(v55, v58));
          --v59;
        }
        while (v59);
        v52 = vmlaq_n_f32(v342, v53, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a10.f32, v58), _D11), 0).f32[0]);
LABEL_31:
        v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  v329 = 1;
LABEL_49:
  v330 = v52;
  v146 = vmulq_f32(v52, v52);
  v146.i64[0] = vpaddq_f32(v146, v146).u64[0];
  v147 = vpadd_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32);
  v148 = vrsqrte_f32(v147);
  v149 = 4;
  do
  {
    v148 = vmul_f32(v148, vrsqrts_f32(vmul_f32(v148, v148), v147));
    --v149;
  }
  while (v149);
  v69 = vmul_f32(v147, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v147), 0), (int8x8_t)_D11, (int8x8_t)v148));
  v150 = vrecpe_f32(v69);
  v151 = 4;
  do
  {
    *(float32x2_t *)a10.f32 = vrecps_f32(v69, v150);
    v150 = vmul_f32(v150, *(float32x2_t *)a10.f32);
    --v151;
  }
  while (v151);
  v152 = vmulq_n_f32(v52, v150.f32[0]);
  v152.i32[3] = 0;
  v325 = v152;
  v70 = vdupq_lane_s32(vcgt_f32(v69, v23), 0);
  v71 = v52;
LABEL_54:
  v153 = vadd_f32(v27, a8);
  a10.i32[0] = -1;
  v318 = (int32x4_t)a10;
  v154.i64[0] = -1;
  v154.i64[1] = -1;
  for (i = v69; ; i = v165)
  {
    v156 = v52;
    v157.i64[0] = -1;
    v157.i64[1] = -1;
    *(int16x4_t *)v157.i8 = vmovn_s32(vceqq_s32(v70, v157));
    if (vuzp1_s8(*(int8x8_t *)v157.i8, *(int8x8_t *)v157.i8).u32[0] != -1)
      break;
    v323 = v156;
    v158 = vnegq_f32(v156);
    v158.i32[3] = 0;
    v326 = v69;
    v328 = v158;
    *(double *)v159.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(a1, (float32x2_t *)&v328, (unsigned __int32 *)&v334 + v329);
    v324 = v159;
    *(double *)v160.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v330, &v332 + v329);
    v161 = v325;
    v162 = v160;
    v52 = vsubq_f32(v324, v160);
    v163 = vmulq_f32(v325, v52);
    v163.i64[0] = vpaddq_f32(v163, v163).u64[0];
    v164 = vpadd_f32(*(float32x2_t *)v163.f32, *(float32x2_t *)v163.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v164, v153)).u8[0] & 1) == 0)
    {
      if (a3)
      {
        v265 = v329;
        *a5 = v329;
        if ((_DWORD)v265)
        {
          v266 = &v332;
          v267 = &v334;
          do
          {
            v268 = *v267++;
            *a3++ = v268;
            v269 = *v266++;
            *v10++ = v269;
            --v265;
          }
          while (v265);
        }
      }
      return 0;
    }
    v165 = v326;
    v166 = v329;
    if (v164.f32[0] > (float)(0.99977 * v326.f32[0]))
    {
      if (a3)
      {
        *a5 = v329;
        if ((_DWORD)v166)
        {
          v270 = &v332;
          v271 = &v334;
          v272 = v166;
          do
          {
            v273 = *v271++;
            *a3++ = v273;
            v274 = *v270++;
            *v10++ = v274;
            --v272;
          }
          while (v272);
          goto LABEL_121;
        }
        v275 = a6;
        *(float32x4_t *)(a6 + 32) = v325;
        v276 = 0uLL;
        v277 = 0uLL;
      }
      else
      {
LABEL_121:
        v275 = a6;
        *(float32x4_t *)(a6 + 32) = v325;
        if ((_DWORD)v166 == 3)
        {
          v328.i64[0] = 0;
          v331 = 0;
          physx::Gu::barycentricCoordinates(&v330, &v342, &v343, v344, (float32x2_t *)&v328, &v331);
          v161 = v325;
          v165 = v326;
          v285 = vmulq_n_f32(vsubq_f32(v340, v339), v328.f32[0]);
          v285.i32[3] = 0;
          v286 = vmulq_n_f32(vsubq_f32(v341, v339), v331.f32[0]);
          v286.i32[3] = 0;
          v287 = vaddq_f32(v285, v286);
          v288 = vmulq_n_f32(vsubq_f32(v337, v336), v328.f32[0]);
          v288.i32[3] = 0;
          v276 = vaddq_f32(v339, v287);
          v289 = vmulq_n_f32(vsubq_f32(v338, v336), v331.f32[0]);
          v289.i32[3] = 0;
          v277 = vaddq_f32(v336, vaddq_f32(v288, v289));
        }
        else if ((_DWORD)v166 == 2)
        {
          v290 = vsubq_f32(v342, v330);
          v291 = vsubq_f32(vsubq_f32(v343, v330), v290);
          v292 = vmulq_f32(v291, v291);
          v292.i64[0] = vpaddq_f32(v292, v292).u64[0];
          v293 = vpadd_f32(*(float32x2_t *)v292.f32, *(float32x2_t *)v292.f32);
          v294 = vrecpe_f32(v293);
          v295 = 4;
          do
          {
            v294 = vmul_f32(v294, vrecps_f32(v293, v294));
            --v295;
          }
          while (v295);
          v296 = vnegq_f32(v290);
          v296.i32[3] = 0;
          v297 = vmulq_f32(v296, v291);
          v297.i64[0] = vpaddq_f32(v297, v297).u64[0];
          v296.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v293), (int8x8_t)v294, 0), vpadd_f32(*(float32x2_t *)v297.f32, *(float32x2_t *)v297.f32)).u32[0];
          v276 = vmlaq_n_f32(v339, vsubq_f32(v340, v339), v296.f32[0]);
          v276.i64[1] = vextq_s8((int8x16_t)v276, (int8x16_t)v276, 8uLL).u32[0];
          v277 = vmlaq_n_f32(v336, vsubq_f32(v337, v336), v296.f32[0]);
          v277.i64[1] = vextq_s8((int8x16_t)v277, (int8x16_t)v277, 8uLL).u32[0];
        }
        else
        {
          v276 = 0uLL;
          v277 = 0uLL;
          if ((_DWORD)v166 == 1)
          {
            v276 = v339;
            v277 = v336;
          }
        }
      }
      v298 = (int8x16_t)vmlsq_lane_f32(v276, v161, v320, 0);
      v298.i64[1] = vextq_s8(v298, v298, 8uLL).u32[0];
      v299 = (int8x16_t)vmlaq_n_f32(v277, v161, v321);
      v299.i64[1] = vextq_s8(v299, v299, 8uLL).u32[0];
      *(int8x16_t *)v275 = v298;
      *(int8x16_t *)(v275 + 16) = v299;
      *(float32x2_t *)(v275 + 64) = vsub_f32(v165, v27);
      return 2;
    }
    *(&v339 + v329) = v324;
    *(&v336 + v166) = v162;
    v329 = v166 + 1;
    *(&v342 + v166) = v52;
    if ((_DWORD)v166 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v342, &v339, &v336, &v334, &v332, (int *)&v329);
      v165 = v326;
LABEL_66:
      v71 = v323;
      goto LABEL_101;
    }
    if ((_DWORD)v166 == 2)
    {
      v52 = v342;
      v175 = vsubq_f32(v343, v342);
      v176 = vsubq_f32(v344[0], v342);
      v178 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v175.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v176, (int8x16_t)v176, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v175, (int8x16_t)v175, 4uLL), *(float32x2_t *)v176.f32);
      *(int8x8_t *)v177.f32 = vext_s8(v178, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v175, (int8x16_t)v175, 8uLL), *(float32x2_t *)v176.f32), *(float32x2_t *)v175.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v176, (int8x16_t)v176, 8uLL)), 4uLL);
      v178.i32[1] = 0;
      v329 = 3;
      v179 = vpadd_f32(vmul_f32(*(float32x2_t *)v177.f32, *(float32x2_t *)v177.f32), vmul_f32((float32x2_t)v178.u32[0], (float32x2_t)v178.u32[0]));
      v180 = vpadd_f32(v179, v179);
      if (v180.f32[0] <= 0.00000011921)
      {
        v329 = 2;
        v217 = vmulq_f32(v175, v175);
        v217.i64[0] = vpaddq_f32(v217, v217).u64[0];
        v218 = vpadd_f32(*(float32x2_t *)v217.f32, *(float32x2_t *)v217.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v218), 0), *(int8x8_t *)v342.f32).u32[0] != -1)
        {
          v219 = vnegq_f32(v342);
          v219.i32[3] = 0;
          v220 = vmulq_f32(v219, v175);
          v220.i64[0] = vpaddq_f32(v220, v220).u64[0];
          v221 = vpadd_f32(*(float32x2_t *)v220.f32, *(float32x2_t *)v220.f32);
          v222 = vrecpe_f32(v218);
          v223 = 4;
          v71 = v323;
          do
          {
            v222 = vmul_f32(v222, vrecps_f32(v218, v222));
            --v223;
          }
          while (v223);
          v52 = vmlaq_n_f32(v342, v175, vmax_f32(vmin_f32(vmul_f32(v221, v222), _D11), 0).f32[0]);
LABEL_81:
          v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
          goto LABEL_101;
        }
        v329 = 1;
        goto LABEL_66;
      }
      if (v180.f32[0] == 0.0)
      {
        v52 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v177.u32[2] = v178;
      v181 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 8uLL).u64[0];
      v182 = (float32x2_t)vextq_s8((int8x16_t)v344[0], (int8x16_t)v344[0], 8uLL).u64[0];
      v183 = (float32x2_t)vextq_s8((int8x16_t)v344[0], (int8x16_t)v344[0], 4uLL).u64[0];
      v184 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 4uLL).u64[0];
      v185 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v183), v184, *(float32x2_t *)v344[0].f32);
      *(int8x8_t *)v186.f32 = vext_s8(v185, (int8x8_t)vmls_f32(vmul_f32(v181, *(float32x2_t *)v344[0].f32), *(float32x2_t *)v343.f32, v182), 4uLL);
      v186.i64[1] = v185.u32[0];
      v187 = (float32x2_t)vextq_s8((int8x16_t)v342, (int8x16_t)v342, 8uLL).u64[0];
      v188 = (float32x2_t)vextq_s8((int8x16_t)v342, (int8x16_t)v342, 4uLL).u64[0];
      v189 = (int8x8_t)vmls_f32(vmul_f32(v188, *(float32x2_t *)v344[0].f32), v183, *(float32x2_t *)v342.f32);
      *(int8x8_t *)v190.f32 = vext_s8(v189, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v342.f32, v182), *(float32x2_t *)v344[0].f32, v187), 4uLL);
      v190.i64[1] = v189.u32[0];
      v191 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v342.f32, v184), v188, *(float32x2_t *)v343.f32);
      *(int8x8_t *)v192.f32 = vext_s8(v191, (int8x8_t)vmls_f32(vmul_f32(v187, *(float32x2_t *)v343.f32), *(float32x2_t *)v342.f32, v181), 4uLL);
      v192.i64[1] = v191.u32[0];
      v193 = vmulq_f32(v186, v177);
      v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
      v194 = vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32);
      v195 = vmulq_f32(v190, v177);
      v195.i64[0] = vpaddq_f32(v195, v195).u64[0];
      v196 = vpadd_f32(*(float32x2_t *)v195.f32, *(float32x2_t *)v195.f32);
      v197 = vmulq_f32(v192, v177);
      v197.i64[0] = vpaddq_f32(v197, v197).u64[0];
      v198 = vpadd_f32(*(float32x2_t *)v197.f32, *(float32x2_t *)v197.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v196), (int8x8_t)vcgez_f32(v194)), (int8x8_t)vcgez_f32(v198)), 0), *(int8x8_t *)v342.f32).u32[0] != -1)
      {
        v199 = vnegq_f32(v342);
        v199.i32[3] = 0;
        v200 = vnegq_f32(v343);
        v200.i32[3] = 0;
        v201 = vmulq_f32(v199, v175);
        v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
        v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
        v203 = vmulq_f32(v175, v200);
        v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
        v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v202), (int8x8_t)vclez_f32(v204)), (int8x8_t)vclez_f32(v198)), 0), *(int8x8_t *)v342.f32).u32[0] == -1)
        {
          v229 = vsub_f32(v202, v204);
          v230 = vrecpe_f32(v229);
          v231 = 4;
          do
          {
            v230 = vmul_f32(v230, vrecps_f32(v229, v230));
            --v231;
          }
          while (v231);
          v216 = 0;
          v52 = vmlaq_n_f32(v342, v175, vmul_f32(v202, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v229), (float32x2_t)0x3400000034000000), (int8x8_t)v230, 0)).f32[0]);
          v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
          v232 = 2;
          v215 = 1;
        }
        else
        {
          v205 = vnegq_f32(v344[0]);
          v205.i32[3] = 0;
          v206 = vmulq_f32(v200, v176);
          v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
          v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
          v208 = vmulq_f32(v175, v205);
          v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
          v209 = vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32);
          v210 = vmulq_f32(v176, v205);
          v210.i64[0] = vpaddq_f32(v210, v210).u64[0];
          v211 = vpadd_f32(*(float32x2_t *)v210.f32, *(float32x2_t *)v210.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v207, v204), (int8x8_t)vcge_f32(v209, v211)), (int8x8_t)vclez_f32(v194)), 0), *(int8x8_t *)v342.f32).u32[0] != -1)
          {
            v212 = vmulq_f32(v199, v176);
            v212.i64[0] = vpaddq_f32(v212, v212).u64[0];
            v213 = vpadd_f32(*(float32x2_t *)v212.f32, *(float32x2_t *)v212.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v213), (int8x8_t)vclez_f32(v211)), (int8x8_t)vclez_f32(v196)), 0), *(int8x8_t *)v342.f32).u32[0] == -1)
            {
              v238 = vsub_f32(v213, v211);
              v239 = vrecpe_f32(v238);
              v240 = 4;
              v71 = v323;
              do
              {
                v239 = vmul_f32(v239, vrecps_f32(v238, v239));
                --v240;
              }
              while (v240);
              v216 = 0;
              v52 = vmlaq_n_f32(v342, v176, vmul_f32(v213, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v238), (float32x2_t)0x3400000034000000), (int8x8_t)v239, 0)).f32[0]);
              v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
              v215 = 2;
              v232 = 2;
            }
            else
            {
              v71 = v323;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v213), (int8x8_t)vclez_f32(v202)), 0), *(int8x8_t *)v342.f32).u32[0] == -1)
              {
                v216 = 0;
                v215 = 1;
              }
              else
              {
                *(int16x4_t *)v52.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v204, v207), (int8x8_t)vcgez_f32(v204)), 0);
                *(int8x8_t *)v52.f32 = vuzp1_s8(*(int8x8_t *)v52.f32, *(int8x8_t *)v52.f32);
                v214 = v52.i32[0];
                v52 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v52, v318), 0), (int8x16_t)v343, (int8x16_t)v344[0]);
                v215 = 1;
                if (v214 == -1)
                  v216 = 1;
                else
                  v216 = 2;
              }
              v232 = 1;
            }
            goto LABEL_100;
          }
          v233 = vsub_f32(v207, v204);
          v234 = vadd_f32(v233, vsub_f32(v209, v211));
          v235 = vrecpe_f32(v234);
          v236 = 4;
          do
          {
            v235 = vmul_f32(v235, vrecps_f32(v234, v235));
            --v236;
          }
          while (v236);
          v237 = (int8x16_t)vmlaq_n_f32(v343, vsubq_f32(v344[0], v343), vmul_f32(v233, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v234), (float32x2_t)0x3400000034000000), (int8x8_t)v235, 0)).f32[0]);
          v237.i64[1] = vextq_s8(v237, v237, 8uLL).u32[0];
          v215 = 2;
          v52 = (float32x4_t)v237;
          v216 = 1;
          v232 = 2;
        }
        v71 = v323;
LABEL_100:
        v241 = *(&v342 + v216);
        v242 = *(&v342 + v215);
        v243 = *(&v339 + v216);
        v244 = *(&v339 + v215);
        v245 = *(&v336 + v216);
        v246 = *(&v336 + v215);
        v247 = *(&v334 + v216);
        v248 = *(&v334 + v215);
        v249 = *(&v332 + v216);
        v250 = *(&v332 + v215);
        v342 = v241;
        v343 = v242;
        v339 = v243;
        v340 = v244;
        v336 = v245;
        v337 = v246;
        v334 = v247;
        v335 = v248;
        v332 = v249;
        v333 = v250;
        v329 = v232;
        goto LABEL_101;
      }
      v224 = (int8x16_t)vmulq_f32(v342, v177);
      v225 = (float32x2_t)vextq_s8(v224, v224, 8uLL).u64[0];
      v226 = vrecpe_f32(v180);
      v227 = 4;
      v71 = v323;
      do
      {
        v226 = vmul_f32(v226, vrecps_f32(v180, v226));
        --v227;
      }
      while (v227);
      v228 = vpadd_f32(*(float32x2_t *)v224.i8, v225);
      v52 = vmulq_n_f32(v177, vmul_f32(v226, vpadd_f32(v228, v228)).f32[0]);
      v52.i32[3] = 0;
    }
    else
    {
      v71 = v323;
      if ((_DWORD)v166 == 1)
      {
        v52 = v342;
        v167 = vsubq_f32(v343, v342);
        v168 = vmulq_f32(v167, v167);
        v168.i64[0] = vpaddq_f32(v168, v168).u64[0];
        v169 = vpadd_f32(*(float32x2_t *)v168.f32, *(float32x2_t *)v168.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v169), 0), *(int8x8_t *)v342.f32).u32[0] == -1)
        {
          v329 = 1;
          goto LABEL_101;
        }
        v170 = vnegq_f32(v342);
        v170.i32[3] = 0;
        v171 = vmulq_f32(v170, v167);
        v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
        v172 = vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32);
        v173 = vrecpe_f32(v169);
        v174 = 4;
        do
        {
          v173 = vmul_f32(v173, vrecps_f32(v169, v173));
          --v174;
        }
        while (v174);
        v52 = vmlaq_n_f32(v342, v167, vmax_f32(vmin_f32(vmul_f32(v172, v173), _D11), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    v330 = v52;
    v251 = vmulq_f32(v52, v52);
    v251.i64[0] = vpaddq_f32(v251, v251).u64[0];
    v252 = vpadd_f32(*(float32x2_t *)v251.f32, *(float32x2_t *)v251.f32);
    v253 = vrsqrte_f32(v252);
    v254 = 4;
    do
    {
      v253 = vmul_f32(v253, vrsqrts_f32(vmul_f32(v253, v253), v252));
      --v254;
    }
    while (v254);
    v69 = vmul_f32(v252, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v252), 0), (int8x8_t)_D11, (int8x8_t)v253));
    v255 = vrecpe_f32(v69);
    v256 = 4;
    do
    {
      v255 = vmul_f32(v255, vrecps_f32(v69, v255));
      --v256;
    }
    while (v256);
    v257 = vmulq_n_f32(v52, v255.f32[0]);
    v257.i32[3] = 0;
    v325 = v257;
    *(int32x2_t *)v257.f32 = vcgt_f32(v165, v69);
    v154 = vdupq_lane_s32(*(int32x2_t *)v257.f32, 0);
    v70 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v69, v23), *(int8x8_t *)v257.f32), 0);
  }
  v258 = (int8x8_t)vmovn_s32(vceqzq_s32(v154));
  v259 = v329;
  if (vuzp1_s8(v258, v258).u32[0] == -1)
  {
    if (a3)
    {
      v278 = v329 - 1;
      *a5 = v329 - 1;
      if ((_DWORD)v259 == 1)
      {
LABEL_132:
        v283 = v339;
        v284 = v336;
        goto LABEL_143;
      }
      v279 = &v332;
      v280 = &v334;
      do
      {
        v281 = *v280++;
        *a3++ = v281;
        v282 = *v279++;
        *v10++ = v282;
        --v278;
      }
      while (v278);
    }
    v330 = v71;
    if ((_DWORD)v259 == 3)
    {
      v328.i64[0] = 0;
      v331 = 0;
      v327 = v71;
      physx::Gu::barycentricCoordinates(&v330, &v342, &v343, v344, (float32x2_t *)&v328, &v331);
      v300 = vmulq_n_f32(vsubq_f32(v340, v339), v328.f32[0]);
      v300.i32[3] = 0;
      v301 = vmulq_n_f32(vsubq_f32(v341, v339), v331.f32[0]);
      v301.i32[3] = 0;
      v302 = vaddq_f32(v300, v301);
      v303 = vmulq_n_f32(vsubq_f32(v337, v336), v328.f32[0]);
      v303.i32[3] = 0;
      v283 = vaddq_f32(v339, v302);
      v304 = vmulq_n_f32(vsubq_f32(v338, v336), v331.f32[0]);
      v71 = v327;
      v304.i32[3] = 0;
      v284 = vaddq_f32(v336, vaddq_f32(v303, v304));
    }
    else
    {
      if ((_DWORD)v259 == 2)
      {
        v305 = vsubq_f32(v342, v71);
        v306 = vsubq_f32(vsubq_f32(v343, v71), v305);
        v307 = vmulq_f32(v306, v306);
        v307.i64[0] = vpaddq_f32(v307, v307).u64[0];
        v308 = vpadd_f32(*(float32x2_t *)v307.f32, *(float32x2_t *)v307.f32);
        v309 = vrecpe_f32(v308);
        v310 = 4;
        do
        {
          v309 = vmul_f32(v309, vrecps_f32(v308, v309));
          --v310;
        }
        while (v310);
        v311 = vnegq_f32(v305);
        v311.i32[3] = 0;
        v312 = vmulq_f32(v311, v306);
        v312.i64[0] = vpaddq_f32(v312, v312).u64[0];
        v311.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v308), (int8x8_t)v309, 0), vpadd_f32(*(float32x2_t *)v312.f32, *(float32x2_t *)v312.f32)).u32[0];
        v283 = vmlaq_n_f32(v339, vsubq_f32(v340, v339), v311.f32[0]);
        v283.i64[1] = vextq_s8((int8x16_t)v283, (int8x16_t)v283, 8uLL).u32[0];
        v284 = vmlaq_n_f32(v336, vsubq_f32(v337, v336), v311.f32[0]);
        v284.i64[1] = vextq_s8((int8x16_t)v284, (int8x16_t)v284, 8uLL).u32[0];
        goto LABEL_143;
      }
      v283 = 0uLL;
      v284 = 0uLL;
      if ((_DWORD)v259 == 1)
        goto LABEL_132;
    }
LABEL_143:
    v313 = vrecpe_f32(i);
    v314 = 4;
    do
    {
      v313 = vmul_f32(v313, vrecps_f32(i, v313));
      --v314;
    }
    while (v314);
    v315 = vmulq_n_f32(v71, v313.f32[0]);
    v315.i32[3] = 0;
    *(float32x4_t *)(a6 + 32) = v315;
    *(float32x4_t *)(a6 + 48) = v325;
    v316 = (int8x16_t)vmlsq_lane_f32(v283, v315, v320, 0);
    v316.i64[1] = vextq_s8(v316, v316, 8uLL).u32[0];
    v317 = (int8x16_t)vmlaq_n_f32(v284, v315, v321);
    v317.i64[1] = vextq_s8(v317, v317, 8uLL).u32[0];
    *(int8x16_t *)a6 = v316;
    *(int8x16_t *)(a6 + 16) = v317;
    *(float32x2_t *)(a6 + 64) = vsub_f32(i, v27);
    if ((vcge_f32(v27, i).u8[0] & 1) != 0)
      return 2;
    else
      return 4;
  }
  if (a3)
  {
    *a5 = v329;
    if ((_DWORD)v259)
    {
      v260 = &v332;
      v261 = &v334;
      do
      {
        v262 = *v261++;
        *a3++ = v262;
        v263 = *v260++;
        *v10++ = v263;
        --v259;
      }
      while (v259);
    }
  }
  return 5;
}

uint64_t physx::Gu::contactBoxConvex(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  double v12;
  int32x4_t v13;
  float v14;
  float v15;
  unsigned __int8 ConvexData;
  float v18[26];
  _BYTE v19[24];
  _OWORD v20[4];
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float (*v37)(uint64_t, float *, float *, uint64_t, float *, float *);
  uint64_t (*v38)(uint64_t, uint64_t, float *);
  float v39[6];
  _OWORD v40[4];
  uint64_t v41;
  char v42;

  v40[0] = xmmword_2260E5F10;
  v40[1] = xmmword_2260E5F10;
  HIDWORD(v12) = 1065353216;
  v13 = (int32x4_t)xmmword_2260E5F20;
  v40[2] = xmmword_2260FD430;
  v40[3] = xmmword_2260E5F20;
  v41 = 0x3F80000000000000;
  LODWORD(v12) = *(_DWORD *)(a1 + 4);
  v14 = *(float *)(a1 + 8);
  v42 = 0;
  *(float *)v13.i32 = -*(float *)&v12;
  v15 = *(float *)(a1 + 12);
  v39[0] = -*(float *)&v12;
  v39[1] = -v14;
  v39[2] = -v15;
  v39[3] = *(float *)&v12;
  v39[4] = v14;
  v39[5] = v15;
  physx::Gu::PolygonalBox::PolygonalBox((uint64_t)&v23, a1 + 4, v12, v13);
  v26 = 0;
  v27 = 0;
  v28 = 0x600000008;
  v29 = 0;
  v30 = &v25;
  v31 = &v24;
  v32 = &gPxcBoxPolygonData;
  v33 = 0;
  v35 = 0;
  v34 = 0;
  v36 = v23;
  v37 = HullProjectionCB_Box;
  v38 = SelectClosestEdgeCB_Box;
  v20[0] = xmmword_2260E5F10;
  v20[1] = xmmword_2260E5F10;
  v20[2] = xmmword_2260FD430;
  v20[3] = xmmword_2260E5F20;
  v21 = 0x3F80000000000000;
  v22 = 0;
  ConvexData = physx::Gu::getConvexData(a2, (uint64_t)v20, (uint64_t)v19, (uint64_t)v18);
  return GuContactHullHull((uint64_t)&v26, v18, (uint64_t)v39, (uint64_t)v19, a3, a4, a5, a7, (uint64_t)v40, (float *)v20, 1u, ConvexData);
}

uint64_t GuContactHullHull(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, float *a5, float *a6, float *a7, uint64_t a8, uint64_t a9, float *a10, unsigned __int8 a11, unsigned __int8 a12)
{
  float *v12;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float32_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  unsigned int v145;
  int v146;
  unsigned int v147;
  float v148;
  uint64_t v149;
  float v150;
  float v151;
  float v152;
  float v153;
  uint64_t (*v154)(uint64_t, float *, float *);
  uint64_t (*v155)(uint64_t, float *, float *);
  uint64_t (*v156)(uint64_t, float *, float *);
  uint64_t v157;
  uint64_t v159;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float32x4_t v179;
  float v180;
  float v181;
  char *v182;
  char *v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  uint64_t v239;
  size_t v240;
  uint64_t v241;
  uint64_t v242;
  size_t v243;
  unsigned int v244;
  uint64_t v245;
  unsigned __int8 *v246;
  int v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  size_t v252;
  uint64_t v253;
  uint64_t v254;
  size_t v255;
  float v256;
  float v257;
  uint64_t v258;
  unsigned __int8 *v259;
  int v260;
  char v261;
  int v262;
  int v263;
  int v264;
  uint64_t v265;
  float *v266;
  float *v267;
  uint64_t v268;
  uint64_t v269;
  float *v270;
  uint64_t v271;
  uint64_t v272;
  float *v273;
  float *v274;
  float32x4_t v275;
  float v276;
  float v277;
  float v278;
  float32_t v279;
  float v280;
  int v281;
  uint64_t v282;
  float *v283;
  unsigned int v284;
  float v285;
  float v286;
  float v287;
  int v288;
  int v289;
  float v290[9];
  float v291;
  float v292;
  float v293;
  unsigned __int8 *v294;
  uint64_t v295;
  unsigned __int8 *v296;
  uint64_t v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  __int128 v337;
  uint64_t v338;
  float v339;
  float32x4_t v340;
  float v341[3];
  float v342[12];
  float v343[12];
  float v344;
  float v345;
  float v346;
  float v347;
  float v348;
  float v349;
  float v350;
  float32x2_t v351;
  float v352;
  float32x2_t v353;
  float v354;
  float32x2_t v355;
  float v356;
  float v357;
  float v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  float v364;
  float v365;
  float v366;
  float v367;
  float v368;
  float v369;
  float v370;
  float v371;
  uint64_t v372;

  v272 = a8;
  v12 = a7;
  v268 = a3;
  v269 = a4;
  v14 = (uint64_t)a2;
  v15 = a1;
  v16 = (float *)a9;
  v17 = a10;
  v372 = *MEMORY[0x24BDAC8D0];
  v18 = *a5;
  v19 = a5[1];
  v20 = a5[2];
  v21 = a5[3];
  v22 = v19 * (float)(v19 + v19);
  v23 = v20 * (float)(v20 + v20);
  v24 = (float)(v18 + v18) * v19;
  v25 = (float)(v18 + v18) * v20;
  v26 = (float)(v18 + v18) * v21;
  v27 = (float)(v19 + v19) * v20;
  v28 = (float)(v19 + v19) * v21;
  v29 = (float)(v20 + v20) * v21;
  v30 = v24 + v29;
  v31 = v25 - v28;
  v360 = (float)(1.0 - v22) - v23;
  v361 = v24 + v29;
  v32 = v24 - v29;
  v33 = 1.0 - (float)(v18 * (float)(v18 + v18));
  v34 = v27 + v26;
  v362 = v25 - v28;
  v363 = v32;
  v364 = v33 - v23;
  v365 = v27 + v26;
  v35 = v25 + v28;
  v36 = v27 - v26;
  v37 = v33 - v22;
  v366 = v25 + v28;
  v367 = v27 - v26;
  v38 = a5[4];
  v39 = a5[5];
  v368 = v37;
  v369 = v38;
  v273 = a5;
  v40 = a5[6];
  v370 = v39;
  v371 = v40;
  v41 = *a6;
  v42 = a6[1];
  v43 = a6[2];
  v44 = a6[3];
  v45 = v42 + v42;
  v46 = v43 + v43;
  v47 = v42 * (float)(v42 + v42);
  v48 = v43 * (float)(v43 + v43);
  v49 = (float)(v41 + v41) * v42;
  v50 = (float)(v41 + v41) * v43;
  v51 = (float)(v41 + v41) * v44;
  v52 = v45 * v43;
  v53 = v45 * v44;
  v54 = v46 * v44;
  v55 = v49 + v54;
  v56 = v50 - v53;
  v351.f32[0] = (float)(1.0 - v47) - v48;
  v351.f32[1] = v49 + v54;
  v57 = v49 - v54;
  v58 = 1.0 - (float)(v41 * (float)(v41 + v41));
  v59 = v58 - v48;
  v60 = v52 + v51;
  v352 = v50 - v53;
  v353.f32[0] = v57;
  v353.f32[1] = v58 - v48;
  v354 = v52 + v51;
  v61 = v58 - v47;
  v355.f32[0] = v50 + v53;
  v355.f32[1] = v52 - v51;
  v62 = a6[4];
  v63 = a6[5];
  v356 = v61;
  v357 = v62;
  v64 = *(float *)(a1 + 4);
  v65 = v360 * *(float *)a1;
  v66 = v30 * *(float *)a1;
  v67 = v31 * *(float *)a1;
  v68 = a6[6];
  v358 = v63;
  v359 = v68;
  v69 = v65 + (float)(v32 * v64);
  v70 = *(float *)(a1 + 8);
  v71 = v38 + (float)(v69 + (float)(v35 * v70));
  v72 = v39 + (float)((float)(v66 + (float)(v364 * v64)) + (float)(v36 * v70));
  v73 = v40 + (float)((float)(v67 + (float)(v34 * v64)) + (float)(v37 * v70));
  v74 = a2[1];
  v75 = (float)(v351.f32[0] * *a2) + (float)(v57 * v74);
  v76 = (float)(v55 * *a2) + (float)(v59 * v74);
  v77 = (float)(v56 * *a2) + (float)(v60 * v74);
  v78 = a2[2];
  v348 = (float)(v62 + (float)(v75 + (float)(v355.f32[0] * v78))) - v71;
  v349 = (float)(v63 + (float)(v76 + (float)(v355.f32[1] * v78))) - v72;
  v350 = (float)(v68 + (float)(v77 + (float)(v61 * v78))) - v73;
  v79 = *a7;
  v322 = 0.0;
  v310 = 0.0;
  (*(void (**)(uint64_t, float *, float *, uint64_t, float *, float *))(a1 + 88))(a1, &v348, &v360, a9, &v322, &v310);
  v80 = v322;
  v81 = v310;
  v343[0] = 0.0;
  v342[0] = 0.0;
  (*(void (**)(uint64_t, float *, float32x2_t *, float *, float *, float *))(v14 + 88))(v14, &v348, &v351, a10, v343, v342);
  if ((float)(v79 + v81) < v343[0] || (float)(v79 + v342[0]) < v80)
    return 0;
  v289 = a12;
  v288 = a11;
  v83 = v81 - v343[0];
  if ((float)(v81 - v343[0]) >= (float)(v342[0] - v80))
    v83 = v342[0] - v80;
  v347 = v83;
  v84 = a6[1];
  v85 = a6[2];
  v86 = a6[3];
  v87 = v273[4];
  v88 = v273[5];
  v89 = a6[4];
  v90 = a6[5];
  v91 = v273[6];
  v92 = a6[6];
  v93 = (float)(v87 - v89) + (float)(v87 - v89);
  v94 = (float)(v88 - v90) + (float)(v88 - v90);
  v95 = (float)(v91 - v92) + (float)(v91 - v92);
  v96 = (float)(v86 * v86) + -0.5;
  v97 = (float)((float)-(float)(v84 * v94) - (float)(*a6 * v93)) - (float)(v85 * v95);
  v98 = (float)((float)(v86 * (float)((float)(v85 * v94) - (float)(v84 * v95))) + (float)(v93 * v96))
      - (float)(*a6 * v97);
  v99 = (float)((float)(v86 * (float)((float)(*a6 * v95) - (float)(v85 * v93))) + (float)(v94 * v96))
      - (float)(v84 * v97);
  v100 = (float)((float)(v86 * (float)((float)(v84 * v93) - (float)(*a6 * v94))) + (float)(v95 * v96))
       - (float)(v85 * v97);
  v102 = v273[2];
  v101 = v273[3];
  v103 = v273[1];
  v104 = (float)((float)((float)(v86 * *v273) - (float)(*a6 * v101)) - (float)(v84 * v102)) + (float)(v103 * v85);
  v105 = (float)((float)((float)(v86 * v103) - (float)(v84 * v101)) - (float)(v85 * *v273)) + (float)(v102 * *a6);
  v106 = (float)((float)((float)(v86 * v102) - (float)(v85 * v101)) - (float)(*a6 * v103)) + (float)(*v273 * v84);
  v107 = (float)((float)((float)(*a6 * *v273) + (float)(v86 * v101)) + (float)(v84 * v103)) + (float)(v85 * v102);
  v108 = v89 - v87;
  v109 = v90 - v88;
  v110 = v92 - v91;
  v111 = v108 + v108;
  v112 = v109 + v109;
  v113 = v110 + v110;
  v114 = (float)(v101 * v101) + -0.5;
  v115 = (float)((float)-(float)(v103 * (float)(v109 + v109)) - (float)(*v273 * (float)(v108 + v108)))
       - (float)(v102 * v113);
  v116 = (float)((float)(v101 * (float)((float)((float)(v109 + v109) * v102) - (float)(v103 * v113)))
               + (float)((float)(v108 + v108) * v114))
       - (float)(*v273 * v115);
  v117 = (float)((float)(v101 * (float)((float)(*v273 * v113) - (float)(v102 * v111)))
               + (float)((float)(v109 + v109) * v114))
       - (float)(v103 * v115);
  v118 = (float)((float)(v101 * (float)((float)(v111 * v103) - (float)(*v273 * v112))) + (float)(v113 * v114))
       - (float)(v102 * v115);
  v119 = (float)((float)((float)(v101 * *a6) - (float)(*v273 * v86)) - (float)(v103 * v85)) + (float)(v84 * v102);
  v120 = (float)((float)((float)(v101 * v84) - (float)(v103 * v86)) - (float)(v102 * *a6)) + (float)(v85 * *v273);
  v121 = (float)((float)((float)(v101 * v85) - (float)(v102 * v86)) - (float)(*v273 * v84)) + (float)(*a6 * v103);
  v122 = v104 * (float)(v104 + v104);
  v123 = v105 * (float)(v105 + v105);
  v124 = v106 * (float)(v106 + v106);
  v125 = (float)(v104 + v104) * v105;
  v126 = v106 * (float)(v104 + v104);
  v127 = v107 * (float)(v104 + v104);
  v128 = v106 * (float)(v105 + v105);
  v129 = v107 * (float)(v105 + v105);
  v130 = v107 * (float)(v106 + v106);
  v343[0] = (float)(1.0 - v123) - v124;
  v343[1] = v125 + v130;
  v131 = 1.0 - v122;
  v343[2] = v126 - v129;
  v343[3] = v125 - v130;
  v343[4] = v131 - v124;
  v343[5] = v127 + v128;
  v343[6] = v126 + v129;
  v343[7] = v128 - v127;
  v343[8] = v131 - v123;
  v343[9] = v98;
  v343[10] = v99;
  v343[11] = v100;
  v132 = v119 + v119;
  v133 = v120 + v120;
  v134 = v121 + v121;
  v135 = v119 * (float)(v119 + v119);
  v136 = v120 * (float)(v120 + v120);
  v137 = v121 * (float)(v121 + v121);
  v138 = (float)(v119 + v119) * v120;
  v139 = v132 * v121;
  v140 = v107 * v132;
  v141 = v121 * v133;
  v142 = v107 * v133;
  v143 = v107 * v134;
  v342[0] = (float)(1.0 - v136) - v137;
  v342[1] = v138 + v143;
  v144 = 1.0 - v135;
  v342[2] = v139 - v142;
  v342[3] = v138 - v143;
  v342[4] = v144 - v137;
  v342[5] = v140 + v141;
  v266 = (float *)((unint64_t)&v337 | 0xC);
  v267 = (float *)((unint64_t)&v340 | 0xC);
  v145 = 0x7FFF;
  v342[6] = v139 + v142;
  v342[7] = v141 - v140;
  v342[8] = v144 - v136;
  v342[9] = v116;
  v342[10] = v117;
  v342[11] = v118;
  v146 = -1;
  v147 = 0x7FFF;
  v270 = v12;
  v271 = v14;
  v282 = v15;
  v283 = (float *)a9;
  v274 = a10;
  while (1)
  {
    LODWORD(v337) = 0;
    v341[0] = 0.0;
    LODWORD(v338) = 0;
    v148 = *v12;
    v281 = v146;
    if (v146)
    {
      v290[0] = 3.4028e38;
      v340.i32[0] = 2139095039;
      v298 = (float)((float)(v361 * v349) + (float)(v360 * v348)) + (float)(v362 * v350);
      v299 = (float)((float)(v349 * v364) + (float)(v363 * v348)) + (float)(v365 * v350);
      v300 = (float)((float)(v349 * v367) + (float)(v366 * v348)) + (float)(v368 * v350);
      v291 = -v348;
      v292 = -v349;
      v293 = -v350;
      if ((GuTestFacesSepAxesBackfaceRoughPass(v15, v14, &v360, (float *)&v351, (uint64_t)v16, (uint64_t)v17, (uint64_t)v342, &v298, v148, v290, &v322, v341, &v291) & 1) == 0|| (v291 = -(float)((float)((float)(v351.f32[1] * v349) + (float)(v351.f32[0] * v348)) + (float)(v352 * v350)), v292 = -(float)((float)((float)(v349 * v353.f32[1]) + (float)(v353.f32[0] * v348)) + (float)(v354 * v350)), v293 = -(float)((float)((float)(v349 * v355.f32[1]) + (float)(v355.f32[0] * v348)) + (float)(v356 * v350)), v149 = GuTestFacesSepAxesBackfaceRoughPass(v14, v15,
                     (float *)&v351,
                     &v360,
                     (uint64_t)v17,
                     (uint64_t)v16,
                     (uint64_t)v343,
                     &v291,
                     v148,
                     v340.f32,
                     &v310,
                     &v338,
                     &v348),
            !(_DWORD)v149))
      {
LABEL_42:
        v262 = 0;
        v264 = 1;
        return v264 & v262;
      }
      v150 = v290[0];
      v151 = v322;
      v152 = v323;
      v153 = v324;
      LODWORD(v337) = 0;
      if (v340.f32[0] < v290[0])
      {
        v151 = v310;
        v152 = v311;
        v153 = v312;
        v150 = v340.f32[0];
        LODWORD(v337) = 1;
      }
      v347 = v150;
      v344 = v151;
      v345 = v152;
      v346 = v153;
    }
    else
    {
      v149 = PxcBruteForceOverlapBackface(v268, v269, v15, v14, (uint64_t)&v360, (uint64_t)&v351, (uint64_t)v16, (uint64_t)v17, (uint64_t)v343, (uint64_t)v342, &v348, v341, &v338, &v347, (uint64_t)&v344, &v337);
      if (!(_DWORD)v149)
        goto LABEL_42;
      v151 = v344;
      v152 = v345;
      v153 = v346;
    }
    if ((float)((float)((float)(v152 * v349) + (float)(v348 * v151)) + (float)(v350 * v153)) < 0.0)
    {
      v151 = -v151;
      v152 = -v152;
      v153 = -v153;
      v344 = v151;
      v345 = v152;
      v346 = v153;
    }
    if ((_DWORD)v337 == 2)
    {
      v154 = *(uint64_t (**)(uint64_t, float *, float *))(v15 + 96);
      v322 = (float)((float)(v152 * v361) + (float)(v360 * v151)) + (float)(v362 * v153);
      v323 = (float)((float)(v152 * v364) + (float)(v363 * v151)) + (float)(v365 * v153);
      v324 = (float)((float)(v152 * v367) + (float)(v366 * v151)) + (float)(v368 * v153);
      v145 = v154(v15, v16, &v322);
LABEL_22:
      v155 = *(uint64_t (**)(uint64_t, float *, float *))(v14 + 96);
      v322 = (float)((float)-(float)(v152 * v351.f32[1]) - (float)(v351.f32[0] * v151)) - (float)(v352 * v153);
      v323 = (float)((float)-(float)(v152 * v353.f32[1]) - (float)(v353.f32[0] * v151)) - (float)(v354 * v153);
      v324 = (float)((float)-(float)(v152 * v355.f32[1]) - (float)(v355.f32[0] * v151)) - (float)(v356 * v153);
      v149 = v155(v14, v17, &v322);
      v147 = v149;
      goto LABEL_24;
    }
    if ((_DWORD)v337 != 1)
    {
      if ((_DWORD)v337)
        goto LABEL_24;
      v145 = LODWORD(v341[0]);
      goto LABEL_22;
    }
    v156 = *(uint64_t (**)(uint64_t, float *, float *))(v15 + 96);
    v322 = (float)((float)(v152 * v361) + (float)(v360 * v151)) + (float)(v362 * v153);
    v323 = (float)((float)(v152 * v364) + (float)(v363 * v151)) + (float)(v365 * v153);
    v324 = (float)((float)(v152 * v367) + (float)(v366 * v151)) + (float)(v368 * v153);
    v149 = v156(v15, v16, &v322);
    v145 = v149;
    v147 = v338;
LABEL_24:
    v285 = v152;
    v286 = v153;
    v287 = v151;
    v157 = *(_QWORD *)(v15 + 24);
    _X1 = (float *)(v157 + 20 * v145);
    v159 = *(_QWORD *)(v14 + 24);
    _X20 = (float *)(v159 + 20 * v147);
    __asm
    {
      PRFM            #0, [X1]
      PRFM            #0, [X20]
    }
    v167 = 0.0;
    if (v347 < 0.0)
      v167 = -v347;
    v277 = v167;
    if (v288)
    {
      v340 = *(float32x4_t *)_X1;
      v179 = v340;
      v168 = v360;
      v169 = v361;
      v170 = v362;
      v171 = v363;
      v172 = v364;
      v173 = v365;
      v174 = v366;
      v175 = v367;
      v176 = v368;
      v177 = (float)((float)(v360 * v179.f32[0]) + vmuls_lane_f32(v363, *(float32x2_t *)v179.f32, 1))
           + vmuls_lane_f32(v366, v340, 2);
      v178 = (float)((float)(v361 * v340.f32[0]) + vmuls_lane_f32(v364, *(float32x2_t *)v340.f32, 1))
           + vmuls_lane_f32(v367, v340, 2);
      v179.f32[0] = (float)((float)(v362 * v340.f32[0]) + vmuls_lane_f32(v365, *(float32x2_t *)v340.f32, 1))
                  + vmuls_lane_f32(v368, v340, 2);
    }
    else
    {
      physx::Cm::FastVertex2ShapeScaling::transformPlaneToShapeSpace(v16, _X1, v340.f32, v267, _X1[3]);
      v168 = v360;
      v169 = v361;
      v170 = v362;
      v171 = v363;
      v172 = v364;
      v173 = v365;
      v174 = v366;
      v175 = v367;
      v176 = v368;
      v177 = (float)((float)(v340.f32[0] * v360) + (float)(v340.f32[1] * v363)) + (float)(v340.f32[2] * v366);
      v178 = (float)((float)(v340.f32[0] * v361) + (float)(v340.f32[1] * v364)) + (float)(v340.f32[2] * v367);
      v179.f32[0] = (float)((float)(v340.f32[0] * v362) + (float)(v340.f32[1] * v365)) + (float)(v340.f32[2] * v368);
    }
    v279 = v179.f32[0];
    v280 = v177;
    v341[0] = v177;
    v278 = v178;
    v341[1] = v178;
    v341[2] = v179.f32[0];
    v284 = v147;
    if (v289)
    {
      v337 = *(_OWORD *)_X20;
      *(float32x2_t *)v179.f32 = vadd_f32(vmul_n_f32(v351, *(float *)&v337), vmul_lane_f32(v353, *(float32x2_t *)&v337, 1));
      v180 = (float)(v352 * *(float *)&v337) + vmuls_lane_f32(v354, *(float32x2_t *)&v337, 1);
    }
    else
    {
      v181 = _X20[3];
      v276 = v171;
      physx::Cm::FastVertex2ShapeScaling::transformPlaneToShapeSpace(v274, (float *)(v159 + 20 * v147), (float *)&v337, v266, v181);
      v171 = v276;
      *(float32x2_t *)v179.f32 = vadd_f32(vmul_n_f32(v351, *(float *)&v337), vmul_n_f32(v353, *((float *)&v337 + 1)));
      v180 = (float)(*(float *)&v337 * v352) + (float)(*((float *)&v337 + 1) * v354);
    }
    v182 = 0;
    v183 = 0;
    *(float32x2_t *)v179.f32 = vadd_f32(*(float32x2_t *)v179.f32, vmul_n_f32(v355, *((float *)&v337 + 2)));
    v275 = v179;
    v338 = v179.i64[0];
    v276 = v180 + (float)(*((float *)&v337 + 2) * v356);
    v339 = v276;
    v277 = v277 + v12[1];
    v334 = -(float)(v277 * v287);
    v335 = -(float)(v277 * v285);
    v336 = -(float)(v277 * v286);
    v322 = v168;
    v323 = v169;
    v324 = v170;
    v325 = v171;
    v326 = v172;
    v327 = v173;
    v328 = v174;
    v329 = v175;
    v330 = v176;
    v331 = v369 - v334;
    v332 = v370 - v335;
    v333 = v371 - v336;
    v184 = v273[1];
    v185 = v273[2];
    v186 = v273[3];
    v187 = a6[1];
    v188 = a6[2];
    v189 = a6[3];
    v190 = a6[4];
    v191 = a6[5];
    v192 = a6[6];
    v193 = (float)(v331 - v190) + (float)(v331 - v190);
    v194 = (float)(v332 - v191) + (float)(v332 - v191);
    v195 = (float)(v333 - v192) + (float)(v333 - v192);
    v196 = (float)(v189 * v189) + -0.5;
    v197 = (float)((float)-(float)(v187 * v194) - (float)(*a6 * v193)) - (float)(v188 * v195);
    v198 = (float)((float)(v189 * (float)((float)(v188 * v194) - (float)(v187 * v195))) + (float)(v193 * v196))
         - (float)(*a6 * v197);
    v199 = (float)((float)(v189 * (float)((float)(*a6 * v195) - (float)(v188 * v193))) + (float)(v194 * v196))
         - (float)(v187 * v197);
    v200 = (float)((float)(v189 * (float)((float)(v187 * v193) - (float)(*a6 * v194))) + (float)(v195 * v196))
         - (float)(v188 * v197);
    v201 = (float)((float)((float)(v189 * *v273) - (float)(*a6 * v186)) - (float)(v187 * v185)) + (float)(v184 * v188);
    v202 = (float)((float)((float)(v189 * v184) - (float)(v187 * v186)) - (float)(v188 * *v273)) + (float)(v185 * *a6);
    v203 = (float)((float)((float)(v189 * v185) - (float)(v188 * v186)) - (float)(*a6 * v184)) + (float)(*v273 * v187);
    v204 = (float)((float)((float)(*v273 * *a6) + (float)(v189 * v186)) + (float)(v187 * v184)) + (float)(v188 * v185);
    v205 = (float)(v190 - v331) + (float)(v190 - v331);
    v206 = (float)(v191 - v332) + (float)(v191 - v332);
    v207 = (float)(v192 - v333) + (float)(v192 - v333);
    v208 = (float)(v186 * v186) + -0.5;
    v209 = (float)((float)-(float)(v184 * v206) - (float)(*v273 * v205)) - (float)(v185 * v207);
    v210 = (float)((float)(v186 * (float)((float)(v185 * v206) - (float)(v184 * v207))) + (float)(v205 * v208))
         - (float)(*v273 * v209);
    v211 = (float)((float)(v186 * (float)((float)(*v273 * v207) - (float)(v185 * v205))) + (float)(v206 * v208))
         - (float)(v184 * v209);
    v212 = (float)(v186 * (float)((float)(v184 * v205) - (float)(*v273 * v206))) + (float)(v207 * v208);
    v213 = (float)((float)((float)(v186 * *a6) - (float)(*v273 * v189)) - (float)(v184 * v188)) + (float)(v187 * v185);
    v214 = (float)((float)((float)(v186 * v187) - (float)(v184 * v189)) - (float)(v185 * *a6)) + (float)(v188 * *v273);
    v215 = (float)((float)((float)(v186 * v188) - (float)(v185 * v189)) - (float)(*v273 * v187)) + (float)(*a6 * v184);
    v216 = v201 + v201;
    v217 = v202 + v202;
    v218 = v203 + v203;
    v219 = v201 * (float)(v201 + v201);
    v220 = v202 * (float)(v202 + v202);
    v221 = v203 * (float)(v203 + v203);
    v222 = v202 * (float)(v201 + v201);
    v223 = v203 * v216;
    v224 = v204 * v216;
    v225 = v203 * v217;
    v226 = v204 * v217;
    v227 = v204 * v218;
    v228 = 1.0 - v219;
    v310 = (float)(1.0 - v220) - v221;
    v311 = v222 + v227;
    v312 = v223 - v226;
    v313 = v222 - v227;
    v314 = v228 - v221;
    v315 = v225 + v224;
    v316 = v223 + v226;
    v317 = v225 - v224;
    v318 = v228 - v220;
    v319 = v198;
    v320 = v199;
    v321 = v200;
    v229 = v215 + v215;
    v230 = v214 * (float)(v214 + v214);
    v231 = v215 * (float)(v215 + v215);
    v232 = v214 * (float)(v213 + v213);
    v233 = v215 * (float)(v213 + v213);
    v234 = v204 * (float)(v213 + v213);
    v235 = v215 * (float)(v214 + v214);
    v236 = v204 * (float)(v214 + v214);
    v237 = v204 * v229;
    v238 = 1.0 - (float)(v213 * (float)(v213 + v213));
    v298 = (float)(1.0 - v230) - v231;
    v299 = v232 + v237;
    v300 = v233 - v236;
    v301 = v232 - v237;
    v302 = v238 - v231;
    v303 = v235 + v234;
    v304 = v233 + v236;
    v305 = v235 - v234;
    v306 = v238 - v230;
    v307 = v210;
    v308 = v211;
    v309 = v212 - (float)(v185 * v209);
    v296 = 0;
    v297 = 0;
    if ((v288 & 1) == 0)
    {
      MEMORY[0x24BDAC7A8](v149);
      v182 = (char *)&v265 - v239;
      bzero((char *)&v265 - v239, v240);
      MEMORY[0x24BDAC7A8](v241);
      v183 = (char *)&v265 - v242;
      bzero((char *)&v265 - v242, v243);
    }
    v244 = v284;
    v245 = v157 + 20 * v145;
    v247 = *(unsigned __int8 *)(v245 + 18);
    v246 = (unsigned __int8 *)(v245 + 18);
    physx::Gu::getScaledConvex(&v297, &v296, (uint64_t)v182, (uint64_t)v183, v288, *(_QWORD *)(v282 + 32), *(_QWORD *)(v282 + 40) + *((unsigned __int16 *)v246 - 1), v247, (uint64_t)v283);
    v249 = 0;
    v250 = 0;
    v294 = 0;
    v295 = 0;
    if ((v289 & 1) == 0)
    {
      MEMORY[0x24BDAC7A8](v248);
      v249 = (char *)&v265 - v251;
      bzero((char *)&v265 - v251, v252);
      MEMORY[0x24BDAC7A8](v253);
      v250 = (char *)&v265 - v254;
      bzero((char *)&v265 - v254, v255);
    }
    v256 = fabsf((float)((float)(v285 * v278) + (float)(v280 * v287)) + (float)(v279 * v286));
    v257 = fabsf(vmlas_n_f32(vmuls_lane_f32(v285, *(float32x2_t *)v275.f32, 1), v287, v275.f32[0]) + (float)(v276 * v286));
    v14 = v271;
    v258 = v159 + 20 * v244;
    v260 = *(unsigned __int8 *)(v258 + 18);
    v259 = (unsigned __int8 *)(v258 + 18);
    v17 = v274;
    physx::Gu::getScaledConvex(&v295, &v294, (uint64_t)v249, (uint64_t)v250, v289, *(_QWORD *)(v271 + 32), *(_QWORD *)(v271 + 40) + *((unsigned __int16 *)v259 - 1), v260, (uint64_t)v274);
    physx::Gu::findRotationMatrixFromZ(&v291, v340.f32);
    physx::Gu::findRotationMatrixFromZ(v290, (float *)&v337);
    if (v256 <= v257)
      break;
    v261 = physx::Gu::contactPolygonPolygonExt(*v246, v297, v296, (uint64_t)&v322, v340.f32, &v291, *v259, v295, v277, v294, (uint64_t)&v351, (float *)&v337, v290, v341, (uint64_t)&v310, &v298, -1, v272, 1u,
             (uint64_t)&v334);
    v16 = v283;
    if ((v261 & 1) != 0)
      goto LABEL_43;
LABEL_40:
    v146 = v281 + 1;
    v12 = v270;
    v15 = v282;
    v147 = v284;
    if (!v281)
    {
      v264 = 0;
      return v264 & v262;
    }
  }
  v263 = physx::Gu::contactPolygonPolygonExt(*v259, v295, v294, (uint64_t)&v351, (float *)&v337, v290, *v246, v297, v277, v296, (uint64_t)&v322, v340.f32, &v291, (float *)&v338, (uint64_t)&v298, &v310, -1, v272, 0,
           (uint64_t)&v334);
  v16 = v283;
  if (!v263)
    goto LABEL_40;
LABEL_43:
  v264 = 1;
  v262 = 1;
  return v264 & v262;
}

uint64_t physx::Gu::contactConvexConvex(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 ConvexData;
  unsigned __int8 v13;
  float v15[26];
  _BYTE v16[104];
  _BYTE v17[24];
  _BYTE v18[24];
  _OWORD v19[4];
  uint64_t v20;
  char v21;
  _OWORD v22[4];
  uint64_t v23;
  char v24;

  v22[0] = xmmword_2260E5F10;
  v22[1] = xmmword_2260E5F10;
  v22[2] = xmmword_2260FD430;
  v22[3] = xmmword_2260E5F20;
  v23 = 0x3F80000000000000;
  v24 = 0;
  v19[0] = xmmword_2260E5F10;
  v19[1] = xmmword_2260E5F10;
  v19[2] = xmmword_2260FD430;
  v19[3] = xmmword_2260E5F20;
  v20 = 0x3F80000000000000;
  v21 = 0;
  ConvexData = physx::Gu::getConvexData(a1, (uint64_t)v22, (uint64_t)v18, (uint64_t)v16);
  v13 = physx::Gu::getConvexData(a2, (uint64_t)v19, (uint64_t)v17, (uint64_t)v15);
  return GuContactHullHull((uint64_t)v16, v15, (uint64_t)v18, (uint64_t)v17, a3, a4, a5, a7, (uint64_t)v22, (float *)v19, ConvexData, v13);
}

BOOL physx::Gu::contactConvexMesh(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  float *v13;
  float v14;
  float v15;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char ConvexData;
  _BYTE v23[104];
  _BYTE v24[24];
  _OWORD v25[4];
  uint64_t v26;
  char v27;
  _OWORD v28[4];
  uint64_t v29;
  char v30;

  v14 = a2[1];
  v15 = a2[2];
  v13 = a2 + 1;
  v17 = v14 == 1.0 && v15 == 1.0 && a2[3] == 1.0;
  v18 = xmmword_2260E5F10;
  v28[0] = xmmword_2260E5F10;
  v28[1] = xmmword_2260E5F10;
  v19 = xmmword_2260FD430;
  v20 = xmmword_2260E5F20;
  v28[2] = xmmword_2260FD430;
  v28[3] = xmmword_2260E5F20;
  v29 = 0x3F80000000000000;
  v30 = 0;
  if ((v17 & 1) == 0)
  {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v28, v13, a2 + 4);
    v20 = xmmword_2260E5F20;
    v19 = xmmword_2260FD430;
    v18 = xmmword_2260E5F10;
  }
  v25[0] = v18;
  v25[1] = v18;
  v25[2] = v19;
  v25[3] = v20;
  v26 = 0x3F80000000000000;
  v27 = 0;
  ConvexData = physx::Gu::getConvexData(a1, (uint64_t)v25, (uint64_t)v24, (uint64_t)v23);
  return contactHullMesh2((uint64_t)v23, (uint64_t)v24, (uint64_t)a2, a3, a4, a5, a7, (uint64_t)v25, (uint64_t)v28, ConvexData, v17);
}

BOOL contactHullMesh2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  double v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  int v73;
  __int128 v75;
  float *v76;
  uint64_t v77;
  float v78[16];
  float v79[7];
  float v80[3];
  float v81;
  float v82;
  float v83;
  float v84;
  float v85[12];
  float v86[12];
  uint64_t (**v87)();
  int v88;
  _BYTE v89[2264];
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  float *v94;
  _BYTE v95[4360];
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;

  v11 = MEMORY[0x24BDAC7A8](a1);
  v76 = v12;
  v77 = v13;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v98 = *MEMORY[0x24BDAC8D0];
  LODWORD(v11) = *(_DWORD *)v20;
  v24 = *(float *)(v20 + 4);
  v25 = *(float *)(v20 + 8);
  v26 = *(float *)(v20 + 12);
  v27 = v24 * (float)(v24 + v24);
  v28 = v25 * (float)(v25 + v25);
  v29 = (float)(*(float *)&v11 + *(float *)&v11) * v24;
  v30 = (float)(*(float *)&v11 + *(float *)&v11) * v25;
  v31 = (float)(*(float *)&v11 + *(float *)&v11) * v26;
  v32 = (float)(v24 + v24) * v25;
  v33 = (float)(v24 + v24) * v26;
  v34 = (float)(v25 + v25) * v26;
  v86[0] = (float)(1.0 - v27) - v28;
  v86[1] = v29 + v34;
  v35 = 1.0 - (float)(*(float *)&v11 * (float)(*(float *)&v11 + *(float *)&v11));
  v86[2] = v30 - v33;
  v86[3] = v29 - v34;
  v86[4] = v35 - v28;
  v86[5] = v32 + v31;
  v36 = v35 - v27;
  v86[6] = v30 + v33;
  v86[7] = v32 - v31;
  v37 = *(float *)(v20 + 16);
  v38 = *(float *)(v20 + 20);
  v86[8] = v36;
  v86[9] = v37;
  v39 = *(float *)(v20 + 24);
  v86[10] = v38;
  v86[11] = v39;
  v40 = *v18;
  v41 = v18[1];
  v42 = v18[2];
  v43 = v18[3];
  v44 = v41 * (float)(v41 + v41);
  v45 = v42 * (float)(v42 + v42);
  v46 = (float)(v40 + v40) * v41;
  v47 = (float)(v40 + v40) * v42;
  v48 = (float)(v40 + v40) * v43;
  v49 = (float)(v41 + v41) * v42;
  v50 = (float)(v41 + v41) * v43;
  v51 = (float)(v42 + v42) * v43;
  v85[0] = (float)(1.0 - v44) - v45;
  v85[1] = v46 + v51;
  v52 = 1.0 - (float)(v40 * (float)(v40 + v40));
  v85[2] = v47 - v50;
  v85[3] = v46 - v51;
  v85[4] = v52 - v45;
  v85[5] = v49 + v48;
  v85[6] = v47 + v50;
  v85[7] = v49 - v48;
  v53 = v18[4];
  v54 = v18[5];
  v85[8] = v52 - v44;
  v85[9] = v53;
  v55 = v18[6];
  v85[10] = v54;
  v85[11] = v55;
  v56 = (float)(v37 - v53) + (float)(v37 - v53);
  v57 = (float)(v38 - v54) + (float)(v38 - v54);
  v58 = (float)(v39 - v55) + (float)(v39 - v55);
  v59 = (float)(v43 * v43) + -0.5;
  v60 = (float)((float)-(float)(v41 * v57) - (float)(v40 * v56)) - (float)(v42 * v58);
  v80[0] = (float)((float)((float)(v43 * *(float *)&v11) - (float)(v40 * v26)) - (float)(v41 * v25))
         + (float)(v24 * v42);
  v80[1] = (float)((float)((float)(v43 * v24) - (float)(v41 * v26)) - (float)(v42 * *(float *)&v11))
         + (float)(v25 * v40);
  v80[2] = (float)((float)((float)(v43 * v25) - (float)(v42 * v26)) - (float)(v40 * v24))
         + (float)(*(float *)&v11 * v41);
  v81 = (float)((float)((float)(*(float *)&v11 * v40) + (float)(v43 * v26)) + (float)(v41 * v24)) + (float)(v42 * v25);
  v82 = (float)((float)(v43 * (float)((float)(v42 * v57) - (float)(v41 * v58))) + (float)(v56 * v59))
      - (float)(v40 * v60);
  v83 = (float)((float)(v43 * (float)((float)(v40 * v58) - (float)(v42 * v56))) + (float)(v57 * v59))
      - (float)(v41 * v60);
  v84 = (float)((float)(v43 * (float)((float)(v41 * v56) - (float)(v40 * v57))) + (float)(v58 * v59))
      - (float)(v42 * v60);
  v61 = (float)(v53 - v37) + (float)(v53 - v37);
  v62 = (float)(v54 - v38) + (float)(v54 - v38);
  v63 = (float)(v55 - v39) + (float)(v55 - v39);
  v64 = (float)(v26 * v26) + -0.5;
  v65 = (float)((float)-(float)(v24 * v62) - (float)(*(float *)&v11 * v61)) - (float)(v25 * v63);
  v79[0] = (float)((float)((float)(v26 * v40) - (float)(*(float *)&v11 * v43)) - (float)(v24 * v42))
         + (float)(v41 * v25);
  v79[1] = (float)((float)((float)(v26 * v41) - (float)(v24 * v43)) - (float)(v25 * v40))
         + (float)(v42 * *(float *)&v11);
  v79[2] = (float)((float)((float)(v26 * v42) - (float)(v25 * v43)) - (float)(*(float *)&v11 * v41))
         + (float)(v40 * v24);
  v79[3] = v81;
  v79[4] = (float)((float)(v26 * (float)((float)(v25 * v62) - (float)(v24 * v63))) + (float)(v61 * v64))
         - (float)(*(float *)&v11 * v65);
  v79[5] = (float)((float)(v26 * (float)((float)(*(float *)&v11 * v63) - (float)(v25 * v61))) + (float)(v62 * v64))
         - (float)(v24 * v65);
  v79[6] = (float)((float)(v26 * (float)((float)(v24 * v61) - (float)(*(float *)&v11 * v62))) + (float)(v63 * v64))
         - (float)(v25 * v65);
  *(float *)&v11 = *v16;
  physx::Gu::computeHullOBB(v78, v66, v86, v85, a9, a11, v11);
  v67 = *(_QWORD *)(v23 + 48);
  v97 = 0x44000000000;
  v95[4352] = 1;
  v96 = v95;
  v68 = *(_QWORD *)(v67 + 80);
  v70 = v17[1];
  v69 = v17[2];
  v71 = *v17;
  v88 = 2;
  v87 = &off_24ED916B8;
  *((_QWORD *)&v75 + 1) = v19;
  *(_QWORD *)&v75 = v21;
  v90 = a9;
  v91 = v68;
  v92 = a11;
  v93 = v67;
  v94 = v78;
  ((void (*)(uint64_t, float *, uint64_t (***)(), _QWORD, uint64_t, float))*(&physx::Gu::gMidphaseBoxCBOverlapTable
                                                                                              + *(unsigned __int16 *)(v67 + 8)
                                                                                              - 3))(v67, v78, &v87, 0, 1, v72);
  v73 = v89[2256];
  if ((v97 & 0x8000000000000000) == 0 && (v97 & 0x7FFFFFFF00000000) != 0 && v96 != v95 && v96)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v73 != 0;
}

BOOL physx::Gu::contactBoxMesh(float *a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, int32x4_t a7, uint64_t a8, uint64_t a9)
{
  char v15;
  float v16;
  float v17;
  float v18;
  float v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v24[4];
  uint64_t v25;
  char v26;
  _OWORD v27[4];
  uint64_t v28;
  char v29;
  float v30[6];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float (*v45)(uint64_t, float *, float *, uint64_t, float *, float *);
  uint64_t (*v46)(uint64_t, uint64_t, float *);

  physx::Gu::PolygonalBox::PolygonalBox((uint64_t)&v31, (uint64_t)(a1 + 1), a6, a7);
  v15 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0x600000008;
  v37 = 0;
  v38 = &v33;
  v39 = &v32;
  v40 = &gPxcBoxPolygonData;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = v31;
  v45 = HullProjectionCB_Box;
  v46 = SelectClosestEdgeCB_Box;
  v16 = a1[1];
  v17 = a1[2];
  v18 = a1[3];
  v30[0] = -v16;
  v30[1] = -v17;
  v30[2] = -v18;
  v30[3] = v16;
  v19 = a2[1];
  v30[4] = v17;
  v30[5] = v18;
  if (v19 == 1.0 && a2[2] == 1.0)
    v15 = a2[3] == 1.0;
  v20 = xmmword_2260E5F10;
  v27[0] = xmmword_2260E5F10;
  v27[1] = xmmword_2260E5F10;
  v21 = xmmword_2260FD430;
  v22 = xmmword_2260E5F20;
  v27[2] = xmmword_2260FD430;
  v27[3] = xmmword_2260E5F20;
  v28 = 0x3F80000000000000;
  v29 = 0;
  if ((v15 & 1) == 0)
  {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v27, a2 + 1, a2 + 4);
    v22 = xmmword_2260E5F20;
    v21 = xmmword_2260FD430;
    v20 = xmmword_2260E5F10;
  }
  v24[0] = v20;
  v24[1] = v20;
  v24[2] = v21;
  v24[3] = v22;
  v25 = 0x3F80000000000000;
  v26 = 0;
  return contactHullMesh2((uint64_t)&v34, (uint64_t)v30, (uint64_t)a2, a3, a4, a5, a9, (uint64_t)v24, (uint64_t)v27, 1, v15);
}

BOOL physx::Gu::contactConvexHeightfield(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const float *a5, uint64_t a6, uint64_t a7)
{
  char ConvexData;
  float32x4_t v13;
  float32x4_t v14;
  _BYTE v16[104];
  float32x4_t v17;
  float32x2_t v18;
  _OWORD v19[4];
  uint64_t v20;
  char v21;

  v19[0] = xmmword_2260E5F10;
  v19[1] = xmmword_2260E5F10;
  v19[2] = xmmword_2260FD430;
  v19[3] = xmmword_2260E5F20;
  v20 = 0x3F80000000000000;
  v21 = 0;
  ConvexData = physx::Gu::getConvexData(a1, (uint64_t)v19, (uint64_t)&v17, (uint64_t)v16);
  v13 = vld1q_dup_f32(a5);
  v14 = vsubq_f32(v17, v13);
  v14.i32[3] = vaddq_f32(v17, v13).i32[3];
  v17 = v14;
  v18 = vadd_f32(*(float32x2_t *)v13.f32, v18);
  return contactHullHeightfield2((uint64_t)v16, (uint64_t)&v17, a2, a3, a4, (uint64_t)a5, a7, (uint64_t)v19, ConvexData);
}

BOOL contactHullHeightfield2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float32x2_t *v13;
  float v14;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float *v70;
  float v71;
  float v72;
  float *v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  int v107;
  __int128 v109;
  float v110[6];
  float v111[7];
  float v112[7];
  float v113[12];
  float v114[12];
  int32x2_t v115;
  float v116;
  float32x2_t v117;
  float32x2_t *v118;
  void (**v119)(_anonymous_namespace_::ConvexVsHeightfieldContactGenerationCallback *__hidden);
  _BYTE v120[2264];
  int32x2_t *v121;
  _BYTE v122[4360];
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;

  MEMORY[0x24BDAC7A8](a1);
  v10 = v9;
  v12 = v11;
  v125 = *MEMORY[0x24BDAC8D0];
  v117 = v13[1];
  v118 = v13;
  v14 = v13[3].f32[0];
  __asm { FMOV            V2.2S, #1.0 }
  v115 = vrev64_s32((int32x2_t)vdiv_f32(_D2, v13[2]));
  v116 = 1.0 / v14;
  v21 = *(float *)v20;
  _D2.i32[0] = *(_DWORD *)(v20 + 4);
  v22 = *(float *)(v20 + 8);
  v23 = *(float *)(v20 + 12);
  v24 = _D2.f32[0] * (float)(_D2.f32[0] + _D2.f32[0]);
  v25 = v22 * (float)(v22 + v22);
  v26 = (float)(v21 + v21) * _D2.f32[0];
  v27 = (float)(v21 + v21) * v22;
  v28 = (float)(v21 + v21) * v23;
  v29 = (float)(_D2.f32[0] + _D2.f32[0]) * v22;
  v30 = (float)(_D2.f32[0] + _D2.f32[0]) * v23;
  v31 = (float)(v22 + v22) * v23;
  v114[0] = (float)(1.0 - v24) - v25;
  v114[1] = v26 + v31;
  v32 = 1.0 - (float)(v21 * (float)(v21 + v21));
  v114[2] = v27 - v30;
  v114[3] = v26 - v31;
  v114[4] = v32 - v25;
  v114[5] = v29 + v28;
  v33 = v32 - v24;
  v114[6] = v27 + v30;
  v114[7] = v29 - v28;
  v34 = *(float *)(v20 + 16);
  v35 = *(float *)(v20 + 20);
  v114[8] = v33;
  v114[9] = v34;
  v36 = *(float *)(v20 + 24);
  v114[10] = v35;
  v114[11] = v36;
  v37 = *v9;
  v38 = v9[1];
  v39 = v9[2];
  v40 = v9[3];
  v41 = v38 * (float)(v38 + v38);
  v42 = v39 * (float)(v39 + v39);
  v43 = (float)(v37 + v37) * v38;
  v44 = (float)(v37 + v37) * v39;
  v45 = (float)(v37 + v37) * v40;
  v46 = (float)(v38 + v38) * v39;
  v47 = (float)(v38 + v38) * v40;
  v48 = (float)(v39 + v39) * v40;
  v113[0] = (float)(1.0 - v41) - v42;
  v113[1] = v43 + v48;
  v49 = 1.0 - (float)(v37 * (float)(v37 + v37));
  v113[2] = v44 - v47;
  v113[3] = v43 - v48;
  v113[4] = v49 - v42;
  v113[5] = v46 + v45;
  v113[6] = v44 + v47;
  v113[7] = v46 - v45;
  v50 = v9[4];
  v51 = v9[5];
  v113[8] = v49 - v41;
  v113[9] = v50;
  v52 = v9[6];
  v113[10] = v51;
  v113[11] = v52;
  v53 = (float)(v34 - v50) + (float)(v34 - v50);
  v54 = (float)(v35 - v51) + (float)(v35 - v51);
  v55 = (float)(v36 - v52) + (float)(v36 - v52);
  v56 = (float)(v40 * v40) + -0.5;
  v57 = (float)((float)-(float)(v38 * v54) - (float)(v37 * v53)) - (float)(v39 * v55);
  v58 = (float)((float)(v40 * (float)((float)(v39 * v54) - (float)(v38 * v55))) + (float)(v53 * v56))
      - (float)(v37 * v57);
  v59 = (float)((float)(v40 * (float)((float)(v37 * v55) - (float)(v39 * v53))) + (float)(v54 * v56))
      - (float)(v38 * v57);
  v60 = (float)((float)(v40 * (float)((float)(v38 * v53) - (float)(v37 * v54))) + (float)(v55 * v56))
      - (float)(v39 * v57);
  v61 = (float)((float)((float)(v40 * v21) - (float)(v37 * v23)) - (float)(v38 * v22)) + (float)(_D2.f32[0] * v39);
  v62 = (float)((float)((float)(v40 * _D2.f32[0]) - (float)(v38 * v23)) - (float)(v39 * v21)) + (float)(v22 * v37);
  v63 = (float)((float)((float)(v40 * v22) - (float)(v39 * v23)) - (float)(v37 * _D2.f32[0])) + (float)(v21 * v38);
  v64 = (float)((float)((float)(v21 * v37) + (float)(v40 * v23)) + (float)(v38 * _D2.f32[0])) + (float)(v39 * v22);
  v112[0] = v61;
  v112[1] = v62;
  v112[2] = v63;
  v112[3] = v64;
  v112[4] = v58;
  v112[5] = v59;
  v112[6] = v60;
  v65 = (float)(v50 - v34) + (float)(v50 - v34);
  v66 = (float)(v51 - v35) + (float)(v51 - v35);
  v67 = (float)(v52 - v36) + (float)(v52 - v36);
  v68 = (float)(v23 * v23) + -0.5;
  v69 = (float)((float)-(float)(_D2.f32[0] * v66) - (float)(v21 * v65)) - (float)(v22 * v67);
  v111[0] = (float)((float)((float)(v23 * v37) - (float)(v21 * v40)) - (float)(_D2.f32[0] * v39)) + (float)(v38 * v22);
  v111[1] = (float)((float)((float)(v23 * v38) - (float)(_D2.f32[0] * v40)) - (float)(v22 * v37)) + (float)(v39 * v21);
  v111[2] = (float)((float)((float)(v23 * v39) - (float)(v22 * v40)) - (float)(v21 * v38)) + (float)(v37 * _D2.f32[0]);
  v111[3] = v64;
  v111[4] = (float)((float)(v23 * (float)((float)(v22 * v66) - (float)(_D2.f32[0] * v67))) + (float)(v65 * v68))
          - (float)(v21 * v69);
  v111[5] = (float)((float)(v23 * (float)((float)(v21 * v67) - (float)(v22 * v65))) + (float)(v66 * v68))
          - (float)(_D2.f32[0] * v69);
  v111[6] = (float)((float)(v23 * (float)((float)(_D2.f32[0] * v65) - (float)(v21 * v66))) + (float)(v67 * v68))
          - (float)(v22 * v69);
  v124 = 0x44000000000;
  v122[4352] = 1;
  v123 = v122;
  _D2.f32[0] = v70[1];
  v71 = v70[2];
  v72 = *v70;
  v119 = &off_24ED91708;
  *((_QWORD *)&v109 + 1) = v9;
  *(_QWORD *)&v109 = v20;
  v121 = &v115;
  v76 = v12[1];
  v78 = v12[2];
  v77 = v12[3];
  v79 = v12[4];
  v80 = v12[5];
  v81 = (float)((float)(*v12 + v77) * 0.5) + (float)((float)(*v12 + v77) * 0.5);
  v82 = (float)((float)(v76 + v79) * 0.5) + (float)((float)(v76 + v79) * 0.5);
  v83 = (float)((float)(v78 + v80) * 0.5) + (float)((float)(v78 + v80) * 0.5);
  v84 = (float)(v64 * v64) + -0.5;
  v85 = (float)((float)(v62 * v82) + (float)(v61 * v81)) + (float)(v63 * v83);
  v86 = (float)((float)(v64 * (float)((float)(v62 * v83) - (float)(v63 * v82))) + (float)(v81 * v84))
      + (float)(v61 * v85);
  v87 = (float)((float)(v64 * (float)((float)(v63 * v81) - (float)(v61 * v83))) + (float)(v82 * v84))
      + (float)(v62 * v85);
  v88 = (float)((float)(v64 * (float)((float)(v61 * v82) - (float)(v62 * v81))) + (float)(v83 * v84))
      + (float)(v63 * v85);
  v89 = v58 + v86;
  v90 = v59 + v87;
  v91 = v60 + v88;
  v92 = v62 * (float)(v62 + v62);
  v93 = v63 * (float)(v63 + v63);
  v94 = v62 * (float)(v61 + v61);
  v95 = v63 * (float)(v61 + v61);
  v96 = v64 * (float)(v61 + v61);
  v97 = v63 * (float)(v62 + v62);
  v98 = v64 * (float)(v62 + v62);
  v99 = v64 * (float)(v63 + v63);
  v100 = 1.0 - (float)(v61 * (float)(v61 + v61));
  v101 = (float)(v77 - *v12) * 0.5;
  v102 = (float)(v79 - v76) * 0.5;
  v103 = (float)(v80 - v78) * 0.5;
  v104 = (float)(fabsf((float)((float)(1.0 - v92) - v93) * v101) + fabsf((float)(v94 - v99) * v102))
       + fabsf((float)(v95 + v98) * v103);
  v105 = (float)(fabsf((float)(v94 + v99) * v101) + fabsf((float)(v100 - v93) * v102))
       + fabsf((float)(v97 - v96) * v103);
  v106 = (float)(fabsf((float)(v95 - v98) * v101) + fabsf((float)(v96 + v97) * v102))
       + fabsf((float)(v100 - v92) * v103);
  v110[0] = v89 - v104;
  v110[1] = v90 - v105;
  v110[2] = v91 - v106;
  v110[3] = v104 + v89;
  v110[4] = v105 + v90;
  v110[5] = v106 + v91;
  physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v115, v10, v110, 0, (uint64_t)&v119);
  v107 = v120[2256];
  if ((v124 & 0x8000000000000000) == 0 && (v124 & 0x7FFFFFFF00000000) != 0 && v123 != v122 && v123)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return v107 != 0;
}

BOOL physx::Gu::contactBoxHeightfield(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, double a6, int32x4_t a7, uint64_t a8, uint64_t a9)
{
  float v15;
  float v16;
  float v17;
  _OWORD v19[4];
  uint64_t v20;
  char v21;
  float v22[6];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float (*v37)(uint64_t, float *, float *, uint64_t, float *, float *);
  uint64_t (*v38)(uint64_t, uint64_t, float *);

  physx::Gu::PolygonalBox::PolygonalBox((uint64_t)&v23, (uint64_t)(a1 + 1), a6, a7);
  v26 = 0;
  v27 = 0;
  v28 = 0x600000008;
  v29 = 0;
  v30 = &v25;
  v31 = &v24;
  v32 = &gPxcBoxPolygonData;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = v23;
  v37 = HullProjectionCB_Box;
  v38 = SelectClosestEdgeCB_Box;
  v15 = *a5 + a1[1];
  v16 = *a5 + a1[2];
  v17 = *a5 + a1[3];
  v22[0] = -v15;
  v22[1] = -v16;
  v22[2] = -v17;
  v22[3] = v15;
  v22[4] = v16;
  v22[5] = v17;
  v19[0] = xmmword_2260E5F10;
  v19[1] = xmmword_2260E5F10;
  v19[2] = xmmword_2260FD430;
  v19[3] = xmmword_2260E5F20;
  v20 = 0x3F80000000000000;
  v21 = 0;
  return contactHullHeightfield2((uint64_t)&v26, (uint64_t)v22, a2, a3, a4, (uint64_t)a5, a9, (uint64_t)v19, 1);
}

BOOL physx::Gu::contactPlaneBox(uint64_t a1, float *a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v11 = -(float)((float)((float)(v10 * (float)(v10 + v10)) + -1.0) + (float)(v7 * (float)(v7 + v7)));
  v12 = -(float)((float)((float)(v7 + v7) * v8) + (float)(v9 * (float)(v10 + v10)));
  v13 = -(float)((float)((float)(v7 + v7) * v9) + (float)((float)-v8 * (float)(v10 + v10)));
  v14 = *a4;
  v15 = a4[1];
  v16 = a4[2];
  v17 = a4[3];
  v18 = v15 * (float)(v15 + v15);
  v19 = v16 * (float)(v16 + v16);
  v20 = (float)(v14 + v14) * v15;
  v21 = (float)(v14 + v14) * v16;
  v22 = (float)(v14 + v14) * v17;
  v23 = (float)(v15 + v15) * v16;
  v24 = (float)(v15 + v15) * v17;
  v25 = (float)(v16 + v16) * v17;
  v26 = (float)(1.0 - v18) - v19;
  v27 = v20 + v25;
  v28 = v21 - v24;
  v29 = v20 - v25;
  v30 = 1.0 - (float)(v14 * (float)(v14 + v14));
  v31 = v30 - v19;
  v32 = v23 + v22;
  v33 = v21 + v24;
  v34 = v23 - v22;
  v35 = v30 - v18;
  v36 = a4[4];
  v37 = a4[5];
  v38 = a4[6];
  v39 = (float)(v36 - a3[4]) + (float)(v36 - a3[4]);
  v40 = (float)(v37 - a3[5]) + (float)(v37 - a3[5]);
  v41 = (float)(v38 - a3[6]) + (float)(v38 - a3[6]);
  v42 = (float)((float)(v10 * (float)((float)(v9 * v40) - (float)(v8 * v41)))
              + (float)(v39 * (float)((float)(v10 * v10) + -0.5)))
      - (float)(*a3 * (float)((float)((float)-(float)(v8 * v40) - (float)(*a3 * v39)) - (float)(v9 * v41)));
  v43 = (float)((float)((float)(v10 * *a4) - (float)(*a3 * v17)) - (float)(v8 * v16)) + (float)(v15 * v9);
  v44 = (float)((float)((float)(v10 * v15) - (float)(v8 * v17)) - (float)(v9 * *a4)) + (float)(v16 * *a3);
  v45 = (float)((float)((float)(v10 * v16) - (float)(v9 * v17)) - (float)(*a3 * v15)) + (float)(*a4 * v8);
  v46 = (float)((float)((float)(*a3 * *a4) + (float)(v10 * v17)) + (float)(v8 * v15)) + (float)(v9 * v16);
  v47 = (float)(1.0 - (float)(v44 * (float)(v44 + v44))) - (float)(v45 * (float)(v45 + v45));
  v48 = (float)(v44 * (float)(v43 + v43)) - (float)(v46 * (float)(v45 + v45));
  v49 = (float)(v45 * (float)(v43 + v43)) + (float)(v46 * (float)(v44 + v44));
  v50 = *a5;
  v51 = *a5 - v42;
  v52 = a2[1];
  v53 = a2[2];
  v54 = a2[3];
  v55 = v47 * v52;
  v56 = v48 * v53;
  v57 = v49 * v54;
  v58 = (float)(v47 * v52) + v56;
  if (v79 < 0)
  {
    v59 = *(unsigned int *)(a7 + 4096);
    if (v59 <= 0x3F)
    {
      *(_DWORD *)(a7 + 4096) = v59 + 1;
      v60 = a7 + (v59 << 6);
      *(float *)v60 = v11;
      *(float *)(v60 + 4) = v12;
      *(float *)(v60 + 16) = v36 + (float)((float)((float)(v26 * v52) + (float)(v29 * v53)) + (float)(v33 * v54));
      *(float *)(v60 + 20) = v37 + (float)((float)((float)(v27 * v52) + (float)(v31 * v53)) + (float)(v34 * v54));
      *(float *)(v60 + 24) = v38 + (float)((float)((float)(v28 * v52) + (float)(v32 * v53)) + (float)(v35 * v54));
      *(float *)(v60 + 8) = v13;
      *(float *)(v60 + 12) = v50 + (float)((float)(v58 + v57) - v51);
      *(_DWORD *)(v60 + 52) = -1;
    }
  }
  if (v80 < 0)
  {
    v61 = *(unsigned int *)(a7 + 4096);
    if (v61 <= 0x3F)
    {
      *(_DWORD *)(a7 + 4096) = v61 + 1;
      v62 = a7 + (v61 << 6);
      *(float *)v62 = v11;
      *(float *)(v62 + 4) = v12;
      *(float *)(v62 + 16) = v36 + (float)((float)((float)(v26 * v52) + (float)(v29 * v53)) - (float)(v33 * v54));
      *(float *)(v62 + 20) = v37 + (float)((float)((float)(v27 * v52) + (float)(v31 * v53)) - (float)(v34 * v54));
      *(float *)(v62 + 24) = v38 + (float)((float)((float)(v28 * v52) + (float)(v32 * v53)) - (float)(v35 * v54));
      *(float *)(v62 + 8) = v13;
      *(float *)(v62 + 12) = v50 + (float)((float)(v58 - v57) - v51);
      *(_DWORD *)(v62 + 52) = -1;
    }
  }
  v63 = v55 - v56;
  if (v81 < 0)
  {
    v64 = *(unsigned int *)(a7 + 4096);
    if (v64 <= 0x3F)
    {
      *(_DWORD *)(a7 + 4096) = v64 + 1;
      v65 = a7 + (v64 << 6);
      *(float *)v65 = v11;
      *(float *)(v65 + 4) = v12;
      *(float *)(v65 + 16) = v36 + (float)((float)((float)(v26 * v52) - (float)(v29 * v53)) + (float)(v33 * v54));
      *(float *)(v65 + 20) = v37 + (float)((float)((float)(v27 * v52) - (float)(v31 * v53)) + (float)(v34 * v54));
      *(float *)(v65 + 24) = v38 + (float)((float)((float)(v28 * v52) - (float)(v32 * v53)) + (float)(v35 * v54));
      *(float *)(v65 + 8) = v13;
      *(float *)(v65 + 12) = v50 + (float)((float)(v63 + v57) - v51);
      *(_DWORD *)(v65 + 52) = -1;
    }
  }
  if (v82 < 0)
  {
    v66 = *(unsigned int *)(a7 + 4096);
    if (v66 <= 0x3F)
    {
      *(_DWORD *)(a7 + 4096) = v66 + 1;
      v67 = a7 + (v66 << 6);
      *(float *)v67 = v11;
      *(float *)(v67 + 4) = v12;
      *(float *)(v67 + 16) = v36 + (float)((float)((float)(v26 * v52) - (float)(v29 * v53)) - (float)(v33 * v54));
      *(float *)(v67 + 20) = v37 + (float)((float)((float)(v27 * v52) - (float)(v31 * v53)) - (float)(v34 * v54));
      *(float *)(v67 + 24) = v38 + (float)((float)((float)(v28 * v52) - (float)(v32 * v53)) - (float)(v35 * v54));
      *(float *)(v67 + 8) = v13;
      *(float *)(v67 + 12) = v50 + (float)((float)(v63 - v57) - v51);
      *(_DWORD *)(v67 + 52) = -1;
    }
  }
  v68 = v56 - v55;
  if (v83 < 0)
  {
    v69 = *(unsigned int *)(a7 + 4096);
    if (v69 <= 0x3F)
    {
      *(_DWORD *)(a7 + 4096) = v69 + 1;
      v70 = a7 + (v69 << 6);
      *(float *)v70 = v11;
      *(float *)(v70 + 4) = v12;
      *(float *)(v70 + 16) = v36 + (float)((float)((float)(v29 * v53) - (float)(v26 * v52)) + (float)(v33 * v54));
      *(float *)(v70 + 20) = v37 + (float)((float)((float)(v31 * v53) - (float)(v27 * v52)) + (float)(v34 * v54));
      *(float *)(v70 + 24) = v38 + (float)((float)((float)(v32 * v53) - (float)(v28 * v52)) + (float)(v35 * v54));
      *(float *)(v70 + 8) = v13;
      *(float *)(v70 + 12) = v50 + (float)((float)(v68 + v57) - v51);
      *(_DWORD *)(v70 + 52) = -1;
    }
  }
  v71 = -(float)(v47 * v52);
  if (v84 < 0)
  {
    v72 = *(unsigned int *)(a7 + 4096);
    if (v72 <= 0x3F)
    {
      *(_DWORD *)(a7 + 4096) = v72 + 1;
      v73 = a7 + (v72 << 6);
      *(float *)v73 = v11;
      *(float *)(v73 + 4) = v12;
      *(float *)(v73 + 16) = v36 + (float)((float)((float)(v29 * v53) - (float)(v26 * v52)) - (float)(v33 * v54));
      *(float *)(v73 + 20) = v37 + (float)((float)((float)(v31 * v53) - (float)(v27 * v52)) - (float)(v34 * v54));
      *(float *)(v73 + 24) = v38 + (float)((float)((float)(v32 * v53) - (float)(v28 * v52)) - (float)(v35 * v54));
      *(float *)(v73 + 8) = v13;
      *(float *)(v73 + 12) = v50 + (float)((float)(v68 - v57) - v51);
      *(_DWORD *)(v73 + 52) = -1;
    }
  }
  v74 = v71 - v56;
  v75 = *(unsigned int *)(a7 + 4096);
  if (v85 < 0)
  {
    if (v75 > 0x3F)
      return (_DWORD)v75 != 0;
    v76 = a7 + (v75 << 6);
    LODWORD(v75) = v75 + 1;
    *(_DWORD *)(a7 + 4096) = v75;
    *(float *)v76 = v11;
    *(float *)(v76 + 4) = v12;
    *(float *)(v76 + 16) = v36 + (float)((float)((float)-(float)(v53 * v29) - (float)(v26 * v52)) + (float)(v33 * v54));
    *(float *)(v76 + 20) = v37 + (float)((float)((float)-(float)(v53 * v31) - (float)(v27 * v52)) + (float)(v34 * v54));
    *(float *)(v76 + 24) = v38 + (float)((float)((float)-(float)(v53 * v32) - (float)(v28 * v52)) + (float)(v35 * v54));
    *(float *)(v76 + 8) = v13;
    *(float *)(v76 + 12) = v50 + (float)((float)(v74 + v57) - v51);
    *(_DWORD *)(v76 + 52) = -1;
  }
  if (v86 < 0 && v75 <= 0x3F)
  {
    *(_DWORD *)(a7 + 4096) = v75 + 1;
    v77 = a7 + ((unint64_t)v75 << 6);
    *(float *)v77 = v11;
    *(float *)(v77 + 4) = v12;
    *(float *)(v77 + 16) = v36 + (float)((float)((float)-(float)(v53 * v29) - (float)(v26 * v52)) - (float)(v33 * v54));
    *(float *)(v77 + 20) = v37 + (float)((float)((float)-(float)(v53 * v31) - (float)(v27 * v52)) - (float)(v34 * v54));
    *(float *)(v77 + 24) = v38 + (float)((float)((float)-(float)(v53 * v32) - (float)(v28 * v52)) - (float)(v35 * v54));
    *(float *)(v77 + 8) = v13;
    *(float *)(v77 + 12) = v50 + (float)((float)(v74 - v57) - v51);
    *(_DWORD *)(v77 + 52) = -1;
    LODWORD(v75) = 1;
  }
  return (_DWORD)v75 != 0;
}

BOOL physx::Gu::contactPlaneCapsule(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  _BOOL8 result;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;

  v7 = *a3;
  v8 = a3[1];
  v9 = -*a3;
  v10 = -v8;
  v12 = a3[2];
  v11 = a3[3];
  v13 = a3[4];
  v14 = a3[5];
  v15 = a3[6];
  v16 = (float)(a4[4] - v13) + (float)(a4[4] - v13);
  v17 = (float)(a4[5] - v14) + (float)(a4[5] - v14);
  v18 = (float)(a4[6] - v15) + (float)(a4[6] - v15);
  v19 = (float)(v11 * v11) + -0.5;
  v20 = (float)((float)-(float)(v8 * v17) - (float)(*a3 * v16)) - (float)(v12 * v18);
  v21 = (float)((float)(v11 * (float)((float)(v12 * v17) - (float)(v8 * v18))) + (float)(v16 * v19))
      - (float)(*a3 * v20);
  v22 = (float)((float)(v11 * (float)((float)(*a3 * v18) - (float)(v12 * v16))) + (float)(v17 * v19))
      - (float)(v8 * v20);
  v23 = (float)((float)(v11 * (float)((float)(v8 * v16) - (float)(*a3 * v17))) + (float)(v18 * v19))
      - (float)(v12 * v20);
  v25 = a4[2];
  v24 = a4[3];
  v26 = a4[1];
  v27 = (float)((float)((float)(v11 * *a4) - (float)(*a3 * v24)) - (float)(v8 * v25)) + (float)(v26 * v12);
  v28 = (float)((float)((float)(v11 * v26) - (float)(v8 * v24)) - (float)(v12 * *a4)) + (float)(v25 * *a3);
  v29 = (float)((float)((float)(v11 * v25) - (float)(v12 * v24)) - (float)(*a3 * v26)) + (float)(*a4 * v8);
  v30 = (float)((float)((float)(*a3 * *a4) + (float)(v11 * v24)) + (float)(v8 * v26)) + (float)(v12 * v25);
  v31 = v27 + v27;
  v32 = v30 + v30;
  v33 = (float)((float)(v30 * (float)(v30 + v30)) + -1.0) + (float)(v27 * (float)(v27 + v27));
  v34 = (float)(v28 * (float)(v27 + v27)) + (float)(v29 * v32);
  v35 = (float)(v29 * v31) - (float)(v28 * v32);
  v37 = *(float *)(a2 + 4);
  v36 = *(float *)(a2 + 8);
  v38 = v36 * v33;
  v39 = v36 * v34;
  v40 = v36 * v35;
  v41 = v21 + v38;
  v42 = v21 - v38;
  v43 = (float)((float)(v11 * (float)(v11 + v11)) + -1.0) + (float)(v7 * (float)(v7 + v7));
  v44 = (float)(v8 * (float)(v7 + v7)) + (float)(v12 * (float)(v11 + v11));
  v45 = (float)((float)(v7 + v7) * v12) - (float)(v8 * (float)(v11 + v11));
  v46 = -v12;
  v47 = v41 - v37;
  v48 = v42 - v37;
  v49 = *a5;
  result = v47 <= *a5;
  if (v47 <= *a5)
  {
    v51 = *(unsigned int *)(a7 + 4096);
    if (v51 <= 0x3F)
    {
      v52 = (float)(v23 + v40) + (float)(v23 + v40);
      v53 = (float)(v22 + v39) + (float)(v22 + v39);
      v54 = (float)((float)(v8 * v53) + (float)(v7 * (float)(v47 + v47))) + (float)(v12 * v52);
      *(_DWORD *)(a7 + 4096) = v51 + 1;
      v55 = a7 + (v51 << 6);
      *(float *)v55 = -v43;
      *(float *)(v55 + 4) = -v44;
      *(float *)(v55 + 16) = v13
                           + (float)((float)((float)(v11 * (float)((float)(v53 * v46) + (float)(v8 * v52)))
                                           + (float)((float)(v47 + v47) * v19))
                                   + (float)(v7 * v54));
      *(float *)(v55 + 20) = v14
                           + (float)((float)((float)(v11 * (float)((float)(v52 * v9) + (float)(v12 * (float)(v47 + v47))))
                                           + (float)(v53 * v19))
                                   + (float)(v8 * v54));
      *(float *)(v55 + 24) = v15
                           + (float)((float)((float)(v11 * (float)((float)((float)(v47 + v47) * v10) + (float)(v7 * v53)))
                                           + (float)(v52 * v19))
                                   + (float)(v12 * v54));
      *(float *)(v55 + 8) = -v45;
      *(float *)(v55 + 12) = v47;
      *(_DWORD *)(v55 + 52) = -1;
    }
  }
  if (v48 <= v49)
  {
    v56 = *(unsigned int *)(a7 + 4096);
    if (v56 <= 0x3F)
    {
      v57 = v22 - v39;
      v58 = (float)(v23 - v40) + (float)(v23 - v40);
      v59 = v57 + v57;
      v60 = (float)((float)(v8 * v59) + (float)(v7 * (float)(v48 + v48))) + (float)(v12 * v58);
      v61 = (float)((float)(v11 * (float)((float)((float)(v48 + v48) * v10) + (float)(v7 * v59))) + (float)(v58 * v19))
          + (float)(v12 * v60);
      v62 = a3[4];
      v63 = (float)((float)((float)(v11 * (float)((float)(v58 * v9) + (float)(v12 * (float)(v48 + v48))))
                          + (float)(v59 * v19))
                  + (float)(v8 * v60))
          + a3[5];
      v64 = a3[6];
      *(_DWORD *)(a7 + 4096) = v56 + 1;
      v65 = a7 + (v56 << 6);
      *(float *)v65 = -v43;
      *(float *)(v65 + 4) = -v44;
      *(float *)(v65 + 16) = (float)((float)((float)(v11 * (float)((float)(v59 * v46) + (float)(v8 * v58)))
                                           + (float)((float)(v48 + v48) * v19))
                                   + (float)(v7 * v60))
                           + v62;
      *(float *)(v65 + 20) = v63;
      *(float *)(v65 + 24) = v61 + v64;
      *(float *)(v65 + 8) = -v45;
      *(float *)(v65 + 12) = v48;
      *(_DWORD *)(v65 + 52) = -1;
    }
    return 1;
  }
  return result;
}

uint64_t physx::Gu::contactPlaneConvex(uint64_t a1, float *a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  BOOL v11;
  float *v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  char v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float *v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  unint64_t v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  uint64_t v137;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  char v155;

  v11 = 0;
  v13 = a2[1];
  v12 = a2 + 1;
  v14 = *(_QWORD *)(v12 + 11);
  if (v13 == 1.0 && v12[1] == 1.0)
    v11 = a2[3] == 1.0;
  v16 = *a3;
  v15 = a3[1];
  v17 = a3[2];
  v18 = a3[3];
  v19 = *a4;
  v20 = a4[1];
  v21 = a4[4];
  v22 = a4[5];
  v23 = a3[4];
  v24 = a3[5];
  v25 = a4[6];
  v26 = a3[6];
  v27 = a4[2];
  v28 = a4[3];
  v29 = *(unsigned __int8 *)(v14 + 39);
  v30 = *(_QWORD *)(v14 + 40);
  v31 = *(unsigned __int8 *)(v14 + 38);
  v32 = 0.0;
  v148 = v24;
  v149 = v26;
  v147 = v23;
  v33 = v18;
  v34 = v17;
  v35 = v15;
  v150 = xmmword_2260E5F10;
  v151 = xmmword_2260E5F10;
  v36 = 1.0;
  v37 = 0.0;
  v38 = 0.0;
  v152 = xmmword_2260FD430;
  v153 = xmmword_2260E5F20;
  v39 = 1.0;
  v40 = 0.0;
  v41 = 0.0;
  v154 = 0x3F80000000000000;
  v42 = 0.0;
  v43 = 1.0;
  v155 = 0;
  if (!v11)
  {
    v143 = v17;
    v145 = v21;
    v139 = v19;
    v140 = v16;
    v44 = v22;
    v141 = v20;
    v142 = v15;
    v45 = v27;
    v46 = v28;
    v47 = v24;
    v48 = v23;
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)&v150, v12, a2 + 4);
    v23 = v48;
    v24 = v47;
    v28 = v46;
    v15 = v142;
    v17 = v143;
    v27 = v45;
    v16 = v140;
    v20 = v141;
    v22 = v44;
    v19 = v139;
    v42 = *((float *)&v150 + 1);
    v43 = *(float *)&v150;
    v40 = *((float *)&v150 + 3);
    v41 = *((float *)&v150 + 2);
    v38 = *((float *)&v151 + 1);
    v39 = *(float *)&v151;
    v32 = *((float *)&v151 + 3);
    v37 = *((float *)&v151 + 2);
    v36 = *(float *)&v152;
    v35 = a3[1];
    v34 = a3[2];
    v33 = a3[3];
    v147 = a3[4];
    v148 = a3[5];
    v149 = a3[6];
    v21 = v145;
  }
  v49 = 0;
  if (v31)
  {
    v50 = (float)(v21 - v23) + (float)(v21 - v23);
    v51 = (float)(v22 - v24) + (float)(v22 - v24);
    v52 = (float)(v25 - v26) + (float)(v25 - v26);
    v53 = (float)((float)((float)(v18 * v19) - (float)(v16 * v28)) - (float)(v15 * v27)) + (float)(v20 * v17);
    v54 = (float)((float)((float)(v18 * v20) - (float)(v15 * v28)) - (float)(v17 * v19)) + (float)(v27 * v16);
    v55 = (float)((float)((float)(v18 * v27) - (float)(v17 * v28)) - (float)(v16 * v20)) + (float)(v19 * v15);
    v56 = v54 + v54;
    v144 = v33;
    v57 = v35;
    v58 = (float)((float)((float)(v16 * v19) + (float)(v18 * v28)) + (float)(v15 * v20)) + (float)(v17 * v27);
    v59 = v55 + v55;
    v60 = v54 * (float)(v54 + v54);
    v61 = (float)(v18 * v18) + -0.5;
    v62 = v18 * (float)((float)(v17 * v51) - (float)(v15 * v52));
    v63 = v18 * (float)((float)(v16 * v52) - (float)(v17 * v50));
    v64 = v18 * (float)((float)(v15 * v50) - (float)(v16 * v51));
    v65 = (float)(v53 + v53) * v54;
    v66 = v55 * (float)(v53 + v53);
    v67 = v58 * (float)(v53 + v53);
    v68 = v55 * (float)(v55 + v55);
    v69 = v55 * v56;
    v70 = v58 * v56;
    v71 = v58 * v59;
    v72 = (float)-(float)(v15 * v51) - (float)(v16 * v50);
    v73 = v62 + (float)(v50 * v61);
    v74 = v63 + (float)(v51 * v61);
    v75 = v64 + (float)(v52 * v61);
    v76 = v72 - (float)(v17 * v52);
    v77 = v65 + v71;
    v78 = v65 - v71;
    v79 = v66 - v70;
    v80 = v66 + v70;
    v81 = v67 + v69;
    v82 = v69 - v67;
    v83 = 1.0 - (float)(v53 * (float)(v53 + v53));
    v84 = (float)(1.0 - v60) - v68;
    v85 = v83 - v68;
    v86 = v83 - v60;
    v87 = v73 - (float)(v16 * v76);
    v146 = v74 - (float)(v15 * v76);
    v88 = v75 - (float)(v17 * v76);
    v89 = v84 * v43;
    v90 = (float)(v85 * v42) + (float)(v77 * v43);
    v91 = (float)(v81 * v42) + (float)(v79 * v43);
    v92 = v82 * v41;
    v93 = v86 * v41;
    v94 = (float)(v80 * v41) + (float)((float)(v78 * v42) + v89);
    v95 = v92 + v90;
    v96 = v93 + v91;
    v97 = (float)(v85 * v39) + (float)(v77 * v40);
    v98 = (float)(v81 * v39) + (float)(v79 * v40);
    v99 = (float)(v80 * v38) + (float)((float)(v78 * v39) + (float)(v84 * v40));
    v100 = (float)(v82 * v38) + v97;
    v101 = (float *)(v30 + 20 * v29);
    v102 = (float)(v86 * v38) + v98;
    v103 = (float)(v85 * v32) + (float)(v77 * v37);
    v104 = v86 * v36;
    v105 = (float)(v80 * v36) + (float)((float)(v78 * v32) + (float)(v84 * v37));
    v106 = (float)(v82 * v36) + v103;
    v107 = v104 + (float)((float)(v81 * v32) + (float)(v79 * v37));
    v108 = *a3;
    v109 = v108 * (float)(v108 + v108);
    v110 = v57 * (float)(v57 + v57);
    v111 = v34 * (float)(v34 + v34);
    v112 = v57 * (float)(v108 + v108);
    v113 = v34 * (float)(v108 + v108);
    v114 = v144 * (float)(v108 + v108);
    v115 = v34 * (float)(v57 + v57);
    v116 = v144 * (float)(v57 + v57);
    v117 = v144 * (float)(v34 + v34);
    v118 = (float)(1.0 - v110) - v111;
    v119 = v117 + v112;
    v120 = v113 - v116;
    v121 = v112 - v117;
    v122 = 1.0 - v109;
    v123 = (float)(1.0 - v109) - v111;
    v124 = v115 + v114;
    v125 = v116 + v113;
    v126 = v115 - v114;
    v127 = v122 - v110;
    v128 = -(float)(v113 - v116);
    v129 = *a5;
    v130 = *(unsigned int *)(a7 + 4096);
    do
    {
      v131 = *v101;
      v132 = v101[1];
      v133 = v101[2];
      v134 = v87 + (float)((float)((float)(v94 * *v101) + (float)(v99 * v132)) + (float)(v105 * v133));
      if (v134 <= v129)
      {
        if (v130 <= 0x3F)
        {
          v135 = v146 + (float)((float)((float)(v95 * v131) + (float)(v100 * v132)) + (float)(v106 * v133));
          v136 = v88 + (float)((float)((float)(v96 * v131) + (float)(v102 * v132)) + (float)(v107 * v133));
          v137 = a7 + (v130++ << 6);
          *(_DWORD *)(a7 + 4096) = v130;
          *(float *)v137 = -v118;
          *(float *)(v137 + 4) = -v119;
          *(float *)(v137 + 16) = v147
                                + (float)((float)(v125 * v136) + (float)((float)(v118 * v134) + (float)(v121 * v135)));
          *(float *)(v137 + 20) = v148
                                + (float)((float)(v126 * v136) + (float)((float)(v119 * v134) + (float)(v123 * v135)));
          *(float *)(v137 + 24) = v149
                                + (float)((float)(v127 * v136) + (float)((float)(v120 * v134) + (float)(v124 * v135)));
          *(float *)(v137 + 8) = v128;
          *(float *)(v137 + 12) = v134;
          *(_DWORD *)(v137 + 52) = -1;
        }
        v49 = 1;
      }
      v101 += 3;
      --v31;
    }
    while (v31);
  }
  return v49 & 1;
}

float physx::Gu::findRotationMatrixFromZ(float *a1, float *a2)
{
  float v2;
  uint64_t v3;
  float result;
  float v5;
  float v6;
  float v7;
  float v8;
  float *v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23[2];
  float v24;
  uint64_t v25;
  int v26;

  v2 = a2[2];
  if (fabsf(v2) <= 0.9999)
  {
    v17 = *a2;
    v16 = a2[1];
    v18 = 1.0 / (float)(v2 + 1.0);
    v19 = -(float)(v16 * v18);
    v20 = v19 * *a2;
    v21 = (float)(v18 * 0.0) * *a2;
    v22 = *a2 + (float)(v19 * 0.0);
    *a1 = v2 - (float)(v19 * v16);
    a1[1] = v20 + 0.0;
    a1[6] = v22;
    a1[7] = v16 + v21;
    a1[2] = (float)(v19 * 0.0) - v17;
    a1[3] = v20;
    a1[4] = v2 + (float)((float)(v18 * v17) * v17);
    a1[5] = v21 - v16;
    result = v2 + (float)((float)(v18 * 0.0) * 0.0);
    a1[8] = result;
  }
  else
  {
    v3 = 0;
    v25 = 0x3F80000000000000;
    v26 = -1082130432;
    result = 1.0;
    v5 = 1.0 - a2[1];
    v23[0] = 0.0 - *a2;
    v23[1] = v5;
    v24 = 0.0 - v2;
    v6 = 2.0 / (float)((float)((float)(v5 * v5) + (float)(v23[0] * v23[0])) + (float)(v24 * v24));
    v7 = (float)((float)(v5 + (float)(v23[0] * 0.0)) - (float)(0.0 - v2)) * v6;
    v8 = -v6;
    v9 = a1;
    do
    {
      v10 = 0;
      v11 = -*((float *)&v25 + v3);
      v12 = v23[v3];
      v13 = v12 * v8;
      v14 = v7 * v12;
      v15 = v9;
      do
      {
        *v15 = (float)((float)(v13 * v23[v10]) + (float)(v11 * *(float *)((char *)&v25 + v10 * 4)))
             + (float)(v14 * *(float *)((char *)&v25 + v10 * 4));
        v15 += 3;
        ++v10;
      }
      while (v10 != 3);
      a1[3 * v3 + v3] = a1[3 * v3 + v3] + 1.0;
      ++v3;
      ++v9;
    }
    while (v3 != 3);
  }
  return result;
}

uint64_t physx::Gu::contactPolygonPolygonExt(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, float *a5, float *a6, unsigned int a7, uint64_t a8, float a9, unsigned __int8 *a10, uint64_t a11, float *a12, float *a13, float *a14, uint64_t a15, float *a16, __int32 a17, uint64_t a18, unsigned __int8 a19, uint64_t a20)
{
  unsigned int v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  size_t v28;
  size_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  float v39;
  float *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  float *v62;
  float *v63;
  float v64;
  float *v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  float32x2_t *v76;
  unsigned int v77;
  float v78;
  float v79;
  float32_t v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  float *v86;
  uint64_t v87;
  float *v88;
  float *v89;
  uint64_t v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  int v100;
  float v101;
  float v102;
  float v103;
  uint64_t v104;
  float v105;
  float v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  _BYTE *v109;
  unsigned int v110;
  float *v111;
  float v112;
  float *v113;
  float v114;
  float *v115;
  float v116;
  _BOOL4 v117;
  float v118;
  uint64_t v119;
  uint64_t v120;
  float32x2_t *v121;
  unsigned int v122;
  float v123;
  float v124;
  float32_t v125;
  char *v126;
  char *v127;
  char v128;
  unsigned __int8 *v129;
  unsigned __int8 *v131;
  float *v132;
  float v133;
  float v134;
  float v135;
  float32x2_t v136;
  float32x2_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float *v140;
  size_t v141;
  float v142;
  uint64_t v143;
  unsigned int v144;
  float *v145;
  float v146;
  float v147;
  float v148;
  uint64_t v149;
  int8x8_t v150;
  uint64_t v151;
  uint64_t v152;
  const float *v153;
  const float *v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  uint64_t v178;
  uint64_t v179;
  float *v180;
  float *v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  uint64_t v202;
  float32x2_t *v203;
  float v204;
  float v205;
  float32_t v206;
  uint64_t v207;
  float *v208;
  uint64_t v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  int8x8_t v221;
  size_t v222;
  unsigned __int8 *v223;
  _BYTE *v224;
  size_t v225;
  unsigned int v226;
  char *v227;
  char *v228;
  unsigned __int8 *v229;
  float *v230;
  unsigned __int8 *v231;
  uint64_t v232;
  uint64_t v233;
  float v234;
  int8x8_t v235;
  float *v236;
  unsigned int v237;
  __int32 v238;
  float v239;
  float v240;
  float v241;
  uint64_t v242;
  float v243;
  int v244;
  unsigned int v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  unsigned int v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  int v257;
  float *v258;
  unsigned int v259;
  const float *v260;
  float v261[3];
  float v262[3];
  uint64_t v263;
  _BYTE v264[4];
  uint64_t v265;

  v248 = a8;
  v230 = a5;
  v233 = a4;
  v243 = a9;
  v23 = a1;
  v242 = a20;
  v258 = a13;
  v232 = a11;
  v265 = *MEMORY[0x24BDAC8D0];
  v24 = *a14;
  v245 = a19;
  v231 = a10;
  v236 = a6;
  if (a19)
  {
    v241 = -v24;
    v26 = a14[1];
    v25 = a14[2];
    v240 = -v26;
    v239 = -v25;
  }
  else
  {
    v26 = a14[1];
    v25 = a14[2];
    v241 = v24;
    v240 = v26;
    v239 = v25;
  }
  v238 = a17;
  MEMORY[0x24BDAC7A8](a1);
  v260 = (const float *)((char *)&v207 - v27);
  bzero((char *)&v207 - v27, v28);
  v249 = v23;
  v29 = v23;
  MEMORY[0x24BDAC7A8](v30);
  v259 = a7;
  v31 = (char *)&v207 - ((v23 + 15) & 0x1FFFFFFF0);
  bzero(v31, v23);
  MEMORY[0x24BDAC7A8](v32);
  v33 = v31;
  bzero(v31, v23);
  v34 = v259;
  MEMORY[0x24BDAC7A8](v35);
  v36 = (v34 + 15) & 0x1FFFFFFF0;
  v228 = (char *)&v207 - v36;
  bzero((char *)&v207 - v36, v34);
  MEMORY[0x24BDAC7A8](v37);
  v38 = v259;
  v227 = (char *)&v207 - v36;
  bzero((char *)&v207 - v36, v34);
  v39 = *(float *)(a18 + 4096);
  v262[0] = 0.0;
  v261[0] = 0.0;
  v263 = 0;
  v246 = a18;
  v229 = a3;
  if (v38 < 3)
    goto LABEL_18;
  v40 = (float *)v232;
  v41 = (float)((float)(v26 * v40[1]) + (float)(*v40 * v24)) + (float)(v40[2] * v25);
  v42 = (float)((float)(v26 * v40[7]) + (float)(v40[6] * v24)) + (float)(v40[8] * v25);
  v43 = *a12;
  v44 = a12[1];
  v255 = (float)((float)(v26 * v40[4]) + (float)(v40[3] * v24)) + (float)(v40[5] * v25);
  v256 = v41;
  v45 = (float)-(float)(v255 * v44) - (float)(v41 * v43);
  v46 = a12[2];
  v254 = v42;
  v47 = v45 - (float)(v42 * v46);
  if (v47 < 0.0000001)
  {
LABEL_18:
    bzero(v31, v29);
    bzero(v31, v29);
    v81 = a18;
    *(float *)&v247 = 0.0;
    v82 = 0;
  }
  else
  {
    v222 = v34;
    v253 = *(float *)a15;
    v48 = *(float *)(a15 + 8);
    v252 = *(float *)(a15 + 4);
    v49 = v258[6];
    v50 = v258[7];
    v51 = v258[8];
    v52 = *(float *)(a15 + 16);
    v251 = *(float *)(a15 + 12);
    v235.i32[0] = *(_DWORD *)(a15 + 20);
    v53 = *(float *)(a15 + 28);
    v250 = *(float *)(a15 + 24);
    v221.i32[0] = *(_DWORD *)(a15 + 32);
    v54 = *(float *)(a15 + 40);
    v247 = *(int *)(a15 + 36);
    v220 = *(float *)(a15 + 44);
    v226 = *((unsigned int *)a12 + 3);
    transformVertices(v262, v261, (float *)&v263 + 1, (float *)&v263, (uint64_t)v260, v38, v248, v231, v258);
    v225 = v29;
    v224 = v31;
    v223 = v31;
    v234 = v39;
    if (v249)
    {
      *(float *)&v257 = 0.0;
      *(float *)&v244 = 0.0;
      *(float *)&v237 = 0.0;
      v253 = (float)((float)(v252 * v50) + (float)(v49 * v253)) + (float)(v51 * v48);
      v252 = (float)((float)(v50 * v52) + (float)(v49 * v251)) + (float)(v51 * *(float *)v235.i32);
      v251 = (float)((float)(v50 * v53) + (float)(v49 * v250)) + (float)(v51 * *(float *)v221.i32);
      v250 = (float)((float)(v50 * v54) + (float)(v49 * *(float *)&v247)) + (float)(v51 * v220);
      v55 = 1.0 / v47;
      v56 = *(float *)&v226;
      *(float *)&v247 = -*(float *)&v226;
      v57 = v262[0];
      v58 = v261[0];
      v59 = v263;
      v60 = a3;
      v235 = (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v245), 0x1FuLL));
      do
      {
        v61 = a2;
        v62 = (float *)(a2 + 12 * *v60);
        v63 = v62 + 1;
        v64 = v62[1];
        v65 = v62 + 2;
        v66 = v62[2];
        v67 = v250 + (float)((float)((float)(v252 * v64) + (float)(*v62 * v253)) + (float)(v66 * v251));
        v68 = v56;
        v69 = v55 * (float)(v56 + v67);
        v70 = (float)(v256 * v69)
            + (float)((float)((float)((float)(*v62 * *(float *)a15) + (float)(v64 * *(float *)(a15 + 12)))
                            + (float)(v66 * *(float *)(a15 + 24)))
                    + *(float *)(a15 + 36));
        v71 = (float)(v255 * v69)
            + (float)((float)((float)((float)(*v62 * *(float *)(a15 + 4)) + (float)(v64 * *(float *)(a15 + 16)))
                            + (float)(v66 * *(float *)(a15 + 28)))
                    + *(float *)(a15 + 40));
        v72 = (float)(v254 * v69)
            + (float)((float)((float)((float)(*v62 * *(float *)(a15 + 8)) + (float)(v64 * *(float *)(a15 + 20)))
                            + (float)(v66 * *(float *)(a15 + 32)))
                    + *(float *)(a15 + 44));
        v73 = PointInConvexPolygon2D_OutCodes(v260, v259, (float)((float)((float)(v71 * v258[1]) + (float)(*v258 * v70)) + (float)(v258[2] * v72)) - v57, (float)((float)((float)(v71 * v258[4]) + (float)(v258[3] * v70)) + (float)(v258[5] * v72)) - v58, *((float *)&v59 + 1), *(float *)&v59, v33);
        *v31 = v73;
        if (v73 && (++v257, v67 < *(float *)&v247))
        {
          v56 = v68;
          if (LODWORD(v39) <= 0x3F)
          {
            v74 = LODWORD(v39);
            ++LODWORD(v39);
            v75 = v246;
            *(float *)(v246 + 4096) = v39;
            v76 = (float32x2_t *)(v75 + (v74 << 6));
            v77 = v237;
            v264[v237] = *v60;
            v78 = v240;
            v76->f32[0] = v241;
            v76->f32[1] = v78;
            v76[1].f32[0] = v239;
            v79 = *(float *)(v242 + 8);
            if (!v245)
              v79 = 0.0;
            v80 = (float)((float)((float)((float)(*v62 * *(float *)(v233 + 8)) + (float)(*v63 * *(float *)(v233 + 20)))
                                + (float)(*v65 * *(float *)(v233 + 32)))
                        + *(float *)(v233 + 44))
                + v79;
            v76[2] = vadd_f32(vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v233, *v62), vmul_n_f32(*(float32x2_t *)(v233 + 12), *v63)), vmul_n_f32(*(float32x2_t *)(v233 + 24), *v65)), *(float32x2_t *)(v233 + 36)), (float32x2_t)vand_s8(*(int8x8_t *)v242, v235));
            v76[3].f32[0] = v80;
            v76[1].f32[1] = v69 + v243;
            v76[6].i32[1] = v238;
            v244 = 1;
            v237 = v77 + 1;
          }
          else
          {
            v244 = 1;
          }
        }
        else
        {
          v56 = v68;
        }
        ++v31;
        ++v33;
        ++v60;
        --v29;
        a2 = v61;
      }
      while (v29);
    }
    else
    {
      *(float *)&v244 = 0.0;
      *(float *)&v257 = 0.0;
    }
    v247 = v244 & 1;
    v81 = v246;
    v29 = v225;
    v31 = v224;
    v33 = v223;
    v34 = v222;
    v39 = v234;
    v82 = v257;
  }
  v83 = v249;
  if (v82 == v249)
  {
    v84 = LODWORD(v39);
    v85 = v249;
    v86 = v236;
    v87 = a2;
LABEL_40:
    ContactReductionAllIn(v81, v84, v85, v86, v87, (uint64_t)v264);
    v128 = v247;
    return v128 & 1;
  }
  v88 = a16;
  v89 = v236;
  v90 = v81;
  ContactReductionAllIn(v81, LODWORD(v39), v82, v236, a2, (uint64_t)v264);
  if (v83 < 3)
  {
    v126 = v228;
    bzero(v228, v34);
    v127 = v227;
    bzero(v227, v34);
    v128 = v247;
    v129 = v229;
  }
  else
  {
    v223 = v33;
    v224 = v31;
    v225 = v29;
    v91 = *(float *)(v90 + 4096);
    v250 = *v89;
    v216 = v89[1];
    v92 = *a16;
    v93 = a16[1];
    v215 = v89[2];
    v213 = v89[3];
    v211 = v89[4];
    v212 = v89[5];
    v219 = v89[6];
    v221.i32[0] = (__int32)v89[7];
    v234 = v89[8];
    v94 = a16[2];
    v95 = a16[3];
    v96 = a16[4];
    v97 = a16[5];
    v98 = a16[7];
    v251 = a16[6];
    v99 = a16[8];
    v214 = a16[9];
    v210 = a16[10];
    v217 = a16[11];
    v218 = v230[3];
    v209 = a2;
    transformVertices(v262, v261, (float *)&v263 + 1, (float *)&v263, (uint64_t)v260, v83, a2, v229, v89);
    v208 = a16;
    v222 = v34;
    v220 = v91;
    v100 = 0;
    if (v259)
    {
      *(float *)&v226 = 0.0;
      *(float *)&v257 = (float)((float)(v216 * v93) + (float)(v250 * v92)) + (float)(v215 * v94);
      v256 = (float)((float)(v93 * v211) + (float)(v213 * v92)) + (float)(v212 * v94);
      *(float *)&v244 = (float)((float)(v93 * *(float *)v221.i32) + (float)(v219 * v92)) + (float)(v234 * v94);
      v255 = (float)((float)(v216 * v96) + (float)(v250 * v95)) + (float)(v215 * v97);
      v254 = (float)((float)(v211 * v96) + (float)(v213 * v95)) + (float)(v212 * v97);
      *(float *)&v237 = (float)((float)(*(float *)v221.i32 * v96) + (float)(v219 * v95)) + (float)(v234 * v97);
      v253 = (float)((float)(v216 * v98) + (float)(v250 * v251)) + (float)(v215 * v99);
      v252 = (float)((float)(v211 * v98) + (float)(v213 * v251)) + (float)(v212 * v99);
      *(float *)&v236 = (float)((float)(*(float *)v221.i32 * v98) + (float)(v219 * v251)) + (float)(v234 * v99);
      v101 = v218;
      *(float *)v235.i32 = -v218;
      v251 = v262[0];
      v102 = (float)(v216 * v210) + (float)(v250 * v214);
      v250 = v261[0];
      v103 = v102 + (float)(v215 * v217);
      v104 = v263;
      v105 = (float)((float)(v211 * v210) + (float)(v213 * v214)) + (float)(v212 * v217);
      v106 = *(float *)v221.i32 * v210;
      v221 = (int8x8_t)vcgez_s32(vshl_n_s32(vdup_n_s32(v245), 0x1FuLL));
      v107 = v231;
      v108 = (unsigned __int8 *)v227;
      v109 = v228;
      v110 = LODWORD(v91);
      v234 = (float)(v106 + (float)(v219 * v214)) + (float)(v234 * v217);
      v87 = v248;
      do
      {
        v111 = (float *)(v87 + 12 * *v107);
        v112 = *v111;
        v113 = v111 + 1;
        v114 = v111[1];
        v115 = v111 + 2;
        v116 = v111[2];
        v117 = PointInConvexPolygon2D_OutCodes(v260, v249, (float)(v103+ (float)((float)((float)(v255 * v114) + (float)(*v111 * *(float *)&v257)) + (float)(v116 * v253)))- v251, (float)(v105 + (float)((float)((float)(v254 * v114) + (float)(*v111 * v256)) + (float)(v116 * v252)))- v250, *((float *)&v104 + 1), *(float *)&v104, v108);
        *v109 = v117;
        if (v117
          && (++v100,
              v118 = v234
                   + (float)((float)((float)(*(float *)&v237 * v114) + (float)(v112 * *(float *)&v244))
                           + (float)(v116 * *(float *)&v236)),
              v118 < *(float *)v235.i32))
        {
          v87 = v248;
          if (v110 <= 0x3F)
          {
            v119 = v110++;
            v120 = v246;
            *(_DWORD *)(v246 + 4096) = v110;
            v121 = (float32x2_t *)(v120 + (v119 << 6));
            v122 = v226;
            v264[v226] = *v107;
            v123 = v240;
            v121->f32[0] = v241;
            v121->f32[1] = v123;
            v121[1].f32[0] = v239;
            v124 = *(float *)(v242 + 8);
            if (v245)
              v124 = 0.0;
            v125 = (float)((float)((float)((float)(*v111 * *(float *)(v232 + 8)) + (float)(*v113 * *(float *)(v232 + 20)))
                                 + (float)(*v115 * *(float *)(v232 + 32)))
                         + *(float *)(v232 + 44))
                 + v124;
            v121[2] = vadd_f32(vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v232, *v111), vmul_n_f32(*(float32x2_t *)(v232 + 12), *v113)), vmul_n_f32(*(float32x2_t *)(v232 + 24), *v115)), *(float32x2_t *)(v232 + 36)), (float32x2_t)vand_s8(*(int8x8_t *)v242, v221));
            v121[3].f32[0] = v125;
            v121[1].f32[1] = (float)(v101 + v118) + v243;
            v121[6].i32[1] = v238;
            v247 = 1;
            v226 = v122 + 1;
          }
          else
          {
            v247 = 1;
          }
        }
        else
        {
          v87 = v248;
        }
        ++v109;
        ++v108;
        ++v107;
        --v34;
      }
      while (v34);
    }
    else
    {
      v87 = v248;
    }
    v85 = v259;
    if (v100 == v259)
    {
      v81 = v246;
      v84 = LODWORD(v220);
      v86 = v258;
      goto LABEL_40;
    }
    v90 = v246;
    ContactReductionAllIn(v246, LODWORD(v220), v100, v258, v87, (uint64_t)v264);
    a2 = v209;
    v129 = v229;
    v29 = v225;
    v31 = v224;
    v33 = v223;
    v34 = v222;
    v126 = v228;
    v127 = v227;
    v128 = v247;
    v88 = v208;
  }
  v131 = v231;
  v132 = v230;
  if (v259)
  {
    v133 = v88[2];
    v134 = v88[5];
    v135 = v88[8];
    v136 = *(float32x2_t *)v88;
    v137 = *(float32x2_t *)(v88 + 3);
    v138 = *(float32x2_t *)(v88 + 6);
    v139 = *(float32x2_t *)(v88 + 9);
    v140 = (float *)(v260 + 2);
    v141 = v34;
    v142 = v88[11];
    v143 = v248;
    do
    {
      v144 = *v131++;
      v145 = (float *)(v143 + 12 * v144);
      v146 = v145[1];
      v147 = v145[2];
      v148 = v142 + (float)((float)((float)(v133 * *v145) + (float)(v134 * v146)) + (float)(v135 * v147));
      *((float32x2_t *)v140 - 1) = vadd_f32(v139, vadd_f32(vadd_f32(vmul_n_f32(v136, *v145), vmul_n_f32(v137, v146)), vmul_n_f32(v138, v147)));
      *v140 = v148;
      v140 += 3;
      --v141;
    }
    while (v141);
    if (v249 >= 2 && v259 >= 2)
    {
      v149 = 0;
      v150 = (int8x8_t)vcgez_s32(vshl_n_s32(vdup_n_s32(v245), 0x1FuLL));
      do
      {
        v151 = v149 + 1;
        if (v149 + 1 < v34)
          v152 = v149 + 1;
        else
          v152 = 0;
        if ((!v126[v149] || !v126[v152]) && (v127[v152] & v127[v149]) == 0)
        {
          v153 = &v260[3 * v149];
          v154 = &v260[3 * v152];
          v155 = *v154;
          v156 = v154[1];
          v157 = *v153;
          v158 = v153[1];
          v159 = v154[2];
          v160 = v153[2];
          v262[0] = *v154 - *v153;
          v262[1] = v156 - v158;
          v262[2] = v159 - v160;
          v162 = v132[1];
          v161 = v132[2];
          v163 = (float)((float)(v156 - v158) * v161) - (float)((float)(v159 - v160) * v162);
          v164 = (float)((float)(v159 - v160) * *v132) - (float)(v262[0] * v161);
          v165 = (float)(v262[0] * v162) - (float)((float)(v156 - v158) * *v132);
          v166 = fabsf(v163);
          v167 = fabsf(v164);
          v168 = fabsf(v165);
          if (v167 <= v166 || v167 <= v168)
          {
            if (v168 <= v166)
            {
              v171 = 1;
              v170 = 2;
            }
            else
            {
              v171 = 0;
              v170 = 1;
            }
          }
          else
          {
            v170 = 0;
            v171 = 2;
          }
          v172 = 0;
          v173 = (float)((float)(v158 * v164) + (float)(v163 * v157)) + (float)(v165 * v160);
          v174 = v262[v171];
          v175 = v262[v170];
          v176 = -v175;
          v177 = 1.0 / (float)((float)(v174 * v132[v170]) - (float)(v175 * v132[v171]));
          do
          {
            v178 = v172 + 1;
            if (v172 + 1 < v29)
              v179 = v172 + 1;
            else
              v179 = 0;
            if ((!v31[v172] || !v31[v179]) && (v33[v179] & v33[v172]) == 0)
            {
              v180 = (float *)(a2 + 12 * v129[v172]);
              v181 = (float *)(a2 + 12 * v129[v179]);
              v182 = *v180;
              v183 = v180[1];
              v184 = v180[2];
              v185 = (float)((float)((float)(v164 * v183) + (float)(*v180 * v163)) + (float)(v184 * v165)) - v173;
              v186 = v181[1];
              v187 = v181[2];
              if ((float)(v185
                         * (float)((float)((float)((float)(v164 * v186) + (float)(*v181 * v163)) + (float)(v187 * v165))
                                 - v173)) <= 0.0)
              {
                v188 = *v181 - v182;
                v189 = v186 - v183;
                v190 = v187 - v184;
                v191 = (float)((float)(v164 * v189) + (float)(v163 * v188)) + (float)(v165 * v190);
                if (v191 != 0.0)
                {
                  v192 = v185 / v191;
                  v193 = v189 * v192;
                  v194 = v190 * v192;
                  v195 = v182 - (float)(v188 * v192);
                  v196 = v183 - v193;
                  v197 = v184 - v194;
                  v261[0] = v195;
                  v261[1] = v196;
                  v261[2] = v184 - v194;
                  v198 = v177
                       * (float)((float)((float)(v261[v171] - v153[v171]) * v176)
                               + (float)(v174 * (float)(v261[v170] - v153[v170])));
                  if (v198 >= 0.0)
                  {
                    v199 = v195 - (float)(v198 * *v132);
                    v200 = v196 - (float)(v198 * v132[1]);
                    v201 = v197 - (float)(v198 * v132[2]);
                    if ((float)((float)((float)((float)(v158 - v200) * (float)(v156 - v200))
                                       + (float)((float)(v157 - v199) * (float)(v155 - v199)))
                               + (float)((float)(v160 - v201) * (float)(v159 - v201))) < 0.0)
                    {
                      v202 = *(unsigned int *)(v90 + 4096);
                      if (v202 <= 0x3F)
                      {
                        *(_DWORD *)(v90 + 4096) = v202 + 1;
                        v203 = (float32x2_t *)(v90 + (v202 << 6));
                        v204 = v240;
                        v203->f32[0] = v241;
                        v203->f32[1] = v204;
                        v203[1].f32[0] = v239;
                        v205 = *(float *)(v242 + 8);
                        if (v245)
                          v205 = 0.0;
                        v206 = (float)((float)((float)((float)(v199 * *(float *)(v233 + 8))
                                                     + (float)(v200 * *(float *)(v233 + 20)))
                                             + (float)(v201 * *(float *)(v233 + 32)))
                                     + *(float *)(v233 + 44))
                             + v205;
                        v203[2] = vadd_f32(vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v233, v199), vmul_n_f32(*(float32x2_t *)(v233 + 12), v200)), vmul_n_f32(*(float32x2_t *)(v233 + 24), v201)), *(float32x2_t *)(v233 + 36)), (float32x2_t)vand_s8(*(int8x8_t *)v242, v150));
                        v203[3].f32[0] = v206;
                        v203[1].f32[1] = v243 - v198;
                        v203[6].i32[1] = v238;
                      }
                      v128 = 1;
                    }
                  }
                }
              }
            }
            v172 = v178;
          }
          while (v29 != v178);
        }
        v149 = v151;
      }
      while (v151 != v34);
    }
  }
  return v128 & 1;
}

float transformVertices(float *a1, float *a2, float *a3, float *a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned __int8 *a8, float *a9)
{
  uint64_t v9;
  unsigned int v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  unsigned int v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  unsigned int v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float result;

  v9 = a6;
  v10 = 1;
  v11 = -3.4028e38;
  v12 = 3.4028e38;
  v13 = a6;
  v14 = 3.4028e38;
  v15 = -3.4028e38;
  do
  {
    v16 = *a8++;
    v17 = (float *)(a7 + 12 * v16);
    v18 = v17[1];
    v19 = v17[2];
    v20 = (float)((float)(a9[1] * v18) + (float)(*a9 * *v17)) + (float)(a9[2] * v19);
    v21 = (float)((float)(v18 * a9[4]) + (float)(a9[3] * *v17)) + (float)(a9[5] * v19);
    if (v12 >= v20)
      v12 = v20;
    if (v14 >= v21)
      v14 = v21;
    if (v11 <= v20)
      v11 = v20;
    if (v15 <= v21)
      v15 = v21;
    *(float *)(a5 + 4 * (v10 - 1)) = v20;
    *(float *)(a5 + 4 * v10) = v21;
    v10 += 2;
    --v13;
  }
  while (v13);
  v22 = (float)(v11 + v12) * 0.5;
  v23 = v12 + -0.000001;
  v24 = v14 + -0.000001;
  v25 = 1;
  do
  {
    v26 = *(float *)(a5 + 4 * (v25 - 1));
    v27 = *(float *)(a5 + 4 * v25);
    v28 = v26 - v22;
    v29 = v26 - v23;
    if (v28 < 0.0)
      v30 = -0.000001;
    else
      v30 = 0.000001;
    *(float *)(a5 + 4 * (v25 - 1)) = v29 + v30;
    v31 = v27 - v24;
    if ((float)(v27 - (float)((float)(v15 + v14) * 0.5)) < 0.0)
      v32 = -0.000001;
    else
      v32 = 0.000001;
    *(float *)(a5 + 4 * v25) = v31 + v32;
    v25 += 2;
    --v9;
  }
  while (v9);
  result = (float)(v11 + 0.000001) - v23;
  *a1 = v23;
  *a2 = v24;
  *a3 = result;
  *a4 = (float)(v15 + 0.000001) - v24;
  return result;
}

BOOL PointInConvexPolygon2D_OutCodes(const float *a1, int a2, float a3, float a4, float a5, float a6, unsigned __int8 *a7)
{
  int v7;
  int v8;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  _BOOL4 v24;
  int v25;
  const float *v26;
  int v27;
  float *v28;
  int v29;
  float v30;

  if (a4 >= 0.0)
    v7 = 2 * (a3 < 0.0);
  else
    v7 = (2 * (a3 < 0.0)) | 8;
  v8 = v7 | (a3 > a5);
  if (a4 > a6)
    v8 |= 4u;
  *a7 = v8;
  if (v8)
    return 0;
  if (a2 == 3)
  {
    v10 = a1[1];
    v11 = a1[2] - *a1;
    v12 = a1[3] - v10;
    v13 = a1[4] - *a1;
    v14 = a1[5] - v10;
    v15 = (float)(v12 * v12) + (float)(v11 * v11);
    v16 = (float)(v12 * v14) + (float)(v11 * v13);
    v17 = (float)(v14 * v14) + (float)(v13 * v13);
    v18 = a3 - *a1;
    v19 = a4 - v10;
    v20 = (float)(v19 * v12) + (float)(v18 * v11);
    v21 = (float)(v19 * v14) + (float)(v18 * v13);
    v22 = (float)(v20 * v17) - (float)(v21 * v16);
    v23 = (float)(v21 * v15) - (float)(v20 * v16);
    v24 = v22 > 0.0;
    if (v23 <= 0.0)
      v24 = 0;
    return (float)((float)(v22 + v23) - (float)((float)(v15 * v17) - (float)(v16 * v16))) < 0.0 && v24;
  }
  else
  {
    v25 = 0;
    v26 = &a1[2 * a2 - 2];
    v27 = *((_DWORD *)v26 + 1) >= SLODWORD(a4);
    do
    {
      v28 = (float *)v26;
      v26 = a1;
      v29 = v27;
      v30 = a1[1];
      v27 = SLODWORD(v30) >= SLODWORD(a4);
      if (v29 != v27
        && SLODWORD(v30) >= SLODWORD(a4) != (float)((float)(v30 - a4) * (float)(*v28 - *a1)) <= (float)((float)(*a1 - a3) * (float)(v28[1] - v30)))
      {
        if (v25 == 1)
          return 0;
        ++v25;
      }
      a1 += 2;
      --a2;
    }
    while (a2);
    return v25 & 1;
  }
}

void ContactReductionAllIn(uint64_t a1, unsigned int a2, int a3, float *a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float *v12;
  uint64_t v13;
  float v14;
  float v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  int v27;
  uint64_t v31;
  float v32;
  __float2 v33;
  float *v34;
  float32x4_t v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  float *v44;
  float v45;
  float v46;
  float v47;
  __int32 *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int v52;
  float v53;
  uint64_t i;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  float *v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  unsigned int v88;
  float v89[8];
  float __b[14];
  _QWORD v91[10];

  v91[9] = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a1 + 4096) - a2;
  if (v6 >= 5)
  {
    v9 = a1 + ((unint64_t)a2 << 6);
    if (v6 == a3)
    {
      LODWORD(v10) = 0;
      v11 = *(float *)(v9 + 12);
      v12 = (float *)(v9 + 76);
      v13 = 1;
      do
      {
        v14 = *v12;
        v12 += 16;
        v15 = v14;
        v16 = v11 <= v14;
        if (v11 <= v14)
          v10 = v10;
        else
          v10 = v13;
        if (!v16)
          v11 = v15;
        ++v13;
      }
      while (a3 != v13);
      v17 = 0;
      v18 = 0;
      v19 = 1;
      do
      {
        v20 = HIWORD(v18);
        v21 = v9 + (v20 << 6);
        v22 = v9 + v17;
        *(_OWORD *)v22 = *(_OWORD *)v21;
        *(_OWORD *)(v22 + 16) = *(_OWORD *)(v21 + 16);
        *(_QWORD *)(v22 + 32) = *(_QWORD *)(v21 + 32);
        *(_DWORD *)(v22 + 40) = *(_DWORD *)(v21 + 40);
        v23 = *(_OWORD *)(v21 + 44);
        *(_DWORD *)(v22 + 60) = *(_DWORD *)(v21 + 60);
        *(_OWORD *)(v22 + 44) = v23;
        v19 &= (_DWORD)v20 != (_DWORD)v10;
        v18 += (unsigned __int16)a3 << 14;
        v17 += 64;
      }
      while (v17 != 256);
      if ((v19 & 1) != 0)
      {
        v24 = v9 + (v10 << 6);
        v25 = *(_OWORD *)(v24 + 16);
        *(_OWORD *)(v9 + 256) = *(_OWORD *)v24;
        *(_OWORD *)(v9 + 272) = v25;
        *(_QWORD *)(v9 + 288) = *(_QWORD *)(v24 + 32);
        *(_DWORD *)(v9 + 296) = *(_DWORD *)(v24 + 40);
        v26 = *(_DWORD *)(v24 + 60);
        *(_OWORD *)(v9 + 300) = *(_OWORD *)(v24 + 44);
        *(_DWORD *)(v9 + 316) = v26;
        v27 = 5;
      }
      else
      {
        v27 = 4;
      }
      v88 = v27 + a2;
    }
    else
    {
      v31 = 0;
      v32 = 0.0;
      do
      {
        v33 = __sincosf_stret(v32);
        v34 = &__b[v31 + 8];
        *v34 = v33.__cosval;
        *(_QWORD *)(v34 + 1) = LODWORD(v33.__sinval);
        v32 = v32 + 0.3927;
        v31 += 3;
      }
      while (v31 != 24);
      memset_pattern16(__b, &unk_2261A7270, 0x20uLL);
      memset_pattern16(v89, &unk_2261A9AE0, 0x20uLL);
      v36 = 0;
      v37 = *a4;
      v38 = a4[1];
      v39 = a4[3];
      v40 = a4[4];
      v41 = a4[6];
      v42 = a4[7];
      do
      {
        v43 = 0;
        v44 = (float *)(a5 + 12 * *(unsigned __int8 *)(a6 + v36));
        v45 = v44[1];
        v46 = v44[2];
        v47 = (float)((float)(v38 * *v44) + (float)(v40 * v45)) + (float)(v42 * v46);
        v35.f32[0] = (float)((float)(v37 * *v44) + (float)(v39 * v45)) + (float)(v41 * v46);
        v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 0);
        v48 = (__int32 *)v91;
        do
        {
          v49.i32[0] = *(v48 - 6);
          v50.i32[0] = *(v48 - 5);
          v49.i32[1] = *(v48 - 3);
          v49.i32[2] = *v48;
          v49.i32[3] = v48[3];
          v50.i32[1] = *(v48 - 2);
          v50.i32[2] = v48[1];
          v50.i32[3] = v48[4];
          v51 = vmlaq_f32(vmulq_n_f32(v50, v47), v35, v49);
          *(int8x16_t *)&__b[v43] = vbslq_s8((int8x16_t)vcgtq_f32(v51, *(float32x4_t *)&__b[v43]), *(int8x16_t *)&__b[v43], (int8x16_t)v51);
          *(int8x16_t *)&v89[v43] = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)&v89[v43], v51), *(int8x16_t *)&v89[v43], (int8x16_t)v51);
          v43 += 4;
          v48 += 12;
        }
        while (v43 != 8);
        ++v36;
      }
      while (v36 != v6);
      v52 = 0;
      v53 = v89[0] - __b[0];
      for (i = 1; i != 8; ++i)
      {
        if ((float)(v89[i] - __b[i]) > v53)
        {
          v52 = i;
          v53 = v89[i] - __b[i];
        }
      }
      v55 = 0;
      LODWORD(v56) = 0;
      v57 = 0;
      v58 = 0;
      v59 = 0;
      v60 = &__b[3 * v52 + 8];
      v61 = *v60;
      v62 = v60[1];
      v63 = 3.4028e38;
      v64 = -3.4028e38;
      v65 = -3.4028e38;
      v66 = 3.4028e38;
      do
      {
        v67 = (float *)(a5 + 12 * *(unsigned __int8 *)(a6 + v55));
        v68 = v67[1];
        v69 = (float)(v37 * *v67) + (float)(v39 * v68);
        v70 = (float)(v38 * *v67) + (float)(v40 * v68);
        v71 = v67[2];
        v72 = v69 + (float)(v41 * v71);
        v73 = v70 + (float)(v42 * v71);
        v74 = (float)(v62 * v73) + (float)(v61 * v72);
        v75 = (float)(v61 * v73) + (float)((float)-v62 * v72);
        if (v74 < v66)
        {
          v66 = v74;
          v59 = v55;
        }
        if (v74 > v65)
        {
          v65 = v74;
          v58 = v55;
        }
        if (v75 < v63)
        {
          v63 = v75;
          v57 = v55;
        }
        if (v75 <= v64)
        {
          v56 = v56;
        }
        else
        {
          v64 = v75;
          v56 = v55;
        }
        ++v55;
      }
      while (v6 != v55);
      v76 = 0;
      v77 = 0;
      if (v58 == v59)
        v58 = -1;
      if (v57 == v58 || v57 == v59)
        v57 = -1;
      if ((_DWORD)v56 == v57 || (_DWORD)v56 == v58 || (_DWORD)v56 == v59)
        v56 = 0xFFFFFFFFLL;
      v81 = (unint64_t)v59 << 6;
      v82 = v56 << 6;
      v83 = (unint64_t)v57 << 6;
      v84 = (unint64_t)v58 << 6;
      do
      {
        if (v81 == v76 || v84 == v76 || v83 == v76 || v82 == v76)
        {
          v85 = v77++;
          v86 = v9 + (v85 << 6);
          *(_OWORD *)v86 = *(_OWORD *)(v9 + v76);
          *(_OWORD *)(v86 + 16) = *(_OWORD *)(v9 + v76 + 16);
          *(_QWORD *)(v86 + 32) = *(_QWORD *)(v9 + v76 + 32);
          *(_DWORD *)(v86 + 40) = *(_DWORD *)(v9 + v76 + 40);
          v87 = *(_OWORD *)(v9 + v76 + 44);
          *(_DWORD *)(v86 + 60) = *(_DWORD *)(v9 + v76 + 60);
          *(_OWORD *)(v86 + 44) = v87;
        }
        v76 += 64;
      }
      while ((unint64_t)v6 << 6 != v76);
      v88 = v77 + a2;
    }
    *(_DWORD *)(a1 + 4096) = v88;
  }
}

uint64_t physx::Gu::contactSphereBox(uint64_t a1, float *a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;

  v7 = a3[4];
  v8 = a3[5];
  v10 = a4[4];
  v9 = a4[5];
  v11 = v7 - v10;
  v12 = v8 - v9;
  v13 = a3[6];
  v14 = a4[6];
  v15 = v13 - v14;
  v17 = a4[2];
  v16 = a4[3];
  v18 = (float)(v16 * v16) + -0.5;
  v19 = *a4;
  v20 = a4[1];
  v21 = (float)((float)((float)(v12 + v12) * v20) + (float)(*a4 * (float)(v11 + v11)))
      + (float)(v17 * (float)(v15 + v15));
  v22 = (float)((float)((float)(v11 + v11) * v18)
              - (float)((float)((float)(v20 * (float)(v15 + v15)) - (float)(v17 * (float)(v12 + v12))) * v16))
      + (float)(*a4 * v21);
  v23 = (float)((float)((float)(v12 + v12) * v18)
              - (float)((float)((float)(v17 * (float)(v11 + v11)) - (float)(*a4 * (float)(v15 + v15))) * v16))
      + (float)(v20 * v21);
  v24 = a2[1];
  v25 = -v24;
  if (v22 >= (float)-v24)
  {
    if (v22 <= v24)
    {
      v26 = 0;
      v25 = (float)((float)((float)(v11 + v11) * v18)
                  - (float)((float)((float)(v20 * (float)(v15 + v15)) - (float)(v17 * (float)(v12 + v12))) * v16))
          + (float)(*a4 * v21);
    }
    else
    {
      v26 = 1;
      v25 = a2[1];
    }
  }
  else
  {
    v26 = 1;
  }
  v27 = (float)((float)((float)(v15 + v15) * v18)
              - (float)((float)((float)(*a4 * (float)(v12 + v12)) - (float)(v20 * (float)(v11 + v11))) * v16))
      + (float)(v17 * v21);
  v28 = a2[2];
  if (v23 >= (float)-v28)
  {
    if (v23 > v28)
    {
      v26 = 1;
      v23 = a2[2];
    }
  }
  else
  {
    v26 = 1;
    v23 = -v28;
  }
  v29 = *(float *)(a1 + 4);
  v30 = -v17;
  v31 = -v19;
  v32 = -v20;
  v33 = a2[3];
  v34 = -v33;
  if (v27 >= (float)-v33)
  {
    if (v27 <= v33)
    {
      v34 = v27;
    }
    else
    {
      v26 = 1;
      v34 = a2[3];
    }
    if (v26 != 1)
    {
      v50 = v24 - fabsf(v25);
      v51 = v28 - fabsf(v23);
      v52 = v33 - fabsf(v27);
      if (v51 >= v50)
      {
        if (v50 < v52)
        {
          v48 = -v50;
          v54 = -2.0;
          if (v25 > 0.0)
            v54 = 2.0;
          v53 = 0.0;
          goto LABEL_27;
        }
      }
      else if (v51 < v52)
      {
        v48 = -v51;
        v53 = 2.0;
        if (v23 <= 0.0)
          v53 = -2.0;
        v54 = 0.0;
LABEL_27:
        v55 = 0.0;
LABEL_31:
        v56 = v55 + v55;
        v57 = (float)((float)(v20 * v53) + (float)(v19 * v54)) + (float)(v17 * v56);
        v45 = (float)((float)(v16 * (float)((float)(v53 * v30) + (float)(v20 * v56))) + (float)(v54 * v18))
            + (float)(v19 * v57);
        v46 = (float)((float)(v16 * (float)((float)(v56 * v31) + (float)(v17 * v54))) + (float)(v53 * v18))
            + (float)(v20 * v57);
        v47 = (float)((float)(v16 * (float)((float)(v54 * v32) + (float)(v19 * v53))) + (float)(v56 * v18))
            + (float)(v17 * v57);
        goto LABEL_32;
      }
      v55 = 1.0;
      if (v27 <= 0.0)
        v55 = -1.0;
      v48 = -v52;
      v54 = 0.0;
      v53 = 0.0;
      goto LABEL_31;
    }
  }
  v35 = v23 + v23;
  v36 = (float)((float)(v20 * v35) + (float)(v19 * (float)(v25 + v25))) + (float)(v17 * (float)(v34 + v34));
  v37 = (float)((float)(v16 * (float)((float)(v35 * v30) + (float)(v20 * (float)(v34 + v34))))
              + (float)((float)(v25 + v25) * v18))
      + (float)(v19 * v36);
  v38 = (float)((float)(v16 * (float)((float)((float)(v34 + v34) * v31) + (float)(v17 * (float)(v25 + v25))))
              + (float)(v35 * v18))
      + (float)(v20 * v36);
  v39 = (float)((float)(v16 * (float)((float)((float)(v25 + v25) * v32) + (float)(v19 * v35)))
              + (float)((float)(v34 + v34) * v18))
      + (float)(v17 * v36);
  v40 = v11 - v37;
  v41 = v12 - v38;
  v42 = v15 - v39;
  v43 = (float)((float)(v41 * v41) + (float)(v40 * v40)) + (float)(v42 * v42);
  if (v43 > (float)((float)(v29 + *a5) * (float)(v29 + *a5)))
    return 0;
  v44 = 1.0 / sqrtf(v43);
  v45 = v40 * v44;
  v46 = v41 * v44;
  v47 = v42 * v44;
  v48 = v43 * v44;
  v7 = v10 + v37;
  v8 = v9 + v38;
  v13 = v14 + v39;
LABEL_32:
  v58 = *(unsigned int *)(a7 + 4096);
  if (v58 <= 0x3F)
  {
    *(_DWORD *)(a7 + 4096) = v58 + 1;
    v59 = a7 + (v58 << 6);
    *(float *)v59 = v45;
    *(float *)(v59 + 4) = v46;
    *(float *)(v59 + 16) = v7;
    *(float *)(v59 + 20) = v8;
    *(float *)(v59 + 24) = v13;
    *(float *)(v59 + 8) = v47;
    *(float *)(v59 + 12) = v48 - v29;
    *(_DWORD *)(v59 + 52) = -1;
  }
  return 1;
}

uint64_t PxcBruteForceOverlapBackface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, float *a11, _DWORD *a12, _DWORD *a13, float *a14, uint64_t a15, _DWORD *a16)
{
  int32x2_t v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  size_t v35;
  char *v36;
  float *v37;
  float *v38;
  uint64_t v39;
  char v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  size_t v49;
  char *v50;
  uint64_t v51;
  int v52;
  float v53;
  float v54;
  unint64_t v55;
  float v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  float v61;
  float32x2_t v62;
  float v63;
  float *v64;
  float v65;
  float32x2_t v66;
  float v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  uint64_t v71;
  unint64_t v72;
  float *v73;
  float *v74;
  float *v75;
  float *v76;
  float *v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  int v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  uint64_t v110;
  float v111;
  char *v113;
  char *v114;
  uint64_t v115;
  unsigned int *v116;
  uint64_t *v117;
  float *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  float *v124;
  float *v125;
  float *v126;
  int32x2_t v127;
  unint64_t v128;
  float v129;
  float32x4_t v130;
  float32x2_t v131;
  float32x4_t v132;
  float32x2_t v133;
  float32x2_t v134;
  float v135;
  float v136;
  float32x2_t v137;
  float v138;
  float v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  float v143;
  float v144;
  unint64_t v145;
  float v146;
  float v147;
  int v148;
  unint64_t v149;
  float v150;
  int v151;
  int v152;
  float v153[3];
  uint64_t v154;
  _QWORD v155[3];

  *(double *)&v16 = MEMORY[0x24BDAC7A8](a1);
  v126 = v17;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v127 = v16;
  v121 = v28;
  v122 = v29;
  v155[1] = *MEMORY[0x24BDAC8D0];
  v30 = *a11;
  v31 = a11[1];
  v32 = a11[2];
  v33 = (float)((float)(v31 * v22[4]) + (float)(v22[3] * *a11)) + (float)(v22[5] * v32);
  v34 = (float)((float)(v31 * v22[7]) + (float)(v22[6] * *a11)) + (float)(v22[8] * v32);
  v153[0] = (float)((float)(v22[1] * v31) + (float)(*v22 * *a11)) + (float)(v22[2] * v32);
  v153[1] = v33;
  v153[2] = v34;
  MEMORY[0x24BDAC7A8](v28);
  v36 = (char *)&v115 - ((v35 + 15) & 0x7FFFFFFF0);
  bzero(v36, v35);
  *(float *)&v151 = 3.4028e38;
  v152 = 0;
  *(float *)&v142 = -v30;
  v143 = -v31;
  v144 = -v32;
  v119 = (unint64_t)v36;
  v113 = v36;
  v37 = v19;
  v38 = v126;
  v120 = (unint64_t)a12;
  v39 = PxcTestFacesSepAxesBackface(v27, v25, v23, v21, (uint64_t)v37, (uint64_t)v126, a10, v153, *(float *)v127.i32, (float *)&v151, (float *)&v149, a12, v113, &v152, (float *)&v142);
  v40 = 0;
  if ((_DWORD)v39)
  {
    v117 = (uint64_t *)a10;
    v118 = (float *)a9;
    v41 = a11[1];
    v42 = (float)(v21[1] * v41) + (float)(*v21 * *a11);
    v43 = a11[2];
    v44 = v21[2];
    v45 = v21[5];
    v46 = (float)(v41 * v21[4]) + (float)(v21[3] * *a11);
    v47 = (float)(v41 * v21[7]) + (float)(v21[6] * *a11);
    v48 = v21[8];
    MEMORY[0x24BDAC7A8](v39);
    v50 = (char *)&v115 - ((v49 + 15) & 0x7FFFFFFF0);
    bzero(v50, v49);
    v147 = 3.4028e38;
    v148 = 0;
    *(float *)&v142 = -(float)(v42 + (float)(v44 * v43));
    v143 = -(float)(v46 + (float)(v45 * v43));
    v144 = -(float)(v47 + (float)(v48 * v43));
    v124 = a11;
    v116 = (unsigned int *)v50;
    v114 = v50;
    v51 = (uint64_t)v118;
    v125 = v37;
    v52 = PxcTestFacesSepAxesBackface(v25, v27, v21, v23, (uint64_t)v38, (uint64_t)v37, (uint64_t)v118, (float *)&v142, *(float *)v127.i32, &v147, (float *)&v145, a13, v114, &v148, a11);
    v40 = 0;
    if (v52)
    {
      v53 = v150;
      v54 = *(float *)&v151;
      v55 = v149;
      v123 = a16;
      *a16 = 0;
      v56 = v147;
      if (v147 < v54)
      {
        v55 = v145;
        v53 = v146;
        *v123 = 1;
        v54 = v56;
      }
      *(float *)&v142 = 0.0;
      v140 = 0;
      v57 = (float *)(*(_QWORD *)(v27 + 24) + 20 * *(unsigned int *)v120);
      v58 = (float *)(*(_QWORD *)(v25 + 24) + 20 * *a13);
      v59 = v125;
      physx::Cm::FastVertex2ShapeScaling::transformPlaneToShapeSpace(v125, v57, (float *)&v137, &v139, v57[3]);
      v60 = v126;
      physx::Cm::FastVertex2ShapeScaling::transformPlaneToShapeSpace(v126, v58, (float *)&v134, &v136, v58[3]);
      v61 = (float)((float)(v137.f32[0] * *(float *)(v51 + 8)) + (float)(v137.f32[1] * *(float *)(v51 + 20)))
          + (float)(v138 * *(float *)(v51 + 32));
      v62 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v51, v137.f32[0]), vmul_n_f32(*(float32x2_t *)(v51 + 12), v137.f32[1])), vmul_n_f32(*(float32x2_t *)(v51 + 24), v138));
      v63 = v139
          - (float)(vmlas_n_f32(vmuls_lane_f32(*(float *)(v51 + 40), v62, 1), *(float *)(v51 + 36), v62.f32[0])
                  + (float)(*(float *)(v51 + 44) * v61));
      v137 = v62;
      v138 = v61;
      v139 = v63;
      v64 = (float *)v117;
      v65 = (float)((float)(v134.f32[0] * v64[2]) + (float)(v134.f32[1] * v64[5])) + (float)(v135 * v64[8]);
      v66 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v117, v134.f32[0]), vmul_n_f32(*(float32x2_t *)((char *)v117 + 12), v134.f32[1])), vmul_n_f32((float32x2_t)v117[3], v135));
      v67 = v136
          - (float)(vmlas_n_f32(vmuls_lane_f32(*((float *)v117 + 10), v66, 1), *((float *)v117 + 9), v66.f32[0])
                  + (float)(*((float *)v117 + 11) * v65));
      v134 = v66;
      v135 = v65;
      v136 = v67;
      v68 = (float32x4_t)vdupq_lane_s32(v127, 0);
      v69 = vsubq_f32(*(float32x4_t *)v121, v68);
      v69.i32[3] = vaddq_f32(*(float32x4_t *)v121, v68).i32[3];
      v132 = v69;
      v70 = vsubq_f32(*(float32x4_t *)v122, v68);
      v70.i32[3] = vaddq_f32(*(float32x4_t *)v122, v68).i32[3];
      v133 = vadd_f32(*(float32x2_t *)(v121 + 16), *(float32x2_t *)v68.f32);
      v130 = v70;
      v131 = vadd_f32(*(float32x2_t *)(v122 + 16), *(float32x2_t *)v68.f32);
      PxcFindSeparatingAxes((uint64_t)&v142, (unsigned int *)v119, v152, (_QWORD *)v27, (uint64_t)v23, (float *)&v134, (float *)v51, v130.f32, *(float *)v127.i32, (uint64_t)v59);
      PxcFindSeparatingAxes((uint64_t)&v140, v116, v148, (_QWORD *)v25, (uint64_t)v21, (float *)&v137, v64, v132.f32, *(float *)v127.i32, (uint64_t)v60);
      v120 = v142;
      if (*(float *)&v142 != 0.0)
      {
        v71 = 0;
        LODWORD(v121) = 0;
        v72 = v140;
        v117 = &v141;
        v118 = &v143;
        v73 = v124;
        v119 = v140;
        do
        {
          v122 = v71;
          if ((_DWORD)v72)
          {
            v74 = (float *)v117;
            v75 = &v118[3 * v71];
            v76 = v75 + 1;
            v77 = v75 + 2;
            do
            {
              v78 = v74[1];
              v79 = (float)(*v76 * v78) - (float)(*v77 * *v74);
              v80 = *(v74 - 1);
              v81 = (float)(*v77 * v80) - (float)(*v75 * v78);
              v82 = (float)(*v75 * *v74) - (float)(*v76 * v80);
              if (fabsf(v79) > 0.000001 || fabsf(v81) > 0.000001 || fabsf(v82) > 0.000001)
              {
                v83 = (float)((float)(v81 * v81) + (float)(v79 * v79)) + (float)(v82 * v82);
                v84 = 0.0;
                v85 = 0.0;
                v86 = 0.0;
                if (v83 > 0.0)
                {
                  v87 = 1.0 / sqrtf(v83);
                  v86 = v79 * v87;
                  v85 = v81 * v87;
                  v84 = v82 * v87;
                }
                v88 = (float)((float)(v85 * v23[1]) + (float)(*v23 * v86)) + (float)(v23[2] * v84);
                v89 = (float)((float)(v85 * v23[4]) + (float)(v23[3] * v86)) + (float)(v23[5] * v84);
                v90 = (float)((float)(v85 * v23[7]) + (float)(v23[6] * v86)) + (float)(v23[8] * v84);
                v91 = (float)((float)(v85 * v21[1]) + (float)(*v21 * v86)) + (float)(v21[2] * v84);
                v92 = v21[5];
                v93 = (float)(v85 * v21[4]) + (float)(v21[3] * v86);
                v94 = (float)(v85 * v21[7]) + (float)(v21[6] * v86);
                v95 = (float)-(float)(v73[1] * v85) - (float)(*v73 * v86);
                LODWORD(v96) = *(_DWORD *)(v27 + 68) | LODWORD(v88) & 0x80000000;
                LODWORD(v97) = *(_DWORD *)(v27 + 72) | LODWORD(v89) & 0x80000000;
                LODWORD(v98) = *(_DWORD *)(v27 + 76) | LODWORD(v90) & 0x80000000;
                v99 = *(_DWORD *)(v25 + 72);
                LODWORD(v100) = *(_DWORD *)(v25 + 68) | LODWORD(v91) & 0x80000000;
                v128 = __PAIR64__(LODWORD(v85), LODWORD(v86));
                v129 = v84;
                v101 = v93 + (float)(v92 * v84);
                v102 = v94 + (float)(v21[8] * v84);
                v103 = v95 - (float)(v73[2] * v84);
                v104 = (float)((float)(v89 * v97) + (float)(v96 * v88)) + (float)(v98 * v90);
                v105 = (float)((float)(v101 * COERCE_FLOAT(v99 | LODWORD(v101) & 0x80000000)) + (float)(v100 * v91))
                     + (float)(COERCE_FLOAT(*(_DWORD *)(v25 + 76) | LODWORD(v102) & 0x80000000) * v102);
                v106 = *(float *)(v27 + 64);
                if (v104 > v106)
                  v106 = v104;
                if (v105 <= *(float *)(v25 + 64))
                  v105 = *(float *)(v25 + 64);
                v107 = v106 + v105;
                v108 = v103 + v107;
                v109 = v107 - v103;
                if (v108 < v109)
                  v109 = v108;
                if (v109 <= v54)
                {
                  v154 = 0;
                  (*(void (**)(uint64_t, unint64_t *, float *, float *, char *, uint64_t *))(v27 + 88))(v27, &v128, v23, v125, (char *)&v154 + 4, &v154);
                  v110 = v154;
                  v155[0] = 0;
                  (*(void (**)(uint64_t, unint64_t *, float *, float *, char *, _QWORD *))(v25 + 88))(v25, &v128, v21, v126, (char *)v155 + 4, v155);
                  if ((float)(*(float *)&v110 + *(float *)v127.i32) < *((float *)v155 + 1)
                    || (float)(*(float *)v155 + *(float *)v127.i32) < *((float *)&v110 + 1))
                  {
                    v40 = v121;
                    return v40 & 1;
                  }
                  v111 = *(float *)&v110 - *((float *)v155 + 1);
                  if ((float)(*(float *)&v110 - *((float *)v155 + 1)) >= (float)(*(float *)v155 - *((float *)&v110 + 1)))
                    v111 = *(float *)v155 - *((float *)&v110 + 1);
                  v73 = v124;
                  if (v111 < v54)
                  {
                    v55 = v128;
                    v53 = v129;
                    v54 = v111;
                    *v123 = 2;
                  }
                }
              }
              v74 += 3;
              --v72;
            }
            while (v72);
          }
          v71 = v122 + 1;
          v72 = v119;
          LODWORD(v121) = v122 + 1 >= v120;
        }
        while (v122 + 1 != v120);
      }
      *a14 = v54;
      *(_QWORD *)a15 = v55;
      *(float *)(a15 + 8) = v53;
      v40 = 1;
    }
  }
  return v40 & 1;
}

float physx::Cm::FastVertex2ShapeScaling::transformPlaneToShapeSpace(float *a1, float *a2, float *a3, float *a4, float a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float result;

  v5 = a2[1];
  v6 = a2[2];
  v7 = (float)((float)(a1[10] * v5) + (float)(a1[9] * *a2)) + (float)(a1[11] * v6);
  v8 = (float)((float)(v5 * a1[13]) + (float)(a1[12] * *a2)) + (float)(a1[14] * v6);
  v9 = (float)((float)(v5 * a1[16]) + (float)(a1[15] * *a2)) + (float)(a1[17] * v6);
  v10 = 1.0 / sqrtf((float)((float)(v8 * v8) + (float)(v7 * v7)) + (float)(v9 * v9));
  *a3 = v7 * v10;
  a3[1] = v8 * v10;
  a3[2] = v9 * v10;
  result = v10 * a5;
  *a4 = result;
  return result;
}

uint64_t GuTestFacesSepAxesBackfaceRoughPass(uint64_t a1, uint64_t a2, float *a3, float *a4, uint64_t a5, uint64_t a6, uint64_t a7, float *a8, float a9, float *a10, float *a11, _DWORD *a12, float *a13)
{
  unint64_t v13;
  uint64_t v20;
  BOOL v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float32x2_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  float v73;
  float v74;
  float v75;
  char v76;
  char v78;
  float v79;
  float v80;
  float v81;
  uint64_t v82;
  float v83;
  float v86;
  float v87;
  float v88;
  float32x2_t v89;
  float v90;
  float v91[4];

  *a12 = -1;
  v13 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v13)
  {
    v20 = 0;
    v21 = 0;
    v82 = *(_QWORD *)(a1 + 32);
    v22 = a8[1];
    v23 = (float)(*a8 * *(float *)(a5 + 36)) + (float)(v22 * *(float *)(a5 + 48));
    v24 = (float)(*a8 * *(float *)(a5 + 40)) + (float)(v22 * *(float *)(a5 + 52));
    v25 = (float)(*a8 * *(float *)(a5 + 44)) + (float)(v22 * *(float *)(a5 + 56));
    v26 = a8[2];
    v27 = v23 + (float)(v26 * *(float *)(a5 + 60));
    v28 = v24 + (float)(v26 * *(float *)(a5 + 64));
    v29 = v25 + (float)(v26 * *(float *)(a5 + 68));
    v30 = *(_QWORD *)(a1 + 24) + 12;
    v31 = 1.0;
    v83 = a9;
    v80 = v28;
    v81 = v27;
    v79 = v29;
    do
    {
      v33 = *(float *)(v30 - 12);
      v32 = *(float *)(v30 - 8);
      v34 = *(float *)(v30 - 4);
      if ((float)((float)((float)(v28 * v32) + (float)(v33 * v27)) + (float)(v34 * v29)) >= 0.0)
      {
        v35 = (float)(v33 * *(float *)(a5 + 44)) + (float)(v32 * *(float *)(a5 + 56));
        v36 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a5 + 36), v33), vmul_n_f32(*(float32x2_t *)(a5 + 48), v32)), vmul_n_f32(*(float32x2_t *)(a5 + 60), v34));
        v37 = v35 + (float)(v34 * *(float *)(a5 + 68));
        v89 = v36;
        v90 = v37;
        v38 = v36.f32[1];
        v39 = sqrtf(vmlas_n_f32(vmuls_lane_f32(v36.f32[1], v36, 1), v36.f32[0], v36.f32[0]) + (float)(v37 * v37));
        v40 = v31 / v39;
        if (v39 > 0.0)
        {
          v36 = vmul_n_f32(v36, v40);
          v89 = v36;
          v37 = v37 * v40;
          v90 = v37;
          v38 = v36.f32[1];
        }
        v41 = a3[1];
        v42 = a3[2];
        v43 = a3[3];
        v44 = a3[4];
        v45 = a3[5];
        v46 = (float)(v36.f32[0] * *a3) + (float)(v38 * v43);
        v47 = (float)(v36.f32[0] * v41) + (float)(v38 * v44);
        v48 = (float)(v36.f32[0] * v42) + (float)(v38 * v45);
        v49 = a3[6];
        v50 = a3[7];
        v51 = a3[8];
        v52 = v46 + (float)(v37 * v49);
        v53 = v47 + (float)(v37 * v50);
        v54 = v48 + (float)(v37 * v51);
        v55 = (float)((float)(v41 * v53) + (float)(*a3 * v52)) + (float)(v42 * v54);
        v56 = (float)((float)(v44 * v53) + (float)(v43 * v52)) + (float)(v45 * v54);
        v57 = (float)((float)(v50 * v53) + (float)(v49 * v52)) + (float)(v51 * v54);
        v58 = (float)((float)(v53 * a4[1]) + (float)(*a4 * v52)) + (float)(a4[2] * v54);
        v59 = (float)((float)(v53 * a4[4]) + (float)(a4[3] * v52)) + (float)(a4[5] * v54);
        v60 = (float)((float)(v53 * a13[1]) + (float)(*a13 * v52)) + (float)(a13[2] * v54);
        v61 = (float)((float)(v56 * COERCE_FLOAT(*(_DWORD *)(a1 + 72) | LODWORD(v56) & 0x80000000))
                    + (float)(COERCE_FLOAT(*(_DWORD *)(a1 + 68) | LODWORD(v55) & 0x80000000) * v55))
            + (float)(COERCE_FLOAT(*(_DWORD *)(a1 + 76) | LODWORD(v57) & 0x80000000) * v57);
        v62 = (float)((float)(v59 * COERCE_FLOAT(*(_DWORD *)(a2 + 72) | LODWORD(v59) & 0x80000000))
                    + (float)(COERCE_FLOAT(*(_DWORD *)(a2 + 68) | LODWORD(v58) & 0x80000000) * v58))
            + (float)(COERCE_FLOAT(*(_DWORD *)(a2 + 76) | COERCE_UNSIGNED_INT((float)((float)(v53 * a4[7]) + (float)(a4[6] * v52))+ (float)(a4[8] * v54)) & 0x80000000)* (float)((float)((float)(v53 * a4[7]) + (float)(a4[6] * v52)) + (float)(a4[8] * v54)));
        if (v61 <= *(float *)(a1 + 64))
          v61 = *(float *)(a1 + 64);
        if (v62 <= *(float *)(a2 + 64))
          v62 = *(float *)(a2 + 64);
        v63 = v61 + v62;
        v64 = v60 + v63;
        v65 = v63 - v60;
        if (v64 < v65)
          v65 = v64;
        if (v65 <= *a10)
        {
          v78 = v21;
          v66 = (float *)(v82 + 12 * *(unsigned __int8 *)(v30 + 7));
          v67 = *(float *)(v30 - 8);
          v68 = v66[1];
          v87 = *v66;
          v88 = *(float *)(v30 - 12);
          v69 = *(float *)(v30 - 4);
          v70 = v66[2];
          v71 = -(float)(*(float *)v30 * v40);
          *(_QWORD *)v91 = 0;
          v72 = a2;
          v86 = v40;
          (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t, float *, float *))(a2 + 88))(a2, &v89, a7, a6, &v91[1], v91);
          if ((float)(v71 + v83) < v91[1]
            || (v73 = v86 * (float)((float)((float)(v67 * v68) + (float)(v88 * v87)) + (float)(v69 * v70)),
                (float)(v91[0] + v83) < v73))
          {
            v76 = v78;
            return v76 & 1;
          }
          v74 = v71 - v91[1];
          v75 = v91[0] - v73;
          if ((float)(v71 - v91[1]) >= v75)
            v74 = v75;
          a2 = v72;
          v28 = v80;
          v27 = v81;
          v29 = v79;
          v31 = 1.0;
          if (v74 < *a10)
          {
            *a11 = v52;
            a11[1] = v53;
            a11[2] = v54;
            *a10 = v74;
            *a12 = v20;
          }
        }
      }
      v21 = ++v20 >= v13;
      v30 += 20;
    }
    while (v13 != v20);
  }
  v76 = 1;
  return v76 & 1;
}

uint64_t PxcTestFacesSepAxesBackface(uint64_t a1, uint64_t a2, float *a3, float *a4, uint64_t a5, uint64_t a6, uint64_t a7, float *a8, float a9, float *a10, float *a11, _DWORD *a12, char *a13, _DWORD *a14, float *a15)
{
  unint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  unsigned int v25;
  uint64_t v32;
  BOOL v33;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  float v39;
  char *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float32x2_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float *v75;
  float *v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  uint64_t v82;
  float v83;
  float v84;
  float v85;
  char v86;
  char v88;
  float v89;
  float v90;
  float v91;
  uint64_t v92;
  float v93;
  uint64_t v94;
  float v97;
  float v98;
  float v99;
  float32x2_t v100;
  float v101;
  float v102[4];

  *a12 = -1;
  v20 = *(unsigned int *)(a1 + 16);
  v94 = *(_QWORD *)(a1 + 32);
  v21 = *(_QWORD *)(a1 + 24);
  v23 = *a8;
  v22 = a8[1];
  v24 = a8[2];
  if (20 * (_DWORD)v20)
  {
    v25 = 0;
    do
    {
      _X11 = v21 + v25;
      __asm { PRFM            #0, [X11] }
      v25 += 128;
    }
    while (v25 < 20 * (int)v20);
  }
  if ((_DWORD)v20)
  {
    v32 = 0;
    v33 = 0;
    v35 = (float)((float)(v23 * *(float *)(a5 + 36)) + (float)(v22 * *(float *)(a5 + 48)))
        + (float)(v24 * *(float *)(a5 + 60));
    v36 = (float)((float)(v23 * *(float *)(a5 + 40)) + (float)(v22 * *(float *)(a5 + 52)))
        + (float)(v24 * *(float *)(a5 + 64));
    v37 = (float)((float)(v23 * *(float *)(a5 + 44)) + (float)(v22 * *(float *)(a5 + 56)))
        + (float)(v24 * *(float *)(a5 + 68));
    v38 = v21 + 12;
    v39 = 1.0;
    v40 = a13;
    v93 = a9;
    v90 = v36;
    v91 = v35;
    v89 = v37;
    v92 = a5;
    while (1)
    {
      v42 = *(float *)(v38 - 12);
      v41 = *(float *)(v38 - 8);
      v43 = *(float *)(v38 - 4);
      if ((float)((float)((float)(v36 * v41) + (float)(v42 * v35)) + (float)(v43 * v37)) >= 0.0)
      {
        v44 = (float)(v42 * *(float *)(a5 + 44)) + (float)(v41 * *(float *)(a5 + 56));
        v45 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a5 + 36), v42), vmul_n_f32(*(float32x2_t *)(a5 + 48), v41)), vmul_n_f32(*(float32x2_t *)(a5 + 60), v43));
        v46 = v44 + (float)(v43 * *(float *)(a5 + 68));
        v100 = v45;
        v101 = v46;
        v47 = v45.f32[1];
        v48 = sqrtf(vmlas_n_f32(vmuls_lane_f32(v45.f32[1], v45, 1), v45.f32[0], v45.f32[0]) + (float)(v46 * v46));
        v49 = v39 / v48;
        if (v48 > 0.0)
        {
          v45 = vmul_n_f32(v45, v49);
          v100 = v45;
          v46 = v46 * v49;
          v101 = v46;
          v47 = v45.f32[1];
        }
        v50 = a3[1];
        v51 = a3[2];
        v52 = a3[3];
        v53 = a3[4];
        v54 = a3[5];
        v55 = (float)(v45.f32[0] * *a3) + (float)(v47 * v52);
        v56 = (float)(v45.f32[0] * v50) + (float)(v47 * v53);
        v57 = (float)(v45.f32[0] * v51) + (float)(v47 * v54);
        v58 = a3[6];
        v59 = a3[7];
        v60 = a3[8];
        v61 = v55 + (float)(v46 * v58);
        v62 = v56 + (float)(v46 * v59);
        v63 = v57 + (float)(v46 * v60);
        v64 = (float)((float)(v50 * v62) + (float)(*a3 * v61)) + (float)(v51 * v63);
        v65 = (float)((float)(v53 * v62) + (float)(v52 * v61)) + (float)(v54 * v63);
        v66 = (float)((float)(v59 * v62) + (float)(v58 * v61)) + (float)(v60 * v63);
        v67 = (float)((float)(v62 * a4[1]) + (float)(*a4 * v61)) + (float)(a4[2] * v63);
        v68 = (float)((float)(v62 * a4[4]) + (float)(a4[3] * v61)) + (float)(a4[5] * v63);
        v69 = (float)((float)(v62 * a15[1]) + (float)(*a15 * v61)) + (float)(a15[2] * v63);
        v70 = (float)((float)(v65 * COERCE_FLOAT(*(_DWORD *)(a1 + 72) | LODWORD(v65) & 0x80000000))
                    + (float)(COERCE_FLOAT(*(_DWORD *)(a1 + 68) | LODWORD(v64) & 0x80000000) * v64))
            + (float)(COERCE_FLOAT(*(_DWORD *)(a1 + 76) | LODWORD(v66) & 0x80000000) * v66);
        v71 = (float)((float)(v68 * COERCE_FLOAT(*(_DWORD *)(a2 + 72) | LODWORD(v68) & 0x80000000))
                    + (float)(COERCE_FLOAT(*(_DWORD *)(a2 + 68) | LODWORD(v67) & 0x80000000) * v67))
            + (float)(COERCE_FLOAT(*(_DWORD *)(a2 + 76) | COERCE_UNSIGNED_INT((float)((float)(v62 * a4[7]) + (float)(a4[6] * v61))+ (float)(a4[8] * v63)) & 0x80000000)* (float)((float)((float)(v62 * a4[7]) + (float)(a4[6] * v61)) + (float)(a4[8] * v63)));
        if (v70 <= *(float *)(a1 + 64))
          v70 = *(float *)(a1 + 64);
        if (v71 <= *(float *)(a2 + 64))
          v71 = *(float *)(a2 + 64);
        v72 = v70 + v71;
        v73 = v69 + v72;
        v74 = v72 - v69;
        if (v73 < v74)
          v74 = v73;
        if (v74 <= *a10)
        {
          v88 = v33;
          v75 = a15;
          *(_DWORD *)v40 = v32;
          v40 += 4;
          v76 = (float *)(v94 + 12 * *(unsigned __int8 *)(v38 + 7));
          v77 = *(float *)(v38 - 8);
          v78 = v76[1];
          v98 = *v76;
          v99 = *(float *)(v38 - 12);
          v79 = *(float *)(v38 - 4);
          v80 = v76[2];
          v81 = -(float)(*(float *)v38 * v49);
          *(_QWORD *)v102 = 0;
          v82 = a2;
          v97 = v49;
          (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t, float *, float *))(a2 + 88))(a2, &v100, a7, a6, &v102[1], v102);
          if ((float)(v81 + v93) < v102[1]
            || (v83 = v97 * (float)((float)((float)(v77 * v78) + (float)(v99 * v98)) + (float)(v79 * v80)),
                (float)(v102[0] + v93) < v83))
          {
            v86 = v88;
            return v86 & 1;
          }
          v84 = v81 - v102[1];
          v85 = v102[0] - v83;
          if ((float)(v81 - v102[1]) >= v85)
            v84 = v85;
          v36 = v90;
          v35 = v91;
          v37 = v89;
          if (v84 < *a10)
          {
            *a11 = v61;
            a11[1] = v62;
            a11[2] = v63;
            *a10 = v84;
            *a12 = v32;
          }
          a15 = v75;
          a2 = v82;
          a5 = v92;
          v39 = 1.0;
        }
      }
      v33 = ++v32 >= v20;
      v38 += 20;
      if (v20 == v32)
        goto LABEL_26;
    }
  }
  v40 = a13;
LABEL_26:
  *a14 = (unint64_t)(v40 - a13) >> 2;
  v86 = 1;
  return v86 & 1;
}

uint64_t PxcFindSeparatingAxes(uint64_t result, unsigned int *a2, int a3, _QWORD *a4, uint64_t a5, float *a6, float *a7, float *a8, float a9, uint64_t a10)
{
  __int128 v10;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  BOOL v27;
  float32x2_t v28;
  float v29;
  BOOL v30;
  int v31;
  int v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  BOOL v77;
  float v78;
  float v79;
  float32x2_t v81;
  float32x2_t v82;
  float v83;
  float v84;
  float32x2_t v85;
  float v86;
  float v87;
  float v88;
  float32x2_t v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  __int128 v95;
  unsigned int *v96;
  int v97;
  float32x2_t v98;
  float v99;

  v93 = (_DWORD *)result;
  if (a3)
  {
    v15 = a4[3];
    v16 = a4[4];
    v17 = a4[5];
    v91 = v17;
    v92 = v15;
    do
    {
      v18 = *a2++;
      v19 = v15 + 20 * v18;
      v20 = *(unsigned __int8 *)(v19 + 18);
      if (*(_BYTE *)(v19 + 18))
      {
        v21 = 0;
        v22 = (unsigned __int8 *)(v17 + *(unsigned __int16 *)(v19 + 16));
        v23 = (float *)(v16 + 12 * *v22);
        v24 = v23[1];
        v25 = v23[2];
        v26 = (float)((float)(*v23 * *(float *)(a10 + 8)) + (float)(v24 * *(float *)(a10 + 20)))
            + (float)(v25 * *(float *)(a10 + 32));
        *(float32x2_t *)&v10 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a10, *v23), vmul_n_f32(*(float32x2_t *)(a10 + 12), v24)), vmul_n_f32(*(float32x2_t *)(a10 + 24), v25));
        v27 = (float)(a6[3]
                    + (float)(vmlas_n_f32(vmuls_lane_f32(a6[1], *(float32x2_t *)&v10, 1), *a6, *(float *)&v10)
                            + (float)(v26 * a6[2]))) <= a9;
        do
        {
          v28 = (float32x2_t)v10;
          v29 = v26;
          v30 = v27;
          v31 = v21++;
          if (v21 < v20)
            v32 = v31 + 1;
          else
            v32 = 0;
          v33 = (float *)(v16 + 12 * v22[v32]);
          v34 = v33[1];
          v35 = v33[2];
          *(float32x2_t *)&v10 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a10, *v33), vmul_n_f32(*(float32x2_t *)(a10 + 12), v34)), vmul_n_f32(*(float32x2_t *)(a10 + 24), v35));
          v26 = (float)((float)(*v33 * *(float *)(a10 + 8)) + (float)(v34 * *(float *)(a10 + 20)))
              + (float)(v35 * *(float *)(a10 + 32));
          v36 = a6[3]
              + (float)(vmlas_n_f32(vmuls_lane_f32(a6[1], *(float32x2_t *)&v10, 1), *a6, *(float *)&v10)
                      + (float)(v26 * a6[2]));
          v27 = v36 <= a9;
          if (v30 || v36 <= a9)
          {
            LODWORD(v37) = vsub_f32(*(float32x2_t *)&v10, v28).u32[0];
            v38 = *((float *)&v10 + 1) - v28.f32[1];
            v39 = a7[3];
            v40 = v26 - v29;
            v41 = a7[6];
            v42 = vmlas_n_f32((float)(*((float *)&v10 + 1) - v28.f32[1]) * v39, *a7, v37)
                + (float)((float)(v26 - v29) * v41);
            v43 = a8[3];
            v44 = v43 - *a8;
            LODWORD(v45) = vadd_f32(v28, *(float32x2_t *)&v10).u32[0];
            v46 = v28.f32[1] + *((float *)&v10 + 1);
            v47 = v29 + v26;
            v48 = (float)(vmlas_n_f32((float)(v28.f32[1] + *((float *)&v10 + 1)) * v39, *a7, v45)
                        + (float)((float)(v29 + v26) * v41))
                + (float)(a7[9] * 2.0);
            v49 = v43 + *a8;
            v50 = fabsf(v42);
            if (vabds_f32(v48, v49) <= (float)(v50 + v44))
            {
              v51 = a7[1];
              v52 = a7[4];
              v53 = a7[7];
              v54 = (float)((float)(v38 * v52) + (float)(v37 * v51)) + (float)(v40 * v53);
              v55 = a8[4];
              v56 = a8[1];
              v57 = v55 - v56;
              v58 = (float)((float)((float)(v46 * v52) + (float)(v45 * v51)) + (float)(v47 * v53))
                  + (float)(a7[10] * 2.0);
              v59 = v55 + v56;
              v60 = fabsf(v54);
              if (vabds_f32(v58, v55 + v56) <= (float)((float)(v55 - v56) + v60))
              {
                v61 = a7[2];
                v62 = a7[5];
                v63 = a7[8];
                v64 = (float)((float)(v38 * v62) + (float)(v37 * v61)) + (float)(v40 * v63);
                v65 = a8[5];
                v66 = a8[2];
                v67 = v65 - v66;
                v68 = (float)((float)((float)(v46 * v62) + (float)(v45 * v61)) + (float)(v47 * v63))
                    + (float)(a7[11] * 2.0);
                v69 = v65 + v66;
                v70 = fabsf(v64);
                if (vabds_f32(v68, v69) <= (float)(v67 + v70))
                {
                  v71 = v48 - v49;
                  v72 = v68 - v69;
                  v73 = fabsf((float)(v54 * v72) - (float)(v64 * (float)(v58 - v59)));
                  v74 = (float)(v60 * v67) + (float)(v57 * v70);
                  v75 = fabsf((float)(v64 * v71) - (float)(v42 * v72));
                  v76 = (float)(v50 * v67) + (float)(v44 * v70);
                  v77 = v73 <= v74 && v75 <= v76;
                  v78 = fabsf((float)(v42 * (float)(v58 - v59)) - (float)(v54 * v71));
                  v79 = (float)(v50 * v57) + (float)(v44 * v60);
                  if (v77 && v78 <= v79)
                  {
                    v81 = vsub_f32(v28, *(float32x2_t *)&v10);
                    v82 = *(float32x2_t *)(a5 + 8);
                    v82.i32[1] = *(_DWORD *)(a5 + 20);
                    v83 = v29 - v26;
                    v84 = v83 * *(float *)(a5 + 32);
                    v85 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a5, v81.f32[0]), vmul_lane_f32(*(float32x2_t *)(a5 + 12), v81, 1)), vmul_n_f32(*(float32x2_t *)(a5 + 24), v83));
                    v86 = vaddv_f32(vmul_f32(v81, v82)) + v84;
                    v87 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v85, v85).i32[1]), v85.f32[0], v85.f32[0])
                        + (float)(v86 * v86);
                    v97 = a3;
                    v96 = a2;
                    v95 = v10;
                    if (v87 <= 0.0)
                    {
                      v89 = 0;
                      v90 = 0.0;
                    }
                    else
                    {
                      v88 = 1.0 / sqrtf(v87);
                      v89 = vmul_n_f32(v85, v88);
                      v90 = v86 * v88;
                    }
                    v98 = v89;
                    v99 = v90;
                    result = physx::Gu::SeparatingAxes::addAxis(v93, (float *)&v98);
                    a3 = v97;
                    a2 = v96;
                    v17 = v91;
                    v15 = v92;
                    v10 = v95;
                  }
                }
              }
            }
          }
        }
        while (v20 != v21);
      }
      --a3;
    }
    while (a3);
  }
  return result;
}

uint64_t `anonymous namespace'::ConvexMeshContactGeneration::generateLastContacts(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int32 v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  int v46;
  int v47;
  unsigned int j;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  float v58;
  unsigned int i;
  unsigned int k;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  int v69;
  float v70[3];
  float v71[4];

  v1 = *(_DWORD *)(*(_QWORD *)this + 4368);
  if (v1 > 0x10)
  {
    v2 = this;
    v3 = 0;
    v4 = *(_QWORD *)(*(_QWORD *)this + 4360);
    v5 = v1 / 0x11uLL;
    v6 = this + 8;
    v7 = this + 1292;
    do
    {
      v8 = v4 + 68 * v3;
      v9 = *(_DWORD *)v8;
      v10 = *(_DWORD *)(v8 + 40);
      v11 = *(_DWORD *)(v8 + 44);
      v12 = *(_DWORD *)(v8 + 48);
      v13 = *(float *)(v8 + 16);
      v14 = *(float *)(v8 + 20);
      v16 = *(float *)(v8 + 8);
      v15 = *(float *)(v8 + 12);
      v17 = *(float *)(v8 + 24);
      v18 = *(float *)(v8 + 28);
      v19 = *(float *)(v8 + 32);
      v20 = *(float *)(v8 + 36);
      v22 = *(float *)(v8 + 4);
      v21 = v8 + 4;
      v23 = v22;
      v24 = v13 - v22;
      v25 = v14 - v16;
      v26 = v17 - v15;
      v27 = v18 - v22;
      v28 = v19 - v16;
      v29 = v20 - v15;
      v30 = v22 - *(float *)(v2 + 2160);
      v31 = v16 - *(float *)(v2 + 2164);
      v32 = v15 - *(float *)(v2 + 2168);
      v33 = (float)((float)(v25 * v25) + (float)(v24 * v24)) + (float)(v26 * v26);
      v34 = (float)((float)((float)(v14 - v16) * (float)(v19 - v16)) + (float)((float)(v13 - v22) * (float)(v18 - v22)))
          + (float)((float)(v17 - v15) * (float)(v20 - v15));
      v35 = (float)((float)(v28 * v28) + (float)(v27 * v27)) + (float)(v29 * v29);
      v36 = (float)((float)((float)(v14 - v16) * v31) + (float)(v30 * (float)(v13 - v22)))
          + (float)(v32 * (float)(v17 - v15));
      v37 = (float)((float)((float)(v19 - v16) * v31) + (float)(v30 * (float)(v18 - v22)))
          + (float)(v32 * (float)(v20 - v15));
      v38 = (float)(v33 * v35) - (float)(v34 * v34);
      v39 = (float)(v34 * v37) - (float)(v35 * v36);
      v40 = (float)(v34 * v36) - (float)(v33 * v37);
      if ((float)(v39 + v40) <= fabsf(v38))
      {
        if (v39 >= 0.0)
        {
          if (v40 >= 0.0)
          {
            if (v38 == 0.0)
            {
LABEL_58:
              for (i = *(unsigned __int8 *)(v2 + (v10 & 0x7F) + 1932); i != 255; i = *(unsigned __int8 *)(v2 + i + 1804))
              {
                if (*(_DWORD *)(v7 + 4 * i) == v10)
                  goto LABEL_56;
              }
            }
LABEL_52:
            v49 = (float)(v25 * v29) - (float)(v26 * v28);
            v50 = (float)(v26 * v27) - (float)(v24 * v29);
            v51 = (float)(v24 * v28) - (float)(v25 * v27);
            v52 = (float)((float)(v50 * v50) + (float)(v49 * v49)) + (float)(v51 * v51);
            v53 = 0.0;
            v54 = 0.0;
            v55 = 0.0;
            if (v52 > 0.0)
            {
              v56 = 1.0 / sqrtf(v52);
              v53 = v49 * v56;
              v54 = v50 * v56;
              v55 = v51 * v56;
            }
            v71[0] = v53;
            v71[1] = v54;
            v71[2] = v55;
            v71[3] = -(float)((float)((float)(v16 * v54) + (float)(v23 * v53)) + (float)(v15 * v55));
            v70[0] = (float)((float)(v23 + v13) + v18) * 0.33333;
            v70[1] = (float)((float)(v16 + v14) + v19) * 0.33333;
            v70[2] = (float)((float)(v15 + v17) + v20) * 0.33333;
            v57 = v4 + 68 * v3;
            v68 = *(_QWORD *)(v57 + 52);
            v58 = *(float *)(v57 + 64);
            v69 = *(_DWORD *)(v57 + 60);
            if ((_DWORD)this)
              *(_BYTE *)(v2 + 2256) = 1;
            goto LABEL_56;
          }
          if (v36 >= 0.0)
            goto LABEL_58;
        }
        else if (v40 >= 0.0 || v36 >= 0.0)
        {
          if (v37 >= 0.0)
            goto LABEL_58;
          if (v35 <= (float)-v37)
          {
LABEL_37:
            for (j = *(unsigned __int8 *)(v2 + (v12 & 0x7F) + 1932); j != 255; j = *(unsigned __int8 *)(v2 + j + 1804))
            {
              if (*(_DWORD *)(v7 + 4 * j) == v12)
                goto LABEL_56;
            }
            goto LABEL_52;
          }
LABEL_23:
          if (v10 >= v12)
            v46 = v12;
          else
            v46 = v10;
          if (v10 <= v12)
            v47 = v12;
          else
            v47 = v10;
          goto LABEL_51;
        }
        if (v33 <= (float)-v36)
          goto LABEL_62;
      }
      else
      {
        if (v39 < 0.0)
        {
          v41 = v34 + v36;
          v42 = v35 + v37;
          if ((float)(v35 + v37) > v41)
          {
            v43 = v42 - v41;
            goto LABEL_30;
          }
          if (v42 <= 0.0)
            goto LABEL_37;
          if (v37 >= 0.0)
            goto LABEL_58;
          goto LABEL_23;
        }
        if (v40 >= 0.0)
        {
          v43 = (float)((float)(v35 + v37) - v34) - v36;
          if (v43 <= 0.0)
            goto LABEL_37;
LABEL_30:
          if (v43 >= (float)(v35 + (float)(v33 + (float)(v34 * -2.0))))
            goto LABEL_62;
          goto LABEL_31;
        }
        v44 = v34 + v37;
        v45 = v33 + v36;
        if ((float)(v33 + v36) > v44)
        {
          if ((float)(v45 - v44) >= (float)(v35 + (float)(v33 + (float)(v34 * -2.0))))
            goto LABEL_37;
LABEL_31:
          if (v11 >= v12)
            v46 = v12;
          else
            v46 = v11;
          if (v11 <= v12)
            v47 = v12;
          else
            v47 = v11;
          goto LABEL_51;
        }
        if (v45 <= 0.0)
        {
LABEL_62:
          for (k = *(unsigned __int8 *)(v2 + (v11 & 0x7F) + 1932); k != 255; k = *(unsigned __int8 *)(v2 + k + 1804))
          {
            if (*(_DWORD *)(v7 + 4 * k) == v11)
              goto LABEL_56;
          }
          goto LABEL_52;
        }
        if (v36 >= 0.0)
          goto LABEL_58;
      }
      if (v10 >= v11)
        v46 = v11;
      else
        v46 = v10;
      if (v10 <= v11)
        v47 = v11;
      else
        v47 = v10;
LABEL_51:
      v66 = v14;
      v67 = v13;
      v64 = v17;
      v65 = v16;
      v62 = v19;
      v63 = v18;
      v61 = v20;
      this = physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::contains(v6, v46, v47);
      v20 = v61;
      v19 = v62;
      v18 = v63;
      v17 = v64;
      v16 = v65;
      v14 = v66;
      v13 = v67;
      if ((this & 1) == 0)
        goto LABEL_52;
LABEL_56:
      ++v3;
    }
    while (v3 != v5);
  }
  return this;
}

float `anonymous namespace'::ConvexMeshContactGeneration::ConvexMeshContactGeneration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, float a11, char a12, __int128 a13, uint64_t a14)
{
  __int128 v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float result;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 1288) = 0;
  *(_QWORD *)&v14 = -1;
  *((_QWORD *)&v14 + 1) = -1;
  *(_OWORD *)(a1 + 1160) = v14;
  *(_OWORD *)(a1 + 1176) = v14;
  *(_OWORD *)(a1 + 1192) = v14;
  *(_OWORD *)(a1 + 1208) = v14;
  *(_OWORD *)(a1 + 1224) = v14;
  *(_OWORD *)(a1 + 1240) = v14;
  *(_OWORD *)(a1 + 1256) = v14;
  *(_OWORD *)(a1 + 1272) = v14;
  *(_DWORD *)(a1 + 2060) = 0;
  *(_OWORD *)(a1 + 1932) = v14;
  *(_OWORD *)(a1 + 1948) = v14;
  *(_OWORD *)(a1 + 1964) = v14;
  *(_OWORD *)(a1 + 1980) = v14;
  *(_OWORD *)(a1 + 1996) = v14;
  *(_OWORD *)(a1 + 2012) = v14;
  *(_OWORD *)(a1 + 2028) = v14;
  *(_OWORD *)(a1 + 2044) = v14;
  LODWORD(v14) = *(_DWORD *)a3;
  v15 = *(float *)(a3 + 4);
  v16 = *(float *)(a3 + 8);
  v17 = *(float *)(a3 + 12);
  v18 = *(float *)&v14 * (float)(*(float *)&v14 + *(float *)&v14);
  v19 = v15 * (float)(v15 + v15);
  v20 = v16 * (float)(v16 + v16);
  v21 = (float)(*(float *)&v14 + *(float *)&v14) * v15;
  v22 = (float)(*(float *)&v14 + *(float *)&v14) * v16;
  v23 = (float)(*(float *)&v14 + *(float *)&v14) * v17;
  v24 = (float)(v15 + v15) * v16;
  v25 = (float)(v15 + v15) * v17;
  v26 = (float)(v16 + v16) * v17;
  *(float *)&v14 = (float)(1.0 - v19) - v20;
  v27 = v21 + v26;
  v28 = v22 - v25;
  *(_DWORD *)(a1 + 2064) = v14;
  *(float *)(a1 + 2068) = v21 + v26;
  *(float *)(a1 + 2072) = v22 - v25;
  v29 = v21 - v26;
  v30 = (float)(1.0 - v18) - v20;
  v31 = v24 + v23;
  *(float *)(a1 + 2076) = v29;
  *(float *)(a1 + 2080) = v30;
  *(float *)(a1 + 2084) = v24 + v23;
  v32 = v22 + v25;
  v33 = v24 - v23;
  v34 = (float)(1.0 - v18) - v19;
  *(float *)(a1 + 2088) = v32;
  *(float *)(a1 + 2092) = v24 - v23;
  *(float *)(a1 + 2096) = v34;
  v35 = *(float *)(a3 + 16);
  v36 = *(float *)(a3 + 20);
  *(float *)(a1 + 2100) = v35;
  *(float *)(a1 + 2104) = v36;
  v37 = *(float *)(a3 + 24);
  *(float *)(a1 + 2108) = v37;
  v38 = *(float *)a4;
  v39 = *(float *)(a4 + 4);
  v40 = *(float *)(a4 + 8);
  v41 = *(float *)(a4 + 12);
  v42 = v39 + v39;
  v43 = v40 + v40;
  v44 = v39 * (float)(v39 + v39);
  v45 = v40 * (float)(v40 + v40);
  v46 = (float)(v38 + v38) * v39;
  v47 = (float)(v38 + v38) * v40;
  v48 = (float)(v38 + v38) * v41;
  v49 = v42 * v40;
  v50 = v42 * v41;
  v51 = v43 * v41;
  *(float *)(a1 + 2112) = (float)(1.0 - v44) - v45;
  *(float *)(a1 + 2116) = v46 + v51;
  *(float *)(a1 + 2120) = v47 - v50;
  v52 = 1.0 - (float)(v38 * (float)(v38 + v38));
  *(float *)(a1 + 2124) = v46 - v51;
  *(float *)(a1 + 2128) = v52 - v45;
  *(float *)(a1 + 2132) = v49 + v48;
  *(float *)(a1 + 2136) = v47 + v50;
  *(float *)(a1 + 2140) = v49 - v48;
  *(float *)(a1 + 2144) = v52 - v44;
  *(_QWORD *)(a1 + 2148) = *(_QWORD *)(a4 + 16);
  *(_DWORD *)(a1 + 2156) = *(_DWORD *)(a4 + 24);
  *(_QWORD *)(a1 + 2184) = a5;
  *(_QWORD *)(a1 + 2192) = a6;
  *(_QWORD *)(a1 + 2200) = a7;
  *(_QWORD *)(a1 + 2208) = a8;
  *(float *)(a1 + 2216) = a9;
  *(float *)(a1 + 2220) = a10;
  *(_BYTE *)(a1 + 2225) = a12;
  *(float *)(a1 + 2228) = a11;
  *(_OWORD *)(a1 + 2232) = a13;
  *(_QWORD *)(a1 + 2248) = a14;
  *(_DWORD *)(a2 + 4368) = 0;
  *(_BYTE *)(a1 + 2256) = 0;
  v53 = a5[1];
  v54 = *(float *)&v14 * *a5;
  *(float *)&v14 = v29 * v53;
  v55 = (float)(v27 * *a5) + (float)(v30 * v53);
  v56 = (float)(v28 * *a5) + (float)(v31 * v53);
  v57 = a5[2];
  *(float *)(a1 + 2160) = v35 + (float)((float)(v54 + *(float *)&v14) + (float)(v32 * v57));
  *(float *)(a1 + 2164) = v36 + (float)(v55 + (float)(v33 * v57));
  *(float *)(a1 + 2168) = v37 + (float)(v56 + (float)(v34 * v57));
  v58 = a5[1];
  v59 = a5[2];
  result = (float)((float)((float)(*a5 * *(float *)(a6 + 8)) + (float)(v58 * *(float *)(a6 + 20)))
                 + (float)(v59 * *(float *)(a6 + 32)))
         + *(float *)(a6 + 44);
  *(float32x2_t *)(a1 + 2172) = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a6, *a5), vmul_n_f32(*(float32x2_t *)(a6 + 12), v58)), vmul_n_f32(*(float32x2_t *)(a6 + 24), v59)), *(float32x2_t *)(a6 + 36));
  *(float *)(a1 + 2180) = result;
  return result;
}

uint64_t ConvexMeshContactGenerationCallback::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, double a6, float32x4_t a7, float32x4_t a8, uint64_t a9, unsigned int *a10)
{
  float v16;
  __int128 v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  BOOL v30;
  uint64_t v31;
  float32x2_t *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  float32x2_t v44;
  float v45;
  float v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (physx::Gu::intersectTriangleBox(*(float32x4_t **)(a1 + 2312), a3, a4, a5, a6, a7, a8))
  {
    if (*(_BYTE *)(a1 + 2296))
    {
      v44 = *(float32x2_t *)a3;
      v16 = a3[2];
      v46 = *a4;
      *(_QWORD *)&v17 = *(_QWORD *)(a4 + 1);
      *((_QWORD *)&v17 + 1) = *(_QWORD *)a5;
      v47 = v17;
      v18 = a5[2];
      v19 = 2;
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 2280);
      v21 = *(float *)(v20 + 8);
      v22 = *a3;
      v23 = a3[1];
      v24 = *(float *)(v20 + 20);
      v25 = a3[2];
      v26 = *(float *)(v20 + 32);
      v16 = (float)((float)(*a3 * v21) + (float)(v23 * v24)) + (float)(v25 * v26);
      v27 = *a4;
      v28 = a4[1];
      v29 = a4[2];
      v30 = *(_BYTE *)(v20 + 72) == 0;
      v31 = 24;
      if (!*(_BYTE *)(v20 + 72))
        v31 = 12;
      v32 = (float32x2_t *)((char *)&v44 + v31);
      *(float *)((char *)&v44 + v31 + 8) = (float)((float)(v21 * *a4) + (float)(v24 * v28)) + (float)(v26 * v29);
      v33 = *a5;
      v34 = a5[1];
      v35 = (float)(v21 * *a5) + (float)(v24 * v34);
      v36 = a5[2];
      v18 = v35 + (float)(v26 * v36);
      v19 = 1;
      if (v30)
        v19 = 2;
      v37 = *(float32x2_t *)v20;
      v38 = *(float32x2_t *)(v20 + 12);
      v39 = *(float32x2_t *)(v20 + 24);
      v44 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v20, v22), vmul_n_f32(v38, v23)), vmul_n_f32(v39, v25));
      *v32 = vadd_f32(vadd_f32(vmul_n_f32(v37, v27), vmul_n_f32(v38, v28)), vmul_n_f32(v39, v29));
      *(float32x2_t *)((char *)&v44 + 12 * v19) = vadd_f32(vadd_f32(vmul_n_f32(v37, v33), vmul_n_f32(v38, v34)), vmul_n_f32(v39, v36));
    }
    v45 = v16;
    *((float *)&v44 + 3 * v19 + 2) = v18;
    v40 = *(unsigned int *)(a2 + 16);
    v41 = *(_QWORD *)(a1 + 2288);
    if (v41)
      v42 = *(unsigned __int8 *)(v41 + v40);
    else
      v42 = 56;
  }
  return 1;
}

void ConvexMeshContactGenerationCallback::~ConvexMeshContactGenerationCallback(ConvexMeshContactGenerationCallback *this)
{
  JUMPOUT(0x2276933B8);
}

float `anonymous namespace'::ConvexMeshContactGeneration::processTriangle(uint64_t a1, float *a2, __int32 a3, int a4, unsigned int *a5)
{
  float result;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  float v45;
  unsigned int v46;
  unsigned int v47;
  char v48;
  float v49;
  float32x2_t v50;
  float v51;
  float32x2_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57[4];

  result = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = v11 - *a2;
  v15 = a2[4];
  v14 = a2[5];
  v16 = a2[6];
  v17 = a2[7];
  v18 = v16 - *a2;
  v19 = a2[8];
  v20 = (float)((float)(v15 - v10) * (float)(v19 - v12)) - (float)((float)(v14 - v12) * (float)(v17 - v10));
  v21 = (float)((float)(v14 - v12) * v18) - (float)(v13 * (float)(v19 - v12));
  v22 = (float)(v13 * (float)(v17 - v10)) - (float)((float)(v15 - v10) * v18);
  v23 = (float)((float)(v21 * v21) + (float)(v20 * v20)) + (float)(v22 * v22);
  v24 = 0.0;
  v25 = 0.0;
  v26 = 0.0;
  if (v23 > 0.0)
  {
    v27 = 1.0 / sqrtf(v23);
    v24 = v20 * v27;
    v25 = v21 * v27;
    v26 = v22 * v27;
  }
  v57[0] = v24;
  v57[1] = v25;
  v28 = (float)((float)(v10 * v25) + (float)(result * v24)) + (float)(v12 * v26);
  v57[2] = v26;
  v57[3] = -v28;
  if ((float)((float)((float)((float)(v25 * *(float *)(a1 + 2164)) + (float)(*(float *)(a1 + 2160) * v24))
                     + (float)(*(float *)(a1 + 2168) * v26))
             - v28) >= 0.0)
  {
    v54 = (float)((float)(v11 + result) + v16) * 0.33333;
    v55 = (float)((float)(v15 + v10) + v17) * 0.33333;
    v56 = (float)((float)(v14 + v12) + v19) * 0.33333;
    v29 = (float)((float)(v54 * *(float *)(a1 + 2120)) + (float)(v55 * *(float *)(a1 + 2132)))
        + (float)(v56 * *(float *)(a1 + 2144));
    v30 = *(float *)(a1 + 2156);
    v52 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a1 + 2112), v54), vmul_n_f32(*(float32x2_t *)(a1 + 2124), v55)), vmul_n_f32(*(float32x2_t *)(a1 + 2136), v56)), *(float32x2_t *)(a1 + 2148));
    v53 = v29 + v30;
    v49 = 0.0;
    v48 = 0;
    if (triangleConvexTest(*(_QWORD *)(a1 + 2184), a4, a2, v57, (float *)&v52, *(_QWORD *)(a1 + 2200), a1 + 2064, (float *)(a1 + 2112), *(float *)(a1 + 2216), *(float **)(a1 + 2208), &v50, &v49, &v48, *(_BYTE *)(a1 + 2225)))
    {
      if (v48)
      {
        {
          *(_BYTE *)(a1 + 2256) = 1;
          v31 = *a5;
          v32 = a5[1];
          if (*a5 >= v32)
            v33 = a5[1];
          else
            v33 = *a5;
          if (v31 <= v32)
            v31 = a5[1];
          v46 = v33;
          v47 = v31;
          physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(a1 + 8, (int *)&v46);
          v34 = *a5;
          v35 = a5[2];
          if (*a5 >= v35)
            v36 = a5[2];
          else
            v36 = *a5;
          if (v34 <= v35)
            v34 = a5[2];
          v46 = v36;
          v47 = v34;
          physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(a1 + 8, (int *)&v46);
          v37 = a5[1];
          v38 = a5[2];
          if (v37 >= v38)
            v39 = a5[2];
          else
            v39 = a5[1];
          if (v37 <= v38)
            v37 = a5[2];
          v46 = v39;
          v47 = v37;
          physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(a1 + 8, (int *)&v46);
          v40 = a1 + 1292;
          v46 = *a5;
          physx::Gu::CacheMap<physx::Gu::CachedVertex,128u>::addData(v40, &v46);
          v46 = a5[1];
          physx::Gu::CacheMap<physx::Gu::CachedVertex,128u>::addData(v40, &v46);
          v46 = a5[2];
          physx::Gu::CacheMap<physx::Gu::CachedVertex,128u>::addData(v40, &v46);
        }
      }
      else
      {
        v41 = *(_QWORD *)a1;
        v42 = *(_DWORD *)(*(_QWORD *)a1 + 4368);
        v43 = v42 + 17;
        if ((*(_DWORD *)(*(_QWORD *)a1 + 4372) & 0x7FFFFFFFu) < v42 + 17)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<4352u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::recreate(v41, v42 + 17);
          v41 = *(_QWORD *)a1;
          v42 = *(_DWORD *)(*(_QWORD *)a1 + 4368);
        }
        v44 = *(_QWORD *)(v41 + 4360) + 4 * v42;
        *(_DWORD *)(v41 + 4368) = v43;
        *(_DWORD *)v44 = a3;
        *(_QWORD *)(v44 + 4) = *(_QWORD *)a2;
        *(_QWORD *)(v44 + 12) = *((_QWORD *)a2 + 1);
        *(_QWORD *)(v44 + 20) = *((_QWORD *)a2 + 2);
        *(_QWORD *)(v44 + 28) = *((_QWORD *)a2 + 3);
        *(float *)(v44 + 36) = a2[8];
        *(_DWORD *)(v44 + 40) = *a5;
        *(_DWORD *)(v44 + 44) = a5[1];
        *(_DWORD *)(v44 + 48) = a5[2];
        *(float32x2_t *)(v44 + 52) = v50;
        result = v51;
        v45 = v49;
        *(float *)(v44 + 60) = v51;
        *(float *)(v44 + 64) = v45;
      }
    }
  }
  return result;
}

uint64_t triangleConvexTest(uint64_t a1, int a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7, float *a8, float a9, float *a10, float32x2_t *a11, float *a12, char *a13, char a14)
{
  float v14;
  int8x8_t v15;
  unint64_t v21;
  size_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float32x2_t v34;
  float32x2_t v35;
  __int128 v36;
  uint64_t v37;
  unsigned int v38;
  float v40;
  char *v41;
  char *v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float *v54;
  float v55;
  float v56;
  float v61;
  float v64;
  float v66;
  float v67;
  uint64_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float *v106;
  float v107;
  float v108;
  float v113;
  float v116;
  float v117;
  float v119;
  float *v120;
  __int128 v121;
  float v127;
  float v130;
  float v131;
  float v133;
  float v134;
  char v135;
  uint64_t v136;
  float v137;
  uint64_t v140;
  float v142;
  float32x2_t v143;
  float v144;
  float *v147;
  float v148;
  float v149;
  float v152;
  float v154;
  float v155;
  float v157;
  char v158;
  float32_t v159;
  float *v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float32x2_t v198;
  uint64_t v199;
  int v200;
  float32x2_t v201;
  float32x2_t v202;
  float32x2_t v203;
  float v204;
  float v205;
  uint64_t v208;
  float v210;
  float v211;
  float v212;
  float v213;
  float32x2_t v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float32x2_t v219;
  float v220;
  float *v222;
  float v223;
  float v225;
  float v226;
  float v229;
  float v231;
  float v232;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float *v241;
  int v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float *v250;
  int v251;
  float v252;
  float v253;
  float v254;
  float v255;
  uint64_t v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float32x2_t v279;
  float32x2_t v280;
  float32x2_t v281;
  unsigned int v282;
  uint64_t v283;
  unint64_t v284;
  float *v285;
  int v286;
  unint64_t v287;
  uint64_t v288;
  unsigned int v289;
  uint64_t v290;
  unsigned int v291;
  float *v292;
  float *v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float32x2_t v310;
  float32x2_t v311;
  float32x2_t v312;
  float32x2_t v313;
  float32x2_t v314;
  float v315;
  int32x2_t v316;
  float v317;
  float v318;
  float32x2_t v319;
  float v320;
  float v321;
  float *v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  float v345;
  float v346;
  float *v347;
  float v348;
  float v349;
  float v350;
  uint64_t v351;
  float *v352;
  uint64_t v353;
  uint64_t v354;
  float v355;
  float v356;
  float v357;
  float v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  float v364;
  float v365;
  float v366;
  float v367;
  float v368;
  __int128 v369;
  float v375;
  float v378;
  float v379;
  float v380;
  float32_t v381;
  float32x2_t *v382;
  uint64_t v383;
  float v384;
  float v385;
  float v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float v394;
  float v395;
  uint64_t v396;
  float *v397;
  uint64_t v398;
  float *v399;
  float32x2_t *v400;
  float *v401;
  char *v402;
  __int128 v403;
  __int128 v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  float *v408;
  int v409;
  char *v410;
  unint64_t v411;
  float v412;
  float *v413;
  float v414;
  float v415;
  __int128 v416;
  float v417;
  __int128 v418;
  float v419;
  float32x2_t v420;
  float v421;
  float v422;
  float v423;
  float32x2_t v424;
  float v425;
  float v426[2];
  int v427;
  float v428;
  float v429[9];
  uint64_t v430;

  v405 = a6;
  v413 = a4;
  v423 = a9;
  v417 = *(float *)&a2;
  v408 = a10;
  v430 = *MEMORY[0x24BDAC8D0];
  v21 = *(unsigned int *)(a1 + 16);
  MEMORY[0x24BDAC7A8](a1);
  v23 = (char *)&v383 - ((v22 + 15) & 0x7FFFFFFF0);
  bzero(v23, v22);
  v28 = *(_QWORD *)(a1 + 24);
  v27 = *(_QWORD *)(a1 + 32);
  if (a14)
  {
    if ((_DWORD)v21)
    {
      v29 = 0;
      v30 = *a5;
      v31 = a5[1];
      v32 = a5[2];
      v33 = *(float *)a7;
      v422 = *(float *)(a7 + 12);
      v421 = *(float *)(a7 + 24);
      v34 = *(float32x2_t *)(a7 + 4);
      *(_QWORD *)&v24 = *(_QWORD *)(a7 + 16);
      v420 = *(float32x2_t *)(a7 + 28);
      v35 = (float32x2_t)__PAIR64__(DWORD1(v24), v34.u32[0]);
      v419 = *(float *)(a7 + 40);
      v36 = v24;
      v37 = v28 + 12;
      v38 = -1;
      _S6 = *(_DWORD *)(a7 + 44);
      v40 = 3.4028e38;
      v41 = v23;
      v42 = v23;
      DWORD1(v36) = v34.i32[1];
      v418 = v36;
      v43 = v423;
      while (1)
      {
        v44 = *(float *)(v37 - 12);
        v45 = *(float *)(v37 - 8);
        v47 = *(float *)(v37 - 4);
        v46 = *(float *)v37;
        if ((float)(*(float *)v37 + (float)((float)((float)(v31 * v45) + (float)(v30 * v44)) + (float)(v32 * v47))) >= 0.0)
        {
          *(_DWORD *)v42 = v29;
          v42 += 4;
          v48 = (float)((float)(v33 * v44) + (float)(v422 * v45)) + (float)(v421 * v47);
          _D22 = vadd_f32(vadd_f32(vmul_n_f32(v34, v44), vmul_n_f32(*(float32x2_t *)&v24, v45)), vmul_n_f32(v420, v47));
          __asm { FMLA            S27, S6, V22.S[1] }
          v54 = (float *)(v27 + 12 * *(unsigned __int8 *)(v37 + 7));
          v55 = _S27 + (float)((float)((float)(v45 * v54[1]) + (float)(v44 * *v54)) + (float)(v47 * v54[2]));
          v56 = _S27 - v46;
          _S26 = *((_DWORD *)a3 + 2);
          __asm { FMLA            S25, S26, V22.S[1] }
          _S28 = *((_DWORD *)a3 + 5);
          __asm { FMLA            S26, S28, V22.S[1] }
          if (_S25 >= _S26)
            v61 = _S26;
          else
            v61 = _S25;
          if (_S25 > _S26)
            _S26 = _S25;
          _S25 = *((_DWORD *)a3 + 8);
          __asm { FMLA            S28, S25, V22.S[1] }
          if (v61 >= _S28)
            v64 = _S28;
          else
            v64 = v61;
          if (_S26 <= _S28)
            _S26 = _S28;
          if ((float)(v56 + v43) < v64 || (float)(_S26 + v43) < v55)
            return 0;
          v66 = v56 - v64;
          v67 = _S26 - v55;
          if (v66 < v67)
            v67 = v66;
          if (v67 < v40)
          {
            v14 = v48;
            v40 = v67;
            v38 = v29;
            v15 = (int8x8_t)_D22;
          }
        }
        ++v29;
        v37 += 20;
        if (v21 == v29)
          goto LABEL_53;
      }
    }
    goto LABEL_55;
  }
  if (!(_DWORD)v21)
  {
LABEL_55:
    v411 = 0;
    v38 = -1;
    v40 = 3.4028e38;
    v41 = v23;
    goto LABEL_56;
  }
  v68 = 0;
  v69 = v408[9];
  v70 = v408[10];
  v71 = a5[1];
  v72 = v408[11];
  v73 = v408[12];
  v74 = v408[13];
  v75 = v408[14];
  v76 = (float)(*a5 * v69) + (float)(v71 * v73);
  v77 = (float)(*a5 * v70) + (float)(v71 * v74);
  v78 = (float)(*a5 * v72) + (float)(v71 * v75);
  v79 = a5[2];
  v80 = v408[15];
  v81 = v408[16];
  v82 = v408[17];
  v83 = v76 + (float)(v79 * v80);
  v84 = v77 + (float)(v79 * v81);
  v85 = v78 + (float)(v79 * v82);
  v86 = *(float *)a7;
  v422 = *(float *)(a7 + 12);
  v421 = *(float *)(a7 + 24);
  *(_QWORD *)&v25 = *(_QWORD *)(a7 + 4);
  *(_QWORD *)&v26 = *(_QWORD *)(a7 + 16);
  v420 = *(float32x2_t *)(a7 + 28);
  v419 = *(float *)(a7 + 40);
  _S6 = *(_DWORD *)(a7 + 44);
  v87 = v25;
  DWORD1(v87) = DWORD1(v26);
  v416 = v87;
  v88 = v26;
  DWORD1(v88) = DWORD1(v25);
  v418 = v88;
  v89 = v28 + 12;
  v38 = -1;
  v40 = 3.4028e38;
  v41 = v23;
  v42 = v23;
  do
  {
    v90 = *(float *)(v89 - 12);
    v91 = *(float *)(v89 - 8);
    v92 = *(float *)(v89 - 4);
    v93 = *(float *)v89;
    if ((float)(*(float *)v89 + (float)((float)((float)(v84 * v91) + (float)(v83 * v90)) + (float)(v85 * v92))) >= 0.0)
    {
      v94 = (float)((float)(v69 * v90) + (float)(v73 * v91)) + (float)(v80 * v92);
      v95 = (float)((float)(v70 * v90) + (float)(v74 * v91)) + (float)(v81 * v92);
      v96 = (float)((float)(v72 * v90) + (float)(v75 * v91)) + (float)(v82 * v92);
      v97 = sqrtf((float)((float)(v95 * v95) + (float)(v94 * v94)) + (float)(v96 * v96));
      v98 = 1.0 / v97;
      if (v97 <= 0.0)
        v99 = 1.0;
      else
        v99 = 1.0 / v97;
      v100 = v94 * v99;
      v101 = v95 * v99;
      v102 = v96 * v99;
      *(_DWORD *)v42 = v68;
      v42 += 4;
      v103 = (float)(v421 * v102) + (float)((float)(v86 * v100) + (float)(v422 * v101));
      _D12 = vadd_f32(vmul_n_f32(v420, v102), vadd_f32(vmul_n_f32(*(float32x2_t *)&v25, v100), vmul_n_f32(*(float32x2_t *)&v26, v101)));
      __asm { FMLA            S0, S6, V12.S[1] }
      v106 = (float *)(v27 + 12 * *(unsigned __int8 *)(v89 + 7));
      v107 = _S0
           + (float)((float)((float)((float)(v91 * v106[1]) + (float)(v90 * *v106)) + (float)(v92 * v106[2])) * v98);
      v108 = _S0 - (float)(v93 * v98);
      _S1 = *((_DWORD *)a3 + 2);
      __asm { FMLA            S0, S1, V12.S[1] }
      _S3 = *((_DWORD *)a3 + 5);
      __asm { FMLA            S1, S3, V12.S[1] }
      if (_S0 >= _S1)
        v113 = _S1;
      else
        v113 = _S0;
      if (_S0 <= _S1)
        _S0 = _S1;
      _S3 = *((_DWORD *)a3 + 8);
      __asm { FMLA            S1, S3, V12.S[1] }
      if (v113 >= _S1)
        v116 = _S1;
      else
        v116 = v113;
      if (_S0 <= _S1)
        v117 = _S1;
      else
        v117 = _S0;
      if ((float)(v108 + v423) < v116 || (float)(v117 + v423) < v107)
        return 0;
      if ((float)(v108 - v116) >= (float)(v117 - v107))
        v119 = v117 - v107;
      else
        v119 = v108 - v116;
      if (v119 < v40)
      {
        v14 = v103;
        v40 = v119;
        v38 = v68;
        v15 = (int8x8_t)_D12;
      }
    }
    ++v68;
    v89 += 20;
  }
  while (v21 != v68);
  v43 = v423;
  v35 = (float32x2_t)v416;
LABEL_53:
  if (v38 == -1)
  {
    if ((a14 & 1) != 0)
    {
      v136 = 0;
      v137 = *(float *)a7;
      _S19 = *((_DWORD *)a3 + 2);
      _S22 = *((_DWORD *)a3 + 5);
      v140 = v28 + 12;
      v38 = -1;
      _S25 = *((_DWORD *)a3 + 8);
      while (1)
      {
        v142 = *(float *)(v140 - 4);
        v143 = *(float32x2_t *)(v140 - 12);
        v144 = (float)((float)(v137 * v143.f32[0]) + vmuls_lane_f32(v422, v143, 1)) + (float)(v421 * v142);
        _D4 = (int8x8_t)vadd_f32(vadd_f32(vmul_f32(v35, v143), vmul_f32(*(float32x2_t *)&v418, (float32x2_t)vrev64_s32((int32x2_t)v143))), vmul_n_f32(v420, v142));
        __asm { FMLA            S1, S6, V4.S[1] }
        v147 = (float *)(v27 + 12 * *(unsigned __int8 *)(v140 + 7));
        v148 = _S1
             + (float)(vmlas_n_f32(vmuls_lane_f32(v147[1], v143, 1), *v147, v143.f32[0]) + (float)(v142 * v147[2]));
        v149 = _S1 - *(float *)v140;
        __asm
        {
          FMLA            S0, S19, V4.S[1]
          FMLA            S1, S22, V4.S[1]
        }
        if (_S0 >= _S1)
          v152 = _S1;
        else
          v152 = _S0;
        if (_S0 <= _S1)
          _S0 = _S1;
        __asm { FMLA            S1, S25, V4.S[1] }
        v154 = v152 >= _S1 ? _S1 : v152;
        v155 = _S0 <= _S1 ? _S1 : _S0;
        if ((float)(v149 + v43) < v154 || (float)(v155 + v43) < v148)
          return 0;
        v140 += 20;
        v157 = v149 - v154;
        if ((float)(v149 - v154) >= (float)(v155 - v148))
          v157 = v155 - v148;
        if (v157 < v40)
          v14 = v144;
        v15 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v157 < v40), 0x1FuLL)), _D4, v15);
        if (v157 < v40)
        {
          v40 = v157;
          v38 = v136;
        }
        *(_DWORD *)&v41[4 * v136] = v136;
        if (v21 == ++v136)
          goto LABEL_132;
      }
    }
    v198 = v35;
    v199 = 0;
    v200 = *((_DWORD *)v408 + 11);
    v415 = v408[14];
    LODWORD(v416) = v200;
    v201 = *(float32x2_t *)(v408 + 9);
    v202 = *(float32x2_t *)(v408 + 12);
    v203 = *(float32x2_t *)(v408 + 15);
    v204 = v408[17];
    v205 = *(float *)a7;
    _S25 = *((_DWORD *)a3 + 2);
    _S28 = *((_DWORD *)a3 + 5);
    v208 = v28 + 12;
    v38 = -1;
    _S8 = *((_DWORD *)a3 + 8);
    do
    {
      v210 = *(float *)(v208 - 12);
      v211 = *(float *)(v208 - 8);
      v212 = *(float *)(v208 - 4);
      v213 = (float)((float)(*(float *)&v416 * v210) + (float)(v415 * v211)) + (float)(v204 * v212);
      v214 = vadd_f32(vadd_f32(vmul_n_f32(v201, v210), vmul_n_f32(v202, v211)), vmul_n_f32(v203, v212));
      v215 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v214, v214).i32[1]), v214.f32[0], v214.f32[0]) + (float)(v213 * v213));
      v216 = 1.0 / v215;
      if (v215 <= 0.0)
        v217 = 1.0;
      else
        v217 = 1.0 / v215;
      v218 = v213 * v217;
      v219 = vmul_n_f32(v214, v217);
      v220 = (float)(v421 * v218) + (float)((float)(v205 * v219.f32[0]) + vmuls_lane_f32(v422, v219, 1));
      _D4 = (int8x8_t)vadd_f32(vmul_n_f32(v420, v218), vadd_f32(vmul_f32(v198, v219), vmul_f32(*(float32x2_t *)&v418, (float32x2_t)vrev64_s32((int32x2_t)v219))));
      v222 = (float *)(v27 + 12 * *(unsigned __int8 *)(v208 + 7));
      v223 = (float)(v211 * v222[1]) + (float)(v210 * *v222);
      __asm { FMLA            S1, S6, V4.S[1] }
      v225 = _S1 + (float)((float)(v223 + (float)(v212 * v222[2])) * v216);
      v226 = _S1 - (float)(*(float *)v208 * v216);
      __asm
      {
        FMLA            S0, S25, V4.S[1]
        FMLA            S1, S28, V4.S[1]
      }
      if (_S0 >= _S1)
        v229 = _S1;
      else
        v229 = _S0;
      if (_S0 <= _S1)
        _S0 = _S1;
      __asm { FMLA            S1, S8, V4.S[1] }
      if (v229 >= _S1)
        v231 = _S1;
      else
        v231 = v229;
      if (_S0 <= _S1)
        v232 = _S1;
      else
        v232 = _S0;
      if ((float)(v226 + v423) < v231 || (float)(v232 + v423) < v225)
        return 0;
      v208 += 20;
      v234 = v226 - v231;
      if ((float)(v226 - v231) >= (float)(v232 - v225))
        v234 = v232 - v225;
      if (v234 < v40)
        v14 = v220;
      v15 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v234 < v40), 0x1FuLL)), _D4, v15);
      if (v234 < v40)
      {
        v40 = v234;
        v38 = v199;
      }
      *(_DWORD *)&v41[4 * v199] = v199;
      ++v199;
    }
    while (v21 != v199);
LABEL_132:
    v411 = v21;
  }
  else
  {
    v411 = (unint64_t)(v42 - v41) >> 2;
  }
LABEL_56:
  *a11 = 0;
  a11[1].i32[0] = 0;
  *a12 = 3.4028e38;
  v426[0] = 0.0;
  v429[0] = 0.0;
  v120 = v413;
  (*(void (**)(uint64_t, float *, uint64_t, float *, float *, float *))(a1 + 88))(a1, v413, a7, v408, v426, v429);
  *(float *)&v121 = *v120;
  *(_QWORD *)&_Q21 = *(_QWORD *)(v120 + 1);
  _S1 = *((_DWORD *)a3 + 2);
  __asm { FMLA            S0, S1, V21.S[1] }
  _S3 = *((_DWORD *)a3 + 5);
  __asm { FMLA            S1, S3, V21.S[1] }
  if (_S0 >= _S1)
    v127 = _S1;
  else
    v127 = _S0;
  if (_S0 > _S1)
    _S1 = _S0;
  _S0 = *((_DWORD *)a3 + 8);
  __asm { FMLA            S3, S0, V21.S[1] }
  if (v127 >= _S3)
    v130 = _S3;
  else
    v130 = v127;
  if (_S1 <= _S3)
    _S1 = _S3;
  v131 = v423;
  if ((float)(v429[0] + v423) < v130 || (float)(_S1 + v423) < v426[0])
    return 0;
  v402 = a13;
  v133 = v429[0] - v130;
  v134 = _S1 - v426[0];
  if (v133 >= v134)
    v133 = v134;
  if (v133 >= (float)(v40 + 0.0001))
  {
    v135 = 0;
    *(float *)&v121 = v14;
    v133 = v40;
    *(int8x8_t *)&_Q21 = v15;
  }
  else
  {
    v135 = 1;
  }
  v158 = LOBYTE(v417);
  *v402 = v135;
  if (v133 < *a12)
  {
    *a12 = v133;
    v159 = (float)((float)(*(float *)&v121 * *(float *)(v405 + 8)) + (float)(*(float *)(v405 + 20) * *(float *)&_Q21))
         + vmuls_lane_f32(*(float *)(v405 + 32), *(float32x2_t *)&_Q21, 1);
    *a11 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v405, *(float *)&v121), vmul_n_f32(*(float32x2_t *)(v405 + 12), *(float *)&_Q21)), vmul_lane_f32(*(float32x2_t *)(v405 + 24), *(float32x2_t *)&_Q21, 1));
    a11[1].f32[0] = v159;
  }
  v407 = *(_QWORD *)(a1 + 24);
  v160 = (float *)(v407 + 20 * v38);
  v161 = *a8;
  v162 = a8[1];
  v163 = v160[1];
  v164 = a8[2];
  v165 = a8[3];
  v166 = a8[4];
  v167 = a8[5];
  v168 = (float)(*v160 * *a8) + (float)(v163 * v165);
  v169 = (float)(*v160 * v162) + (float)(v163 * v166);
  v170 = (float)(*v160 * v164) + (float)(v163 * v167);
  v171 = a8[6];
  v172 = a8[7];
  v173 = v160[2];
  v174 = v160[3];
  v176 = a8[8];
  v175 = a8[9];
  v177 = v168 + (float)(v173 * v171);
  v178 = v169 + (float)(v173 * v172);
  v179 = v170 + (float)(v173 * v176);
  v180 = *v408;
  v181 = v177 * *v408;
  v422 = v408[1];
  v182 = v408[3];
  v421 = v408[2];
  v420.f32[0] = v182;
  v183 = v408[5];
  v419 = v408[4];
  *(float *)&v418 = v183;
  v184 = (float)(v177 * v421) + (float)(v178 * v183);
  v185 = v408[7];
  v417 = v408[6];
  *(float *)&v416 = v185;
  v186 = v408[8];
  v187 = (float)(v181 + (float)(v178 * v182)) + (float)(v179 * v417);
  v414 = v180;
  v415 = v186;
  v188 = (float)((float)(v177 * v422) + (float)(v178 * v419)) + (float)(v179 * v185);
  v189 = v184 + (float)(v179 * v186);
  v191 = a8[10];
  v190 = a8[11];
  v192 = v174 - (float)((float)((float)(v178 * v191) + (float)(v175 * v177)) + (float)(v190 * v179));
  if ((v158 & 8) != 0)
  {
    v193 = a3[1];
    v194 = a3[2];
    v195 = a3[3];
    v196 = a3[4];
    if ((float)(v192 + (float)((float)((float)(v188 * v193) + (float)(*a3 * v187)) + (float)(v194 * v189))) <= v131)
    {
      v197 = a3[5];
    }
    else
    {
      v197 = a3[5];
      v180 = v414;
      if ((float)(v192 + (float)((float)((float)(v188 * v196) + (float)(v195 * v187)) + (float)(v197 * v189))) > v131)
        goto LABEL_104;
    }
    v429[0] = *a3 - v195;
    v429[1] = v193 - v196;
    v429[2] = v194 - v197;
    v409 = 1;
    if ((v158 & 0x10) == 0)
      goto LABEL_140;
    goto LABEL_135;
  }
LABEL_104:
  v409 = 0;
  if ((v158 & 0x10) == 0)
    goto LABEL_140;
LABEL_135:
  v235 = a3[3];
  v236 = a3[4];
  v237 = a3[5];
  v238 = a3[6];
  v239 = a3[7];
  if ((float)(v192 + (float)((float)((float)(v188 * v236) + (float)(v235 * v187)) + (float)(v237 * v189))) <= v131)
  {
    v240 = a3[8];
    goto LABEL_139;
  }
  v240 = a3[8];
  v180 = v414;
  if ((float)(v192 + (float)((float)((float)(v188 * v239) + (float)(v238 * v187)) + (float)(v240 * v189))) <= v131)
  {
LABEL_139:
    v241 = &v429[3 * v409];
    v242 = v409 + 1;
    *v241 = v235 - v238;
    v241[1] = v236 - v239;
    v241[2] = v237 - v240;
    v409 = v242;
  }
LABEL_140:
  v401 = a12;
  v403 = _Q21;
  v404 = v121;
  if ((v158 & 0x20) != 0)
  {
    v243 = a3[6];
    v244 = a3[7];
    v245 = a3[8];
    v246 = *a3;
    v247 = a3[1];
    if ((float)(v192 + (float)((float)((float)(v188 * v244) + (float)(v243 * v187)) + (float)(v245 * v189))) <= v131)
    {
      v249 = a3[2];
    }
    else
    {
      v248 = (float)(v188 * v247) + (float)(v246 * v187);
      v249 = a3[2];
      if ((float)(v192 + (float)(v248 + (float)(v249 * v189))) > v131)
        goto LABEL_146;
    }
    v250 = &v429[3 * v409];
    v251 = v409 + 1;
    *v250 = v243 - v246;
    v250[1] = v244 - v247;
    v250[2] = v245 - v249;
    v409 = v251;
  }
LABEL_146:
  v400 = a11;
  v253 = *v120;
  v252 = v120[1];
  v255 = v120[2];
  v254 = v120[3];
  v256 = *(_QWORD *)(a1 + 32);
  v426[0] = 0.0;
  if (!(_DWORD)v411)
    goto LABEL_203;
  v397 = a3;
  v399 = a8;
  v394 = v162;
  v395 = v161;
  v257 = v162 * v253;
  v392 = v165;
  v393 = v164;
  v390 = v167;
  v391 = v166;
  v258 = v166 * v252;
  v259 = (float)(v161 * v253) + (float)(v165 * v252);
  v260 = (float)(v164 * v253) + (float)(v167 * v252);
  v388 = v172;
  v389 = v171;
  v386 = v176;
  v261 = v259 + (float)(v171 * v255);
  v262 = (float)(v257 + v258) + (float)(v172 * v255);
  v263 = v260 + (float)(v176 * v255);
  v264 = v422;
  v265 = v421;
  v266 = v420.f32[0];
  v267 = v419;
  v269 = v417;
  v268 = *(float *)&v418;
  v271 = v415;
  v270 = *(float *)&v416;
  v272 = (float)(v417 * v263) + (float)((float)(v180 * v261) + (float)(v420.f32[0] * v262));
  v273 = (float)(*(float *)&v416 * v263) + (float)((float)(v422 * v261) + (float)(v419 * v262));
  v274 = (float)(v415 * v263) + (float)((float)(v421 * v261) + (float)(*(float *)&v418 * v262));
  v384 = v191;
  v385 = v190;
  v387 = v175;
  v275 = v254 - (float)((float)((float)(v191 * v262) + (float)(v175 * v261)) + (float)(v190 * v263));
  v396 = a1;
  v406 = *(_QWORD *)(a1 + 40);
  v276 = *(float *)a7;
  v277 = *(float *)(a7 + 12);
  v278 = *(float *)(a7 + 24);
  v279 = *(float32x2_t *)(a7 + 4);
  v280 = *(float32x2_t *)(a7 + 16);
  v398 = a7;
  v281 = *(float32x2_t *)(a7 + 28);
  v412 = v277;
  *(float *)&v413 = v276;
  do
  {
    v282 = *(_DWORD *)v41;
    v410 = v41 + 4;
    if (v409)
    {
      v283 = v406 + *(unsigned __int16 *)(v407 + 20 * v282 + 16);
      v284 = *(unsigned __int8 *)(v407 + 20 * v282 + 18);
      v285 = v429;
      v286 = v409;
      while (!(_DWORD)v284)
      {
LABEL_167:
        v285 += 3;
        if (!--v286)
          goto LABEL_168;
      }
      v287 = 0;
      while (1)
      {
        v288 = v287++;
        v289 = *(unsigned __int8 *)(v283 + v288);
        v290 = v287 < v284 ? v288 + 1 : 0;
        v291 = *(unsigned __int8 *)(v283 + v290);
        v292 = (float *)(v256 + 12 * v289);
        v293 = (float *)(v256 + 12 * v291);
        v294 = v292[1];
        v295 = v292[2];
        v296 = *v293;
        v297 = v293[1];
        if ((float)(v275 + (float)((float)((float)(v273 * v294) + (float)(*v292 * v272)) + (float)(v295 * v274))) <= v131)
          break;
        v298 = *(float *)(v256 + 12 * v291 + 8);
        if ((float)(v275 + (float)((float)((float)(v273 * v297) + (float)(v296 * v272)) + (float)(v298 * v274))) <= v131)
          goto LABEL_159;
LABEL_166:
        if (v284 == v287)
          goto LABEL_167;
      }
      v298 = *(float *)(v256 + 12 * v291 + 8);
LABEL_159:
      v299 = *v292 - v296;
      v300 = v294 - v297;
      v301 = v295 - v298;
      v302 = v264 * v299;
      v303 = v267 * v300;
      v304 = (float)(v180 * v299) + (float)(v266 * v300);
      v305 = (float)(v265 * v299) + (float)(v268 * v300);
      v306 = v304 + (float)(v269 * v301);
      v307 = (float)(v302 + v303) + (float)(v270 * v301);
      v308 = v305 + (float)(v271 * v301);
      v309 = (float)((float)(v276 * v306) + (float)(v307 * v277)) + (float)(v308 * v278);
      v310 = vadd_f32(vadd_f32(vmul_n_f32(v279, v306), vmul_n_f32(v280, v307)), vmul_n_f32(v281, v308));
      v311 = *(float32x2_t *)(v285 + 1);
      v312.i32[0] = vdup_lane_s32((int32x2_t)v310, 1).u32[0];
      v312.f32[1] = v309;
      v313.i32[0] = vdup_lane_s32((int32x2_t)v311, 1).u32[0];
      v313.f32[1] = *v285;
      v314 = vmla_f32(vmul_f32(v311, vneg_f32(v312)), v313, v310);
      v315 = vmlas_n_f32(-(float)(v310.f32[0] * *v285), v309, v311.f32[0]);
      if (fabsf(v314.f32[0]) > 0.000001
        || (v316 = vcgt_f32(vabs_f32((float32x2_t)__PAIR64__(v314.u32[1], LODWORD(v315))), (float32x2_t)vdup_n_s32(0x358637BDu)), (v316.i8[4] & 1) != 0)|| (v316.i8[0] & 1) != 0)
      {
        v317 = (float)(COERCE_FLOAT(vmul_f32(v314, v314).i32[1]) + (float)(v314.f32[0] * v314.f32[0]))
             + (float)(v315 * v315);
        if (v317 <= 0.0)
        {
          v319 = 0;
          v320 = 0.0;
        }
        else
        {
          v318 = 1.0 / sqrtf(v317);
          v319 = vmul_n_f32(v314, v318);
          v320 = v315 * v318;
        }
        v424 = v319;
        v425 = v320;
        physx::Gu::SeparatingAxes::addAxis(v426, (float *)&v424);
        v131 = v423;
        v180 = v414;
        v271 = v415;
        v264 = v422;
        v265 = v421;
        v266 = v420.f32[0];
        v267 = v419;
        v269 = v417;
        v268 = *(float *)&v418;
        v270 = *(float *)&v416;
        v277 = v412;
        v276 = *(float *)&v413;
      }
      goto LABEL_166;
    }
LABEL_168:
    v41 = v410;
    v411 = (v411 - 1);
  }
  while ((_DWORD)v411);
  v321 = v426[0];
  if (v426[0] != 0.0)
  {
    v322 = v397;
    v323 = v397[1];
    v324 = (float)(v395 * *v397) + (float)(v392 * v323);
    v325 = (float)(v394 * *v397) + (float)(v391 * v323);
    v326 = (float)(v393 * *v397) + (float)(v390 * v323);
    v327 = v397[2];
    v328 = v397[3];
    v329 = v387 + (float)(v324 + (float)(v389 * v327));
    v330 = v384 + (float)(v325 + (float)(v388 * v327));
    v331 = v385 + (float)(v326 + (float)(v386 * v327));
    v332 = v395 * v328;
    v333 = v394 * v328;
    v334 = v393 * v328;
    v335 = v397[4];
    v336 = v397[5];
    v337 = v387 + (float)((float)(v332 + (float)(v392 * v335)) + (float)(v389 * v336));
    v338 = v384 + (float)((float)(v333 + (float)(v391 * v335)) + (float)(v388 * v336));
    v339 = v385 + (float)((float)(v334 + (float)(v390 * v335)) + (float)(v386 * v336));
    v340 = v397[6];
    v341 = v397[7];
    v342 = (float)(v395 * v340) + (float)(v392 * v341);
    v343 = (float)(v394 * v340) + (float)(v391 * v341);
    v344 = (float)(v393 * v340) + (float)(v390 * v341);
    v345 = v397[8];
    v346 = v387 + (float)(v342 + (float)(v389 * v345));
    v347 = (float *)&v427;
    v348 = v384 + (float)(v343 + (float)(v388 * v345));
    v349 = 3.4028e38;
    v350 = v385 + (float)(v344 + (float)(v386 * v345));
    v351 = v405;
    v353 = v398;
    v352 = v399;
    v354 = v396;
    v422 = v346;
    v421 = v350;
    while (1)
    {
      v355 = *(v347 - 1);
      v356 = v347[1];
      v357 = (float)((float)(v355 * *v352) + (float)(*v347 * v352[3])) + (float)(v356 * v352[6]);
      v358 = (float)((float)(v355 * v352[1]) + (float)(*v347 * v352[4])) + (float)(v356 * v352[7]);
      v359 = (float)((float)(v355 * v352[2]) + (float)(*v347 * v352[5])) + (float)(v356 * v352[8]);
      v360 = (float)((float)(v330 * v358) + (float)(v329 * v357)) + (float)(v331 * v359);
      v361 = (float)((float)(v338 * v358) + (float)(v337 * v357)) + (float)(v339 * v359);
      if (v360 >= v361)
        v362 = (float)((float)(v338 * v358) + (float)(v337 * v357)) + (float)(v339 * v359);
      else
        v362 = (float)((float)(v330 * v358) + (float)(v329 * v357)) + (float)(v331 * v359);
      if (v360 <= v361)
        v360 = (float)((float)(v338 * v358) + (float)(v337 * v357)) + (float)(v339 * v359);
      v363 = (float)((float)(v348 * v358) + (float)(v346 * v357)) + (float)(v350 * v359);
      if (v362 >= v363)
        v362 = (float)((float)(v348 * v358) + (float)(v346 * v357)) + (float)(v350 * v359);
      if (v360 <= v363)
        v360 = (float)((float)(v348 * v358) + (float)(v346 * v357)) + (float)(v350 * v359);
      v364 = (float)((float)(v358 * *(float *)(v354 + 4)) + (float)(*(float *)v354 * v357))
           + (float)(*(float *)(v354 + 8) * v359);
      v365 = (float)((float)(v358 * COERCE_FLOAT(*(_DWORD *)(v354 + 72) | LODWORD(v358) & 0x80000000))
                   + (float)(COERCE_FLOAT(*(_DWORD *)(v354 + 68) | LODWORD(v357) & 0x80000000) * v357))
           + (float)(COERCE_FLOAT(*(_DWORD *)(v354 + 76) | LODWORD(v359) & 0x80000000) * v359);
      if (v365 <= *(float *)(v354 + 64))
        v365 = *(float *)(v354 + 64);
      v366 = v364 - v365;
      v367 = (float)(v364 + v365) - v362;
      v368 = v360 - v366;
      if (v367 >= v368)
        v367 = v368;
      if (v367 <= v349)
      {
        v424.i32[0] = 0;
        v428 = 0.0;
        (*(void (**)(uint64_t, float *, uint64_t, float *, float32x2_t *, float *))(v354 + 88))(v354, v347 - 1, v353, v408, &v424, &v428);
        *(float *)&v369 = *(v347 - 1);
        *(_QWORD *)&_Q1 = *(_QWORD *)v347;
        _S3 = *((_DWORD *)v322 + 2);
        __asm { FMLA            S2, S3, V1.S[1] }
        _S5 = *((_DWORD *)v322 + 5);
        __asm { FMLA            S3, S5, V1.S[1] }
        if (_S2 >= _S3)
          v375 = _S3;
        else
          v375 = _S2;
        if (_S2 > _S3)
          _S3 = _S2;
        _S2 = *((_DWORD *)v322 + 8);
        __asm { FMLA            S5, S2, V1.S[1] }
        if (v375 >= _S5)
          v378 = _S5;
        else
          v378 = v375;
        if (_S3 <= _S5)
          _S3 = _S5;
        if ((float)(v428 + v423) < v378 || (float)(_S3 + v423) < v424.f32[0])
          return 0;
        v379 = v428 - v378;
        v380 = _S3 - v424.f32[0];
        if (v379 >= v380)
          v379 = v380;
        v346 = v422;
        v350 = v421;
        if (v379 < v349)
        {
          v349 = v379;
          v403 = _Q1;
          v404 = v369;
        }
      }
      v347 += 3;
      --LODWORD(v321);
      if (v321 == 0.0)
        goto LABEL_204;
    }
  }
LABEL_203:
  v349 = 3.4028e38;
  v351 = v405;
LABEL_204:
  if (v349 < *v401)
  {
    *v401 = v349;
    v381 = (float)((float)(*(float *)&v404 * *(float *)(v351 + 8)) + (float)(*(float *)(v351 + 20) * *(float *)&v403))
         + vmuls_lane_f32(*(float *)(v351 + 32), *(float32x2_t *)&v403, 1);
    v382 = v400;
    *v400 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v351, *(float *)&v404), vmul_n_f32(*(float32x2_t *)(v351 + 12), *(float *)&v403)), vmul_lane_f32(*(float32x2_t *)(v351 + 24), *(float32x2_t *)&v403, 1));
    v382[1].f32[0] = v381;
    *v402 = 0;
  }
  return 1;
}

BOOL `anonymous namespace'::ConvexMeshContactGeneration::generateContacts(uint64_t a1, float *a2, uint64_t a3, float *a4, float *a5, __int32 a6, float a7)
{
  float *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t (*v25)(void);
  float *v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  float *v33;
  int v34;
  int8x16_t v35;
  float32x2_t v36;
  _BYTE *v37;
  _BYTE *v38;
  float *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float *v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float *v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  uint64_t v126;
  unsigned __int8 *v127;
  size_t v128;
  unsigned int v129;
  uint64_t v130;
  size_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE v138[4];
  __int32 v139;
  uint64_t v140;
  float v141[9];
  float v142[9];
  unsigned __int8 *v143;
  uint64_t v144;
  float v145[12];
  float v146[12];
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159[3];
  float32x2_t v160;
  float v161;
  float v162;
  float v163;
  float v164;
  int8x16_t v165;
  uint64_t v166;

  v139 = a6;
  v140 = a3;
  v166 = *MEMORY[0x24BDAC8D0];
  v11 = *(float **)(a1 + 2200);
  v12 = a4[1];
  v13 = v12 * v11[3];
  v14 = (float)(*a4 * v11[1]) + (float)(v12 * v11[4]);
  v15 = (float)(*a4 * v11[2]) + (float)(v12 * v11[5]);
  v16 = a4[2];
  v17 = v16 * v11[7];
  v18 = (float)(v15 + (float)(v16 * v11[8])) + v11[11];
  v19 = *(float *)(a1 + 2172) - (float)((float)((float)((float)(*a4 * *v11) + v13) + (float)(v16 * v11[6])) + v11[9]);
  v20 = *(float *)(a1 + 2180) - v18;
  v21 = *a5;
  v22 = a5[1];
  v23 = (float)((float)(*(float *)(a1 + 2176) - (float)((float)(v14 + v17) + v11[10])) * v22) + (float)(v19 * *a5);
  v24 = a5[2];
  if ((float)(v23 + (float)(v20 * v24)) < 0.0)
  {
    v21 = -v21;
    v22 = -v22;
    v24 = -v24;
    *a5 = v21;
    a5[1] = v22;
    a5[2] = v24;
  }
  v25 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 2184) + 96);
  v26 = *(float **)(a1 + 2192);
  v27 = (float)((float)-(float)(v22 * v26[1]) - (float)(*v26 * v21)) - (float)(v26[2] * v24);
  v28 = (float)((float)-(float)(v22 * v26[4]) - (float)(v26[3] * v21)) - (float)(v26[5] * v24);
  v29 = (float)((float)-(float)(v22 * v26[7]) - (float)(v26[6] * v21)) - (float)(v26[8] * v24);
  v147 = v27;
  v148 = v28;
  v149 = v29;
  v30 = v25();
  v31 = *(_QWORD *)(*(_QWORD *)(a1 + 2184) + 24);
  v32 = v30;
  v33 = (float *)(v31 + 20 * v30);
  v34 = *(unsigned __int8 *)(a1 + 2225);
  if (*(_BYTE *)(a1 + 2225))
  {
    v165 = *(int8x16_t *)v33;
    v35 = v165;
    v36 = (float32x2_t)vext_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), 4uLL);
  }
  else
  {
    physx::Cm::FastVertex2ShapeScaling::transformPlaneToShapeSpace(*(float **)(a1 + 2208), v33, (float *)v165.i32, (float *)((unint64_t)&v165 | 0xC), v33[3]);
    v35.i32[0] = v165.i32[0];
    v36 = *(float32x2_t *)((char *)v165.i64 + 4);
  }
  v37 = 0;
  v38 = 0;
  v39 = *(float **)(a1 + 2192);
  v40 = *v39;
  v41 = v39[1];
  v42 = *(float *)v35.i32 * *v39;
  v43 = *(float *)v35.i32 * v41;
  v44 = v39[2];
  v45 = v39[3];
  v46 = *(float *)v35.i32 * v44;
  v47 = v39[4];
  v48 = v39[5];
  v49 = v42 + (float)(v45 * v36.f32[0]);
  v50 = v43 + (float)(v47 * v36.f32[0]);
  v51 = v46 + (float)(v48 * v36.f32[0]);
  v52 = v39[6];
  v53 = v39[7];
  v54 = v39[8];
  v55 = v39[9];
  v162 = v49 + vmuls_lane_f32(v52, v36, 1);
  v163 = v50 + vmuls_lane_f32(v53, v36, 1);
  v164 = v51 + vmuls_lane_f32(v54, v36, 1);
  v56 = *a5;
  v57 = a5[1];
  v58 = a5[2];
  v59 = fabsf((float)((float)(v163 * v57) + (float)(v162 * *a5)) + (float)(v164 * v58));
  v60 = *(_QWORD *)(a1 + 2200);
  v61 = a2[1];
  v62 = a2[2];
  v63 = (float)((float)(*a2 * *(float *)(v60 + 8)) + (float)(v61 * *(float *)(v60 + 20)))
      + (float)(v62 * *(float *)(v60 + 32));
  v160 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v60, *a2), vmul_n_f32(*(float32x2_t *)(v60 + 12), v61)), vmul_n_f32(*(float32x2_t *)(v60 + 24), v62));
  v161 = v63;
  v64 = fabsf(vmlas_n_f32(vmuls_lane_f32(v57, v160, 1), v56, v160.f32[0]) + (float)(v63 * v58));
  v65 = -a7;
  if (a7 > 0.0)
    v65 = 0.0;
  v66 = v65 + *(float *)(a1 + 2228);
  v67 = v56 * v66;
  v159[0] = v56 * v66;
  v159[1] = v57 * v66;
  v159[2] = v58 * v66;
  v147 = v40;
  v148 = v41;
  v149 = v44;
  v150 = v45;
  v151 = v47;
  v152 = v48;
  v153 = v52;
  v154 = v53;
  v155 = v54;
  v68 = v39[10];
  v69 = v39[11];
  v70 = *(float **)(a1 + 2232);
  v72 = *v70;
  v71 = v70[1];
  v73 = v70[2];
  v74 = v70[3];
  v75 = v55 - v67;
  v156 = v55 - v67;
  v157 = v68 - (float)(v57 * v66);
  v158 = v69 - (float)(v58 * v66);
  v76 = *(float **)(a1 + 2240);
  v77 = v76[1];
  v78 = v76[2];
  v79 = v76[3];
  v80 = v76[4];
  v81 = v76[5];
  v82 = v76[6];
  v83 = (float)(v75 - v80) + (float)(v75 - v80);
  v84 = (float)(v157 - v81) + (float)(v157 - v81);
  v85 = (float)(v158 - v82) + (float)(v158 - v82);
  v86 = (float)(v79 * v79) + -0.5;
  v87 = (float)((float)-(float)(v77 * v84) - (float)(*v76 * v83)) - (float)(v78 * v85);
  v88 = (float)((float)(v79 * (float)((float)(v78 * v84) - (float)(v77 * v85))) + (float)(v83 * v86))
      - (float)(*v76 * v87);
  v89 = (float)((float)(v79 * (float)((float)(*v76 * v85) - (float)(v78 * v83))) + (float)(v84 * v86))
      - (float)(v77 * v87);
  v90 = (float)((float)(v79 * (float)((float)(v77 * v83) - (float)(*v76 * v84))) + (float)(v85 * v86))
      - (float)(v78 * v87);
  v91 = (float)((float)((float)(v79 * v72) - (float)(*v76 * v74)) - (float)(v77 * v73)) + (float)(v71 * v78);
  v92 = (float)((float)((float)(v79 * v71) - (float)(v77 * v74)) - (float)(v78 * v72)) + (float)(v73 * *v76);
  v93 = (float)((float)((float)(v79 * v73) - (float)(v78 * v74)) - (float)(*v76 * v71)) + (float)(v72 * v77);
  v94 = (float)((float)((float)(v72 * *v76) + (float)(v79 * v74)) + (float)(v77 * v71)) + (float)(v78 * v73);
  v95 = (float)(v80 - v75) + (float)(v80 - v75);
  v96 = (float)(v81 - v157) + (float)(v81 - v157);
  v97 = (float)(v82 - v158) + (float)(v82 - v158);
  v98 = (float)(v74 * v74) + -0.5;
  v99 = (float)((float)-(float)(v71 * v96) - (float)(v72 * v95)) - (float)(v73 * v97);
  v100 = (float)((float)(v74 * (float)((float)(v73 * v96) - (float)(v71 * v97))) + (float)(v95 * v98))
       - (float)(v72 * v99);
  v101 = (float)((float)(v74 * (float)((float)(v72 * v97) - (float)(v73 * v95))) + (float)(v96 * v98))
       - (float)(v71 * v99);
  v102 = (float)((float)(v74 * (float)((float)(v71 * v95) - (float)(v72 * v96))) + (float)(v97 * v98))
       - (float)(v73 * v99);
  v103 = (float)((float)((float)(v74 * *v76) - (float)(v72 * v79)) - (float)(v71 * v78)) + (float)(v77 * v73);
  v104 = (float)((float)((float)(v74 * v77) - (float)(v71 * v79)) - (float)(v73 * *v76)) + (float)(v78 * v72);
  v105 = (float)((float)((float)(v74 * v78) - (float)(v73 * v79)) - (float)(v72 * v77)) + (float)(*v76 * v71);
  v106 = v91 * (float)(v91 + v91);
  v107 = v92 * (float)(v92 + v92);
  v108 = v93 * (float)(v93 + v93);
  v109 = v92 * (float)(v91 + v91);
  v110 = v93 * (float)(v91 + v91);
  v111 = v94 * (float)(v91 + v91);
  v112 = v93 * (float)(v92 + v92);
  v113 = v94 * (float)(v92 + v92);
  v114 = v94 * (float)(v93 + v93);
  v146[0] = (float)(1.0 - v107) - v108;
  v146[1] = v109 + v114;
  v115 = 1.0 - v106;
  v146[2] = v110 - v113;
  v146[3] = v109 - v114;
  v146[4] = v115 - v108;
  v146[5] = v112 + v111;
  v146[6] = v110 + v113;
  v146[7] = v112 - v111;
  v146[8] = v115 - v107;
  v146[9] = v88;
  v146[10] = v89;
  v146[11] = v90;
  v116 = v105 + v105;
  v117 = v104 * (float)(v104 + v104);
  v118 = v105 * (float)(v105 + v105);
  v119 = v104 * (float)(v103 + v103);
  v120 = v105 * (float)(v103 + v103);
  v121 = v94 * (float)(v103 + v103);
  v122 = v105 * (float)(v104 + v104);
  v123 = v94 * (float)(v104 + v104);
  v124 = v94 * v116;
  v145[0] = (float)(1.0 - v117) - v118;
  v145[1] = v119 + v124;
  v125 = 1.0 - (float)(v103 * (float)(v103 + v103));
  v145[2] = v120 - v123;
  v145[3] = v119 - v124;
  v145[4] = v125 - v118;
  v145[5] = v122 + v121;
  v145[6] = v120 + v123;
  v145[7] = v122 - v121;
  v145[8] = v125 - v117;
  v145[9] = v100;
  v145[10] = v101;
  v145[11] = v102;
  v143 = 0;
  v144 = 0;
  v126 = v31 + 20 * v32;
  v129 = *(unsigned __int8 *)(v126 + 18);
  v127 = (unsigned __int8 *)(v126 + 18);
  v128 = v129;
  if (!v34)
  {
    MEMORY[0x24BDAC7A8](v30);
    v37 = &v138[-v130];
    bzero(&v138[-v130], v131);
    MEMORY[0x24BDAC7A8](v132);
    v38 = &v138[-v133];
    bzero(&v138[-v133], v128);
  }
  physx::Gu::getScaledConvex(&v144, &v143, (uint64_t)v37, (uint64_t)v38, v34 != 0, *(_QWORD *)(*(_QWORD *)(a1 + 2184) + 32), *(_QWORD *)(*(_QWORD *)(a1 + 2184) + 40) + *(unsigned __int16 *)(v31 + 20 * v32 + 16), v128, *(_QWORD *)(a1 + 2208));
  physx::Gu::findRotationMatrixFromZ(v142, (float *)v165.i32);
  physx::Gu::findRotationMatrixFromZ(v141, a2);
  v134 = *(_QWORD *)(a1 + 2248);
  if (v59 > v64)
  {
    v135 = *(_QWORD *)(a1 + 2200);
    v136 = 1;
    if ((physx::Gu::contactPolygonPolygonExt(*v127, v144, v143, (uint64_t)&v147, (float *)v165.i32, v142, 3u, v140, v66, byte_2261A9B1A, v135, a2, v141, &v162, (uint64_t)v146, v145, v139, v134, 1u,
            (uint64_t)v159) & 1) != 0)
      return v136;
    return 0;
  }
  return (physx::Gu::contactPolygonPolygonExt(3, v140, byte_2261A9B1A, *(_QWORD *)(a1 + 2200), a2, v141, *v127, v144, v66, v143, (uint64_t)&v147, (float *)v165.i32, v142, (float *)&v160, (uint64_t)v145, v146, v139, v134, 0,
            (uint64_t)v159) & 1) != 0;
}

uint64_t physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(unsigned int *)(a1 + 1280);
  if ((_DWORD)v2 == 128)
    return 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = 9
     * (((v5 | (v4 << 16)) + ~((v5 | (v4 << 16)) << 15)) ^ (((v5 | (v4 << 16)) + ~((v5 | (v4 << 16)) << 15)) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = a1 + ((v7 ^ BYTE2(v7)) & 0x7F);
  v9 = *(unsigned __int8 *)(v8 + 1152);
  if (v9 != 255)
  {
    while (*(_DWORD *)(a1 + 8 * v9) != v4 || *(_DWORD *)(a1 + 8 * v9 + 4) != v5)
    {
      v11 = a1 + v9;
      v9 = *(unsigned __int8 *)(v11 + 1024);
      if (v9 == 255)
      {
        v10 = (_BYTE *)(v11 + 1024);
        goto LABEL_9;
      }
    }
    return 0;
  }
  v10 = (_BYTE *)(v8 + 1152);
LABEL_9:
  *v10 = v2;
  *(_BYTE *)(a1 + v2 + 1024) = -1;
  v12 = *(unsigned int *)(a1 + 1280);
  *(_DWORD *)(a1 + 1280) = v12 + 1;
  *(_QWORD *)(a1 + 8 * v12) = *(_QWORD *)a2;
  return 1;
}

uint64_t physx::Gu::CacheMap<physx::Gu::CachedVertex,128u>::addData(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 768);
  if ((_DWORD)v2 == 128)
    return 0;
  v4 = a1 + (*a2 & 0x7FLL);
  v5 = *(unsigned __int8 *)(v4 + 640);
  if (v5 != 255)
  {
    while (*(_DWORD *)(a1 + 4 * v5) != *a2)
    {
      v7 = a1 + v5;
      v5 = *(unsigned __int8 *)(v7 + 512);
      if (v5 == 255)
      {
        v6 = (_BYTE *)(v7 + 512);
        goto LABEL_8;
      }
    }
    return 0;
  }
  v6 = (_BYTE *)(v4 + 640);
LABEL_8:
  *v6 = v2;
  *(_BYTE *)(a1 + v2 + 512) = -1;
  v8 = *(unsigned int *)(a1 + 768);
  *(_DWORD *)(a1 + 768) = v8 + 1;
  *(_DWORD *)(a1 + 4 * v8) = *a2;
  return 1;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<4352u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  _DWORD *v11;
  int v12;

  v3 = result;
  if (!a2)
    goto LABEL_10;
  if ((4 * a2) <= 0x1100 && !*(_BYTE *)(result + 4352))
  {
    *(_BYTE *)(result + 4352) = 1;
    v4 = (_DWORD *)result;
    goto LABEL_11;
  }
  if (4 * a2)
  {
    v5 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v6 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
    else
      v6 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24)
                                                                                             + 16))(v5 + 24, (4 * a2), v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v4 = (_DWORD *)result;
  }
  else
  {
LABEL_10:
    v4 = 0;
  }
LABEL_11:
  v7 = *(unsigned int *)(v3 + 4368);
  v8 = *(_QWORD *)(v3 + 4360);
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v4[v7];
    v10 = *(int **)(v3 + 4360);
    v11 = v4;
    do
    {
      v12 = *v10++;
      *v11++ = v12;
    }
    while ((unint64_t)v11 < v9);
  }
  if ((*(_DWORD *)(v3 + 4372) & 0x80000000) == 0)
  {
    if (v8 == v3)
    {
      *(_BYTE *)(v3 + 4352) = 0;
    }
    else if (v8)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)(v3 + 4360) = v4;
  *(_DWORD *)(v3 + 4372) = a2;
  return result;
}

uint64_t physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::contains(uint64_t a1, int a2, int a3)
{
  unsigned int v3;
  unsigned int i;

  v3 = 9
     * (((a3 | (a2 << 16)) + ~((a3 | (a2 << 16)) << 15)) ^ (((a3 | (a2 << 16)) + ~((a3 | (a2 << 16)) << 15)) >> 10));
  for (i = *(unsigned __int8 *)(a1
                               + ((((v3 ^ (v3 >> 6)) - 1) ^ (((v3 ^ (v3 >> 6))
                                                                                              + ~((v3 ^ (v3 >> 6)) << 11)) >> 16)) & 0x7F)
                               + 1152); ; i = *(unsigned __int8 *)(a1 + i + 1024))
  {
    if (i == 255)
      return 0;
    if (*(_DWORD *)(a1 + 8 * i) == a2 && *(_DWORD *)(a1 + 8 * i + 4) == a3)
      break;
  }
  return 1;
}

void `anonymous namespace'::ConvexVsHeightfieldContactGenerationCallback::~ConvexVsHeightfieldContactGenerationCallback(_anonymous_namespace_::ConvexVsHeightfieldContactGenerationCallback *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t `anonymous namespace'::ConvexVsHeightfieldContactGenerationCallback::onEvent(_anonymous_namespace_::ConvexVsHeightfieldContactGenerationCallback *this, int a2, unsigned int *a3)
{
  __int32 v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  float v14;
  float v15;
  float v16;
  float *v17;
  float v18;
  float v19;
  int v20;
  char *v22;
  unsigned int *v23;
  int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  _DWORD v43[3];
  unsigned int v44[3];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v24 = a2;
  if (a2)
  {
    v22 = (char *)this + 8;
    do
    {
      v5 = *a3;
      physx::Gu::HeightFieldUtil::getTriangle(*((_QWORD *)this + 284), *((float **)this + 281), (uint64_t)&v34, (uint64_t)v44, (uint64_t)v43, *a3, 0, 0);
      v6 = (float)((float)(v38 - v35) * (float)(v42 - v36)) - (float)((float)(v39 - v36) * (float)(v41 - v35));
      v7 = (float)((float)(v39 - v36) * (float)(v40 - v34)) - (float)((float)(v37 - v34) * (float)(v42 - v36));
      v8 = (float)((float)(v37 - v34) * (float)(v41 - v35)) - (float)((float)(v38 - v35) * (float)(v40 - v34));
      v9 = sqrtf((float)((float)(v7 * v7) + (float)(v6 * v6)) + (float)(v8 * v8));
      v23 = a3 + 1;
      if (v9 > 0.0)
      {
        v10 = 1.0 / v9;
        v6 = v6 * v10;
        v7 = v7 * v10;
        v8 = v8 * v10;
      }
      v11 = 0;
      v12 = 0;
      --v24;
      do
      {
        v13 = v43[v11];
        if (v13 == -1)
        {
          v12 |= 8 << v11;
        }
        else
        {
          physx::Gu::HeightFieldUtil::getTriangle(*((_QWORD *)this + 284), *((float **)this + 281), (uint64_t)&v25, 0, 0, v13, 0, 0);
          v14 = (float)((float)(v29 - v26) * (float)(v33 - v27)) - (float)((float)(v30 - v27) * (float)(v32 - v26));
          v15 = (float)((float)(v30 - v27) * (float)(v31 - v25)) - (float)((float)(v28 - v25) * (float)(v33 - v27));
          v16 = (float)((float)(v28 - v25) * (float)(v32 - v26)) - (float)((float)(v29 - v26) * (float)(v31 - v25));
          v17 = &v34 + 3 * byte_2261A9B5C[v11];
          if ((float)((float)((float)(v15 * (float)(v17[1] - v26)) + (float)(v14 * (float)(*v17 - v25)))
                     + (float)(v16 * (float)(v17[2] - v27))) < 0.0)
          {
            v18 = sqrtf((float)((float)(v15 * v15) + (float)(v14 * v14)) + (float)(v16 * v16));
            if (v18 > 0.0)
            {
              v19 = 1.0 / v18;
              v14 = v14 * v19;
              v15 = v15 * v19;
              v16 = v16 * v19;
            }
            v20 = 8 << v11;
            if ((float)((float)((float)(v7 * v15) + (float)(v14 * v6)) + (float)(v16 * v8)) >= 0.999)
              v20 = 0;
            v12 |= v20;
          }
        }
        ++v11;
      }
      while (v11 != 3);
      a3 = v23;
    }
    while (v24);
  }
  return 1;
}

BOOL physx::Gu::contactSphereCapsule(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;

  v7 = *a4;
  v8 = a4[1];
  v9 = v7 + v7;
  v11 = a4[2];
  v10 = a4[3];
  v12 = v10 + v10;
  v13 = (float)((float)(v10 * (float)(v10 + v10)) + -1.0) + (float)(v7 * (float)(v7 + v7));
  v14 = (float)(v9 * v8) + (float)(v11 * (float)(v10 + v10));
  v15 = (float)(v9 * v11) - (float)(v8 * v12);
  v16 = *(float *)(a2 + 8);
  v17 = v13 * v16;
  v18 = v16 * v14;
  v19 = v15 * v16;
  v20 = -(float)(v13 * v16);
  v21 = -(float)(v16 * v14);
  v22 = -(float)(v15 * v16);
  v23 = a4[4];
  v24 = a4[5];
  v25 = a3[4] - v23;
  v26 = a3[5] - v24;
  v27 = a4[6];
  v28 = a3[6] - v27;
  v29 = *(float *)(a1 + 4);
  v30 = v29 + *(float *)(a2 + 4);
  v31 = v20 - v17;
  v32 = v21 - v18;
  v33 = v22 - v19;
  v34 = v25 - v17;
  v35 = v26 - v18;
  v36 = v28 - v19;
  v37 = (float)((float)(v32 * (float)(v26 - v18)) + (float)((float)(v25 - v17) * v31))
      + (float)((float)(v28 - v19) * v33);
  v38 = 0.0;
  if (v37 > 0.0)
  {
    v39 = (float)((float)(v32 * v32) + (float)(v31 * v31)) + (float)(v33 * v33);
    if (v37 >= v39)
    {
      v34 = v34 - v31;
      v35 = v35 - v32;
      v36 = v36 - v33;
      v38 = 1.0;
    }
    else
    {
      v38 = v37 / v39;
      v34 = v34 - (float)(v31 * v38);
      v35 = v35 - (float)(v32 * v38);
      v36 = v36 - (float)(v33 * v38);
    }
  }
  v40 = (float)((float)(v35 * v35) + (float)(v34 * v34)) + (float)(v36 * v36);
  v41 = (float)(v30 + *a5) * (float)(v30 + *a5);
  if (v40 < v41)
  {
    v42 = v19 + (float)(v33 * v38);
    v43 = v25 - (float)(v17 + (float)(v31 * v38));
    v44 = v26 - (float)(v18 + (float)(v32 * v38));
    v45 = v28 - v42;
    v46 = (float)((float)(v44 * v44) + (float)(v43 * v43)) + (float)(v45 * v45);
    if (v46 == 0.0)
    {
      v47 = 0.0;
      v48 = 1.0;
      v49 = 0.0;
    }
    else
    {
      v50 = 1.0 / sqrtf(v46);
      v48 = v43 * v50;
      v47 = v44 * v50;
      v49 = v45 * v50;
    }
    v51 = *(unsigned int *)(a7 + 4096);
    if (v51 <= 0x3F)
    {
      *(_DWORD *)(a7 + 4096) = v51 + 1;
      v52 = a7 + (v51 << 6);
      *(float *)v52 = v48;
      *(float *)(v52 + 4) = v47;
      *(float *)(v52 + 16) = (float)(v23 + v25) - (float)(v29 * v48);
      *(float *)(v52 + 20) = (float)(v24 + v26) - (float)(v29 * v47);
      *(float *)(v52 + 24) = (float)(v27 + v28) - (float)(v29 * v49);
      *(float *)(v52 + 8) = v49;
      *(float *)(v52 + 12) = sqrtf(v40) - v30;
      *(_DWORD *)(v52 + 52) = -1;
    }
  }
  return v40 < v41;
}

BOOL physx::Gu::contactSphereMesh(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  __int128 v29;
  _OWORD v31[2];
  int v32;
  int v33;
  __int128 v34;
  float v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  float v40;
  _BYTE v41[12];
  uint64_t (**v42)();
  int v43;
  uint64_t v44;
  float *v45;
  float *v46;
  uint64_t v47;
  unint64_t *v48;
  float v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  _OWORD v55[2];
  int v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  unint64_t v63;
  float v64;

  v13 = a3[4] - a4[4];
  v14 = a3[5] - a4[5];
  v15 = a3[6] - a4[6];
  v16 = v13 + v13;
  v17 = v14 + v14;
  v18 = v15 + v15;
  v20 = a4[2];
  v19 = a4[3];
  v21 = (float)(v19 * v19) + -0.5;
  v22 = a4[1];
  v23 = (float)((float)((float)(v14 + v14) * v22) + (float)(*a4 * (float)(v13 + v13))) + (float)(v20 * v18);
  v24 = (float)((float)((float)(v13 + v13) * v21)
              - (float)((float)((float)(v22 * v18) - (float)(v20 * (float)(v14 + v14))) * v19))
      + (float)(*a4 * v23);
  v25 = (float)((float)((float)(v14 + v14) * v21) - (float)((float)((float)(v20 * v16) - (float)(*a4 * v18)) * v19))
      + (float)(v22 * v23);
  v26 = (float)((float)(v18 * v21) - (float)((float)((float)(*a4 * v17) - (float)(v22 * v16)) * v19))
      + (float)(v20 * v23);
  v63 = __PAIR64__(LODWORD(v25), LODWORD(v24));
  v64 = v26;
  v27 = *(float *)(a1 + 4) + *a5;
  v28 = *(_QWORD *)(a2 + 48);
  if (*(float *)(a2 + 4) == 1.0 && *(float *)(a2 + 8) == 1.0 && *(float *)(a2 + 12) == 1.0)
  {
    v43 = 2;
    v42 = &off_24ED91878;
    v44 = a1;
    v45 = a3;
    v46 = a4;
    v47 = a7;
    v48 = &v63;
    v49 = v27 * v27;
    v50 = 0;
    v51 = 0;
    v52 = a8;
    v53 = v28;
    v55[0] = xmmword_2260E5F10;
    v55[1] = xmmword_2260E5F10;
    v56 = 1065353216;
    v57 = v24;
    v58 = v25;
    v59 = v26;
    v60 = v27;
    v61 = v27;
    v62 = v27;
    ((void (*)(uint64_t, _OWORD *, uint64_t (***)(), uint64_t, uint64_t))*(&physx::Gu::gMidphaseBoxCBOverlapTable
                                                                                           + *(unsigned __int16 *)(v28 + 8)
                                                                                           - 3))(v28, v55, &v42, 1, 1);
    v42 = &off_24ED91878;
  }
  else
  {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v55, (float *)(a2 + 4), (float *)(a2 + 16));
    v43 = 2;
    v44 = a1;
    v45 = a3;
    v46 = a4;
    v47 = a7;
    v48 = &v63;
    v49 = v27 * v27;
    v50 = 0;
    v51 = 0;
    v52 = a8;
    v53 = v28;
    v42 = &off_24ED918C8;
    v54 = v55;
    *(_QWORD *)v41 = v63;
    *(float *)&v41[8] = v64;
    *(float *)&v39 = v27;
    *((float *)&v39 + 1) = v27;
    v40 = v27;
    v36 = xmmword_2260E5F10;
    v37 = xmmword_2260E5F10;
    v38 = 1065353216;
    physx::Cm::FastVertex2ShapeScaling::transformQueryBounds((uint64_t)v55, (float *)v41, (float *)&v39, (float *)&v36);
    v31[0] = v36;
    v31[1] = v37;
    v32 = v38;
    v33 = *(_DWORD *)v41;
    *(_QWORD *)&v29 = *(_QWORD *)&v41[4];
    *((_QWORD *)&v29 + 1) = v39;
    v34 = v29;
    v35 = v40;
    ((void (*)(uint64_t, _OWORD *, uint64_t (***)(), uint64_t, uint64_t))*(&physx::Gu::gMidphaseBoxCBOverlapTable
                                                                                           + *(unsigned __int16 *)(v28 + 8)
                                                                                           - 3))(v28, v31, &v42, 1, 1);
    v42 = &off_24ED91878;
  }
  return *(_DWORD *)(a7 + 4096) != 0;
}

void `anonymous namespace'::SphereMeshContactGenerationCallback_NoScale::~SphereMeshContactGenerationCallback_NoScale(_anonymous_namespace_::SphereMeshContactGenerationCallback_NoScale *this)
{
  *(_QWORD *)this = &off_24ED91878;
}

{
  *(_QWORD *)this = &off_24ED91878;
  JUMPOUT(0x2276933B8);
}

void `anonymous namespace'::SphereMeshContactGenerationCallback_Scale::~SphereMeshContactGenerationCallback_Scale(_anonymous_namespace_::SphereMeshContactGenerationCallback_Scale *this)
{
  *(_QWORD *)this = &off_24ED91878;
}

{
  *(_QWORD *)this = &off_24ED91878;
  JUMPOUT(0x2276933B8);
}

BOOL physx::Gu::contactSphereHeightfield(uint64_t a1, float32x2_t *a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float v9;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  void (**v29)(_anonymous_namespace_::SphereHeightfieldContactGenerationCallback *__hidden);
  _QWORD v30[5];
  float v31;
  int v32;
  int v33;
  uint64_t v34;
  int32x2_t *v35;
  float v36[6];
  _DWORD v37[3];
  int32x2_t v38;
  float v39;
  float32x2_t v40;
  float32x2_t *v41;

  v40 = a2[1];
  v41 = a2;
  v9 = a2[3].f32[0];
  __asm { FMOV            V2.2S, #1.0 }
  v38 = vrev64_s32((int32x2_t)vdiv_f32(_D2, a2[2]));
  v39 = 1.0 / v9;
  v15 = a3[4] - a4[4];
  v16 = a3[5] - a4[5];
  _D2.f32[0] = a3[6] - a4[6];
  v17 = v15 + v15;
  v18 = v16 + v16;
  _D2.f32[0] = _D2.f32[0] + _D2.f32[0];
  v20 = a4[2];
  v19 = a4[3];
  v21 = (float)(v19 * v19) + -0.5;
  v22 = a4[1];
  v23 = (float)((float)(v18 * v22) + (float)(*a4 * v17)) + (float)(v20 * _D2.f32[0]);
  v24 = (float)((float)(v17 * v21) - (float)((float)((float)(v22 * _D2.f32[0]) - (float)(v20 * v18)) * v19))
      + (float)(*a4 * v23);
  v25 = (float)((float)(v18 * v21) - (float)((float)((float)(v20 * v17) - (float)(*a4 * _D2.f32[0])) * v19))
      + (float)(v22 * v23);
  v26 = (float)((float)(_D2.f32[0] * v21) - (float)((float)((float)(*a4 * v18) - (float)(v22 * v17)) * v19))
      + (float)(v20 * v23);
  *(float *)v37 = v24;
  *(float *)&v37[1] = v25;
  *(float *)&v37[2] = v26;
  v27 = *(float *)(a1 + 4) + *a5;
  v36[0] = v24 - v27;
  v36[1] = v25 - v27;
  v36[2] = v26 - v27;
  v36[3] = v24 + v27;
  v36[4] = v25 + v27;
  v36[5] = v26 + v27;
  v29 = &off_24ED91908;
  v30[0] = a1;
  v30[1] = a3;
  v30[2] = a4;
  v30[3] = a7;
  v30[4] = v37;
  v31 = v27 * v27;
  v32 = 0;
  v33 = 0;
  v34 = a8;
  v35 = &v38;
  physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v38, a4, v36, 0, (uint64_t)&v29);
  return *(_DWORD *)(a7 + 4096) != 0;
}

uint64_t `anonymous namespace'::SphereMeshContactGeneration::generateLastContacts(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;
  signed int v3;
  uint64_t v4;
  signed int v5;
  uint64_t v6;
  int v7;
  float *v8;
  float *v9;
  float v10;
  float v11;
  uint64_t v12;
  float *v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  float v19;
  signed int i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float *v27;
  float v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  signed int v33;
  int v34;
  BOOL v35;
  signed int v36;
  signed int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  int v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  _DWORD *v57;
  int v58;
  int v59;
  _DWORD *v60;
  int v61;
  int v62;
  _DWORD *v63;
  int v64;
  int v65;
  int v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  float v83;
  float *v84;
  float *v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  _DWORD *v104;
  uint64_t v105;
  int *v106;
  _OWORD v107[16];
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v1 = *(_DWORD *)(this + 44);
  if (v1)
  {
    v2 = this;
    v3 = v1 - 1;
    if ((int)(v1 - 1) >= 1)
    {
      LODWORD(v4) = 0;
      v5 = 0;
      v6 = this + 2096;
      memset(v107, 0, sizeof(v107));
      while (1)
      {
        if (v3 > v5)
        {
          v4 = v4;
          while ((v3 - v5) > 4)
          {
            v7 = v5 + v3;
            if (v5 + v3 < 0 != __OFADD__(v5, v3))
              ++v7;
            v8 = (float *)(v6 + 8 * (v7 >> 1));
            v9 = (float *)(v6 + 8 * v5);
            v10 = *v8;
            v11 = *v9;
            if (*v8 < *v9)
            {
              v12 = *(_QWORD *)v9;
              *(_QWORD *)v9 = *(_QWORD *)v8;
              *(_QWORD *)v8 = v12;
              v11 = *v9;
              v10 = *(float *)&v12;
            }
            v13 = (float *)(v6 + 8 * v3);
            v14 = *v13;
            if (*v13 < v11)
            {
              v15 = *(_QWORD *)v9;
              *(_QWORD *)v9 = *(_QWORD *)v13;
              *(_QWORD *)v13 = v15;
              v14 = *(float *)&v15;
              v10 = *v8;
            }
            v16 = *(_QWORD *)v8;
            if (v14 < v10)
            {
              *(_QWORD *)v8 = *(_QWORD *)v13;
              *(_QWORD *)v13 = v16;
              v16 = *(_QWORD *)v8;
            }
            v17 = v3 - 1;
            v18 = (_QWORD *)(v6 + 8 * v17);
            *(_QWORD *)v8 = *v18;
            *v18 = v16;
            v19 = *(float *)&v16;
            for (i = v5; ; i = v21 + v22)
            {
              v21 = 0;
              v22 = i;
              v23 = 2104;
              v24 = v2 + 8 * i;
              do
              {
                v25 = *(float *)(v24 + v23);
                ++v21;
                v23 += 8;
              }
              while (v25 < v19);
              v26 = v2 + 8 * v22 + 8 * v21;
              v27 = (float *)(v6 + 8 * (int)v17);
              do
              {
                v28 = *(v27 - 2);
                v27 -= 2;
                LODWORD(v17) = v17 - 1;
              }
              while (v19 < v28);
              v29 = *(_QWORD *)(v26 + 2096);
              if ((int)v21 + (int)v22 >= (int)v17)
                break;
              *(_QWORD *)(v26 + 2096) = *(_QWORD *)v27;
              *(_QWORD *)v27 = v29;
              v19 = *(float *)v18;
            }
            *(_QWORD *)(v2 + 8 * v22 + 8 * v21 + 2096) = *v18;
            *v18 = v29;
            v30 = v22 - v5 + v21;
            v31 = v3 - v22 - v21;
            v32 = v22 + v21;
            v33 = v22 + v21 - 1;
            v34 = v22 + v21;
            this = (v34 - 1);
            v35 = v30 < v31;
            if (v30 >= v31)
              v36 = v32 + 1;
            else
              v36 = v5;
            if (v35)
              v37 = v34 - 1;
            else
              v37 = v3;
            if (v35)
              v5 = v34 + 1;
            if (!v35)
              v3 = v33;
            *((_DWORD *)v107 + v4) = v36;
            *((_DWORD *)v107 + v4 + 1) = v37;
            v4 += 2;
            if (v3 <= v5)
              goto LABEL_44;
          }
          v38 = v5;
          v39 = v5 + 1;
          v40 = v2 + 2104 + 8 * v5;
          do
          {
            this = 0;
            v41 = v38++;
            v42 = (float *)v40;
            v43 = v41;
            do
            {
              v44 = *v42;
              v42 += 2;
              if (v44 < *(float *)(v6 + 8 * v43))
                v43 = v39 + this;
              ++this;
            }
            while (v41 + this < v3);
            if (v43 != (_DWORD)v41)
            {
              this = *(_QWORD *)(v6 + 8 * v43);
              *(_QWORD *)(v6 + 8 * v43) = *(_QWORD *)(v6 + 8 * v41);
              *(_QWORD *)(v6 + 8 * v41) = this;
            }
            ++v39;
            v40 += 8;
          }
          while (v38 != v3);
        }
        if (!(_DWORD)v4)
          break;
LABEL_44:
        v3 = *((_DWORD *)v107 + (v4 - 1));
        LODWORD(v4) = v4 - 2;
        v5 = *((_DWORD *)v107 + v4);
      }
    }
    v45 = 0;
    v46 = v2 + 48;
    v47 = *(unsigned int *)(v2 + 2608);
    v48 = (_DWORD *)(v2 + 2612);
    if (v1 <= 1)
      v49 = 1;
    else
      v49 = v1;
    v105 = v49;
    v106 = (int *)(v2 + 2612);
    do
    {
      v50 = v2 + 8 * v45;
      v51 = *(unsigned int *)(v50 + 2100);
      v52 = v46 + 32 * v51;
      v53 = *(_DWORD *)(v52 + 20);
      v54 = *(_DWORD *)(v52 + 24);
      v55 = *(_DWORD *)(v52 + 28);
      switch(*(_DWORD *)(v52 + 12))
      {
        case 0:
          v56 = *(_DWORD *)(v2 + 2608) + 1;
          v57 = v48;
          do
          {
            if (!--v56)
              goto LABEL_73;
            if (*v57 == v53)
              break;
            if (v57[1] == v53)
              break;
            v58 = v57[2];
            v57 += 3;
          }
          while (v58 != v53);
          break;
        case 1:
          v59 = *(_DWORD *)(v2 + 2608) + 1;
          v60 = v48;
          do
          {
            if (!--v59)
              goto LABEL_73;
            if (*v60 == v54)
              break;
            if (v60[1] == v54)
              break;
            v61 = v60[2];
            v60 += 3;
          }
          while (v61 != v54);
          break;
        case 2:
          v62 = *(_DWORD *)(v2 + 2608) + 1;
          v63 = v48;
          do
          {
            if (!--v62)
              goto LABEL_73;
            if (*v63 == v55)
              break;
            if (v63[1] == v55)
              break;
            v64 = v63[2];
            v63 += 3;
          }
          while (v64 != v55);
          break;
        case 3:
          this = validateEdge(*(_DWORD *)(v52 + 20), *(_DWORD *)(v52 + 24), v106, *(_DWORD *)(v2 + 2608));
          v49 = v105;
          v48 = (_DWORD *)(v2 + 2612);
          if ((_DWORD)this)
            goto LABEL_73;
          break;
        case 4:
          v65 = *(_DWORD *)(v2 + 2608);
          v66 = *(_DWORD *)(v52 + 24);
          goto LABEL_72;
        case 5:
          v65 = *(_DWORD *)(v2 + 2608);
          v66 = *(_DWORD *)(v52 + 20);
LABEL_72:
          this = validateEdge(v66, *(_DWORD *)(v52 + 28), v106, v65);
          v49 = v105;
          v48 = (_DWORD *)(v2 + 2612);
          if ((this & 1) != 0)
          {
LABEL_73:
            v67 = *(float *)(v50 + 2096);
            if (v67 <= 0.0001)
            {
              v72 = *(float *)v52;
              v73 = *(float *)(v52 + 4);
              v74 = *(float *)(v52 + 8);
              v75 = (float)((float)(v73 * v73) + (float)(v72 * v72)) + (float)(v74 * v74);
              v68 = 0.0;
              v76 = 0.0;
              v77 = 0.0;
              v78 = 0.0;
              if (v75 > 0.0)
              {
                v79 = 1.0 / sqrtf(v75);
                v76 = v72 * v79;
                v77 = v73 * v79;
                v78 = v74 * v79;
              }
              v69 = -v76;
              v70 = -v77;
              v71 = -v78;
            }
            else
            {
              v68 = sqrtf(v67);
              v69 = (float)(1.0 / v68) * *(float *)v52;
              v70 = (float)(1.0 / v68) * *(float *)(v52 + 4);
              v71 = (float)(1.0 / v68) * *(float *)(v52 + 8);
            }
            v80 = *(_QWORD *)(v2 + 24);
            v81 = *(unsigned int *)(v80 + 4096);
            if (v81 <= 0x3F)
            {
              v82 = *(float *)(*(_QWORD *)v2 + 4);
              v83 = v68 - v82;
              v84 = *(float **)(v2 + 16);
              v85 = *(float **)(v2 + 32);
              v86 = (float)((float)(v71 * v82) + v85[2]) + (float)((float)(v71 * v82) + v85[2]);
              v87 = (float)((float)(v69 * v82) + *v85) + (float)((float)(v69 * v82) + *v85);
              v88 = *v84;
              v89 = v84[1];
              v90 = (float)((float)(v70 * v82) + v85[1]) + (float)((float)(v70 * v82) + v85[1]);
              v91 = v84[2];
              v92 = v84[3];
              v93 = (float)((float)(v89 * v90) + (float)(*v84 * v87)) + (float)(v91 * v86);
              v94 = (float)(v92 * v92) + -0.5;
              v95 = v84[6]
                  + (float)((float)((float)(v92 * (float)((float)(*v84 * v90) - (float)(v89 * v87))) + (float)(v86 * v94))
                          + (float)(v91 * v93));
              v96 = v84[4];
              v97 = v84[5]
                  + (float)((float)((float)((float)((float)(v91 * v87) - (float)(*v84 * v86)) * v92) + (float)(v90 * v94))
                          + (float)(v89 * v93));
              LODWORD(v84) = *(_DWORD *)(v46 + 32 * v51 + 16);
              v98 = v96
                  + (float)((float)((float)(v92 * (float)((float)(v89 * v86) - (float)(v91 * v90))) + (float)(v87 * v94))
                          + (float)(v88 * v93));
              v99 = v71 + v71;
              v100 = v69 + v69;
              v101 = v70 + v70;
              v102 = (float)((float)(v101 * v89) + (float)(v88 * v100)) + (float)(v91 * v99);
              *(_DWORD *)(v80 + 4096) = v81 + 1;
              v103 = v80 + (v81 << 6);
              *(float *)v103 = -(float)((float)((float)((float)((float)(v89 * v99) - (float)(v91 * v101)) * v92)
                                              + (float)(v100 * v94))
                                      + (float)(v88 * v102));
              *(float *)(v103 + 4) = -(float)((float)((float)((float)((float)(v91 * v100) - (float)(v88 * v99)) * v92)
                                                    + (float)(v101 * v94))
                                            + (float)(v89 * v102));
              *(float *)(v103 + 16) = v98;
              *(float *)(v103 + 20) = v97;
              *(float *)(v103 + 24) = v95;
              *(float *)(v103 + 8) = -(float)((float)((float)((float)((float)(v88 * v101) - (float)(v89 * v100)) * v92)
                                                    + (float)(v99 * v94))
                                            + (float)(v91 * v102));
              *(float *)(v103 + 12) = v83;
              *(_DWORD *)(v103 + 52) = (_DWORD)v84;
            }
          }
          break;
        default:
          break;
      }
      if (v47 <= 0x3F)
      {
        v104 = (_DWORD *)(v2 + 12 * v47++);
        *(_DWORD *)(v2 + 2608) = v47;
        v104[653] = v53;
        v104[654] = v54;
        v104[655] = v55;
      }
      ++v45;
    }
    while (v45 != v49);
  }
  return this;
}

BOOL physx::Gu::contactSpherePlane(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;

  v7 = a3[4];
  v8 = a3[5];
  v9 = a3[6];
  v10 = (float)(v7 - a4[4]) + (float)(v7 - a4[4]);
  v11 = (float)(v8 - a4[5]) + (float)(v8 - a4[5]);
  v12 = (float)(v9 - a4[6]) + (float)(v9 - a4[6]);
  v14 = a4[2];
  v13 = a4[3];
  v15 = *a4;
  v16 = a4[1];
  v17 = (float)((float)(v10 * (float)((float)(v13 * v13) + -0.5))
              - (float)((float)((float)(v16 * v12) - (float)(v14 * v11)) * v13))
      + (float)(*a4 * (float)((float)((float)(v11 * v16) + (float)(*a4 * v10)) + (float)(v14 * v12)));
  v18 = *(float *)(a1 + 4);
  v19 = v17 - v18;
  v20 = *a5;
  if (v19 <= *a5)
  {
    v21 = *(unsigned int *)(a7 + 4096);
    if (v21 <= 0x3F)
    {
      v22 = (float)((float)(v15 + v15) * v14) - (float)(v16 * (float)(v13 + v13));
      v23 = (float)(v16 * (float)(v15 + v15)) + (float)(v14 * (float)(v13 + v13));
      v24 = (float)((float)(v13 * (float)(v13 + v13)) + -1.0) + (float)(v15 * (float)(v15 + v15));
      *(_DWORD *)(a7 + 4096) = v21 + 1;
      v25 = a7 + (v21 << 6);
      *(float *)v25 = v24;
      *(float *)(v25 + 4) = v23;
      *(float *)(v25 + 16) = v7 - (float)(v24 * v18);
      *(float *)(v25 + 20) = v8 - (float)(v23 * v18);
      *(float *)(v25 + 24) = v9 - (float)(v18 * v22);
      *(float *)(v25 + 8) = v22;
      *(float *)(v25 + 12) = v19;
      *(_DWORD *)(v25 + 52) = -1;
    }
  }
  return v19 <= v20;
}

BOOL physx::Gu::contactSphereSphere(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, float *a5, uint64_t a6, uint64_t a7)
{
  float32x2_t v7;
  float32x2_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float32x2_t v16;
  float v17;
  uint64_t v18;
  float32_t v19;
  float v20;
  float32x2_t *v21;

  v7 = a3[2];
  v8 = vsub_f32(v7, a4[2]);
  v9 = a3[3].f32[0];
  v10 = v9 - a4[3].f32[0];
  v11 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v8, v8).i32[1]), v8.f32[0], v8.f32[0]) + (float)(v10 * v10);
  v12 = *(float *)(a1 + 4);
  v13 = *(float *)(a2 + 4);
  v14 = (float)((float)(v12 + v13) + *a5) * (float)((float)(v12 + v13) + *a5);
  if (v11 < v14)
  {
    v15 = sqrtf(v11);
    if (v15 <= 0.00001)
    {
      v16 = (float32x2_t)1065353216;
      v17 = 0.0;
    }
    else
    {
      v16 = vmul_n_f32(v8, 1.0 / v15);
      v17 = v10 * (float)(1.0 / v15);
    }
    v18 = *(unsigned int *)(a7 + 4096);
    if (v18 <= 0x3F)
    {
      v19 = v15 - (float)(v12 + v13);
      v20 = (float)((float)(v12 + v15) - v13) * -0.5;
      *(_DWORD *)(a7 + 4096) = v18 + 1;
      v21 = (float32x2_t *)(a7 + (v18 << 6));
      *v21 = v16;
      v21[2] = vadd_f32(v7, vmul_n_f32(v16, v20));
      v21[3].f32[0] = v9 + (float)(v20 * v17);
      v21[1].f32[0] = v17;
      v21[1].f32[1] = v19;
      v21[6].i32[1] = -1;
    }
  }
  return v11 < v14;
}

BOOL physx::Gu::selectNormal(physx::Gu *this, float a2, float a3)
{
  _BOOL4 v3;

  if (a2 == 0.0)
  {
    v3 = (this & 0x30) == 0;
    if (a3 != 1.0)
      v3 = (this & 0x20) == 0;
    if (a3 == 0.0)
      return (this & 0x28) == 0;
    else
      return v3;
  }
  else if (a2 == 1.0)
  {
    return a3 == 0.0 && (this & 0x18) == 0;
  }
  else if (a3 == 0.0)
  {
    return (this & 8) == 0;
  }
  else
  {
    return (float)(a2 + a3) < 0.9999 || (this & 0x10) == 0;
  }
}

void physx::BigConvexData::~BigConvexData(physx::BigConvexData *this)
{
  if (*((_QWORD *)this + 1))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 5))
    goto LABEL_7;
  if (*((_QWORD *)this + 3))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 4))
LABEL_7:
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
}

float32_t physx::Gu::getScaledConvex(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t i;
  float *v11;
  float v12;
  float v13;
  float v14;
  float32_t result;
  float32x2_t *v16;

  if (a5)
  {
    *a1 = a6;
    *a2 = a7;
  }
  else
  {
    *a2 = a4;
    *a1 = a3;
    if (a8)
    {
      v9 = 0;
      for (i = 0; i != a8; ++i)
      {
        *(_BYTE *)(*a2 + i) = i;
        v11 = (float *)(a6 + 12 * *(unsigned __int8 *)(a7 + i));
        v12 = *v11;
        v13 = v11[1];
        v14 = v11[2];
        result = (float)((float)(*v11 * *(float *)(a9 + 8)) + (float)(v13 * *(float *)(a9 + 20)))
               + (float)(v14 * *(float *)(a9 + 32));
        v16 = (float32x2_t *)(*a1 + v9);
        *v16 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a9, v12), vmul_n_f32(*(float32x2_t *)(a9 + 12), v13)), vmul_n_f32(*(float32x2_t *)(a9 + 24), v14));
        v16[1].f32[0] = result;
        v9 += 12;
      }
    }
  }
  return result;
}

BOOL physx::Gu::getConvexData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v8;
  _BOOL8 v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;

  v8 = *(float *)(a1 + 4) == 1.0;
  if (*(float *)(a1 + 8) != 1.0)
    v8 = 0;
  v9 = *(float *)(a1 + 12) == 1.0 && v8;
  if (v9)
  {
    v10 = *(float **)(a1 + 48);
    v11 = *(float *)(a2 + 8);
    v12 = v10[1];
    v13 = *(float *)(a2 + 20);
    v14 = *(float *)(a2 + 32);
    v15 = v10[2];
    v16 = v10[3];
    v17 = (float)((float)(*v10 * v11) + (float)(v12 * v13)) + (float)(v15 * v14);
    v18 = v10[4];
    v19 = v10[5];
    v20 = (float)(fabsf(v11 * v16) + fabsf(v13 * v18)) + fabsf(v14 * v19);
    v21 = *(float32x2_t *)(a2 + 12);
    v22 = vadd_f32(vmul_n_f32(*(float32x2_t *)a2, *v10), vmul_n_f32(v21, v12));
    v23 = *(float32x2_t *)(a2 + 24);
    v24 = vadd_f32(v22, vmul_n_f32(v23, v15));
    v25 = vadd_f32(vadd_f32(vabs_f32(vmul_n_f32(*(float32x2_t *)a2, v16)), vabs_f32(vmul_n_f32(v21, v18))), vabs_f32(vmul_n_f32(v23, v19)));
    *(float32x2_t *)a3 = vsub_f32(v24, v25);
    *(float *)(a3 + 8) = v17 - v20;
    *(float32x2_t *)(a3 + 12) = vadd_f32(v24, v25);
    *(float *)(a3 + 20) = v17 + v20;
    physx::Gu::getPolygonalData_Convex(a4, (uint64_t)v10, a2);
  }
  else
  {
    physx::Cm::FastVertex2ShapeScaling::init(a2, (float *)(a1 + 4), (float *)(a1 + 16));
    v26 = *(float **)(a1 + 48);
    v27 = *(float *)(a2 + 8);
    v28 = v26[1];
    v29 = *(float *)(a2 + 20);
    v30 = *(float *)(a2 + 32);
    v31 = v26[2];
    v32 = v26[3];
    v33 = (float)((float)(*v26 * v27) + (float)(v28 * v29)) + (float)(v31 * v30);
    v34 = v26[4];
    v35 = v26[5];
    v36 = (float)(fabsf(v27 * v32) + fabsf(v29 * v34)) + fabsf(v30 * v35);
    v37 = *(float32x2_t *)(a2 + 12);
    v38 = vadd_f32(vmul_n_f32(*(float32x2_t *)a2, *v26), vmul_n_f32(v37, v28));
    v39 = *(float32x2_t *)(a2 + 24);
    v40 = vadd_f32(v38, vmul_n_f32(v39, v31));
    v41 = vadd_f32(vadd_f32(vabs_f32(vmul_n_f32(*(float32x2_t *)a2, v32)), vabs_f32(vmul_n_f32(v37, v34))), vabs_f32(vmul_n_f32(v39, v35)));
    *(float32x2_t *)a3 = vsub_f32(v40, v41);
    *(float *)(a3 + 8) = v33 - v36;
    *(float32x2_t *)(a3 + 12) = vadd_f32(v40, v41);
    *(float *)(a3 + 20) = v33 + v36;
    physx::Gu::getPolygonalData_Convex(a4, (uint64_t)v26, a2);
    *(_QWORD *)(a4 + 64) = 0;
    *(_QWORD *)(a4 + 72) = 0;
  }
  return v9;
}

uint64_t physx::Gu::findUniqueConvexEdges(uint64_t a1, uint64_t a2, int a3, float32x2_t *a4, uint64_t a5)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;

  if (!a3)
    return 0;
  result = 0;
  do
  {
    v7 = a4[2].u8[2];
    if (a4[2].i8[2])
    {
      v8 = 0;
      v9 = a5 + a4[2].u16[0];
      v10 = v7 - 1;
      do
      {
        v11 = *(unsigned __int8 *)(v9 + v10);
        v12 = *(unsigned __int8 *)(v9 + v8);
        if (v12 >= v11)
          v13 = *(unsigned __int8 *)(v9 + v10);
        else
          v13 = *(unsigned __int8 *)(v9 + v8);
        if (v12 > v11)
          v11 = *(unsigned __int8 *)(v9 + v8);
        if ((_DWORD)result)
        {
          v14 = result;
          v15 = (float *)(a2 + 12);
          while (*((unsigned __int8 *)v15 - 12) != v13 || *((unsigned __int8 *)v15 - 11) != v11)
          {
            v15 += 4;
            if (!--v14)
              goto LABEL_15;
          }
          *((float32x2_t *)v15 - 1) = vadd_f32(*a4, *(float32x2_t *)(v15 - 2));
          *v15 = a4[1].f32[0] + *v15;
        }
        else
        {
LABEL_15:
          if ((_DWORD)result == (_DWORD)a1)
            return a1;
          v16 = a2 + 16 * result;
          *(_BYTE *)v16 = v13;
          *(_BYTE *)(v16 + 1) = v11;
          *(float32x2_t *)(v16 + 4) = *a4;
          *(_DWORD *)(v16 + 12) = a4[1].i32[0];
          result = (result + 1);
        }
        v10 = v8++;
        --v7;
      }
      while (v7);
    }
    a4 = (float32x2_t *)((char *)a4 + 20);
    --a3;
  }
  while (a3);
  return result;
}

BOOL physx::Gu::ConvexMesh::getPolygonData(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *(unsigned __int8 *)(a1 + 71);
  if (v3 > a2)
  {
    v4 = *(_QWORD *)(a1 + 72) + 20 * a2;
    *(_DWORD *)a3 = *(_DWORD *)v4;
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(v4 + 4);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(v4 + 8);
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(v4 + 12);
    *(_WORD *)(a3 + 16) = *(unsigned __int8 *)(v4 + 18);
    *(_WORD *)(a3 + 18) = *(_WORD *)(v4 + 16);
  }
  return v3 > a2;
}

__n128 physx::Gu::ConvexMesh::ConvexMesh(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  *(_DWORD *)(a1 + 8) = 196610;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = off_24ED91748;
  *(_QWORD *)(a1 + 16) = &unk_24ED917F0;
  *(_WORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a3 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a3 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 76);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a3 + 92);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a3 + 100);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a3 + 108);
  *(_QWORD *)(a1 + 160) = a2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a3 + 24);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a3 + 32);
  result = *(__n128 *)(a3 + 36);
  v4 = *(_OWORD *)(a3 + 52);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a3 + 68);
  *(_OWORD *)(a1 + 84) = v4;
  *(__n128 *)(a1 + 68) = result;
  return result;
}

void physx::Gu::ConvexMesh::~ConvexMesh(physx::Gu::ConvexMesh *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED91748;
  *((_QWORD *)this + 2) = &unk_24ED917F0;
  if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    if (*((_QWORD *)this + 9))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 9) = 0;
    v2 = *((_QWORD *)this + 14);
    if (v2)
    {
      physx::BigConvexData::~BigConvexData(*((physx::BigConvexData **)this + 14));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
    }
    *((_QWORD *)this + 14) = 0;
  }
}

{
  uint64_t v2;

  physx::Gu::ConvexMesh::~ConvexMesh(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Gu::ConvexMesh *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                             + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

void `non-virtual thunk to'physx::Gu::ConvexMesh::~ConvexMesh(physx::Gu::ConvexMesh *this)
{
  physx::Gu::ConvexMesh::~ConvexMesh((physx::Gu::ConvexMesh *)((char *)this - 16));
}

{
  char *v1;

  v1 = (char *)this - 16;
  physx::Gu::ConvexMesh::~ConvexMesh((physx::Gu::ConvexMesh *)((char *)this - 16));
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v1);
}

BOOL physx::Gu::ConvexMesh::isGpuCompatible(physx::Gu::ConvexMesh *this)
{
  return *((unsigned __int8 *)this + 70) <= 0x40u
      && *(unsigned __int8 *)(*((_QWORD *)this + 9) + 18) <= 0x1Fu
      && *((__int16 *)this + 34) < 0;
}

uint64_t physx::Gu::ConvexMesh::exportExtraData(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t result;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
  v4 = *(_WORD *)(a1 + 68) & 0x7FFF;
  if (*(__int16 *)(a1 + 68) < 0)
    v5 = 4 * v4;
  else
    v5 = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 72), ((*(_DWORD *)(a1 + 104) & 0x7FFFFFFF)+ 20 * *(unsigned __int8 *)(a1 + 71)- *(unsigned __int8 *)(a1 + 70)+ 16 * *(unsigned __int8 *)(a1 + 70)+ 2 * v4+ v5+ 3) & 0xFFFFFFFC);
  if (*(_QWORD *)(a1 + 112))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 112), 48);
    v7 = *(_QWORD *)(a1 + 112);
    if (*(_QWORD *)(v7 + 8))
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v7 + 8), 2 * *(unsigned __int16 *)(v7 + 2));
    }
    if (*(_QWORD *)(v7 + 24))
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v7 + 24), ((4 * *(_DWORD *)(v7 + 16) + 12) & 0xFFFFFFF0) + *(_DWORD *)(v7 + 20));
    }
  }
  return result;
}

uint64_t physx::Gu::ConvexMesh::load(uint64_t a1, void (***a2)(_QWORD, unsigned __int32 *, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  int v9;
  uint8x8_t v10;
  uint64_t i;
  int16x8_t v12;
  unsigned __int8 v13;
  __int16 v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  __int32 *v25;
  uint64_t v26;
  unsigned __int32 *v27;
  __int16 v28;
  int v29;
  uint64_t v30;
  unsigned __int32 *v31;
  uint64_t v32;
  unsigned __int32 *v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  int8x16_t *v37;
  __int8 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  _BOOL4 v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  uint64_t v62;
  uint8x8_t v63;
  uint64_t j;
  int16x8_t v65;
  uint64_t v66;
  uint8x8_t v67;
  uint64_t k;
  int16x8_t v69;
  __n128 v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  const char *v74;
  uint64_t v75;
  int v76;
  unsigned __int16 Dword;
  uint64_t v78;
  uint64_t v79;
  unsigned __int16 v80;
  uint64_t v81;
  int v82;
  int v83;
  BOOL v84;
  uint64_t v85;
  _BYTE *v86;
  char v87;
  int v88;
  int v89;
  uint64_t v90;
  _WORD *v91;
  _BOOL4 v92;
  unsigned __int16 v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int16 *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint8x8_t v101;
  uint64_t m;
  int16x8_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int32 *v107;
  uint64_t v108;
  BOOL v109;
  unsigned int v110;
  BOOL v111;
  int v112;
  BOOL v113;
  unsigned int v114;
  int v115;
  int8x16_t v116;
  float32x2_t v117;
  __int32 v118;
  uint64_t v119;
  int8x8x4_t v120;
  int8x8x4_t v121;

  v119 = *MEMORY[0x24BDAC8D0];
  v110 = 0;
  v109 = 0;
  v7 = physx::readHeader(0x43u, 0x56u, 0x58u, 0x4Du, &v110, &v109, a2);
  result = 0;
  if (!v7)
    return result;
  if (v110 <= 0xC)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/convex/GuConvexMesh.cpp", 318, "Loading convex mesh failed: Deprecated mesh cooking format.", v4, v5, v6, v104);
    return 0;
  }
  physx::readDword(v109, a2);
  *(float *)&v114 = 0.0;
  LOBYTE(v112) = 0;
  if (!physx::Gu::ReadHeader(67, 76, 72, 76, &v114, (BOOL *)&v112, a2)
    || v114 <= 8 && !physx::Gu::ReadHeader(67, 86, 72, 76, &v114, (BOOL *)&v112, a2))
  {
    return 0;
  }
  v9 = v112;
  (**a2)(a2, (unsigned __int32 *)&v115, 16);
  if (v9)
  {
    for (i = 0; i != 16; i += 4)
    {
      v10.i32[0] = *(int *)((char *)&v115 + i);
      v12 = (int16x8_t)vmovl_u8(v10);
      *(int16x4_t *)v12.i8 = vrev64_s16(*(int16x4_t *)v12.i8);
      v10 = (uint8x8_t)vmovn_s16(v12);
      *(int *)((char *)&v115 + i) = v10.i32[0];
    }
  }
  v13 = v115;
  v14 = v116.i16[0];
  v15 = v115;
  *(_BYTE *)(a1 + 70) = v115;
  v16 = v14;
  *(_WORD *)(a1 + 68) = v14;
  v17 = v116.u32[2];
  v18 = v116.u8[4];
  *(_BYTE *)(a1 + 71) = v116.i8[4];
  v19 = v14 & 0x7FFF;
  if (v16 < 0)
    v20 = 4 * v19;
  else
    v20 = 0;
  v21 = (16 * v15 - v13 + 2 * v19 + v20 + (_DWORD)v17 + 20 * v18 + 3) & 0xFFFFFFFC;
  if (*(_QWORD *)(a1 + 72))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_DWORD *)(a1 + 104) = v17;
  if ((_DWORD)v21)
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, v21, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/convex/GuConvexMesh.cpp", 199);
  else
    v22 = 0;
  v23 = v9 != 0;
  *(_QWORD *)(a1 + 72) = v22;
  v24 = 5 * *(unsigned __int8 *)(a1 + 71);
  v108 = v22;
  v25 = (__int32 *)(v22 + 20 * *(unsigned __int8 *)(a1 + 71));
  v26 = 3 * *(unsigned __int8 *)(a1 + 70);
  v27 = (unsigned __int32 *)&v25[3 * *(unsigned __int8 *)(a1 + 70)];
  v28 = *(_WORD *)(a1 + 68);
  v29 = v28;
  v30 = v28 & 0x7FFF;
  v106 = *(unsigned __int8 *)(a1 + 70);
  v107 = (unsigned __int32 *)((char *)v27 + 2 * v30);
  v31 = (unsigned __int32 *)((char *)v107 + v26);
  v32 = v30;
  if (v29 >= 0)
    v32 = 0;
  v105 = v32 * 4;
  v33 = &v31[v32];
  physx::readFloatBuffer(v25, 3 * *(unsigned __int8 *)(a1 + 70), v23, (void (***)(_QWORD, __int32 *, _QWORD))a2);
  v34 = v112;
  if (v114 <= 6)
  {
    LOWORD(v115) = 0;
    (**a2)(a2, (unsigned __int32 *)&v115, 2);
  }
  (**a2)(a2, *(unsigned __int32 **)(a1 + 72), 20 * *(unsigned __int8 *)(a1 + 71));
  if (v34 && *(_BYTE *)(a1 + 71))
  {
    v35 = 0;
    v36 = 0;
    do
    {
      v37 = (int8x16_t *)(*(_QWORD *)(a1 + 72) + v35);
      *v37 = vrev32q_s8(*v37);
      v38 = v37[1].i8[0];
      v37[1].i8[0] = v37[1].i8[1];
      v37[1].i8[1] = v38;
      ++v36;
      v35 += 20;
    }
    while (v36 < *(unsigned __int8 *)(a1 + 71));
  }
  v39 = 4 * v24;
  v40 = 2 * v30;
  (**a2)(a2, v33, v17);
  (**a2)(a2, v27, 2 * (*(_WORD *)(a1 + 68) & 0x7FFFu));
  if (v114 > 5)
  {
    (**a2)(a2, v107, 3 * *(unsigned __int8 *)(a1 + 70));
    v41 = (_QWORD *)&unk_25582F000;
    v42 = v108;
  }
  else
  {
    v41 = &unk_25582F000;
    v42 = v108;
    if (*(_BYTE *)(a1 + 70))
    {
      v43 = 0;
      LODWORD(v44) = 1;
      while (1)
      {
        v45 = *(unsigned __int8 *)(a1 + 71);
        if (!*(_BYTE *)(a1 + 71))
          break;
        v46 = 0;
        v47 = 0;
        v48 = *(_QWORD *)(a1 + 72);
        while (1)
        {
          v49 = *(unsigned __int8 *)(v48 + 20 * v46 + 18);
          if (*(_BYTE *)(v48 + 20 * v46 + 18))
          {
            v50 = (unsigned __int8 *)(v108
                                    + v105
                                    + v39
                                    - v106
                                    + 16 * v106
                                    + v40
                                    + *(unsigned __int16 *)(v48 + 20 * v46 + 16));
            while (1)
            {
              v51 = *v50++;
              if (v43 == v51)
                break;
              if (!--v49)
                goto LABEL_39;
            }
            *((_BYTE *)&v115 + v47++) = v46;
            if (v47 == 3)
              break;
          }
LABEL_39:
          if (++v46 == v45)
            goto LABEL_44;
        }
        v52 = (char *)v107 + 3 * v43;
        *v52 = v115;
        *(_WORD *)(v52 + 1) = *(_WORD *)((char *)&v115 + 1);
        ++v43;
        v44 = *(unsigned __int8 *)(a1 + 70);
        if (v43 >= v44)
          goto LABEL_47;
      }
LABEL_44:
      if ((_DWORD)v44)
      {
        v53 = 0;
        v54 = v39 + 4 * v26 + v40 + v108 + 1;
        do
        {
          *(_WORD *)(v54 - 1) = -1;
          *(_BYTE *)(v54 + 1) = -1;
          ++v53;
          v54 += 3;
        }
        while (v53 < *(unsigned __int8 *)(a1 + 70));
      }
    }
  }
LABEL_47:
  v55 = *(__int16 *)(a1 + 68);
  if (v55 < 0)
  {
    if (v114 > 7)
    {
      v80 = 2 * v55;
      v81 = v39;
      v82 = (unsigned __int16)(2 * v55);
      v83 = v112;
      (**a2)(a2, v31, (2 * v82));
      if (v82)
        v84 = v83 == 0;
      else
        v84 = 1;
      if (!v84)
      {
        v85 = v80;
        v86 = (_BYTE *)(v81 - v106 + 16 * v106 + v40 + v42 + 1);
        do
        {
          v87 = *(v86 - 1);
          *(v86 - 1) = *v86;
          *v86 = v87;
          v86 += 2;
          --v85;
        }
        while (v85);
      }
    }
    else if ((v55 & 0x7FFF) != 0)
    {
      v71 = 0;
      do
        *((_WORD *)v31 + v71++) = -1;
      while (v71 < 2 * (unint64_t)(*(_WORD *)(a1 + 68) & 0x7FFF));
    }
  }
  v56 = v109;
  (**a2)(a2, (unsigned __int32 *)&v115, 32);
  if (v56)
  {
    v120 = vld4_s8((const char *)&v115);
    v121.val[0] = v120.val[3];
    v121.val[1] = v120.val[2];
    v121.val[2] = v120.val[1];
    v121.val[3] = v120.val[0];
    vst4_s8((char *)&v115, v121);
  }
  v57 = (float32x4_t)vextq_s8(v116, v116, 8uLL);
  v58 = (float32x4_t)vextq_s8(v116, (int8x16_t)v57, 0xCuLL);
  v59 = vsubq_f32((float32x4_t)v116, v58);
  *(float32x2_t *)&v58.i32[1] = v117;
  v60 = vaddq_f32((float32x4_t)v116, v58);
  v60.i32[3] = v59.i32[3];
  v61 = vsub_f32(v117, (float32x2_t)vext_s8(*(int8x8_t *)v116.i8, *(int8x8_t *)v57.f32, 4uLL));
  v57.i64[0] = 0x3F0000003F000000;
  v57.i64[1] = 0x3F0000003F000000;
  *(float32x4_t *)(a1 + 32) = vmulq_f32(v60, v57);
  *(float32x2_t *)(a1 + 48) = vmul_f32(v61, (float32x2_t)0x3F0000003F000000);
  v61.i32[0] = v118;
  *(_DWORD *)(a1 + 120) = v118;
  if (v61.f32[0] == -1.0)
    goto LABEL_56;
  v62 = a1 + 124;
  (**a2)(a2, (unsigned __int32 *)(a1 + 124), 36);
  if (v56)
  {
    for (j = 0; j != 36; j += 4)
    {
      v63.i32[0] = *(_DWORD *)(v62 + j);
      v65 = (int16x8_t)vmovl_u8(v63);
      *(int16x4_t *)v65.i8 = vrev64_s16(*(int16x4_t *)v65.i8);
      v63 = (uint8x8_t)vmovn_s16(v65);
      *(_DWORD *)(v62 + j) = v63.i32[0];
    }
    v66 = a1 + 56;
    (**a2)(a2, (unsigned __int32 *)(a1 + 56), 12);
    for (k = 0; k != 12; k += 4)
    {
      v67.i32[0] = *(_DWORD *)(v66 + k);
      v69 = (int16x8_t)vmovl_u8(v67);
      *(int16x4_t *)v69.i8 = vrev64_s16(*(int16x4_t *)v69.i8);
      v67 = (uint8x8_t)vmovn_s16(v69);
      *(_DWORD *)(v66 + k) = v67.i32[0];
    }
LABEL_56:
    (**a2)(a2, &v114, 4);
    if (v56)
    {
      v70.n128_u32[0] = v114;
      v70 = (__n128)vmovl_u8((uint8x8_t)v70.n128_u64[0]);
      v70.n128_u64[0] = (unint64_t)vrev64_s16((int16x4_t)v70.n128_u64[0]);
      v70.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)v70);
      v114 = v70.n128_u32[0];
    }
    goto LABEL_64;
  }
  (**a2)(a2, (unsigned __int32 *)(a1 + 56), 12);
  (**a2)(a2, &v114, 4);
LABEL_64:
  v70.n128_u32[0] = v114;
  if (*(float *)&v114 != -1.0)
  {
    v72 = *(_QWORD *)(a1 + 112);
    if (v72)
    {
      physx::BigConvexData::~BigConvexData(*(physx::BigConvexData **)(a1 + 112));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41[327] + 24) + 24))(v41[327] + 24, v72);
    }
    *(_QWORD *)(a1 + 112) = 0;
    v73 = (_QWORD *)v41[327];
    if ((*(unsigned int (**)(_QWORD *, __n128))(*v73 + 40))(v73, v70))
      v74 = "static const char *physx::shdfnd::ReflectionAllocator<physx::BigConvexData>::getName() [T = physx::BigConvexData]";
    else
      v74 = "<allocation names disabled>";
    v75 = (*(uint64_t (**)(_QWORD *, uint64_t, const char *, const char *, uint64_t))(v73[3] + 16))(v73 + 3, 48, v74, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/convex/GuConvexMesh.cpp", 351);
    *(_DWORD *)v75 = 0;
    *(_OWORD *)(v75 + 8) = 0u;
    *(_OWORD *)(v75 + 24) = 0u;
    *(_QWORD *)(v75 + 40) = 0;
    *(_QWORD *)(a1 + 112) = v75;
    v111 = 0;
    if (physx::Gu::ReadHeader(83, 85, 80, 77, &v112, &v111, a2)
      && physx::Gu::ReadHeader(71, 65, 85, 83, &v112, &v111, a2))
    {
      v76 = v111;
      *(_WORD *)v75 = physx::readDword(v111, a2);
      Dword = physx::readDword(v76, a2);
      *(_WORD *)(v75 + 2) = Dword;
      v78 = 2 * Dword;
      v79 = (_DWORD)v78
          ? (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v41[327] + 24)
                                                                                             + 16))(v41[327] + 24, v78, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/convex/GuBigConvexData.cpp", 161): 0;
      *(_QWORD *)(v75 + 8) = v79;
      ((void (*)(void (***)(_QWORD, unsigned __int32 *, uint64_t)))**a2)(a2);
      v113 = 0;
      if (physx::Gu::ReadHeader(86, 65, 76, 69, &v114, &v113, a2))
      {
        v88 = v113;
        *(_DWORD *)(v75 + 16) = physx::readDword(v113, a2);
        v89 = physx::readDword(v88, a2);
        *(_DWORD *)(v75 + 20) = v89;
        if (*(_QWORD *)(v75 + 40))
        {
          (*(void (**)(uint64_t))(*(_QWORD *)(v41[327] + 24) + 24))(v41[327] + 24);
          v89 = *(_DWORD *)(v75 + 20);
        }
        v90 = 4 * ((*(_DWORD *)(v75 + 16) + 3) & 0xFFFFFFFC);
        if (v89 + (_DWORD)v90)
          v91 = (_WORD *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v41[327] + 24) + 16))(v41[327] + 24, (v89 + v90), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/convex/GuBigConvexData.cpp", 99);
        else
          v91 = 0;
        v92 = v88 != 0;
        *(_QWORD *)(v75 + 24) = v91;
        *(_QWORD *)(v75 + 32) = &v91[(unint64_t)v90 / 2];
        *(_QWORD *)(v75 + 40) = v91;
        v93 = physx::readDword(v92, a2);
        physx::Gu::ReadIndices(v93, *(unsigned int *)(v75 + 16), v91, (uint64_t (***)(_QWORD, char *, uint64_t))a2, v92);
        v94 = *(unsigned int *)(v75 + 16);
        if ((_DWORD)v94)
        {
          v95 = *(_QWORD *)(v75 + 24);
          do
          {
            --v94;
            *(_WORD *)(v95 + 4 * v94) = v91[v94];
          }
          while (v94);
        }
        (**a2)(a2, *(unsigned __int32 **)(v75 + 32), *(unsigned int *)(v75 + 20));
        v96 = *(unsigned __int16 **)(v75 + 24);
        v96[1] = 0;
        v97 = *(unsigned int *)(v75 + 16);
        if (v97 >= 2)
        {
          v98 = 0;
          v99 = v97 - 1;
          do
          {
            v98 += *v96;
            v96[3] = v98;
            v96 += 2;
            --v99;
          }
          while (v99);
        }
      }
    }
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 112);
  }
  v100 = a1 + 88;
  ((void (*)(void (***)(_QWORD, unsigned __int32 *, uint64_t), uint64_t, uint64_t, __n128))**a2)(a2, v100, 16, v70);
  if (v56)
  {
    for (m = 0; m != 16; m += 4)
    {
      v101.i32[0] = *(_DWORD *)(v100 + m);
      v103 = (int16x8_t)vmovl_u8(v101);
      *(int16x4_t *)v103.i8 = vrev64_s16(*(int16x4_t *)v103.i8);
      v101 = (uint8x8_t)vmovn_s16(v103);
      *(_DWORD *)(v100 + m) = v101.i32[0];
    }
  }
  return 1;
}

uint64_t physx::Gu::ConvexMesh::release(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(this + 24);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this + 16) + 16))(this + 16);
  return this;
}

uint64_t physx::Gu::ConvexMesh::onRefCountZero(physx::Gu::ConvexMesh *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v10 = *((_WORD *)this + 34) & 0x7FFF;
  if (*((__int16 *)this + 34) < 0)
    v11 = 4 * v10;
  else
    v11 = 0;
  if ((*((_DWORD *)this + 26) & 0x7FFFFFFF)
     + 20 * *((unsigned __int8 *)this + 71)
     - *((unsigned __int8 *)this + 70)
     + 16 * *((unsigned __int8 *)this + 70)
     + 2 * v10
     + v11
     + 3 >= 4
    && !physx::GuMeshFactory::removeConvexMesh(*((_QWORD *)this + 20), (uint64_t)this))
  {
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/convex/GuConvexMesh.cpp", 396, "Gu::ConvexMesh::release: double deletion detected!", v12, v13, v14, a9);
  }
  v15 = *((_QWORD *)this + 20);
  v16 = *(_QWORD *)this;
  if ((*((_WORD *)this + 5) & 1) != 0)
    result = (*(uint64_t (**)(physx::Gu::ConvexMesh *))(v16 + 32))(this);
  else
    result = (*(uint64_t (**)(physx::Gu::ConvexMesh *))(v16 + 24))(this);
  v18 = *(unsigned int *)(v15 + 248);
  if ((_DWORD)v18)
  {
    v19 = 0;
    v20 = 8 * v18;
    do
    {
      result = (*(uint64_t (**)(_QWORD, physx::Gu::ConvexMesh *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v15 + 240)
                                                                                                 + v19)
                                                                                   + 16))(*(_QWORD *)(*(_QWORD *)(v15 + 240) + v19), this, 2);
      v19 += 8;
    }
    while (v20 != v19);
  }
  return result;
}

uint64_t `non-virtual thunk to'physx::Gu::ConvexMesh::onRefCountZero(physx::Gu::ConvexMesh *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return physx::Gu::ConvexMesh::onRefCountZero((physx::Gu::ConvexMesh *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t physx::Gu::ConvexMesh::acquireReference(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 24);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t physx::Gu::ConvexMesh::getReferenceCount(physx::Gu::ConvexMesh *this)
{
  return *((unsigned int *)this + 6);
}

float physx::Gu::ConvexMesh::getMassInformation(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  float result;

  *a2 = *(_DWORD *)(a1 + 120);
  *(_QWORD *)a3 = *(_QWORD *)(a1 + 124);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a1 + 132);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 140);
  *(_QWORD *)(a3 + 24) = *(_QWORD *)(a1 + 148);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 156);
  *(_QWORD *)a4 = *(_QWORD *)(a1 + 56);
  result = *(float *)(a1 + 64);
  *(float *)(a4 + 8) = result;
  return result;
}

float physx::Gu::ConvexMesh::getLocalBounds@<S0>(physx::Gu::ConvexMesh *this@<X0>, uint64_t a2@<X8>)
{
  float v2;
  float32x4_t v3;
  float32x4_t v4;
  __int128 v5;
  float result;

  v2 = *((float *)this + 13);
  v3 = *(float32x4_t *)((char *)this + 36);
  v4 = (float32x4_t)vextq_s8((int8x16_t)v3, vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL), 0xCuLL);
  v4.f32[1] = v2;
  *(_QWORD *)&v5 = vsubq_f32(v3, v4).u64[0];
  v4.i32[2] = *((_DWORD *)this + 8);
  *((_QWORD *)&v5 + 1) = vaddq_f32(v3, v4).i64[1];
  v3.i32[0] = HIDWORD(*(_QWORD *)((char *)this + 36));
  *(float *)a2 = v4.f32[2] - COERCE_FLOAT(*(_QWORD *)((char *)this + 44));
  result = v3.f32[0] + v2;
  *(_OWORD *)(a2 + 4) = v5;
  *(float *)(a2 + 20) = v3.f32[0] + v2;
  return result;
}

const char *physx::PxConvexMesh::getConcreteTypeName(physx::PxConvexMesh *this)
{
  return "PxConvexMesh";
}

BOOL physx::PxConvexMesh::isKindOf(physx::PxConvexMesh *this, const char *a2)
{
  return !strcmp("PxConvexMesh", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::Gu::ConvexMesh::getNbVertices(physx::Gu::ConvexMesh *this)
{
  return *((unsigned __int8 *)this + 70);
}

uint64_t physx::Gu::ConvexMesh::getVertices(physx::Gu::ConvexMesh *this)
{
  return *((_QWORD *)this + 9) + 20 * *((unsigned __int8 *)this + 71);
}

uint64_t physx::Gu::ConvexMesh::getIndexBuffer(physx::Gu::ConvexMesh *this)
{
  __int16 v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_WORD *)this + 34);
  v2 = v1;
  v3 = v1 & 0x7FFF;
  v4 = *((_QWORD *)this + 9) + 20 * *((unsigned __int8 *)this + 71) + 12 * *((unsigned __int8 *)this + 70) + 2 * v3;
  v5 = 4 * v3;
  if (v2 >= 0)
    v5 = 0;
  return v4 + 3 * *((unsigned __int8 *)this + 70) + v5;
}

uint64_t physx::Gu::ConvexMesh::getNbPolygons(physx::Gu::ConvexMesh *this)
{
  return *((unsigned __int8 *)this + 71);
}

uint64_t `anonymous namespace'::SphereMeshContactGenerationCallback_NoScale::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t *a7)
{
  return 1;
}

uint64_t `anonymous namespace'::SphereMeshContactGeneration::processTriangle(uint64_t result, int a2, float *a3, float *a4, float *a5, uint64_t *a6)
{
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  char v28;
  int v29;
  float v30;
  float v31;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  float v73;
  float *v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  float v102;

  v6 = *(float **)(result + 32);
  v7 = *a4;
  v8 = a4[1];
  v9 = *a3;
  v10 = a3[1];
  v11 = *a4 - *a3;
  v12 = v8 - v10;
  v13 = a4[2];
  v14 = a3[2];
  v15 = v13 - v14;
  v16 = *a5;
  v17 = a5[1];
  v18 = *a5 - *a3;
  v19 = v17 - v10;
  v20 = a5[2];
  v21 = v20 - v14;
  v23 = *v6;
  v22 = v6[1];
  v24 = *v6 - *a3;
  v25 = v6[2];
  v26 = (float)((float)((float)(v8 - v10) * (float)(v22 - v10)) + (float)(v11 * v24))
      + (float)((float)(v13 - v14) * (float)(v25 - v14));
  v27 = (float)((float)((float)(v17 - v10) * (float)(v22 - v10)) + (float)(v18 * v24))
      + (float)((float)(v20 - v14) * (float)(v25 - v14));
  if (v26 > 0.0 || v27 > 0.0)
  {
    v30 = (float)((float)(v12 * (float)(v22 - v8)) + (float)(v11 * (float)(v23 - v7)))
        + (float)(v15 * (float)(v25 - v13));
    v31 = (float)((float)(v19 * (float)(v22 - v8)) + (float)(v18 * (float)(v23 - v7)))
        + (float)(v21 * (float)(v25 - v13));
    if (v30 < 0.0 || v31 > v30)
    {
      v33 = (float)(v26 * v31) - (float)(v30 * v27);
      if (v30 > 0.0 || v26 < 0.0 || v33 > 0.0)
      {
        v37 = (float)((float)(v12 * (float)(v22 - v17)) + (float)(v11 * (float)(v23 - v16)))
            + (float)(v15 * (float)(v25 - v20));
        v38 = (float)((float)(v19 * (float)(v22 - v17)) + (float)(v18 * (float)(v23 - v16)))
            + (float)(v21 * (float)(v25 - v20));
        if (v38 < 0.0 || v37 > v38)
        {
          v40 = (float)(v37 * v27) - (float)(v26 * v38);
          if (v38 > 0.0 || v40 > 0.0 || v27 < 0.0)
          {
            v44 = (float)(v30 * v38) - (float)(v37 * v31);
            if (v44 <= 0.0 && (v45 = v31 - v30, v45 >= 0.0) && (float)(v37 - v38) >= 0.0)
            {
              v28 = 0;
              v102 = v45 / (float)(v45 + (float)(v37 - v38));
              v7 = v7 + (float)((float)(v16 - v7) * v102);
              v8 = v8 + (float)((float)(v17 - v8) * v102);
              v13 = v13 + (float)((float)(v20 - v13) * v102);
              v29 = 4;
            }
            else
            {
              v46 = 1.0 / (float)(v33 + (float)(v44 + v40));
              v47 = v40 * v46;
              v48 = v33 * v46;
              v49 = v14 + (float)(v15 * v47);
              v50 = v19 * v48;
              v51 = v21 * v48;
              v7 = (float)(v18 * v48) + (float)(v9 + (float)(v11 * v47));
              v8 = v50 + (float)(v10 + (float)(v12 * v47));
              v13 = v51 + v49;
              v29 = 6;
              v28 = 1;
            }
          }
          else
          {
            v28 = 0;
            v41 = v27 / (float)(v27 - v38);
            v42 = v19 * v41;
            v43 = v21 * v41;
            v7 = v9 + (float)(v18 * v41);
            v8 = v10 + v42;
            v13 = v14 + v43;
            v29 = 5;
          }
        }
        else
        {
          v28 = 0;
          v29 = 2;
          v7 = *a5;
          v8 = a5[1];
          v13 = a5[2];
        }
      }
      else
      {
        v28 = 0;
        v34 = v26 / (float)(v26 - v30);
        v35 = v12 * v34;
        v36 = v15 * v34;
        v7 = v9 + (float)(v11 * v34);
        v8 = v10 + v35;
        v13 = v14 + v36;
        v29 = 3;
      }
    }
    else
    {
      v28 = 0;
      v29 = 1;
    }
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v7 = *a3;
    v8 = a3[1];
    v13 = a3[2];
  }
  v52 = v7 - v23;
  v53 = v8 - v22;
  v54 = v13 - v25;
  v55 = (float)((float)(v53 * v53) + (float)(v52 * v52)) + (float)(v54 * v54);
  v56 = (float)(v12 * v21) - (float)(v15 * v19);
  v57 = (float)(v15 * v18) - (float)(v11 * v21);
  v58 = (float)(v11 * v19) - (float)(v12 * v18);
  v59 = (float)((float)(v10 * v57) + (float)(v56 * v9)) + (float)(v58 * v14);
  if (v55 < *(float *)(result + 40)
    && (float)((float)((float)(v22 * v57) + (float)(v56 * v23)) + (float)(v58 * v25)) >= v59)
  {
    if (v55 <= 0.0001)
    {
      if ((v28 & 1) != 0)
      {
        v65 = (float)((float)(v57 * v57) + (float)(v56 * v56)) + (float)(v58 * v58);
        v61 = 0.0;
        v66 = 0.0;
        v67 = 0.0;
        v68 = 0.0;
        if (v65 > 0.0)
        {
          v69 = 1.0 / sqrtf(v65);
          v66 = v56 * v69;
          v67 = v57 * v69;
          v68 = v58 * v69;
        }
        v62 = -v66;
        v63 = -v67;
        v64 = -v68;
        goto LABEL_39;
      }
    }
    else
    {
      if ((v28 & 1) != 0)
      {
        v61 = sqrtf(v55);
        v62 = v52 * (float)(1.0 / v61);
        v63 = v53 * (float)(1.0 / v61);
        v64 = v54 * (float)(1.0 / v61);
LABEL_39:
        v70 = *(_QWORD *)(result + 24);
        v71 = *(unsigned int *)(v70 + 4096);
        if (v71 <= 0x3F)
        {
          v72 = *(float *)(*(_QWORD *)result + 4);
          v73 = v61 - v72;
          v74 = *(float **)(result + 16);
          v75 = (float)(v25 + (float)(v64 * v72)) + (float)(v25 + (float)(v64 * v72));
          v76 = (float)(v23 + (float)(v62 * v72)) + (float)(v23 + (float)(v62 * v72));
          v77 = v74[1];
          v78 = (float)(v22 + (float)(v63 * v72)) + (float)(v22 + (float)(v63 * v72));
          v79 = v74[2];
          v80 = v74[3];
          v81 = (float)((float)(v78 * v77) + (float)(*v74 * v76)) + (float)(v79 * v75);
          v82 = (float)(v80 * v80) + -0.5;
          v83 = v74[6]
              + (float)((float)((float)(v80 * (float)((float)(*v74 * v78) - (float)(v77 * v76))) + (float)(v75 * v82))
                      + (float)(v79 * v81));
          v84 = v74[5]
              + (float)((float)((float)((float)((float)(v79 * v76) - (float)(*v74 * v75)) * v80) + (float)(v78 * v82))
                      + (float)(v77 * v81));
          v85 = (float)((float)((float)((float)((float)(v77 * v75) - (float)(v79 * v78)) * v80) + (float)(v76 * v82))
                      + (float)(*v74 * v81))
              + v74[4];
          v86 = v64 + v64;
          v87 = v62 + v62;
          v88 = v63 + v63;
          v89 = (float)((float)((float)(v63 + v63) * v77) + (float)(*v74 * v87)) + (float)(v79 * (float)(v64 + v64));
          v90 = (float)(v80 * (float)((float)(*v74 * v88) - (float)(v77 * v87))) + (float)((float)(v64 + v64) * v82);
          v91 = -(float)((float)((float)((float)((float)(v79 * v87) - (float)(*v74 * v86)) * v80) + (float)(v88 * v82))
                       + (float)(v77 * v89));
          v92 = -(float)((float)((float)((float)((float)(v77 * v86) - (float)(v79 * v88)) * v80) + (float)(v87 * v82))
                       + (float)(*v74 * v89));
          *(_DWORD *)(v70 + 4096) = v71 + 1;
          v93 = v70 + (v71 << 6);
          *(float *)v93 = v92;
          *(float *)(v93 + 4) = v91;
          *(float *)(v93 + 16) = v85;
          *(float *)(v93 + 20) = v84;
          *(float *)(v93 + 24) = v83;
          *(float *)(v93 + 8) = -(float)(v90 + (float)(v79 * v89));
          *(float *)(v93 + 12) = v73;
          *(_DWORD *)(v93 + 52) = a2;
        }
        v94 = *(_DWORD *)(result + 2608);
        if (v94 <= 0x3F)
        {
          v95 = *((_DWORD *)a6 + 2);
          v96 = v94 + 1;
          v97 = result + 12 * v94;
          v98 = *a6;
          *(_DWORD *)(result + 2608) = v96;
          *(_QWORD *)(v97 + 2612) = v98;
          *(_DWORD *)(v97 + 2620) = v95;
        }
        return result;
      }
      v56 = v52;
      v57 = v53;
      v58 = v54;
    }
    v99 = *(unsigned int *)(result + 44);
    if (v99 <= 0x3F)
    {
      *(_DWORD *)(result + 44) = v99 + 1;
      v100 = result + 8 * v99;
      *(float *)(v100 + 2096) = v55;
      *(_DWORD *)(v100 + 2100) = v99;
      v101 = result + 32 * v99;
      *(float *)(v101 + 48) = v56;
      *(float *)(v101 + 52) = v57;
      *(float *)(v101 + 56) = v58;
      *(_DWORD *)(v101 + 68) = *(_DWORD *)a6;
      *(_DWORD *)(v101 + 72) = *((_DWORD *)a6 + 1);
      *(_DWORD *)(v101 + 76) = *((_DWORD *)a6 + 2);
      *(_DWORD *)(v101 + 60) = v29;
      *(_DWORD *)(v101 + 64) = a2;
    }
  }
  return result;
}

uint64_t `anonymous namespace'::SphereMeshContactGenerationCallback_Scale::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float32x2_t *v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 3416);
  v8 = *(unsigned __int8 *)(v7 + 72);
  v9 = *(float *)(v7 + 8);
  v10 = *a3;
  v11 = a3[1];
  v12 = *(float *)(v7 + 20);
  v13 = a3[2];
  v14 = *(float *)(v7 + 32);
  v33 = (float)((float)(*a3 * v9) + (float)(v11 * v12)) + (float)(v13 * v14);
  v15 = *a4;
  v16 = a4[1];
  v17 = a4[2];
  v18 = v8 == 0;
  v19 = 24;
  if (v18)
    v20 = 12;
  else
    v20 = 24;
  v21 = (float32x2_t *)((char *)&v32 + v20);
  v21[1].f32[0] = (float)((float)(v9 * *a4) + (float)(v12 * v16)) + (float)(v14 * v17);
  v22 = *a5;
  v23 = a5[1];
  v24 = (float)(v9 * *a5) + (float)(v12 * v23);
  v25 = a5[2];
  v26 = v24 + (float)(v14 * v25);
  if (!v18)
    v19 = 12;
  v27 = (float32x2_t *)((char *)&v32 + v19);
  v28 = *(float32x2_t *)v7;
  v29 = *(float32x2_t *)(v7 + 12);
  v30 = *(float32x2_t *)(v7 + 24);
  v32 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v7, v10), vmul_n_f32(v29, v11)), vmul_n_f32(v30, v13));
  *v21 = vadd_f32(vadd_f32(vmul_n_f32(v28, v15), vmul_n_f32(v29, v16)), vmul_n_f32(v30, v17));
  *v27 = vadd_f32(vadd_f32(vmul_n_f32(v28, v22), vmul_n_f32(v29, v23)), vmul_n_f32(v30, v25));
  v27[1].f32[0] = v26;
  return 1;
}

void `anonymous namespace'::SphereHeightfieldContactGenerationCallback::~SphereHeightfieldContactGenerationCallback(_anonymous_namespace_::SphereHeightfieldContactGenerationCallback *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t `anonymous namespace'::SphereHeightfieldContactGenerationCallback::onEvent(_anonymous_namespace_::SphereHeightfieldContactGenerationCallback *this, int a2, unsigned int *a3)
{
  int v4;
  char *v6;
  unsigned int v7;
  float v9[3];
  float v10;
  float v11;
  _DWORD v12[5];

  *(_QWORD *)&v12[3] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v4 = a2;
    v6 = (char *)this + 8;
    do
    {
      --v4;
      v7 = *a3++;
      physx::Gu::HeightFieldUtil::getTriangle(*((_QWORD *)this + 425), *((float **)this + 3), (uint64_t)v9, (uint64_t)v12, 0, v7, 0, 0);
    }
    while (v4);
  }
  return 1;
}

uint64_t validateEdge(int a1, int a2, int *a3, int a4)
{
  int v4;
  int v5;
  int v6;
  BOOL v7;

  if (a4)
  {
    while (1)
    {
      v4 = *a3;
      v5 = a3[1];
      v6 = a3[2];
      if (*a3 == a1)
        break;
      if (v5 == a1)
      {
        v7 = v4 == a2;
LABEL_6:
        if (v7 || v6 == a2)
          return 0;
        goto LABEL_10;
      }
      if (v6 == a1 && (v4 == a2 || v5 == a2))
        return 0;
LABEL_10:
      a3 += 3;
      if (!--a4)
        return 1;
    }
    v7 = v5 == a2;
    goto LABEL_6;
  }
  return 1;
}

float physx::Gu::computeHullOBB(float *a1, uint64_t a2, float *a3, float *a4, uint64_t a5, char a6, double a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float result;

  v7 = a4[1];
  v8 = a3[1];
  v9 = a4[2];
  v10 = a4[3];
  v11 = a3[2];
  v12 = a3[3];
  v13 = (float)((float)(v7 * v8) + (float)(*a4 * *a3)) + (float)(v9 * v11);
  v14 = a4[4];
  v15 = a4[5];
  v16 = (float)((float)(v8 * v14) + (float)(v10 * *a3)) + (float)(v15 * v11);
  v17 = a4[6];
  v18 = a4[7];
  v19 = a4[8];
  v20 = (float)((float)(v8 * v18) + (float)(v17 * *a3)) + (float)(v19 * v11);
  v21 = a3[4];
  v22 = a3[5];
  v23 = (float)((float)(v7 * v21) + (float)(*a4 * v12)) + (float)(v9 * v22);
  v24 = (float)((float)(v14 * v21) + (float)(v10 * v12)) + (float)(v15 * v22);
  v25 = (float)((float)(v18 * v21) + (float)(v17 * v12)) + (float)(v19 * v22);
  v26 = a3[6];
  v27 = a3[7];
  v28 = a3[8];
  v29 = (float)((float)(v7 * v27) + (float)(*a4 * v26)) + (float)(v9 * v28);
  v30 = (float)((float)(v14 * v27) + (float)(v10 * v26)) + (float)(v15 * v28);
  v31 = (float)((float)(v18 * v27) + (float)(v17 * v26)) + (float)(v19 * v28);
  v32 = a3[9] - a4[9];
  v33 = a3[10] - a4[10];
  v34 = a3[11] - a4[11];
  v35 = (float)((float)(v7 * v33) + (float)(*a4 * v32)) + (float)(v9 * v34);
  v36 = (float)((float)(v14 * v33) + (float)(v10 * v32)) + (float)(v15 * v34);
  v37 = (float)((float)(*(float *)(a2 + 20) - *(float *)(a2 + 8)) * 0.5) + *(float *)&a7;
  *((float32x2_t *)a1 + 6) = vadd_f32(vmul_f32(vsub_f32(*(float32x2_t *)(a2 + 12), *(float32x2_t *)a2), (float32x2_t)0x3F0000003F000000), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0));
  a1[14] = v37;
  v38 = (float)(*(float *)a2 + *(float *)(a2 + 12)) * 0.5;
  v39 = (float)(*(float *)(a2 + 4) + *(float *)(a2 + 16)) * 0.5;
  v40 = (float)(*(float *)(a2 + 8) + *(float *)(a2 + 20)) * 0.5;
  a1[9] = v35 + (float)((float)((float)(v13 * v38) + (float)(v23 * v39)) + (float)(v29 * v40));
  v41 = v36 + (float)((float)((float)(v16 * v38) + (float)(v24 * v39)) + (float)(v30 * v40));
  result = (float)((float)((float)(v18 * v33) + (float)(v17 * v32)) + (float)(v19 * v34))
         + (float)((float)((float)(v20 * v38) + (float)(v25 * v39)) + (float)(v31 * v40));
  a1[10] = v41;
  a1[11] = result;
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v20;
  a1[3] = v23;
  a1[4] = v24;
  a1[5] = v25;
  a1[6] = v29;
  a1[7] = v30;
  a1[8] = v31;
  if ((a6 & 1) == 0)
    return physx::Cm::FastVertex2ShapeScaling::transformQueryBounds(a5, a1 + 9, a1 + 12, a1);
  return result;
}

float physx::Gu::computeVertexSpaceOBB(float32x4_t *a1, uint64_t a2, float *a3, float *a4, int8x16_t a5, int8x16_t a6, int32x4_t a7)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float32x4_t v90;
  float result;
  float v92;
  float v93[12];
  float32x4_t v94[3];
  uint64_t v95;
  float v96;

  v8 = 1.0 / *a4;
  v9 = 1.0 / a4[1];
  v10 = a4[3];
  v11 = 1.0 / a4[2];
  v12 = a3[4] * -2.0;
  *(float *)a7.i32 = a3[5] * -2.0;
  v13 = a3[6] * -2.0;
  v15 = a3[2];
  v14 = a3[3];
  v16 = (float)(v14 * v14) + -0.5;
  v17 = a3[1];
  v18 = (float)((float)(*(float *)a7.i32 * v17) + (float)(*a3 * v12)) + (float)(v15 * v13);
  v92 = (float)((float)(v12 * v16) - (float)((float)((float)(v17 * v13) - (float)(v15 * *(float *)a7.i32)) * v14))
      + (float)(*a3 * v18);
  *(float *)a6.i32 = (float)((float)(*(float *)a7.i32 * v16)
                           - (float)((float)((float)(v15 * v12) - (float)(*a3 * v13)) * v14))
                   + (float)(v17 * v18);
  *(float *)a7.i32 = (float)((float)(v13 * v16)
                           - (float)((float)((float)(*a3 * *(float *)a7.i32) - (float)(v17 * v12)) * v14))
                   + (float)(v15 * v18);
  v19 = (float)-*a3 - *a3;
  v20 = (float)-v17 - v17;
  v21 = (float)-v15 - v15;
  v22 = -(float)(v17 * v20);
  v23 = -(float)(v15 * v21);
  v24 = -(float)(v17 * v19);
  v25 = -(float)(v15 * v19);
  v26 = v14 * v19;
  v27 = -(float)(v15 * v20);
  v28 = v14 * v20;
  v29 = v14 * v21;
  v30 = (float)(1.0 - v22) - v23;
  v31 = v24 + v29;
  v32 = v25 - v28;
  v33 = v24 - v29;
  v34 = (float)(*a3 * v19) + 1.0;
  v35 = v34 - v23;
  v36 = v26 + v27;
  v37 = v25 + v28;
  v38 = v27 - v26;
  v39 = v34 - v22;
  v40 = a4[4];
  v41 = a4[5];
  v42 = v40 + v40;
  v43 = v41 + v41;
  v44 = v40 * (float)(v40 + v40);
  v45 = v41 * (float)(v41 + v41);
  v46 = (float)(v10 + v10) * v40;
  v47 = (float)(v10 + v10) * v41;
  v48 = a4[6];
  v49 = (float)(v10 + v10) * v48;
  v50 = v42 * v41;
  v51 = v42 * v48;
  v52 = v43 * v48;
  v53 = (float)(1.0 - v44) - v45;
  v54 = v46 + v52;
  v55 = v47 - v51;
  v56 = v46 - v52;
  v57 = 1.0 - (float)(v10 * (float)(v10 + v10));
  v58 = v57 - v45;
  v59 = v50 + v49;
  v60 = v47 + v51;
  v61 = v50 - v49;
  v62 = v57 - v44;
  v63 = v8 * v53;
  v64 = v8 * v56;
  v65 = v8 * v60;
  v66 = v9 * v54;
  v67 = v9 * v58;
  v68 = v9 * v61;
  *(float *)a5.i32 = v11 * v55;
  v69 = v53 * (float)(v8 * v53);
  v70 = (float)(v53 * (float)(v8 * v56)) + (float)(v54 * v67);
  v71 = v11 * v59;
  v72 = v11 * v62;
  v73 = (float)(v53 * v65) + (float)(v54 * v68);
  v74 = (float)(v55 * *(float *)a5.i32) + (float)(v69 + (float)(v54 * v66));
  v75 = (float)(v55 * v71) + v70;
  v76 = (float)(v55 * v72) + v73;
  v77 = (float)(v56 * v63) + (float)(v58 * v66);
  v78 = (float)(v56 * v64) + (float)(v58 * v67);
  v79 = (float)(v56 * v65) + (float)(v58 * v68);
  v80 = (float)(v59 * *(float *)a5.i32) + v77;
  v81 = (float)(v59 * v71) + v78;
  v82 = (float)(v59 * v72) + v79;
  v83 = v60 * v63;
  v84 = v61 * v66;
  v85 = (float)(v60 * v64) + (float)(v61 * v67);
  v86 = (float)(v60 * v65) + (float)(v61 * v68);
  v87 = (float)(v62 * *(float *)a5.i32) + (float)(v83 + v84);
  v88 = (float)(v62 * v71) + v85;
  v89 = (float)(v62 * v72) + v86;
  v93[0] = (float)(v87 * v32) + (float)((float)(v74 * v30) + (float)(v80 * v31));
  v93[1] = (float)(v88 * v32) + (float)((float)(v75 * v30) + (float)(v81 * v31));
  v93[2] = (float)(v89 * v32) + (float)((float)(v76 * v30) + (float)(v82 * v31));
  v93[3] = (float)(v87 * v36) + (float)((float)(v74 * v33) + (float)(v80 * v35));
  v93[4] = (float)(v88 * v36) + (float)((float)(v75 * v33) + (float)(v81 * v35));
  v93[5] = (float)(v89 * v36) + (float)((float)(v76 * v33) + (float)(v82 * v35));
  v93[6] = (float)(v87 * v39) + (float)((float)(v74 * v37) + (float)(v80 * v38));
  v93[7] = (float)(v88 * v39) + (float)((float)(v75 * v37) + (float)(v81 * v38));
  v93[8] = (float)(v89 * v39) + (float)((float)(v76 * v37) + (float)(v82 * v38));
  v93[9] = (float)(v87 * *(float *)a7.i32) + (float)((float)(v80 * *(float *)a6.i32) + (float)(v74 * v92));
  *(float *)a5.i32 = v88 * *(float *)a7.i32;
  *(float *)a7.i32 = v89 * *(float *)a7.i32;
  *(float *)a5.i32 = *(float *)a5.i32 + (float)((float)(v81 * *(float *)a6.i32) + (float)(v75 * v92));
  *(float *)a6.i32 = *(float *)a7.i32 + (float)((float)(v82 * *(float *)a6.i32) + (float)(v76 * v92));
  v93[10] = *(float *)a5.i32;
  v93[11] = *(float *)a6.i32;
  physx::transform((uint64_t)v93, a2, v94, a5, a6, a7);
  v90 = v94[1];
  *a1 = v94[0];
  a1[1] = v90;
  a1[2] = v94[2];
  a1[3].i64[0] = v95;
  result = v96;
  a1[3].f32[2] = v96;
  return result;
}

float physx::transform@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>, int8x16_t a4@<Q0>, int8x16_t a5@<Q1>, int32x4_t a6@<Q2>)
{
  int32x4_t v6;
  int32x4_t v7;
  int8x16_t v8;
  float32x2_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  unsigned __int32 v31;
  float32x4_t v32;
  float result;
  uint64_t v34;
  float v35;

  a6.i64[0] = *(_QWORD *)a2;
  v10 = *(float32x2_t *)(a2 + 8);
  v11 = *(float32x2_t *)(a2 + 4);
  a5.i32[0] = *(_DWORD *)a1;
  a4.i64[0] = *(_QWORD *)(a1 + 4);
  v12.i64[0] = *(_QWORD *)(a1 + 12);
  v13 = *(float32x2_t *)(a2 + 48);
  a6.i32[1] = *(_DWORD *)(a2 + 12);
  *(float32x2_t *)a6.i8 = vmul_f32(v13, *(float32x2_t *)a6.i8);
  v14 = (float32x4_t)vzip1q_s32(a6, a6);
  v14.i32[2] = a6.i32[0];
  v11.i32[1] = *(_DWORD *)(a2 + 16);
  *(float32x2_t *)v6.i8 = vmul_f32(v13, v11);
  v15 = (float32x4_t)vzip1q_s32(v6, v6);
  v15.i32[2] = v6.i32[0];
  v10.i32[1] = *(_DWORD *)(a2 + 20);
  *(float32x2_t *)v7.i8 = vmul_f32(v13, v10);
  v16 = (float32x4_t)vzip1q_s32(v7, v7);
  v16.i32[2] = v7.i32[0];
  v17 = (float32x4_t)vextq_s8(vextq_s8(a5, a5, 4uLL), a4, 0xCuLL);
  v17.i32[3] = v17.i32[0];
  v18 = vmulq_f32(v17, v14);
  v14.i32[0] = *(_DWORD *)(a2 + 56);
  v19 = *(int32x4_t *)(a2 + 24);
  v17.f32[0] = v14.f32[0] * *(float *)(a2 + 28);
  v20.i64[0] = a4.i64[0];
  v20.i32[2] = *(_DWORD *)a1;
  v20.i32[3] = a4.i32[0];
  v6.i32[0] = vdup_lane_s32(*(int32x2_t *)v6.i8, 1).u32[0];
  *(float *)&v6.i32[1] = v17.f32[0];
  v7.i32[0] = vdup_lane_s32(*(int32x2_t *)v7.i8, 1).u32[0];
  *(float *)&v7.i32[1] = v14.f32[0] * *(float *)(a2 + 32);
  v21 = (float32x4_t)vzip1q_s32(v6, v6);
  v22 = (float32x4_t)vzip1q_s32(v7, v7);
  v7.i32[0] = *(_DWORD *)(a2 + 40);
  *(float32x2_t *)v8.i8 = vmul_n_f32(*(float32x2_t *)v12.f32, *(float *)v7.i32);
  v23 = *(float32x4_t *)(a1 + 20);
  *(int32x2_t *)v24.f32 = vzip1_s32(vdup_lane_s32(*(int32x2_t *)v12.f32, 1), *(int32x2_t *)v23.f32);
  v24.i64[1] = __PAIR64__(v24.u32[0], v12.u32[0]);
  v12.i64[1] = __PAIR64__(v12.u32[0], v23.u32[0]);
  v25 = vaddq_f32(v18, vmulq_f32(v12, v15));
  v26 = (float32x4_t)vextq_s8((int8x16_t)v23, a4, 4uLL);
  v26.i32[3] = v26.i32[0];
  v18.i64[0] = *(_QWORD *)(a1 + 40);
  v27 = vaddq_f32(v25, vmulq_f32(v26, v16));
  v26.f32[0] = vmuls_lane_f32(*(float *)&v7.i32[1], v23, 3);
  v19.i32[1] = *(_DWORD *)(a2 + 36);
  v17.i32[1] = *(_DWORD *)(a2 + 44);
  v26.i32[1] = *(_DWORD *)(a1 + 36);
  v14.i32[1] = *(_DWORD *)a1;
  v14.i64[1] = a4.i64[0];
  v28 = vmulq_f32(v14, (float32x4_t)vzip1q_s32(v19, vdupq_lane_s32(*(int32x2_t *)v19.i8, 1)));
  *(int32x2_t *)a6.i8 = vzip1_s32(vdup_lane_s32(*(int32x2_t *)a6.i8, 1), *(int32x2_t *)v28.f32);
  v29 = (float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)vuzp2q_s32((int32x4_t)v23, (int32x4_t)v23), 8uLL);
  v29.i32[3] = v29.i32[0];
  *a3 = v27;
  a3[1] = vaddq_f32(vaddq_f32(vmulq_f32(v20, (float32x4_t)vzip1q_s32(a6, a6)), vmulq_f32(v24, v21)), vmulq_f32(v29, v22));
  *(int32x2_t *)a4.i8 = vdup_lane_s32(*(int32x2_t *)a4.i8, 1);
  v30 = (float32x4_t)vextq_s8(a4, v8, 0xCuLL);
  v30.f32[3] = *(float *)v7.i32 * v23.f32[0];
  v31 = vmulq_f32((float32x4_t)a4, v28).u32[0];
  v32 = vaddq_f32(v30, v28);
  v32.i32[0] = v31;
  v26.i64[1] = v18.i64[0];
  a3[2] = vaddq_f32(v26, vaddq_f32(v32, vmulq_f32(v23, (float32x4_t)vzip1q_s32((int32x4_t)v17, vdupq_lane_s32(*(int32x2_t *)v17.f32, 1)))));
  physx::shdfnd::optimizeBoundingBox(a3->f32, (float *)&v34);
  a3[3].i64[0] = v34;
  result = v35;
  a3[3].f32[2] = v35;
  return result;
}

float *physx::Gu::computeOBBAroundConvex(float *result, float *a2, float *a3, float *a4)
{
  float *v4;
  float v5;
  float v6;
  float v7;
  BOOL v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  int v110;
  uint64_t v111;
  __int128 v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  int v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  float v150[8];
  uint64_t v151;
  int v152;

  v4 = result;
  v6 = a2[1];
  v5 = a2[2];
  v7 = a2[3];
  v9 = v6 == 1.0 && v5 == 1.0 && v7 == 1.0;
  v10 = *a4;
  v11 = a4[1];
  if (v9)
  {
    v113 = a4[2];
    v114 = a4[3];
    v115 = v11 + v11;
    v116 = v113 + v113;
    v117 = v11 * (float)(v11 + v11);
    v118 = v113 * (float)(v113 + v113);
    v119 = (float)(v10 + v10) * v11;
    v120 = (float)(v10 + v10) * v113;
    v121 = (float)(v10 + v10) * v114;
    v122 = v115 * v113;
    v123 = v115 * v114;
    v124 = v116 * v114;
    v125 = (float)(1.0 - v117) - v118;
    v126 = v119 + v124;
    v127 = v120 - v123;
    v128 = v119 - v124;
    v129 = 1.0 - (float)(v10 * (float)(v10 + v10));
    v130 = v129 - v118;
    v131 = v122 + v121;
    v132 = v120 + v123;
    v133 = v122 - v121;
    v134 = v129 - v117;
    v135 = a3[8];
    v136 = a3[9];
    v137 = v135 * v125;
    v138 = v128 * v136;
    v139 = (float)(v135 * v126) + (float)(v130 * v136);
    v140 = (float)(v135 * v127) + (float)(v131 * v136);
    v141 = a3[10];
    v142 = (float)(v137 + v138) + (float)(v132 * v141);
    v143 = a4[4];
    v144 = a4[5];
    v145 = (float)(v140 + (float)(v134 * v141)) + a4[6];
    v146 = *((_DWORD *)a3 + 13);
    result[2] = v127;
    result[5] = v131;
    result[8] = v134;
    result[11] = v145;
    v147 = *(_QWORD *)(a3 + 11);
    *result = v125;
    result[1] = v126;
    result[3] = v128;
    result[4] = v130;
    result[6] = v132;
    result[7] = v133;
    result[9] = v143 + v142;
    result[10] = (float)(v139 + (float)(v133 * v141)) + v144;
    *((_QWORD *)result + 6) = v147;
    *((_DWORD *)result + 14) = v146;
  }
  else
  {
    v12 = v11 + v11;
    v13 = a4[2];
    v14 = a4[3];
    v15 = v11 * (float)(v11 + v11);
    v16 = v13 * (float)(v13 + v13);
    v17 = (float)(v10 + v10) * v11;
    v18 = (float)(v10 + v10) * v13;
    v19 = (float)(v10 + v10) * v14;
    v20 = v12 * v13;
    v21 = v12 * v14;
    v22 = (float)(v13 + v13) * v14;
    v23 = (float)(1.0 - v15) - v16;
    v24 = v17 + v22;
    v25 = v18 - v21;
    v26 = v17 - v22;
    v27 = 1.0 - (float)(v10 * (float)(v10 + v10));
    v28 = v27 - v16;
    v29 = v20 + v19;
    v30 = v18 + v21;
    v31 = v20 - v19;
    v32 = v27 - v15;
    v33 = a2[4];
    v34 = a2[5];
    v35 = a2[6];
    v36 = a2[7];
    v37 = v34 + v34;
    v38 = v35 + v35;
    v39 = v34 * (float)(v34 + v34);
    v40 = v35 * (float)(v35 + v35);
    v41 = (float)(v33 + v33) * v34;
    v42 = (float)(v33 + v33) * v35;
    v43 = (float)(v33 + v33) * v36;
    v44 = v37 * v35;
    v45 = v37 * v36;
    v46 = v38 * v36;
    v47 = (float)(1.0 - v39) - v40;
    v48 = v41 + v46;
    v49 = v42 - v45;
    v50 = v41 - v46;
    v51 = 1.0 - (float)(v33 * (float)(v33 + v33));
    v52 = v51 - v40;
    v53 = v44 + v43;
    v54 = v42 + v45;
    v55 = v44 - v43;
    v56 = v51 - v39;
    v57 = v6 * v47;
    v58 = v6 * v50;
    v59 = v6 * v54;
    v60 = v5 * v48;
    v61 = v5 * v52;
    v62 = v5 * v55;
    v63 = v7 * v49;
    v64 = v7 * v53;
    v65 = v7 * v56;
    v66 = (float)(v47 * v57) + (float)(v48 * v60);
    v67 = (float)(v47 * v58) + (float)(v48 * v61);
    v68 = (float)(v47 * v59) + (float)(v48 * v62);
    v69 = (float)(v49 * v63) + v66;
    v70 = (float)(v49 * v64) + v67;
    v71 = (float)(v49 * v65) + v68;
    v72 = (float)(v50 * v57) + (float)(v52 * v60);
    v73 = (float)(v50 * v58) + (float)(v52 * v61);
    v74 = (float)(v50 * v59) + (float)(v52 * v62);
    v75 = (float)(v53 * v63) + v72;
    v76 = (float)(v53 * v64) + v73;
    v77 = (float)(v53 * v65) + v74;
    v78 = v54 * v57;
    v79 = v54 * v58;
    v80 = (float)(v54 * v59) + (float)(v55 * v62);
    v81 = (float)(v56 * v63) + (float)(v78 + (float)(v55 * v60));
    v82 = (float)(v56 * v64) + (float)(v79 + (float)(v55 * v61));
    v83 = (float)(v56 * v65) + v80;
    v84 = (float)(v30 * v71) + (float)((float)(v23 * v69) + (float)(v26 * v70));
    v85 = (float)(v31 * v71) + (float)((float)(v24 * v69) + (float)(v28 * v70));
    v86 = (float)(v32 * v71) + (float)((float)(v25 * v69) + (float)(v29 * v70));
    v87 = (float)(v30 * v77) + (float)((float)(v23 * v75) + (float)(v26 * v76));
    v88 = (float)(v31 * v77) + (float)((float)(v24 * v75) + (float)(v28 * v76));
    v89 = (float)(v32 * v77) + (float)((float)(v25 * v75) + (float)(v29 * v76));
    v90 = (float)(v23 * v81) + (float)(v26 * v82);
    v91 = v32 * v83;
    v92 = (float)(v30 * v83) + v90;
    v93 = (float)(v31 * v83) + (float)((float)(v24 * v81) + (float)(v28 * v82));
    v94 = v91 + (float)((float)(v25 * v81) + (float)(v29 * v82));
    v95 = a3[11];
    v96 = a3[12];
    v97 = a3[13];
    v98 = v95 * 0.0;
    *(float *)&v148 = (float)(v98 * v92) + (float)((float)(v95 * v84) + (float)(v98 * v87));
    *((float *)&v148 + 1) = (float)(v98 * v93) + (float)((float)(v95 * v85) + (float)(v98 * v88));
    *((float *)&v148 + 2) = (float)((float)(v95 * 0.0) * v94)
                          + (float)((float)(v95 * v86) + (float)((float)(v95 * 0.0) * v89));
    *((float *)&v148 + 3) = (float)((float)(v96 * 0.0) * v92)
                          + (float)((float)((float)(v96 * 0.0) * v84) + (float)(v96 * v87));
    *(float *)&v149 = (float)((float)(v96 * 0.0) * v93)
                    + (float)((float)((float)(v96 * 0.0) * v85) + (float)(v96 * v88));
    *((float *)&v149 + 1) = (float)((float)(v96 * 0.0) * v94)
                          + (float)((float)((float)(v96 * 0.0) * v86) + (float)(v96 * v89));
    v99 = (float)(v97 * v94) + (float)((float)((float)(v97 * 0.0) * v86) + (float)((float)(v97 * 0.0) * v89));
    *((float *)&v149 + 2) = (float)(v97 * v92)
                          + (float)((float)((float)(v97 * 0.0) * v84) + (float)((float)(v97 * 0.0) * v87));
    *((float *)&v149 + 3) = (float)(v97 * v93)
                          + (float)((float)((float)(v97 * 0.0) * v85) + (float)((float)(v97 * 0.0) * v88));
    v100 = a3[8];
    v101 = a3[9];
    v102 = v100 * v84;
    v103 = (float)(v100 * v85) + (float)(v101 * v88);
    v104 = a3[10];
    v105 = (float)(v100 * v86) + (float)(v101 * v89);
    v106 = (float)(v104 * v92) + (float)(v102 + (float)(v101 * v87));
    v107 = a4[4];
    v108 = a4[5];
    v150[0] = v99;
    v150[1] = v107 + v106;
    v109 = a4[6] + (float)((float)(v104 * v94) + v105);
    v150[2] = v108 + (float)((float)(v104 * v93) + v103);
    v150[3] = v109;
    result = physx::shdfnd::optimizeBoundingBox((float *)&v148, (float *)&v151);
    v110 = v152;
    v111 = v151;
    v112 = v149;
    *(_OWORD *)v4 = v148;
    *((_OWORD *)v4 + 1) = v112;
    *((_OWORD *)v4 + 2) = *(_OWORD *)v150;
    *((_QWORD *)v4 + 6) = v111;
    *((_DWORD *)v4 + 14) = v110;
  }
  return result;
}

_DWORD *physx::localSearch(_DWORD *result, float *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  unsigned __int16 *v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  int v20;
  float *v21;
  float v22;
  BOOL v23;
  __int128 v24;

  v4 = *(_QWORD *)(a4 + 24);
  v5 = *(_QWORD *)(a4 + 32);
  v6 = *result;
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = (float)((float)(v8 * *(float *)(a3 + 12 * v6 + 4))
              + (float)(*a2 * *(float *)(a3 + 12 * v6)))
      + (float)(v9 * *(float *)(a3 + 12 * v6 + 8));
  do
  {
    v11 = (unsigned __int16 *)(v4 + 4 * v6);
    v12 = *v11;
    v13 = v11[1];
    *result = v6;
    if (!v12)
      break;
    v14 = (unsigned __int8 *)(v5 + v13);
    v15 = v6;
    do
    {
      v17 = *v14++;
      v16 = v17;
      v18 = (unint64_t)v17 >> 5;
      v19 = *((_DWORD *)&v24 + v18);
      v20 = 1 << v17;
      if (((1 << v17) & v19) == 0)
      {
        *((_DWORD *)&v24 + v18) = v20 | v19;
        v21 = (float *)(a3 + 12 * v16);
        v22 = v21[2];
        if ((float)((float)((float)(v8 * v21[1]) + (float)(v7 * *v21)) + (float)(v9 * v22)) <= v10)
        {
          v15 = v15;
        }
        else
        {
          v10 = (float)((float)(v8 * v21[1]) + (float)(v7 * *v21)) + (float)(v9 * v22);
          v15 = v16;
        }
      }
      --v12;
    }
    while ((_WORD)v12);
    v23 = (_DWORD)v15 == (_DWORD)v6;
    v6 = v15;
  }
  while (!v23);
  return result;
}

uint64_t physx::Gu::getPolygonalData_Convex(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  unsigned int v8;
  __int16 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v3 = *(float *)(a2 + 24);
  v4 = *(float *)(a2 + 28);
  v5 = *(float *)(a2 + 32);
  v6 = (float)((float)(v3 * *(float *)(a3 + 8)) + (float)(v4 * *(float *)(a3 + 20))) + (float)(v5 * *(float *)(a3 + 32));
  *(float32x2_t *)result = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a3, v3), vmul_n_f32(*(float32x2_t *)(a3 + 12), v4)), vmul_n_f32(*(float32x2_t *)(a3 + 24), v5));
  *(float *)(result + 8) = v6;
  v7 = *(unsigned __int8 *)(a2 + 38);
  v8 = *(unsigned __int8 *)(a2 + 39);
  *(_DWORD *)(result + 12) = v7;
  *(_DWORD *)(result + 16) = v8;
  v9 = *(_WORD *)(a2 + 36);
  v10 = v9;
  v11 = v9 & 0x7FFF;
  *(_DWORD *)(result + 20) = v11;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = v12 + 20 * v8;
  *(_QWORD *)(result + 24) = v12;
  *(_QWORD *)(result + 32) = v13;
  v14 = v13 + 12 * v7;
  v15 = v14 + 2 * v11;
  v16 = 3 * v7;
  v17 = 4 * v11;
  if (v10 >= 0)
    v17 = 0;
  *(_QWORD *)(result + 40) = v15 + v16 + v17;
  *(_QWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a2 + 48))
    v18 = HullProjectionCB_BigConvex;
  else
    v18 = HullProjectionCB_SmallConvex;
  *(_QWORD *)(result + 88) = v18;
  *(_QWORD *)(result + 96) = SelectClosestEdgeCB_Convex;
  return result;
}

float HullProjectionCB_SmallConvex(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6)
{
  float v6;
  float v7;
  float v8;
  int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float result;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = *(_DWORD *)(a1 + 12);
  if (v9)
  {
    v10 = (float)((float)(a3[1] * v7) + (float)(*a3 * v6)) + (float)(a3[2] * v8);
    v11 = (float)((float)(v7 * a3[4]) + (float)(a3[3] * v6)) + (float)(a3[5] * v8);
    v12 = (float)((float)(v7 * a3[7]) + (float)(a3[6] * v6)) + (float)(a3[8] * v8);
    v13 = v12 * a4[7];
    v14 = v12 * a4[8];
    v15 = (float)((float)(v10 * *a4) + (float)(v11 * a4[3])) + (float)(v12 * a4[6]);
    v16 = (float)((float)(v10 * a4[1]) + (float)(v11 * a4[4])) + v13;
    v17 = (float)((float)(v10 * a4[2]) + (float)(v11 * a4[5])) + v14;
    v18 = *(float **)(a1 + 32);
    v19 = -3.4028e38;
    v20 = 3.4028e38;
    do
    {
      v21 = (float)((float)(v16 * v18[1]) + (float)(*v18 * v15)) + (float)(v18[2] * v17);
      if (v20 >= v21)
        v20 = (float)((float)(v16 * v18[1]) + (float)(*v18 * v15)) + (float)(v18[2] * v17);
      if (v19 <= v21)
        v19 = (float)((float)(v16 * v18[1]) + (float)(*v18 * v15)) + (float)(v18[2] * v17);
      v18 += 3;
      --v9;
    }
    while (v9);
  }
  else
  {
    v20 = 3.4028e38;
    v19 = -3.4028e38;
  }
  v22 = (float)((float)(v7 * a3[10]) + (float)(a3[9] * v6)) + (float)(a3[11] * v8);
  *a5 = v20 + v22;
  result = v19 + v22;
  *a6 = result;
  return result;
}

float HullProjectionCB_BigConvex(uint64_t a1, float *a2, float *a3, uint64_t a4, float *a5, float *a6)
{
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unsigned __int16 *v17;
  int v18;
  float v19;
  float32x2_t v20;
  float v21;
  float v22;
  BOOL v23;
  _BOOL4 v24;
  int v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  unsigned int v31;
  int v32;
  unsigned __int8 *v33;
  unsigned int v34;
  float v35;
  float result;
  float32x2_t v37;
  float v38;
  float v39;
  float v40;
  unsigned int v41;
  unsigned int v42;
  float32x2_t v43;
  float v44;

  v9 = *(_QWORD *)(a1 + 32);
  v10 = *a2;
  v11 = a2[1];
  v12 = a2[2];
  v13 = (float)((float)(a3[1] * v11) + (float)(*a3 * *a2)) + (float)(a3[2] * v12);
  v14 = (float)((float)(v11 * a3[4]) + (float)(a3[3] * *a2)) + (float)(a3[5] * v12);
  v15 = (float)((float)(v11 * a3[7]) + (float)(a3[6] * *a2)) + (float)(a3[8] * v12);
  v16 = (float)((float)(v13 * *(float *)(a4 + 8)) + (float)(v14 * *(float *)(a4 + 20)))
      + (float)(v15 * *(float *)(a4 + 32));
  v20 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a4, v13), vmul_n_f32(*(float32x2_t *)(a4 + 12), v14)), vmul_n_f32(*(float32x2_t *)(a4 + 24), v15));
  v37 = v20;
  v43 = v20;
  v44 = v16;
  v17 = *(unsigned __int16 **)(a1 + 80);
  v18 = *v17;
  v19 = -v20.f32[0];
  v38 = -v20.f32[0];
  v39 = -v20.f32[1];
  v40 = -v16;
  v20.f32[0] = fabsf(v20.f32[0]);
  v21 = fabsf(v20.f32[1]);
  v22 = fabsf(v16);
  v23 = v21 > v20.f32[0];
  v24 = v22 > v20.f32[0];
  if (v22 > v20.f32[0])
    v20.f32[0] = v22;
  v25 = 2 * v24;
  if (v23 && v21 > v22)
  {
    v26 = 1;
  }
  else
  {
    v21 = v20.f32[0];
    v26 = v25;
  }
  v27 = 1.0 / v21;
  v28 = (float)(v18 - 1) * 0.5;
  v29 = v28 * (float)((float)(v27 * *(&v38 + (((_BYTE)v26 + (v26 >> 1) + 1) & 3))) + 1.0);
  v30 = v28
      * (float)((float)(v27
                      * *(&v38
                        + (((_BYTE)v26
                          + (v26 >> 1)
                          + 1
                          + (((v26 + (v26 >> 1) + 1) & 3) >> 1)
                          + 1) & 3)))
              + 1.0);
  v31 = v30;
  if ((float)(v30 - (float)v30) > 0.5)
    ++v31;
  v32 = v29 + (__PAIR64__(v26, *((_DWORD *)&v38 + v26)) >> 31) * v18;
  if ((float)(v29 - (float)v29) > 0.5)
    ++v32;
  v33 = (unsigned __int8 *)(*((_QWORD *)v17 + 1) + v31 + v32 * v18);
  v34 = *v33;
  v41 = v33[v17[1]];
  v42 = v34;
  v38 = v19;
  v39 = -v20.f32[1];
  v40 = -v16;
  physx::localSearch(&v42, &v38, v9, (uint64_t)v17);
  physx::localSearch(&v41, (float *)&v43, v9, (uint64_t)v17);
  v35 = (float)((float)(v11 * a3[10]) + (float)(a3[9] * v10)) + (float)(a3[11] * v12);
  *a5 = v35
      + (float)(vmlas_n_f32(vmuls_lane_f32(*(float *)(v9 + 12 * v42 + 4), v37, 1), *(float *)(v9 + 12 * v42), v37.f32[0])+ (float)(*(float *)(v9 + 12 * v42 + 8) * v16));
  result = v35
         + (float)(vmlas_n_f32(vmuls_lane_f32(*(float *)(v9 + 12 * v41 + 4), v37, 1), *(float *)(v9 + 12 * v41), v37.f32[0])+ (float)(*(float *)(v9 + 12 * v41 + 8) * v16));
  *a6 = result;
  return result;
}

uint64_t SelectClosestEdgeCB_Convex(uint64_t a1, float *a2, float *a3)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  uint64_t v11;
  float v12;
  uint64_t result;
  float *v14;
  uint64_t i;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  int v23;
  unsigned int v24;
  float *v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  BOOL v32;
  float v33;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned int v37;

  v4 = a3[1];
  v5 = a3[2];
  v6 = v5 * a2[8];
  v7 = (float)((float)(*a3 * *a2) + (float)(v4 * a2[3])) + (float)(v5 * a2[6]);
  v8 = (float)((float)(*a3 * a2[1]) + (float)(v4 * a2[4])) + (float)(v5 * a2[7]);
  v9 = (float)((float)(*a3 * a2[2]) + (float)(v4 * a2[5])) + v6;
  v10 = *(float **)(a1 + 24);
  v11 = *(unsigned int *)(a1 + 16);
  v12 = (float)((float)(v8 * v10[1]) + (float)(*v10 * v7)) + (float)(v10[2] * v9);
  if (v11 < 2)
  {
    result = 0;
  }
  else
  {
    LODWORD(result) = 0;
    v14 = v10 + 7;
    for (i = 1; i != v11; ++i)
    {
      v16 = (float)(v8 * *(v14 - 1)) + (float)(*(v14 - 2) * v7);
      v17 = *v14;
      v14 += 5;
      v18 = v16 + (float)(v17 * v9);
      if (v18 <= v12)
      {
        result = result;
      }
      else
      {
        v12 = v18;
        result = i;
      }
    }
  }
  v19 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v19)
  {
    v20 = 0;
    v21 = *(_QWORD *)(a1 + 48);
    v22 = v12 * v12;
    v23 = -1;
    v24 = 1;
    do
    {
      v25 = &v10[5 * *(unsigned __int8 *)(v21 + v24 - 1)];
      v26 = &v10[5 * *(unsigned __int8 *)(v21 + v24)];
      v27 = *v25 + *v26;
      v28 = v25[1] + v26[1];
      v29 = v25[2] + v26[2];
      v30 = (float)((float)(v28 * v28) + (float)(v27 * v27)) + (float)(v29 * v29);
      v31 = (float)((float)(v8 * v28) + (float)(v27 * v7)) + (float)(v29 * v9);
      v32 = v31 < 0.0;
      v33 = v31 * v31;
      if (!v32 && v33 > (float)(v22 * v30))
      {
        v23 = v20;
        v22 = v33 / v30;
      }
      ++v20;
      v24 += 2;
    }
    while (v19 != v20);
    if (v23 != -1)
    {
      v35 = (unsigned __int8 *)(v21 + (2 * v23));
      v36 = *v35;
      v37 = v35[1];
      if ((float)((float)((float)(v8 * v10[5 * v36 + 1]) + (float)(v10[5 * v36] * v7)) + (float)(v10[5 * v36 + 2] * v9)) <= (float)((float)((float)(v8 * v10[5 * v37 + 1]) + (float)(v10[5 * v37] * v7)) + (float)(v10[5 * v37 + 2] * v9)))
        return v37;
      else
        return v36;
    }
  }
  return result;
}

float physx::Gu::PolygonalBox::PolygonalBox(uint64_t a1, uint64_t a2, double a3, int32x4_t a4)
{
  uint64_t v4;
  float v5;
  int32x4_t v6;
  int32x4_t v7;
  _BYTE *v8;
  float result;

  v4 = 0;
  *(_QWORD *)a1 = a2;
  v5 = *(float *)a2;
  *(float *)a4.i32 = -*(float *)a2;
  *(_DWORD *)(a1 + 8) = a4.i32[0];
  *(float *)(a1 + 20) = v5;
  *(float *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = a4.i32[0];
  *(_DWORD *)(a1 + 56) = a4.i32[0];
  *(float *)(a1 + 68) = v5;
  *(_DWORD *)(a1 + 92) = a4.i32[0];
  a4.i64[0] = *(_QWORD *)(a2 + 4);
  *(float *)(a1 + 12) = -*(float *)a4.i32;
  *(float *)(a1 + 16) = -*(float *)&a4.i32[1];
  *(float *)(a1 + 24) = -*(float *)a4.i32;
  *(float *)(a1 + 28) = -*(float *)&a4.i32[1];
  *(_DWORD *)(a1 + 36) = a4.i32[0];
  *(float *)(a1 + 40) = -*(float *)&a4.i32[1];
  *(_DWORD *)(a1 + 48) = a4.i32[0];
  *(float *)(a1 + 52) = -*(float *)&a4.i32[1];
  *(float *)(a1 + 60) = -*(float *)a4.i32;
  *(_DWORD *)(a1 + 64) = a4.i32[1];
  *(float *)(a1 + 72) = -*(float *)a4.i32;
  v6 = vuzp2q_s32(a4, vzip1q_s32(a4, a4));
  v7 = v6;
  *(float *)&v7.i32[1] = v5;
  v7.i32[3] = v6.i32[0];
  *(int32x4_t *)(a1 + 76) = v7;
  *(_QWORD *)(a1 + 96) = a4.i64[0];
  v8 = (_BYTE *)(a1 + 122);
  do
  {
    *v8 = 4;
    *((_WORD *)v8 - 1) = 4 * v4++;
    v8 += 20;
  }
  while (v4 != 6);
  *(_QWORD *)(a1 + 124) = 1065353216;
  *(_DWORD *)(a1 + 132) = 0;
  *(float *)(a1 + 136) = -*(float *)a2;
  *(_QWORD *)(a1 + 164) = 3212836864;
  *(_DWORD *)(a1 + 172) = 0;
  *(float *)(a1 + 176) = -*(float *)a2;
  *(_BYTE *)(a1 + 143) = 0;
  *(_BYTE *)(a1 + 183) = 1;
  *(_QWORD *)(a1 + 184) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 192) = 0;
  *(float *)(a1 + 196) = -*(float *)(a2 + 4);
  *(_QWORD *)(a1 + 204) = 0xBF80000000000000;
  *(_DWORD *)(a1 + 212) = 0;
  *(float *)(a1 + 216) = -*(float *)(a2 + 4);
  *(_BYTE *)(a1 + 203) = 0;
  *(_BYTE *)(a1 + 223) = 2;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(float *)(a1 + 156) = -*(float *)(a2 + 8);
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = -1082130432;
  result = -*(float *)(a2 + 8);
  *(float *)(a1 + 116) = result;
  *(_BYTE *)(a1 + 163) = 0;
  *(_BYTE *)(a1 + 123) = 4;
  return result;
}

float HullProjectionCB_Box(uint64_t a1, float *a2, float *a3, uint64_t a4, float *a5, float *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float result;

  v6 = a2[1];
  v7 = a2[2];
  v8 = (float)((float)(a3[1] * v6) + (float)(*a3 * *a2)) + (float)(a3[2] * v7);
  v9 = (float)((float)(v6 * a3[4]) + (float)(a3[3] * *a2)) + (float)(a3[5] * v7);
  v10 = (float)((float)(v6 * a3[7]) + (float)(a3[6] * *a2)) + (float)(a3[8] * v7);
  v11 = *(float **)(a1 + 80);
  v12 = *v11;
  v13 = v11[1];
  if (v8 < 0.0)
    v12 = -*v11;
  if (v9 < 0.0)
    v13 = -v13;
  v14 = v11[2];
  if (v10 < 0.0)
    v14 = -v14;
  v15 = (float)((float)(v6 * a3[10]) + (float)(a3[9] * *a2)) + (float)(a3[11] * v7);
  v16 = (float)((float)(v9 * v13) + (float)(v12 * v8)) + (float)(v14 * v10);
  *a6 = v16 + v15;
  result = v15 - v16;
  *a5 = result;
  return result;
}

uint64_t SelectClosestEdgeCB_Box(uint64_t result, uint64_t a2, float *a3)
{
  uint64_t v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float *v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  uint64_t v15;
  unsigned int v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;

  v3 = result;
  LODWORD(result) = 0;
  v4 = *(float **)(v3 + 24);
  v5 = *a3;
  v6 = a3[1];
  v7 = a3[2];
  v8 = (float)((float)(v4[1] * v6) + (float)(*v4 * *a3)) + (float)(v4[2] * v7);
  v9 = v4 + 7;
  v10 = -5;
  do
  {
    v11 = (float)(v6 * *(v9 - 1)) + (float)(*(v9 - 2) * v5);
    v12 = *v9;
    v9 += 5;
    v13 = v11 + (float)(v12 * v7);
    if (v13 <= v8)
    {
      result = result;
    }
    else
    {
      v8 = v13;
      result = (v10 + 6);
    }
  }
  while (!__CFADD__(v10++, 1));
  v15 = 0;
  v16 = -1;
  v17 = (float *)&dword_2261A9D00;
  do
  {
    v18 = (float)(v6 * *(v17 - 1)) + (float)(*(v17 - 2) * v5);
    v19 = *v17;
    v17 += 3;
    v20 = v18 + (float)(v19 * v7);
    if (v20 > v8)
    {
      v8 = v20;
      v16 = v15;
    }
    ++v15;
  }
  while (v15 != 12);
  if (v16 != -1)
  {
    v21 = gPxcBoxEdgeDesc[2 * v16 + 1];
    v22 = gPxcBoxFaceByEdge[v21];
    v23 = gPxcBoxFaceByEdge[(v21 + 1)];
    if ((float)((float)((float)(v6 * v4[5 * v22 + 1]) + (float)(v4[5 * v22] * v5)) + (float)(v4[5 * v22 + 2] * v7)) <= (float)((float)((float)(v6 * v4[5 * v23 + 1]) + (float)(v4[5 * v23] * v5)) + (float)(v4[5 * v23 + 2] * v7)))
      return v23;
    else
      return v22;
  }
  return result;
}

float *physx::Gu::distancePointBoxSquared(float *result, float *a2, uint64_t a3, float *a4, uint64_t a5)
{
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;

  v5 = 0;
  v11 = (float)((float)((float)(result[1] - a2[1]) * a4[7]) + (float)(a4[6] * (float)(*result - *a2)))
      + (float)(a4[8] * (float)(result[2] - a2[2]));
  v6 = 0.0;
  do
  {
    v7 = *(float *)((char *)&v10 + v5);
    v8 = *(float *)(a3 + v5);
    v9 = -v8;
    if (v7 >= (float)-v8)
    {
      if (v7 <= v8)
        goto LABEL_7;
      v6 = v6 + (float)((float)(v7 - v8) * (float)(v7 - v8));
      v9 = *(float *)(a3 + v5);
    }
    else
    {
      v6 = v6 + (float)((float)(v7 + v8) * (float)(v7 + v8));
    }
    *(float *)((char *)&v10 + v5) = v9;
LABEL_7:
    v5 += 4;
  }
  while (v5 != 12);
  if (a5)
  {
    *(_QWORD *)a5 = v10;
    *(float *)(a5 + 8) = v11;
  }
  return result;
}

float *physx::Gu::closestPtPointTriangle@<X0>(float *result@<X0>, float *a2@<X1>, float32x2_t *a3@<X2>, float32x2_t *a4@<X3>, float *a5@<X4>, float *a6@<X5>, uint64_t a7@<X8>)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;

  v7 = a3->f32[1];
  v8 = a2[1];
  v9 = a3->f32[0] - *a2;
  v10 = v7 - v8;
  v11 = a3[1].f32[0];
  v12 = a2[2];
  v13 = v11 - v12;
  v14 = a4->f32[1];
  v15 = a4->f32[0] - *a2;
  v16 = v14 - v8;
  v17 = a4[1].f32[0];
  v18 = v17 - v12;
  v19 = *result;
  v20 = result[1];
  v21 = *result - *a2;
  v22 = v20 - v8;
  v23 = result[2];
  v24 = v23 - v12;
  v25 = (float)((float)((float)(v7 - v8) * (float)(v20 - v8)) + (float)(v9 * v21)) + (float)(v13 * v24);
  v26 = (float)((float)(v16 * v22) + (float)(v15 * v21)) + (float)(v18 * v24);
  if (v25 <= 0.0 && v26 <= 0.0)
  {
    *a5 = 0.0;
    *a6 = 0.0;
    *(_QWORD *)a7 = *(_QWORD *)a2;
    v27 = a2[2];
LABEL_22:
    *(float *)(a7 + 8) = v27;
    return result;
  }
  v28 = v19 - a3->f32[0];
  v29 = v20 - v7;
  v30 = v23 - v11;
  v31 = (float)((float)(v10 * (float)(v20 - v7)) + (float)(v9 * v28)) + (float)(v13 * v30);
  v32 = (float)((float)(v16 * v29) + (float)(v15 * v28)) + (float)(v18 * v30);
  if (v31 >= 0.0 && v32 <= v31)
  {
    *a5 = 1.0;
    *a6 = 0.0;
    *(float32x2_t *)a7 = *a3;
    v27 = a3[1].f32[0];
    goto LABEL_22;
  }
  v34 = (float)(v25 * v32) - (float)(v31 * v26);
  if (v31 <= 0.0 && v25 >= 0.0 && v34 <= 0.0)
  {
    v35 = v25 / (float)(v25 - v31);
    *a5 = v35;
    *a6 = 0.0;
    v36 = v9 * v35;
    v37 = (float)(v10 * v35) + a2[1];
    v27 = (float)(v13 * v35) + a2[2];
    *(float *)a7 = v36 + *a2;
    *(float *)(a7 + 4) = v37;
    goto LABEL_22;
  }
  v38 = v19 - a4->f32[0];
  v39 = v20 - v14;
  v40 = v23 - v17;
  v41 = (float)((float)(v10 * v39) + (float)(v9 * v38)) + (float)(v13 * v40);
  v42 = (float)((float)(v16 * v39) + (float)(v15 * v38)) + (float)(v18 * v40);
  if (v42 >= 0.0 && v41 <= v42)
  {
    *a5 = 0.0;
    *a6 = 1.0;
    *(float32x2_t *)a7 = *a4;
    v27 = a4[1].f32[0];
    goto LABEL_22;
  }
  v44 = (float)(v41 * v26) - (float)(v25 * v42);
  if (v42 > 0.0 || v44 > 0.0 || v26 < 0.0)
  {
    v49 = (float)(v31 * v42) - (float)(v41 * v32);
    if (v49 <= 0.0)
    {
      v50 = v32 - v31;
      if (v50 >= 0.0)
      {
        v51 = v41 - v42;
        if (v51 >= 0.0)
        {
          v55 = v50 / (float)(v50 + v51);
          *a5 = 1.0 - v55;
          *a6 = v55;
          v48 = a3[1].f32[0] + (float)(v55 * (float)(a4[1].f32[0] - a3[1].f32[0]));
          *(float32x2_t *)a7 = vadd_f32(*a3, vmul_n_f32(vsub_f32(*a4, *a3), v55));
          goto LABEL_28;
        }
      }
    }
    v52 = 1.0 / (float)(v34 + (float)(v49 + v44));
    v53 = v44 * v52;
    v54 = v34 * v52;
    *a5 = v53;
    *a6 = v54;
    v46 = (float)(v15 * v54) + (float)((float)(v9 * v53) + *a2);
    v47 = (float)(v16 * v54) + (float)((float)(v10 * v53) + a2[1]);
    v48 = (float)(v18 * v54) + (float)((float)(v13 * v53) + a2[2]);
  }
  else
  {
    v45 = v26 / (float)(v26 - v42);
    *a5 = 0.0;
    *a6 = v45;
    v46 = (float)(v15 * v45) + *a2;
    v47 = (float)(v16 * v45) + a2[1];
    v48 = (float)(v18 * v45) + a2[2];
  }
  *(float *)a7 = v46;
  *(float *)(a7 + 4) = v47;
LABEL_28:
  *(float *)(a7 + 8) = v48;
  return result;
}

float32x2_t physx::Gu::distancePointTriangleSquared(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x2_t *a5, float32x2_t *a6, float32x4_t *a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x2_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  int v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v48;
  float32x2_t v49;
  float32x2_t v51;
  float32x2_t v52;
  int v53;
  float32x2_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  int v61;
  float32x2_t v62;
  float32x4_t v63;
  float32x2_t v65;
  float32x2_t v66;
  int v67;
  float32x2_t v68;
  float32x4_t v69;
  float32x4_t v70;

  v7 = *a3;
  v8 = *a2;
  v9 = vsubq_f32(*a3, *a2);
  v10 = *a4;
  v11 = vsubq_f32(*a4, *a2);
  v12 = *a1;
  v13 = vsubq_f32(*a1, *a2);
  v14 = vmulq_f32(v9, v13);
  v14.i64[0] = vpaddq_f32(v14, v14).u64[0];
  v15 = vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32);
  v16 = vmulq_f32(v11, v13);
  v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
  v17 = vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcltz_f32(v17), (int8x8_t)vcltz_f32(v15)), 0), *(int8x8_t *)a2->f32).u32[0] == -1)
  {
    *a5 = 0;
    *a6 = 0;
    v40 = *a1;
    v41 = *a2;
  }
  else
  {
    v18 = vsubq_f32(v12, v7);
    v19 = vmulq_f32(v9, v18);
    v19.i64[0] = vpaddq_f32(v19, v19).u64[0];
    v20 = vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32);
    v21 = vmulq_f32(v11, v18);
    v21.i64[0] = vpaddq_f32(v21, v21).u64[0];
    v22 = vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v20, v22), (int8x8_t)vcgez_f32(v20)), 0), *(int8x8_t *)v8.f32).u32[0] == -1)
    {
      __asm { FMOV            V0.2S, #1.0 }
      *a5 = _D0;
      *a6 = 0;
      v40 = *a1;
      v41 = *a3;
    }
    else
    {
      v23 = vsubq_f32(v12, v10);
      v24 = vmulq_f32(v9, v23);
      v24.i64[0] = vpaddq_f32(v24, v24).u64[0];
      v25 = vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32);
      v26 = vmulq_f32(v11, v23);
      v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
      v27 = vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgez_f32(v27), (int8x8_t)vcge_f32(v27, v25)), 0), *(int8x8_t *)v8.f32).u32[0] != -1)
      {
        v28 = vsub_f32(vmul_f32(v15, v22), vmul_f32(v17, v20));
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcltz_f32(v20), (int8x8_t)vcgez_f32(v15)), (int8x8_t)vcltz_f32(v28)), 0), *(int8x8_t *)v8.f32).u32[0] == -1)
        {
          v51 = vsub_f32(v15, v20);
          v52 = vrecpe_f32(v51);
          v53 = 4;
          do
          {
            v52 = vmul_f32(v52, vrecps_f32(v51, v52));
            --v53;
          }
          while (v53);
          v54 = vmul_f32(v15, v52);
          v55 = vmulq_n_f32(v9, v54.f32[0]);
          v55.i32[3] = 0;
          v56 = vaddq_f32(v8, v55);
          *a5 = v54;
          *a6 = 0;
        }
        else
        {
          v29 = vsub_f32(vmul_f32(v20, v27), vmul_f32(v22, v25));
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v25, v27), (int8x8_t)vcge_f32(v22, v20)), (int8x8_t)vcltz_f32(v29)), 0), *(int8x8_t *)v8.f32).u32[0] == -1)
          {
            v57 = vsubq_f32(v10, v7);
            v58 = vsub_f32(v22, v20);
            v59 = vadd_f32(v58, vsub_f32(v25, v27));
            v60 = vrecpe_f32(v59);
            v61 = 4;
            do
            {
              v60 = vmul_f32(v60, vrecps_f32(v59, v60));
              --v61;
            }
            while (v61);
            v62 = vmul_f32(v58, v60);
            v63 = vmulq_n_f32(v57, v62.f32[0]);
            v63.i32[3] = 0;
            v56 = vaddq_f32(v7, v63);
            __asm { FMOV            V2.2S, #1.0 }
            *a5 = vsub_f32(_D2, v62);
            *a6 = v62;
          }
          else
          {
            v30 = vsub_f32(vmul_f32(v17, v25), vmul_f32(v15, v27));
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcltz_f32(v27), (int8x8_t)vcgez_f32(v17)), (int8x8_t)vcltz_f32(v30)), 0), *(int8x8_t *)v8.f32).u32[0] != -1)
            {
              v31 = vadd_f32(v29, vadd_f32(v28, v30));
              v32 = vrecpe_f32(v31);
              v33 = 4;
              do
              {
                v32 = vmul_f32(v32, vrecps_f32(v31, v32));
                --v33;
              }
              while (v33);
              v34 = vmul_f32(v30, v32);
              v35 = vmul_f32(v28, v32);
              v36 = vmulq_n_f32(v9, v34.f32[0]);
              v36.i32[3] = 0;
              v37 = vmulq_n_f32(v11, v35.f32[0]);
              v37.i32[3] = 0;
              v38 = vaddq_f32(v8, vaddq_f32(v36, v37));
              *a5 = v34;
              *a6 = v35;
              *a7 = v38;
              v39 = vsubq_f32(*a1, v38);
              goto LABEL_14;
            }
            v65 = vsub_f32(v17, v27);
            v66 = vrecpe_f32(v65);
            v67 = 4;
            do
            {
              v66 = vmul_f32(v66, vrecps_f32(v65, v66));
              --v67;
            }
            while (v67);
            v68 = vmul_f32(v17, v66);
            v69 = vmulq_n_f32(v11, v68.f32[0]);
            v69.i32[3] = 0;
            v56 = vaddq_f32(v8, v69);
            *a5 = 0;
            *a6 = v68;
          }
        }
        v70 = vsubq_f32(*a1, v56);
        *a7 = v56;
        v48 = vmulq_f32(v70, v70);
        goto LABEL_15;
      }
      *a5 = 0;
      __asm { FMOV            V0.2S, #1.0 }
      *a6 = _D0;
      v40 = *a1;
      v41 = *a4;
    }
  }
  v39 = vsubq_f32(v40, v41);
  *a7 = v41;
LABEL_14:
  v48 = vmulq_f32(v39, v39);
LABEL_15:
  v49 = (float32x2_t)vpaddq_f32(v48, v48).u64[0];
  return vpadd_f32(v49, v49);
}

float *physx::Gu::distanceSegmentBoxSquared(float *result, float *a2, float *a3, float32x2_t *a4, float *a5, _DWORD *a6, float32x2_t *a7)
{
  float *v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  unsigned int v27;
  float v28;
  float v29;
  unsigned int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  char v36;
  float v37;
  float32x2_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t i;
  float *v55;
  float v56;
  _DWORD v57[3];
  float v58;
  float v59;
  float v60;
  float32x2_t v61;
  float v62;
  float32x2_t v63;
  float v64;

  v13 = result;
  v14 = 0;
  v15 = result[1];
  v16 = *a2 - *result;
  v17 = a2[1] - v15;
  v18 = result[2];
  v19 = a2[2] - v18;
  v20 = *result - *a3;
  v21 = v15 - a3[1];
  v22 = v18 - a3[2];
  v23 = *a5;
  v24 = a5[1];
  v25 = a5[2];
  v26 = a5[3];
  *(float *)&v27 = (float)((float)(v21 * v24) + (float)(v20 * *a5)) + (float)(v22 * v25);
  v28 = a5[4];
  v29 = a5[5];
  *(float *)&v30 = (float)((float)(v21 * v28) + (float)(v20 * v26)) + (float)(v22 * v29);
  v31 = a5[6];
  v32 = a5[7];
  v33 = (float)(v21 * v32) + (float)(v20 * v31);
  v34 = a5[8];
  v61 = (float32x2_t)__PAIR64__(v30, v27);
  v62 = v33 + (float)(v22 * v34);
  v58 = (float)((float)(v17 * v24) + (float)(v16 * v23)) + (float)(v19 * v25);
  v59 = (float)((float)(v17 * v28) + (float)(v16 * v26)) + (float)(v19 * v29);
  v60 = (float)((float)(v17 * v32) + (float)(v16 * v31)) + (float)(v19 * v34);
  do
  {
    v35 = *(&v58 + v14);
    if (v35 >= 0.0)
    {
      v36 = 0;
    }
    else
    {
      v61.f32[v14] = -v61.f32[v14];
      *(&v58 + v14) = -v35;
      v36 = 1;
    }
    *((_BYTE *)&v57[2] + ++v14) = v36;
  }
  while (v14 != 3);
  *(_QWORD *)v57 = 0;
  if (v58 <= 0.0)
  {
    if (v59 > 0.0)
    {
      v39 = 1;
      if (v60 > 0.0)
      {
        v40 = 0;
        v41 = (uint64_t)a4;
        v42 = 2;
LABEL_20:
        result = (float *)case0(v39, v42, v40, (uint64_t)&v61, (uint64_t)&v58, v41, (float *)v57, (float *)&v57[1]);
        goto LABEL_44;
      }
      v43 = 0;
      goto LABEL_23;
    }
    if (v60 > 0.0)
    {
      v39 = 2;
      v43 = 0;
      v44 = (uint64_t)a4;
      v45 = 1;
LABEL_24:
      result = (float *)case00(v39, v43, v45, (uint64_t)&v61, (uint64_t)&v58, v44, (float *)v57, (float *)&v57[1]);
      goto LABEL_44;
    }
    v46 = a4->f32[0];
    v47 = -a4->f32[0];
    if (v61.f32[0] >= v47)
    {
      v48 = 0.0;
      if (v61.f32[0] <= v46)
        goto LABEL_32;
      v48 = (float)((float)(v61.f32[0] - v46) * (float)(v61.f32[0] - v46)) + 0.0;
      v47 = a4->f32[0];
    }
    else
    {
      v48 = (float)((float)(v61.f32[0] + v46) * (float)(v61.f32[0] + v46)) + 0.0;
    }
    *(float *)&v57[1] = v48;
    v61.f32[0] = v47;
LABEL_32:
    v49 = a4->f32[1];
    v50 = -v49;
    if (v61.f32[1] >= (float)-v49)
    {
      if (v61.f32[1] <= v49)
        goto LABEL_37;
      v48 = v48 + (float)((float)(v61.f32[1] - v49) * (float)(v61.f32[1] - v49));
      v50 = a4->f32[1];
    }
    else
    {
      v48 = v48 + (float)((float)(v61.f32[1] + v49) * (float)(v61.f32[1] + v49));
    }
    *(float *)&v57[1] = v48;
    v61.f32[1] = v50;
LABEL_37:
    v51 = a4[1].f32[0];
    v52 = -v51;
    if (v62 >= (float)-v51)
    {
      if (v62 <= v51)
      {
LABEL_42:
        v57[0] = 0;
        goto LABEL_44;
      }
      v53 = v48 + (float)((float)(v62 - v51) * (float)(v62 - v51));
      v52 = a4[1].f32[0];
    }
    else
    {
      v53 = v48 + (float)((float)(v62 + v51) * (float)(v62 + v51));
    }
    *(float *)&v57[1] = v53;
    v62 = v52;
    goto LABEL_42;
  }
  if (v59 <= 0.0)
  {
    v39 = 0;
    if (v60 > 0.0)
    {
      v42 = 2;
      v41 = (uint64_t)a4;
      v40 = 1;
      goto LABEL_20;
    }
    v43 = 1;
LABEL_23:
    v44 = (uint64_t)a4;
    v45 = 2;
    goto LABEL_24;
  }
  if (v60 <= 0.0)
  {
    v39 = 0;
    v42 = 1;
    v41 = (uint64_t)a4;
    v40 = 2;
    goto LABEL_20;
  }
  v37 = v62 - a4[1].f32[0];
  v38 = vsub_f32(v61, *a4);
  v63 = v38;
  v64 = v37;
  if ((float)(v59 * v38.f32[0]) >= vmuls_lane_f32(v58, v38, 1))
  {
    if ((float)(v60 * v38.f32[0]) >= (float)(v58 * v37))
    {
      result = (float *)face(0, 1u, 2u, (uint64_t)&v61, (uint64_t)&v58, (uint64_t)a4, (uint64_t)&v63, (float *)v57, (float *)&v57[1]);
      goto LABEL_44;
    }
    goto LABEL_28;
  }
  if ((float)(v60 * v38.f32[1]) < (float)(v59 * v37))
  {
LABEL_28:
    result = (float *)face(2, 0, 1u, (uint64_t)&v61, (uint64_t)&v58, (uint64_t)a4, (uint64_t)&v63, (float *)v57, (float *)&v57[1]);
    goto LABEL_44;
  }
  result = (float *)face(1, 2u, 0, (uint64_t)&v61, (uint64_t)&v58, (uint64_t)a4, (uint64_t)&v63, (float *)v57, (float *)&v57[1]);
LABEL_44:
  for (i = 0; i != 3; ++i)
  {
    if (*((_BYTE *)&v57[2] + i + 1))
      v61.f32[i] = -v61.f32[i];
  }
  if (*(float *)v57 < 0.0)
  {
    if (a6)
      *a6 = 0;
    v55 = v13;
    return physx::Gu::distancePointBoxSquared(v55, a3, (uint64_t)a4, a5, (uint64_t)a7);
  }
  if (*(float *)v57 > 1.0)
  {
    if (a6)
      *a6 = 1065353216;
    v55 = a2;
    return physx::Gu::distancePointBoxSquared(v55, a3, (uint64_t)a4, a5, (uint64_t)a7);
  }
  if (a6)
    *a6 = v57[0];
  if (a7)
  {
    v56 = v62;
    *a7 = v61;
    a7[1].f32[0] = v56;
  }
  return result;
}

float physx::Gu::distanceSegmentSegmentSquared(float *a1, float *a2, float *a3, float *a4, float *a5, float *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float result;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  BOOL v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  BOOL v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  BOOL v82;
  float v83;
  float v84;
  float v85;
  float v86;
  BOOL v87;
  float v88;
  BOOL v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  BOOL v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  BOOL v108;
  float v109;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = v7 * 0.5;
  v10 = v8 * 0.5;
  v11 = sqrtf((float)((float)(v7 * v7) + (float)(v6 * v6)) + (float)(v8 * v8));
  v12 = 0.0;
  if (v11 == 0.0)
  {
    v14 = v11;
    v13 = 0.0;
  }
  else
  {
    v13 = 1.0 / v11;
    v6 = v6 * (float)(1.0 / v11);
    v7 = v7 * (float)(1.0 / v11);
    v8 = v8 * (float)(1.0 / v11);
    v14 = v11 * 0.5;
  }
  v15 = v9 + a1[1];
  v16 = v10 + a1[2];
  v17 = *a4;
  v18 = a4[1];
  v19 = a4[2];
  v20 = (float)(v18 * 0.5) + a3[1];
  v21 = (float)(v19 * 0.5) + a3[2];
  v22 = sqrtf((float)((float)(v18 * v18) + (float)(v17 * v17)) + (float)(v19 * v19));
  if (v22 == 0.0)
  {
    v23 = v22;
  }
  else
  {
    v12 = 1.0 / v22;
    v17 = v17 * (float)(1.0 / v22);
    v18 = v18 * (float)(1.0 / v22);
    v19 = v19 * (float)(1.0 / v22);
    v23 = v22 * 0.5;
  }
  v24 = (float)((float)(*a2 * 0.5) + *a1) - (float)((float)(*a4 * 0.5) + *a3);
  v25 = v15 - v20;
  v26 = v16 - v21;
  v27 = (float)(v7 * v18) + (float)(v6 * v17);
  v28 = v27 + (float)(v8 * v19);
  v29 = (float)((float)(v7 * v25) + (float)(v24 * v6)) + (float)(v26 * v8);
  v30 = (float)(v25 * v18) + (float)(v24 * v17);
  v31 = v30 + (float)(v26 * v19);
  v32 = (float)((float)(v25 * v25) + (float)(v24 * v24)) + (float)(v26 * v26);
  v33 = fabsf(1.0 - (float)(v28 * v28));
  if (v33 < 0.000001)
  {
    v34 = v14 + v23;
    v35 = -1.0;
    if (v28 >= 0.0)
      v35 = 1.0;
    v36 = (float)(v29 + (float)(v35 * v31)) * 0.5;
    if (v36 <= v34)
    {
      v37 = -v36;
      if (v34 < (float)-v36)
        v37 = v14 + v23;
    }
    else
    {
      v37 = -v34;
    }
    v43 = (float)(v23 * (float)(v37 * (float)-v35)) / v34;
    v44 = v37 + (float)(v35 * v43);
    v45 = v32 + (float)(v37 * (float)(v37 + (float)(v36 * 2.0)));
    goto LABEL_19;
  }
  v38 = -(float)(v27 + (float)(v8 * v19));
  v39 = -(float)(v30 + (float)(v26 * v19));
  v40 = -(float)(v29 - (float)(v28 * v31));
  v41 = v31 + (float)(v38 * v29);
  v42 = v23 * v33;
  if (v40 < (float)-(float)(v14 * v33))
  {
    if (v41 < (float)-v42)
    {
      v43 = -v23;
      v44 = -(float)(v29 + (float)(v28 * v23));
      if (v14 < v44)
      {
        v45 = v32
            + (float)((float)((float)((float)(v39 * 2.0) - v23) * (float)-v23)
                    + (float)(v14 * (float)(v14 + (float)(v44 * -2.0))));
LABEL_136:
        v44 = v14;
        goto LABEL_19;
      }
      v60 = v29 + (float)(v28 * v23);
      v61 = v39 + (float)(v28 * v14);
      v62 = -v61;
      v63 = (float)((float)(v29 * 2.0) - v14) * (float)-v14;
      v64 = v32 + (float)(v63 + (float)(v23 * (float)(v23 + (float)((float)-v61 * -2.0))));
      if (v23 >= (float)-v61)
        v65 = -v61;
      else
        v65 = v23;
      if (v23 >= v62)
        v64 = v32 + (float)(v63 + (float)(v61 * v62));
      v66 = v32 + (float)(v63 + (float)((float)-v23 * (float)((float)(v62 * -2.0) - v23)));
      if (v61 > v23)
        v67 = -v23;
      else
        v67 = v65;
      if (v61 <= v23)
        v66 = v64;
      v45 = v32 + (float)((float)((float)((float)(v39 * 2.0) - v23) * (float)-v23) + (float)(v60 * v44));
      v68 = v60 > v14;
      if (v60 > v14)
      {
        v44 = -v14;
        v43 = v67;
      }
      goto LABEL_123;
    }
    if (v41 > v42)
    {
      v53 = -(float)(v29 + (float)(v38 * v23));
      if (v14 >= v53)
      {
        v90 = v29 + (float)(v38 * v23);
        v91 = v39 + (float)(v28 * v14);
        v92 = -v91;
        v93 = (float)((float)(v29 * 2.0) - v14) * (float)-v14;
        v94 = v32 + (float)(v93 + (float)(v23 * (float)(v23 + (float)((float)-v91 * -2.0))));
        if (v23 >= (float)-v91)
          v95 = -v91;
        else
          v95 = v23;
        if (v23 >= v92)
          v94 = v32 + (float)(v93 + (float)(v91 * v92));
        v66 = v32 + (float)(v93 - (float)(v23 * (float)-(float)(v23 - (float)(v92 * -2.0))));
        if (v91 > v23)
          v96 = -v23;
        else
          v96 = v95;
        if (v91 <= v23)
          v66 = v94;
        v45 = v32 + (float)((float)(v23 * (float)(v23 + (float)(v39 * 2.0))) + (float)(v90 * v53));
        v68 = v90 > v14;
        if (v90 <= v14)
          v44 = v53;
        else
          v44 = -v14;
        if (v68)
          v43 = v96;
        else
          v43 = v23;
LABEL_123:
        if (v68)
          v45 = v66;
        goto LABEL_19;
      }
      v45 = v32
          + (float)((float)(v23 * (float)(v23 + (float)(v39 * 2.0))) + (float)(v14 * (float)(v14 + (float)(v53 * -2.0))));
      v44 = v14;
LABEL_90:
      v43 = v23;
      goto LABEL_19;
    }
    v44 = -v14;
    v71 = v39 + (float)(v28 * v14);
    v72 = -v71;
    v73 = (float)((float)(v29 * 2.0) - v14) * (float)-v14;
    v57 = v32 + (float)(v73 + (float)(v23 * (float)(v23 + (float)((float)-v71 * -2.0))));
    if (v23 >= (float)-v71)
      v74 = -v71;
    else
      v74 = v23;
    if (v23 >= v72)
      v57 = v32 + (float)(v73 + (float)(v71 * v72));
    v45 = v32 + (float)(v73 - (float)(v23 * (float)-(float)(v23 - (float)(v72 * -2.0))));
    v59 = v71 <= v23;
    if (v71 > v23)
      v43 = -v23;
    else
      v43 = v74;
    goto LABEL_76;
  }
  v47 = -v42;
  if (v40 <= (float)(v14 * v33))
  {
    if (v41 < v47)
    {
      v43 = -v23;
      v54 = v29 + (float)(v28 * v23);
      v55 = -v54;
      v56 = (float)((float)(v39 * 2.0) - v23) * (float)-v23;
      v57 = v32 + (float)(v56 + (float)(v14 * (float)(v14 + (float)((float)-v54 * -2.0))));
      if (v14 >= (float)-v54)
        v58 = -v54;
      else
        v58 = v14;
      if (v14 >= v55)
        v57 = v32 + (float)(v56 + (float)(v54 * v55));
      v45 = v32 + (float)(v56 - (float)(v14 * (float)-(float)(v14 - (float)(v55 * -2.0))));
      v59 = v54 <= v14;
      if (v54 > v14)
        v44 = -v14;
      else
        v44 = v58;
LABEL_76:
      if (v59)
        v45 = v57;
      goto LABEL_19;
    }
    if (v41 > v42)
    {
      v75 = v29 + (float)(v38 * v23);
      v76 = -v75;
      v77 = v23 * (float)(v23 + (float)(v39 * 2.0));
      v78 = v32 + (float)(v77 + (float)(v14 * (float)(v14 + (float)((float)-v75 * -2.0))));
      if (v14 >= (float)-v75)
        v79 = -v75;
      else
        v79 = v14;
      if (v14 >= v76)
        v78 = v32 + (float)(v77 + (float)(v75 * v76));
      v45 = v32 + (float)(v77 - (float)(v14 * (float)-(float)(v14 - (float)(v76 * -2.0))));
      if (v75 > v14)
        v44 = -v14;
      else
        v44 = v79;
      if (v75 <= v14)
        v45 = v78;
      goto LABEL_90;
    }
    v44 = v40 * (float)(1.0 / v33);
    v43 = v41 * (float)(1.0 / v33);
    v50 = (float)(v43 * (float)((float)(v43 + (float)(v38 * v44)) + (float)(v39 * 2.0)))
        + (float)(v44 * (float)((float)(v44 + (float)(v38 * v43)) + (float)(v29 * 2.0)));
LABEL_138:
    v45 = v32 + v50;
    goto LABEL_19;
  }
  if (v41 >= v47)
  {
    if (v41 <= v42)
    {
      v97 = v39 + (float)(v38 * v14);
      v98 = -v97;
      v99 = v14 * (float)(v14 + (float)(v29 * 2.0));
      v100 = v32 + (float)(v99 + (float)(v23 * (float)(v23 + (float)((float)-v97 * -2.0))));
      if (v23 >= (float)-v97)
        v101 = -v97;
      else
        v101 = v23;
      if (v23 >= v98)
        v100 = v32 + (float)(v99 + (float)(v97 * v98));
      v45 = v32 + (float)(v99 - (float)(v23 * (float)-(float)(v23 - (float)(v98 * -2.0))));
      v102 = v97 <= v23;
      if (v97 > v23)
        v43 = -v23;
      else
        v43 = v101;
      if (v102)
        v45 = v100;
      goto LABEL_136;
    }
    v69 = v29 + (float)(v38 * v23);
    v70 = -v69;
    if (v69 > v14)
    {
      v44 = -v14;
      v45 = v32
          + (float)((float)(v23 * (float)(v23 + (float)(v39 * 2.0)))
                  - (float)(v14 * (float)-(float)(v14 - (float)(v70 * -2.0))));
      goto LABEL_90;
    }
    v103 = v39 + (float)(v38 * v14);
    v104 = -v103;
    v105 = v14 * (float)(v14 + (float)(v29 * 2.0));
    v106 = v32 + (float)(v105 + (float)(v23 * (float)(v23 + (float)((float)-v103 * -2.0))));
    if (v23 >= (float)-v103)
      v107 = -v103;
    else
      v107 = v23;
    if (v23 >= v104)
      v106 = v32 + (float)(v105 + (float)(v103 * v104));
    v86 = v32 + (float)(v105 - (float)(v23 * (float)-(float)(v23 - (float)(v104 * -2.0))));
    v108 = v103 <= v23;
    if (v103 > v23)
      v109 = -v23;
    else
      v109 = v107;
    if (v108)
      v86 = v106;
    v45 = v32 + (float)((float)(v23 * (float)(v23 + (float)(v39 * 2.0))) + (float)(v69 * v70));
    v89 = v14 < v70;
    if (v14 >= v70)
      v44 = -v69;
    else
      v44 = v14;
    if (v14 >= v70)
      v43 = v23;
    else
      v43 = v109;
  }
  else
  {
    v43 = -v23;
    v48 = v29 + (float)(v28 * v23);
    v49 = -v48;
    if (v48 > v14)
    {
      v44 = -v14;
      v50 = (float)((float)((float)(v39 * 2.0) - v23) * (float)-v23)
          - (float)(v14 * (float)-(float)(v14 - (float)(v49 * -2.0)));
      goto LABEL_138;
    }
    v80 = v39 + (float)(v38 * v14);
    v81 = -v80;
    v82 = v80 > v23;
    v83 = v14 * (float)(v14 + (float)(v29 * 2.0));
    v84 = v32 + (float)(v83 + (float)(v80 * (float)-v80));
    if (v82)
      v85 = -v23;
    else
      v85 = v81;
    if (v82)
      v84 = v32 + (float)(v83 + (float)((float)-v23 * (float)((float)(v81 * -2.0) - v23)));
    v86 = v32 + (float)(v83 + (float)(v23 * (float)(v23 + (float)(v81 * -2.0))));
    v87 = v23 < v81;
    if (v23 < v81)
      v88 = v23;
    else
      v88 = v85;
    if (!v87)
      v86 = v84;
    v45 = v32 + (float)((float)((float)((float)(v39 * 2.0) - v23) * (float)-v23) + (float)(v48 * v49));
    v89 = v14 < v49;
    if (v14 >= v49)
      v44 = -v48;
    else
      v44 = v14;
    if (v14 < v49)
      v43 = v88;
  }
  if (v89)
    v45 = v86;
LABEL_19:
  if (a5)
    *a5 = v44;
  if (a6)
    *a6 = v43;
  if (a5)
  {
    if (v11 == 0.0)
      v46 = 0.0;
    else
      v46 = v13 * (float)(v14 + *a5);
    *a5 = v46;
  }
  if (a6)
  {
    if (v22 == 0.0)
      v51 = 0.0;
    else
      v51 = v12 * (float)(v23 + *a6);
    *a6 = v51;
  }
  result = 0.0;
  if (v45 >= 0.0)
    return v45;
  return result;
}

float32x2_t physx::Gu::distanceSegmentSegmentSquared(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x2_t *a5, _QWORD *a6)
{
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  int v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x2_t v26;
  float32x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;

  v6 = vsubq_f32(*a1, *a3);
  v7 = (int32x4_t)vmulq_f32(*a2, *a2);
  v8 = *a4;
  v9 = (int32x4_t)vmulq_f32(v8, v8);
  v10 = (int32x4_t)vmulq_f32(*a2, *a4);
  v11 = (int32x4_t)vmulq_f32(*a2, v6);
  v12 = vzip1q_s32(v7, v10);
  v13 = vzip2q_s32(v7, v10);
  v14 = vzip1q_s32(v9, v11);
  v15 = vaddq_f32((float32x4_t)vzip1q_s32(v13, vzip2q_s32(v9, v11)), vaddq_f32((float32x4_t)vzip1q_s32(v12, v14), (float32x4_t)vzip2q_s32(v12, v14)));
  v16 = vrecpeq_f32(v15);
  v17 = 4;
  do
  {
    v16 = vmulq_f32(v16, vrecpsq_f32(v16, v15));
    --v17;
  }
  while (v17);
  v18 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 1);
  v19 = (float32x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
  v20 = vsub_f32(vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 0), *(float32x2_t *)v15.f32, 1), (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v19, v19), 0));
  v21 = vrecpe_f32(v20);
  v22 = 4;
  do
  {
    v21 = vmul_f32(v21, vrecps_f32(v20, v21));
    --v22;
  }
  while (v22);
  v23 = vmulq_f32(v6, v8);
  v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
  *(float32x2_t *)v23.f32 = vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32);
  v24 = vsub_f32(vmul_laneq_f32(*(float32x2_t *)v23.f32, v15, 2), vmul_laneq_f32(v18, v15, 3));
  _Q5.i64[0] = 0x3400000034000000;
  _Q5.i64[1] = 0x3400000034000000;
  v26 = (float32x2_t)vand_s8(*(int8x8_t *)v16.f32, (int8x8_t)*(_OWORD *)&vcgtq_f32(v15, _Q5));
  __asm { FMOV            V5.2S, #1.0 }
  *(float32x2_t *)v23.f32 = vmax_f32(vmin_f32(vmul_lane_f32(vmla_laneq_f32(*(float32x2_t *)v23.f32, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)0x3400000034000000, v20), 0), (int8x8_t)0x3F0000003F000000, (int8x8_t)vmax_f32(vmin_f32(vmul_f32(v21, v24), *(float32x2_t *)_Q5.f32), 0)), v15, 2), v26, 1), *(float32x2_t *)_Q5.f32), 0);
  v31 = vmax_f32(vmin_f32(vmul_n_f32(vsub_f32(vmul_laneq_f32(*(float32x2_t *)v23.f32, v15, 2), (float32x2_t)vdup_laneq_s32((int32x4_t)v15, 3)), v26.f32[0]), *(float32x2_t *)_Q5.f32), 0);
  *a5 = v31;
  *a6 = v23.i64[0];
  v32 = (int8x16_t)vmlaq_n_f32(*a1, *a2, v31.f32[0]);
  v33 = (int8x16_t)vmlaq_n_f32(*a3, *a4, v23.f32[0]);
  v34 = vsub_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v33.i8);
  v35 = vsub_f32((float32x2_t)vextq_s8(v32, v32, 8uLL).u32[0], (float32x2_t)vextq_s8(v33, v33, 8uLL).u32[0]);
  v36 = vpadd_f32(vmul_f32(v34, v34), vmul_f32(v35, v35));
  return vpadd_f32(v36, v36);
}

double physx::Gu::distanceSegmentSegmentSquared4(int32x4_t *a1, int32x2_t *a2, int32x4_t *a3, int32x4_t *a4, int32x4_t *a5, int32x4_t *a6, int32x4_t *a7, int32x4_t *a8, int32x4_t *a9, int32x4_t *a10, float32x4_t *a11, float32x4_t *a12)
{
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  double result;

  v12 = *(float32x4_t *)a2->i8;
  v13 = (float32x4_t)vdupq_lane_s32(*a2, 1);
  v14 = *a1;
  v15 = *a3;
  v16 = *a5;
  v17 = *a7;
  v18 = *a9;
  v19 = vzip1q_s32(*a4, *a8);
  v20 = vzip1q_s32(*a6, *a10);
  v21 = (float32x4_t)vzip2q_s32(v19, v20);
  v22 = vmulq_f32(v12, v12);
  v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
  *(float32x2_t *)v25.f32 = vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32);
  v23 = vmulq_f32(v21, v21);
  v24 = vmulq_lane_f32(v21, (float32x2_t)*a2, 1);
  v25.i64[1] = v25.i64[0];
  v26 = vrecpeq_f32(v25);
  v27 = 4;
  do
  {
    v26 = vmulq_f32(v26, vrecpsq_f32(v26, v25));
    --v27;
  }
  while (v27);
  v28 = (float32x4_t)vzip1q_s32(v19, v20);
  v29 = (float32x4_t)vzip1q_s32(vzip2q_s32(*a4, *a8), vzip2q_s32(*a6, *a10));
  v30 = vmlaq_f32(vmlaq_f32(v23, v28, v28), v29, v29);
  v31 = vrecpeq_f32(v30);
  v32 = 4;
  do
  {
    v31 = vmulq_f32(v31, vrecpsq_f32(v31, v30));
    --v32;
  }
  while (v32);
  v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0);
  v34 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2);
  v35 = vmlaq_laneq_f32(vmlaq_n_f32(v24, v28, v12.f32[0]), v29, v12, 2);
  v36 = vsubq_f32(vmulq_f32(v30, v25), vmulq_f32(v35, v35));
  v37 = vrecpeq_f32(v36);
  v38 = 4;
  do
  {
    v37 = vmulq_f32(v37, vrecpsq_f32(v37, v36));
    --v38;
  }
  while (v38);
  v39 = (float32x4_t)vdupq_laneq_s32(v14, 2);
  v40 = (float32x4_t)vzip1q_s32(vzip2q_s32(v15, v17), vzip2q_s32(v16, v18));
  v41 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 0);
  v42 = vsubq_f32(v39, v40);
  v43 = vzip1q_s32(v15, v17);
  v44 = vzip1q_s32(v16, v18);
  v45 = (float32x4_t)vzip1q_s32(v43, v44);
  v46 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 1);
  v47 = vsubq_f32(v41, v45);
  v48 = (float32x4_t)vzip2q_s32(v43, v44);
  v49 = vsubq_f32(v46, v48);
  v50 = vmlaq_f32(vmlaq_f32(vmulq_f32(v21, v49), v47, v28), v42, v29);
  v51 = vmlaq_f32(vmlaq_f32(vmulq_lane_f32(v49, *(float32x2_t *)v12.f32, 1), v47, v33), v42, v34);
  __asm { FMOV            V19.4S, #1.0 }
  v57 = (int8x16_t)vmaxq_f32(vminq_f32(vmulq_f32(vsubq_f32(vmulq_f32(v35, v50), vmulq_f32(v30, v51)), v37), _Q19), (float32x4_t)0);
  v58.i64[0] = 0x3400000034000000;
  v58.i64[1] = 0x3400000034000000;
  v42.i64[0] = 0x3F0000003F000000;
  v42.i64[1] = 0x3F0000003F000000;
  v59 = vmaxq_f32(vminq_f32(vmulq_f32(v31, vaddq_f32(v50, vmulq_f32(v35, (float32x4_t)vbslq_s8((int8x16_t)vcgeq_f32(v58, v36), (int8x16_t)v42, v57)))), _Q19), (float32x4_t)0);
  v60 = (float32x4_t)vbicq_s8((int8x16_t)vmaxq_f32(vminq_f32(vmulq_f32(v26, vsubq_f32(vmulq_f32(v35, v59), v51)), _Q19), (float32x4_t)0), (int8x16_t)vcgeq_f32(v58, v25));
  *a11 = v60;
  *a12 = v59;
  v61 = vmlaq_f32(v39, v60, v34);
  v62 = vmlaq_f32(v48, v59, v21);
  v63 = vsubq_f32(vmlaq_f32(v41, v60, v33), vmlaq_f32(v45, v59, v28));
  v64 = vsubq_f32(vmlaq_f32(v46, v60, v13), v62);
  v65 = vsubq_f32(v61, vmlaq_f32(v40, v59, v29));
  *(_QWORD *)&result = vmlaq_f32(vmlaq_f32(vmulq_f32(v65, v65), v64, v64), v63, v63).u64[0];
  return result;
}

uint64_t case0(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7, float *a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;

  v8 = *(float *)(a6 + 4 * result);
  v9 = *(float *)(a4 + 4 * result) - v8;
  v10 = *(float *)(a6 + 4 * a2);
  v11 = *(float *)(a4 + 4 * a2) - v10;
  v12 = v9 * *(float *)(a5 + 4 * a2);
  v13 = v11 * *(float *)(a5 + 4 * result);
  if (v12 >= v13)
  {
    *(float *)(a4 + 4 * result) = v8;
    v18 = *(float *)(a4 + 4 * a2);
    v11 = v18 + *(float *)(a6 + 4 * a2);
    v19 = *(float *)(a5 + 4 * result);
    v20 = v12 - (float)(v19 * v11);
    if (v20 < 0.0)
    {
      if (!a7)
        goto LABEL_14;
      v17 = 1.0 / v19;
      *(float *)(a4 + 4 * a2) = v18 - (float)(v12 * v17);
      goto LABEL_13;
    }
    v17 = 1.0 / (float)((float)(*(float *)(a5 + 4 * a2) * *(float *)(a5 + 4 * a2)) + (float)(v19 * v19));
    *a8 = *a8 + (float)((float)(v20 * v20) * v17);
    if (!a7)
      goto LABEL_14;
    *(float *)(a4 + 4 * a2) = -*(float *)(a6 + 4 * a2);
  }
  else
  {
    *(float *)(a4 + 4 * a2) = v10;
    v14 = *(float *)(a4 + 4 * result);
    v9 = v14 + *(float *)(a6 + 4 * result);
    v15 = *(float *)(a5 + 4 * a2);
    v16 = v13 - (float)(v15 * v9);
    if (v16 < 0.0)
    {
      if (!a7)
        goto LABEL_14;
      v17 = 1.0 / v15;
      *(float *)(a4 + 4 * result) = v14 - (float)(v13 * v17);
      v9 = v11;
      goto LABEL_13;
    }
    v17 = 1.0
        / (float)((float)(v15 * v15)
                + (float)(*(float *)(a5 + 4 * result) * *(float *)(a5 + 4 * result)));
    *a8 = *a8 + (float)((float)(v16 * v16) * v17);
    if (!a7)
      goto LABEL_14;
    *(float *)(a4 + 4 * result) = -*(float *)(a6 + 4 * result);
  }
  v9 = (float)(v11 * *(float *)(a5 + 4 * a2)) + (float)(*(float *)(a5 + 4 * result) * v9);
LABEL_13:
  *a7 = -(float)(v9 * v17);
LABEL_14:
  v21 = *(float *)(a4 + 4 * a3);
  v22 = *(float *)(a6 + 4 * a3);
  if (v21 >= (float)-v22)
  {
    if (v21 <= v22)
      return result;
    *a8 = *a8 + (float)((float)(v21 - v22) * (float)(v21 - v22));
    v23 = *(float *)(a6 + 4 * a3);
  }
  else
  {
    *a8 = *a8 + (float)((float)(v21 + v22) * (float)(v21 + v22));
    v23 = -*(float *)(a6 + 4 * a3);
  }
  *(float *)(a4 + 4 * a3) = v23;
  return result;
}

uint64_t case00(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7, float *a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  if (a7)
    *a7 = (float)(*(float *)(a6 + 4 * result) - *(float *)(a4 + 4 * result))
        / *(float *)(a5 + 4 * result);
  *(_DWORD *)(a4 + 4 * result) = *(_DWORD *)(a6 + 4 * result);
  v8 = *(float *)(a4 + 4 * a2);
  v9 = *(float *)(a6 + 4 * a2);
  if (v8 >= (float)-v9)
  {
    if (v8 <= v9)
      goto LABEL_8;
    *a8 = *a8 + (float)((float)(v8 - v9) * (float)(v8 - v9));
    v10 = *(float *)(a6 + 4 * a2);
  }
  else
  {
    *a8 = *a8 + (float)((float)(v8 + v9) * (float)(v8 + v9));
    v10 = -*(float *)(a6 + 4 * a2);
  }
  *(float *)(a4 + 4 * a2) = v10;
LABEL_8:
  v11 = *(float *)(a4 + 4 * a3);
  v12 = *(float *)(a6 + 4 * a3);
  if (v11 >= (float)-v12)
  {
    if (v11 <= v12)
      return result;
    *a8 = *a8 + (float)((float)(v11 - v12) * (float)(v11 - v12));
    v13 = *(float *)(a6 + 4 * a3);
  }
  else
  {
    *a8 = *a8 + (float)((float)(v11 + v12) * (float)(v11 + v12));
    v13 = -*(float *)(a6 + 4 * a3);
  }
  *(float *)(a4 + 4 * a3) = v13;
  return result;
}

uint64_t face(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float *a8, float *a9)
{
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51[3];

  v9 = *(float *)(a6 + 4 * a2);
  v51[a2] = *(float *)(a4 + 4 * a2) + v9;
  v10 = *(float *)(a6 + 4 * a3);
  v11 = *(float *)(a4 + 4 * a3) + v10;
  v51[a3] = v11;
  v12 = *(float *)(a5 + 4 * result);
  v13 = v51[a2];
  v14 = *(float *)(a5 + 4 * a2);
  v15 = *(float *)(a7 + 4 * result);
  v16 = v11 * v12;
  v17 = *(float *)(a5 + 4 * a3);
  v18 = v15 * v17;
  if ((float)(v12 * v13) < (float)(v14 * v15))
  {
    if (v16 >= v18)
    {
      v21 = (float)(v14 * v14) + (float)(v12 * v12);
      v22 = (float)(v13 * v14) + (float)(v12 * v15);
      v23 = (float)(v21 * v11) - (float)(v17 * v22);
      goto LABEL_11;
    }
    v19 = (float)(v17 * v17) + (float)(v12 * v12);
    v20 = (float)(v19 * v13) - (float)(v14 * (float)((float)(v11 * v17) + (float)(v12 * v15)));
    if (v20 < 0.0)
    {
      v21 = (float)(v14 * v14) + (float)(v12 * v12);
      v22 = (float)(v13 * v14) + (float)(v12 * v15);
      v23 = (float)(v21 * v11) - (float)(v17 * v22);
      if (v23 < 0.0)
      {
        v24 = v21 + (float)(v17 * v17);
        v25 = v22 + (float)(v17 * v11);
        v26 = (float)-v25 / v24;
        *a9 = (float)((float)((float)((float)(v13 * v13) + (float)(v15 * v15)) + (float)(v11 * v11)) + (float)(v25 * v26))
            + *a9;
        if (!a8)
          return result;
        *a8 = v26;
        *(_DWORD *)(a4 + 4 * result) = *(_DWORD *)(a6 + 4 * result);
        v27 = -*(float *)(a6 + 4 * a2);
LABEL_24:
        *(float *)(a4 + 4 * a2) = v27;
        v36 = -*(float *)(a6 + 4 * a3);
LABEL_25:
        *(float *)(a4 + 4 * a3) = v36;
        return result;
      }
LABEL_11:
      v32 = (float)(v13 * v13) + (float)(v15 * v15);
      v33 = *a9;
      if (v23 <= (float)(v10 * (float)(v21 + v21)))
      {
        v38 = v23 / v21;
        v39 = v11 - v38;
        v40 = v22 + (float)(v17 * (float)(v11 - (float)(v23 / v21)));
        v41 = (float)-(float)(v22 + (float)(v17 * (float)(v11 - v38))) / (float)(v21 + (float)(v17 * v17));
        *a9 = (float)((float)(v32 + (float)(v39 * v39)) + (float)(v40 * v41)) + v33;
        if (!a8)
          return result;
        *a8 = v41;
        *(_DWORD *)(a4 + 4 * result) = *(_DWORD *)(a6 + 4 * result);
        *(float *)(a4 + 4 * a2) = -*(float *)(a6 + 4 * a2);
        v36 = v38 - *(float *)(a6 + 4 * a3);
      }
      else
      {
        v34 = *(float *)(a7 + 4 * a3);
        v35 = (float)-(float)(v22 + (float)(v17 * v34)) / (float)(v21 + (float)(v17 * v17));
        *a9 = v33 + (float)((float)(v32 + (float)(v34 * v34)) + (float)((float)(v22 + (float)(v17 * v34)) * v35));
        if (!a8)
          return result;
        *a8 = v35;
        *(_DWORD *)(a4 + 4 * result) = *(_DWORD *)(a6 + 4 * result);
        *(float *)(a4 + 4 * a2) = -*(float *)(a6 + 4 * a2);
        v36 = *(float *)(a6 + 4 * a3);
      }
      goto LABEL_25;
    }
    v42 = v9 * (float)(v19 + v19);
    v30 = *a9;
    if (v20 > v42)
    {
LABEL_19:
      v43 = *(float *)(a7 + 4 * a2);
      v44 = v19 + (float)(v14 * v14);
      v45 = (float)((float)(v14 * v43) + (float)(v12 * v15)) + (float)(v17 * v11);
      v46 = (float)-v45 / v44;
      *a9 = v30
          + (float)((float)((float)((float)(v43 * v43) + (float)(v15 * v15)) + (float)(v11 * v11)) + (float)(v45 * v46));
      if (!a8)
        return result;
      *a8 = v46;
      *(_DWORD *)(a4 + 4 * result) = *(_DWORD *)(a6 + 4 * result);
      v27 = *(float *)(a6 + 4 * a2);
      goto LABEL_24;
    }
    v31 = v20 / v19;
LABEL_22:
    v47 = v19 + (float)(v14 * v14);
    v48 = v13 - v31;
    v49 = (float)((float)(v14 * v48) + (float)(v12 * v15)) + (float)(v17 * v11);
    v50 = (float)-v49 / v47;
    *a9 = (float)((float)((float)((float)(v48 * v48) + (float)(v15 * v15)) + (float)(v11 * v11)) + (float)(v49 * v50))
        + v30;
    if (!a8)
      return result;
    *a8 = v50;
    *(_DWORD *)(a4 + 4 * result) = *(_DWORD *)(a6 + 4 * result);
    v27 = v31 - *(float *)(a6 + 4 * a2);
    goto LABEL_24;
  }
  if (v16 < v18)
  {
    v19 = (float)(v17 * v17) + (float)(v12 * v12);
    v28 = (float)(v19 * v13) - (float)(v14 * (float)((float)(v11 * v17) + (float)(v12 * v15)));
    v29 = v9 * (float)(v19 + v19);
    v30 = *a9;
    if (v28 > v29)
      goto LABEL_19;
    v31 = v28 / v19;
    goto LABEL_22;
  }
  if (a8)
  {
    *(_DWORD *)(a4 + 4 * result) = *(_DWORD *)(a6 + 4 * result);
    v37 = 1.0 / *(float *)(a5 + 4 * result);
    *(float *)(a4 + 4 * a2) = *(float *)(a4 + 4 * a2)
                              + (float)((float)-(float)(*(float *)(a5 + 4 * a2)
                                                      * *(float *)(a7 + 4 * result))
                                      * v37);
    *(float *)(a4 + 4 * a3) = *(float *)(a4 + 4 * a3)
                              + (float)((float)-(float)(*(float *)(a5 + 4 * a3)
                                                      * *(float *)(a7 + 4 * result))
                                      * v37);
    *a8 = -(float)(*(float *)(a7 + 4 * result) * v37);
  }
  return result;
}

void physx::Gu::distanceSegmentTriangleSquared(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float32x2_t v21;
  float v22;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x2_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float32x2_t v49;
  float v50;
  float32x2_t v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float32x2_t v57;
  float v58;
  __int32 v59;
  __int32 v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  BOOL v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float32x2_t v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float32x2_t v102;
  float v103;
  float v104;
  float v105;
  float32x2_t v106;
  float v107;
  float v108;
  float v109;
  float32x2_t v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float32x2_t v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float32x2_t v121;
  float v122;
  float32x2_t v123;
  float v124;
  float32x2_t v125;
  float v126;
  float v127;
  uint64_t v128;
  _BYTE v129[12];
  __int32 v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float32x2_t v135;
  float v136;
  float32x2_t v137;
  float v138;

  v15 = a2->f32[0];
  v16 = a2->f32[1];
  v17 = a2[1].f32[0];
  v18 = (float)((float)(v16 * v16) + (float)(v15 * v15)) + (float)(v17 * v17);
  if (v18 < 1.0e-12)
  {
    if (a6)
      *a6 = 0;
    v19 = a3[1].f32[0];
    v20 = a4[1].f32[0] + v19;
    v21 = *a3;
    v137 = vadd_f32(*a4, *a3);
    v138 = v20;
    v22 = v19 + a5[1].f32[0];
    v135 = vadd_f32(v21, *a5);
    v136 = v22;
    v125.i32[0] = 0;
    v123.i32[0] = 0;
    physx::Gu::closestPtPointTriangle((float *)a1, (float *)a3, &v137, &v135, (float *)&v125, (float *)&v123, (uint64_t)&v132);
    if (a7)
      *a7 = v125.i32[0];
    if (a8)
      *a8 = v123.i32[0];
    return;
  }
  v25 = a3->f32[0];
  v24 = a3->f32[1];
  v27 = a1->f32[0];
  v26 = a1->f32[1];
  v28 = a3[1].f32[0];
  v29 = a1[1].f32[0];
  v31 = a4->f32[0];
  v30 = a4->f32[1];
  v32 = a4[1].f32[0];
  v34 = a5->f32[0];
  v33 = a5->f32[1];
  v35 = a5[1].f32[0];
  v128 = 0;
  memset(v129, 0, sizeof(v129));
  v127 = 0.0;
  v36 = (float)(v30 * v35) - (float)(v32 * v33);
  v37 = (float)(v32 * v34) - (float)(v31 * v35);
  v38 = (float)(v31 * v33) - (float)(v30 * v34);
  v39 = (float)((float)(v16 * v37) + (float)(v36 * v15)) + (float)(v38 * v17);
  if ((float)(v39 * v39) < (float)((float)(v18 * 0.000001)
                                  * (float)((float)((float)(v37 * v37) + (float)(v36 * v36)) + (float)(v38 * v38))))
  {
    v40 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v129[8], (float *)&v129[4]);
    *(_DWORD *)v129 = 0;
    v41 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a5, (float *)&v128 + 1, &v127);
    LODWORD(v128) = 0;
    if (v40 > v41)
    {
      *(_DWORD *)&v129[8] = HIDWORD(v128);
      *(_QWORD *)v129 = LODWORD(v127);
      v40 = v41;
    }
    v42 = a4[1].f32[0];
    v43 = a3[1].f32[0] + v42;
    v44 = *a4;
    v125 = vadd_f32(*a3, *a4);
    v126 = v43;
    v45 = a5[1].f32[0] - v42;
    v123 = vsub_f32(*a5, v44);
    v124 = v45;
    v46 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)&v125, (float *)&v123, (float *)&v128 + 1, &v127);
    *(float *)&v128 = 1.0 - v127;
    if (v40 > v46)
    {
      *(float *)&v129[4] = 1.0 - v127;
      *(_DWORD *)&v129[8] = HIDWORD(v128);
      *(float *)v129 = v127;
      v40 = v46;
    }
    v47 = a3[1].f32[0];
    v48 = a4[1].f32[0] + v47;
    v49 = *a3;
    v137 = vadd_f32(*a4, *a3);
    v138 = v48;
    v50 = v47 + a5[1].f32[0];
    v135 = vadd_f32(v49, *a5);
    v136 = v50;
    v121.i32[0] = 0;
    v131 = 0.0;
    physx::Gu::closestPtPointTriangle((float *)a1, (float *)a3, &v137, &v135, (float *)&v121, &v131, (uint64_t)&v132);
    v127 = v131;
    v128 = v121.u32[0];
    v51 = *a1;
    v52 = a1[1].f32[0];
    v53 = (float)((float)((float)(v133 - COERCE_FLOAT(HIDWORD(*(unint64_t *)a1)))
                        * (float)(v133 - COERCE_FLOAT(HIDWORD(*(unint64_t *)a1))))
                + (float)((float)(v132 - COERCE_FLOAT(*a1)) * (float)(v132 - COERCE_FLOAT(*a1))))
        + (float)((float)(v134 - v52) * (float)(v134 - v52));
    if (v40 > v53)
    {
      *(_DWORD *)&v129[8] = 0;
      *(float *)v129 = v131;
      *(_DWORD *)&v129[4] = v121.i32[0];
      v40 = v53;
    }
    v54 = v52 + a2[1].f32[0];
    v121 = vadd_f32(v51, *a2);
    v122 = v54;
    v55 = a3[1].f32[0];
    v56 = a4[1].f32[0] + v55;
    v57 = *a3;
    v137 = vadd_f32(*a4, *a3);
    v138 = v56;
    v58 = v55 + a5[1].f32[0];
    v135 = vadd_f32(v57, *a5);
    v136 = v58;
    v130 = 0;
    v131 = 0.0;
    physx::Gu::closestPtPointTriangle((float *)&v121, (float *)a3, &v137, &v135, &v131, (float *)&v130, (uint64_t)&v132);
    if (v40 <= (float)((float)((float)((float)(v133 - v121.f32[1]) * (float)(v133 - v121.f32[1]))
                              + (float)((float)(v132 - v121.f32[0]) * (float)(v132 - v121.f32[0])))
                      + (float)((float)(v134 - v122) * (float)(v134 - v122))))
      goto LABEL_64;
    v60 = v130;
    v59 = LODWORD(v131);
LABEL_18:
    *(_DWORD *)&v129[8] = 1065353216;
LABEL_63:
    *(_DWORD *)v129 = v60;
    *(_DWORD *)&v129[4] = v59;
    goto LABEL_64;
  }
  v117 = v25;
  v118 = v24;
  v61 = v25 - v27;
  v119 = v28;
  v120 = v27;
  v62 = v24 - v26;
  v63 = v28 - v29;
  v64 = (float)((float)(v16 * v30) + (float)(v15 * v31)) + (float)(v17 * v32);
  v65 = (float)((float)(v16 * v33) + (float)(v15 * v34)) + (float)(v17 * v35);
  v66 = (float)((float)(v30 * v30) + (float)(v31 * v31)) + (float)(v32 * v32);
  v67 = (float)((float)(v30 * v33) + (float)(v31 * v34)) + (float)(v32 * v35);
  v68 = (float)((float)(v33 * v33) + (float)(v34 * v34)) + (float)(v35 * v35);
  v69 = (float)((float)(v16 * (float)(v24 - v26)) + (float)(v61 * v15)) + (float)((float)(v28 - v29) * v17);
  v70 = (float)((float)((float)(v24 - v26) * v30) + (float)(v61 * v31)) + (float)((float)(v28 - v29) * v32);
  v71 = (float)(v66 * v65) + (float)((float)-v64 * v67);
  v72 = (float)(v66 * v68) - (float)(v67 * v67);
  v73 = (float)(v64 * v68) + (float)((float)-v65 * v67);
  v74 = (float)((float)(v73 * (float)-v64) + (float)(v18 * v72)) + (float)((float)-v65 * v71);
  v75 = 1.0 / v74;
  v76 = v74 == 0.0;
  v77 = 0.0;
  if (!v76)
    v77 = v75;
  v78 = v69 * v77;
  v79 = -(float)(v70 * v77);
  v80 = v26;
  v81 = (float)(v73 * v79) + (float)(v72 * v78);
  v82 = (float)(v65 * v64) - (float)(v18 * v67);
  v83 = (float)((float)((float)(v65 * (float)-v65) + (float)(v18 * v68)) * v79) + (float)(v73 * v78);
  v84 = (float)(v82 * v79) + (float)(v71 * v78);
  v85 = -(float)((float)((float)((float)(v62 * v33) + (float)(v61 * v34)) + (float)(v63 * v35)) * v77);
  v86 = v81 + (float)(v71 * v85);
  v87 = v83 + (float)(v82 * v85);
  v88 = v84 + (float)((float)((float)(v64 * (float)-v64) + (float)(v18 * v66)) * v85);
  *(float *)&v129[4] = v87;
  *(float *)&v129[8] = v86;
  *(float *)v129 = v88;
  if (v86 >= 0.0)
  {
    v90 = v87 + v88;
    if (v86 <= 1.0)
    {
      if (v90 <= 1.0)
      {
        if (v87 >= 0.0)
        {
          if (v88 < 0.0)
          {
            physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v129[8], (float *)&v129[4]);
            *(_DWORD *)v129 = 0;
          }
        }
        else
        {
          v99 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a5, (float *)&v129[8], (float *)v129);
          *(_DWORD *)&v129[4] = 0;
          if (v88 < 0.0
            && v99 > physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v128 + 1, (float *)&v128))
          {
            *(_QWORD *)&v129[4] = v128;
            *(_DWORD *)v129 = 0;
          }
        }
        goto LABEL_64;
      }
      if (v87 >= 0.0)
      {
        if (v88 >= 0.0)
        {
          v137.f32[0] = v117 + v31;
          v137.f32[1] = v118 + v30;
          v138 = v119 + v32;
          v135.f32[0] = v34 - v31;
          v135.f32[1] = v33 - v30;
          v136 = v35 - v32;
          physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)&v137, (float *)&v135, (float *)&v129[8], (float *)v129);
          *(float *)&v129[4] = 1.0 - *(float *)v129;
          goto LABEL_64;
        }
        v93 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v129[8], (float *)&v129[4]);
        *(_DWORD *)v129 = 0;
      }
      else
      {
        v93 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a5, (float *)&v129[8], (float *)v129);
        *(_DWORD *)&v129[4] = 0;
      }
      v104 = a4[1].f32[0];
      v105 = a3[1].f32[0] + v104;
      v106 = *a4;
      v137 = vadd_f32(*a3, *a4);
      v138 = v105;
      v107 = a5[1].f32[0] - v104;
      v135 = vsub_f32(*a5, v106);
      v136 = v107;
      if (v93 > physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)&v137, (float *)&v135, (float *)&v128 + 1, &v127))
      {
        *(float *)&v129[4] = 1.0 - v127;
        *(_DWORD *)&v129[8] = HIDWORD(v128);
        *(float *)v129 = v127;
      }
      goto LABEL_64;
    }
    if (v90 <= 1.0)
    {
      if (v87 >= 0.0)
      {
        if (v88 >= 0.0)
        {
          v125.f32[0] = v15 + v120;
          v125.f32[1] = v16 + v80;
          v126 = v17 + v29;
          v137.f32[0] = v117 + v31;
          v137.f32[1] = v118 + v30;
          v138 = v119 + v32;
          v135.f32[0] = v117 + v34;
          v135.f32[1] = v118 + v33;
          v136 = v119 + v35;
          v123.i32[0] = 0;
          v121.i32[0] = 0;
          physx::Gu::closestPtPointTriangle((float *)&v125, (float *)a3, &v137, &v135, (float *)&v123, (float *)&v121, (uint64_t)&v132);
          *(_DWORD *)v129 = v121.i32[0];
          *(_DWORD *)&v129[4] = v123.i32[0];
          *(_DWORD *)&v129[8] = 1065353216;
          goto LABEL_64;
        }
        v91 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v129[8], (float *)&v129[4]);
        *(_DWORD *)v129 = 0;
        goto LABEL_77;
      }
      v91 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a5, (float *)&v129[8], (float *)v129);
      *(_DWORD *)&v129[4] = 0;
      if (v88 < 0.0)
      {
        v98 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v128 + 1, (float *)&v128);
        v127 = 0.0;
        if (v91 > v98)
        {
          *(_QWORD *)&v129[4] = v128;
          *(_DWORD *)v129 = 0;
LABEL_55:
          v91 = v98;
        }
      }
    }
    else
    {
      if (v87 >= 0.0)
      {
        if (v88 >= 0.0)
        {
          v137.f32[0] = v117 + v31;
          v137.f32[1] = v118 + v30;
          v138 = v119 + v32;
          v135.f32[0] = v34 - v31;
          v135.f32[1] = v33 - v30;
          v136 = v35 - v32;
          v91 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)&v137, (float *)&v135, (float *)&v129[8], (float *)v129);
          *(float *)&v129[4] = 1.0 - *(float *)v129;
          goto LABEL_77;
        }
        v91 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v129[8], (float *)&v129[4]);
        *(_DWORD *)v129 = 0;
      }
      else
      {
        v91 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a5, (float *)&v129[8], (float *)v129);
        *(_DWORD *)&v129[4] = 0;
      }
      v100 = a4[1].f32[0];
      v101 = a3[1].f32[0] + v100;
      v102 = *a4;
      v137 = vadd_f32(*a3, *a4);
      v138 = v101;
      v103 = a5[1].f32[0] - v100;
      v135 = vsub_f32(*a5, v102);
      v136 = v103;
      v98 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)&v137, (float *)&v135, (float *)&v128 + 1, &v127);
      *(float *)&v128 = 1.0 - v127;
      if (v91 > v98)
      {
        *(float *)&v129[4] = 1.0 - v127;
        *(_DWORD *)&v129[8] = HIDWORD(v128);
        *(float *)v129 = v127;
        goto LABEL_55;
      }
    }
LABEL_77:
    v112 = a1[1].f32[0] + a2[1].f32[0];
    v125 = vadd_f32(*a1, *a2);
    v126 = v112;
    v113 = a3[1].f32[0];
    v114 = a4[1].f32[0] + v113;
    v115 = *a3;
    v137 = vadd_f32(*a4, *a3);
    v138 = v114;
    v116 = v113 + a5[1].f32[0];
    v135 = vadd_f32(v115, *a5);
    v136 = v116;
    v123.i32[0] = 0;
    v121.i32[0] = 0;
    physx::Gu::closestPtPointTriangle((float *)&v125, (float *)a3, &v137, &v135, (float *)&v123, (float *)&v121, (uint64_t)&v132);
    if (v91 <= (float)((float)((float)((float)(v133 - v125.f32[1]) * (float)(v133 - v125.f32[1]))
                              + (float)((float)(v132 - v125.f32[0]) * (float)(v132 - v125.f32[0])))
                      + (float)((float)(v134 - v126) * (float)(v134 - v126))))
      goto LABEL_64;
    v59 = v123.i32[0];
    v60 = v121.i32[0];
    goto LABEL_18;
  }
  if ((float)(v87 + v88) <= 1.0)
  {
    if (v87 >= 0.0)
    {
      if (v88 >= 0.0)
      {
        v137.f32[0] = v117 + v31;
        v137.f32[1] = v118 + v30;
        v138 = v119 + v32;
        v135.f32[0] = v117 + v34;
        v135.f32[1] = v118 + v33;
        v136 = v119 + v35;
        v125.i32[0] = 0;
        v123.i32[0] = 0;
        physx::Gu::closestPtPointTriangle((float *)a1, (float *)a3, &v137, &v135, (float *)&v125, (float *)&v123, (uint64_t)&v132);
        *(_DWORD *)v129 = v123.i32[0];
        *(_DWORD *)&v129[4] = v125.i32[0];
        *(_DWORD *)&v129[8] = 0;
        goto LABEL_64;
      }
      v89 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v129[8], (float *)&v129[4]);
      *(_DWORD *)v129 = 0;
    }
    else
    {
      v89 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a5, (float *)&v129[8], (float *)v129);
      *(_DWORD *)&v129[4] = 0;
      if (v88 < 0.0)
      {
        v92 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v128 + 1, (float *)&v128);
        v127 = 0.0;
        if (v89 > v92)
        {
          *(_QWORD *)&v129[4] = v128;
          *(_DWORD *)v129 = 0;
LABEL_40:
          v89 = v92;
        }
      }
    }
  }
  else
  {
    if (v87 < 0.0)
    {
      v89 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a5, (float *)&v129[8], (float *)v129);
      *(_DWORD *)&v129[4] = 0;
LABEL_38:
      v94 = a4[1].f32[0];
      v95 = a3[1].f32[0] + v94;
      v96 = *a4;
      v137 = vadd_f32(*a3, *a4);
      v138 = v95;
      v97 = a5[1].f32[0] - v94;
      v135 = vsub_f32(*a5, v96);
      v136 = v97;
      v92 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)&v137, (float *)&v135, (float *)&v128 + 1, &v127);
      *(float *)&v128 = 1.0 - v127;
      if (v89 <= v92)
        goto LABEL_61;
      *(float *)&v129[4] = 1.0 - v127;
      *(_DWORD *)&v129[8] = HIDWORD(v128);
      *(float *)v129 = v127;
      goto LABEL_40;
    }
    if (v88 < 0.0)
    {
      v89 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v129[8], (float *)&v129[4]);
      *(_DWORD *)v129 = 0;
      goto LABEL_38;
    }
    v137.f32[0] = v117 + v31;
    v137.f32[1] = v118 + v30;
    v138 = v119 + v32;
    v135.f32[0] = v34 - v31;
    v135.f32[1] = v33 - v30;
    v136 = v35 - v32;
    v89 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)&v137, (float *)&v135, (float *)&v129[8], (float *)v129);
    *(float *)&v129[4] = 1.0 - *(float *)v129;
  }
LABEL_61:
  v108 = a3[1].f32[0];
  v109 = a4[1].f32[0] + v108;
  v110 = *a3;
  v137 = vadd_f32(*a4, *a3);
  v138 = v109;
  v111 = v108 + a5[1].f32[0];
  v135 = vadd_f32(v110, *a5);
  v136 = v111;
  v125.i32[0] = 0;
  v123.i32[0] = 0;
  physx::Gu::closestPtPointTriangle((float *)a1, (float *)a3, &v137, &v135, (float *)&v125, (float *)&v123, (uint64_t)&v132);
  if (v89 > (float)((float)((float)((float)(v133 - a1->f32[1]) * (float)(v133 - a1->f32[1]))
                           + (float)((float)(v132 - a1->f32[0]) * (float)(v132 - a1->f32[0])))
                   + (float)((float)(v134 - a1[1].f32[0]) * (float)(v134 - a1[1].f32[0]))))
  {
    v59 = v125.i32[0];
    v60 = v123.i32[0];
    *(_DWORD *)&v129[8] = 0;
    goto LABEL_63;
  }
LABEL_64:
  if (a6)
    *a6 = *(_DWORD *)&v129[8];
  if (a7)
    *a7 = *(_DWORD *)&v129[4];
  if (a8)
    *a8 = *(_DWORD *)v129;
}

void physx::Gu::distanceSegmentTriangleSquared(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, float32x4_t *a7)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x4_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  int v29;
  int8x8_t v30;
  float32x4_t v31;
  int32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int v36;
  float32x2_t v37;
  float32x2_t v43;
  float32x2_t v44;
  int v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x2_t v48;
  float32x4_t v49;
  float32x2_t v50;
  float32x4_t v51;
  float32x2_t v52;
  float32x2_t v53;
  int v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  int32x4_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  int8x16_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  float32x2_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  int32x4_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;

  v13 = *a2;
  v14 = *a1;
  v15 = vsubq_f32(*a2, *a1);
  v101 = v15;
  v16 = *a4;
  v17 = *a3;
  v18 = vsubq_f32(*a4, *a3);
  v19 = *a5;
  v20 = vsubq_f32(*a5, *a3);
  v99 = v20;
  v100 = v18;
  v98 = vsubq_f32(v19, v16);
  v21 = vmulq_f32(v18, v18);
  v21.i64[0] = vpaddq_f32(v21, v21).u64[0];
  v22 = vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32);
  v23 = vmulq_f32(v18, v20);
  v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
  v24 = vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32);
  v25 = vmulq_f32(v20, v20);
  v25.i64[0] = vpaddq_f32(v25, v25).u64[0];
  v26 = vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32);
  v27 = vsub_f32(vmul_f32(v22, v26), vmul_f32(v24, v24));
  v28 = vrecpe_f32(v27);
  v29 = 4;
  do
  {
    v28 = vmul_f32(v28, vrecps_f32(v27, v28));
    --v29;
  }
  while (v29);
  v30 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL), *(float32x2_t *)v20.f32);
  *(int8x8_t *)v31.f32 = vext_s8(v30, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), *(float32x2_t *)v20.f32), *(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)), 4uLL);
  v31.i64[1] = v30.u32[0];
  v32 = vcgtz_f32(v27);
  v33 = vpadd_f32(vmul_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32), vmul_f32((float32x2_t)v30.u32[0], (float32x2_t)v30.u32[0]));
  v34 = vpadd_f32(v33, v33);
  v35 = vrsqrte_f32(v34);
  v36 = 4;
  do
  {
    v35 = vmul_f32(v35, vrsqrts_f32(vmul_f32(v35, v35), v34));
    --v36;
  }
  while (v36);
  v37 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32(v32, 0), (int8x8_t)v28);
  __asm { FMOV            V6.2S, #1.0 }
  v43 = vmul_f32(v34, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v34), 0), _D6, (int8x8_t)v35));
  v44 = vrecpe_f32(v43);
  v45 = 4;
  do
  {
    v44 = vmul_f32(v44, vrecps_f32(v43, v44));
    --v45;
  }
  while (v45);
  v46 = vmulq_n_f32(v31, v44.f32[0]);
  v46.i32[3] = 0;
  v47 = vmulq_f32(vsubq_f32(v14, v17), v46);
  v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
  v48 = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32);
  v49 = vmulq_f32(vsubq_f32(v13, v17), v46);
  v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
  v50 = vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcltz_f32(vmul_f32(v48, v50)), 0), *(int8x8_t *)v14.f32).u32[0] != -1)
    goto LABEL_11;
  v51 = vmulq_f32(v15, v46);
  v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
  v52 = vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32);
  v53 = vrecpe_f32(v52);
  v54 = 4;
  do
  {
    v53 = vmul_f32(v53, vrecps_f32(v52, v53));
    --v54;
  }
  while (v54);
  v55 = vmlaq_n_f32(v14, v15, vmul_f32(v53, vneg_f32(v48)).f32[0]);
  v55.i64[1] = vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u32[0];
  v56 = vsubq_f32(v55, v17);
  v57 = vmulq_f32(v18, v56);
  v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
  *(float32x2_t *)v57.f32 = vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32);
  v58 = vmulq_f32(v20, v56);
  v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
  *(float32x2_t *)v58.f32 = vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32);
  *(float32x2_t *)v56.f32 = vmul_f32(vsub_f32(vmul_f32(v26, *(float32x2_t *)v57.f32), vmul_f32(v24, *(float32x2_t *)v58.f32)), v37);
  *(float32x2_t *)v58.f32 = vmul_f32(vsub_f32(vmul_f32(v22, *(float32x2_t *)v58.f32), vmul_f32(v24, *(float32x2_t *)v57.f32)), v37);
  v59 = (float32x2_t)vdup_n_s32(0x3F800001u);
  if (vuzp1_s8((int8x8_t)vcltz_s16(vshl_n_s16(vdup_lane_s16((int16x4_t)vand_s8(vand_s8(vand_s8((int8x8_t)vcge_f32(*(float32x2_t *)v56.f32, (float32x2_t)0xB4000000B4000000), (int8x8_t)vcge_f32(v59, *(float32x2_t *)v56.f32)), vand_s8((int8x8_t)vcge_f32(v59, *(float32x2_t *)v58.f32), (int8x8_t)vcge_f32(*(float32x2_t *)v58.f32, (float32x2_t)0xB4000000B4000000))), (int8x8_t)vcgt_f32(v59, vadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v58.f32))), 0), 0xFuLL)), *(int8x8_t *)v55.f32).u32[0] == -1)
  {
    *a7 = v55;
    *a6 = v55;
  }
  else
  {
LABEL_11:
    v60 = vmul_f32(v48, v48);
    v61 = vmul_f32(v50, v50);
    v96 = 0u;
    v97 = 0u;
    v94 = v46;
    v95 = v50;
    v93 = v48;
    *(double *)v62.i64 = physx::Gu::distanceSegmentSegmentSquared4((int32x4_t *)a1, (int32x2_t *)&v101, (int32x4_t *)a3, (int32x4_t *)&v100, (int32x4_t *)a4, (int32x4_t *)&v98, (int32x4_t *)a3, (int32x4_t *)&v99, (int32x4_t *)a3, (int32x4_t *)&v100, &v97, &v96);
    v63 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 0);
    v64 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 1);
    v65 = (float32x2_t)vdup_laneq_s32(v62, 2);
    v66 = (int8x16_t)vmlaq_n_f32(*a1, v101, v97.f32[0]);
    v66.i64[1] = vextq_s8(v66, v66, 8uLL).u32[0];
    v67 = vmlsq_lane_f32(*a1, v94, v93, 0);
    v67.i64[1] = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u32[0];
    v68 = vsubq_f32(v67, *a3);
    v69 = vmlsq_lane_f32(*a2, v94, v95, 0);
    v69.i64[1] = vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u32[0];
    v70 = vsubq_f32(v69, *a3);
    v71 = (int8x16_t)vmlaq_n_f32(*a3, v100, v96.f32[0]);
    v71.i64[1] = vextq_s8(v71, v71, 8uLL).u32[0];
    v72 = (int8x16_t)vmlaq_lane_f32(*a1, v101, *(float32x2_t *)v97.f32, 1);
    v72.i64[1] = vextq_s8(v72, v72, 8uLL).u32[0];
    v73 = (int8x16_t)vmlaq_lane_f32(*a4, v98, *(float32x2_t *)v96.f32, 1);
    v73.i64[1] = vextq_s8(v73, v73, 8uLL).u32[0];
    v74 = (int8x16_t)vmlaq_laneq_f32(*a1, v101, v97, 2);
    v74.i64[1] = vextq_s8(v74, v74, 8uLL).u32[0];
    v75 = (int8x16_t)vmlaq_laneq_f32(*a3, v99, v96, 2);
    v76 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcge_f32(v63, v64), (int8x8_t)vcgt_f32(v65, v64)), 0);
    v77 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v64, v63), (int8x8_t)vcgt_f32(v65, v63)), 0);
    v78 = (float32x2_t)vbsl_s8(*(int8x8_t *)v77.i8, (int8x8_t)v63, vbsl_s8(*(int8x8_t *)v76.i8, (int8x8_t)v64, (int8x8_t)v65));
    v79 = vbslq_s8(v77, v66, vbslq_s8(v76, v72, v74));
    v80 = (int8x16_t)vdupq_lane_s32(vcgt_f32(v78, v60), 0);
    v81 = vbslq_s8(v80, *(int8x16_t *)a1, v79);
    v75.i64[1] = vextq_s8(v75, v75, 8uLL).u32[0];
    v82 = (int8x16_t)vdupq_lane_s32(vcgt_f32(v61, v60), 0);
    v83 = vbslq_s8(v77, v71, vbslq_s8(v76, v73, v75));
    v84 = vmulq_f32(v100, v68);
    v84.i64[0] = vpaddq_f32(v84, v84).u64[0];
    *(float32x2_t *)v84.f32 = vpadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32);
    v85 = vmulq_f32(v68, v99);
    v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
    *(float32x2_t *)v85.f32 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
    *(float32x2_t *)v74.i8 = vmul_f32(vsub_f32(vmul_f32(v26, *(float32x2_t *)v84.f32), vmul_f32(v24, *(float32x2_t *)v85.f32)), v37);
    *(float32x2_t *)v84.f32 = vmul_f32(vsub_f32(vmul_f32(v22, *(float32x2_t *)v85.f32), vmul_f32(v24, *(float32x2_t *)v84.f32)), v37);
    *(int32x2_t *)v75.i8 = vdup_n_s32(0x3F800001u);
    *(int8x8_t *)v84.f32 = vand_s8(vand_s8(vand_s8((int8x8_t)vcge_f32(*(float32x2_t *)v74.i8, (float32x2_t)0xB4000000B4000000), (int8x8_t)vcge_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v74.i8)), vand_s8((int8x8_t)vcge_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v84.f32), (int8x8_t)vcge_f32(*(float32x2_t *)v84.f32, (float32x2_t)0xB4000000B4000000))), (int8x8_t)vcgt_f32(*(float32x2_t *)v75.i8, vadd_f32(*(float32x2_t *)v74.i8, *(float32x2_t *)v84.f32)));
    v86 = vmulq_f32(v100, v70);
    v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
    *(float32x2_t *)v86.f32 = vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32);
    v87 = vmulq_f32(v99, v70);
    v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
    *(float32x2_t *)v87.f32 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32);
    *(float32x2_t *)v68.f32 = vmul_f32(vsub_f32(vmul_f32(v26, *(float32x2_t *)v86.f32), vmul_f32(v24, *(float32x2_t *)v87.f32)), v37);
    *(float32x2_t *)v86.f32 = vmul_f32(vsub_f32(vmul_f32(v22, *(float32x2_t *)v87.f32), vmul_f32(v24, *(float32x2_t *)v86.f32)), v37);
    *(int8x8_t *)v86.f32 = vand_s8(vand_s8(vand_s8((int8x8_t)vcge_f32(*(float32x2_t *)v68.f32, (float32x2_t)0xB4000000B4000000), (int8x8_t)vcge_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v68.f32)), vand_s8((int8x8_t)vcge_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v86.f32), (int8x8_t)vcge_f32(*(float32x2_t *)v86.f32, (float32x2_t)0xB4000000B4000000))), (int8x8_t)vcgt_f32(*(float32x2_t *)v75.i8, vadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v86.f32)));
    v88 = vdupq_lane_s32((int32x2_t)vand_s8(*(int8x8_t *)v86.f32, *(int8x8_t *)v84.f32), 0);
    v89 = (int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32((int32x2_t)vand_s8(*(int8x8_t *)v86.f32, (int8x8_t)vcgt_f32(v78, v61)), 0), 0x1FuLL));
    v90 = vbslq_s8(v89, *(int8x16_t *)a2, v79);
    v91 = (int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(*(int32x2_t *)v84.f32, 0), 0x1FuLL));
    v92 = (int8x16_t)vcltzq_s32(vshlq_n_s32(v88, 0x1FuLL));
    *(int8x16_t *)a6 = vbslq_s8(v92, vbslq_s8(v82, *(int8x16_t *)a1, *(int8x16_t *)a2), vbslq_s8(v91, v81, v90));
    *(int8x16_t *)a7 = vbslq_s8(v92, vbslq_s8(v82, (int8x16_t)v67, (int8x16_t)v69), vbslq_s8(v91, vbslq_s8(v80, (int8x16_t)v67, v83), vbslq_s8(v89, (int8x16_t)v69, v83)));
  }
}

uint64_t physx::Gu::epaPenetration(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned int v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  int v8;
  int v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t *v19;
  unsigned int v20;
  float32x4_t v21;
  unsigned int v22;
  float32x4_t v23;
  int v25;
  _DWORD *v26;
  _DWORD v27[1921];
  char v28;
  int v29;
  int v30;
  int v31;
  float32x4_t v32[4];
  float32x4_t v33[4];
  uint64_t v34;

  v4 = MEMORY[0x24BDAC7A8](a1);
  v6 = v5;
  v7 = *(float *)&v4;
  v9 = v8;
  v10 = v3;
  v12 = v11;
  v14 = v13;
  v34 = *MEMORY[0x24BDAC8D0];
  if (v3)
  {
    v15 = v2;
    v16 = v1;
    v17 = v3;
    v18 = v32;
    v19 = v33;
    do
    {
      v20 = *v16++;
      *(double *)v21.i64 = (*(double (**)(_QWORD *, _QWORD))*v14)(v14, v20);
      *v19++ = v21;
      v22 = *v15++;
      *(double *)v23.i64 = (*(double (**)(_QWORD *, _QWORD))*v12)(v12, v22);
      *v18++ = v23;
      --v17;
    }
    while (v17);
  }
  v25 = 0;
  v26 = v27;
  v27[1920] = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  return physx::Gu::EPA::PenetrationDepth((uint64_t)&v25, v14, v12, v33, v32, v10, v9, v6, v7);
}

uint64_t physx::Gu::EPA::PenetrationDepth(uint64_t _X0, _QWORD *a2, _QWORD *a3, float32x4_t *a4, float32x4_t *a5, int a6, int a7, uint64_t a8, float a9)
{
  __int128 v9;
  _QWORD *v13;
  uint64_t v14;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  BOOL v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x8_t v33;
  float32x4_t v34;
  float32x2_t v35;
  float32x2_t v36;
  int v37;
  float32x2_t v39;
  float32x2_t v40;
  int v41;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t *v45;
  float32x4_t *v46;
  float32x4_t *v47;
  float32x4_t *v48;
  const float *v49;
  float32x2_t v50;
  const float *v51;
  float32x2_t v52;
  _DWORD *v53;
  float32x2_t v54;
  int *v55;
  uint64_t v56;
  signed int v58;
  uint64_t v59;
  int *v60;
  int v61;
  int v62;
  _DWORD *v63;
  uint64_t v64;
  unsigned int v65;
  float32x4_t **v66;
  float32x4_t *v67;
  float32x4_t *v68;
  int v69;
  unsigned int v70;
  float v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v75;
  float32x4_t *v76;
  const float *f32;
  float32x2_t v83;
  double (*v84)(_QWORD *, __int128 *);
  _QWORD *v85;
  float32x4_t *v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v94;
  float32x2_t v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  __int128 v99;
  int v100;
  int v101;
  int v102;
  unsigned int *v103;
  float32x4_t *v104;
  uint64_t v105;
  float32x4_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _OWORD *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  float32x4_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  float32x4_t *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  _DWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  float32x4_t v130;
  float32x4_t v131;
  float32x2_t v132;
  float32x2_t v133;
  int v134;
  int v137;
  _BYTE *v138;
  float32x4_t *v139;
  _QWORD *v140;
  _QWORD *v141;
  float32x4_t *v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  signed int v149;
  int v150;
  float32x2_t v151;
  __int128 v152;
  float32x4_t v153[64];
  uint64_t v154;

  v13 = a2;
  v14 = _X0;
  v154 = *MEMORY[0x24BDAC8D0];
  __asm
  {
    PRFM            #0, [X0,#0xA10]
    PRFM            #0, [X0,#0xA90]
  }
  *(int32x2_t *)&v9 = vdup_n_s32(0x7F7FFFFFu);
  v151 = (float32x2_t)v9;
  v20 = *a4;
  *(float32x4_t *)(_X0 + 528) = *a4;
  v21 = a4[1];
  *(float32x4_t *)(_X0 + 544) = v21;
  v22 = a4[2];
  *(float32x4_t *)(_X0 + 560) = v22;
  v23 = a4[3];
  *(float32x4_t *)(_X0 + 576) = v23;
  v24 = *a5;
  *(float32x4_t *)(_X0 + 1552) = *a5;
  v25 = a5[1];
  *(float32x4_t *)(_X0 + 1568) = v25;
  v26 = a5[2];
  *(float32x4_t *)(_X0 + 1584) = v26;
  v27 = a5[3];
  *(float32x4_t *)(_X0 + 1600) = v27;
  v150 = 0;
  *(_DWORD *)_X0 = 0;
  v143 = v9;
  switch(a6)
  {
    case 1:
      v148 = vsubq_f32(v20, v24);
      v152 = xmmword_2260E5F10;
      v153[0] = (float32x4_t)xmmword_2261027D0;
      *(double *)v28.i64 = (*(double (**)(_QWORD *, float32x4_t *))(*a2 + 8))(a2, v153);
      v146 = v28;
      *(double *)v21.i64 = (*(double (**)(_QWORD *, __int128 *))(*a3 + 8))(a3, &v152);
      *(float32x4_t *)(v14 + 544) = v146;
      *(float32x4_t *)(v14 + 1568) = v21;
      v22.i64[0] = v148.i64[0];
      *(int16x4_t *)v21.f32 = vmovn_s32(vceqq_f32(v148, vsubq_f32(v146, v21)));
      *(int8x8_t *)v21.f32 = vuzp1_s8(*(int8x8_t *)v21.f32, *(int8x8_t *)v21.f32);
      if ((~v21.i32[0] & 0xFFFFFF) == 0)
        return 7;
      goto LABEL_3;
    case 2:
LABEL_3:
      v29 = physx::Gu::EPA::expandSegment(v14, (uint64_t)v13, (uint64_t)a3, &v150, &v151, *(double *)v21.i64, *(double *)v22.i64, *(double *)v25.i64, *(double *)v26.i64, (int32x4_t)v23, (int32x4_t)v27);
      goto LABEL_5;
    case 3:
      v29 = physx::Gu::EPA::expandTriangle((int *)_X0, &v150, &v151);
LABEL_5:
      v9 = v143;
      if (!v29)
        return 7;
      goto LABEL_15;
    case 4:
      v30 = vsubq_f32(v20, v24);
      v31 = (int8x16_t)vsubq_f32(vsubq_f32(v21, v25), v30);
      v32 = (int8x16_t)vsubq_f32(vsubq_f32(v22, v26), v30);
      v33 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 4uLL), *(float32x2_t *)v32.i8);
      *(int8x8_t *)v34.f32 = vext_s8(v33, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), *(float32x2_t *)v32.i8), *(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)), 4uLL);
      v34.i64[1] = v33.u32[0];
      *(float32x2_t *)v32.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32), vmul_f32((float32x2_t)v33.u32[0], (float32x2_t)v33.u32[0]));
      v35 = vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8);
      v36 = vrsqrte_f32(v35);
      v37 = 4;
      do
      {
        v36 = vmul_f32(v36, vrsqrts_f32(vmul_f32(v36, v36), v35));
        --v37;
      }
      while (v37);
      __asm { FMOV            V19.2S, #1.0 }
      v39 = vmul_f32(v35, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v35), 0), _D19, (int8x8_t)v36));
      v40 = vrecpe_f32(v39);
      v41 = 4;
      do
      {
        v40 = vmul_f32(v40, vrecps_f32(v39, v40));
        --v41;
      }
      while (v41);
      v43 = vmulq_n_f32(v34, v40.f32[0]);
      v43.i32[3] = 0;
      v44 = vmulq_f32(vsubq_f32(vsubq_f32(v23, v27), v30), v43);
      v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
      if (vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32).f32[0] > 0.0)
      {
        *(float32x4_t *)(_X0 + 1584) = v25;
        *(float32x4_t *)(_X0 + 544) = v22;
        *(float32x4_t *)(_X0 + 560) = v21;
        *(float32x4_t *)(_X0 + 1568) = v26;
      }
      v45 = physx::Gu::EPA::addFacet(_X0, 0, 1u, 2u, &v151);
      v46 = physx::Gu::EPA::addFacet(v14, 0, 3u, 1u, &v151);
      v47 = physx::Gu::EPA::addFacet(v14, 0, 2u, 3u, &v151);
      v48 = physx::Gu::EPA::addFacet(v14, 1u, 3u, 2u, &v151);
      if (!*(_DWORD *)v14)
        return 7;
      v45[1].i64[1] = (uint64_t)v46;
      v45[3].i8[0] = 2;
      v46[2].i64[1] = (uint64_t)v45;
      v46[3].i8[2] = 0;
      v45[2].i64[0] = (uint64_t)v48;
      v45[3].i8[1] = 2;
      v48[2].i64[1] = (uint64_t)v45;
      v48[3].i8[2] = 1;
      v45[2].i64[1] = (uint64_t)v47;
      v45[3].i8[2] = 0;
      v47[1].i64[1] = (uint64_t)v45;
      v47[3].i8[0] = 2;
      v46[1].i64[1] = (uint64_t)v47;
      v46[3].i8[0] = 2;
      v47[2].i64[1] = (uint64_t)v46;
      v47[3].i8[2] = 0;
      v46[2].i64[0] = (uint64_t)v48;
      v46[3].i8[1] = 0;
      v48[1].i64[1] = (uint64_t)v46;
      v48[3].i8[0] = 1;
      v47[2].i64[0] = (uint64_t)v48;
      v47[3].i8[1] = 1;
      v48[2].i64[0] = (uint64_t)v47;
      v48[3].i8[1] = 1;
      v150 = 4;
      v13 = a2;
      v9 = v143;
LABEL_15:
      v137 = a7;
      v49 = (const float *)(v13[1] + 20);
      v50 = vld1_dup_f32(v49);
      v51 = (const float *)(a3[1] + 20);
      v52 = vld1_dup_f32(v51);
      v53 = (_DWORD *)(v14 + 7704);
      v54 = vmul_f32(vmin_f32(v50, v52), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
      v55 = (int *)(v14 + 7968);
      v56 = v14 + 7708;
      _X22 = v14 + 6672;
      v58 = v150;
      v138 = (_BYTE *)(v14 + 7700);
      v140 = v13;
      v141 = a3;
      break;
    default:
      goto LABEL_15;
  }
  while (1)
  {
    v59 = *(unsigned int *)(v14 + 8224);
    if ((_DWORD)v59)
    {
      v60 = v55;
      do
      {
        v62 = *v60++;
        v61 = v62;
        v63 = (_DWORD *)(v14 + 7704);
        if (*v53 - 1 != v62)
        {
          v64 = *(unsigned int *)(v14 + 7964);
          *(_DWORD *)(v14 + 7964) = v64 + 1;
          v63 = (_DWORD *)(v56 + 4 * v64);
        }
        *v63 = v61;
        --v59;
      }
      while (v59);
    }
    *(_DWORD *)(v14 + 8224) = 0;
    v65 = *(_DWORD *)v14 - 1;
    *(_DWORD *)v14 = v65;
    v66 = *(float32x4_t ***)(v14 + 8);
    v67 = *v66;
    v68 = v66[v65];
    if (v65 < 2)
    {
      v75 = 0;
    }
    else
    {
      v69 = 0;
      v70 = 0;
      v71 = v68[1].f32[0];
      v72 = 1;
      while (1)
      {
        v73 = v69 + 2;
        v66 = *(float32x4_t ***)(v14 + 8);
        _CF = v66[v73][1].f32[0] >= v66[v72][1].f32[0] || v73 >= v65;
        v75 = _CF ? v72 : v72 + 1;
        v76 = v66[v75];
        if (v71 < v76[1].f32[0])
          break;
        v66[v70] = v76;
        v69 = 2 * v75;
        v72 = (2 * v75) | 1;
        v70 = v75;
        if (v72 >= v65)
        {
          v66 = *(float32x4_t ***)(v14 + 8);
          goto LABEL_34;
        }
      }
      v75 = v70;
    }
LABEL_34:
    v66[v75] = v68;
    v67[3].i8[7] = 0;
    if (v67[3].i8[6])
      goto LABEL_55;
    v144 = v9;
    __asm { PRFM            #0, [X22] }
    _X8 = v14 + 6800;
    __asm { PRFM            #0, [X8] }
    _X8 = v14 + 6928;
    __asm { PRFM            #0, [X8] }
    v152 = 0uLL;
    v152 = (__int128)*v67;
    f32 = v67[1].f32;
    v83 = vld1_dup_f32(f32);
    v84 = *(double (**)(_QWORD *, __int128 *))(*v13 + 8);
    v85 = v13;
    v149 = v58;
    v86 = v67;
    *(double *)v87.i64 = v84(v85, &v152);
    v147 = v87;
    v88 = vnegq_f32((float32x4_t)v152);
    v88.i32[3] = 0;
    v153[0] = v88;
    *(double *)v89.i64 = (*(double (**)(_QWORD *, float32x4_t *))(*a3 + 8))(a3, v153);
    v90 = vsubq_f32(v147, v89);
    _X10 = (float32x4_t *)(v14 + 16 * v149);
    __asm
    {
      PRFM            #0, [X10,#0x290]
      PRFM            #0, [X10,#0x690]
    }
    v94 = vmulq_f32(v90, (float32x4_t)v152);
    v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
    v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32(v54, vabd_f32(v95, v83)), 0), *(int8x8_t *)v89.f32).u32[0] == -1)
      break;
    v96 = 0;
    v97 = 0;
    v98 = 0;
    *((_QWORD *)&v99 + 1) = *((_QWORD *)&v144 + 1);
    *(float32x2_t *)&v99 = vmin_f32(*(float32x2_t *)&v144, v95);
    v151 = (float32x2_t)v99;
    _X10[33] = v147;
    _X10[97] = v89;
    *(_DWORD *)(v14 + 7696) = 0;
    *v138 = 0;
    v86[3].i8[6] = 1;
    do
    {
      v100 = 0;
      v101 = v86[3].i8[v98];
      v153[0].i64[0] = v86[1].i64[v98 + 1];
      v153[0].i32[2] = v101;
      v102 = 1;
      while (1)
      {
        v103 = (unsigned int *)&v153[v100];
        v104 = *(float32x4_t **)v103;
        if (!*(_BYTE *)(*(_QWORD *)v103 + 54))
          break;
LABEL_44:
        v102 = v100--;
        if (!v102)
          goto LABEL_45;
      }
      v105 = v103[2];
      v106 = vmulq_f32(*v104, vsubq_f32(v90, vsubq_f32(*(float32x4_t *)(v14 + 528 + 16 * v104[3].i8[3]), *(float32x4_t *)(v14 + 1552 + 16 * v104[3].i8[3]))));
      v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
      if (vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32).f32[0] >= 0.0)
      {
        v104[3].i8[6] = 1;
        v107 = physx::Gu::lookUp[v105];
        v108 = physx::Gu::lookUp[v107];
        v109 = v104[1].i64[v108 + 1];
        LODWORD(v108) = v104[3].i8[v108];
        *(_QWORD *)v103 = v109;
        v103[2] = v108;
        v110 = v104[1].i64[v107 + 1];
        LODWORD(v108) = v104[3].i8[v107];
        v100 = v102 + 1;
        v111 = (_OWORD *)v153[v102].f32;
        *(_QWORD *)v111 = v110;
        *((_DWORD *)v111 + 2) = v108;
        if (!v104[3].i8[7])
        {
          v112 = v104[3].u8[8];
          v113 = *(unsigned int *)(v14 + 8224);
          *(_DWORD *)(v14 + 8224) = v113 + 1;
          *(_DWORD *)(v14 + 7968 + 4 * v113) = v112;
        }
        goto LABEL_44;
      }
      if (v97 <= 0x3F)
      {
        v114 = _X22 + 16 * v97;
        *(_DWORD *)(v14 + 7696) = v97 + 1;
        *(_QWORD *)v114 = v104;
        *(_DWORD *)(v114 + 8) = v105;
        ++v97;
        goto LABEL_44;
      }
      v96 = 1;
      *v138 = 1;
LABEL_45:
      ++v98;
    }
    while (v98 != 3);
    if (!v97 || v96 || v97 > *(_DWORD *)(v14 + 7964) - *(_DWORD *)(v14 + 7704) + 64)
    {
      v125 = v140[1];
      v126 = v141[1];
      v127 = v14 + 528;
      v128 = v14 + 1552;
      v67 = v86;
LABEL_63:
      physx::Gu::calculateContactInformation(v127, v128, v67, v125, v126, v137, a8);
      return 6;
    }
    v139 = v86;
    v145 = v99;
    v115 = physx::Gu::EPA::addFacet(v14, *(char *)(*(_QWORD *)(v14 + 6672) + 51 + physx::Gu::lookUp[*(unsigned int *)(v14 + 6680)]), *(char *)(*(_QWORD *)(v14 + 6672) + 51 + *(unsigned int *)(v14 + 6680)), v149, &v151);
    v116 = *(_QWORD *)(v14 + 6672);
    v117 = *(unsigned int *)(v14 + 6680);
    v115[1].i64[1] = v116;
    v115[3].i8[0] = v117;
    *(_QWORD *)(v116 + 8 * v117 + 24) = v115;
    *(_BYTE *)(v116 + v117 + 48) = 0;
    v142 = v115;
    if (v97 >= 2)
    {
      v118 = 0;
      v119 = v115;
      do
      {
        v115 = physx::Gu::EPA::addFacet(v14, *(char *)(*(_QWORD *)(v14 + v118 + 6688)+ 51+ physx::Gu::lookUp[*(unsigned int *)(v14 + v118 + 6696)]), *(char *)(*(_QWORD *)(v14 + v118 + 6688) + 51 + *(unsigned int *)(v14 + v118 + 6696)), v149, &v151);
        v120 = *(_QWORD *)(v14 + v118 + 6688);
        v121 = *(unsigned int *)(v14 + v118 + 6696);
        v115[1].i64[1] = v120;
        v115[3].i8[0] = v121;
        *(_QWORD *)(v120 + 8 * v121 + 24) = v115;
        *(_BYTE *)(v120 + v121 + 48) = 0;
        v115[2].i64[1] = (uint64_t)v119;
        v115[3].i8[2] = 1;
        v119[2].i64[0] = (uint64_t)v115;
        v119[3].i8[1] = 2;
        v118 += 16;
        v119 = v115;
      }
      while (16 * v97 - 16 != v118);
    }
    v58 = v149 + 1;
    a3 = v141;
    v142[2].i64[1] = (uint64_t)v115;
    v142[3].i8[2] = 1;
    v115[2].i64[0] = (uint64_t)v142;
    v115[3].i8[1] = 2;
    v55 = (int *)(v14 + 7968);
    v13 = v140;
    v9 = v145;
    v56 = v14 + 7708;
    v67 = v139;
LABEL_55:
    v122 = v67[3].u8[8];
    v123 = (_DWORD *)(v14 + 7704);
    if (*v53 - 1 != v122)
    {
      v124 = *(unsigned int *)(v14 + 7964);
      *(_DWORD *)(v14 + 7964) = v124 + 1;
      v123 = (_DWORD *)(v56 + 4 * v124);
    }
    *v123 = v122;
    if (!*(_DWORD *)v14 || *(float *)&v9 <= *(float *)(**(_QWORD **)(v14 + 8) + 16) || v58 == 64)
    {
      v125 = v13[1];
      v126 = a3[1];
      v127 = v14 + 528;
      v128 = v14 + 1552;
      goto LABEL_63;
    }
  }
  physx::Gu::calculateContactInformation(v14 + 528, v14 + 1552, v86, v140[1], v141[1], v137, a8);
  if (v137)
  {
    v130 = vsubq_f32(*(float32x4_t *)a8, *(float32x4_t *)(a8 + 16));
    v131 = vmulq_f32(v130, v130);
    v131.i64[0] = vpaddq_f32(v131, v131).u64[0];
    v132 = vpadd_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32);
    v133 = vrsqrte_f32(v132);
    v134 = 4;
    do
    {
      v133 = vmul_f32(v133, vrsqrts_f32(vmul_f32(v133, v133), v132));
      --v134;
    }
    while (v134);
    __asm { FMOV            V5.2S, #1.0 }
    if ((float)((float)(0.001 * a9) + vabs_f32(*(float32x2_t *)(a8 + 64)).f32[0]) < *(float *)vand_s8((int8x8_t)vmul_f32(v132, (float32x2_t)vbsl_s8((int8x8_t)vceqz_f32(v132), _D5, (int8x8_t)v133)), (int8x8_t)vcgtz_f32(v132)).i32)return 6;
  }
  return 5;
}

float32x4_t *physx::Gu::EPA::addFacet(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, float32x2_t *a5)
{
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  float32x4_t *v10;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x8_t v19;
  float32x4_t v20;
  char *v21;
  float32x2_t v22;
  float32x2_t v24;
  float32x2_t v25;
  int v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x2_t v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;

  v5 = *(_DWORD *)(a1 + 7964);
  if (v5)
  {
    v6 = v5 - 1;
    *(_DWORD *)(a1 + 7964) = v6;
    v7 = *(_DWORD *)(a1 + 4 * v6 + 7708);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 7704);
    *(_DWORD *)(a1 + 7704) = v7 + 1;
  }
  v8 = v7;
  _X9 = (float32x4_t *)(a1 + ((unint64_t)v7 << 6));
  v10 = _X9 + 161;
  __asm { PRFM            #0, [X9,#0xA90] }
  _X9[164].i16[3] = 0;
  _X9[164].i8[3] = a2;
  _X9[164].i8[4] = a3;
  _X9[164].i8[5] = a4;
  _X9[162].i64[1] = 0;
  _X9[163].i64[1] = 0;
  _X9[163].i64[0] = 0;
  _X9[164].i8[2] = -1;
  _X9[164].i16[0] = -1;
  _X9[164].i8[8] = v7;
  v16 = vsubq_f32(*(float32x4_t *)(a1 + 528 + 16 * a2), *(float32x4_t *)(a1 + 1552 + 16 * a2));
  v17 = (int8x16_t)vsubq_f32(vsubq_f32(*(float32x4_t *)(a1 + 528 + 16 * a3), *(float32x4_t *)(a1 + 1552 + 16 * a3)), v16);
  v18 = (int8x16_t)vsubq_f32(vsubq_f32(*(float32x4_t *)(a1 + 528 + 16 * a4), *(float32x4_t *)(a1 + 1552 + 16 * a4)), v16);
  v19 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 4uLL), *(float32x2_t *)v18.i8);
  *(int8x8_t *)v20.f32 = vext_s8(v19, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), *(float32x2_t *)v18.i8), *(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 4uLL);
  v20.i64[1] = v19.u32[0];
  v21 = &_X9[164].i8[7];
  *(float32x2_t *)v18.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32), vmul_f32((float32x2_t)v19.u32[0], (float32x2_t)v19.u32[0]));
  v22 = vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8);
  __asm { FMOV            V4.2S, #1.0 }
  v24 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v22, (float32x2_t)0x3400000034000000), 0), (int8x8_t)v22, _D4);
  v25 = vrsqrte_f32(v24);
  v26 = 4;
  do
  {
    v25 = vmul_f32(v25, vrsqrts_f32(vmul_f32(v25, v25), v24));
    --v26;
  }
  while (v26);
  v27 = vmulq_n_f32(v20, v25.f32[0]);
  v27.i32[3] = 0;
  v28 = vmulq_f32(v16, v27);
  v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
  v29 = vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32);
  *v10 = v27;
  *(_DWORD *)(a1 + (v8 << 6) + 2592) = v29.i32[0];
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(*a5, v29), (int8x8_t)vcgt_f32(v22, (float32x2_t)0x3400000034000000)), 0), (int8x8_t)v29).u32[0] == -1)
  {
    v31 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      v32 = *(_DWORD *)a1;
      while (1)
      {
        v33 = v32 - 1;
        v34 = (v32 - 1) >> 1;
        v35 = *(_QWORD *)(a1 + 8);
        v36 = *(_QWORD *)(v35 + 8 * v34);
        if (v29.f32[0] >= *(float *)(v36 + 16))
          break;
        *(_QWORD *)(v35 + 8 * v32) = v36;
        v32 = v33 >> 1;
        if (v33 <= 1)
          goto LABEL_15;
      }
      v34 = v32;
    }
    else
    {
      v34 = 0;
    }
LABEL_15:
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v34) = v10;
    *(_DWORD *)a1 = v31 + 1;
    v30 = 1;
  }
  else
  {
    v30 = 0;
  }
  *v21 = v30;
  return v10;
}

BOOL physx::Gu::EPA::expandSegment(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, float32x2_t *a5, double a6, double a7, double a8, double a9, int32x4_t a10, int32x4_t a11)
{
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x2_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x8_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x2_t v24;
  int v25;
  float32x2_t v31;
  float32x2_t v32;
  int v33;
  float32x4_t v34;
  float32x4_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v39;
  float32x4_t v40;
  float32x4_t v41;

  v15 = vsubq_f32(*(float32x4_t *)(a1 + 528), *(float32x4_t *)(a1 + 1552));
  v16 = vsubq_f32(*(float32x4_t *)(a1 + 544), *(float32x4_t *)(a1 + 1568));
  v17 = (int32x4_t)vabdq_f32(v16, v15);
  v18 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 0);
  *(int32x2_t *)a10.i8 = vdup_lane_s32(*(int32x2_t *)v17.i8, 1);
  *(int32x2_t *)v17.i8 = vdup_laneq_s32(v17, 2);
  *(int32x2_t *)a11.i8 = vcgt_f32(v18, *(float32x2_t *)a10.i8);
  *(int8x8_t *)a10.i8 = vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)a11.i8, (int8x8_t)vcgt_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)a10.i8)), 0), *(int8x8_t *)v15.f32);
  a11.i32[0] = -1;
  v19 = (int8x16_t)vsubq_f32(v16, v15);
  v20 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a10, a11), 0), (int8x16_t)xmmword_2260E5F20, vbslq_s8((int8x16_t)vmovl_s16(vdup_lane_s16((int16x4_t)vcgt_f32(v18, *(float32x2_t *)v17.i8), 0)), (int8x16_t)xmmword_2260E5F40, (int8x16_t)xmmword_2260E5F10));
  v17.i64[0] = vextq_s8(v20, v20, 8uLL).u64[0];
  v21 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 4uLL), *(float32x2_t *)v20.i8), (float32x2_t)vext_s8(*(int8x8_t *)v20.i8, *(int8x8_t *)v17.i8, 4uLL), *(float32x2_t *)v19.i8);
  *(int8x8_t *)v22.f32 = vext_s8(v21, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v17.i8), *(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)), 4uLL);
  v22.i64[1] = v21.u32[0];
  *(float32x2_t *)v20.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32), vmul_f32((float32x2_t)v21.u32[0], (float32x2_t)v21.u32[0]));
  v23 = vpadd_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8);
  v24 = vrsqrte_f32(v23);
  v25 = 4;
  do
  {
    v24 = vmul_f32(v24, vrsqrts_f32(vmul_f32(v24, v24), v23));
    --v25;
  }
  while (v25);
  __asm { FMOV            V4.2S, #1.0 }
  v31 = vmul_f32(v23, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v23), 0), _D4, (int8x8_t)v24));
  v32 = vrecpe_f32(v31);
  v33 = 4;
  do
  {
    v32 = vmul_f32(v32, vrecps_f32(v31, v32));
    --v33;
  }
  while (v33);
  v34 = vmulq_n_f32(v22, v32.f32[0]);
  v34.i32[3] = 0;
  v40 = v34;
  v35 = vnegq_f32(v34);
  v35.i32[3] = 0;
  v41 = v35;
  *(double *)&v36 = (*(double (**)(uint64_t, float32x4_t *))(*(_QWORD *)a2 + 8))(a2, &v41);
  v39 = v36;
  *(double *)&v37 = (*(double (**)(uint64_t, float32x4_t *))(*(_QWORD *)a3 + 8))(a3, &v40);
  *(_OWORD *)(a1 + 560) = v39;
  *(_OWORD *)(a1 + 1584) = v37;
  return physx::Gu::EPA::expandTriangle((int *)a1, a4, a5);
}

BOOL physx::Gu::EPA::expandTriangle(int *a1, _DWORD *a2, float32x2_t *a3)
{
  float32x4_t *v5;
  float32x4_t *v6;
  int v7;

  *a2 = 3;
  v5 = physx::Gu::EPA::addFacet((uint64_t)a1, 0, 1u, 2u, a3);
  v6 = physx::Gu::EPA::addFacet((uint64_t)a1, 1u, 0, 2u, a3);
  v7 = *a1;
  if (*a1)
  {
    v5[1].i64[1] = (uint64_t)v6;
    v5[3].i8[0] = 0;
    v6[1].i64[1] = (uint64_t)v5;
    v6[3].i8[0] = 0;
    v5[2].i64[0] = (uint64_t)v6;
    v5[3].i8[1] = 2;
    v6[2].i64[1] = (uint64_t)v5;
    v6[3].i8[2] = 1;
    v5[2].i64[1] = (uint64_t)v6;
    v5[3].i8[2] = 1;
    v6[2].i64[0] = (uint64_t)v5;
    v6[3].i8[1] = 2;
  }
  return v7 != 0;
}

uint64_t physx::Gu::calculateContactInformation(uint64_t result, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;
  float32x4_t v8;
  uint64_t v9;
  float32x4_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x2_t v27;
  int8x16_t v28;
  float32x2_t v29;
  int8x16_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  int v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x2_t v55;
  float32x4_t v56;
  float32x2_t v57;
  float32x2_t v58;

  v7 = a3[3].i8[3];
  v8 = *(float32x4_t *)(result + 16 * v7);
  v9 = a3[3].i8[4];
  v10 = *(float32x4_t *)(result + 16 * v9);
  v11 = a3[3].i8[5];
  v12 = *(float32x4_t *)(result + 16 * v11);
  v13 = *(float32x4_t *)(a2 + 16 * v7);
  v14 = *(float32x4_t *)(a2 + 16 * v9);
  v15 = *(float32x4_t *)(a2 + 16 * v11);
  v16 = vsubq_f32(v8, v13);
  v19 = vsubq_f32(v12, v15);
  v17 = vsubq_f32(vsubq_f32(v10, v14), v16);
  v18 = vsubq_f32(v19, v16);
  v19.i32[0] = a3[1].i32[0];
  v20 = vmulq_n_f32(*a3, v19.f32[0]);
  v20.i32[3] = 0;
  v21 = vsubq_f32(v20, v16);
  v22 = vmulq_f32(v17, v17);
  v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
  v23 = vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32);
  v24 = vmulq_f32(v17, v18);
  v24.i64[0] = vpaddq_f32(v24, v24).u64[0];
  v25 = vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32);
  v26 = vmulq_f32(v18, v18);
  v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
  v27 = vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32);
  v28 = (int8x16_t)vmulq_f32(v17, v21);
  v29 = (float32x2_t)vextq_s8(v28, v28, 8uLL).u64[0];
  v30 = (int8x16_t)vmulq_f32(v18, v21);
  v31 = (float32x2_t)vextq_s8(v30, v30, 8uLL).u64[0];
  v32 = vneg_f32(v25);
  v33 = vmls_f32(vmul_f32(v23, v27), v25, v25);
  v34 = vrecpe_f32(v33);
  v35 = 4;
  do
  {
    v34 = vmul_f32(v34, vrecps_f32(v33, v34));
    --v35;
  }
  while (v35);
  v36 = vpadd_f32(*(float32x2_t *)v28.i8, v29);
  v37 = vpadd_f32(*(float32x2_t *)v30.i8, v31);
  v38 = vpadd_f32(v36, v36);
  v39 = vpadd_f32(v37, v37);
  v40 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v33, (float32x2_t)0x3400000034000000), 0), (int8x8_t)v34);
  v41 = vmul_f32(vmla_f32(vmul_f32(v27, v38), v39, v32), v40);
  v42 = vmul_f32(vmla_f32(vmul_f32(v23, v39), v38, v32), v40);
  __asm { FMOV            V19.2S, #1.0 }
  LODWORD(v48) = vsub_f32(_D19, vadd_f32(v41, v42)).u32[0];
  v49 = vmulq_n_f32(v12, v42.f32[0]);
  v49.i32[3] = 0;
  v50 = vmlaq_n_f32(v49, v10, v41.f32[0]);
  v10.i32[1] = 0;
  v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
  v51 = vmlaq_n_f32(v50, v8, v48);
  v8.i32[1] = 0;
  v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
  v52 = vmulq_n_f32(v15, v42.f32[0]);
  v52.i32[3] = 0;
  v53 = vmlaq_n_f32(v52, v14, v41.f32[0]);
  v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
  v54 = vmlaq_n_f32(v53, v13, v48);
  v54.i64[1] = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u32[0];
  v55 = vabs_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.f32, 0));
  v56 = vnegq_f32(*a3);
  v56.i32[3] = 0;
  if ((a6 & 1) == 0)
  {
    v8.i32[0] = -*(char *)(a4 + 32);
    v57 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)*(unsigned int *)(a4 + 16), *(int8x8_t *)v8.f32), 0);
    v8.i32[0] = *(_DWORD *)(a5 + 16);
    v10.i32[0] = -*(char *)(a5 + 32);
    v58 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8(*(int8x8_t *)v8.f32, *(int8x8_t *)v10.f32), 0);
    v51 = vmlsq_lane_f32(v51, v56, v57, 0);
    v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
    v54 = vmlaq_n_f32(v54, v56, v58.f32[0]);
    v54.i64[1] = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u32[0];
    v55 = vadd_f32(v55, vadd_f32(v57, v58));
  }
  *(float32x4_t *)a7 = v51;
  *(float32x4_t *)(a7 + 16) = v54;
  *(float32x4_t *)(a7 + 32) = v56;
  *(float32x2_t *)(a7 + 64) = vneg_f32(v55);
  return result;
}

void physx::Gu::closestPtPointTetrahedron(float32x4_t *a1, _OWORD *a2, _OWORD *a3, int *a4)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  int8x8_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  int v22;
  float32x2_t v28;
  float32x2_t v29;
  int v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  int8x8_t v39;
  float32x4_t v40;
  int8x8_t v41;
  float32x4_t v42;
  int8x8_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x8_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  int8x8_t v74;
  float32x4_t v75;
  float32x2_t v76;
  float32x2_t v77;
  int8x8_t v78;
  float32x4_t v79;
  int8x8_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x2_t v83;
  float32x4_t v84;
  float32x2_t v85;
  float32x4_t v86;
  float32x2_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x2_t v91;
  float32x4_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x4_t v97;
  float32x2_t v98;
  float32x4_t v99;
  float32x2_t v100;
  float32x4_t v101;
  float32x2_t v102;
  int8x8_t v103;
  uint64_t v104;
  uint64_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x2_t v108;
  float32x2_t v109;
  int v110;
  float32x2_t v111;
  int v112;
  float32x2_t v113;
  float32x2_t v114;
  int v115;
  int v116;
  float32x2_t v117;
  float32x2_t v118;
  int v119;
  float32x2_t v120;
  float32x2_t v121;
  int v122;
  float32x4_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  int8x16_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  v11 = (int8x16_t)vsubq_f32(v7, *a1);
  v12 = (int8x16_t)vsubq_f32(v9, *a1);
  v13 = (float32x2_t)vextq_s8(v11, v11, 8uLL).u64[0];
  v14 = (float32x2_t)vextq_s8(v12, v12, 8uLL).u64[0];
  v15 = (float32x2_t)vextq_s8(v12, v12, 4uLL).u64[0];
  v16 = (float32x2_t)vextq_s8(v11, v11, 4uLL).u64[0];
  v17 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v11.i8, v15), v16, *(float32x2_t *)v12.i8);
  *(int8x8_t *)v18.f32 = vext_s8(v17, (int8x8_t)vmls_f32(vmul_f32(v13, *(float32x2_t *)v12.i8), *(float32x2_t *)v11.i8, v14), 4uLL);
  v18.i64[1] = v17.u32[0];
  v19 = vpadd_f32(vmul_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32), vmul_f32((float32x2_t)v17.u32[0], (float32x2_t)v17.u32[0]));
  v20 = vpadd_f32(v19, v19);
  v21 = vrsqrte_f32(v20);
  v22 = 4;
  do
  {
    v21 = vmul_f32(v21, vrsqrts_f32(vmul_f32(v21, v21), v20));
    --v22;
  }
  while (v22);
  __asm { FMOV            V6.2S, #1.0 }
  v28 = vmul_f32(v20, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v20), 0), _D6, (int8x8_t)v21));
  v29 = vrecpe_f32(v28);
  v30 = 4;
  do
  {
    v29 = vmul_f32(v29, vrecps_f32(v28, v29));
    --v30;
  }
  while (v30);
  v31 = vmulq_n_f32(v18, v29.f32[0]);
  v31.i32[3] = 0;
  v32 = vsubq_f32(v10, v8);
  v33 = vmulq_f32(v32, v31);
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  if (vabs_f32(vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32)).f32[0] < 0.0001)
  {
    *a4 = 3;
    v61 = *a1;
    v62 = a1[1];
    v63 = a1[2];
    v64 = vsubq_f32(v62, *a1);
    v65 = vsubq_f32(v63, *a1);
    v67 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v64.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 4uLL), *(float32x2_t *)v65.f32);
    *(int8x8_t *)v66.f32 = vext_s8(v67, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL), *(float32x2_t *)v65.f32), *(float32x2_t *)v64.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL)), 4uLL);
    v67.i32[1] = 0;
    v68 = vpadd_f32(vmul_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32), vmul_f32((float32x2_t)v67.u32[0], (float32x2_t)v67.u32[0]));
    v69 = vpadd_f32(v68, v68);
    if (v69.f32[0] <= 0.00000011921)
    {
      *a4 = 2;
      v106 = vsubq_f32(a1[1], *a1);
      v107 = vmulq_f32(v106, v106);
      v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
      v108 = vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v108), 0), *(int8x8_t *)a1->f32).u32[0] == -1)
      {
        *a4 = 1;
      }
      else
      {
        v109 = vrecpe_f32(v108);
        v110 = 4;
        do
        {
          v109 = vmul_f32(v109, vrecps_f32(v108, v109));
          --v110;
        }
        while (v110);
      }
    }
    else if (v69.f32[0] != 0.0)
    {
      *(int8x8_t *)&v66.u32[2] = v67;
      v70 = (float32x2_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
      v71 = (float32x2_t)vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u64[0];
      v72 = (float32x2_t)vextq_s8((int8x16_t)v63, (int8x16_t)v63, 4uLL).u64[0];
      v73 = (float32x2_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 4uLL).u64[0];
      v74 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v62.f32, v72), v73, *(float32x2_t *)v63.f32);
      *(int8x8_t *)v75.f32 = vext_s8(v74, (int8x8_t)vmls_f32(vmul_f32(v70, *(float32x2_t *)v63.f32), *(float32x2_t *)v62.f32, v71), 4uLL);
      v75.i64[1] = v74.u32[0];
      v76 = (float32x2_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u64[0];
      v77 = (float32x2_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 4uLL).u64[0];
      v78 = (int8x8_t)vmls_f32(vmul_f32(v77, *(float32x2_t *)v63.f32), v72, *(float32x2_t *)v61.f32);
      *(int8x8_t *)v79.f32 = vext_s8(v78, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v61.f32, v71), *(float32x2_t *)v63.f32, v76), 4uLL);
      v79.i64[1] = v78.u32[0];
      v80 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v61.f32, v73), v77, *(float32x2_t *)v62.f32);
      *(int8x8_t *)v81.f32 = vext_s8(v80, (int8x8_t)vmls_f32(vmul_f32(v76, *(float32x2_t *)v62.f32), *(float32x2_t *)v61.f32, v70), 4uLL);
      v81.i64[1] = v80.u32[0];
      v82 = vmulq_f32(v75, v66);
      v82.i64[0] = vpaddq_f32(v82, v82).u64[0];
      v83 = vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32);
      v84 = vmulq_f32(v79, v66);
      v84.i64[0] = vpaddq_f32(v84, v84).u64[0];
      v85 = vpadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32);
      v86 = vmulq_f32(v81, v66);
      v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
      v87 = vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v85), (int8x8_t)vcgez_f32(v83)), (int8x8_t)vcgez_f32(v87)), 0), *(int8x8_t *)v61.f32).u32[0] == -1)
      {
        v111 = vrecpe_f32(v69);
        v112 = 4;
        do
        {
          v111 = vmul_f32(v111, vrecps_f32(v69, v111));
          --v112;
        }
        while (v112);
      }
      else
      {
        v88 = vnegq_f32(v61);
        v88.i32[3] = 0;
        v89 = vnegq_f32(v62);
        v89.i32[3] = 0;
        v90 = vmulq_f32(v88, v64);
        v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
        v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
        v92 = vmulq_f32(v64, v89);
        v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
        v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v91), (int8x8_t)vclez_f32(v93)), (int8x8_t)vclez_f32(v87)), 0), *(int8x8_t *)v61.f32).u32[0] == -1)
        {
          v113 = vsub_f32(v91, v93);
          v114 = vrecpe_f32(v113);
          v115 = 4;
          do
          {
            v114 = vmul_f32(v114, vrecps_f32(v113, v114));
            --v115;
          }
          while (v115);
          v105 = 0;
          v116 = 2;
          v104 = 1;
        }
        else
        {
          v94 = vnegq_f32(v63);
          v94.i32[3] = 0;
          v95 = vmulq_f32(v89, v65);
          v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
          v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
          v97 = vmulq_f32(v64, v94);
          v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
          v98 = vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32);
          v99 = vmulq_f32(v65, v94);
          v99.i64[0] = vpaddq_f32(v99, v99).u64[0];
          v100 = vpadd_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v99.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v96, v93), (int8x8_t)vcge_f32(v98, v100)), (int8x8_t)vclez_f32(v83)), 0), *(int8x8_t *)v61.f32).u32[0] == -1)
          {
            v117 = vadd_f32(vsub_f32(v96, v93), vsub_f32(v98, v100));
            v118 = vrecpe_f32(v117);
            v119 = 4;
            do
            {
              v118 = vmul_f32(v118, vrecps_f32(v117, v118));
              --v119;
            }
            while (v119);
            v116 = 2;
            v105 = 1;
            v104 = 2;
          }
          else
          {
            v101 = vmulq_f32(v88, v65);
            v101.i64[0] = vpaddq_f32(v101, v101).u64[0];
            v102 = vpadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v102), (int8x8_t)vclez_f32(v100)), (int8x8_t)vclez_f32(v85)), 0), *(int8x8_t *)v61.f32).u32[0] == -1)
            {
              v120 = vsub_f32(v102, v100);
              v121 = vrecpe_f32(v120);
              v122 = 4;
              do
              {
                v121 = vmul_f32(v121, vrecps_f32(v120, v121));
                --v122;
              }
              while (v122);
              v105 = 0;
              v104 = 2;
            }
            else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v102), (int8x8_t)vclez_f32(v91)), 0), *(int8x8_t *)v61.f32).u32[0] == -1)
            {
              v105 = 0;
              v104 = 1;
            }
            else
            {
              v103 = (int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v93, v96), (int8x8_t)vcgez_f32(v93)), 0);
              v104 = 1;
              if (vuzp1_s8(v103, v103).u32[0] == -1)
                v105 = 1;
              else
                v105 = 2;
            }
            v116 = v104;
          }
        }
        v123 = a1[v104];
        v124 = a2[v105];
        v125 = a2[v104];
        v126 = a3[v105];
        v127 = a3[v104];
        *a1 = a1[v105];
        a1[1] = v123;
        *a2 = v124;
        a2[1] = v125;
        *a3 = v126;
        a3[1] = v127;
        *a4 = v116;
      }
    }
  }
  else
  {
    v34 = (int8x16_t)vsubq_f32(v10, v7);
    v35 = (int8x16_t)vsubq_f32(v9, v7);
    v36 = (float32x2_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    v37 = (float32x2_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 4uLL).u64[0];
    v38 = vmul_f32(v14, *(float32x2_t *)v32.f32);
    v39 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v12.i8, v37), v15, *(float32x2_t *)v32.f32);
    *(int8x8_t *)v40.f32 = vext_s8(v39, (int8x8_t)vmls_f32(v38, *(float32x2_t *)v12.i8, v36), 4uLL);
    v40.i64[1] = v39.u32[0];
    v41 = (int8x8_t)vmls_f32(vmul_f32(v16, *(float32x2_t *)v32.f32), v37, *(float32x2_t *)v11.i8);
    *(int8x8_t *)v42.f32 = vext_s8(v41, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v11.i8, v36), *(float32x2_t *)v32.f32, v13), 4uLL);
    v42.i64[1] = v41.u32[0];
    v43 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 4uLL), *(float32x2_t *)v34.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 4uLL), *(float32x2_t *)v35.i8);
    *(int8x8_t *)v44.f32 = vext_s8(v43, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)), *(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), 4uLL);
    v44.i64[1] = v43.u32[0];
    v45 = vmulq_f32(v8, v18);
    v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
    v46 = vmulq_f32(v8, v40);
    v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
    v47 = vmulq_f32(v8, v42);
    v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
    v48 = vmulq_f32(v8, v44);
    v48.i64[0] = vpaddq_f32(v48, v48).u64[0];
    v49 = vmulq_f32(v10, v18);
    v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
    v50 = vmulq_f32(v7, v40);
    v50.i64[0] = vpaddq_f32(v50, v50).u64[0];
    v51 = vmulq_f32(v9, v42);
    v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
    v52 = vmulq_f32(v7, v44);
    v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
    *(float32x2_t *)v49.f32 = vmul_f32((float32x2_t)vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32), 4uLL), (float32x2_t)vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32), 4uLL));
    *(float32x2_t *)&v49.u32[2] = vmul_f32((float32x2_t)vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32), 4uLL), (float32x2_t)vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32), 4uLL));
    v128 = (int8x16_t)vcgeq_f32(v49, (float32x4_t)vdupq_n_s32(0xB58637BD));
    *(int16x4_t *)v52.f32 = vmovn_s32((int32x4_t)vmvnq_s8(v128));
    if (vuzp1_s8(*(int8x8_t *)v52.f32, *(int8x8_t *)v52.f32).u32[0] != -1)
    {
      v130 = 2;
      v129 = 0x100000000;
      physx::Gu::getClosestPtPointTriangle(a1, (int32x4_t *)&v128, (uint64_t)&v129, a4);
      v53 = a1[HIDWORD(v129)];
      v54 = a1[v130];
      v55 = a2[v129];
      v56 = a2[HIDWORD(v129)];
      v57 = a2[v130];
      v58 = a3[v129];
      v59 = a3[HIDWORD(v129)];
      v60 = a3[v130];
      *a1 = a1[v129];
      a1[1] = v53;
      a1[2] = v54;
      *a2 = v55;
      a2[1] = v56;
      a2[2] = v57;
      *a3 = v58;
      a3[1] = v59;
      a3[2] = v60;
    }
  }
}

double physx::Gu::getClosestPtPointTriangle(float32x4_t *a1, int32x4_t *a2, uint64_t a3, int *a4)
{
  int32x4_t v4;
  float32x2_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x8_t v14;
  float32x2_t v15;
  float32x2_t v16;
  uint64_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  int8x8_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int8x8_t v26;
  float32x4_t v27;
  int8x8_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x4_t v32;
  float32x2_t v33;
  float32x4_t v34;
  float32x2_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float32x4_t v45;
  float32x2_t v46;
  float32x4_t v47;
  float32x2_t v48;
  float32x4_t v49;
  float32x2_t v50;
  float32x4_t v51;
  float32x2_t v52;
  int v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x8_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  int8x8_t v67;
  float32x4_t v68;
  float32x2_t v69;
  float32x2_t v70;
  int8x8_t v71;
  float32x4_t v72;
  int8x8_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x2_t v76;
  float32x4_t v77;
  float32x2_t v78;
  float32x4_t v79;
  float32x2_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x2_t v84;
  float32x4_t v85;
  float32x2_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x2_t v89;
  float32x4_t v90;
  float32x2_t v91;
  float32x4_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x2_t v95;
  int8x8_t v96;
  int8x8_t v97;
  int8x16_t v98;
  float32x2_t v99;
  float32x2_t v100;
  int v101;
  float32x2_t v102;
  float32x4_t v103;
  int8x16_t v104;
  float32x2_t v105;
  float32x2_t v106;
  int v107;
  float32x2_t v108;
  float32x4_t v109;
  float32x2_t v110;
  float32x2_t v111;
  int v112;
  int8x16_t v113;
  float32x2_t v114;
  float32x2_t v115;
  int v116;
  int8x16_t v117;
  float32x2_t v118;
  float32x2_t v119;
  float32x2_t v120;
  int v121;
  int8x16_t v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x2_t v125;
  float32x2_t v126;
  int v127;
  unsigned __int32 v128;
  float32x4_t v129;
  float32x2_t v130;
  float32x2_t v131;
  int v132;
  float32x2_t v133;
  int32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  int8x8_t v141;
  float32x2_t v142;
  float32x2_t v143;
  uint64_t v144;
  float32x2_t v145;
  float32x2_t v146;
  float32x2_t v147;
  float32x2_t v148;
  int8x8_t v149;
  float32x4_t v150;
  float32x2_t v151;
  float32x2_t v152;
  int8x8_t v153;
  float32x4_t v154;
  int8x8_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x2_t v158;
  float32x4_t v159;
  float32x2_t v160;
  float32x4_t v161;
  float32x2_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x2_t v166;
  float32x4_t v167;
  float32x2_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x2_t v171;
  float32x4_t v172;
  float32x2_t v173;
  float32x4_t v174;
  float32x2_t v175;
  float32x4_t v176;
  float32x2_t v177;
  float32x4_t v178;
  float32x2_t v179;
  int v180;
  int8x16_t v181;
  float32x2_t v182;
  float32x2_t v183;
  int v184;
  float32x2_t v185;
  float32x4_t v186;
  float32x2_t v187;
  float32x2_t v188;
  int v189;
  int8x16_t v190;
  float32x2_t v191;
  float32x2_t v192;
  float32x2_t v193;
  int v194;
  int8x16_t v195;
  float32x2_t v196;
  float32x2_t v197;
  float32x2_t v198;
  int v199;
  unsigned __int32 v200;
  float32x2_t v201;
  float32x2_t v202;
  float32x2_t v203;
  int v204;
  float32x2_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  int8x8_t v212;
  float32x2_t v213;
  float32x2_t v214;
  uint64_t v215;
  float32x2_t v216;
  float32x2_t v217;
  float32x2_t v218;
  float32x2_t v219;
  int8x8_t v220;
  float32x4_t v221;
  float32x2_t v222;
  float32x2_t v223;
  int8x8_t v224;
  float32x4_t v225;
  int8x8_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x2_t v229;
  float32x4_t v230;
  float32x2_t v231;
  float32x4_t v232;
  float32x2_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x2_t v237;
  float32x4_t v238;
  float32x2_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x2_t v242;
  float32x4_t v243;
  float32x2_t v244;
  float32x4_t v245;
  float32x2_t v246;
  float32x4_t v247;
  float32x2_t v248;
  float32x4_t v249;
  float32x2_t v250;
  int v251;
  int8x16_t v252;
  float32x2_t v253;
  float32x2_t v254;
  int v255;
  float32x2_t v256;
  float32x4_t v257;
  float32x2_t v258;
  float32x2_t v259;
  int v260;
  int8x16_t v261;
  float32x2_t v262;
  float32x2_t v263;
  float32x2_t v264;
  int v265;
  int8x16_t v266;
  float32x2_t v267;
  float32x2_t v268;
  float32x2_t v269;
  int v270;
  float32x2_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;

  v4.i64[0] = -1;
  v4.i64[1] = -1;
  v5 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  v6.i64[0] = 0;
  if (vdup_lane_s8((int8x8_t)vmovn_s32(vceqq_s32(*a2, v4)), 0).u32[0] == -1)
  {
    *a4 = 3;
    v55 = *a1;
    v54 = a1[1];
    v56 = vsubq_f32(v54, *a1);
    v57 = a1[2];
    v58 = vsubq_f32(v57, *a1);
    v60 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v56.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 4uLL), *(float32x2_t *)v58.f32);
    *(int8x8_t *)v59.f32 = vext_s8(v60, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL), *(float32x2_t *)v58.f32), *(float32x2_t *)v56.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL)), 4uLL);
    v60.i32[1] = 0;
    v61 = vpadd_f32(vmul_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32), vmul_f32((float32x2_t)v60.u32[0], (float32x2_t)v60.u32[0]));
    v62 = vpadd_f32(v61, v61);
    if (v62.f32[0] != 0.0)
    {
      *(int8x8_t *)&v59.u32[2] = v60;
      v63 = (float32x2_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
      v64 = (float32x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u64[0];
      v65 = (float32x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 4uLL).u64[0];
      v66 = (float32x2_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 4uLL).u64[0];
      v67 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v54.f32, v65), v66, *(float32x2_t *)v57.f32);
      *(int8x8_t *)v68.f32 = vext_s8(v67, (int8x8_t)vmls_f32(vmul_f32(v63, *(float32x2_t *)v57.f32), *(float32x2_t *)v54.f32, v64), 4uLL);
      v68.i64[1] = v67.u32[0];
      v69 = (float32x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u64[0];
      v70 = (float32x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 4uLL).u64[0];
      v71 = (int8x8_t)vmls_f32(vmul_f32(v70, *(float32x2_t *)v57.f32), v65, *(float32x2_t *)v55.f32);
      *(int8x8_t *)v72.f32 = vext_s8(v71, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v55.f32, v64), *(float32x2_t *)v57.f32, v69), 4uLL);
      v72.i64[1] = v71.u32[0];
      v73 = (int8x8_t)vmls_f32(vmul_f32(v66, *(float32x2_t *)v55.f32), v70, *(float32x2_t *)v54.f32);
      *(int8x8_t *)v74.f32 = vext_s8(v73, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v54.f32, v69), *(float32x2_t *)v55.f32, v63), 4uLL);
      v74.i64[1] = v73.u32[0];
      v75 = vmulq_f32(v68, v59);
      v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
      v76 = vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32);
      v77 = vmulq_f32(v72, v59);
      v77.i64[0] = vpaddq_f32(v77, v77).u64[0];
      v78 = vpadd_f32(*(float32x2_t *)v77.f32, *(float32x2_t *)v77.f32);
      v79 = vmulq_f32(v74, v59);
      v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
      v80 = vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32);
      *(int16x4_t *)v79.f32 = vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v78), (int8x8_t)vcgez_f32(v76)), (int8x8_t)vcgez_f32(v80)), 0);
      if (vuzp1_s8(*(int8x8_t *)v79.f32, *(int8x8_t *)v79.f32).u32[0] == -1)
      {
        v104 = (int8x16_t)vmulq_f32(v55, v59);
        v105 = (float32x2_t)vextq_s8(v104, v104, 8uLL).u64[0];
        v106 = vrecpe_f32(v62);
        v107 = 4;
        do
        {
          v106 = vmul_f32(v106, vrecps_f32(v62, v106));
          --v107;
        }
        while (v107);
        v108 = vpadd_f32(*(float32x2_t *)v104.i8, v105);
        v6 = vmulq_n_f32(v59, vmul_f32(v106, vpadd_f32(v108, v108)).f32[0]);
        v6.i32[3] = 0;
        goto LABEL_27;
      }
      v81 = vnegq_f32(v55);
      v81.i32[3] = 0;
      v82 = vnegq_f32(v54);
      v82.i32[3] = 0;
      v83 = vmulq_f32(v56, v81);
      v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
      v84 = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32);
      v85 = vmulq_f32(v82, v56);
      v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
      v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
      *a4 = 2;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v84), (int8x8_t)vclez_f32(v86)), (int8x8_t)vclez_f32(v80)), 0), (int8x8_t)v84).u32[0] == -1)
      {
        v114 = vsub_f32(v84, v86);
        v115 = vrecpe_f32(v114);
        v116 = 4;
        do
        {
          v115 = vmul_f32(v115, vrecps_f32(v114, v115));
          --v116;
        }
        while (v116);
        v117 = (int8x16_t)vmlaq_n_f32(*a1, v56, vmul_f32(v84, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v114), (float32x2_t)0x3400000034000000), (int8x8_t)v115, 0)).f32[0]);
      }
      else
      {
        v87 = vnegq_f32(v57);
        v87.i32[3] = 0;
        v88 = vmulq_f32(v82, v58);
        v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
        v89 = vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32);
        v90 = vmulq_f32(v56, v87);
        v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
        v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
        v92 = vmulq_f32(v58, v87);
        v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
        v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v89, v86), (int8x8_t)vcge_f32(v91, v93)), (int8x8_t)vclez_f32(v76)), 0), (int8x8_t)v84).u32[0] == -1)
        {
          v124 = vsub_f32(v89, v86);
          v125 = vadd_f32(v124, vsub_f32(v91, v93));
          v126 = vrecpe_f32(v125);
          v127 = 4;
          do
          {
            v126 = vmul_f32(v126, vrecps_f32(v125, v126));
            --v127;
          }
          while (v127);
          v58 = vsubq_f32(a1[2], a1[1]);
          v128 = vmul_f32(v124, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v125), (float32x2_t)0x3400000034000000), (int8x8_t)v126, 0)).u32[0];
          *(_QWORD *)a3 = *(_QWORD *)(a3 + 4);
          v129 = a1[1];
        }
        else
        {
          v94 = vmulq_f32(v81, v58);
          v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
          v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v95), (int8x8_t)vclez_f32(v93)), (int8x8_t)vclez_f32(v78)), 0), (int8x8_t)v84).u32[0] != -1)
          {
            *a4 = 1;
            v96 = (int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v95), (int8x8_t)vclez_f32(v84)), 0);
            if (vuzp1_s8(v96, v96).u32[0] == -1)
            {
              v6 = *a1;
            }
            else
            {
              v97 = (int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v86, v89), (int8x8_t)vcgez_f32(v86)), 0);
              if (vuzp1_s8(v97, v97).u32[0] == -1)
              {
                *(_DWORD *)a3 = *(_DWORD *)(a3 + 4);
                v6 = a1[1];
              }
              else
              {
                *(_DWORD *)a3 = *(_DWORD *)(a3 + 8);
                v6 = a1[2];
              }
            }
LABEL_27:
            v109 = vmulq_f32(v6, v6);
            v109.i64[0] = vpaddq_f32(v109, v109).u64[0];
            v5 = vpadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v109.f32);
            goto LABEL_2;
          }
          v197 = vsub_f32(v95, v93);
          v198 = vrecpe_f32(v197);
          v199 = 4;
          do
          {
            v198 = vmul_f32(v198, vrecps_f32(v197, v198));
            --v199;
          }
          while (v199);
          v128 = vmul_f32(v95, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v197), (float32x2_t)0x3400000034000000), (int8x8_t)v198, 0)).u32[0];
          *(_DWORD *)(a3 + 4) = *(_DWORD *)(a3 + 8);
          v129 = *a1;
        }
        v117 = (int8x16_t)vmlaq_n_f32(v129, v58, *(float *)&v128);
      }
      v200 = vextq_s8(v117, v117, 8uLL).u32[0];
      v6.i64[0] = v117.i64[0];
      v201 = vpadd_f32(vmul_f32(*(float32x2_t *)v117.i8, *(float32x2_t *)v117.i8), vmul_f32((float32x2_t)v200, (float32x2_t)v200));
      v5 = vpadd_f32(v201, v201);
    }
  }
LABEL_2:
  v7 = *a2;
  if (vdup_lane_s8((int8x8_t)vmovn_s32(vceqq_s32(*a2, v4)), 2).u32[0] != -1)
    goto LABEL_47;
  v8 = *a1;
  v9 = a1[2];
  v10 = a1[3];
  v11 = vsubq_f32(v9, *a1);
  v12 = vsubq_f32(v10, *a1);
  v14 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v11.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL), *(float32x2_t *)v12.f32);
  *(int8x8_t *)v13.f32 = vext_s8(v14, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), *(float32x2_t *)v12.f32), *(float32x2_t *)v11.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL)), 4uLL);
  v14.i32[1] = 0;
  v15 = vpadd_f32(vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32), vmul_f32((float32x2_t)v14.u32[0], (float32x2_t)v14.u32[0]));
  v16 = vpadd_f32(v15, v15);
  v17 = 0x200000000;
  if (v16.f32[0] == 0.0)
  {
    v52 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v8.i64[0] = 0;
LABEL_23:
    v53 = 3;
    goto LABEL_45;
  }
  *(int8x8_t *)&v13.u32[2] = v14;
  v18 = (float32x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
  v19 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
  v20 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL).u64[0];
  v21 = (float32x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 4uLL).u64[0];
  v22 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v9.f32, v20), v21, *(float32x2_t *)v10.f32);
  *(int8x8_t *)v23.f32 = vext_s8(v22, (int8x8_t)vmls_f32(vmul_f32(v18, *(float32x2_t *)v10.f32), *(float32x2_t *)v9.f32, v19), 4uLL);
  v23.i64[1] = v22.u32[0];
  v24 = (float32x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
  v25 = (float32x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 4uLL).u64[0];
  v26 = (int8x8_t)vmls_f32(vmul_f32(v25, *(float32x2_t *)v10.f32), v20, *(float32x2_t *)v8.f32);
  *(int8x8_t *)v27.f32 = vext_s8(v26, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v8.f32, v19), *(float32x2_t *)v10.f32, v24), 4uLL);
  v27.i64[1] = v26.u32[0];
  v28 = (int8x8_t)vmls_f32(vmul_f32(v21, *(float32x2_t *)v8.f32), v25, *(float32x2_t *)v9.f32);
  *(int8x8_t *)v29.f32 = vext_s8(v28, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v9.f32, v24), *(float32x2_t *)v8.f32, v18), 4uLL);
  v29.i64[1] = v28.u32[0];
  v30 = vmulq_f32(v23, v13);
  v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
  v31 = vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32);
  v32 = vmulq_f32(v27, v13);
  v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
  v33 = vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32);
  v34 = vmulq_f32(v29, v13);
  v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
  v35 = vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v33), (int8x8_t)vcgez_f32(v31)), (int8x8_t)vcgez_f32(v35)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    v98 = (int8x16_t)vmulq_f32(v8, v13);
    v99 = (float32x2_t)vextq_s8(v98, v98, 8uLL).u64[0];
    v100 = vrecpe_f32(v16);
    v101 = 4;
    do
    {
      v100 = vmul_f32(v100, vrecps_f32(v16, v100));
      --v101;
    }
    while (v101);
    v102 = vpadd_f32(*(float32x2_t *)v98.i8, v99);
    v8 = vmulq_n_f32(v13, vmul_f32(v100, vpadd_f32(v102, v102)).f32[0]);
    v8.i32[3] = 0;
    v103 = vmulq_f32(v8, v8);
    v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
    v52 = vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
    goto LABEL_23;
  }
  v36 = vnegq_f32(v8);
  v36.i32[3] = 0;
  v37 = vnegq_f32(v9);
  v37.i32[3] = 0;
  v38 = vmulq_f32(v11, v36);
  v38.i64[0] = vpaddq_f32(v38, v38).u64[0];
  v39 = vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
  v40 = vmulq_f32(v37, v11);
  v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
  v41 = vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v39), (int8x8_t)vclez_f32(v41)), (int8x8_t)vclez_f32(v35)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    v110 = vsub_f32(v39, v41);
    v111 = vrecpe_f32(v110);
    v112 = 4;
    do
    {
      v111 = vmul_f32(v111, vrecps_f32(v110, v111));
      --v112;
    }
    while (v112);
    v113 = (int8x16_t)vmlaq_n_f32(v8, v11, vmul_f32(v39, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v110), (float32x2_t)0x3400000034000000), (int8x8_t)v111, 0)).f32[0]);
    v10.i64[0] = v113.i64[0];
    v10.i64[1] = vextq_s8(v113, v113, 8uLL).u32[0];
    *(float32x2_t *)v113.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v113.i8, *(float32x2_t *)v113.i8), vmul_f32(*(float32x2_t *)&v10.u32[2], *(float32x2_t *)&v10.u32[2]));
    v52 = vpadd_f32(*(float32x2_t *)v113.i8, *(float32x2_t *)v113.i8);
    v53 = 2;
    goto LABEL_31;
  }
  v42 = vnegq_f32(v10);
  v42.i32[3] = 0;
  v43 = vmulq_f32(v37, v12);
  v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
  v44 = vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32);
  v45 = vmulq_f32(v11, v42);
  v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
  v46 = vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32);
  v47 = vmulq_f32(v12, v42);
  v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
  v48 = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v44, v41), (int8x8_t)vcge_f32(v46, v48)), (int8x8_t)vclez_f32(v31)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    v118 = vsub_f32(v44, v41);
    v119 = vadd_f32(v118, vsub_f32(v46, v48));
    v120 = vrecpe_f32(v119);
    v121 = 4;
    do
    {
      v120 = vmul_f32(v120, vrecps_f32(v119, v120));
      --v121;
    }
    while (v121);
    v122 = (int8x16_t)vmlaq_n_f32(v9, vsubq_f32(v10, v9), vmul_f32(v118, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v119), (float32x2_t)0x3400000034000000), (int8x8_t)v120, 0)).f32[0]);
    v8.i64[0] = v122.i64[0];
    v8.i64[1] = vextq_s8(v122, v122, 8uLL).u32[0];
    v123 = vpadd_f32(vmul_f32(*(float32x2_t *)v122.i8, *(float32x2_t *)v122.i8), vmul_f32(*(float32x2_t *)&v8.u32[2], *(float32x2_t *)&v8.u32[2]));
    v52 = vpadd_f32(v123, v123);
    v17 = 0x300000002;
    goto LABEL_44;
  }
  v49 = vmulq_f32(v36, v12);
  v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
  v50 = vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v50), (int8x8_t)vclez_f32(v48)), (int8x8_t)vclez_f32(v33)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    v130 = vsub_f32(v50, v48);
    v131 = vrecpe_f32(v130);
    v132 = 4;
    do
    {
      v131 = vmul_f32(v131, vrecps_f32(v130, v131));
      --v132;
    }
    while (v132);
    v8 = vmlaq_n_f32(v8, v12, vmul_f32(v50, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v130), (float32x2_t)0x3400000034000000), (int8x8_t)v131, 0)).f32[0]);
    v8.i64[1] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u32[0];
    v133 = vpadd_f32(vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32), vmul_f32(*(float32x2_t *)&v8.u32[2], *(float32x2_t *)&v8.u32[2]));
    v52 = vpadd_f32(v133, v133);
    v17 = 0x300000000;
LABEL_44:
    v53 = 2;
    goto LABEL_45;
  }
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v50), (int8x8_t)vclez_f32(v39)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    v272 = vmulq_f32(v8, v8);
    v272.i64[0] = vpaddq_f32(v272, v272).u64[0];
    v52 = vpadd_f32(*(float32x2_t *)v272.f32, *(float32x2_t *)v272.f32);
    v53 = 1;
  }
  else
  {
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v41, v44), (int8x8_t)vcgez_f32(v41)), 0), *(int8x8_t *)v6.f32).u32[0] != -1)
    {
      v51 = vmulq_f32(v10, v10);
      v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
      v17 = 0x200000003;
      v52 = vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32);
      v53 = 1;
LABEL_31:
      v8.i64[0] = v10.i64[0];
      goto LABEL_45;
    }
    v275 = vmulq_f32(v9, v9);
    v275.i64[0] = vpaddq_f32(v275, v275).u64[0];
    v52 = vpadd_f32(*(float32x2_t *)v275.f32, *(float32x2_t *)v275.f32);
    v17 = 0x200000002;
    v53 = 1;
    v8 = a1[2];
  }
LABEL_45:
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(v5, v52), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    *(_QWORD *)a3 = v17;
    *(_DWORD *)(a3 + 8) = 3;
    *a4 = v53;
    v7 = *a2;
    v6.i64[0] = v8.i64[0];
    v5 = v52;
  }
LABEL_47:
  v134.i64[0] = -1;
  v134.i64[1] = -1;
  if (vdup_lane_s8((int8x8_t)vmovn_s32(vceqq_s32(v7, v134)), 4).u32[0] != -1)
    goto LABEL_79;
  v135 = a1[3];
  v136 = *a1;
  v137 = a1[1];
  v138 = vsubq_f32(v135, *a1);
  v139 = vsubq_f32(v137, *a1);
  v141 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v138.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v139, (int8x16_t)v139, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v138, (int8x16_t)v138, 4uLL), *(float32x2_t *)v139.f32);
  *(int8x8_t *)v140.f32 = vext_s8(v141, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL), *(float32x2_t *)v139.f32), *(float32x2_t *)v138.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v139, (int8x16_t)v139, 8uLL)), 4uLL);
  v141.i32[1] = 0;
  v142 = vpadd_f32(vmul_f32(*(float32x2_t *)v140.f32, *(float32x2_t *)v140.f32), vmul_f32((float32x2_t)v141.u32[0], (float32x2_t)v141.u32[0]));
  v143 = vpadd_f32(v142, v142);
  v144 = 0x300000000;
  if (v143.f32[0] == 0.0)
  {
    v179 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v136.i64[0] = 0;
LABEL_60:
    v180 = 3;
    goto LABEL_77;
  }
  *(int8x8_t *)&v140.u32[2] = v141;
  v145 = (float32x2_t)vextq_s8((int8x16_t)v135, (int8x16_t)v135, 8uLL).u64[0];
  v146 = (float32x2_t)vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u64[0];
  v147 = (float32x2_t)vextq_s8((int8x16_t)v137, (int8x16_t)v137, 4uLL).u64[0];
  v148 = (float32x2_t)vextq_s8((int8x16_t)v135, (int8x16_t)v135, 4uLL).u64[0];
  v149 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v135.f32, v147), v148, *(float32x2_t *)v137.f32);
  *(int8x8_t *)v150.f32 = vext_s8(v149, (int8x8_t)vmls_f32(vmul_f32(v145, *(float32x2_t *)v137.f32), *(float32x2_t *)v135.f32, v146), 4uLL);
  v150.i64[1] = v149.u32[0];
  v151 = (float32x2_t)vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL).u64[0];
  v152 = (float32x2_t)vextq_s8((int8x16_t)v136, (int8x16_t)v136, 4uLL).u64[0];
  v153 = (int8x8_t)vmls_f32(vmul_f32(v152, *(float32x2_t *)v137.f32), v147, *(float32x2_t *)v136.f32);
  *(int8x8_t *)v154.f32 = vext_s8(v153, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v136.f32, v146), *(float32x2_t *)v137.f32, v151), 4uLL);
  v154.i64[1] = v153.u32[0];
  v155 = (int8x8_t)vmls_f32(vmul_f32(v148, *(float32x2_t *)v136.f32), v152, *(float32x2_t *)v135.f32);
  *(int8x8_t *)v156.f32 = vext_s8(v155, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v135.f32, v151), *(float32x2_t *)v136.f32, v145), 4uLL);
  v156.i64[1] = v155.u32[0];
  v157 = vmulq_f32(v150, v140);
  v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
  v158 = vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32);
  v159 = vmulq_f32(v154, v140);
  v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
  v160 = vpadd_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32);
  v161 = vmulq_f32(v156, v140);
  v161.i64[0] = vpaddq_f32(v161, v161).u64[0];
  v162 = vpadd_f32(*(float32x2_t *)v161.f32, *(float32x2_t *)v161.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v160), (int8x8_t)vcgez_f32(v158)), (int8x8_t)vcgez_f32(v162)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    v181 = (int8x16_t)vmulq_f32(v136, v140);
    v182 = (float32x2_t)vextq_s8(v181, v181, 8uLL).u64[0];
    v183 = vrecpe_f32(v143);
    v184 = 4;
    do
    {
      v183 = vmul_f32(v183, vrecps_f32(v143, v183));
      --v184;
    }
    while (v184);
    v185 = vpadd_f32(*(float32x2_t *)v181.i8, v182);
    v136 = vmulq_n_f32(v140, vmul_f32(v183, vpadd_f32(v185, v185)).f32[0]);
    v136.i32[3] = 0;
    v186 = vmulq_f32(v136, v136);
    v186.i64[0] = vpaddq_f32(v186, v186).u64[0];
    v179 = vpadd_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32);
    goto LABEL_60;
  }
  v163 = vnegq_f32(v136);
  v163.i32[3] = 0;
  v164 = vnegq_f32(v135);
  v164.i32[3] = 0;
  v165 = vmulq_f32(v138, v163);
  v165.i64[0] = vpaddq_f32(v165, v165).u64[0];
  v166 = vpadd_f32(*(float32x2_t *)v165.f32, *(float32x2_t *)v165.f32);
  v167 = vmulq_f32(v164, v138);
  v167.i64[0] = vpaddq_f32(v167, v167).u64[0];
  v168 = vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v166), (int8x8_t)vclez_f32(v168)), (int8x8_t)vclez_f32(v162)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    v187 = vsub_f32(v166, v168);
    v188 = vrecpe_f32(v187);
    v189 = 4;
    do
    {
      v188 = vmul_f32(v188, vrecps_f32(v187, v188));
      --v189;
    }
    while (v189);
    v190 = (int8x16_t)vmlaq_n_f32(v136, v138, vmul_f32(v166, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v187), (float32x2_t)0x3400000034000000), (int8x8_t)v188, 0)).f32[0]);
    v137.i64[0] = v190.i64[0];
    v137.i64[1] = vextq_s8(v190, v190, 8uLL).u32[0];
    *(float32x2_t *)v190.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v190.i8, *(float32x2_t *)v190.i8), vmul_f32(*(float32x2_t *)&v137.u32[2], *(float32x2_t *)&v137.u32[2]));
    v179 = vpadd_f32(*(float32x2_t *)v190.i8, *(float32x2_t *)v190.i8);
    v180 = 2;
    goto LABEL_64;
  }
  v169 = vnegq_f32(v137);
  v169.i32[3] = 0;
  v170 = vmulq_f32(v164, v139);
  v170.i64[0] = vpaddq_f32(v170, v170).u64[0];
  v171 = vpadd_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32);
  v172 = vmulq_f32(v138, v169);
  v172.i64[0] = vpaddq_f32(v172, v172).u64[0];
  v173 = vpadd_f32(*(float32x2_t *)v172.f32, *(float32x2_t *)v172.f32);
  v174 = vmulq_f32(v139, v169);
  v174.i64[0] = vpaddq_f32(v174, v174).u64[0];
  v175 = vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v171, v168), (int8x8_t)vcge_f32(v173, v175)), (int8x8_t)vclez_f32(v158)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    v191 = vsub_f32(v171, v168);
    v192 = vadd_f32(v191, vsub_f32(v173, v175));
    v193 = vrecpe_f32(v192);
    v194 = 4;
    do
    {
      v193 = vmul_f32(v193, vrecps_f32(v192, v193));
      --v194;
    }
    while (v194);
    v195 = (int8x16_t)vmlaq_n_f32(v135, vsubq_f32(v137, v135), vmul_f32(v191, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v192), (float32x2_t)0x3400000034000000), (int8x8_t)v193, 0)).f32[0]);
    v136.i64[0] = v195.i64[0];
    v136.i64[1] = vextq_s8(v195, v195, 8uLL).u32[0];
    v196 = vpadd_f32(vmul_f32(*(float32x2_t *)v195.i8, *(float32x2_t *)v195.i8), vmul_f32(*(float32x2_t *)&v136.u32[2], *(float32x2_t *)&v136.u32[2]));
    v179 = vpadd_f32(v196, v196);
    v144 = 0x100000003;
    goto LABEL_76;
  }
  v176 = vmulq_f32(v163, v139);
  v176.i64[0] = vpaddq_f32(v176, v176).u64[0];
  v177 = vpadd_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v177), (int8x8_t)vclez_f32(v175)), (int8x8_t)vclez_f32(v160)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    v202 = vsub_f32(v177, v175);
    v203 = vrecpe_f32(v202);
    v204 = 4;
    do
    {
      v203 = vmul_f32(v203, vrecps_f32(v202, v203));
      --v204;
    }
    while (v204);
    v136 = vmlaq_n_f32(v136, v139, vmul_f32(v177, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v202), (float32x2_t)0x3400000034000000), (int8x8_t)v203, 0)).f32[0]);
    v136.i64[1] = vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL).u32[0];
    v205 = vpadd_f32(vmul_f32(*(float32x2_t *)v136.f32, *(float32x2_t *)v136.f32), vmul_f32(*(float32x2_t *)&v136.u32[2], *(float32x2_t *)&v136.u32[2]));
    v179 = vpadd_f32(v205, v205);
    v144 = 0x100000000;
LABEL_76:
    v180 = 2;
    goto LABEL_77;
  }
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v177), (int8x8_t)vclez_f32(v166)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    v273 = vmulq_f32(v136, v136);
    v273.i64[0] = vpaddq_f32(v273, v273).u64[0];
    v179 = vpadd_f32(*(float32x2_t *)v273.f32, *(float32x2_t *)v273.f32);
    v180 = 1;
  }
  else
  {
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v168, v171), (int8x8_t)vcgez_f32(v168)), 0), *(int8x8_t *)v6.f32).u32[0] != -1)
    {
      v178 = vmulq_f32(v137, v137);
      v178.i64[0] = vpaddq_f32(v178, v178).u64[0];
      v144 = 0x300000001;
      v179 = vpadd_f32(*(float32x2_t *)v178.f32, *(float32x2_t *)v178.f32);
      v180 = 1;
LABEL_64:
      v136.i64[0] = v137.i64[0];
      goto LABEL_77;
    }
    v276 = vmulq_f32(v135, v135);
    v276.i64[0] = vpaddq_f32(v276, v276).u64[0];
    v179 = vpadd_f32(*(float32x2_t *)v276.f32, *(float32x2_t *)v276.f32);
    v144 = 0x300000003;
    v180 = 1;
    v136 = a1[3];
  }
LABEL_77:
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(v5, v179), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    *(_QWORD *)a3 = v144;
    *(_DWORD *)(a3 + 8) = 1;
    *a4 = v180;
    v7 = *a2;
    v6.i64[0] = v136.i64[0];
    v5 = v179;
  }
LABEL_79:
  if (vdup_lane_s8((int8x8_t)vmovn_s32(vceqq_s32(v7, v134)), 6).u32[0] != -1)
    return *(double *)v6.i64;
  v207 = a1[2];
  v206 = a1[3];
  v208 = a1[1];
  v209 = vsubq_f32(v206, v208);
  v210 = vsubq_f32(v207, v208);
  v212 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v209.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v210, (int8x16_t)v210, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v209, (int8x16_t)v209, 4uLL), *(float32x2_t *)v210.f32);
  *(int8x8_t *)v211.f32 = vext_s8(v212, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v209, (int8x16_t)v209, 8uLL), *(float32x2_t *)v210.f32), *(float32x2_t *)v209.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v210, (int8x16_t)v210, 8uLL)), 4uLL);
  v212.i32[1] = 0;
  v213 = vpadd_f32(vmul_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32), vmul_f32((float32x2_t)v212.u32[0], (float32x2_t)v212.u32[0]));
  v214 = vpadd_f32(v213, v213);
  v215 = 0x300000001;
  if (v214.f32[0] == 0.0)
  {
    v250 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v208.i64[0] = 0;
LABEL_93:
    v251 = 3;
    goto LABEL_105;
  }
  *(int8x8_t *)&v211.u32[2] = v212;
  v216 = (float32x2_t)vextq_s8((int8x16_t)v206, (int8x16_t)v206, 8uLL).u64[0];
  v217 = (float32x2_t)vextq_s8((int8x16_t)v207, (int8x16_t)v207, 8uLL).u64[0];
  v218 = (float32x2_t)vextq_s8((int8x16_t)v207, (int8x16_t)v207, 4uLL).u64[0];
  v219 = (float32x2_t)vextq_s8((int8x16_t)v206, (int8x16_t)v206, 4uLL).u64[0];
  v220 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v206.f32, v218), v219, *(float32x2_t *)v207.f32);
  *(int8x8_t *)v221.f32 = vext_s8(v220, (int8x8_t)vmls_f32(vmul_f32(v216, *(float32x2_t *)v207.f32), *(float32x2_t *)v206.f32, v217), 4uLL);
  v221.i64[1] = v220.u32[0];
  v222 = (float32x2_t)vextq_s8((int8x16_t)v208, (int8x16_t)v208, 8uLL).u64[0];
  v223 = (float32x2_t)vextq_s8((int8x16_t)v208, (int8x16_t)v208, 4uLL).u64[0];
  v224 = (int8x8_t)vmls_f32(vmul_f32(v223, *(float32x2_t *)v207.f32), v218, *(float32x2_t *)v208.f32);
  *(int8x8_t *)v225.f32 = vext_s8(v224, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v208.f32, v217), *(float32x2_t *)v207.f32, v222), 4uLL);
  v225.i64[1] = v224.u32[0];
  v226 = (int8x8_t)vmls_f32(vmul_f32(v219, *(float32x2_t *)v208.f32), v223, *(float32x2_t *)v206.f32);
  *(int8x8_t *)v227.f32 = vext_s8(v226, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v206.f32, v222), *(float32x2_t *)v208.f32, v216), 4uLL);
  v227.i64[1] = v226.u32[0];
  v228 = vmulq_f32(v221, v211);
  v228.i64[0] = vpaddq_f32(v228, v228).u64[0];
  v229 = vpadd_f32(*(float32x2_t *)v228.f32, *(float32x2_t *)v228.f32);
  v230 = vmulq_f32(v225, v211);
  v230.i64[0] = vpaddq_f32(v230, v230).u64[0];
  v231 = vpadd_f32(*(float32x2_t *)v230.f32, *(float32x2_t *)v230.f32);
  v232 = vmulq_f32(v227, v211);
  v232.i64[0] = vpaddq_f32(v232, v232).u64[0];
  v233 = vpadd_f32(*(float32x2_t *)v232.f32, *(float32x2_t *)v232.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v231), (int8x8_t)vcgez_f32(v229)), (int8x8_t)vcgez_f32(v233)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    v252 = (int8x16_t)vmulq_f32(v208, v211);
    v253 = (float32x2_t)vextq_s8(v252, v252, 8uLL).u64[0];
    v254 = vrecpe_f32(v214);
    v255 = 4;
    do
    {
      v254 = vmul_f32(v254, vrecps_f32(v214, v254));
      --v255;
    }
    while (v255);
    v256 = vpadd_f32(*(float32x2_t *)v252.i8, v253);
    v208 = vmulq_n_f32(v211, vmul_f32(v254, vpadd_f32(v256, v256)).f32[0]);
    v208.i32[3] = 0;
    v257 = vmulq_f32(v208, v208);
    v257.i64[0] = vpaddq_f32(v257, v257).u64[0];
    v250 = vpadd_f32(*(float32x2_t *)v257.f32, *(float32x2_t *)v257.f32);
    goto LABEL_93;
  }
  v234 = vnegq_f32(v208);
  v234.i32[3] = 0;
  v235 = vnegq_f32(v206);
  v235.i32[3] = 0;
  v236 = vmulq_f32(v209, v234);
  v236.i64[0] = vpaddq_f32(v236, v236).u64[0];
  v237 = vpadd_f32(*(float32x2_t *)v236.f32, *(float32x2_t *)v236.f32);
  v238 = vmulq_f32(v235, v209);
  v238.i64[0] = vpaddq_f32(v238, v238).u64[0];
  v239 = vpadd_f32(*(float32x2_t *)v238.f32, *(float32x2_t *)v238.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v237), (int8x8_t)vclez_f32(v239)), (int8x8_t)vclez_f32(v233)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    v258 = vsub_f32(v237, v239);
    v259 = vrecpe_f32(v258);
    v260 = 4;
    do
    {
      v259 = vmul_f32(v259, vrecps_f32(v258, v259));
      --v260;
    }
    while (v260);
    v261 = (int8x16_t)vmlaq_n_f32(v208, v209, vmul_f32(v237, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v258), (float32x2_t)0x3400000034000000), (int8x8_t)v259, 0)).f32[0]);
    v207.i64[0] = v261.i64[0];
    v207.i64[1] = vextq_s8(v261, v261, 8uLL).u32[0];
    *(float32x2_t *)v261.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v261.i8, *(float32x2_t *)v261.i8), vmul_f32(*(float32x2_t *)&v207.u32[2], *(float32x2_t *)&v207.u32[2]));
    v250 = vpadd_f32(*(float32x2_t *)v261.i8, *(float32x2_t *)v261.i8);
    v251 = 2;
    goto LABEL_97;
  }
  v240 = vnegq_f32(v207);
  v240.i32[3] = 0;
  v241 = vmulq_f32(v235, v210);
  v241.i64[0] = vpaddq_f32(v241, v241).u64[0];
  v242 = vpadd_f32(*(float32x2_t *)v241.f32, *(float32x2_t *)v241.f32);
  v243 = vmulq_f32(v209, v240);
  v243.i64[0] = vpaddq_f32(v243, v243).u64[0];
  v244 = vpadd_f32(*(float32x2_t *)v243.f32, *(float32x2_t *)v243.f32);
  v245 = vmulq_f32(v210, v240);
  v245.i64[0] = vpaddq_f32(v245, v245).u64[0];
  v246 = vpadd_f32(*(float32x2_t *)v245.f32, *(float32x2_t *)v245.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v242, v239), (int8x8_t)vcge_f32(v244, v246)), (int8x8_t)vclez_f32(v229)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    v262 = vsub_f32(v242, v239);
    v263 = vadd_f32(v262, vsub_f32(v244, v246));
    v264 = vrecpe_f32(v263);
    v265 = 4;
    do
    {
      v264 = vmul_f32(v264, vrecps_f32(v263, v264));
      --v265;
    }
    while (v265);
    v266 = (int8x16_t)vmlaq_n_f32(v206, vsubq_f32(v207, v206), vmul_f32(v262, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v263), (float32x2_t)0x3400000034000000), (int8x8_t)v264, 0)).f32[0]);
    v208.i64[0] = v266.i64[0];
    v208.i64[1] = vextq_s8(v266, v266, 8uLL).u32[0];
    v267 = vpadd_f32(vmul_f32(*(float32x2_t *)v266.i8, *(float32x2_t *)v266.i8), vmul_f32(*(float32x2_t *)&v208.u32[2], *(float32x2_t *)&v208.u32[2]));
    v250 = vpadd_f32(v267, v267);
    v215 = 0x200000003;
    goto LABEL_104;
  }
  v247 = vmulq_f32(v234, v210);
  v247.i64[0] = vpaddq_f32(v247, v247).u64[0];
  v248 = vpadd_f32(*(float32x2_t *)v247.f32, *(float32x2_t *)v247.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v248), (int8x8_t)vclez_f32(v246)), (int8x8_t)vclez_f32(v231)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    v268 = vsub_f32(v248, v246);
    v269 = vrecpe_f32(v268);
    v270 = 4;
    do
    {
      v269 = vmul_f32(v269, vrecps_f32(v268, v269));
      --v270;
    }
    while (v270);
    v208 = vmlaq_n_f32(v208, v210, vmul_f32(v248, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v268), (float32x2_t)0x3400000034000000), (int8x8_t)v269, 0)).f32[0]);
    v208.i64[1] = vextq_s8((int8x16_t)v208, (int8x16_t)v208, 8uLL).u32[0];
    v271 = vpadd_f32(vmul_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32), vmul_f32(*(float32x2_t *)&v208.u32[2], *(float32x2_t *)&v208.u32[2]));
    v250 = vpadd_f32(v271, v271);
    v215 = 0x200000001;
LABEL_104:
    v251 = 2;
    goto LABEL_105;
  }
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v248), (int8x8_t)vclez_f32(v237)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    v274 = vmulq_f32(v208, v208);
    v274.i64[0] = vpaddq_f32(v274, v274).u64[0];
    v250 = vpadd_f32(*(float32x2_t *)v274.f32, *(float32x2_t *)v274.f32);
    v251 = 1;
  }
  else
  {
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v239, v242), (int8x8_t)vcgez_f32(v239)), 0), *(int8x8_t *)v6.f32).u32[0] != -1)
    {
      v249 = vmulq_f32(v207, v207);
      v249.i64[0] = vpaddq_f32(v249, v249).u64[0];
      v215 = 0x300000002;
      v250 = vpadd_f32(*(float32x2_t *)v249.f32, *(float32x2_t *)v249.f32);
      v251 = 1;
LABEL_97:
      v208.i64[0] = v207.i64[0];
      goto LABEL_105;
    }
    v277 = vmulq_f32(v206, v206);
    v277.i64[0] = vpaddq_f32(v277, v277).u64[0];
    v250 = vpadd_f32(*(float32x2_t *)v277.f32, *(float32x2_t *)v277.f32);
    v215 = 0x300000003;
    v251 = 1;
    v208 = a1[3];
  }
LABEL_105:
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(v5, v250), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    *(_QWORD *)a3 = v215;
    *(_DWORD *)(a3 + 8) = 2;
    *a4 = v251;
    v6.i64[0] = v208.i64[0];
  }
  return *(double *)v6.i64;
}

void physx::Gu::closestPtPointTetrahedron(float32x4_t *a1, _OWORD *a2, _OWORD *a3, _DWORD *a4, _DWORD *a5, int *a6)
{
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  int8x8_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int v26;
  float32x2_t v32;
  float32x2_t v33;
  int v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  int8x8_t v43;
  float32x4_t v44;
  int8x8_t v45;
  float32x4_t v46;
  int8x8_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int8x8_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  int8x8_t v84;
  float32x4_t v85;
  float32x2_t v86;
  float32x2_t v87;
  int8x8_t v88;
  float32x4_t v89;
  int8x8_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x2_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x2_t v101;
  float32x4_t v102;
  float32x2_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x4_t v107;
  float32x2_t v108;
  float32x4_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float32x2_t v112;
  int8x8_t v113;
  uint64_t v114;
  uint64_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x2_t v118;
  float32x2_t v119;
  int v120;
  float32x2_t v121;
  int v122;
  float32x2_t v123;
  float32x2_t v124;
  int v125;
  int v126;
  float32x2_t v127;
  float32x2_t v128;
  int v129;
  float32x2_t v130;
  float32x2_t v131;
  int v132;
  float32x4_t v133;
  float32x4_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int8x16_t v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;

  v146 = *MEMORY[0x24BDAC8D0];
  v12 = *a1;
  v11 = a1[1];
  v13 = a1[2];
  v14 = a1[3];
  v15 = (int8x16_t)vsubq_f32(v11, *a1);
  v16 = (int8x16_t)vsubq_f32(v13, *a1);
  v17 = (float32x2_t)vextq_s8(v15, v15, 8uLL).u64[0];
  v18 = (float32x2_t)vextq_s8(v16, v16, 8uLL).u64[0];
  v19 = (float32x2_t)vextq_s8(v16, v16, 4uLL).u64[0];
  v20 = (float32x2_t)vextq_s8(v15, v15, 4uLL).u64[0];
  v21 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v15.i8, v19), v20, *(float32x2_t *)v16.i8);
  *(int8x8_t *)v22.f32 = vext_s8(v21, (int8x8_t)vmls_f32(vmul_f32(v17, *(float32x2_t *)v16.i8), *(float32x2_t *)v15.i8, v18), 4uLL);
  v22.i64[1] = v21.u32[0];
  v23 = vpadd_f32(vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32), vmul_f32((float32x2_t)v21.u32[0], (float32x2_t)v21.u32[0]));
  v24 = vpadd_f32(v23, v23);
  v25 = vrsqrte_f32(v24);
  v26 = 4;
  do
  {
    v25 = vmul_f32(v25, vrsqrts_f32(vmul_f32(v25, v25), v24));
    --v26;
  }
  while (v26);
  __asm { FMOV            V6.2S, #1.0 }
  v32 = vmul_f32(v24, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v24), 0), _D6, (int8x8_t)v25));
  v33 = vrecpe_f32(v32);
  v34 = 4;
  do
  {
    v33 = vmul_f32(v33, vrecps_f32(v32, v33));
    --v34;
  }
  while (v34);
  v35 = vmulq_n_f32(v22, v33.f32[0]);
  v35.i32[3] = 0;
  v36 = vsubq_f32(v14, v12);
  v37 = vmulq_f32(v36, v35);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  if (vabs_f32(vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32)).f32[0] >= 0.0001)
  {
    v38 = (int8x16_t)vsubq_f32(v14, v11);
    v39 = (int8x16_t)vsubq_f32(v13, v11);
    v40 = (float32x2_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
    v41 = (float32x2_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL).u64[0];
    v42 = vmul_f32(v18, *(float32x2_t *)v36.f32);
    v43 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v16.i8, v41), v19, *(float32x2_t *)v36.f32);
    *(int8x8_t *)v44.f32 = vext_s8(v43, (int8x8_t)vmls_f32(v42, *(float32x2_t *)v16.i8, v40), 4uLL);
    v44.i64[1] = v43.u32[0];
    v45 = (int8x8_t)vmls_f32(vmul_f32(v20, *(float32x2_t *)v36.f32), v41, *(float32x2_t *)v15.i8);
    *(int8x8_t *)v46.f32 = vext_s8(v45, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v15.i8, v40), *(float32x2_t *)v36.f32, v17), 4uLL);
    v46.i64[1] = v45.u32[0];
    v47 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 4uLL), *(float32x2_t *)v38.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 4uLL), *(float32x2_t *)v39.i8);
    *(int8x8_t *)v48.f32 = vext_s8(v47, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v39.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)), *(float32x2_t *)v38.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)), 4uLL);
    v48.i64[1] = v47.u32[0];
    v49 = vmulq_f32(v12, v22);
    v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
    v50 = vmulq_f32(v12, v44);
    v50.i64[0] = vpaddq_f32(v50, v50).u64[0];
    v51 = vmulq_f32(v12, v46);
    v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
    v52 = vmulq_f32(v12, v48);
    v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
    v53 = vmulq_f32(v14, v22);
    v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
    v54 = vmulq_f32(v11, v44);
    v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
    v55 = vmulq_f32(v13, v46);
    v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
    v56 = vmulq_f32(v11, v48);
    v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
    *(float32x2_t *)v53.f32 = vmul_f32((float32x2_t)vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32), 4uLL), (float32x2_t)vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32), 4uLL));
    *(float32x2_t *)&v53.u32[2] = vmul_f32((float32x2_t)vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32), 4uLL), (float32x2_t)vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32), 4uLL));
    v143 = (int8x16_t)vcgeq_f32(v53, (float32x4_t)vdupq_n_s32(0xB58637BD));
    *(int16x4_t *)v56.f32 = vmovn_s32((int32x4_t)vmvnq_s8(v143));
    if (vuzp1_s8(*(int8x8_t *)v56.f32, *(int8x8_t *)v56.f32).u32[0] != -1)
    {
      v145 = 2;
      v144 = 0x100000000;
      physx::Gu::getClosestPtPointTriangle(a1, (int32x4_t *)&v143, (uint64_t)&v144, a6);
      v57 = a1[HIDWORD(v144)];
      v58 = a1[v145];
      v59 = a2[v144];
      v60 = a2[HIDWORD(v144)];
      v61 = a2[v145];
      v62 = a3[v144];
      v63 = a3[HIDWORD(v144)];
      v64 = a3[v145];
      v65 = a4[v144];
      v66 = a4[HIDWORD(v144)];
      v67 = a4[v145];
      v68 = a5[v144];
      v69 = a5[HIDWORD(v144)];
      v70 = a5[v145];
      *a1 = a1[v144];
      a1[1] = v57;
      a1[2] = v58;
      *a2 = v59;
      a2[1] = v60;
      a2[2] = v61;
      *a3 = v62;
      a3[1] = v63;
      a3[2] = v64;
      *a4 = v65;
      a4[1] = v66;
      a4[2] = v67;
      *a5 = v68;
      a5[1] = v69;
      a5[2] = v70;
    }
    return;
  }
  *a6 = 3;
  v71 = *a1;
  v72 = a1[1];
  v73 = a1[2];
  v74 = vsubq_f32(v72, *a1);
  v75 = vsubq_f32(v73, *a1);
  v77 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v74.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v75, (int8x16_t)v75, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 4uLL), *(float32x2_t *)v75.f32);
  *(int8x8_t *)v76.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL), *(float32x2_t *)v75.f32), *(float32x2_t *)v74.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL)), 4uLL);
  v77.i32[1] = 0;
  v78 = vpadd_f32(vmul_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32), vmul_f32((float32x2_t)v77.u32[0], (float32x2_t)v77.u32[0]));
  v79 = vpadd_f32(v78, v78);
  if (v79.f32[0] <= 0.00000011921)
  {
    *a6 = 2;
    v116 = vsubq_f32(a1[1], *a1);
    v117 = vmulq_f32(v116, v116);
    v117.i64[0] = vpaddq_f32(v117, v117).u64[0];
    v118 = vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v118), 0), *(int8x8_t *)a1->f32).u32[0] == -1)
    {
      *a6 = 1;
    }
    else
    {
      v119 = vrecpe_f32(v118);
      v120 = 4;
      do
      {
        v119 = vmul_f32(v119, vrecps_f32(v118, v119));
        --v120;
      }
      while (v120);
    }
  }
  else
  {
    if (v79.f32[0] == 0.0)
      return;
    *(int8x8_t *)&v76.u32[2] = v77;
    v80 = (float32x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u64[0];
    v81 = (float32x2_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u64[0];
    v82 = (float32x2_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 4uLL).u64[0];
    v83 = (float32x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 4uLL).u64[0];
    v84 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v72.f32, v82), v83, *(float32x2_t *)v73.f32);
    *(int8x8_t *)v85.f32 = vext_s8(v84, (int8x8_t)vmls_f32(vmul_f32(v80, *(float32x2_t *)v73.f32), *(float32x2_t *)v72.f32, v81), 4uLL);
    v85.i64[1] = v84.u32[0];
    v86 = (float32x2_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u64[0];
    v87 = (float32x2_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 4uLL).u64[0];
    v88 = (int8x8_t)vmls_f32(vmul_f32(v87, *(float32x2_t *)v73.f32), v82, *(float32x2_t *)v71.f32);
    *(int8x8_t *)v89.f32 = vext_s8(v88, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v71.f32, v81), *(float32x2_t *)v73.f32, v86), 4uLL);
    v89.i64[1] = v88.u32[0];
    v90 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v71.f32, v83), v87, *(float32x2_t *)v72.f32);
    *(int8x8_t *)v91.f32 = vext_s8(v90, (int8x8_t)vmls_f32(vmul_f32(v86, *(float32x2_t *)v72.f32), *(float32x2_t *)v71.f32, v80), 4uLL);
    v91.i64[1] = v90.u32[0];
    v92 = vmulq_f32(v85, v76);
    v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
    v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
    v94 = vmulq_f32(v89, v76);
    v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
    v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
    v96 = vmulq_f32(v91, v76);
    v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
    v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v95), (int8x8_t)vcgez_f32(v93)), (int8x8_t)vcgez_f32(v97)), 0), *(int8x8_t *)v71.f32).u32[0] != -1)
    {
      v98 = vnegq_f32(v71);
      v98.i32[3] = 0;
      v99 = vnegq_f32(v72);
      v99.i32[3] = 0;
      v100 = vmulq_f32(v98, v74);
      v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
      v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
      v102 = vmulq_f32(v74, v99);
      v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
      v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v101), (int8x8_t)vclez_f32(v103)), (int8x8_t)vclez_f32(v97)), 0), *(int8x8_t *)v71.f32).u32[0] == -1)
      {
        v123 = vsub_f32(v101, v103);
        v124 = vrecpe_f32(v123);
        v125 = 4;
        do
        {
          v124 = vmul_f32(v124, vrecps_f32(v123, v124));
          --v125;
        }
        while (v125);
        v115 = 0;
        v126 = 2;
        v114 = 1;
      }
      else
      {
        v104 = vnegq_f32(v73);
        v104.i32[3] = 0;
        v105 = vmulq_f32(v99, v75);
        v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
        v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
        v107 = vmulq_f32(v74, v104);
        v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
        v108 = vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32);
        v109 = vmulq_f32(v75, v104);
        v109.i64[0] = vpaddq_f32(v109, v109).u64[0];
        v110 = vpadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v109.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v106, v103), (int8x8_t)vcge_f32(v108, v110)), (int8x8_t)vclez_f32(v93)), 0), *(int8x8_t *)v71.f32).u32[0] == -1)
        {
          v127 = vadd_f32(vsub_f32(v106, v103), vsub_f32(v108, v110));
          v128 = vrecpe_f32(v127);
          v129 = 4;
          do
          {
            v128 = vmul_f32(v128, vrecps_f32(v127, v128));
            --v129;
          }
          while (v129);
          v114 = 2;
          v115 = 1;
        }
        else
        {
          v111 = vmulq_f32(v98, v75);
          v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
          v112 = vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v112), (int8x8_t)vclez_f32(v110)), (int8x8_t)vclez_f32(v95)), 0), *(int8x8_t *)v71.f32).u32[0] != -1)
          {
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v112), (int8x8_t)vclez_f32(v101)), 0), *(int8x8_t *)v71.f32).u32[0] == -1)
            {
              v115 = 0;
              v114 = 1;
            }
            else
            {
              v113 = (int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v103, v106), (int8x8_t)vcgez_f32(v103)), 0);
              v114 = 1;
              if (vuzp1_s8(v113, v113).u32[0] == -1)
                v115 = 1;
              else
                v115 = 2;
            }
            v126 = 1;
            goto LABEL_39;
          }
          v130 = vsub_f32(v112, v110);
          v131 = vrecpe_f32(v130);
          v132 = 4;
          do
          {
            v131 = vmul_f32(v131, vrecps_f32(v130, v131));
            --v132;
          }
          while (v132);
          v115 = 0;
          v114 = 2;
        }
        v126 = 2;
      }
LABEL_39:
      v133 = a1[v115];
      v134 = a1[v114];
      v135 = a2[v115];
      v136 = a2[v114];
      v137 = a3[v115];
      v138 = a3[v114];
      v139 = a4[v115];
      v140 = a4[v114];
      v141 = a5[v115];
      v142 = a5[v114];
      *a1 = v133;
      a1[1] = v134;
      *a2 = v135;
      a2[1] = v136;
      *a3 = v137;
      a3[1] = v138;
      *a4 = v139;
      a4[1] = v140;
      *a5 = v141;
      a5[1] = v142;
      *a6 = v126;
      return;
    }
    v121 = vrecpe_f32(v79);
    v122 = 4;
    do
    {
      v121 = vmul_f32(v121, vrecps_f32(v79, v121));
      --v122;
    }
    while (v122);
  }
}

__n128 physx::Gu::HeightField::HeightField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  *(_DWORD *)(a1 + 8) = 196609;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = off_24ED91948;
  *(_QWORD *)(a1 + 16) = &unk_24ED91A18;
  *(_WORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a3 + 16);
  result = *(__n128 *)(a3 + 24);
  v4 = *(_OWORD *)(a3 + 40);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a3 + 56);
  *(_OWORD *)(a1 + 72) = v4;
  *(__n128 *)(a1 + 56) = result;
  *(_WORD *)(a1 + 92) = *(_WORD *)(a3 + 60);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 48) = 0;
  return result;
}

void physx::Gu::HeightField::~HeightField(physx::Gu::HeightField *this)
{
  *(_QWORD *)this = off_24ED91948;
  *((_QWORD *)this + 2) = &unk_24ED91A18;
  if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 10) = 0;
  }
}

{
  *(_QWORD *)this = off_24ED91948;
  *((_QWORD *)this + 2) = &unk_24ED91A18;
  if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 10) = 0;
  }
  (*(void (**)(uint64_t, physx::Gu::HeightField *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                            + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

void `non-virtual thunk to'physx::Gu::HeightField::~HeightField(physx::Gu::HeightField *this)
{
  *((_QWORD *)this - 2) = off_24ED91948;
  *(_QWORD *)this = &unk_24ED91A18;
  if ((*((_BYTE *)this - 6) & 1) != 0)
  {
    if (*((_QWORD *)this + 8))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 8) = 0;
  }
}

{
  char *v1;

  *((_QWORD *)this - 2) = off_24ED91948;
  v1 = (char *)this - 16;
  *(_QWORD *)this = &unk_24ED91A18;
  if ((*((_BYTE *)this - 6) & 1) != 0)
  {
    if (*((_QWORD *)this + 8))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 8) = 0;
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v1);
}

uint64_t physx::Gu::HeightField::onRefCountZero(physx::Gu::HeightField *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!physx::GuMeshFactory::removeHeightField(*((_QWORD *)this + 16), (uint64_t)this))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/hf/GuHeightField.cpp", 101, "Gu::HeightField::onRefCountZero: double deletion detected!", v10, v11, v12, a9);
  v13 = *((_QWORD *)this + 16);
  v14 = *(_QWORD *)this;
  if ((*((_WORD *)this + 5) & 1) != 0)
    result = (*(uint64_t (**)(physx::Gu::HeightField *))(v14 + 32))(this);
  else
    result = (*(uint64_t (**)(physx::Gu::HeightField *))(v14 + 24))(this);
  v16 = *(unsigned int *)(v13 + 248);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = 8 * v16;
    do
    {
      result = (*(uint64_t (**)(_QWORD, physx::Gu::HeightField *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v13 + 240)
                                                                                                  + v17)
                                                                                    + 16))(*(_QWORD *)(*(_QWORD *)(v13 + 240) + v17), this, 1);
      v17 += 8;
    }
    while (v18 != v17);
  }
  return result;
}

uint64_t `non-virtual thunk to'physx::Gu::HeightField::onRefCountZero(physx::Gu::HeightField *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return physx::Gu::HeightField::onRefCountZero((physx::Gu::HeightField *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t physx::Gu::HeightField::exportExtraData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = (4 * *(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 60));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 80), v4);
}

uint64_t physx::Gu::HeightField::release(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(this + 24);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this + 16) + 16))(this + 16);
  return this;
}

uint64_t physx::Gu::HeightField::acquireReference(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 24);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t physx::Gu::HeightField::getReferenceCount(physx::Gu::HeightField *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t physx::Gu::HeightField::modifySamples(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  unsigned int v9;
  unsigned int v10;
  unsigned __int16 v11;
  BOOL *v12;
  float v13;
  float v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  uint64_t v28;
  __int16 *v29;
  int v30;
  float v31;
  unsigned int v33;
  uint64_t v35;
  unsigned int v36;

  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v13 = *(float *)(a1 + 112);
  v14 = *(float *)(a1 + 116);
  v15 = (*(_DWORD *)a4 + a3) & ~((*(_DWORD *)a4 + a3) >> 31);
  v33 = v10;
  if (v15 >= v10)
    v15 = v10;
  v16 = a3 & ~(a3 >> 31);
  v36 = v15;
  if (v16 < v15)
  {
    v17 = (*(_DWORD *)(a4 + 4) + a2) & ~((*(_DWORD *)(a4 + 4) + a2) >> 31);
    if (v17 >= v9)
      v18 = v9;
    else
      v18 = v17;
    v19 = a2 & ~(a2 >> 31);
    v20 = v16 - a3;
    v21 = -a2;
    v22 = v9 * v16;
    v35 = v19;
    do
    {
      if (v19 < v18)
      {
        v23 = *(_QWORD *)(a1 + 80);
        v24 = v19;
        do
        {
          v25 = v23 + 4 * (v22 + v24);
          *(_DWORD *)v25 = *(_DWORD *)(*(_QWORD *)(a4 + 24) + 4 * (v21 + (_DWORD)v24 + v20 * *(_DWORD *)(a4 + 4)));
          if (physx::Gu::HeightField::isCollisionVertexPreca((physx::Gu::HeightField *)a1, v22 + v24, v16, v24, v11, v12))
          {
            v26 = 0x80;
          }
          else
          {
            v26 = 0;
          }
          *(_BYTE *)(v25 + 3) = v26 & 0x80 | *(_BYTE *)(v25 + 3) & 0x7F;
          v23 = *(_QWORD *)(a1 + 80);
          v27 = *(__int16 *)(v23 + 4 * (v22 + v24));
          if (v13 > (float)v27)
            v13 = (float)v27;
          if (v14 < (float)v27)
            v14 = (float)v27;
          ++v24;
        }
        while (v18 != v24);
      }
      ++v16;
      ++v20;
      v19 = v35;
      v22 += v9;
    }
    while (v16 != v36);
  }
  if (a5)
  {
    v28 = v33 * v9;
    if ((_DWORD)v28)
    {
      v29 = *(__int16 **)(a1 + 80);
      v14 = -3.4028e38;
      v13 = 3.4028e38;
      do
      {
        v30 = *v29;
        v29 += 2;
        v31 = (float)v30;
        if (v13 > (float)v30)
          v13 = v31;
        if (v14 < v31)
          v14 = v31;
        --v28;
      }
      while (v28);
    }
    else
    {
      v13 = 3.4028e38;
      v14 = -3.4028e38;
    }
  }
  *(float *)(a1 + 112) = v13;
  *(float *)(a1 + 116) = v14;
  *(float *)(a1 + 36) = (float)(v14 + v13) * 0.5;
  *(float *)(a1 + 48) = (float)(v14 - v13) * 0.5;
  ++*(_DWORD *)(a1 + 120);
  return 1;
}

BOOL physx::Gu::HeightField::isCollisionVertexPreca(physx::Gu::HeightField *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned __int16 a5, BOOL *a6)
{
  _BOOL8 result;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char v16;

  if ((*((_WORD *)this + 46) & 1) == 0)
  {
LABEL_2:
    v16 = 0;
    if (physx::Gu::HeightField::isSolidVertex(this, a2, a3, a4, &v16, a6))
      return 1;
    if (v16)
    {
      v11 = *((_QWORD *)this + 10);
      v12 = 2 * *(__int16 *)(v11 + 4 * a2);
      if (a3 && *((_DWORD *)this + 14) - 1 > a3)
      {
        v13 = v12
            - (*(__int16 *)(v11 + 4 * (*((_DWORD *)this + 15) + a2))
             + *(__int16 *)(v11 + 4 * (a2 - *((_DWORD *)this + 15))));
        v14 = 1;
        if (!a4)
          goto LABEL_17;
      }
      else
      {
        v14 = 0;
        v13 = 0;
        if (!a4)
          goto LABEL_17;
      }
      if (*((_DWORD *)this + 15) - 1 > a4)
      {
        v15 = v12 - (*(__int16 *)(v11 + 4 * (a2 + 1)) + *(__int16 *)(v11 + 4 * (a2 - 1)));
        goto LABEL_19;
      }
LABEL_17:
      if (!v14)
        return 1;
      v15 = 0;
LABEL_19:
      if ((v15 ^ v13) < 0)
        return *((float *)this + 22) < (float)(v15 + v13);
    }
    return 0;
  }
  result = 0;
  if (a3 && a4)
  {
    if (*((_DWORD *)this + 14) - 1 <= a3 || *((_DWORD *)this + 15) - 1 <= a4)
      return 0;
    goto LABEL_2;
  }
  return result;
}

uint64_t physx::Gu::HeightField::load(uint64_t a1, void (***a2)(_QWORD, unsigned __int32 *, uint64_t))
{
  int v4;
  uint64_t result;
  int v6;
  uint8x8_t v7;
  int16x8_t v8;
  __n128 v9;
  int16x8_t v10;
  uint8x8_t v11;
  int16x8_t v12;
  __n128 v13;
  int16x8_t v14;
  char v15;
  uint8x8_t v16;
  int16x8_t v17;
  float v18;
  uint8x8_t v19;
  int16x8_t v20;
  float v21;
  uint8x8_t v22;
  int16x8_t v23;
  float v24;
  uint8x8_t v25;
  int16x8_t v26;
  float v27;
  uint8x8_t v28;
  int16x8_t v29;
  float v30;
  uint8x8_t v31;
  int16x8_t v32;
  float v33;
  float v34;
  uint8x8_t v35;
  int16x8_t v36;
  __n128 v37;
  int16x8_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char v46;
  char v47;
  BOOL v48;
  int v49;
  unsigned __int32 v50;

  if ((*(_WORD *)(a1 + 10) & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 80))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v49 = 0;
  v48 = 0;
  v4 = physx::readHeader(0x48u, 0x46u, 0x48u, 0x46u, &v49, &v48, a2);
  result = 0;
  if (v4)
  {
    v6 = v48;
    *(_DWORD *)(a1 + 56) = physx::readDword(v48, a2);
    *(_DWORD *)(a1 + 60) = physx::readDword(v6, a2);
    (**a2)(a2, &v50, 4);
    if (v6)
    {
      v7.i32[0] = v50;
      v8 = (int16x8_t)vmovl_u8(v7);
      *(int16x4_t *)v8.i8 = vrev64_s16(*(int16x4_t *)v8.i8);
      *(_DWORD *)(a1 + 64) = vmovn_s16(v8).u32[0];
      v9 = ((__n128 (*)(_QWORD, unsigned __int32 *, uint64_t))**a2)(a2, &v50, 4);
      v9.n128_u32[0] = v50;
      v10 = (int16x8_t)vmovl_u8((uint8x8_t)v9.n128_u64[0]);
      *(int16x4_t *)v10.i8 = vrev64_s16(*(int16x4_t *)v10.i8);
      v50 = vmovn_s16(v10).u32[0];
    }
    else
    {
      *(float *)(a1 + 64) = *(float *)&v50;
      (**a2)(a2, &v50, 4);
    }
    *(float *)(a1 + 68) = *(float *)&v50;
    (**a2)(a2, &v50, 4);
    if (v6)
    {
      v11.i32[0] = v50;
      v12 = (int16x8_t)vmovl_u8(v11);
      *(int16x4_t *)v12.i8 = vrev64_s16(*(int16x4_t *)v12.i8);
      *(_DWORD *)(a1 + 72) = vmovn_s16(v12).u32[0];
      (**a2)(a2, &v50, 4);
      v13 = ((__n128 (*)(_QWORD, unsigned __int32 *, uint64_t))**a2)(a2, &v50, 4);
      v13.n128_u32[0] = v50;
      v14 = (int16x8_t)vmovl_u8((uint8x8_t)v13.n128_u64[0]);
      *(int16x4_t *)v14.i8 = vrev64_s16(*(int16x4_t *)v14.i8);
      v50 = vmovn_s16(v14).u32[0];
    }
    else
    {
      *(float *)(a1 + 72) = *(float *)&v50;
      (**a2)(a2, &v50, 4);
      (**a2)(a2, &v50, 4);
    }
    *(float *)(a1 + 88) = *(float *)&v50;
    LOWORD(v50) = 0;
    (**a2)(a2, &v50, 2);
    if (v6)
    {
      v15 = v50;
      LOBYTE(v50) = BYTE1(v50);
      BYTE1(v50) = v15;
    }
    *(_WORD *)(a1 + 92) = v50;
    *(_DWORD *)(a1 + 96) = physx::readDword(v6 != 0, a2);
    (**a2)(a2, &v50, 4);
    if (v6)
    {
      v16.i32[0] = v50;
      v17 = (int16x8_t)vmovl_u8(v16);
      *(int16x4_t *)v17.i8 = vrev64_s16(*(int16x4_t *)v17.i8);
      v50 = vmovn_s16(v17).u32[0];
    }
    v18 = *(float *)&v50;
    (**a2)(a2, &v50, 4);
    if (v6)
    {
      v19.i32[0] = v50;
      v20 = (int16x8_t)vmovl_u8(v19);
      *(int16x4_t *)v20.i8 = vrev64_s16(*(int16x4_t *)v20.i8);
      v50 = vmovn_s16(v20).u32[0];
    }
    v21 = *(float *)&v50;
    (**a2)(a2, &v50, 4);
    if (v6)
    {
      v22.i32[0] = v50;
      v23 = (int16x8_t)vmovl_u8(v22);
      *(int16x4_t *)v23.i8 = vrev64_s16(*(int16x4_t *)v23.i8);
      v50 = vmovn_s16(v23).u32[0];
    }
    v24 = *(float *)&v50;
    (**a2)(a2, &v50, 4);
    if (v6)
    {
      v25.i32[0] = v50;
      v26 = (int16x8_t)vmovl_u8(v25);
      *(int16x4_t *)v26.i8 = vrev64_s16(*(int16x4_t *)v26.i8);
      v50 = vmovn_s16(v26).u32[0];
    }
    v27 = *(float *)&v50;
    (**a2)(a2, &v50, 4);
    if (v6)
    {
      v28.i32[0] = v50;
      v29 = (int16x8_t)vmovl_u8(v28);
      *(int16x4_t *)v29.i8 = vrev64_s16(*(int16x4_t *)v29.i8);
      v50 = vmovn_s16(v29).u32[0];
    }
    v30 = *(float *)&v50;
    (**a2)(a2, &v50, 4);
    if (v6)
    {
      v31.i32[0] = v50;
      v32 = (int16x8_t)vmovl_u8(v31);
      *(int16x4_t *)v32.i8 = vrev64_s16(*(int16x4_t *)v32.i8);
      v50 = vmovn_s16(v32).u32[0];
    }
    v33 = (float)(v24 + *(float *)&v50) * 0.5;
    v34 = *(float *)&v50 - v24;
    *(float *)(a1 + 32) = (float)(v18 + v27) * 0.5;
    *(float *)(a1 + 36) = (float)(v21 + v30) * 0.5;
    *(float *)(a1 + 40) = v33;
    *(float *)(a1 + 44) = (float)(v27 - v18) * 0.5;
    *(float *)(a1 + 48) = (float)(v30 - v21) * 0.5;
    *(float *)(a1 + 52) = v34 * 0.5;
    *(_DWORD *)(a1 + 104) = physx::readDword(v6 != 0, a2);
    *(_DWORD *)(a1 + 108) = physx::readDword(v6 != 0, a2);
    (**a2)(a2, &v50, 4);
    if (v6)
    {
      v35.i32[0] = v50;
      v36 = (int16x8_t)vmovl_u8(v35);
      *(int16x4_t *)v36.i8 = vrev64_s16(*(int16x4_t *)v36.i8);
      *(_DWORD *)(a1 + 112) = vmovn_s16(v36).u32[0];
      v37 = ((__n128 (*)(_QWORD, unsigned __int32 *, uint64_t))**a2)(a2, &v50, 4);
      v37.n128_u32[0] = v50;
      v38 = (int16x8_t)vmovl_u8((uint8x8_t)v37.n128_u64[0]);
      *(int16x4_t *)v38.i8 = vrev64_s16(*(int16x4_t *)v38.i8);
      v50 = vmovn_s16(v38).u32[0];
    }
    else
    {
      *(float *)(a1 + 112) = *(float *)&v50;
      (**a2)(a2, &v50, 4);
    }
    *(float *)(a1 + 116) = *(float *)&v50;
    *(_QWORD *)(a1 + 80) = 0;
    if (!(*(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56)))
      return 1;
    v39 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * (*(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56)), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/hf/GuHeightField.cpp", 259);
    *(_QWORD *)(a1 + 80) = v39;
    if (v39)
    {
      (**a2)(a2, (unsigned __int32 *)v39, (4 * *(_DWORD *)(a1 + 108)));
      if (v6 && *(_DWORD *)(a1 + 108))
      {
        v43 = 0;
        v44 = 0;
        do
        {
          v45 = (char *)(*(_QWORD *)(a1 + 80) + v43);
          v46 = *v45;
          *v45 = v45[1];
          v45[1] = v46;
          ++v44;
          v43 += 4;
        }
        while (v44 < *(unsigned int *)(a1 + 108));
      }
      return 1;
    }
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/hf/GuHeightField.cpp", 262, "Gu::HeightField::load: PX_ALLOC failed!", v40, v41, v42, v47);
    return 0;
  }
  return result;
}

uint64_t physx::Gu::HeightField::loadFromDesc(physx::Gu::HeightField *a1, int32x2_t *a2)
{
  unsigned int v3;
  unsigned int v4;
  float32x2_t v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 *v11;
  __int16 v12;
  __int16 v13;
  int v14;
  uint64_t i;
  char *v16;
  unsigned __int16 v17;
  BOOL *v18;
  uint64_t v19;
  _DWORD *v20;
  _BYTE *v21;
  int v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  physx::Gu::HeightField *v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  __int16 *v32;
  char v33;
  _BYTE *v34;
  int v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  unsigned int v39;
  _DWORD *v40;
  _BOOL4 isCollisionVertexPreca;
  char v42;
  char v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  physx::Gu::HeightField *v49;
  char *v50;
  int v51;
  int v52;
  float v53;
  float v54;
  float v55;
  float v56;
  char v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  void **v63;
  physx::Gu::HeightField *v64;
  void *v65;
  int v66;
  void *v67;
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v64 = a1;
  if ((*((_WORD *)a1 + 5) & 1) != 0 && *((_QWORD *)a1 + 10))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    a1 = v64;
  }
  *((_DWORD *)a1 + 24) = a2[1].i32[0];
  *((_DWORD *)a1 + 22) = a2[4].i32[0];
  *((_WORD *)a1 + 46) = a2[4].i16[2];
  *((_DWORD *)a1 + 26) = a2[2].i32[0];
  v3 = HIDWORD(*(unint64_t *)a2);
  v4 = *a2;
  v5 = vcvt_f32_u32((uint32x2_t)vadd_s32(*a2, (int32x2_t)0x100000001));
  *((int32x2_t *)a1 + 7) = *a2;
  *((float32x2_t *)a1 + 8) = v5;
  *((float *)a1 + 18) = (float)v3;
  *((_QWORD *)a1 + 10) = 0;
  v6 = v3 * v4;
  *((_QWORD *)a1 + 14) = 0xFF7FFFFF7F7FFFFFLL;
  if (v3 * v4)
  {
    v7 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v3 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/hf/GuHeightField.cpp", 308);
    *((_QWORD *)v64 + 10) = v7;
    if (!v7)
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/hf/GuHeightField.cpp", 311, "Gu::HeightField::load: PX_ALLOC failed!", v8, v9, v10, v58);
      return 0;
    }
    v11 = (__int16 *)a2[3];
    v12 = 0x7FFF;
    v13 = 0x8000;
    do
    {
      *v7++ = *(_DWORD *)v11;
      v14 = *v11;
      if (v14 < v12)
        v12 = *v11;
      if (v14 > v13)
        v13 = *v11;
      v11 = (__int16 *)((char *)v11 + a2[2].i32[0]);
      --v6;
    }
    while (v6);
    *((float *)v64 + 28) = (float)v12;
    *((float *)v64 + 29) = (float)v13;
    v4 = *((_DWORD *)v64 + 14);
    v3 = *((_DWORD *)v64 + 15);
  }
  for (i = 0; i != 32; i += 16)
  {
    v16 = (char *)&v65 + i;
    *(_QWORD *)v16 = 0;
    *((_DWORD *)v16 + 2) = 0;
  }
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extendUninitialized((uint64_t)&v65, v3 + 1);
  bzero(v65, (4 * v66));
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extendUninitialized((uint64_t)&v67, v3 + 1);
  bzero(v67, (4 * v68));
  if (v3)
  {
    v19 = 0;
    v20 = v65;
    v21 = (_BYTE *)(*((_QWORD *)v64 + 10) + 3);
    do
    {
      v22 = *v21 & 0x7F;
      if ((~*(v21 - 1) & 0x7F) == 0 || v22 == 127)
      {
        v20[v19 >> 5] |= 1 << v19;
        v20[(v19 + 1) >> 5] |= 1 << (v19 + 1);
      }
      if (physx::Gu::HeightField::isCollisionVertexPreca(v64, v19, 0, v19, v17, v18))
        v23 = 0x80;
      else
        v23 = 0;
      *v21 = v23 | v22;
      v21 += 4;
      ++v19;
    }
    while (v3 != v19);
  }
  v59 = v4;
  v60 = v3;
  v24 = v4 - 1;
  if (v4 > 1)
  {
    v25 = v3 - 1;
    v26 = v60;
    v27 = 1;
    v61 = 1;
    v62 = 0;
    while (1)
    {
      v28 = v64;
      if (v60)
        break;
LABEL_51:
      bzero(*(&v65 + 2 * v62), (4 * *((_DWORD *)&v65 + 4 * v62 + 2)));
      v61 ^= 1uLL;
      v62 ^= 1uLL;
      ++v27;
      v26 += v60;
      if (v27 == v59)
        goto LABEL_52;
    }
    v29 = 0;
    v30 = *((_QWORD *)v64 + 10);
    v31 = &v65 + 2 * v62;
    v63 = &v65 + 2 * v61;
    while (1)
    {
      v32 = (__int16 *)(v30 + 4 * (v26 + v29));
      v34 = (char *)v32 + 3;
      v33 = *((_BYTE *)v32 + 3);
      v35 = v33 & 0x7F;
      v36 = v29 >> 5;
      if ((~*((unsigned __int8 *)v32 + 2) & 0x7F) == 0 || v35 == 127)
      {
        v37 = *v31;
        *((_DWORD *)*v31 + v36) |= 1 << v29;
        v38 = 1 << (v29 + 1);
        v39 = (v29 + 1) >> 5;
        v37[v39] |= v38;
        v40 = *v63;
        *((_DWORD *)*v63 + v36) |= 1 << v29;
        v40[v39] |= v38;
      }
      if (!v29 || v25 == v29 || v27 == v24 || ((*((_DWORD *)*v31 + v36) >> v29) & 1) != 0)
      {
        isCollisionVertexPreca = physx::Gu::HeightField::isCollisionVertexPreca(v28, v26 + v29, v27, v29, v17, v18);
        v28 = v64;
        if (isCollisionVertexPreca)
          v42 = 0x80;
        else
          v42 = 0;
        v43 = v42 | v35;
        goto LABEL_39;
      }
      v44 = 2 * *v32;
      v45 = *((_DWORD *)v28 + 15);
      if (*((_DWORD *)v28 + 14) - 1 > v27)
        break;
      if (v29 < (v45 - 1))
      {
        v46 = 0;
LABEL_47:
        v47 = v44
            - (*(__int16 *)(v30 + 4 * (v26 + v29 + 1))
             + *(__int16 *)(v30 + 4 * (v26 + v29 - 1)));
LABEL_48:
        if (((v47 ^ v46) & 0x80000000) == 0 || *((float *)v28 + 22) >= (float)(v47 + v46))
          goto LABEL_40;
      }
      v43 = v33 | 0x80;
LABEL_39:
      *v34 = v43;
LABEL_40:
      if (v60 == ++v29)
        goto LABEL_51;
    }
    v46 = v44
        - (*(__int16 *)(v30 + 4 * (v26 + v29 + v45))
         + *(__int16 *)(v30 + 4 * (v26 + v29 - v45)));
    if (v29 < (v45 - 1))
      goto LABEL_47;
    v47 = 0;
    goto LABEL_48;
  }
LABEL_52:
  v48 = 0;
  v49 = v64;
  do
  {
    v50 = (char *)&v65 + v48;
    if (*(void **)((char *)&v67 + v48))
    {
      if ((*((_DWORD *)v50 + 6) & 0x80000000) == 0)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v49 = v64;
      }
    }
    *((_QWORD *)v50 + 2) = 0;
    v48 -= 16;
  }
  while (v48 != -32);
  v51 = *((_DWORD *)v49 + 14);
  v52 = *((_DWORD *)v49 + 15);
  *((_DWORD *)v49 + 27) = v52 * v51;
  v53 = *((float *)v49 + 28);
  v54 = *((float *)v49 + 29);
  v55 = (float)(v51 - 1) * 0.5;
  v56 = (float)(v52 - 1) * 0.5;
  *((float *)v49 + 8) = v55;
  *((float *)v49 + 9) = (float)(v53 + v54) * 0.5;
  *((float *)v49 + 10) = v56;
  *((float *)v49 + 11) = v55;
  *((float *)v49 + 12) = (float)(v54 - v53) * 0.5;
  *((float *)v49 + 13) = v56;
  return 1;
}

size_t physx::Gu::HeightField::saveCells(physx::Gu::HeightField *this, void *__dst, unsigned int a3)
{
  unsigned int v3;
  size_t v4;

  v3 = 4 * *((_DWORD *)this + 15) * *((_DWORD *)this + 14);
  if (v3 >= a3)
    v4 = a3;
  else
    v4 = v3;
  memcpy(__dst, *((const void **)this + 10), v4);
  return v4;
}

uint64_t physx::getVertexEdgeIndices(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, _DWORD *a5)
{
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  _DWORD *v17;
  unsigned int v18;
  _DWORD *v19;

  v5 = *(_DWORD *)(a1 + 56);
  v6 = *(_DWORD *)(a1 + 60);
  if (a3)
  {
    v7 = a2 - v6;
    v8 = 3 * (a2 - v6);
    *a5 = v8 + 2;
    a5[1] = a2 - v6;
    a5[2] = a3 - 1;
    a5[3] = a4;
    if (v6 - 1 <= a4)
    {
      v10 = 1;
      goto LABEL_12;
    }
    if (*(char *)(*(_QWORD *)(a1 + 80) + 4 * v7 + 2) < 0)
    {
      v9 = 1;
    }
    else
    {
      a5[4] = v8 + 1;
      a5[5] = v7;
      a5[6] = a3 - 1;
      a5[7] = a4;
      v9 = 2;
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    if (v6 - 1 <= a4)
      goto LABEL_12;
  }
  v11 = &a5[4 * v9];
  *v11 = 3 * a2;
  v11[1] = a2;
  v11[2] = a3;
  v11[3] = a4;
  v10 = v9 + 1;
  if (v5 - 1 > a3 && *(char *)(*(_QWORD *)(a1 + 80) + 4 * a2 + 2) < 0)
  {
    v12 = &a5[4 * v10];
    *v12 = 3 * a2 + 1;
    v12[1] = a2;
    v12[2] = a3;
    v12[3] = a4;
    v10 = v9 + 2;
  }
LABEL_12:
  if (v5 - 1 <= a3)
  {
    if (!a4)
      return v10;
    v15 = a2 - 1;
  }
  else
  {
    v13 = &a5[4 * v10];
    *v13 = 3 * a2 + 2;
    v13[1] = a2;
    v13[2] = a3;
    v13[3] = a4;
    v14 = (v10 + 1);
    if (!a4)
      return v14;
    v15 = a2 - 1;
    if (*(char *)(*(_QWORD *)(a1 + 80) + 4 * (a2 - 1) + 2) < 0)
    {
      LODWORD(v10) = v10 + 1;
    }
    else
    {
      v16 = &a5[4 * v14];
      *v16 = 3 * v15 + 1;
      v16[1] = v15;
      v16[2] = a3;
      v16[3] = a4 - 1;
      LODWORD(v10) = v10 + 2;
    }
  }
  v17 = &a5[4 * v10];
  *v17 = 3 * v15;
  v17[1] = v15;
  v17[2] = a3;
  v17[3] = a4 - 1;
  v14 = (v10 + 1);
  if (a3)
  {
    v18 = ~v6 + a2;
    if (*(char *)(*(_QWORD *)(a1 + 80) + 4 * v18 + 2) < 0)
    {
      v19 = &a5[4 * v14];
      *v19 = 3 * v18 + 1;
      v19[1] = v18;
      v19[2] = a3 - 1;
      v19[3] = a4 - 1;
      return (v10 + 2);
    }
  }
  return v14;
}

BOOL physx::Gu::HeightField::isSolidVertex(physx::Gu::HeightField *this, unsigned int a2, unsigned int a3, unsigned int a4, char *a5, BOOL *a6)
{
  unsigned int VertexEdgeIndices;
  unint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  char *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  int v42;
  char v44;
  char v45;
  int v46;
  _DWORD v47[8];
  int v48;
  _QWORD v49[16];

  v49[15] = *MEMORY[0x24BDAC8D0];
  VertexEdgeIndices = physx::getVertexEdgeIndices((uint64_t)this, a2, a3, a4, &v48);
  if (!VertexEdgeIndices)
  {
    v44 = 0;
    v30 = 0;
    goto LABEL_46;
  }
  v9 = VertexEdgeIndices;
  v10 = *((_DWORD *)this + 15);
  v11 = *((_DWORD *)this + 14) - 1;
  v12 = v10 - 1;
  v13 = (unsigned int *)v49;
  v14 = &v45;
  v15 = v47;
  v16 = VertexEdgeIndices;
  do
  {
    v17 = *(v13 - 1);
    v18 = *v13;
    v19 = v13[1];
    v20 = -3 * v17 + *(v13 - 2);
    if (v20 == 2)
    {
      if (v18 >= v11)
        goto LABEL_17;
      if (v19)
      {
        *(_DWORD *)v14 = 2 * v17 - 1;
        v21 = 1;
      }
      else
      {
        v21 = 0;
      }
      if (v19 < v12)
      {
        v23 = 2 * v17;
        v24 = v21 + 1;
LABEL_27:
        *(_DWORD *)&v14[4 * v21] = v23;
        LODWORD(v21) = v24;
      }
    }
    else
    {
      if (v20 == 1)
      {
        if (v18 >= v11 || v19 >= v12)
        {
LABEL_17:
          LODWORD(v21) = 0;
          goto LABEL_28;
        }
        *(_DWORD *)v14 = 2 * v17;
        v23 = (2 * v17) | 1;
        v21 = 1;
        v24 = 2;
        goto LABEL_27;
      }
      if (v20 || v19 >= v12)
        goto LABEL_17;
      if (v18)
      {
        *(_DWORD *)v14 = (*(unsigned __int8 *)(*((_QWORD *)this + 10) + 4 * (v17 - v10) + 2) >> 7) ^ 1 | (2 * (v17 - v10));
        v21 = 1;
      }
      else
      {
        v21 = 0;
      }
      if (v18 < v11)
      {
        v25 = *(char *)(*((_QWORD *)this + 10) + 4 * v17 + 2);
        v26 = 2 * v17;
        if (v25 < 0)
          v23 = v26 | 1;
        else
          v23 = v26;
        v24 = v21 + 1;
        goto LABEL_27;
      }
    }
LABEL_28:
    v13 += 4;
    *v15++ = v21;
    v14 += 8;
    --v16;
  }
  while (v16);
  v27 = 0;
  *a5 = 0;
  v28 = *((_QWORD *)this + 10);
  v29 = (unsigned int *)&v46;
  v30 = 1;
  while (1)
  {
    v31 = *(v29 - 1);
    v32 = v28 + ((2 * v31) & 0x1FFFFFFFCLL);
    v33 = (_BYTE *)(v32 + 2);
    v34 = (_BYTE *)(v32 + 3);
    if ((v31 & 1) != 0)
      v35 = v34;
    else
      v35 = v33;
    v36 = *v35 & 0x7F;
    if (v47[v27] < 2u)
    {
      if (v36 != 127)
        return v30;
      goto LABEL_43;
    }
    v37 = *v29;
    v38 = v28 + ((2 * v37) & 0x1FFFFFFFCLL);
    v39 = (_BYTE *)(v38 + 2);
    v40 = (_BYTE *)(v38 + 3);
    if ((v37 & 1) != 0)
      v41 = v40;
    else
      v41 = v39;
    v42 = *v41 & 0x7F;
    if (v36 != 127)
    {
      *a5 = 1;
      if (v42 == 127)
        return v30;
      goto LABEL_43;
    }
    if (v42 != 127)
      break;
LABEL_43:
    v30 = ++v27 < v9;
    v29 += 2;
    if (v9 == v27)
      return v30;
  }
  v44 = 1;
LABEL_46:
  *a5 = v44;
  return v30;
}

uint64_t physx::Gu::HeightField::computeCellCoordinates(physx::Gu::HeightField *this, float a2, float a3, float *a4, float *a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v5 = fmaxf(a2, 0.0);
  v6 = fmaxf(a3, 0.0);
  v7 = fabsf(v6 + 1.0);
  v8 = (float)(1.0 - (float)(fabsf(v5 + 1.0) * 0.000001)) + *((float *)this + 16);
  if (v5 >= v8)
    v5 = v8;
  if (v6 >= (float)((float)(1.0 - (float)(v7 * 0.000001)) + *((float *)this + 17)))
    v6 = (float)(1.0 - (float)(v7 * 0.000001)) + *((float *)this + 17);
  v9 = floorf(v5);
  *a4 = v5 - v9;
  v10 = floorf(v6);
  *a5 = v6 - v10;
  return (float)(v10 + (float)(v9 * *((float *)this + 18)));
}

float physx::Gu::HeightFieldUtil::computeLocalBounds(uint64_t a1, float *a2)
{
  float *v2;
  float *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float result;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;

  v3 = *(float **)(a1 + 16);
  v2 = *(float **)(a1 + 24);
  v5 = v2[4];
  v4 = v2[5];
  v6 = v2[6];
  v7 = v5 * 0.0;
  v8 = (float)(v5 * 0.0) * 0.0;
  v9 = (float)(v6 * 0.0) * 0.0;
  v10 = (float)(v4 + v8) + v9;
  v11 = (float)((float)(v4 * 0.0) + (float)(v5 * 0.0)) + v9;
  v12 = (float)(v6 * 0.0) + (float)((float)(v4 * 0.0) + v8);
  v13 = (float)(v4 * 0.0) * 0.0;
  v14 = (float)(v5 + v13) + v9;
  v15 = (float)(v13 + v7) + (float)(v6 * 0.0);
  v16 = v6 + (float)(v13 + v8);
  v17 = v3[8] - v3[11];
  v18 = v3[9] - v3[12];
  v19 = v3[10] - v3[13];
  v20 = v14 * v18;
  v21 = (float)(v10 * v17) + (float)(v11 * v18);
  v22 = (float)(v12 * v17) + (float)(v15 * v18);
  result = (float)((float)(v11 * v17) + v20) + (float)(v15 * v19);
  *a2 = v21 + (float)(v12 * v19);
  a2[1] = result;
  a2[2] = v22 + (float)(v16 * v19);
  v24 = v3[8] + v3[11];
  v25 = v3[9] + v3[12];
  v26 = v3[10] + v3[13];
  v27 = (float)((float)(v11 * v24) + (float)(v14 * v25)) + (float)(v15 * v26);
  a2[3] = (float)((float)(v10 * v24) + (float)(v11 * v25)) + (float)(v12 * v26);
  a2[4] = v27;
  a2[5] = (float)((float)(v12 * v24) + (float)(v15 * v25)) + (float)(v16 * v26);
  v28 = (float)(result - v27) + 0.0005;
  if (v28 > 0.0)
  {
    a2[4] = v27 + (float)(v28 * 0.6);
    result = result - (float)(v28 * 0.6);
    a2[1] = result;
  }
  return result;
}

uint64_t physx::Gu::HeightFieldUtil::getFaceIndexAtShapePoint(physx::Gu::HeightFieldUtil *this, float a2, float a3)
{
  float v4;
  uint64_t result;
  float v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;

  v4 = *(float *)this * a2;
  result = 0xFFFFFFFFLL;
  if (v4 >= 0.0)
  {
    v6 = *((float *)this + 2) * a3;
    if (v6 >= 0.0)
    {
      v7 = *((_QWORD *)this + 2);
      if (v4 < (float)(*(float *)(v7 + 64) + 1.0) && v6 < (float)(*(float *)(v7 + 68) + 1.0))
      {
        v14 = 0;
        v8 = physx::Gu::HeightField::computeCellCoordinates((physx::Gu::HeightField *)v7, v4, v6, (float *)&v14 + 1, (float *)&v14);
        v9 = *(_QWORD *)(v7 + 80);
        if (*(char *)(v9 + 4 * v8 + 2) >= 0)
          v10 = (float)(*((float *)&v14 + 1) + *(float *)&v14) > 1.0;
        else
          v10 = *(float *)&v14 > *((float *)&v14 + 1);
        v11 = v9 + 4 * (v8 & 0x7FFFFFFF);
        v12 = (unsigned __int8 *)(v11 + 2);
        v13 = (unsigned __int8 *)(v11 + 3);
        if (!v10)
          v13 = v12;
        if ((~*v13 & 0x7F) != 0)
          return v10 | (2 * v8);
        else
          return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

uint64_t physx::Gu::HeightFieldUtil::findClosestPointsOnCell(uint64_t a1, unsigned int a2, unsigned int a3, float *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  float *v16;
  uint64_t v17;
  int v18;
  int v19;
  float *v20;
  int v21;
  uint64_t v22;
  int v24;
  float v25;
  int VertexFaceIndex;
  unsigned int v27;
  float v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  float v34;
  int EdgeFaceIndex;
  float v36;
  BOOL v37;
  uint64_t v38;
  float v39;
  BOOL v40;
  uint64_t v41;
  float32x2_t *v42;
  float32x2_t v43;
  float v44;
  uint64_t v45;
  float v46;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  _BOOL4 v53;
  _BOOL4 v54;
  uint64_t v55;
  _BYTE v57[12];

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_DWORD *)(v9 + 60);
  v11 = a3 + v10 * a2;
  v12 = *(_DWORD *)(v9 + 56) - 2;
  v51 = v12;
  v52 = v10;
  v13 = v10 - 2 == a3;
  HIDWORD(v55) = v13;
  if (v12 != a2)
    v13 = 0;
  v53 = v12 == a2;
  v54 = v13;
  v50 = *(_QWORD *)(v9 + 80);
  v14 = v50 + 4 * (v11 & 0x7FFFFFFF);
  v15 = *(_BYTE *)(v14 + 3) & 0x7F;
  if ((~*(unsigned __int8 *)(v14 + 2) & 0x7F) != 0)
  {
    v16 = a4;
    physx::Gu::HeightFieldUtil::findProjectionOnTriangle(a1, 2 * v11, a2, a3, a4, (float *)v57);
    if (v19)
    {
      LODWORD(v55) = 0;
      v53 = 0;
      *(_QWORD *)a5 = *(_QWORD *)v57;
      *(_DWORD *)(a5 + 8) = *(_DWORD *)&v57[8];
      v17 = 1;
    }
    else
    {
      v17 = 0;
      LODWORD(v55) = 1;
    }
    v18 = v19 ^ 1;
  }
  else
  {
    v16 = a4;
    v17 = 0;
    v18 = 1;
    LODWORD(v55) = 1;
  }
  if (v15 == 127)
  {
    v20 = v16;
  }
  else
  {
    v20 = v16;
    physx::Gu::HeightFieldUtil::findProjectionOnTriangle(a1, (2 * v11) | 1, a2, a3, v16, (float *)v57);
    if (v21)
    {
      v55 = 0;
      v54 = 0;
      v22 = a5 + 12 * v17;
      *(_QWORD *)v22 = *(_QWORD *)v57;
      *(_DWORD *)(v22 + 8) = *(_DWORD *)&v57[8];
      v17 = (v17 + 1);
    }
  }
  if (!(_DWORD)v17)
  {
    v24 = 3 * v11;
    physx::Gu::HeightFieldUtil::findClosestPointOnEdge(a1, 3 * v11, v11, a2, a3, v20, (float *)v57);
    v49 = 3 * v11;
    if (v25 <= 0.0)
    {
      if (v18)
      {
        if (physx::Gu::HeightFieldUtil::getVertexFaceIndex((physx::Gu::HeightFieldUtil *)v9, v11, a2, a3) == -1)
        {
          v17 = 0;
        }
        else
        {
          *(_QWORD *)a5 = *(_QWORD *)v57;
          *(_DWORD *)(a5 + 8) = *(_DWORD *)&v57[8];
          v17 = 1;
        }
        v27 = v24 + 2;
        physx::Gu::HeightFieldUtil::findClosestPointOnEdge(a1, v24 + 2, v11, a2, a3, v20, (float *)v57);
        if (v34 <= 0.0)
          goto LABEL_43;
        if (v34 < 1.0)
        {
LABEL_37:
          EdgeFaceIndex = physx::Gu::HeightFieldUtil::getEdgeFaceIndex((physx::Gu::HeightFieldUtil *)v9, v27);
LABEL_40:
          if (EdgeFaceIndex == -1)
            goto LABEL_43;
          v31 = v17;
          v32 = 12 * v17;
          v33 = *(_DWORD *)v57;
          v30 = a5;
          goto LABEL_42;
        }
LABEL_38:
        if (!v53)
          goto LABEL_43;
        EdgeFaceIndex = physx::Gu::HeightFieldUtil::getVertexFaceIndex((physx::Gu::HeightFieldUtil *)v9, v11 + v52, a2 + 1, a3);
        goto LABEL_40;
      }
      goto LABEL_25;
    }
    if (v25 >= 1.0)
    {
      if (!HIDWORD(v55))
        goto LABEL_25;
      VertexFaceIndex = physx::Gu::HeightFieldUtil::getVertexFaceIndex((physx::Gu::HeightFieldUtil *)v9, v11 + 1, a2, a3 + 1);
    }
    else
    {
      VertexFaceIndex = physx::Gu::HeightFieldUtil::getEdgeFaceIndex((physx::Gu::HeightFieldUtil *)v9, 3 * v11);
    }
    if (VertexFaceIndex != -1)
    {
      *(_QWORD *)a5 = *(_QWORD *)v57;
      *(_DWORD *)(a5 + 8) = *(_DWORD *)&v57[8];
      v17 = 1;
      goto LABEL_26;
    }
LABEL_25:
    v17 = 0;
LABEL_26:
    if ((v18 | v53) != 1)
      goto LABEL_43;
    v27 = v24 + 2;
    physx::Gu::HeightFieldUtil::findClosestPointOnEdge(a1, v24 + 2, v11, a2, a3, v20, (float *)v57);
    if (v28 <= 0.0)
    {
      if (!v18
        || (v29 = physx::Gu::HeightFieldUtil::getVertexFaceIndex((physx::Gu::HeightFieldUtil *)v9, v11, a2, a3),
            v30 = a5,
            v29 == -1))
      {
LABEL_43:
        if (v51 == a2)
        {
          physx::Gu::HeightFieldUtil::findClosestPointOnEdge(a1, 3 * (v11 + v52), v11 + v52, a2 + 1, a3, v20, (float *)v57);
          v37 = v36 > 0.0 && v36 < 1.0;
          if (v37
            && physx::Gu::HeightFieldUtil::getEdgeFaceIndex((physx::Gu::HeightFieldUtil *)v9, 3 * (v11 + v52)) != -1)
          {
            v38 = a5 + 12 * v17;
            *(_QWORD *)v38 = *(_QWORD *)v57;
            *(_DWORD *)(v38 + 8) = *(_DWORD *)&v57[8];
            v17 = (v17 + 1);
          }
        }
        if (HIDWORD(v55))
        {
          physx::Gu::HeightFieldUtil::findClosestPointOnEdge(a1, v49 + 5, v11 + 1, a2, a3 + 1, v20, (float *)v57);
          v40 = v39 > 0.0 && v39 < 1.0;
          if (v40
            && physx::Gu::HeightFieldUtil::getEdgeFaceIndex((physx::Gu::HeightFieldUtil *)v9, v49 + 5) != -1)
          {
            v41 = a5 + 12 * v17;
            *(_QWORD *)v41 = *(_QWORD *)v57;
            *(_DWORD *)(v41 + 8) = *(_DWORD *)&v57[8];
            v17 = (v17 + 1);
          }
        }
        if (v54
          && physx::Gu::HeightFieldUtil::getVertexFaceIndex((physx::Gu::HeightFieldUtil *)v9, v11 + v52 + 1, a2 + 1, a3 + 1) != -1)
        {
          v42 = *(float32x2_t **)(a1 + 24);
          v43.f32[0] = (float)*(__int16 *)(v50 + 4 * (v11 + v52 + 1));
          v44 = v42[3].f32[0] * (float)(a3 + 1);
          v45 = a5 + 12 * v17;
          v43.f32[1] = (float)(a2 + 1);
          *(int32x2_t *)v45 = vrev64_s32((int32x2_t)vmul_f32(v42[2], v43));
          *(float *)(v45 + 8) = v44;
          v17 = (v17 + 1);
        }
        if ((_DWORD)v55
          && physx::Gu::HeightFieldUtil::getEdgeFaceIndex((physx::Gu::HeightFieldUtil *)v9, v49 + 1) != -1)
        {
          physx::Gu::HeightFieldUtil::findClosestPointOnEdge(a1, v49 + 1, v11, a2, a3, v20, (float *)v57);
          if (v46 > 0.0 && v46 < 1.0)
          {
            v48 = a5 + 12 * v17;
            *(_QWORD *)v48 = *(_QWORD *)v57;
            *(_DWORD *)(v48 + 8) = *(_DWORD *)&v57[8];
            return (v17 + 1);
          }
        }
        return v17;
      }
      v31 = v17;
      v32 = 12 * v17;
      v33 = *(_DWORD *)v57;
LABEL_42:
      *(_DWORD *)(v30 + v32) = v33;
      *(_QWORD *)(v30 + 12 * v31 + 4) = *(_QWORD *)&v57[4];
      v17 = (v17 + 1);
      goto LABEL_43;
    }
    if (v28 < 1.0)
    {
      if (!v18)
        goto LABEL_43;
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  return v17;
}

float physx::Gu::HeightFieldUtil::findProjectionOnTriangle(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, float *a5, float *a6)
{
  float *v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  __int16 *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float result;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  _BOOL4 v32;

  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(float **)(a1 + 24);
  v8 = v6[4];
  v9 = *(_QWORD *)(v7 + 80);
  v10 = (__int16 *)(v9 + 4 * (a2 >> 1));
  v11 = v8 * (float)*v10;
  v12 = v8 * (float)*(__int16 *)(v9 + 4 * ((a2 >> 1) + 1));
  v13 = v8 * (float)*(__int16 *)(v9 + 4 * (*(_DWORD *)(v7 + 60) + (a2 >> 1)));
  v14 = v8 * (float)*(__int16 *)(v9 + 4 * (*(_DWORD *)(v7 + 60) + (a2 >> 1) + 1));
  if ((char)v10[1] < 0)
  {
    v21 = v6[6];
    v17 = *(float *)(a1 + 8);
    if ((a2 & 1) != 0)
    {
      result = v6[5] * (float)a3;
      v16 = v21 * (float)(a4 + 1);
      v17 = -v17;
      v18 = *(float *)a1;
      v19 = v12;
      v20 = v11;
      v11 = v14;
    }
    else
    {
      result = v6[5] * (float)(a3 + 1);
      v16 = v21 * (float)a4;
      v18 = -*(float *)a1;
      v19 = v13;
      v20 = v14;
    }
  }
  else if ((a2 & 1) != 0)
  {
    result = v6[5] * (float)(a3 + 1);
    v16 = v6[6] * (float)(a4 + 1);
    v17 = -*(float *)(a1 + 8);
    v18 = -*(float *)a1;
    v19 = v14;
    v20 = v13;
    v11 = v12;
  }
  else
  {
    result = v6[5] * (float)a3;
    v16 = v6[6] * (float)a4;
    v17 = *(float *)(a1 + 8);
    v18 = *(float *)a1;
    v19 = v11;
    v20 = v12;
    v11 = v13;
  }
  v22 = *a5 - result;
  v23 = a5[1] - v19;
  v24 = a5[2] - v16;
  v25 = -(float)((float)(v20 - v19) * v17);
  v26 = -(float)((float)(v11 - v19) * v18);
  v27 = (float)((float)(v23 + (float)(v26 * v22)) + (float)(v25 * v24))
      * (float)(1.0 / (float)((float)((float)(v26 * v26) + (float)(v25 * v25)) + 1.0));
  v28 = v22 - (float)(v26 * v27);
  v29 = v24 - (float)(v25 * v27);
  v30 = v18 * v28;
  v31 = v17 * v29;
  v32 = v30 > 0.0;
  if (v31 <= 0.0)
    v32 = 0;
  if ((float)(v30 + v31) < 1.0 && v32)
  {
    result = result + v28;
    *a6 = result;
    a6[1] = v19 + (float)(v23 - v27);
    a6[2] = v16 + v29;
  }
  return result;
}

uint64_t physx::Gu::HeightFieldUtil::findClosestPointOnEdge(uint64_t result, int a2, unsigned int a3, unsigned int a4, unsigned int a5, float *a6, float *a7)
{
  int v7;
  float v8;
  float *v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;

  v7 = -3 * a3 + a2;
  v8 = 0.0;
  if (v7 == 2)
  {
    v19 = *(_QWORD *)(result + 16);
    v20 = *(float **)(result + 24);
    v21 = *(_QWORD *)(v19 + 80);
    v22 = v20[4];
    v18 = v20[5];
    v12 = v22 * (float)*(__int16 *)(v21 + 4 * a3);
    v23 = v22 * (float)*(__int16 *)(v21 + 4 * (*(_DWORD *)(v19 + 60) + a3));
    v14 = v18 * (float)a4;
    v15 = v20[6] * (float)a5;
    v16 = v23 - v12;
    v17 = (float)(v16 * v16) + (float)(v18 * v18);
  }
  else if (v7 == 1)
  {
    v24 = *(_QWORD *)(result + 16);
    v25 = *(_QWORD *)(v24 + 80);
    v26 = *(float **)(result + 24);
    v27 = v26[4];
    v18 = v26[5];
    if (*(char *)(v25 + 4 * a3 + 2) < 0)
    {
      v12 = v27 * (float)*(__int16 *)(v25 + 4 * a3);
      v30 = v27 * (float)*(__int16 *)(v25 + 4 * (a3 + *(_DWORD *)(v24 + 60) + 1));
      v14 = v18 * (float)a4;
      v8 = v26[6];
      v15 = v8 * (float)a5;
      v16 = v30 - v12;
      v29 = v8 * v8;
    }
    else
    {
      v12 = v27 * (float)*(__int16 *)(v25 + 4 * (a3 + 1));
      v14 = v18 * (float)a4;
      v28 = v26[6];
      v15 = v28 * (float)(a5 + 1);
      v16 = (float)(v27 * (float)*(__int16 *)(v25 + 4 * (*(_DWORD *)(v24 + 60) + a3))) - v12;
      v8 = -v28;
      v29 = v28 * v28;
    }
    v17 = (float)(v29 + (float)(v18 * v18)) + (float)(v16 * v16);
  }
  else if (v7)
  {
    v18 = 0.0;
    v16 = 0.0;
    v14 = 0.0;
    v12 = 0.0;
    v15 = 0.0;
    v17 = 0.0;
  }
  else
  {
    v9 = *(float **)(result + 24);
    v10 = *(_QWORD *)(*(_QWORD *)(result + 16) + 80);
    v11 = v9[4];
    v12 = v11 * (float)*(__int16 *)(v10 + 4 * a3);
    v13 = v11 * (float)*(__int16 *)(v10 + 4 * (a3 + 1));
    v14 = v9[5] * (float)a4;
    v8 = v9[6];
    v15 = v8 * (float)a5;
    v16 = v13 - v12;
    v17 = (float)(v16 * v16) + (float)(v8 * v8);
    v18 = 0.0;
  }
  v31 = (float)((float)((float)(v16 * (float)(a6[1] - v12)) + (float)((float)(*a6 - v14) * v18))
              + (float)((float)(a6[2] - v15) * v8))
      / v17;
  if (v31 >= 0.0)
  {
    if (v31 <= 1.0)
    {
      v14 = v14 + (float)(v18 * v31);
      v12 = v12 + (float)(v16 * v31);
      v15 = v15 + (float)(v8 * v31);
    }
    else
    {
      v14 = v18 + v14;
      v12 = v16 + v12;
      v15 = v8 + v15;
    }
  }
  *a7 = v14;
  a7[1] = v12;
  a7[2] = v15;
  return result;
}

uint64_t physx::Gu::HeightFieldUtil::getVertexFaceIndex(physx::Gu::HeightFieldUtil *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int VertexEdgeIndices;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  _DWORD v9[32];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  VertexEdgeIndices = physx::getVertexEdgeIndices((uint64_t)this, a2, a3, a4, v9);
  if (!VertexEdgeIndices)
    return 0xFFFFFFFFLL;
  v6 = VertexEdgeIndices;
  v7 = 0;
  while (1)
  {
    result = physx::Gu::HeightFieldUtil::getEdgeFaceIndex(this, v9[4 * v7], v9[4 * v7 + 1], v9[4 * v7 + 2], v9[4 * v7 + 3]);
    if ((_DWORD)result != -1)
      break;
    v7 += 2;
    if (v7 >= v6)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t physx::Gu::HeightFieldUtil::getEdgeFaceIndex(physx::Gu::HeightFieldUtil *this, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = a2 / 3;
  v3 = *((_DWORD *)this + 15);
  v4 = a2 / 3 / v3;
  v5 = a2 / 3 % v3;
  LODWORD(v6) = -3 * (a2 / 3);
  v7 = a2 % 3;
  if (a2 % 3 == 2)
  {
    LODWORD(v6) = *((_DWORD *)this + 14);
    if (v4 >= (int)v6 - 1)
      goto LABEL_29;
    if (v5)
    {
      LODWORD(v6) = 2 * v2 - 1;
      v19 = v6;
      v8 = 1;
    }
    else
    {
      v8 = 0;
    }
    if (v5 >= v3 - 1)
      goto LABEL_28;
    v10 = 2 * v2;
  }
  else
  {
    if (v7 == 1)
    {
      LODWORD(v6) = *((_DWORD *)this + 14) - 1;
      if (v5 < v3 - 1 && v4 < v6)
      {
        v6 = 2 * v2;
        v20 = (2 * v2) | 1;
        goto LABEL_22;
      }
      goto LABEL_29;
    }
    if (v7 || v5 >= v3 - 1)
    {
LABEL_29:
      v17 = (unsigned __int8 *)(*((_QWORD *)this + 10) + 4 * (v6 >> 1) + 2);
      goto LABEL_30;
    }
    LODWORD(v6) = v2 - v3;
    if (v2 >= v3)
    {
      LODWORD(v6) = (*(char *)(*((_QWORD *)this + 10) + 4 * v6 + 2) >> 7) + 2 * v6 + 1;
      v19 = v6;
      v8 = 1;
    }
    else
    {
      v8 = 0;
    }
    if (v4 >= *((_DWORD *)this + 14) - 1)
    {
LABEL_28:
      if ((v6 & 1) != 0)
      {
        v17 = (unsigned __int8 *)(*((_QWORD *)this + 10) + 4 * (v6 >> 1) + 3);
LABEL_30:
        if ((~*v17 & 0x7F) != 0)
          return v6;
        else
          return 0xFFFFFFFFLL;
      }
      goto LABEL_29;
    }
    v10 = (*(unsigned __int8 *)(*((_QWORD *)this + 10) + 4 * v2 + 2) >> 7) | (2 * v2);
  }
  *(&v19 + v8) = v10;
  v6 = v19;
  if (!v8)
    goto LABEL_28;
LABEL_22:
  v11 = *((_QWORD *)this + 10);
  v12 = v11 + 4 * (v6 >> 1);
  v13 = (unsigned __int8 *)(v12 + 2);
  v14 = (unsigned __int8 *)(v12 + 3);
  if ((v6 & 1) == 0)
    v14 = v13;
  if ((~*v14 & 0x7F) == 0)
  {
    LODWORD(v6) = v20;
    v15 = v11 + ((2 * v20) & 0x1FFFFFFFCLL);
    v16 = (unsigned __int8 *)(v15 + 2);
    v17 = (unsigned __int8 *)(v15 + 3);
    if ((v20 & 1) == 0)
      v17 = v16;
    goto LABEL_30;
  }
  return v6;
}

